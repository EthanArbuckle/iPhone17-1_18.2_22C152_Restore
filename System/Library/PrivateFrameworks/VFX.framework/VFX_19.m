uint64_t sub_1B6D1CEB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = sub_1B6E30B98();
  if (v9) {
    v9 += a1 - sub_1B6E30BC8();
  }
  v10 = sub_1B6E30BB8();
  v11 = a2 - a1;
  if (v10 < a2 - a1) {
    v11 = v10;
  }
  v12 = v9 + v11;
  if (v9) {
    v13 = v12;
  }
  else {
    v13 = 0;
  }
  sub_1B6D1C144(v9, v13, a4, a5);
  return swift_unknownObjectRelease();
}

void sub_1B6D1CF5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6D1CC08();
    unint64_t v7 = a3(a1, &type metadata for BundleInfo.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6D1CFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BundleInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6D1D024(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6D1FBB4(255, (unint64_t *)&qword_1EB980110, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6D1D0A8()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 7) {
    return 7;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D1D0F4()
{
  unint64_t v0 = (void *)sub_1B6E31768();
  id v1 = objc_msgSend(v0, sel_pathExtension);

  uint64_t v2 = sub_1B6E31798();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();

  BOOL v5 = v2 == 1852797802 && v4 == 0xE400000000000000;
  if (v5 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v7 = v2 == 0x7473696C70 && v4 == 0xE500000000000000;
    if (v7 || (sub_1B6E334B8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (v2 == 0x6E6962786676 && v4 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_1B6E334B8();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 5;
      }
    }
  }
}

uint64_t sub_1B6D1D278(uint64_t a1, uint64_t a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint32_t v4 = _dyld_image_count();
  if (!v4) {
    return 0;
  }
  uint32_t v5 = v4;
  while (1)
  {
    image_header = _dyld_get_image_header(--v5);
    if (image_header)
    {
      v15[0] = 0;
      BOOL v7 = getsectiondata((const mach_header_64 *)image_header, "__DATA_CONST", "__vfx_script_tbl", v15);
      if (v7)
      {
        if (v15[0] >= 0x10) {
          break;
        }
      }
    }
LABEL_4:
    if (!v5) {
      return 0;
    }
  }
  char v8 = v7;
  v9 = &v7[v15[0] & 0xFFFFFFFFFFFFFFF0];
  while (1)
  {
    if (*(void *)v8)
    {
      uint64_t v10 = *((void *)v8 + 1);
      if (sub_1B6E31968() == a1 && v11 == a2)
      {
        swift_bridgeObjectRelease();
        if (v10) {
          return v10;
        }
        goto LABEL_4;
      }
      char v13 = sub_1B6E334B8();
      swift_bridgeObjectRelease();
      if (v13) {
        break;
      }
    }
    v8 += 16;
    if (v8 == v9) {
      goto LABEL_4;
    }
  }
  if (!v10) {
    goto LABEL_4;
  }
  return v10;
}

void sub_1B6D1D3C0(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, void (**a11)(char *, char *, uint64_t), unint64_t a12, unsigned __int8 a13)
{
  uint64_t v174 = a8;
  v173 = a7;
  uint64_t v164 = a6;
  id v178 = a4;
  unint64_t v175 = a3;
  uint64_t v169 = a2;
  uint64_t v176 = a1;
  uint64_t v184 = *MEMORY[0x1E4F143B8];
  uint64_t v167 = sub_1B6E31118();
  uint64_t v166 = *(void *)(v167 - 8);
  MEMORY[0x1F4188790](v167, v14);
  v165 = (char *)&v161 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = sub_1B6E30F48();
  uint64_t v181 = *(void *)(v177 - 8);
  MEMORY[0x1F4188790](v177, v16);
  v172 = (char *)&v161 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63BDFB4(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v18 - 8, v19);
  v21 = (char *)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v23);
  v25 = (char *)&v161 - v24;
  MEMORY[0x1F4188790](v26, v27);
  v29 = (char *)&v161 - v28;
  MEMORY[0x1F4188790](v30, v31);
  v33 = (char *)&v161 - v32;
  MEMORY[0x1F4188790](v34, v35);
  v37 = (char *)&v161 - v36;
  int v168 = a10;
  uint64_t v179 = a9;
  uint64_t v171 = a5;
  v38 = (char *)&v161 - v36;
  if (a10)
  {
    sub_1B663AB08(a5, (uint64_t)v38);
LABEL_6:
    sub_1B663AB08((uint64_t)v37, (uint64_t)v33);
    int v41 = a13;
    if (v178)
    {
      v43 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      sub_1B6D1F2A4((uint64_t)v37, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
      sub_1B6D1F2A4((uint64_t)v33, (unint64_t *)&qword_1EB9857F0, v43);
      uint64_t v44 = v181;
      v45 = *(uint64_t (**)(char *, uint64_t))(v181 + 48);
      goto LABEL_8;
    }
    int v170 = a13;
    v45 = *(uint64_t (**)(char *, uint64_t))(v181 + 48);
    uint64_t v59 = v177;
    int v60 = v45(v33, 1);
    sub_1B663AB08((uint64_t)v33, (uint64_t)v29);
    if (v60 == 1)
    {
      v61 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      sub_1B6D1F2A4((uint64_t)v29, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
      sub_1B6D1F2A4((uint64_t)v37, (unint64_t *)&qword_1EB9857F0, v61);
      sub_1B6D1F2A4((uint64_t)v33, (unint64_t *)&qword_1EB9857F0, v61);
    }
    else
    {
      id v163 = objc_msgSend(self, sel_defaultManager);
      sub_1B663AB08((uint64_t)v29, (uint64_t)v25);
      ((void (*)(char *, uint64_t, uint64_t))v45)(v25, 1, v59);
      sub_1B6E30EF8();
      uint64_t v162 = sub_1B6E31768();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v181 + 8))(v25, v59);
      id v67 = v163;
      v68 = (void *)v162;
      unsigned __int8 v69 = objc_msgSend(v163, sel_isReadableFileAtPath_, v162);

      v70 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
      sub_1B6D1F2A4((uint64_t)v29, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
      sub_1B6D1F2A4((uint64_t)v37, (unint64_t *)&qword_1EB9857F0, v70);
      sub_1B6D1F2A4((uint64_t)v33, (unint64_t *)&qword_1EB9857F0, v70);
      if (v69)
      {
        int v41 = v170;
        uint64_t v44 = v181;
LABEL_8:
        LOBYTE(v182) = 0;
        uint64_t v46 = v171;
        uint64_t v47 = v177;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v45)(v171, 1, v177) == 1)
        {
          v48 = v165;
          sub_1B6E31108();
          uint64_t v49 = sub_1B6E310B8();
          uint64_t v51 = v50;
          (*(void (**)(char *, uint64_t))(v166 + 8))(v48, v167);
          v52 = NSTemporaryDirectory();
          sub_1B6E31798();

          *(void *)&long long v183 = v49;
          *((void *)&v183 + 1) = v51;
          sub_1B6E31948();
          v53 = (void *)sub_1B6E31768();
          v54 = (void *)sub_1B6E31768();
          id v55 = objc_msgSend(v53, sel_stringByAppendingPathComponent_, v54);

          sub_1B6E31798();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v56 = v172;
          sub_1B6E30E48();
          swift_bridgeObjectRelease();
          v57 = (void *)sub_1B6E30E78();
          *(void *)&long long v183 = 0;
          LODWORD(v51) = objc_msgSend(v178, sel_writeToURL_options_originalContentsURL_error_, v57, 0, 0, &v183);

          if (!v51)
          {
            id v71 = (id)v183;
            v64 = (void *)sub_1B6E30D78();

            swift_willThrow();
            unint64_t v42 = 0;
            uint64_t v44 = v181;
LABEL_21:
            sub_1B6D182A4(&v182);
            (*(void (**)(char *, uint64_t))(v44 + 8))(v56, v47);
            *(void *)&long long v183 = 0;
            *((void *)&v183 + 1) = 0xE000000000000000;
            sub_1B6E328C8();
            sub_1B6E31948();
            *(void *)&long long v182 = v64;
            sub_1B666BD6C();
            sub_1B6E32B18();
            long long v72 = v183;
            if (v41)
            {
              sub_1B67CD358();
              swift_allocError();
              *(_OWORD *)uint64_t v73 = v72;
              *(unsigned char *)(v73 + 16) = 96;
              swift_willThrow();

              return;
            }
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            swift_retain();
            int v74 = sub_1B6E32148();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            *(void *)&long long v183 = 0;
            swift_retain();
            sub_1B6B33E34(v74, (uint64_t *)&v183, v72, *((uint64_t *)&v72 + 1));
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();

            uint64_t v40 = 0;
            int v39 = 1;
LABEL_28:
            if (!v175) {
              goto LABEL_4;
            }
LABEL_29:
            v75 = sub_1B6C4FB90();
            if (v42)
            {
LABEL_133:
              swift_release();
              return;
            }
            v76 = v75;
            int v170 = v41;
            type metadata accessor for CodeLoader();
            uint64_t v77 = swift_allocObject();
            *(_OWORD *)(v77 + 16) = 0u;
            *(_OWORD *)(v77 + 32) = 0u;
            *(void *)(v77 + 48) = 0;
            *(void *)(v77 + 72) = 0;
            *(void *)(v77 + 80) = 0;
            *(void *)(v77 + 64) = v76;
            *(unsigned char *)(v77 + 56) = 1;
            swift_release();
            uint64_t v181 = v77;
            goto LABEL_31;
          }
          LOBYTE(v182) = 1;
          id v58 = (id)v183;
          uint64_t v44 = v181;
        }
        else
        {
          sub_1B663AB08(v46, (uint64_t)v21);
          ((void (*)(char *, uint64_t, uint64_t))v45)(v21, 1, v47);
          v56 = v172;
          (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v172, v21, v47);
        }
        sub_1B6E30EF8();
        v62 = (void *)v180;
        v63 = sub_1B6C4FB90();
        unint64_t v42 = (unint64_t)v62;
        if (!v62)
        {
          v65 = v63;
          type metadata accessor for CodeLoader();
          uint64_t v40 = swift_allocObject();
          *(_OWORD *)(v40 + 16) = 0u;
          *(_OWORD *)(v40 + 32) = 0u;
          *(void *)(v40 + 48) = 0;
          *(void *)(v40 + 72) = 0;
          *(void *)(v40 + 80) = 0;
          *(void *)(v40 + 64) = v65;
          uint64_t v66 = v47;
          int v39 = 1;
          *(unsigned char *)(v40 + 56) = 1;
          swift_bridgeObjectRelease();
          sub_1B6D182A4(&v182);
          (*(void (**)(char *, uint64_t))(v44 + 8))(v56, v66);
          goto LABEL_28;
        }
        swift_bridgeObjectRelease();
        v64 = v62;
        unint64_t v42 = 0;
        goto LABEL_21;
      }
    }
    int v39 = 0;
    uint64_t v40 = 0;
    unint64_t v42 = v180;
    int v41 = v170;
    goto LABEL_28;
  }
  sub_1B663AB08(a5, (uint64_t)v38);
  if (a9 > 1040) {
    goto LABEL_6;
  }
  sub_1B6D1F2A4((uint64_t)v37, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
  int v39 = 0;
  uint64_t v40 = 0;
  int v41 = a13;
  unint64_t v42 = v180;
  if (v175) {
    goto LABEL_29;
  }
LABEL_4:
  int v170 = v41;
  uint64_t v181 = v40;
LABEL_31:
  int v78 = v168 & 1;
  type metadata accessor for ScriptCodeGen();
  swift_initStackObject();
  uint64_t v79 = v176;
  swift_retain();
  uint64_t v80 = v174;
  swift_bridgeObjectRetain();
  v81 = (void *)sub_1B67BB6D0(v79, v173, v80);
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v177) = v78;
  id v178 = v81;
  if (!v78 && v179 <= 2000)
  {
    if (v179 > 1059)
    {
      *(void *)&long long v183 = 0;
      *((void *)&v183 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain_n();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      *(void *)&long long v183 = 0xD000000000000017;
      *((void *)&v183 + 1) = 0x80000001B6F36530;
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      unint64_t v83 = *((void *)&v183 + 1);
      unint64_t v82 = v183;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v82 = 0xD000000000000012;
      unint64_t v83 = 0x80000001B6F36570;
    }
    unint64_t v180 = v82;
    if (v181)
    {
      v112 = *(void **)(v181 + 64);
      v113 = (const char *)(sub_1B6E31848() + 32);
      swift_retain();
      v114 = (void (*)(uint64_t))dlsym(v112, v113);
      uint64_t v115 = swift_release();
      if (!v114)
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        LODWORD(v177) = v39;
        *(void *)&long long v183 = 0;
        *((void *)&v183 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        strcpy((char *)&v183, "couldn't find ");
        HIBYTE(v183) = -18;
        sub_1B6E31948();
        long long v127 = v183;
        int v128 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        *(void *)&long long v183 = 0;
        swift_retain();
        sub_1B6B33E34(v128, (uint64_t *)&v183, v127, *((uint64_t *)&v127 + 1));
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        int v39 = v177;
        goto LABEL_90;
      }
      v114(v115);
      swift_release();
      goto LABEL_72;
    }
    uint64_t v116 = sub_1B6E31848();
    v117 = (void (*)(uint64_t))dlsym_default((char *)(v116 + 32));
    uint64_t v118 = swift_release();
    if (v117)
    {
      v117(v118);
    }
    else
    {
      uint64_t v135 = sub_1B6E31848();
      v136 = objc_getClass((const char *)(v135 + 32));
      swift_release();
      if (v136)
      {
        sub_1B6E32718();
        swift_unknownObjectRelease();
        sub_1B62B57A8(&v182, &v183);
        sub_1B62B57A8(&v183, &v182);
        sub_1B6D1F814();
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_73;
      }
      strcpy((char *)&v183, "VFXAssets.");
      BYTE11(v183) = 0;
      HIDWORD(v183) = -369098752;
      sub_1B6E31948();
      v143 = (NSString *)sub_1B6E31768();
      swift_bridgeObjectRelease();
      Class v144 = NSClassFromString(v143);

      if (!v144)
      {
        *(void *)&long long v183 = 0x2E6E69616DLL;
        *((void *)&v183 + 1) = 0xE500000000000000;
        sub_1B6E31948();
        v145 = (NSString *)sub_1B6E31768();
        swift_bridgeObjectRelease();
        Class v146 = NSClassFromString(v145);

        if (!v146)
        {
          id v147 = objc_msgSend(self, sel_mainBundle);
          id v148 = objc_msgSend(v147, sel_bundleIdentifier);

          if (v148)
          {
            unint64_t v175 = v83;
            uint64_t v149 = sub_1B6E31798();
            uint64_t v151 = v150;

            *(void *)&long long v183 = v149;
            *((void *)&v183 + 1) = v151;
            *(void *)&long long v182 = 46;
            *((void *)&v182 + 1) = 0xE100000000000000;
            sub_1B633AF88();
            uint64_t v152 = sub_1B6E325F8();
            swift_bridgeObjectRelease();
            uint64_t v153 = *(void *)(v152 + 16);
            if (v153)
            {
              uint64_t v154 = v152 + 16 * v153;
              uint64_t v156 = *(void *)(v154 + 16);
              uint64_t v155 = *(void *)(v154 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(void *)&long long v183 = v156;
              *((void *)&v183 + 1) = v155;
              sub_1B6E31948();
              sub_1B6E31948();
              v157 = (NSString *)sub_1B6E31768();
              swift_bridgeObjectRelease();
              Class v158 = NSClassFromString(v157);

              if (v158) {
                goto LABEL_72;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          strcpy((char *)&v183, "VFXCoreTests.");
          HIWORD(v183) = -4864;
          sub_1B6E31948();
          v159 = (NSString *)sub_1B6E31768();
          swift_bridgeObjectRelease();
          Class v160 = NSClassFromString(v159);

          if (!v160) {
            goto LABEL_90;
          }
        }
      }
    }
LABEL_72:
    swift_getObjCClassMetadata();
LABEL_73:
    sub_1B63989B8(0, &qword_1EB980628);
    if (swift_dynamicCastMetatype())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      id v120 = objc_msgSend(ObjCClassFromMetadata, sel_performSelector_, sub_1B6E31138());
      id v121 = ObjCClassFromMetadata;
      char v122 = v170;
      if (v120)
      {
        swift_unknownObjectRetain();
        *(void *)&long long v183 = v120;
        sub_1B6D1F79C();
        if (swift_dynamicCast())
        {
          v93 = sub_1B6D1CCC4(v182);
          unint64_t v180 = v42;
          swift_bridgeObjectRelease();
          goto LABEL_77;
        }
      }
      if (v122)
      {
        sub_1B67CD358();
        swift_allocError();
        *(void *)uint64_t v125 = 0xD000000000000022;
        *(void *)(v125 + 8) = 0x80000001B6F533E0;
        *(unsigned char *)(v125 + 16) = 96;
        swift_willThrow();
        swift_release();
        goto LABEL_133;
      }
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      swift_retain();
      int v129 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      *(void *)&long long v183 = 0;
      swift_retain();
      uint64_t v130 = 0xD000000000000022;
      v131 = "missing selector: scriptTable_1000";
      goto LABEL_131;
    }
LABEL_90:
    if (v179 <= 1008)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      swift_retain();
      int v129 = sub_1B6E32168();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      *(void *)&long long v183 = 0;
      swift_retain();
      uint64_t v130 = 0xD000000000000032;
      v131 = "file is too old to load script without recompiling";
      goto LABEL_131;
    }
    if (v39)
    {
      swift_bridgeObjectRelease();
      *(void *)&long long v183 = 0;
      *((void *)&v183 + 1) = 0xE000000000000000;
      sub_1B6E328C8();
    }
    else
    {
      *(void *)&long long v183 = 0;
      *((void *)&v183 + 1) = 0xE000000000000000;
      sub_1B6E328C8();
      sub_1B6E31948();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
    }
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v137 = *((void *)&v183 + 1);
    uint64_t v138 = v183;
    if ((v170 & 1) == 0)
    {
LABEL_111:
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      swift_retain();
      int v139 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      *(void *)&long long v183 = 0;
      swift_retain();
      sub_1B6B33E34(v139, (uint64_t *)&v183, v138, v137);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_132;
    }
LABEL_125:
    sub_1B67CD358();
    swift_allocError();
    *(void *)uint64_t v142 = v138;
    *(void *)(v142 + 8) = v137;
    *(unsigned char *)(v142 + 16) = 96;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_133;
  }
  *(void *)&long long v183 = 0;
  *((void *)&v183 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  *(void *)&long long v183 = 0xD000000000000017;
  *((void *)&v183 + 1) = 0x80000001B6F531E0;
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  if (v177 || v179 > 2042)
  {
    uint64_t v92 = v81[5];
    uint64_t v91 = v81[6];
    swift_bridgeObjectRetain();
    v89 = (void *)sub_1B6D1D278(v92, v91);
    swift_bridgeObjectRelease();
    LOBYTE(v84) = v170;
    if (!v89) {
      goto LABEL_40;
    }
  }
  else
  {
    int v84 = v170;
    if (v181)
    {
      v85 = *(void **)(v181 + 64);
      v86 = (const char *)(sub_1B6E31848() + 32);
      swift_retain();
      v87 = (uint64_t (*)(uint64_t))dlsym(v85, v86);
      uint64_t v88 = swift_release();
      if (!v87)
      {
        int v170 = v84;
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        *(void *)&long long v183 = 0;
        *((void *)&v183 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        strcpy((char *)&v183, "couldn't find ");
        HIBYTE(v183) = -18;
        sub_1B6E31948();
        long long v140 = v183;
        int v141 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        *(void *)&long long v183 = 0;
        swift_retain();
        sub_1B6B33E34(v141, (uint64_t *)&v183, v140, *((uint64_t *)&v140 + 1));
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        LOBYTE(v84) = v170;
        goto LABEL_121;
      }
      v89 = (void *)v87(v88);
      swift_release();
      if (!v89)
      {
LABEL_40:
        if (v177 || v179 > 2043)
        {
          swift_bridgeObjectRelease();
          if (v84)
          {
            sub_1B67CD358();
            swift_allocError();
            *(void *)uint64_t v90 = 0xD00000000000001CLL;
            *(void *)(v90 + 8) = 0x80000001B6F53200;
            *(unsigned char *)(v90 + 16) = 96;
            swift_willThrow();
LABEL_132:
            swift_release();
            goto LABEL_133;
          }
          if (qword_1EB9852D0 != -1) {
            swift_once();
          }
          swift_retain();
          int v129 = sub_1B6E32148();
          if (qword_1EB9854F8 != -1) {
            swift_once();
          }
          *(void *)&long long v183 = 0;
          swift_retain();
          uint64_t v130 = 0xD00000000000001CLL;
          v131 = "couldn't locate script table";
LABEL_131:
          sub_1B6B33E34(v129, (uint64_t *)&v183, v130, (unint64_t)(v131 - 32) | 0x8000000000000000);
          swift_release();
          swift_release();
          goto LABEL_132;
        }
LABEL_121:
        if (v39)
        {
          *(void *)&long long v183 = 0;
          *((void *)&v183 + 1) = 0xE000000000000000;
          sub_1B6E328C8();
          sub_1B6E31948();
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          sub_1B6E31948();
          uint64_t v137 = *((void *)&v183 + 1);
          uint64_t v138 = v183;
          if ((v84 & 1) == 0) {
            goto LABEL_111;
          }
        }
        else
        {
          *(void *)&long long v183 = 0;
          *((void *)&v183 + 1) = 0xE000000000000000;
          sub_1B6E328C8();
          swift_bridgeObjectRelease();
          *(void *)&long long v183 = 0xD000000000000010;
          *((void *)&v183 + 1) = 0x80000001B6F53220;
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          uint64_t v137 = *((void *)&v183 + 1);
          uint64_t v138 = v183;
          if ((v84 & 1) == 0) {
            goto LABEL_111;
          }
        }
        goto LABEL_125;
      }
    }
    else
    {
      uint64_t v132 = sub_1B6E31848();
      v133 = (uint64_t (*)(uint64_t))dlsym_default((char *)(v132 + 32));
      uint64_t v134 = swift_release();
      if (!v133) {
        goto LABEL_121;
      }
      v89 = (void *)v133(v134);
      if (!v89) {
        goto LABEL_40;
      }
    }
  }
  unint64_t v180 = v42;
  swift_bridgeObjectRelease();
  v93 = sub_1B633A8FC(MEMORY[0x1E4FBC860]);
  if (!*v89)
  {
LABEL_77:
    uint64_t v123 = v164;
    if (v164)
    {
      type metadata accessor for MetalAPICodeLoader();
      swift_allocObject();
      uint64_t v124 = sub_1B6C4F500();
      *(void *)(v124 + 72) = v123;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v124 = 0;
    }
    swift_retain();
    uint64_t v126 = sub_1B6852124();
    swift_release();
    if (!v126)
    {
      type metadata accessor for ScriptCompilerSystem();
      swift_allocObject();
      sub_1B63B1620();
    }
    sub_1B6920A90(v176, v173, v174, v179, v177, v181, v124, (uint64_t)v93, a11, a12 | ((HIDWORD(a12) & 1) << 32));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_133;
  }
  v94 = v89 + 2;
  while (1)
  {
    uint64_t v97 = *(v94 - 1);
    uint64_t v98 = sub_1B6E31968();
    uint64_t v100 = v99;
    if (v97) {
      break;
    }
    swift_bridgeObjectRetain();
    unint64_t v108 = sub_1B62B2CE0(v98, v100);
    char v110 = v109;
    swift_bridgeObjectRelease();
    if ((v110 & 1) == 0) {
      goto LABEL_49;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v183 = v93;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B6AD6E68();
      v93 = (void *)v183;
    }
    swift_bridgeObjectRelease();
    sub_1B6296480(v108, (uint64_t)v93);
LABEL_48:
    swift_bridgeObjectRelease();
LABEL_49:
    swift_bridgeObjectRelease();
    uint64_t v96 = *v94;
    v94 += 2;
    if (!v96) {
      goto LABEL_77;
    }
  }
  char v101 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v183 = v93;
  unint64_t v103 = sub_1B62B2CE0(v98, v100);
  char v104 = v102;
  uint64_t v105 = v93[2] + ((v102 & 1) == 0);
  if (v93[3] >= v105)
  {
    if (v101)
    {
      v93 = (void *)v183;
      if (v102) {
        goto LABEL_61;
      }
    }
    else
    {
      sub_1B6AD6E68();
      v93 = (void *)v183;
      if (v104)
      {
LABEL_61:
        *(void *)(v93[7] + 8 * v103) = v97;
        goto LABEL_48;
      }
    }
    goto LABEL_47;
  }
  sub_1B6AC7234(v105, v101);
  uint64_t v106 = sub_1B62B2CE0(v98, v100);
  if ((v104 & 1) == (v107 & 1))
  {
    unint64_t v103 = v106;
    v93 = (void *)v183;
    if (v104) {
      goto LABEL_61;
    }
LABEL_47:
    v93[(v103 >> 6) + 8] |= 1 << v103;
    v95 = (uint64_t *)(v93[6] + 16 * v103);
    uint64_t *v95 = v98;
    v95[1] = v100;
    *(void *)(v93[7] + 8 * v103) = v97;
    ++v93[2];
    swift_bridgeObjectRetain();
    goto LABEL_48;
  }
  sub_1B6E33838();
  __break(1u);
}

uint64_t sub_1B6D1EFB0(uint64_t a1, void *a2)
{
  v31[2] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = (void (*)(uint64_t))MEMORY[0x1E4F27A78];
  sub_1B63BDFB4(0, (unint64_t *)&qword_1EB97D9D0, MEMORY[0x1E4F27A78]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  BOOL v7 = (char *)v30 - v6;
  v31[0] = (id)sub_1B6E30EF8();
  v31[1] = v8;
  v30[1] = 0x617262696C786676;
  v30[2] = 0xEA00000000007972;
  uint64_t v9 = sub_1B6E31128();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  sub_1B633AF88();
  sub_1B6E32658();
  char v11 = v10;
  sub_1B6D1F2A4((uint64_t)v7, (unint64_t *)&qword_1EB97D9D0, v3);
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = sub_1B6E31A78();
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    MEMORY[0x1BA9B34C0](v12, v14, v16, v18);
    swift_bridgeObjectRelease();
    id v19 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
    uint64_t v20 = (void *)sub_1B6E31768();
    swift_bridgeObjectRelease();
    id v21 = objc_msgSend(v19, sel_initWithPath_, v20);

    if (v21)
    {
      id v22 = objc_msgSend(v21, sel_executablePath);
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = sub_1B6E31798();

        if (!a2) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v24 = 0;
        if (!a2)
        {
LABEL_10:

          return v24;
        }
      }
      v31[0] = 0;
      id v25 = objc_msgSend(a2, sel_newDefaultLibraryWithBundle_error_, v21, v31);
      id v26 = v31[0];
      if (!v25)
      {
        uint64_t v28 = v26;
        v29 = (void *)sub_1B6E30D78();

        swift_willThrow();
        return v24;
      }
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t sub_1B6D1F2A4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1B63BDFB4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1B6D1F300()
{
  uint64_t v0 = sub_1B6E30F48();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v6);
  char v8 = (char *)v20 - v7;
  v20[0] = objc_msgSend(self, sel_defaultManager);
  sub_1B6E30E58();
  uint64_t v9 = (void *)sub_1B6E31768();
  id v10 = objc_msgSend(v9, sel_stringByDeletingPathExtension);

  char v11 = (void *)sub_1B6E31798();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();

  sub_1B6E30EC8();
  v20[2] = v11;
  v20[3] = v13;
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E30EB8();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14(v4, v0);
  sub_1B6E30EF8();
  uint64_t v15 = (void *)sub_1B6E31768();
  swift_bridgeObjectRelease();
  id v16 = v20[0];
  unsigned int v17 = objc_msgSend(v20[0], sel_isReadableFileAtPath_, v15);

  if (v17)
  {
    uint64_t v18 = sub_1B6E31748();
    v14(v8, v0);
  }
  else
  {
    v14(v8, v0);

    return 0;
  }
  return v18;
}

void *sub_1B6D1F5B4(uint64_t a1, uint64_t a2)
{
  sub_1B67FB298();
  uint64_t v4 = sub_1B6E32C28();
  uint64_t v5 = (void *)v4;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  uint64_t v11 = v4 + 64;
  int64_t v22 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v6 << 6);
      goto LABEL_19;
    }
    uint64_t v15 = v6 + 1;
    if (v6 + 1 >= v22) {
      return v5;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    if (!v16)
    {
      uint64_t v15 = v6 + 2;
      if (v6 + 2 >= v22) {
        return v5;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v15);
      if (!v16)
      {
        uint64_t v15 = v6 + 3;
        if (v6 + 3 >= v22) {
          return v5;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v15);
        if (!v16)
        {
          uint64_t v15 = v6 + 4;
          if (v6 + 4 >= v22) {
            return v5;
          }
          unint64_t v16 = *(void *)(v7 + 8 * v15);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v15 << 6);
    uint64_t v6 = v15;
LABEL_19:
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8 * v14);
    uint64_t v18 = 0xFFFFFFFFLL;
    if (*(void *)(a2 + 16))
    {
      uint64_t v19 = sub_1B62BE38C(*(void *)(*(void *)(a1 + 56) + 8 * v14));
      if (v20) {
        uint64_t v18 = *(void *)(*(void *)(a2 + 56) + 8 * v19);
      }
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v12 = 8 * v14;
    *(void *)(v5[6] + v12) = v17;
    *(void *)(v5[7] + v12) = v18;
    ++v5[2];
  }
  while (v22 - 5 != v6)
  {
    unint64_t v16 = *(void *)(a1 + 104 + 8 * v6++);
    if (v16)
    {
      uint64_t v15 = v6 + 4;
      goto LABEL_18;
    }
  }
  return v5;
}

void sub_1B6D1F79C()
{
  if (!qword_1E9DD8DE0)
  {
    sub_1B63989B8(255, &qword_1E9DD4DA8);
    unint64_t v0 = sub_1B6E31568();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD8DE0);
    }
  }
}

unint64_t sub_1B6D1F814()
{
  unint64_t result = qword_1E9DD8DE8;
  if (!qword_1E9DD8DE8)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9DD8DE8);
  }
  return result;
}

uint64_t sub_1B6D1F854()
{
  uint64_t v1 = (int *)(type metadata accessor for BundleInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(*(void *)v1 + 64) + v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = sub_1B6E30F48();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v7 + 8) & ~v7;
  unint64_t v9 = (((*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = v2 | v7 | 7;
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v3 + v1[7];
  uint64_t v11 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v5);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v13);
}

void sub_1B6D1FA3C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for BundleInfo() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  unint64_t v10 = (v9 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(sub_1B6E30F48() - 8);
  unint64_t v13 = (v11 + *(unsigned __int8 *)(v12 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = (*(void *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1B6D18C50(a1, a2, a3, v3 + v8, *(unsigned int *)(v3 + v10) | ((unint64_t)*(unsigned __int8 *)(v3 + v10 + 4) << 32), *(void *)(v3 + v11), v3 + v13, *(void **)(v3 + v14), *(void *)(v3 + v14 + 8), *(void **)(v3 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

void sub_1B6D1FBB4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1B6D1FC00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BundleInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D1FD14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleInfo.CodingKeys()
{
  return &type metadata for BundleInfo.CodingKeys;
}

unint64_t sub_1B6D1FD50()
{
  unint64_t result = qword_1E9DD8DF0;
  if (!qword_1E9DD8DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8DF0);
  }
  return result;
}

unint64_t sub_1B6D1FDA8()
{
  unint64_t result = qword_1EB97DA20;
  if (!qword_1EB97DA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DA20);
  }
  return result;
}

unint64_t sub_1B6D1FE00()
{
  unint64_t result = qword_1EB97DA18;
  if (!qword_1EB97DA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DA18);
  }
  return result;
}

uint64_t sub_1B6D1FE54()
{
  return 0x676E69646F636544;
}

void sub_1B6D1FEF8(void *a1@<X8>)
{
  *a1 = &unk_1F0F70828;
  a1[1] = &unk_1F0F70800;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  a1[2] = &unk_1F0F707D0;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = v1;
}

void *sub_1B6D1FF28(void *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name + 8);
  unsigned int v4 = (void *)(v2 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
  *unsigned int v4 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
  v4[1] = v3;
  swift_bridgeObjectRetain();
  return sub_1B682A2AC(a1);
}

void sub_1B6D1FF80()
{
}

uint64_t sub_1B6D1FFB0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D1FFC4()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6D2008C()
{
  return type metadata accessor for DecodingErrorNode(0);
}

uint64_t type metadata accessor for DecodingErrorNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD8DF8);
}

uint64_t sub_1B6D200B4()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B6D200F8(void *a1)
{
  return sub_1B6C0C6E4();
}

uint64_t sub_1B6D20174(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6C0C780();
  if (!v2)
  {
    unsigned int v4 = (void *)(v1 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
    *unsigned int v4 = v5;
    v4[1] = v6;
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthoringGraphCoder()
{
  return &type metadata for AuthoringGraphCoder;
}

uint64_t sub_1B6D2021C(char *a1, char *a2)
{
  return sub_1B6BB3244(*a1, *a2);
}

uint64_t sub_1B6D20228()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D20308()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D203D0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D204AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D228EC();
  *a1 = result;
  return result;
}

void sub_1B6D204DC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1701869940;
      goto LABEL_3;
    case 2:
      *a1 = 0x65756C6176;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x6870617267627573;
      a1[1] = 0xE800000000000000;
      break;
    case 4:
      *a1 = 0x6F666E4972657375;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B6D20580()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t result = 0x65756C6176;
      break;
    case 3:
      uint64_t result = 0x6870617267627573;
      break;
    case 4:
      uint64_t result = 0x6F666E4972657375;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D20614@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D228EC();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D2063C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D25374();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D20678(uint64_t a1)
{
  unint64_t v2 = sub_1B6D25374();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D206B4(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v47 = a7;
  uint64_t v46 = a6;
  uint64_t v43 = a5;
  uint64_t v11 = sub_1B6E31118();
  uint64_t v45 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v44 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6D24834(0, (unint64_t *)&qword_1EB97D9C0, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v40 = (char *)&v40 - v16;
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  uint64_t v48 = 0xD000000000000016;
  unint64_t v49 = 0x80000001B6F537A0;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  sub_1B6E31948();
  uint64_t v50 = v48;
  unint64_t v51 = v49;
  if (a1)
  {
    uint64_t v48 = 8250;
    unint64_t v49 = 0xE200000000000000;
    swift_getErrorValue();
    id v17 = a1;
    sub_1B6E33868();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
  }
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v18 = v50;
  uint64_t v19 = v51;
  swift_retain();
  swift_bridgeObjectRetain();
  int v20 = sub_1B6E32148();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v48 = 0;
  swift_retain();
  sub_1B6B33E34(v20, &v48, v18, v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v21 = a4[3];
  uint64_t v22 = a4[4];
  sub_1B62C14BC(a4, v21);
  LOBYTE(v21) = *(unsigned char *)(sub_1B62BE764(v21, v22) + 82);
  swift_release();
  if (v21)
  {
    swift_retain();
    int v23 = sub_1B6E32148();
    uint64_t v48 = 0;
    swift_retain();
    sub_1B6B33E34(v23, &v48, v18, v19);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for DecodingErrorNode(0);
    uint64_t v24 = (void *)swift_allocObject();
    id v25 = (void *)((char *)v24 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
    uint64_t v26 = v42;
    void *v25 = v41;
    v25[1] = v26;
    uint64_t v27 = MEMORY[0x1E4FBC860];
    v24[2] = MEMORY[0x1E4FBC860];
    v24[3] = 0;
    v24[4] = 0;
    swift_bridgeObjectRetain();
    sub_1B6E31108();
    uint64_t v28 = v45;
    uint64_t v29 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v40, 1, 1, v11);
    type metadata accessor for AuthoringNode();
    swift_allocObject();
    uint64_t v18 = sub_1B6CE3580((uint64_t)v24, v27, v29, 0, 0xF000000000000000);
    swift_release();
    uint64_t v30 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v44, v43, v11);
    uint64_t v31 = v18 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 24);
    v32(v18 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v30, v11);
    v32(*(void *)(v18 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + OBJC_IVAR____TtC3VFX4Node_authoringID, (char *)v31, v11);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v11);
    v33 = (uint64_t *)(v18 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
    uint64_t v34 = *(void *)(v18 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
    unint64_t v35 = *(void *)(v18 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
    uint64_t v36 = v46;
    unint64_t v37 = v47;
    uint64_t *v33 = v46;
    v33[1] = v37;
    sub_1B6751DC0(v36, v37);
    sub_1B665D488(v34, v35);
  }
  else
  {
    sub_1B67CD358();
    swift_allocError();
    *(void *)uint64_t v38 = v18;
    *(void *)(v38 + 8) = v19;
    *(unsigned char *)(v38 + 16) = 32;
    swift_willThrow();
  }
  return v18;
}

uint64_t sub_1B6D20BCC(void *a1, __objc2_class **a2)
{
  uint64_t v28 = a2;
  uint64_t v3 = sub_1B6E31118();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6D2550C(0, &qword_1E9DD8EB8, (uint64_t (*)(void))sub_1B6D25374, (uint64_t)&type metadata for AuthoringNodeCoder.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v26 - v12;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D25374();
  sub_1B6E33A88();
  uint64_t v14 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, (uint64_t)v28 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v3);
  LOBYTE(v29[0]) = 0;
  sub_1B6D24A20(&qword_1E9DD17C8, MEMORY[0x1E4F27990]);
  uint64_t v15 = v27;
  sub_1B6E32FA8();
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {
    uint64_t v27 = v10;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    id v17 = *(uint64_t **)((char *)v14 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
    sub_1B6E33B48();
    LOBYTE(v29[0]) = 1;
    sub_1B6E32F48();
    swift_bridgeObjectRelease();
    unint64_t v18 = *(unint64_t *)((char *)v14 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
    uint64_t v19 = v9;
    if (v18 >> 60 != 15)
    {
      v29[0] = *(uint64_t *)((char *)v14 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
      uint64_t v20 = v29[0];
      v29[1] = v18;
      char v30 = 4;
      sub_1B62FFBB0(v29[0], v18);
      sub_1B6D0B31C();
      sub_1B6E32FA8();
      sub_1B665D488(v20, v18);
    }
    uint64_t v21 = v27;
    uint64_t v22 = swift_conformsToProtocol2();
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    if (v22) {
      uint64_t v24 = v17;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v24)
    {
      uint64_t v25 = *v24;
      char v30 = 2;
      swift_retain();
      sub_1B6E32EE8();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 8))(v29, v25, v23);
      swift_release();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
    }
    if (*v28 == _TtC3VFX21AuthoringSubGraphNode)
    {
      v29[0] = *(uint64_t *)((char *)v28 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph);
      char v30 = 3;
      sub_1B66491C8();
      sub_1B6E32FA8();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v13, v19);
  }
}

uint64_t sub_1B6D21124(void *a1)
{
  sub_1B6D2550C(0, &qword_1E9DD8EC0, (uint64_t (*)(void))sub_1B6D254B8, (uint64_t)&type metadata for EdgeCoder.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v10 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D254B8();
  sub_1B6E33A88();
  char v14 = 0;
  sub_1B6E31118();
  sub_1B6D24A20(&qword_1E9DD17C8, MEMORY[0x1E4F27990]);
  sub_1B6E32FA8();
  if (!v1)
  {
    type metadata accessor for EdgeCoder(0);
    char v13 = 1;
    sub_1B6E32F88();
    char v12 = 2;
    sub_1B6E32FA8();
    char v11 = 3;
    sub_1B6E32F88();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D21374@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = sub_1B6E31118();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v38 = (void (*)(uint64_t, char *, uint64_t))((char *)v30 - v9);
  sub_1B6D2550C(0, &qword_1E9DD8EA8, (uint64_t (*)(void))sub_1B6D254B8, (uint64_t)&type metadata for EdgeCoder.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v37 = v10;
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v11);
  char v13 = (char *)v30 - v12;
  uint64_t v14 = type metadata accessor for EdgeCoder(0);
  MEMORY[0x1F4188790](v14, v15);
  id v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D254B8();
  int v39 = v13;
  uint64_t v18 = (uint64_t)v40;
  sub_1B6E33A48();
  if (v18) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v31 = v6;
  uint64_t v32 = v14;
  uint64_t v40 = a1;
  uint64_t v19 = (uint64_t)v17;
  uint64_t v20 = v34;
  uint64_t v21 = v35;
  char v44 = 0;
  uint64_t v22 = sub_1B6D24A20(&qword_1EB97D9B8, MEMORY[0x1E4F27990]);
  uint64_t v23 = v36;
  sub_1B6E32DF8();
  v30[1] = v22;
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v24(v17, (char *)v38, v23);
  char v43 = 1;
  uint64_t v25 = sub_1B6E32DD8();
  uint64_t v38 = (void (*)(uint64_t, char *, uint64_t))v24;
  uint64_t v26 = v31;
  uint64_t v27 = v32;
  *(void *)(v19 + *(int *)(v32 + 20)) = v25;
  char v42 = 2;
  sub_1B6E32DF8();
  v38(v19 + *(int *)(v27 + 24), v26, v23);
  char v41 = 3;
  uint64_t v28 = sub_1B6E32DD8();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v37);
  *(void *)(v19 + *(int *)(v27 + 28)) = v28;
  sub_1B6D247D0(v19, v33);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v40);
  return sub_1B62C00F4(v19, type metadata accessor for EdgeCoder);
}

uint64_t sub_1B6D217F8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6D22D3C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1B6D21824(void *a1)
{
  return sub_1B6D20BCC(a1, *v1);
}

uint64_t sub_1B6D21840(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BBA900(*a1, *a2);
}

uint64_t sub_1B6D2184C()
{
  uint64_t result = 0x44497475706E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x646E497475706E69;
      break;
    case 2:
      uint64_t result = 0x444974757074756FLL;
      break;
    case 3:
      uint64_t result = 0x6E4974757074756FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D218E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D22984(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D21910(uint64_t a1)
{
  unint64_t v2 = sub_1B6D254B8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D2194C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D254B8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D21988@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6D21374(a1, a2);
}

uint64_t sub_1B6D219A0(void *a1)
{
  return sub_1B6D21124(a1);
}

uint64_t sub_1B6D219B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB3D50(*a1, *a2);
}

uint64_t sub_1B6D219C4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D21A60()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D21AE8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D21B80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D22938();
  *a1 = result;
  return result;
}

void sub_1B6D21BB0(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x7365676465;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6F666E4972657375;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7365646F6ELL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B6D21C08()
{
  uint64_t v1 = 0x7365676465;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F666E4972657375;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7365646F6ELL;
  }
}

uint64_t sub_1B6D21C5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D22938();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D21C84(uint64_t a1)
{
  unint64_t v2 = sub_1B6D246B4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D21CC0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D246B4();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6D21CFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1B6E31118();
  uint64_t v5 = *(void *)(v4 - 8);
  double v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(*(void *)(a1 + 16) + 16))
  {
    uint64_t v10 = *(void *)(a1 + 8);
    (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, v10 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v4, v7);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *a2;
    *a2 = 0x8000000000000000;
    sub_1B67E92E8(v10, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
    *a2 = v13;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
}

uint64_t sub_1B6D21E54(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  sub_1B6D2550C(0, &qword_1E9DD8E48, (uint64_t (*)(void))sub_1B6D246B4, (uint64_t)&type metadata for AuthoringGraphCoder.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v28 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D246B4();
  sub_1B6E33A88();
  uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v31 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v33 = (void **)&v31;
  uint64_t v34 = (void *)sub_1B68CA8D0(MEMORY[0x1E4FBC860]);
  uint64_t v35 = v12;
  uint64_t v28 = a2;
  sub_1B68BAE3C((uint64_t)sub_1B6D24898, (uint64_t)v32, 0, 0x1000000000000000, 0, (uint64_t)v11, (uint64_t)&v34);
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    uint64_t v13 = sub_1B68C8918((uint64_t)v34, v35, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B683D1D0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = v11;
    uint64_t v14 = v13[2];
    if (v14)
    {
      uint64_t v29 = v10;
      uint64_t v15 = v6;
      uint64_t v16 = v7;
      swift_retain();
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (v13[i + 4])
        {
          uint64_t v18 = swift_retain();
          MEMORY[0x1BA9B3870](v18);
          if (v34[2] >= v34[3] >> 1) {
            sub_1B6E31C78();
          }
          sub_1B6E31CC8();
          sub_1B6E31C48();
        }
      }
      swift_release();
      uint64_t v11 = v34;
      uint64_t v7 = v16;
      uint64_t v6 = v15;
      uint64_t v10 = v29;
    }
    swift_release();
    uint64_t v34 = v11;
    char v30 = 0;
    sub_1B6D24708();
    sub_1B6D248A0(&qword_1E9DD8E50, (void (*)(void))sub_1B6D2490C);
    sub_1B6E32FA8();
    swift_bridgeObjectRelease();
    uint64_t v34 = v31;
    char v30 = 1;
    sub_1B6D24834(0, &qword_1E9DD8E30, type metadata accessor for EdgeCoder, MEMORY[0x1E4FBB320]);
    sub_1B6D24960(&qword_1E9DD8E60, &qword_1E9DD8E68);
    sub_1B6E32FA8();
    if (*(void *)(v28 + 16))
    {
      uint64_t v20 = self;
      swift_bridgeObjectRetain();
      uint64_t v21 = (void *)sub_1B6E314B8();
      swift_bridgeObjectRelease();
      uint64_t v34 = 0;
      id v22 = objc_msgSend(v20, sel_dataWithJSONObject_options_error_, v21, 0, &v34);

      uint64_t v23 = v34;
      if (v22)
      {
        uint64_t v24 = (void *)sub_1B6E30FD8();
        unint64_t v26 = v25;

        uint64_t v34 = v24;
        uint64_t v35 = v26;
        char v30 = 2;
        sub_1B6D0B31C();
        sub_1B6E32FA8();
        sub_1B62C2360((uint64_t)v24, v26);
      }
      else
      {
        uint64_t v27 = v23;
        sub_1B6E30D78();

        swift_willThrow();
      }
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B6D22384(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for EdgeCoder(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)v37 - v13;
  sub_1B6D24834(0, &qword_1E9DD7798, type metadata accessor for EdgeCoder, MEMORY[0x1E4FBB718]);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15 - 8, v17);
  uint64_t v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v21);
  uint64_t v23 = (char *)v37 - v22;
  uint64_t v24 = 0;
  if (!*(void *)(*(void *)(a1 + 16) + 16))
  {
    char v42 = v14;
    char v43 = v10;
    uint64_t v25 = *(void *)(a1 + 8);
    swift_retain();
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v39 = v25;
    uint64_t v27 = sub_1B6D22B64(v26, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B6D24A68, v25);
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      v37[1] = a2;
      uint64_t v38 = a3;
      uint64_t v29 = v27 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      uint64_t v30 = *(void *)(v16 + 72);
      uint64_t v31 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
      v37[0] = v27;
      swift_bridgeObjectRetain();
      uint64_t v32 = MEMORY[0x1E4FBC860];
      uint64_t v40 = v7;
      uint64_t v41 = v6;
      uint64_t v33 = (uint64_t)v43;
      do
      {
        sub_1B6D253C8(v29, (uint64_t)v23, &qword_1E9DD7798, type metadata accessor for EdgeCoder);
        sub_1B6D24A70((uint64_t)v23, (uint64_t)v19);
        if ((*v31)(v19, 1, v6) == 1)
        {
          sub_1B6D25448((uint64_t)v19, &qword_1E9DD7798, type metadata accessor for EdgeCoder);
        }
        else
        {
          uint64_t v34 = (uint64_t)v42;
          sub_1B6D24B04((uint64_t)v19, (uint64_t)v42);
          sub_1B6D24B04(v34, v33);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v32 = sub_1B68C6CEC(0, *(void *)(v32 + 16) + 1, 1, v32);
          }
          unint64_t v36 = *(void *)(v32 + 16);
          unint64_t v35 = *(void *)(v32 + 24);
          if (v36 >= v35 >> 1) {
            uint64_t v32 = sub_1B68C6CEC(v35 > 1, v36 + 1, 1, v32);
          }
          *(void *)(v32 + 16) = v36 + 1;
          uint64_t v33 = (uint64_t)v43;
          sub_1B6D24B04((uint64_t)v43, v32+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v36);
          uint64_t v6 = v41;
        }
        v29 += v30;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease_n();
      a3 = v38;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = MEMORY[0x1E4FBC860];
    }
    sub_1B6642968(v32);
    uint64_t v24 = v39;
  }
  *a3 = v24;
}

uint64_t sub_1B6D22748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2)
  {
    uint64_t v9 = a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    uint64_t v10 = sub_1B6E31118();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(a5, v9, v10);
    uint64_t v12 = a2 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    uint64_t v13 = (int *)type metadata accessor for EdgeCoder(0);
    v11(a5 + v13[6], v12, v10);
    *(void *)(a5 + v13[5]) = a1;
    *(void *)(a5 + v13[7]) = a3;
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*((void *)v13 - 1) + 56);
    uint64_t v15 = a5;
    uint64_t v16 = 0;
    uint64_t v17 = (uint64_t)v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for EdgeCoder(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a5;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1B6D228A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6D23834(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1B6D228D0(void *a1)
{
  return sub_1B6D21E54(a1, *v1);
}

uint64_t sub_1B6D228EC()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 5) {
    return 5;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D22938()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D22984(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x44497475706E69 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E497475706E69 && a2 == 0xEA00000000007865 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x444974757074756FLL && a2 == 0xE800000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E4974757074756FLL && a2 == 0xEB00000000786564)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1B6D22B64(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  sub_1B6D24834(0, &qword_1E9DD7798, type metadata accessor for EdgeCoder, MEMORY[0x1E4FBB718]);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8, v6);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  sub_1B6C3DAC4(0, 0, 0);
  uint64_t v9 = v21;
  uint64_t v10 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v18 = a1;
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v13 = *(v12 - 1);
      uint64_t v14 = *v12;
      swift_retain();
      v19(v11, v13, v14);
      swift_release();
      uint64_t v21 = v9;
      unint64_t v16 = *(void *)(v9 + 16);
      unint64_t v15 = *(void *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B6C3DAC4(v15 > 1, v16 + 1, 1);
        uint64_t v9 = v21;
      }
      v12 += 2;
      ++v11;
      *(void *)(v9 + 16) = v16 + 1;
      sub_1B6D24A70((uint64_t)v8, v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v16);
    }
    while (v10 != v11);
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B6D22D3C(void *a1)
{
  sub_1B6D24834(0, (unint64_t *)&qword_1EB97D9C0, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v80 = (uint64_t)v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v6);
  unint64_t v82 = (char *)v72 - v7;
  uint64_t v8 = sub_1B6E31118();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v83 = v8;
  uint64_t v84 = v9;
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v14);
  unint64_t v16 = (char *)v72 - v15;
  sub_1B6D2550C(0, &qword_1E9DD8E98, (uint64_t (*)(void))sub_1B6D25374, (uint64_t)&type metadata for AuthoringNodeCoder.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v18 = v17;
  uint64_t v81 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17, v19);
  uint64_t v21 = (char *)v72 - v20;
  uint64_t v22 = (uint64_t)sub_1B62C14BC(a1, a1[3]);
  sub_1B6D25374();
  uint64_t v23 = v85;
  sub_1B6E33A48();
  if (!v23)
  {
    uint64_t v24 = v82;
    v85 = v12;
    LOBYTE(v86[0]) = 0;
    sub_1B6D24A20(&qword_1EB97D9B8, MEMORY[0x1E4F27990]);
    sub_1B6E32DF8();
    LOBYTE(v86[0]) = 1;
    uint64_t v77 = sub_1B6E32D98();
    uint64_t v78 = v25;
    uint64_t v79 = v16;
    char v87 = 4;
    sub_1B6D0B2C8();
    sub_1B6E32D78();
    uint64_t v74 = v86[0];
    unint64_t v75 = v86[1];
    v76 = 0;
    if (qword_1E9DCC718 != -1) {
      swift_once();
    }
    uint64_t v27 = qword_1E9E49840;
    uint64_t v28 = a1;
    uint64_t v29 = a1[3];
    uint64_t v30 = a1[4];
    sub_1B62C14BC(a1, v29);
    sub_1B6C70F80(v29, v30);
    uint64_t v31 = v77;
    uint64_t v32 = v78;
    uint64_t v22 = v27;
    uint64_t v33 = (__objc2_class **)sub_1B6CEC064(v77, v78);
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v73 = v28;
      unint64_t v35 = *v33;
      uint64_t v36 = swift_conformsToProtocol2();
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      if (v36) {
        uint64_t v38 = v34;
      }
      else {
        uint64_t v38 = 0;
      }
      unint64_t v40 = v75;
      uint64_t v39 = v76;
      v72[1] = v34;
      if (v38)
      {
        char v87 = 2;
        swift_retain();
        sub_1B6E32D18();
        if (v39)
        {
          uint64_t v41 = v74;
          id v42 = v39;
          uint64_t v28 = v73;
          uint64_t v22 = sub_1B6D206B4(v39, v77, v78, v73, (uint64_t)v79, v41, v40);
          swift_bridgeObjectRelease();
          sub_1B665D488(v41, v40);

          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v84 + 8))(v79, v83);
          (*(void (**)(char *, uint64_t))(v81 + 8))(v21, v18);
LABEL_25:
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
          return v22;
        }
        (*(void (**)(void *, __objc2_class *, uint64_t))(v37 + 16))(v86, *v38, v37);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v86);
        unint64_t v35 = *v34;
      }
      uint64_t v50 = v84;
      unint64_t v49 = v85;
      uint64_t v51 = v74;
      if (v35 != _TtC3VFX12SubGraphNode)
      {
        v76 = v39;
        swift_bridgeObjectRelease();
        uint64_t v52 = (uint64_t)v24;
        v53 = v24;
        uint64_t v54 = v83;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v53, 1, 1, v83);
        type metadata accessor for AuthoringNode();
        swift_allocObject();
        uint64_t v55 = swift_retain();
        uint64_t v22 = sub_1B6CE3580(v55, MEMORY[0x1E4FBC860], v52, 0, 0xF000000000000000);
LABEL_24:
        swift_release();
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v49, v79, v54);
        uint64_t v56 = v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
        v57 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 24);
        v57(v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v49, v54);
        v57(*(void *)(v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + OBJC_IVAR____TtC3VFX4Node_authoringID, (char *)v56, v54);
        id v58 = *(void (**)(char *, uint64_t))(v50 + 8);
        v58(v49, v54);
        swift_release();
        v58(v79, v54);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v21, v18);
        uint64_t v59 = (void *)(v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
        uint64_t v60 = *(void *)(v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
        unint64_t v61 = *(void *)(v22 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
        unint64_t v62 = v75;
        *uint64_t v59 = v74;
        v59[1] = v62;
        sub_1B665D488(v60, v61);
        uint64_t v28 = v73;
        goto LABEL_25;
      }
      char v87 = 3;
      sub_1B6649064();
      swift_retain();
      sub_1B6E32DF8();
      if (!v39)
      {
        v76 = 0;
        swift_bridgeObjectRelease();
        uint64_t v65 = v86[0];
        uint64_t v66 = v84;
        uint64_t v67 = (uint64_t)v24;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56))(v24, 1, 1, v83);
        type metadata accessor for AuthoringSubGraphNode(0);
        *(void *)(swift_allocObject() + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph) = v65;
        v68 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27990];
        uint64_t v69 = (uint64_t)v24;
        uint64_t v70 = v80;
        sub_1B6D253C8(v69, v80, (unint64_t *)&qword_1EB97D9C0, MEMORY[0x1E4F27990]);
        swift_retain();
        uint64_t v22 = sub_1B6CE3580((uint64_t)v34, MEMORY[0x1E4FBC860], v70, 0, 0xF000000000000000);
        swift_release();
        id v71 = v68;
        unint64_t v49 = v85;
        uint64_t v54 = v83;
        sub_1B6D25448(v67, (unint64_t *)&qword_1EB97D9C0, v71);
        uint64_t v50 = v66;
        goto LABEL_24;
      }
      id v63 = v39;
      uint64_t v28 = v73;
      unint64_t v64 = v75;
      uint64_t v22 = sub_1B6D206B4(v39, v77, v78, v73, (uint64_t)v79, v51, v75);
      swift_bridgeObjectRelease();
      sub_1B665D488(v51, v64);
      swift_release();

      swift_release();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v79, v83);
LABEL_21:
      (*(void (**)(char *, uint64_t))(v81 + 8))(v21, v18);
      goto LABEL_25;
    }
    char v43 = a1;
    uint64_t v44 = v74;
    unint64_t v45 = v75;
    uint64_t v46 = v76;
    uint64_t v47 = sub_1B6D206B4(0, v31, v32, v43, (uint64_t)v79, v74, v75);
    uint64_t v48 = v83;
    if (!v46)
    {
      uint64_t v22 = v47;
      swift_bridgeObjectRelease();
      sub_1B665D488(v44, v45);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v79, v48);
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    sub_1B665D488(v44, v45);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v79, v48);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v21, v18);
    a1 = v28;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v22;
}

uint64_t sub_1B6D23834(void *a1)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  sub_1B62E17B4();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_1B6E31098();
  uint64_t v99 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101, v8);
  uint64_t v100 = (char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for EdgeCoder(0);
  uint64_t v98 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102, v10);
  uint64_t v103 = (uint64_t)v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6D2550C(0, &qword_1E9DD8E08, (uint64_t (*)(void))sub_1B6D246B4, (uint64_t)&type metadata for AuthoringGraphCoder.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)v80 - v16;
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_1B62C14BC(a1, v18);
  if (!sub_1B62B8F14(2039, v18, v19))
  {
    type metadata accessor for AuthoringGraph();
    uint64_t v4 = (int *)swift_allocObject();
    uint64_t v20 = MEMORY[0x1E4FBC860];
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = v20;
    *((void *)v4 + 4) = 0;
    *((void *)v4 + 5) = 0;
    *((void *)v4 + 6) = sub_1B67DD1F0(v20);
LABEL_6:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return (uint64_t)v4;
  }
  uint64_t v97 = v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D246B4();
  sub_1B6E33A48();
  if (v1) {
    goto LABEL_6;
  }
  sub_1B6D24708();
  LOBYTE(v104) = 0;
  sub_1B6D248A0(&qword_1E9DD8E20, (void (*)(void))sub_1B6D24760);
  sub_1B6E32DF8();
  uint64_t v88 = v4;
  v94 = v17;
  uint64_t v87 = v14;
  uint64_t v22 = v107[2];
  if (v22)
  {
    uint64_t v104 = MEMORY[0x1E4FBC860];
    sub_1B6E32A48();
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = v23 + 1;
      swift_retain();
      sub_1B6E32A08();
      sub_1B6E32A68();
      sub_1B6E32A78();
      sub_1B6E32A28();
      uint64_t v23 = v24;
    }
    while (v22 != v24);
    uint64_t v25 = v104;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
  }
  type metadata accessor for AuthoringGraph();
  uint64_t v4 = (int *)swift_allocObject();
  uint64_t v26 = MEMORY[0x1E4FBC860];
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = v26;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = sub_1B67DD1F0(v26);
  *((void *)v4 + 3) = v25;
  LOBYTE(v104) = 2;
  sub_1B6D0B2C8();
  swift_retain();
  sub_1B6E32D78();
  uint64_t v27 = v103;
  unint64_t v28 = v108;
  if (v108 >> 60 != 15)
  {
    uint64_t v29 = v107;
    uint64_t v30 = self;
    uint64_t v96 = v29;
    uint64_t v31 = (void *)sub_1B6E30FC8();
    char v107 = 0;
    id v32 = objc_msgSend(v30, sel_JSONObjectWithData_options_error_, v31, 0, &v107);

    if (!v32)
    {
      uint64_t v78 = v13;
      uint64_t v79 = v107;
      swift_release();
      sub_1B6E30D78();

      swift_willThrow();
      sub_1B665D488((uint64_t)v96, v28);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v94, v78);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      swift_release();
      return (uint64_t)v4;
    }
    uint64_t v33 = v107;
    sub_1B6E32718();
    sub_1B665D488((uint64_t)v96, v28);
    swift_unknownObjectRelease();
    sub_1B67FB0A0();
    if (swift_dynamicCast())
    {
      *((void *)v4 + 2) = v104;
      swift_bridgeObjectRelease();
    }
  }
  unint64_t v34 = MEMORY[0x1E4FBC860];
  uint64_t v106 = sub_1B67DD1F0(MEMORY[0x1E4FBC860]);
  MEMORY[0x1F4188790](v106, v35);
  v80[-2] = &v106;
  MEMORY[0x1F4188790](v36, v37);
  v80[-2] = sub_1B6D247B4;
  v80[-1] = v38;
  char v107 = (void *)sub_1B68C967C(v34);
  unint64_t v108 = v39;
  sub_1B68B96F0((uint64_t)sub_1B678FEB4, (uint64_t)&v80[-4], 1, 0x1000000000000000uLL, 0, v34, (uint64_t)&v107);
  uint64_t v40 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6D24834(0, &qword_1E9DD8E30, type metadata accessor for EdgeCoder, MEMORY[0x1E4FBB320]);
  LOBYTE(v104) = 1;
  sub_1B6D24960(&qword_1E9DD8E38, &qword_1E9DD8E40);
  sub_1B6E32DF8();
  uint64_t v41 = v107[2];
  uint64_t v81 = v13;
  if (v41)
  {
    unint64_t v42 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
    v80[1] = v107;
    char v43 = (char *)v107 + v42;
    v86 = (void (**)(char *, char *, uint64_t))(v99 + 32);
    uint64_t v93 = *(void *)(v98 + 72);
    unint64_t v85 = 0x80000001B6F53760;
    unint64_t v84 = 0x80000001B6F53780;
    long long v83 = xmmword_1B6E77050;
    uint64_t v44 = (int *)v102;
    uint64_t v82 = 0;
    while (1)
    {
      sub_1B6D247D0((uint64_t)v43, v27);
      uint64_t v50 = v106;
      uint64_t v51 = v106[2];
      uint64_t v98 = v41;
      uint64_t v96 = v43;
      if (v51) {
        break;
      }
      uint64_t v55 = 0;
      uint64_t v95 = 0;
LABEL_33:
      uint64_t v99 = v55;
      uint64_t v58 = *(void *)(v27 + v44[5]);
      uint64_t v59 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
      uint64_t v73 = *(void **)(v55 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
      if (v58 < v73[2])
      {
        uint64_t v45 = *(void *)(v27 + v44[7]);
        uint64_t v46 = v95;
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v99 + v59) = v73;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v73 = sub_1B6C16864(v73);
          *(void *)(v99 + v59) = v73;
        }
        uint64_t v48 = v98;
        unint64_t v49 = &v73[2 * v58];
        v49[4] = v46;
        v49[5] = v45;
        swift_release();
        swift_release();
      }
      else
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        char v107 = 0;
        unint64_t v108 = 0xE000000000000000;
        uint64_t v92 = qword_1EB997FD0;
        swift_retain();
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        char v107 = (void *)0xD000000000000016;
        unint64_t v108 = v85;
        uint64_t v104 = 60;
        unint64_t v105 = 0xE100000000000000;
        sub_1B6E33B48();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        swift_retain();
        sub_1B682A98C();
        sub_1B6E31948();
        swift_release();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        unint64_t v61 = v107;
        unint64_t v60 = v108;
        char v62 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        uint64_t v63 = qword_1EB997FF0;
        uint64_t v64 = qword_1EB985528;
        swift_retain();
        if (v64 != -1) {
          swift_once();
        }
        sub_1B6D24834(0, (unint64_t *)&qword_1EB9855A0, (uint64_t (*)(uint64_t))sub_1B6816990, MEMORY[0x1E4FBBE00]);
        uint64_t v65 = swift_allocObject();
        *(_OWORD *)(v65 + 16) = v83;
        *(void *)(v65 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v65 + 64) = sub_1B678615C();
        *(void *)(v65 + 32) = v61;
        *(void *)(v65 + 40) = v60;
        swift_bridgeObjectRetain();
        sub_1B6E31258();
        swift_bridgeObjectRelease();
        swift_retain();
        uint64_t v66 = v100;
        sub_1B6E31088();
        uint64_t v90 = v61;
        uint64_t v89 = v88[12];
        uint64_t v67 = v88[16];
        uint64_t v68 = v88[20];
        uint64_t v91 = v63;
        unint64_t v69 = v60;
        uint64_t v70 = (uint64_t)v97;
        char v71 = v62;
        long long v72 = &v97[v68];
        (*v86)(v97, v66, v101);
        *(unsigned char *)(v70 + v89) = v71;
        *(void *)(v70 + v67) = 0;
        *(void *)long long v72 = v90;
        *((void *)v72 + 1) = v69;
        swift_bridgeObjectRetain();
        sub_1B6E31368();
        swift_release();
        sub_1B62C00F4(v70, (uint64_t (*)(void))sub_1B62E17B4);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v44 = (int *)v102;
        uint64_t v48 = v98;
        uint64_t v40 = v82;
      }
      swift_release();
      uint64_t v27 = v103;
      sub_1B62C00F4(v103, type metadata accessor for EdgeCoder);
      char v43 = (char *)v96 + v93;
      uint64_t v41 = v48 - 1;
      if (!v41) {
        goto LABEL_41;
      }
    }
    uint64_t v52 = sub_1B69FA874(v27);
    if (v53)
    {
      uint64_t v54 = *(void *)(v50[7] + 8 * v52);
      swift_retain();
      if (!v50[2]) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v54 = 0;
      if (!v50[2]) {
        goto LABEL_31;
      }
    }
    uint64_t v56 = sub_1B69FA874(v27 + v44[6]);
    if (v57)
    {
      uint64_t v95 = *(void *)(v50[7] + 8 * v56);
      swift_retain();
LABEL_32:
      uint64_t v55 = v54;
      goto LABEL_33;
    }
LABEL_31:
    uint64_t v95 = 0;
    goto LABEL_32;
  }
LABEL_41:
  swift_bridgeObjectRelease();
  unint64_t v74 = MEMORY[0x1E4FBC860];
  *((void *)v4 + 6) = sub_1B67DD1F0(MEMORY[0x1E4FBC860]);
  uint64_t v75 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v75, v76);
  v80[-2] = sub_1B687E1F8;
  v80[-1] = v4;
  char v107 = (void *)sub_1B68C967C(v74);
  unint64_t v108 = v77;
  sub_1B68B96F0((uint64_t)sub_1B687E200, (uint64_t)&v80[-4], 1, 0x1000000000000000uLL, 0, v74, (uint64_t)&v107);
  if (!v40)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v94, v81);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for EdgeCoder(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD8E70);
}

unint64_t sub_1B6D246B4()
{
  unint64_t result = qword_1E9DD8E10;
  if (!qword_1E9DD8E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8E10);
  }
  return result;
}

void sub_1B6D24708()
{
  if (!qword_1E9DD8E18)
  {
    unint64_t v0 = sub_1B6E31D18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD8E18);
    }
  }
}

unint64_t sub_1B6D24760()
{
  unint64_t result = qword_1E9DD8E28;
  if (!qword_1E9DD8E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8E28);
  }
  return result;
}

void sub_1B6D247B4(uint64_t a1)
{
  sub_1B6D21CFC(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1B6D247D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EdgeCoder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B6D24834(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1B6D24898(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1B6D22384(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1B6D248A0(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6D24708();
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6D2490C()
{
  unint64_t result = qword_1E9DD8E58;
  if (!qword_1E9DD8E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8E58);
  }
  return result;
}

uint64_t sub_1B6D24960(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6D24834(255, &qword_1E9DD8E30, type metadata accessor for EdgeCoder, MEMORY[0x1E4FBB320]);
    sub_1B6D24A20(a2, (void (*)(uint64_t))type metadata accessor for EdgeCoder);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6D24A20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6D24A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1B6D22748(a1, a2, a3, v4, a4);
}

uint64_t sub_1B6D24A70(uint64_t a1, uint64_t a2)
{
  sub_1B6D24834(0, &qword_1E9DD7798, type metadata accessor for EdgeCoder, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6D24B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EdgeCoder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AuthoringNodeCoder()
{
  return &type metadata for AuthoringNodeCoder;
}

unsigned char *storeEnumTagSinglePayload for AuthoringGraphCoder.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D24C44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthoringGraphCoder.CodingKeys()
{
  return &type metadata for AuthoringGraphCoder.CodingKeys;
}

uint64_t *sub_1B6D24C7C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1B6E31118();
    unint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v8((uint64_t *)((char *)a1 + v9), (uint64_t *)((char *)a2 + v9), v7);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_1B6D24D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E31118();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);

  return v7(v5, v4);
}

uint64_t sub_1B6D24E18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B6E31118();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B6D24EC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B6E31118();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  v7(a1 + a3[6], a2 + a3[6], v6);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B6D24F74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B6E31118();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B6D25020(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1B6E31118();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B6D250CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B6D250E0);
}

uint64_t sub_1B6D250E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E31118();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1B6D2514C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B6D25160);
}

uint64_t sub_1B6D25160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E31118();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1B6D251D0()
{
  uint64_t result = sub_1B6E31118();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1B6D25270()
{
  unint64_t result = qword_1E9DD8E80;
  if (!qword_1E9DD8E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8E80);
  }
  return result;
}

unint64_t sub_1B6D252C8()
{
  unint64_t result = qword_1E9DD8E88;
  if (!qword_1E9DD8E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8E88);
  }
  return result;
}

unint64_t sub_1B6D25320()
{
  unint64_t result = qword_1E9DD8E90;
  if (!qword_1E9DD8E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8E90);
  }
  return result;
}

unint64_t sub_1B6D25374()
{
  unint64_t result = qword_1E9DD8EA0;
  if (!qword_1E9DD8EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8EA0);
  }
  return result;
}

uint64_t sub_1B6D253C8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1B6D24834(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B6D25448(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1B6D24834(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_1B6D254B8()
{
  unint64_t result = qword_1E9DD8EB0;
  if (!qword_1E9DD8EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8EB0);
  }
  return result;
}

void sub_1B6D2550C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for EdgeCoder.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D25640);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgeCoder.CodingKeys()
{
  return &type metadata for EdgeCoder.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AuthoringNodeCoder.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D25744);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthoringNodeCoder.CodingKeys()
{
  return &type metadata for AuthoringNodeCoder.CodingKeys;
}

unint64_t sub_1B6D25780()
{
  unint64_t result = qword_1E9DD8EC8;
  if (!qword_1E9DD8EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8EC8);
  }
  return result;
}

unint64_t sub_1B6D257D8()
{
  unint64_t result = qword_1E9DD8ED0;
  if (!qword_1E9DD8ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8ED0);
  }
  return result;
}

unint64_t sub_1B6D25830()
{
  unint64_t result = qword_1E9DD8ED8;
  if (!qword_1E9DD8ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8ED8);
  }
  return result;
}

unint64_t sub_1B6D25888()
{
  unint64_t result = qword_1E9DD8EE0;
  if (!qword_1E9DD8EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8EE0);
  }
  return result;
}

unint64_t sub_1B6D258E0()
{
  unint64_t result = qword_1E9DD8EE8;
  if (!qword_1E9DD8EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8EE8);
  }
  return result;
}

unint64_t sub_1B6D25938()
{
  unint64_t result = qword_1E9DD8EF0;
  if (!qword_1E9DD8EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8EF0);
  }
  return result;
}

uint64_t sub_1B6D2598C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D25A30()
{
  return sub_1B6E33958();
}

uint64_t sub_1B6D25AA4()
{
  return sub_1B6E33988();
}

BOOL sub_1B6D25B44(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_1B6D26E18(v5, v7);
}

uint64_t sub_1B6D25B90()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D25CC0()
{
  return sub_1B6E33958();
}

uint64_t sub_1B6D25DA4()
{
  return sub_1B6E33988();
}

BOOL sub_1B6D25ED4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  long long v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  long long v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  long long v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  long long v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  long long v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1B6D26E4C((uint64_t)v9, (uint64_t)v10);
}

id sub_1B6D25F30(uint64_t *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v3 = *a1;
  id v4 = v2;
  objc_msgSend(v4, sel_setDepthCompareFunction_, v3);
  objc_msgSend(v4, sel_setDepthWriteEnabled_, *((unsigned __int8 *)a1 + 8));
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v10 = *((unsigned int *)a1 + 12);
  uint64_t v9 = *((unsigned int *)a1 + 13);
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35318]), (SEL)&selRef_identifier);
  objc_msgSend(v11, sel_setStencilCompareFunction_, v5);
  objc_msgSend(v11, sel_setStencilFailureOperation_, v6);
  objc_msgSend(v11, sel_setDepthFailureOperation_, v7);
  objc_msgSend(v11, sel_setDepthStencilPassOperation_, v8);
  objc_msgSend(v11, sel_setReadMask_, v10);
  objc_msgSend(v11, sel_setWriteMask_, v9);
  objc_msgSend(v4, sel_setFrontFaceStencil_, v11);

  uint64_t v12 = a1[7];
  uint64_t v13 = a1[8];
  uint64_t v14 = a1[9];
  uint64_t v15 = a1[10];
  uint64_t v16 = *((unsigned int *)a1 + 22);
  uint64_t v17 = *((unsigned int *)a1 + 23);
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35318]), sel_init);
  objc_msgSend(v18, sel_setStencilCompareFunction_, v12);
  objc_msgSend(v18, sel_setStencilFailureOperation_, v13);
  objc_msgSend(v18, sel_setDepthFailureOperation_, v14);
  objc_msgSend(v18, sel_setDepthStencilPassOperation_, v15);
  objc_msgSend(v18, sel_setReadMask_, v16);
  objc_msgSend(v18, sel_setWriteMask_, v17);
  objc_msgSend(v4, sel_setBackFaceStencil_, v18);

  return v4;
}

uint64_t sub_1B6D26124()
{
  MEMORY[0x1BA9B84C0](*(void *)(v0 + 56), -1, -1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(__dst, (const void *)(v0 + 64), sizeof(__dst));
  sub_1B6D26F44((uint64_t)__dst);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DepthStencilCache()
{
  return self;
}

uint64_t destroy for DepthStencilCache.Default()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DepthStencilCache.Default(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v3 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v3;
  long long v4 = *(_OWORD *)(a2 + 144);
  long long v5 = *(_OWORD *)(a2 + 160);
  long long v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v6;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v5;
  uint64_t v8 = *(void *)(a2 + 208);
  uint64_t v7 = a2 + 208;
  *(void *)(a1 + 208) = v8;
  long long v9 = *(_OWORD *)(v7 + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(a1 + 216) = v9;
  long long v10 = *(_OWORD *)(v7 + 40);
  long long v11 = *(_OWORD *)(v7 + 56);
  long long v12 = *(_OWORD *)(v7 + 72);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(v7 + 88);
  *(_OWORD *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 248) = v10;
  *(void *)(a1 + 312) = *(void *)(v7 + 104);
  long long v13 = *(_OWORD *)(v7 + 128);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(v7 + 112);
  *(_OWORD *)(a1 + 336) = v13;
  long long v14 = *(_OWORD *)(v7 + 144);
  long long v15 = *(_OWORD *)(v7 + 160);
  long long v16 = *(_OWORD *)(v7 + 192);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(v7 + 176);
  *(_OWORD *)(a1 + 400) = v16;
  *(_OWORD *)(a1 + 352) = v14;
  *(_OWORD *)(a1 + 368) = v15;
  *(void *)(a1 + 416) = *(void *)(v7 + 208);
  long long v17 = *(_OWORD *)(v7 + 216);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(v7 + 232);
  *(_OWORD *)(a1 + 424) = v17;
  long long v18 = *(_OWORD *)(v7 + 248);
  long long v19 = *(_OWORD *)(v7 + 264);
  long long v20 = *(_OWORD *)(v7 + 280);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(v7 + 296);
  *(_OWORD *)(a1 + 488) = v20;
  *(_OWORD *)(a1 + 472) = v19;
  *(_OWORD *)(a1 + 456) = v18;
  *(void *)(a1 + 520) = *(void *)(v7 + 312);
  long long v21 = *(_OWORD *)(v7 + 336);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(v7 + 320);
  *(_OWORD *)(a1 + 544) = v21;
  long long v22 = *(_OWORD *)(v7 + 352);
  long long v23 = *(_OWORD *)(v7 + 368);
  long long v24 = *(_OWORD *)(v7 + 400);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(v7 + 384);
  *(_OWORD *)(a1 + 608) = v24;
  *(_OWORD *)(a1 + 560) = v22;
  *(_OWORD *)(a1 + 576) = v23;
  *(void *)(a1 + 624) = *(void *)(v7 + 416);
  long long v25 = *(_OWORD *)(v7 + 424);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(v7 + 440);
  *(_OWORD *)(a1 + 632) = v25;
  long long v26 = *(_OWORD *)(v7 + 456);
  long long v27 = *(_OWORD *)(v7 + 472);
  long long v28 = *(_OWORD *)(v7 + 488);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(v7 + 504);
  *(_OWORD *)(a1 + 696) = v28;
  *(_OWORD *)(a1 + 680) = v27;
  *(_OWORD *)(a1 + 664) = v26;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DepthStencilCache.Default(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 328;
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(v4 + 104);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 472);
  *(_DWORD *)(a1 + 476) = *(_DWORD *)(a2 + 476);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(_DWORD *)(a1 + 512) = *(_DWORD *)(a2 + 512);
  *(_DWORD *)(a1 + 516) = *(_DWORD *)(a2 + 516);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(unsigned char *)(a1 + 536) = *(unsigned char *)(v4 + 208);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
  *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
  *(_DWORD *)(a1 + 620) = *(_DWORD *)(a2 + 620);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  *(_DWORD *)(a1 + 684) = *(_DWORD *)(a2 + 684);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
  return a1;
}

void *initializeWithTake for DepthStencilCache.Default(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2D8uLL);
}

uint64_t assignWithTake for DepthStencilCache.Default(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 328;
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_unknownObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_unknownObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  long long v7 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v7;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  swift_unknownObjectRelease();
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  long long v8 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v8;
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_unknownObjectRelease();
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(v4 + 104);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  long long v9 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v9;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_unknownObjectRelease();
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(unsigned char *)(a1 + 536) = *(unsigned char *)(v4 + 208);
  long long v10 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v10;
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  swift_unknownObjectRelease();
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  long long v11 = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = v11;
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  return a1;
}

uint64_t getEnumTagSinglePayload for DepthStencilCache.Default(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 728)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DepthStencilCache.Default(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 728) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 728) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DepthStencilCache.Default()
{
  return &type metadata for DepthStencilCache.Default;
}

uint64_t getEnumTagSinglePayload for DepthStencilDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DepthStencilDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DepthStencilDescriptor()
{
  return &type metadata for DepthStencilDescriptor;
}

unint64_t sub_1B6D26C34()
{
  unint64_t result = qword_1E9DD8EF8;
  if (!qword_1E9DD8EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8EF8);
  }
  return result;
}

uint64_t sub_1B6D26C88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_1B69FB158((uint64_t)a2), (v8 & 1) != 0))
  {
    *a3 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
    return swift_unknownObjectRetain();
  }
  else
  {
    long long v10 = *(void **)(a1 + 16);
    sub_1B6D26DD8();
    id v11 = sub_1B6D25F30(a2);
    id v12 = objc_msgSend(v10, sel_newDepthStencilStateWithDescriptor_, v11);

    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0x8000000000000000;
    sub_1B67E9484((uint64_t)v12, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 24) = v14;
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v12;
  }
  return result;
}

id sub_1B6D26D7C()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  qword_1EB9852A0 = (uint64_t)result;
  return result;
}

void *sub_1B6D26DB0()
{
  id result = sub_1B67F5A50(MEMORY[0x1E4FBC860]);
  off_1EB985508 = result;
  return result;
}

unint64_t sub_1B6D26DD8()
{
  unint64_t result = qword_1E9DD8F00;
  if (!qword_1E9DD8F00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9DD8F00);
  }
  return result;
}

BOOL sub_1B6D26E18(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4];
}

BOOL sub_1B6D26E4C(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32)
      && *(void *)(a1 + 40) == *(void *)(a2 + 40)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(void *)(a1 + 56) == *(void *)(a2 + 56)
      && *(void *)(a1 + 64) == *(void *)(a2 + 64)
      && *(void *)(a1 + 72) == *(void *)(a2 + 72)
      && *(void *)(a1 + 80) == *(void *)(a2 + 80)
      && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88)
      && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
}

uint64_t sub_1B6D26F44(uint64_t a1)
{
  return a1;
}

void sub_1B6D26FD0(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v19 = objc_msgSend(a1, sel_depthCompareFunction);
  unsigned __int8 v18 = objc_msgSend(a1, sel_isDepthWriteEnabled);
  id v4 = objc_msgSend(a1, sel_frontFaceStencil);
  id v17 = objc_msgSend(v4, sel_stencilCompareFunction);
  id v16 = objc_msgSend(v4, sel_stencilFailureOperation);
  id v15 = objc_msgSend(v4, sel_depthFailureOperation);
  id v14 = objc_msgSend(v4, sel_depthStencilPassOperation);
  unsigned int v5 = objc_msgSend(v4, sel_readMask);
  unsigned int v6 = objc_msgSend(v4, sel_writeMask);

  id v7 = objc_msgSend(a1, sel_backFaceStencil);
  id v8 = objc_msgSend(v7, sel_stencilCompareFunction);
  id v9 = objc_msgSend(v7, sel_stencilFailureOperation);
  id v10 = objc_msgSend(v7, sel_depthFailureOperation);
  id v11 = objc_msgSend(v7, sel_depthStencilPassOperation);
  unsigned int v12 = objc_msgSend(v7, sel_readMask);
  unsigned int v13 = objc_msgSend(v7, sel_writeMask);

  *(void *)a2 = v19;
  *(unsigned char *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v14;
  *(_DWORD *)(a2 + 48) = v5;
  *(_DWORD *)(a2 + 52) = v6;
  *(void *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v9;
  *(void *)(a2 + 72) = v10;
  *(void *)(a2 + 80) = v11;
  *(_DWORD *)(a2 + 88) = v12;
  *(_DWORD *)(a2 + 92) = v13;
}

__n128 sub_1B6D2718C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35218]), sel_init);
  objc_msgSend(v4, sel_setDepthCompareFunction_, 6);
  objc_msgSend(v4, sel_setDepthWriteEnabled_, 1);
  id v74 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v4);
  id v5 = v4;
  sub_1B6D26FD0(v5, (uint64_t)&v95);
  uint64_t v73 = v95;
  char v72 = v96;
  uint64_t v70 = v99;
  uint64_t v71 = v98;
  long long v93 = v101;
  long long v94 = v97;
  uint64_t v68 = v103;
  uint64_t v69 = v102;

  objc_msgSend(v5, sel_setDepthCompareFunction_, 1);
  id v92 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v5);
  id v6 = v5;
  sub_1B6D26FD0(v6, (uint64_t)&v105);
  char v86 = v106;
  long long v91 = v107;
  uint64_t v89 = v105;
  uint64_t v90 = v108;
  uint64_t v88 = v109;
  long long v87 = v111;
  uint64_t v84 = v113;
  uint64_t v85 = v112;

  objc_msgSend(v6, sel_setDepthWriteEnabled_, 0);
  id v83 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v6);
  id v7 = v6;
  sub_1B6D26FD0(v7, (uint64_t)&v115);
  char v75 = v116;
  long long v79 = v117;
  uint64_t v78 = v118;
  uint64_t v76 = v115;
  uint64_t v77 = v119;
  __n128 v82 = v121;
  uint64_t v80 = v123;
  uint64_t v81 = v122;

  objc_msgSend(v7, sel_setDepthCompareFunction_, 6);
  id v57 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v7);
  id v8 = v7;
  sub_1B6D26FD0(v8, (uint64_t)&v125);
  uint64_t v48 = v125;
  char v47 = v126;
  uint64_t v45 = v129;
  uint64_t v46 = v128;
  long long v66 = v131;
  long long v67 = v127;
  uint64_t v43 = v133;
  uint64_t v44 = v132;

  objc_msgSend(v8, sel_setDepthCompareFunction_, 7);
  objc_msgSend(v8, sel_setDepthWriteEnabled_, 0);
  id v42 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v8);
  id v9 = v8;
  sub_1B6D26FD0(v9, (uint64_t)&v135);
  uint64_t v10 = v135;
  char v61 = v136;
  long long v65 = v137;
  uint64_t v59 = v139;
  uint64_t v60 = v138;
  long long v62 = v141;
  uint64_t v63 = v143;
  uint64_t v64 = v142;

  objc_msgSend(v9, sel_setDepthCompareFunction_, 7);
  objc_msgSend(v9, sel_setDepthWriteEnabled_, 1);
  id v58 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v9);
  id v11 = v9;
  sub_1B6D26FD0(v11, (uint64_t)&v145);
  char v51 = v146;
  long long v56 = v147;
  uint64_t v54 = v145;
  uint64_t v55 = v148;
  uint64_t v53 = v149;
  long long v52 = v151;
  uint64_t v49 = v153;
  uint64_t v50 = v152;

  objc_msgSend(v11, sel_setDepthWriteEnabled_, 0);
  objc_msgSend(v11, sel_setDepthCompareFunction_, 6);
  id v12 = objc_msgSend(v11, sel_frontFaceStencil);
  objc_msgSend(v12, sel_setStencilCompareFunction_, 4);

  id v13 = objc_msgSend(v11, sel_frontFaceStencil);
  objc_msgSend(v13, sel_setStencilFailureOperation_, 0);

  id v14 = objc_msgSend(v11, sel_frontFaceStencil);
  objc_msgSend(v14, sel_setDepthStencilPassOperation_, 6);

  id v15 = objc_msgSend(v11, sel_backFaceStencil);
  objc_msgSend(v15, sel_setStencilCompareFunction_, 4);

  id v16 = objc_msgSend(v11, sel_backFaceStencil);
  objc_msgSend(v16, sel_setStencilFailureOperation_, 0);

  id v17 = objc_msgSend(v11, sel_backFaceStencil);
  objc_msgSend(v17, sel_setDepthStencilPassOperation_, 6);

  id v18 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v11);
  uint64_t v19 = v100;
  sub_1B6D26FD0(v11, (uint64_t)&v155);
  uint64_t v20 = v155;
  LOBYTE(v5) = v156;
  uint64_t v21 = v104;

  *(void *)a2 = v74;
  *(void *)(a2 + 8) = v73;
  *(unsigned char *)(a2 + 16) = v72;
  *(void *)(a2 + 40) = v71;
  *(void *)(a2 + 48) = v70;
  *(void *)(a2 + 80) = v69;
  *(void *)(a2 + 88) = v68;
  *(void *)(a2 + 104) = v57;
  *(void *)(a2 + 112) = v48;
  *(unsigned char *)(a2 + 120) = v47;
  *(void *)(a2 + 144) = v46;
  *(void *)(a2 + 152) = v45;
  *(void *)(a2 + 184) = v44;
  *(void *)(a2 + 192) = v43;
  *(void *)(a2 + 208) = v18;
  *(void *)(a2 + 216) = v20;
  *(unsigned char *)(a2 + 224) = (_BYTE)v5;
  *(void *)(a2 + 312) = v42;
  *(void *)(a2 + 320) = v10;
  *(_DWORD *)(a2 + 332) = *(_DWORD *)((char *)&v135 + 3);
  *(_DWORD *)(a2 + 329) = v135;
  *(_DWORD *)(a2 + 121) = v155;
  long long v22 = v161;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)((char *)&v155 + 3);
  long long v23 = v160;
  *(_DWORD *)(a2 + 228) = *(_DWORD *)((char *)&v145 + 3);
  *(_DWORD *)(a2 + 225) = v145;
  *(unsigned char *)(a2 + 328) = v61;
  *(void *)(a2 + 352) = v60;
  *(void *)(a2 + 360) = v59;
  uint64_t v24 = v110;
  uint64_t v25 = v114;
  *(_OWORD *)(a2 + 376) = v62;
  uint64_t v26 = v120;
  uint64_t v27 = v124;
  uint64_t v28 = v130;
  uint64_t v29 = v134;
  uint64_t v30 = v140;
  uint64_t v31 = v144;
  uint64_t v32 = v150;
  uint64_t v33 = v154;
  uint64_t v34 = v159;
  uint64_t v35 = v162;
  long long v36 = v157;
  long long v37 = v158;
  *(_OWORD *)(a2 + 24) = v94;
  *(void *)(a2 + 56) = v19;
  *(_OWORD *)(a2 + 64) = v93;
  *(void *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 128) = v67;
  *(void *)(a2 + 160) = v28;
  *(_OWORD *)(a2 + 168) = v66;
  *(void *)(a2 + 200) = v29;
  *(_OWORD *)(a2 + 232) = v36;
  *(_OWORD *)(a2 + 248) = v37;
  *(void *)(a2 + 264) = v34;
  *(_OWORD *)(a2 + 272) = v23;
  *(_OWORD *)(a2 + 288) = v22;
  *(void *)(a2 + 304) = v35;
  *(_OWORD *)(a2 + 336) = v65;
  *(void *)(a2 + 368) = v30;
  *(void *)(a2 + 392) = v64;
  *(void *)(a2 + 400) = v63;
  *(void *)(a2 + 408) = v31;
  *(void *)(a2 + 416) = v58;
  *(void *)(a2 + 424) = v54;
  *(unsigned char *)(a2 + 432) = v51;
  int v38 = v125;
  *(_DWORD *)(a2 + 436) = *(_DWORD *)((char *)&v125 + 3);
  *(_DWORD *)(a2 + 433) = v38;
  *(_OWORD *)(a2 + 440) = v56;
  *(void *)(a2 + 456) = v55;
  *(void *)(a2 + 464) = v53;
  *(void *)(a2 + 472) = v32;
  *(_OWORD *)(a2 + 480) = v52;
  *(void *)(a2 + 496) = v50;
  *(void *)(a2 + 504) = v49;
  *(void *)(a2 + 512) = v33;
  *(void *)(a2 + 520) = v92;
  *(void *)(a2 + 528) = v89;
  *(unsigned char *)(a2 + 536) = v86;
  int v39 = v115;
  *(_DWORD *)(a2 + 540) = *(_DWORD *)((char *)&v115 + 3);
  *(_DWORD *)(a2 + 537) = v39;
  *(_OWORD *)(a2 + 544) = v91;
  *(void *)(a2 + 560) = v90;
  *(void *)(a2 + 568) = v88;
  *(void *)(a2 + 576) = v24;
  *(_OWORD *)(a2 + 584) = v87;
  *(void *)(a2 + 600) = v85;
  *(void *)(a2 + 608) = v84;
  *(void *)(a2 + 616) = v25;
  *(void *)(a2 + 624) = v83;
  *(void *)(a2 + 632) = v76;
  *(unsigned char *)(a2 + 640) = v75;
  int v40 = v105;
  *(_DWORD *)(a2 + 644) = *(_DWORD *)((char *)&v105 + 3);
  *(_DWORD *)(a2 + 641) = v40;
  *(_OWORD *)(a2 + 648) = v79;
  *(void *)(a2 + 664) = v78;
  *(void *)(a2 + 672) = v77;
  *(void *)(a2 + 680) = v26;
  __n128 result = v82;
  *(__n128 *)(a2 + 688) = v82;
  *(void *)(a2 + 704) = v81;
  *(void *)(a2 + 712) = v80;
  *(void *)(a2 + 720) = v27;
  return result;
}

ValueMetadata *type metadata accessor for StencilDescriptor()
{
  return &type metadata for StencilDescriptor;
}

unint64_t sub_1B6D278EC()
{
  unint64_t result = qword_1E9DD8F08;
  if (!qword_1E9DD8F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8F08);
  }
  return result;
}

ValueMetadata *type metadata accessor for RandomNumberGeneratorXoshiro()
{
  return &type metadata for RandomNumberGeneratorXoshiro;
}

uint64_t sub_1B6D27950()
{
  uint64_t v1 = v0[1];
  uint64_t result = 9 * __ROR8__(5 * v1, 57);
  uint64_t v3 = v0[2] ^ *v0;
  uint64_t v4 = v0[3] ^ v1;
  *v0 ^= v4;
  v0[1] = v3 ^ v1;
  v0[2] = v3 ^ (v1 << 17);
  v0[3] = __ROR8__(v4, 19);
  return result;
}

uint64_t sub_1B6D2798C(uint64_t *a1)
{
  sub_1B62CAAD8((uint64_t)a1, (uint64_t)&v48);
  if (swift_dynamicCast())
  {
    uint64_t v2 = v54;
LABEL_8:
    id v11 = &v48;
LABEL_9:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
    return v2;
  }
  uint64_t v3 = MEMORY[0x1E4FBB470];
  if (swift_dynamicCast())
  {
    int v4 = v54;
    sub_1B62C6034(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1B6E77050;
    uint64_t v6 = MEMORY[0x1E4FBB4D0];
    *(void *)(v5 + 56) = v3;
    *(void *)(v5 + 64) = v6;
    *(_DWORD *)(v5 + 32) = v4;
LABEL_7:
    uint64_t v2 = sub_1B6E317D8();
    goto LABEL_8;
  }
  uint64_t v7 = MEMORY[0x1E4FBB3D0];
  if (swift_dynamicCast())
  {
    uint64_t v8 = v54;
    sub_1B62C6034(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1B6E77050;
    uint64_t v10 = MEMORY[0x1E4FBB460];
    *(void *)(v9 + 56) = v7;
    *(void *)(v9 + 64) = v10;
    *(void *)(v9 + 32) = v8;
    goto LABEL_7;
  }
  sub_1B6395ED8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
  if (swift_dynamicCast())
  {
    uint64_t v44 = v54;
    sub_1B62C6034(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1B6E76B30;
    uint64_t v14 = MEMORY[0x1E4FBB4D0];
    *(void *)(v13 + 56) = v3;
    *(void *)(v13 + 64) = v14;
    *(_DWORD *)(v13 + 32) = v44;
    *(void *)(v13 + 96) = v3;
    *(void *)(v13 + 104) = v14;
    *(_DWORD *)(v13 + 72) = HIDWORD(v44);
    goto LABEL_7;
  }
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  if (swift_dynamicCast())
  {
    long long v45 = v54;
    sub_1B62C6034(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1B6E77D10;
    uint64_t v16 = MEMORY[0x1E4FBB4D0];
    *(void *)(v15 + 56) = v3;
    *(void *)(v15 + 64) = v16;
    *(_DWORD *)(v15 + 32) = v45;
    *(_DWORD *)(v15 + 72) = DWORD1(v45);
    *(void *)(v15 + 96) = v3;
    *(void *)(v15 + 104) = v16;
    *(void *)(v15 + 136) = v3;
    *(void *)(v15 + 144) = v16;
    *(_DWORD *)(v15 + 112) = DWORD2(v45);
    goto LABEL_7;
  }
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
  uint64_t v18 = v17;
  if (swift_dynamicCast())
  {
    long long v46 = v54;
    sub_1B62C6034(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1B6E85730;
    uint64_t v20 = MEMORY[0x1E4FBB4D0];
    *(void *)(v19 + 56) = v3;
    *(void *)(v19 + 64) = v20;
    *(_DWORD *)(v19 + 32) = v46;
    *(void *)(v19 + 96) = v3;
    *(void *)(v19 + 104) = v20;
    *(_DWORD *)(v19 + 72) = DWORD1(v46);
    *(_DWORD *)(v19 + 112) = DWORD2(v46);
    *(void *)(v19 + 136) = v3;
    *(void *)(v19 + 144) = v20;
    *(void *)(v19 + 176) = v3;
    *(void *)(v19 + 184) = v20;
    *(_DWORD *)(v19 + 152) = HIDWORD(v46);
    goto LABEL_7;
  }
  type metadata accessor for simd_float4x4(0);
  if (swift_dynamicCast())
  {
    long long v41 = v54;
    long long v42 = v55[0];
    long long v43 = v55[1];
    long long v47 = v55[2];
    uint64_t v53 = v18;
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v41;
    sub_1B6D2798C(&v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v51);
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v53 = v18;
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v42;
    sub_1B6D2798C(&v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v51);
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v51 = 40;
    unint64_t v52 = 0xE100000000000000;
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v51;
    unint64_t v21 = v52;
    uint64_t v53 = v18;
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v43;
    sub_1B6D2798C(&v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v51);
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v51 = v22;
    unint64_t v52 = v21;
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v51;
    unint64_t v23 = v52;
    uint64_t v53 = v18;
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v47;
    sub_1B6D2798C(&v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v51);
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v51 = v24;
    unint64_t v52 = v23;
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = v51;
    goto LABEL_8;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v48);
  sub_1B62CAAD8((uint64_t)a1, (uint64_t)&v51);
  sub_1B62C5560(0, &qword_1E9DD8F10);
  if (swift_dynamicCast())
  {
    sub_1B62C15C4(&v48, (uint64_t)&v54);
    sub_1B62C14BC(&v54, *((uint64_t *)&v55[0] + 1));
    uint64_t v2 = sub_1B6E33098();
    id v11 = &v54;
    goto LABEL_9;
  }
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  sub_1B6D2841C((uint64_t)&v48);
  uint64_t v25 = sub_1B67DC960(a1);
  if (!v25)
  {
LABEL_40:
    *(void *)&long long v54 = 0;
    *((void *)&v54 + 1) = 0xE000000000000000;
    sub_1B6E32B18();
    return v54;
  }
  uint64_t v26 = v25;
  int64_t v27 = *(void *)(v25 + 16);
  if (!v27)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  uint64_t v28 = *(void *)(v25 + 16);
  if (v27 != 1) {
    goto LABEL_27;
  }
  sub_1B6D284A4(v25 + 32, (uint64_t)&v54);
  if (v54 != __PAIR128__(0xE600000000000000, 0x65756C61765FLL) && (sub_1B6E334B8() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1B6D2798C(v55);
    sub_1B6D28500((uint64_t)&v54);
    return v2;
  }
  sub_1B6D28500((uint64_t)&v54);
  uint64_t v28 = *(void *)(v26 + 16);
  if (v28)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v29 = v26 + 48;
    while (1)
    {
      sub_1B62CAAD8(v29, (uint64_t)&v54);
      sub_1B62C14BC(&v54, *((uint64_t *)&v55[0] + 1));
      uint64_t DynamicType = swift_getDynamicType();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v54);
      sub_1B62CAAD8(v26 + 48, (uint64_t)&v48);
      sub_1B62C14BC(&v48, *((uint64_t *)&v49 + 1));
      uint64_t v31 = swift_getDynamicType();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v48);
      if (DynamicType != v31) {
        break;
      }
      v29 += 48;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
LABEL_31:
  *(void *)&long long v48 = 40;
  *((void *)&v48 + 1) = 0xE100000000000000;
  uint64_t v51 = MEMORY[0x1E4FBC860];
  sub_1B6C3C3B8(0, v27, 0);
  uint64_t v32 = v26 + 32;
  uint64_t v33 = v51;
  do
  {
    sub_1B6D284A4(v32, (uint64_t)&v54);
    uint64_t v34 = sub_1B6D2798C(v55);
    uint64_t v36 = v35;
    sub_1B6D28500((uint64_t)&v54);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1B6C3C3B8(0, *(void *)(v33 + 16) + 1, 1);
      uint64_t v33 = v51;
    }
    unint64_t v38 = *(void *)(v33 + 16);
    unint64_t v37 = *(void *)(v33 + 24);
    unint64_t v39 = v38 + 1;
    if (v38 >= v37 >> 1)
    {
      sub_1B6C3C3B8(v37 > 1, v38 + 1, 1);
      unint64_t v39 = v38 + 1;
      uint64_t v33 = v51;
    }
    *(void *)(v33 + 16) = v39;
    unint64_t v40 = v33 + 16 * v38;
    *(void *)(v40 + 32) = v34;
    *(void *)(v40 + 40) = v36;
    v32 += 48;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  *(void *)&long long v54 = v33;
  sub_1B6646CE4();
  sub_1B6646D3C();
  sub_1B6E31638();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  uint64_t v2 = sub_1B6E317D8();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B6D2841C(uint64_t a1)
{
  sub_1B62C6034(0, (unint64_t *)&unk_1E9DD8F18, &qword_1E9DD8F10, MEMORY[0x1E4FBBDF0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B6D284A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B6D28500(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B6D28554()
{
  return MEMORY[0x1F4186498](v0, 32, 15);
}

uint64_t sub_1B6D28564(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  void (*v43)(void *__return_ptr, double);
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  void *v47;
  void v48[6];
  void v49[6];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v44 = a4;
  long long v45 = a3;
  long long v46 = a2;
  sub_1B62B5820();
  double v8 = MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v43 = *(void (**)(void *__return_ptr, double))(*(void *)v4 + 152);
  v43(v48, v8);
  uint64_t v11 = v48[0];
  uint64_t v60 = v48[1];
  char v61 = v48[0];
  sub_1B62D8C3C((uint64_t)&v60);
  uint64_t v59 = v48[2];
  sub_1B62D8C3C((uint64_t)&v59);
  id v58 = v48[3];
  sub_1B62D8C3C((uint64_t)&v58);
  id v57 = v48[4];
  sub_1B62D8C3C((uint64_t)&v57);
  long long v56 = v48[5];
  sub_1B62D8C3C((uint64_t)&v56);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    long long v42 = a1;
    unint64_t v13 = *(void *)(v11 + 32);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 0x8000000000000008;
    unint64_t v15 = v14 | 0x6000000000000000;
    sub_1B66456F8(v13);
    char v16 = sub_1B697351C(v13, v15);
    swift_release();
    sub_1B6645740(v13);
    int64_t v17 = 0;
    uint64_t v18 = v12 - 1;
    if (v12 != 1)
    {
      a1 = v42;
      if ((v16 & 1) == 0) {
        goto LABEL_12;
      }
      long long v41 = v10;
      uint64_t v19 = 0;
      uint64_t v20 = v11 + 40;
      while (1)
      {
        unint64_t v21 = *(void *)(v20 + 8 * v19);
        uint64_t v22 = swift_allocObject();
        *(void *)(v22 + 16) = 0x8000000000000008;
        unint64_t v23 = v22 | 0x6000000000000000;
        sub_1B66456F8(v21);
        LOBYTE(v23) = sub_1B697351C(v21, v23);
        swift_release();
        sub_1B6645740(v21);
        if ((v23 & 1) == 0) {
          break;
        }
        if (v18 == ++v19)
        {
          int64_t v17 = 0;
          goto LABEL_10;
        }
      }
      int64_t v17 = v19 + 1;
LABEL_10:
      uint64_t v10 = v41;
    }
    a1 = v42;
  }
  else
  {
    int64_t v17 = 0;
  }
LABEL_12:
  uint64_t v24 = sub_1B62D8C3C((uint64_t)&v61);
  ((void (*)(void *__return_ptr, uint64_t))v43)(v49, v24);
  uint64_t v25 = v49[0];
  long long v54 = v49[1];
  uint64_t v55 = v49[0];
  sub_1B62D8C3C((uint64_t)&v54);
  uint64_t v53 = v49[2];
  sub_1B62D8C3C((uint64_t)&v53);
  unint64_t v52 = v49[3];
  sub_1B62D8C3C((uint64_t)&v52);
  uint64_t v51 = v49[4];
  sub_1B62D8C3C((uint64_t)&v51);
  uint64_t v50 = v49[5];
  sub_1B62D8C3C((uint64_t)&v50);
  uint64_t v26 = *(void *)(v25 + 16);
  sub_1B62D8C3C((uint64_t)&v55);
  long long v47 = sub_1B68C3CE8(0, v26, 0, MEMORY[0x1E4FBC860]);
  uint64_t v27 = v45();
  sub_1B6641EA4(v27);
  uint64_t v28 = v47;
  uint64_t v29 = v47[2];
  if (v29 < v17)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_1B68C3CE8(0, v29 + 1, 1, v28);
    }
    unint64_t v30 = v28[2];
    uint64_t v31 = 16 * v30 + 32;
    do
    {
      unint64_t v32 = v28[3];
      int64_t v33 = v30 + 1;
      if (v30 >= v32 >> 1) {
        uint64_t v28 = sub_1B68C3CE8(v32 > 1, v30 + 1, 1, v28);
      }
      v28[2] = v33;
      uint64_t v34 = (void *)((char *)v28 + v31);
      *uint64_t v34 = 0;
      v34[1] = 0;
      v31 += 16;
      unint64_t v30 = v33;
    }
    while (v33 < v17);
    long long v47 = v28;
  }
  uint64_t v35 = a1();
  sub_1B6641EA4(v35);
  uint64_t v36 = (uint64_t)v47;
  uint64_t v37 = sub_1B6E31118();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v10, 1, 1, v37);
  type metadata accessor for AuthoringNode();
  swift_allocObject();
  uint64_t v38 = swift_retain();
  uint64_t v39 = sub_1B6CE3580(v38, v36, (uint64_t)v10, 0, 0xF000000000000000);
  swift_release();
  return v39;
}

uint64_t sub_1B6D289B8()
{
  sub_1B678FC34(*(void *)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6D289F0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1 && object_getClass(*(id *)(v0 + 24)) == (Class)_TtC3VFX16PrelitParameters)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PrelitParameters();
    uint64_t v1 = swift_allocObject();
    *(void *)&long long v2 = 0xFFFFFFFFLL;
    *((void *)&v2 + 1) = 0xFFFFFFFFLL;
    *(_OWORD *)(v1 + 16) = v2;
    *(unsigned char *)(v1 + 32) = 0;
  }
  return v1;
}

uint64_t sub_1B6D28A5C()
{
  uint64_t v1 = v0;
  swift_getKeyPath();
  uint64_t v10 = 0;
  char v11 = 1;
  swift_retain();
  uint64_t v2 = swift_retain();
  sub_1B6B3B6FC(v2, (uint64_t)&v10);
  swift_release();
  swift_release_n();
  if ((v11 & 1) != 0 || v10 == 0xFFFFFFFFLL)
  {
    type metadata accessor for PBRParameters();
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1B6E781D0;
    *(void *)(v3 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 40) = 16777473;
    *(unsigned char *)(v3 + 44) = 1;
    *(_OWORD *)(v3 + 48) = xmmword_1B6E4F490;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    *(void *)(v3 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 88) = 16777473;
    *(unsigned char *)(v3 + 92) = 1;
    *(_OWORD *)(v3 + 96) = xmmword_1B6E4F490;
    *(void *)(v3 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 120) = 16777473;
    *(unsigned char *)(v3 + 124) = 1;
    *(_DWORD *)(v3 + 128) = 1056964608;
    *(_OWORD *)(v3 + 144) = xmmword_1B6E4F490;
    *(void *)(v3 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 168) = 16777473;
    *(unsigned char *)(v3 + 172) = 1;
    *(_DWORD *)(v3 + 176) = 0;
    *(_OWORD *)(v3 + 192) = xmmword_1B6E4F490;
    *(void *)(v3 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 216) = 16777473;
    *(unsigned char *)(v3 + 220) = 1;
    *(_DWORD *)(v3 + 224) = 1065353216;
    *(_OWORD *)(v3 + 240) = xmmword_1B6E4F490;
    *(void *)(v3 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 264) = 16777473;
    *(unsigned char *)(v3 + 268) = 1;
    *(_DWORD *)(v3 + 272) = 1065353216;
    *(_OWORD *)(v3 + 288) = xmmword_1B6E4F490;
    *(_WORD *)(v3 + 304) = 0;
    type metadata accessor for RenderPipelineFactory();
    swift_allocObject();
    uint64_t v4 = sub_1B62FFCAC(140);
    *(void *)(v4 + 88) = sub_1B6D2EFB4;
    *(void *)(v4 + 96) = 0;
    swift_release();
    uint64_t v5 = sub_1B6D7FB60(0x100000000uLL, **(void **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), 0, v4, 0x100000000uLL, 0xD000000000000018, 0x80000001B6F3DF20, -1.0);
    swift_release();
    swift_retain();
    sub_1B6C0327C(v5, v1, v3);
    uint64_t v6 = swift_release_n();
    uint64_t v10 = v5;
    MEMORY[0x1F4188790](v6, v7);
    double v8 = *(void **)(v1 + 176);
    swift_retain();
    sub_1B636E6CC((uint64_t)&type metadata for DefaultMaterialInstance, (uint64_t)&off_1F0F8EF50, v8, (void (*)(uint64_t))sub_1B68749A0);
    swift_release();
  }
  return v10;
}

uint64_t sub_1B6D28CFC@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3 = 0xEB00000000676172;
  uint64_t v4 = 0x665F74696C657270;
  uint64_t v5 = 0x5F656E696C74756FLL;
  long long v9 = xmmword_1B6EC7070;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v6 = 0xD000000000000014;
  if ((a1 & 0x4000) == 0) {
    unint64_t v6 = 0x665F74696C657270;
  }
  unint64_t v7 = 0x80000001B6F53860;
  if ((a1 & 0x4000) == 0) {
    unint64_t v7 = 0xEB00000000676172;
  }
  if (a1 < 0) {
    unint64_t v7 = 0xEC00000067617266;
  }
  else {
    uint64_t v5 = v6;
  }
  if ((a1 & 0x800) == 0) {
    uint64_t v4 = v5;
  }
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v13 = v4;
  if ((a1 & 0x800) == 0) {
    unint64_t v3 = v7;
  }
  unint64_t v14 = v3;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  nullsub_1(&v9);
  return sub_1B6D29C38((uint64_t)&v9, a2);
}

double sub_1B6D28DE0(void *a1, double *a2)
{
  double result = *a2;
  *a1 = *(void *)a2;
  return result;
}

uint64_t sub_1B6D28DEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB1E90(*a1, *a2);
}

uint64_t sub_1B6D28DF8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D28EA4()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D28F3C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D28FE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D29BEC();
  *a1 = result;
  return result;
}

void sub_1B6D29014(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xE900000000000070;
  unint64_t v5 = 0x614D6C616D726F6ELL;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000010;
    unint64_t v4 = 0x80000001B6F2E840;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x70614D726F6C6F63;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B6D2907C()
{
  unint64_t v1 = 0x614D6C616D726F6ELL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x70614D726F6C6F63;
  }
}

uint64_t sub_1B6D290E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D29BEC();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D29108(uint64_t a1)
{
  unint64_t v2 = sub_1B6D29CC0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D29144(uint64_t a1)
{
  unint64_t v2 = sub_1B6D29CC0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D29180(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6D29D14(0, (unint64_t *)&unk_1E9DD8F58, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D29CC0();
  sub_1B6E33A88();
  uint64_t v13 = *(void *)(v3 + 16);
  HIBYTE(v12) = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v2)
  {
    uint64_t v13 = *(void *)(v3 + 24);
    HIBYTE(v12) = 1;
    sub_1B6E32FA8();
    LOBYTE(v13) = 2;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6D2934C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6D29D14(0, &qword_1E9DD8F40, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v14 - v9;
  *(void *)&long long v11 = 0xFFFFFFFFLL;
  *((void *)&v11 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(v1 + 16) = v11;
  *(unsigned char *)(v1 + 32) = 0;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D29CC0();
  sub_1B6E33A48();
  if (v2)
  {
    swift_release();
  }
  else
  {
    char v15 = 0;
    sub_1B62B1EA8();
    sub_1B6E32DF8();
    *(void *)(v1 + 16) = v16;
    char v15 = 1;
    sub_1B6E32DF8();
    *(void *)(v1 + 24) = v16;
    LOBYTE(v16) = 2;
    char v13 = sub_1B6E32DA8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(unsigned char *)(v3 + 32) = v13 & 1;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t type metadata accessor for PrelitParameters()
{
  return self;
}

uint64_t sub_1B6D295AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1B6D2934C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D29604(void *a1)
{
  return sub_1B6D29180(a1);
}

uint64_t sub_1B6D29628(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer) && *(void *)(*(void *)(result + 8) + 192))
  {
    swift_getObjectType();
    swift_retain();
    id v5 = objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
    uint64_t v6 = sub_1B68007AC((uint64_t)v5, 0);
    if (v6)
    {
      uint64_t v9 = v7;
      uint64_t v10 = v8;
      uint64_t v19 = a2;
      long long v18 = v6;
      sub_1B62EC494((uint64_t)v6, v7, v8, 0);
      uint64_t v11 = sub_1B62EBE70(*(void *)(v3 + 16), v22);
      uint64_t v12 = sub_1B62EBE70(*(void *)(v3 + 24), v22);
      sub_1B6357350(v11, 100);
      sub_1B6357350(v12, 104);
      BOOL v13 = sub_1B62EC0CC((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64908, *(void *)(v3 + 16))
         || sub_1B62EC0CC((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64908, *(void *)(v3 + 24));
      *(unsigned char *)(v19 + 225) = v13;
      v22[0] = v18;
      v22[1] = v9;
      v22[2] = v10;
      v22[3] = 0;
      char v23 = 0;
      swift_unknownObjectRetain();
      sub_1B62E9144((uint64_t)v22, 2, 0);
      swift_unknownObjectRelease();
      sub_1B6D29DAC(0, &qword_1E9DD8F68, (uint64_t (*)(uint64_t))sub_1B6D29D78, MEMORY[0x1E4FBBE00]);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
      *(void *)(inited + 32) = v11;
      *(void *)(inited + 40) = v12;
      uint64_t v20 = inited;
      sub_1B6E31C48();
      uint64_t v15 = v20;
      uint64_t v21 = MEMORY[0x1E4FBC860];
      if (*(void *)(v15 + 32))
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v16 = swift_unknownObjectRetain();
        MEMORY[0x1BA9B3870](v16);
        if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1B6E31C78();
        }
        sub_1B6E31CC8();
        sub_1B6E31C48();
        if (!*(void *)(v15 + 40)) {
          goto LABEL_19;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if (!*(void *)(v15 + 40))
        {
LABEL_19:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          *(void *)(v19 + 136) = v21;
          return result;
        }
      }
      uint64_t v17 = swift_unknownObjectRetain();
      MEMORY[0x1BA9B3870](v17);
      if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1B6E31C78();
      }
      sub_1B6E31CC8();
      sub_1B6E31C48();
      goto LABEL_19;
    }
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B6D299A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v6 = *(void *)(v2 + 16);
  sub_1B6B1BF68(v6, 0, ObjectType, a2);
  int v7 = v6;
  unint64_t v8 = HIDWORD(v6);
  unint64_t v9 = *(void *)(v2 + 24);
  sub_1B6B1BF68(v9, 0, ObjectType, a2);
  int v10 = v9;
  unint64_t v11 = HIDWORD(v9);
  LOBYTE(v3) = *(unsigned char *)(v3 + 32);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = v7;
  *(_DWORD *)(result + 20) = v8;
  *(_DWORD *)(result + 24) = v10;
  *(_DWORD *)(result + 28) = v11;
  *(unsigned char *)(result + 32) = v3;
  return result;
}

BOOL sub_1B6D29A78(uint64_t a1)
{
  if (v1[4] == a1 && v1[5] == HIDWORD(a1)) {
    return 1;
  }
  if (v1[6] == a1) {
    return v1[7] == HIDWORD(a1);
  }
  return 0;
}

uint64_t sub_1B6D29AB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  unint64_t v4 = sub_1B6A69610(*(void *)(*v1 + 16));
  int v5 = v4;
  unint64_t v6 = HIDWORD(v4);
  unint64_t v7 = sub_1B6A69610(*(void *)(v3 + 24));
  int v8 = v7;
  unint64_t v9 = HIDWORD(v7);
  LOBYTE(v3) = *(unsigned char *)(v3 + 32);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 20) = v6;
  *(_DWORD *)(result + 24) = v8;
  *(_DWORD *)(result + 28) = v9;
  *(unsigned char *)(result + 32) = v3;
  *a1 = result;
  return result;
}

uint64_t sub_1B6D29B44(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1B6D29BAC(&qword_1E9DD8F28);
  uint64_t result = sub_1B6D29BAC((unint64_t *)&unk_1E9DD8F30);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B6D29BAC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PrelitParameters();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6D29BEC()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D29C38(uint64_t a1, uint64_t a2)
{
  sub_1B62D853C(0, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B6D29CC0()
{
  unint64_t result = qword_1E9DD8F48;
  if (!qword_1E9DD8F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8F48);
  }
  return result;
}

void sub_1B6D29D14(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6D29CC0();
    unint64_t v7 = a3(a1, &type metadata for PrelitParameters.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1B6D29D78(uint64_t a1)
{
}

void sub_1B6D29DAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

double sub_1B6D29E10()
{
  sub_1B62D853C(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = *(unsigned __int8 *)(v0 + 32);
  *(_OWORD *)(v1 + 16) = xmmword_1B6E85730;
  *(_OWORD *)(v1 + 32) = xmmword_1B6EC7080;
  *(unsigned char *)(v1 + 48) = 0;
  *(void *)(v1 + 64) = v2;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 128) = 13;
  BOOL v3 = *(_DWORD *)(v0 + 16) != -1 || *(_DWORD *)(v0 + 20) != 0;
  *(_OWORD *)(v1 + 144) = xmmword_1B6EC7090;
  *(unsigned char *)(v1 + 160) = 0;
  *(void *)(v1 + 176) = v3;
  *(_OWORD *)(v1 + 184) = 0uLL;
  *(_OWORD *)(v1 + 200) = 0uLL;
  *(_OWORD *)(v1 + 216) = 0uLL;
  *(void *)(v1 + 232) = 0;
  *(unsigned char *)(v1 + 240) = 13;
  BOOL v4 = *(_DWORD *)(v0 + 24) != -1 || *(_DWORD *)(v0 + 28) != 0;
  *(_OWORD *)(v1 + 256) = xmmword_1B6EC70A0;
  *(unsigned char *)(v1 + 272) = 0;
  *(void *)(v1 + 288) = v4;
  *(void *)(v1 + 344) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(unsigned char *)(v1 + 352) = 13;
  *(_OWORD *)(v1 + 368) = xmmword_1B6EC70B0;
  *(unsigned char *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(unsigned char *)(v1 + 464) = 13;
  return result;
}

unsigned char *storeEnumTagSinglePayload for PrelitParameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D2A01CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrelitParameters.CodingKeys()
{
  return &type metadata for PrelitParameters.CodingKeys;
}

ValueMetadata *type metadata accessor for DefaultMaterialInstance()
{
  return &type metadata for DefaultMaterialInstance;
}

unint64_t sub_1B6D2A068()
{
  unint64_t result = qword_1E9DD8F78;
  if (!qword_1E9DD8F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8F78);
  }
  return result;
}

unint64_t sub_1B6D2A0C0()
{
  unint64_t result = qword_1E9DD8F80;
  if (!qword_1E9DD8F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8F80);
  }
  return result;
}

unint64_t sub_1B6D2A118()
{
  unint64_t result = qword_1E9DD8F88;
  if (!qword_1E9DD8F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8F88);
  }
  return result;
}

_UNKNOWN **sub_1B6D2A16C()
{
  return &off_1EB96D088;
}

uint64_t sub_1B6D2A178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  swift_bridgeObjectRetain();
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  MEMORY[0x1BA9B3690](a4, a5, a3);
  sub_1B6E31948();
  if (!a1)
  {
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    return sub_1B6E31948();
  }
  uint64_t v15 = *(void *)(a7 + 16);
  if (*(void *)(v15 + 16)
    && (unint64_t v16 = sub_1B62C1A30(a1), (v17 & 1) != 0)
    && *(unsigned char *)(*(void *)(v15 + 56) + v16) == 1)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    if (*(void *)(*(void *)(a8 + 16) + 16)) {
      sub_1B62C1A30(a1);
    }
  }
  else
  {
    if (!*(void *)(*(void *)(a8 + 16) + 16) || (sub_1B62C1A30(a1), (v18 & 1) == 0) || (a9 & 1) == 0)
    {
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v51 = *(void *)(a7 + 16);
      *(void *)(a7 + 16) = 0x8000000000000000;
      sub_1B67E3E8C(1, a1, isUniquelyReferenced_nonNull_native);
      *(void *)(a7 + 16) = v51;
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(a10 + 16);
      char v22 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v52 = *(void *)(a8 + 16);
      *(void *)(a8 + 16) = 0x8000000000000000;
      sub_1B67E9070(v21, a1, v22);
      *(void *)(a8 + 16) = v52;
      swift_bridgeObjectRelease();
      ++*(void *)(a10 + 16);
      uint64_t v23 = *(void *)(a1 + 16);
      int64_t v24 = *(void *)(v23 + 16);
      uint64_t v25 = MEMORY[0x1E4FBC860];
      if (v24)
      {
        uint64_t v44 = a3;
        uint64_t v45 = a7;
        uint64_t v46 = a1;
        uint64_t v53 = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        sub_1B6C3C644(0, v24, 0);
        uint64_t v26 = 0;
        uint64_t v25 = v53;
        unint64_t v27 = *(void *)(v53 + 16);
        uint64_t v28 = 16 * v27;
        do
        {
          uint64_t v29 = *(void *)(v23 + v26 + 32);
          uint64_t v30 = *(void *)(v23 + v26 + 40);
          unint64_t v31 = *(void *)(v53 + 24);
          int64_t v32 = v27 + 1;
          swift_retain();
          if (v27 >= v31 >> 1) {
            sub_1B6C3C644(v31 > 1, v32, 1);
          }
          *(void *)(v53 + 16) = v32;
          uint64_t v33 = v53 + v28 + v26;
          *(void *)(v33 + 32) = v29;
          *(void *)(v33 + 40) = v30;
          v26 += 16;
          ++v27;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
        a7 = v45;
        a1 = v46;
        a3 = v44;
      }
      uint64_t v34 = *(void *)(v25 + 16);
      if (v34) {
        sub_1B6E31948();
      }
      if (a9)
      {
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
      }
      swift_retain();
      sub_1B682A98C();
      swift_release();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      uint64_t v35 = sub_1B6E31818();
      uint64_t v37 = HIBYTE(v36) & 0xF;
      if ((v36 & 0x2000000000000000) == 0) {
        uint64_t v37 = v35 & 0xFFFFFFFFFFFFLL;
      }
      if (v37)
      {
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
      }
      swift_bridgeObjectRelease();
      if (v34)
      {
        sub_1B6E31948();
        uint64_t v38 = a3 + 1;
        swift_bridgeObjectRetain();
        uint64_t v39 = (uint64_t *)(v25 + 40);
        do
        {
          uint64_t v41 = *(v39 - 1);
          if (v41)
          {
            uint64_t v40 = *v39;
            swift_retain_n();
          }
          else
          {
            uint64_t v40 = 0;
          }
          LOBYTE(v43) = a9 & 1;
          sub_1B6D2A178(v41, v40, v38, v47, v48, a6, a7, a8, v43, a10);
          swift_release_n();
          v39 += 2;
          --v34;
        }
        while (v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B6E31948();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      char v42 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v54 = *(void *)(a7 + 16);
      *(void *)(a7 + 16) = 0x8000000000000000;
      sub_1B67E3E8C(0, a1, v42);
      *(void *)(a7 + 16) = v54;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    swift_retain();
    swift_bridgeObjectRelease();
  }
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_36:
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D2A7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  swift_bridgeObjectRetain();
  uint64_t v38 = a4;
  MEMORY[0x1BA9B3690](a4, a5, a3);
  sub_1B6E31948();
  if (!a1)
  {
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    return sub_1B6E31948();
  }
  uint64_t v16 = *(void *)(a7 + 16);
  if (*(void *)(v16 + 16)
    && (unint64_t v17 = sub_1B62C1A30(a1), (v18 & 1) != 0)
    && *(unsigned char *)(*(void *)(v16 + 56) + v17) == 1)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v41 = 91;
    unint64_t v42 = 0xE100000000000000;
    if (*(void *)(*(void *)(a8 + 16) + 16)) {
      sub_1B62C1A30(a1);
    }
    sub_1B6E33098();
  }
  else
  {
    if (!*(void *)(*(void *)(a8 + 16) + 16) || (sub_1B62C1A30(a1), (v19 & 1) == 0) || (a9 & 1) == 0)
    {
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v41 = *(void *)(a7 + 16);
      *(void *)(a7 + 16) = 0x8000000000000000;
      sub_1B67E3E8C(1, a1, isUniquelyReferenced_nonNull_native);
      *(void *)(a7 + 16) = v41;
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(a10 + 16);
      char v23 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v41 = *(void *)(a8 + 16);
      *(void *)(a8 + 16) = 0x8000000000000000;
      sub_1B67E9070(v22, a1, v23);
      *(void *)(a8 + 16) = v41;
      uint64_t v24 = swift_bridgeObjectRelease();
      ++*(void *)(a10 + 16);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                             + 152))(&v41, v24);
      uint64_t v25 = v41;
      unint64_t v51 = v42;
      uint64_t v52 = v41;
      sub_1B62D8C3C((uint64_t)&v51);
      uint64_t v50 = v43;
      sub_1B62D8C3C((uint64_t)&v50);
      uint64_t v49 = v44;
      sub_1B62D8C3C((uint64_t)&v49);
      uint64_t v48 = v45;
      sub_1B62D8C3C((uint64_t)&v48);
      uint64_t v47 = v46;
      sub_1B62D8C3C((uint64_t)&v47);
      unint64_t v26 = *(void *)(v25 + 16);
      sub_1B62D8C3C((uint64_t)&v52);
      if (*(void *)(*(void *)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) > v26) {
        unint64_t v26 = *(void *)(*(void *)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
      }
      swift_retain();
      uint64_t v27 = sub_1B6D2AEA8(0, v26, a1);
      uint64_t v37 = a1;
      swift_release();
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28) {
        sub_1B6E31948();
      }
      if (a9)
      {
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
      }
      swift_retain();
      sub_1B682A98C();
      swift_release();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      uint64_t v29 = sub_1B6E31818();
      uint64_t v31 = HIBYTE(v30) & 0xF;
      if ((v30 & 0x2000000000000000) == 0) {
        uint64_t v31 = v29 & 0xFFFFFFFFFFFFLL;
      }
      if (v31)
      {
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
      }
      swift_bridgeObjectRelease();
      if (v28)
      {
        sub_1B6E31948();
        int64_t v32 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
        do
        {
          uint64_t v34 = *(v32 - 1);
          if (v34)
          {
            uint64_t v33 = *v32;
            swift_retain_n();
          }
          else
          {
            uint64_t v33 = 0;
          }
          LOBYTE(v36) = a9 & 1;
          sub_1B6D2A7BC(v34, v33, a3 + 1, v38, a5, a6, a7, a8, v36, a10);
          swift_release_n();
          v32 += 2;
          --v28;
        }
        while (v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B6E31948();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v40 = *(void *)(a7 + 16);
      *(void *)(a7 + 16) = 0x8000000000000000;
      sub_1B67E3E8C(0, v37, v35);
      *(void *)(a7 + 16) = v40;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1B6E33098();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      goto LABEL_33;
    }
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v41 = 91;
    unint64_t v42 = 0xE100000000000000;
    sub_1B6E33098();
  }
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v41 = 46;
  unint64_t v42 = 0xE100000000000000;
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
LABEL_33:
  sub_1B6E31948();
  return swift_bridgeObjectRelease();
}

_UNKNOWN **sub_1B6D2AE9C()
{
  return &off_1EB94EE38;
}

uint64_t sub_1B6D2AEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (a2 != a1)
  {
    uint64_t v5 = a1;
    uint64_t v18 = MEMORY[0x1E4FBC860];
    sub_1B6C3C5C4(0, (a2 - a1) & ~((a2 - a1) >> 63), 0);
    uint64_t v3 = v18;
    uint64_t v6 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
    uint64_t v7 = 16 * v5;
    uint64_t v8 = a3;
    while (1)
    {
      uint64_t v9 = *(void *)(v8 + v6);
      if (v5 >= *(void *)(v9 + 16)) {
        break;
      }
      uint64_t v10 = v9 + v7;
      uint64_t v11 = *(void *)(v10 + 32);
      if (!v11) {
        goto LABEL_7;
      }
      uint64_t v12 = *(void *)(v10 + 40);
      swift_retain();
LABEL_8:
      unint64_t v14 = *(void *)(v18 + 16);
      unint64_t v13 = *(void *)(v18 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1B6C3C5C4(v13 > 1, v14 + 1, 1);
        uint64_t v8 = a3;
      }
      *(void *)(v18 + 16) = v14 + 1;
      uint64_t v15 = v18 + 16 * v14;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v12;
      ++v5;
      v7 += 16;
      if (a2 == v5) {
        return v3;
      }
    }
    uint64_t v11 = 0;
LABEL_7:
    uint64_t v12 = 0;
    goto LABEL_8;
  }
  return v3;
}

uint64_t sub_1B6D2AFCC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D2B5A0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D2B008(uint64_t a1)
{
  unint64_t v2 = sub_1B6D2B5A0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D2B044(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D2B15C(a1, a2, a3, &qword_1E9DD8FA0, (void (*)(void))sub_1B6D2B5A0, (uint64_t)&type metadata for OldEvent.CodingKeys, (void (*)(void))sub_1B6D2B5A0);
}

uint64_t sub_1B6D2B094(uint64_t a1)
{
  unint64_t v2 = sub_1B6D2B4EC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D2B0D0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D2B4EC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D2B10C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D2B15C(a1, a2, a3, &qword_1E9DD8F90, (void (*)(void))sub_1B6D2B4EC, (uint64_t)&type metadata for NewEvent.CodingKeys, (void (*)(void))sub_1B6D2B4EC);
}

uint64_t sub_1B6D2B15C(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(void), uint64_t a6, void (*a7)(void))
{
  sub_1B6D2B540(0, a4, a5);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v12);
  unint64_t v14 = (char *)&v16 - v13;
  sub_1B62C14BC(a1, a1[3]);
  a7();
  sub_1B6E33A88();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t *sub_1B6D2B284(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 32);
  v28[0] = *(_OWORD *)(v1 + 16);
  v28[1] = v3;
  uint64_t v29 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v28, 0x200000000, v20);
  sub_1B6309B40((uint64_t)v20, (uint64_t)v25);
  if (*(void *)&v25[0])
  {
    v25[8] = v25[2];
    v25[9] = v25[3];
    v25[10] = v25[4];
    v25[11] = v25[5];
    v25[6] = v25[0];
    v25[7] = v25[1];
    sub_1B6365460(0);
    sub_1B632F170(v20);
  }
  long long v4 = *(_OWORD *)(v1 + 72);
  v26[0] = *(_OWORD *)(v1 + 56);
  v26[1] = v4;
  uint64_t v27 = *(void *)(v1 + 88);
  sub_1B62C9DA8(a1, (uint64_t)v26, 0x200000000, v21);
  unint64_t result = (uint64_t *)sub_1B6309B40((uint64_t)v21, (uint64_t)v22);
  if (v22[0])
  {
    if (v24 >= 1 && v23)
    {
      uint64_t v6 = 48 * v23;
      uint64_t v7 = v22[5] + 40;
      do
      {
        uint64_t v12 = *(void *)v7;
        uint64_t v13 = *(os_unfair_lock_s **)(*(void *)v7 + 376);
        swift_retain();
        os_unfair_lock_lock(v13);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
        int v14 = *(_DWORD *)(v12 + 24);
        swift_retain();
        uint64_t v19 = 0;
        memset(v18, 0, sizeof(v18));
        uint64_t v17 = 0;
        memset(v16, 0, sizeof(v16));
        int v15 = sub_1B637F628(v14, (uint64_t)&type metadata for OldEvent, (uint64_t)&off_1F0FA6BD0, 0, 0, (uint64_t)v18, (uint64_t)v16);
        swift_release();
        sub_1B6386458((uint64_t)v16);
        sub_1B6386458((uint64_t)v18);
        if (sub_1B63B4340(v15))
        {
          sub_1B66603E4(v15);
        }
        else
        {
          uint64_t v8 = *(void *)(v12 + 232);
          uint64_t v9 = *(void *)(v12 + 240);
          char v10 = *(unsigned char *)(v12 + 120);
          uint64_t v11 = *(unsigned int *)(v12 + 28);
          LOBYTE(v18[0]) = *(unsigned char *)(v12 + 32);
          sub_1B628EEF4(v8, v9, v15, v10, v11 | ((unint64_t)LOBYTE(v18[0]) << 32));
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
        swift_release();
        v7 += 48;
        v6 -= 48;
      }
      while (v6);
    }
    return sub_1B632F170(v21);
  }
  return result;
}

ValueMetadata *type metadata accessor for NewEvent()
{
  return &type metadata for NewEvent;
}

ValueMetadata *type metadata accessor for OldEvent()
{
  return &type metadata for OldEvent;
}

unint64_t sub_1B6D2B4EC()
{
  unint64_t result = qword_1E9DD8F98;
  if (!qword_1E9DD8F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8F98);
  }
  return result;
}

void sub_1B6D2B540(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_1B6E33038();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1B6D2B5A0()
{
  unint64_t result = qword_1E9DD8FA8;
  if (!qword_1E9DD8FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8FA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for OldEvent.CodingKeys()
{
  return &type metadata for OldEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for NewEvent.CodingKeys()
{
  return &type metadata for NewEvent.CodingKeys;
}

unint64_t sub_1B6D2B618()
{
  unint64_t result = qword_1E9DD8FB0;
  if (!qword_1E9DD8FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8FB0);
  }
  return result;
}

unint64_t sub_1B6D2B670()
{
  unint64_t result = qword_1E9DD8FB8;
  if (!qword_1E9DD8FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8FB8);
  }
  return result;
}

unint64_t sub_1B6D2B6C8()
{
  unint64_t result = qword_1E9DD8FC0;
  if (!qword_1E9DD8FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8FC0);
  }
  return result;
}

unint64_t sub_1B6D2B720()
{
  unint64_t result = qword_1E9DD8FC8;
  if (!qword_1E9DD8FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8FC8);
  }
  return result;
}

uint64_t sub_1B6D2B774()
{
  return sub_1B6E31BD8();
}

uint64_t sub_1B6D2B7D4()
{
  return sub_1B6E31B38();
}

void sub_1B6D2B824(void *a1@<X8>)
{
  *a1 = &unk_1F0F83FC0;
}

uint64_t sub_1B6D2B834(void *a1, uint64_t a2)
{
  sub_1B6D30B4C(0, (unint64_t *)&unk_1E9DD9110, (uint64_t (*)(void))sub_1B6D30AF8, (uint64_t)&type metadata for TextureSampler.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  char v10 = &v12[-v9];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D30AF8();
  sub_1B6E33A88();
  v12[31] = a2 & 1;
  v12[30] = 0;
  sub_1B66C6340();
  sub_1B6E32FA8();
  if (!v2)
  {
    v12[29] = BYTE1(a2) & 1;
    v12[28] = 1;
    sub_1B6E32FA8();
    v12[27] = BYTE2(a2);
    v12[26] = 2;
    sub_1B66C626C();
    sub_1B6E32FA8();
    v12[25] = BYTE3(a2);
    v12[24] = 3;
    sub_1B66C63C0();
    sub_1B6E32FA8();
    v12[15] = BYTE4(a2);
    v12[14] = 4;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6D2BABC(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB0A64(*a1, *a2);
}

uint64_t sub_1B6D2BAC8()
{
  uint64_t result = 0x65746C694667616DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65746C69466E696DLL;
      break;
    case 2:
      uint64_t result = 0x65746C694670696DLL;
      break;
    case 3:
      uint64_t result = 0x5370617277;
      break;
    case 4:
      uint64_t result = 0x5470617277;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D2BB6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D2F5BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D2BB94(uint64_t a1)
{
  unint64_t v2 = sub_1B6D30AF8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D2BBD0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D30AF8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D2BC0C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1B6D2F7CC(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result);
    a2[3] = BYTE3(result);
    a2[4] = BYTE4(result);
  }
  return result;
}

uint64_t sub_1B6D2BC5C(void *a1)
{
  uint64_t v2 = 256;
  if (!v1[1]) {
    uint64_t v2 = 0;
  }
  return sub_1B6D2B834(a1, v2 | *v1 | ((unint64_t)v1[2] << 16) | ((unint64_t)v1[3] << 24) | ((unint64_t)v1[4] << 32));
}

uint64_t sub_1B6D2BCA4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB180C(*a1, *a2);
}

uint64_t sub_1B6D2BCBC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

void sub_1B6D2BCF4(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000079;
  uint64_t v3 = 0x7469736E65746E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x65727574786574;
      goto LABEL_3;
    case 2:
      *a1 = 0x72656C706D6173;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x616942656C616373;
      a1[1] = 0xE900000000000073;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B6D2BD9C()
{
  uint64_t result = 0x7469736E65746E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65727574786574;
      break;
    case 2:
      uint64_t result = 0x72656C706D6173;
      break;
    case 3:
      uint64_t result = 0x616942656C616373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D2BE38@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D2BE68(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3029C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D2BEA4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3029C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D2BEE0(void *a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5)
{
  __n128 v15 = a5;
  unint64_t v16 = a2;
  __n128 v17 = a4;
  sub_1B6D30B4C(0, &qword_1E9DD9080, (uint64_t (*)(void))sub_1B6D3029C, (uint64_t)&type metadata for PBRColorProperty.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v15 - v12;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3029C();
  sub_1B6E33A88();
  __n128 v18 = v17;
  char v19 = 0;
  sub_1B6D30B4C(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B6D301CC((unint64_t *)&qword_1EB97D1F8);
  sub_1B6E32FA8();
  if (!v5)
  {
    v18.n128_u64[0] = v16;
    char v19 = 1;
    sub_1B6657A10();
    sub_1B6E32FA8();
    v18.n128_u16[0] = a3 & 0x101;
    v18.n128_u8[2] = BYTE2(a3);
    v18.n128_u8[3] = BYTE3(a3);
    v18.n128_u8[4] = BYTE4(a3);
    char v19 = 2;
    sub_1B6D30248();
    sub_1B6E32FA8();
    __n128 v18 = v15;
    char v19 = 3;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1B6D2C1AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6D2FABC(a1);
  if (!v2)
  {
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = result;
    *(unsigned char *)(a2 + 24) = v5 & 1;
    *(unsigned char *)(a2 + 25) = BYTE1(v5) & 1;
    *(unsigned char *)(a2 + 26) = BYTE2(v5);
    *(unsigned char *)(a2 + 27) = BYTE3(v5);
    *(unsigned char *)(a2 + 28) = BYTE4(v5);
    *(_OWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B6D2C20C(void *a1)
{
  uint64_t v2 = 256;
  if (!v1[1].n128_u8[9]) {
    uint64_t v2 = 0;
  }
  return sub_1B6D2BEE0(a1, v1[1].n128_u64[0], v2 | v1[1].n128_u8[8] | ((unint64_t)v1[1].n128_u8[10] << 16) | ((unint64_t)v1[1].n128_u8[11] << 24) | ((unint64_t)v1[1].n128_u8[12] << 32), *v1, v1[2]);
}

__n128 sub_1B6D2C260@<Q0>(uint64_t a1@<X8>)
{
  char v3 = *((unsigned char *)v1 + 24);
  char v4 = *((unsigned char *)v1 + 25);
  __int16 v5 = *((_WORD *)v1 + 13);
  char v6 = *((unsigned char *)v1 + 28);
  long long v9 = *v1;
  __n128 v10 = (__n128)v1[2];
  unint64_t v7 = sub_1B6A69610(*((void *)v1 + 2));
  *(_OWORD *)a1 = v9;
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 25) = v4;
  *(_WORD *)(a1 + 26) = v5;
  *(unsigned char *)(a1 + 28) = v6;
  __n128 result = v10;
  *(__n128 *)(a1 + 32) = v10;
  return result;
}

uint64_t sub_1B6D2C2EC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D2C3D4()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D2C4A4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D2C588@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D2C5C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D2C5F0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D30124();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D2C62C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D30124();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D2C668(void *a1, unint64_t a2, uint64_t a3, double a4, __n128 a5)
{
  __n128 v15 = a5;
  unint64_t v16 = a2;
  sub_1B6D30B4C(0, (unint64_t *)&unk_1E9DD9050, (uint64_t (*)(void))sub_1B6D30124, (uint64_t)&type metadata for PBRScalarProperty.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v15 - v12;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D30124();
  sub_1B6E33A88();
  v17.n128_u8[0] = 0;
  sub_1B6E32F78();
  if (!v5)
  {
    v17.n128_u64[0] = v16;
    char v18 = 1;
    sub_1B6657A10();
    sub_1B6E32FA8();
    v17.n128_u16[0] = a3 & 0x101;
    v17.n128_u8[2] = BYTE2(a3);
    v17.n128_u8[3] = BYTE3(a3);
    v17.n128_u8[4] = BYTE4(a3);
    char v18 = 2;
    sub_1B6D30248();
    sub_1B6E32FA8();
    __n128 v17 = v15;
    char v18 = 3;
    sub_1B6D30B4C(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    sub_1B6D301CC((unint64_t *)&qword_1EB97D1F8);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void sub_1B6D2C928(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v6 = sub_1B6D2FE00(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(unsigned char *)(a2 + 8) = v5 & 1;
    *(unsigned char *)(a2 + 9) = BYTE1(v5) & 1;
    *(unsigned char *)(a2 + 10) = BYTE2(v5);
    *(unsigned char *)(a2 + 11) = BYTE3(v5);
    *(unsigned char *)(a2 + 12) = BYTE4(v5);
    *(float *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 32) = v7;
  }
}

uint64_t sub_1B6D2C988(void *a1, double a2)
{
  uint64_t v3 = 256;
  if (!v2->n128_u8[9]) {
    uint64_t v3 = 0;
  }
  LODWORD(a2) = v2[1].n128_u32[0];
  return sub_1B6D2C668(a1, v2->n128_u64[0], v3 | v2->n128_u8[8] | ((unint64_t)v2->n128_u8[10] << 16) | ((unint64_t)v2->n128_u8[11] << 24) | ((unint64_t)v2->n128_u8[12] << 32), a2, v2[2]);
}

__n128 sub_1B6D2C9DC@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v3 = v1->n128_u8[8];
  unsigned __int8 v4 = v1->n128_u8[9];
  unsigned __int16 v5 = v1->n128_u16[5];
  unsigned __int8 v6 = v1->n128_u8[12];
  unsigned __int32 v7 = v1[1].n128_u32[0];
  __n128 v9 = v1[2];
  a1->n128_u64[0] = sub_1B6A69610(v1->n128_u64[0]);
  a1->n128_u8[8] = v3;
  a1->n128_u8[9] = v4;
  a1->n128_u16[5] = v5;
  a1->n128_u8[12] = v6;
  a1[1].n128_u32[0] = v7;
  __n128 result = v9;
  a1[2] = v9;
  return result;
}

uint64_t sub_1B6D2CA6C(char a1)
{
  uint64_t result = 0x6F6465626C61;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6576697373696D65;
      break;
    case 2:
      uint64_t v3 = 0x6E6867756F72;
      goto LABEL_5;
    case 3:
      uint64_t v3 = 0x6E6C6174656DLL;
LABEL_5:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7365000000000000;
      break;
    case 4:
      uint64_t result = 0x6F6973756C63636FLL;
      break;
    case 5:
      uint64_t result = 0x6C616D726F6ELL;
      break;
    case 6:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      uint64_t result = 0x656C62756F447369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D2CB78(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BAF474(*a1, *a2);
}

uint64_t sub_1B6D2CB84()
{
  return sub_1B6D2CA6C(*v0);
}

uint64_t sub_1B6D2CB8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D2F250(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D2CBB4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D2F0AC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D2CBF0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D2F0AC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D2CC2C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PBRParameters()
{
  return self;
}

uint64_t getEnumTagSinglePayload for PBRScalarProperty(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PBRScalarProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRScalarProperty()
{
  return &type metadata for PBRScalarProperty;
}

uint64_t getEnumTagSinglePayload for PBRColorProperty(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PBRColorProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRColorProperty()
{
  return &type metadata for PBRColorProperty;
}

uint64_t sub_1B6D2CDA8(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6D30B4C(0, &qword_1E9DD9010, (uint64_t (*)(void))sub_1B6D2F0AC, (uint64_t)&type metadata for PBRParameters.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v46 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D2F0AC();
  sub_1B6E33A88();
  char v11 = *(unsigned char *)(v3 + 40);
  char v12 = *(unsigned char *)(v3 + 41);
  __int16 v13 = *(_WORD *)(v3 + 42);
  char v14 = *(unsigned char *)(v3 + 44);
  long long v15 = *(_OWORD *)(v3 + 48);
  long long v46 = *(_OWORD *)(v3 + 16);
  uint64_t v47 = *(void *)(v3 + 32);
  char v48 = v11;
  char v49 = v12;
  __int16 v50 = v13;
  char v51 = v14;
  long long v52 = v15;
  char v53 = 0;
  sub_1B6D2F1A8();
  sub_1B6E32FA8();
  if (!v2)
  {
    char v16 = *(unsigned char *)(v3 + 88);
    char v17 = *(unsigned char *)(v3 + 89);
    __int16 v18 = *(_WORD *)(v3 + 90);
    char v19 = *(unsigned char *)(v3 + 92);
    long long v20 = *(_OWORD *)(v3 + 96);
    long long v46 = *(_OWORD *)(v3 + 64);
    uint64_t v47 = *(void *)(v3 + 80);
    char v48 = v16;
    char v49 = v17;
    __int16 v50 = v18;
    char v51 = v19;
    long long v52 = v20;
    char v53 = 1;
    sub_1B6E32FA8();
    char v21 = *(unsigned char *)(v3 + 120);
    char v22 = *(unsigned char *)(v3 + 121);
    __int16 v23 = *(_WORD *)(v3 + 122);
    char v24 = *(unsigned char *)(v3 + 124);
    int v25 = *(_DWORD *)(v3 + 128);
    long long v26 = *(_OWORD *)(v3 + 144);
    *(void *)&long long v46 = *(void *)(v3 + 112);
    BYTE8(v46) = v21;
    BYTE9(v46) = v22;
    WORD5(v46) = v23;
    BYTE12(v46) = v24;
    LODWORD(v47) = v25;
    long long v52 = v26;
    char v53 = 2;
    sub_1B6D2F1FC();
    sub_1B6E32FA8();
    char v27 = *(unsigned char *)(v3 + 168);
    char v28 = *(unsigned char *)(v3 + 169);
    __int16 v29 = *(_WORD *)(v3 + 170);
    char v30 = *(unsigned char *)(v3 + 172);
    int v31 = *(_DWORD *)(v3 + 176);
    long long v32 = *(_OWORD *)(v3 + 192);
    *(void *)&long long v46 = *(void *)(v3 + 160);
    BYTE8(v46) = v27;
    BYTE9(v46) = v28;
    WORD5(v46) = v29;
    BYTE12(v46) = v30;
    LODWORD(v47) = v31;
    long long v52 = v32;
    char v53 = 3;
    sub_1B6E32FA8();
    char v33 = *(unsigned char *)(v3 + 216);
    char v34 = *(unsigned char *)(v3 + 217);
    __int16 v35 = *(_WORD *)(v3 + 218);
    char v36 = *(unsigned char *)(v3 + 220);
    int v37 = *(_DWORD *)(v3 + 224);
    long long v38 = *(_OWORD *)(v3 + 240);
    *(void *)&long long v46 = *(void *)(v3 + 208);
    BYTE8(v46) = v33;
    BYTE9(v46) = v34;
    WORD5(v46) = v35;
    BYTE12(v46) = v36;
    LODWORD(v47) = v37;
    long long v52 = v38;
    char v53 = 4;
    sub_1B6E32FA8();
    char v39 = *(unsigned char *)(v3 + 264);
    char v40 = *(unsigned char *)(v3 + 265);
    __int16 v41 = *(_WORD *)(v3 + 266);
    char v42 = *(unsigned char *)(v3 + 268);
    int v43 = *(_DWORD *)(v3 + 272);
    long long v44 = *(_OWORD *)(v3 + 288);
    *(void *)&long long v46 = *(void *)(v3 + 256);
    BYTE8(v46) = v39;
    BYTE9(v46) = v40;
    WORD5(v46) = v41;
    BYTE12(v46) = v42;
    LODWORD(v47) = v43;
    long long v52 = v44;
    char v53 = 5;
    sub_1B6E32FA8();
    LOBYTE(v46) = 6;
    sub_1B6E32F58();
    LOBYTE(v46) = 7;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6D2D1DC(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6D30B4C(0, &qword_1E9DD8FF0, (uint64_t (*)(void))sub_1B6D2F0AC, (uint64_t)&type metadata for PBRParameters.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v52 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v52 - v8;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 32) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 40) = 16777473;
  *(unsigned char *)(v1 + 44) = 1;
  *(_OWORD *)(v1 + 48) = xmmword_1B6E4F490;
  *(_OWORD *)(v1 + 64) = 0u;
  *(void *)(v1 + 80) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 88) = 16777473;
  *(unsigned char *)(v1 + 92) = 1;
  *(_OWORD *)(v1 + 96) = xmmword_1B6E4F490;
  *(void *)(v1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 120) = 16777473;
  *(unsigned char *)(v1 + 124) = 1;
  *(_DWORD *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 144) = xmmword_1B6E4F490;
  *(void *)(v1 + 160) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 168) = 16777473;
  *(unsigned char *)(v1 + 172) = 1;
  *(_DWORD *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 192) = xmmword_1B6E4F490;
  *(void *)(v1 + 208) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 216) = 16777473;
  *(unsigned char *)(v1 + 220) = 1;
  *(_DWORD *)(v1 + 224) = 1065353216;
  *(_OWORD *)(v1 + 240) = xmmword_1B6E4F490;
  *(void *)(v1 + 256) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 264) = 16777473;
  *(unsigned char *)(v1 + 268) = 1;
  *(_DWORD *)(v1 + 272) = 1065353216;
  *(_OWORD *)(v1 + 288) = xmmword_1B6E4F490;
  *(_WORD *)(v1 + 304) = 0;
  uint64_t v10 = a1[3];
  char v53 = a1;
  sub_1B62C14BC(a1, v10);
  sub_1B6D2F0AC();
  sub_1B6E33A48();
  if (v2)
  {
    swift_release();
    uint64_t v42 = (uint64_t)v53;
  }
  else
  {
    uint64_t v11 = v6;
    char v61 = 0;
    sub_1B6D2F100();
    uint64_t v12 = v52;
    __int16 v13 = v9;
    sub_1B6E32DF8();
    char v14 = v56;
    char v15 = v57;
    __int16 v16 = v58;
    char v17 = v59;
    long long v18 = v60;
    *(_OWORD *)(v3 + 16) = v54;
    *(void *)(v3 + 32) = v55;
    *(unsigned char *)(v3 + 40) = v14;
    *(unsigned char *)(v3 + 41) = v15;
    *(_WORD *)(v3 + 42) = v16;
    *(unsigned char *)(v3 + 44) = v17;
    *(_OWORD *)(v3 + 48) = v18;
    char v61 = 1;
    sub_1B6E32DF8();
    char v19 = v56;
    char v20 = v57;
    __int16 v21 = v58;
    char v22 = v59;
    long long v23 = v60;
    *(_OWORD *)(v3 + 64) = v54;
    *(void *)(v3 + 80) = v55;
    *(unsigned char *)(v3 + 88) = v19;
    *(unsigned char *)(v3 + 89) = v20;
    *(_WORD *)(v3 + 90) = v21;
    *(unsigned char *)(v3 + 92) = v22;
    *(_OWORD *)(v3 + 96) = v23;
    char v61 = 2;
    sub_1B6D2F154();
    sub_1B6E32DF8();
    char v24 = BYTE8(v54);
    char v25 = BYTE9(v54);
    __int16 v26 = WORD5(v54);
    char v27 = BYTE12(v54);
    int v28 = v55;
    long long v29 = v60;
    *(void *)(v3 + 112) = v54;
    *(unsigned char *)(v3 + 120) = v24;
    *(unsigned char *)(v3 + 121) = v25;
    *(_WORD *)(v3 + 122) = v26;
    *(unsigned char *)(v3 + 124) = v27;
    *(_DWORD *)(v3 + 128) = v28;
    *(_OWORD *)(v3 + 144) = v29;
    char v61 = 3;
    sub_1B6E32DF8();
    char v30 = BYTE8(v54);
    char v31 = BYTE9(v54);
    __int16 v32 = WORD5(v54);
    char v33 = BYTE12(v54);
    int v34 = v55;
    long long v35 = v60;
    *(void *)(v3 + 160) = v54;
    *(unsigned char *)(v3 + 168) = v30;
    *(unsigned char *)(v3 + 169) = v31;
    *(_WORD *)(v3 + 170) = v32;
    *(unsigned char *)(v3 + 172) = v33;
    *(_DWORD *)(v3 + 176) = v34;
    *(_OWORD *)(v3 + 192) = v35;
    char v61 = 4;
    sub_1B6E32DF8();
    char v36 = BYTE8(v54);
    char v37 = BYTE9(v54);
    __int16 v38 = WORD5(v54);
    char v39 = BYTE12(v54);
    int v40 = v55;
    long long v41 = v60;
    *(void *)(v3 + 208) = v54;
    *(unsigned char *)(v3 + 216) = v36;
    *(unsigned char *)(v3 + 217) = v37;
    *(_WORD *)(v3 + 218) = v38;
    *(unsigned char *)(v3 + 220) = v39;
    *(_DWORD *)(v3 + 224) = v40;
    *(_OWORD *)(v3 + 240) = v41;
    char v61 = 5;
    sub_1B6E32DF8();
    char v44 = BYTE8(v54);
    char v45 = BYTE9(v54);
    __int16 v46 = WORD5(v54);
    char v47 = BYTE12(v54);
    int v48 = v55;
    long long v49 = v60;
    *(void *)(v3 + 256) = v54;
    *(unsigned char *)(v3 + 264) = v44;
    *(unsigned char *)(v3 + 265) = v45;
    *(_WORD *)(v3 + 266) = v46;
    *(unsigned char *)(v3 + 268) = v47;
    *(_DWORD *)(v3 + 272) = v48;
    *(_OWORD *)(v3 + 288) = v49;
    LOBYTE(v54) = 6;
    char v50 = sub_1B6E32DA8();
    uint64_t v42 = (uint64_t)v53;
    *(unsigned char *)(v3 + 304) = v50 & 1;
    LOBYTE(v54) = 7;
    char v51 = sub_1B6E32DA8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v12);
    *(unsigned char *)(v3 + 305) = v51 & 1;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v42);
  return v3;
}

uint64_t sub_1B6D2D738@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1B6D2D1DC(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D2D790(void *a1)
{
  return sub_1B6D2CDA8(a1);
}

uint64_t sub_1B6D2D7B4(uint64_t a1)
{
  sub_1B6D3073C(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v3;
  uint64_t v5 = (unsigned char *)(v3 + 272);
  *(_OWORD *)(v3 + 16) = xmmword_1B6E76900;
  *(_OWORD *)(v3 + 32) = xmmword_1B6EC7620;
  *(unsigned char *)(v3 + 48) = 0;
  BOOL v6 = 1;
  *(void *)(v3 + 64) = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)(v3 + 120) = 0;
  *(unsigned char *)(v3 + 128) = 13;
  uint64_t v7 = *(unsigned __int8 *)(v1 + 304);
  *(_OWORD *)(v3 + 144) = xmmword_1B6EC7630;
  *(unsigned char *)(v3 + 160) = 0;
  *(void *)(v3 + 176) = v7;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(void *)(v3 + 232) = 0;
  *(unsigned char *)(v3 + 240) = 13;
  if (*(_DWORD *)(v1 + 208) == -1) {
    BOOL v6 = *(_DWORD *)(v1 + 212) != 0;
  }
  *(_OWORD *)(v3 + 256) = xmmword_1B6EC7640;
  *uint64_t v5 = 0;
  *(void *)(v3 + 288) = v6;
  *(void *)(v3 + 344) = 0;
  *(_OWORD *)(v3 + 296) = 0uLL;
  *(_OWORD *)(v3 + 312) = 0uLL;
  *(_OWORD *)(v3 + 328) = 0uLL;
  *(unsigned char *)(v3 + 352) = 13;
  sub_1B630C4C0(a1 + 40, (uint64_t)&v11);
  sub_1B630C4C0((uint64_t)&v11, (uint64_t)&v12);
  if (v12) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v13;
  }
  *(_OWORD *)(v4 + 368) = xmmword_1B6EC7650;
  v5[112] = 0;
  *(void *)(v4 + 400) = v8;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 456) = 0;
  *(unsigned char *)(v4 + 464) = 13;
  uint64_t v9 = *(unsigned __int8 *)(v1 + 305);
  *(_OWORD *)(v4 + 480) = xmmword_1B6EC7660;
  v5[224] = 0;
  *(void *)(v4 + 512) = v9;
  *(_OWORD *)(v4 + 520) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(void *)(v4 + 568) = 0;
  *(unsigned char *)(v4 + 576) = 13;
  return v4;
}

__n128 sub_1B6D2D95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 264;
  uint64_t v5 = *(void *)(v2 + 32);
  char v56 = *(unsigned char *)(v2 + 41);
  char v57 = *(unsigned char *)(v2 + 40);
  char v54 = *(unsigned char *)(v2 + 44);
  __int16 v55 = *(_WORD *)(v2 + 42);
  long long v58 = *(_OWORD *)(v2 + 16);
  long long v59 = *(_OWORD *)(v2 + 48);
  uint64_t ObjectType = swift_getObjectType();
  sub_1B6B1BF68(v5, 0, ObjectType, a2);
  long long v48 = *(_OWORD *)(v2 + 64);
  unint64_t v7 = *(void *)(v2 + 80);
  char v52 = *(unsigned char *)(v2 + 89);
  char v53 = *(unsigned char *)(v2 + 88);
  char v50 = *(unsigned char *)(v2 + 92);
  __int16 v51 = *(_WORD *)(v2 + 90);
  long long v49 = *(_OWORD *)(v2 + 96);
  sub_1B6B1BF68(v7, 0, ObjectType, a2);
  int v8 = v7;
  unint64_t v31 = HIDWORD(v7);
  unint64_t v9 = *(void *)(v2 + 112);
  char v46 = *(unsigned char *)(v2 + 121);
  char v47 = *(unsigned char *)(v2 + 120);
  char v44 = *(unsigned char *)(v2 + 124);
  __int16 v45 = *(_WORD *)(v2 + 122);
  int v10 = *(_DWORD *)(v2 + 128);
  long long v43 = *(_OWORD *)(v2 + 144);
  sub_1B6B1BF68(v9, 0, ObjectType, a2);
  int v11 = v9;
  unint64_t v32 = HIDWORD(v9);
  unint64_t v12 = *(void *)(v2 + 160);
  char v41 = *(unsigned char *)(v2 + 169);
  char v42 = *(unsigned char *)(v2 + 168);
  char v39 = *(unsigned char *)(v2 + 172);
  __int16 v40 = *(_WORD *)(v2 + 170);
  int v13 = *(_DWORD *)(v2 + 176);
  long long v38 = *(_OWORD *)(v2 + 192);
  sub_1B6B1BF68(v12, 0, ObjectType, a2);
  int v14 = v12;
  unint64_t v25 = HIDWORD(v12);
  unint64_t v15 = *(void *)(v2 + 208);
  char v36 = *(unsigned char *)(v2 + 217);
  char v37 = *(unsigned char *)(v2 + 216);
  char v34 = *(unsigned char *)(v2 + 220);
  __int16 v35 = *(_WORD *)(v2 + 218);
  int v16 = *(_DWORD *)(v2 + 224);
  long long v33 = *(_OWORD *)(v2 + 240);
  sub_1B6B1BF68(v15, 0, ObjectType, a2);
  int v17 = v15;
  unint64_t v24 = HIDWORD(v15);
  unint64_t v18 = *(void *)(v2 + 256);
  char v29 = *(unsigned char *)(v2 + 265);
  char v30 = *(unsigned char *)(v2 + 264);
  char v27 = *(unsigned char *)(v2 + 268);
  __int16 v28 = *(_WORD *)(v2 + 266);
  int v19 = *(_DWORD *)(v2 + 272);
  __n128 v26 = *(__n128 *)(v2 + 288);
  sub_1B6B1BF68(v18, 0, ObjectType, a2);
  int v20 = v18;
  unint64_t v21 = HIDWORD(v18);
  LOBYTE(a2) = *(unsigned char *)(v4 + 40);
  LOBYTE(v4) = *(unsigned char *)(v4 + 41);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 32) = v5;
  *(unsigned char *)(v22 + 40) = v57;
  *(unsigned char *)(v22 + 41) = v56;
  *(_WORD *)(v22 + 42) = v55;
  *(unsigned char *)(v22 + 44) = v54;
  *(_DWORD *)(v22 + 80) = v8;
  *(_DWORD *)(v22 + 84) = v31;
  *(_OWORD *)(v22 + 16) = v58;
  *(_OWORD *)(v22 + 48) = v59;
  *(_OWORD *)(v22 + 64) = v48;
  *(unsigned char *)(v22 + 88) = v53;
  *(unsigned char *)(v22 + 89) = v52;
  *(_WORD *)(v22 + 90) = v51;
  *(unsigned char *)(v22 + 92) = v50;
  *(_OWORD *)(v22 + 96) = v49;
  *(_DWORD *)(v22 + 112) = v11;
  *(_DWORD *)(v22 + 116) = v32;
  *(unsigned char *)(v22 + 120) = v47;
  *(unsigned char *)(v22 + 121) = v46;
  *(_WORD *)(v22 + 122) = v45;
  *(unsigned char *)(v22 + 124) = v44;
  *(_DWORD *)(v22 + 128) = v10;
  *(_OWORD *)(v22 + 144) = v43;
  *(_DWORD *)(v22 + 160) = v14;
  *(_DWORD *)(v22 + 164) = v25;
  *(unsigned char *)(v22 + 168) = v42;
  *(unsigned char *)(v22 + 169) = v41;
  *(_WORD *)(v22 + 170) = v40;
  *(unsigned char *)(v22 + 172) = v39;
  *(_DWORD *)(v22 + 176) = v13;
  *(_OWORD *)(v22 + 192) = v38;
  *(_DWORD *)(v22 + 208) = v17;
  *(_DWORD *)(v22 + 212) = v24;
  *(unsigned char *)(v22 + 216) = v37;
  *(unsigned char *)(v22 + 217) = v36;
  *(_WORD *)(v22 + 218) = v35;
  *(unsigned char *)(v22 + 220) = v34;
  *(_DWORD *)(v22 + 224) = v16;
  *(_OWORD *)(v22 + 240) = v33;
  *(_DWORD *)(v22 + 256) = v20;
  *(_DWORD *)(v22 + 260) = v21;
  *(unsigned char *)(v22 + 264) = v30;
  *(unsigned char *)(v22 + 265) = v29;
  *(_WORD *)(v22 + 266) = v28;
  *(unsigned char *)(v22 + 268) = v27;
  *(_DWORD *)(v22 + 272) = v19;
  __n128 result = v26;
  *(__n128 *)(v22 + 288) = v26;
  *(unsigned char *)(v22 + 304) = a2;
  *(unsigned char *)(v22 + 305) = v4;
  return result;
}

uint64_t sub_1B6D2DCE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v4)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v15 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    *(void *)&long long v78 = 0;
    swift_retain();
    sub_1B6B33E34(v15, (uint64_t *)&v78, 0xD000000000000036, 0x80000001B6F53940);
    swift_release();
    return swift_release();
  }
  uint64_t v5 = v3;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(v8 + 200);
  swift_retain();
  int v10 = sub_1B68007AC(v9, 0);
  if (!v10)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v16 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    *(void *)&long long v78 = 0;
    swift_retain();
    sub_1B6B33E34(v16, (uint64_t *)&v78, 0xD000000000000040, 0x80000001B6F53980);
    swift_release();
    swift_release();
    return swift_release();
  }
  int v13 = v10;
  if (v9 <= 207)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v14 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    *(void *)&long long v78 = 0;
    swift_retain();
    sub_1B6B33E34(v14, (uint64_t *)&v78, 0xD000000000000020, 0x80000001B6F53A10);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    return swift_release();
  }
  uint64_t v18 = v12;
  long long v19 = 0uLL;
  if ((*(unsigned char *)(v5 + 304) & 1) == 0) {
    long long v19 = *(_OWORD *)(v5 + 192);
  }
  long long v76 = v19;
  uint64_t v73 = v11;
  long long v63 = *(_OWORD *)(v5 + 16);
  long long v65 = *(_OWORD *)(v5 + 48);
  long long v68 = *(_OWORD *)(v5 + 64);
  long long v70 = *(_OWORD *)(v5 + 96);
  int v20 = *(_DWORD *)(v5 + 176);
  long long v71 = *(_OWORD *)(v5 + 144);
  int v21 = *(_DWORD *)(v5 + 128);
  int v22 = *(_DWORD *)(v5 + 224);
  long long v74 = *(_OWORD *)(v5 + 240);
  int v23 = *(_DWORD *)(v5 + 272);
  long long v61 = *(_OWORD *)(v5 + 288);
  int v24 = *(_DWORD *)(a1 + 48);
  uint64_t v67 = v12;
  if (*(void *)(v8 + 192))
  {
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B62EC494((uint64_t)v13, v73, v18, 0);
    long long v78 = v63;
    long long v79 = v65;
    long long v80 = v68;
    long long v81 = v70;
    long long v82 = v61;
    long long v84 = v76;
    int v83 = v23;
    int v85 = v20;
    long long v86 = v71;
    long long v88 = v74;
    int v87 = v21;
    int v89 = v22;
    int v90 = v24;
    type metadata accessor for pbr_material_constants(0);
    sub_1B62EC4C0((uint64_t)&v78, 0, ObjectType, v26);
    uint64_t v27 = sub_1B62EBE70(*(void *)(v5 + 32), &v78);
    uint64_t v28 = v27;
    if (*(_DWORD *)(v5 + 36)) {
      BOOL v29 = 0;
    }
    else {
      BOOL v29 = *(_DWORD *)(v5 + 32) == -1;
    }
    uint64_t v66 = a2;
    uint64_t v75 = v27;
    if (!v29 && !v27)
    {
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      *(void *)&long long v78 = 0;
      *((void *)&v78 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      *(void *)&long long v78 = 0xD000000000000014;
      *((void *)&v78 + 1) = 0x80000001B6F539F0;
      sub_1B6E33098();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      long long v30 = v78;
      int v31 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      *(void *)&long long v78 = 0;
      swift_retain();
      sub_1B6B33E34(v31, (uint64_t *)&v78, v30, *((uint64_t *)&v30 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v28 = v75;
    }
    uint64_t v32 = sub_1B62EBE70(*(void *)(v5 + 80), &v78);
    if (v32)
    {
      uint64_t v72 = v32;
    }
    else
    {
      uint64_t v37 = *(void *)(v4 + 240);
      swift_retain();
      uint64_t v72 = (uint64_t)sub_1B6BCB190(0xD000000000000015, 0x80000001B6F45BA0, v37, v4);
      swift_release();
    }
    uint64_t v38 = sub_1B62EBE70(*(void *)(v5 + 112), &v78);
    if (v38)
    {
      uint64_t v39 = v38;
    }
    else
    {
      uint64_t v40 = *(void *)(v4 + 240);
      swift_retain();
      uint64_t v39 = (uint64_t)sub_1B6BCB190(0xD000000000000015, 0x80000001B6F45BA0, v40, v4);
      swift_release();
    }
    uint64_t v69 = sub_1B62EBE70(*(void *)(v5 + 160), &v78);
    if (!v69)
    {
      uint64_t v41 = *(void *)(v4 + 240);
      swift_retain();
      uint64_t v69 = (uint64_t)sub_1B6BCB190(0xD000000000000015, 0x80000001B6F45BA0, v41, v4);
      swift_release();
    }
    uint64_t v42 = sub_1B62EBE70(*(void *)(v5 + 208), &v78);
    if (v42)
    {
      uint64_t v64 = v42;
    }
    else
    {
      uint64_t v43 = *(void *)(v4 + 240);
      swift_retain();
      uint64_t v64 = (uint64_t)sub_1B6BCB190(0xD000000000000015, 0x80000001B6F45BA0, v43, v4);
      swift_release();
    }
    uint64_t v44 = sub_1B62EBE70(*(void *)(v5 + 256), &v78);
    if (v44)
    {
      uint64_t v62 = v44;
    }
    else
    {
      uint64_t v45 = *(void *)(v4 + 240);
      swift_retain();
      uint64_t v62 = (uint64_t)sub_1B6BCB58C(0xD000000000000017, 0x80000001B6F539D0, v45, v4);
      swift_release();
    }
    sub_1B6357350(v28, 100);
    uint64_t v46 = swift_unknownObjectRetain();
    sub_1B6357350(v46, 105);
    swift_unknownObjectRelease();
    uint64_t v47 = swift_unknownObjectRetain();
    sub_1B6357350(v47, 101);
    swift_unknownObjectRelease();
    if ((*(unsigned char *)(v5 + 304) & 1) == 0)
    {
      uint64_t v48 = swift_unknownObjectRetain();
      sub_1B6357350(v48, 102);
      swift_unknownObjectRelease();
    }
    uint64_t v49 = swift_unknownObjectRetain();
    sub_1B6357350(v49, 103);
    swift_unknownObjectRelease();
    uint64_t v50 = swift_unknownObjectRetain();
    sub_1B6357350(v50, 104);
    swift_unknownObjectRelease();
    sub_1B6D29DAC(0, &qword_1E9DD8F68, (uint64_t (*)(uint64_t))sub_1B6D29D78, MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B6E89D00;
    *(void *)(inited + 32) = v28;
    *(void *)(inited + 40) = v72;
    *(void *)(inited + 48) = v39;
    *(void *)(inited + 56) = v69;
    *(void *)(inited + 64) = v64;
    *(void *)(inited + 72) = v62;
    *(void *)&long long v78 = inited;
    sub_1B6E31C48();
    char v52 = (void *)v78;
    *(void *)&long long v78 = MEMORY[0x1E4FBC860];
    uint64_t v77 = v52;
    if (v52[4])
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v53 = swift_unknownObjectRetain();
      MEMORY[0x1BA9B3870](v53);
      if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1B6E31C78();
      }
      sub_1B6E31CC8();
      sub_1B6E31C48();
    }
    else
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
    }
    if (v77[5])
    {
      uint64_t v54 = swift_unknownObjectRetain();
      MEMORY[0x1BA9B3870](v54);
      if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1B6E31C78();
      }
      sub_1B6E31CC8();
      sub_1B6E31C48();
    }
    if (v77[6])
    {
      uint64_t v55 = swift_unknownObjectRetain();
      MEMORY[0x1BA9B3870](v55);
      if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1B6E31C78();
      }
      sub_1B6E31CC8();
      sub_1B6E31C48();
    }
    if (v77[7])
    {
      uint64_t v56 = swift_unknownObjectRetain();
      MEMORY[0x1BA9B3870](v56);
      if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1B6E31C78();
      }
      sub_1B6E31CC8();
      sub_1B6E31C48();
    }
    if (v77[8])
    {
      uint64_t v57 = swift_unknownObjectRetain();
      MEMORY[0x1BA9B3870](v57);
      if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1B6E31C78();
      }
      sub_1B6E31CC8();
      sub_1B6E31C48();
    }
    if (v77[9])
    {
      uint64_t v58 = swift_unknownObjectRetain();
      MEMORY[0x1BA9B3870](v58);
      if (*(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1B6E31C78();
      }
      sub_1B6E31CC8();
      sub_1B6E31C48();
    }
    uint64_t v59 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v66 + 136) = v59;
    BOOL v60 = sub_1B62EC0CC((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64908, *(void *)(v5 + 32))
       || sub_1B62EC0CC((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64908, *(void *)(v5 + 80))
       || sub_1B62EC0CC((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64908, *(void *)(v5 + 112))
       || sub_1B62EC0CC((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64908, *(void *)(v5 + 160))
       || sub_1B62EC0CC((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64908, *(void *)(v5 + 208))
       || sub_1B62EC0CC((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64908, *(void *)(v5 + 256));
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(unsigned char *)(v66 + 225) = v60;
    uint64_t v35 = v73;
  }
  else
  {
    objc_msgSend(v10, sel_storageMode);
    long long v33 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v34 = v13;
    uint64_t v35 = v73;
    char v36 = &v33[v73];
    *(_OWORD *)char v36 = v63;
    *((_OWORD *)v36 + 1) = v65;
    *((_OWORD *)v36 + 2) = v68;
    *((_OWORD *)v36 + 3) = v70;
    *((_OWORD *)v36 + 4) = v61;
    *((_DWORD *)v36 + 20) = v23;
    *((_OWORD *)v36 + 6) = v76;
    *((_DWORD *)v36 + 28) = v20;
    *((_OWORD *)v36 + 8) = v71;
    *((_DWORD *)v36 + 36) = v21;
    *((_OWORD *)v36 + 10) = v74;
    *((_DWORD *)v36 + 44) = v22;
    *((_DWORD *)v36 + 48) = v24;
  }
  *(void *)&long long v78 = v13;
  *((void *)&v78 + 1) = v35;
  long long v79 = (unint64_t)v67;
  LOBYTE(v80) = 0;
  swift_unknownObjectRetain();
  sub_1B62E9144((uint64_t)&v78, 2, 0);
  swift_release();
  return swift_unknownObjectRelease_n();
}

BOOL sub_1B6D2EAB8(uint64_t a1)
{
  if (*(_DWORD *)(v1 + 32) == a1 && *(_DWORD *)(v1 + 36) == HIDWORD(a1)) {
    return 1;
  }
  if (*(_DWORD *)(v1 + 80) == a1 && *(_DWORD *)(v1 + 84) == HIDWORD(a1)) {
    return 1;
  }
  BOOL v4 = *(_DWORD *)(v1 + 112) == a1 && *(_DWORD *)(v1 + 116) == HIDWORD(a1);
  if (v4 || *(void *)(v1 + 160) == a1 || *(void *)(v1 + 208) == a1) {
    return 1;
  }
  if (*(_DWORD *)(v1 + 256) == a1) {
    return *(_DWORD *)(v1 + 260) == HIDWORD(a1);
  }
  return 0;
}

__n128 sub_1B6D2EB58()
{
  uint64_t v1 = v0 + 264;
  long long v57 = *(_OWORD *)(v0 + 16);
  char v50 = *(unsigned char *)(v0 + 41);
  char v51 = *(unsigned char *)(v0 + 40);
  __int16 v49 = *(_WORD *)(v0 + 42);
  char v48 = *(unsigned char *)(v0 + 44);
  long long v58 = *(_OWORD *)(v0 + 48);
  unint64_t v2 = sub_1B6A69610(*(void *)(v0 + 32));
  int v3 = v2;
  unint64_t v31 = HIDWORD(v2);
  long long v47 = *(_OWORD *)(v0 + 64);
  char v55 = *(unsigned char *)(v0 + 89);
  char v56 = *(unsigned char *)(v0 + 88);
  char v53 = *(unsigned char *)(v0 + 92);
  __int16 v54 = *(_WORD *)(v0 + 90);
  long long v52 = *(_OWORD *)(v0 + 96);
  unint64_t v4 = sub_1B6A69610(*(void *)(v0 + 80));
  int v5 = v4;
  unint64_t v6 = HIDWORD(v4);
  char v45 = *(unsigned char *)(v0 + 121);
  char v46 = *(unsigned char *)(v0 + 120);
  char v43 = *(unsigned char *)(v0 + 124);
  __int16 v44 = *(_WORD *)(v0 + 122);
  int v7 = *(_DWORD *)(v0 + 128);
  long long v42 = *(_OWORD *)(v0 + 144);
  unint64_t v8 = sub_1B6A69610(*(void *)(v0 + 112));
  int v9 = v8;
  unint64_t v25 = HIDWORD(v8);
  char v40 = *(unsigned char *)(v0 + 169);
  char v41 = *(unsigned char *)(v0 + 168);
  char v38 = *(unsigned char *)(v0 + 172);
  __int16 v39 = *(_WORD *)(v0 + 170);
  int v10 = *(_DWORD *)(v0 + 176);
  long long v37 = *(_OWORD *)(v0 + 192);
  unint64_t v11 = sub_1B6A69610(*(void *)(v0 + 160));
  int v12 = v11;
  unint64_t v24 = HIDWORD(v11);
  char v35 = *(unsigned char *)(v0 + 217);
  char v36 = *(unsigned char *)(v0 + 216);
  char v33 = *(unsigned char *)(v0 + 220);
  __int16 v34 = *(_WORD *)(v0 + 218);
  int v13 = *(_DWORD *)(v0 + 224);
  long long v32 = *(_OWORD *)(v0 + 240);
  unint64_t v14 = sub_1B6A69610(*(void *)(v0 + 208));
  int v15 = v14;
  unint64_t v16 = HIDWORD(v14);
  char v29 = *(unsigned char *)(v0 + 265);
  char v30 = *(unsigned char *)(v0 + 264);
  char v27 = *(unsigned char *)(v0 + 268);
  __int16 v28 = *(_WORD *)(v0 + 266);
  int v17 = *(_DWORD *)(v0 + 272);
  __n128 v26 = *(__n128 *)(v0 + 288);
  unint64_t v18 = sub_1B6A69610(*(void *)(v0 + 256));
  int v19 = v18;
  unint64_t v20 = HIDWORD(v18);
  char v23 = *(unsigned char *)(v1 + 40);
  LOBYTE(v1) = *(unsigned char *)(v1 + 41);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 32) = v3;
  *(_DWORD *)(v21 + 36) = v31;
  *(unsigned char *)(v21 + 40) = v51;
  *(unsigned char *)(v21 + 41) = v50;
  *(_WORD *)(v21 + 42) = v49;
  *(unsigned char *)(v21 + 44) = v48;
  *(_DWORD *)(v21 + 80) = v5;
  *(_DWORD *)(v21 + 84) = v6;
  *(_OWORD *)(v21 + 16) = v57;
  *(_OWORD *)(v21 + 48) = v58;
  *(_OWORD *)(v21 + 64) = v47;
  *(unsigned char *)(v21 + 88) = v56;
  *(unsigned char *)(v21 + 89) = v55;
  *(_WORD *)(v21 + 90) = v54;
  *(unsigned char *)(v21 + 92) = v53;
  *(_OWORD *)(v21 + 96) = v52;
  *(_DWORD *)(v21 + 112) = v9;
  *(_DWORD *)(v21 + 116) = v25;
  *(unsigned char *)(v21 + 120) = v46;
  *(unsigned char *)(v21 + 121) = v45;
  *(_WORD *)(v21 + 122) = v44;
  *(unsigned char *)(v21 + 124) = v43;
  *(_DWORD *)(v21 + 128) = v7;
  *(_OWORD *)(v21 + 144) = v42;
  *(_DWORD *)(v21 + 160) = v12;
  *(_DWORD *)(v21 + 164) = v24;
  *(unsigned char *)(v21 + 168) = v41;
  *(unsigned char *)(v21 + 169) = v40;
  *(_WORD *)(v21 + 170) = v39;
  *(unsigned char *)(v21 + 172) = v38;
  *(_DWORD *)(v21 + 176) = v10;
  *(_OWORD *)(v21 + 192) = v37;
  *(_DWORD *)(v21 + 208) = v15;
  *(_DWORD *)(v21 + 212) = v16;
  *(unsigned char *)(v21 + 216) = v36;
  *(unsigned char *)(v21 + 217) = v35;
  *(_WORD *)(v21 + 218) = v34;
  *(unsigned char *)(v21 + 220) = v33;
  *(_DWORD *)(v21 + 224) = v13;
  *(_OWORD *)(v21 + 240) = v32;
  *(_DWORD *)(v21 + 256) = v19;
  *(_DWORD *)(v21 + 260) = v20;
  *(unsigned char *)(v21 + 264) = v30;
  *(unsigned char *)(v21 + 265) = v29;
  *(_WORD *)(v21 + 266) = v28;
  *(unsigned char *)(v21 + 268) = v27;
  *(_DWORD *)(v21 + 272) = v17;
  __n128 result = v26;
  *(__n128 *)(v21 + 288) = v26;
  *(unsigned char *)(v21 + 304) = v23;
  *(unsigned char *)(v21 + 305) = v1;
  return result;
}

void sub_1B6D2EE8C(void *a1@<X8>)
{
  sub_1B6D2EB58();
  *a1 = v2;
}

uint64_t sub_1B6D2EEB8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1B6D2EF20(&qword_1E9DD8FD0);
  uint64_t result = sub_1B6D2EF20(&qword_1E9DD8FD8);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B6D2EF20(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PBRParameters();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6D2EF60()
{
  unint64_t result = qword_1E9DD8FE0;
  if (!qword_1E9DD8FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8FE0);
  }
  return result;
}

uint64_t sub_1B6D2EFB4@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3 = 0xD000000000000015;
  unint64_t v4 = 0xEC00000067617266;
  long long v8 = xmmword_1B6EC7670;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if ((a1 & 0x4000) == 0) {
    unint64_t v3 = 0x676172665F726270;
  }
  unint64_t v5 = 0x80000001B6F53900;
  if ((a1 & 0x4000) == 0) {
    unint64_t v5 = 0xEC000000746E656DLL;
  }
  if (a1 < 0) {
    unint64_t v3 = 0x5F656E696C74756FLL;
  }
  else {
    unint64_t v4 = v5;
  }
  if ((a1 & 0x800) != 0) {
    unint64_t v3 = 0xD000000000000017;
  }
  uint64_t v11 = MEMORY[0x1E4FBC860];
  unint64_t v12 = v3;
  unint64_t v6 = 0x80000001B6F53920;
  if ((a1 & 0x800) == 0) {
    unint64_t v6 = v4;
  }
  unint64_t v13 = v6;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = MEMORY[0x1E4FBC860];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  nullsub_1(&v8);
  return sub_1B6D29C38((uint64_t)&v8, a2);
}

unint64_t sub_1B6D2F0AC()
{
  unint64_t result = qword_1E9DD8FF8;
  if (!qword_1E9DD8FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8FF8);
  }
  return result;
}

unint64_t sub_1B6D2F100()
{
  unint64_t result = qword_1E9DD9000;
  if (!qword_1E9DD9000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9000);
  }
  return result;
}

unint64_t sub_1B6D2F154()
{
  unint64_t result = qword_1E9DD9008;
  if (!qword_1E9DD9008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9008);
  }
  return result;
}

unint64_t sub_1B6D2F1A8()
{
  unint64_t result = qword_1E9DD9018;
  if (!qword_1E9DD9018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9018);
  }
  return result;
}

unint64_t sub_1B6D2F1FC()
{
  unint64_t result = qword_1E9DD9020;
  if (!qword_1E9DD9020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9020);
  }
  return result;
}

uint64_t sub_1B6D2F250(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F6465626C61 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6576697373696D65 && a2 == 0xE800000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73656E6867756F72 && a2 == 0xE900000000000073 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73656E6C6174656DLL && a2 == 0xE900000000000073 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F6973756C63636FLL && a2 == 0xE90000000000006ELL || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001B6F4C090 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656C62756F447369 && a2 == 0xED00006465646953)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_1B6D2F5BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65746C694667616DLL && a2 == 0xE900000000000072;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746C69466E696DLL && a2 == 0xE900000000000072 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65746C694670696DLL && a2 == 0xE900000000000072 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5370617277 && a2 == 0xE500000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5470617277 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1B6D2F7CC(void *a1)
{
  sub_1B6D30B4C(0, &qword_1E9DD90E8, (uint64_t (*)(void))sub_1B6D30AF8, (uint64_t)&type metadata for TextureSampler.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  long long v8 = (char *)&v16 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D30AF8();
  sub_1B6E33A48();
  if (v1) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  char v26 = 0;
  sub_1B66C62EC();
  sub_1B6E32DF8();
  uint64_t v9 = v27;
  char v24 = 1;
  sub_1B6E32DF8();
  int v10 = v25;
  char v22 = 2;
  sub_1B66C6218();
  sub_1B6E32DF8();
  int v17 = v10;
  uint64_t v11 = v23;
  char v20 = 3;
  sub_1B62AAB40();
  sub_1B6E32DF8();
  uint64_t v16 = v11;
  uint64_t v12 = v21;
  char v18 = 4;
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v14 = v19;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  uint64_t v15 = 256;
  if (!v17) {
    uint64_t v15 = 0;
  }
  return v15 | v9 | (v16 << 16) | (v12 << 24) | (v14 << 32);
}

uint64_t sub_1B6D2FABC(void *a1)
{
  sub_1B6D30B4C(0, &qword_1E9DD9070, (uint64_t (*)(void))sub_1B6D3029C, (uint64_t)&type metadata for PBRColorProperty.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  long long v8 = (char *)&v11 - v7;
  uint64_t v9 = a1[4];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3029C();
  sub_1B6E33A48();
  if (!v1)
  {
    sub_1B6D30B4C(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    char v19 = 0;
    sub_1B6D301CC((unint64_t *)&qword_1EB97D210);
    sub_1B6E32DF8();
    long long v16 = v17;
    char v19 = 1;
    sub_1B62B1EA8();
    sub_1B6E32DF8();
    uint64_t v9 = v17;
    char v19 = 2;
    sub_1B6D30178();
    sub_1B6E32DF8();
    uint64_t v15 = v17;
    int v18 = BYTE1(v17);
    uint64_t v14 = BYTE2(v17);
    uint64_t v13 = BYTE3(v17);
    uint64_t v12 = BYTE4(v17);
    char v19 = 3;
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    long long v11 = v17;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

float sub_1B6D2FE00(void *a1)
{
  sub_1B6D30B4C(0, &qword_1E9DD9028, (uint64_t (*)(void))sub_1B6D30124, (uint64_t)&type metadata for PBRScalarProperty.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D30124();
  sub_1B6E33A48();
  if (!v1)
  {
    LOBYTE(v16) = 0;
    sub_1B6E32DC8();
    float v2 = v10;
    char v17 = 1;
    sub_1B62B1EA8();
    sub_1B6E32DF8();
    char v17 = 2;
    sub_1B6D30178();
    sub_1B6E32DF8();
    uint64_t v15 = v16;
    uint64_t v14 = BYTE3(v16);
    uint64_t v13 = BYTE4(v16);
    sub_1B6D30B4C(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    char v17 = 3;
    sub_1B6D301CC((unint64_t *)&qword_1EB97D210);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    long long v12 = v16;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B6D30124()
{
  unint64_t result = qword_1E9DD9030;
  if (!qword_1E9DD9030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9030);
  }
  return result;
}

unint64_t sub_1B6D30178()
{
  unint64_t result = qword_1E9DD9040;
  if (!qword_1E9DD9040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9040);
  }
  return result;
}

uint64_t sub_1B6D301CC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6D30B4C(255, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6D30248()
{
  unint64_t result = qword_1E9DD9060;
  if (!qword_1E9DD9060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9060);
  }
  return result;
}

unint64_t sub_1B6D3029C()
{
  unint64_t result = qword_1E9DD9078;
  if (!qword_1E9DD9078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9078);
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRColorProperty.CodingKeys()
{
  return &type metadata for PBRColorProperty.CodingKeys;
}

unsigned char *_s3VFX16PBRColorPropertyV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D303D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRScalarProperty.CodingKeys()
{
  return &type metadata for PBRScalarProperty.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PBRParameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D304D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRParameters.CodingKeys()
{
  return &type metadata for PBRParameters.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for TextureMipFilterMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D305D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureMipFilterMode()
{
  return &type metadata for TextureMipFilterMode;
}

uint64_t initializeBufferWithCopyOfBuffer for TextureSampler(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TextureSampler(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[5]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureSampler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureSampler()
{
  return &type metadata for TextureSampler;
}

unint64_t sub_1B6D306C0()
{
  unint64_t result = qword_1E9DD9088;
  if (!qword_1E9DD9088)
  {
    sub_1B6D3073C(255, &qword_1E9DD9090, (uint64_t)&type metadata for TextureMipFilterMode, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9088);
  }
  return result;
}

void sub_1B6D3073C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1B6D3078C()
{
  unint64_t result = qword_1E9DD9098;
  if (!qword_1E9DD9098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9098);
  }
  return result;
}

unint64_t sub_1B6D307E4()
{
  unint64_t result = qword_1E9DD90A0;
  if (!qword_1E9DD90A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90A0);
  }
  return result;
}

unint64_t sub_1B6D3083C()
{
  unint64_t result = qword_1E9DD90A8;
  if (!qword_1E9DD90A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90A8);
  }
  return result;
}

unint64_t sub_1B6D30894()
{
  unint64_t result = qword_1E9DD90B0;
  if (!qword_1E9DD90B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90B0);
  }
  return result;
}

unint64_t sub_1B6D308EC()
{
  unint64_t result = qword_1E9DD90B8;
  if (!qword_1E9DD90B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90B8);
  }
  return result;
}

unint64_t sub_1B6D30944()
{
  unint64_t result = qword_1E9DD90C0;
  if (!qword_1E9DD90C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90C0);
  }
  return result;
}

unint64_t sub_1B6D3099C()
{
  unint64_t result = qword_1E9DD90C8;
  if (!qword_1E9DD90C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90C8);
  }
  return result;
}

unint64_t sub_1B6D309F4()
{
  unint64_t result = qword_1E9DD90D0;
  if (!qword_1E9DD90D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90D0);
  }
  return result;
}

unint64_t sub_1B6D30A4C()
{
  unint64_t result = qword_1E9DD90D8;
  if (!qword_1E9DD90D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90D8);
  }
  return result;
}

unint64_t sub_1B6D30AA4()
{
  unint64_t result = qword_1E9DD90E0;
  if (!qword_1E9DD90E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90E0);
  }
  return result;
}

unint64_t sub_1B6D30AF8()
{
  unint64_t result = qword_1E9DD90F0;
  if (!qword_1E9DD90F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD90F0);
  }
  return result;
}

void sub_1B6D30B4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TextureSampler.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D30C80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureSampler.CodingKeys()
{
  return &type metadata for TextureSampler.CodingKeys;
}

unint64_t sub_1B6D30CBC()
{
  unint64_t result = qword_1E9DD9130;
  if (!qword_1E9DD9130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9130);
  }
  return result;
}

unint64_t sub_1B6D30D14()
{
  unint64_t result = qword_1E9DD9138;
  if (!qword_1E9DD9138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9138);
  }
  return result;
}

unint64_t sub_1B6D30D6C()
{
  unint64_t result = qword_1E9DD9140[0];
  if (!qword_1E9DD9140[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9DD9140);
  }
  return result;
}

uint64_t sub_1B6D30DC8()
{
  type metadata accessor for ShaderRegistry();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_1B6D30E04();
  qword_1E9E49880 = v0;
  return result;
}

uint64_t sub_1B6D30E04()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 16) = sub_1B67DE754(MEMORY[0x1E4FBC860]);
  *(void *)(v0 + 24) = sub_1B67DE888(v2);
  sub_1B63577E4();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E78130;
  sub_1B6395C98(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
  uint64_t v5 = v4;
  sub_1B6D328C8(0, (unint64_t *)&qword_1EB980D20, (uint64_t (*)(uint64_t))sub_1B6CEBAF8, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E77050;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0xE000000000000000;
  *(void *)(v6 + 72) = v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v6 + 48) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1B6E4F390;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  *(void *)(v3 + 32) = sub_1B684D5F0(0x726F6C6F63, 0xE500000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                           v6);
  sub_1B6E31C48();
  sub_1B6D32398(0x69665F44326E6567, 0xEF726F6C6F436C6CLL, 0x6C7070612E6D6F63, 0xED00007866762E65, v3);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E78140;
  swift_allocObject();
  *(void *)(v8 + 32) = sub_1B684D5F0(3239529, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)&type metadata for Entity, 0, 0, 0,
                           v2);
  swift_allocObject();
  *(void *)(v8 + 40) = sub_1B684D5F0(3305065, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)&type metadata for Entity, 0, 0, 0,
                           v2);
  sub_1B6E31C48();
  sub_1B6D32398(0x696D5F44326E6567, 0xE900000000000078, 0x6C7070612E6D6F63, 0xED00007866762E65, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B6E78140;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B6E77050;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 40) = 0xE000000000000000;
  *(void *)(v10 + 72) = v5;
  uint64_t v11 = swift_allocObject();
  *(void *)(v10 + 48) = v11;
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  swift_allocObject();
  *(void *)(v9 + 32) = sub_1B684D5F0(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                           v10);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B6E77050;
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = 0xE000000000000000;
  *(void *)(v12 + 72) = v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v12 + 48) = v13;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v13 + 16) = _Q0;
  swift_allocObject();
  *(void *)(v9 + 40) = sub_1B684D5F0(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                           v12);
  sub_1B6E31C48();
  sub_1B6D32398(0x69645F44326E6567, 0xEA00000000006373, 0x6C7070612E6D6F63, 0xED00007866762E65, v9);
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E78140;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1B6E77050;
  *(void *)(v20 + 32) = 0;
  *(void *)(v20 + 40) = 0xE000000000000000;
  *(void *)(v20 + 72) = v5;
  uint64_t v21 = swift_allocObject();
  *(void *)(v20 + 48) = v21;
  *(_OWORD *)(v21 + 16) = xmmword_1B6EB8EA0;
  swift_allocObject();
  *(void *)(v19 + 32) = sub_1B684D5F0(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v20);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1B6E77050;
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0xE000000000000000;
  *(void *)(v22 + 72) = v5;
  uint64_t v23 = swift_allocObject();
  *(void *)(v22 + 48) = v23;
  *(_OWORD *)(v23 + 16) = xmmword_1B6E4F360;
  swift_allocObject();
  *(void *)(v19 + 40) = sub_1B684D5F0(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v22);
  sub_1B6E31C48();
  sub_1B6D32398(0xD000000000000016, 0x80000001B6F53A60, 0x6C7070612E6D6F63, 0xED00007866762E65, v19);
  swift_bridgeObjectRelease();
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1B6E78190;
  sub_1B6395C98(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
  uint64_t v26 = v25;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1B6E77050;
  *(void *)(v27 + 32) = 0;
  *(void *)(v27 + 40) = 0xE000000000000000;
  *(void *)(v27 + 72) = v26;
  *(void *)(v27 + 48) = 0;
  swift_allocObject();
  *(void *)(v24 + 32) = sub_1B684D5F0(829648752, 0xE400000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v27);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1B6E77050;
  *(void *)(v28 + 32) = 0;
  *(void *)(v28 + 40) = 0xE000000000000000;
  *(void *)(v28 + 72) = v26;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v28 + 48) = _D0;
  swift_allocObject();
  *(void *)(v24 + 40) = sub_1B684D5F0(846425968, 0xE400000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v28);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1B6E77050;
  *(void *)(v30 + 32) = 0;
  *(void *)(v30 + 40) = 0xE000000000000000;
  *(void *)(v30 + 72) = v5;
  uint64_t v31 = swift_allocObject();
  *(void *)(v30 + 48) = v31;
  *(_OWORD *)(v31 + 16) = xmmword_1B6EB8EA0;
  swift_allocObject();
  *(void *)(v24 + 48) = sub_1B684D5F0(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v30);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1B6E77050;
  *(void *)(v32 + 32) = 0;
  *(void *)(v32 + 40) = 0xE000000000000000;
  *(void *)(v32 + 72) = v5;
  uint64_t v33 = swift_allocObject();
  *(void *)(v32 + 48) = v33;
  *(_OWORD *)(v33 + 16) = xmmword_1B6E4F360;
  swift_allocObject();
  *(void *)(v24 + 56) = sub_1B684D5F0(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v32);
  sub_1B6E31C48();
  sub_1B6D32398(0xD000000000000014, 0x80000001B6F53A80, 0x6C7070612E6D6F63, 0xED00007866762E65, v24);
  swift_bridgeObjectRelease();
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1B6E78190;
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1B6E77050;
  *(void *)(v35 + 32) = 0;
  *(void *)(v35 + 40) = 0xE000000000000000;
  *(void *)(v35 + 72) = v26;
  *(void *)(v35 + 48) = 0;
  swift_allocObject();
  *(void *)(v34 + 32) = sub_1B684D5F0(0x7265746E6563, 0xE600000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v35);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1B6E77050;
  *(void *)(v36 + 32) = 0;
  *(void *)(v36 + 40) = 0xE000000000000000;
  uint64_t v37 = MEMORY[0x1E4FBB470];
  *(void *)(v36 + 72) = MEMORY[0x1E4FBB470];
  *(_DWORD *)(v36 + 48) = 1065353216;
  swift_allocObject();
  *(void *)(v34 + 40) = sub_1B684D5F0(0x737569646172, 0xE600000000000000, 0, 0, 0x4024000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v37, 0, 0, 0,
                            v36);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1B6E77050;
  *(void *)(v38 + 32) = 0;
  *(void *)(v38 + 40) = 0xE000000000000000;
  *(void *)(v38 + 72) = v5;
  uint64_t v39 = swift_allocObject();
  *(void *)(v38 + 48) = v39;
  *(_OWORD *)(v39 + 16) = xmmword_1B6EB8EA0;
  swift_allocObject();
  *(void *)(v34 + 48) = sub_1B684D5F0(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v38);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1B6E77050;
  *(void *)(v40 + 32) = 0;
  *(void *)(v40 + 40) = 0xE000000000000000;
  *(void *)(v40 + 72) = v5;
  uint64_t v41 = swift_allocObject();
  *(void *)(v40 + 48) = v41;
  *(_OWORD *)(v41 + 16) = xmmword_1B6E4F360;
  swift_allocObject();
  *(void *)(v34 + 56) = sub_1B684D5F0(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v40);
  sub_1B6E31C48();
  sub_1B6D32398(0xD000000000000014, 0x80000001B6F53AA0, 0x6C7070612E6D6F63, 0xED00007866762E65, v34);
  swift_bridgeObjectRelease();
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1B6E78170;
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1B6E77050;
  *(void *)(v43 + 32) = 0;
  *(void *)(v43 + 40) = 0xE000000000000000;
  *(void *)(v43 + 72) = v26;
  *(void *)(v43 + 48) = 1056964608;
  swift_allocObject();
  *(void *)(v42 + 32) = sub_1B684D5F0(0x68676948796B73, 0xE700000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v43);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_1B6E77050;
  *(void *)(v44 + 32) = 0;
  *(void *)(v44 + 40) = 0xE000000000000000;
  *(void *)(v44 + 72) = v26;
  *(void *)(v44 + 48) = 0x3FECCCCD3F3AE148;
  swift_allocObject();
  *(void *)(v42 + 40) = sub_1B684D5F0(0x6C6464694D796B73, 0xE900000000000065, 0, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v44);
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_1B6E77050;
  *(void *)(v45 + 32) = 0;
  *(void *)(v45 + 40) = 0xE000000000000000;
  *(void *)(v45 + 72) = v26;
  *(void *)(v45 + 48) = 0x3F8000003F0A3D71;
  swift_allocObject();
  *(void *)(v42 + 48) = sub_1B684D5F0(0x776F4C796B73, 0xE600000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v45);
  uint64_t v46 = swift_allocObject();
  int8x16_t v47 = (int8x16_t)xmmword_1B6E77050;
  *(_OWORD *)(v46 + 16) = xmmword_1B6E77050;
  *(void *)(v46 + 32) = 0;
  *(void *)(v46 + 40) = 0xE000000000000000;
  v47.i32[0] = 1.0;
  simd_float4 v65 = sub_1B684C7B8(3871237, v47, v48);
  *(void *)(v46 + 72) = v5;
  uint64_t v49 = swift_allocObject();
  *(void *)(v46 + 48) = v49;
  *(simd_float4 *)(v49 + 16) = v65;
  swift_allocObject();
  *(void *)(v42 + 56) = sub_1B684D5F0(0x4368676948796B73, 0xEC000000726F6C6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v46);
  uint64_t v50 = swift_allocObject();
  int8x16_t v51 = (int8x16_t)xmmword_1B6E77050;
  *(_OWORD *)(v50 + 16) = xmmword_1B6E77050;
  *(void *)(v50 + 32) = 0;
  *(void *)(v50 + 40) = 0xE000000000000000;
  v51.i32[0] = 1.0;
  simd_float4 v66 = sub_1B684C7B8(13810438, v51, v52);
  *(void *)(v50 + 72) = v5;
  uint64_t v53 = swift_allocObject();
  *(void *)(v50 + 48) = v53;
  *(simd_float4 *)(v53 + 16) = v66;
  swift_allocObject();
  *(void *)(v42 + 64) = sub_1B684D5F0(0x6C6464694D796B73, 0xEE00726F6C6F4365, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v50);
  uint64_t v54 = swift_allocObject();
  int8x16_t v55 = (int8x16_t)xmmword_1B6E77050;
  *(_OWORD *)(v54 + 16) = xmmword_1B6E77050;
  *(void *)(v54 + 32) = 0;
  *(void *)(v54 + 40) = 0xE000000000000000;
  v55.i32[0] = 1.0;
  simd_float4 v67 = sub_1B684C7B8(5473238, v55, v56);
  *(void *)(v54 + 72) = v5;
  uint64_t v57 = swift_allocObject();
  *(void *)(v54 + 48) = v57;
  *(simd_float4 *)(v57 + 16) = v67;
  swift_allocObject();
  *(void *)(v42 + 72) = sub_1B684D5F0(0x6F43776F4C796B73, 0xEB00000000726F6CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v54);
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_1B6E77050;
  *(void *)(v58 + 32) = 0;
  *(void *)(v58 + 40) = 0xE000000000000000;
  *(void *)(v58 + 72) = v26;
  *(void *)(v58 + 48) = 0x3F51EB853F3851ECLL;
  swift_allocObject();
  *(void *)(v42 + 80) = sub_1B684D5F0(0x65746E65436E7573, 0xE900000000000072, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v58);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_1B6E77050;
  *(void *)(v59 + 32) = 0;
  *(void *)(v59 + 40) = 0xE000000000000000;
  *(void *)(v59 + 72) = v26;
  *(void *)(v59 + 48) = 0x3FC28F5C3E851EB8;
  swift_allocObject();
  *(void *)(v42 + 88) = sub_1B684D5F0(0xD000000000000011, 0x80000001B6F53AC0, 0, 0, 0x4024000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v59);
  uint64_t v60 = swift_allocObject();
  int8x16_t v61 = (int8x16_t)xmmword_1B6E77050;
  *(_OWORD *)(v60 + 16) = xmmword_1B6E77050;
  *(void *)(v60 + 32) = 0;
  *(void *)(v60 + 40) = 0xE000000000000000;
  v61.i32[0] = 1062836634;
  simd_float4 v68 = sub_1B684C7B8(11204599, v61, v62);
  *(void *)(v60 + 72) = v5;
  uint64_t v63 = swift_allocObject();
  *(void *)(v60 + 48) = v63;
  *(simd_float4 *)(v63 + 16) = v68;
  swift_allocObject();
  *(void *)(v42 + 96) = sub_1B684D5F0(0x726F6C6F436E7573, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v60);
  sub_1B6E31C48();
  sub_1B6D32398(0x6B735F44326E6567, 0xEB00000000443279, 0x6C7070612E6D6F63, 0xED00007866762E65, v42);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B6D32398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *(void *)(v5 + 16);
  if (!*(void *)(v12 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1B62B2CE0(a3, a4);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    sub_1B6D328C8(0, &qword_1E9DD9158, (uint64_t (*)(uint64_t))sub_1B6D32830, MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
    *(void *)(inited + 32) = a1;
    *(void *)(inited + 40) = a2;
    *(void *)(inited + 48) = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v17 = sub_1B67DE634(inited);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *(void *)(v6 + 16);
    *(void *)(v6 + 16) = 0x8000000000000000;
    goto LABEL_6;
  }
  uint64_t v15 = *(void **)(*(void *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  sub_1B67E4CFC(a5, a1, a2, v16);
  char v17 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *(void *)(v6 + 16);
  *(void *)(v6 + 16) = 0x8000000000000000;
LABEL_6:
  sub_1B67E4CBC((uint64_t)v17, a3, a4, isUniquelyReferenced_nonNull_native);
  *(void *)(v6 + 16) = v21;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D32580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = sub_1B6D326F0(a1, a2, a3, a4);
  unint64_t v5 = v4;
  if (v4 >> 62)
  {
    uint64_t v6 = sub_1B6E32C18();
    if (!v6) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v6) {
      goto LABEL_14;
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v9 = MEMORY[0x1BA9B4580](v7, v5);
    }
    else
    {
      uint64_t v9 = *(void *)(v5 + 8 * v7 + 32);
      swift_retain();
    }
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = sub_1B68C2068(0, v8[2] + 1, 1, v8);
    }
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1) {
      uint64_t v8 = sub_1B68C2068(v10 > 1, v11 + 1, 1, v8);
    }
    v8[2] = v11 + 1;
    uint64_t v12 = &v8[6 * v11];
    v12[4] = 0;
    v12[5] = 0;
    *((unsigned char *)v12 + 48) = 1;
    v12[7] = v7;
    v12[8] = 0;
    v12[9] = v9;
    swift_release();
    ++v7;
  }
  while (v6 != v7);
LABEL_14:
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC868];
}

uint64_t sub_1B6D326F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 16);
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1B62B2CE0(a3, a4);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v5 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v12 + 16))
      {
        uint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_11:
        swift_bridgeObjectRelease();
        return v15;
      }
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_1B62B2CE0(a1, a2);
      if (v14)
      {
        uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v15 = MEMORY[0x1E4FBC860];
      }
    }
    else
    {
      uint64_t v15 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t type metadata accessor for ShaderRegistry()
{
  return self;
}

uint64_t sub_1B6D32820()
{
  return MEMORY[0x1F4186498](v0, 32, 15);
}

void sub_1B6D32830()
{
  if (!qword_1E9DD9160)
  {
    sub_1B6D328C8(255, &qword_1E9DCD9D0, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, MEMORY[0x1E4FBB320]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DD9160);
    }
  }
}

void sub_1B6D328C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ParticleLifetime()
{
  return &type metadata for ParticleLifetime;
}

ValueMetadata *type metadata accessor for ParticleTextureFrame()
{
  return &type metadata for ParticleTextureFrame;
}

ValueMetadata *type metadata accessor for Color()
{
  return &type metadata for Color;
}

ValueMetadata *type metadata accessor for ParticleAge()
{
  return &type metadata for ParticleAge;
}

float sub_1B6D3296C(float a1)
{
  return 1.0 / a1;
}

double sub_1B6D32978(unsigned int a1)
{
  return sub_1B6748838(a1);
}

uint64_t sub_1B6D32990(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3811C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D329CC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3811C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D32A08(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD9228, (uint64_t (*)(void))sub_1B6D3811C, (uint64_t)&type metadata for Particle.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3811C();
  sub_1B6E33A88();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B6D32B48@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D3764C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D32B74(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v3, v4);
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1F8, (unint64_t *)&qword_1EB980EF0, v1);
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B6D32C98(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38170();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D32CD4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38170();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D32D10@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9238, (uint64_t (*)(void))sub_1B6D38170, (uint64_t)&type metadata for ParticleRoughness.CodingKeys, (void (*)(void))sub_1B6D38170, a2);
}

uint64_t sub_1B6D32D60(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD9248, (uint64_t (*)(void))sub_1B6D38170, (uint64_t)&type metadata for ParticleRoughness.CodingKeys, (void (*)(void))sub_1B6D38170);
}

void sub_1B6D32DB0(_DWORD *a1@<X8>)
{
  *a1 = 1056964608;
}

uint64_t sub_1B6D32DBC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D381C4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D32DF8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D381C4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D32E34@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9250, (uint64_t (*)(void))sub_1B6D381C4, (uint64_t)&type metadata for ParticleMetalness.CodingKeys, (void (*)(void))sub_1B6D381C4, a2);
}

uint64_t sub_1B6D32E84@<X0>(void *a1@<X0>, unint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, void (*a5)(void)@<X6>, _DWORD *a6@<X8>)
{
  uint64_t v20 = a6;
  sub_1B6D38FC4(0, a2, a3, a4, MEMORY[0x1E4FBBDC0]);
  uint64_t v10 = v9;
  uint64_t v19 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v19 - v12;
  sub_1B62C14BC(a1, a1[3]);
  a5();
  sub_1B6E33A48();
  if (v6) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v15 = v19;
  char v14 = v20;
  sub_1B6E32DC8();
  int v17 = v16;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v10);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *char v14 = v17;
  return result;
}

uint64_t sub_1B6D33028(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD9260, (uint64_t (*)(void))sub_1B6D381C4, (uint64_t)&type metadata for ParticleMetalness.CodingKeys, (void (*)(void))sub_1B6D381C4);
}

uint64_t sub_1B6D33078(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6, void (*a7)(void))
{
  sub_1B6D38FC4(0, a4, a5, a6, MEMORY[0x1E4FBBDE0]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v12);
  char v14 = (char *)&v16 - v13;
  sub_1B62C14BC(a1, a1[3]);
  a7();
  sub_1B6E33A88();
  sub_1B6E32F78();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1B6D331D8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38218();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D33214(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38218();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D33250@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9268, (uint64_t (*)(void))sub_1B6D38218, (uint64_t)&type metadata for ParticleEmission.CodingKeys, (void (*)(void))sub_1B6D38218, a2);
}

uint64_t sub_1B6D332A0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD9278, (uint64_t (*)(void))sub_1B6D38218, (uint64_t)&type metadata for ParticleEmission.CodingKeys, (void (*)(void))sub_1B6D38218);
}

uint64_t sub_1B6D332F0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3826C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3332C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3826C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D33368@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9280, (uint64_t (*)(void))sub_1B6D3826C, (uint64_t)&type metadata for ParticleAngle.CodingKeys, (void (*)(void))sub_1B6D3826C, a2);
}

uint64_t sub_1B6D333B8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD9290, (uint64_t (*)(void))sub_1B6D3826C, (uint64_t)&type metadata for ParticleAngle.CodingKeys, (void (*)(void))sub_1B6D3826C);
}

uint64_t sub_1B6D33408(uint64_t a1)
{
  unint64_t v2 = sub_1B6D382C0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D33444(uint64_t a1)
{
  unint64_t v2 = sub_1B6D382C0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D33480@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9298, (uint64_t (*)(void))sub_1B6D382C0, (uint64_t)&type metadata for ParticleAngleVelocity.CodingKeys, (void (*)(void))sub_1B6D382C0, a2);
}

uint64_t sub_1B6D334D0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD92A8, (uint64_t (*)(void))sub_1B6D382C0, (uint64_t)&type metadata for ParticleAngleVelocity.CodingKeys, (void (*)(void))sub_1B6D382C0);
}

uint64_t sub_1B6D33520(uint64_t a1)
{
  unint64_t v2 = sub_1B6D36178();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3355C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D36178();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D33598@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9180, (uint64_t (*)(void))sub_1B6D36178, (uint64_t)&type metadata for ParticleTextureFrame.CodingKeys, (void (*)(void))sub_1B6D36178, a2);
}

uint64_t sub_1B6D335E8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD9190, (uint64_t (*)(void))sub_1B6D36178, (uint64_t)&type metadata for ParticleTextureFrame.CodingKeys, (void (*)(void))sub_1B6D36178);
}

uint64_t sub_1B6D33638(void *a1, double a2)
{
  sub_1B6D38FC4(0, &qword_1E9DD9208, (uint64_t (*)(void))sub_1B6D38074, (uint64_t)&type metadata for ParticleRibbonLength.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38074();
  sub_1B6E33A88();
  *(double *)&v12[1] = a2;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
  sub_1B6D38FC4(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1B8, &qword_1EB980E90, v10);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B6D3381C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38074();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D33858(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38074();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6D33894(void *a1@<X0>, double *a2@<X8>)
{
  double v4 = sub_1B6D36CBC(a1);
  if (!v2) {
    *a2 = v4;
  }
}

uint64_t sub_1B6D338C0(void *a1)
{
  return sub_1B6D33638(a1, *v1);
}

uint64_t sub_1B6D338DC()
{
  return 0x4D65737265766E69;
}

uint64_t sub_1B6D338FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4D65737265766E69 && a2 == 0xEB00000000737361)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B6D339AC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38314();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D339E8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38314();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D33A24@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD92B0, (uint64_t (*)(void))sub_1B6D38314, (uint64_t)&type metadata for Mass.CodingKeys, (void (*)(void))sub_1B6D38314, a2);
}

uint64_t sub_1B6D33A74(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD92C0, (uint64_t (*)(void))sub_1B6D38314, (uint64_t)&type metadata for Mass.CodingKeys, (void (*)(void))sub_1B6D38314);
}

uint64_t sub_1B6D33AC4(void *a1, __n128 a2)
{
  v11[0] = a2;
  sub_1B6D38FC4(0, &qword_1E9DD92D8, (uint64_t (*)(void))sub_1B6D38368, (uint64_t)&type metadata for LinearFactor.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38368();
  sub_1B6E33A88();
  v11[1] = v11[0];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v9);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D33CA8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38368();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D33CE4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38368();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D33D20@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D3662C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D33D4C(void *a1)
{
  return sub_1B6D33AC4(a1, *v1);
}

uint64_t sub_1B6D33D68()
{
  return 12;
}

uint64_t sub_1B6D33D70(void *a1, __n128 a2)
{
  v11[0] = a2;
  sub_1B6D38FC4(0, &qword_1E9DD92F0, (uint64_t (*)(void))sub_1B6D383BC, (uint64_t)&type metadata for AngularFactor.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D383BC();
  sub_1B6E33A88();
  v11[1] = v11[0];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v9);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D33F54(uint64_t a1)
{
  unint64_t v2 = sub_1B6D383BC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D33F90(uint64_t a1)
{
  unint64_t v2 = sub_1B6D383BC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D33FCC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D3685C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D33FF8(void *a1)
{
  return sub_1B6D33D70(a1, *v1);
}

uint64_t sub_1B6D34014()
{
  return 13;
}

uint64_t sub_1B6D3401C(void *a1, __n128 a2)
{
  v11[0] = a2;
  sub_1B6D38FC4(0, &qword_1E9DD9308, (uint64_t (*)(void))sub_1B6D38410, (uint64_t)&type metadata for ParticleTarget.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38410();
  sub_1B6E33A88();
  v11[1] = v11[0];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v9);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D34200(void *a1, __n128 a2)
{
  v11[0] = a2;
  sub_1B6D38FC4(0, &qword_1E9DD9320, (uint64_t (*)(void))sub_1B6D38694, (uint64_t)&type metadata for UserData1.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38694();
  sub_1B6E33A88();
  v11[1] = v11[0];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1F8, (unint64_t *)&qword_1EB980EF0, v9);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D343E4(void *a1, __n128 a2)
{
  v11[0] = a2;
  sub_1B6D38FC4(0, &qword_1E9DD9338, (uint64_t (*)(void))sub_1B6D38918, (uint64_t)&type metadata for UserData2.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38918();
  sub_1B6E33A88();
  v11[1] = v11[0];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1F8, (unint64_t *)&qword_1EB980EF0, v9);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D345C8(void *a1, __n128 a2)
{
  v11[0] = a2;
  sub_1B6D38FC4(0, &qword_1E9DD9350, (uint64_t (*)(void))sub_1B6D38B9C, (uint64_t)&type metadata for UserData3.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38B9C();
  sub_1B6E33A88();
  v11[1] = v11[0];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1F8, (unint64_t *)&qword_1EB980EF0, v9);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D347AC(void *a1, __n128 a2)
{
  v11[0] = a2;
  sub_1B6D38FC4(0, &qword_1E9DD9368, (uint64_t (*)(void))sub_1B6D38E20, (uint64_t)&type metadata for UserData4.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38E20();
  sub_1B6E33A88();
  v11[1] = v11[0];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1F8, (unint64_t *)&qword_1EB980EF0, v9);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D34990()
{
  return 0x7A696C616D726F6ELL;
}

uint64_t sub_1B6D349B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7A696C616D726F6ELL && a2 == 0xEF65756C61566465)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B6D34A70(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3799C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D34AAC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3799C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D34AE8@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9198, (uint64_t (*)(void))sub_1B6D3799C, (uint64_t)&type metadata for ParticleAge.CodingKeys, (void (*)(void))sub_1B6D3799C, a2);
}

uint64_t sub_1B6D34B38(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD91A8, (uint64_t (*)(void))sub_1B6D3799C, (uint64_t)&type metadata for ParticleAge.CodingKeys, (void (*)(void))sub_1B6D3799C);
}

uint64_t sub_1B6D34B88(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38410();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D34BC4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38410();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D34C00@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D36A8C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D34C2C(void *a1)
{
  return sub_1B6D3401C(a1, *v1);
}

uint64_t sub_1B6D34C48(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38694();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D34C84(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38694();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D34CC0@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D38464(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D34CEC(void *a1)
{
  return sub_1B6D34200(a1, *v1);
}

uint64_t sub_1B6D34D08(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38918();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D34D44(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38918();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D34D80@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D386E8(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D34DAC(void *a1)
{
  return sub_1B6D343E4(a1, *v1);
}

uint64_t sub_1B6D34DC8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38B9C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D34E04(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38B9C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D34E40@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D3896C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D34E6C(void *a1)
{
  return sub_1B6D345C8(a1, *v1);
}

uint64_t sub_1B6D34E88(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38E20();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D34EC4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38E20();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D34F00@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D38BF0(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6D34F2C(void *a1)
{
  return sub_1B6D347AC(a1, *v1);
}

uint64_t sub_1B6D34F48(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38E74();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D34F84(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38E74();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D34FC0@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9370, (uint64_t (*)(void))sub_1B6D38E74, (uint64_t)&type metadata for NeighborCount.CodingKeys, (void (*)(void))sub_1B6D38E74, a2);
}

uint64_t sub_1B6D35010(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD9380, (uint64_t (*)(void))sub_1B6D38E74, (uint64_t)&type metadata for NeighborCount.CodingKeys, (void (*)(void))sub_1B6D38E74);
}

uint64_t sub_1B6D35060(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38EC8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3509C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38EC8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D350D8@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  char v14 = a2;
  sub_1B6D38FC4(0, &qword_1E9DD9388, (uint64_t (*)(void))sub_1B6D38EC8, (uint64_t)&type metadata for ParticlePivot.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v13 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38EC8();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v14;
  int v11 = sub_1B6E32E68();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *uint64_t v10 = v11;
  return result;
}

uint64_t sub_1B6D35284(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD9398, (uint64_t (*)(void))sub_1B6D38EC8, (uint64_t)&type metadata for ParticlePivot.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38EC8();
  sub_1B6E33A88();
  sub_1B6E33018();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1B6D353E8(_DWORD *a1@<X8>)
{
  *a1 = -2139062144;
}

uint64_t sub_1B6D353F4()
{
  return 0x4C65737265766E69;
}

uint64_t sub_1B6D35418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4C65737265766E69 && a2 == 0xEF656D6974656669)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B6D354D4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D36124();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D35510(uint64_t a1)
{
  unint64_t v2 = sub_1B6D36124();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D3554C@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B6D32E84(a1, &qword_1E9DD9168, (uint64_t (*)(void))sub_1B6D36124, (uint64_t)&type metadata for ParticleLifetime.CodingKeys, (void (*)(void))sub_1B6D36124, a2);
}

uint64_t sub_1B6D3559C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D33078(a1, a2, a3, &qword_1E9DD9178, (uint64_t (*)(void))sub_1B6D36124, (uint64_t)&type metadata for ParticleLifetime.CodingKeys, (void (*)(void))sub_1B6D36124);
}

uint64_t sub_1B6D355EC(char *a1, unsigned __int8 *a2)
{
  return sub_1B6BB63DC(*a1, *a2);
}

uint64_t sub_1B6D355F8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D3569C()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D3572C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D357CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D3631C();
  *a1 = result;
  return result;
}

void sub_1B6D357FC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC000000656D6954;
  uint64_t v4 = 0x7473727562;
  if (v2 != 1) {
    uint64_t v4 = 0x74696D655FLL;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x7265764F65746172;
  }
  if (!v5) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1B6D3585C()
{
  uint64_t v1 = 0x7473727562;
  if (*v0 != 1) {
    uint64_t v1 = 0x74696D655FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7265764F65746172;
  }
}

uint64_t sub_1B6D358B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D3631C();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D358E0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D380C8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3591C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D380C8();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6D35958@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B6D371AC(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B6D35994(void *a1)
{
  return sub_1B6D36460(a1);
}

void sub_1B6D359B4(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = nullsub_1;
  *(void *)(a1 + 24) = 0;
}

uint64_t sub_1B6D359D4(void *a1, __n128 a2)
{
  __n128 v12 = a2;
  sub_1B6D38FC4(0, &qword_1E9DD93B0, (uint64_t (*)(void))sub_1B6D38F1C, (uint64_t)&type metadata for ParticleSphereAttractor.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38F1C();
  sub_1B6E33A88();
  __n128 v13 = v12;
  char v14 = 0;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B62AAD84((unint64_t *)&qword_1EB97D1F8, (unint64_t *)&qword_1EB980EF0, v10);
  sub_1B6E32FA8();
  if (!v2)
  {
    v13.n128_u8[0] = 1;
    sub_1B6E32F78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B6D35BF4(char *a1, char *a2)
{
  return sub_1B6BB7338(*a1, *a2);
}

uint64_t sub_1B6D35C00()
{
  if (*v0) {
    return 0x7469736E65746E69;
  }
  else {
    return 0x657265687073;
  }
}

uint64_t sub_1B6D35C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D36368(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D35C64(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38F1C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D35CA0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38F1C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D35CDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6D373E0(a1);
  if (!v2)
  {
    *(_OWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B6D35D0C(void *a1)
{
  return sub_1B6D359D4(a1, *v1);
}

double sub_1B6D35D2C@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1B6E4F370;
  *(_DWORD *)(a1 + 16) = 1065353216;
  return result;
}

uint64_t sub_1B6D35D44(void *a1, unint64_t a2, __n128 a3, __n128 a4)
{
  __n128 v15 = a4;
  __n128 v16 = a3;
  sub_1B6D38FC4(0, &qword_1E9DD93C8, (uint64_t (*)(void))sub_1B6D38F70, (uint64_t)&type metadata for ParticleSDFAttractor.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v10);
  __n128 v12 = (char *)&v15 - v11;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38F70();
  sub_1B6E33A88();
  v17.n128_u64[0] = a2;
  char v18 = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v4)
  {
    __n128 v17 = v16;
    char v18 = 1;
    __n128 v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v13);
    sub_1B6E32FA8();
    __n128 v17 = v15;
    char v18 = 2;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B6D35FB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB5160(*a1, *a2);
}

uint64_t sub_1B6D35FC0()
{
  uint64_t v1 = 0x7265746E6563;
  if (*v0 != 1) {
    uint64_t v1 = 0x657A6953666C6168;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x61746144666473;
  }
}

uint64_t sub_1B6D36018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D361CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D36040(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38F70();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3607C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D38F70();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D360B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6D36EF0(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
  }
  return result;
}

uint64_t sub_1B6D360EC(void *a1)
{
  return sub_1B6D35D44(a1, v1->n128_u64[0], v1[1], v1[2]);
}

__n128 sub_1B6D3610C@<Q0>(__n128 *a1@<X8>)
{
  a1->n128_u64[0] = 0xFFFFFFFFLL;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  __asm { FMOV            V0.4S, #1.0 }
  a1[2] = result;
  return result;
}

unint64_t sub_1B6D36124()
{
  unint64_t result = qword_1E9DD9170;
  if (!qword_1E9DD9170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9170);
  }
  return result;
}

unint64_t sub_1B6D36178()
{
  unint64_t result = qword_1E9DD9188;
  if (!qword_1E9DD9188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9188);
  }
  return result;
}

uint64_t sub_1B6D361CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x61746144666473 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265746E6563 && a2 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657A6953666C6168 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B6D3631C()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D36368(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657265687073 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B6D36460(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD9220, (uint64_t (*)(void))sub_1B6D380C8, (uint64_t)&type metadata for ParticleCustomEmitter.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v10 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D380C8();
  sub_1B6E33A88();
  char v13 = 0;
  sub_1B6E32F78();
  if (!v1)
  {
    char v12 = 1;
    sub_1B6E32F78();
    char v11 = 2;
    sub_1B6E32F78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D3662C(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD92C8, (uint64_t (*)(void))sub_1B6D38368, (uint64_t)&type metadata for LinearFactor.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38368();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v9);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B6D3685C(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD92E0, (uint64_t (*)(void))sub_1B6D383BC, (uint64_t)&type metadata for AngularFactor.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D383BC();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v9);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B6D36A8C(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD92F8, (uint64_t (*)(void))sub_1B6D38410, (uint64_t)&type metadata for ParticleTarget.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38410();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v9);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

double sub_1B6D36CBC(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD91F8, (uint64_t (*)(void))sub_1B6D38074, (uint64_t)&type metadata for ParticleRibbonLength.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38074();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
    sub_1B6D38FC4(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D1D0, &qword_1EB980E90, v10);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    double v2 = *(double *)&v12[1];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B6D36EF0(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD93B8, (uint64_t (*)(void))sub_1B6D38F70, (uint64_t)&type metadata for ParticleSDFAttractor.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v12 - v7;
  uint64_t v9 = a1[3];
  sub_1B62C14BC(a1, v9);
  sub_1B6D38F70();
  sub_1B6E33A48();
  if (!v1)
  {
    char v14 = 0;
    sub_1B62B1EA8();
    sub_1B6E32DF8();
    uint64_t v9 = v13;
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    char v14 = 1;
    sub_1B62AAD84((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v10);
    sub_1B6E32DF8();
    v12[1] = v13;
    char v14 = 2;
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v12[0] = v13;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1B6D371AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  sub_1B6D38FC4(0, &qword_1E9DD9210, (uint64_t (*)(void))sub_1B6D380C8, (uint64_t)&type metadata for ParticleCustomEmitter.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v19 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D380C8();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v6;
  uint64_t v11 = v19;
  char v22 = 0;
  sub_1B6E32DC8();
  int v13 = v12;
  char v21 = 1;
  sub_1B6E32DC8();
  int v15 = v14;
  char v20 = 2;
  sub_1B6E32DC8();
  int v17 = v16;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)uint64_t v11 = v13;
  *(_DWORD *)(v11 + 4) = v15;
  *(_DWORD *)(v11 + 8) = v17;
  *(void *)(v11 + 16) = nullsub_1;
  *(void *)(v11 + 24) = 0;
  return result;
}

uint64_t sub_1B6D373E0(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD93A0, (uint64_t (*)(void))sub_1B6D38F1C, (uint64_t)&type metadata for ParticleSphereAttractor.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38F1C();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    char v12 = 0;
    sub_1B62AAD84((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v9);
    sub_1B6E32DF8();
    long long v11 = v13;
    LOBYTE(v13) = 1;
    sub_1B6E32DC8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B6D3764C(void *a1)
{
  sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980930, (uint64_t (*)(void))sub_1B6AAF8B4, (uint64_t)&type metadata for ValueCodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v14 - v7;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1B62C14BC(a1, v9);
  if (sub_1B62B8F14(2000, v9, v10))
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6E33A28();
    if (!v1)
    {
      sub_1B62C14BC(&v15, v16);
      long long v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
      sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
      sub_1B62AAD84((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v11);
      sub_1B6E33518();
      v14[0] = v14[1];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v15);
    }
  }
  else
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6AAF8B4();
    sub_1B6E33A48();
    if (!v1)
    {
      char v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
      sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
      sub_1B62AAD84((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v12);
      sub_1B6E32DF8();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14[0] = v15;
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B6D3799C()
{
  unint64_t result = qword_1E9DD91A0;
  if (!qword_1E9DD91A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleAge.CodingKeys()
{
  return &type metadata for ParticleAge.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleTextureFrame.CodingKeys()
{
  return &type metadata for ParticleTextureFrame.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleLifetime.CodingKeys()
{
  return &type metadata for ParticleLifetime.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleGPU()
{
  return &type metadata for ParticleGPU;
}

ValueMetadata *type metadata accessor for ParticleRibbonLength()
{
  return &type metadata for ParticleRibbonLength;
}

uint64_t destroy for ParticleCustomEmitter()
{
  return swift_release();
}

uint64_t initializeWithCopy for ParticleCustomEmitter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ParticleCustomEmitter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ParticleCustomEmitter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleCustomEmitter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleCustomEmitter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleCustomEmitter()
{
  return &type metadata for ParticleCustomEmitter;
}

ValueMetadata *type metadata accessor for ParticleParentID()
{
  return &type metadata for ParticleParentID;
}

ValueMetadata *type metadata accessor for Particle()
{
  return &type metadata for Particle;
}

ValueMetadata *type metadata accessor for ParticleRoughness()
{
  return &type metadata for ParticleRoughness;
}

ValueMetadata *type metadata accessor for ParticleMetalness()
{
  return &type metadata for ParticleMetalness;
}

ValueMetadata *type metadata accessor for ParticleEmission()
{
  return &type metadata for ParticleEmission;
}

ValueMetadata *type metadata accessor for ParticleAngle()
{
  return &type metadata for ParticleAngle;
}

ValueMetadata *type metadata accessor for ParticleAngleVelocity()
{
  return &type metadata for ParticleAngleVelocity;
}

ValueMetadata *type metadata accessor for ParticleID()
{
  return &type metadata for ParticleID;
}

ValueMetadata *type metadata accessor for Mass()
{
  return &type metadata for Mass;
}

ValueMetadata *type metadata accessor for LinearFactor()
{
  return &type metadata for LinearFactor;
}

ValueMetadata *type metadata accessor for AngularFactor()
{
  return &type metadata for AngularFactor;
}

ValueMetadata *type metadata accessor for ParticleTarget()
{
  return &type metadata for ParticleTarget;
}

ValueMetadata *type metadata accessor for UserData1()
{
  return &type metadata for UserData1;
}

ValueMetadata *type metadata accessor for UserData2()
{
  return &type metadata for UserData2;
}

ValueMetadata *type metadata accessor for UserData3()
{
  return &type metadata for UserData3;
}

ValueMetadata *type metadata accessor for UserData4()
{
  return &type metadata for UserData4;
}

ValueMetadata *type metadata accessor for NeighborCount()
{
  return &type metadata for NeighborCount;
}

ValueMetadata *type metadata accessor for ParticlePivot()
{
  return &type metadata for ParticlePivot;
}

__n128 initializeWithCopy for ParticleSphereAttractor(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleSphereAttractor(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParticleSphereAttractor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSphereAttractor()
{
  return &type metadata for ParticleSphereAttractor;
}

ValueMetadata *type metadata accessor for ParticleSDFAttractor()
{
  return &type metadata for ParticleSDFAttractor;
}

unint64_t sub_1B6D37D60()
{
  unint64_t result = qword_1E9DD91B0;
  if (!qword_1E9DD91B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91B0);
  }
  return result;
}

unint64_t sub_1B6D37DB8()
{
  unint64_t result = qword_1E9DD91B8;
  if (!qword_1E9DD91B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91B8);
  }
  return result;
}

unint64_t sub_1B6D37E10()
{
  unint64_t result = qword_1E9DD91C0;
  if (!qword_1E9DD91C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91C0);
  }
  return result;
}

unint64_t sub_1B6D37E68()
{
  unint64_t result = qword_1E9DD91C8;
  if (!qword_1E9DD91C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91C8);
  }
  return result;
}

unint64_t sub_1B6D37EC0()
{
  unint64_t result = qword_1E9DD91D0;
  if (!qword_1E9DD91D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91D0);
  }
  return result;
}

unint64_t sub_1B6D37F18()
{
  unint64_t result = qword_1E9DD91D8;
  if (!qword_1E9DD91D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91D8);
  }
  return result;
}

unint64_t sub_1B6D37F70()
{
  unint64_t result = qword_1E9DD91E0;
  if (!qword_1E9DD91E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91E0);
  }
  return result;
}

unint64_t sub_1B6D37FC8()
{
  unint64_t result = qword_1E9DD91E8;
  if (!qword_1E9DD91E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91E8);
  }
  return result;
}

unint64_t sub_1B6D38020()
{
  unint64_t result = qword_1E9DD91F0;
  if (!qword_1E9DD91F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD91F0);
  }
  return result;
}

unint64_t sub_1B6D38074()
{
  unint64_t result = qword_1E9DD9200;
  if (!qword_1E9DD9200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9200);
  }
  return result;
}

unint64_t sub_1B6D380C8()
{
  unint64_t result = qword_1E9DD9218;
  if (!qword_1E9DD9218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9218);
  }
  return result;
}

unint64_t sub_1B6D3811C()
{
  unint64_t result = qword_1E9DD9230;
  if (!qword_1E9DD9230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9230);
  }
  return result;
}

unint64_t sub_1B6D38170()
{
  unint64_t result = qword_1E9DD9240;
  if (!qword_1E9DD9240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9240);
  }
  return result;
}

unint64_t sub_1B6D381C4()
{
  unint64_t result = qword_1E9DD9258;
  if (!qword_1E9DD9258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9258);
  }
  return result;
}

unint64_t sub_1B6D38218()
{
  unint64_t result = qword_1E9DD9270;
  if (!qword_1E9DD9270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9270);
  }
  return result;
}

unint64_t sub_1B6D3826C()
{
  unint64_t result = qword_1E9DD9288;
  if (!qword_1E9DD9288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9288);
  }
  return result;
}

unint64_t sub_1B6D382C0()
{
  unint64_t result = qword_1E9DD92A0;
  if (!qword_1E9DD92A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD92A0);
  }
  return result;
}

unint64_t sub_1B6D38314()
{
  unint64_t result = qword_1E9DD92B8;
  if (!qword_1E9DD92B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD92B8);
  }
  return result;
}

unint64_t sub_1B6D38368()
{
  unint64_t result = qword_1E9DD92D0;
  if (!qword_1E9DD92D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD92D0);
  }
  return result;
}

unint64_t sub_1B6D383BC()
{
  unint64_t result = qword_1E9DD92E8;
  if (!qword_1E9DD92E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD92E8);
  }
  return result;
}

unint64_t sub_1B6D38410()
{
  unint64_t result = qword_1E9DD9300;
  if (!qword_1E9DD9300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9300);
  }
  return result;
}

uint64_t sub_1B6D38464(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD9310, (uint64_t (*)(void))sub_1B6D38694, (uint64_t)&type metadata for UserData1.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38694();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v9);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B6D38694()
{
  unint64_t result = qword_1E9DD9318;
  if (!qword_1E9DD9318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9318);
  }
  return result;
}

uint64_t sub_1B6D386E8(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD9328, (uint64_t (*)(void))sub_1B6D38918, (uint64_t)&type metadata for UserData2.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38918();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v9);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B6D38918()
{
  unint64_t result = qword_1E9DD9330;
  if (!qword_1E9DD9330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9330);
  }
  return result;
}

uint64_t sub_1B6D3896C(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD9340, (uint64_t (*)(void))sub_1B6D38B9C, (uint64_t)&type metadata for UserData3.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38B9C();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v9);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B6D38B9C()
{
  unint64_t result = qword_1E9DD9348;
  if (!qword_1E9DD9348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9348);
  }
  return result;
}

uint64_t sub_1B6D38BF0(void *a1)
{
  sub_1B6D38FC4(0, &qword_1E9DD9358, (uint64_t (*)(void))sub_1B6D38E20, (uint64_t)&type metadata for UserData4.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D38E20();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
    sub_1B6D38FC4(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    sub_1B62AAD84((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v9);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B6D38E20()
{
  unint64_t result = qword_1E9DD9360;
  if (!qword_1E9DD9360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9360);
  }
  return result;
}

unint64_t sub_1B6D38E74()
{
  unint64_t result = qword_1E9DD9378;
  if (!qword_1E9DD9378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9378);
  }
  return result;
}

unint64_t sub_1B6D38EC8()
{
  unint64_t result = qword_1E9DD9390;
  if (!qword_1E9DD9390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9390);
  }
  return result;
}

unint64_t sub_1B6D38F1C()
{
  unint64_t result = qword_1E9DD93A8;
  if (!qword_1E9DD93A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD93A8);
  }
  return result;
}

unint64_t sub_1B6D38F70()
{
  unint64_t result = qword_1E9DD93C0;
  if (!qword_1E9DD93C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD93C0);
  }
  return result;
}

void sub_1B6D38FC4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ParticleSDFAttractor.CodingKeys()
{
  return &type metadata for ParticleSDFAttractor.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ParticleSphereAttractor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D3910CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSphereAttractor.CodingKeys()
{
  return &type metadata for ParticleSphereAttractor.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticlePivot.CodingKeys()
{
  return &type metadata for ParticlePivot.CodingKeys;
}

ValueMetadata *type metadata accessor for NeighborCount.CodingKeys()
{
  return &type metadata for NeighborCount.CodingKeys;
}

ValueMetadata *type metadata accessor for UserData4.CodingKeys()
{
  return &type metadata for UserData4.CodingKeys;
}

ValueMetadata *type metadata accessor for UserData3.CodingKeys()
{
  return &type metadata for UserData3.CodingKeys;
}

ValueMetadata *type metadata accessor for UserData2.CodingKeys()
{
  return &type metadata for UserData2.CodingKeys;
}

ValueMetadata *type metadata accessor for UserData1.CodingKeys()
{
  return &type metadata for UserData1.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleTarget.CodingKeys()
{
  return &type metadata for ParticleTarget.CodingKeys;
}

ValueMetadata *type metadata accessor for AngularFactor.CodingKeys()
{
  return &type metadata for AngularFactor.CodingKeys;
}

ValueMetadata *type metadata accessor for LinearFactor.CodingKeys()
{
  return &type metadata for LinearFactor.CodingKeys;
}

ValueMetadata *type metadata accessor for Mass.CodingKeys()
{
  return &type metadata for Mass.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAngleVelocity.CodingKeys()
{
  return &type metadata for ParticleAngleVelocity.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAngle.CodingKeys()
{
  return &type metadata for ParticleAngle.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleEmission.CodingKeys()
{
  return &type metadata for ParticleEmission.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleMetalness.CodingKeys()
{
  return &type metadata for ParticleMetalness.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleRoughness.CodingKeys()
{
  return &type metadata for ParticleRoughness.CodingKeys;
}

ValueMetadata *type metadata accessor for Particle.CodingKeys()
{
  return &type metadata for Particle.CodingKeys;
}

unsigned char *_s3VFX20ParticleSDFAttractorV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D39310);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleCustomEmitter.CodingKeys()
{
  return &type metadata for ParticleCustomEmitter.CodingKeys;
}

unsigned char *_s3VFX11ParticleAgeV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6D393E4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleRibbonLength.CodingKeys()
{
  return &type metadata for ParticleRibbonLength.CodingKeys;
}

unint64_t sub_1B6D39420()
{
  unint64_t result = qword_1E9DD93D0;
  if (!qword_1E9DD93D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD93D0);
  }
  return result;
}

unint64_t sub_1B6D39478()
{
  unint64_t result = qword_1E9DD93D8;
  if (!qword_1E9DD93D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD93D8);
  }
  return result;
}

unint64_t sub_1B6D394D0()
{
  unint64_t result = qword_1E9DD93E0;
  if (!qword_1E9DD93E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD93E0);
  }
  return result;
}

unint64_t sub_1B6D39528()
{
  unint64_t result = qword_1E9DD93E8;
  if (!qword_1E9DD93E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD93E8);
  }
  return result;
}

unint64_t sub_1B6D39580()
{
  unint64_t result = qword_1E9DD93F0;
  if (!qword_1E9DD93F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD93F0);
  }
  return result;
}

unint64_t sub_1B6D395D8()
{
  unint64_t result = qword_1E9DD93F8;
  if (!qword_1E9DD93F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD93F8);
  }
  return result;
}

unint64_t sub_1B6D39630()
{
  unint64_t result = qword_1E9DD9400;
  if (!qword_1E9DD9400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9400);
  }
  return result;
}

unint64_t sub_1B6D39688()
{
  unint64_t result = qword_1E9DD9408;
  if (!qword_1E9DD9408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9408);
  }
  return result;
}

unint64_t sub_1B6D396E0()
{
  unint64_t result = qword_1E9DD9410;
  if (!qword_1E9DD9410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9410);
  }
  return result;
}

unint64_t sub_1B6D39738()
{
  unint64_t result = qword_1E9DD9418;
  if (!qword_1E9DD9418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9418);
  }
  return result;
}

unint64_t sub_1B6D39790()
{
  unint64_t result = qword_1E9DD9420;
  if (!qword_1E9DD9420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9420);
  }
  return result;
}

unint64_t sub_1B6D397E8()
{
  unint64_t result = qword_1E9DD9428;
  if (!qword_1E9DD9428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9428);
  }
  return result;
}

unint64_t sub_1B6D39840()
{
  unint64_t result = qword_1E9DD9430;
  if (!qword_1E9DD9430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9430);
  }
  return result;
}

unint64_t sub_1B6D39898()
{
  unint64_t result = qword_1E9DD9438;
  if (!qword_1E9DD9438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9438);
  }
  return result;
}

unint64_t sub_1B6D398F0()
{
  unint64_t result = qword_1E9DD9440;
  if (!qword_1E9DD9440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9440);
  }
  return result;
}

unint64_t sub_1B6D39948()
{
  unint64_t result = qword_1E9DD9448;
  if (!qword_1E9DD9448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9448);
  }
  return result;
}

unint64_t sub_1B6D399A0()
{
  unint64_t result = qword_1E9DD9450;
  if (!qword_1E9DD9450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9450);
  }
  return result;
}

unint64_t sub_1B6D399F8()
{
  unint64_t result = qword_1E9DD9458;
  if (!qword_1E9DD9458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9458);
  }
  return result;
}

unint64_t sub_1B6D39A50()
{
  unint64_t result = qword_1E9DD9460;
  if (!qword_1E9DD9460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9460);
  }
  return result;
}

unint64_t sub_1B6D39AA8()
{
  unint64_t result = qword_1E9DD9468;
  if (!qword_1E9DD9468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9468);
  }
  return result;
}

unint64_t sub_1B6D39B00()
{
  unint64_t result = qword_1E9DD9470;
  if (!qword_1E9DD9470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9470);
  }
  return result;
}

unint64_t sub_1B6D39B58()
{
  unint64_t result = qword_1E9DD9478;
  if (!qword_1E9DD9478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9478);
  }
  return result;
}

unint64_t sub_1B6D39BB0()
{
  unint64_t result = qword_1E9DD9480;
  if (!qword_1E9DD9480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9480);
  }
  return result;
}

unint64_t sub_1B6D39C08()
{
  unint64_t result = qword_1E9DD9488;
  if (!qword_1E9DD9488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9488);
  }
  return result;
}

unint64_t sub_1B6D39C60()
{
  unint64_t result = qword_1E9DD9490;
  if (!qword_1E9DD9490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9490);
  }
  return result;
}

unint64_t sub_1B6D39CB8()
{
  unint64_t result = qword_1E9DD9498;
  if (!qword_1E9DD9498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9498);
  }
  return result;
}

unint64_t sub_1B6D39D10()
{
  unint64_t result = qword_1E9DD94A0;
  if (!qword_1E9DD94A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94A0);
  }
  return result;
}

unint64_t sub_1B6D39D68()
{
  unint64_t result = qword_1E9DD94A8;
  if (!qword_1E9DD94A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94A8);
  }
  return result;
}

unint64_t sub_1B6D39DC0()
{
  unint64_t result = qword_1E9DD94B0;
  if (!qword_1E9DD94B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94B0);
  }
  return result;
}

unint64_t sub_1B6D39E18()
{
  unint64_t result = qword_1E9DD94B8;
  if (!qword_1E9DD94B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94B8);
  }
  return result;
}

unint64_t sub_1B6D39E70()
{
  unint64_t result = qword_1E9DD94C0;
  if (!qword_1E9DD94C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94C0);
  }
  return result;
}

unint64_t sub_1B6D39EC8()
{
  unint64_t result = qword_1E9DD94C8;
  if (!qword_1E9DD94C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94C8);
  }
  return result;
}

unint64_t sub_1B6D39F20()
{
  unint64_t result = qword_1E9DD94D0;
  if (!qword_1E9DD94D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94D0);
  }
  return result;
}

unint64_t sub_1B6D39F78()
{
  unint64_t result = qword_1E9DD94D8;
  if (!qword_1E9DD94D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94D8);
  }
  return result;
}

unint64_t sub_1B6D39FD0()
{
  unint64_t result = qword_1E9DD94E0;
  if (!qword_1E9DD94E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94E0);
  }
  return result;
}

unint64_t sub_1B6D3A028()
{
  unint64_t result = qword_1E9DD94E8;
  if (!qword_1E9DD94E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94E8);
  }
  return result;
}

unint64_t sub_1B6D3A080()
{
  unint64_t result = qword_1E9DD94F0;
  if (!qword_1E9DD94F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94F0);
  }
  return result;
}

unint64_t sub_1B6D3A0D8()
{
  unint64_t result = qword_1E9DD94F8;
  if (!qword_1E9DD94F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD94F8);
  }
  return result;
}

unint64_t sub_1B6D3A130()
{
  unint64_t result = qword_1E9DD9500;
  if (!qword_1E9DD9500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9500);
  }
  return result;
}

unint64_t sub_1B6D3A188()
{
  unint64_t result = qword_1E9DD9508;
  if (!qword_1E9DD9508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9508);
  }
  return result;
}

unint64_t sub_1B6D3A1E0()
{
  unint64_t result = qword_1E9DD9510;
  if (!qword_1E9DD9510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9510);
  }
  return result;
}

unint64_t sub_1B6D3A238()
{
  unint64_t result = qword_1E9DD9518;
  if (!qword_1E9DD9518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9518);
  }
  return result;
}

unint64_t sub_1B6D3A290()
{
  unint64_t result = qword_1E9DD9520;
  if (!qword_1E9DD9520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9520);
  }
  return result;
}

unint64_t sub_1B6D3A2E8()
{
  unint64_t result = qword_1E9DD9528;
  if (!qword_1E9DD9528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9528);
  }
  return result;
}

unint64_t sub_1B6D3A340()
{
  unint64_t result = qword_1E9DD9530;
  if (!qword_1E9DD9530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9530);
  }
  return result;
}

unint64_t sub_1B6D3A398()
{
  unint64_t result = qword_1E9DD9538;
  if (!qword_1E9DD9538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9538);
  }
  return result;
}

unint64_t sub_1B6D3A3F0()
{
  unint64_t result = qword_1E9DD9540;
  if (!qword_1E9DD9540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9540);
  }
  return result;
}

unint64_t sub_1B6D3A448()
{
  unint64_t result = qword_1E9DD9548;
  if (!qword_1E9DD9548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9548);
  }
  return result;
}

unint64_t sub_1B6D3A4A0()
{
  unint64_t result = qword_1E9DD9550;
  if (!qword_1E9DD9550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9550);
  }
  return result;
}

unint64_t sub_1B6D3A4F8()
{
  unint64_t result = qword_1E9DD9558;
  if (!qword_1E9DD9558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9558);
  }
  return result;
}

unint64_t sub_1B6D3A550()
{
  unint64_t result = qword_1E9DD9560;
  if (!qword_1E9DD9560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9560);
  }
  return result;
}

unint64_t sub_1B6D3A5A8()
{
  unint64_t result = qword_1E9DD9568;
  if (!qword_1E9DD9568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9568);
  }
  return result;
}

unint64_t sub_1B6D3A600()
{
  unint64_t result = qword_1E9DD9570;
  if (!qword_1E9DD9570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9570);
  }
  return result;
}

unint64_t sub_1B6D3A658()
{
  unint64_t result = qword_1E9DD9578;
  if (!qword_1E9DD9578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9578);
  }
  return result;
}

unint64_t sub_1B6D3A6B0()
{
  unint64_t result = qword_1E9DD9580;
  if (!qword_1E9DD9580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9580);
  }
  return result;
}

unint64_t sub_1B6D3A708()
{
  unint64_t result = qword_1E9DD9588;
  if (!qword_1E9DD9588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9588);
  }
  return result;
}

unint64_t sub_1B6D3A760()
{
  unint64_t result = qword_1E9DD9590;
  if (!qword_1E9DD9590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9590);
  }
  return result;
}

unint64_t sub_1B6D3A7B8()
{
  unint64_t result = qword_1E9DD9598;
  if (!qword_1E9DD9598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9598);
  }
  return result;
}

unint64_t sub_1B6D3A810()
{
  unint64_t result = qword_1E9DD95A0;
  if (!qword_1E9DD95A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD95A0);
  }
  return result;
}

float sub_1B6D3A868(uint64_t a1, __n128 a2, float32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  int32x4_t v40 = a5;
  int32x4_t v41 = a4;
  float32x4_t v42 = a3;
  __n128 v39 = a2;
  uint64_t v6 = sub_1B6E33448();
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  float32x4_t v10 = (float32x4_t)v39;
  v10.i32[3] = 0;
  float32x4_t v11 = vmaxnmq_f32(v10, (float32x4_t)0);
  v11.i32[3] = 0;
  float32x4_t v42 = vmulq_f32(vminnmq_f32(v11, (float32x4_t)xmmword_1B6E4F540), v42);
  (*(void (**)(char *, void))(v12 + 104))(v9, *MEMORY[0x1E4FBBE88]);
  sub_1B6D3B584((uint64_t)v9, (__n128)v42);
  v13.i32[3] = 0;
  int32x4_t v14 = v40;
  v14.i32[3] = 0;
  int8x16_t v15 = (int8x16_t)vminq_s32(v13, v14);
  int32x4_t v16 = vcgtq_s32(v40, (int32x4_t)v15);
  *(int32x2_t *)v14.i8 = vsub_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8);
  int v17 = v15.i32[2];
  __int32 v18 = vmovn_s32(v16).i32[1] & 1;
  _Q0 = vmulq_s32((int32x4_t)v15, v41);
  _Q0.i32[0] = vaddq_s32(vaddq_s32(_Q0, vdupq_lane_s32(*(int32x2_t *)_Q0.i8, 1)), vdupq_laneq_s32(_Q0, 2)).u32[0];
  int32x4_t v20 = (int32x4_t)v15.u32[0];
  int32x4_t v21 = (int32x4_t)v15.u32[0];
  v20.i32[1] = v14.i32[1];
  int32x4_t v22 = v20;
  v22.i32[2] = v15.i32[2];
  uint64_t v23 = vextq_s8(v15, v15, 8uLL).u64[0];
  v21.i32[1] = v15.i32[1];
  *(float32x2_t *)v24.f32 = vcvt_f32_s32(*(int32x2_t *)v15.i8);
  v15.i32[0] = v14.i32[0];
  int32x4_t v25 = vmulq_s32((int32x4_t)v15, v41);
  int32x4_t v26 = vmulq_s32(v22, v41);
  v26.i32[0] = *(_DWORD *)(a1
                         + 4
                         * vaddq_s32(vaddq_s32(v26, vdupq_lane_s32(*(int32x2_t *)v26.i8, 1)), vdupq_laneq_s32(v26, 2)).i32[0]);
  v27.i64[0] = v14.i64[0];
  v27.i64[1] = v23;
  int32x4_t v28 = vmulq_s32(v27, v41);
  v21.i32[2] = v15.i32[2] + v18;
  _Q16 = vmulq_s32(v21, v41);
  _Q16.i32[0] = *(_DWORD *)(a1
                          + 4
                          * vaddq_s32(vaddq_s32(_Q16, vdupq_lane_s32(*(int32x2_t *)_Q16.i8, 1)), vdupq_laneq_s32(_Q16, 2)).i32[0]);
  v15.i32[2] += v18;
  int32x4_t v30 = vmulq_s32((int32x4_t)v15, v41);
  v20.i32[2] = v21.i32[2];
  int32x4_t v31 = vmulq_s32(v20, v41);
  v31.i32[0] = vaddq_s32(vaddq_s32(v31, vdupq_lane_s32(*(int32x2_t *)v31.i8, 1)), vdupq_laneq_s32(v31, 2)).u32[0];
  v14.i32[2] = v21.i32[2];
  _Q1 = vmulq_s32(v14, v41);
  v24.f32[2] = (float)v17;
  _Q6 = vsubq_f32(v42, v24);
  *(float *)v31.i32 = vmlas_n_f32(*(float *)(a1 + 4 * v31.i32[0]), *(float *)(a1+ 4* vaddq_s32(vaddq_s32(_Q1, vdupq_lane_s32(*(int32x2_t *)_Q1.i8, 1)), vdupq_laneq_s32(_Q1, 2)).i32[0])- *(float *)(a1 + 4 * v31.i32[0]), _Q6.f32[0]);
  *(float *)_Q1.i32 = vmlas_n_f32(*(float *)v26.i32, *(float *)(a1+ 4* vaddq_s32(vaddq_s32(v28, vdupq_lane_s32(*(int32x2_t *)v28.i8, 1)), vdupq_laneq_s32(v28, 2)).i32[0])- *(float *)v26.i32, _Q6.f32[0])- vmlas_n_f32(*(float *)(a1 + 4 * _Q0.i32[0]), *(float *)(a1+ 4* vaddq_s32(vaddq_s32(v25, vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)), vdupq_laneq_s32(v25, 2)).i32[0])- *(float *)(a1 + 4 * _Q0.i32[0]), _Q6.f32[0]);
  __asm { FMLA            S0, S1, V6.S[1] }
  *(float *)_Q1.i32 = *(float *)v31.i32
                    - vmlas_n_f32(*(float *)_Q16.i32, *(float *)(a1+ 4* vaddq_s32(vaddq_s32(v30, vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)), vdupq_laneq_s32(v30, 2)).i32[0])- *(float *)_Q16.i32, _Q6.f32[0]);
  __asm { FMLA            S16, S1, V6.S[1] }
  *(float *)_Q1.i32 = *(float *)_Q16.i32 - *(float *)_Q0.i32;
  __asm { FMLA            S0, S1, V6.S[2] }
  return result;
}

double sub_1B6D3AB08(uint64_t a1, float32x4_t a2, float32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  float v6 = sub_1B6D3A868(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B6EB24F0), a3, a4, a5);
  *(float *)&unsigned int v10 = v6 - sub_1B6D3A868(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B6EB2500), a3, a4, a5);
  float v7 = sub_1B6D3A868(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B6EB2510), a3, a4, a5);
  *(float *)&unsigned int v9 = v7 - sub_1B6D3A868(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B6EB2520), a3, a4, a5);
  sub_1B6D3A868(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B6EB2530), a3, a4, a5);
  sub_1B6D3A868(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B6EB2540), a3, a4, a5);
  return COERCE_DOUBLE(__PAIR64__(v9, v10));
}

uint64_t sub_1B6D3AC30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = sub_1B6E30F48();
  uint64_t v21 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v4);
  int32x4_t v22 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6D3E9E0(0, &qword_1E9DD95D0, (uint64_t (*)(void))sub_1B6D3DFF0, (uint64_t)&type metadata for SDFFileAsset.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v7 = v6;
  uint64_t v20 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  unsigned int v10 = (char *)&v19 - v9;
  uint64_t v11 = type metadata accessor for SDFFileAsset();
  MEMORY[0x1F4188790](v11 - 8, v12);
  int32x4_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6E30E48();
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3DFF0();
  uint64_t v15 = v23;
  sub_1B6E33A48();
  if (!v15)
  {
    uint64_t v16 = v20;
    uint64_t v17 = v21;
    sub_1B6A4A8B0((unint64_t *)&qword_1EB97D980);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v7);
    (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v14, v22, v3);
    sub_1B6D3E044((uint64_t)v14, v19);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B62E2F00((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SDFFileAsset);
}

uint64_t sub_1B6D3AF10()
{
  return 7107189;
}

uint64_t sub_1B6D3AF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B6D3AFA8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3DFF0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3AFE4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3DFF0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D3B020@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6D3AC30(a1, a2);
}

uint64_t sub_1B6D3B038(void *a1)
{
  sub_1B6D3E9E0(0, (unint64_t *)&unk_1E9DD95E8, (uint64_t (*)(void))sub_1B6D3DFF0, (uint64_t)&type metadata for SDFFileAsset.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  char v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3DFF0();
  sub_1B6E33A88();
  sub_1B6E30F48();
  sub_1B6A4A8B0(&qword_1E9DD7B00);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B6D3B1D0()
{
  return sub_1B6E30E48();
}

uint64_t sub_1B6D3B1DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB01F0(*a1, *a2);
}

uint64_t sub_1B6D3B1E8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D3B280()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D3B304()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D3B398@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D3D578();
  *a1 = result;
  return result;
}

void sub_1B6D3B3C8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x746867696568;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6874706564;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6874646977;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B6D3B41C()
{
  uint64_t v1 = 0x746867696568;
  if (*v0 != 1) {
    uint64_t v1 = 0x6874706564;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6874646977;
  }
}

uint64_t sub_1B6D3B46C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D3D578();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D3B494(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3E98C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3B4D0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3E98C();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6D3B50C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6D3E0A8(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B6D3B554(void *a1)
{
  return sub_1B6D3D738(a1, *v1, v1[1], v1[2]);
}

double sub_1B6D3B574@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1B6D3B584(uint64_t a1, __n128 a2)
{
  __n128 v35 = a2;
  uint64_t v3 = sub_1B6E33448();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v33 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v8);
  unsigned int v10 = (char *)&v33 - v9;
  MEMORY[0x1F4188790](v11, v12);
  int32x4_t v14 = (char *)&v33 - v13;
  LODWORD(v36) = v35.n128_u32[0];
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v34 = a1;
  v15((char *)&v33 - v13, a1, v3);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t))(v4 + 88);
  int v17 = v16(v14, v3);
  int v18 = *MEMORY[0x1E4FBBEA0];
  if (v17 == *MEMORY[0x1E4FBBEA0])
  {
    float v19 = roundf(v35.n128_f32[0]);
  }
  else if (v17 == *MEMORY[0x1E4FBBE98])
  {
    float v19 = rintf(v35.n128_f32[0]);
  }
  else if (v17 == *MEMORY[0x1E4FBBEA8])
  {
    float v19 = ceilf(v35.n128_f32[0]);
  }
  else if (v17 == *MEMORY[0x1E4FBBEB0])
  {
    float v19 = floorf(v35.n128_f32[0]);
  }
  else if (v17 == *MEMORY[0x1E4FBBE88])
  {
    float v19 = truncf(v35.n128_f32[0]);
  }
  else if (v17 == *MEMORY[0x1E4FBBE90])
  {
    float v19 = ceilf(v35.n128_f32[0]);
    float v20 = floorf(v35.n128_f32[0]);
    if (v35.n128_i32[0] < 0) {
      float v19 = v20;
    }
  }
  else
  {
    sub_1B6E31E88();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
    float v19 = *(float *)&v36;
  }
  sub_1B6D3D414((uint64_t)&v36, v19);
  if ((v36 & 0x100000000) != 0) {
    goto LABEL_49;
  }
  unsigned int v21 = v36;
  float v22 = v35.n128_f32[1];
  LODWORD(v36) = v35.n128_u32[1];
  v15(v10, v34, v3);
  int v23 = v16(v10, v3);
  if (v23 == v18)
  {
    float v24 = roundf(v22);
  }
  else if (v23 == *MEMORY[0x1E4FBBE98])
  {
    float v24 = rintf(v22);
  }
  else if (v23 == *MEMORY[0x1E4FBBEA8])
  {
    float v24 = ceilf(v22);
  }
  else if (v23 == *MEMORY[0x1E4FBBEB0])
  {
    float v24 = floorf(v22);
  }
  else if (v23 == *MEMORY[0x1E4FBBE88])
  {
    float v24 = truncf(v22);
  }
  else if (v23 == *MEMORY[0x1E4FBBE90])
  {
    float v24 = ceilf(v22);
    float v25 = floorf(v22);
    if (v22 < 0.0) {
      float v24 = v25;
    }
  }
  else
  {
    sub_1B6E31E88();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    float v24 = *(float *)&v36;
  }
  sub_1B6D3D414((uint64_t)&v36, v24);
  if ((v36 & 0x100000000) != 0)
  {
LABEL_49:
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    goto LABEL_51;
  }
  unsigned int v26 = v36;
  float v27 = v35.n128_f32[2];
  LODWORD(v36) = v35.n128_u32[2];
  int32x4_t v28 = v33;
  v15(v33, v34, v3);
  int v29 = v16(v28, v3);
  if (v29 == v18)
  {
    float v30 = roundf(v27);
  }
  else if (v29 == *MEMORY[0x1E4FBBE98])
  {
    float v30 = rintf(v27);
  }
  else
  {
    if (v29 == *MEMORY[0x1E4FBBEA8]) {
      goto LABEL_38;
    }
    if (v29 == *MEMORY[0x1E4FBBEB0]) {
      goto LABEL_40;
    }
    if (v29 == *MEMORY[0x1E4FBBE88])
    {
      float v30 = truncf(v27);
      goto LABEL_47;
    }
    if (v29 != *MEMORY[0x1E4FBBE90])
    {
      sub_1B6E31E88();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v33, v3);
      float v30 = *(float *)&v36;
      goto LABEL_47;
    }
    if ((LODWORD(v27) & 0x80000000) != 0) {
LABEL_40:
    }
      float v30 = floorf(v27);
    else {
LABEL_38:
    }
      float v30 = ceilf(v27);
  }
LABEL_47:
  sub_1B6D3D414((uint64_t)&v36, v30);
  if ((v36 & 0x100000000) == 0)
  {
    v31.n128_u64[0] = __PAIR64__(v26, v21);
    v31.n128_u64[1] = v36;
    __n128 v35 = v31;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v34, v3);
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
LABEL_51:
  sub_1B6E328C8();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t *sub_1B6D3BB18(uint64_t *result)
{
  uint64_t v2 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    uint64_t v3 = (uint64_t)result;
    long long v4 = *(_OWORD *)(v1 + 32);
    v28[0] = *(_OWORD *)(v1 + 16);
    v28[1] = v4;
    uint64_t v29 = *(void *)(v1 + 48);
    swift_retain();
    sub_1B62C9DA8(v3, (uint64_t)v28, 0x200000000, v5);
    sub_1B6309B40((uint64_t)v5, (uint64_t)&v6);
    if (v6)
    {
      uint64_t v17 = v6;
      int v18 = v7;
      char v19 = v8;
      uint64_t v20 = v9;
      char v21 = v10;
      uint64_t v22 = v11;
      uint64_t v23 = v12;
      long long v24 = v13;
      long long v25 = v14;
      uint64_t v26 = v15;
      uint64_t v27 = v16;
      swift_retain();
      sub_1B6D9BC84((uint64_t)&v17, v2);
      swift_release_n();
      return sub_1B632F170(v5);
    }
    else
    {
      return (uint64_t *)swift_release();
    }
  }
  return result;
}

uint64_t sub_1B6D3BC2C(unsigned __int16 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = sub_1B6E31808();
  MEMORY[0x1F4188790](v8 - 8, v9);
  long long v36 = xmmword_1B6E9E0F0;
  *(void *)&long long v37 = a1;
  *((void *)&v37 + 1) = a2;
  sub_1B6E317F8();
  sub_1B6D3E9E0(0, (unint64_t *)&qword_1E9DD95B0, (uint64_t (*)(void))sub_1B6BDF89C, MEMORY[0x1E4FBB2B8], MEMORY[0x1E4FBC320]);
  sub_1B6BDF8F0();
  uint64_t v10 = sub_1B6E317C8();
  if (!v11) {
    goto LABEL_12;
  }
  if (v10 == 1180649046 && v11 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0) {
      goto LABEL_12;
    }
  }
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v16;
  id v17 = objc_msgSend(*(id *)(a4 + 16), sel_newBufferWithBytes_length_options_, a1 + 5, 4 * (v14 * v15) * (unint64_t)v16, 0);
  if (v17)
  {
    uint64_t v18 = (uint64_t)v17;
    a3[3] = (uint64_t)v17;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    sub_1B6331A2C(7, 55, v14, v15, v16, 0, 1, 1, (uint64_t)&v36, 1, 0, 1);
    __int16 v19 = WORD4(v36);
    char v20 = BYTE10(v36);
    long long v27 = v37;
    long long v26 = v38;
    long long v25 = v39;
    uint64_t v21 = v40;
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35330]), sel_init);
    uint64_t v28 = v36;
    __int16 v29 = v19;
    char v30 = v20;
    long long v31 = v27;
    long long v32 = v26;
    long long v33 = v25;
    uint64_t v34 = v21;
    int v35 = v41;
    RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v28, v22);
    uint64_t v23 = sub_1B639E4E4(v22, 0x7478655420464453, 0xEB00000000657275);

    if (v23)
    {
      sub_1B6648164(v18, 0, v23, 0);
      swift_unknownObjectRelease();
      a3[4] = (uint64_t)v23;
      return swift_unknownObjectRelease();
    }
  }
LABEL_12:
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B6D3BFD4(void *a1, uint64_t a2, uint64_t a3)
{
  v13[1] = a3;
  sub_1B6D3E9E0(0, (unint64_t *)&unk_1E9DD9610, (uint64_t (*)(void))sub_1B6D3E4E4, (uint64_t)&type metadata for SDFTextureGenerator.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3E4E4();
  sub_1B6E33A88();
  uint64_t v17 = a2;
  char v16 = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v3)
  {
    char v15 = 1;
    sub_1B6E32F78();
    char v14 = 2;
    sub_1B6E32F88();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B6D3C1BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB46E4(*a1, *a2);
}

uint64_t sub_1B6D3C1C8()
{
  uint64_t v1 = 0x6C6F687365726874;
  if (*v0 != 1) {
    uint64_t v1 = 0x706D61736E776F64;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656372756F73;
  }
}

uint64_t sub_1B6D3C22C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D3D5C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D3C254(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3E4E4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3C290(uint64_t a1)
{
  unint64_t v2 = sub_1B6D3E4E4();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6D3C2CC(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v6 = sub_1B6D3E2BC(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(float *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v5;
  }
}

uint64_t sub_1B6D3C304(void *a1)
{
  return sub_1B6D3BFD4(a1, *v1, v1[2]);
}

double sub_1B6D3C328@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 1056964608;
  *(void *)(a1 + 16) = 2;
  return result;
}

uint64_t *sub_1B6D3C344(uint64_t *result)
{
  uint64_t v2 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = (uint64_t)result;
    long long v5 = *(_OWORD *)(v1 + 72);
    v43[0] = *(_OWORD *)(v1 + 56);
    v43[1] = v5;
    uint64_t v44 = *(void *)(v1 + 88);
    swift_retain();
    sub_1B62C9DA8(v4, (uint64_t)v43, 0x200000000, v20);
    sub_1B6309B40((uint64_t)v20, (uint64_t)v30);
    if (v30[0])
    {
      if (v32 >= 1)
      {
        uint64_t v6 = v31;
        if (v31)
        {
          uint64_t v19 = v2;
          uint64_t v7 = v30[5];
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v8 = 48 * v6;
          uint64_t v9 = (uint64_t *)(v7 + 40);
          do
          {
            uint64_t v14 = *v9;
            char v15 = *(os_unfair_lock_s **)(*v9 + 376);
            swift_retain();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            int v16 = *(_DWORD *)(v14 + 24);
            swift_retain();
            uint64_t v35 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            uint64_t v24 = 0;
            long long v22 = 0u;
            long long v23 = 0u;
            int v17 = sub_1B637F628(v16, (uint64_t)&type metadata for TextureGPURepresentationDoNotUpload, (uint64_t)&off_1F0F9C838, 0, 0, (uint64_t)&v33, (uint64_t)&v22);
            swift_release();
            sub_1B62E2F00((uint64_t)&v22, (uint64_t (*)(void))sub_1B63864B4);
            sub_1B62E2F00((uint64_t)&v33, (uint64_t (*)(void))sub_1B63864B4);
            if (sub_1B63B4340(v17))
            {
              sub_1B66603E4(v17);
            }
            else
            {
              uint64_t v10 = *(void *)(v14 + 232);
              uint64_t v11 = *(void *)(v14 + 240);
              char v12 = *(unsigned char *)(v14 + 120);
              uint64_t v13 = *(unsigned int *)(v14 + 28);
              LOBYTE(v33) = *(unsigned char *)(v14 + 32);
              sub_1B628EEF4(v10, v11, v17, v12, v13 | ((unint64_t)v33 << 32));
            }
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
            swift_release();
            v9 += 6;
            v8 -= 48;
          }
          while (v8);
          sub_1B632F170(v20);
          uint64_t v2 = v19;
        }
      }
      sub_1B632F170(v20);
    }
    long long v18 = *(_OWORD *)(v3 + 32);
    v41[0] = *(_OWORD *)(v3 + 16);
    v41[1] = v18;
    uint64_t v42 = *(void *)(v3 + 48);
    sub_1B62C9DA8(v4, (uint64_t)v41, 0x200000000, v21);
    sub_1B6309B40((uint64_t)v21, (uint64_t)&v22);
    if ((void)v22)
    {
      *(void *)&long long v33 = v22;
      DWORD2(v33) = DWORD2(v22);
      BYTE12(v33) = BYTE12(v22);
      *(void *)&long long v34 = v23;
      BYTE8(v34) = BYTE8(v23);
      uint64_t v35 = v24;
      uint64_t v36 = v25;
      long long v37 = v26;
      long long v38 = v27;
      uint64_t v39 = v28;
      uint64_t v40 = v29;
      swift_retain();
      swift_retain();
      sub_1B6D9DB5C((uint64_t)&v33, v4, v2);
      swift_release();
      swift_release_n();
      return sub_1B632F170(v21);
    }
    else
    {
      return (uint64_t *)swift_release();
    }
  }
  return result;
}

uint64_t sub_1B6D3C65C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v109[7] = *MEMORY[0x1E4F143B8];
  int v70 = 0;
  int v69 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = (uint64_t)objc_msgSend(a3, sel_width, RGTextureDescriptor.init()((uint64_t)v90).n128_f64[0]);
  if (v6 <= 1) {
    __int16 v7 = 1;
  }
  else {
    __int16 v7 = v6;
  }
  uint64_t v59 = a3;
  uint64_t v8 = (uint64_t)objc_msgSend(a3, sel_height);
  char v9 = v99;
  if (v8 <= 1) {
    __int16 v10 = 1;
  }
  else {
    __int16 v10 = v8;
  }
  char v68 = v100;
  char v66 = v101;
  char v64 = v102;
  uint64_t v11 = v98;
  uint64_t v63 = v97;
  uint64_t v12 = v96;
  uint64_t v13 = v95;
  char v14 = v94;
  char v15 = v93;
  __int16 v16 = v92;
  __int16 v17 = v91;
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35330]), sel_init);
  LOWORD(v81) = v7;
  uint64_t v19 = v11;
  char v20 = v18;
  uint64_t v62 = v13;
  WORD1(v81) = v10;
  __int16 v60 = v17;
  WORD2(v81) = v17;
  WORD3(v81) = v16;
  BYTE8(v81) = 1;
  char v61 = v14;
  BYTE9(v81) = v15;
  BYTE10(v81) = v14;
  *(void *)&long long v82 = 115;
  *((void *)&v82 + 1) = v13;
  long long v83 = xmmword_1B6E9D130;
  *(void *)&long long v84 = v12;
  *((void *)&v84 + 1) = v63;
  uint64_t v21 = v19;
  uint64_t v85 = v19;
  char v86 = v9;
  char v87 = v68;
  char v88 = v66;
  char v89 = v64;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v81, v18);
  long long v22 = *(void **)(a4 + 16);
  id v23 = objc_msgSend(v22, sel_newTextureWithDescriptor_, v20);
  if (!v23)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    *(void *)&long long v81 = 0;
    *((void *)&v81 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    *(void *)&long long v81 = 0xD000000000000023;
    *((void *)&v81 + 1) = 0x80000001B6F379E0;
    id v50 = objc_msgSend(v20, sel_description);
    sub_1B6E31798();

    sub_1B6E31948();
    swift_bridgeObjectRelease();
    long long v51 = v81;
    int v52 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    *(void *)&long long v81 = 0;
    swift_retain();
    sub_1B6B33E34(v52, (uint64_t *)&v81, v51, *((uint64_t *)&v51 + 1));

    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v24 = v23;
  sub_1B6331FD0((uint64_t)v23);
  objc_msgSend(v24, sel_setLabel_, 0);

  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35330]), sel_init);
  LOWORD(v81) = v7;
  WORD1(v81) = v10;
  WORD2(v81) = v60;
  WORD3(v81) = v16;
  BYTE8(v81) = 1;
  BYTE9(v81) = v15;
  BYTE10(v81) = v61;
  *(void *)&long long v82 = 115;
  *((void *)&v82 + 1) = v62;
  long long v83 = xmmword_1B6E9D130;
  *(void *)&long long v84 = v12;
  *((void *)&v84 + 1) = v63;
  uint64_t v85 = v21;
  char v86 = v9;
  char v87 = v68;
  char v88 = v66;
  char v89 = v64;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v81, v25);
  long long v26 = v25;
  id v27 = objc_msgSend(v22, sel_newTextureWithDescriptor_, v25);
  if (!v27)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    *(void *)&long long v81 = 0;
    *((void *)&v81 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    *(void *)&long long v81 = 0xD000000000000023;
    *((void *)&v81 + 1) = 0x80000001B6F379E0;
    id v54 = objc_msgSend(v25, sel_description);
    sub_1B6E31798();

    sub_1B6E31948();
    swift_bridgeObjectRelease();
    long long v55 = v81;
    int v56 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    *(void *)&long long v81 = 0;
    swift_retain();
    sub_1B6B33E34(v56, (uint64_t *)&v81, v55, *((uint64_t *)&v55 + 1));
    swift_unknownObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v28 = v27;
  sub_1B6331FD0((uint64_t)v27);
  objc_msgSend(v28, sel_setLabel_, 0);

  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v83 = v78;
  long long v84 = v79;
  uint64_t v85 = v80;
  long long v81 = v76;
  long long v82 = v77;
  uint64_t v29 = sub_1B6E33978();
  v109[0] = 0xD000000000000017;
  v109[1] = 0x80000001B6F53C90;
  v109[2] = 0;
  v109[3] = 0;
  v109[4] = MEMORY[0x1E4FBC860];
  v109[5] = 0;
  v109[6] = v29;
  id v30 = sub_1B679C370((uint64_t)v109, 0, 0);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!v30) {
    goto LABEL_30;
  }
  swift_getObjectType();
  objc_msgSend(a1, sel_setTexture_atIndex_, v59, 0);
  objc_msgSend(a1, sel_setTexture_atIndex_, v24, 1);
  objc_msgSend(a1, sel_setBytes_length_atIndex_, &v69, 8, 0);
  sub_1B6B595FC(v30, (uint64_t)v24, 0);
  swift_unknownObjectRelease();
  float v33 = (float)(uint64_t)objc_msgSend(v59, sel_width);
  uint64_t v34 = MEMORY[0x1E4FBC860];
  float v35 = log2f(fmaxf(v33, (float)(uint64_t)objc_msgSend(v59, sel_height)));
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v79 = v74;
  uint64_t v80 = v75;
  long long v77 = v72;
  long long v78 = v73;
  long long v76 = v71;
  uint64_t v36 = sub_1B6E33978();
  v108[0] = 0xD000000000000015;
  v108[1] = 0x80000001B6F53CB0;
  v108[2] = 0;
  v108[3] = 0;
  v108[4] = v34;
  v108[5] = 0;
  v108[6] = v36;
  id v37 = sub_1B679C370((uint64_t)v108, 0, 0);
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!v37) {
    goto LABEL_30;
  }
  unint64_t v67 = vcvtms_s32_f32(v35);
  if (v67)
  {
    uint64_t v40 = 0;
    uint64_t v41 = v67 - 1;
    do
    {
      uint64_t v42 = v40 + 1;
      if (v40) {
        uint64_t v43 = v28;
      }
      else {
        uint64_t v43 = v24;
      }
      if (v40) {
        uint64_t v44 = v24;
      }
      else {
        uint64_t v44 = v28;
      }
      objc_msgSend(a1, sel_setTexture_atIndex_, v43, 0);
      objc_msgSend(a1, sel_setTexture_atIndex_, v44, 1);
      int v70 = (int)exp2f((float)v41);
      objc_msgSend(a1, sel_setBytes_length_atIndex_, &v69, 8, 0);
      sub_1B6B595FC(v37, (uint64_t)v24, 0);
      --v41;
      uint64_t v40 = v42;
    }
    while (v41 != -1);
  }
  swift_unknownObjectRelease();
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v73 = v105;
  long long v74 = v106;
  uint64_t v75 = v107;
  long long v71 = v103;
  long long v72 = v104;
  uint64_t v45 = sub_1B6E33978();
  *(void *)&long long v103 = 0xD000000000000015;
  *((void *)&v103 + 1) = 0x80000001B6F53CD0;
  long long v104 = 0uLL;
  long long v105 = MEMORY[0x1E4FBC860];
  *(void *)&long long v106 = v45;
  id v46 = sub_1B679C370((uint64_t)&v103, 0, 0);
  int8x16_t v48 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v46)
  {
    if (v67) {
      uint64_t v49 = v28;
    }
    else {
      uint64_t v49 = v24;
    }
    objc_msgSend(a1, sel_setTexture_atIndex_, v49, 0);
    objc_msgSend(a1, sel_setTexture_atIndex_, a5, 1);
    sub_1B6B595FC(v46, a5, 0);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
LABEL_30:
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1B6D3D010(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E30F48();
  long long v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1B6D3D07C(uint64_t a1)
{
  uint64_t v2 = sub_1B6E30F48();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1B6D3D0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E30F48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B6D3D144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E30F48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B6D3D1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E30F48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B6D3D20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E30F48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B6D3D270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B6D3D284);
}

uint64_t sub_1B6D3D284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E30F48();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1B6D3D2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B6D3D304);
}

uint64_t sub_1B6D3D304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E30F48();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1B6D3D374()
{
  uint64_t result = sub_1B6E30F48();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SDFTextureGenerator()
{
  return &type metadata for SDFTextureGenerator;
}

BOOL sub_1B6D3D414(uint64_t a1, float a2)
{
  int v4 = (LODWORD(a2) >> 23);
  unsigned int v5 = LODWORD(a2) & 0x7FFFFF;
  int v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    char v15 = 0;
    BOOL result = 1;
    goto LABEL_21;
  }
  if (v4 == 255) {
    goto LABEL_23;
  }
  uint64_t v7 = sub_1B6E31EB8();
  if (v7 > 31) {
    goto LABEL_23;
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_1B6E31E98();
  BOOL result = v8 >= v9;
  uint64_t v11 = v9 + __clz(__rbit32(v5));
  uint64_t v12 = v8 - v11;
  if (v11 > 31)
  {
    if (v12 < -32 || v12 > 32) {
      goto LABEL_10;
    }
  }
  else if (v12 < -32 || v12 > 32)
  {
    goto LABEL_10;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v12 < 0x20)
    {
      unsigned int v14 = v5 << v12;
      if (v8 != 31) {
        goto LABEL_16;
      }
LABEL_27:
      if (a2 < 0.0 && !v14) {
        goto LABEL_29;
      }
      goto LABEL_23;
    }
LABEL_10:
    if (v8 != 31)
    {
      int v13 = 0;
      unsigned int v14 = 0;
      if (v8 < 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    if (a2 < 0.0)
    {
LABEL_29:
      char v15 = 0;
      int v6 = 0x80000000;
      goto LABEL_21;
    }
LABEL_23:
    int v6 = 0;
    BOOL result = 0;
    char v15 = 1;
    goto LABEL_21;
  }
  if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFE0) {
    goto LABEL_10;
  }
  unsigned int v14 = v5 >> (v11 - v8);
  if (v8 == 31) {
    goto LABEL_27;
  }
LABEL_16:
  if (v8 < 0)
  {
    int v13 = 0;
    goto LABEL_19;
  }
LABEL_18:
  int v13 = 1 << v8;
LABEL_19:
  char v15 = 0;
  int v6 = v14 | v13;
  if (a2 < 0.0) {
    int v6 = -v6;
  }
LABEL_21:
  *(_DWORD *)a1 = v6;
  *(unsigned char *)(a1 + 4) = v15;
  return result;
}

uint64_t sub_1B6D3D578()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D3D5C4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x706D61736E776F64 && a2 == 0xEC000000676E696CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B6D3D738(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a4;
  v13[1] = a3;
  sub_1B6D3E9E0(0, &qword_1E9DD9660, (uint64_t (*)(void))sub_1B6D3E98C, (uint64_t)&type metadata for SDFRuntimeData.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3E98C();
  sub_1B6E33A88();
  char v16 = 0;
  sub_1B6E32F88();
  if (!v4)
  {
    char v15 = 1;
    sub_1B6E32F88();
    char v14 = 2;
    sub_1B6E32F88();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B6D3D8FC(uint64_t a1, uint64_t a2, unsigned int *a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v71 = a6;
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  swift_retain();
  uint64_t v14 = sub_1B62DE2C8(a2);
  swift_release();
  if (v12 == v14 && v13 == HIDWORD(v14))
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    unint64_t v62 = 0x80000001B6F53C40;
    swift_retain();
    uint64_t v33 = sub_1B62DE2C8(a2);
    swift_release();
    sub_1B6C0A280(v33);
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    int v34 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v61 = 0;
    swift_retain();
    sub_1B6B33E34(v34, &v61, 0xD000000000000010, 0x80000001B6F53C40);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    uint64_t result = sub_1B6C061A0(v12 | (v13 << 32), a5, a1, a2);
    if (v12 != -1 || v13 != 0)
    {
      swift_retain();
      id v18 = (void *)sub_1B695D6BC(v12 | (v13 << 32));
      uint64_t result = swift_release();
      if (v18)
      {
        if (v18 == (void *)1) {
          return result;
        }
        if ((objc_msgSend((id)swift_unknownObjectRetain(), sel_usage) & 1) != 0
          && objc_msgSend(v18, sel_textureType) == (id)2)
        {
          if (*((uint64_t *)a3 + 2) <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = *((void *)a3 + 2);
          }
          uint64_t v20 = (uint64_t)objc_msgSend(v18, sel_width);
          if (v20 / v19 <= 1) {
            uint64_t v21 = 1;
          }
          else {
            uint64_t v21 = v20 / v19;
          }
          uint64_t v22 = (uint64_t)objc_msgSend(v18, sel_height);
          if (v22 / v19 <= 1) {
            uint64_t v23 = 1;
          }
          else {
            uint64_t v23 = v22 / v19;
          }
          sub_1B6331A2C(2, 25, v21, v23, 1, 0, 1, 1, (uint64_t)&v61, 1, 2, 3);
          uint64_t v24 = v61;
          char v25 = v62;
          char v49 = BYTE2(v62);
          char v50 = BYTE1(v62);
          uint64_t v47 = v64;
          uint64_t v48 = v63;
          uint64_t v45 = v66;
          uint64_t v46 = v65;
          uint64_t v43 = v68;
          uint64_t v44 = v67;
          uint64_t v42 = v69;
          v6.i32[0] = v70;
          long long v26 = *a4;
          uint64_t v27 = v71;
          if (*a4)
          {
            uint64_t v28 = (void *)swift_unknownObjectRetain();
            uint64_t v29 = v26;
            if (sub_1B6CF1008(v28))
            {
LABEL_41:
              uint64_t v39 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
              uint64_t v40 = (void *)sub_1B6E31768();
              objc_msgSend(v39, sel_pushDebugGroup_, v40);

              sub_1B6D3C65C(v39, (uint64_t)a3, v18, v27, (uint64_t)v29);
              objc_msgSend(v39, sel_popDebugGroup);
              swift_unknownObjectRelease();
              sub_1B696D160((uint64_t)v18);
              sub_1B696D160((uint64_t)v18);
              uint64_t result = swift_unknownObjectRelease();
              *a4 = v29;
              return result;
            }
            swift_unknownObjectRelease();
          }
          int16x8_t v41 = (int16x8_t)vmovl_u8(v6);
          uint64_t v51 = 1531331667;
          unint64_t v52 = 0xE400000000000000;
          id v30 = objc_msgSend(v18, sel_label);
          if (v30)
          {
            uint64_t v31 = v30;
            char v32 = v25;
            sub_1B6E31798();
          }
          else
          {
            char v32 = v25;
          }
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          sub_1B6E31948();
          uint64_t v36 = v51;
          uint64_t v37 = v52;
          id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35330]), sel_init);
          uint64_t v51 = v24;
          LOBYTE(v52) = v32;
          BYTE1(v52) = v50;
          BYTE2(v52) = v49;
          uint64_t v53 = v48;
          uint64_t v54 = v47;
          uint64_t v55 = v46;
          uint64_t v56 = v45;
          uint64_t v57 = v44;
          uint64_t v58 = v43;
          uint64_t v59 = v42;
          unsigned __int32 v60 = vmovn_s16(v41).u32[0];
          RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v51, v38);
          uint64_t v29 = sub_1B639E4E4(v38, v36, v37);
          swift_bridgeObjectRelease();

          goto LABEL_41;
        }
        sub_1B696D160((uint64_t)v18);
      }
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      swift_retain();
      int v35 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      uint64_t v61 = 0;
      swift_retain();
      sub_1B6B33E34(v35, &v61, 0xD00000000000003BLL, 0x80000001B6F53C00);
      swift_release();
      sub_1B696D160((uint64_t)v18);
      return swift_release();
    }
  }
  return result;
}

id sub_1B6D3DF2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_unknownObjectRetain();
  id v5 = objc_msgSend(a4, sel_contents);
  id v6 = a4;
  return v5;
}

unint64_t sub_1B6D3DFF0()
{
  unint64_t result = qword_1E9DD95D8;
  if (!qword_1E9DD95D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD95D8);
  }
  return result;
}

uint64_t sub_1B6D3E044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDFFileAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6D3E0A8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __int16 v17 = a2;
  sub_1B6D3E9E0(0, &qword_1E9DD9650, (uint64_t (*)(void))sub_1B6D3E98C, (uint64_t)&type metadata for SDFRuntimeData.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v16 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3E98C();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v6;
  uint64_t v11 = v17;
  char v20 = 0;
  uint64_t v12 = sub_1B6E32DD8();
  char v19 = 1;
  uint64_t v13 = sub_1B6E32DD8();
  char v18 = 2;
  uint64_t v14 = sub_1B6E32DD8();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *uint64_t v11 = v12;
  v11[1] = v13;
  v11[3] = 0;
  v11[4] = 0;
  _OWORD v11[2] = v14;
  return result;
}

float sub_1B6D3E2BC(void *a1)
{
  sub_1B6D3E9E0(0, &qword_1E9DD95F8, (uint64_t (*)(void))sub_1B6D3E4E4, (uint64_t)&type metadata for SDFTextureGenerator.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = &v12[-v8];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D3E4E4();
  sub_1B6E33A48();
  if (!v1)
  {
    v12[7] = 0;
    sub_1B62B1EA8();
    sub_1B6E32DF8();
    v12[6] = 1;
    sub_1B6E32DC8();
    float v2 = v10;
    v12[5] = 2;
    sub_1B6E32DD8();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B6D3E4E4()
{
  unint64_t result = qword_1E9DD9600;
  if (!qword_1E9DD9600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9600);
  }
  return result;
}

ValueMetadata *type metadata accessor for SDFTextureGenerator.CodingKeys()
{
  return &type metadata for SDFTextureGenerator.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SDFFileAsset.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6D3E5E8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SDFFileAsset.CodingKeys()
{
  return &type metadata for SDFFileAsset.CodingKeys;
}

uint64_t destroy for SDFRuntimeData()
{
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for SDFRuntimeData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for SDFRuntimeData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for SDFRuntimeData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SDFRuntimeData()
{
  return &type metadata for SDFRuntimeData;
}

unint64_t sub_1B6D3E780()
{
  unint64_t result = qword_1E9DD9620;
  if (!qword_1E9DD9620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9620);
  }
  return result;
}

unint64_t sub_1B6D3E7D8()
{
  unint64_t result = qword_1E9DD9628;
  if (!qword_1E9DD9628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9628);
  }
  return result;
}

unint64_t sub_1B6D3E830()
{
  unint64_t result = qword_1E9DD9630;
  if (!qword_1E9DD9630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9630);
  }
  return result;
}

unint64_t sub_1B6D3E888()
{
  unint64_t result = qword_1E9DD9638;
  if (!qword_1E9DD9638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9638);
  }
  return result;
}

unint64_t sub_1B6D3E8E0()
{
  unint64_t result = qword_1E9DD9640;
  if (!qword_1E9DD9640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9640);
  }
  return result;
}

unint64_t sub_1B6D3E938()
{
  unint64_t result = qword_1E9DD9648;
  if (!qword_1E9DD9648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9648);
  }
  return result;
}

unint64_t sub_1B6D3E98C()
{
  unint64_t result = qword_1E9DD9658;
  if (!qword_1E9DD9658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9658);
  }
  return result;
}

void sub_1B6D3E9E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *_s3VFX19SDFTextureGeneratorV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D3EB14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SDFRuntimeData.CodingKeys()
{
  return &type metadata for SDFRuntimeData.CodingKeys;
}

unint64_t sub_1B6D3EB50()
{
  unint64_t result = qword_1E9DD9668;
  if (!qword_1E9DD9668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9668);
  }
  return result;
}

unint64_t sub_1B6D3EBA8()
{
  unint64_t result = qword_1E9DD9670;
  if (!qword_1E9DD9670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9670);
  }
  return result;
}

unint64_t sub_1B6D3EC00()
{
  unint64_t result = qword_1E9DD9678;
  if (!qword_1E9DD9678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9678);
  }
  return result;
}

char *sub_1B6D3EC54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = (char *)MEMORY[0x1E4FBC860];
  unsigned int v4 = sub_1B6397840(0, v2, 0, MEMORY[0x1E4FBC860]);
  uint64_t v5 = sub_1B6397840(0, v2, 0, v3);
  if (v2)
  {
    swift_bridgeObjectRetain();
    unsigned int v6 = (int *)(a1 + 36);
    do
    {
      int v8 = *(v6 - 1);
      int v7 = *v6;
      unint64_t v10 = *((void *)v4 + 2);
      unint64_t v9 = *((void *)v4 + 3);
      if (v10 >= v9 >> 1) {
        unsigned int v4 = sub_1B6397840(v9 > 1, v10 + 1, 1, v4);
      }
      *((void *)v4 + 2) = v10 + 1;
      *(_DWORD *)&v4[4 * v10 + 32] = v8;
      unint64_t v12 = *((void *)v5 + 2);
      unint64_t v11 = *((void *)v5 + 3);
      if (v12 >= v11 >> 1) {
        uint64_t v5 = sub_1B6397840(v11 > 1, v12 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v12 + 1;
      *(_DWORD *)&v5[4 * v12 + 32] = v7;
      v6 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v4;
}

void sub_1B6D3ED7C()
{
  qword_1E9E49888 = (uint64_t)&unk_1F0F72860;
}

uint64_t sub_1B6D3ED90@<X0>(void *a1@<X8>)
{
  if (qword_1E9DCC750 != -1) {
    swift_once();
  }
  *a1 = qword_1E9E49888;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B6D3EDFC(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6395CFC(0, (unint64_t *)&unk_1E9DD9690, (uint64_t (*)(void))sub_1B6D410C4, (uint64_t)&type metadata for ParticleColorInit.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v14 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D410C4();
  sub_1B6E33A88();
  *(void *)&long long v14 = *(void *)v3;
  char v19 = 0;
  sub_1B67FEC7C();
  sub_1B6E32FA8();
  if (!v2)
  {
    sub_1B675821C(v3 + 8, (uint64_t)v18);
    sub_1B675821C((uint64_t)v18, (uint64_t)&v14);
    char v19 = 1;
    sub_1B66C66BC();
    sub_1B6E32FA8();
    LOBYTE(v14) = 2;
    sub_1B6E32F78();
    LOBYTE(v14) = 3;
    sub_1B6E32F58();
    long long v14 = *(_OWORD *)(v3 + 32);
    char v19 = 4;
    sub_1B6395CFC(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    sub_1B6D41118((unint64_t *)&qword_1EB97D1F8);
    sub_1B6E32FA8();
    uint64_t v11 = *(void *)(v3 + 56);
    char v12 = *(unsigned char *)(v3 + 64);
    uint64_t v16 = *(void *)(v3 + 48);
    uint64_t v17 = v11;
    *(void *)&long long v14 = v16;
    *((void *)&v14 + 1) = v11;
    char v15 = v12;
    char v19 = 5;
    sub_1B6C05708(v3);
    sub_1B697B9F4();
    sub_1B6E32FA8();
    sub_1B62D8C3C((uint64_t)&v16);
    sub_1B62D8C3C((uint64_t)&v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6D3F124(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB2950(*a1, *a2);
}

uint64_t sub_1B6D3F130()
{
  uint64_t result = 0x7469736F706D6F63;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701080941;
      break;
    case 2:
      uint64_t result = 0x7469736E65746E69;
      break;
    case 3:
      uint64_t result = 0x4173746365666661;
      break;
    case 4:
      uint64_t result = 0x65756C6176;
      break;
    case 5:
      uint64_t result = 1886216562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D3F1F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D3FFDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D3F220(uint64_t a1)
{
  unint64_t v2 = sub_1B6D410C4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D3F25C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D410C4();

  return MEMORY[0x1F41862B0](a1, v2);
}

__n128 sub_1B6D3F298@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6D40C40(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(unsigned char *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B6D3F2E4(void *a1)
{
  return sub_1B6D3EDFC(a1);
}

__n128 sub_1B6D3F328@<Q0>(uint64_t a1@<X8>)
{
  sub_1B6D3F580((uint64_t)v4);
  long long v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(unsigned char *)(a1 + 64) = v5;
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for ParticleColorInit.GPUSystem()
{
  return self;
}

const char *sub_1B6D3F398()
{
  return "SetParticleColor.GPU";
}

uint64_t sub_1B6D3F3AC()
{
  return type metadata accessor for ParticleColorInit.GPUSystem();
}

uint64_t sub_1B6D3F3CC(void *a1, uint64_t a2)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v4, v5);
  if ((a2 & 0x100000000) != 0) {
    sub_1B6E33578();
  }
  else {
    sub_1B6E33598();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B6D3F518@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6D40728(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t sub_1B6D3F54C(void *a1)
{
  return sub_1B6D3F3CC(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

__n128 sub_1B6D3F580@<Q0>(uint64_t a1@<X8>)
{
  sub_1B62D2AB8(0, (unint64_t *)&unk_1EB980D90, (uint64_t (*)(uint64_t))sub_1B6395D64, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  __n128 v13 = _Q1;
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  *(__n128 *)(v2 + 32) = _Q1;
  *(_DWORD *)(v2 + 48) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 80) = 1065353216;
  uint64_t v8 = sub_1B6397618(v2);
  swift_setDeallocating();
  swift_deallocClassInstance();
  uint64_t v9 = sub_1B639EA20(v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 1065353216;
  *(unsigned char *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = 1065353216;
  *(unsigned char *)(a1 + 20) = 1;
  __n128 result = v13;
  *(__n128 *)(a1 + 32) = v13;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

void *sub_1B6D3F684(void *result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    uint64_t v6 = result;
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 56);
    char v10 = *(unsigned char *)(a2 + 64);
    swift_retain();
    sub_1B6A7C7BC(v8, v9, v10, (uint64_t)v30);
    sub_1B62D8168((uint64_t)v30, (uint64_t)v35, (unint64_t *)&unk_1EB97EFD0, (uint64_t)&type metadata for TextureCPURuntime);
    if (v36)
    {
      v37[4] = v35[4];
      v37[5] = v35[5];
      v37[6] = v35[6];
      uint64_t v38 = v36;
      v37[0] = v35[0];
      v37[1] = v35[1];
      void v37[2] = v35[2];
      v37[3] = v35[3];
      sub_1B6AFF0F4((uint64_t)v37, 1, 1, (uint64_t)v31);
      sub_1B6D3FF5C((uint64_t)v31, (uint64_t)&v32, &qword_1EB9811E0, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler1d);
      if (*((void *)&v33 + 1) != 1)
      {
        long long v27 = v32;
        long long v28 = v33;
        uint64_t v29 = v34;
        uint64_t v11 = v6[6];
        uint64_t v12 = v6[7];
        uint64_t v13 = v12 - v11;
        if (v12 != v11)
        {
          float v26 = *(float *)(a2 + 16);
          char v14 = *(unsigned char *)(a2 + 20);
          char v15 = (float32x4_t *)(a3 + 16 * v11);
          do
          {
            *(double *)v18.i64 = (*((double (**)(long long *, float))&v28 + 1))(&v27, a4);
            *(float32x2_t *)v19.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, v26);
            float v20 = vmuls_lane_f32(v26, v18, 2);
            float32x4_t v21 = v19;
            v21.f32[2] = v20;
            float v22 = *(float *)(a2 + 4);
            if (v14)
            {
              v21.i32[3] = v18.i32[3];
              switch(*(unsigned char *)a2)
              {
                case 1:
                  float32x4_t v17 = vaddq_f32(vmulq_n_f32(v21, v22), *v15);
                  break;
                case 2:
                  float32x4_t v17 = vmulq_f32(vmulq_n_f32(v21, v22), *v15);
                  break;
                case 3:
                  v19.i64[1] = __PAIR64__(v18.u32[3], LODWORD(v20));
                  float32x4_t v17 = vaddq_f32(*v15, vmulq_n_f32(vsubq_f32(v19, *v15), v22));
                  break;
                default:
                  float32x4_t v17 = vmulq_n_f32(v21, v22);
                  break;
              }
            }
            else
            {
              float32x4_t v23 = *v15;
              float32x4_t v24 = *v15;
              v24.i32[3] = v25;
              switch(*(unsigned char *)a2)
              {
                case 1:
                  float32x4_t v17 = vaddq_f32(v24, vmulq_n_f32(v21, v22));
                  goto LABEL_10;
                case 2:
                  float32x4_t v17 = vmulq_f32(v24, vmulq_n_f32(v21, v22));
                  v17.i32[3] = HIDWORD(*(unsigned long long *)v15);
                  break;
                case 3:
                  float v16 = v22 * (float)(v20 - v23.f32[2]);
                  *(float32x2_t *)v17.f32 = vadd_f32(*(float32x2_t *)v23.f32, vmul_n_f32(vsub_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v23.f32), v22));
                  v17.f32[2] = v23.f32[2] + v16;
                  goto LABEL_10;
                default:
                  float32x4_t v17 = vmulq_n_f32(v21, v22);
LABEL_10:
                  v17.i32[3] = HIDWORD(*(unsigned long long *)v15);
                  break;
              }
            }
            *v15++ = v17;
            --v13;
          }
          while (v13);
        }
      }
      sub_1B66576EC(v30);
    }
    return (void *)swift_release();
  }
  return result;
}

void *sub_1B6D3F994(uint64_t a1, void *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
  sub_1B675821C((uint64_t)&v2->i64[1], (uint64_t)v59);
  __n128 result = (void *)sub_1B675821C((uint64_t)v59, (uint64_t)&v60);
  if (v61 != 1)
  {
    float v16 = *(double *)(*(void *)a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48) / v60;
    float v17 = fmodf(v16, 1.0);
    return sub_1B6D3F684((void *)a1, (uint64_t)v2, v5, v17);
  }
  if (v60 == 0.0)
  {
    float32x4_t v18 = v2[2];
    float32x4_t v19 = vmulq_laneq_f32(v18, v18, 3);
    float v20 = v2[1].f32[0];
    *(float32x2_t *)v7.f32 = vmul_n_f32(*(float32x2_t *)v19.f32, v20);
    float v21 = vmuls_lane_f32(v20, v19, 2);
    float32x4_t v22 = v7;
    v22.f32[2] = v21;
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 56);
    if (v2[1].i8[4])
    {
      uint64_t v33 = v23 - v24;
      if (v23 != v24)
      {
        v22.i32[3] = HIDWORD(*(_OWORD *)&v2[2]);
        uint64_t v34 = v2->u8[0];
        float v35 = v2->f32[1];
        float32x4_t v36 = vmulq_n_f32(v22, v35);
        v7.i64[1] = __PAIR64__(v18.u32[3], LODWORD(v21));
        uint64_t v37 = (float32x4_t *)(v5 + 16 * v24);
        do
        {
          float32x4_t v38 = v36;
          switch(v34)
          {
            case 1:
              float32x4_t v38 = vaddq_f32(v36, *v37);
              break;
            case 2:
              float32x4_t v38 = vmulq_f32(v36, *v37);
              break;
            case 3:
              float32x4_t v38 = vaddq_f32(*v37, vmulq_n_f32(vsubq_f32(v7, *v37), v35));
              break;
            default:
              break;
          }
          *v37++ = v38;
          --v33;
        }
        while (v33);
      }
    }
    else
    {
      uint64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        uint64_t v26 = v2->u8[0];
        v8.i32[0] = v2->i32[1];
        float32x2_t v27 = (float32x2_t)vdupq_lane_s32(v8, 0).u64[0];
        float32x4_t v28 = vmulq_n_f32(v22, *(float *)v8.i32);
        uint64_t v29 = (float32x4_t *)(v5 + 16 * v24);
        do
        {
          __int32 v31 = v9.i32[3];
          float32x4_t v32 = *v29;
          float32x4_t v9 = *v29;
          v9.i32[3] = v31;
          switch(v26)
          {
            case 1:
              float32x4_t v30 = vaddq_f32(v28, v9);
              break;
            case 2:
              float32x4_t v30 = vmulq_f32(v28, v9);
              break;
            case 3:
              *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)v32.f32, vmul_f32(v27, vsub_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v32.f32)));
              v30.f32[2] = v32.f32[2] + (float)(*(float *)v8.i32 * (float)(v21 - v32.f32[2]));
              break;
            default:
              float32x4_t v30 = v28;
              break;
          }
          v30.i32[3] = HIDWORD(*(unsigned long long *)v29);
          *v29++ = v30;
          --v25;
        }
        while (v25);
      }
    }
    return result;
  }
  if (LODWORD(v60) != 1)
  {
    float v17 = (float)(sub_1B6D27950() & 0xFFFFFF) * 0.000000059605;
    return sub_1B6D3F684((void *)a1, (uint64_t)v2, v5, v17);
  }
  if (*(void *)(*(void *)a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    uint64_t v10 = v2[3].i64[0];
    uint64_t v11 = v2[3].i64[1];
    char v12 = v2[4].i8[0];
    swift_retain();
    sub_1B6A7C7BC(v10, v11, v12, (uint64_t)v65);
    sub_1B62D8168((uint64_t)v65, (uint64_t)v70, (unint64_t *)&unk_1EB97EFD0, (uint64_t)&type metadata for TextureCPURuntime);
    if (!v71) {
      return (void *)swift_release();
    }
    v72[4] = v70[4];
    v72[5] = v70[5];
    v72[6] = v70[6];
    uint64_t v73 = v71;
    v72[0] = v70[0];
    v72[1] = v70[1];
    void v72[2] = v70[2];
    v72[3] = v70[3];
    sub_1B6AFF0F4((uint64_t)v72, 1, 1, (uint64_t)v66);
    sub_1B6D3FF5C((uint64_t)v66, (uint64_t)&v67, &qword_1EB9811E0, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler1d);
    if (*((void *)&v68 + 1) == 1
      || (long long v62 = v67,
          long long v63 = v68,
          uint64_t v64 = v69,
          uint64_t v13 = *(void *)(a1 + 48),
          uint64_t v14 = *(void *)(a1 + 56),
          uint64_t v15 = v14 - v13,
          v14 == v13))
    {
      sub_1B66576EC(v65);
      return (void *)swift_release();
    }
    uint64_t v39 = a2[3];
    uint64_t v40 = a2[4];
    uint64_t v42 = a2[1];
    uint64_t v41 = a2[2];
    float v58 = v2[1].f32[0];
    uint64_t v43 = (float32x4_t *)(v5 + 16 * v13);
    unsigned __int8 v44 = v2[1].u8[4];
    do
    {
      *(double *)v50.i64 = (*((double (**)(long long *, float))&v63 + 1))(&v62, (float)((9 * ((((unint64_t)(5 * v41) >> 32) >> 25) | (640 * v41))) & 0xFFFFFF)* 0.000000059605);
      *(float32x2_t *)v51.f32 = vmul_n_f32(*(float32x2_t *)v50.f32, v58);
      float v52 = vmuls_lane_f32(v58, v50, 2);
      float32x4_t v53 = v51;
      v53.f32[2] = v52;
      float v54 = v2->f32[1];
      if (v44)
      {
        v53.i32[3] = v50.i32[3];
        switch(v2->i8[0])
        {
          case 1:
            float32x4_t v46 = vaddq_f32(vmulq_n_f32(v53, v54), *v43);
            break;
          case 2:
            float32x4_t v46 = vmulq_f32(vmulq_n_f32(v53, v54), *v43);
            break;
          case 3:
            v51.i64[1] = __PAIR64__(v50.u32[3], LODWORD(v52));
            float32x4_t v46 = vaddq_f32(*v43, vmulq_n_f32(vsubq_f32(v51, *v43), v54));
            break;
          default:
            float32x4_t v46 = vmulq_n_f32(v53, v54);
            break;
        }
      }
      else
      {
        float32x4_t v55 = *v43;
        float32x4_t v56 = *v43;
        v56.i32[3] = v57;
        switch(v2->i8[0])
        {
          case 1:
            float32x4_t v46 = vaddq_f32(v56, vmulq_n_f32(v53, v54));
            goto LABEL_32;
          case 2:
            float32x4_t v46 = vmulq_f32(v56, vmulq_n_f32(v53, v54));
            v46.i32[3] = HIDWORD(*(unsigned long long *)v43);
            break;
          case 3:
            float v45 = v54 * (float)(v52 - v55.f32[2]);
            *(float32x2_t *)v46.f32 = vadd_f32(*(float32x2_t *)v55.f32, vmul_n_f32(vsub_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v55.f32), v54));
            v46.f32[2] = v55.f32[2] + v45;
            goto LABEL_32;
          default:
            float32x4_t v46 = vmulq_n_f32(v53, v54);
LABEL_32:
            v46.i32[3] = HIDWORD(*(unsigned long long *)v43);
            break;
        }
      }
      uint64_t v47 = v41 << 17;
      *v43++ = v46;
      uint64_t v48 = v42 ^ v39;
      uint64_t v49 = v41 ^ v40;
      v41 ^= v42 ^ v39;
      v42 ^= v49;
      uint64_t v39 = v48 ^ v47;
      uint64_t v40 = __ROR8__(v49, 19);
      --v15;
    }
    while (v15);
    sub_1B66576EC(v65);
    __n128 result = (void *)swift_release();
    a2[1] = v42;
    a2[2] = v41;
    a2[3] = v39;
    a2[4] = v40;
  }
  return result;
}

uint64_t sub_1B6D3FF5C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1B62D2AB8(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B6D3FFDC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4173746365666661 && a2 == 0xEC0000006168706CLL || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1886216562 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1B6D40274(uint64_t a1)
{
  v62[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(a1 + 52);
  swift_retain();
  swift_retain();
  sub_1B62F5BE0(v3, (uint64_t)&v34);
  swift_release();
  uint64_t v6 = v38;
  if (v38)
  {
    char v7 = v40;
    uint64_t v8 = v39;
    unsigned int v10 = DWORD2(v34);
    unsigned int v9 = v35;
    char v11 = v34;
    int v12 = DWORD1(v34);
    uint64_t v13 = HIDWORD(*((void *)&v34 + 1)) & 1;
    uint64_t v14 = HIDWORD(v35) & 1;
    long long v15 = v37;
  }
  else
  {
    sub_1B6D3F580((uint64_t)v41);
    char v11 = v41[0];
    int v12 = v42;
    unsigned int v10 = v43;
    LODWORD(v13) = v44;
    unsigned int v9 = v45;
    LOBYTE(v14) = v46;
    long long v15 = v47;
    uint64_t v6 = v48;
    uint64_t v8 = v49;
    char v7 = v50;
  }
  v52[0] = v11;
  int v53 = v12;
  unsigned int v54 = v10;
  char v55 = v13;
  unsigned int v56 = v9;
  char v57 = v14;
  long long v58 = v15;
  uint64_t v59 = v6;
  uint64_t v60 = v8;
  char v61 = v7;
  long long v34 = v15;
  LODWORD(v35) = v12;
  BYTE4(v35) = v11;
  uint64_t v36 = v9 | 0x3F80000000000000;
  LOBYTE(v37) = v14;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = v4 | (v5 << 32);
  sub_1B6C007E0(v28, v2, (uint64_t)v52, (uint64_t)&v34, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (v13 && !v10)
  {
LABEL_10:
    long long v29 = v34;
    int v30 = v35;
    char v31 = BYTE4(v35);
    uint64_t v32 = v36;
    char v33 = v37;
    uint64_t v17 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t ObjectType = swift_getObjectType();
      type metadata accessor for particle_set_color_uniforms(0);
      sub_1B6B594A8((uint64_t)&v29, 1, ObjectType, v19, v20, v21, v22, v23);
    }
    sub_1B62D8A48(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1B6E77050;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = v10;
    if (!v13) {
      uint64_t v25 = 3;
    }
    *(_OWORD *)(v24 + 32) = xmmword_1B6ECAAA0;
    *(unsigned char *)(v24 + 48) = 0;
    *(void *)(v24 + 64) = v25;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(void *)(v24 + 120) = 0;
    *(unsigned char *)(v24 + 128) = 14;
    swift_retain();
    sub_1B6786A24(a1);
    sub_1B6BFF388(v28, v2, v17 == 0, v24, a1, 0xD000000000000012, 0x80000001B6F53D80, 0);
    sub_1B6786A7C(a1);
    swift_release_n();
    swift_setDeallocating();
    swift_arrayDestroy();
    return swift_deallocClassInstance();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  float v16 = sub_1B6A7CBB0(v6, v8, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_1B6D3FF5C(a1, (uint64_t)v51, &qword_1E9DD5398, (uint64_t (*)(uint64_t))sub_1B6AEB00C);
    sub_1B6D3FF5C((uint64_t)v51, (uint64_t)v62, &qword_1E9DD5398, (uint64_t (*)(uint64_t))sub_1B6AEB00C);
    if (v62[0]) {
      objc_msgSend(v62[0], sel_setTexture_atIndex_, v16, 0, v28);
    }
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  swift_retain();
  int v27 = sub_1B6E32148();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  *(void *)&long long v29 = 0;
  swift_retain();
  sub_1B6B33E34(v27, (uint64_t *)&v29, 0x20676E697373696DLL, 0xEC000000706D6172);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B6D40728(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A28();
  if (v1) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B62C14BC(v9, v9[3]);
  uint64_t v5 = sub_1B6E334C8();
  uint64_t v6 = v4;
  BOOL v7 = v5 == 0x746E6174736E6F63 && v4 == 0xE800000000000000;
  if (v7 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
  }
  else if (v5 == 0x6D6F646E6172 && v6 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = 1;
  }
  else
  {
    if ((v5 != 0x6E556D6F646E6172 || v6 != 0xED00006D726F6669) && (sub_1B6E334B8() & 1) == 0)
    {
      sub_1B6E32998();
      swift_allocError();
      sub_1B6E32948();
      swift_willThrow();
      swift_bridgeObjectRelease();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = 2;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v9[0]) = 1;
  return v8 | 0x100000000;
}

uint64_t assignWithCopy for ParticleColorInit(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  int v4 = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ParticleColorInit(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleColorInit(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleColorInit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorInit()
{
  return &type metadata for ParticleColorInit;
}

ValueMetadata *type metadata accessor for ParticleColorInit.Mode()
{
  return &type metadata for ParticleColorInit.Mode;
}

unint64_t sub_1B6D40BC4()
{
  unint64_t result = qword_1E9DD9680;
  if (!qword_1E9DD9680)
  {
    sub_1B62D8A48(255, &qword_1E9DD9688, (uint64_t)&type metadata for ParticleColorInit.Mode, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9680);
  }
  return result;
}

uint64_t sub_1B6D40C40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  sub_1B6395CFC(0, &qword_1EB9809A0, (uint64_t (*)(void))sub_1B6D410C4, (uint64_t)&type metadata for ParticleColorInit.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v30 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v27 - v7;
  sub_1B62D2AB8(0, (unint64_t *)&unk_1EB980D90, (uint64_t (*)(uint64_t))sub_1B6395D64, MEMORY[0x1E4FBBE00]);
  uint64_t v9 = swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v9 + 16) = xmmword_1B6E76B30;
  *(_OWORD *)(v9 + 32) = _Q1;
  *(_DWORD *)(v9 + 48) = 0;
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + 80) = 1065353216;
  uint64_t v15 = sub_1B6397618(v9);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B639EA20(v15);
  uint64_t v31 = v16;
  swift_bridgeObjectRelease();
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D410C4();
  sub_1B6E33A48();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = v5;
    uint64_t v18 = v29;
    char v35 = 0;
    sub_1B63BD348();
    sub_1B6E32DF8();
    int v19 = v32;
    int v20 = DWORD1(v32);
    char v35 = 1;
    sub_1B66C6668();
    sub_1B6E32DF8();
    int v34 = v19;
    int v21 = v32;
    char v22 = BYTE4(v32);
    LOBYTE(v32) = 2;
    sub_1B6E32DC8();
    int v24 = v23;
    int v28 = v21;
    LOBYTE(v32) = 3;
    LOBYTE(v21) = sub_1B6E32DA8();
    sub_1B6395CFC(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    char v35 = 4;
    sub_1B6D41118((unint64_t *)&qword_1EB97D210);
    sub_1B6E32DF8();
    long long v27 = v32;
    char v35 = 5;
    sub_1B639D880();
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v30);
    long long v25 = v32;
    LOBYTE(v17) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)uint64_t v18 = v34;
    *(_DWORD *)(v18 + 4) = v20;
    *(_DWORD *)(v18 + 8) = v28;
    *(unsigned char *)(v18 + 12) = v22;
    *(_DWORD *)(v18 + 16) = v24;
    *(unsigned char *)(v18 + 20) = v21 & 1;
    *(_OWORD *)(v18 + 32) = v27;
    *(_OWORD *)(v18 + 48) = v25;
    *(unsigned char *)(v18 + 64) = v17;
  }
  return result;
}

unint64_t sub_1B6D410C4()
{
  unint64_t result = qword_1EB97EF48;
  if (!qword_1EB97EF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EF48);
  }
  return result;
}

uint64_t sub_1B6D41118(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6395CFC(255, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ParticleColorInit.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D41260);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorInit.CodingKeys()
{
  return &type metadata for ParticleColorInit.CodingKeys;
}

unint64_t sub_1B6D4129C()
{
  unint64_t result = qword_1E9DD96B0;
  if (!qword_1E9DD96B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD96B0);
  }
  return result;
}

unint64_t sub_1B6D412F4()
{
  unint64_t result = qword_1EB97EF68;
  if (!qword_1EB97EF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EF68);
  }
  return result;
}

unint64_t sub_1B6D4134C()
{
  unint64_t result = qword_1EB97EF50[0];
  if (!qword_1EB97EF50[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB97EF50);
  }
  return result;
}

void *sub_1B6D413A0(char a1)
{
  v7[16] = a1;
  unint64_t v1 = MEMORY[0x1E4FBC860];
  sub_1B68B708C((uint64_t)sub_1B6D41A18, (uint64_t)v7, 0, 0x1000000000000000uLL, 1, MEMORY[0x1E4FBC860]);
  uint64_t v2 = sub_1B68C70AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v3 = (void *)swift_allocObject();
  v3[2] = 0;
  v3[3] = v1;
  v3[4] = 0;
  v3[5] = 0;
  v3[6] = sub_1B67DD1F0(v1);
  v3[3] = v2;
  v3[6] = sub_1B67DD1F0(v1);
  swift_bridgeObjectRelease();
  _OWORD v6[2] = sub_1B687E1F8;
  v6[3] = v3;
  v8[0] = sub_1B68C967C(v1);
  v8[1] = v4;
  sub_1B68B96F0((uint64_t)sub_1B687E200, (uint64_t)v6, 1, 0x1000000000000000uLL, 0, v1, (uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B6D41530()
{
  unint64_t v1 = *(void *)(v0 + 24);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1B6E32C18();
  if (!v2) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v3 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = MEMORY[0x1BA9B4580](v3, v1);
    }
    else
    {
      uint64_t v4 = *(void *)(v1 + 8 * v3 + 32);
      swift_retain();
    }
    (*(void (**)(void *__return_ptr))(**(void **)(v4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + 152))(v8);
    uint64_t v13 = v8[0];
    uint64_t v14 = v8[1];
    sub_1B62D8C3C((uint64_t)&v13);
    uint64_t v12 = v8[2];
    sub_1B62D8C3C((uint64_t)&v12);
    uint64_t v11 = v8[3];
    sub_1B62D8C3C((uint64_t)&v11);
    uint64_t v10 = v8[4];
    sub_1B62D8C3C((uint64_t)&v10);
    uint64_t v9 = v8[5];
    sub_1B62D8C3C((uint64_t)&v9);
    uint64_t v5 = *(void *)(v14 + 16);
    sub_1B62D8C3C((uint64_t)&v14);
    if (v5)
    {
      swift_release();
    }
    else
    {
      sub_1B6E32A08();
      sub_1B6E32A68();
      sub_1B6E32A78();
      sub_1B6E32A28();
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B6D416F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E31118();
  uint64_t v5 = *(void *)(v4 - 8);
  double v7 = MEMORY[0x1F4188790](v4, v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, *a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v4, v7);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0x8000000000000000;
  sub_1B67E92E8(v10, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a2 + 48) = v14;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_1B6D41838@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = sub_1B6E31118();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 8);
  if ((a2 & 1) == 0)
  {
    sub_1B6E31108();
    uint64_t v12 = (char *)(v11 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID);
    uint64_t v13 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 24);
    v13(v11 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v10, v6);
    v13(*(void *)(v11 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + OBJC_IVAR____TtC3VFX4Node_authoringID, v12, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  *a3 = v11;
  return swift_retain();
}

uint64_t sub_1B6D4199C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B62C6A50(*(void *)(v0 + 32));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AuthoringGraph()
{
  return self;
}

uint64_t sub_1B6D41A10()
{
  return sub_1B6817684(*v0);
}

uint64_t sub_1B6D41A18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1B6D41838(a1, *(unsigned char *)(v2 + 16), a2);
}

uint64_t getEnumTagSinglePayload for ParticleMeshRenderer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 7;
  int v5 = v3 - 7;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleMeshRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 6;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleMeshRenderer()
{
  return &type metadata for ParticleMeshRenderer;
}

uint64_t sub_1B6D41AD4@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3 = 0xD000000000000012;
  v6[0] = 0xD000000000000012;
  v6[1] = 0x80000001B6F53E50;
  _OWORD v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4800) == 0x4000) {
    unint64_t v3 = 0xD00000000000001BLL;
  }
  void v6[4] = MEMORY[0x1E4FBC860];
  v6[5] = v3;
  unint64_t v4 = 0x80000001B6F53E70;
  if ((a1 & 0x4800) == 0x4000) {
    unint64_t v4 = 0x80000001B6F53E90;
  }
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E4FBC860];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  nullsub_1(v6);
  return sub_1B62CA210((uint64_t)v6, a2, &qword_1EB97EB68);
}

uint64_t sub_1B6D41BA0()
{
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  uint64_t v0 = sub_1B62FFCAC(132);
  *(void *)(v0 + 88) = sub_1B6D41AD4;
  *(void *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

__n128 sub_1B6D41C08@<Q0>(__n128 *a1@<X8>)
{
  result.n128_u64[0] = 0xFFFFFFFFLL;
  result.n128_u64[1] = 0xFFFFFFFFLL;
  *a1 = result;
  a1[1].n128_u8[0] = 0;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1B6D41C1C(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB4D28(*a1, *a2);
}

uint64_t sub_1B6D41C28()
{
  return sub_1B6BCF764();
}

uint64_t sub_1B6D41C30()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D41D1C()
{
  return sub_1B69EAF88();
}

uint64_t sub_1B6D41D24@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D42254();
  *a1 = result;
  return result;
}

void sub_1B6D41D54(void *a1@<X8>)
{
  unint64_t v2 = 0xEA00000000007974;
  unint64_t v3 = 0x69746E456873656DLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x80000001B6F2E650;
      unint64_t v3 = 0xD000000000000010;
      goto LABEL_3;
    case 2:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v5 = 0x6F4D74726F73;
      goto LABEL_6;
    case 3:
      unint64_t v4 = 0xE900000000000078;
      uint64_t v5 = 0x6E4974726170;
LABEL_6:
      *a1 = v5 & 0xFFFFFFFFFFFFLL | 0x6564000000000000;
      a1[1] = v4;
      break;
    case 4:
      *a1 = 0x7865646E49646F6CLL;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t sub_1B6D41E14()
{
  unint64_t result = 0x69746E456873656DLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x65646F4D74726F73;
      break;
    case 3:
      unint64_t result = 0x65646E4974726170;
      break;
    case 4:
      unint64_t result = 0x7865646E49646F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D41ECC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D42254();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D41EF4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D42880();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D41F30(uint64_t a1)
{
  unint64_t v2 = sub_1B6D42880();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D41F6C(void *a1)
{
  unint64_t v3 = v1;
  sub_1B6D428D4(0, &qword_1E9DD96C8, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  long long v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D42880();
  sub_1B6E33A88();
  uint64_t v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v2)
  {
    uint64_t v13 = v3[1];
    HIBYTE(v12) = 1;
    sub_1B6E32FA8();
    LOBYTE(v13) = *((unsigned char *)v3 + 16);
    HIBYTE(v12) = 2;
    sub_1B66C5F1C();
    sub_1B6E32FA8();
    LOBYTE(v13) = 3;
    sub_1B6E32F88();
    LOBYTE(v13) = 4;
    sub_1B6E32F88();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B6D421A0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6D42560(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B6D421E8(void *a1)
{
  return sub_1B6D41F6C(a1);
}

uint64_t sub_1B6D42200(int32x4_t *a1, int32x4_t *a2)
{
  return vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*a1, *a2))), 0xFuLL))) & 1 | (a1[1].i64[1] != a2[1].i64[1]) | (a1[1].u8[0] != a2[1].u8[0]);
}

uint64_t sub_1B6D42254()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 5) {
    return 5;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D422A0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(v1 + 8);
  uint64_t v3 = *(unsigned int *)(v1 + 12);
  if (v2 != -1 || v3 != 0) {
    return v2 | (v3 << 32);
  }
  uint64_t result = 0;
  uint64_t v7 = *(void *)(v1 + 24);
  if ((v7 & 0x8000000000000000) == 0 && v7 < *(void *)(a1 + 16)) {
    return *(void *)(a1 + 8 * v7 + 32);
  }
  return result;
}

void *sub_1B6D422EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a3 + 8);
  swift_retain();
  sub_1B62E9D50(v3, (uint64_t)v17);
  swift_release();
  sub_1B62CA210((uint64_t)v17, (uint64_t)v18, qword_1EB97EA20);
  if (v19)
  {
    long long v15 = xmmword_1B6E4F370;
    long long v14 = xmmword_1B6E4F2E0;
    long long v13 = xmmword_1B6E4F320;
    long long v12 = xmmword_1B6E4F300;
  }
  else
  {
    long long v12 = v18[0];
    long long v13 = v18[1];
    long long v14 = v18[2];
    long long v15 = v18[3];
  }
  swift_retain();
  unint64_t v4 = (void *)sub_1B62F1868(0, 64);
  uint64_t v6 = v5;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    int v7 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v16[0] = 0;
    swift_retain();
    sub_1B6B33E34(v7, v16, 0xD000000000000046, 0x80000001B6F53E00);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v8 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v9 = v4;
    long long v10 = (long long *)&v8[v6];
    *long long v10 = v12;
    v10[1] = v13;
    v10[2] = v14;
    v10[3] = v15;
  }
  swift_release();
  return v4;
}

uint64_t sub_1B6D42560@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6D428D4(0, &qword_1E9DD96B8, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  long long v10 = (char *)&v25 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D42880();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  char v26 = 0;
  sub_1B62B1EA8();
  sub_1B6E32DF8();
  uint64_t v12 = v27;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_1B62C14BC(a1, v13);
  uint64_t v15 = 0xFFFFFFFFLL;
  if (sub_1B62B8F14(1070, v13, v14))
  {
    char v26 = 1;
    sub_1B6E32DF8();
    uint64_t v15 = v27;
  }
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_1B62C14BC(a1, v16);
  if (sub_1B62B8F14(1092, v16, v17))
  {
    char v26 = 2;
    sub_1B62A8594();
    sub_1B6E32DF8();
    char v18 = v27;
    LOBYTE(v27) = 3;
    uint64_t v19 = sub_1B6E32DD8();
    LOBYTE(v27) = 4;
    uint64_t v20 = sub_1B6E32D68();
    char v22 = v21;
    int v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v25 = v20;
    v23(v10, v6);
    if (v22) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v25;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v19 = 0;
    uint64_t v24 = 0;
    char v18 = 0;
  }
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v15;
  *(unsigned char *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v24;
  return result;
}

unint64_t sub_1B6D42880()
{
  unint64_t result = qword_1E9DD96C0;
  if (!qword_1E9DD96C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD96C0);
  }
  return result;
}

void sub_1B6D428D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6D42880();
    unint64_t v7 = a3(a1, &type metadata for ParticleMeshRenderer.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ParticleMeshRenderer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D42A04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleMeshRenderer.CodingKeys()
{
  return &type metadata for ParticleMeshRenderer.CodingKeys;
}

unint64_t sub_1B6D42A40()
{
  unint64_t result = qword_1E9DD96D0;
  if (!qword_1E9DD96D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD96D0);
  }
  return result;
}

unint64_t sub_1B6D42A98()
{
  unint64_t result = qword_1E9DD96D8;
  if (!qword_1E9DD96D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD96D8);
  }
  return result;
}

unint64_t sub_1B6D42AF0()
{
  unint64_t result = qword_1E9DD96E0;
  if (!qword_1E9DD96E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD96E0);
  }
  return result;
}

uint64_t sub_1B6D42B44()
{
  uint64_t result = sub_1B6D42B64();
  qword_1EB997DC0 = result;
  return result;
}

uint64_t sub_1B6D42B64()
{
  type metadata accessor for NavigationConfiguration();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = sub_1B67F42E8(MEMORY[0x1E4FBC860]);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E4590((uint64_t)&unk_1F0F8F9A8, 0, isUniquelyReferenced_nonNull_native, v2);
  *(void *)(v0 + 16) = v10;
  swift_bridgeObjectRelease();
  char v3 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E4590((uint64_t)&unk_1F0F8F930, 1, v3, v4);
  *(void *)(v0 + 16) = v11;
  swift_bridgeObjectRelease();
  char v5 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E4590((uint64_t)&unk_1F0F8F958, 2, v5, v6);
  *(void *)(v0 + 16) = v12;
  swift_bridgeObjectRelease();
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E4590((uint64_t)&unk_1F0F8F980, 3, v7, v8);
  *(void *)(v0 + 16) = v13;
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for NavigationConfiguration()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for FlyModeKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D42DB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlyModeKeys()
{
  return &type metadata for FlyModeKeys;
}

unint64_t sub_1B6D42DF0()
{
  unint64_t result = qword_1EB97DBD8;
  if (!qword_1EB97DBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DBD8);
  }
  return result;
}

unint64_t sub_1B6D42E44(char a1)
{
  unint64_t result = 0x7055646C726F77;
  switch(a1)
  {
    case 1:
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x69736E65536E6170;
      break;
    case 5:
      unint64_t result = 0x6C754D7466696873;
      break;
    case 6:
      unint64_t result = 0x636F6C6556796C66;
      break;
    case 7:
      unint64_t result = 0x6E6F697461746F72;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D42F70(void *a1)
{
  int v3 = v1;
  sub_1B6D44AE8(0, &qword_1E9DD9700, (uint64_t (*)(void))sub_1B6D44A40, (uint64_t)&type metadata for _Navigation.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D44A40();
  sub_1B6E33A88();
  long long v12 = *v3;
  char v13 = 0;
  sub_1B6D44AE8(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  sub_1B62AF44C((unint64_t *)&qword_1EB97D1D8);
  sub_1B6E32FA8();
  if (!v2)
  {
    long long v12 = v3[1];
    char v13 = 1;
    sub_1B6E32FA8();
    LOBYTE(v12) = 2;
    sub_1B6E32F78();
    LOBYTE(v12) = 3;
    sub_1B6E32F78();
    LOBYTE(v12) = 4;
    sub_1B6E32F78();
    LOBYTE(v12) = 5;
    sub_1B6E32F78();
    LOBYTE(v12) = 6;
    sub_1B6E32F78();
    LOBYTE(v12) = *((unsigned char *)v3 + 52);
    char v13 = 7;
    sub_1B6D44B50();
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B6D43298(void *a1@<X8>)
{
  *a1 = &unk_1F0F8C7C8;
}

uint64_t sub_1B6D432A8()
{
  return sub_1B6E31BA8();
}

uint64_t sub_1B6D43308()
{
  return sub_1B6E31B08();
}

uint64_t sub_1B6D43358(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BAE23C(*a1, *a2);
}

unint64_t sub_1B6D43364()
{
  return sub_1B6D42E44(*v0);
}

uint64_t sub_1B6D4336C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D4395C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D43394(uint64_t a1)
{
  unint64_t v2 = sub_1B6D44A40();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D433D0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D44A40();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6D4340C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6D44674(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = v7[0];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v7;
    *(double *)(a2 + 45) = *(double *)((char *)&v7[1] + 5);
  }
  return result;
}

uint64_t sub_1B6D43458(void *a1)
{
  return sub_1B6D42F70(a1);
}

uint64_t sub_1B6D43470@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB97F818 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1EB997DC0;
  *(_OWORD *)a1 = xmmword_1B6E4F320;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1B6ECB030;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(unsigned char *)(a1 + 52) = 1;
  *(void *)(a1 + 56) = v2;
  *(unsigned char *)(a1 + 64) = 2;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 72) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 104) = v3;

  return swift_retain();
}

uint64_t sub_1B6D43524()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D43580()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B6D435A0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D435F8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B6D4364C(void *a1@<X8>)
{
  *a1 = 0x7461676976614E63;
  a1[1] = 0xEB000000006E6F69;
}

uint64_t sub_1B6D43670()
{
  return 0x7461676976614E63;
}

uint64_t sub_1B6D43690@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B6D436E8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D43F7C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D43724(uint64_t a1)
{
  unint64_t v2 = sub_1B6D43F7C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D43760(void *a1)
{
  uint64_t v2 = v1;
  sub_1B6D44AE8(0, &qword_1E9DD96E8, (uint64_t (*)(void))sub_1B6D43F7C, (uint64_t)&type metadata for Navigation.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D43F7C();
  sub_1B6E33A88();
  long long v10 = *(_OWORD *)(v2 + 16);
  v12[0] = *(_OWORD *)v2;
  v12[1] = v10;
  v13[0] = *(_OWORD *)(v2 + 32);
  *(void *)((char *)v13 + 13) = *(void *)(v2 + 45);
  sub_1B6D44024();
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

__n128 sub_1B6D438F0@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6D43D04(a1, v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B6D43944(void *a1)
{
  return sub_1B6D43760(a1);
}

uint64_t sub_1B6D4395C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7055646C726F77 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B6F4C0F0 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001B6F4C0D0 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B6F4C0B0 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69736E65536E6170 && a2 == 0xEE00797469766974 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C754D7466696873 && a2 == 0xEF7265696C706974 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x636F6C6556796C66 && a2 == 0xEB00000000797469 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xEC00000065646F4DLL)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_1B6D43D04@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v20 = a2;
  sub_1B6D44AE8(0, &qword_1EB980878, (uint64_t (*)(void))sub_1B6D43F7C, (uint64_t)&type metadata for Navigation.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v17 - v8;
  if (qword_1EB97F818 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1EB997DC0;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D43F7C();
  swift_retain();
  sub_1B6E33A48();
  if (v2)
  {
    swift_bridgeObjectRelease_n();
    swift_release();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B6D43FD0();
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    long long v18 = v22;
    long long v19 = v21;
    int v11 = v24;
    char v12 = v25;
    long long v17 = v23;
    uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    uint64_t v14 = v20;
    long long v15 = v18;
    *uint64_t v20 = v19;
    v14[1] = v15;
    _OWORD v14[2] = v17;
    *((_DWORD *)v14 + 12) = v11;
    *((unsigned char *)v14 + 52) = v12;
    *((void *)v14 + 7) = v10;
    uint64_t v16 = MEMORY[0x1E4FBC860];
    *((unsigned char *)v14 + 64) = 2;
    *((void *)v14 + 9) = v16;
    *((void *)v14 + 10) = v16;
    *((void *)v14 + 11) = v16;
    *((void *)v14 + 12) = v16;
    *((void *)v14 + 13) = v16;
  }
  return result;
}

unint64_t sub_1B6D43F7C()
{
  unint64_t result = qword_1EB97DA38;
  if (!qword_1EB97DA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DA38);
  }
  return result;
}

unint64_t sub_1B6D43FD0()
{
  unint64_t result = qword_1EB97DDC0;
  if (!qword_1EB97DDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DDC0);
  }
  return result;
}

unint64_t sub_1B6D44024()
{
  unint64_t result = qword_1E9DD96F0;
  if (!qword_1E9DD96F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD96F0);
  }
  return result;
}

__n128 initializeWithCopy for _Navigation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 45) = *(void *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _Navigation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 53)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 52);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _Navigation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 53) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 53) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 52) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _Navigation()
{
  return &type metadata for _Navigation;
}

unsigned char *storeEnumTagSinglePayload for Navigation.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6D441DCLL);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Navigation.CodingKeys()
{
  return &type metadata for Navigation.CodingKeys;
}

uint64_t destroy for Navigation()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Navigation(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 45) = *(void *)(a2 + 45);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Navigation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Navigation(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Navigation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Navigation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Navigation()
{
  return &type metadata for Navigation;
}

unint64_t sub_1B6D44570()
{
  unint64_t result = qword_1E9DD96F8;
  if (!qword_1E9DD96F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD96F8);
  }
  return result;
}

unint64_t sub_1B6D445C8()
{
  unint64_t result = qword_1EB97DA48;
  if (!qword_1EB97DA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DA48);
  }
  return result;
}

unint64_t sub_1B6D44620()
{
  unint64_t result = qword_1EB97DA40;
  if (!qword_1EB97DA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DA40);
  }
  return result;
}

uint64_t sub_1B6D44674@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6D44AE8(0, &qword_1EB9808A0, (uint64_t (*)(void))sub_1B6D44A40, (uint64_t)&type metadata for _Navigation.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v27 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v25 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D44A40();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v6;
  sub_1B6D44AE8(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  char v28 = 0;
  sub_1B62AF44C((unint64_t *)&qword_1EB97D1F0);
  uint64_t v11 = v27;
  sub_1B6E32DF8();
  long long v26 = v29;
  char v28 = 1;
  sub_1B6E32DF8();
  long long v25 = v29;
  LOBYTE(v29) = 2;
  sub_1B6E32DC8();
  int v13 = v12;
  LOBYTE(v29) = 3;
  sub_1B6E32DC8();
  int v15 = v14;
  LOBYTE(v29) = 4;
  sub_1B6E32DC8();
  int v17 = v16;
  LOBYTE(v29) = 5;
  sub_1B6E32DC8();
  int v19 = v18;
  LOBYTE(v29) = 6;
  sub_1B6E32DC8();
  int v21 = v20;
  char v28 = 7;
  sub_1B6D44A94();
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v11);
  char v22 = v29;
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  long long v24 = v25;
  *(_OWORD *)a2 = v26;
  *(_OWORD *)(a2 + 16) = v24;
  *(_DWORD *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 36) = v15;
  *(_DWORD *)(a2 + 40) = v17;
  *(_DWORD *)(a2 + 44) = v19;
  *(_DWORD *)(a2 + 48) = v21;
  *(unsigned char *)(a2 + 52) = v22;
  return result;
}

unint64_t sub_1B6D44A40()
{
  unint64_t result = qword_1EB97DDA8;
  if (!qword_1EB97DDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DDA8);
  }
  return result;
}

unint64_t sub_1B6D44A94()
{
  unint64_t result = qword_1EB97F6D8[0];
  if (!qword_1EB97F6D8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB97F6D8);
  }
  return result;
}

void sub_1B6D44AE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1B6D44B50()
{
  unint64_t result = qword_1E9DD9708;
  if (!qword_1E9DD9708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9708);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for _Navigation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D44C70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _Navigation.CodingKeys()
{
  return &type metadata for _Navigation.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NavigationRotationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D44D74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationRotationMode()
{
  return &type metadata for NavigationRotationMode;
}

unsigned char *storeEnumTagSinglePayload for Navigation.ScrollMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D44E78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Navigation.ScrollMode()
{
  return &type metadata for Navigation.ScrollMode;
}

unint64_t sub_1B6D44EB4()
{
  unint64_t result = qword_1E9DD9710;
  if (!qword_1E9DD9710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9710);
  }
  return result;
}

unint64_t sub_1B6D44F0C()
{
  unint64_t result = qword_1E9DD9718;
  if (!qword_1E9DD9718)
  {
    sub_1B6D44F64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9718);
  }
  return result;
}

void sub_1B6D44F64()
{
  if (!qword_1E9DD9720)
  {
    unint64_t v0 = sub_1B6E31D18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD9720);
    }
  }
}

unint64_t sub_1B6D44FC0()
{
  unint64_t result = qword_1E9DD9728;
  if (!qword_1E9DD9728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9728);
  }
  return result;
}

unint64_t sub_1B6D45018()
{
  unint64_t result = qword_1E9DD9730;
  if (!qword_1E9DD9730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9730);
  }
  return result;
}

unint64_t sub_1B6D45070()
{
  unint64_t result = qword_1EB97DDB8;
  if (!qword_1EB97DDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DDB8);
  }
  return result;
}

unint64_t sub_1B6D450C8()
{
  unint64_t result = qword_1EB97DDB0;
  if (!qword_1EB97DDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DDB0);
  }
  return result;
}

unint64_t sub_1B6D4511C()
{
  unint64_t result = qword_1EB97F6D0;
  if (!qword_1EB97F6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F6D0);
  }
  return result;
}

void sub_1B6D45170(void *a1@<X8>)
{
  *a1 = &unk_1F0F8FD78;
}

uint64_t sub_1B6D45180()
{
  return sub_1B6E31BC8();
}

uint64_t sub_1B6D451E0()
{
  return sub_1B6E31B28();
}

uint64_t sub_1B6D45230(char *a1, char *a2)
{
  return sub_1B6BB7288(*a1, *a2);
}

uint64_t sub_1B6D4523C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D452C8()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D45340()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D453C8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1B6D45428(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x726F74636166;
  if (*v1) {
    uint64_t v2 = 0x6F69746365726964;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xED0000736978416ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6D45470()
{
  if (*v0) {
    return 0x6F69746365726964;
  }
  else {
    return 0x726F74636166;
  }
}

uint64_t sub_1B6D454B4@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1B6D45518(uint64_t a1)
{
  unint64_t v2 = sub_1B6D468C4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D45554(uint64_t a1)
{
  unint64_t v2 = sub_1B6D468C4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D45590(void *a1, char a2)
{
  sub_1B6D46918(0, &qword_1E9DD9768, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D468C4();
  sub_1B6E33A88();
  char v15 = 0;
  sub_1B6E32F78();
  if (!v2)
  {
    char v14 = a2 & 1;
    char v13 = 1;
    sub_1B66C5FF0();
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t type metadata accessor for OrientationOverVelocity.System()
{
  return self;
}

const char *sub_1B6D4574C()
{
  return "OrientationOverVelocity";
}

void sub_1B6D45760(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v5 = sub_1B6D466E8(a1);
  if (!v2)
  {
    *(float *)a2 = v5;
    *(unsigned char *)(a2 + 4) = v4 & 1;
  }
}

uint64_t sub_1B6D45794(void *a1)
{
  return sub_1B6D45590(a1, *(unsigned char *)(v1 + 4));
}

uint64_t sub_1B6D457B4()
{
  return type metadata accessor for OrientationOverVelocity.System();
}

void sub_1B6D457D4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1065353216;
  *(unsigned char *)(a1 + 4) = 1;
}

uint64_t type metadata accessor for OrientationOverVelocity.GPUSystem()
{
  return self;
}

const char *sub_1B6D45810()
{
  return "OrientationOverVelocity.GPU";
}

uint64_t sub_1B6D45824()
{
  return type metadata accessor for OrientationOverVelocity.GPUSystem();
}

unint64_t sub_1B6D45844()
{
  unint64_t result = qword_1E9DD9738;
  if (!qword_1E9DD9738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9738);
  }
  return result;
}

uint64_t sub_1B6D45898(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  swift_retain();
  uint64_t v5 = sub_1B695F16C(v3);
  swift_release();
  if ((v5 & 0xFF00000000) == 0x200000000) {
    float v6 = 1.0;
  }
  else {
    float v6 = *(float *)&v5;
  }
  if ((v5 & 0xFF00000000) == 0x200000000) {
    char v7 = 1;
  }
  else {
    char v7 = BYTE4(v5) & 1;
  }
  sub_1B6A81254();
  v17[0] = v8;
  *(float *)&v17[1] = v6;
  char v18 = v7;
  uint64_t v9 = *a1;
  if (*a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for particle_orientation_over_velocity_uniforms(0);
    sub_1B6B594A8((uint64_t)v17, 1, ObjectType, v11, v12, v13, v14, v15);
  }
  swift_retain();
  sub_1B6786A24((uint64_t)a1);
  sub_1B6BFF388(v4, v2, v9 == 0, 0, (uint64_t)a1, 0xD000000000000022, 0x80000001B6F53F40, 0);
  sub_1B6786A7C((uint64_t)a1);
  return swift_release();
}

uint64_t *sub_1B6D459C0(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  swift_retain_n();
  uint64_t v4 = sub_1B695F16C(v2);
  swift_release();
  float v5 = *(float *)&v4;
  if ((v4 & 0xFF00000000) == 0x200000000) {
    float v5 = 1.0;
  }
  BOOL v6 = (v4 & 0x100000000) == 0 && (v4 & 0xFF00000000) != 0x200000000;
  float v7 = 1.0 - fminf(fmaxf(v5, 0.0), 1.0);
  sub_1B62F46E8();
  float v9 = powf(v7, v8 * 60.0);
  long long v10 = *(_OWORD *)(a1 + 104);
  long long v170 = *(_OWORD *)(a1 + 88);
  long long v171 = v10;
  uint64_t v172 = *(void *)(a1 + 120);
  sub_1B663EA98((uint64_t)v156);
  v168[0] = v156[0];
  v168[1] = v156[1];
  uint64_t v169 = v157;
  sub_1B62C9DA8(v3, (uint64_t)v168, 0x200000000, v158);
  sub_1B62CA3FC((uint64_t)v158, (uint64_t)v159, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v159[0])
  {
    sub_1B62CA064((uint64_t)v156);
    return (uint64_t *)swift_release();
  }
  if (v165 <= 0 || (uint64_t v143 = v162) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B62CA064((uint64_t)v156);
    goto LABEL_66;
  }
  float v11 = fminf(fmaxf(1.0 - v9, 0.0), 1.0);
  uint64_t v12 = v164;
  uint64_t v13 = v164[4];
  char v14 = *(unsigned char *)(v163 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v166[0] = v159[0];
  v166[1] = v159[1];
  uint64_t v167 = v160;
  uint64_t v141 = (uint64_t)(v164 + 6);
  uint64_t v142 = v161;
  uint64_t v140 = v164 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v139 = v14;
  while (2)
  {
    int v17 = (unsigned int *)(v142 + 48 * v15);
    uint64_t v150 = *v17;
    uint64_t v144 = v17[1];
    uint64_t v145 = v15;
    int v19 = (uint64_t *)*((void *)v17 + 2);
    uint64_t v18 = *((void *)v17 + 3);
    uint64_t v21 = *((void *)v17 + 4);
    uint64_t v20 = *((void *)v17 + 5);
    uint64_t v147 = v20;
    uint64_t v153 = v16;
    if (v14)
    {
      char v22 = *(os_unfair_lock_s **)(v20 + 376);
      swift_retain_n();
      long long v23 = v22;
      uint64_t v20 = v147;
      os_unfair_lock_lock(v23);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v147 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    uint64_t v24 = v13;
    ecs_stack_allocator_push_snapshot(v13);
    sub_1B62CA3FC(v141, (uint64_t)v173, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
    uint64_t v25 = v12[4];
    uint64_t v26 = *(void *)(*(void *)(*(void *)(*(void *)(v20 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v12[6] = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    v12[7] = v26;
    v140[1] = 0;
    v140[2] = 0;
    *uint64_t v140 = 0;
    swift_release();
    uint64_t v27 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, v19, v18, v21, (uint64_t)v12);
    uint64_t v28 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v19, v18, v21, (uint64_t)v12);
    long long v29 = (float32x4_t *)v28;
    float32x4_t v148 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
    if (v19)
    {
      if (!v21)
      {
LABEL_38:
        uint64_t v13 = v24;
        char v14 = v139;
        uint64_t v30 = v145;
        uint64_t v16 = v153;
        goto LABEL_61;
      }
      uint64_t v13 = v24;
      uint64_t v30 = v145;
      uint64_t v16 = v153;
      while (1)
      {
        int8x16_t v32 = (int8x16_t)vabsq_f32(*v29);
        if (*(float *)v32.i32 > 0.00000011921) {
          break;
        }
        v32.i32[0] = vextq_s8(v32, v32, 8uLL).u32[0];
        *(int32x2_t *)v32.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v32.i8);
        if ((v32.i8[4] & 1) == 0 || (v32.i8[0] & 1) == 0) {
          break;
        }
LABEL_18:
        ++v29;
        ++v27;
        if (!--v21) {
          goto LABEL_60;
        }
      }
      float32x4_t v151 = *v27;
      float32x4_t v154 = *v29;
      sub_1B6C1F89C(*v27);
      if (v6)
      {
        *(float32x2_t *)v33.f32 = vsub_f32(0, v34);
        v33.f32[2] = 0.0 - v35;
        v33.i32[3] = 0;
      }
      else
      {
        v33.i32[3] = v149;
      }
      int32x4_t v36 = (int32x4_t)vmulq_f32(v154, v154);
      v36.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2), vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1))).u32[0];
      float32x2_t v37 = vrsqrte_f32((float32x2_t)v36.u32[0]);
      float32x2_t v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v37, v37)));
      float32x4_t v39 = vmulq_n_f32(v154, vmul_f32(v38, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v38, v38))).f32[0]);
      float32x4_t v40 = vmulq_f32(v39, v39);
      v40.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u64[0];
      float32x4_t v41 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0);
      v41.i32[3] = 0;
      float32x4_t v42 = vrsqrteq_f32(v41);
      float32x4_t v43 = vmulq_f32(v42, vrsqrtsq_f32(v41, vmulq_f32(v42, v42)));
      int32x4_t v44 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v40.f32[0] != 0.0)), 0x1FuLL));
      v44.i32[3] = 0;
      float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v44), (int8x16_t)vmulq_f32(v39, vmulq_f32(v43, vrsqrtsq_f32(v41, vmulq_f32(v43, v43)))), (int8x16_t)v39);
      float32x4_t v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
      float32x4_t v47 = vmlaq_f32(vmulq_f32(v46, vnegq_f32(v33)), v45, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL));
      float32x4_t v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL);
      float32x4_t v49 = vmulq_f32(v47, v47);
      v49.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), v49)).u64[0];
      float32x4_t v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0);
      v50.i32[3] = 0;
      float32x4_t v51 = vrsqrteq_f32(v50);
      float32x4_t v52 = vmulq_f32(v51, vrsqrtsq_f32(v50, vmulq_f32(v51, v51)));
      int32x4_t v53 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v49.f32[0] != 0.0)), 0x1FuLL));
      v53.i32[3] = 0;
      float32x4_t v54 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v53), (int8x16_t)vmulq_f32(vmulq_f32(v52, vrsqrtsq_f32(v50, vmulq_f32(v52, v52))), v48), vextq_s8(vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL), (int8x16_t)v45, 8uLL));
      float32x4_t v55 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL), vnegq_f32(v45)), v54, v46);
      float32x4_t v56 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL);
      int32x4_t v57 = (int32x4_t)vmulq_f32(v55, v55);
      v57.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v57, 2), *(float32x2_t *)v57.i8)).u32[0];
      *(float32x2_t *)v43.f32 = vrsqrte_f32((float32x2_t)v57.u32[0]);
      *(float32x2_t *)v43.f32 = vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)));
      int8x16_t v58 = (int8x16_t)vmulq_n_f32(v56, vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32))).f32[0]);
      float v59 = v45.f32[2] + (float)(v54.f32[0] + *(float *)&v58.i32[1]);
      if (v59 > 0.0)
      {
        float v60 = sqrtf(v59 + 1.0);
        float32x4_t v61 = (float32x4_t)vzip1q_s32((int32x4_t)v54, (int32x4_t)v45);
        v61.i32[0] = v58.i32[2];
        float32x4_t v62 = (float32x4_t)vtrn2q_s32((int32x4_t)v45, vzip2q_s32((int32x4_t)v45, (int32x4_t)v54));
        v62.i32[2] = v58.i32[0];
        float32x4_t v64 = vsubq_f32(v61, v62);
        v61.f32[3] = v60;
        v62.f32[3] = v60;
        float32x4_t v63 = vmulq_f32(v61, v62);
        v64.i32[3] = v63.i32[3];
LABEL_27:
        v63.f32[0] = 0.5 / v60;
        float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 0);
LABEL_34:
        _Q1 = vmulq_f32(v64, v65);
        if (v6)
        {
          _Q4 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q1, (float32x4_t)xmmword_1B6ECB5E0), (float32x4_t)xmmword_1B6ECB5D0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL));
          float32x4_t v76 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), _Q4, 0xCuLL);
          _Q4.i32[0] = 1060439283;
          __asm { FMLA            S2, S4, V1.S[3] }
          _Q1 = vaddq_f32(vmlaq_laneq_f32(vmulq_f32(_Q1, v148), (float32x4_t)xmmword_1B6ECB5D0, _Q1, 3), v76);
          _Q1.i32[3] = _S2;
        }
        sub_1B683FC58(v151, _Q1, v11);
        *uint64_t v27 = v31;
        goto LABEL_18;
      }
      if (v54.f32[0] < v45.f32[2] || v54.f32[0] < *(float *)&v58.i32[1])
      {
        if (*(float *)&v58.i32[1] <= v45.f32[2])
        {
          v82.i32[0] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
          v82.i32[1] = v58.i32[2];
          float v60 = sqrtf((float)((float)(v45.f32[2] + 1.0) - v54.f32[0]) - *(float *)&v58.i32[1]);
          float32x2_t v83 = (float32x2_t)__PAIR64__(v54.u32[1], LODWORD(v60));
          float32x2_t v84 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 0);
          *(float32x2_t *)v63.f32 = vsub_f32(*(float32x2_t *)v54.f32, v84);
          v84.f32[0] = v60;
          v84.i32[0] = vmul_f32(v83, v84).u32[0];
          v84.i32[1] = v63.i32[1];
          *(float32x2_t *)v64.f32 = vadd_f32(*(float32x2_t *)v45.f32, v82);
          *(float32x2_t *)&v64.u32[2] = v84;
          goto LABEL_27;
        }
        float v66 = sqrtf((float)((float)(*(float *)&v58.i32[1] + 1.0) - v54.f32[0]) - v45.f32[2]);
        int8x16_t v71 = (int8x16_t)v45;
        *(float *)v71.i32 = v66;
        float32x2_t v72 = (float32x2_t)vdup_laneq_s32((int32x4_t)v58, 2);
        *(float *)v58.i32 = v54.f32[1] + *(float *)v58.i32;
        float32x2_t v73 = vadd_f32(*(float32x2_t *)v45.f32, v72);
        v72.f32[0] = v66;
        v71.i32[0] = vmul_f32(*(float32x2_t *)v71.i8, v72).u32[0];
        v71.i32[1] = v73.i32[1];
        int32x2_t v70 = (int32x2_t)vsubq_f32(v45, (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2)).u64[0];
        float32x4_t v65 = (float32x4_t)vextq_s8(vextq_s8(v58, v58, 4uLL), v71, 0xCuLL);
        v65.i32[3] = v70.i32[0];
      }
      else
      {
        float v66 = sqrtf((float)((float)(v54.f32[0] + 1.0) - *(float *)&v58.i32[1]) - v45.f32[2]);
        float32x2_t v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 0);
        float32x2_t v68 = vadd_f32(*(float32x2_t *)v54.f32, v67);
        v67.f32[0] = v66;
        v65.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v54.u32[1], LODWORD(v66)), v67).u32[0];
        v65.i32[1] = v68.i32[1];
        LODWORD(v69) = vadd_f32(*(float32x2_t *)v45.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)).u32[0];
        int32x2_t v70 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(v58.u32[2], v45.u32[0]), *(float32x2_t *)v45.f32);
        HIDWORD(v69) = v70.i32[1];
        v65.i64[1] = v69;
      }
      *(float *)v70.i32 = 0.5 / v66;
      float32x4_t v64 = (float32x4_t)vdupq_lane_s32(v70, 0);
      goto LABEL_34;
    }
    if (v150 == v144) {
      goto LABEL_38;
    }
    uint64_t v85 = v144 - v150;
    char v86 = (float32x4_t *)(v28 + 16 * v150);
    char v87 = &v27[v150];
    uint64_t v13 = v24;
    uint64_t v30 = v145;
    uint64_t v16 = v153;
    do
    {
      int8x16_t v89 = (int8x16_t)vabsq_f32(*v86);
      if (*(float *)v89.i32 <= 0.00000011921)
      {
        v89.i32[0] = vextq_s8(v89, v89, 8uLL).u32[0];
        *(int32x2_t *)v89.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v89.i8);
        if (v89.i8[4] & 1) != 0 && (v89.i8[0]) {
          goto LABEL_41;
        }
      }
      float32x4_t v152 = *v87;
      float32x4_t v155 = *v86;
      sub_1B6C1F89C(*v87);
      if (v6)
      {
        *(float32x2_t *)v90.f32 = vsub_f32(0, v91);
        v90.f32[2] = 0.0 - v92;
        v90.i32[3] = 0;
      }
      else
      {
        v90.i32[3] = v146;
      }
      int32x4_t v93 = (int32x4_t)vmulq_f32(v155, v155);
      v93.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v93, 2), vadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v93.i8, 1))).u32[0];
      float32x2_t v94 = vrsqrte_f32((float32x2_t)v93.u32[0]);
      float32x2_t v95 = vmul_f32(v94, vrsqrts_f32((float32x2_t)v93.u32[0], vmul_f32(v94, v94)));
      float32x4_t v96 = vmulq_n_f32(v155, vmul_f32(v95, vrsqrts_f32((float32x2_t)v93.u32[0], vmul_f32(v95, v95))).f32[0]);
      float32x4_t v97 = vmulq_f32(v96, v96);
      v97.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2), vaddq_f32(v97, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 1))).u64[0];
      float32x4_t v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 0);
      v98.i32[3] = 0;
      float32x4_t v99 = vrsqrteq_f32(v98);
      float32x4_t v100 = vmulq_f32(v99, vrsqrtsq_f32(v98, vmulq_f32(v99, v99)));
      int32x4_t v101 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v97.f32[0] != 0.0)), 0x1FuLL));
      v101.i32[3] = 0;
      float32x4_t v102 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v101), (int8x16_t)vmulq_f32(v96, vmulq_f32(v100, vrsqrtsq_f32(v98, vmulq_f32(v100, v100)))), (int8x16_t)v96);
      float32x4_t v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), (int8x16_t)v102, 0xCuLL);
      float32x4_t v104 = vmlaq_f32(vmulq_f32(v103, vnegq_f32(v90)), v102, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL));
      float32x4_t v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL);
      float32x4_t v106 = vmulq_f32(v104, v104);
      v106.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), v106)).u64[0];
      float32x4_t v107 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 0);
      v107.i32[3] = 0;
      float32x4_t v108 = vrsqrteq_f32(v107);
      float32x4_t v109 = vmulq_f32(v108, vrsqrtsq_f32(v107, vmulq_f32(v108, v108)));
      int32x4_t v110 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v106.f32[0] != 0.0)), 0x1FuLL));
      v110.i32[3] = 0;
      float32x4_t v111 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v110), (int8x16_t)vmulq_f32(vmulq_f32(v109, vrsqrtsq_f32(v107, vmulq_f32(v109, v109))), v105), vextq_s8(vextq_s8((int8x16_t)v102, (int8x16_t)v102, 0xCuLL), (int8x16_t)v102, 8uLL));
      float32x4_t v112 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v111, (int32x4_t)v111), (int8x16_t)v111, 0xCuLL), vnegq_f32(v102)), v111, v103);
      float32x4_t v113 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL);
      int32x4_t v114 = (int32x4_t)vmulq_f32(v112, v112);
      v114.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v114.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v114, 2), *(float32x2_t *)v114.i8)).u32[0];
      *(float32x2_t *)v100.f32 = vrsqrte_f32((float32x2_t)v114.u32[0]);
      *(float32x2_t *)v100.f32 = vmul_f32(*(float32x2_t *)v100.f32, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32)));
      int8x16_t v115 = (int8x16_t)vmulq_n_f32(v113, vmul_f32(*(float32x2_t *)v100.f32, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32))).f32[0]);
      float v116 = v102.f32[2] + (float)(v111.f32[0] + *(float *)&v115.i32[1]);
      if (v116 > 0.0)
      {
        float v117 = sqrtf(v116 + 1.0);
        float32x4_t v118 = (float32x4_t)vzip1q_s32((int32x4_t)v111, (int32x4_t)v102);
        v118.i32[0] = v115.i32[2];
        float32x4_t v119 = (float32x4_t)vtrn2q_s32((int32x4_t)v102, vzip2q_s32((int32x4_t)v102, (int32x4_t)v111));
        v119.i32[2] = v115.i32[0];
        float32x4_t v121 = vsubq_f32(v118, v119);
        v118.f32[3] = v117;
        v119.f32[3] = v117;
        float32x4_t v120 = vmulq_f32(v118, v119);
        v121.i32[3] = v120.i32[3];
LABEL_57:
        v120.f32[0] = 0.5 / v117;
        float32x4_t v127 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v120.f32, 0);
        goto LABEL_58;
      }
      if (v111.f32[0] < v102.f32[2] || v111.f32[0] < *(float *)&v115.i32[1])
      {
        if (*(float *)&v115.i32[1] <= v102.f32[2])
        {
          v131.i32[0] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
          v131.i32[1] = v115.i32[2];
          float v117 = sqrtf((float)((float)(v102.f32[2] + 1.0) - v111.f32[0]) - *(float *)&v115.i32[1]);
          float32x2_t v132 = (float32x2_t)__PAIR64__(v111.u32[1], LODWORD(v117));
          float32x2_t v133 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 0);
          *(float32x2_t *)v120.f32 = vsub_f32(*(float32x2_t *)v111.f32, v133);
          v133.f32[0] = v117;
          v133.i32[0] = vmul_f32(v132, v133).u32[0];
          v133.i32[1] = v120.i32[1];
          *(float32x2_t *)v121.f32 = vadd_f32(*(float32x2_t *)v102.f32, v131);
          *(float32x2_t *)&v121.u32[2] = v133;
          goto LABEL_57;
        }
        float v122 = sqrtf((float)((float)(*(float *)&v115.i32[1] + 1.0) - v111.f32[0]) - v102.f32[2]);
        int8x16_t v128 = (int8x16_t)v102;
        *(float *)v128.i32 = v122;
        float32x2_t v129 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 2);
        *(float *)v115.i32 = v111.f32[1] + *(float *)v115.i32;
        float32x2_t v130 = vadd_f32(*(float32x2_t *)v102.f32, v129);
        v129.f32[0] = v122;
        v128.i32[0] = vmul_f32(*(float32x2_t *)v128.i8, v129).u32[0];
        v128.i32[1] = v130.i32[1];
        int32x2_t v126 = (int32x2_t)vsubq_f32(v102, (float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 2)).u64[0];
        float32x4_t v127 = (float32x4_t)vextq_s8(vextq_s8(v115, v115, 4uLL), v128, 0xCuLL);
        v127.i32[3] = v126.i32[0];
      }
      else
      {
        float v122 = sqrtf((float)((float)(v111.f32[0] + 1.0) - *(float *)&v115.i32[1]) - v102.f32[2]);
        float32x2_t v123 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 0);
        float32x2_t v124 = vadd_f32(*(float32x2_t *)v111.f32, v123);
        v123.f32[0] = v122;
        v127.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v111.u32[1], LODWORD(v122)), v123).u32[0];
        v127.i32[1] = v124.i32[1];
        LODWORD(v125) = vadd_f32(*(float32x2_t *)v102.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL)).u32[0];
        int32x2_t v126 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(v115.u32[2], v102.u32[0]), *(float32x2_t *)v102.f32);
        HIDWORD(v125) = v126.i32[1];
        v127.i64[1] = v125;
      }
      *(float *)v126.i32 = 0.5 / v122;
      float32x4_t v121 = (float32x4_t)vdupq_lane_s32(v126, 0);
LABEL_58:
      _Q1 = vmulq_f32(v121, v127);
      if (v6)
      {
        _Q4 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q1, (float32x4_t)xmmword_1B6ECB5E0), (float32x4_t)xmmword_1B6ECB5D0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL));
        float32x4_t v136 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), _Q4, 0xCuLL);
        _Q4.i32[0] = 1060439283;
        __asm { FMLA            S2, S4, V1.S[3] }
        _Q1 = vaddq_f32(vmlaq_laneq_f32(vmulq_f32(_Q1, v148), (float32x4_t)xmmword_1B6ECB5D0, _Q1, 3), v136);
        _Q1.i32[3] = _S2;
      }
      sub_1B683FC58(v152, _Q1, v11);
      *char v87 = v88;
LABEL_41:
      ++v86;
      ++v87;
      --v85;
    }
    while (v85);
LABEL_60:
    char v14 = v139;
LABEL_61:
    sub_1B6345178(v12, (unsigned __int16 **)v166, (uint64_t)v173);
    sub_1B634507C((char *)v147);
    ecs_stack_allocator_pop_snapshot(v13);
    if (v14)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v147 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v147 + 376));
    }
    swift_release();
    uint64_t v15 = v30 + 1;
    if (v15 != v143) {
      continue;
    }
    break;
  }
  sub_1B62CA064((uint64_t)v156);
LABEL_66:
  swift_release();
  sub_1B632F170(v158);
  return sub_1B632F170(v158);
}

uint64_t getEnumTagSinglePayload for OrientationOverVelocity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for OrientationOverVelocity()
{
  return &type metadata for OrientationOverVelocity;
}

ValueMetadata *type metadata accessor for OrientationOverVelocity.DirectionAxis()
{
  return &type metadata for OrientationOverVelocity.DirectionAxis;
}

unint64_t sub_1B6D46614()
{
  unint64_t result = qword_1E9DD9740;
  if (!qword_1E9DD9740)
  {
    sub_1B62D83C0(255, &qword_1E9DD9748, (uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9740);
  }
  return result;
}

unint64_t sub_1B6D46694()
{
  unint64_t result = qword_1E9DD9750;
  if (!qword_1E9DD9750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9750);
  }
  return result;
}

float sub_1B6D466E8(void *a1)
{
  sub_1B6D46918(0, &qword_1E9DD9758, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  float v9 = (char *)&v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D468C4();
  sub_1B6E33A48();
  if (!v1)
  {
    char v14 = 0;
    sub_1B6E32DC8();
    float v2 = v10;
    char v13 = 1;
    sub_1B66C5F9C();
    sub_1B6E32D78();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B6D468C4()
{
  unint64_t result = qword_1E9DD9760;
  if (!qword_1E9DD9760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9760);
  }
  return result;
}

void sub_1B6D46918(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6D468C4();
    unint64_t v7 = a3(a1, &type metadata for OrientationOverVelocity.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *_s3VFX23OrientationOverVelocityV13DirectionAxisOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D46A48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OrientationOverVelocity.CodingKeys()
{
  return &type metadata for OrientationOverVelocity.CodingKeys;
}

unint64_t sub_1B6D46A84()
{
  unint64_t result = qword_1E9DD9770;
  if (!qword_1E9DD9770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9770);
  }
  return result;
}

unint64_t sub_1B6D46ADC()
{
  unint64_t result = qword_1E9DD9778;
  if (!qword_1E9DD9778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9778);
  }
  return result;
}

unint64_t sub_1B6D46B34()
{
  unint64_t result = qword_1E9DD9780;
  if (!qword_1E9DD9780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9780);
  }
  return result;
}

uint64_t sub_1B6D46B88()
{
  return 1701667182;
}

uint64_t sub_1B6D46B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B6D46C20(uint64_t a1)
{
  unint64_t v2 = sub_1B6D47EC8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D46C5C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D47EC8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D46C98@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1B6D47F1C(0, &qword_1E9DD97A8, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  float v10 = (char *)&v15 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D47EC8();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = sub_1B6E32D98();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  a2[1] = v13;
  return result;
}

uint64_t sub_1B6D46E24(void *a1)
{
  sub_1B6D47F1C(0, &qword_1E9DD97B8, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D47EC8();
  sub_1B6E33A88();
  sub_1B6E32F48();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

id sub_1B6D46F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  sub_1B638C21C(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  float32x4_t v109 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v91 - v11;
  MEMORY[0x1F4188790](v13, v14);
  float32x4_t v108 = (char *)&v91 - v15;
  uint64_t v16 = sub_1B6E30F48();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v18);
  uint64_t v20 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *v2;
  if (!v21[2])
  {
LABEL_5:
    uint64_t v25 = (uint64_t)v3[2];
    if (v25)
    {
      uint64_t v101 = v17;
      float32x2_t v95 = v3;
      float32x4_t v103 = v12;
      int32x4_t v93 = v20;
      id v26 = objc_allocWithZone(MEMORY[0x1E4F353B8]);
      swift_unknownObjectRetain();
      id v111 = objc_msgSend(v26, sel_initWithDevice_, v25);
      sub_1B638C21C(0, &qword_1E9DD9790, (uint64_t (*)(uint64_t))sub_1B6D47E00, MEMORY[0x1E4FBBE00]);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
      uint64_t v28 = (void *)*MEMORY[0x1E4F35370];
      *(void *)(inited + 32) = *MEMORY[0x1E4F35370];
      id v29 = objc_allocWithZone(NSNumber);
      id v30 = v28;
      id v31 = objc_msgSend(v29, sel_initWithBool_, 1);
      int8x16_t v32 = (void *)*MEMORY[0x1E4F35390];
      *(void *)(inited + 40) = v31;
      *(void *)(inited + 48) = v32;
      id v33 = objc_allocWithZone(NSNumber);
      id v34 = v32;
      id v35 = objc_msgSend(v33, sel_initWithUnsignedInteger_, 1);
      int32x4_t v36 = (void *)*MEMORY[0x1E4F35388];
      *(void *)(inited + 56) = v35;
      *(void *)(inited + 64) = v36;
      id v37 = objc_allocWithZone(NSNumber);
      id v38 = v36;
      *(void *)(inited + 72) = objc_msgSend(v37, sel_initWithUnsignedInteger_, 2);
      float32x4_t v39 = sub_1B67E0DAC(inited);
      float32x4_t v40 = (void *)sub_1B6E31768();
      id v41 = objc_msgSend(self, sel_mainBundle);
      sub_1B68090E4((uint64_t)v39);
      type metadata accessor for Option(0);
      uint64_t v94 = v25;
      uint64_t v43 = v42;
      unint64_t v44 = sub_1B6D47E70();
      float32x4_t v45 = (void *)sub_1B6E314B8();
      swift_bridgeObjectRelease();
      id v112 = 0;
      id v24 = objc_msgSend(v111, sel_newTextureWithName_scaleFactor_bundle_options_error_, v40, v41, v45, &v112, 1.0);

      id v46 = v112;
      if (v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        float32x4_t v47 = v95;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        id v112 = *v47;
        *float32x4_t v47 = (id)0x8000000000000000;
        sub_1B6331384((uint64_t)v24, a1, a2, isUniquelyReferenced_nonNull_native);
        *float32x4_t v47 = v112;

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      float32x4_t v49 = v46;
      unint64_t v105 = v44;
      uint64_t v106 = v43;
      float32x4_t v50 = (void *)sub_1B6E30D78();

      swift_willThrow();
      unint64_t v51 = (unint64_t)v95[1];
      if (v51 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_1B6E32C18();
      }
      else
      {
        uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t v53 = MEMORY[0x1E4FBC840];
      if (v52)
      {
        uint64_t v54 = 0;
        unint64_t v102 = v51 & 0xC000000000000001;
        int32x4_t v110 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v101 + 56);
        float32x4_t v99 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
        float32x4_t v97 = (void (**)(uint64_t, uint64_t))(v101 + 8);
        float v92 = (void (**)(char *, uint64_t, uint64_t))(v101 + 32);
        uint64_t v101 = MEMORY[0x1E4FBC840] + 8;
        unint64_t v100 = v51;
        uint64_t v98 = v52;
        uint64_t v107 = a1;
        float32x4_t v104 = v39;
        while (1)
        {
          if (v102) {
            id v56 = (id)MEMORY[0x1BA9B4580](v54, v51);
          }
          else {
            id v56 = *(id *)(v51 + 8 * v54 + 32);
          }
          int32x4_t v57 = v56;
          id v58 = v111;
          uint64_t v59 = a2;
          float v60 = (void *)sub_1B6E31768();
          id v61 = v57;
          sub_1B68090E4((uint64_t)v39);
          float32x4_t v62 = (void *)sub_1B6E314B8();
          swift_bridgeObjectRelease();
          id v112 = 0;
          id v24 = objc_msgSend(v58, sel_newTextureWithName_scaleFactor_bundle_options_error_, v60, v61, v62, &v112, 1.0);

          id v63 = v112;
          if (v24)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            char v87 = v95;
            char v88 = swift_isUniquelyReferenced_nonNull_native();
            id v112 = *v87;
            *char v87 = (id)0x8000000000000000;
            sub_1B6331384((uint64_t)v24, v107, v59, v88);
            *char v87 = v112;

            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_8;
          }
          float32x4_t v64 = v63;
          float32x4_t v65 = (void *)sub_1B6E30D78();

          swift_willThrow();
          id v66 = objc_msgSend(v61, sel_resourceURL);
          if (v66)
          {
            float32x2_t v67 = v66;
            uint64_t v68 = (uint64_t)v109;
            sub_1B6E30EE8();

            uint64_t v69 = *v110;
            (*v110)(v68, 0, 1, v16);
          }
          else
          {
            uint64_t v68 = (uint64_t)v109;
            uint64_t v69 = *v110;
            (*v110)((uint64_t)v109, 1, 1, v16);
          }
          int32x2_t v70 = v99;
          uint64_t v71 = (uint64_t)v103;
          sub_1B62D81E8(v68, (uint64_t)v103, (uint64_t)&qword_1EB9857F0, MEMORY[0x1E4F276F0], (uint64_t (*)(void, uint64_t, uint64_t, void))sub_1B638C21C);
          float32x2_t v72 = *v70;
          if ((*v70)(v71, 1, v16) == 1) {
            break;
          }
          uint64_t v73 = v16;
          uint64_t v74 = v108;
          sub_1B6E30EB8();
          uint64_t v75 = v71;
          uint64_t v55 = (uint64_t)v74;
          uint64_t v16 = v73;
          uint64_t v53 = MEMORY[0x1E4FBC840];
          float32x4_t v96 = *v97;
          v96(v75, v16);
          v69(v55, 0, 1, v16);
          if (v72(v55, 1, v16) == 1) {
            goto LABEL_14;
          }
          uint64_t v76 = v16;
          long long v77 = v93;
          (*v92)(v93, v55, v76);
          long long v78 = (void *)sub_1B6E30E78();
          sub_1B68090E4((uint64_t)v104);
          long long v79 = (void *)sub_1B6E314B8();
          swift_bridgeObjectRelease();
          id v112 = 0;
          id v24 = objc_msgSend(v111, sel_newTextureWithContentsOfURL_options_error_, v78, v79, &v112);

          id v80 = v112;
          if (v24)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            int8x16_t v89 = v95;
            char v90 = swift_isUniquelyReferenced_nonNull_native();
            id v112 = *v89;
            id *v89 = (id)0x8000000000000000;
            sub_1B6331384((uint64_t)v24, v107, v59, v90);
            id *v89 = v112;
            swift_unknownObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v96((uint64_t)v77, v76);
            return v24;
          }
          long long v81 = v80;
          float32x2_t v82 = (void *)sub_1B6E30D78();

          swift_willThrow();
          v96((uint64_t)v77, v76);

          a2 = v59;
          uint64_t v16 = v76;
          uint64_t v53 = MEMORY[0x1E4FBC840];
          unint64_t v51 = v100;
LABEL_15:
          ++v54;
          float32x4_t v39 = v104;
          if (v98 == v54) {
            goto LABEL_27;
          }
        }
        sub_1B663ABE8(v71);
        uint64_t v55 = (uint64_t)v108;
        v69((uint64_t)v108, 1, 1, v16);
LABEL_14:

        sub_1B663ABE8(v55);
        unint64_t v51 = v100;
        a2 = v59;
        goto LABEL_15;
      }
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B62D853C(0, &qword_1EB980E00, v53 + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v83 = swift_allocObject();
      *(_OWORD *)(v83 + 16) = xmmword_1B6E77050;
      id v112 = 0;
      unint64_t v113 = 0xE000000000000000;
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      id v112 = (id)0xD00000000000001DLL;
      unint64_t v113 = 0x80000001B6F53FD0;
      sub_1B6E31948();
      id v84 = v112;
      unint64_t v85 = v113;
      *(void *)(v83 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v83 + 32) = v84;
      *(void *)(v83 + 40) = v85;
      sub_1B6E338E8();
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1B62B2CE0(a1, a2);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  id v24 = *(id *)(v21[7] + 8 * v22);
  swift_unknownObjectRetain();
LABEL_8:
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t sub_1B6D47ACC(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1F4188790](result, a2);
    uint64_t v3 = *(void **)(v2 + 176);
    MEMORY[0x1F4188790](v2, v4);
    swift_retain();
    swift_retain();
    sub_1B636E6CC((uint64_t)&type metadata for AssetCatalog, (uint64_t)&off_1F0F59060, v3, (void (*)(uint64_t))sub_1B63957FC);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D47BC8(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1F4188790](result, a2);
    uint64_t v3 = *(void **)(v2 + 176);
    MEMORY[0x1F4188790](v2, v4);
    swift_retain();
    swift_retain();
    sub_1B636E6CC((uint64_t)&type metadata for AssetCatalog, (uint64_t)&off_1F0F59060, v3, (void (*)(uint64_t))sub_1B6395840);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *sub_1B6D47CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = *(_OWORD *)(a3 + 32);
  v31[0] = *(_OWORD *)(a3 + 16);
  v31[1] = v6;
  uint64_t v32 = *(void *)(a3 + 48);
  sub_1B62C9DA8(a2, (uint64_t)v31, 0x200000000, v8);
  uint64_t result = (uint64_t *)sub_1B62D81E8((uint64_t)v8, (uint64_t)&v9, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(void, uint64_t, uint64_t, void))sub_1B62D853C);
  if (v9)
  {
    uint64_t v20 = v9;
    int v21 = v10;
    char v22 = v11;
    uint64_t v23 = v12;
    char v24 = v13;
    uint64_t v25 = v14;
    uint64_t v26 = v15;
    long long v27 = v16;
    long long v28 = v17;
    uint64_t v29 = v18;
    uint64_t v30 = v19;
    swift_retain();
    sub_1B6DA01A4((uint64_t)&v20, a1, a4);
    swift_release();
    return sub_1B632F170(v8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureNamedAsset()
{
  return &type metadata for TextureNamedAsset;
}

uint64_t *sub_1B6D47DF4(uint64_t a1)
{
  return sub_1B6D47CC4(a1, v1[2], v1[3], v1[4]);
}

void sub_1B6D47E00()
{
  if (!qword_1E9DD9798)
  {
    type metadata accessor for Option(255);
    sub_1B6A7BD5C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DD9798);
    }
  }
}

unint64_t sub_1B6D47E70()
{
  unint64_t result = qword_1E9DD0EC0;
  if (!qword_1E9DD0EC0)
  {
    type metadata accessor for Option(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD0EC0);
  }
  return result;
}

unint64_t sub_1B6D47EC8()
{
  unint64_t result = qword_1E9DD97B0;
  if (!qword_1E9DD97B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD97B0);
  }
  return result;
}

void sub_1B6D47F1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6D47EC8();
    unint64_t v7 = a3(a1, &type metadata for TextureNamedAsset.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TextureNamedAsset.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6D4801CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureNamedAsset.CodingKeys()
{
  return &type metadata for TextureNamedAsset.CodingKeys;
}

void *assignWithCopy for AssetCatalog(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for AssetCatalog(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AssetCatalog()
{
  return &type metadata for AssetCatalog;
}

unint64_t sub_1B6D48130()
{
  unint64_t result = qword_1E9DD97C0;
  if (!qword_1E9DD97C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD97C0);
  }
  return result;
}

unint64_t sub_1B6D48188()
{
  unint64_t result = qword_1E9DD97C8;
  if (!qword_1E9DD97C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD97C8);
  }
  return result;
}

unint64_t sub_1B6D481E0()
{
  unint64_t result = qword_1E9DD97D0;
  if (!qword_1E9DD97D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD97D0);
  }
  return result;
}

uint64_t sub_1B6D48238@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B6D48258()
{
  sub_1B6E318C8();
  sub_1B6E318F8();

  return sub_1B6E31A78();
}

uint64_t sub_1B6D48314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = a8;
  uint64_t v11 = a9;
  uint64_t v12 = *(void *)(a7 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = a7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      v15 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v9 = a8;
    uint64_t v11 = a9;
  }
  if (a6)
  {
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_1B6823F48(v9, v11);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    sub_1B6E31948();
    uint64_t v18 = *(void *)(v16 + 16) - 1;
    swift_bridgeObjectRetain();
    uint64_t v19 = (uint64_t *)(v16 + 56);
    do
    {
      uint64_t v20 = *v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      if (v18) {
        sub_1B6E31948();
      }
      swift_bridgeObjectRelease();
      if (v20)
      {
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
      }
      sub_1B6E31948();
      sub_1B67B79C8(4);
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      v19 += 4;
      --v18;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return 0;
}

uint64_t sub_1B6D485C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t))
{
  sub_1B6E31948();
  uint64_t v7 = sub_1B6E31948();
  uint64_t v8 = a3(v7);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = v8 + 56;
    do
    {
      v10 += 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B67B79C8(4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1B6E31948();
  uint64_t v12 = a5(v11);
  int64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v23 = MEMORY[0x1E4FBC860];
    sub_1B6C3C3B8(0, v13, 0);
    uint64_t v14 = v12 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1B67B79C8(4);
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v19 = *(void *)(v23 + 16);
      unint64_t v18 = *(void *)(v23 + 24);
      if (v19 >= v18 >> 1) {
        sub_1B6C3C3B8(v18 > 1, v19 + 1, 1);
      }
      v14 += 32;
      *(void *)(v23 + 16) = v19 + 1;
      uint64_t v20 = v23 + 16 * v19;
      *(void *)(v20 + 32) = v15;
      *(void *)(v20 + 40) = v17;
      --v13;
    }
    while (v13);
  }
  sub_1B6646CE4();
  sub_1B6646D3C();
  sub_1B6E31638();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  if (v21)
  {
    sub_1B6E31948();
    sub_1B6E31948();
  }
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return 673212009;
}

uint64_t sub_1B6D48860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D48B70(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1B67B2870);
}

uint64_t sub_1B6D48878(uint64_t a1, uint64_t a2)
{
  return sub_1B6D48E90(a1, a2, (uint64_t (*)(uint64_t))sub_1B67B44DC);
}

uint64_t sub_1B6D48890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t))
{
  uint64_t v8 = a8;
  uint64_t v10 = *(void *)(a7 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = a7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      v13 += 16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v8 = a8;
  }
  if (a6)
  {
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  uint64_t v14 = swift_bridgeObjectRelease();
  uint64_t v15 = v8(v14);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    sub_1B6E31948();
    uint64_t v17 = *(void *)(v15 + 16) - 1;
    swift_bridgeObjectRetain();
    unint64_t v18 = (uint64_t *)(v15 + 56);
    do
    {
      uint64_t v19 = *v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      if (v17) {
        sub_1B6E31948();
      }
      swift_bridgeObjectRelease();
      if (v19)
      {
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
      }
      sub_1B6E31948();
      sub_1B67B79C8(4);
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      v18 += 4;
      --v17;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return 0;
}

uint64_t sub_1B6D48B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D48B70(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1B67B33CC);
}

uint64_t sub_1B6D48B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D48B70(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1B67B3BC0);
}

uint64_t sub_1B6D48B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  sub_1B6E31948();
  sub_1B6E31948();
  uint64_t v6 = a4(a3);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    sub_1B6E31948();
    uint64_t v8 = v6 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v9 = sub_1B6E319F8();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      if ((v9 & 1) == 0)
      {
        sub_1B67B79C8(4);
        swift_bridgeObjectRelease();
      }
      sub_1B6E31948();
      v8 += 32;
      swift_bridgeObjectRelease();
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return 0x20746375727473;
}

uint64_t sub_1B6D48CF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  unsigned int v4 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v5 = *(void *)(a1 + 8 * v3 + 32);
    uint64_t v6 = *(void *)(v5 + 16);
    uint64_t v7 = v4[2];
    uint64_t v8 = v7 + v6;
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v8 <= v4[3] >> 1)
    {
      if (!*(void *)(v5 + 16)) {
        goto LABEL_3;
      }
    }
    else
    {
      if (v7 <= v8) {
        uint64_t v10 = v7 + v6;
      }
      else {
        uint64_t v10 = v7;
      }
      unsigned int v4 = sub_1B68C3500(isUniquelyReferenced_nonNull_native, v10, 1, v4);
      if (!*(void *)(v5 + 16)) {
        goto LABEL_3;
      }
    }
    unint64_t v11 = (unint64_t)&v4[4 * v4[2] + 4];
    if (v5 + 32 < v11 + 32 * v6 && v11 < v5 + 32 + 32 * v6)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
    if (v6) {
      v4[2] += v6;
    }
LABEL_3:
    swift_bridgeObjectRelease();
    ++v3;
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return (uint64_t)v4;
}

uint64_t sub_1B6D48E78(uint64_t a1, uint64_t a2)
{
  return sub_1B6D48E90(a1, a2, (uint64_t (*)(uint64_t))sub_1B67B84A4);
}

uint64_t sub_1B6D48E90(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  sub_1B6E31948();
  uint64_t v4 = sub_1B6E31948();
  uint64_t v5 = a3(v4);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    sub_1B6E31948();
    uint64_t v7 = v5 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v8 = sub_1B6E319F8();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      if ((v8 & 1) == 0)
      {
        sub_1B67B79C8(4);
        swift_bridgeObjectRelease();
      }
      sub_1B6E31948();
      v7 += 32;
      swift_bridgeObjectRelease();
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return 0x20746375727473;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1B6D49008(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v6 = sub_1B67C09F4(a3, a4);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    sub_1B6E31948();
    uint64_t v8 = *(void *)(v6 + 16) - 1;
    swift_bridgeObjectRetain();
    uint64_t v9 = v6 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      char v10 = sub_1B6E31A08();
      swift_bridgeObjectRelease();
      if (v10)
      {
        uint64_t v11 = sub_1B6D48258();
        uint64_t v13 = v12;
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        swift_bridgeObjectRelease();
        MEMORY[0x1BA9B34C0](v11, v13, v15, v17);
        swift_bridgeObjectRelease();
      }
      if (v8) {
        sub_1B6E31948();
      }
      v9 += 32;
      sub_1B6E31948();
      sub_1B67B79C8(4);
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      --v8;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1B6E31948();
}

uint64_t sub_1B6D491D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1B6E31948();
  uint64_t v5 = a3(v4);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    sub_1B6E31948();
    uint64_t v7 = *(void *)(v5 + 16) - 1;
    swift_bridgeObjectRetain();
    uint64_t v8 = v5 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      char v9 = sub_1B6E31A08();
      swift_bridgeObjectRelease();
      if (v9)
      {
        uint64_t v10 = sub_1B6D48258();
        uint64_t v12 = v11;
        uint64_t v14 = v13;
        uint64_t v16 = v15;
        swift_bridgeObjectRelease();
        MEMORY[0x1BA9B34C0](v10, v12, v14, v16);
        swift_bridgeObjectRelease();
      }
      if (v7) {
        sub_1B6E31948();
      }
      v8 += 32;
      sub_1B6E31948();
      sub_1B67B79C8(4);
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      --v7;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return a1;
}

uint64_t sub_1B6D493A8(uint64_t a1, uint64_t a2)
{
  return sub_1B6D4967C(a1, a2, (uint64_t (*)(void))sub_1B67B7CBC);
}

uint64_t sub_1B6D493C0(uint64_t a1, uint64_t a2)
{
  return sub_1B6D4967C(a1, a2, (uint64_t (*)(void))sub_1B67B8B34);
}

uint64_t sub_1B6D493D8(uint64_t a1, uint64_t a2)
{
  return sub_1B6D4967C(a1, a2, (uint64_t (*)(void))sub_1B67B86EC);
}

uint64_t sub_1B6D493F0(uint64_t a1)
{
  return sub_1B6D49438(a1, sub_1B67C5420);
}

uint64_t sub_1B6D49408(uint64_t a1, char a2)
{
  return sub_1B6D49558(a1, a2, (uint64_t (*)(uint64_t, void))sub_1B69C7134);
}

uint64_t sub_1B6D49420(uint64_t a1)
{
  return sub_1B6D49438(a1, (uint64_t (*)(void))sub_1B6B39244);
}

uint64_t sub_1B6D49438(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      char v5 = sub_1B6E31A08();
      swift_bridgeObjectRelease();
      if ((v5 & 1) == 0) {
        sub_1B6E31948();
      }
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B6D49540(uint64_t a1, char a2)
{
  return sub_1B6D49558(a1, a2, (uint64_t (*)(uint64_t, void))sub_1B6B38DAC);
}

uint64_t sub_1B6D49558(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, void))
{
  uint64_t v3 = a3(a1, a2 & 1);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      char v6 = sub_1B6E31A08();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        sub_1B6E31948();
      }
      v5 += 32;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B6D49664(uint64_t a1, uint64_t a2)
{
  return sub_1B6D4967C(a1, a2, (uint64_t (*)(void))sub_1B6828C28);
}

uint64_t sub_1B6D4967C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      char v6 = sub_1B6E31A08();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        sub_1B6E31948();
      }
      v5 += 32;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B6D49784(uint64_t *a1)
{
  uint64_t v1 = sub_1B682316C(a1);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      char v4 = sub_1B6E31A08();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        sub_1B6E31948();
      }
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  return 0;
}

ValueMetadata *type metadata accessor for CodeEmitter.Code()
{
  return &type metadata for CodeEmitter.Code;
}

void *sub_1B6D49898(char a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = type metadata accessor for ImplicitConstantNode(0);
    uint64_t v4 = type metadata accessor for ImplicitNilNode(0);
    uint64_t v5 = type metadata accessor for ImplicitStateNode(0);
  }
  else
  {
    uint64_t v3 = type metadata accessor for ConstantNode(0);
    uint64_t v4 = type metadata accessor for NilNode(0);
    uint64_t v5 = type metadata accessor for StateNode(0);
  }
  char v6 = 0;
  switch(a2 >> 60)
  {
    case 1uLL:
    case 2uLL:
LABEL_12:
      sub_1B67C52A4(a2);
      sub_1B69AFB0C(a2, (uint64_t)&v22, 0.0);
      unint64_t v21 = a2;
      uint64_t v7 = (void *)(*(uint64_t (**)(unint64_t *, uint64_t, void))(v3 + 304))(&v21, 1, 0);
      goto LABEL_13;
    case 3uLL:
    case 7uLL:
      return v6;
    case 4uLL:
      char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      type metadata accessor for ImplicitEntityAssetNode(0);
      char v6 = (void *)swift_allocObject();
      *((unsigned char *)v6 + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind) = v8;
      *(void *)((char *)v6 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity) = 0xFFFFFFFFLL;
      _OWORD v6[2] = MEMORY[0x1E4FBC860];
      v6[3] = 0;
      void v6[4] = 0;
      goto LABEL_10;
    case 5uLL:
      char v9 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      swift_unknownObjectWeakInit();
      uint64_t v24 = 0;
      swift_unknownObjectWeakAssign();
      uint64_t v25 = 0x3E6C6C756E3CLL;
      unint64_t v26 = 0xE600000000000000;
      sub_1B6649008((uint64_t)v23, (uint64_t)&v21);
      type metadata accessor for ImplicitWorldReferenceNode(0);
      char v6 = (void *)swift_allocObject();
      sub_1B664D9F0((uint64_t)&v21, (uint64_t)v23);
      *((unsigned char *)v6 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind) = v9;
      sub_1B664D9F0((uint64_t)v23, (uint64_t)v6 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
      uint64_t v10 = MEMORY[0x1E4FBC860];
      v6[3] = 0;
      void v6[4] = 0;
      _OWORD v6[2] = v10;
      sub_1B6E31108();
      sub_1B66490B8((uint64_t)v23);
      sub_1B66490B8((uint64_t)&v21);
      return v6;
    case 6uLL:
      char v11 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      type metadata accessor for SamplerNode(0);
      char v6 = (void *)swift_allocObject();
      *((unsigned char *)v6 + OBJC_IVAR____TtC3VFX11SamplerNode_textureType) = v11;
      uint64_t v12 = MEMORY[0x1E4FBC860];
      v6[3] = 0;
      void v6[4] = 0;
      _OWORD v6[2] = v12;
LABEL_10:
      sub_1B6E31108();
      break;
    case 8uLL:
      char v6 = 0;
      switch(__ROR8__(a2, 3) ^ 0x1000000000000000)
      {
        case 1:
        case 3:
        case 4:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x18:
          return v6;
        case 2:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xALL:
        case 0xBLL:
        case 0xCLL:
        case 0xDLL:
        case 0xELL:
        case 0x10:
        case 0x16:
        case 0x17:
          goto LABEL_12;
        case 0xFLL:
          type metadata accessor for ColorRampTextureNode(0);
          char v6 = (void *)swift_allocObject();
          uint64_t v14 = (char *)v6 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp;
          sub_1B629CD98();
          uint64_t v15 = (_OWORD *)swift_allocObject();
          __asm { FMOV            V1.4S, #1.0 }
          v15[1] = xmmword_1B6E76B30;
          unint64_t v15[2] = _Q1;
          v15[3] = xmmword_1B6E4F370;
          *(void *)uint64_t v14 = v15;
          *((void *)v14 + 1) = &unk_1F0FA83D8;
          v14[16] = 1;
          *(void *)((char *)v6 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = 0xFFFFFFFFLL;
          _OWORD v6[2] = MEMORY[0x1E4FBC860];
          v6[3] = 0;
          void v6[4] = 0;
          sub_1B6E31108();
          break;
        case 0x11:
          type metadata accessor for CurveTextureNode(0);
          swift_allocObject();
          uint64_t v7 = sub_1B69C8FC0();
          goto LABEL_13;
        case 0x12:
          uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(v5 + 104))(v5);
          goto LABEL_13;
        default:
          goto LABEL_5;
      }
      break;
    default:
LABEL_5:
      uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(v4 + 104))(v5);
LABEL_13:
      char v6 = v7;
      break;
  }
  return v6;
}

void *sub_1B6D49CAC(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v7 = 0;
  uint64_t v24 = swift_bridgeObjectRetain() + 112;
  char v8 = (void *)MEMORY[0x1E4FBC860];
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v7 << 6);
  while (1)
  {
    uint64_t v11 = *(void *)(a1 + 56) + 56 * v10;
    if (*(unsigned char *)(v11 + 48) == 1)
    {
      uint64_t v14 = *(void *)(v11 + 40);
      uint64_t v25 = v8;
      uint64_t v16 = *(void *)(v11 + 16);
      uint64_t v15 = *(void *)(v11 + 24);
      uint64_t v17 = *(void *)v11;
      uint64_t v26 = *(void *)(v11 + 8);
      uint64_t v29 = *(void *)(v11 + 32);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v27 = v16;
      unint64_t v18 = v25;
      swift_bridgeObjectRetain();
      uint64_t v28 = v15;
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v18 = sub_1B68C2A7C(0, v25[2] + 1, 1, v25);
      }
      unint64_t v20 = v18[2];
      unint64_t v19 = v18[3];
      unint64_t v21 = v18;
      if (v20 >= v19 >> 1) {
        unint64_t v21 = sub_1B68C2A7C(v19 > 1, v20 + 1, 1, v18);
      }
      char v8 = v21;
      v21[2] = v20 + 1;
      uint64_t v22 = &v21[6 * v20];
      void v22[4] = v17;
      v22[5] = v26;
      v22[6] = v27;
      void v22[7] = v28;
      v22[8] = v29;
      v22[9] = v14;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v12 = v7 + 1;
    if (v7 + 1 >= v6) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    if (!v13)
    {
      uint64_t v12 = v7 + 2;
      if (v7 + 2 >= v6) {
        goto LABEL_27;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v12);
      if (!v13)
      {
        uint64_t v12 = v7 + 3;
        if (v7 + 3 >= v6) {
          goto LABEL_27;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v12);
        if (!v13)
        {
          uint64_t v12 = v7 + 4;
          if (v7 + 4 >= v6) {
            goto LABEL_27;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v12);
          if (!v13)
          {
            uint64_t v12 = v7 + 5;
            if (v7 + 5 >= v6) {
              goto LABEL_27;
            }
            unint64_t v13 = *(void *)(v2 + 8 * v12);
            if (!v13) {
              break;
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
    uint64_t v7 = v12;
  }
  while (v6 - 6 != v7)
  {
    unint64_t v13 = *(void *)(v24 + 8 * v7++);
    if (v13)
    {
      uint64_t v12 = v7 + 5;
      goto LABEL_20;
    }
  }
LABEL_27:
  swift_release();
  return v8;
}

void *sub_1B6D49F10(uint64_t a1, char a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = 0;
  uint64_t v22 = swift_bridgeObjectRetain() + 112;
  uint64_t v26 = (void *)MEMORY[0x1E4FBC860];
  char v21 = a2;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_21;
    }
    uint64_t v12 = v9 + 1;
    if (v9 + 1 >= v8) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    if (!v13)
    {
      uint64_t v12 = v9 + 2;
      if (v9 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v12);
      if (!v13)
      {
        uint64_t v12 = v9 + 3;
        if (v9 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v12);
        if (!v13)
        {
          uint64_t v12 = v9 + 4;
          if (v9 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v12);
          if (!v13)
          {
            uint64_t v12 = v9 + 5;
            if (v9 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v13 = *(void *)(v4 + 8 * v12);
            if (!v13) {
              break;
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v12 << 6);
    uint64_t v9 = v12;
LABEL_21:
    sub_1B6D52094(*(void *)(a1 + 56) + 832 * v11, (uint64_t)v24);
    sub_1B6D52094((uint64_t)v24, (uint64_t)v25);
    if (sub_1B6313160((uint64_t)v25) == 1)
    {
      if ((sub_1B6D52094((uint64_t)v24, (uint64_t)v23), nullsub_1(v23), uint64_t v15 = v14, (a2 & 1) == 0)
        || (uint64_t v16 = v14[2]) == 0
        || (v14[1] != 0x6E69726F68747561 || v16 != 0xEE00747265765F67) && (sub_1B6E334B8() & 1) == 0)
      {
        sub_1B6AD8D4C((uint64_t)v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = sub_1B68C2BAC(0, v26[2] + 1, 1, v26);
        }
        unint64_t v18 = v26[2];
        unint64_t v17 = v26[3];
        if (v18 >= v17 >> 1) {
          uint64_t v26 = sub_1B68C2BAC(v17 > 1, v18 + 1, 1, v26);
        }
        unint64_t v19 = v26;
        _OWORD v26[2] = v18 + 1;
        memcpy(&v19[103 * v18 + 4], v15, 0x338uLL);
        a2 = v21;
      }
    }
  }
  while (v8 - 6 != v9)
  {
    unint64_t v13 = *(void *)(v22 + 8 * v9++);
    if (v13)
    {
      uint64_t v12 = v9 + 5;
      goto LABEL_20;
    }
  }
LABEL_32:
  swift_release();
  return v26;
}

void *sub_1B6D4A1D8(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v7 = 0;
  uint64_t v20 = swift_bridgeObjectRetain() + 112;
  int64_t v8 = (void *)MEMORY[0x1E4FBC860];
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v7 << 6);
  while (1)
  {
    uint64_t v11 = *(void *)(a1 + 56) + 80 * v10;
    if (*(unsigned char *)(v11 + 72) == 1)
    {
      id v14 = *(id *)v11;
      uint64_t v25 = *(void *)(v11 + 40);
      uint64_t v26 = *(void **)(v11 + 64);
      uint64_t v21 = *(void *)(v11 + 8);
      uint64_t v22 = *(void *)(v11 + 16);
      uint64_t v23 = *(void *)(v11 + 24);
      uint64_t v24 = *(void *)(v11 + 32);
      uint64_t v28 = *(void *)(v11 + 48);
      uint64_t v27 = *(void *)(v11 + 56);
      sub_1B67A2324(*(id *)v11, v21, v22, v23, v24, v25, v28, v27, v26, 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v8 = sub_1B68C2CE4(0, v8[2] + 1, 1, v8);
      }
      unint64_t v16 = v8[2];
      unint64_t v15 = v8[3];
      unint64_t v17 = v8;
      if (v16 >= v15 >> 1) {
        unint64_t v17 = sub_1B68C2CE4(v15 > 1, v16 + 1, 1, v8);
      }
      _DWORD v17[2] = v16 + 1;
      int64_t v8 = v17;
      unint64_t v18 = &v17[9 * v16];
      _OWORD v18[4] = v14;
      v18[5] = v21;
      v18[6] = v22;
      unsigned char v18[7] = v23;
      v18[8] = v24;
      v18[9] = v25;
      v18[10] = v28;
      v18[11] = v27;
      v18[12] = v26;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v12 = v7 + 1;
    if (v7 + 1 >= v6) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    if (!v13)
    {
      uint64_t v12 = v7 + 2;
      if (v7 + 2 >= v6) {
        goto LABEL_27;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v12);
      if (!v13)
      {
        uint64_t v12 = v7 + 3;
        if (v7 + 3 >= v6) {
          goto LABEL_27;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v12);
        if (!v13)
        {
          uint64_t v12 = v7 + 4;
          if (v7 + 4 >= v6) {
            goto LABEL_27;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v12);
          if (!v13)
          {
            uint64_t v12 = v7 + 5;
            if (v7 + 5 >= v6) {
              goto LABEL_27;
            }
            unint64_t v13 = *(void *)(v2 + 8 * v12);
            if (!v13) {
              break;
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
    uint64_t v7 = v12;
  }
  while (v6 - 6 != v7)
  {
    unint64_t v13 = *(void *)(v20 + 8 * v7++);
    if (v13)
    {
      uint64_t v12 = v7 + 5;
      goto LABEL_20;
    }
  }
LABEL_27:
  swift_release();
  return v8;
}

uint64_t sub_1B6D4A438()
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  sub_1B6D51704(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  uint64_t v3 = MEMORY[0x1F4188790](v1 - 8, v2);
  unint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3, v6);
  int64_t v8 = (char *)&v37 - v7;
  uint64_t v9 = sub_1B6E30F48();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9, v11);
  id v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v12, v15);
  float32x4_t v39 = (char *)&v37 - v17;
  unint64_t v18 = *(void **)(v0 + 144);
  if (v18)
  {
    uint64_t v19 = v0 + OBJC_IVAR____TtC3VFX11ShaderCache_urlToSaveBinaryArchiveTo;
    sub_1B663AB08(v19, (uint64_t)v8);
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    int v21 = v20(v8, 1, v9);
    id v38 = v18;
    swift_unknownObjectRetain();
    sub_1B663ABE8((uint64_t)v8);
    if (v21 == 1)
    {
      id v22 = objc_msgSend(self, sel_defaultManager);
      id v23 = objc_msgSend(v22, sel_temporaryDirectory);

      sub_1B6E30EE8();
      uint64_t v24 = v39;
      sub_1B6E30EB8();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    }
    else
    {
      sub_1B663AB08(v19, (uint64_t)v5);
      v20(v5, 1, v9);
      uint64_t v24 = v39;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v39, v5, v9);
    }
    uint64_t v25 = (void *)sub_1B6E30E78();
    id v41 = 0;
    unsigned int v26 = objc_msgSend(v38, sel_serializeToURL_error_, v25, &v41);

    if (v26)
    {
      uint64_t v27 = qword_1EB9852D0;
      id v28 = v41;
      if (v27 != -1) {
        swift_once();
      }
      id v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      id v41 = (id)0xD000000000000021;
      unint64_t v42 = 0x80000001B6F54140;
      sub_1B6D516BC((unint64_t *)&qword_1E9DD0020, MEMORY[0x1E4F276F0]);
      sub_1B6E33098();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      uint64_t v29 = (uint64_t)v41;
      uint64_t v30 = v42;
      int v31 = sub_1B6E32168();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      id v41 = 0;
      swift_retain();
      sub_1B6B33E34(v31, (uint64_t *)&v41, v29, v30);
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v24, v9);
    }
    else
    {
      id v32 = v41;
      id v33 = (void *)sub_1B6E30D78();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v9);
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      id v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      sub_1B6E31948();
      float32x4_t v40 = v33;
      sub_1B666BD6C();
      sub_1B6E32B18();
      uint64_t v34 = (uint64_t)v41;
      uint64_t v35 = v42;
      int v36 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      id v41 = 0;
      swift_retain();
      sub_1B6B33E34(v36, (uint64_t *)&v41, v34, v35);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B6D4AA50()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1B6E30F48();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  uint64_t v29 = v3;
  uint64_t v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = sub_1B6E309A8();
  MEMORY[0x1F4188790](v11, v12);
  sub_1B6E30A08();
  swift_allocObject();
  sub_1B6E309F8();
  uint64_t v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26CD0];
  sub_1B6D51704(0, &qword_1E9DD04B0, MEMORY[0x1E4F26CD0], MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B6E76B30;
  sub_1B6E30998();
  sub_1B6E30988();
  uint64_t v30 = v14;
  sub_1B6D516BC(&qword_1E9DD04B8, MEMORY[0x1E4F26CD0]);
  sub_1B6D51704(0, &qword_1E9DD04C0, v13, MEMORY[0x1E4FBB320]);
  sub_1B67E95A0();
  sub_1B6E327B8();
  sub_1B6E309B8();
  uint64_t v30 = v1;
  sub_1B6D51668();
  swift_retain();
  uint64_t v15 = sub_1B6E309C8();
  unint64_t v17 = v16;
  swift_release();
  id v18 = objc_msgSend(self, sel_defaultManager);
  id v19 = objc_msgSend(v18, sel_temporaryDirectory);

  sub_1B6E30EE8();
  sub_1B6E30EB8();
  uint64_t v20 = v28;
  uint64_t v21 = v29 + 8;
  id v22 = *(void (**)(char *, uint64_t))(v29 + 8);
  v22(v7, v28);
  sub_1B6E30FF8();
  uint64_t v29 = v21;
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  v27[1] = qword_1EB997FD0;
  swift_retain();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  uint64_t v30 = 0xD000000000000023;
  unint64_t v31 = 0x80000001B6F540C0;
  sub_1B6D516BC((unint64_t *)&qword_1E9DD0020, MEMORY[0x1E4F276F0]);
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  uint64_t v23 = v30;
  uint64_t v24 = v31;
  int v25 = sub_1B6E32168();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v30 = 0;
  swift_retain();
  sub_1B6B33E34(v25, &v30, v23, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1B62C2360(v15, v17);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v22)(v10, v20);
}

uint64_t sub_1B6D4B0D4(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6D52C68(0, &qword_1E9DD99E8, (uint64_t (*)(void))sub_1B6D52ACC, (uint64_t)&_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysON, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D52ACC();
  sub_1B6E33A88();
  char v15 = 0;
  sub_1B6E32F48();
  if (!v2)
  {
    char v14 = 1;
    sub_1B6E32F48();
    v12[1] = *(void *)(v3 + 32);
    char v13 = 2;
    sub_1B6D52B20(0, &qword_1E9DD99F8, (uint64_t)&_s21FunctionConstantCoderVN, MEMORY[0x1E4FBB320]);
    sub_1B6D51F0C(&qword_1E9DD9A00, &qword_1E9DD99F8, (uint64_t)&_s21FunctionConstantCoderVN, (void (*)(void))sub_1B6D52B6C);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6D4B304(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BADD48(*a1, *a2);
}

uint64_t sub_1B6D4B310()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4B3B8()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D4B44C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4B4F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B68E1038();
  *a1 = result;
  return result;
}

void sub_1B6D4B528(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000073;
  int v3 = *v1;
  unint64_t v4 = 0x656E696C65706970;
  unint64_t v5 = 0x80000001B6F2E430;
  if (v3 == 1) {
    unint64_t v5 = 0xE900000000000073;
  }
  else {
    unint64_t v4 = 0xD000000000000010;
  }
  BOOL v6 = v3 == 0;
  if (*v1) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 0x656972617262696CLL;
  }
  if (!v6) {
    unint64_t v2 = v5;
  }
  *a1 = v7;
  a1[1] = v2;
}

uint64_t sub_1B6D4B58C()
{
  unint64_t v1 = 0x656E696C65706970;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656972617262696CLL;
  }
}

uint64_t sub_1B6D4B5EC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B68E1038();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D4B61C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51E64();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4B658(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51E64();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4B694(char *a1, char *a2)
{
  return sub_1B6BADE5C(*a1, *a2);
}

uint64_t sub_1B6D4B6A0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4B724()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D4B794()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4B814@<X0>(char *a1@<X8>)
{
  return sub_1B6BE07F0(a1);
}

void sub_1B6D4B820(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x7368746170;
  if (*v1) {
    unint64_t v2 = 0xD000000000000015;
  }
  unint64_t v3 = 0x80000001B6F2E450;
  if (!*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6D4B860()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0x7368746170;
  }
}

uint64_t sub_1B6D4B89C@<X0>(char *a1@<X8>)
{
  return sub_1B6BE08CC(a1);
}

uint64_t sub_1B6D4B8A8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51E10();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4B8E4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51E10();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4B920(char *a1, char *a2)
{
  return sub_1B6BADC9C(*a1, *a2);
}

uint64_t sub_1B6D4B92C()
{
  return sub_1B6BCEEE4();
}

uint64_t sub_1B6D4B934()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D4B9A8()
{
  return sub_1B69EBFCC();
}

uint64_t sub_1B6D4B9B0@<X0>(char *a1@<X8>)
{
  return sub_1B6BE07F0(a1);
}

void sub_1B6D4B9BC(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  else {
    unint64_t v2 = 0xD000000000000011;
  }
  unint64_t v3 = 0x80000001B6F2E3E0;
  if (*v1) {
    unint64_t v3 = 0x80000001B6F2E400;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1B6D4BA00()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_1B6D4BA40@<X0>(char *a1@<X8>)
{
  return sub_1B6BE08CC(a1);
}

uint64_t sub_1B6D4BA4C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51DBC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4BA88(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51DBC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4BAC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BADB70(*a1, *a2);
}

uint64_t sub_1B6D4BAD0()
{
  uint64_t v1 = 0x6E6F6974636E7566;
  if (*v0 != 1) {
    uint64_t v1 = 0x746E6174736E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C6562616CLL;
  }
}

uint64_t sub_1B6D4BB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D51114(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D4BB5C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D52ACC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4BB98(uint64_t a1)
{
  unint64_t v2 = sub_1B6D52ACC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4BBD4(void *a1)
{
  return sub_1B6D4B0D4(a1);
}

uint64_t sub_1B6D4BC10(void *a1, uint64_t a2)
{
  uint64_t v90 = a2;
  unint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  sub_1B6D52C68(0, &qword_1E9DD98B0, (uint64_t (*)(void))sub_1B6D51DBC, (uint64_t)&_s19PipelineScriptCoderV18PipelineCodingKeysON, MEMORY[0x1E4FBBDE0]);
  uint64_t v88 = v4;
  uint64_t v86 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v5);
  char v87 = (char *)&v80 - v6;
  sub_1B6D52C68(0, &qword_1E9DD98C0, (uint64_t (*)(void))sub_1B6D51E10, (uint64_t)&_s19PipelineScriptCoderV19LibrariesCodingKeysON, v3);
  uint64_t v8 = v7;
  uint64_t v97 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v80 - v10;
  sub_1B6D52C68(0, &qword_1E9DD98D0, (uint64_t (*)(void))sub_1B6D51E64, (uint64_t)&_s19PipelineScriptCoderV10CodingKeysON, v3);
  uint64_t v13 = v12;
  uint64_t v89 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  unint64_t v16 = (char *)&v80 - v15;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D51E64();
  uint64_t v17 = v90;
  sub_1B6E33A88();
  LOBYTE(v115) = 0;
  sub_1B6D51E10();
  sub_1B6E32ED8();
  unint64_t v115 = *(void *)(v17 + 32);
  LOBYTE(v117) = 0;
  sub_1B6D52B20(0, &qword_1E9DD98E0, (uint64_t)&type metadata for ShaderCache.Library, MEMORY[0x1E4FBB320]);
  sub_1B6D51F0C(&qword_1E9DD98E8, &qword_1E9DD98E0, (uint64_t)&type metadata for ShaderCache.Library, (void (*)(void))sub_1B6D51EB8);
  uint64_t v18 = v114;
  sub_1B6E32FA8();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v97 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v16, v13);
  }
  else
  {
    id v84 = v11;
    uint64_t v83 = v16;
    uint64_t v85 = v8;
    uint64_t v81 = v17 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
    uint64_t v20 = *(os_unfair_lock_s **)(v17 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
    os_unfair_lock_lock(v20);
    uint64_t v21 = swift_bridgeObjectRetain();
    id v22 = sub_1B6D49CAC(v21);
    uint64_t v82 = 0;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v20);
    int64_t v23 = v22[2];
    uint64_t v24 = v97;
    if (v23)
    {
      unint64_t v117 = MEMORY[0x1E4FBC860];
      sub_1B6C3D868(0, v23, 0);
      uint64_t v25 = 0;
      unint64_t v26 = v117;
      id v80 = v22;
      float v92 = v22 + 4;
      uint64_t v91 = v13;
      int64_t v93 = v23;
      do
      {
        uint64_t v27 = v13;
        uint64_t v103 = v25;
        uint64_t v28 = &v92[6 * v25];
        uint64_t v30 = *v28;
        uint64_t v29 = v28[1];
        unint64_t v32 = v28[2];
        uint64_t v31 = v28[3];
        uint64_t v34 = (void *)v28[4];
        uint64_t v33 = v28[5];
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        uint64_t v99 = v30;
        swift_unknownObjectRetain();
        uint64_t v104 = v33;
        unint64_t v115 = sub_1B62DADA8(v33);
        sub_1B638491C();
        sub_1B6E31A38();
        unint64_t v115 = v29;
        unint64_t v116 = v32;
        unint64_t v105 = v32;
        swift_bridgeObjectRetain();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        unint64_t v101 = v115;
        unint64_t v102 = v34;
        unint64_t v100 = v116;
        if (v34 && (id v35 = objc_msgSend(v34, sel_label, v80)) != 0)
        {
          int v36 = v35;
          uint64_t v37 = sub_1B6E31798();
          unint64_t v39 = v38;
        }
        else
        {
          uint64_t v37 = 0x616665642D786676;
          unint64_t v39 = 0xEB00000000746C75;
        }
        uint64_t v13 = v27;
        uint64_t v40 = v104;
        unint64_t v41 = MEMORY[0x1BA9B41E0](v37, v39);
        uint64_t v45 = sub_1B6D4C7F4(v41, v42, v43, v44, v29, v105, 0);
        uint64_t v98 = v46;
        swift_bridgeObjectRelease();
        int64_t v47 = *(void *)(v40 + 16);
        if (v47)
        {
          uint64_t v94 = v45;
          uint64_t v95 = v31;
          unint64_t v96 = v26;
          unint64_t v115 = MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
          sub_1B6C3D888(0, v47, 0);
          unint64_t v48 = v115;
          float32x4_t v49 = (uint64_t *)(v40 + 64);
          do
          {
            uint64_t v51 = *(v49 - 4);
            uint64_t v50 = *(v49 - 3);
            char v52 = *((unsigned char *)v49 - 16);
            uint64_t v53 = *v49;
            uint64_t v113 = v49[1];
            uint64_t v114 = v53;
            uint64_t v54 = v49[2];
            uint64_t v111 = v49[3];
            uint64_t v112 = v54;
            uint64_t v55 = v49[4];
            uint64_t v109 = v49[5];
            uint64_t v110 = v55;
            uint64_t v56 = v49[6];
            uint64_t v107 = v49[7];
            uint64_t v108 = v56;
            int v106 = *((unsigned __int8 *)v49 + 64);
            sub_1B62D5A18(v51, v50, v52);
            unint64_t v115 = v48;
            unint64_t v58 = *(void *)(v48 + 16);
            unint64_t v57 = *(void *)(v48 + 24);
            if (v58 >= v57 >> 1)
            {
              sub_1B6C3D888(v57 > 1, v58 + 1, 1);
              unint64_t v48 = v115;
            }
            v49 += 14;
            *(void *)(v48 + 16) = v58 + 1;
            unint64_t v59 = v48 + 112 * v58;
            *(void *)(v59 + 32) = v51;
            *(void *)(v59 + 40) = v50;
            *(unsigned char *)(v59 + 48) = v52;
            uint64_t v60 = v113;
            *(void *)(v59 + 64) = v114;
            *(void *)(v59 + 72) = v60;
            uint64_t v61 = v111;
            *(void *)(v59 + 80) = v112;
            *(void *)(v59 + 88) = v61;
            uint64_t v62 = v109;
            *(void *)(v59 + 96) = v110;
            *(void *)(v59 + 104) = v62;
            uint64_t v63 = v107;
            *(void *)(v59 + 112) = v108;
            *(void *)(v59 + 120) = v63;
            *(unsigned char *)(v59 + 128) = v106;
            --v47;
          }
          while (v47);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v13 = v91;
          unint64_t v26 = v96;
          uint64_t v45 = v94;
        }
        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          unint64_t v48 = MEMORY[0x1E4FBC860];
        }
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v117 = v26;
        unint64_t v65 = *(void *)(v26 + 16);
        unint64_t v64 = *(void *)(v26 + 24);
        uint64_t v24 = v97;
        if (v65 >= v64 >> 1)
        {
          sub_1B6C3D868(v64 > 1, v65 + 1, 1);
          unint64_t v26 = v117;
        }
        uint64_t v25 = v103 + 1;
        *(void *)(v26 + 16) = v65 + 1;
        id v66 = (void *)(v26 + 40 * v65);
        unint64_t v67 = v100;
        v66[4] = v101;
        v66[5] = v67;
        uint64_t v68 = v98;
        v66[6] = v45;
        v66[7] = v68;
        v66[8] = v48;
      }
      while (v25 != v93);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v26 = MEMORY[0x1E4FBC860];
    }
    unint64_t v115 = v26;
    LOBYTE(v117) = 1;
    sub_1B6D52B20(0, &qword_1E9DD98F8, (uint64_t)&_s19PipelineScriptCoderV24SpecializedFunctionCoderVN, MEMORY[0x1E4FBB320]);
    sub_1B6D51F0C(&qword_1E9DD9900, &qword_1E9DD98F8, (uint64_t)&_s19PipelineScriptCoderV24SpecializedFunctionCoderVN, (void (*)(void))sub_1B6D51F98);
    uint64_t v69 = v85;
    int32x2_t v70 = v84;
    uint64_t v71 = v82;
    sub_1B6E32FA8();
    if (v71)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v70, v69);
    }
    else
    {
      swift_bridgeObjectRelease();
      LOBYTE(v115) = 1;
      sub_1B6D51DBC();
      sub_1B6E32ED8();
      float32x2_t v72 = *(os_unfair_lock_s **)(v81 + 24);
      os_unfair_lock_lock(v72);
      uint64_t v73 = swift_bridgeObjectRetain();
      uint64_t v74 = sub_1B6D4A1D8(v73);
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v72);
      unint64_t v115 = (unint64_t)v74;
      LOBYTE(v117) = 0;
      sub_1B6D52B20(0, &qword_1E9DD9910, (uint64_t)&type metadata for ShaderCache.ComputePipeline, MEMORY[0x1E4FBB320]);
      sub_1B6D51F0C(&qword_1E9DD9918, &qword_1E9DD9910, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (void (*)(void))sub_1B6D51FEC);
      sub_1B6E32FA8();
      swift_bridgeObjectRelease();
      uint64_t v75 = *(os_unfair_lock_s **)(v81 + 24);
      os_unfair_lock_lock(v75);
      uint64_t v76 = swift_bridgeObjectRetain();
      long long v77 = sub_1B6D49F10(v76, 1);
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v75);
      unint64_t v115 = (unint64_t)v77;
      LOBYTE(v117) = 1;
      sub_1B6D52B20(0, &qword_1E9DD9928, (uint64_t)&type metadata for ShaderCache.RenderPipeline, MEMORY[0x1E4FBB320]);
      uint64_t v78 = v88;
      sub_1B6D51F0C(&qword_1E9DD9930, &qword_1E9DD9928, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (void (*)(void))sub_1B6D52040);
      long long v79 = v87;
      sub_1B6E32FA8();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v79, v78);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v84, v85);
    }
    (*(void (**)(char *, uint64_t))(v89 + 8))(v83, v13);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B6D4C7F4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v8 = a5;
  if (sub_1B6741358(a5, a6, a1, a2, a3, a4))
  {
    if (a7)
    {
      id v13 = objc_msgSend((id)swift_unknownObjectRetain(), sel_label);
      if (!v13)
      {
        swift_unknownObjectRelease();
        goto LABEL_12;
      }
      uint64_t v14 = v13;
      uint64_t v15 = sub_1B6E31798();
      unint64_t v17 = v16;
      swift_unknownObjectRelease();

      if (v15 != 0x616665642D786676)
      {
LABEL_12:
        if (sub_1B6E334B8())
        {
LABEL_13:
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_15:
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        sub_1B6E31948();
        return 0x3A7361696C61;
      }
    }
    else
    {
      unint64_t v17 = 0xEB00000000746C75;
    }
    if (v17 == 0xEB00000000746C75) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if ((sub_1B6B07004(a1, a2, a3, a4, 0x616665642D786676, 0xEB00000000746C75) & 1) == 0)
  {
    MEMORY[0x1BA9B34C0](a1, a2, a3, a4);
    goto LABEL_15;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1B6D4CA30(void *a1)
{
  return sub_1B6D4BC10(a1, *v1);
}

uint64_t sub_1B6D4CA4C(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BADF04(*a1, *a2);
}

uint64_t sub_1B6D4CA58()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4CB28()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D4CBE0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4CCAC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D51288();
  *a1 = result;
  return result;
}

void sub_1B6D4CCDC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x657079745F6469;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 25705;
      goto LABEL_3;
    case 2:
      *a1 = 0x79745F65756C6176;
      a1[1] = 0xEA00000000006570;
      break;
    case 3:
      *a1 = 0x65756C6176;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B6D4CD6C()
{
  uint64_t result = 0x657079745F6469;
  switch(*v0)
  {
    case 1:
      uint64_t result = 25705;
      break;
    case 2:
      uint64_t result = 0x79745F65756C6176;
      break;
    case 3:
      uint64_t result = 0x65756C6176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D4CDF0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D51288();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D4CE18(uint64_t a1)
{
  unint64_t v2 = sub_1B6D52C14();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4CE54(uint64_t a1)
{
  unint64_t v2 = sub_1B6D52C14();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4CE90()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4CEDC()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B6D4CEEC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4CF34@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B6D4CF88(void *a1@<X8>)
{
  *a1 = 1635017060;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1B6D4CF9C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B6D4CFF4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D52BC0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4D030(uint64_t a1)
{
  unint64_t v2 = sub_1B6D52BC0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4D06C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  sub_1B6D52C68(0, &qword_1E9DD9A10, (uint64_t (*)(void))sub_1B6D52BC0, (uint64_t)&_s21FunctionConstantCoderV15ValueCodingKeysON, MEMORY[0x1E4FBBDE0]);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v29 = (char *)&v26 - v8;
  sub_1B6D52C68(0, &qword_1E9DD9A20, (uint64_t (*)(void))sub_1B6D52C14, (uint64_t)&_s21FunctionConstantCoderV10CodingKeysON, v5);
  uint64_t v10 = v9;
  uint64_t v44 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  id v13 = (char *)&v26 - v12;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D52C14();
  sub_1B6E33A88();
  long long v14 = v3[1];
  long long v34 = *v3;
  long long v35 = v14;
  long long v15 = v3[5];
  v36[2] = v3[4];
  v36[3] = v15;
  char v37 = *((unsigned char *)v3 + 96);
  long long v16 = v3[3];
  v36[0] = v3[2];
  v36[1] = v16;
  sub_1B68D8030(v34, *((uint64_t *)&v34 + 1), v35);
  if (v17)
  {
    LOBYTE(v30) = 0;
    sub_1B6E32F48();
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v10);
      return swift_bridgeObjectRelease();
    }
    LOBYTE(v30) = 1;
    sub_1B6E32F48();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  LOBYTE(v30) = 0;
  sub_1B6E32F48();
  if (!v2)
  {
    LOBYTE(v30) = 1;
    sub_1B6E32F88();
LABEL_7:
    uint64_t v18 = v29;
    sub_1B62D6998((uint64_t)v36, (uint64_t)v38);
    uint64_t v19 = sub_1B67901E0();
    sub_1B6BBFC38(v19);
    LOBYTE(v30) = 2;
    sub_1B6E32F48();
    swift_bridgeObjectRelease();
    LOBYTE(v30) = 3;
    sub_1B6D52BC0();
    sub_1B6E32ED8();
    sub_1B62D6998((uint64_t)v38, (uint64_t)&v39);
    uint64_t v21 = v28;
    switch(v43)
    {
      case 1:
        *(void *)&long long v30 = v39;
        id v22 = &qword_1EB980E90;
        int64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
        sub_1B6D52C68(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
        uint64_t v24 = &qword_1EB97D1B8;
        goto LABEL_12;
      case 2:
        long long v30 = v39;
        id v22 = (unint64_t *)&qword_1EB980EB0;
        int64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
        sub_1B6D52C68(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
        uint64_t v24 = &qword_1EB97D1D8;
        goto LABEL_12;
      case 3:
        long long v30 = v39;
        id v22 = (unint64_t *)&qword_1EB980EF0;
        int64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
        sub_1B6D52C68(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
        uint64_t v24 = &qword_1EB97D1F8;
LABEL_12:
        uint64_t v25 = v23;
        uint64_t v21 = v28;
        sub_1B62B1224((unint64_t *)v24, v22, v25);
        goto LABEL_25;
      case 4:
        long long v30 = v39;
        sub_1B6792538();
        goto LABEL_25;
      case 5:
        long long v30 = v39;
        long long v31 = v40;
        sub_1B67924E4();
        goto LABEL_25;
      case 6:
        long long v30 = v39;
        long long v31 = v40;
        sub_1B6792490();
        goto LABEL_25;
      case 7:
        long long v30 = v39;
        *(void *)&long long v31 = v40;
        sub_1B679243C();
        goto LABEL_25;
      case 8:
        long long v30 = v39;
        long long v31 = v40;
        long long v32 = v41;
        sub_1B67923E8();
        goto LABEL_25;
      case 9:
        long long v30 = v39;
        long long v31 = v40;
        long long v32 = v41;
        sub_1B6792394();
        goto LABEL_25;
      case 10:
        long long v30 = v39;
        long long v31 = v40;
        sub_1B6792340();
        goto LABEL_25;
      case 11:
        long long v30 = v39;
        long long v31 = v40;
        long long v32 = v41;
        long long v33 = v42;
        sub_1B67922EC();
        goto LABEL_25;
      case 12:
        long long v30 = v39;
        long long v31 = v40;
        long long v32 = v41;
        long long v33 = v42;
        sub_1B6792298();
LABEL_25:
        sub_1B6E32FA8();
        break;
      case 13:
        sub_1B6E32F58();
        break;
      case 14:
        sub_1B6E32FD8();
        break;
      case 15:
        sub_1B6E33018();
        break;
      default:
        sub_1B6E32F78();
        break;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v13, v10);
}

uint64_t sub_1B6D4D7F0(void *a1)
{
  return sub_1B6D4D06C(a1);
}

uint64_t sub_1B6D4D808(char *a1, char *a2)
{
  return sub_1B6BAE07C(*a1, *a2);
}

uint64_t sub_1B6D4D814()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4D88C()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D4D8F0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4D964@<X0>(char *a1@<X8>)
{
  return sub_1B6BE07F0(a1);
}

void sub_1B6D4D970(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1752457584;
  if (!*v1) {
    uint64_t v2 = 0x6C6562616CLL;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6D4D9A4()
{
  if (*v0) {
    return 1752457584;
  }
  else {
    return 0x6C6562616CLL;
  }
}

uint64_t sub_1B6D4D9D4@<X0>(char *a1@<X8>)
{
  return sub_1B6BE08CC(a1);
}

uint64_t sub_1B6D4D9E0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D514C4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4DA1C(uint64_t a1)
{
  unint64_t v2 = sub_1B6D514C4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4DA58(void *a1)
{
  return sub_1B6D51320(a1, v1[1], v1[2], v1[3], v1[4]);
}

unint64_t sub_1B6D4DA78(char a1)
{
  unint64_t result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000036;
    }
    else {
      return 0xD000000000000021;
    }
  }
  return result;
}

uint64_t sub_1B6D4DAD8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BADA70(*a1, *a2);
}

uint64_t sub_1B6D4DAE4()
{
  return sub_1B6BCEE38();
}

uint64_t sub_1B6D4DAEC()
{
  return sub_1B69EA2CC();
}

uint64_t sub_1B6D4DAF4()
{
  return sub_1B69EC050();
}

uint64_t sub_1B6D4DAFC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B68E1038();
  *a1 = result;
  return result;
}

unint64_t sub_1B6D4DB34@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B6D4DA78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B6D4DB60()
{
  return sub_1B6D4DA78(*v0);
}

uint64_t sub_1B6D4DB68@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B68E1038();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D4DB98(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51518();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4DBD4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51518();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4DC10(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6D52C68(0, &qword_1E9DD97F0, (uint64_t (*)(void))sub_1B6D51518, (uint64_t)&_s10CodingKeysON_2, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v21 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D51518();
  sub_1B6E33A88();
  id v11 = objc_msgSend(*(id *)v3, sel_label);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_1B6E31798();
    unint64_t v15 = v14;
  }
  else
  {
    unint64_t v15 = 0xE200000000000000;
    uint64_t v13 = 16718;
  }
  unint64_t v16 = MEMORY[0x1BA9B41E0](v13, v15);
  sub_1B6D4C7F4(v16, v17, v18, v19, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 32));
  swift_bridgeObjectRelease();
  char v24 = 0;
  sub_1B6E32F48();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v23 = 1;
    sub_1B6E32F58();
    char v22 = 2;
    sub_1B6E32F88();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

unint64_t sub_1B6D4DE64(char a1)
{
  unint64_t result = 0x665F786574726576;
  switch(a1)
  {
    case 1:
    case 2:
    case 15:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0xD000000000000021;
      break;
    case 6:
      unint64_t result = 0xD000000000000025;
      break;
    case 7:
      unint64_t result = 0xD000000000000021;
      break;
    case 8:
      unint64_t result = 0xD000000000000021;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 10:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0xD000000000000019;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 16:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 17:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B6D4E084(char a1)
{
  unint64_t result = 0x665F786574726576;
  switch(a1)
  {
    case 1:
    case 2:
    case 15:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0xD000000000000021;
      break;
    case 6:
      unint64_t result = 0xD000000000000025;
      break;
    case 7:
      unint64_t result = 0xD000000000000021;
      break;
    case 8:
      unint64_t result = 0xD000000000000021;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 10:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0xD000000000000019;
      break;
    case 13:
      unint64_t result = 0xD000000000000014;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 16:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 17:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D4E2A4(void *a1)
{
  return sub_1B6D4DC10(a1);
}

uint64_t sub_1B6D4E2BC(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1B6D4E084(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1B6D4E084(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B6D4E348()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B6D4DE64(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B6D4E3AC()
{
  sub_1B6D4DE64(*v0);
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D4E400()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B6D4DE64(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B6D4E460@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D510C0();
  *a1 = result;
  return result;
}

unint64_t sub_1B6D4E490@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B6D4DE64(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B6D4E4BC()
{
  return sub_1B6D4E084(*v0);
}

uint64_t sub_1B6D4E4C4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D510C0();
  *a1 = result;
  return result;
}

void sub_1B6D4E4EC(unsigned char *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1B6D4E4F8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5156C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4E534(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5156C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4E570(void *a1)
{
  uint64_t v2 = v1;
  sub_1B6D52C68(0, &qword_1E9DD9800, (uint64_t (*)(void))sub_1B6D5156C, (uint64_t)&_s10CodingKeysON_1, MEMORY[0x1E4FBBDE0]);
  uint64_t v93 = *(void *)(v4 - 8);
  uint64_t v94 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)&v63 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D5156C();
  uint64_t v95 = v7;
  sub_1B6E33A88();
  id v8 = objc_msgSend(*(id *)v2, sel_label);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = sub_1B6E31798();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE100000000000000;
    uint64_t v10 = 43;
  }
  sub_1B69EFBF8(43, 0xE100000000000000, v10, v12);
  if (v13)
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1B6E31A78();
  unint64_t v88 = v15;
  unint64_t v89 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6E318D8();
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_1B6E31A78();
  unint64_t v82 = v21;
  unint64_t v83 = v20;
  uint64_t v81 = v22;
  uint64_t v92 = v23;
  swift_bridgeObjectRelease();
  unint64_t v24 = *(void *)(v2 + 16);
  uint64_t v26 = *(void *)(v2 + 24);
  uint64_t v25 = *(void *)(v2 + 32);
  uint64_t v28 = *(void *)(v2 + 40);
  uint64_t v27 = *(void *)(v2 + 48);
  unint64_t v29 = *(void *)(v2 + 56);
  uint64_t v30 = *(void *)(v2 + 64);
  uint64_t v90 = *(void *)(v2 + 8);
  uint64_t v91 = v30;
  uint64_t v31 = *(void *)(v2 + 72);
  unint64_t v86 = v29;
  uint64_t v87 = v31;
  uint64_t v32 = *(void *)(v2 + 80);
  uint64_t v84 = v27;
  uint64_t v85 = v32;
  long long v33 = *(_OWORD *)(v2 + 136);
  long long v34 = *(_OWORD *)(v2 + 168);
  long long v141 = *(_OWORD *)(v2 + 152);
  long long v142 = v34;
  uint64_t v143 = *(void *)(v2 + 184);
  long long v35 = *(_OWORD *)(v2 + 104);
  long long v137 = *(_OWORD *)(v2 + 88);
  long long v138 = v35;
  long long v139 = *(_OWORD *)(v2 + 120);
  long long v140 = v33;
  long long v36 = *(_OWORD *)(v2 + 192);
  long long v68 = *(_OWORD *)(v2 + 208);
  long long v69 = v36;
  long long v37 = *(_OWORD *)(v2 + 224);
  long long v66 = *(_OWORD *)(v2 + 240);
  long long v67 = v37;
  long long v65 = *(_OWORD *)(v2 + 256);
  uint64_t v76 = *(void *)(v2 + 272);
  memcpy(v136, (const void *)(v2 + 280), sizeof(v136));
  uint64_t v38 = *(void *)(v2 + 728);
  uint64_t v78 = *(void *)(v2 + 736);
  uint64_t v79 = v38;
  uint64_t v77 = *(void *)(v2 + 744);
  uint64_t v39 = *(void *)(v2 + 752);
  uint64_t v40 = *(void *)(v2 + 760);
  uint64_t v41 = *(void *)(v2 + 768);
  uint64_t v72 = *(void *)(v2 + 776);
  uint64_t v73 = v40;
  uint64_t v42 = *(void *)(v2 + 784);
  uint64_t v70 = v39;
  uint64_t v71 = v42;
  uint64_t v74 = *(void *)(v2 + 792);
  char v135 = *(unsigned char *)(v2 + 800);
  int v75 = *(unsigned __int8 *)(v2 + 801);
  v134[0] = *(void *)(v2 + 802);
  *(void *)((char *)v134 + 6) = *(void *)(v2 + 808);
  uint64_t v80 = v41;
  if (v24)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1B6D4C7F4(v89, v88, v17, v19, v90, v24, v25);
    swift_bridgeObjectRelease();
    LOBYTE(v97) = 0;
    uint64_t v44 = v94;
    char v43 = v95;
    uint64_t v45 = v144;
    sub_1B6E32F48();
    if (v45)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v43, v44);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v144 = 0;
    unint64_t v88 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v64 = v28;
    swift_bridgeObjectRelease();
    unint64_t v89 = v25;
    swift_unknownObjectRelease();
    uint64_t v63 = v26;
    swift_unknownObjectRelease();
    uint64_t v41 = v80;
  }
  else
  {
    uint64_t v63 = v26;
    uint64_t v64 = v28;
    unint64_t v88 = 0;
    unint64_t v89 = v25;
    swift_bridgeObjectRelease();
    uint64_t v44 = v94;
    char v43 = v95;
  }
  unint64_t v47 = v86;
  uint64_t v48 = v87;
  uint64_t v49 = v84;
  if (v86)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1B6D4C7F4(v83, v82, v81, v92, v49, v47, v48);
    swift_bridgeObjectRelease();
    LOBYTE(v97) = 1;
    uint64_t v50 = v144;
    sub_1B6E32F48();
    uint64_t v144 = v50;
    if (v50)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v43, v44);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v41 = v80;
    uint64_t v52 = v78;
    uint64_t v51 = v79;
    if (!v78) {
      goto LABEL_17;
    }
LABEL_14:
    uint64_t v53 = v41;
    id v54 = objc_allocWithZone(MEMORY[0x1E4F35358]);
    swift_retain();
    id v55 = objc_msgSend(v54, sel_init);
    sub_1B6A51D54(v55, v51, v52);
    uint64_t v97 = (uint64_t)v55;
    char v133 = 2;
    sub_1B6D51614();
    id v56 = v55;
    unint64_t v57 = v95;
    uint64_t v58 = v144;
    sub_1B6E32FA8();
    uint64_t v59 = v58;
    unint64_t v60 = v89;
    if (v58)
    {

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v57, v44);
    }
    swift_release();

    uint64_t v41 = v53;
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  uint64_t v52 = v78;
  uint64_t v51 = v79;
  if (v78) {
    goto LABEL_14;
  }
LABEL_17:
  unint64_t v57 = v95;
  unint64_t v60 = v89;
  uint64_t v59 = v144;
LABEL_19:
  uint64_t v61 = v76;
  LOBYTE(v97) = 3;
  sub_1B6E32F48();
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v93 + 8))(v57, v44);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v41 != 2)
    {
      LOBYTE(v97) = 4;
      sub_1B6E32F88();
      LOBYTE(v97) = 5;
      sub_1B6E32F58();
      LOBYTE(v97) = 6;
      sub_1B6E32F48();
      swift_bridgeObjectRelease();
      LOBYTE(v97) = 7;
      sub_1B6E32F48();
      swift_bridgeObjectRelease();
      LOBYTE(v97) = 8;
      sub_1B6E32F48();
      swift_bridgeObjectRelease();
      LOBYTE(v97) = 9;
      sub_1B6E32F48();
      swift_bridgeObjectRelease();
      uint64_t v41 = v80;
    }
    LOBYTE(v97) = 10;
    sub_1B6E32FF8();
    LOBYTE(v97) = 11;
    sub_1B6E32F58();
    char v133 = 14;
    sub_1B6E32F88();
    long long v110 = v140;
    long long v111 = v141;
    long long v112 = v142;
    long long v107 = v137;
    long long v108 = v138;
    uint64_t v113 = v143;
    long long v109 = v139;
    memcpy(v120, v136, sizeof(v120));
    v132[0] = v134[0];
    *(void *)((char *)v132 + 6) = *(void *)((char *)v134 + 6);
    uint64_t v97 = v90;
    unint64_t v98 = v88;
    uint64_t v99 = v63;
    unint64_t v100 = v60;
    uint64_t v101 = v64;
    uint64_t v102 = v84;
    unint64_t v103 = v86;
    uint64_t v104 = v91;
    uint64_t v105 = v87;
    uint64_t v106 = v85;
    long long v114 = v69;
    long long v115 = v68;
    long long v116 = v67;
    long long v117 = v66;
    long long v118 = v65;
    uint64_t v119 = v61;
    uint64_t v121 = v79;
    uint64_t v122 = v52;
    uint64_t v123 = v77;
    uint64_t v124 = v70;
    uint64_t v125 = v73;
    uint64_t v126 = v41;
    uint64_t v127 = v72;
    uint64_t v128 = v71;
    uint64_t v129 = v74;
    uint64_t v62 = v94;
    char v130 = v135;
    char v131 = v75;
    char v96 = 15;
    sub_1B6D515C0();
    sub_1B6E32FA8();
    return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v57, v62);
  }
}

unint64_t sub_1B6D4F174(char a1)
{
  unint64_t result = 0x6F665F6C65786970;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x616D5F6574697277;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B6D4F2B4(char a1)
{
  unint64_t result = 0x6F665F6C65786970;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x616D5F6574697277;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 6:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D4F3F4(void *a1)
{
  return sub_1B6D4E570(a1);
}

uint64_t sub_1B6D4F40C(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB5768(*a1, *a2);
}

uint64_t sub_1B6D4F418()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4F460()
{
  return sub_1B69E979C();
}

uint64_t sub_1B6D4F468()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4F4AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D512D4();
  *a1 = result;
  return result;
}

unint64_t sub_1B6D4F4DC@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B6D4F174(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B6D4F508()
{
  return sub_1B6D4F2B4(*v0);
}

uint64_t sub_1B6D4F510@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D512D4();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D4F538(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51C6C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4F574(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51C6C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4F5B0(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v19 = &v22[3];
  v16[5] = (char *)&v22[2] + 8;
  uint64_t v17 = (char *)v22 + 8;
  v16[3] = &v22[2];
  v16[4] = (char *)&v22[1] + 8;
  uint64_t v16[2] = &v22[1];
  sub_1B6D52C68(0, &qword_1E9DD9870, (uint64_t (*)(void))sub_1B6D51C6C, (uint64_t)&type metadata for ColorAttachmentsCoder.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v30 = *(uint64_t **)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)v16 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  memcpy(v24, v3, sizeof(v24));
  uint64_t v10 = 0;
  long long v26 = *(_OWORD *)&v24[23];
  long long v27 = *(_OWORD *)&v24[25];
  long long v28 = *(_OWORD *)&v24[27];
  long long v29 = *(_OWORD *)&v24[29];
  uint64_t v18 = &v24[34];
  uint64_t v20 = (void (**)(char *, uint64_t))(v30 + 1);
  unint64_t v11 = (uint64_t *)v22;
  int64x2_t v21 = (int64x2_t)xmmword_1B6E50D30;
  v16[1] = "oding of MTLBlendOperation";
  while (1)
  {
    v22[0] = v26;
    v22[1] = v27;
    v22[2] = v28;
    v22[3] = v29;
    uint64_t v13 = *v11++;
    uint64_t v12 = v13;
    if (v13) {
      break;
    }
LABEL_4:
    v10 += 56;
    if (v10 == 448) {
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
    }
  }
  uint64_t v30 = v11;
  sub_1B62C550C((uint64_t)v23, v23[3]);
  sub_1B6D51C6C();
  sub_1B6E33248();
  _sSo14MTLPixelFormatV3VFXE11descriptionSSvg_0(v12);
  LOBYTE(v22[0]) = 0;
  sub_1B6E32F48();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    memcpy(v25, v18, sizeof(v25));
    memcpy(v22, v18, 0x1B9uLL);
    sub_1B6BBFAE0(*((unsigned __int8 *)v19 + v10));
    LOBYTE(v22[0]) = 1;
    sub_1B6E32F48();
    swift_bridgeObjectRelease();
    memcpy(v22, v25, 0x1B9uLL);
    uint64_t v14 = (void *)((char *)v22 + v10);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)((char *)&v22[1] + v10), v21), (int32x4_t)vceqq_s64(*(int64x2_t *)((char *)&v22[2] + v10), v21))))) & 1) != 0|| *v14|| v14[1])
    {
      memcpy(v22, v25, 0x1B9uLL);
      LOBYTE(v22[0]) = 2;
      sub_1B6E32F58();
      memcpy(v22, v25, 0x1B9uLL);
      switch(*(void *)&v17[v10])
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          LOBYTE(v22[0]) = 3;
          sub_1B6E32F48();
          swift_bridgeObjectRelease();
          memcpy(v22, v25, 0x1B9uLL);
          switch(*(void *)((char *)v22 + v10))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
              LOBYTE(v22[0]) = 4;
              sub_1B6E32F48();
              swift_bridgeObjectRelease();
              memcpy(v22, v25, 0x1B9uLL);
              sub_1B6BBF838();
              LOBYTE(v22[0]) = 5;
              sub_1B6E32F48();
              swift_bridgeObjectRelease();
              memcpy(v22, v25, 0x1B9uLL);
              sub_1B6BBF838();
              LOBYTE(v22[0]) = 6;
              sub_1B6E32F48();
              swift_bridgeObjectRelease();
              memcpy(v22, v25, 0x1B9uLL);
              sub_1B6BBF838();
              LOBYTE(v22[0]) = 7;
              sub_1B6E32F48();
              swift_bridgeObjectRelease();
              memcpy(v22, v25, 0x1B9uLL);
              sub_1B6BBF838();
              LOBYTE(v22[0]) = 8;
              sub_1B6E32F48();
              (*v20)(v9, v6);
              swift_bridgeObjectRelease();
              goto LABEL_3;
            default:
              goto LABEL_15;
          }
        default:
LABEL_15:
          sub_1B6E32BE8();
          __break(1u);
          JUMPOUT(0x1B6D4FCBCLL);
      }
    }
    (*v20)(v9, v6);
LABEL_3:
    unint64_t v11 = v30;
    goto LABEL_4;
  }
  (*v20)(v9, v6);
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
}

uint64_t sub_1B6D4FCE4(void *a1)
{
  return sub_1B6D4F5B0(a1);
}

uint64_t sub_1B6D4FCFC(char *a1, char *a2)
{
  return sub_1B6BB67E0(*a1, *a2);
}

uint64_t sub_1B6D4FD08()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4FD90()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D4FE04()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D4FE88@<X0>(char *a1@<X8>)
{
  return sub_1B6BE07F0(a1);
}

void sub_1B6D4FE94(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7475626972747461;
  if (*v1) {
    uint64_t v2 = 0x7374756F79616CLL;
  }
  unint64_t v3 = 0xEA00000000007365;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6D4FED8()
{
  if (*v0) {
    return 0x7374756F79616CLL;
  }
  else {
    return 0x7475626972747461;
  }
}

uint64_t sub_1B6D4FF18@<X0>(char *a1@<X8>)
{
  return sub_1B6BE08CC(a1);
}

uint64_t sub_1B6D4FF24(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51D68();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D4FF60(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51D68();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D4FF9C(char *a1, unsigned __int8 *a2)
{
  return sub_1B6BB69C0(*a1, *a2);
}

uint64_t sub_1B6D4FFA8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D5004C()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D500DC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D5017C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B68E1038();
  *a1 = result;
  return result;
}

void sub_1B6D501B4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEC0000007865646ELL;
  uint64_t v4 = 0x74657366666FLL;
  if (v2 != 1) {
    uint64_t v4 = 0x74616D726F66;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x695F726566667562;
  }
  if (!v5) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1B6D50214()
{
  uint64_t v1 = 0x74657366666FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x74616D726F66;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x695F726566667562;
  }
}

uint64_t sub_1B6D50270@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B68E1038();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D502A0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51D14();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D502DC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51D14();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D50318(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB688C(*a1, *a2);
}

uint64_t sub_1B6D50324()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D503D4()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D50470()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D5051C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B68E1038();
  *a1 = result;
  return result;
}

void sub_1B6D50554(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xED00006E6F697463;
  uint64_t v5 = 0x6E75665F70657473;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7461725F70657473;
    unint64_t v4 = 0xE900000000000065;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x656469727473;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B6D505C0()
{
  uint64_t v1 = 0x6E75665F70657473;
  if (*v0 != 1) {
    uint64_t v1 = 0x7461725F70657473;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656469727473;
  }
}

uint64_t sub_1B6D50628@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B68E1038();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D50658(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51CC0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D50694(uint64_t a1)
{
  unint64_t v2 = sub_1B6D51CC0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D506D0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  BOOL v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  sub_1B6D52C68(0, &qword_1E9DD9880, (uint64_t (*)(void))sub_1B6D51CC0, (uint64_t)&type metadata for VertexDescriptorCoder.LayoutCodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v63 = v7;
  uint64_t v58 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v62 = (char *)&v58 - v9;
  sub_1B6D52C68(0, &qword_1E9DD9890, (uint64_t (*)(void))sub_1B6D51D14, (uint64_t)&type metadata for VertexDescriptorCoder.AttributeCodingKeys, v6);
  uint64_t v64 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  int v75 = (char *)&v58 - v13;
  sub_1B6D52C68(0, &qword_1E9DD98A0, (uint64_t (*)(void))sub_1B6D51D68, (uint64_t)&type metadata for VertexDescriptorCoder.CodingKeys, v6);
  uint64_t v15 = v14;
  uint64_t v59 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v18 = (char *)&v58 - v17;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D51D68();
  sub_1B6E33A88();
  LOBYTE(v71[0]) = 0;
  unint64_t v60 = v18;
  uint64_t v61 = v15;
  uint64_t v19 = a2;
  sub_1B6E32EC8();
  uint64_t v20 = 31;
  int64x2_t v21 = &selRef_lightBufferBindings;
  while (1)
  {
    uint64_t v22 = v20 - 1;
    id v23 = objc_msgSend(v19, sel_attributes, v58);
    id v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, v20 - 1);

    id v25 = objc_msgSend(v24, sel_format);
    if (v25) {
      break;
    }
    --v20;
    if (!v22)
    {
      uint64_t v20 = 31;
      break;
    }
  }
  uint64_t v26 = 0;
  long long v65 = (void (**)(const char *, uint64_t))(v11 + 8);
  id v68 = v19;
  uint64_t v27 = v64;
  while (1)
  {
    sub_1B62C550C((uint64_t)v73, v74);
    sub_1B6D51D14();
    long long v28 = v75;
    sub_1B6E33248();
    id v29 = objc_msgSend(v68, sel_attributes);
    id v30 = objc_msgSend(v29, v21[274], v26);

    if (v30) {
      break;
    }
    (*v65)(v28, v27);
LABEL_7:
    if (v20 == ++v26)
    {
      uint64_t v43 = v3;
      LOBYTE(v69) = 1;
      sub_1B6E32EC8();
      uint64_t v44 = 31;
      id v45 = v68;
      do
      {
        uint64_t v46 = v44 - 1;
        id v47 = objc_msgSend(v45, sel_layouts);
        id v48 = objc_msgSend(v47, sel_objectAtIndexedSubscript_, v44 - 1);

        id v49 = objc_msgSend(v48, sel_stride);
        if (v49) {
          goto LABEL_17;
        }
        --v44;
      }
      while (v46);
      uint64_t v44 = 31;
LABEL_17:
      uint64_t v50 = 0;
      uint64_t v51 = (void (**)(char *, uint64_t))(v58 + 8);
      int v75 = "ReverseSubstract";
      while (1)
      {
        sub_1B62C550C((uint64_t)v71, v72);
        sub_1B6D51CC0();
        uint64_t v52 = v62;
        sub_1B6E33248();
        id v53 = objc_msgSend(v45, sel_layouts);
        id v54 = objc_msgSend(v53, sel_objectAtIndexedSubscript_, v50);

        if (v54)
        {
          objc_msgSend(v54, sel_stride);
          LOBYTE(v69) = 0;
          sub_1B6E32F88();
          if (v43)
          {

            (*v51)(v52, v63);
            (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v71);
            return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v73);
          }
          objc_msgSend(v54, sel_stepFunction);
          uint64_t v55 = v63;
          LOBYTE(v69) = 1;
          id v56 = v62;
          sub_1B6E32F48();
          swift_bridgeObjectRelease();
          objc_msgSend(v54, sel_stepRate);
          LOBYTE(v69) = 2;
          sub_1B6E32F88();
          uint64_t v43 = 0;
          (*v51)(v56, v55);

          id v45 = v68;
        }
        else
        {
          (*v51)(v52, v63);
        }
        if (v44 == ++v50)
        {
          (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v71);
          return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v73);
        }
      }
    }
  }
  objc_msgSend(v30, sel_bufferIndex);
  LOBYTE(v71[0]) = 0;
  sub_1B6E32F88();
  if (v3)
  {

    (*v65)(v28, v27);
    goto LABEL_24;
  }
  objc_msgSend(v30, sel_offset);
  LOBYTE(v71[0]) = 1;
  sub_1B6E32F88();
  id v66 = v30;
  objc_msgSend(v30, sel_format);
  sub_1B6BBC294();
  swift_bridgeObjectRetain();
  sub_1B67BB63C();
  uint64_t v67 = 0;
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_1B6E32518();
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v34 = sub_1B6A04144();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  uint64_t v69 = v31;
  uint64_t v70 = v33;
  uint64_t v27 = v64;
  v71[0] = v34;
  v71[1] = v36;
  v71[2] = v38;
  uint64_t v72 = v40;
  sub_1B678C2E8();
  swift_bridgeObjectRetain();
  sub_1B6E31928();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = v75;
  swift_bridgeObjectRelease();
  LOBYTE(v71[0]) = 2;
  uint64_t v42 = v67;
  sub_1B6E32F48();
  uint64_t v3 = v42;
  if (!v42)
  {
    (*v65)(v41, v27);

    swift_bridgeObjectRelease();
    int64x2_t v21 = &selRef_lightBufferBindings;
    goto LABEL_7;
  }

  swift_bridgeObjectRelease();
  (*v65)(v41, v27);
LABEL_24:
  (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v73);
}

uint64_t sub_1B6D510A4(void *a1)
{
  return sub_1B6D506D0(a1, *v1);
}

uint64_t sub_1B6D510C0()
{
  unint64_t v0 = sub_1B6E337B8();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D51114(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6174736E6F63 && a2 == 0xEF7365756C61765FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B6D51288()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D512D4()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 9) {
    return 9;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D51320(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v14[2] = a5;
  v14[1] = a4;
  sub_1B6D52C68(0, &qword_1E9DD97E0, (uint64_t (*)(void))sub_1B6D514C4, (uint64_t)&_s10CodingKeysON_3, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v14 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D514C4();
  sub_1B6E33A88();
  char v16 = 1;
  uint64_t v12 = v14[3];
  sub_1B6E32F48();
  if (!v12)
  {
    char v15 = 0;
    sub_1B6E32F48();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

unint64_t sub_1B6D514C4()
{
  unint64_t result = qword_1E9DD97E8;
  if (!qword_1E9DD97E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD97E8);
  }
  return result;
}

unint64_t sub_1B6D51518()
{
  unint64_t result = qword_1E9DD97F8;
  if (!qword_1E9DD97F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD97F8);
  }
  return result;
}

unint64_t sub_1B6D5156C()
{
  unint64_t result = qword_1E9DD9808;
  if (!qword_1E9DD9808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9808);
  }
  return result;
}

unint64_t sub_1B6D515C0()
{
  unint64_t result = qword_1E9DD9810;
  if (!qword_1E9DD9810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9810);
  }
  return result;
}

unint64_t sub_1B6D51614()
{
  unint64_t result = qword_1E9DD9818;
  if (!qword_1E9DD9818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9818);
  }
  return result;
}

unint64_t sub_1B6D51668()
{
  unint64_t result = qword_1E9DD9820;
  if (!qword_1E9DD9820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9820);
  }
  return result;
}

uint64_t sub_1B6D516BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B6D51704(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

ValueMetadata *_s19PipelineScriptCoderVMa()
{
  return &_s19PipelineScriptCoderVN;
}

ValueMetadata *type metadata accessor for VertexDescriptorCoder()
{
  return &type metadata for VertexDescriptorCoder;
}

ValueMetadata *type metadata accessor for ColorAttachmentsCoder()
{
  return &type metadata for ColorAttachmentsCoder;
}

uint64_t _s10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D518F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa_1()
{
  return &_s10CodingKeysON_1;
}

ValueMetadata *_s10CodingKeysOMa_2()
{
  return &_s10CodingKeysON_2;
}

ValueMetadata *_s10CodingKeysOMa_3()
{
  return &_s10CodingKeysON_3;
}

unint64_t sub_1B6D51958()
{
  unint64_t result = qword_1E9DD9828;
  if (!qword_1E9DD9828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9828);
  }
  return result;
}

unint64_t sub_1B6D519B0()
{
  unint64_t result = qword_1E9DD9830;
  if (!qword_1E9DD9830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9830);
  }
  return result;
}

unint64_t sub_1B6D51A08()
{
  unint64_t result = qword_1E9DD9838;
  if (!qword_1E9DD9838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9838);
  }
  return result;
}

unint64_t sub_1B6D51A60()
{
  unint64_t result = qword_1E9DD9840;
  if (!qword_1E9DD9840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9840);
  }
  return result;
}

unint64_t sub_1B6D51AB8()
{
  unint64_t result = qword_1E9DD9848;
  if (!qword_1E9DD9848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9848);
  }
  return result;
}

unint64_t sub_1B6D51B10()
{
  unint64_t result = qword_1E9DD9850;
  if (!qword_1E9DD9850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9850);
  }
  return result;
}

unint64_t sub_1B6D51B68()
{
  unint64_t result = qword_1E9DD9858;
  if (!qword_1E9DD9858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9858);
  }
  return result;
}

unint64_t sub_1B6D51BC0()
{
  unint64_t result = qword_1E9DD9860;
  if (!qword_1E9DD9860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9860);
  }
  return result;
}

unint64_t sub_1B6D51C18()
{
  unint64_t result = qword_1E9DD9868;
  if (!qword_1E9DD9868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9868);
  }
  return result;
}

unint64_t sub_1B6D51C6C()
{
  unint64_t result = qword_1E9DD9878;
  if (!qword_1E9DD9878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9878);
  }
  return result;
}

unint64_t sub_1B6D51CC0()
{
  unint64_t result = qword_1E9DD9888;
  if (!qword_1E9DD9888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9888);
  }
  return result;
}

unint64_t sub_1B6D51D14()
{
  unint64_t result = qword_1E9DD9898;
  if (!qword_1E9DD9898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9898);
  }
  return result;
}

unint64_t sub_1B6D51D68()
{
  unint64_t result = qword_1E9DD98A8;
  if (!qword_1E9DD98A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD98A8);
  }
  return result;
}

unint64_t sub_1B6D51DBC()
{
  unint64_t result = qword_1E9DD98B8;
  if (!qword_1E9DD98B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD98B8);
  }
  return result;
}

unint64_t sub_1B6D51E10()
{
  unint64_t result = qword_1E9DD98C8;
  if (!qword_1E9DD98C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD98C8);
  }
  return result;
}

unint64_t sub_1B6D51E64()
{
  unint64_t result = qword_1E9DD98D8;
  if (!qword_1E9DD98D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD98D8);
  }
  return result;
}

unint64_t sub_1B6D51EB8()
{
  unint64_t result = qword_1E9DD98F0;
  if (!qword_1E9DD98F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD98F0);
  }
  return result;
}

uint64_t sub_1B6D51F0C(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6D52B20(255, a2, a3, MEMORY[0x1E4FBB320]);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6D51F98()
{
  unint64_t result = qword_1E9DD9908;
  if (!qword_1E9DD9908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9908);
  }
  return result;
}

unint64_t sub_1B6D51FEC()
{
  unint64_t result = qword_1E9DD9920;
  if (!qword_1E9DD9920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9920);
  }
  return result;
}

unint64_t sub_1B6D52040()
{
  unint64_t result = qword_1E9DD9938;
  if (!qword_1E9DD9938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9938);
  }
  return result;
}

uint64_t sub_1B6D52094(uint64_t a1, uint64_t a2)
{
  sub_1B6D52B20(0, &qword_1EB97DD00, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(void, uint64_t))type metadata accessor for ShaderCache.Status);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *_s21FunctionConstantCoderVMa()
{
  return &_s21FunctionConstantCoderVN;
}

ValueMetadata *_s19PipelineScriptCoderV24SpecializedFunctionCoderVMa()
{
  return &_s19PipelineScriptCoderV24SpecializedFunctionCoderVN;
}

ValueMetadata *_s19PipelineScriptCoderV10CodingKeysOMa()
{
  return &_s19PipelineScriptCoderV10CodingKeysON;
}

ValueMetadata *_s19PipelineScriptCoderV19LibrariesCodingKeysOMa()
{
  return &_s19PipelineScriptCoderV19LibrariesCodingKeysON;
}

ValueMetadata *_s19PipelineScriptCoderV18PipelineCodingKeysOMa()
{
  return &_s19PipelineScriptCoderV18PipelineCodingKeysON;
}

unsigned char *_s10CodingKeysOwst_2_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D52238);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VertexDescriptorCoder.CodingKeys()
{
  return &type metadata for VertexDescriptorCoder.CodingKeys;
}

ValueMetadata *type metadata accessor for VertexDescriptorCoder.AttributeCodingKeys()
{
  return &type metadata for VertexDescriptorCoder.AttributeCodingKeys;
}

ValueMetadata *type metadata accessor for VertexDescriptorCoder.LayoutCodingKeys()
{
  return &type metadata for VertexDescriptorCoder.LayoutCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ColorAttachmentsCoder.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D5235CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorAttachmentsCoder.CodingKeys()
{
  return &type metadata for ColorAttachmentsCoder.CodingKeys;
}

unint64_t sub_1B6D52398()
{
  unint64_t result = qword_1E9DD9940;
  if (!qword_1E9DD9940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9940);
  }
  return result;
}

unint64_t sub_1B6D523F0()
{
  unint64_t result = qword_1E9DD9948;
  if (!qword_1E9DD9948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9948);
  }
  return result;
}

unint64_t sub_1B6D52448()
{
  unint64_t result = qword_1E9DD9950;
  if (!qword_1E9DD9950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9950);
  }
  return result;
}

unint64_t sub_1B6D524A0()
{
  unint64_t result = qword_1E9DD9958;
  if (!qword_1E9DD9958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9958);
  }
  return result;
}

unint64_t sub_1B6D524F8()
{
  unint64_t result = qword_1E9DD9960;
  if (!qword_1E9DD9960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9960);
  }
  return result;
}

unint64_t sub_1B6D52550()
{
  unint64_t result = qword_1E9DD9968;
  if (!qword_1E9DD9968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9968);
  }
  return result;
}

unint64_t sub_1B6D525A8()
{
  unint64_t result = qword_1E9DD9970;
  if (!qword_1E9DD9970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9970);
  }
  return result;
}

unint64_t sub_1B6D52600()
{
  unint64_t result = qword_1E9DD9978;
  if (!qword_1E9DD9978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9978);
  }
  return result;
}

unint64_t sub_1B6D52658()
{
  unint64_t result = qword_1E9DD9980;
  if (!qword_1E9DD9980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9980);
  }
  return result;
}

unint64_t sub_1B6D526B0()
{
  unint64_t result = qword_1E9DD9988;
  if (!qword_1E9DD9988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9988);
  }
  return result;
}

unint64_t sub_1B6D52708()
{
  unint64_t result = qword_1E9DD9990;
  if (!qword_1E9DD9990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9990);
  }
  return result;
}

unint64_t sub_1B6D52760()
{
  unint64_t result = qword_1E9DD9998;
  if (!qword_1E9DD9998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9998);
  }
  return result;
}

unint64_t sub_1B6D527B8()
{
  unint64_t result = qword_1E9DD99A0;
  if (!qword_1E9DD99A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99A0);
  }
  return result;
}

unint64_t sub_1B6D52810()
{
  unint64_t result = qword_1E9DD99A8;
  if (!qword_1E9DD99A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99A8);
  }
  return result;
}

unint64_t sub_1B6D52868()
{
  unint64_t result = qword_1E9DD99B0;
  if (!qword_1E9DD99B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99B0);
  }
  return result;
}

unint64_t sub_1B6D528C0()
{
  unint64_t result = qword_1E9DD99B8;
  if (!qword_1E9DD99B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99B8);
  }
  return result;
}

unint64_t sub_1B6D52918()
{
  unint64_t result = qword_1E9DD99C0;
  if (!qword_1E9DD99C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99C0);
  }
  return result;
}

unint64_t sub_1B6D52970()
{
  unint64_t result = qword_1E9DD99C8;
  if (!qword_1E9DD99C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99C8);
  }
  return result;
}

unint64_t sub_1B6D529C8()
{
  unint64_t result = qword_1E9DD99D0;
  if (!qword_1E9DD99D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99D0);
  }
  return result;
}

unint64_t sub_1B6D52A20()
{
  unint64_t result = qword_1E9DD99D8;
  if (!qword_1E9DD99D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99D8);
  }
  return result;
}

unint64_t sub_1B6D52A78()
{
  unint64_t result = qword_1E9DD99E0;
  if (!qword_1E9DD99E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99E0);
  }
  return result;
}

unint64_t sub_1B6D52ACC()
{
  unint64_t result = qword_1E9DD99F0;
  if (!qword_1E9DD99F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD99F0);
  }
  return result;
}

void sub_1B6D52B20(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1B6D52B6C()
{
  unint64_t result = qword_1E9DD9A08;
  if (!qword_1E9DD9A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A08);
  }
  return result;
}

unint64_t sub_1B6D52BC0()
{
  unint64_t result = qword_1E9DD9A18;
  if (!qword_1E9DD9A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A18);
  }
  return result;
}

unint64_t sub_1B6D52C14()
{
  unint64_t result = qword_1E9DD9A28;
  if (!qword_1E9DD9A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A28);
  }
  return result;
}

void sub_1B6D52C68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *_s21FunctionConstantCoderV10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D52D9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s21FunctionConstantCoderV10CodingKeysOMa()
{
  return &_s21FunctionConstantCoderV10CodingKeysON;
}

unsigned char *_s21FunctionConstantCoderV15ValueCodingKeysOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6D52E70);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s21FunctionConstantCoderV15ValueCodingKeysOMa()
{
  return &_s21FunctionConstantCoderV15ValueCodingKeysON;
}

unsigned char *_s10CodingKeysOwst_1_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D52F74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysOMa()
{
  return &_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysON;
}

unint64_t sub_1B6D52FB0()
{
  unint64_t result = qword_1E9DD9A30;
  if (!qword_1E9DD9A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A30);
  }
  return result;
}

unint64_t sub_1B6D53008()
{
  unint64_t result = qword_1E9DD9A38;
  if (!qword_1E9DD9A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A38);
  }
  return result;
}

unint64_t sub_1B6D53060()
{
  unint64_t result = qword_1E9DD9A40;
  if (!qword_1E9DD9A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A40);
  }
  return result;
}

unint64_t sub_1B6D530B8()
{
  unint64_t result = qword_1E9DD9A48;
  if (!qword_1E9DD9A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A48);
  }
  return result;
}

unint64_t sub_1B6D53110()
{
  unint64_t result = qword_1E9DD9A50;
  if (!qword_1E9DD9A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A50);
  }
  return result;
}

unint64_t sub_1B6D53168()
{
  unint64_t result = qword_1E9DD9A58;
  if (!qword_1E9DD9A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A58);
  }
  return result;
}

unint64_t sub_1B6D531C0()
{
  unint64_t result = qword_1E9DD9A60;
  if (!qword_1E9DD9A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A60);
  }
  return result;
}

unint64_t sub_1B6D53218()
{
  unint64_t result = qword_1E9DD9A68;
  if (!qword_1E9DD9A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A68);
  }
  return result;
}

unint64_t sub_1B6D53270()
{
  unint64_t result = qword_1E9DD9A70;
  if (!qword_1E9DD9A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A70);
  }
  return result;
}

uint64_t sub_1B6D532C4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D53378()
{
  return sub_1B6E33938();
}

uint64_t sub_1B6D533F8()
{
  return sub_1B6E33988();
}

double sub_1B6D534A8@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E50D30;
  *(_OWORD *)(a1 + 32) = xmmword_1B6E50D30;
  *(unsigned char *)(a1 + 48) = 15;
  return result;
}

BOOL sub_1B6D534C4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 48);
  return sub_1B6D537E8((uint64_t *)v5, (uint64_t *)v7);
}

uint64_t sub_1B6D53520()
{
  return 0;
}

uint64_t getEnumTagSinglePayload for BlendingStates(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BlendingStates(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)double result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 49) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BlendingStates()
{
  return &type metadata for BlendingStates;
}

unint64_t sub_1B6D53794()
{
  unint64_t result = qword_1E9DD9A78;
  if (!qword_1E9DD9A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A78);
  }
  return result;
}

BOOL sub_1B6D537E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = a2[4];
  uint64_t v13 = a2[5];
  uint64_t v14 = *((unsigned __int8 *)a1 + 48);
  uint64_t v15 = *((unsigned __int8 *)a2 + 48);
  return v2 == v4 && v3 == v5 && v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13 && v14 == v15;
}

float32x4_t sub_1B6D5382C(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = *(float32x4_t **)(a1 + 8);
  uint64_t v7 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
  uint64_t v8 = sub_1B67A82F8();
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 56) - v11;
    if (!v12)
    {
      int32x2_t v9 = 0;
      if ((a2 & 1) == 0)
      {
        int32x2_t v9 = 0;
        if ((a3 & 1) == 0) {
          goto LABEL_23;
        }
LABEL_22:
        int32x2_t v44 = v9;
        float v31 = cbrtf(3.0);
        v9.i32[1] = v44.i32[1];
        *(float *)v9.i32 = *(float *)v44.i32 * v31;
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    int64x2_t v21 = (float *)(v8 + 4 * v11);
    float v20 = 0.0;
    do
    {
      float v22 = *v21++;
      float v20 = fmaxf(v20, v22);
      --v12;
    }
    while (v12);
LABEL_19:
    *(float *)v9.i32 = v20 * 0.5;
    if ((a2 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v13 = sub_1B67A836C();
  if ((v14 & 1) == 0)
  {
    uint64_t v15 = *(void *)(a1 + 48);
    float32x2_t v16 = 0;
    uint64_t v17 = *(void *)(a1 + 56) - v15;
    if (v17)
    {
      uint64_t v18 = (float32x2_t *)(v13 + 8 * v15);
      float32x2_t v16 = 0;
      do
      {
        float32x2_t v19 = *v18++;
        float32x2_t v16 = vmaxnm_f32(v16, v19);
        --v17;
      }
      while (v17);
    }
    float v20 = fmaxf(v16.f32[0], v16.f32[1]);
    goto LABEL_19;
  }
  uint64_t v23 = sub_1B67A83E0();
  if ((v24 & 1) == 0)
  {
    uint64_t v25 = *(void *)(a1 + 48);
    v26.i64[0] = 0;
    v26.i32[2] = 0;
    uint64_t v27 = *(void *)(a1 + 56) - v25;
    if (v27)
    {
      long long v28 = (float32x4_t *)(v23 + 16 * v25);
      do
      {
        float32x4_t v29 = *v28++;
        float32x4_t v30 = v29;
        v26.i32[3] = 0;
        v30.i32[3] = 0;
        float32x4_t v26 = vmaxnmq_f32(v26, v30);
        --v27;
      }
      while (v27);
    }
    float v20 = fmaxf(fmaxf(v26.f32[0], v26.f32[2]), v26.f32[1]);
    goto LABEL_19;
  }
  v9.i32[0] = 0.5;
  if (a2)
  {
LABEL_20:
    *(float *)v9.i32 = *(float *)v9.i32 + *(float *)v9.i32;
LABEL_21:
    if ((a3 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v9.i32[0] = 0.5;
  if (a3) {
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v32 = *(void *)(a1 + 48);
  float32x4_t v33 = *(float32x4_t *)(v7 + 16 * v32);
  uint64_t v34 = *(void *)(a1 + 56) - v32;
  if (v34)
  {
    uint64_t v36 = (float32x4_t *)(v7 + 16 * v32);
    float32x4_t v35 = v33;
    do
    {
      float32x4_t v37 = *v36++;
      float32x4_t v33 = vminnmq_f32(v33, v37);
      float32x4_t v35 = vmaxnmq_f32(v35, v37);
      --v34;
    }
    while (v34);
  }
  else
  {
    float32x4_t v35 = *(float32x4_t *)(v7 + 16 * v32);
  }
  float32x4_t v38 = (float32x4_t)vdupq_lane_s32(v9, 0);
  float32x4_t v39 = vsubq_f32(v33, v38);
  v39.i32[3] = 1.0;
  float32x4_t v40 = vaddq_f32(v38, v35);
  v40.i32[3] = 1.0;
  v41.i64[0] = 0x3F0000003F000000;
  v41.i64[1] = 0x3F0000003F000000;
  float32x4_t v42 = vmulq_f32(vaddq_f32(v39, v40), v41);
  float32x4_t result = vmulq_f32(vsubq_f32(v40, v39), v41);
  v6[17] = v42;
  v6[18] = result;
  v6[19].i32[0] = v6[7].i32[1];
  return result;
}

uint64_t type metadata accessor for ParticleUpdateAABB.System()
{
  return self;
}

const char *sub_1B6D53A3C()
{
  return "ParticleUpdateAABB.CPU";
}

uint64_t sub_1B6D53A50()
{
  return type metadata accessor for ParticleUpdateAABB.System();
}

uint64_t sub_1B6D53A70(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  swift_retain();
  uint64_t v110 = a1;
  sub_1B62EBAB4();
  BOOL v3 = sub_1B62FACF8((uint64_t)&type metadata for ParticlePivot);
  BOOL v4 = sub_1B62FACF8((uint64_t)&type metadata for Orientation)
    || sub_1B62FACF8((uint64_t)&type metadata for ParticleAngle);
  long long v5 = *(_OWORD *)(a1 + 104);
  v165[0] = *(_OWORD *)(a1 + 88);
  v165[1] = v5;
  uint64_t v166 = *(void *)(a1 + 120);
  sub_1B62C9DA8(v2, (uint64_t)v165, 0x200000000, v151);
  sub_1B62D826C((uint64_t)v151, (uint64_t)v160, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8A94);
  uint64_t v144 = (unsigned __int16 *)v160[0];
  if (v160[0])
  {
    uint64_t v126 = v164;
    if (v164 >= 1)
    {
      uint64_t v124 = v161;
      if (v161)
      {
        uint64_t v123 = v160[5];
        uint64_t v6 = v163;
        uint64_t v7 = v163[4];
        uint64_t v121 = v162;
        int v8 = *(unsigned __int8 *)(v162 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        long long v117 = v163 + 8;
        uint64_t v142 = v160[0] + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v9 = 0;
        char v114 = v3;
        char v112 = v4;
        int v119 = v8;
        __int32 v149 = v6;
        uint64_t v111 = v7;
        while (1)
        {
          uint64_t v136 = v9;
          char v10 = (unsigned int *)(v123 + 48 * v9);
          uint64_t v11 = *v10;
          uint64_t v12 = v10[1];
          uint64_t v13 = v10[2];
          uint64_t v14 = *((void *)v10 + 3);
          uint64_t v146 = *((void *)v10 + 2);
          uint64_t v16 = *((void *)v10 + 4);
          uint64_t v15 = *((void *)v10 + 5);
          uint64_t v140 = v15;
          if (v8)
          {
            uint64_t v17 = *(os_unfair_lock_s **)(v15 + 376);
            swift_retain_n();
            uint64_t v18 = v17;
            uint64_t v15 = v140;
            os_unfair_lock_lock(v18);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v140 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          uint64_t v132 = v6[7];
          uint64_t v134 = v6[6];
          uint64_t v128 = v6[9];
          uint64_t v130 = v6[8];
          uint64_t v138 = v6[10];
          uint64_t v19 = v6[4];
          uint64_t v20 = *(void *)(*(void *)(*(void *)(*(void *)(v15 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          uint64_t v6 = v149;
          v149[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
          v149[7] = v20;
          v117[1] = 0;
          v117[2] = 0;
          *long long v117 = 0;
          swift_release();
          v167[0] = v121;
          v167[1] = v140;
          v167[2] = v149;
          v167[3] = v13;
          v167[4] = (v12 - v11 + v13);
          v167[5] = v126;
          v167[6] = v11;
          v167[7] = v12;
          v167[8] = 0;
          v167[9] = 0;
          char v168 = 1;
          uint64_t v169 = v146;
          uint64_t v170 = v14;
          uint64_t v171 = v16;
          sub_1B6D5382C((uint64_t)v167, v114, v112);
          unint64_t v21 = v149[6];
          uint64_t v147 = v149[8];
          if (!v147)
          {
            uint64_t v48 = v149[7];
            id v49 = (void *)v149[4];
            uint64_t v7 = v111;
            uint64_t v50 = v134;
            uint64_t v51 = v136;
            uint64_t v52 = v130;
            uint64_t v54 = v132;
            goto LABEL_50;
          }
          for (uint64_t i = 0; i != v147; ++i)
          {
            unint64_t v24 = v21;
            uint64_t v25 = (uint64_t *)(v21 + 48 * i);
            uint64_t v26 = *v25;
            uint64_t v27 = (void (*)(uint64_t))v25[4];
            uint64_t v28 = v6[9];
            if (v28) {
              BOOL v29 = v26 == v28;
            }
            else {
              BOOL v29 = 0;
            }
            if (v29 || !v144[11]) {
              goto LABEL_14;
            }
            unint64_t v30 = v144[9];
            float v31 = (void *)(v142 + v144[8]);
            uint64_t v32 = v25[2];
            float32x4_t v33 = v31;
            unint64_t v34 = v30 >> 4;
            uint64_t v35 = v142;
            if (v30 >= 0x10)
            {
              while (*v33 != v26)
              {
                ++v35;
                v33 += 2;
                if (!--v34) {
                  goto LABEL_29;
                }
              }
              unsigned int v36 = *(unsigned __int8 *)(v35 + v144[10]);
              BOOL v37 = v36 > 5;
              int v38 = (1 << v36) & 0x23;
              if (v37 || v38 == 0)
              {
LABEL_14:
                uint64_t v23 = swift_retain();
                v27(v23);
                swift_release();
                goto LABEL_15;
              }
            }
LABEL_29:
            if (swift_conformsToProtocol2()) {
              uint64_t v40 = v32;
            }
            else {
              uint64_t v40 = 0;
            }
            if (v40)
            {
              if (v30 < 0x10) {
                goto LABEL_14;
              }
              float32x4_t v41 = v31;
              unint64_t v42 = v30 >> 4;
              uint64_t v43 = v142;
              while (*v41 != v40)
              {
                ++v43;
                v41 += 2;
                if (!--v42) {
                  goto LABEL_42;
                }
              }
              unsigned int v44 = *(unsigned __int8 *)(v43 + v144[10]);
              BOOL v37 = v44 > 5;
              int v45 = (1 << v44) & 0x23;
              if (v37 || v45 == 0) {
                goto LABEL_14;
              }
LABEL_42:
              uint64_t v47 = 16 * (v30 >> 4);
              while (*v31 != v40)
              {
                v31 += 2;
                v47 -= 16;
                if (!v47) {
                  goto LABEL_14;
                }
              }
            }
LABEL_15:
            uint64_t v6 = v149;
            unint64_t v21 = v24;
          }
          uint64_t v48 = v149[7];
          unint64_t v21 = v149[6];
          id v49 = (void *)v149[4];
          uint64_t v7 = v111;
          uint64_t v50 = v134;
          uint64_t v51 = v136;
          uint64_t v52 = v130;
          if ((uint64_t)v149[8] >= 1)
          {
            unint64_t v53 = v149[6];
            swift_arrayDestroy();
            unint64_t v21 = v53;
          }
          uint64_t v54 = v132;
LABEL_50:
          ecs_stack_allocator_deallocate(v49, v21, 48 * v48);
          v6[6] = v50;
          v6[7] = v54;
          v6[8] = v52;
          v6[9] = v128;
          void v6[10] = v138;
          sub_1B634507C((char *)v140);
          ecs_stack_allocator_pop_snapshot(v7);
          int v8 = v119;
          if (v119)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v140 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v140 + 376));
          }
          swift_release();
          uint64_t v9 = v51 + 1;
          if (v9 == v124)
          {
            sub_1B632F170(v151);
            break;
          }
        }
      }
    }
  }
  sub_1B62D826C((uint64_t)v151, (uint64_t)v155, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8A94);
  float32x4_t v141 = (float32x4_t)xmmword_1B6E4F370;
  float32x4_t v143 = (float32x4_t)xmmword_1B6E77AF0;
  float32x4_t v148 = (unsigned __int16 *)v155[0];
  if (v155[0])
  {
    if (v159 >= 1)
    {
      uint64_t v122 = v156;
      if (v156)
      {
        uint64_t v55 = v158;
        uint64_t v120 = v155[5];
        uint64_t v56 = v158[4];
        int v57 = *(unsigned __int8 *)(v157 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v113 = v158 + 13;
        long long v118 = v158 + 8;
        uint64_t v145 = v155[0] + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v58 = 0;
        float32x4_t v141 = (float32x4_t)xmmword_1B6E4F370;
        float32x4_t v143 = (float32x4_t)xmmword_1B6E77AF0;
        uint64_t v116 = v56;
        int v115 = v57;
        while (1)
        {
          uint64_t v62 = *(void *)(v120 + 48 * v58 + 40);
          if (v57)
          {
            uint64_t v63 = *(os_unfair_lock_s **)(v62 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v63);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v62 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v56);
          uint64_t v125 = v55[6];
          uint64_t v133 = v55[8];
          uint64_t v135 = v55[7];
          uint64_t v129 = v55[10];
          uint64_t v131 = v55[9];
          uint64_t v64 = v55[4];
          uint64_t v65 = *(void *)(*(void *)(*(void *)(*(void *)(v62 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v55[6] = ecs_stack_allocator_allocate(v64, 48 * v65, 8);
          v55[7] = v65;
          v118[1] = 0;
          v118[2] = 0;
          *long long v118 = 0;
          swift_release();
          uint64_t v127 = v62;
          float32x4_t v137 = *(float32x4_t *)(v62 + 288);
          float32x4_t v139 = *(float32x4_t *)(v62 + 272);
          unint64_t v66 = v55[6];
          uint64_t v150 = v55[8];
          if (!v150)
          {
            uint64_t v93 = v55[7];
            uint64_t v94 = (void *)v55[4];
            goto LABEL_99;
          }
          for (uint64_t j = 0; j != v150; ++j)
          {
            unint64_t v69 = v66;
            uint64_t v70 = (uint64_t *)(v66 + 48 * j);
            uint64_t v71 = *v70;
            uint64_t v72 = (void (*)(uint64_t))v70[4];
            uint64_t v73 = v55;
            uint64_t v74 = v55[9];
            if (v74) {
              BOOL v75 = v71 == v74;
            }
            else {
              BOOL v75 = 0;
            }
            if (v75 || !v148[11]) {
              goto LABEL_63;
            }
            unint64_t v76 = v148[9];
            uint64_t v77 = (void *)(v145 + v148[8]);
            uint64_t v78 = v70[2];
            uint64_t v79 = v77;
            unint64_t v80 = v76 >> 4;
            uint64_t v81 = v145;
            if (v76 >= 0x10)
            {
              while (*v79 != v71)
              {
                ++v81;
                v79 += 2;
                if (!--v80) {
                  goto LABEL_78;
                }
              }
              unsigned int v82 = *(unsigned __int8 *)(v81 + v148[10]);
              BOOL v37 = v82 > 5;
              int v83 = (1 << v82) & 0x23;
              if (v37 || v83 == 0)
              {
LABEL_63:
                uint64_t v68 = swift_retain();
                v72(v68);
                swift_release();
                goto LABEL_64;
              }
            }
LABEL_78:
            if (swift_conformsToProtocol2()) {
              uint64_t v85 = v78;
            }
            else {
              uint64_t v85 = 0;
            }
            if (v85)
            {
              if (v76 < 0x10) {
                goto LABEL_63;
              }
              unint64_t v86 = v77;
              unint64_t v87 = v76 >> 4;
              uint64_t v88 = v145;
              while (*v86 != v85)
              {
                ++v88;
                v86 += 2;
                if (!--v87) {
                  goto LABEL_91;
                }
              }
              unsigned int v89 = *(unsigned __int8 *)(v88 + v148[10]);
              BOOL v37 = v89 > 5;
              int v90 = (1 << v89) & 0x23;
              if (v37 || v90 == 0) {
                goto LABEL_63;
              }
LABEL_91:
              uint64_t v92 = 16 * (v76 >> 4);
              while (*v77 != v85)
              {
                v77 += 2;
                v92 -= 16;
                if (!v92) {
                  goto LABEL_63;
                }
              }
            }
LABEL_64:
            uint64_t v55 = v73;
            unint64_t v66 = v69;
          }
          uint64_t v93 = v73[7];
          unint64_t v66 = v73[6];
          uint64_t v94 = (void *)v73[4];
          if ((uint64_t)v73[8] >= 1)
          {
            unint64_t v95 = v73[6];
            swift_arrayDestroy();
            unint64_t v66 = v95;
          }
          uint64_t v56 = v116;
          int v57 = v115;
LABEL_99:
          ecs_stack_allocator_deallocate(v94, v66, 48 * v93);
          v55[6] = v125;
          v55[7] = v135;
          v55[8] = v133;
          v55[9] = v131;
          v55[10] = v129;
          if (*(void *)(v55[13] + 16))
          {
            uint64_t v96 = swift_bridgeObjectRetain();
            sub_1B639147C(v96, v127);
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v98 = v55[13];
            if (isUniquelyReferenced_nonNull_native)
            {
              sub_1B6399BB8(0, *(void *)(v98 + 16));
            }
            else
            {
              uint64_t v99 = (void *)MEMORY[0x1E4FBC860];
              if (*(void *)(v98 + 24) >= 2uLL)
              {
                sub_1B62F6FE0(0, (unint64_t *)&qword_1EB980C00, (uint64_t (*)(uint64_t))sub_1B63B29DC, MEMORY[0x1E4FBBE00]);
                uint64_t v99 = (void *)swift_allocObject();
                size_t v100 = j__malloc_size(v99);
                v99[2] = 0;
                v99[3] = 2 * ((uint64_t)(v100 - 32) / 72);
              }
              void *v113 = v99;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v55[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              uint64_t v101 = *(char **)(v127 + 232);
              uint64_t v102 = *(char **)(v127 + 256);
              if (v101 == v102)
              {
                unint64_t v103 = *(char **)(v127 + 240);
              }
              else
              {
                sub_1B666018C(v102, v101);
                uint64_t v102 = *(char **)(v127 + 232);
                unint64_t v103 = *(char **)(v127 + 240);
                if (v103 == v102)
                {
                  unint64_t v103 = 0;
                  uint64_t v102 = 0;
                  *(void *)(v127 + 232) = 0;
                  *(void *)(v127 + 240) = 0;
                }
              }
              *(void *)(v127 + 248) = v103;
              *(void *)(v127 + 256) = v102;
            }
          }
          ecs_stack_allocator_pop_snapshot(v56);
          if (v57)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v127 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v127 + 376));
          }
          float32x4_t v59 = vminnmq_f32(vsubq_f32(v141, v143), vsubq_f32(v139, v137));
          float32x4_t v60 = vmaxnmq_f32(vaddq_f32(v143, v141), vaddq_f32(v139, v137));
          v61.i64[0] = 0x3F0000003F000000;
          v61.i64[1] = 0x3F0000003F000000;
          float32x4_t v141 = vmulq_f32(vaddq_f32(v59, v60), v61);
          float32x4_t v143 = vmulq_f32(vsubq_f32(v60, v59), v61);
          swift_release();
          if (++v58 == v122)
          {
            sub_1B632F170(v151);
            break;
          }
        }
      }
    }
  }
  int v105 = *(_DWORD *)(v110 + 32);
  int v104 = *(_DWORD *)(v110 + 36);
  if (sub_1B6A81544())
  {
    v153[0] = v141;
    v153[1] = v143;
    if (v105 == -1 && !v104)
    {
LABEL_118:
      swift_release();
      sub_1B632F170(v151);
      return swift_release();
    }
  }
  else
  {
    sub_1B6A81A4C();
    uint64_t v107 = swift_retain();
    sub_1B6346CF0(v107, (uint64_t)v152);
    swift_release();
    sub_1B62D826C((uint64_t)v152, (uint64_t)v153, (uint64_t)&qword_1EB97D810, (uint64_t)type metadata accessor for simd_float4x4, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62F6FE0);
    if (v154)
    {
      if (v105 == -1 && !v104) {
        goto LABEL_118;
      }
    }
    else if (v105 == -1 && !v104)
    {
      goto LABEL_118;
    }
  }
  uint64_t v108 = swift_retain();
  MEMORY[0x1F4188790](v108, v109);
  sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D548E8);
  swift_release();
  swift_release();
  sub_1B632F170(v151);
  return swift_release();
}

void *sub_1B6D548E8(void *a1)
{
  return sub_1B6D54900(a1);
}

void *sub_1B6D54900(void *a1)
{
  return sub_1B6B71AF8(a1, *(void *)(v1 + 24), *(__n128 *)*(void *)(v1 + 16), *(__n128 *)(*(void *)(v1 + 16) + 16));
}

ValueMetadata *type metadata accessor for ParticleUpdateAABB()
{
  return &type metadata for ParticleUpdateAABB;
}

uint64_t sub_1B6D54934(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  int v7 = *(unsigned __int8 *)(*a1 + 24);
  sub_1B6A02E54(v4[22]);
  if (v9)
  {
    uint64_t v10 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  char v135 = v7;
  __int16 v136 = 256;
  char v137 = 0;
  uint64_t v138 = MEMORY[0x1E4FBC860];
  __int16 v139 = 0;
  uint64_t v140 = MEMORY[0x1E4FBC860];
  uint64_t v141 = MEMORY[0x1E4FBC860];
  __int16 v142 = 257;
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  char v114 = v4;
  uint64_t v11 = sub_1B6A1AE7C(v10, (uint64_t)&v135, a4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  *(void *)&long long v131 = 0;
  *((void *)&v131 + 1) = 0xE000000000000000;
  uint64_t v12 = *(void *)(v11 + 128);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v113 = v6;
  uint64_t v119 = v11;
  int v112 = v7;
  if (v13)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v14 = (uint64_t *)(v12 + 40);
    do
    {
      uint64_t v15 = *v14;
      uint64_t v129 = *(v14 - 1);
      uint64_t v130 = v15;
      uint64_t v127 = 0x244E49414D4F4424;
      unint64_t v128 = 0xE800000000000000;
      v126[0] = (void *)34;
      v126[1] = (void *)0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      sub_1B633AF88();
      sub_1B6E32618();
      swift_bridgeObjectRelease();
      uint64_t v11 = v119;
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 += 2;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v6 = v113;
  }
  else
  {
    swift_retain();
  }
  uint64_t v129 = 10;
  uint64_t v130 = 0xE100000000000000;
  uint64_t v127 = 2314;
  unint64_t v128 = 0xE200000000000000;
  sub_1B633AF88();
  sub_1B6E32618();
  swift_bridgeObjectRelease();
  *(void *)&long long v131 = 8201;
  *((void *)&v131 + 1) = 0xE200000000000000;
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v108 = (void **)(v6 + 128);
  sub_1B68E85C8(0, 0, 8201, 0xE200000000000000);
  swift_release();
  uint64_t v16 = *(void *)(v11 + 144);
  uint64_t v17 = v114;
  uint64_t v110 = *(void *)(v16 + 16);
  if (v110)
  {
    uint64_t v109 = v16 + 32;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v110; uint64_t i = v19 + 1)
    {
      uint64_t v116 = i;
      uint64_t v20 = (void *)(v109 + (i << 6));
      uint64_t v21 = v20[3];
      uint64_t v124 = v20[2];
      uint64_t v22 = v20[5];
      uint64_t v122 = v20[4];
      uint64_t v23 = v20[7];
      uint64_t v121 = v20[6];
      uint64_t v24 = v17[4];
      *(void *)&long long v131 = v17[3];
      *((void *)&v131 + 1) = v24;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v125 = v21;
      swift_bridgeObjectRetain();
      uint64_t v123 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      long long v25 = v131;
      uint64_t v120 = *(void **)(v6 + 144);
      uint64_t v115 = v120[2];
      if (v115)
      {
        uint64_t v26 = v120 + 6;
        uint64_t v27 = v120[2];
        while (1)
        {
          uint64_t v29 = *v26;
          uint64_t v28 = v26[1];
          uint64_t v30 = v26[2];
          uint64_t v31 = v26[3];
          uint64_t v32 = v26[4];
          uint64_t v33 = v26[5];
          BOOL v34 = *(v26 - 2) == (void)v131 && *(v26 - 1) == *((void *)&v131 + 1);
          if (v34 || (sub_1B6E334B8() & 1) != 0)
          {
            BOOL v35 = v29 == v124 && v28 == v125;
            if (v35 || (sub_1B6E334B8() & 1) != 0)
            {
              BOOL v36 = v30 == v122 && v31 == v123;
              if (v36 || (sub_1B6E334B8() & 1) != 0)
              {
                BOOL v37 = v32 == v121 && v33 == v23;
                if (v37 || (sub_1B6E334B8() & 1) != 0) {
                  break;
                }
              }
            }
          }
          v26 += 8;
          if (!--v27) {
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v6 = v113;
        uint64_t v17 = v114;
        int v7 = v112;
        uint64_t v19 = v116;
      }
      else
      {
LABEL_37:
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v120 = sub_1B68C0EC0(0, v115 + 1, 1, v120);
        }
        unint64_t v39 = v120[2];
        unint64_t v38 = v120[3];
        uint64_t v6 = v113;
        if (v39 >= v38 >> 1) {
          uint64_t v120 = sub_1B68C0EC0(v38 > 1, v39 + 1, 1, v120);
        }
        int v7 = v112;
        uint64_t v17 = v114;
        uint64_t v19 = v116;
        v120[2] = v39 + 1;
        uint64_t v40 = &v120[8 * v39];
        *((_OWORD *)v40 + 2) = v25;
        v40[6] = v124;
        v40[7] = v125;
        v40[8] = v122;
        v40[9] = v123;
        v40[10] = v121;
        v40[11] = v23;
        *(void *)(v113 + 144) = v120;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v119;
  }
  *(unsigned char *)(v6 + 160) = (*(unsigned char *)(v6 + 160) | *(unsigned char *)(v11 + 160)) & 1;
  unint64_t v41 = v17[7];
  if (!(v41 >> 62))
  {
    uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_45;
    }
LABEL_73:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_74;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  if (!sub_1B6E32C18()) {
    goto LABEL_73;
  }
LABEL_45:
  if ((v41 & 0xC000000000000001) == 0)
  {
    uint64_t v43 = *(void *)(v41 + 32);
    swift_retain();
    goto LABEL_47;
  }
LABEL_74:
  uint64_t v43 = MEMORY[0x1BA9B4580](0, v41);
LABEL_47:
  swift_bridgeObjectRelease();
  uint64_t v44 = *(void *)(v43 + 40);
  uint64_t v45 = *(void *)(v43 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v46 = (void *)sub_1B6A14458(v44, v45, *(unsigned __int8 *)(v6 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v47 = OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs;
  if (*(void *)(*(void *)((char *)v17
                             + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs)
                 + 16))
  {
    *(void *)&long long v131 = 8201;
    *((void *)&v131 + 1) = 0xE200000000000000;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v48 = sub_1B6BDE8D8();
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    uint64_t v129 = v48;
    uint64_t v130 = v50;
    sub_1B6E31948();
    if (v7 == 2)
    {
      uint64_t v129 = 544366966;
      uint64_t v130 = 0xE400000000000000;
      sub_1B6E31948();
    }
    else
    {
      uint64_t v129 = 0x745F3436746E69;
      uint64_t v130 = 0xE700000000000000;
    }
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v129 = (uint64_t)v46;
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    long long v59 = v131;
    float32x4_t v60 = *v108;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v108 = v60;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      float32x4_t v60 = sub_1B6335858(0, v60[2] + 1, 1, v60);
      *uint64_t v108 = v60;
    }
    unint64_t v63 = v60[2];
    unint64_t v62 = v60[3];
    if (v63 >= v62 >> 1)
    {
      float32x4_t v60 = sub_1B6335858(v62 > 1, v63 + 1, 1, v60);
      *uint64_t v108 = v60;
    }
    v60[2] = v63 + 1;
    *(_OWORD *)&v60[2 * v63 + 4] = v59;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v64 = *(void *)((char *)v17 + v47);
    uint64_t v65 = *(void *)(v64 + 16);
    if (v65)
    {
      swift_bridgeObjectRetain();
      unint64_t v66 = (uint64_t *)(v64 + 40);
      uint64_t v11 = v119;
      do
      {
        uint64_t v67 = *v66;
        *(void *)&long long v131 = *(v66 - 1);
        *((void *)&v131 + 1) = v67;
        swift_bridgeObjectRetain();
        sub_1B6D56698((uint64_t *)&v131, (uint64_t)v17, a1, v7);
        swift_bridgeObjectRelease();
        v66 += 2;
        --v65;
      }
      while (v65);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = v119;
    }
  }
  else
  {
    uint64_t v129 = 8201;
    uint64_t v130 = 0xE200000000000000;
    long long v131 = xmmword_1B6E9E150;
    uint64_t v133 = 0;
    uint64_t v134 = 0;
    uint64_t v132 = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_1B6BDE8D8();
    uint64_t v53 = v52;
    swift_bridgeObjectRelease();
    unint64_t v128 = v53;
    sub_1B6E31948();
    sub_1B689554C((uint64_t)&v131, v51, v53, 0, v7);
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v127 = (uint64_t)v46;
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v54 = *(void **)(v6 + 128);
    swift_bridgeObjectRetain();
    char v55 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 128) = v54;
    if ((v55 & 1) == 0)
    {
      uint64_t v54 = sub_1B6335858(0, v54[2] + 1, 1, v54);
      *uint64_t v108 = v54;
    }
    unint64_t v57 = v54[2];
    unint64_t v56 = v54[3];
    if (v57 >= v56 >> 1)
    {
      uint64_t v54 = sub_1B6335858(v56 > 1, v57 + 1, 1, v54);
      *uint64_t v108 = v54;
    }
    v54[2] = v57 + 1;
    uint64_t v58 = &v54[2 * v57];
    v58[4] = 8201;
    v58[5] = 0xE200000000000000;
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v127 = MEMORY[0x1E4FBC860];
  unint64_t v68 = *(void *)(v11 + 112);
  if (v68 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v69 = sub_1B6E32C18();
    if (!v69) {
      goto LABEL_76;
    }
  }
  else
  {
    uint64_t v69 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v69) {
      goto LABEL_76;
    }
  }
  uint64_t v70 = 0;
  do
  {
    if ((v68 & 0xC000000000000001) != 0)
    {
      uint64_t v71 = MEMORY[0x1BA9B4580](v70, v68);
    }
    else
    {
      uint64_t v71 = *(void *)(v68 + 8 * v70 + 32);
      swift_retain();
    }
    ++v70;
    uint64_t v129 = v71;
    sub_1B6D56D28((uint64_t)&v129, (uint64_t)v17, a2, a3, (void **)&v127);
    swift_release();
  }
  while (v69 != v70);
LABEL_76:
  swift_bridgeObjectRelease_n();
  v126[0] = (void *)MEMORY[0x1E4FBC860];
  unint64_t v72 = *(void *)(v119 + 120);
  if (v72 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v73 = sub_1B6E32C18();
    if (!v73) {
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v73 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v73) {
      goto LABEL_84;
    }
  }
  uint64_t v74 = 0;
  do
  {
    if ((v72 & 0xC000000000000001) != 0)
    {
      uint64_t v75 = MEMORY[0x1BA9B4580](v74, v72);
    }
    else
    {
      uint64_t v75 = *(void *)(v72 + 8 * v74 + 32);
      swift_retain();
    }
    ++v74;
    uint64_t v129 = v75;
    sub_1B6D57068((uint64_t)&v129, (uint64_t)v17, a2, a3, a1, v7, (uint64_t)v46, v126);
    swift_release();
  }
  while (v73 != v74);
LABEL_84:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t v76 = sub_1B6BDE8D8();
  uint64_t v78 = v77;
  swift_bridgeObjectRelease();
  uint64_t v129 = v76;
  uint64_t v130 = v78;
  sub_1B6E31948();
  uint64_t v79 = v129;
  uint64_t v80 = v130;
  swift_bridgeObjectRetain();
  uint64_t v81 = sub_1B6BDE8D8();
  uint64_t v83 = v82;
  swift_bridgeObjectRelease();
  uint64_t v129 = v81;
  uint64_t v130 = v83;
  sub_1B6E31948();
  sub_1B6895FF4(v79, v80, 48, 0xE100000000000000, v129, v130, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v129 = 8201;
  uint64_t v130 = 0xE200000000000000;
  swift_retain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v85 = v129;
  uint64_t v84 = v130;
  unint64_t v86 = *(void **)(v6 + 128);
  swift_bridgeObjectRetain();
  char v87 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v6 + 128) = v86;
  if ((v87 & 1) == 0)
  {
    unint64_t v86 = sub_1B6335858(0, v86[2] + 1, 1, v86);
    *uint64_t v108 = v86;
  }
  unint64_t v89 = v86[2];
  unint64_t v88 = v86[3];
  if (v89 >= v88 >> 1)
  {
    unint64_t v86 = sub_1B6335858(v88 > 1, v89 + 1, 1, v86);
    *uint64_t v108 = v86;
  }
  v86[2] = v89 + 1;
  int v90 = &v86[2 * v89];
  char v90[4] = v85;
  v90[5] = v84;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v129 = v127;
  swift_bridgeObjectRetain();
  uint64_t v91 = swift_bridgeObjectRetain();
  sub_1B6641518(v91);
  sub_1B6386168(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  sub_1B6646D3C();
  sub_1B6E31638();
  swift_bridgeObjectRelease();
  uint64_t v129 = 2099465;
  uint64_t v130 = 0xE300000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v92 = sub_1B6BDE8D8();
  uint64_t v94 = v93;
  swift_bridgeObjectRelease();
  sub_1B6895C5C(v92, v94, v7);
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v96 = v129;
  uint64_t v95 = v130;
  uint64_t v97 = *(void **)(v6 + 128);
  swift_bridgeObjectRetain();
  char v98 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v6 + 128) = v97;
  if ((v98 & 1) == 0)
  {
    uint64_t v97 = sub_1B6335858(0, v97[2] + 1, 1, v97);
    *uint64_t v108 = v97;
  }
  unint64_t v100 = v97[2];
  unint64_t v99 = v97[3];
  if (v100 >= v99 >> 1)
  {
    uint64_t v97 = sub_1B6335858(v99 > 1, v100 + 1, 1, v97);
    *uint64_t v108 = v97;
  }
  v97[2] = v100 + 1;
  uint64_t v101 = &v97[2 * v100];
  v101[4] = v96;
  v101[5] = v95;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v102 = *(void **)(v6 + 128);
  swift_retain();
  char v103 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v6 + 128) = v102;
  if ((v103 & 1) == 0)
  {
    uint64_t v102 = sub_1B6335858(0, v102[2] + 1, 1, v102);
    *uint64_t v108 = v102;
  }
  unint64_t v105 = v102[2];
  unint64_t v104 = v102[3];
  if (v105 >= v104 >> 1)
  {
    uint64_t v102 = sub_1B6335858(v104 > 1, v105 + 1, 1, v102);
    *uint64_t v108 = v102;
  }
  v102[2] = v105 + 1;
  uint64_t v106 = &v102[2 * v105];
  v106[4] = 8200201;
  v106[5] = 0xE300000000000000;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1B6D55A3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB5F4C(*a1, *a2);
}

uint64_t sub_1B6D55A48()
{
  return sub_1B6BCFA70();
}

uint64_t sub_1B6D55A50()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D55AD8()
{
  return sub_1B69EACCC();
}

uint64_t sub_1B6D55AE0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D5664C();
  *a1 = result;
  return result;
}

void sub_1B6D55B10(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0x80000001B6F2F300;
  unint64_t v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000016;
    unint64_t v4 = 0x80000001B6F2F320;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701869940;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B6D55B68()
{
  int v1 = *v0;
  unint64_t v2 = 0xD000000000000015;
  if (v1 != 1) {
    unint64_t v2 = 0xD000000000000016;
  }
  if (*v0) {
    return v2;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1B6D55BBC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D5664C();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D55BE4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D56510();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D55C20(uint64_t a1)
{
  unint64_t v2 = sub_1B6D56510();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D55C5C(void *a1)
{
  return sub_1B6D55CA8(a1);
}

uint64_t sub_1B6D55CA8(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6D56564(0, &qword_1E9DD9AA0, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v24 = OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs;
  *(void *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs) = MEMORY[0x1E4FBC860];
  uint64_t v20 = OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayOutputs;
  *(void *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayOutputs) = v11;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D56510();
  swift_retain();
  sub_1B6E33A48();
  if (v2)
  {
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s20ArraySequenceSnippetCMa();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v19 = v7;
    LOBYTE(v21[0]) = 0;
    sub_1B629DD00();
    sub_1B6E32DF8();
    uint64_t v13 = v23;
    uint64_t v14 = v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type;
    long long v15 = v22[1];
    *(_OWORD *)uint64_t v14 = v22[0];
    *(_OWORD *)(v14 + 16) = v15;
    *(void *)(v14 + 32) = v13;
    sub_1B6386168(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    LOBYTE(v21[0]) = 1;
    sub_1B6D565C8((unint64_t *)&qword_1EB980308);
    sub_1B6E32DF8();
    *(void *)(v1 + v24) = *(void *)&v22[0];
    swift_bridgeObjectRelease();
    LOBYTE(v21[0]) = 2;
    sub_1B6E32DF8();
    *(void *)(v1 + v20) = *(void *)&v22[0];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B62C1550((uint64_t)a1, (uint64_t)v22);
    sub_1B62C1550((uint64_t)v22, (uint64_t)v21);
    uint64_t v16 = sub_1B6A0D224(v21);
    uint64_t v17 = v19;
    uint64_t v3 = v16;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_1B6D560F8(void *a1)
{
  sub_1B6D56564(0, &qword_1E9DD9A90, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t result = sub_1B6A0DA8C(a1);
  if (!v2)
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6D56510();
    sub_1B6E33A88();
    uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type + 32);
    long long v12 = *(_OWORD *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type + 16);
    v13[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type);
    v13[1] = v12;
    uint64_t v14 = v11;
    char v15 = 0;
    sub_1B6646C2C();
    sub_1B6E32FA8();
    *(void *)&v13[0] = *(void *)(v1
                                   + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs);
    char v15 = 1;
    sub_1B6386168(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1B6D565C8((unint64_t *)&qword_1E9DCFE00);
    sub_1B6E32FA8();
    *(void *)&v13[0] = *(void *)(v1
                                   + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayOutputs);
    char v15 = 2;
    sub_1B6E32FA8();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1B6D56368()
{
  sub_1B629DCAC(*(void *)(v0 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type), *(void *)(v0 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D563C4()
{
  uint64_t v0 = sub_1B6A0E820();
  sub_1B629DCAC(*(void *)(v0 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type), *(void *)(v0 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6D56464()
{
  return _s20ArraySequenceSnippetCMa();
}

uint64_t _s20ArraySequenceSnippetCMa()
{
  uint64_t result = qword_1E9DD9A80;
  if (!qword_1E9DD9A80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B6D564B8()
{
  return swift_updateClassMetadata2();
}

unint64_t sub_1B6D56510()
{
  unint64_t result = qword_1E9DD9A98;
  if (!qword_1E9DD9A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9A98);
  }
  return result;
}

void sub_1B6D56564(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6D56510();
    unint64_t v7 = a3(a1, &_s20ArraySequenceSnippetC10CodingKeysON, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6D565C8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6386168(255, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6D5664C()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D56698(uint64_t *a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  uint64_t v6 = sub_1B6BD40DC(*a1, a1[1]);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 40);
    uint64_t v7 = *(void *)(v6 + 48);
    uint64_t v9 = *(unsigned __int8 *)(*a3 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_1B6A14458(v8, v7, v9);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v10 = *a3;
    long long v29 = xmmword_1B6E9E150;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v11 = sub_1B6BDE8D8();
    uint64_t v13 = v12;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B689554C((uint64_t)&v29, v11, v13, 0, a4);
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    if (a4 == 2) {
      unint64_t v14 = 0xE000000000000000;
    }
    else {
      unint64_t v14 = 0xE100000000000000;
    }
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    char v15 = *(void **)(v10 + 128);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 128) = v15;
    uint64_t v33 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v15 = sub_1B6335858(0, v15[2] + 1, 1, v15);
      *(void *)(v10 + 128) = v15;
    }
    unint64_t v18 = v15[2];
    unint64_t v17 = v15[3];
    if (v18 >= v17 >> 1)
    {
      char v15 = sub_1B6335858(v17 > 1, v18 + 1, 1, v15);
      *(void *)(v10 + 128) = v15;
    }
    unint64_t v15[2] = v18 + 1;
    uint64_t v19 = &v15[2 * v18];
    v19[4] = 8201;
    v19[5] = 0xE200000000000000;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v20 = *a3;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6BDE8D8();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6BDE8D8();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B6BDE8D8();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6BDE8D8();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B6BDE8D8();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void **)(v20 + 128);
    swift_bridgeObjectRetain();
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v20 + 128) = v21;
    if ((v22 & 1) == 0)
    {
      uint64_t v21 = sub_1B6335858(0, v21[2] + 1, 1, v21);
      *(void *)(v20 + 128) = v21;
    }
    unint64_t v24 = v21[2];
    unint64_t v23 = v21[3];
    if (v24 >= v23 >> 1)
    {
      uint64_t v21 = sub_1B6335858(v23 > 1, v24 + 1, 1, v21);
      *(void *)(v20 + 128) = v21;
    }
    v21[2] = v24 + 1;
    long long v25 = &v21[2 * v24];
    v25[4] = 0;
    v25[5] = 0xE000000000000000;
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    *(void *)&long long v29 = 0;
    *((void *)&v29 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v27 = v29;
    int v28 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    *(void *)&long long v29 = 0;
    swift_retain();
    sub_1B6B33E34(v28, (uint64_t *)&v29, v27, *((uint64_t *)&v27 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1B6D56D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v5 = *(void *)(*(void *)a1 + 56);
  unint64_t v6 = *(void *)(*(void *)a1 + 64);
  unint64_t v18 = v6;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRetain_n();
  sub_1B629C9E8(v5, v6);
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_weakInit();
  swift_weakAssign();
  swift_bridgeObjectRetain();
  sub_1B6BDE8D8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B633AF88();
  uint64_t v7 = sub_1B6E32618();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v10 = sub_1B6E31A08();
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v11 = sub_1B6E318C8();
    sub_1B68DEB9C(v11);
    swift_bridgeObjectRetain();
    sub_1B6BDE8D8();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = *a5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a5 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v12 = sub_1B6335858(0, v12[2] + 1, 1, v12);
    *a5 = v12;
  }
  unint64_t v15 = v12[2];
  unint64_t v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    uint64_t v12 = sub_1B6335858(v14 > 1, v15 + 1, 1, v12);
    *a5 = v12;
  }
  void v12[2] = v15 + 1;
  uint64_t v16 = &v12[2 * v15];
  v16[4] = v7;
  v16[5] = v9;
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1B629DCAC(v5, v18);
}

uint64_t sub_1B6D57068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, void **a8)
{
  int v76 = a6;
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  uint64_t v11 = *(void *)(*(void *)a1 + 32);
  sub_1B629C37C(*(void *)a1 + 56, (uint64_t)v75);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v63 = *(void *)(a2 + 24);
  uint64_t v64 = v13;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRetain_n();
  sub_1B6646D94(v75, (void (*)(void, void, void, void, void))sub_1B629C9E8);
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v14 = v63;
  uint64_t v15 = v64;
  _s13ParameterBaseCMa();
  uint64_t inited = (void *)swift_initStackObject();
  swift_weakInit();
  swift_weakAssign();
  inited[3] = v12;
  inited[4] = v11;
  inited[5] = v14;
  inited[6] = v15;
  sub_1B629C37C((uint64_t)v75, (uint64_t)(inited + 7));
  sub_1B6646D94(v75, (void (*)(void, void, void, void, void))sub_1B629C9E8);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1B6BDE8D8();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v63 = v17;
  uint64_t v64 = v19;
  unint64_t v20 = *(void *)(a2 + 32);
  uint64_t v73 = *(void *)(a2 + 24);
  unint64_t v74 = v20;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  sub_1B633AF88();
  uint64_t v21 = sub_1B6E32618();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = v21;
  uint64_t v69 = v23;
  swift_bridgeObjectRetain();
  LOBYTE(v17) = sub_1B6E31A08();
  swift_bridgeObjectRelease();
  if (v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_1B6E318C8();
    sub_1B68DEB9C(v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B6BDE8D8();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((sub_1B6A3D6F0() & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v63 = sub_1B6A3D8B8();
    uint64_t v64 = v25;
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B629C678(v63, v64, v70);
    uint64_t v26 = v70[0];
    unint64_t v27 = v70[1];
    uint64_t v29 = v70[2];
    uint64_t v28 = v70[3];
    uint64_t v30 = v70[4];
    sub_1B666BBB4((uint64_t)v70, (uint64_t)&v71);
    if (v72 != 59)
    {
      sub_1B629C37C((uint64_t)&v71, (uint64_t)&v73);
    }
    else
    {
LABEL_4:
      uint64_t v26 = 0;
      uint64_t v29 = 0;
      uint64_t v28 = 0;
      uint64_t v30 = 0;
      unint64_t v27 = 42;
    }
    sub_1B6646D94(v75, (void (*)(void, void, void, void, void))sub_1B629DCAC);
    uint64_t v63 = v26;
    uint64_t v64 = v27;
    uint64_t v65 = v29;
    uint64_t v66 = v28;
    uint64_t v67 = v30;
    uint64_t v45 = *a5;
    swift_retain_n();
    uint64_t v46 = sub_1B68961CC((uint64_t)&v63, v68, v69, a7, 0, 0, 0, v45, v76);
    uint64_t v48 = v47;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B629DCAC(v26, v27);
    uint64_t v49 = *(void **)(v45 + 128);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v45 + 128) = v49;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v49 = sub_1B6335858(0, v49[2] + 1, 1, v49);
      *(void *)(v45 + 128) = v49;
    }
    unint64_t v52 = v49[2];
    unint64_t v51 = v49[3];
    if (v52 >= v51 >> 1)
    {
      uint64_t v49 = sub_1B6335858(v51 > 1, v52 + 1, 1, v49);
      *(void *)(v45 + 128) = v49;
    }
    v49[2] = v52 + 1;
    uint64_t v53 = &v49[2 * v52];
    v53[4] = v46;
    v53[5] = v48;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v33 = a8;
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v44 = 0;
    unint64_t v43 = 0xE000000000000000;
  }
  else
  {
    char v31 = v76;
    if (v76 == 2)
    {
      uint64_t v63 = 544366966;
      uint64_t v64 = 0xE400000000000000;
      sub_1B6E31948();
      sub_1B6E31948();
      sub_1B6E31948();
      sub_1B68952E0((uint64_t)v75, 2u);
      sub_1B6E31948();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v63 = sub_1B68952E0((uint64_t)v75, v76);
      uint64_t v64 = v32;
      sub_1B6E31948();
      sub_1B6E31948();
      sub_1B6E31948();
    }
    swift_bridgeObjectRelease();
    uint64_t v33 = a8;
    uint64_t v34 = *a5;
    uint64_t v73 = 8201;
    unint64_t v74 = 0xE200000000000000;
    swift_retain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6A3C6F4(v75, 1, (uint64_t)&v63);
    sub_1B6646D94(v75, (void (*)(void, void, void, void, void))sub_1B629DCAC);
    uint64_t v35 = *a5;
    if (v31)
    {
      swift_retain();
      if (v31 == 1) {
        sub_1B68A3024((uint64_t)&v63, v35);
      }
      else {
        sub_1B6896AAC(&v63, v35, 0, 0, 2);
      }
    }
    else
    {
      swift_retain();
      sub_1B689B45C(&v63, v35, 0, 0, 0);
    }
    swift_release();
    sub_1B666BD18((uint64_t)&v63);
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v37 = v73;
    unint64_t v36 = v74;
    unint64_t v38 = *(void **)(v34 + 128);
    swift_bridgeObjectRetain();
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v34 + 128) = v38;
    if ((v39 & 1) == 0)
    {
      unint64_t v38 = sub_1B6335858(0, v38[2] + 1, 1, v38);
      *(void *)(v34 + 128) = v38;
    }
    unint64_t v41 = v38[2];
    unint64_t v40 = v38[3];
    if (v41 >= v40 >> 1)
    {
      unint64_t v38 = sub_1B6335858(v40 > 1, v41 + 1, 1, v38);
      *(void *)(v34 + 128) = v38;
    }
    v38[2] = v41 + 1;
    uint64_t v42 = &v38[2 * v41];
    v42[4] = v37;
    v42[5] = v36;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v63 = 0;
    uint64_t v64 = 0xE000000000000000;
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v44 = v63;
    unint64_t v43 = v64;
  }
  uint64_t v54 = *v33;
  char v55 = swift_isUniquelyReferenced_nonNull_native();
  void *v33 = v54;
  if ((v55 & 1) == 0)
  {
    uint64_t v54 = sub_1B6335858(0, v54[2] + 1, 1, v54);
    void *v33 = v54;
  }
  unint64_t v57 = v54[2];
  unint64_t v56 = v54[3];
  if (v57 >= v56 >> 1)
  {
    uint64_t v54 = sub_1B6335858(v56 > 1, v57 + 1, 1, v54);
    void *v33 = v54;
  }
  v54[2] = v57 + 1;
  uint64_t v58 = &v54[2 * v57];
  v58[4] = v44;
  v58[5] = v43;
  return swift_release();
}

unsigned char *_s20ArraySequenceSnippetC10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D579C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s20ArraySequenceSnippetC10CodingKeysOMa()
{
  return &_s20ArraySequenceSnippetC10CodingKeysON;
}

unint64_t sub_1B6D579FC()
{
  unint64_t result = qword_1E9DD9AA8;
  if (!qword_1E9DD9AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9AA8);
  }
  return result;
}

unint64_t sub_1B6D57A54()
{
  unint64_t result = qword_1E9DD9AB0;
  if (!qword_1E9DD9AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9AB0);
  }
  return result;
}

unint64_t sub_1B6D57AAC()
{
  unint64_t result = qword_1E9DD9AB8;
  if (!qword_1E9DD9AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9AB8);
  }
  return result;
}

uint64_t sub_1B6D57B00(void *a1, float a2, float a3)
{
  sub_1B6D58F5C(0, &qword_1E9DD9B30, (uint64_t (*)(void))sub_1B6D58F08, (uint64_t)&type metadata for GenericLOD.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D58F08();
  sub_1B6E33A88();
  *(float *)&_OWORD v13[2] = a2;
  *(float *)&v13[3] = a3;
  sub_1B62AA858();
  sub_1B62AA5EC(qword_1E9DD02C8);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

unint64_t sub_1B6D57CAC()
{
  return 0xD000000000000013;
}

uint64_t sub_1B6D57CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D58550(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B6D57CF4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58F08();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D57D30(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58F08();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6D57D6C(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_1B6D586F0(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B6D57D98(void *a1)
{
  return sub_1B6D57B00(a1, *v1, v1[1]);
}

double sub_1B6D57DB4@<D0>(void *a1@<X8>)
{
  double result = 6.56066616e69;
  *a1 = 0x4E6E6B2800000000;
  return result;
}

uint64_t sub_1B6D57DC4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1) {
    MEMORY[0x1BA9B84C0](v1, -1, -1);
  }
  uint64_t v2 = *(void *)(v0 + 32);
  if (v2) {
    MEMORY[0x1BA9B84C0](v2, -1, -1);
  }

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LODResource()
{
  return self;
}

ValueMetadata *type metadata accessor for LODResource.Variation()
{
  return &type metadata for LODResource.Variation;
}

ValueMetadata *type metadata accessor for LODState()
{
  return &type metadata for LODState;
}

ValueMetadata *type metadata accessor for LODRenderer()
{
  return &type metadata for LODRenderer;
}

ValueMetadata *type metadata accessor for PointOfCulling()
{
  return &type metadata for PointOfCulling;
}

uint64_t sub_1B6D57E80(void *a1, float a2, float a3)
{
  sub_1B6D58F5C(0, &qword_1E9DD9AD0, (uint64_t (*)(void))sub_1B6D58B10, (uint64_t)&type metadata for LODState.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v10);
  uint64_t v12 = &v14[-v11];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D58B10();
  sub_1B6E33A88();
  float v15 = a2;
  float v16 = a3;
  v14[15] = 0;
  sub_1B62AA858();
  sub_1B62AA5EC(qword_1E9DD02C8);
  sub_1B6E32FA8();
  if (!v3)
  {
    v14[14] = 1;
    sub_1B6E32FD8();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B6D58068(char *a1, char *a2)
{
  return sub_1B6BBA35C(*a1, *a2);
}

uint64_t sub_1B6D58074()
{
  if (*v0) {
    return 0x49646F4C7473616CLL;
  }
  else {
    return 0x676E61527473616CLL;
  }
}

uint64_t sub_1B6D580BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D585D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D580E4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58B10();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D58120(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58B10();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5815C@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1B6D588E4(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = result;
  }
  return result;
}

uint64_t sub_1B6D5818C(void *a1)
{
  return sub_1B6D57E80(a1, *v1, v1[1]);
}

void sub_1B6D581AC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
}

uint64_t sub_1B6D581BC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58B64();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D581F8(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58B64();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D58234(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D5834C(a1, a2, a3, &qword_1E9DD9AD8, (uint64_t (*)(void))sub_1B6D58B64, (uint64_t)&type metadata for PointOfCulling.CodingKeys, (void (*)(void))sub_1B6D58B64);
}

uint64_t sub_1B6D58284(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58EB4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D582C0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58EB4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D582FC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D5834C(a1, a2, a3, &qword_1E9DD9B10, (uint64_t (*)(void))sub_1B6D58EB4, (uint64_t)&type metadata for FrustumCulled.CodingKeys, (void (*)(void))sub_1B6D58EB4);
}

uint64_t sub_1B6D5834C(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6, void (*a7)(void))
{
  sub_1B6D58F5C(0, a4, a5, a6, MEMORY[0x1E4FBBDE0]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)&v16 - v13;
  sub_1B62C14BC(a1, a1[3]);
  a7();
  sub_1B6E33A88();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1B6D58488(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58FC4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D584C4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D58FC4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D58500(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D5834C(a1, a2, a3, &qword_1E9DD9B38, (uint64_t (*)(void))sub_1B6D58FC4, (uint64_t)&type metadata for LODCulled.CodingKeys, (void (*)(void))sub_1B6D58FC4);
}

uint64_t sub_1B6D58550(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001B6F54350)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1B6D585D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E61527473616CLL && a2 == 0xE900000000000065;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x49646F4C7473616CLL && a2 == 0xEC0000007865646ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

float sub_1B6D586F0(void *a1)
{
  sub_1B6D58F5C(0, &qword_1E9DD9B20, (uint64_t (*)(void))sub_1B6D58F08, (uint64_t)&type metadata for GenericLOD.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D58F08();
  sub_1B6E33A48();
  if (!v1)
  {
    sub_1B62AA858();
    sub_1B62AA5EC((unint64_t *)&qword_1EB980418);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    float v2 = v12;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B6D588E4(void *a1)
{
  sub_1B6D58F5C(0, &qword_1E9DD9AC0, (uint64_t (*)(void))sub_1B6D58B10, (uint64_t)&type metadata for LODState.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = &v12[-v7];
  uint64_t v9 = sub_1B62C14BC(a1, a1[3]);
  sub_1B6D58B10();
  uint64_t v10 = (uint64_t)v9;
  sub_1B6E33A48();
  if (!v1)
  {
    sub_1B62AA858();
    v12[15] = 0;
    sub_1B62AA5EC((unint64_t *)&qword_1EB980418);
    sub_1B6E32DF8();
    v12[14] = 1;
    uint64_t v10 = sub_1B6E32E28();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

unint64_t sub_1B6D58B10()
{
  unint64_t result = qword_1E9DD9AC8;
  if (!qword_1E9DD9AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9AC8);
  }
  return result;
}

unint64_t sub_1B6D58B64()
{
  unint64_t result = qword_1E9DD9AE0;
  if (!qword_1E9DD9AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9AE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PointOfCulling.CodingKeys()
{
  return &type metadata for PointOfCulling.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for LODState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D58C94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LODState.CodingKeys()
{
  return &type metadata for LODState.CodingKeys;
}

ValueMetadata *type metadata accessor for FrustumCulled()
{
  return &type metadata for FrustumCulled;
}

ValueMetadata *type metadata accessor for GenericLOD()
{
  return &type metadata for GenericLOD;
}

ValueMetadata *type metadata accessor for LODCulled()
{
  return &type metadata for LODCulled;
}

unint64_t sub_1B6D58D00()
{
  unint64_t result = qword_1E9DD9AE8;
  if (!qword_1E9DD9AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9AE8);
  }
  return result;
}

unint64_t sub_1B6D58D58()
{
  unint64_t result = qword_1E9DD9AF0;
  if (!qword_1E9DD9AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9AF0);
  }
  return result;
}

unint64_t sub_1B6D58DB0()
{
  unint64_t result = qword_1E9DD9AF8;
  if (!qword_1E9DD9AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9AF8);
  }
  return result;
}

unint64_t sub_1B6D58E08()
{
  unint64_t result = qword_1E9DD9B00;
  if (!qword_1E9DD9B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B00);
  }
  return result;
}

unint64_t sub_1B6D58E60()
{
  unint64_t result = qword_1E9DD9B08;
  if (!qword_1E9DD9B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B08);
  }
  return result;
}

unint64_t sub_1B6D58EB4()
{
  unint64_t result = qword_1E9DD9B18;
  if (!qword_1E9DD9B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B18);
  }
  return result;
}

unint64_t sub_1B6D58F08()
{
  unint64_t result = qword_1E9DD9B28;
  if (!qword_1E9DD9B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B28);
  }
  return result;
}

void sub_1B6D58F5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1B6D58FC4()
{
  unint64_t result = qword_1E9DD9B40;
  if (!qword_1E9DD9B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B40);
  }
  return result;
}

ValueMetadata *type metadata accessor for LODCulled.CodingKeys()
{
  return &type metadata for LODCulled.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for GenericLOD.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6D590C4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericLOD.CodingKeys()
{
  return &type metadata for GenericLOD.CodingKeys;
}

ValueMetadata *type metadata accessor for FrustumCulled.CodingKeys()
{
  return &type metadata for FrustumCulled.CodingKeys;
}

unint64_t sub_1B6D59110()
{
  unint64_t result = qword_1E9DD9B48;
  if (!qword_1E9DD9B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B48);
  }
  return result;
}

unint64_t sub_1B6D59168()
{
  unint64_t result = qword_1E9DD9B50;
  if (!qword_1E9DD9B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B50);
  }
  return result;
}

unint64_t sub_1B6D591C0()
{
  unint64_t result = qword_1E9DD9B58;
  if (!qword_1E9DD9B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B58);
  }
  return result;
}

unint64_t sub_1B6D59218()
{
  unint64_t result = qword_1E9DD9B60;
  if (!qword_1E9DD9B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B60);
  }
  return result;
}

unint64_t sub_1B6D59270()
{
  unint64_t result = qword_1E9DD9B68;
  if (!qword_1E9DD9B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B68);
  }
  return result;
}

unint64_t sub_1B6D592C8()
{
  unint64_t result = qword_1E9DD9B70;
  if (!qword_1E9DD9B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B70);
  }
  return result;
}

unint64_t sub_1B6D59320()
{
  unint64_t result = qword_1E9DD9B78;
  if (!qword_1E9DD9B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9B78);
  }
  return result;
}

uint64_t sub_1B6D59374()
{
  return 0x28206D657449;
}

double sub_1B6D594C4@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0F633B8, a1);
}

void *sub_1B6D594D4(void *a1)
{
  *(unsigned char *)(swift_allocObject() + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage) = *((unsigned char *)a1
                                                                                 + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage);
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B6D59520(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A28();
  if (!v2)
  {
    sub_1B62C14BC(v4, v4[3]);
    sub_1B69CB7A0();
    sub_1B6E33518();
    *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage) = v5;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
  }
  return result;
}

void sub_1B6D595E8()
{
}

uint64_t sub_1B6D59618()
{
  return type metadata accessor for CanvasItemNode(0);
}

uint64_t type metadata accessor for CanvasItemNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD9B80);
}

uint64_t sub_1B6D59640()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B6D59684(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  char v5 = *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage);
  sub_1B62C550C((uint64_t)v3, v4);
  sub_1B69CB7F4();
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B6D59738(void *a1)
{
  return sub_1B6D59520(a1);
}

uint64_t sub_1B6D59750()
{
  return 0x4E20796B63697453;
}

double sub_1B6D59770@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0F6B5E8, a1);
}

uint64_t sub_1B6D59780(void *a1, uint64_t a2)
{
  uint64_t v55 = a2;
  int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDE0];
  sub_1B6D5B7EC(0, &qword_1E9DD9C38, (uint64_t (*)(void))sub_1B6D5B54C, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  MEMORY[0x1F4188790](v4, v5);
  unint64_t v52 = (char *)&v37 - v6;
  sub_1B6D5B7EC(0, &qword_1E9DD9C40, (uint64_t (*)(void))sub_1B6D5B5A0, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys, v3);
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v49 = (char *)&v37 - v9;
  sub_1B6D5B7EC(0, &qword_1E9DD9C48, (uint64_t (*)(void))sub_1B6D5B5F4, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys, v3);
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v46 = (char *)&v37 - v12;
  sub_1B6D5B7EC(0, &qword_1E9DD9C50, (uint64_t (*)(void))sub_1B6D5B648, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys, v3);
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  MEMORY[0x1F4188790](v13, v14);
  unint64_t v43 = (char *)&v37 - v15;
  sub_1B6D5B7EC(0, &qword_1E9DD9C58, (uint64_t (*)(void))sub_1B6D5B69C, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys, v3);
  uint64_t v41 = *(void *)(v16 - 8);
  uint64_t v42 = v16;
  MEMORY[0x1F4188790](v16, v17);
  unint64_t v40 = (char *)&v37 - v18;
  sub_1B6D5B7EC(0, &qword_1E9DD9C60, (uint64_t (*)(void))sub_1B6D5B6F0, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys, v3);
  uint64_t v38 = *(void *)(v19 - 8);
  uint64_t v39 = v19;
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v22 = (char *)&v37 - v21;
  sub_1B6D5B7EC(0, &qword_1E9DD9C68, (uint64_t (*)(void))sub_1B6D5B744, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys, v3);
  uint64_t v24 = v23;
  uint64_t v37 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23, v25);
  unint64_t v27 = (char *)&v37 - v26;
  sub_1B6D5B7EC(0, &qword_1E9DD9C70, (uint64_t (*)(void))sub_1B6D5B798, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.CodingKeys, v3);
  uint64_t v29 = v28;
  uint64_t v56 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28, v30);
  uint64_t v32 = (char *)&v37 - v31;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D5B798();
  sub_1B6E33A88();
  switch((char)v55)
  {
    case 1:
      char v58 = 1;
      sub_1B6D5B6F0();
      sub_1B6E32ED8();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v39);
      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v32, v29);
    case 2:
      char v59 = 2;
      sub_1B6D5B69C();
      uint64_t v33 = v40;
      sub_1B6E32ED8();
      uint64_t v35 = v41;
      uint64_t v34 = v42;
      goto LABEL_9;
    case 3:
      char v60 = 3;
      sub_1B6D5B648();
      uint64_t v33 = v43;
      sub_1B6E32ED8();
      uint64_t v35 = v44;
      uint64_t v34 = v45;
      goto LABEL_9;
    case 4:
      char v61 = 4;
      sub_1B6D5B5F4();
      uint64_t v33 = v46;
      sub_1B6E32ED8();
      uint64_t v35 = v47;
      uint64_t v34 = v48;
      goto LABEL_9;
    case 5:
      char v62 = 5;
      sub_1B6D5B5A0();
      uint64_t v33 = v49;
      sub_1B6E32ED8();
      uint64_t v35 = v50;
      uint64_t v34 = v51;
      goto LABEL_9;
    case 6:
      char v63 = 6;
      sub_1B6D5B54C();
      uint64_t v33 = v52;
      sub_1B6E32ED8();
      uint64_t v35 = v53;
      uint64_t v34 = v54;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
      break;
    default:
      char v57 = 0;
      sub_1B6D5B744();
      sub_1B6E32ED8();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v24);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v32, v29);
}

uint64_t sub_1B6D59F14(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B648();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D59F50(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B648();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D59F8C(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB1174(*a1, *a2);
}

uint64_t sub_1B6D59F98()
{
  uint64_t result = 0x65676E61726FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x776F6C6C6579;
      break;
    case 2:
      uint64_t result = 0x6E65657267;
      break;
    case 3:
      uint64_t result = 1702194274;
      break;
    case 4:
      uint64_t result = 0x656C70727570;
      break;
    case 5:
      uint64_t result = 1802398064;
      break;
    case 6:
      uint64_t result = 2036429415;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D5A04C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D5A918(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D5A074(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B798();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5A0B0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B798();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5A0EC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B54C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5A128(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B54C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5A164(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B69C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5A1A0(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B69C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5A1DC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B744();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5A218(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B744();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5A254(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B5A0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5A290(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B5A0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5A2CC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B5F4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5A308(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B5F4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5A344(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B6F0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5A380(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5B6F0();

  return MEMORY[0x1F41862B0](a1, v2);
}

char *sub_1B6D5A3BC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1B6D5ABB0(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1B6D5A3E8(void *a1)
{
  return sub_1B6D59780(a1, *v1);
}

void *sub_1B6D5A404(void *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = OBJC_IVAR____TtC3VFX16CanvasStickyNode_colorScheme;
  uint64_t v4 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text + 8);
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text);
  *uint64_t v5 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text);
  v5[1] = v4;
  *(unsigned char *)(v2 + v3) = *((unsigned char *)a1 + v3);
  swift_bridgeObjectRetain();
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B6D5A46C(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  sub_1B62C550C((uint64_t)v4, v5);
  swift_bridgeObjectRetain();
  sub_1B6E33268();
  swift_bridgeObjectRelease();
  if (!v2 && *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_colorScheme) != 7)
  {
    sub_1B62C550C((uint64_t)v4, v5);
    sub_1B6D5B8A8();
    sub_1B6E332B8();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B6D5A580(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A18();
  if (!v2)
  {
    sub_1B62C550C((uint64_t)v7, v8);
    uint64_t v4 = sub_1B6E33108();
    uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text);
    *uint64_t v5 = v4;
    v5[1] = v6;
    swift_bridgeObjectRelease();
    sub_1B62C550C((uint64_t)v7, v8);
    sub_1B6D5B854();
    sub_1B6E33168();
    *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_colorScheme) = v9;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  }
  return result;
}

void sub_1B6D5A6A4()
{
}

uint64_t sub_1B6D5A6D4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D5A6E8()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6D5A7B0()
{
  return type metadata accessor for CanvasStickyNode(0);
}

uint64_t type metadata accessor for CanvasStickyNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD9B90);
}

uint64_t sub_1B6D5A7D8()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B6D5A824(void *a1)
{
  return sub_1B6D5A46C(a1);
}

uint64_t sub_1B6D5A83C(void *a1)
{
  return sub_1B6D5A580(a1);
}

uint64_t sub_1B6D5A854()
{
  return 0x4720796B63697453;
}

double sub_1B6D5A874@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0F84950, a1);
}

uint64_t sub_1B6D5A884()
{
  return type metadata accessor for CanvasStickyGroupNode(0);
}

uint64_t type metadata accessor for CanvasStickyGroupNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD9BA0);
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme()
{
  return &type metadata for CanvasStickyNode.ColorScheme;
}

unint64_t sub_1B6D5A8C4()
{
  unint64_t result = qword_1E9DD9BB0;
  if (!qword_1E9DD9BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9BB0);
  }
  return result;
}

uint64_t sub_1B6D5A918(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676E61726FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x776F6C6C6579 && a2 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E65657267 && a2 == 0xE500000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1702194274 && a2 == 0xE400000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C70727570 && a2 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1802398064 && a2 == 0xE400000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 2036429415 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

char *sub_1B6D5ABB0(uint64_t a1)
{
  BOOL v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  sub_1B6D5B7EC(0, &qword_1E9DD9BB8, (uint64_t (*)(void))sub_1B6D5B54C, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v62 = *(void *)(v3 - 8);
  uint64_t v63 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v66 = (char *)&v50 - v5;
  sub_1B6D5B7EC(0, &qword_1E9DD9BC8, (uint64_t (*)(void))sub_1B6D5B5A0, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys, v2);
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v69 = (char *)&v50 - v8;
  sub_1B6D5B7EC(0, &qword_1E9DD9BD8, (uint64_t (*)(void))sub_1B6D5B5F4, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys, v2);
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v65 = (char *)&v50 - v11;
  sub_1B6D5B7EC(0, &qword_1E9DD9BE8, (uint64_t (*)(void))sub_1B6D5B648, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys, v2);
  uint64_t v56 = *(void *)(v12 - 8);
  uint64_t v57 = v12;
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v68 = (char *)&v50 - v14;
  sub_1B6D5B7EC(0, &qword_1E9DD9BF8, (uint64_t (*)(void))sub_1B6D5B69C, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys, v2);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v54 = v15;
  uint64_t v55 = v16;
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v67 = (char *)&v50 - v18;
  sub_1B6D5B7EC(0, &qword_1E9DD9C08, (uint64_t (*)(void))sub_1B6D5B6F0, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys, v2);
  uint64_t v52 = *(void *)(v19 - 8);
  uint64_t v53 = v19;
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v64 = (char *)&v50 - v21;
  sub_1B6D5B7EC(0, &qword_1E9DD9C18, (uint64_t (*)(void))sub_1B6D5B744, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys, v2);
  uint64_t v23 = v22;
  uint64_t v51 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v24);
  uint64_t v26 = (char *)&v50 - v25;
  sub_1B6D5B7EC(0, &qword_1E9DD9C28, (uint64_t (*)(void))sub_1B6D5B798, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.CodingKeys, v2);
  uint64_t v28 = v27;
  uint64_t v29 = *(void (***)(char *, uint64_t))(v27 - 8);
  MEMORY[0x1F4188790](v27, v30);
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v71 = a1;
  uint64_t v32 = (void *)a1;
  uint64_t v34 = (char *)&v50 - v33;
  sub_1B62C14BC(v32, v31);
  sub_1B6D5B798();
  uint64_t v70 = v34;
  uint64_t v35 = v72;
  sub_1B6E33A48();
  if (v35) {
    goto LABEL_13;
  }
  uint64_t v72 = v23;
  unint64_t v36 = v67;
  uint64_t v37 = v68;
  uint64_t v38 = v69;
  uint64_t v39 = v29;
  uint64_t v40 = sub_1B6E32E88();
  if (*(void *)(v40 + 16) != 1)
  {
    uint64_t v41 = sub_1B6E32998();
    swift_allocError();
    uint64_t v42 = v70;
    uint64_t v44 = v43;
    sub_1B6835D08();
    uint64_t v29 = (void (**)(char *, uint64_t))((char *)v44 + *(int *)(v45 + 48));
    *uint64_t v44 = &type metadata for CanvasStickyNode.ColorScheme;
    sub_1B6E32D08();
    sub_1B6E32978();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v44, *MEMORY[0x1E4FBBA70], v41);
    swift_willThrow();
    swift_bridgeObjectRelease();
    v39[1](v42, v28);
LABEL_13:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v71);
    return (char *)v29;
  }
  uint64_t v29 = (void (**)(char *, uint64_t))*(unsigned __int8 *)(v40 + 32);
  switch(*(unsigned char *)(v40 + 32))
  {
    case 1:
      char v74 = 1;
      sub_1B6D5B6F0();
      uint64_t v37 = v64;
      sub_1B6E32CF8();
      uint64_t v47 = v52;
      uint64_t v46 = v53;
      goto LABEL_10;
    case 2:
      char v75 = 2;
      sub_1B6D5B69C();
      sub_1B6E32CF8();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v54);
      break;
    case 3:
      char v76 = 3;
      sub_1B6D5B648();
      sub_1B6E32CF8();
      uint64_t v47 = v56;
      uint64_t v46 = v57;
      goto LABEL_10;
    case 4:
      char v77 = 4;
      sub_1B6D5B5F4();
      uint64_t v37 = v65;
      sub_1B6E32CF8();
      uint64_t v47 = v58;
      uint64_t v46 = v59;
LABEL_10:
      (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v46);
      break;
    case 5:
      char v78 = 5;
      sub_1B6D5B5A0();
      sub_1B6E32CF8();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v38, v61);
      break;
    case 6:
      char v79 = 6;
      sub_1B6D5B54C();
      uint64_t v48 = v66;
      sub_1B6E32CF8();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v63);
      break;
    default:
      char v73 = 0;
      sub_1B6D5B744();
      sub_1B6E32CF8();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v26, v72);
      break;
  }
  swift_bridgeObjectRelease();
  v39[1](v70, v28);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v71);
  return (char *)v29;
}

unint64_t sub_1B6D5B54C()
{
  unint64_t result = qword_1E9DD9BC0;
  if (!qword_1E9DD9BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9BC0);
  }
  return result;
}

unint64_t sub_1B6D5B5A0()
{
  unint64_t result = qword_1E9DD9BD0;
  if (!qword_1E9DD9BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9BD0);
  }
  return result;
}

unint64_t sub_1B6D5B5F4()
{
  unint64_t result = qword_1E9DD9BE0;
  if (!qword_1E9DD9BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9BE0);
  }
  return result;
}

unint64_t sub_1B6D5B648()
{
  unint64_t result = qword_1E9DD9BF0;
  if (!qword_1E9DD9BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9BF0);
  }
  return result;
}

unint64_t sub_1B6D5B69C()
{
  unint64_t result = qword_1E9DD9C00;
  if (!qword_1E9DD9C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C00);
  }
  return result;
}

unint64_t sub_1B6D5B6F0()
{
  unint64_t result = qword_1E9DD9C10;
  if (!qword_1E9DD9C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C10);
  }
  return result;
}

unint64_t sub_1B6D5B744()
{
  unint64_t result = qword_1E9DD9C20;
  if (!qword_1E9DD9C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C20);
  }
  return result;
}

unint64_t sub_1B6D5B798()
{
  unint64_t result = qword_1E9DD9C30;
  if (!qword_1E9DD9C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C30);
  }
  return result;
}

void sub_1B6D5B7EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1B6D5B854()
{
  unint64_t result = qword_1E9DD9C78;
  if (!qword_1E9DD9C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C78);
  }
  return result;
}

unint64_t sub_1B6D5B8A8()
{
  unint64_t result = qword_1E9DD9C80;
  if (!qword_1E9DD9C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C80);
  }
  return result;
}

unsigned char *_s3VFX16CanvasStickyNodeC11ColorSchemeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D5B9C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.CodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.CodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.OrangeCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.YellowCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.GreenCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.BlueCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.PurpleCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.PinkCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.GrayCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys;
}

unint64_t sub_1B6D5BA74()
{
  unint64_t result = qword_1E9DD9C88;
  if (!qword_1E9DD9C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C88);
  }
  return result;
}

unint64_t sub_1B6D5BACC()
{
  unint64_t result = qword_1E9DD9C90;
  if (!qword_1E9DD9C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C90);
  }
  return result;
}

unint64_t sub_1B6D5BB24()
{
  unint64_t result = qword_1E9DD9C98;
  if (!qword_1E9DD9C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9C98);
  }
  return result;
}

unint64_t sub_1B6D5BB7C()
{
  unint64_t result = qword_1E9DD9CA0;
  if (!qword_1E9DD9CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CA0);
  }
  return result;
}

unint64_t sub_1B6D5BBD4()
{
  unint64_t result = qword_1E9DD9CA8;
  if (!qword_1E9DD9CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CA8);
  }
  return result;
}

unint64_t sub_1B6D5BC2C()
{
  unint64_t result = qword_1E9DD9CB0;
  if (!qword_1E9DD9CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CB0);
  }
  return result;
}

unint64_t sub_1B6D5BC84()
{
  unint64_t result = qword_1E9DD9CB8;
  if (!qword_1E9DD9CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CB8);
  }
  return result;
}

unint64_t sub_1B6D5BCDC()
{
  unint64_t result = qword_1E9DD9CC0;
  if (!qword_1E9DD9CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CC0);
  }
  return result;
}

unint64_t sub_1B6D5BD34()
{
  unint64_t result = qword_1E9DD9CC8;
  if (!qword_1E9DD9CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CC8);
  }
  return result;
}

unint64_t sub_1B6D5BD8C()
{
  unint64_t result = qword_1E9DD9CD0;
  if (!qword_1E9DD9CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CD0);
  }
  return result;
}

unint64_t sub_1B6D5BDE4()
{
  unint64_t result = qword_1E9DD9CD8;
  if (!qword_1E9DD9CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CD8);
  }
  return result;
}

unint64_t sub_1B6D5BE3C()
{
  unint64_t result = qword_1E9DD9CE0;
  if (!qword_1E9DD9CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CE0);
  }
  return result;
}

unint64_t sub_1B6D5BE94()
{
  unint64_t result = qword_1E9DD9CE8;
  if (!qword_1E9DD9CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CE8);
  }
  return result;
}

unint64_t sub_1B6D5BEEC()
{
  unint64_t result = qword_1E9DD9CF0;
  if (!qword_1E9DD9CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CF0);
  }
  return result;
}

unint64_t sub_1B6D5BF44()
{
  unint64_t result = qword_1E9DD9CF8;
  if (!qword_1E9DD9CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9CF8);
  }
  return result;
}

unint64_t sub_1B6D5BF9C()
{
  unint64_t result = qword_1E9DD9D00;
  if (!qword_1E9DD9D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D00);
  }
  return result;
}

unint64_t sub_1B6D5BFF4()
{
  unint64_t result = qword_1E9DD9D08;
  if (!qword_1E9DD9D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D08);
  }
  return result;
}

uint64_t sub_1B6D5C048()
{
  swift_unknownObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *initializeBufferWithCopyOfBuffer for NoHeapTextureAllocator.UnusedTexture(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for NoHeapTextureAllocator.UnusedTexture(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for NoHeapTextureAllocator.UnusedTexture(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for NoHeapTextureAllocator.UnusedTexture()
{
  return &type metadata for NoHeapTextureAllocator.UnusedTexture;
}

double sub_1B6D5C16C@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 4) = xmmword_1B6ECE0A0;
  double result = 0.0000000134110482;
  *(void *)(a1 + 20) = 0x3E4CCCCD3DCCCCCDLL;
  *(_DWORD *)(a1 + 28) = 1065353216;
  return result;
}

uint64_t sub_1B6D5C194(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB1A6C(*a1, *a2);
}

uint64_t sub_1B6D5C1A0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D5C26C()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6D5C320()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D5C3E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D5CE90();
  *a1 = result;
  return result;
}

void sub_1B6D5C418(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701080941;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x65676E615278;
      goto LABEL_3;
    case 2:
      uint64_t v4 = 0x65676E615279;
      goto LABEL_6;
    case 3:
      uint64_t v4 = 0x65676E61527ALL;
LABEL_6:
      *a1 = v4;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B6D5C4A0()
{
  uint64_t result = 1701080941;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65676E615278;
      break;
    case 2:
      uint64_t result = 0x65676E615279;
      break;
    case 3:
      uint64_t result = 0x65676E61527ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6D5C520@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6D5CE90();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D5C548(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5D360();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5C584(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5D360();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5C5C0(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6D5D3B4(0, &qword_1E9DD9D10, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D5D360();
  sub_1B6E33A88();
  LOBYTE(v12) = *(unsigned char *)v3;
  char v13 = 0;
  sub_1B66C60C4();
  sub_1B6E32FA8();
  if (!v2)
  {
    uint64_t v12 = *(void *)(v3 + 4);
    char v13 = 1;
    sub_1B62AA858();
    sub_1B62AA5EC(qword_1E9DD02C8);
    sub_1B6E32FA8();
    uint64_t v12 = *(void *)(v3 + 12);
    char v13 = 2;
    sub_1B6E32FA8();
    uint64_t v12 = *(void *)(v3 + 20);
    char v13 = 3;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B6D5C804@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B6D5D050(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B6D5C840(void *a1)
{
  return sub_1B6D5C5C0(a1);
}

uint64_t sub_1B6D5C858(uint64_t a1, unsigned char *a2, void *a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  if (*a2)
  {
    if (*a2 == 1)
    {
      uint64_t result = sub_1B67A836C();
      if ((v14 & 1) == 0)
      {
        uint64_t v16 = *(void *)(a1 + 48);
        uint64_t v15 = *(void *)(a1 + 56);
        LODWORD(v17) = LODWORD(a4);
        if (*(float *)&a4 == a5 && a6 == a7)
        {
          uint64_t v18 = v15 - v16;
          if (v18)
          {
            *((float *)&v17 + 1) = a6;
            uint64_t v19 = (void *)(result + 8 * v16);
            do
            {
              *v19++ = v17;
              --v18;
            }
            while (v18);
          }
          return result;
        }
        uint64_t v65 = v15 - v16;
        if (!v65) {
          return result;
        }
        uint64_t v48 = a3[3];
        uint64_t v66 = a3[4];
        uint64_t v67 = (void *)(result + 8 * v16);
        uint64_t v69 = a3[1];
        uint64_t v68 = a3[2];
        do
        {
          uint64_t v70 = v69 ^ v48;
          uint64_t v71 = v68 ^ v66;
          uint64_t v72 = v70 ^ v68;
          uint64_t v73 = v69 ^ v71;
          uint64_t v74 = v70 ^ (v68 << 17) ^ v73;
          uint64_t v75 = __ROR8__(v71, 19);
          float v76 = (float)((9 * ((((unint64_t)(5 * v68) >> 32) >> 25) | (640 * v68))) & 0xFFFFFF)
              * 0.000000059605;
          uint64_t v68 = v74 ^ v72;
          uint64_t v69 = v72 ^ v75 ^ v73;
          uint64_t v48 = v74 ^ (v72 << 17);
          uint64_t v66 = __ROR8__(v72 ^ v75, 19);
          *(float *)&uint64_t v77 = (float)((float)(a5 - *(float *)&a4) * v76) + *(float *)&a4;
          *((float *)&v77 + 1) = (float)((float)(a7 - a6)
                                       * (float)((float)((9
                                                        * ((((unint64_t)(5 * v72) >> 32) >> 25) | (640 * v72))) & 0xFFFFFF)
                                               * 0.000000059605))
                               + a6;
          *v67++ = v77;
          --v65;
        }
        while (v65);
        a3[1] = v69;
        a3[2] = v68;
        a3[4] = v66;
LABEL_46:
        a3[3] = v48;
        return result;
      }
      uint64_t result = sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
      uint64_t v37 = *(void *)(a1 + 48);
      uint64_t v36 = *(void *)(a1 + 56);
      LODWORD(v38) = LODWORD(a4);
      if (*(float *)&a4 == a5 && a6 == a7)
      {
        uint64_t v39 = v36 - v37;
        if (v39)
        {
          *((float *)&v38 + 1) = a6;
          *((void *)&v38 + 1) = COERCE_UNSIGNED_INT(1.0);
          uint64_t v40 = (_OWORD *)(result + 16 * v37);
          do
          {
            *v40++ = v38;
            --v39;
          }
          while (v39);
        }
      }
      else
      {
        uint64_t v78 = v36 - v37;
        if (v78)
        {
          uint64_t v79 = a3[3];
          uint64_t v80 = a3[4];
          uint64_t v81 = (_OWORD *)(result + 16 * v37);
          uint64_t v83 = a3[1];
          uint64_t v82 = a3[2];
          do
          {
            uint64_t v84 = v83 ^ v79;
            uint64_t v85 = v82 ^ v80;
            uint64_t v86 = v84 ^ v82;
            uint64_t v87 = v83 ^ v85;
            float v88 = (float)(a5 - *(float *)&a4)
                * (float)((float)((9 * ((((unint64_t)(5 * v82) >> 32) >> 25) | (640 * v82))) & 0xFFFFFF)
                        * 0.000000059605);
            uint64_t v89 = v84 ^ (v82 << 17) ^ v87;
            uint64_t v90 = __ROR8__(v85, 19);
            v82 ^= v89 ^ v84;
            *(float *)&long long v91 = v88 + *(float *)&a4;
            uint64_t v83 = v86 ^ v90 ^ v87;
            *((float *)&v91 + 1) = (float)((float)(a7 - a6)
                                         * (float)((float)((9
                                                          * ((((unint64_t)(5 * v86) >> 32) >> 25) | (640 * v86))) & 0xFFFFFF)
                                                 * 0.000000059605))
                                 + a6;
            *((void *)&v91 + 1) = COERCE_UNSIGNED_INT(1.0);
            uint64_t v80 = __ROR8__(v86 ^ v90, 19);
            uint64_t v79 = v89 ^ (v86 << 17);
            *v81++ = v91;
            --v78;
          }
          while (v78);
          a3[1] = v83;
          a3[2] = v82;
          a3[3] = v79;
          a3[4] = v80;
        }
      }
    }
    else
    {
      uint64_t result = sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
      uint64_t v32 = *(void *)(a1 + 48);
      uint64_t v31 = *(void *)(a1 + 56);
      if (*(float *)&a4 != a5 || a6 != a7 || a8 != a9)
      {
        uint64_t v47 = v31 - v32;
        if (!v47) {
          return result;
        }
        uint64_t v48 = a3[3];
        uint64_t v49 = a3[4];
        uint64_t v50 = (_OWORD *)(result + 16 * v32);
        uint64_t v52 = a3[1];
        uint64_t v51 = a3[2];
        do
        {
          uint64_t v53 = v52 ^ v48;
          uint64_t v54 = v51 ^ v49;
          uint64_t v55 = v53 ^ v51;
          uint64_t v56 = v52 ^ v54;
          float v57 = (float)((9 * ((((unint64_t)(5 * v51) >> 32) >> 25) | (640 * v51))) & 0xFFFFFF);
          uint64_t v58 = v53 ^ (v51 << 17) ^ v56;
          uint64_t v59 = __ROR8__(v54, 19);
          uint64_t v60 = v58 ^ v55;
          uint64_t v61 = v55 ^ v59 ^ v56;
          uint64_t v62 = v58 ^ (v55 << 17) ^ v61;
          uint64_t v63 = __ROR8__(v55 ^ v59, 19);
          uint64_t v51 = v62 ^ v60;
          uint64_t v52 = v60 ^ v63 ^ v61;
          uint64_t v48 = v62 ^ (v60 << 17);
          HIDWORD(v64) = 0;
          *(float *)&long long v64 = (float)((float)(a5 - *(float *)&a4) * (float)(v57 * 0.000000059605)) + *(float *)&a4;
          *((float *)&v64 + 1) = (float)((float)(a7 - a6)
                                       * (float)((float)((9
                                                        * ((((unint64_t)(5 * v55) >> 32) >> 25) | (640 * v55))) & 0xFFFFFF)
                                               * 0.000000059605))
                               + a6;
          uint64_t v49 = __ROR8__(v60 ^ v63, 19);
          *((float *)&v64 + 2) = (float)((float)(a9 - a8)
                                       * (float)((float)((9
                                                        * ((((unint64_t)(5 * v60) >> 32) >> 25) | (640 * v60))) & 0xFFFFFF)
                                               * 0.000000059605))
                               + a8;
          *v50++ = v64;
          --v47;
        }
        while (v47);
        a3[1] = v52;
        a3[2] = v51;
        a3[4] = v49;
        goto LABEL_46;
      }
      uint64_t v33 = v31 - v32;
      if (v33)
      {
        *(void *)&long long v34 = __PAIR64__(LODWORD(a6), LODWORD(a4));
        *((void *)&v34 + 1) = LODWORD(a8);
        uint64_t v35 = (_OWORD *)(result + 16 * v32);
        do
        {
          *v35++ = v34;
          --v33;
        }
        while (v33);
      }
    }
  }
  else
  {
    uint64_t result = sub_1B67A82F8();
    if (v20)
    {
      uint64_t result = sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
      uint64_t v43 = *(void *)(a1 + 48);
      uint64_t v42 = *(void *)(a1 + 56);
      if (*(float *)&a4 == a5)
      {
        uint64_t v44 = v42 - v43;
        if (v44)
        {
          int32x4_t v45 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          v45.i32[3] = 0;
          uint64_t v46 = (int32x4_t *)(result + 16 * v43);
          do
          {
            *v46++ = v45;
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        uint64_t v101 = v42 - v43;
        if (v101)
        {
          uint64_t v102 = a3[3];
          uint64_t v103 = a3[4];
          unint64_t v104 = (int32x4_t *)(result + 16 * v43);
          uint64_t v105 = a3[1];
          uint64_t v106 = a3[2];
          do
          {
            int v107 = 9 * ((((unint64_t)(5 * v106) >> 32) >> 25) | (640 * v106));
            uint64_t v108 = v105 ^ v102;
            uint64_t v109 = v106 ^ v103;
            v102 ^= v105 ^ (v106 << 17);
            v106 ^= v108;
            *(float *)v41.i32 = (float)((float)(a5 - *(float *)&a4)
                                      * (float)((float)(*(void *)&v107 & 0xFFFFFFLL) * 0.000000059605))
                              + *(float *)&a4;
            int32x4_t v41 = vdupq_lane_s32(*(int32x2_t *)v41.i8, 0);
            uint64_t v103 = __ROR8__(v109, 19);
            v105 ^= v109;
            v41.i32[3] = 0;
            *v104++ = v41;
            --v101;
          }
          while (v101);
          a3[1] = v105;
          a3[2] = v106;
          a3[3] = v102;
          a3[4] = v103;
        }
      }
    }
    else
    {
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 56);
      if (*(float *)&a4 == a5)
      {
        unint64_t v23 = v21 - v22;
        if (v21 != v22)
        {
          uint64_t v24 = *(void *)(a1 + 48);
          if (v23 < 8) {
            goto LABEL_17;
          }
          uint64_t v24 = v22 + (v23 & 0xFFFFFFFFFFFFFFF8);
          int32x4_t v25 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          uint64_t v26 = (int32x4_t *)(result + 4 * v22 + 16);
          unint64_t v27 = v23 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v26[-1] = v25;
            *uint64_t v26 = v25;
            v26 += 2;
            v27 -= 8;
          }
          while (v27);
          if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_17:
            uint64_t v28 = v21 - v24;
            uint64_t v29 = (_DWORD *)(result + 4 * v24);
            do
            {
              *v29++ = LODWORD(a4);
              --v28;
            }
            while (v28);
          }
        }
      }
      else
      {
        uint64_t v92 = v21 - v22;
        if (v92)
        {
          uint64_t v93 = a3[3];
          uint64_t v94 = a3[4];
          uint64_t v95 = (float *)(result + 4 * v22);
          uint64_t v96 = a3[1];
          uint64_t v97 = a3[2];
          do
          {
            int v98 = 9 * ((((unint64_t)(5 * v97) >> 32) >> 25) | (640 * v97));
            uint64_t v99 = v96 ^ v93;
            uint64_t v100 = v97 ^ v94;
            v93 ^= v96 ^ (v97 << 17);
            v97 ^= v99;
            v96 ^= v100;
            uint64_t v94 = __ROR8__(v100, 19);
            *v95++ = (float)((float)(a5 - *(float *)&a4)
                           * (float)((float)(*(void *)&v98 & 0xFFFFFFLL) * 0.000000059605))
                   + *(float *)&a4;
            --v92;
          }
          while (v92);
          a3[1] = v96;
          a3[2] = v97;
          a3[3] = v93;
          a3[4] = v94;
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for ParticleSizeInit.GPUSystem()
{
  return self;
}

const char *sub_1B6D5CE5C()
{
  return "ParticleSizeInit.GPU";
}

uint64_t sub_1B6D5CE70()
{
  return type metadata accessor for ParticleSizeInit.GPUSystem();
}

uint64_t sub_1B6D5CE90()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 4) {
    return 4;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6D5CEDC(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  swift_retain();
  sub_1B62F9FC4(v3, v18);
  swift_release();
  if (v18[0] == 3)
  {
    float v5 = 0.0;
    float32x4_t v6 = (float32x4_t)xmmword_1B6ECE0A0;
    float v7 = 1.0;
    float v8 = 0.2;
    float v9 = 0.1;
  }
  else
  {
    float32x4_t v6 = *(float32x4_t *)&v18[4];
    float v9 = v19;
    float v8 = v20;
    float v7 = v21;
    LODWORD(v5) = v18[0];
  }
  *(float32x4_t *)uint64_t v18 = vmulq_n_f32(v6, v7);
  *(float *)&v18[16] = v9 * v7;
  float v19 = v8 * v7;
  float v20 = v5;
  uint64_t v10 = *a1;
  if (*a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_size_uniforms(0);
    sub_1B6B594A8((uint64_t)v18, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B6786A24((uint64_t)a1);
  sub_1B6BFF388(v4, v2, v10 == 0, 0, (uint64_t)a1, 0xD000000000000011, 0x80000001B6F54560, 0);
  sub_1B6786A7C((uint64_t)a1);
  return swift_release();
}

uint64_t sub_1B6D5D050@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6D5D3B4(0, &qword_1EB981290, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v19 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D5D360();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  char v22 = 0;
  sub_1B66C6070();
  sub_1B6E32DF8();
  int v21 = v20;
  sub_1B62AA858();
  char v22 = 1;
  sub_1B62AA5EC((unint64_t *)&qword_1EB980418);
  sub_1B6E32DF8();
  uint64_t v11 = v20;
  char v22 = 2;
  sub_1B6E32DF8();
  uint64_t v13 = v20;
  char v22 = 3;
  sub_1B6E32DF8();
  uint64_t v14 = v20;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_1B62C14BC(a1, v15);
  BOOL v17 = sub_1B62BF5E0(2026, v15, v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v17) {
    float v18 = 2.0;
  }
  else {
    float v18 = 1.0;
  }
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(unsigned char *)a2 = v21;
  *(void *)(a2 + 4) = v11;
  *(void *)(a2 + 12) = v13;
  *(void *)(a2 + 20) = v14;
  *(float *)(a2 + 28) = v18;
  return result;
}

unint64_t sub_1B6D5D360()
{
  unint64_t result = qword_1EB9810B0;
  if (!qword_1EB9810B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB9810B0);
  }
  return result;
}

void sub_1B6D5D3B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6D5D360();
    unint64_t v7 = a3(a1, &type metadata for ParticleSizeInit.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ParticleSizeInit.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D5D4E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeInit.CodingKeys()
{
  return &type metadata for ParticleSizeInit.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ParticleSizeInit(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[32]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleSizeInit(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeInit()
{
  return &type metadata for ParticleSizeInit;
}

unint64_t sub_1B6D5D5B8()
{
  unint64_t result = qword_1E9DD9D18;
  if (!qword_1E9DD9D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D18);
  }
  return result;
}

unint64_t sub_1B6D5D610()
{
  unint64_t result = qword_1EB9810C0;
  if (!qword_1EB9810C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB9810C0);
  }
  return result;
}

unint64_t sub_1B6D5D668()
{
  unint64_t result = qword_1EB9810B8;
  if (!qword_1EB9810B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB9810B8);
  }
  return result;
}

uint64_t sub_1B6D5D6BC(void *a1, void *a2, uint64_t a3, uint64_t a4, id *a5)
{
  *(void *)&long long v19 = 0xD000000000000010;
  *((void *)&v19 + 1) = 0x80000001B6F396F0;
  long long v20 = 0uLL;
  unint64_t v9 = 0x7065645F79706F63;
  if (a4) {
    unint64_t v9 = 0xD000000000000010;
  }
  *(void *)&long long v21 = MEMORY[0x1E4FBC860];
  *((void *)&v21 + 1) = v9;
  if (a4) {
    unint64_t v10 = 0x80000001B6F545F0;
  }
  else {
    unint64_t v10 = 0xEA00000000006874;
  }
  long long v22 = v10;
  *(void *)&long long v23 = 0;
  *((void *)&v23 + 1) = MEMORY[0x1E4FBC860];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  v31[0] = v19;
  v31[1] = v20;
  memset(&v31[5], 0, 96);
  v31[4] = v23;
  _OWORD v31[2] = v21;
  id v31[3] = v10;
  v32[0] = 0;
  v32[1] = 0;
  long long v33 = xmmword_1B6E50D30;
  long long v34 = xmmword_1B6E50D30;
  __int16 v35 = 15;
  v36[0] = 0;
  v36[1] = 0;
  v36[2] = 2;
  memset(&v36[3], 0, 24);
  swift_bridgeObjectRetain();
  sub_1B62D5ED4((uint64_t *)v31, a2, 0, 0, 0, (uint64_t)v32, 3, (uint64_t)v36, (uint64_t)v30, 1, 1);
  sub_1B638A224((uint64_t *)&v19);
  unint64_t v11 = sub_1B638A310((uint64_t)v30, 0);
  uint64_t v13 = v12;
  unint64_t v14 = 0;
  if (v11 >= 3)
  {
    unint64_t v11 = swift_unknownObjectRetain();
    unint64_t v14 = v11;
  }
  sub_1B630B7D8(v11, v13);
  sub_1B638CE7C(v30);
  swift_bridgeObjectRelease();
  swift_getObjectType();
  objc_msgSend(a1, sel_setRenderPipelineState_, v14);
  objc_msgSend(a1, sel_setDepthStencilState_, *(void *)(*(void *)(a3 + 248) + 480));
  if (!*a5)
  {
    id v16 = 0;
LABEL_15:
    objc_msgSend(a1, sel_setFragmentTexture_atIndex_, v16, 0);
    goto LABEL_16;
  }
  if (objc_msgSend(*a5, sel_storageMode) != (id)3)
  {
    id v16 = *a5;
    goto LABEL_15;
  }
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v15 = sub_1B6E32148();
  uint64_t v18 = 1;
  sub_1B6B33B70(v15, 0xD000000000000037, 0x80000001B6F54610, &v18);
  swift_release();
LABEL_16:
  sub_1B6389C1C(1);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B6D5D98C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  *(void *)&v75[0] = 0xD000000000000010;
  *((void *)&v75[0] + 1) = 0x80000001B6F396F0;
  v75[1] = 0uLL;
  *(_OWORD *)&v76[8] = xmmword_1B6ECE350;
  *(void *)float v76 = MEMORY[0x1E4FBC860];
  uint64_t v77 = 0;
  *(void *)&long long v78 = 0;
  *((void *)&v78 + 1) = MEMORY[0x1E4FBC860];
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  v69[1] = 0uLL;
  v69[0] = v75[0];
  memset(&v69[5], 0, 96);
  v69[4] = v78;
  v69[2] = *(_OWORD *)v76;
  v69[3] = 0xEE00687470654465;
  v70[1] = 0;
  v70[0] = 0;
  long long v71 = xmmword_1B6E50D30;
  long long v72 = xmmword_1B6E50D30;
  __int16 v73 = 15;
  v74[1] = 0;
  v74[0] = 0;
  v74[2] = 2;
  memset(&v74[3], 0, 24);
  sub_1B62D5ED4((uint64_t *)v69, a2, 0, 0, 0, (uint64_t)v70, 3, (uint64_t)v74, (uint64_t)v48, 1, 1);
  sub_1B638A224((uint64_t *)v75);
  unint64_t v11 = sub_1B638A310((uint64_t)v48, 0);
  uint64_t v13 = v12;
  unint64_t v14 = 0;
  if (v11 >= 3)
  {
    unint64_t v11 = swift_unknownObjectRetain();
    unint64_t v14 = v11;
  }
  sub_1B630B7D8(v11, v13);
  sub_1B638CE7C(v48);
  uint64_t ObjectType = swift_getObjectType();
  objc_msgSend(a1, sel_setRenderPipelineState_, v14);
  RGTextureDescriptor.init()((uint64_t)v49);
  sub_1B6388B3C(a3 + 624, (uint64_t)v46);
  sub_1B6388B3C((uint64_t)v46, (uint64_t)v47);
  if (sub_1B6388C10(v47) == 1) {
    goto LABEL_11;
  }
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  int32x4_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v43 = a1;
  uint64_t v15 = v47[1];
  uint64_t v16 = swift_getObjectType();
  BOOL v17 = *(double (**)(uint64_t, uint64_t))(v15 + 72);
  swift_unknownObjectRetain();
  double v18 = v17(v16, v15);
  swift_unknownObjectRelease();
  sub_1B6388B3C(a3 + 624, (uint64_t)v44);
  sub_1B6388B3C((uint64_t)v44, (uint64_t)v45);
  if (sub_1B6388C10(v45) == 1)
  {
LABEL_11:
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  else
  {
    uint64_t v19 = (uint64_t)v18;
    uint64_t v20 = v45[1];
    uint64_t v37 = v55;
    long long v36 = v54;
    uint64_t v21 = v53;
    char v22 = v52;
    char v23 = v51;
    int v24 = v50;
    uint64_t v25 = swift_getObjectType();
    long long v26 = *(void (**)(uint64_t, uint64_t))(v20 + 72);
    swift_unknownObjectRetain();
    v26(v25, v20);
    double v28 = v27;
    swift_unknownObjectRelease();
    uint64_t v29 = *(void *)(v39 + 408);
    __int16 v57 = v19;
    __int16 v58 = (uint64_t)v28;
    int v59 = v24;
    char v60 = 1;
    char v61 = v23;
    char v62 = v22;
    uint64_t v63 = v29;
    uint64_t v64 = v21;
    long long v65 = xmmword_1B6E500D0;
    long long v66 = v36;
    uint64_t v67 = v37;
    int v68 = v56;
    sub_1B638D61C();
    float v30 = *(float *)(v40 + 20);
    float v31 = 1.0;
    if (v30 >= 1.0)
    {
      uint64_t v34 = v42;
      long long v33 = v43;
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v34 = v42;
      long long v33 = v43;
      do
      {
        ++v32;
        float v31 = v31 * 0.5;
      }
      while (v30 < v31);
    }
    swift_getObjectType();
    objc_msgSend(v41, sel_pixelFormat);
    objc_msgSend(v41, sel_textureType);
    objc_msgSend(v33, sel_setFragmentTexture_atIndex_, sub_1B6E32108(), 0);
    sub_1B635FB18(v34, ObjectType);
    sub_1B6389C1C(1);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B6D5DE24()
{
  sub_1B62D2B64();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E77050;
  *(void *)(v0 + 32) = &type metadata for NullEntityComponent;
  *(void *)(v0 + 40) = &off_1F0F7CFF8;
  type metadata accessor for EntityFamily();
  uint64_t v1 = swift_allocObject();
  uint64_t result = sub_1B637E560(-1, v0, MEMORY[0x1E4FBC860]);
  qword_1EB997A58 = v1;
  return result;
}

uint64_t sub_1B6D5DEA8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B6D5DF1C()
{
  sub_1B6D5DEA8();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6D5DF50()
{
  int64_t v1 = *(void *)(*(void *)(v0 + 24) + 16);
  if (v1)
  {
    v11[0] = MEMORY[0x1E4FBC860];
    swift_retain();
    sub_1B6C3C3B8(0, v1, 0);
    uint64_t v2 = 32;
    uint64_t v3 = v11[0];
    do
    {
      uint64_t v4 = sub_1B6E33B48();
      uint64_t v6 = v5;
      v11[0] = v3;
      unint64_t v8 = *(void *)(v3 + 16);
      unint64_t v7 = *(void *)(v3 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_1B6C3C3B8(v7 > 1, v8 + 1, 1);
        uint64_t v3 = v11[0];
      }
      *(void *)(v3 + 16) = v8 + 1;
      uint64_t v9 = v3 + 16 * v8;
      *(void *)(v9 + 32) = v4;
      *(void *)(v9 + 40) = v6;
      v2 += 16;
      --v1;
    }
    while (v1);
    swift_release();
  }
  sub_1B6646CE4();
  sub_1B6646D3C();
  sub_1B6E31638();
  swift_bridgeObjectRelease();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  strcpy((char *)v11, "<EntityFamily[");
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return v11[0];
}

uint64_t sub_1B6D5E12C()
{
  return sub_1B6D5DF50();
}

uint64_t sub_1B6D5E150(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v2, v3);
  sub_1B6E335A8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B6D5E1E4(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5E5E4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5E220(uint64_t a1)
{
  unint64_t v2 = sub_1B6D5E5E4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5E25C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v14 = a2;
  sub_1B62AEADC(0, &qword_1E9DD9D28, (uint64_t (*)(void))sub_1B6D5E5E4, (uint64_t)&type metadata for ParticleClassSpawnID.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v13 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D5E5E4();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  unint64_t v10 = v14;
  uint64_t v11 = sub_1B6E32DD8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *unint64_t v10 = v11;
  return result;
}

uint64_t sub_1B6D5E408(void *a1)
{
  sub_1B62AEADC(0, &qword_1E9DD9D38, (uint64_t (*)(void))sub_1B6D5E5E4, (uint64_t)&type metadata for ParticleClassSpawnID.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D5E5E4();
  sub_1B6E33A88();
  sub_1B6E32F88();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

ValueMetadata *type metadata accessor for ParticleClassSpawnID()
{
  return &type metadata for ParticleClassSpawnID;
}

ValueMetadata *type metadata accessor for ParticleSpawnID()
{
  return &type metadata for ParticleSpawnID;
}

unint64_t sub_1B6D5E590()
{
  unint64_t result = qword_1E9DD9D20;
  if (!qword_1E9DD9D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D20);
  }
  return result;
}

unint64_t sub_1B6D5E5E4()
{
  unint64_t result = qword_1E9DD9D30;
  if (!qword_1E9DD9D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D30);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ParticleClassSpawnID.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6D5E6D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleClassSpawnID.CodingKeys()
{
  return &type metadata for ParticleClassSpawnID.CodingKeys;
}

unint64_t sub_1B6D5E710()
{
  unint64_t result = qword_1E9DD9D40;
  if (!qword_1E9DD9D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D40);
  }
  return result;
}

unint64_t sub_1B6D5E768()
{
  unint64_t result = qword_1E9DD9D48;
  if (!qword_1E9DD9D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D48);
  }
  return result;
}

unint64_t sub_1B6D5E7C0()
{
  unint64_t result = qword_1E9DD9D50;
  if (!qword_1E9DD9D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D50);
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderVariant()
{
  return &type metadata for RenderVariant;
}

ValueMetadata *type metadata accessor for RenderVariantDescriptor()
{
  return &type metadata for RenderVariantDescriptor;
}

uint64_t sub_1B6D5E834(int a1)
{
  if ((a1 & 2) != 0)
  {
    uint64_t result = 1;
    if ((a1 & 8) != 0)
    {
LABEL_3:
      uint64_t result = sub_1B6D5F2D0(result);
      if ((a1 & 0x20) != 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t result = 0;
    if ((a1 & 8) != 0) {
      goto LABEL_3;
    }
  }
  if ((a1 & 0x20) != 0)
  {
LABEL_4:
    uint64_t result = sub_1B6D5F2C8(result);
    if ((a1 & 0x200) != 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  if ((a1 & 0x200) != 0)
  {
LABEL_5:
    uint64_t result = sub_1B6D5F2C0(result);
    if ((a1 & 0x8000000) != 0) {
      goto LABEL_6;
    }
LABEL_12:
    if ((a1 & 0x10000000) == 0) {
      return result;
    }
    return sub_1B6D5F2B0(result);
  }
LABEL_11:
  if ((a1 & 0x8000000) == 0) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t result = sub_1B6D5F2B8(result);
  if ((a1 & 0x10000000) != 0) {
    return sub_1B6D5F2B0(result);
  }
  return result;
}

void sub_1B6D5E8A0()
{
  int v0 = unk_1F0F6190C;
  if ((unk_1F0F6190C & ~dword_1F0F61908) == 0) {
    int v0 = 0;
  }
  int v1 = v0 | dword_1F0F61908;
  int v2 = dword_1F0F61910;
  if ((dword_1F0F61910 & ~v1) == 0) {
    int v2 = 0;
  }
  int v3 = v2 | v1;
  if ((unk_1F0F61914 & ~v3) != 0) {
    int v4 = unk_1F0F61914;
  }
  else {
    int v4 = 0;
  }
  int v5 = v4 | v3;
  int v6 = dword_1F0F61918;
  if ((dword_1F0F61918 & ~v5) == 0) {
    int v6 = 0;
  }
  int v7 = v6 | v5;
  if ((unk_1F0F6191C & ~v7) != 0) {
    int v8 = unk_1F0F6191C;
  }
  else {
    int v8 = 0;
  }
  int v9 = v8 | v7;
  int v10 = dword_1F0F61920;
  if ((dword_1F0F61920 & ~v9) == 0) {
    int v10 = 0;
  }
  int v11 = v10 | v9;
  if ((unk_1F0F61924 & ~v11) != 0) {
    int v12 = unk_1F0F61924;
  }
  else {
    int v12 = 0;
  }
  int v13 = v12 | v11;
  int v14 = dword_1F0F61928;
  if ((dword_1F0F61928 & ~v13) == 0) {
    int v14 = 0;
  }
  int v15 = v14 | v13;
  if ((unk_1F0F6192C & ~v15) != 0) {
    int v16 = unk_1F0F6192C;
  }
  else {
    int v16 = 0;
  }
  int v17 = v16 | v15;
  int v18 = dword_1F0F61930;
  if ((dword_1F0F61930 & ~v17) == 0) {
    int v18 = 0;
  }
  int v19 = v18 | v17;
  if ((unk_1F0F61934 & ~v19) != 0) {
    int v20 = unk_1F0F61934;
  }
  else {
    int v20 = 0;
  }
  int v21 = v20 | v19;
  int v22 = dword_1F0F61938;
  if ((dword_1F0F61938 & ~v21) == 0) {
    int v22 = 0;
  }
  int v23 = v22 | v21;
  if ((unk_1F0F6193C & ~v23) != 0) {
    int v24 = unk_1F0F6193C;
  }
  else {
    int v24 = 0;
  }
  int v25 = v24 | v23;
  int v26 = dword_1F0F61940;
  if ((dword_1F0F61940 & ~v25) == 0) {
    int v26 = 0;
  }
  int v27 = v26 | v25;
  if ((unk_1F0F61944 & ~v27) != 0) {
    int v28 = unk_1F0F61944;
  }
  else {
    int v28 = 0;
  }
  int v29 = v28 | v27;
  int v31 = dword_1F0F61948;
  int v30 = unk_1F0F6194C;
  if ((dword_1F0F61948 & ~v29) == 0) {
    int v31 = 0;
  }
  int v32 = v31 | v29;
  if ((unk_1F0F6194C & ~v32) == 0) {
    int v30 = 0;
  }
  dword_1EB985420 = v30 | v32;
}

uint64_t sub_1B6D5E9A4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D5EA4C()
{
  return sub_1B6E33928();
}

uint64_t sub_1B6D5EAD8()
{
  return sub_1B6E33988();
}

BOOL sub_1B6D5EB7C(int64x2_t *a1, int64x2_t *a2)
{
  int64x2_t v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  int64x2_t v3 = a1[5];
  void v9[4] = a1[4];
  v9[5] = v3;
  int64x2_t v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  int64x2_t v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  int64x2_t v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  int64x2_t v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1B6D5F2D8(v9, v10);
}

unint64_t sub_1B6D5EBDC()
{
  unint64_t result = qword_1EB97D798;
  if (!qword_1EB97D798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97D798);
  }
  return result;
}

unint64_t sub_1B6D5EC34()
{
  unint64_t result = qword_1E9DD9D58;
  if (!qword_1E9DD9D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D58);
  }
  return result;
}

unint64_t sub_1B6D5EC8C()
{
  unint64_t result = qword_1E9DD9D60;
  if (!qword_1E9DD9D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D60);
  }
  return result;
}

unint64_t sub_1B6D5ECE4()
{
  unint64_t result = qword_1E9DD9D68;
  if (!qword_1E9DD9D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D68);
  }
  return result;
}

unint64_t sub_1B6D5ED3C()
{
  unint64_t result = qword_1E9DD9D70;
  if (!qword_1E9DD9D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D70);
  }
  return result;
}

uint64_t sub_1B6D5ED90(int a1)
{
  if (a1)
  {
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    if (a1)
    {
      sub_1B6E31948();
      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_23;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    sub_1B6E31948();
    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_24;
    }
LABEL_23:
    sub_1B6E31948();
    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_25;
    }
LABEL_24:
    sub_1B6E31948();
    if ((a1 & 0x20) == 0)
    {
LABEL_7:
      if ((a1 & 0x40) == 0) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }
LABEL_25:
    sub_1B6E31948();
    if ((a1 & 0x40) == 0)
    {
LABEL_8:
      if ((a1 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
LABEL_26:
    sub_1B6E31948();
    if ((a1 & 0x400) == 0)
    {
LABEL_9:
      if ((a1 & 0x800) == 0) {
        goto LABEL_10;
      }
      goto LABEL_28;
    }
LABEL_27:
    sub_1B6E31948();
    if ((a1 & 0x800) == 0)
    {
LABEL_10:
      if ((a1 & 0x1000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_29;
    }
LABEL_28:
    sub_1B6E31948();
    if ((a1 & 0x1000) == 0)
    {
LABEL_11:
      if ((a1 & 0x2000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_30;
    }
LABEL_29:
    sub_1B6E31948();
    if ((a1 & 0x2000) == 0)
    {
LABEL_12:
      if ((a1 & 0x4000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_31;
    }
LABEL_30:
    sub_1B6E31948();
    if ((a1 & 0x4000) == 0)
    {
LABEL_13:
      if ((a1 & 0x8000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_32;
    }
LABEL_31:
    sub_1B6E31948();
    if ((a1 & 0x8000) == 0)
    {
LABEL_14:
      if ((a1 & 0x2000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_33;
    }
LABEL_32:
    sub_1B6E31948();
    if ((a1 & 0x2000000) == 0)
    {
LABEL_15:
      if ((a1 & 0x4000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_34;
    }
LABEL_33:
    sub_1B6E31948();
    if ((a1 & 0x4000000) == 0)
    {
LABEL_16:
      if ((a1 & 0x8000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_35;
    }
LABEL_34:
    sub_1B6E31948();
    if ((a1 & 0x8000000) == 0)
    {
LABEL_17:
      if ((a1 & 0x10000000) == 0)
      {
LABEL_19:
        sub_1B6D48258();
        swift_bridgeObjectRelease();
        sub_1B6E32558();
        sub_1B6E32538();
        uint64_t v2 = sub_1B6E32588();
        uint64_t v4 = v3;
        uint64_t v6 = v5;
        uint64_t v8 = v7;
        swift_bridgeObjectRelease();
        uint64_t v9 = MEMORY[0x1BA9B34C0](v2, v4, v6, v8);
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        return v9;
      }
LABEL_18:
      sub_1B6E31948();
      goto LABEL_19;
    }
LABEL_35:
    sub_1B6E31948();
    if ((a1 & 0x10000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  return 23899;
}

uint64_t sub_1B6D5F1A0()
{
  return sub_1B6D5ED90(*v0);
}

uint64_t sub_1B6D5F1A8()
{
  return 0;
}

uint64_t sub_1B6D5F2B0(int a1)
{
  return a1 | 0x20u;
}

uint64_t sub_1B6D5F2B8(int a1)
{
  return a1 | 0x10u;
}

uint64_t sub_1B6D5F2C0(int a1)
{
  return a1 | 8u;
}

uint64_t sub_1B6D5F2C8(int a1)
{
  return a1 | 2u;
}

uint64_t sub_1B6D5F2D0(int a1)
{
  return a1 | 4u;
}

BOOL sub_1B6D5F2D8(int64x2_t *a1, int64x2_t *a2)
{
  return a1->i32[0] == a2->i32[0]
      && a1->i64[1] == a2->i64[1]
      && (vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(a1[1], a2[1]), (int32x4_t)vceqq_s64(a1[2], a2[2])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(a1[3], a2[3]), (int32x4_t)vceqq_s64(a1[4], a2[4])))), 7uLL))) & 1) != 0&& a1[5].i64[0] == a2[5].i64[0]&& a1[5].i64[1] == a2[5].i64[1];
}

ValueMetadata *type metadata accessor for RenderPass()
{
  return &type metadata for RenderPass;
}

ValueMetadata *type metadata accessor for RenderPass.Dimension()
{
  return &type metadata for RenderPass.Dimension;
}

uint64_t sub_1B6D5F390()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D5F3E8()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B6D5F404()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6D5F458@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B6D5F4AC(void *a1@<X8>)
{
  *a1 = 0x7469736E65746E69;
  a1[1] = 0xE900000000000079;
}

uint64_t sub_1B6D5F4CC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B6D5F524(uint64_t a1)
{
  unint64_t v2 = sub_1B6D61148();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5F560(uint64_t a1)
{
  unint64_t v2 = sub_1B6D61148();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6D5F59C(void *a1@<X0>, float *a2@<X8>)
{
  float v4 = sub_1B6D60F8C(a1);
  if (!v2) {
    *a2 = v4;
  }
}

uint64_t sub_1B6D5F5C8(void *a1)
{
  sub_1B6D611F0(0, &qword_1E9DD9D88, (uint64_t (*)(void))sub_1B6D61148, (uint64_t)&type metadata for IBLGenerator.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D61148();
  sub_1B6E33A88();
  sub_1B6E32F78();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B6D5F734(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a3;
  sub_1B6D611F0(0, &qword_1E9DD9DA0, (uint64_t (*)(void))sub_1B6D6119C, (uint64_t)&type metadata for IBLRuntime.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  int v11 = (char *)&v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D6119C();
  sub_1B6E33A88();
  uint64_t v15 = a2;
  char v14 = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v3)
  {
    uint64_t v15 = v13;
    char v14 = 1;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B6D5F8FC(char *a1, char *a2)
{
  return sub_1B6BAD12C(*a1, *a2);
}

uint64_t sub_1B6D5F908()
{
  if (*v0) {
    return 0x6E61696461727269;
  }
  else {
    return 0x65636E6169646172;
  }
}

uint64_t sub_1B6D5F948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D60618(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D5F970(uint64_t a1)
{
  unint64_t v2 = sub_1B6D6119C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6D5F9AC(uint64_t a1)
{
  unint64_t v2 = sub_1B6D6119C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6D5F9E8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6D60D80(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B6D5FA20(void *a1)
{
  return sub_1B6D5F734(a1, *v1, v1[1]);
}

uint64_t *sub_1B6D5FA3C(uint64_t *result)
{
  uint64_t v2 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2 && (*(unsigned char *)(v2 + 537) & 1) == 0)
  {
    uint64_t v3 = (uint64_t)result;
    long long v4 = *(_OWORD *)(v1 + 32);
    v28[0] = *(_OWORD *)(v1 + 16);
    v28[1] = v4;
    uint64_t v29 = *(void *)(v1 + 48);
    swift_retain();
    sub_1B62C9DA8(v3, (uint64_t)v28, 0x200000000, v5);
    sub_1B62CA210((uint64_t)v5, (uint64_t)&v6, (unint64_t *)&qword_1EB97DC50);
    if (v6)
    {
      uint64_t v17 = v6;
      int v18 = v7;
      char v19 = v8;
      uint64_t v20 = v9;
      char v21 = v10;
      uint64_t v22 = v11;
      uint64_t v23 = v12;
      long long v24 = v13;
      long long v25 = v14;
      uint64_t v26 = v15;
      uint64_t v27 = v16;
      swift_retain();
      swift_retain();
      sub_1B6DA1CC4((uint64_t)&v17, v3, v2);
      swift_release();
      swift_release_n();
      return sub_1B632F170(v5);
    }
    else
    {
      return (uint64_t *)swift_release();
    }
  }
  return result;
}

void sub_1B6D5FB7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  LODWORD(v57) = 256;
  swift_getObjectType();
  if (sub_1B6BBF540())
  {
    sub_1B6E33998();
    sub_1B6E318B8();
    sub_1B6E33928();
    sub_1B6E33928();
    sub_1B6E33938();
    long long v55 = v50;
    uint64_t v56 = v51;
    long long v53 = v48;
    long long v54 = v49;
    long long v52 = v47;
    uint64_t v8 = sub_1B6E33978();
    unint64_t v62 = 0xD000000000000022;
    unint64_t v63 = 0x80000001B6F54940;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = MEMORY[0x1E4FBC860];
    uint64_t v67 = 0;
    uint64_t v68 = v8;
    id v9 = sub_1B679C370((uint64_t)&v62, 0, 0);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (!v9) {
      return;
    }
    swift_getObjectType();
    objc_msgSend(a1, sel_setBytes_length_atIndex_, &v57, 4, 0);
    uint64_t v12 = a3;
    objc_msgSend(a1, sel_setTexture_atIndex_, a3, 0);
    objc_msgSend(a1, sel_setTexture_atIndex_, a4, 1);
    sub_1B6B59994(v9, a4, 0);
  }
  else
  {
    sub_1B6E33998();
    sub_1B6E318B8();
    sub_1B6E33928();
    sub_1B6E33928();
    sub_1B6E33938();
    long long v55 = v50;
    uint64_t v56 = v51;
    long long v53 = v48;
    long long v54 = v49;
    long long v52 = v47;
    uint64_t v23 = sub_1B6E33978();
    unint64_t v62 = 0xD00000000000002ELL;
    unint64_t v63 = 0x80000001B6F548B0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = MEMORY[0x1E4FBC860];
    uint64_t v67 = 0;
    uint64_t v68 = v23;
    id v24 = sub_1B679C370((uint64_t)&v62, 0, 0);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (!v24) {
      return;
    }
    swift_getObjectType();
    objc_msgSend(a1, sel_setBytes_length_atIndex_, &v57, 4, 0);
    objc_msgSend(a1, sel_setTexture_atIndex_, a3, 0);
    swift_getObjectType();
    uint64_t v27 = sub_1B6BBC8A0();
    if (!v27) {
      goto LABEL_31;
    }
    objc_msgSend(a1, sel_setTexture_atIndex_, v27, 1);
    swift_unknownObjectRelease();
    uint64_t v28 = sub_1B6BBC8A0();
    if (!v28) {
      goto LABEL_31;
    }
    objc_msgSend(a1, sel_setTexture_atIndex_, v28, 2);
    swift_unknownObjectRelease();
    uint64_t v29 = sub_1B6BBC8A0();
    if (!v29) {
      goto LABEL_31;
    }
    objc_msgSend(a1, sel_setTexture_atIndex_, v29, 3);
    swift_unknownObjectRelease();
    uint64_t v30 = sub_1B6BBC8A0();
    if (!v30) {
      goto LABEL_31;
    }
    objc_msgSend(a1, sel_setTexture_atIndex_, v30, 4);
    swift_unknownObjectRelease();
    uint64_t v31 = sub_1B6BBC8A0();
    if (!v31) {
      goto LABEL_31;
    }
    objc_msgSend(a1, sel_setTexture_atIndex_, v31, 5);
    swift_unknownObjectRelease();
    uint64_t v32 = sub_1B6BBC8A0();
    if (!v32) {
      goto LABEL_31;
    }
    objc_msgSend(a1, sel_setTexture_atIndex_, v32, 6);
    swift_unknownObjectRelease();
    sub_1B6B59994(v24, a4, 0);
    uint64_t v12 = a3;
  }
  swift_unknownObjectRelease();
  swift_getObjectType();
  objc_msgSend(a1, sel_setTexture_atIndex_, v12, 0);
  if (sub_1B6BBF540())
  {
    sub_1B6E33998();
    sub_1B6E318B8();
    sub_1B6E33928();
    sub_1B6E33928();
    sub_1B6E33938();
    long long v49 = v59;
    long long v50 = v60;
    uint64_t v51 = v61;
    long long v47 = v57;
    long long v48 = v58;
    uint64_t v13 = sub_1B6E33978();
    *(void *)&long long v57 = 0xD000000000000023;
    *((void *)&v57 + 1) = 0x80000001B6F54910;
    long long v58 = 0uLL;
    long long v59 = MEMORY[0x1E4FBC860];
    *(void *)&long long v60 = v13;
    id v14 = sub_1B679C370((uint64_t)&v57, 0, 0);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (!v14) {
      return;
    }
    swift_getObjectType();
    id v17 = objc_msgSend(a5, sel_mipmapLevelCount);
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = 0;
      do
      {
        objc_msgSend(a5, sel_pixelFormat);
        uint64_t v20 = sub_1B6E32108();
        if (!v20) {
          break;
        }
        uint64_t v21 = v20;
        objc_msgSend(a1, sel_setTexture_atIndex_, v20, 1);
        uint64_t v22 = v19;
        if (v19 == 0x100000000) {
          goto LABEL_33;
        }
        int v45 = v19;
        int v46 = 256;
        objc_msgSend(a1, sel_setBytes_length_atIndex_, &v45, 8, 0);
        sub_1B6B59994(v14, v21, 0);
        swift_unknownObjectRelease();
        ++v19;
      }
      while ((id)(v22 + 1) != v18);
    }
LABEL_31:
    swift_unknownObjectRelease();
    return;
  }
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v49 = v59;
  long long v50 = v60;
  uint64_t v51 = v61;
  long long v47 = v57;
  long long v48 = v58;
  uint64_t v33 = sub_1B6E33978();
  *(void *)&long long v57 = 0xD00000000000002FLL;
  *((void *)&v57 + 1) = 0x80000001B6F548E0;
  long long v58 = 0uLL;
  long long v59 = MEMORY[0x1E4FBC860];
  *(void *)&long long v60 = v33;
  id v34 = sub_1B679C370((uint64_t)&v57, 0, 0);
  long long v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!v34) {
    return;
  }
  swift_getObjectType();
  id v43 = objc_msgSend(a5, sel_mipmapLevelCount);
  if (!v43) {
    goto LABEL_31;
  }
  uint64_t v37 = 0;
  while (1)
  {
    uint64_t v38 = 0;
    id v39 = (id)(v37 + 1);
    uint64_t v40 = 1;
    while (1)
    {
      objc_msgSend(a5, sel_pixelFormat);
      uint64_t v41 = sub_1B6E32108();
      if (!v41) {
        break;
      }
      uint64_t v42 = v41;
      swift_unknownObjectRetain();
      objc_msgSend(a1, sel_setTexture_atIndex_, v42, v40);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      ++v40;
      uint64_t v38 = v42;
      if (v40 == 7) {
        goto LABEL_29;
      }
    }
    uint64_t v42 = v38;
LABEL_29:
    if (v37 == 0x100000000) {
      break;
    }
    int v45 = v37;
    int v46 = 256;
    objc_msgSend(a1, sel_setBytes_length_atIndex_, &v45, 8, 0);
    swift_unknownObjectRetain();
    sub_1B6B59994(v34, v42, 0);
    swift_unknownObjectRelease_n();
    ++v37;
    if (v39 == v43) {
      goto LABEL_31;
    }
  }
LABEL_33:
  sub_1B6E32BD8();
  __break(1u);
}

ValueMetadata *type metadata accessor for IBLGenerator()
{
  return &type metadata for IBLGenerator;
}

ValueMetadata *type metadata accessor for IBLRuntime()
{
  return &type metadata for IBLRuntime;
}

uint64_t sub_1B6D60444()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1EB997A18;
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  *(void *)(inited + 32) = &type metadata for IBLRuntime;
  *(void *)(inited + 40) = &off_1F0F52AC8;
  uint64_t v5 = v0;
  int v6 = 0;
  char v7 = 2;
  uint64_t v8 = 0;
  char v9 = 2;
  uint64_t v10 = 0;
  swift_retain();
  sub_1B62F75EC(inited, (uint64_t)v3);
  swift_setDeallocating();
  xmmword_1EB997B08 = v3[0];
  unk_1EB997B18 = v3[1];
  qword_1EB997B28 = v4;
  return swift_release();
}

double sub_1B6D60568()
{
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1EB997A18;
  int v4 = 0;
  char v5 = 2;
  uint64_t v6 = 0;
  char v7 = 2;
  uint64_t v8 = 0;
  swift_retain();
  sub_1B6A6F520(1, (uint64_t)v1);
  swift_release();
  double result = *(double *)v1;
  xmmword_1EB997B78 = v1[0];
  unk_1EB997B88 = v1[1];
  qword_1EB997B98 = v2;
  return result;
}

uint64_t sub_1B6D60618(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636E6169646172 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E61696461727269 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_1B6D60718(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  sub_1B69DE144(a5[1]);
  a5[1] = 0xFFFFFFFFLL;
  sub_1B69DE144(*a5);
  *a5 = 0xFFFFFFFFLL;
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  swift_retain();
  uint64_t v13 = sub_1B62DE2C8(a2);
  swift_release();
  if (v11 != v13 || v12 != HIDWORD(v13)) {
    sub_1B68504A8(v13, v11 | (v12 << 32));
  }
  double result = (void *)sub_1B62EBE70(v11 | (v12 << 32), &v68);
  if (result)
  {
    uint64_t v16 = result;
    if (objc_msgSend(result, sel_textureType) == (id)5)
    {
      if (objc_msgSend(v16, sel_mipmapLevelCount) == (id)1)
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        swift_retain();
        int v17 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        uint64_t v68 = 0;
        swift_retain();
        sub_1B6B33E34(v17, &v68, 0xD00000000000001FLL, 0x80000001B6F54890);
        swift_release();
        swift_release();
      }
      double Default = RGTextureDescriptorMakeDefault((uint64_t)&v68);
      char v19 = BYTE2(v69);
      uint64_t v20 = v72;
      uint64_t v53 = v74;
      uint64_t v55 = v73;
      LODWORD(Default) = v75;
      int16x8_t v51 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&Default);
      uint64_t v68 = 0;
      unint64_t v69 = 0xE000000000000000;
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      uint64_t v68 = 0xD000000000000016;
      unint64_t v69 = 0x80000001B6F54850;
      id v21 = objc_msgSend(v16, sel_label);
      if (v21)
      {
        uint64_t v22 = v21;
        sub_1B6E31798();
      }
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      uint64_t v23 = v68;
      uint64_t v24 = v69;
      id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35330]), sel_init);
      uint64_t v68 = 0x1000100800080;
      LOWORD(v69) = 257;
      BYTE2(v69) = v19;
      long long v70 = xmmword_1B6ECEA30;
      long long v71 = xmmword_1B6E9D130;
      uint64_t v72 = v20;
      uint64_t v73 = v55;
      uint64_t v74 = v53;
      __int32 v75 = vmovn_s16(v51).u32[0];
      RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v68, v25);
      uint64_t v26 = sub_1B639E4E4(v25, v23, v24);
      swift_bridgeObjectRelease();

      id v27 = objc_msgSend(v16, sel_width);
      int8x8_t v28 = sub_1B6331A2C(5, 115, (uint64_t)v27, (uint64_t)v27, 1, 1, 1, 1, (uint64_t)&v68, 1, 2, 3);
      uint64_t v29 = v68;
      char v30 = v69;
      char v31 = BYTE1(v69);
      char v56 = BYTE2(v69);
      uint64_t v54 = v70;
      uint64_t v50 = v71;
      uint64_t v52 = *((void *)&v70 + 1);
      uint64_t v48 = v72;
      uint64_t v49 = *((void *)&v71 + 1);
      uint64_t v46 = v74;
      uint64_t v47 = v73;
      v28.i32[0] = v75;
      int16x8_t v45 = (int16x8_t)vmovl_u8((uint8x8_t)v28);
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      unint64_t v58 = 0xD000000000000017;
      unint64_t v59 = 0x80000001B6F54870;
      id v32 = objc_msgSend(v16, sel_label);
      if (v32)
      {
        uint64_t v33 = v32;
        sub_1B6E31798();
      }
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      uint64_t v34 = v58;
      uint64_t v35 = v59;
      id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35330]), sel_init);
      unint64_t v58 = v29;
      LOBYTE(v59) = v30;
      BYTE1(v59) = v31;
      BYTE2(v59) = v56;
      uint64_t v60 = v54;
      uint64_t v61 = v52;
      uint64_t v62 = v50;
      uint64_t v63 = v49;
      uint64_t v64 = v48;
      uint64_t v65 = v47;
      uint64_t v66 = v46;
      unsigned __int32 v67 = vmovn_s16(v45).u32[0];
      RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v58, v36);
      uint64_t v37 = sub_1B639E4E4(v36, v34, v35);
      swift_bridgeObjectRelease();

      uint64_t v38 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
      id v39 = (void *)sub_1B6E31768();
      objc_msgSend(v38, sel_pushDebugGroup_, v39);

      sub_1B6D5FB7C(v38, a7, (uint64_t)v16, (uint64_t)v26, v37);
      objc_msgSend(v38, sel_popDebugGroup);
      swift_unknownObjectRelease();
      uint64_t v40 = *(uint64_t **)(a6 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      uint64_t v41 = *v40;
      swift_unknownObjectRetain();
      LOBYTE(v58) = 1;
      uint64_t v42 = sub_1B6D80CE4(0x100000000uLL, v41, (uint64_t)v26);
      swift_unknownObjectRelease();
      a5[1] = v42;
      uint64_t v43 = *v40;
      swift_unknownObjectRetain();
      LOBYTE(v58) = 1;
      uint64_t v44 = sub_1B6D80CE4(0x100000000uLL, v43, (uint64_t)v37);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      double result = (void *)swift_unknownObjectRelease_n();
      *a5 = v44;
    }
    else
    {
      return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B6D60D80(void *a1)
{
  sub_1B6D611F0(0, &qword_1E9DD9D90, (uint64_t (*)(void))sub_1B6D6119C, (uint64_t)&type metadata for IBLRuntime.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = a1[3];
  sub_1B62C14BC(a1, v9);
  sub_1B6D6119C();
  sub_1B6E33A48();
  if (!v1)
  {
    char v12 = 0;
    sub_1B62B1EA8();
    sub_1B6E32DF8();
    uint64_t v9 = v13;
    char v12 = 1;
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

float sub_1B6D60F8C(void *a1)
{
  sub_1B6D611F0(0, &qword_1E9DD9D78, (uint64_t (*)(void))sub_1B6D61148, (uint64_t)&type metadata for IBLGenerator.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6D61148();
  sub_1B6E33A48();
  if (!v1)
  {
    uint64_t v11 = sub_1B6E32D58();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if ((v11 & 0x100000000) != 0) {
      float v2 = 1.0;
    }
    else {
      float v2 = *(float *)&v11;
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B6D61148()
{
  unint64_t result = qword_1E9DD9D80;
  if (!qword_1E9DD9D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D80);
  }
  return result;
}

unint64_t sub_1B6D6119C()
{
  unint64_t result = qword_1E9DD9D98;
  if (!qword_1E9DD9D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9D98);
  }
  return result;
}

void sub_1B6D611F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for IBLRuntime.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D61324);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IBLRuntime.CodingKeys()
{
  return &type metadata for IBLRuntime.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IBLGenerator.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6D613F8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IBLGenerator.CodingKeys()
{
  return &type metadata for IBLGenerator.CodingKeys;
}

unint64_t sub_1B6D61434()
{
  unint64_t result = qword_1E9DD9DA8;
  if (!qword_1E9DD9DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DA8);
  }
  return result;
}

unint64_t sub_1B6D6148C()
{
  unint64_t result = qword_1E9DD9DB0;
  if (!qword_1E9DD9DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DB0);
  }
  return result;
}

unint64_t sub_1B6D614E4()
{
  unint64_t result = qword_1E9DD9DB8;
  if (!qword_1E9DD9DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DB8);
  }
  return result;
}

unint64_t sub_1B6D6153C()
{
  unint64_t result = qword_1E9DD9DC0;
  if (!qword_1E9DD9DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DC0);
  }
  return result;
}

unint64_t sub_1B6D61594()
{
  unint64_t result = qword_1E9DD9DC8;
  if (!qword_1E9DD9DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DC8);
  }
  return result;
}

unint64_t sub_1B6D615EC()
{
  unint64_t result = qword_1E9DD9DD0;
  if (!qword_1E9DD9DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DD0);
  }
  return result;
}

void *sub_1B6D61640(void *result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    uint64_t v7 = *result;
    swift_unownedRetainStrong();
    BOOL v8 = sub_1B62EC0CC((uint64_t)&type metadata for ScriptsHolder, (uint64_t)&off_1F0F61CD0, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B6850210(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    unint64_t result = (void *)swift_unknownObjectUnownedLoadStrong();
    if (result) {
      unint64_t result = (void *)swift_unknownObjectRelease();
    }
    if (*((unsigned char *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a3;
      v10[1] = v6;
      uint64_t v11 = v7;
      sub_1B68795FC(0, qword_1E9DD9E08);
      uint64_t v14 = v9;
      uint64_t v15 = &off_1F0F68360;
      uint64_t v12 = a2;
      BOOL v13 = !v8;
      char v16 = 12;
      swift_bridgeObjectRetain();
      sub_1B6A62610((uint64_t)v10);
      swift_release();
      return (void *)sub_1B67421B0((uint64_t)v10);
    }
  }
  return result;
}

void *sub_1B6D6178C(void *result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    uint64_t v7 = *result;
    swift_unownedRetainStrong();
    BOOL v8 = sub_1B62EC0CC((uint64_t)&type metadata for Children, (uint64_t)&off_1F0FA3910, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B6850228(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    unint64_t result = (void *)swift_unknownObjectUnownedLoadStrong();
    if (result) {
      unint64_t result = (void *)swift_unknownObjectRelease();
    }
    if (*((unsigned char *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a3;
      v10[1] = v6;
      uint64_t v11 = v7;
      sub_1B68795FC(0, &qword_1E9DD1670);
      uint64_t v14 = v9;
      uint64_t v15 = &off_1F0F68360;
      uint64_t v12 = a2;
      BOOL v13 = !v8;
      char v16 = 12;
      swift_bridgeObjectRetain();
      sub_1B6A62610((uint64_t)v10);
      swift_release();
      return (void *)sub_1B67421B0((uint64_t)v10);
    }
  }
  return result;
}

void *sub_1B6D618D8(void *result, long long *a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    uint64_t v7 = *result;
    swift_unownedRetainStrong();
    BOOL v8 = sub_1B62EC0CC((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1F0F73990, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B685103C(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    unint64_t result = (void *)swift_unknownObjectUnownedLoadStrong();
    if (result) {
      unint64_t result = (void *)swift_unknownObjectRelease();
    }
    if (*((unsigned char *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v12[0] = a3;
      v12[1] = v6;
      uint64_t v13 = v7;
      sub_1B68795FC(0, &qword_1E9DD6650);
      uint64_t v15 = v9;
      char v16 = &off_1F0F68360;
      uint64_t v10 = swift_allocObject();
      uint64_t v14 = v10;
      long long v11 = a2[1];
      *(_OWORD *)(v10 + 16) = *a2;
      *(_OWORD *)(v10 + 32) = v11;
      *(_OWORD *)(v10 + 48) = a2[2];
      *(unsigned char *)(v10 + 64) = !v8;
      char v17 = 12;
      sub_1B6A62610((uint64_t)v12);
      swift_release();
      return (void *)sub_1B67421B0((uint64_t)v12);
    }
  }
  return result;
}

void *sub_1B6D61A40(void *result, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v7 = result;
  unint64_t v8 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    uint64_t v9 = *result;
    swift_unownedRetainStrong();
    BOOL v10 = sub_1B62EC0CC((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F510, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B6851954(a2, a3, a4, a5, a6);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    unint64_t result = (void *)swift_unknownObjectUnownedLoadStrong();
    if (result) {
      unint64_t result = (void *)swift_unknownObjectRelease();
    }
    if (*((unsigned char *)v7 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v17[0] = a2;
      v17[1] = v8;
      uint64_t v18 = v9;
      sub_1B68795FC(0, &qword_1E9DD9E00);
      uint64_t v20 = v11;
      id v21 = &off_1F0F68360;
      uint64_t v12 = (__n128 *)swift_allocObject();
      char v19 = v12;
      v12[1] = a3;
      _DWORD v12[2] = a4;
      v12[3] = a5;
      v12[4] = a6;
      v12[5].n128_u8[0] = !v10;
      char v22 = 12;
      sub_1B6A62610((uint64_t)v17);
      swift_release();
      return (void *)sub_1B67421B0((uint64_t)v17);
    }
  }
  return result;
}

uint64_t VFXCoreCameraProjectionDirection.init(rawValue:)(unsigned __int8 a1)
{
  unsigned __int8 v1 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unsigned __int8 v1 = a1;
    }
    else {
      unsigned __int8 v1 = 0;
    }
    int v2 = a1 != 1;
  }
  else
  {
    int v2 = 0;
  }
  return v1 | (v2 << 8);
}

void *static VFXCoreCameraProjectionDirection.allCases.getter()
{
  return &unk_1F0F9BC00;
}

char *sub_1B6D61BFC@<X0>(char *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (*result) {
    char v3 = 0;
  }
  else {
    char v3 = *result;
  }
  BOOL v4 = v2 != 0;
  BOOL v5 = v2 == 1;
  if (v2 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = v3;
  }
  BOOL v7 = !v5 && v4;
  *a2 = v6;
  a2[1] = v7;
  return result;
}

void sub_1B6D61C2C(void *a1@<X8>)
{
  *a1 = &unk_1F0F9BC28;
}

uint64_t sub_1B6D61C3C()
{
  return sub_1B6E31BC8();
}

uint64_t sub_1B6D61C9C()
{
  return sub_1B6E31B28();
}

BOOL sub_1B6D61CEC(uint64_t a1)
{
  swift_getObjectType();
  sub_1B62B31E8(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_1B62B32CC((uint64_t)v12);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  BOOL v4 = &v11[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  if (*(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance) != *(_DWORD *)&v11[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance])
  {

    return 0;
  }
  uint64_t v5 = *((void *)v4 + 1);
  uint64_t v6 = *(void *)(v3 + 8);
  int v7 = *((_DWORD *)v4 + 1);
  int v8 = *(_DWORD *)(v3 + 4);

  return v8 == v7 && v6 == v5;
}

uint64_t sub_1B6D61EE8()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  int v2 = v0;
  sub_1B69E547C(v1, v2);
  uint64_t v4 = v3;
  swift_release();

  return v4;
}

uint64_t sub_1B6D61F60@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  int v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  uint64_t v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if (v4 == -1)
  {
    if (!v3)
    {
LABEL_12:
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      goto LABEL_13;
    }
    swift_retain();
LABEL_11:
    unint64_t result = swift_release();
    goto LABEL_12;
  }
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v4 & 0x80000000) != 0) {
    goto LABEL_11;
  }
  if (*(void *)(v5 + v6 + 8) <= v4) {
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(v5 + v6);
  if (v3 != -1 && *(_DWORD *)(v7 + 12 * (int)v4 + 8) != v3) {
    goto LABEL_11;
  }
  uint64_t v8 = sub_1B636A914(*(void *)(*(void *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 16, v5);
  uint64_t v10 = v9;
  unint64_t result = swift_release();
  if (v10) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = 0;
  }
LABEL_13:
  *a2 = v11;
  a2[1] = v10;
  return result;
}

uint64_t sub_1B6D62080()
{
  return sub_1B6D64FF4((uint64_t (*)(uint64_t, char *))sub_1B69E44AC);
}

uint64_t sub_1B6D6211C(char a1)
{
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  sub_1B69DD674(v3, a1, v1);

  return swift_release();
}

void sub_1B6D62190(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)((char *)*a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  id v5 = v3;
  LOBYTE(v3) = sub_1B69E44AC(v4, v5);
  swift_release();

  *a2 = v3 & 1;
}

uint64_t sub_1B6D6220C(char *a1, void **a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)((char *)*a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  sub_1B69DD674(v4, v2, v3);

  return swift_release();
}

uint64_t sub_1B6D62284(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v3 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  uint64_t v4 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  BOOL v6 = v2 == 0xFFFFFFFFLL && v3 == 0;
  if (result)
  {
    if (!v6)
    {
      unint64_t v7 = v2 | (v3 << 32);
      swift_retain();
      BOOL v8 = sub_1B62EC0CC((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1F0F78798, v7);
      unint64_t result = swift_release();
      if (!v8)
      {
        LODWORD(v24) = 1065353216;
        BYTE4(v24) = 0;
        *((void *)&v24 + 1) = 0x461C40003DCCCCCDLL;
        LOBYTE(v25) = 1;
        uint64_t v9 = swift_retain();
        MEMORY[0x1F4188790](v9, v10);
        sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6B6F7A4);
        swift_release();
        swift_retain();
        BOOL v11 = sub_1B62EC0CC((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1F0F73990, v2 | (v3 << 32));
        unint64_t result = swift_release();
        if (v11)
        {
          uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          swift_retain();
          if (v12)
          {
            char v13 = *(unsigned char *)(v12 + 80);
            MEMORY[0x1BA9B8670](v12 + 48);
            uint64_t v12 = *(void *)(v12 + 56);
          }
          else
          {
            char v13 = 0;
          }
          swift_unknownObjectUnownedInit();
          v21[0] = v4;
          uint64_t v22 = v12;
          swift_unknownObjectUnownedAssign();
          swift_unownedRetain();
          swift_unknownObjectRelease();
          char v23 = v13;
          sub_1B636C4E0((uint64_t)v21, (uint64_t)&v24);
          sub_1B6A61F04((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1F0F73918, v7);
          sub_1B636C450((uint64_t)&v24);
          if ((v13 & 1) == 0) {
            return swift_release();
          }
          goto LABEL_23;
        }
      }
    }
  }
  else if (!v6)
  {
    unint64_t v14 = v2 | (v3 << 32);
    swift_retain();
    BOOL v15 = sub_1B62EC0CC((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1F0F73990, v14);
    unint64_t result = swift_release();
    if (!v15)
    {
      long long v24 = xmmword_1B6EC4EC0;
      long long v25 = xmmword_1B6EC4ED0;
      __int16 v26 = 1;
      uint64_t v27 = 0;
      uint64_t v16 = swift_retain();
      MEMORY[0x1F4188790](v16, v17);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65EA4);
      swift_release();
      swift_retain();
      BOOL v18 = sub_1B62EC0CC((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1F0F78798, v2 | (v3 << 32));
      unint64_t result = swift_release();
      if (v18)
      {
        uint64_t v19 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        swift_retain();
        if (v19)
        {
          int v20 = *(unsigned __int8 *)(v19 + 80);
          MEMORY[0x1BA9B8670](v19 + 48);
          uint64_t v19 = *(void *)(v19 + 56);
        }
        else
        {
          int v20 = 0;
        }
        swift_unknownObjectUnownedInit();
        v21[0] = v4;
        uint64_t v22 = v19;
        swift_unknownObjectUnownedAssign();
        swift_unownedRetain();
        swift_unknownObjectRelease();
        char v23 = v20;
        sub_1B636C4E0((uint64_t)v21, (uint64_t)&v24);
        sub_1B6A61F04((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1F0F78720, v14);
        sub_1B636C450((uint64_t)&v24);
        if (!v20) {
          return swift_release();
        }
LABEL_23:
        sub_1B6A667F0(1);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t (*sub_1B6D62650(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  swift_retain();
  uint64_t v4 = v1;
  char v5 = sub_1B69E44AC(v3, v4);
  *(void *)(a1 + 16) = 0;

  swift_release();
  *(unsigned char *)(a1 + 24) = v5 & 1;
  return sub_1B6D626F4;
}

uint64_t sub_1B6D626F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 24);
  swift_retain();
  sub_1B69DD674(v1, v3, v2);

  return swift_release();
}

double sub_1B6D62774()
{
  *(void *)&double result = sub_1B6D641DC((double (*)(uint64_t, char *))sub_1B69E6BA0).n128_u64[0];
  return result;
}

void sub_1B6D627EC(simd_float4x4 a1)
{
  BOOL v2 = *(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance) == -1
    && *(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4) == 0;
  int v3 = v2;
  if (!v2)
  {
    simd_float4x4 v8 = a1;
    uint64_t v4 = swift_retain();
    MEMORY[0x1F4188790](v4, v5);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C0DC);
    swift_release();
    a1 = v8;
  }
  __invert_f4(a1);
  if (!v3)
  {
    uint64_t v6 = swift_retain();
    MEMORY[0x1F4188790](v6, v7);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C0FC);
    swift_release();
  }
}

uint64_t sub_1B6D62938@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  int v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  uint64_t v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if (v4 == -1)
  {
    if (!v3) {
      goto LABEL_11;
    }
    swift_retain();
LABEL_10:
    double result = swift_release();
    goto LABEL_11;
  }
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v4 & 0x80000000) != 0) {
    goto LABEL_10;
  }
  if (*(void *)(v5 + v6 + 8) <= v4) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v5 + v6);
  if (v3 != -1 && *(_DWORD *)(v7 + 12 * (int)v4 + 8) != v3) {
    goto LABEL_10;
  }
  sub_1B633C4F4(*(void *)(*(void *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 64, v5, (uint64_t)v16);
  swift_release();
  double result = sub_1B62E9DE8((uint64_t)v16, (uint64_t)v17, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
  if (v18)
  {
LABEL_11:
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  uint64_t v8 = v17[0];
  uint64_t v9 = v17[1];
  uint64_t v10 = v17[2];
  uint64_t v11 = v17[3];
  uint64_t v12 = v17[4];
  uint64_t v13 = v17[5];
  uint64_t v14 = v17[6];
  uint64_t v15 = v17[7];
LABEL_12:
  *a2 = v8;
  a2[1] = v9;
  a2[2] = v10;
  a2[3] = v11;
  a2[4] = v12;
  a2[5] = v13;
  a2[6] = v14;
  a2[7] = v15;
  return result;
}

void (*sub_1B6D62A94(void *a1))(simd_float4 **a1, char a2)
{
  int v3 = malloc(0xA0uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v3[16] = v1;
  v3[17] = v4;
  uint64_t v5 = *(void *)&v1[v4 + 8];
  v3[18] = v5;
  swift_retain();
  uint64_t v6 = v1;
  sub_1B69E6BA0(v5, v6);
  long long v14 = v8;
  long long v15 = v7;
  long long v12 = v10;
  long long v13 = v9;
  v3[19] = 0;

  swift_release();
  *(_OWORD *)int v3 = v15;
  *((_OWORD *)v3 + 1) = v14;
  *((_OWORD *)v3 + 2) = v13;
  *((_OWORD *)v3 + 3) = v12;
  return sub_1B6D62B60;
}

void sub_1B6D62B60(simd_float4 **a1, char a2)
{
  BOOL v2 = *a1;
  int v3 = (int *)((*a1)[8].i64[0] + (*a1)[8].i64[1]);
  int v5 = *v3;
  int v4 = v3[1];
  v6.columns[0] = **a1;
  v6.columns[1] = (*a1)[1];
  v2[4] = v6.columns[0];
  v6.columns[2] = v2[2];
  v6.columns[3] = v2[3];
  BOOL v8 = v5 == -1 && v4 == 0;
  v2[5] = v6.columns[1];
  v2[6] = v6.columns[2];
  v2[7] = v6.columns[3];
  if (a2)
  {
    if (!v8)
    {
      simd_float4 v19 = v6.columns[2];
      simd_float4 v21 = v6.columns[3];
      simd_float4 v15 = v6.columns[1];
      simd_float4 v17 = v6.columns[0];
      uint64_t v9 = swift_retain();
      MEMORY[0x1F4188790](v9, v10);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65EF0);
      swift_release();
      v6.columns[1] = v15;
      v6.columns[0] = v17;
      v6.columns[2] = v19;
      v6.columns[3] = v21;
    }
    *(simd_float4x4 *)v2[4].f32 = __invert_f4(v6);
    if (!v8)
    {
LABEL_15:
      uint64_t v13 = swift_retain();
      MEMORY[0x1F4188790](v13, v14);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65F08);
      swift_release();
    }
  }
  else
  {
    if (!v8)
    {
      simd_float4 v20 = v6.columns[2];
      simd_float4 v22 = v6.columns[3];
      simd_float4 v16 = v6.columns[1];
      simd_float4 v18 = v6.columns[0];
      uint64_t v11 = swift_retain();
      MEMORY[0x1F4188790](v11, v12);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65EF0);
      swift_release();
      v6.columns[1] = v16;
      v6.columns[0] = v18;
      v6.columns[2] = v20;
      v6.columns[3] = v22;
    }
    *(simd_float4x4 *)v2[4].f32 = __invert_f4(v6);
    if (!v8) {
      goto LABEL_15;
    }
  }
  free(v2);
}

double sub_1B6D62DBC()
{
  *(void *)&double result = sub_1B6D641DC((double (*)(uint64_t, char *))sub_1B69E6BF4).n128_u64[0];
  return result;
}

void sub_1B6D62EAC()
{
  if (*(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance) != -1
    || *(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4) != 0)
  {
    uint64_t v2 = swift_retain();
    MEMORY[0x1F4188790](v2, v3);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65464);
    swift_release();
  }
}

uint64_t sub_1B6D62F68(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)(*a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  if (*v2 != -1 || v2[1] != 0)
  {
    uint64_t v4 = swift_retain();
    MEMORY[0x1F4188790](v4, v5);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65464);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D63030@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B6D645B4(a1, (void (*)(void *__return_ptr, void))sub_1B6359A1C, &qword_1EB97F810, (uint64_t)&type metadata for LastFrameWorldTransform, a2);
}

void (*sub_1B6D6306C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0xA0uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v3[16] = v1;
  v3[17] = v4;
  uint64_t v5 = *(void *)&v1[v4 + 8];
  v3[18] = v5;
  swift_retain();
  simd_float4x4 v6 = v1;
  sub_1B69E6BF4(v5, v6);
  long long v14 = v8;
  long long v15 = v7;
  long long v12 = v10;
  long long v13 = v9;
  v3[19] = 0;

  swift_release();
  *(_OWORD *)uint64_t v3 = v15;
  *((_OWORD *)v3 + 1) = v14;
  *((_OWORD *)v3 + 2) = v13;
  *((_OWORD *)v3 + 3) = v12;
  return sub_1B6D63138;
}

void sub_1B6D63138(uint64_t a1, char a2)
{
  uint64_t v2 = *(_OWORD **)a1;
  uint64_t v3 = (_DWORD *)(*(void *)(*(void *)a1 + 128) + *(void *)(*(void *)a1 + 136));
  BOOL v5 = *v3 == -1 && v3[1] == 0;
  if (a2)
  {
    if (!v5) {
      goto LABEL_11;
    }
  }
  else if (!v5)
  {
LABEL_11:
    long long v7 = v2[2];
    long long v6 = v2[3];
    long long v8 = v2[1];
    v2[4] = *v2;
    v2[5] = v8;
    v2[6] = v7;
    v2[7] = v6;
    uint64_t v9 = swift_retain();
    MEMORY[0x1F4188790](v9, v10);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65464);
    swift_release();
  }
  free(v2);
}

double sub_1B6D632F0()
{
  *(void *)&double result = sub_1B6D63A30((double (*)(uint64_t, char *))sub_1B69E6EC8).n128_u64[0];
  return result;
}

void sub_1B6D63358(__n128 a1)
{
  uint64_t v2 = *(unsigned int *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v3 = *(unsigned int *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if (v2 != -1 || v3 != 0)
  {
    swift_retain();
    uint64_t v5 = sub_1B695DAE8(v2 | (v3 << 32));
    uint64_t v7 = v6;
    char v9 = v8;
    swift_release();
    if (v9)
    {
      __n128 v12 = a1;
LABEL_14:
      v12.n128_u32[3] = 1.0;
      v20[2] = v12;
      uint64_t v16 = swift_retain();
      MEMORY[0x1F4188790](v16, v17);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6CC8528);
      swift_release();
      return;
    }
    uint64_t v10 = 0;
    *(void *)&long long v11 = v5;
    *((void *)&v11 + 1) = v7;
    __n128 v12 = a1;
    while (1)
    {
      __n128 v19 = a1;
      float v14 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      v20[0] = v11;
      float v15 = *(float *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      BOOL v13 = v14 == v15;
      if (v10 == 2) {
        break;
      }
      while (1)
      {
        ++v10;
        if (v13) {
          break;
        }
        if (v10 == 2) {
          goto LABEL_14;
        }
        BOOL v13 = 0;
      }
    }
    if (v14 != v15) {
      goto LABEL_14;
    }
  }
}

__n128 sub_1B6D634D4@<Q0>(void **a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)((char *)*a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  id v5 = v3;
  sub_1B69E6EC8(v4, v5);
  __n128 v8 = v6;
  swift_release();

  __n128 result = v8;
  *a2 = v8;
  return result;
}

uint64_t sub_1B6D63550@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  int v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  uint64_t v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if (v4 == -1)
  {
    if (!v3)
    {
LABEL_11:
      long long v13 = 0uLL;
      goto LABEL_12;
    }
    swift_retain();
LABEL_10:
    __n128 result = swift_release();
    goto LABEL_11;
  }
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v4 & 0x80000000) != 0) {
    goto LABEL_10;
  }
  if (*(void *)(v5 + v6 + 8) <= v4) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v5 + v6);
  if (v3 != -1 && *(_DWORD *)(v7 + 12 * (int)v4 + 8) != v3) {
    goto LABEL_10;
  }
  uint64_t v8 = sub_1B633CFA0(*(void *)(*(void *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 16, v5);
  uint64_t v10 = v9;
  char v12 = v11;
  __n128 result = swift_release();
  long long v13 = 0uLL;
  if ((v12 & 1) == 0)
  {
    *(void *)&long long v13 = v8;
    *((void *)&v13 + 1) = v10;
  }
LABEL_12:
  *a2 = v13;
  return result;
}

void (*sub_1B6D63660(void *a1))(long long **a1, char a2)
{
  int v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = *(void *)&v1[v4 + 8];
  v3[6] = v5;
  swift_retain();
  uint64_t v6 = v1;
  sub_1B69E6EC8(v5, v6);
  long long v9 = v7;
  v3[7] = 0;

  swift_release();
  *(_OWORD *)int v3 = v9;
  return sub_1B6D63718;
}

void sub_1B6D63718(long long **a1, char a2)
{
  uint64_t v2 = *a1;
  int v3 = (unsigned int *)(*((void *)*a1 + 4) + *((void *)*a1 + 5));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  BOOL v7 = v4 == 0xFFFFFFFFLL && v5 == 0;
  if (a2)
  {
    if (v7) {
      goto LABEL_29;
    }
    long long v34 = **a1;
    swift_retain();
    uint64_t v8 = sub_1B695DAE8(v4 | (v5 << 32));
    uint64_t v10 = v9;
    char v12 = v11;
    swift_release();
    long long v13 = v34;
    if (v12) {
      goto LABEL_25;
    }
    uint64_t v14 = 0;
    *(void *)&long long v15 = v8;
    *((void *)&v15 + 1) = v10;
    BOOL v16 = 1;
    while (1)
    {
      if (v16)
      {
        long long v36 = v34;
        float v17 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
        long long v37 = v15;
        float v18 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
        BOOL v16 = v17 == v18;
        if (v14 == 2)
        {
          if (v17 != v18)
          {
LABEL_25:
            HIDWORD(v13) = 1.0;
            v2[1] = v13;
            uint64_t v30 = swift_retain();
            MEMORY[0x1F4188790](v30, v31);
            goto LABEL_28;
          }
          goto LABEL_29;
        }
      }
      else
      {
        if (v14 == 2) {
          goto LABEL_25;
        }
        BOOL v16 = 0;
      }
      ++v14;
    }
  }
  if (v7) {
    goto LABEL_29;
  }
  long long v35 = **a1;
  swift_retain();
  uint64_t v19 = sub_1B695DAE8(v4 | (v5 << 32));
  uint64_t v21 = v20;
  char v23 = v22;
  swift_release();
  long long v24 = v35;
  if ((v23 & 1) == 0)
  {
    uint64_t v25 = 0;
    *(void *)&long long v26 = v19;
    *((void *)&v26 + 1) = v21;
    BOOL v27 = 1;
    while (1)
    {
      if (v27)
      {
        long long v38 = v35;
        float v28 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
        long long v39 = v26;
        float v29 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
        BOOL v27 = v28 == v29;
        if (v25 == 2)
        {
          if (v28 == v29) {
            goto LABEL_29;
          }
          break;
        }
      }
      else
      {
        if (v25 == 2) {
          break;
        }
        BOOL v27 = 0;
      }
      ++v25;
    }
  }
  HIDWORD(v24) = 1.0;
  v2[1] = v24;
  uint64_t v32 = swift_retain();
  MEMORY[0x1F4188790](v32, v33);
LABEL_28:
  sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65F20);
  swift_release();
LABEL_29:
  free(v2);
}

double sub_1B6D63A18()
{
  *(void *)&double result = sub_1B6D63A30((double (*)(uint64_t, char *))sub_1B69E70A8).n128_u64[0];
  return result;
}

__n128 sub_1B6D63A30(double (*a1)(uint64_t, char *))
{
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v4 = v1;
  *(double *)&long long v5 = a1(v3, v4);
  long long v7 = v5;
  swift_release();

  return (__n128)v7;
}

void sub_1B6D63AF8(__n128 a1)
{
  uint64_t v2 = *(unsigned int *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v3 = *(unsigned int *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if (v2 != -1 || v3 != 0)
  {
    swift_retain();
    uint64_t v5 = sub_1B6360920(v2 | (v3 << 32));
    uint64_t v7 = v6;
    char v9 = v8;
    swift_release();
    if (v9)
    {
      __n128 v12 = a1;
LABEL_10:
      v20[2] = v12;
      uint64_t v14 = swift_retain();
      MEMORY[0x1F4188790](v14, v15);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6CC8548);
      swift_release();
      return;
    }
    uint64_t v10 = 0;
    *(void *)&long long v11 = v5;
    *((void *)&v11 + 1) = v7;
    __n128 v12 = a1;
    while (1)
    {
      __n128 v19 = a1;
      float v16 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      v20[0] = v11;
      float v17 = *(float *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      BOOL v13 = v16 == v17;
      if (v10 == 3) {
        break;
      }
      while (1)
      {
        ++v10;
        if (v13) {
          break;
        }
        if (v10 == 3) {
          goto LABEL_10;
        }
        BOOL v13 = 0;
      }
    }
    if (v16 != v17) {
      goto LABEL_10;
    }
  }
}

__n128 sub_1B6D63C68@<Q0>(void **a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)((char *)*a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  id v5 = v3;
  sub_1B69E70A8(v4, v5);
  __n128 v8 = v6;
  swift_release();

  __n128 result = v8;
  *a2 = v8;
  return result;
}

uint64_t sub_1B6D63CE4@<X0>(uint64_t result@<X0>, long long *a2@<X8>)
{
  int v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  uint64_t v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if (v4 == -1)
  {
    if (!v3) {
      goto LABEL_11;
    }
    swift_retain();
LABEL_10:
    __n128 result = swift_release();
    goto LABEL_11;
  }
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v4 & 0x80000000) != 0) {
    goto LABEL_10;
  }
  if (*(void *)(v5 + v6 + 8) <= v4) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v5 + v6);
  if (v3 != -1 && *(_DWORD *)(v7 + 12 * (int)v4 + 8) != v3) {
    goto LABEL_10;
  }
  uint64_t v8 = sub_1B633CCAC(*(void *)(*(void *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 16, v5);
  uint64_t v10 = v9;
  char v12 = v11;
  __n128 result = swift_release();
  if (v12)
  {
LABEL_11:
    long long v13 = xmmword_1B6E4F370;
    goto LABEL_12;
  }
  *(void *)&long long v13 = v8;
  *((void *)&v13 + 1) = v10;
LABEL_12:
  *a2 = v13;
  return result;
}

void (*sub_1B6D63DF4(void *a1))(long long **a1, char a2)
{
  int v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = *(void *)&v1[v4 + 8];
  v3[6] = v5;
  swift_retain();
  uint64_t v6 = v1;
  sub_1B69E70A8(v5, v6);
  long long v9 = v7;
  v3[7] = 0;

  swift_release();
  *(_OWORD *)int v3 = v9;
  return sub_1B6D63EAC;
}

void sub_1B6D63EAC(long long **a1, char a2)
{
  uint64_t v2 = *a1;
  int v3 = (unsigned int *)(*((void *)*a1 + 4) + *((void *)*a1 + 5));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  BOOL v7 = v4 == 0xFFFFFFFFLL && v5 == 0;
  if (a2)
  {
    if (v7) {
      goto LABEL_29;
    }
    long long v32 = **a1;
    swift_retain();
    uint64_t v8 = sub_1B6360920(v4 | (v5 << 32));
    uint64_t v10 = v9;
    char v12 = v11;
    swift_release();
    if (v12) {
      goto LABEL_25;
    }
    uint64_t v13 = 0;
    *(void *)&long long v14 = v8;
    *((void *)&v14 + 1) = v10;
    BOOL v15 = 1;
    while (1)
    {
      if (v15)
      {
        long long v34 = v32;
        float v16 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
        long long v35 = v14;
        float v17 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
        BOOL v15 = v16 == v17;
        if (v13 == 3)
        {
          if (v16 != v17)
          {
LABEL_25:
            v2[1] = v32;
            uint64_t v28 = swift_retain();
            MEMORY[0x1F4188790](v28, v29);
            goto LABEL_28;
          }
          goto LABEL_29;
        }
      }
      else
      {
        if (v13 == 3) {
          goto LABEL_25;
        }
        BOOL v15 = 0;
      }
      ++v13;
    }
  }
  if (v7) {
    goto LABEL_29;
  }
  long long v33 = **a1;
  swift_retain();
  uint64_t v18 = sub_1B6360920(v4 | (v5 << 32));
  uint64_t v20 = v19;
  char v22 = v21;
  swift_release();
  if ((v22 & 1) == 0)
  {
    uint64_t v23 = 0;
    *(void *)&long long v24 = v18;
    *((void *)&v24 + 1) = v20;
    BOOL v25 = 1;
    while (1)
    {
      if (v25)
      {
        long long v36 = v33;
        float v26 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
        long long v37 = v24;
        float v27 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
        BOOL v25 = v26 == v27;
        if (v23 == 3)
        {
          if (v26 == v27) {
            goto LABEL_29;
          }
          break;
        }
      }
      else
      {
        if (v23 == 3) {
          break;
        }
        BOOL v25 = 0;
      }
      ++v23;
    }
  }
  v2[1] = v33;
  uint64_t v30 = swift_retain();
  MEMORY[0x1F4188790](v30, v31);
LABEL_28:
  sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65F38);
  swift_release();
LABEL_29:
  free(v2);
}

__n128 sub_1B6D64140(char *a1, uint64_t a2, double (*a3)(uint64_t, char *))
{
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v6 = a1;
  *(double *)&long long v7 = a3(v5, v6);
  long long v9 = v7;

  swift_release();
  return (__n128)v9;
}

double sub_1B6D641C4()
{
  *(void *)&double result = sub_1B6D641DC((double (*)(uint64_t, char *))sub_1B69E6C48).n128_u64[0];
  return result;
}

__n128 sub_1B6D641DC(double (*a1)(uint64_t, char *))
{
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v4 = v1;
  *(double *)&long long v5 = a1(v3, v4);
  long long v7 = v5;
  swift_release();

  return (__n128)v7;
}

void sub_1B6D642BC(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v5 = *(unsigned int *)(v4 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v6 = *(unsigned int *)(v4 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if (v5 != -1 || v6 != 0)
  {
    uint64_t v8 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
    long long v9 = (void *)(v5 | (v6 << 32));
    swift_retain();
    sub_1B637BA50(v9, (uint64_t)v22);
    swift_release();
    sub_1B62E9DE8((uint64_t)v22, (uint64_t)v23, &qword_1EB97ECF0, (uint64_t)&type metadata for ProjectionMatrix);
    if ((v24 & 1) != 0
      || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v23[1], a2), (int8x16_t)vceqq_f32(v23[0], a1)), vandq_s8((int8x16_t)vceqq_f32(v23[2], a3), (int8x16_t)vceqq_f32(v23[3], a4)))) & 0x80000000) == 0)
    {
      v21[0] = a1;
      v21[1] = a2;
      void v21[2] = a3;
      v21[3] = a4;
      uint64_t v10 = swift_retain();
      MEMORY[0x1F4188790](v10, v11);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6D65490);
      swift_release();
      uint64_t v12 = *(void *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v12)
      {
        int v13 = *(unsigned __int8 *)(v12 + 80);
        MEMORY[0x1BA9B8670](v12 + 48);
        uint64_t v12 = *(void *)(v12 + 56);
      }
      else
      {
        int v13 = 0;
      }
      uint64_t v19 = 0;
      swift_unknownObjectUnownedInit();
      uint64_t v18 = v8;
      uint64_t v19 = v12;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      char v20 = v13;
      sub_1B636C4E0((uint64_t)&v18, (uint64_t)v21);
      sub_1B6A61F04((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1F0F73918, (unint64_t)v9);
      sub_1B636C450((uint64_t)v21);
      if (v13) {
        sub_1B6A667F0(1);
      }
      swift_release();
    }
  }
}

__n128 sub_1B6D644D8@<Q0>(void **a1@<X0>, double (*a2)(uint64_t, id)@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)((char *)*a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  id v7 = v5;
  *(double *)&long long v8 = a2(v6, v7);
  long long v15 = v9;
  long long v16 = v8;
  __n128 v13 = v11;
  long long v14 = v10;
  swift_release();

  *a3 = v16;
  a3[1] = v15;
  __n128 result = v13;
  a3[2] = v14;
  a3[3] = v13;
  return result;
}

uint64_t sub_1B6D64578@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B6D645B4(a1, (void (*)(void *__return_ptr, void))sub_1B633FE90, &qword_1EB97ECF0, (uint64_t)&type metadata for ProjectionMatrix, a2);
}

uint64_t sub_1B6D645B4@<X0>(uint64_t result@<X0>, void (*a2)(void *__return_ptr, void)@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int v6 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  uint64_t v7 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v8 = *(void *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if (v7 == -1)
  {
    if (!v6) {
      goto LABEL_11;
    }
    swift_retain();
LABEL_10:
    __n128 result = swift_release();
    goto LABEL_11;
  }
  uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_10;
  }
  if (*(void *)(v8 + v12 + 8) <= v7) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v8 + v12);
  if (v6 != -1 && *(_DWORD *)(v13 + 12 * (int)v7 + 8) != v6) {
    goto LABEL_10;
  }
  a2(v17, *(void *)(*(void *)(v8 + 136) + 8 * *(int *)(v13 + 12 * (int)v7) + 32));
  swift_release();
  __n128 result = sub_1B62E9DE8((uint64_t)v17, (uint64_t)v18, a3, a4);
  if (v19)
  {
LABEL_11:
    *a5 = xmmword_1B6E4F300;
    a5[1] = xmmword_1B6E4F320;
    long long v15 = xmmword_1B6E4F2E0;
    long long v16 = xmmword_1B6E4F370;
    goto LABEL_12;
  }
  long long v14 = v18[1];
  *a5 = v18[0];
  a5[1] = v14;
  long long v15 = v18[2];
  long long v16 = v18[3];
LABEL_12:
  a5[2] = v15;
  a5[3] = v16;
  return result;
}

void (*sub_1B6D64714(void *a1))(float32x4_t **a1)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v5 = v1;
  sub_1B69E6C48(v4, v5);
  long long v13 = v7;
  long long v14 = v6;
  long long v11 = v9;
  long long v12 = v8;

  swift_release();
  *(_OWORD *)uint64_t v3 = v14;
  *((_OWORD *)v3 + 1) = v13;
  *((_OWORD *)v3 + 2) = v12;
  *((_OWORD *)v3 + 3) = v11;
  return sub_1B6D647D8;
}

void sub_1B6D647D8(float32x4_t **a1)
{
  uint64_t v1 = *a1;
  sub_1B6D642BC(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);

  free(v1);
}

float sub_1B6D64834()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E7288);
}

float sub_1B6D64864()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E7514);
}

float sub_1B6D64894()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E7770);
}

float sub_1B6D648C4()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E79CC);
}

float sub_1B6D648F4()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E7C28);
}

float sub_1B6D64924()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E7E84);
}

float sub_1B6D64954()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E80E0);
}

double sub_1B6D649E8()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v2 = v0;
  double v3 = sub_1B69E8634(v1, v2);
  swift_release();

  return v3;
}

float sub_1B6D64A78()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E833C);
}

uint64_t sub_1B6D64A90@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  int v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  uint64_t v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  uint64_t v5 = *(void *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if (v4 != -1)
  {
    uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
    swift_retain();
    if ((v4 & 0x80000000) == 0 && *(void *)(v5 + v6 + 8) > v4)
    {
      uint64_t v7 = *(void *)(v5 + v6);
      if (v3 == -1 || *(_DWORD *)(v7 + 12 * (int)v4 + 8) == v3)
      {
        uint64_t v8 = sub_1B6965084(*(void *)(*(void *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 20, v5);
        __n128 result = swift_release();
        if ((v8 & 0xFF00000000) != 0x200000000) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
  if (v3)
  {
    swift_retain();
LABEL_10:
    __n128 result = swift_release();
  }
LABEL_11:
  LODWORD(v8) = 1065353216;
LABEL_12:
  *a2 = v8;
  return result;
}

float sub_1B6D64BB0()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E8390);
}

void sub_1B6D64BC8(char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = &a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v6 = a1;
  char v7 = sub_1B69E44AC(v5, v6);
  swift_release();

  if (v7)
  {
    uint64_t v8 = *(unsigned int *)v4;
    uint64_t v9 = *((unsigned int *)v4 + 1);
    if (v8 != -1 || v9 != 0)
    {
      unint64_t v11 = v8 | (v9 << 32);
      swift_retain();
      uint64_t v12 = sub_1B695EC90(v11);
      int v14 = v13;
      swift_release();
      if ((v12 & 0xFF00000000) != 0x200000000)
      {
        *a2 = v14;
        return;
      }
    }
    goto LABEL_13;
  }
  uint64_t v15 = *(unsigned int *)v4;
  uint64_t v16 = *((unsigned int *)v4 + 1);
  BOOL v17 = v15 == -1 && v16 == 0;
  if (v17 || (uint64_t v18 = v15 | (v16 << 32), swift_retain(), sub_1B695EBC4(v18, &v19), swift_release(), v21 == 2))
  {
LABEL_13:
    *a2 = 0;
    return;
  }
  *a2 = v20;
}

float sub_1B6D64D04(char *a1, uint64_t a2, float (*a3)(uint64_t, char *))
{
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v6 = a1;
  float v7 = a3(v5, v6);

  swift_release();
  return v7;
}

float sub_1B6D64D88()
{
  return sub_1B6D64DA0((float (*)(uint64_t, char *))sub_1B69E83E4);
}

float sub_1B6D64DA0(float (*a1)(uint64_t, char *))
{
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v4 = v1;
  float v5 = a1(v3, v4);
  swift_release();

  return v5;
}

void sub_1B6D64E20(char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = &a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v6 = a1;
  char v7 = sub_1B69E44AC(v5, v6);
  swift_release();

  if (v7)
  {
    uint64_t v8 = *(unsigned int *)v4;
    uint64_t v9 = *((unsigned int *)v4 + 1);
    if (v8 != -1 || v9 != 0)
    {
      unint64_t v11 = v8 | (v9 << 32);
      swift_retain();
      uint64_t v12 = sub_1B695EC90(v11);
      int v14 = v13;
      swift_release();
      if ((v12 & 0xFF00000000) != 0x200000000)
      {
        *a2 = v14;
        return;
      }
    }
    goto LABEL_13;
  }
  uint64_t v15 = *(unsigned int *)v4;
  uint64_t v16 = *((unsigned int *)v4 + 1);
  BOOL v17 = v15 == -1 && v16 == 0;
  if (v17 || (uint64_t v18 = v15 | (v16 << 32), swift_retain(), sub_1B695EBC4(v18, &v19), swift_release(), v21 == 2))
  {
LABEL_13:
    *a2 = 0;
    return;
  }
  *a2 = v20;
}

uint64_t sub_1B6D64F60(char *a1, uint64_t a2, uint64_t (*a3)(uint64_t, char *))
{
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v6 = a1;
  LOBYTE(a3) = a3(v5, v6);

  swift_release();
  return a3 & 1;
}

uint64_t sub_1B6D64FDC()
{
  return sub_1B6D64FF4((uint64_t (*)(uint64_t, char *))sub_1B69E46E8);
}

uint64_t sub_1B6D64FF4(uint64_t (*a1)(uint64_t, char *))
{
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v4 = v1;
  LOBYTE(a1) = a1(v3, v4);
  swift_release();

  return a1 & 1;
}

void sub_1B6D6506C(char *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = &a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v6 = a1;
  char v7 = sub_1B69E44AC(v5, v6);
  swift_release();

  if ((v7 & 1) == 0)
  {
    uint64_t v16 = *(unsigned int *)v4;
    uint64_t v17 = *((unsigned int *)v4 + 1);
    if (v16 != -1 || v17 != 0)
    {
      uint64_t v19 = v16 | (v17 << 32);
      swift_retain();
      sub_1B695EBC4(v19, &v20);
      swift_release();
      if (v21 != 2)
      {
        char v15 = v21 & 1;
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  uint64_t v8 = *(unsigned int *)v4;
  uint64_t v9 = *((unsigned int *)v4 + 1);
  if (v8 == -1 && v9 == 0)
  {
LABEL_14:
    char v15 = 1;
    goto LABEL_15;
  }
  unint64_t v11 = v8 | (v9 << 32);
  swift_retain();
  uint64_t v12 = sub_1B695EC90(v11);
  char v14 = v13;
  swift_release();
  char v15 = v14 & 1;
  if ((v12 & 0xFF00000000) == 0x200000000) {
    char v15 = 1;
  }
LABEL_15:
  *a2 = v15;
}

uint64_t sub_1B6D65208()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v2 = v0;
  sub_1B69E88A0(v1, v2);
  uint64_t v4 = v3;
  swift_release();

  return v4;
}

void sub_1B6D65278(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = &a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  uint64_t v6 = a1;
  char v7 = sub_1B69E44AC(v5, v6);
  swift_release();

  if ((v7 & 1) == 0)
  {
    uint64_t v14 = *(unsigned int *)v4;
    uint64_t v15 = *((unsigned int *)v4 + 1);
    if (v14 != -1 || v15 != 0)
    {
      uint64_t v17 = v14 | (v15 << 32);
      swift_retain();
      sub_1B695EBC4(v17, &v18);
      swift_release();
      if (v19 != 2)
      {
        LODWORD(v13) = (v19 >> 8) & 1;
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  uint64_t v8 = *(unsigned int *)v4;
  uint64_t v9 = *((unsigned int *)v4 + 1);
  if (v8 == -1 && v9 == 0)
  {
LABEL_14:
    LOBYTE(v13) = 0;
    goto LABEL_15;
  }
  unint64_t v11 = v8 | (v9 << 32);
  swift_retain();
  unint64_t v12 = sub_1B695EC90(v11);
  swift_release();
  uint64_t v13 = HIDWORD(v12) & 1;
  if ((v12 & 0xFF00000000) == 0x200000000) {
    LOBYTE(v13) = 0;
  }
LABEL_15:
  *a2 = v13;
}

id VFXCoreCamera.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void VFXCoreCamera.init()()
{
}

id VFXCoreCamera.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXCoreCamera();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B6D65464(uint64_t a1)
{
  return sub_1B6D65E10(a1, (uint64_t (*)(uint64_t, void, void, __n128, __n128, __n128, __n128))sub_1B6D61A40);
}

uint64_t sub_1B6D65490(uint64_t a1)
{
  return sub_1B6D65E10(a1, (uint64_t (*)(uint64_t, void, void, __n128, __n128, __n128, __n128))sub_1B6B72064);
}

uint64_t type metadata accessor for VFXCoreCamera()
{
  return self;
}

unint64_t sub_1B6D654E4()
{
  unint64_t result = qword_1E9DD9DE0;
  if (!qword_1E9DD9DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DE0);
  }
  return result;
}

unint64_t sub_1B6D6553C()
{
  unint64_t result = qword_1E9DD9DE8;
  if (!qword_1E9DD9DE8)
  {
    sub_1B62F8038(255, &qword_1E9DD9DF0, (uint64_t)&type metadata for VFXCoreCameraProjectionDirection, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DE8);
  }
  return result;
}

double sub_1B6D655C0@<D0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&double result = sub_1B6D644D8(a1, (double (*)(uint64_t, id))sub_1B69E6BA0, a2).n128_u64[0];
  return result;
}

uint64_t sub_1B6D655EC(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6D656D0(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128))sub_1B6D627EC);
}

double sub_1B6D65604@<D0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&double result = sub_1B6D644D8(a1, (double (*)(uint64_t, id))sub_1B69E6BF4, a2).n128_u64[0];
  return result;
}

void sub_1B6D65638(__n128 *a1)
{
}

void sub_1B6D65664(__n128 *a1)
{
}

double sub_1B6D6568C@<D0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&double result = sub_1B6D644D8(a1, (double (*)(uint64_t, id))sub_1B69E6C48, a2).n128_u64[0];
  return result;
}

uint64_t sub_1B6D656B8(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6D656D0(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128))sub_1B6D642BC);
}

uint64_t sub_1B6D656D0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128))
{
  return a5(*a1, a1[1], a1[2], a1[3]);
}

ValueMetadata *type metadata accessor for VFXCoreCameraProjectionDirection()
{
  return &type metadata for VFXCoreCameraProjectionDirection;
}

uint64_t method lookup function for VFXCoreCamera(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VFXCoreCamera);
}

uint64_t dispatch thunk of VFXCoreCamera.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of VFXCoreCamera.isOrthographic.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of VFXCoreCamera.isOrthographic.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of VFXCoreCamera.isOrthographic.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of VFXCoreCamera.worldTransform.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VFXCoreCamera.worldTransform.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of VFXCoreCamera.worldTransform.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of VFXCoreCamera.lastFrameWorldTransform.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of VFXCoreCamera.lastFrameWorldTransform.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of VFXCoreCamera.lastFrameWorldTransform.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of VFXCoreCamera.position.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of VFXCoreCamera.position.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of VFXCoreCamera.position.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of VFXCoreCamera.orientation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of VFXCoreCamera.orientation.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of VFXCoreCamera.orientation.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of VFXCoreCamera.projection.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of VFXCoreCamera.projection.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of VFXCoreCamera.projection.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of VFXCoreCamera.fieldOfView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of VFXCoreCamera.focalLength.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of VFXCoreCamera.focusDistance.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of VFXCoreCamera.sensorSize.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of VFXCoreCamera.fStop.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of VFXCoreCamera.exposure.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of VFXCoreCamera.aperture.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VFXCoreCamera.filmOffset.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of VFXCoreCamera.scale.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of VFXCoreCamera.zNear.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of VFXCoreCamera.zFar.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of VFXCoreCamera.reverseZ.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VFXCoreCamera.projectionDirection.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t sub_1B6D65E10(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, __n128, __n128, __n128, __n128))
{
  return a2(a1, v2[3], v2[4], *(__n128 *)v2[2], *(__n128 *)(v2[2] + 16), *(__n128 *)(v2[2] + 32), *(__n128 *)(v2[2] + 48));
}

unint64_t sub_1B6D65E40()
{
  unint64_t result = qword_1E9DD9DF8;
  if (!qword_1E9DD9DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD9DF8);
  }
  return result;
}

uint64_t sub_1B6D65E94()
{
  return MEMORY[0x1F4186498](v0, 96, 15);
}

void *sub_1B6D65EA4(void *a1)
{
  uint64_t v3 = *(long long **)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  long long v4 = v3[1];
  v6[0] = *v3;
  v6[1] = v4;
  _OWORD v6[2] = v3[2];
  return sub_1B6D618D8(a1, v6, v2);
}

uint64_t sub_1B6D65EE0()
{
  return MEMORY[0x1F4186498](v0, 72, 7);
}

void *sub_1B6D65EF0(void *a1)
{
  return sub_1B663C0DC(a1);
}

void *sub_1B6D65F08(void *a1)
{
  return sub_1B663C0FC(a1);
}

unint64_t sub_1B6D65F20(uint64_t a1)
{
  return sub_1B6CC8528(a1);
}

unint64_t sub_1B6D65F38(uint64_t a1)
{
  return sub_1B6CC8548(a1);
}

uint64_t sub_1B6D65F50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    swift_retain();
    unint64_t v12 = (void *)(v10 + 56);
    do
    {
      memmove((void *)(v8 + *v12 + *(v12 - 1) * a4), (const void *)(v8 + *v12 + *(v12 - 1) * a2), *(v12 - 1) * (a3 - a2));
      v12 += 5;
      --v11;
    }
    while (v11);
    unint64_t result = swift_release();
  }
  uint64_t v13 = *(void *)(v9 + 16);
  if (v13)
  {
    uint64_t v14 = a3 - a2;
    swift_retain();
    uint64_t v15 = (void *)(v9 + 56);
    do
    {
      sub_1B6391F80(v8 + *v15 + *(v15 - 1) * a2, v8 + *v15 + *(v15 - 1) * a4, v14);
      v15 += 5;
      --v13;
    }
    while (v13);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D66060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = *v6;
  uint64_t v9 = *(void *)(*v6 + 16);
  if (v9)
  {
    uint64_t v11 = result + 32;
    uint64_t v12 = *(void *)(*(void *)a6 + 16);
    uint64_t v13 = *(void *)a6 + 56;
    uint64_t v14 = a3 - a2;
    swift_retain();
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v12)
      {
        uint64_t v16 = v11 + 40 * i;
        uint64_t v17 = *(void *)v16;
        uint64_t v19 = *(void *)(v16 + 16);
        uint64_t v18 = *(void *)(v16 + 24);
        int v20 = *(unsigned __int8 *)(v16 + 32);
        char v21 = (void *)v13;
        uint64_t v22 = v12;
        while (*(v21 - 3) != v17)
        {
          v21 += 5;
          if (!--v22) {
            goto LABEL_4;
          }
        }
        uint64_t v23 = (const void *)(a1 + v18 + v19 * a2);
        char v24 = (void *)(a5 + *v21 + v19 * a4);
        if (v20) {
          memmove(v24, v23, v19 * v14);
        }
        else {
          sub_1B6391F80((uint64_t)v23, (uint64_t)v24, v14);
        }
      }
LABEL_4:
      ;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D661A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = result;
  uint64_t v8 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v8 + 32);
    swift_retain();
    do
    {
      sub_1B6B3F768(v6 + v10[3], a2, a3, *v10);
      v10 += 5;
      --v9;
    }
    while (v9);
    uint64_t result = swift_release();
  }
  uint64_t v11 = *(void *)(v7 + 16);
  if (v11)
  {
    uint64_t v12 = (uint64_t *)(v7 + 32);
    swift_retain();
    do
    {
      sub_1B6B3F768(v6 + v12[3], a2, a3, *v12);
      v12 += 5;
      --v11;
    }
    while (v11);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D66290(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (!v2) {
    return 0;
  }
  for (uint64_t i = *(void *)v1 + 56; *(void *)(i - 24) != a1; i += 40)
  {
    if (!--v2) {
      return 0;
    }
  }
  return *(void *)i;
}

uint64_t sub_1B6D662D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (!v2) {
    return 0;
  }
  for (uint64_t i = *(void *)v1 + 56; *(void *)(i - 24) != a1; i += 40)
  {
    if (!--v2) {
      return 0;
    }
  }
  return *(void *)i;
}

BOOL ComponentStorageLayout.isCompatible(with:)(uint64_t *a1)
{
  if (v1[5] == a1[5])
  {
    uint64_t v2 = a1[2];
    uint64_t v3 = v1[2];
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4 == *(void *)(v2 + 16))
    {
      if (v4) {
        BOOL v5 = v3 == v2;
      }
      else {
        BOOL v5 = 1;
      }
      if (v5) {
        return sub_1B6D663B8(v1[1], a1[1]);
      }
      uint64_t v6 = (void *)(v3 + 32);
      for (uint64_t i = (void *)(v2 + 32); *v6 == *i && v6[3] == i[3]; i += 5)
      {
        v6 += 5;
        if (!--v4) {
          return sub_1B6D663B8(v1[1], a1[1]);
        }
      }
    }
  }
  return 0;
}

BOOL sub_1B6D66398(void *a1, void *a2)
{
  return *a1 == *a2 && a1[3] == a2[3];
}

BOOL sub_1B6D663B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (void *)(a1 + 32);
  uint64_t v4 = (void *)(a2 + 32);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = *v3 == *v4 && v3[3] == v4[3];
    BOOL v9 = v5-- != 0;
    if (!result) {
      break;
    }
    v4 += 5;
    v3 += 5;
  }
  while (v9);
  return result;
}

uint64_t destroy for ComponentStorageLayout()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ComponentStorageLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ComponentStorageLayout(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  return a1;
}

__n128 initializeWithTake for ComponentStorageLayout(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ComponentStorageLayout(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComponentStorageLayout(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComponentStorageLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentStorageLayout()
{
  return &type metadata for ComponentStorageLayout;
}

ValueMetadata *type metadata accessor for ComponentStorageLayout.ComponentLayout()
{
  return &type metadata for ComponentStorageLayout.ComponentLayout;
}

uint64_t sub_1B6D666D8(char *a1, char *__src, unint64_t a3, char *a4)
{
  uint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = __src - a1 + 15;
  if (__src - a1 >= 0) {
    uint64_t v7 = __src - a1;
  }
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = a3 - (void)__src;
  uint64_t v10 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v10 = a3 - (void)__src;
  }
  uint64_t v11 = v10 >> 4;
  long long v35 = a1;
  long long v34 = a4;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (a4 != __src || &__src[16 * v11] <= a4) {
        memmove(a4, __src, 16 * v11);
      }
      uint64_t v19 = &a4[16 * v11];
      long long v33 = v19;
      long long v35 = v5;
      if (a1 < v5 && v9 >= 16)
      {
        int v20 = (char *)(a3 - 16);
        char v21 = v5;
        while (1)
        {
          long long v32 = v5;
          uint64_t v22 = v20 + 16;
          uint64_t v23 = v19 - 16;
          uint64_t v24 = *((void *)v21 - 2);
          uint64_t v25 = *((void *)v21 - 1);
          v21 -= 16;
          unint64_t v26 = (unint64_t)v19;
          uint64_t v27 = (*(uint64_t (**)(void))(*((void *)v19 - 1) + 72))();
          if (v27 >= (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 72))(v24, v25))
          {
            long long v33 = v23;
            if ((unint64_t)v22 < v26 || (unint64_t)v20 >= v26 || v22 != (char *)v26) {
              *(_OWORD *)int v20 = *(_OWORD *)v23;
            }
            uint64_t v28 = a4;
            char v21 = v32;
            uint64_t v19 = v23;
            if (v32 <= a1) {
              goto LABEL_43;
            }
          }
          else
          {
            if (v22 != v32 || v20 >= v32) {
              *(_OWORD *)int v20 = *(_OWORD *)v21;
            }
            long long v35 = v21;
            uint64_t v28 = a4;
            uint64_t v19 = (char *)v26;
            if (v21 <= a1) {
              goto LABEL_43;
            }
          }
          v20 -= 16;
          uint64_t v5 = v21;
          if (v19 <= v28) {
            goto LABEL_43;
          }
        }
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -15)
  {
    uint64_t v12 = a4;
    if (a4 != a1 || &a1[16 * v8] <= a4) {
      memmove(a4, a1, 16 * v8);
    }
    uint64_t v13 = &a4[16 * v8];
    long long v33 = v13;
    if ((unint64_t)v5 < a3 && v6 >= 16)
    {
      uint64_t v14 = a1;
      do
      {
        uint64_t v15 = *(void *)v12;
        uint64_t v16 = *((void *)v12 + 1);
        uint64_t v17 = (*(uint64_t (**)(void))(*((void *)v5 + 1) + 72))();
        if (v17 >= (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 72))(v15, v16))
        {
          if (v14 != v12) {
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v12;
          }
          v12 += 16;
          long long v34 = v12;
          uint64_t v18 = v5;
        }
        else
        {
          uint64_t v18 = v5 + 16;
          if (v14 < v5 || v14 >= v18 || v14 != v5) {
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v5;
          }
        }
        v14 += 16;
        if (v12 >= v13) {
          break;
        }
        uint64_t v5 = v18;
      }
      while ((unint64_t)v18 < a3);
      long long v35 = v14;
    }
LABEL_43:
    sub_1B6D669EC((void **)&v35, (const void **)&v34, &v33);
    return 1;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

char *sub_1B6D669EC(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1B6D66AA8(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -104)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 104;
    if (result != v3 || result >= &v3[104 * v6])
    {
      return (char *)memmove(result, v3, 104 * v6);
    }
  }
  return result;
}

char *sub_1B6D66B7C(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1B6D66C38(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -80)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 80;
    if (result != v3 || result >= &v3[80 * v6])
    {
      return (char *)memmove(result, v3, 80 * v6);
    }
  }
  return result;
}

char *sub_1B6D66D08(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -112)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = 112 * (v4 / 112);
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

char *sub_1B6D66DD8(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -12)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 12;
    if (result != v3 || result >= &v3[12 * v6])
    {
      return (char *)memmove(result, v3, 12 * v6);
    }
  }
  return result;
}

char *sub_1B6D66EA8(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -48)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 48;
    if (result != v3 || result >= &v3[48 * v6])
    {
      return (char *)memmove(result, v3, 48 * v6);
    }
  }
  return result;
}

char *sub_1B6D66F78(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
    {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }
  return result;
}

char *sub_1B6D67044(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
    {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }
  return result;
}

char *sub_1B6D67100(void **a1, const void **a2, void *a3)
{
  long long v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

char *sub_1B6D671B8(uint64_t a1)
{
  return sub_1B62BD890(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B6D671CC(uint64_t a1)
{
  return sub_1B6C3DCD8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B6D671E0(uint64_t a1)
{
  return sub_1B6C3DCF8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B6D671F4(uint64_t a1)
{
  return sub_1B6396334(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B6D67208(uint64_t a1)
{
  return sub_1B6C3E4C4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B6D6721C(uint64_t a1)
{
  return sub_1B6C3DB64(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B6D67230(void *a1)
{
  return sub_1B6C3E7F0(0, a1[2], 0, a1);
}

uint64_t sub_1B6D67244(uint64_t a1)
{
  return sub_1B62B7ED4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B6D67258(void *a1)
{
  return sub_1B6C42730(0, a1[2], 0, a1);
}

void sub_1B6D6726C()
{
}

uint64_t sub_1B6D67284()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FixedArray10()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B6D67384()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FixedArray8()
{
  return sub_1B62C36EC();
}

void (*sub_1B6D67480(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  void *v9 = a3;
  uint64_t v10 = sub_1B6E338D8();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = (char *)malloc(v12);
  int64x2_t v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = sub_1B6E320E8();
  v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v16 + 16))();
  sub_1B6D677F4(a2, a3, a4, v13);
  return sub_1B6D6764C;
}

void sub_1B6D6764C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  long long v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 64);
  uint64_t v5 = *(void **)(*(void *)a1 + 72);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  uint64_t v10 = *(void *)(*(void *)a1 + 56);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void *, void *, void))(v4 + 16))(v3, v7, v2[3]);
    swift_getWitnessTable();
    sub_1B6E33088();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v4 + 8);
    v9(v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    v9(v7, v8);
  }
  else
  {
    swift_getWitnessTable();
    sub_1B6E33088();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v8);
  }
  free(v5);
  free(v7);
  free(v3);

  free(v2);
}

uint64_t sub_1B6D677F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v64 = a4;
  uint64_t v65 = a1;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = swift_getTupleTypeMetadata2() - 8;
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v62 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v52 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20, v21);
  uint64_t v23 = (char *)&v52 - v22;
  swift_getAssociatedConformanceWitness();
  uint64_t v61 = sub_1B6E320E8();
  uint64_t v63 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61, v24);
  char v56 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v59 = v6;
  uint64_t v60 = (char *)&v52 - v28;
  uint64_t v57 = v4;
  uint64_t v58 = a2;
  sub_1B6E31F98();
  sub_1B6E31FE8();
  sub_1B6E31668();
  uint64_t v53 = v15;
  uint64_t v54 = v8;
  uint64_t v29 = &v14[*(int *)(v8 + 56)];
  uint64_t v30 = v15;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v31(v14, v23, AssociatedTypeWitness);
  v31(v29, v19, AssociatedTypeWitness);
  uint64_t v32 = *(int *)(v8 + 56);
  long long v33 = v62;
  long long v34 = &v62[v32];
  long long v35 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v35(v62, v14, AssociatedTypeWitness);
  v35(v34, v29, AssociatedTypeWitness);
  long long v36 = v56;
  v31(v56, v33, AssociatedTypeWitness);
  long long v37 = *(void (**)(char *, uint64_t))(v53 + 8);
  v37(v34, AssociatedTypeWitness);
  long long v38 = v33;
  long long v39 = &v33[*(int *)(v54 + 56)];
  uint64_t v55 = v31;
  v31(v38, v14, AssociatedTypeWitness);
  v31(v39, v29, AssociatedTypeWitness);
  uint64_t v40 = v61;
  v31(&v36[*(int *)(v61 + 36)], v39, AssociatedTypeWitness);
  v37(v38, AssociatedTypeWitness);
  uint64_t v41 = v63;
  uint64_t v42 = v60;
  uint64_t v43 = v40;
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v60, v36, v40);
  uint64_t v45 = v57;
  uint64_t v44 = v58;
  sub_1B6E31FB8();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
  uint64_t v46 = sub_1B6E338D8();
  uint64_t v47 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(&v64[*(int *)(v46 + 40)], v45, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v65, v43);
  uint64_t v48 = v42;
  uint64_t v49 = v42;
  uint64_t v50 = (uint64_t (*)(uint64_t, char *, uint64_t))v55;
  v55(v47, v48, AssociatedTypeWitness);
  return v50((uint64_t)&v47[*(int *)(v46 + 36)], &v49[*(int *)(v43 + 36)], AssociatedTypeWitness);
}

uint64_t sub_1B6D67CCC(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v563 = a4;
  v578 = a2;
  uint64_t v579 = type metadata accessor for FixedArray10();
  uint64_t v576 = *(void *)(v579 - 8);
  MEMORY[0x1F4188790](v579, v6);
  v532 = (char *)&v519 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v9);
  v554 = (char *)&v519 - v10;
  MEMORY[0x1F4188790](v11, v12);
  v538 = (char *)&v519 - v13;
  MEMORY[0x1F4188790](v14, v15);
  v555 = (char *)&v519 - v16;
  MEMORY[0x1F4188790](v17, v18);
  v537 = (char *)&v519 - v19;
  MEMORY[0x1F4188790](v20, v21);
  v556 = (char *)&v519 - v22;
  MEMORY[0x1F4188790](v23, v24);
  v533 = (char *)&v519 - v25;
  MEMORY[0x1F4188790](v26, v27);
  v534 = (char *)&v519 - v28;
  MEMORY[0x1F4188790](v29, v30);
  v536 = (char *)&v519 - v31;
  MEMORY[0x1F4188790](v32, v33);
  v557 = (char *)&v519 - v34;
  MEMORY[0x1F4188790](v35, v36);
  v531 = (char *)&v519 - v37;
  MEMORY[0x1F4188790](v38, v39);
  v558 = (char *)&v519 - v40;
  MEMORY[0x1F4188790](v41, v42);
  v535 = (char *)&v519 - v43;
  MEMORY[0x1F4188790](v44, v45);
  v559 = (char *)&v519 - v46;
  MEMORY[0x1F4188790](v47, v48);
  v561 = (char *)&v519 - v49;
  MEMORY[0x1F4188790](v50, v51);
  v560 = (char *)&v519 - v52;
  MEMORY[0x1F4188790](v53, v54);
  v564 = (char *)&v519 - v55;
  MEMORY[0x1F4188790](v56, v57);
  v553 = (char *)&v519 - v58;
  v580 = a3;
  v581 = a3;
  v582 = a3;
  v583 = a3;
  v584 = a3;
  v585 = a3;
  v586 = a3;
  v587 = a3;
  v588 = a3;
  v589 = a3;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1F4188790](TupleTypeMetadata, v60);
  uint64_t v62 = (char *)&v519 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65.n128_f64[0] = MEMORY[0x1F4188790](v63, v64);
  unsigned __int32 v67 = (char *)&v519 - v66;
  uint64_t v69 = v68[12];
  long long v70 = (char *)&v519 + v69 - v66;
  v552 = v70;
  uint64_t v71 = v68[16];
  uint64_t v72 = (char *)&v519 + v71 - v66;
  v551 = v72;
  uint64_t v73 = v68[20];
  v575 = (char *)&v519 + v73 - v66;
  uint64_t v74 = v68[24];
  v574 = (char *)&v519 + v74 - v66;
  uint64_t v75 = v68[28];
  v573 = &v67[v75];
  uint64_t v76 = v68[32];
  v572 = &v67[v76];
  uint64_t v77 = v68[36];
  v571 = &v67[v77];
  uint64_t v78 = v68[40];
  v570 = &v67[v78];
  uint64_t v79 = v68[44];
  v569 = &v67[v79];
  long long v80 = a1;
  long long v81 = &a1[v69];
  v547 = &v80[v71];
  v548 = &v80[v73];
  v549 = &v80[v74];
  v550 = &v80[v75];
  v565 = &v80[v76];
  v566 = &v80[v77];
  v567 = &v80[v78];
  v568 = &v80[v79];
  v577 = v80;
  uint64_t v82 = *((void *)a3 - 1);
  long long v83 = *(void (**)(char *, char *, char *, __n128))(v82 + 16);
  v83(v67, v80, a3, v65);
  ((void (*)(char *, char *, char *))v83)(v70, v81, a3);
  ((void (*)(char *, char *, char *))v83)(v72, v547, a3);
  ((void (*)(char *, char *, char *))v83)(v575, v548, a3);
  ((void (*)(char *, char *, char *))v83)(v574, v549, a3);
  ((void (*)(char *, char *, char *))v83)(v573, v550, a3);
  ((void (*)(char *, char *, char *))v83)(v572, v565, a3);
  ((void (*)(char *, char *, char *))v83)(v571, v566, a3);
  ((void (*)(char *, char *, char *))v83)(v570, v567, a3);
  ((void (*)(char *, char *, char *))v83)(v569, v568, a3);
  uint64_t v84 = TupleTypeMetadata[12];
  uint64_t v85 = &v62[v84];
  v549 = &v62[v84];
  uint64_t v86 = TupleTypeMetadata[16];
  v568 = &v62[v86];
  uint64_t v87 = TupleTypeMetadata[20];
  float v88 = &v62[v87];
  v548 = &v62[v87];
  uint64_t v89 = TupleTypeMetadata[24];
  v567 = &v62[v89];
  uint64_t v90 = TupleTypeMetadata[28];
  v566 = &v62[v90];
  uint64_t v91 = TupleTypeMetadata[32];
  v565 = &v62[v91];
  uint64_t v92 = TupleTypeMetadata[36];
  v545 = &v62[v92];
  uint64_t v93 = TupleTypeMetadata[40];
  v546 = &v62[v93];
  v530 = TupleTypeMetadata;
  uint64_t v94 = TupleTypeMetadata[44];
  v547 = &v62[v94];
  uint64_t v95 = &v578[v84];
  uint64_t v96 = &v578[v86];
  uint64_t v539 = (uint64_t)&v578[v87];
  v540 = &v578[v89];
  v541 = &v578[v90];
  v542 = &v578[v91];
  v543 = (void (*)(void))&v578[v92];
  v544 = &v578[v93];
  v550 = &v578[v94];
  ((void (*)(char *))v83)(v62);
  ((void (*)(char *, char *, char *))v83)(v85, v95, a3);
  ((void (*)(char *, char *, char *))v83)(v568, v96, a3);
  ((void (*)(char *, uint64_t, char *))v83)(v88, v539, a3);
  ((void (*)(char *, char *, char *))v83)(v567, v540, a3);
  ((void (*)(char *, char *, char *))v83)(v566, v541, a3);
  ((void (*)(char *, char *, char *))v83)(v565, v542, a3);
  uint64_t v97 = v545;
  ((void (*)(char *, void (*)(void), char *))v83)(v545, v543, a3);
  int v98 = v546;
  ((void (*)(char *, char *, char *))v83)(v546, v544, a3);
  uint64_t v99 = v547;
  v544 = (char *)(v82 + 16);
  v543 = (void (*)(void))v83;
  ((void (*)(char *, char *, char *))v83)(v547, v550, a3);
  LODWORD(v550) = sub_1B6E31708();
  uint64_t v100 = *(char **)(v82 + 8);
  ((void (*)(char *, char *))v100)(v99, a3);
  ((void (*)(char *, char *))v100)(v98, a3);
  ((void (*)(char *, char *))v100)(v97, a3);
  ((void (*)(char *, char *))v100)(v565, a3);
  ((void (*)(char *, char *))v100)(v566, a3);
  ((void (*)(char *, char *))v100)(v567, a3);
  ((void (*)(char *, char *))v100)(v548, a3);
  ((void (*)(char *, char *))v100)(v568, a3);
  ((void (*)(char *, char *))v100)(v549, a3);
  v568 = v62;
  ((void (*)(char *, char *))v100)(v62, a3);
  ((void (*)(char *, char *))v100)(v569, a3);
  ((void (*)(char *, char *))v100)(v570, a3);
  ((void (*)(char *, char *))v100)(v571, a3);
  ((void (*)(char *, char *))v100)(v572, a3);
  ((void (*)(char *, char *))v100)(v573, a3);
  ((void (*)(char *, char *))v100)(v574, a3);
  ((void (*)(char *, char *))v100)(v575, a3);
  ((void (*)(char *, char *))v100)(v551, a3);
  ((void (*)(char *, char *))v100)(v552, a3);
  v562 = v67;
  v574 = a3;
  v575 = (char *)(v82 + 8);
  v573 = v100;
  ((void (*)(char *, char *))v100)(v67, a3);
  uint64_t v101 = v553;
  uint64_t v103 = (char *)(v576 + 16);
  uint64_t v102 = *(char **)(v576 + 16);
  uint64_t v104 = v579;
  ((void (*)(char *, char *, uint64_t))v102)(v553, v577, v579);
  uint64_t v105 = v102;
  ((void (*)(char *, char *, uint64_t))v102)(v564, v578, v104);
  if ((v550 & 1) == 0)
  {
    uint64_t v145 = *(char **)(v576 + 8);
    uint64_t v498 = v579;
    ((void (*)(char *, uint64_t))v145)(v564, v579);
    ((void (*)(char *, uint64_t))v145)(v101, v498);
    float32x4_t v148 = v560;
    ((void (*)(char *, char *, uint64_t))v102)(v560, v577, v498);
    v499 = v561;
    ((void (*)(char *, char *, uint64_t))v102)(v561, v578, v498);
    v235 = v558;
    v500 = v531;
    v501 = v499;
LABEL_13:
    uint64_t v502 = v579;
    ((void (*)(char *, uint64_t))v145)(v501, v579);
    ((void (*)(char *, uint64_t))v145)(v148, v502);
    v192 = v559;
    ((void (*)(char *, char *, uint64_t))v105)(v559, v577, v502);
    v503 = v535;
    ((void (*)(char *, char *, uint64_t))v105)(v535, v578, v502);
    v504 = v503;
    v236 = v500;
LABEL_14:
    uint64_t v505 = v579;
    ((void (*)(char *, uint64_t))v145)(v504, v579);
    ((void (*)(char *, uint64_t))v145)(v192, v505);
    ((void (*)(char *, char *, uint64_t))v105)(v235, v577, v505);
    ((void (*)(char *, char *, uint64_t))v105)(v236, v578, v505);
LABEL_15:
    uint64_t v506 = v579;
    ((void (*)(char *, uint64_t))v145)(v236, v579);
    ((void (*)(char *, uint64_t))v145)(v235, v506);
    v279 = v557;
    ((void (*)(char *, char *, uint64_t))v105)(v557, v577, v506);
    v507 = v536;
    ((void (*)(char *, char *, uint64_t))v105)(v536, v578, v506);
    v508 = v507;
    v401 = v145;
    v322 = v534;
    v509 = v533;
LABEL_16:
    uint64_t v510 = v579;
    ((void (*)(char *, uint64_t))v401)(v508, v579);
    ((void (*)(char *, uint64_t))v401)(v279, v510);
    ((void (*)(char *, char *, uint64_t))v105)(v322, v577, v510);
    ((void (*)(char *, char *, uint64_t))v105)(v509, v578, v510);
LABEL_17:
    v511 = v509;
    uint64_t v512 = v579;
    ((void (*)(char *, uint64_t))v401)(v511, v579);
    ((void (*)(char *, uint64_t))v401)(v322, v512);
    v363 = v556;
    ((void (*)(char *, char *, uint64_t))v105)(v556, v577, v512);
    v513 = v537;
    ((void (*)(char *, char *, uint64_t))v105)(v537, v578, v512);
    v514 = v513;
    v455 = v532;
LABEL_18:
    uint64_t v515 = v579;
    ((void (*)(char *, uint64_t))v401)(v514, v579);
    ((void (*)(char *, uint64_t))v401)(v363, v515);
    v406 = v555;
    ((void (*)(char *, char *, uint64_t))v105)(v555, v577, v515);
    v409 = v538;
    ((void (*)(char *, char *, uint64_t))v105)(v538, v578, v515);
LABEL_19:
    uint64_t v516 = v579;
    ((void (*)(char *, uint64_t))v401)(v409, v579);
    ((void (*)(char *, uint64_t))v401)(v406, v516);
    v453 = v554;
    ((void (*)(char *, char *, uint64_t))v105)(v554, v577, v516);
    ((void (*)(char *, char *, uint64_t))v105)(v455, v578, v516);
LABEL_20:
    uint64_t v517 = v579;
    ((void (*)(char *, uint64_t))v401)(v455, v579);
    ((void (*)(char *, uint64_t))v401)(v453, v517);
    char v493 = 0;
    return v493 & 1;
  }
  v550 = v102;
  uint64_t v106 = v530;
  uint64_t v107 = v530[12];
  v529 = &v101[v107];
  uint64_t v108 = v530[16];
  uint64_t v539 = (uint64_t)&v101[v108];
  uint64_t v109 = v530[20];
  uint64_t v110 = v101;
  v540 = &v101[v109];
  uint64_t v111 = v530[24];
  v551 = v103;
  v541 = &v101[v111];
  uint64_t v112 = v530[28];
  v542 = &v101[v112];
  uint64_t v113 = v530[32];
  v545 = &v101[v113];
  uint64_t v114 = v530[36];
  v552 = &v101[v114];
  uint64_t v115 = v530[40];
  v565 = &v101[v115];
  uint64_t v116 = v530[44];
  v566 = &v101[v116];
  long long v117 = &v562[v107];
  v572 = &v562[v107];
  long long v118 = &v562[v108];
  v549 = &v562[v108];
  uint64_t v119 = &v562[v109];
  v548 = &v562[v109];
  uint64_t v120 = &v562[v111];
  v547 = &v562[v111];
  uint64_t v121 = &v562[v112];
  v546 = &v562[v112];
  v571 = &v562[v113];
  v570 = &v562[v114];
  v569 = &v562[v115];
  v567 = &v562[v116];
  uint64_t v122 = v574;
  uint64_t v123 = v543;
  v543();
  ((void (*)(char *, char *, char *))v123)(v117, v529, v122);
  ((void (*)(char *, uint64_t, char *))v123)(v118, v539, v122);
  ((void (*)(char *, char *, char *))v123)(v119, v540, v122);
  ((void (*)(char *, char *, char *))v123)(v120, v541, v122);
  ((void (*)(char *, char *, char *))v123)(v121, v542, v122);
  ((void (*)(char *, char *, char *))v123)(v571, v545, v122);
  ((void (*)(char *, char *, char *))v123)(v570, v552, v122);
  ((void (*)(char *, char *, char *))v123)(v569, v565, v122);
  ((void (*)(char *, char *, char *))v123)(v567, v566, v122);
  uint64_t v124 = v106[12];
  uint64_t v125 = v564;
  v520 = &v564[v124];
  uint64_t v126 = v106[16];
  v521 = &v564[v126];
  uint64_t v127 = v106[20];
  v522 = &v564[v127];
  uint64_t v128 = v106[24];
  v524 = &v564[v128];
  uint64_t v129 = v106[28];
  v525 = &v564[v129];
  uint64_t v130 = v106[32];
  v527 = &v564[v130];
  uint64_t v131 = v106[36];
  v529 = &v564[v131];
  uint64_t v132 = v106[40];
  uint64_t v539 = (uint64_t)&v564[v132];
  uint64_t v133 = v106[44];
  v545 = &v564[v133];
  uint64_t v134 = v568;
  char v135 = &v568[v124];
  v552 = &v568[v124];
  __int16 v136 = &v568[v126];
  v542 = &v568[v126];
  char v137 = &v568[v127];
  v541 = &v568[v127];
  uint64_t v138 = &v568[v128];
  v540 = &v568[v128];
  v566 = &v568[v129];
  v565 = &v568[v130];
  v523 = &v568[v131];
  v526 = &v568[v132];
  v528 = &v568[v133];
  ((void (*)(char *, char *, char *))v123)(v568, v564, v122);
  ((void (*)(char *, char *, char *))v123)(v135, v520, v122);
  ((void (*)(char *, char *, char *))v123)(v136, v521, v122);
  ((void (*)(char *, char *, char *))v123)(v137, v522, v122);
  ((void (*)(char *, char *, char *))v123)(v138, v524, v122);
  ((void (*)(char *, char *, char *))v123)(v566, v525, v122);
  uint64_t v139 = v579;
  ((void (*)(char *, char *, char *))v123)(v565, v527, v122);
  uint64_t v140 = v523;
  ((void (*)(char *, char *, char *))v123)(v523, v529, v122);
  uint64_t v141 = v526;
  ((void (*)(char *, uint64_t, char *))v123)(v526, v539, v122);
  __int16 v142 = v528;
  ((void (*)(char *, char *, char *))v123)(v528, v545, v122);
  LODWORD(v545) = sub_1B6E31708();
  uint64_t v144 = v576 + 8;
  uint64_t v143 = *(char **)(v576 + 8);
  uint64_t v539 = (v576 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  ((void (*)(char *, uint64_t))v143)(v125, v139);
  uint64_t v576 = v144;
  ((void (*)(char *, uint64_t))v143)(v110, v139);
  uint64_t v145 = v143;
  uint64_t v146 = v573;
  ((void (*)(char *, char *))v573)(v142, v122);
  ((void (*)(char *, char *))v146)(v141, v122);
  ((void (*)(char *, char *))v146)(v140, v122);
  ((void (*)(char *, char *))v146)(v565, v122);
  ((void (*)(char *, char *))v146)(v566, v122);
  ((void (*)(char *, char *))v146)(v540, v122);
  ((void (*)(char *, char *))v146)(v541, v122);
  ((void (*)(char *, char *))v146)(v542, v122);
  ((void (*)(char *, char *))v146)(v552, v122);
  uint64_t v147 = v550;
  ((void (*)(char *, char *))v146)(v134, v122);
  ((void (*)(char *, char *))v146)(v567, v122);
  ((void (*)(char *, char *))v146)(v569, v122);
  ((void (*)(char *, char *))v146)(v570, v122);
  ((void (*)(char *, char *))v146)(v571, v122);
  ((void (*)(char *, char *))v146)(v546, v122);
  ((void (*)(char *, char *))v146)(v547, v122);
  ((void (*)(char *, char *))v146)(v548, v122);
  ((void (*)(char *, char *))v146)(v549, v122);
  ((void (*)(char *, char *))v146)(v572, v122);
  ((void (*)(char *, char *))v146)(v562, v122);
  float32x4_t v148 = v560;
  ((void (*)(char *, char *, uint64_t))v147)(v560, v577, v139);
  uint64_t v105 = v147;
  ((void (*)(char *, char *, uint64_t))v147)(v561, v578, v139);
  if ((v545 & 1) == 0)
  {
    v235 = v558;
    v500 = v531;
    v501 = v561;
    goto LABEL_13;
  }
  __int32 v149 = v530;
  uint64_t v150 = v530[12];
  v540 = &v148[v150];
  uint64_t v151 = v530[16];
  v541 = &v148[v151];
  uint64_t v152 = v530[20];
  v542 = &v148[v152];
  uint64_t v153 = v530[24];
  v545 = &v148[v153];
  uint64_t v154 = v530[28];
  v529 = v145;
  v546 = &v148[v154];
  uint64_t v155 = v530[32];
  v547 = &v148[v155];
  uint64_t v156 = v530[36];
  v565 = &v148[v156];
  uint64_t v157 = v530[40];
  v566 = &v148[v157];
  uint64_t v158 = v530[44];
  v567 = &v148[v158];
  uint64_t v159 = &v562[v150];
  v564 = &v562[v150];
  uint64_t v160 = &v562[v151];
  v569 = &v562[v151];
  uint64_t v161 = &v562[v152];
  v553 = &v562[v152];
  uint64_t v162 = &v562[v153];
  v552 = &v562[v153];
  uint64_t v163 = &v562[v154];
  v549 = &v562[v154];
  uint64_t v164 = &v562[v155];
  v548 = &v562[v155];
  v572 = &v562[v156];
  v571 = &v562[v157];
  v570 = &v562[v158];
  uint64_t v165 = v574;
  uint64_t v166 = v543;
  v543();
  ((void (*)(char *, char *, char *))v166)(v159, v540, v165);
  ((void (*)(char *, char *, char *))v166)(v160, v541, v165);
  ((void (*)(char *, char *, char *))v166)(v161, v542, v165);
  ((void (*)(char *, char *, char *))v166)(v162, v545, v165);
  ((void (*)(char *, char *, char *))v166)(v163, v546, v165);
  ((void (*)(char *, char *, char *))v166)(v164, v547, v165);
  ((void (*)(char *, char *, char *))v166)(v572, v565, v165);
  ((void (*)(char *, char *, char *))v166)(v571, v566, v165);
  ((void (*)(char *, char *, char *))v166)(v570, v567, v165);
  uint64_t v167 = v149[12];
  char v168 = v561;
  uint64_t v169 = &v561[v167];
  uint64_t v170 = v149[16];
  v521 = &v561[v170];
  uint64_t v171 = v149[20];
  v522 = &v561[v171];
  uint64_t v172 = v149[24];
  v524 = &v561[v172];
  uint64_t v173 = v149[28];
  v525 = &v561[v173];
  uint64_t v174 = v149[32];
  v527 = &v561[v174];
  uint64_t v175 = v149[36];
  v540 = &v561[v175];
  uint64_t v176 = v149[40];
  v541 = &v561[v176];
  uint64_t v177 = v149[44];
  v547 = &v561[v177];
  id v178 = v568;
  uint64_t v179 = &v568[v167];
  v546 = &v568[v167];
  unint64_t v180 = &v568[v170];
  v565 = &v568[v170];
  uint64_t v181 = &v568[v171];
  v545 = &v568[v171];
  long long v182 = &v568[v172];
  v542 = &v568[v172];
  v567 = &v568[v173];
  v566 = &v568[v174];
  v523 = &v568[v175];
  v526 = &v568[v176];
  v528 = &v568[v177];
  ((void (*)(char *, char *, char *))v166)(v568, v561, v165);
  ((void (*)(char *, char *, char *))v166)(v179, v169, v165);
  long long v183 = v529;
  ((void (*)(char *, char *, char *))v166)(v180, v521, v165);
  ((void (*)(char *, char *, char *))v166)(v181, v522, v165);
  ((void (*)(char *, char *, char *))v166)(v182, v524, v165);
  uint64_t v184 = v579;
  ((void (*)(char *, char *, char *))v166)(v567, v525, v165);
  ((void (*)(char *, char *, char *))v166)(v566, v527, v165);
  v185 = v523;
  ((void (*)(char *, char *, char *))v166)(v523, v540, v165);
  v186 = v526;
  ((void (*)(char *, char *, char *))v166)(v526, v541, v165);
  v187 = v528;
  ((void (*)(char *, char *, char *))v166)(v528, v547, v165);
  v188 = v550;
  LODWORD(v547) = sub_1B6E31708();
  v189 = v168;
  uint64_t v190 = v184;
  ((void (*)(char *, uint64_t))v183)(v189, v184);
  ((void (*)(char *, uint64_t))v183)(v560, v184);
  v191 = v573;
  ((void (*)(char *, char *))v573)(v187, v165);
  ((void (*)(char *, char *))v191)(v186, v165);
  ((void (*)(char *, char *))v191)(v185, v165);
  ((void (*)(char *, char *))v191)(v566, v165);
  ((void (*)(char *, char *))v191)(v567, v165);
  ((void (*)(char *, char *))v191)(v542, v165);
  ((void (*)(char *, char *))v191)(v545, v165);
  ((void (*)(char *, char *))v191)(v565, v165);
  ((void (*)(char *, char *))v191)(v546, v165);
  ((void (*)(char *, char *))v191)(v178, v165);
  ((void (*)(char *, char *))v191)(v570, v165);
  ((void (*)(char *, char *))v191)(v571, v165);
  ((void (*)(char *, char *))v191)(v572, v165);
  ((void (*)(char *, char *))v191)(v548, v165);
  ((void (*)(char *, char *))v191)(v549, v165);
  ((void (*)(char *, char *))v191)(v552, v165);
  ((void (*)(char *, char *))v191)(v553, v165);
  ((void (*)(char *, char *))v191)(v569, v165);
  ((void (*)(char *, char *))v191)(v564, v165);
  ((void (*)(char *, char *))v191)(v562, v165);
  v192 = v559;
  uint64_t v193 = v190;
  ((void (*)(char *, char *, uint64_t))v188)(v559, v577, v190);
  v194 = v535;
  uint64_t v105 = v188;
  ((void (*)(char *, char *, uint64_t))v188)(v535, v578, v193);
  if ((v547 & 1) == 0)
  {
    v504 = v194;
    v235 = v558;
    uint64_t v145 = v529;
    v236 = v531;
    goto LABEL_14;
  }
  v195 = v530;
  uint64_t v196 = v530[12];
  v542 = &v192[v196];
  uint64_t v197 = v530[16];
  v545 = &v192[v197];
  uint64_t v198 = v530[20];
  v546 = &v192[v198];
  uint64_t v199 = v530[24];
  v547 = &v192[v199];
  uint64_t v200 = v530[28];
  v548 = &v192[v200];
  uint64_t v201 = v530[32];
  v549 = &v192[v201];
  uint64_t v202 = v530[36];
  v552 = &v192[v202];
  uint64_t v203 = v530[40];
  v565 = &v192[v203];
  uint64_t v204 = v530[44];
  v566 = &v192[v204];
  v205 = &v562[v196];
  v564 = &v562[v196];
  v206 = &v562[v197];
  v561 = &v562[v197];
  v207 = &v562[v198];
  v567 = &v562[v198];
  v208 = v194;
  v209 = &v562[v199];
  v560 = &v562[v199];
  v210 = &v562[v200];
  v553 = &v562[v200];
  v572 = &v562[v201];
  v571 = &v562[v202];
  v570 = &v562[v203];
  v569 = &v562[v204];
  v211 = v574;
  v212 = v543;
  v543();
  ((void (*)(char *, char *, char *))v212)(v205, v542, v211);
  ((void (*)(char *, char *, char *))v212)(v206, v545, v211);
  ((void (*)(char *, char *, char *))v212)(v207, v546, v211);
  ((void (*)(char *, char *, char *))v212)(v209, v547, v211);
  ((void (*)(char *, char *, char *))v212)(v210, v548, v211);
  ((void (*)(char *, char *, char *))v212)(v572, v549, v211);
  ((void (*)(char *, char *, char *))v212)(v571, v552, v211);
  ((void (*)(char *, char *, char *))v212)(v570, v565, v211);
  ((void (*)(char *, char *, char *))v212)(v569, v566, v211);
  uint64_t v213 = v195[12];
  v214 = &v208[v213];
  uint64_t v215 = v195[16];
  v523 = &v208[v215];
  uint64_t v216 = v195[20];
  v524 = &v208[v216];
  uint64_t v217 = v195[24];
  v526 = &v208[v217];
  uint64_t v218 = v195[28];
  v528 = &v208[v218];
  uint64_t v219 = v195[32];
  v541 = &v208[v219];
  uint64_t v220 = v195[36];
  v545 = &v208[v220];
  uint64_t v221 = v195[40];
  v546 = &v208[v221];
  uint64_t v222 = v195[44];
  v552 = &v208[v222];
  v223 = v568;
  v224 = &v568[v213];
  v549 = &v568[v213];
  v225 = &v568[v215];
  v548 = &v568[v215];
  v226 = &v568[v216];
  v227 = &v568[v217];
  v547 = &v568[v217];
  v566 = &v568[v218];
  v565 = &v568[v219];
  v525 = &v568[v220];
  v540 = &v568[v221];
  v542 = &v568[v222];
  ((void (*)(char *, char *, char *))v212)(v568, v208, v211);
  ((void (*)(char *, char *, char *))v212)(v224, v214, v211);
  uint64_t v145 = v529;
  ((void (*)(char *, char *, char *))v212)(v225, v523, v211);
  v527 = v226;
  ((void (*)(char *, char *, char *))v212)(v226, v524, v211);
  ((void (*)(char *, char *, char *))v212)(v227, v526, v211);
  ((void (*)(char *, char *, char *))v212)(v566, v528, v211);
  ((void (*)(char *, char *, char *))v212)(v565, v541, v211);
  v228 = v525;
  ((void (*)(char *, char *, char *))v212)(v525, v545, v211);
  v229 = v540;
  ((void (*)(char *, char *, char *))v212)(v540, v546, v211);
  v230 = v542;
  ((void (*)(char *, char *, char *))v212)(v542, v552, v211);
  v231 = v550;
  LODWORD(v552) = sub_1B6E31708();
  v232 = v208;
  uint64_t v233 = v579;
  ((void (*)(char *, uint64_t))v145)(v232, v579);
  ((void (*)(char *, uint64_t))v145)(v559, v233);
  v234 = v573;
  ((void (*)(char *, char *))v573)(v230, v211);
  ((void (*)(char *, char *))v234)(v229, v211);
  ((void (*)(char *, char *))v234)(v228, v211);
  ((void (*)(char *, char *))v234)(v565, v211);
  ((void (*)(char *, char *))v234)(v566, v211);
  ((void (*)(char *, char *))v234)(v547, v211);
  ((void (*)(char *, char *))v234)(v527, v211);
  ((void (*)(char *, char *))v234)(v548, v211);
  ((void (*)(char *, char *))v234)(v549, v211);
  ((void (*)(char *, char *))v234)(v223, v211);
  ((void (*)(char *, char *))v234)(v569, v211);
  ((void (*)(char *, char *))v234)(v570, v211);
  ((void (*)(char *, char *))v234)(v571, v211);
  ((void (*)(char *, char *))v234)(v572, v211);
  ((void (*)(char *, char *))v234)(v553, v211);
  ((void (*)(char *, char *))v234)(v560, v211);
  ((void (*)(char *, char *))v234)(v567, v211);
  ((void (*)(char *, char *))v234)(v561, v211);
  ((void (*)(char *, char *))v234)(v564, v211);
  ((void (*)(char *, char *))v234)(v562, v211);
  v235 = v558;
  ((void (*)(char *, char *, uint64_t))v231)(v558, v577, v233);
  v236 = v531;
  uint64_t v237 = v233;
  uint64_t v105 = v231;
  ((void (*)(char *, char *, uint64_t))v231)(v531, v578, v237);
  if ((v552 & 1) == 0) {
    goto LABEL_15;
  }
  v238 = v530;
  uint64_t v239 = v530[12];
  v545 = &v235[v239];
  uint64_t v240 = v530[16];
  v546 = &v235[v240];
  uint64_t v241 = v530[20];
  v547 = &v235[v241];
  uint64_t v242 = v530[24];
  v548 = &v235[v242];
  uint64_t v243 = v530[28];
  v549 = &v235[v243];
  uint64_t v244 = v530[32];
  v552 = &v235[v244];
  uint64_t v245 = v530[36];
  v553 = &v235[v245];
  uint64_t v246 = v530[40];
  v559 = &v235[v246];
  uint64_t v247 = v530[44];
  v560 = &v235[v247];
  v248 = &v562[v239];
  v566 = &v562[v239];
  v249 = &v562[v240];
  v565 = &v562[v240];
  v250 = &v562[v241];
  v564 = &v562[v241];
  v251 = &v562[v242];
  v567 = &v562[v242];
  v252 = &v562[v243];
  v561 = &v562[v243];
  v572 = &v562[v244];
  v571 = &v562[v245];
  v570 = &v562[v246];
  v569 = &v562[v247];
  v253 = v574;
  v254 = v543;
  v543();
  ((void (*)(char *, char *, char *))v254)(v248, v545, v253);
  ((void (*)(char *, char *, char *))v254)(v249, v546, v253);
  ((void (*)(char *, char *, char *))v254)(v250, v547, v253);
  ((void (*)(char *, char *, char *))v254)(v251, v548, v253);
  ((void (*)(char *, char *, char *))v254)(v252, v549, v253);
  ((void (*)(char *, char *, char *))v254)(v572, v552, v253);
  ((void (*)(char *, char *, char *))v254)(v571, v553, v253);
  ((void (*)(char *, char *, char *))v254)(v570, v559, v253);
  ((void (*)(char *, char *, char *))v254)(v569, v560, v253);
  uint64_t v255 = v238[12];
  v525 = &v236[v255];
  uint64_t v256 = v238[16];
  v526 = &v236[v256];
  uint64_t v257 = v238[20];
  v528 = &v236[v257];
  uint64_t v258 = v238[24];
  v540 = &v236[v258];
  uint64_t v259 = v238[28];
  v541 = &v236[v259];
  uint64_t v260 = v238[32];
  v545 = &v236[v260];
  uint64_t v261 = v238[36];
  v547 = &v236[v261];
  uint64_t v262 = v238[40];
  v548 = &v236[v262];
  uint64_t v263 = v238[44];
  v560 = &v236[v263];
  v264 = v568;
  v265 = &v568[v255];
  v559 = &v568[v255];
  v266 = &v568[v256];
  v553 = &v568[v256];
  v267 = &v568[v257];
  v552 = &v568[v257];
  v268 = &v568[v258];
  v269 = &v568[v259];
  v549 = &v568[v259];
  v527 = &v568[v260];
  v535 = &v568[v261];
  v542 = &v568[v262];
  v546 = &v568[v263];
  ((void (*)(char *, char *, char *))v254)(v568, v236, v253);
  ((void (*)(char *, char *, char *))v254)(v265, v525, v253);
  ((void (*)(char *, char *, char *))v254)(v266, v526, v253);
  ((void (*)(char *, char *, char *))v254)(v267, v528, v253);
  v270 = v268;
  ((void (*)(char *, char *, char *))v254)(v268, v540, v253);
  ((void (*)(char *, char *, char *))v254)(v269, v541, v253);
  v271 = v527;
  ((void (*)(char *, char *, char *))v254)(v527, v545, v253);
  v272 = v535;
  ((void (*)(char *, char *, char *))v254)(v535, v547, v253);
  v273 = v542;
  ((void (*)(char *, char *, char *))v254)(v542, v548, v253);
  v274 = v546;
  ((void (*)(char *, char *, char *))v254)(v546, v560, v253);
  v275 = v529;
  LODWORD(v560) = sub_1B6E31708();
  v276 = v236;
  uint64_t v277 = v579;
  ((void (*)(char *, uint64_t))v275)(v276, v579);
  ((void (*)(char *, uint64_t))v275)(v558, v277);
  v278 = v573;
  ((void (*)(char *, char *))v573)(v274, v253);
  ((void (*)(char *, char *))v278)(v273, v253);
  ((void (*)(char *, char *))v278)(v272, v253);
  ((void (*)(char *, char *))v278)(v271, v253);
  ((void (*)(char *, char *))v278)(v549, v253);
  ((void (*)(char *, char *))v278)(v270, v253);
  ((void (*)(char *, char *))v278)(v552, v253);
  ((void (*)(char *, char *))v278)(v553, v253);
  ((void (*)(char *, char *))v278)(v559, v253);
  ((void (*)(char *, char *))v278)(v264, v253);
  ((void (*)(char *, char *))v278)(v569, v253);
  ((void (*)(char *, char *))v278)(v570, v253);
  ((void (*)(char *, char *))v278)(v571, v253);
  ((void (*)(char *, char *))v278)(v572, v253);
  ((void (*)(char *, char *))v278)(v561, v253);
  ((void (*)(char *, char *))v278)(v567, v253);
  ((void (*)(char *, char *))v278)(v564, v253);
  ((void (*)(char *, char *))v278)(v565, v253);
  ((void (*)(char *, char *))v278)(v566, v253);
  ((void (*)(char *, char *))v278)(v562, v253);
  v279 = v557;
  v280 = v550;
  ((void (*)(char *, char *, uint64_t))v550)(v557, v577, v277);
  v281 = v536;
  uint64_t v105 = v280;
  ((void (*)(char *, char *, uint64_t))v280)(v536, v578, v277);
  if ((v560 & 1) == 0)
  {
    v508 = v281;
    v322 = v534;
    v509 = v533;
    v401 = v529;
    goto LABEL_16;
  }
  v282 = v530;
  uint64_t v283 = v530[12];
  v546 = &v279[v283];
  uint64_t v284 = v530[16];
  v547 = &v279[v284];
  uint64_t v285 = v530[20];
  v548 = &v279[v285];
  uint64_t v286 = v530[24];
  v549 = &v279[v286];
  uint64_t v287 = v530[28];
  v552 = &v279[v287];
  uint64_t v288 = v530[32];
  v553 = &v279[v288];
  uint64_t v289 = v530[36];
  v558 = &v279[v289];
  uint64_t v290 = v530[40];
  v559 = &v279[v290];
  uint64_t v291 = v530[44];
  v566 = &v279[v291];
  v292 = &v562[v283];
  v565 = &v562[v283];
  v293 = &v562[v284];
  v564 = &v562[v284];
  v294 = &v562[v285];
  v561 = &v562[v285];
  v295 = v281;
  v296 = &v562[v286];
  v560 = &v562[v286];
  v297 = &v562[v287];
  v567 = &v562[v287];
  v570 = &v562[v288];
  v572 = &v562[v289];
  v571 = &v562[v290];
  v569 = &v562[v291];
  v298 = v574;
  v299 = v543;
  v543();
  ((void (*)(char *, char *, char *))v299)(v292, v546, v298);
  ((void (*)(char *, char *, char *))v299)(v293, v547, v298);
  ((void (*)(char *, char *, char *))v299)(v294, v548, v298);
  ((void (*)(char *, char *, char *))v299)(v296, v549, v298);
  ((void (*)(char *, char *, char *))v299)(v297, v552, v298);
  ((void (*)(char *, char *, char *))v299)(v570, v553, v298);
  ((void (*)(char *, char *, char *))v299)(v572, v558, v298);
  ((void (*)(char *, char *, char *))v299)(v571, v559, v298);
  ((void (*)(char *, char *, char *))v299)(v569, v566, v298);
  uint64_t v300 = v282[12];
  v527 = &v295[v300];
  uint64_t v301 = v282[16];
  v531 = &v295[v301];
  uint64_t v302 = v282[20];
  v535 = &v295[v302];
  uint64_t v303 = v282[24];
  v304 = &v295[v303];
  uint64_t v305 = v282[28];
  v541 = &v295[v305];
  uint64_t v306 = v282[32];
  v545 = &v295[v306];
  uint64_t v307 = v282[36];
  v548 = &v295[v307];
  uint64_t v308 = v282[40];
  v549 = &v295[v308];
  uint64_t v309 = v282[44];
  v559 = &v295[v309];
  v310 = v568;
  v311 = &v568[v300];
  v558 = &v568[v300];
  v312 = &v568[v301];
  v553 = &v568[v301];
  v313 = &v568[v302];
  v552 = &v568[v302];
  v566 = &v568[v303];
  v528 = &v568[v305];
  v314 = &v568[v306];
  v547 = &v568[v306];
  v540 = &v568[v307];
  v542 = &v568[v308];
  v546 = &v568[v309];
  ((void (*)(char *, char *, char *))v299)(v568, v295, v298);
  ((void (*)(char *, char *, char *))v299)(v311, v527, v298);
  ((void (*)(char *, char *, char *))v299)(v312, v531, v298);
  ((void (*)(char *, char *, char *))v299)(v313, v535, v298);
  ((void (*)(char *, char *, char *))v299)(v566, v304, v298);
  v315 = v528;
  uint64_t v316 = v579;
  ((void (*)(char *, char *, char *))v299)(v528, v541, v298);
  ((void (*)(char *, char *, char *))v299)(v314, v545, v298);
  v317 = v540;
  ((void (*)(char *, char *, char *))v299)(v540, v548, v298);
  v318 = v542;
  ((void (*)(char *, char *, char *))v299)(v542, v549, v298);
  v319 = v546;
  ((void (*)(char *, char *, char *))v299)(v546, v559, v298);
  v320 = v529;
  LODWORD(v559) = sub_1B6E31708();
  ((void (*)(char *, uint64_t))v320)(v295, v316);
  ((void (*)(char *, uint64_t))v320)(v557, v316);
  v321 = v573;
  ((void (*)(char *, char *))v573)(v319, v298);
  ((void (*)(char *, char *))v321)(v318, v298);
  ((void (*)(char *, char *))v321)(v317, v298);
  ((void (*)(char *, char *))v321)(v547, v298);
  ((void (*)(char *, char *))v321)(v315, v298);
  ((void (*)(char *, char *))v321)(v566, v298);
  ((void (*)(char *, char *))v321)(v552, v298);
  ((void (*)(char *, char *))v321)(v553, v298);
  ((void (*)(char *, char *))v321)(v558, v298);
  ((void (*)(char *, char *))v321)(v310, v298);
  ((void (*)(char *, char *))v321)(v569, v298);
  ((void (*)(char *, char *))v321)(v571, v298);
  ((void (*)(char *, char *))v321)(v572, v298);
  ((void (*)(char *, char *))v321)(v570, v298);
  ((void (*)(char *, char *))v321)(v567, v298);
  ((void (*)(char *, char *))v321)(v560, v298);
  ((void (*)(char *, char *))v321)(v561, v298);
  ((void (*)(char *, char *))v321)(v564, v298);
  ((void (*)(char *, char *))v321)(v565, v298);
  ((void (*)(char *, char *))v321)(v562, v298);
  v322 = v534;
  v323 = v550;
  ((void (*)(char *, char *, uint64_t))v550)(v534, v577, v316);
  v324 = v533;
  uint64_t v105 = v323;
  ((void (*)(char *, char *, uint64_t))v323)(v533, v578, v316);
  if ((v559 & 1) == 0)
  {
    v509 = v324;
    v401 = v529;
    goto LABEL_17;
  }
  v325 = v530;
  uint64_t v326 = v530[12];
  v547 = &v322[v326];
  uint64_t v327 = v530[16];
  v548 = &v322[v327];
  uint64_t v328 = v530[20];
  v549 = &v322[v328];
  uint64_t v329 = v530[24];
  v330 = v322;
  v552 = &v322[v329];
  uint64_t v331 = v530[28];
  v553 = &v322[v331];
  uint64_t v332 = v530[32];
  v557 = &v322[v332];
  uint64_t v333 = v530[36];
  v558 = &v322[v333];
  uint64_t v334 = v530[40];
  v565 = &v322[v334];
  uint64_t v335 = v530[44];
  v566 = &v322[v335];
  v336 = &v562[v326];
  v564 = &v562[v326];
  v337 = &v562[v327];
  v561 = &v562[v327];
  v338 = &v562[v328];
  v560 = &v562[v328];
  v339 = &v562[v329];
  v559 = &v562[v329];
  v571 = &v562[v331];
  v572 = &v562[v332];
  v570 = &v562[v333];
  v569 = &v562[v334];
  v567 = &v562[v335];
  v340 = v574;
  v341 = v543;
  v543();
  ((void (*)(char *, char *, char *))v341)(v336, v547, v340);
  ((void (*)(char *, char *, char *))v341)(v337, v548, v340);
  ((void (*)(char *, char *, char *))v341)(v338, v549, v340);
  ((void (*)(char *, char *, char *))v341)(v339, v552, v340);
  ((void (*)(char *, char *, char *))v341)(v571, v553, v340);
  ((void (*)(char *, char *, char *))v341)(v572, v557, v340);
  ((void (*)(char *, char *, char *))v341)(v570, v558, v340);
  ((void (*)(char *, char *, char *))v341)(v569, v565, v340);
  ((void (*)(char *, char *, char *))v341)(v567, v566, v340);
  uint64_t v342 = v325[12];
  v528 = &v324[v342];
  uint64_t v343 = v325[16];
  v535 = &v324[v343];
  uint64_t v344 = v325[20];
  v540 = &v324[v344];
  uint64_t v345 = v325[24];
  v542 = &v324[v345];
  uint64_t v346 = v325[28];
  v545 = &v324[v346];
  uint64_t v347 = v325[32];
  v546 = &v324[v347];
  uint64_t v348 = v325[36];
  v548 = &v324[v348];
  uint64_t v349 = v325[40];
  v549 = &v324[v349];
  uint64_t v350 = v325[44];
  v558 = &v324[v350];
  v351 = v568;
  v352 = &v568[v342];
  v557 = &v568[v342];
  v353 = &v568[v343];
  v553 = &v568[v343];
  v354 = &v568[v344];
  v552 = &v568[v344];
  v566 = &v568[v345];
  v565 = &v568[v346];
  v536 = &v568[v347];
  v541 = &v568[v348];
  v355 = &v568[v349];
  v531 = &v568[v349];
  v547 = &v568[v350];
  ((void (*)(char *, char *, char *))v341)(v568, v324, v340);
  ((void (*)(char *, char *, char *))v341)(v352, v528, v340);
  ((void (*)(char *, char *, char *))v341)(v353, v535, v340);
  v356 = v529;
  ((void (*)(char *, char *, char *))v341)(v354, v540, v340);
  ((void (*)(char *, char *, char *))v341)(v566, v542, v340);
  ((void (*)(char *, char *, char *))v341)(v565, v545, v340);
  v357 = v536;
  ((void (*)(char *, char *, char *))v341)(v536, v546, v340);
  v358 = v541;
  ((void (*)(char *, char *, char *))v341)(v541, v548, v340);
  ((void (*)(char *, char *, char *))v341)(v355, v549, v340);
  v359 = v547;
  ((void (*)(char *, char *, char *))v341)(v547, v558, v340);
  LODWORD(v558) = sub_1B6E31708();
  ((void (*)(char *, uint64_t))v356)(v324, v579);
  ((void (*)(char *, uint64_t))v356)(v330, v579);
  v360 = v573;
  ((void (*)(char *, char *))v573)(v359, v340);
  ((void (*)(char *, char *))v360)(v531, v340);
  ((void (*)(char *, char *))v360)(v358, v340);
  uint64_t v361 = v579;
  ((void (*)(char *, char *))v360)(v357, v340);
  ((void (*)(char *, char *))v360)(v565, v340);
  ((void (*)(char *, char *))v360)(v566, v340);
  ((void (*)(char *, char *))v360)(v552, v340);
  ((void (*)(char *, char *))v360)(v553, v340);
  ((void (*)(char *, char *))v360)(v557, v340);
  ((void (*)(char *, char *))v360)(v351, v340);
  ((void (*)(char *, char *))v360)(v567, v340);
  ((void (*)(char *, char *))v360)(v569, v340);
  ((void (*)(char *, char *))v360)(v570, v340);
  ((void (*)(char *, char *))v360)(v572, v340);
  ((void (*)(char *, char *))v360)(v571, v340);
  ((void (*)(char *, char *))v360)(v559, v340);
  ((void (*)(char *, char *))v360)(v560, v340);
  ((void (*)(char *, char *))v360)(v561, v340);
  ((void (*)(char *, char *))v360)(v564, v340);
  ((void (*)(char *, char *))v360)(v562, v340);
  v362 = v550;
  v363 = v556;
  ((void (*)(char *, char *, uint64_t))v550)(v556, v577, v361);
  v364 = v537;
  uint64_t v105 = v362;
  ((void (*)(char *, char *, uint64_t))v362)(v537, v578, v361);
  if ((v558 & 1) == 0)
  {
    v455 = v532;
    v514 = v364;
    v401 = v529;
    goto LABEL_18;
  }
  v365 = v530;
  uint64_t v366 = v530[12];
  v547 = &v363[v366];
  uint64_t v367 = v530[16];
  v548 = &v363[v367];
  uint64_t v368 = v530[20];
  v549 = &v363[v368];
  uint64_t v369 = v530[24];
  v552 = &v363[v369];
  uint64_t v370 = v530[28];
  v553 = &v363[v370];
  uint64_t v371 = v530[32];
  v557 = &v363[v371];
  uint64_t v372 = v530[36];
  v558 = &v363[v372];
  uint64_t v373 = v530[40];
  v559 = &v363[v373];
  uint64_t v374 = v530[44];
  v560 = &v363[v374];
  v375 = &v562[v366];
  v567 = &v562[v366];
  v376 = &v562[v367];
  v566 = &v562[v367];
  v377 = &v562[v368];
  v565 = &v562[v368];
  v378 = &v562[v369];
  v564 = &v562[v369];
  v379 = &v562[v370];
  v561 = &v562[v370];
  v572 = &v562[v371];
  v569 = &v562[v372];
  v571 = &v562[v373];
  v570 = &v562[v374];
  v380 = v574;
  v381 = v543;
  v543();
  ((void (*)(char *, char *, char *))v381)(v375, v547, v380);
  ((void (*)(char *, char *, char *))v381)(v376, v548, v380);
  ((void (*)(char *, char *, char *))v381)(v377, v549, v380);
  ((void (*)(char *, char *, char *))v381)(v378, v552, v380);
  ((void (*)(char *, char *, char *))v381)(v379, v553, v380);
  ((void (*)(char *, char *, char *))v381)(v572, v557, v380);
  ((void (*)(char *, char *, char *))v381)(v569, v558, v380);
  ((void (*)(char *, char *, char *))v381)(v571, v559, v380);
  ((void (*)(char *, char *, char *))v381)(v570, v560, v380);
  uint64_t v382 = v365[12];
  v533 = &v364[v382];
  uint64_t v383 = v365[16];
  v534 = &v364[v383];
  uint64_t v384 = v365[20];
  v536 = &v364[v384];
  uint64_t v385 = v365[24];
  v541 = &v364[v385];
  uint64_t v386 = v365[28];
  v542 = &v364[v386];
  uint64_t v387 = v365[32];
  v546 = &v364[v387];
  uint64_t v388 = v365[36];
  v548 = &v364[v388];
  uint64_t v389 = v365[40];
  v549 = &v364[v389];
  uint64_t v390 = v365[44];
  v560 = &v364[v390];
  v391 = v568;
  v392 = &v568[v382];
  v559 = &v568[v382];
  v393 = &v568[v383];
  v558 = &v568[v383];
  v394 = &v568[v384];
  v557 = &v568[v384];
  v395 = &v568[v385];
  v553 = &v568[v385];
  v396 = &v568[v386];
  v552 = &v568[v386];
  v535 = &v568[v387];
  v540 = &v568[v388];
  v545 = &v568[v389];
  v547 = &v568[v390];
  ((void (*)(char *, char *, char *))v381)(v568, v364, v380);
  ((void (*)(char *, char *, char *))v381)(v392, v533, v380);
  ((void (*)(char *, char *, char *))v381)(v393, v534, v380);
  ((void (*)(char *, char *, char *))v381)(v394, v536, v380);
  ((void (*)(char *, char *, char *))v381)(v395, v541, v380);
  ((void (*)(char *, char *, char *))v381)(v396, v542, v380);
  v397 = v535;
  ((void (*)(char *, char *, char *))v381)(v535, v546, v380);
  v398 = v540;
  ((void (*)(char *, char *, char *))v381)(v540, v548, v380);
  v399 = v545;
  ((void (*)(char *, char *, char *))v381)(v545, v549, v380);
  v400 = v547;
  ((void (*)(char *, char *, char *))v381)(v547, v560, v380);
  v401 = v529;
  v402 = v569;
  LODWORD(v560) = sub_1B6E31708();
  v403 = v364;
  uint64_t v404 = v579;
  ((void (*)(char *, uint64_t))v401)(v403, v579);
  ((void (*)(char *, uint64_t))v401)(v556, v404);
  v405 = v573;
  ((void (*)(char *, char *))v573)(v400, v380);
  ((void (*)(char *, char *))v405)(v399, v380);
  ((void (*)(char *, char *))v405)(v398, v380);
  ((void (*)(char *, char *))v405)(v397, v380);
  ((void (*)(char *, char *))v405)(v552, v380);
  ((void (*)(char *, char *))v405)(v553, v380);
  ((void (*)(char *, char *))v405)(v557, v380);
  ((void (*)(char *, char *))v405)(v558, v380);
  ((void (*)(char *, char *))v405)(v559, v380);
  ((void (*)(char *, char *))v405)(v391, v380);
  ((void (*)(char *, char *))v405)(v570, v380);
  ((void (*)(char *, char *))v405)(v571, v380);
  ((void (*)(char *, char *))v405)(v402, v380);
  ((void (*)(char *, char *))v405)(v572, v380);
  ((void (*)(char *, char *))v405)(v561, v380);
  ((void (*)(char *, char *))v405)(v564, v380);
  ((void (*)(char *, char *))v405)(v565, v380);
  ((void (*)(char *, char *))v405)(v566, v380);
  ((void (*)(char *, char *))v405)(v567, v380);
  ((void (*)(char *, char *))v405)(v562, v380);
  v406 = v555;
  uint64_t v407 = v579;
  v408 = v550;
  ((void (*)(char *, char *, uint64_t))v550)(v555, v577, v579);
  v409 = v538;
  uint64_t v410 = v407;
  uint64_t v105 = v408;
  ((void (*)(char *, char *, uint64_t))v408)(v538, v578, v410);
  if ((v560 & 1) == 0)
  {
    v455 = v532;
    goto LABEL_19;
  }
  v411 = v530;
  uint64_t v412 = v530[12];
  v549 = &v406[v412];
  uint64_t v413 = v530[16];
  v552 = &v406[v413];
  uint64_t v414 = v530[20];
  v553 = &v406[v414];
  uint64_t v415 = v530[24];
  v556 = &v406[v415];
  uint64_t v416 = v530[28];
  v557 = &v406[v416];
  uint64_t v417 = v530[32];
  v558 = &v406[v417];
  uint64_t v418 = v530[36];
  v559 = &v406[v418];
  uint64_t v419 = v530[40];
  v560 = &v406[v419];
  uint64_t v420 = v530[44];
  v421 = &v406[v420];
  v422 = &v562[v412];
  v566 = &v562[v412];
  v423 = &v562[v413];
  v565 = &v562[v413];
  v424 = &v562[v414];
  v564 = &v562[v414];
  v425 = &v562[v415];
  v561 = &v562[v415];
  v569 = &v562[v416];
  v571 = &v562[v417];
  v570 = &v562[v418];
  v572 = &v562[v419];
  v567 = &v562[v420];
  v426 = v574;
  v427 = v543;
  v543();
  ((void (*)(char *, char *, char *))v427)(v422, v549, v426);
  ((void (*)(char *, char *, char *))v427)(v423, v552, v426);
  ((void (*)(char *, char *, char *))v427)(v424, v553, v426);
  ((void (*)(char *, char *, char *))v427)(v425, v556, v426);
  ((void (*)(char *, char *, char *))v427)(v569, v557, v426);
  ((void (*)(char *, char *, char *))v427)(v571, v558, v426);
  ((void (*)(char *, char *, char *))v427)(v570, v559, v426);
  ((void (*)(char *, char *, char *))v427)(v572, v560, v426);
  ((void (*)(char *, char *, char *))v427)(v567, v421, v426);
  uint64_t v428 = v411[12];
  v535 = &v409[v428];
  uint64_t v429 = v411[16];
  v536 = &v409[v429];
  uint64_t v430 = v411[20];
  v540 = &v409[v430];
  uint64_t v431 = v411[24];
  v542 = &v409[v431];
  uint64_t v432 = v411[28];
  v545 = &v409[v432];
  uint64_t v433 = v411[32];
  v547 = &v409[v433];
  uint64_t v434 = v411[36];
  v549 = &v409[v434];
  uint64_t v435 = v411[40];
  v552 = &v409[v435];
  uint64_t v436 = v411[44];
  v557 = &v409[v436];
  v437 = v568;
  v438 = &v568[v428];
  v560 = &v568[v428];
  v439 = &v568[v429];
  v559 = &v568[v429];
  v440 = &v568[v430];
  v558 = &v568[v430];
  v441 = &v568[v431];
  v556 = &v568[v431];
  v442 = &v568[v432];
  v553 = &v568[v432];
  v537 = &v568[v433];
  v541 = &v568[v434];
  v546 = &v568[v435];
  v548 = &v568[v436];
  ((void (*)(char *, char *, char *))v427)(v568, v409, v426);
  ((void (*)(char *, char *, char *))v427)(v438, v535, v426);
  ((void (*)(char *, char *, char *))v427)(v439, v536, v426);
  ((void (*)(char *, char *, char *))v427)(v440, v540, v426);
  ((void (*)(char *, char *, char *))v427)(v441, v542, v426);
  ((void (*)(char *, char *, char *))v427)(v442, v545, v426);
  v443 = v537;
  uint64_t v444 = v579;
  ((void (*)(char *, char *, char *))v427)(v537, v547, v426);
  v445 = v541;
  ((void (*)(char *, char *, char *))v427)(v541, v549, v426);
  v446 = v546;
  ((void (*)(char *, char *, char *))v427)(v546, v552, v426);
  v447 = v548;
  ((void (*)(char *, char *, char *))v427)(v548, v557, v426);
  v448 = v446;
  LODWORD(v557) = sub_1B6E31708();
  uint64_t v449 = v444;
  uint64_t v450 = v444;
  v451 = v529;
  ((void (*)(char *, uint64_t))v529)(v409, v450);
  ((void (*)(char *, uint64_t))v451)(v555, v449);
  v452 = v573;
  ((void (*)(char *, char *))v573)(v447, v426);
  ((void (*)(char *, char *))v452)(v448, v426);
  ((void (*)(char *, char *))v452)(v445, v426);
  ((void (*)(char *, char *))v452)(v443, v426);
  ((void (*)(char *, char *))v452)(v553, v426);
  ((void (*)(char *, char *))v452)(v556, v426);
  ((void (*)(char *, char *))v452)(v558, v426);
  ((void (*)(char *, char *))v452)(v559, v426);
  ((void (*)(char *, char *))v452)(v560, v426);
  ((void (*)(char *, char *))v452)(v437, v426);
  ((void (*)(char *, char *))v452)(v567, v426);
  ((void (*)(char *, char *))v452)(v572, v426);
  ((void (*)(char *, char *))v452)(v570, v426);
  ((void (*)(char *, char *))v452)(v571, v426);
  ((void (*)(char *, char *))v452)(v569, v426);
  ((void (*)(char *, char *))v452)(v561, v426);
  ((void (*)(char *, char *))v452)(v564, v426);
  ((void (*)(char *, char *))v452)(v565, v426);
  ((void (*)(char *, char *))v452)(v566, v426);
  ((void (*)(char *, char *))v452)(v562, v426);
  v453 = v554;
  v454 = v550;
  ((void (*)(char *, char *, uint64_t))v550)(v554, v577, v449);
  v455 = v532;
  ((void (*)(char *, char *, uint64_t))v454)(v532, v578, v449);
  if ((v557 & 1) == 0)
  {
    v401 = v529;
    goto LABEL_20;
  }
  v456 = v530;
  uint64_t v457 = v530[12];
  v458 = v455;
  v553 = &v453[v457];
  uint64_t v459 = v530[16];
  v555 = &v453[v459];
  uint64_t v460 = v530[20];
  v556 = &v453[v460];
  uint64_t v461 = v530[24];
  v557 = &v453[v461];
  uint64_t v462 = v530[28];
  v558 = &v453[v462];
  uint64_t v463 = v530[32];
  v559 = &v453[v463];
  uint64_t v464 = v530[36];
  v560 = &v453[v464];
  uint64_t v465 = v530[40];
  v561 = &v453[v465];
  uint64_t v466 = v530[44];
  v570 = &v453[v466];
  v467 = &v562[v457];
  v569 = &v562[v457];
  v468 = &v562[v459];
  v567 = &v562[v459];
  v469 = &v562[v460];
  v566 = &v562[v460];
  v470 = &v562[v461];
  v565 = &v562[v461];
  v471 = &v562[v462];
  v564 = &v562[v462];
  v578 = &v562[v463];
  v577 = &v562[v464];
  v572 = &v562[v465];
  v571 = &v562[v466];
  v472 = v574;
  v473 = v543;
  v543();
  ((void (*)(char *, char *, char *))v473)(v467, v553, v472);
  ((void (*)(char *, char *, char *))v473)(v468, v555, v472);
  ((void (*)(char *, char *, char *))v473)(v469, v556, v472);
  ((void (*)(char *, char *, char *))v473)(v470, v557, v472);
  ((void (*)(char *, char *, char *))v473)(v471, v558, v472);
  ((void (*)(char *, char *, char *))v473)(v578, v559, v472);
  ((void (*)(char *, char *, char *))v473)(v577, v560, v472);
  ((void (*)(char *, char *, char *))v473)(v572, v561, v472);
  ((void (*)(char *, char *, char *))v473)(v571, v570, v472);
  uint64_t v474 = v456[12];
  v542 = &v458[v474];
  uint64_t v475 = v456[16];
  v545 = &v458[v475];
  uint64_t v476 = v456[20];
  v546 = &v458[v476];
  uint64_t v477 = v456[24];
  v548 = &v458[v477];
  uint64_t v478 = v456[28];
  v549 = &v458[v478];
  uint64_t v479 = v456[32];
  v551 = &v458[v479];
  uint64_t v480 = v456[36];
  v553 = &v458[v480];
  uint64_t v481 = v456[40];
  v556 = &v458[v481];
  uint64_t v482 = v456[44];
  v557 = &v458[v482];
  v483 = v568;
  v484 = &v568[v474];
  v561 = &v568[v474];
  v485 = &v568[v475];
  v560 = &v568[v475];
  v486 = &v568[v476];
  v559 = &v568[v476];
  v487 = &v568[v477];
  v558 = &v568[v477];
  v570 = &v568[v478];
  v488 = &v568[v479];
  v555 = &v568[v479];
  v547 = &v568[v480];
  v550 = &v568[v481];
  v552 = &v568[v482];
  ((void (*)(char *, char *, char *))v473)(v568, v458, v472);
  ((void (*)(char *, char *, char *))v473)(v484, v542, v472);
  ((void (*)(char *, char *, char *))v473)(v485, v545, v472);
  ((void (*)(char *, char *, char *))v473)(v486, v546, v472);
  ((void (*)(char *, char *, char *))v473)(v487, v548, v472);
  ((void (*)(char *, char *, char *))v473)(v570, v549, v472);
  ((void (*)(char *, char *, char *))v473)(v488, v551, v472);
  v489 = v547;
  ((void (*)(char *, char *, char *))v473)(v547, v553, v472);
  v490 = v550;
  ((void (*)(char *, char *, char *))v473)(v550, v556, v472);
  v491 = v552;
  ((void (*)(char *, char *, char *))v473)(v552, v557, v472);
  v492 = v571;
  char v493 = sub_1B6E31708();
  v494 = v458;
  uint64_t v495 = v579;
  v496 = v529;
  ((void (*)(char *, uint64_t))v529)(v494, v579);
  ((void (*)(char *, uint64_t))v496)(v554, v495);
  v497 = v573;
  ((void (*)(char *, char *))v573)(v491, v472);
  ((void (*)(char *, char *))v497)(v490, v472);
  ((void (*)(char *, char *))v497)(v489, v472);
  ((void (*)(char *, char *))v497)(v555, v472);
  ((void (*)(char *, char *))v497)(v570, v472);
  ((void (*)(char *, char *))v497)(v558, v472);
  ((void (*)(char *, char *))v497)(v559, v472);
  ((void (*)(char *, char *))v497)(v560, v472);
  ((void (*)(char *, char *))v497)(v561, v472);
  ((void (*)(char *, char *))v497)(v483, v472);
  ((void (*)(char *, char *))v497)(v492, v472);
  ((void (*)(char *, char *))v497)(v572, v472);
  ((void (*)(char *, char *))v497)(v577, v472);
  ((void (*)(char *, char *))v497)(v578, v472);
  ((void (*)(char *, char *))v497)(v564, v472);
  ((void (*)(char *, char *))v497)(v565, v472);
  ((void (*)(char *, char *))v497)(v566, v472);
  ((void (*)(char *, char *))v497)(v567, v472);
  ((void (*)(char *, char *))v497)(v569, v472);
  ((void (*)(char *, char *))v497)(v562, v472);
  return v493 & 1;
}

uint64_t sub_1B6D6C938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_1B6D6CA2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a3 + 16);
  _DWORD v10[2] = v6;
  v10[3] = v5;
  v10[4] = a1;
  v10[5] = v6;
  int64x2_t v10[6] = v6;
  v10[7] = v6;
  v10[8] = v6;
  v10[9] = v6;
  v10[10] = v6;
  v10[11] = v6;
  v10[12] = v6;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  sub_1B6D6C938(v3, (uint64_t)sub_1B6D7A4B4, (uint64_t)v10, TupleTypeMetadata, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
}

void (*sub_1B6D6CB08(void *a1, uint64_t *a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v3;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = malloc(0xA0uLL);
  *a1 = v8;
  uint64_t v9 = *(void *)(a3 + 16);
  v8[8] = v5;
  v8[9] = v9;
  *uint64_t v8 = v9;
  v8[1] = v9;
  v8[2] = v9;
  void v8[3] = v9;
  v8[4] = v9;
  v8[5] = v9;
  void v8[6] = v9;
  v8[7] = v9;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v8[10] = TupleTypeMetadata;
  uint64_t v48 = *((void *)TupleTypeMetadata - 1);
  size_t v11 = *(void *)(v48 + 64);
  uint64_t v12 = (char *)malloc(v11);
  v8[11] = v12;
  uint64_t v13 = (char *)malloc(v11);
  uint64_t v8[12] = v13;
  uint64_t v14 = *(void *)(v9 - 8);
  uint64_t v15 = v14;
  v8[13] = v14;
  size_t v16 = *(void *)(v14 + 64);
  uint64_t v46 = (char *)malloc(v16);
  v8[14] = v46;
  uint64_t v47 = (char *)malloc(v16);
  uint64_t v45 = *a2;
  uint64_t v17 = *a2;
  v8[15] = v47;
  v8[16] = v17;
  uint64_t v18 = TupleTypeMetadata[12];
  uint64_t v19 = &v13[v18];
  uint64_t v44 = &v13[v18];
  uint64_t v20 = TupleTypeMetadata[16];
  uint64_t v49 = &v13[v20];
  uint64_t v21 = TupleTypeMetadata[20];
  uint64_t v50 = &v13[v21];
  uint64_t v22 = TupleTypeMetadata[24];
  uint64_t v51 = &v13[v22];
  uint64_t v23 = TupleTypeMetadata[28];
  uint64_t v52 = &v13[v23];
  uint64_t v24 = TupleTypeMetadata[32];
  uint64_t v53 = &v13[v24];
  uint64_t v25 = TupleTypeMetadata[36];
  uint64_t v54 = &v13[v25];
  uint64_t v33 = v5 + v18;
  uint64_t v34 = v5 + v20;
  uint64_t v35 = v5 + v21;
  uint64_t v36 = v5 + v22;
  uint64_t v38 = v5 + v23;
  uint64_t v40 = v5 + v24;
  uint64_t v42 = v5 + v25;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v8[17] = v26;
  v8[18] = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v26(v13, v5, v9);
  v26(v19, v33, v9);
  v26(v49, v34, v9);
  v26(v50, v35, v9);
  v26(v51, v36, v9);
  v26(v52, v38, v9);
  v26(v53, v40, v9);
  v26(v54, v42, v9);
  uint64_t v27 = &v12[TupleTypeMetadata[12]];
  uint64_t v28 = &v12[TupleTypeMetadata[16]];
  uint64_t v29 = &v12[TupleTypeMetadata[20]];
  uint64_t v37 = &v12[TupleTypeMetadata[24]];
  uint64_t v39 = &v12[TupleTypeMetadata[28]];
  uint64_t v41 = &v12[TupleTypeMetadata[32]];
  uint64_t v43 = &v12[TupleTypeMetadata[36]];
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v30(v12, v13, v9);
  v30(v27, v44, v9);
  v30(v28, v49, v9);
  v30(v29, v50, v9);
  v30(v37, v51, v9);
  v30(v39, v52, v9);
  v30(v41, v53, v9);
  v30(v43, v54, v9);
  uint64_t v56 = v9;
  uint64_t v57 = v45;
  sub_1B6B5985C((uint64_t)v12, (uint64_t)sub_1B6D79EC0, (uint64_t)v55, (uint64_t)TupleTypeMetadata, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v31);
  v8[19] = 0;
  (*(void (**)(char *, int *))(v48 + 8))(v12, TupleTypeMetadata);
  v30(v47, v46, v9);
  return sub_1B6D6CFB4;
}

void sub_1B6D6CFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  if (a2)
  {
    uint64_t v3 = (uint64_t (*)(void *, void *, uint64_t))v2[17];
    uint64_t v4 = (void *)v2[15];
    uint64_t v5 = v2[16];
    uint64_t v7 = v2[13];
    uint64_t v6 = (void *)v2[14];
    uint64_t v9 = (void *)v2[11];
    uint64_t v8 = (void *)v2[12];
    v27[1] = *(void *)(*(void *)a1 + 152);
    uint64_t v11 = v2[9];
    uint64_t v10 = v2[10];
    uint64_t v12 = v2[8];
    uint64_t v13 = v3(v6, v4, v11);
    void v27[2] = v27;
    MEMORY[0x1F4188790](v13, v14);
    uint64_t v24 = v11;
    uint64_t v25 = v5;
    uint64_t v26 = v6;
    sub_1B6D6C938(v12, (uint64_t)sub_1B6D7A4B4, (uint64_t)v23, v10, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v15);
    size_t v16 = *(void (**)(void *, uint64_t))(v7 + 8);
    v16(v6, v11);
    v16(v4, v11);
  }
  else
  {
    uint64_t v4 = (void *)v2[15];
    uint64_t v17 = v2[13];
    uint64_t v6 = (void *)v2[14];
    uint64_t v9 = (void *)v2[11];
    uint64_t v8 = (void *)v2[12];
    uint64_t v18 = v2[9];
    MEMORY[0x1F4188790](v2[8], a2);
    uint64_t v24 = v18;
    uint64_t v25 = v19;
    uint64_t v26 = v4;
    sub_1B6D6C938(v20, (uint64_t)sub_1B6D7A4B4, (uint64_t)v23, v21, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v22);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v4, v18);
  }
  free(v4);
  free(v6);
  free(v8);
  free(v9);
  free(v2);
}

uint64_t sub_1B6D6D190(uint64_t a1)
{
  return sub_1B6D74C08(a1);
}

uint64_t sub_1B6D6D1A8()
{
  return sub_1B6E316D8();
}

uint64_t sub_1B6D6D228()
{
  swift_getWitnessTable();

  return sub_1B6E31F58();
}

void *sub_1B6D6D298(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D756D4(a1, a2, a3, (uint64_t)&unk_1B6ECF220, MEMORY[0x1E4FBB618]);
}

uint64_t sub_1B6D6D2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1B6D6D348()
{
  swift_getWitnessTable();

  return sub_1B6E31F38();
}

uint64_t sub_1B6D6D3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

void sub_1B6D6D440(void *a1@<X8>)
{
  *a1 = 8;
}

uint64_t (*sub_1B6D6D44C(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  void v6[4] = sub_1B6D6D4BC(v6, *a2, a3);
  return sub_1B68C8C94;
}

void (*sub_1B6D6D4BC(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = malloc(0x70uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  _OWORD v7[7] = v8;
  v7[8] = v8;
  *uint64_t v7 = v8;
  v7[1] = v8;
  _OWORD v7[2] = v8;
  _OWORD v7[3] = v8;
  double v7[4] = v8;
  v7[5] = v8;
  v7[6] = v8;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v48 = *((void *)TupleTypeMetadata - 1);
  size_t v10 = *(void *)(v48 + 64);
  uint64_t v11 = (char *)malloc(v10);
  v7[9] = v11;
  uint64_t v12 = (char *)malloc(v10);
  v7[10] = v12;
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v14 = v13;
  v7[11] = v13;
  size_t v15 = *(void *)(v13 + 64);
  uint64_t v47 = (char *)malloc(v15);
  v7[12] = v47;
  size_t v16 = (char *)malloc(v15);
  v7[13] = v16;
  uint64_t v17 = TupleTypeMetadata[12];
  uint64_t v18 = &v12[v17];
  uint64_t v44 = &v12[v17];
  uint64_t v19 = TupleTypeMetadata[16];
  uint64_t v20 = &v12[v19];
  uint64_t v45 = &v12[v19];
  uint64_t v46 = v16;
  uint64_t v21 = TupleTypeMetadata[20];
  uint64_t v50 = &v12[v21];
  uint64_t v22 = TupleTypeMetadata[24];
  uint64_t v51 = &v12[v22];
  uint64_t v23 = TupleTypeMetadata[28];
  uint64_t v52 = &v12[v23];
  uint64_t v24 = TupleTypeMetadata[32];
  uint64_t v53 = &v12[v24];
  uint64_t v25 = TupleTypeMetadata[36];
  uint64_t v54 = &v12[v25];
  uint64_t v34 = v4 + v17;
  uint64_t v35 = v4 + v19;
  uint64_t v36 = v4 + v21;
  uint64_t v37 = v4 + v22;
  uint64_t v38 = v4 + v23;
  uint64_t v40 = v4 + v24;
  uint64_t v42 = v4 + v25;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v26(v12, v4, v8);
  v26(v18, v34, v8);
  v26(v20, v35, v8);
  v26(v50, v36, v8);
  v26(v51, v37, v8);
  v26(v52, v38, v8);
  v26(v53, v40, v8);
  v26(v54, v42, v8);
  uint64_t v27 = &v11[TupleTypeMetadata[12]];
  uint64_t v28 = &v11[TupleTypeMetadata[16]];
  uint64_t v29 = &v11[TupleTypeMetadata[20]];
  uint64_t v30 = &v11[TupleTypeMetadata[24]];
  uint64_t v39 = &v11[TupleTypeMetadata[28]];
  uint64_t v41 = &v11[TupleTypeMetadata[32]];
  uint64_t v43 = &v11[TupleTypeMetadata[36]];
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v31(v11, v12, v8);
  v31(v27, v44, v8);
  v31(v28, v45, v8);
  v31(v29, v50, v8);
  v31(v30, v51, v8);
  v31(v39, v52, v8);
  v31(v41, v53, v8);
  v31(v43, v54, v8);
  uint64_t v56 = v8;
  uint64_t v57 = a2;
  sub_1B6B5985C((uint64_t)v11, (uint64_t)sub_1B6D79EC0, (uint64_t)v55, (uint64_t)TupleTypeMetadata, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v32);
  (*(void (**)(char *, int *))(v48 + 8))(v11, TupleTypeMetadata);
  v31(v46, v47, v8);
  return sub_1B6D6D948;
}

void sub_1B6D6D948(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 96);
  uint64_t v2 = *(void **)(*(void *)a1 + 104);
  uint64_t v4 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void **)(*(void *)a1 + 72);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 88) + 8))(v2, *(void *)(*(void *)a1 + 64));
  free(v2);
  free(v3);
  free(v4);
  free(v5);

  free(v1);
}

uint64_t sub_1B6D6D9CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1B6D677F4(a1, a2, WitnessTable, a3);
}

uint64_t sub_1B6D6DA34()
{
  swift_getWitnessTable();

  return sub_1B6E31F78();
}

uint64_t sub_1B6D6DAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6D79F80(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

uint64_t sub_1B6D6DAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6D79F80(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

uint64_t sub_1B6D6DB20()
{
  swift_getWitnessTable();

  return sub_1B6E31F48();
}

void *sub_1B6D6DB90(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D756D4(a1, a2, a3, (uint64_t)&unk_1B6ECF220, MEMORY[0x1E4FBB610]);
}

uint64_t sub_1B6D6DBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6D75754(a1, a2);
}

uint64_t sub_1B6D6DBD4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1B6D6DC28()
{
  swift_getWitnessTable();

  return sub_1B6E32018();
}

uint64_t sub_1B6D6DC7C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D6DC98()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D6DCB4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D6DD18()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D6DD7C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D6DD98()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D6DDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v76 = a3;
  uint64_t v74 = a1;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v90 = v6;
  uint64_t v91 = v6;
  uint64_t v92 = v6;
  uint64_t v93 = v6;
  uint64_t v94 = v6;
  uint64_t v95 = v6;
  uint64_t v96 = v6;
  uint64_t v97 = v6;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  MEMORY[0x1F4188790](TupleTypeMetadata, v9);
  uint64_t v73 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v72 = (char *)&v53 - v13;
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v15, v16);
  long long v70 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v69 = (char *)&v53 - v20;
  swift_getWitnessTable();
  uint64_t v21 = sub_1B6E32B28();
  uint64_t v54 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21, v22);
  uint64_t v25 = (char *)&v53 - v24;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16);
  uint64_t v75 = a2;
  v26(v25, v4, a2, v23);
  uint64_t v27 = 0;
  uint64_t v86 = 0;
  uint64_t v55 = v21;
  uint64_t v68 = &v25[*(int *)(v21 + 36)];
  *(void *)uint64_t v68 = 0;
  unsigned __int32 v67 = &v25[TupleTypeMetadata[12]];
  uint64_t v66 = &v25[TupleTypeMetadata[16]];
  __n128 v65 = &v25[TupleTypeMetadata[20]];
  uint64_t v64 = &v25[TupleTypeMetadata[24]];
  uint64_t v63 = &v25[TupleTypeMetadata[28]];
  uint64_t v62 = &v25[TupleTypeMetadata[32]];
  uint64_t v56 = TupleTypeMetadata;
  uint64_t v28 = TupleTypeMetadata[36];
  uint64_t v87 = v25;
  uint64_t v61 = &v25[v28];
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v14 += 16;
  uint64_t v60 = v29;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v59 = (void (**)(uint64_t, int *))(v8 + 8);
  uint64_t v71 = v14;
  uint64_t v58 = (void (**)(char *, uint64_t))(v14 - 8);
  uint64_t v30 = TupleTypeMetadata;
  do
  {
    uint64_t v85 = v27;
    uint64_t v31 = v72;
    uint64_t v33 = &v72[v30[16]];
    long long v80 = &v72[v30[12]];
    uint64_t v32 = v80;
    long long v81 = v33;
    uint64_t v35 = &v72[v30[24]];
    uint64_t v82 = &v72[v30[20]];
    uint64_t v34 = v82;
    long long v83 = v35;
    uint64_t v84 = &v72[v30[28]];
    uint64_t v36 = v84;
    float v88 = &v72[v30[32]];
    uint64_t v89 = &v72[v30[36]];
    uint64_t v37 = v60;
    v60(v72, v87, v6);
    v37(v32, v67, v6);
    v37(v33, v66, v6);
    v37(v34, v65, v6);
    v37(v35, v64, v6);
    v37(v36, v63, v6);
    v37(v88, v62, v6);
    v37(v89, v61, v6);
    uint64_t v38 = (uint64_t)v73;
    uint64_t v39 = &v73[v30[12]];
    uint64_t v40 = &v73[v30[16]];
    uint64_t v41 = &v73[v30[20]];
    uint64_t v42 = &v73[v30[24]];
    uint64_t v77 = &v73[v30[28]];
    uint64_t v78 = &v73[v30[32]];
    uint64_t v79 = &v73[v30[36]];
    uint64_t v43 = *v57;
    (*v57)(v73, v31, v6);
    v43(v39, v80, v6);
    v43(v40, v81, v6);
    v43(v41, v82, v6);
    v43(v42, v83, v6);
    v43(v77, v84, v6);
    v43(v78, v88, v6);
    uint64_t v44 = ((uint64_t (*)(char *, char *, uint64_t))v43)(v79, v89, v6);
    MEMORY[0x1F4188790](v44, v45);
    uint64_t v46 = v85;
    uint64_t v47 = v86;
    *(&v53 - 2) = v6;
    *(&v53 - 1) = v46;
    uint64_t v48 = v70;
    sub_1B6B5985C(v38, (uint64_t)sub_1B6D79EC0, (uint64_t)(&v53 - 4), (uint64_t)v30, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v49);
    uint64_t v86 = v47;
    (*v59)(v38, v30);
    uint64_t v50 = v69;
    v43(v69, v48, v6);
    swift_getWitnessTable();
    uint64_t v51 = (uint64_t *)v68;
    sub_1B6E31F48();
    *uint64_t v51 = v90;
    sub_1B6E315B8();
    (*v58)(v50, v6);
    uint64_t v27 = *v51;
  }
  while (*v51 != 8);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v87, v55);
}

uint64_t sub_1B6D6E584(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6D6E594(a1, a2, *(char **)(a3 + 16), *(void *)(*(void *)(a4 - 8) + 8));
}

uint64_t sub_1B6D6E594(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v425 = a4;
  uint64_t v435 = a2;
  uint64_t v426 = type metadata accessor for FixedArray8();
  uint64_t v433 = *(void *)(v426 - 8);
  MEMORY[0x1F4188790](v426, v6);
  v398 = (char *)v386 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v9);
  v399 = (char *)v386 - v10;
  MEMORY[0x1F4188790](v11, v12);
  v403 = (char *)v386 - v13;
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v418 = (char *)v386 - v16;
  MEMORY[0x1F4188790](v17, v18);
  v402 = (char *)v386 - v19;
  MEMORY[0x1F4188790](v20, v21);
  uint64_t v419 = (char *)v386 - v22;
  MEMORY[0x1F4188790](v23, v24);
  v397 = (char *)v386 - v25;
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v420 = (char *)v386 - v28;
  MEMORY[0x1F4188790](v29, v30);
  v401 = (char *)v386 - v31;
  MEMORY[0x1F4188790](v32, v33);
  v423 = (char *)v386 - v34;
  MEMORY[0x1F4188790](v35, v36);
  v421 = (char *)v386 - v37;
  MEMORY[0x1F4188790](v38, v39);
  v400 = (char *)v386 - v40;
  MEMORY[0x1F4188790](v41, v42);
  v427 = (char *)v386 - v43;
  MEMORY[0x1F4188790](v44, v45);
  v422 = (char *)v386 - v46;
  uint64_t v436 = a3;
  v437 = a3;
  v438 = a3;
  v439 = a3;
  v440 = a3;
  v441 = a3;
  v442 = a3;
  v443 = a3;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1F4188790](TupleTypeMetadata, v48);
  uint64_t v50 = (char *)v386 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53.n128_f64[0] = MEMORY[0x1F4188790](v51, v52);
  uint64_t v55 = (char *)v386 - v54;
  uint64_t v57 = v56[12];
  uint64_t v58 = (char *)v386 + v57 - v54;
  uint64_t v417 = v58;
  uint64_t v59 = v56[16];
  uint64_t v60 = (char *)v386 + v59 - v54;
  uint64_t v416 = v60;
  uint64_t v61 = v56[20];
  uint64_t v62 = (char *)v386 + v61 - v54;
  uint64_t v415 = v62;
  uint64_t v63 = v56[24];
  uint64_t v434 = (char *)v386 + v63 - v54;
  uint64_t v64 = v56[28];
  uint64_t v431 = &v55[v64];
  uint64_t v65 = v56[32];
  uint64_t v430 = &v55[v65];
  uint64_t v66 = v56[36];
  uint64_t v429 = &v55[v66];
  v409 = &a1[v57];
  uint64_t v410 = (void (*)(void))&a1[v59];
  v411 = &a1[v61];
  uint64_t v412 = &a1[v63];
  uint64_t v413 = &a1[v64];
  uint64_t v414 = &a1[v65];
  uint64_t v428 = &a1[v66];
  unsigned __int32 v67 = a1;
  uint64_t v432 = a1;
  uint64_t v68 = *((void *)a3 - 1);
  uint64_t v69 = *(void (**)(char *, char *, char *, __n128))(v68 + 16);
  v69(v55, v67, a3, v53);
  ((void (*)(char *, char *, char *))v69)(v58, v409, a3);
  ((void (*)(char *, void (*)(void), char *))v69)(v60, v410, a3);
  ((void (*)(char *, char *, char *))v69)(v62, v411, a3);
  ((void (*)(char *, char *, char *))v69)(v434, v412, a3);
  ((void (*)(char *, char *, char *))v69)(v431, v413, a3);
  ((void (*)(char *, char *, char *))v69)(v430, v414, a3);
  ((void (*)(char *, char *, char *))v69)(v429, v428, a3);
  uint64_t v70 = TupleTypeMetadata[12];
  uint64_t v71 = &v50[v70];
  uint64_t v414 = &v50[v70];
  uint64_t v72 = TupleTypeMetadata[16];
  uint64_t v428 = &v50[v72];
  uint64_t v73 = TupleTypeMetadata[20];
  v406 = &v50[v73];
  uint64_t v74 = TupleTypeMetadata[24];
  v409 = &v50[v74];
  uint64_t v75 = TupleTypeMetadata[28];
  uint64_t v76 = &v50[v75];
  v408 = &v50[v75];
  uint64_t v77 = TupleTypeMetadata[32];
  uint64_t v412 = &v50[v77];
  v396 = TupleTypeMetadata;
  uint64_t v78 = TupleTypeMetadata[36];
  uint64_t v413 = &v50[v78];
  uint64_t v79 = &v435[v70];
  long long v80 = &v435[v72];
  uint64_t v404 = &v435[v73];
  v405 = &v435[v74];
  uint64_t v407 = &v435[v75];
  uint64_t v410 = (void (*)(void))&v435[v77];
  v411 = &v435[v78];
  ((void (*)(char *))v69)(v50);
  ((void (*)(char *, char *, char *))v69)(v71, v79, a3);
  ((void (*)(char *, char *, char *))v69)(v428, v80, a3);
  long long v81 = v406;
  ((void (*)(char *, char *, char *))v69)(v406, v404, a3);
  uint64_t v82 = v409;
  ((void (*)(char *, char *, char *))v69)(v409, v405, a3);
  ((void (*)(char *, char *, char *))v69)(v76, v407, a3);
  long long v83 = v412;
  ((void (*)(char *, void (*)(void), char *))v69)(v412, v410, a3);
  uint64_t v84 = v413;
  uint64_t v85 = v411;
  v411 = (char *)(v68 + 16);
  uint64_t v410 = (void (*)(void))v69;
  ((void (*)(char *, char *, char *))v69)(v413, v85, a3);
  char v86 = sub_1B6E31708();
  uint64_t v87 = *(char **)(v68 + 8);
  ((void (*)(char *, char *))v87)(v84, a3);
  ((void (*)(char *, char *))v87)(v83, a3);
  ((void (*)(char *, char *))v87)(v408, a3);
  ((void (*)(char *, char *))v87)(v82, a3);
  ((void (*)(char *, char *))v87)(v81, a3);
  ((void (*)(char *, char *))v87)(v428, a3);
  ((void (*)(char *, char *))v87)(v414, a3);
  uint64_t v428 = v50;
  ((void (*)(char *, char *))v87)(v50, a3);
  ((void (*)(char *, char *))v87)(v429, a3);
  ((void (*)(char *, char *))v87)(v430, a3);
  ((void (*)(char *, char *))v87)(v431, a3);
  ((void (*)(char *, char *))v87)(v434, a3);
  ((void (*)(char *, char *))v87)(v415, a3);
  ((void (*)(char *, char *))v87)(v416, a3);
  ((void (*)(char *, char *))v87)(v417, a3);
  v424 = v55;
  float v88 = v55;
  uint64_t v89 = v422;
  uint64_t v430 = a3;
  uint64_t v431 = (char *)(v68 + 8);
  uint64_t v429 = v87;
  ((void (*)(char *, char *))v87)(v88, a3);
  uint64_t v91 = v433 + 16;
  uint64_t v90 = *(void (**)(char *, char *, uint64_t))(v433 + 16);
  uint64_t v92 = v426;
  v90(v89, v432, v426);
  uint64_t v93 = v92;
  uint64_t v434 = (char *)v90;
  v90(v427, v435, v92);
  if ((v86 & 1) == 0)
  {
    v364 = *(char **)(v433 + 8);
    ((void (*)(char *, uint64_t))v364)(v427, v92);
    ((void (*)(char *, uint64_t))v364)(v89, v92);
    v365 = v400;
    uint64_t v366 = v432;
    uint64_t v367 = v434;
    ((void (*)(char *, char *, uint64_t))v434)(v400, v432, v93);
    uint64_t v368 = v421;
    ((void (*)(char *, char *, uint64_t))v367)(v421, v435, v93);
    uint64_t v369 = v366;
    v209 = v420;
    uint64_t v370 = v397;
    uint64_t v371 = v423;
    uint64_t v133 = v365;
    uint64_t v372 = v368;
    uint64_t v132 = v369;
LABEL_11:
    ((void (*)(char *, uint64_t))v364)(v372, v93);
    ((void (*)(char *, uint64_t))v364)(v133, v93);
    uint64_t v373 = v371;
    uint64_t v374 = v434;
    ((void (*)(char *, char *, uint64_t))v434)(v373, v132, v93);
    v375 = v401;
    ((void (*)(char *, char *, uint64_t))v374)(v401, v435, v93);
    uint64_t v170 = v423;
    ((void (*)(char *, uint64_t))v364)(v375, v93);
LABEL_12:
    ((void (*)(char *, uint64_t))v364)(v170, v93);
    v376 = v434;
    ((void (*)(char *, char *, uint64_t))v434)(v209, v132, v93);
    ((void (*)(char *, char *, uint64_t))v376)(v370, v435, v93);
    ((void (*)(char *, uint64_t))v364)(v370, v93);
LABEL_13:
    ((void (*)(char *, uint64_t))v364)(v209, v93);
    v377 = v419;
    v378 = v434;
    ((void (*)(char *, char *, uint64_t))v434)(v419, v132, v93);
    v379 = v402;
    ((void (*)(char *, char *, uint64_t))v378)(v402, v435, v93);
    v380 = v398;
    ((void (*)(char *, uint64_t))v364)(v379, v93);
LABEL_14:
    ((void (*)(char *, uint64_t))v364)(v377, v93);
    uint64_t v288 = v418;
    v381 = v434;
    ((void (*)(char *, char *, uint64_t))v434)(v418, v132, v93);
    uint64_t v382 = v403;
    ((void (*)(char *, char *, uint64_t))v381)(v403, v435, v93);
    uint64_t v328 = v399;
    ((void (*)(char *, uint64_t))v364)(v382, v93);
LABEL_15:
    ((void (*)(char *, uint64_t))v364)(v288, v93);
    uint64_t v383 = v434;
    ((void (*)(char *, char *, uint64_t))v434)(v328, v132, v93);
    ((void (*)(char *, char *, uint64_t))v383)(v380, v435, v93);
    ((void (*)(char *, uint64_t))v364)(v380, v93);
LABEL_16:
    ((void (*)(char *, uint64_t))v364)(v328, v93);
    char v359 = 0;
    return v359 & 1;
  }
  uint64_t v94 = v396;
  uint64_t v95 = v396[12];
  uint64_t v394 = (uint64_t)&v89[v95];
  uint64_t v96 = v396[16];
  v395 = &v89[v96];
  uint64_t v97 = v396[20];
  uint64_t v404 = &v89[v97];
  uint64_t v98 = v396[24];
  v405 = &v89[v98];
  uint64_t v99 = v396[28];
  v406 = &v89[v99];
  uint64_t v100 = v396[32];
  uint64_t v414 = &v89[v100];
  uint64_t v101 = v396[36];
  uint64_t v415 = &v89[v101];
  uint64_t v102 = &v424[v95];
  uint64_t v407 = &v424[v95];
  uint64_t v103 = &v424[v96];
  uint64_t v413 = &v424[v96];
  uint64_t v104 = &v424[v97];
  uint64_t v412 = &v424[v97];
  uint64_t v105 = &v424[v98];
  v409 = &v424[v98];
  uint64_t v106 = &v424[v99];
  v408 = &v424[v99];
  uint64_t v417 = &v424[v100];
  uint64_t v416 = &v424[v101];
  uint64_t v107 = v430;
  uint64_t v108 = v410;
  v410();
  ((void (*)(char *, uint64_t, char *))v108)(v102, v394, v107);
  ((void (*)(char *, char *, char *))v108)(v103, v395, v107);
  ((void (*)(char *, char *, char *))v108)(v104, v404, v107);
  ((void (*)(char *, char *, char *))v108)(v105, v405, v107);
  ((void (*)(char *, char *, char *))v108)(v106, v406, v107);
  ((void (*)(char *, char *, char *))v108)(v417, v414, v107);
  ((void (*)(char *, char *, char *))v108)(v416, v415, v107);
  uint64_t v109 = v94[12];
  uint64_t v110 = v427;
  uint64_t v387 = &v427[v109];
  uint64_t v111 = v94[16];
  uint64_t v388 = &v427[v111];
  uint64_t v112 = v94[20];
  uint64_t v389 = &v427[v112];
  uint64_t v113 = v94[24];
  v391 = &v427[v113];
  uint64_t v114 = v94[28];
  uint64_t v394 = (uint64_t)&v427[v114];
  uint64_t v115 = v94[32];
  v405 = &v427[v115];
  uint64_t v116 = v94[36];
  uint64_t v414 = &v427[v116];
  long long v117 = v428;
  long long v118 = &v428[v109];
  v392 = &v428[v109];
  uint64_t v119 = &v428[v111];
  v406 = &v428[v111];
  uint64_t v120 = &v428[v112];
  uint64_t v404 = &v428[v112];
  uint64_t v121 = &v428[v113];
  v395 = &v428[v113];
  uint64_t v415 = &v428[v114];
  uint64_t v390 = &v428[v115];
  v393 = &v428[v116];
  ((void (*)(char *, char *, char *))v108)(v428, v427, v107);
  ((void (*)(char *, char *, char *))v108)(v118, v387, v107);
  ((void (*)(char *, char *, char *))v108)(v119, v388, v107);
  ((void (*)(char *, char *, char *))v108)(v120, v389, v107);
  ((void (*)(char *, char *, char *))v108)(v121, v391, v107);
  ((void (*)(char *, uint64_t, char *))v108)(v415, v394, v107);
  uint64_t v122 = v390;
  ((void (*)(char *, char *, char *))v108)(v390, v405, v107);
  uint64_t v123 = v393;
  ((void (*)(char *, char *, char *))v108)(v393, v414, v107);
  uint64_t v124 = v407;
  uint64_t v125 = v392;
  LODWORD(v405) = sub_1B6E31708();
  uint64_t v126 = v433 + 8;
  uint64_t v127 = *(char **)(v433 + 8);
  uint64_t v394 = (v433 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v128 = v110;
  uint64_t v129 = v426;
  ((void (*)(char *, uint64_t))v127)(v128, v426);
  uint64_t v433 = v126;
  uint64_t v414 = v127;
  ((void (*)(char *, uint64_t))v127)(v422, v129);
  uint64_t v130 = v429;
  ((void (*)(char *, char *))v429)(v123, v107);
  ((void (*)(char *, char *))v130)(v122, v107);
  ((void (*)(char *, char *))v130)(v415, v107);
  ((void (*)(char *, char *))v130)(v395, v107);
  ((void (*)(char *, char *))v130)(v404, v107);
  ((void (*)(char *, char *))v130)(v406, v107);
  ((void (*)(char *, char *))v130)(v125, v107);
  ((void (*)(char *, char *))v130)(v117, v107);
  ((void (*)(char *, char *))v130)(v416, v107);
  ((void (*)(char *, char *))v130)(v417, v107);
  ((void (*)(char *, char *))v130)(v408, v107);
  ((void (*)(char *, char *))v130)(v409, v107);
  ((void (*)(char *, char *))v130)(v412, v107);
  ((void (*)(char *, char *))v130)(v413, v107);
  ((void (*)(char *, char *))v130)(v124, v107);
  ((void (*)(char *, char *))v130)(v424, v107);
  uint64_t v131 = v400;
  uint64_t v132 = v432;
  ((void (*)(char *, char *, uint64_t))v434)(v400, v432, v129);
  uint64_t v93 = v129;
  ((void (*)(char *, char *, uint64_t))v434)(v421, v435, v129);
  uint64_t v133 = v131;
  if ((v405 & 1) == 0)
  {
    v364 = v414;
    v209 = v420;
    uint64_t v370 = v397;
    uint64_t v371 = v423;
    uint64_t v372 = v421;
    goto LABEL_11;
  }
  uint64_t v134 = v396;
  uint64_t v135 = v396[12];
  v386[1] = v91;
  __int16 v136 = v131;
  v395 = &v131[v135];
  uint64_t v137 = v396[16];
  uint64_t v404 = &v131[v137];
  uint64_t v138 = v396[20];
  v405 = &v131[v138];
  uint64_t v139 = v396[24];
  v406 = &v131[v139];
  uint64_t v140 = v396[28];
  uint64_t v407 = &v131[v140];
  uint64_t v141 = v396[32];
  uint64_t v416 = &v131[v141];
  uint64_t v142 = v396[36];
  uint64_t v417 = &v131[v142];
  uint64_t v143 = &v424[v135];
  uint64_t v415 = &v424[v135];
  uint64_t v144 = &v424[v137];
  v408 = &v424[v137];
  uint64_t v145 = &v424[v138];
  uint64_t v413 = &v424[v138];
  uint64_t v146 = &v424[v139];
  uint64_t v412 = &v424[v139];
  uint64_t v147 = &v424[v140];
  v409 = &v424[v140];
  v427 = &v424[v141];
  v422 = &v424[v142];
  float32x4_t v148 = v430;
  __int32 v149 = v410;
  v410();
  ((void (*)(char *, char *, char *))v149)(v143, v395, v148);
  ((void (*)(char *, char *, char *))v149)(v144, v404, v148);
  ((void (*)(char *, char *, char *))v149)(v145, v405, v148);
  ((void (*)(char *, char *, char *))v149)(v146, v406, v148);
  ((void (*)(char *, char *, char *))v149)(v147, v407, v148);
  ((void (*)(char *, char *, char *))v149)(v427, v416, v148);
  ((void (*)(char *, char *, char *))v149)(v422, v417, v148);
  uint64_t v150 = v134[12];
  uint64_t v151 = v421;
  uint64_t v388 = &v421[v150];
  uint64_t v152 = v134[16];
  uint64_t v389 = &v421[v152];
  uint64_t v153 = v134[20];
  uint64_t v390 = &v421[v153];
  uint64_t v154 = v134[24];
  v391 = &v421[v154];
  uint64_t v155 = v134[28];
  v393 = &v421[v155];
  uint64_t v156 = v134[32];
  v395 = &v421[v156];
  uint64_t v157 = v134[36];
  uint64_t v407 = &v421[v157];
  uint64_t v158 = v428;
  uint64_t v159 = &v428[v150];
  v406 = &v428[v150];
  uint64_t v160 = &v428[v152];
  uint64_t v161 = &v428[v153];
  v405 = &v428[v153];
  uint64_t v162 = &v428[v154];
  uint64_t v404 = &v428[v154];
  uint64_t v417 = &v428[v155];
  uint64_t v416 = &v428[v156];
  v392 = &v428[v157];
  ((void (*)(char *, char *, char *))v149)(v428, v421, v148);
  ((void (*)(char *, char *, char *))v149)(v159, v388, v148);
  uint64_t v163 = v426;
  ((void (*)(char *, char *, char *))v149)(v160, v389, v148);
  ((void (*)(char *, char *, char *))v149)(v161, v390, v148);
  ((void (*)(char *, char *, char *))v149)(v162, v391, v148);
  ((void (*)(char *, char *, char *))v149)(v417, v393, v148);
  ((void (*)(char *, char *, char *))v149)(v416, v395, v148);
  uint64_t v164 = v392;
  ((void (*)(char *, char *, char *))v149)(v392, v407, v148);
  uint64_t v165 = v408;
  LODWORD(v407) = sub_1B6E31708();
  uint64_t v166 = v151;
  uint64_t v167 = v163;
  char v168 = v414;
  ((void (*)(char *, uint64_t))v414)(v166, v163);
  ((void (*)(char *, uint64_t))v168)(v136, v163);
  uint64_t v169 = v429;
  ((void (*)(char *, char *))v429)(v164, v148);
  ((void (*)(char *, char *))v169)(v416, v148);
  ((void (*)(char *, char *))v169)(v417, v148);
  ((void (*)(char *, char *))v169)(v404, v148);
  ((void (*)(char *, char *))v169)(v405, v148);
  ((void (*)(char *, char *))v169)(v160, v148);
  ((void (*)(char *, char *))v169)(v406, v148);
  ((void (*)(char *, char *))v169)(v158, v148);
  ((void (*)(char *, char *))v169)(v422, v148);
  ((void (*)(char *, char *))v169)(v427, v148);
  ((void (*)(char *, char *))v169)(v409, v148);
  ((void (*)(char *, char *))v169)(v412, v148);
  ((void (*)(char *, char *))v169)(v413, v148);
  ((void (*)(char *, char *))v169)(v165, v148);
  ((void (*)(char *, char *))v169)(v415, v148);
  uint64_t v132 = v432;
  ((void (*)(char *, char *))v169)(v424, v148);
  uint64_t v170 = v423;
  uint64_t v171 = v434;
  ((void (*)(char *, char *, uint64_t))v434)(v423, v132, v163);
  uint64_t v172 = v401;
  uint64_t v93 = v167;
  ((void (*)(char *, char *, uint64_t))v171)(v401, v435, v167);
  if ((v407 & 1) == 0)
  {
    v364 = v168;
    uint64_t v385 = v172;
    v209 = v420;
    uint64_t v370 = v397;
    ((void (*)(char *, uint64_t))v364)(v385, v167);
    goto LABEL_12;
  }
  uint64_t v173 = v396;
  uint64_t v174 = v396[12];
  uint64_t v404 = &v170[v174];
  uint64_t v175 = v396[16];
  v405 = &v170[v175];
  uint64_t v176 = v396[20];
  v406 = &v170[v176];
  uint64_t v177 = v396[24];
  uint64_t v407 = &v170[v177];
  uint64_t v178 = v396[28];
  v408 = &v170[v178];
  uint64_t v179 = v396[32];
  v409 = &v170[v179];
  uint64_t v180 = v396[36];
  uint64_t v416 = &v170[v180];
  uint64_t v181 = &v424[v174];
  uint64_t v415 = &v424[v174];
  long long v182 = &v424[v175];
  uint64_t v413 = &v424[v175];
  long long v183 = &v424[v176];
  uint64_t v417 = &v424[v176];
  uint64_t v184 = &v424[v177];
  uint64_t v412 = &v424[v177];
  v421 = &v424[v178];
  v422 = &v424[v179];
  v427 = &v424[v180];
  v185 = v430;
  v186 = v172;
  v187 = v410;
  v410();
  ((void (*)(char *, char *, char *))v187)(v181, v404, v185);
  ((void (*)(char *, char *, char *))v187)(v182, v405, v185);
  ((void (*)(char *, char *, char *))v187)(v183, v406, v185);
  ((void (*)(char *, char *, char *))v187)(v184, v407, v185);
  ((void (*)(char *, char *, char *))v187)(v421, v408, v185);
  ((void (*)(char *, char *, char *))v187)(v422, v409, v185);
  ((void (*)(char *, char *, char *))v187)(v427, v416, v185);
  uint64_t v188 = v173[12];
  uint64_t v390 = &v186[v188];
  uint64_t v189 = v173[16];
  v391 = &v186[v189];
  uint64_t v190 = v173[20];
  v392 = &v186[v190];
  uint64_t v191 = v173[24];
  v395 = &v186[v191];
  uint64_t v192 = v173[28];
  uint64_t v404 = &v186[v192];
  uint64_t v193 = v173[32];
  v405 = &v186[v193];
  uint64_t v194 = v173[36];
  v409 = &v186[v194];
  v195 = v428;
  uint64_t v196 = &v428[v188];
  v408 = &v428[v188];
  uint64_t v197 = &v428[v189];
  uint64_t v407 = &v428[v189];
  uint64_t v198 = &v428[v190];
  uint64_t v199 = &v428[v191];
  v406 = &v428[v191];
  uint64_t v416 = &v428[v192];
  v393 = &v428[v193];
  v400 = &v428[v194];
  ((void (*)(char *, char *, char *))v187)(v428, v186, v185);
  ((void (*)(char *, char *, char *))v187)(v196, v390, v185);
  ((void (*)(char *, char *, char *))v187)(v197, v391, v185);
  ((void (*)(char *, char *, char *))v187)(v198, v392, v185);
  uint64_t v200 = v199;
  uint64_t v201 = v426;
  ((void (*)(char *, char *, char *))v187)(v200, v395, v185);
  ((void (*)(char *, char *, char *))v187)(v416, v404, v185);
  uint64_t v202 = v393;
  ((void (*)(char *, char *, char *))v187)(v393, v405, v185);
  uint64_t v203 = v400;
  ((void (*)(char *, char *, char *))v187)(v400, v409, v185);
  uint64_t v204 = v198;
  LODWORD(v409) = sub_1B6E31708();
  v205 = v414;
  ((void (*)(char *, uint64_t))v414)(v186, v201);
  v206 = v170;
  uint64_t v207 = v201;
  ((void (*)(char *, uint64_t))v205)(v206, v201);
  v208 = v429;
  ((void (*)(char *, char *))v429)(v203, v185);
  ((void (*)(char *, char *))v208)(v202, v185);
  ((void (*)(char *, char *))v208)(v416, v185);
  ((void (*)(char *, char *))v208)(v406, v185);
  uint64_t v132 = v432;
  ((void (*)(char *, char *))v208)(v204, v185);
  ((void (*)(char *, char *))v208)(v407, v185);
  ((void (*)(char *, char *))v208)(v408, v185);
  ((void (*)(char *, char *))v208)(v195, v185);
  ((void (*)(char *, char *))v208)(v427, v185);
  ((void (*)(char *, char *))v208)(v422, v185);
  ((void (*)(char *, char *))v208)(v421, v185);
  ((void (*)(char *, char *))v208)(v412, v185);
  ((void (*)(char *, char *))v208)(v417, v185);
  ((void (*)(char *, char *))v208)(v413, v185);
  ((void (*)(char *, char *))v208)(v415, v185);
  ((void (*)(char *, char *))v208)(v424, v185);
  v209 = v420;
  v210 = v434;
  ((void (*)(char *, char *, uint64_t))v434)(v420, v132, v207);
  v211 = v397;
  uint64_t v93 = v207;
  ((void (*)(char *, char *, uint64_t))v210)(v397, v435, v207);
  if ((v409 & 1) == 0)
  {
    v364 = v414;
    ((void (*)(char *, uint64_t))v414)(v211, v207);
    goto LABEL_13;
  }
  v212 = v396;
  uint64_t v213 = v396[12];
  v405 = &v209[v213];
  uint64_t v214 = v396[16];
  v406 = &v209[v214];
  uint64_t v215 = v396[20];
  uint64_t v216 = v211;
  uint64_t v407 = &v209[v215];
  uint64_t v217 = v396[24];
  v408 = &v209[v217];
  uint64_t v218 = v396[28];
  v409 = &v209[v218];
  uint64_t v219 = v396[32];
  uint64_t v412 = &v209[v219];
  uint64_t v220 = v396[36];
  uint64_t v413 = &v209[v220];
  uint64_t v221 = &v424[v213];
  v421 = &v424[v213];
  uint64_t v222 = &v424[v214];
  uint64_t v417 = &v424[v214];
  v223 = &v424[v215];
  uint64_t v416 = &v424[v215];
  v224 = &v424[v217];
  v422 = &v424[v217];
  v225 = &v424[v218];
  uint64_t v415 = &v424[v218];
  v427 = &v424[v219];
  v423 = &v424[v220];
  v226 = v430;
  v227 = v410;
  v410();
  ((void (*)(char *, char *, char *))v227)(v221, v405, v226);
  ((void (*)(char *, char *, char *))v227)(v222, v406, v226);
  ((void (*)(char *, char *, char *))v227)(v223, v407, v226);
  ((void (*)(char *, char *, char *))v227)(v224, v408, v226);
  ((void (*)(char *, char *, char *))v227)(v225, v409, v226);
  ((void (*)(char *, char *, char *))v227)(v427, v412, v226);
  ((void (*)(char *, char *, char *))v227)(v423, v413, v226);
  uint64_t v228 = v212[12];
  v229 = &v216[v228];
  uint64_t v230 = v212[16];
  v393 = &v216[v230];
  uint64_t v231 = v212[20];
  v400 = &v216[v231];
  uint64_t v232 = v212[24];
  uint64_t v404 = &v216[v232];
  uint64_t v233 = v212[28];
  v406 = &v216[v233];
  uint64_t v234 = v212[32];
  uint64_t v407 = &v216[v234];
  uint64_t v235 = v212[36];
  uint64_t v413 = &v216[v235];
  v236 = v428;
  uint64_t v237 = &v428[v228];
  uint64_t v412 = &v428[v228];
  v238 = &v428[v230];
  v409 = &v428[v230];
  uint64_t v239 = &v428[v231];
  v408 = &v428[v231];
  uint64_t v240 = &v428[v232];
  v395 = &v428[v233];
  v401 = &v428[v234];
  v405 = &v428[v235];
  ((void (*)(char *, char *, char *))v227)(v428, v216, v226);
  ((void (*)(char *, char *, char *))v227)(v237, v229, v226);
  ((void (*)(char *, char *, char *))v227)(v238, v393, v226);
  ((void (*)(char *, char *, char *))v227)(v239, v400, v226);
  uint64_t v241 = v240;
  uint64_t v242 = v426;
  ((void (*)(char *, char *, char *))v227)(v240, v404, v226);
  uint64_t v243 = v395;
  ((void (*)(char *, char *, char *))v227)(v395, v406, v226);
  uint64_t v244 = v401;
  ((void (*)(char *, char *, char *))v227)(v401, v407, v226);
  uint64_t v245 = v405;
  ((void (*)(char *, char *, char *))v227)(v405, v413, v226);
  uint64_t v246 = v241;
  LODWORD(v413) = sub_1B6E31708();
  uint64_t v247 = v414;
  ((void (*)(char *, uint64_t))v414)(v216, v242);
  ((void (*)(char *, uint64_t))v247)(v420, v242);
  v248 = v429;
  ((void (*)(char *, char *))v429)(v245, v226);
  ((void (*)(char *, char *))v248)(v244, v226);
  ((void (*)(char *, char *))v248)(v243, v226);
  uint64_t v132 = v432;
  ((void (*)(char *, char *))v248)(v246, v226);
  ((void (*)(char *, char *))v248)(v408, v226);
  ((void (*)(char *, char *))v248)(v409, v226);
  ((void (*)(char *, char *))v248)(v412, v226);
  ((void (*)(char *, char *))v248)(v236, v226);
  ((void (*)(char *, char *))v248)(v423, v226);
  ((void (*)(char *, char *))v248)(v427, v226);
  ((void (*)(char *, char *))v248)(v415, v226);
  ((void (*)(char *, char *))v248)(v422, v226);
  ((void (*)(char *, char *))v248)(v416, v226);
  ((void (*)(char *, char *))v248)(v417, v226);
  ((void (*)(char *, char *))v248)(v421, v226);
  ((void (*)(char *, char *))v248)(v424, v226);
  v249 = v419;
  v250 = v434;
  ((void (*)(char *, char *, uint64_t))v434)(v419, v132, v242);
  v251 = v402;
  uint64_t v93 = v242;
  ((void (*)(char *, char *, uint64_t))v250)(v402, v435, v242);
  if ((v413 & 1) == 0)
  {
    v380 = v398;
    v377 = v249;
    v364 = v414;
    ((void (*)(char *, uint64_t))v414)(v251, v242);
    goto LABEL_14;
  }
  v252 = v396;
  uint64_t v253 = v396[12];
  v406 = &v249[v253];
  uint64_t v254 = v396[16];
  uint64_t v407 = &v249[v254];
  uint64_t v255 = v396[20];
  v408 = &v249[v255];
  uint64_t v256 = v396[24];
  v409 = &v249[v256];
  uint64_t v257 = v396[28];
  uint64_t v412 = &v249[v257];
  uint64_t v258 = v396[32];
  uint64_t v413 = &v249[v258];
  uint64_t v259 = v396[36];
  uint64_t v415 = &v249[v259];
  uint64_t v260 = &v424[v253];
  v422 = &v424[v253];
  uint64_t v261 = &v424[v254];
  v421 = &v424[v254];
  uint64_t v262 = &v424[v255];
  uint64_t v420 = &v424[v255];
  uint64_t v263 = &v424[v256];
  uint64_t v417 = &v424[v256];
  v423 = &v424[v257];
  v264 = v251;
  v265 = &v424[v258];
  uint64_t v416 = &v424[v258];
  v427 = &v424[v259];
  v266 = v430;
  v267 = v410;
  v410();
  ((void (*)(char *, char *, char *))v267)(v260, v406, v266);
  ((void (*)(char *, char *, char *))v267)(v261, v407, v266);
  ((void (*)(char *, char *, char *))v267)(v262, v408, v266);
  ((void (*)(char *, char *, char *))v267)(v263, v409, v266);
  ((void (*)(char *, char *, char *))v267)(v423, v412, v266);
  ((void (*)(char *, char *, char *))v267)(v265, v413, v266);
  ((void (*)(char *, char *, char *))v267)(v427, v415, v266);
  uint64_t v268 = v252[12];
  v395 = &v264[v268];
  uint64_t v269 = v252[16];
  v397 = &v264[v269];
  uint64_t v270 = v252[20];
  v400 = &v264[v270];
  uint64_t v271 = v252[24];
  uint64_t v404 = &v264[v271];
  uint64_t v272 = v252[28];
  v406 = &v264[v272];
  uint64_t v273 = v252[32];
  uint64_t v407 = &v264[v273];
  uint64_t v274 = v252[36];
  uint64_t v415 = &v264[v274];
  v275 = v428;
  v276 = &v428[v268];
  uint64_t v413 = &v428[v268];
  uint64_t v277 = &v428[v269];
  uint64_t v412 = &v428[v269];
  v278 = &v428[v270];
  v409 = &v428[v270];
  v279 = &v428[v271];
  v408 = &v428[v271];
  v280 = &v428[v272];
  v401 = &v428[v273];
  v405 = &v428[v274];
  ((void (*)(char *, char *, char *))v267)(v428, v264, v266);
  ((void (*)(char *, char *, char *))v267)(v276, v395, v266);
  ((void (*)(char *, char *, char *))v267)(v277, v397, v266);
  ((void (*)(char *, char *, char *))v267)(v278, v400, v266);
  v281 = v279;
  uint64_t v282 = v426;
  ((void (*)(char *, char *, char *))v267)(v281, v404, v266);
  ((void (*)(char *, char *, char *))v267)(v280, v406, v266);
  uint64_t v283 = v401;
  ((void (*)(char *, char *, char *))v267)(v401, v407, v266);
  uint64_t v284 = v405;
  ((void (*)(char *, char *, char *))v267)(v405, v415, v266);
  uint64_t v285 = v423;
  LODWORD(v415) = sub_1B6E31708();
  uint64_t v286 = v414;
  ((void (*)(char *, uint64_t))v414)(v264, v282);
  ((void (*)(char *, uint64_t))v286)(v419, v282);
  uint64_t v287 = v429;
  ((void (*)(char *, char *))v429)(v284, v266);
  ((void (*)(char *, char *))v287)(v283, v266);
  ((void (*)(char *, char *))v287)(v280, v266);
  ((void (*)(char *, char *))v287)(v408, v266);
  ((void (*)(char *, char *))v287)(v409, v266);
  ((void (*)(char *, char *))v287)(v412, v266);
  ((void (*)(char *, char *))v287)(v413, v266);
  ((void (*)(char *, char *))v287)(v275, v266);
  ((void (*)(char *, char *))v287)(v427, v266);
  ((void (*)(char *, char *))v287)(v416, v266);
  ((void (*)(char *, char *))v287)(v285, v266);
  ((void (*)(char *, char *))v287)(v417, v266);
  ((void (*)(char *, char *))v287)(v420, v266);
  ((void (*)(char *, char *))v287)(v421, v266);
  ((void (*)(char *, char *))v287)(v422, v266);
  uint64_t v132 = v432;
  ((void (*)(char *, char *))v287)(v424, v266);
  uint64_t v288 = v418;
  ((void (*)(char *, char *, uint64_t))v434)(v418, v132, v282);
  uint64_t v289 = v403;
  uint64_t v93 = v282;
  ((void (*)(char *, char *, uint64_t))v434)(v403, v435, v282);
  if ((v415 & 1) == 0)
  {
    uint64_t v328 = v399;
    v380 = v398;
    v364 = v414;
    ((void (*)(char *, uint64_t))v414)(v289, v282);
    goto LABEL_15;
  }
  uint64_t v290 = v396;
  uint64_t v291 = v396[12];
  uint64_t v407 = &v288[v291];
  uint64_t v292 = v396[16];
  v408 = &v288[v292];
  uint64_t v293 = v396[20];
  v409 = &v288[v293];
  uint64_t v294 = v396[24];
  uint64_t v412 = &v288[v294];
  uint64_t v295 = v396[28];
  uint64_t v413 = &v288[v295];
  uint64_t v296 = v396[32];
  uint64_t v415 = &v288[v296];
  uint64_t v297 = v396[36];
  uint64_t v416 = &v288[v297];
  v298 = &v424[v291];
  v422 = &v424[v291];
  v299 = &v424[v292];
  v421 = &v424[v292];
  uint64_t v300 = &v424[v293];
  uint64_t v420 = &v424[v293];
  uint64_t v301 = &v424[v294];
  uint64_t v419 = &v424[v294];
  uint64_t v302 = &v424[v295];
  uint64_t v417 = &v424[v295];
  v427 = &v424[v296];
  v423 = &v424[v297];
  uint64_t v303 = v430;
  v304 = v410;
  v410();
  ((void (*)(char *, char *, char *))v304)(v298, v407, v303);
  ((void (*)(char *, char *, char *))v304)(v299, v408, v303);
  ((void (*)(char *, char *, char *))v304)(v300, v409, v303);
  ((void (*)(char *, char *, char *))v304)(v301, v412, v303);
  ((void (*)(char *, char *, char *))v304)(v302, v413, v303);
  ((void (*)(char *, char *, char *))v304)(v427, v415, v303);
  ((void (*)(char *, char *, char *))v304)(v423, v416, v303);
  uint64_t v305 = v290[12];
  v400 = &v289[v305];
  uint64_t v306 = v290[16];
  v401 = &v289[v306];
  uint64_t v307 = v290[20];
  uint64_t v404 = &v289[v307];
  uint64_t v308 = v290[24];
  v405 = &v289[v308];
  uint64_t v309 = v290[28];
  uint64_t v407 = &v289[v309];
  uint64_t v310 = v290[32];
  v408 = &v289[v310];
  uint64_t v311 = v290[36];
  uint64_t v416 = &v289[v311];
  v312 = v428;
  v313 = &v428[v305];
  uint64_t v415 = &v428[v305];
  v314 = &v428[v306];
  uint64_t v413 = &v428[v306];
  v315 = &v428[v307];
  uint64_t v412 = &v428[v307];
  uint64_t v316 = &v428[v308];
  v409 = &v428[v308];
  v402 = &v428[v309];
  v317 = &v428[v310];
  v406 = &v428[v311];
  ((void (*)(char *, char *, char *))v304)(v428, v289, v303);
  ((void (*)(char *, char *, char *))v304)(v313, v400, v303);
  ((void (*)(char *, char *, char *))v304)(v314, v401, v303);
  ((void (*)(char *, char *, char *))v304)(v315, v404, v303);
  v318 = v316;
  uint64_t v319 = v426;
  ((void (*)(char *, char *, char *))v304)(v318, v405, v303);
  v320 = v402;
  ((void (*)(char *, char *, char *))v304)(v402, v407, v303);
  ((void (*)(char *, char *, char *))v304)(v317, v408, v303);
  v321 = v406;
  ((void (*)(char *, char *, char *))v304)(v406, v416, v303);
  LODWORD(v416) = sub_1B6E31708();
  v322 = v414;
  ((void (*)(char *, uint64_t))v414)(v289, v319);
  ((void (*)(char *, uint64_t))v322)(v418, v319);
  v323 = v429;
  ((void (*)(char *, char *))v429)(v321, v303);
  ((void (*)(char *, char *))v323)(v317, v303);
  ((void (*)(char *, char *))v323)(v320, v303);
  ((void (*)(char *, char *))v323)(v409, v303);
  ((void (*)(char *, char *))v323)(v412, v303);
  ((void (*)(char *, char *))v323)(v413, v303);
  ((void (*)(char *, char *))v323)(v415, v303);
  ((void (*)(char *, char *))v323)(v312, v303);
  ((void (*)(char *, char *))v323)(v423, v303);
  ((void (*)(char *, char *))v323)(v427, v303);
  ((void (*)(char *, char *))v323)(v417, v303);
  ((void (*)(char *, char *))v323)(v419, v303);
  ((void (*)(char *, char *))v323)(v420, v303);
  ((void (*)(char *, char *))v323)(v421, v303);
  ((void (*)(char *, char *))v323)(v422, v303);
  ((void (*)(char *, char *))v323)(v424, v303);
  v324 = v399;
  v325 = v434;
  ((void (*)(char *, char *, uint64_t))v434)(v399, v432, v319);
  uint64_t v326 = v398;
  uint64_t v93 = v319;
  uint64_t v327 = v319;
  uint64_t v328 = v324;
  ((void (*)(char *, char *, uint64_t))v325)(v398, v435, v327);
  if ((v416 & 1) == 0)
  {
    v364 = v322;
    ((void (*)(char *, uint64_t))v322)(v326, v93);
    goto LABEL_16;
  }
  uint64_t v329 = v396;
  uint64_t v330 = v396[12];
  uint64_t v413 = &v324[v330];
  uint64_t v331 = v396[16];
  uint64_t v332 = v324;
  uint64_t v415 = &v324[v331];
  uint64_t v333 = v396[20];
  uint64_t v416 = &v324[v333];
  uint64_t v334 = v396[24];
  uint64_t v417 = &v324[v334];
  uint64_t v335 = v396[28];
  uint64_t v418 = &v324[v335];
  uint64_t v336 = v396[32];
  uint64_t v419 = &v324[v336];
  uint64_t v337 = v396[36];
  uint64_t v420 = &v324[v337];
  v338 = &v424[v330];
  v427 = &v424[v330];
  v339 = &v424[v331];
  v423 = &v424[v331];
  v340 = &v424[v333];
  v422 = &v424[v333];
  v341 = &v424[v334];
  v421 = &v424[v334];
  uint64_t v434 = &v424[v335];
  uint64_t v432 = &v424[v336];
  uint64_t v435 = &v424[v337];
  uint64_t v342 = v430;
  uint64_t v343 = v410;
  v410();
  ((void (*)(char *, char *, char *))v343)(v338, v413, v342);
  ((void (*)(char *, char *, char *))v343)(v339, v415, v342);
  ((void (*)(char *, char *, char *))v343)(v340, v416, v342);
  ((void (*)(char *, char *, char *))v343)(v341, v417, v342);
  ((void (*)(char *, char *, char *))v343)(v434, v418, v342);
  ((void (*)(char *, char *, char *))v343)(v432, v419, v342);
  ((void (*)(char *, char *, char *))v343)(v435, v420, v342);
  uint64_t v344 = v329[12];
  uint64_t v404 = &v326[v344];
  uint64_t v345 = v329[16];
  v406 = &v326[v345];
  uint64_t v346 = v329[20];
  uint64_t v407 = &v326[v346];
  uint64_t v347 = v329[24];
  v409 = &v326[v347];
  uint64_t v348 = v329[28];
  uint64_t v413 = &v326[v348];
  uint64_t v349 = v329[32];
  uint64_t v416 = &v326[v349];
  uint64_t v350 = v329[36];
  uint64_t v417 = &v326[v350];
  v351 = v428;
  v352 = &v428[v344];
  uint64_t v420 = &v428[v344];
  v353 = &v428[v345];
  uint64_t v419 = &v428[v345];
  v354 = &v428[v346];
  uint64_t v418 = &v428[v346];
  v405 = &v428[v347];
  v355 = &v428[v348];
  uint64_t v415 = &v428[v348];
  v408 = &v428[v349];
  uint64_t v412 = &v428[v350];
  ((void (*)(char *, char *, char *))v343)(v428, v326, v342);
  ((void (*)(char *, char *, char *))v343)(v352, v404, v342);
  ((void (*)(char *, char *, char *))v343)(v353, v406, v342);
  ((void (*)(char *, char *, char *))v343)(v354, v407, v342);
  v356 = v405;
  ((void (*)(char *, char *, char *))v343)(v405, v409, v342);
  ((void (*)(char *, char *, char *))v343)(v355, v413, v342);
  v357 = v408;
  ((void (*)(char *, char *, char *))v343)(v408, v416, v342);
  v358 = v412;
  ((void (*)(char *, char *, char *))v343)(v412, v417, v342);
  char v359 = sub_1B6E31708();
  v360 = v326;
  uint64_t v361 = v426;
  v362 = v414;
  ((void (*)(char *, uint64_t))v414)(v360, v426);
  ((void (*)(char *, uint64_t))v362)(v332, v361);
  v363 = v429;
  ((void (*)(char *, char *))v429)(v358, v342);
  ((void (*)(char *, char *))v363)(v357, v342);
  ((void (*)(char *, char *))v363)(v415, v342);
  ((void (*)(char *, char *))v363)(v356, v342);
  ((void (*)(char *, char *))v363)(v418, v342);
  ((void (*)(char *, char *))v363)(v419, v342);
  ((void (*)(char *, char *))v363)(v420, v342);
  ((void (*)(char *, char *))v363)(v351, v342);
  ((void (*)(char *, char *))v363)(v435, v342);
  ((void (*)(char *, char *))v363)(v432, v342);
  ((void (*)(char *, char *))v363)(v434, v342);
  ((void (*)(char *, char *))v363)(v421, v342);
  ((void (*)(char *, char *))v363)(v422, v342);
  ((void (*)(char *, char *))v363)(v423, v342);
  ((void (*)(char *, char *))v363)(v427, v342);
  ((void (*)(char *, char *))v363)(v424, v342);
  return v359 & 1;
}

uint64_t sub_1B6D71884(uint64_t a1, uint64_t a2)
{
  return sub_1B6D76270(a1, *(void *)(a2 - 8), (void (*)(unsigned char *, uint64_t, uint64_t))sub_1B6D6DDFC);
}

uint64_t sub_1B6D718B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D6DDFC(a1, a2, *(void *)(a3 - 8));
}

uint64_t sub_1B6D718BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D76330(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))sub_1B6D6DDFC);
}

uint64_t sub_1B6D718D4@<X0>(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, int *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char *a11, char *a12)
{
  uint64_t v85 = a7;
  char v86 = a8;
  uint64_t v82 = a6;
  long long v81 = a5;
  long long v80 = a4;
  uint64_t v79 = a3;
  uint64_t v78 = a2;
  uint64_t v77 = a1;
  uint64_t v94 = a9;
  uint64_t v84 = a12;
  long long v83 = a11;
  uint64_t v98 = a10;
  uint64_t v99 = a10;
  uint64_t v100 = a10;
  uint64_t v101 = a10;
  uint64_t v102 = a10;
  uint64_t v103 = a10;
  uint64_t v104 = a10;
  uint64_t v105 = a10;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v13 = (int *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata, v14);
  uint64_t v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19.n128_f64[0] = MEMORY[0x1F4188790](v17, v18);
  uint64_t v22 = (char *)&v77 + v13[18] - v20;
  uint64_t v90 = (char *)&v77 + v13[14] - v20;
  uint64_t v21 = v90;
  uint64_t v91 = v22;
  uint64_t v24 = (char *)&v77 + v13[26] - v20;
  uint64_t v92 = (char *)&v77 + v13[22] - v20;
  uint64_t v23 = v92;
  uint64_t v93 = v24;
  uint64_t v97 = (char *)&v77 + v13[30] - v20;
  uint64_t v95 = (char *)&v77 + v13[34] - v20;
  uint64_t v96 = (char *)&v77 + v13[38] - v20;
  uint64_t v25 = *(void **)(a10 - 8);
  uint64_t v26 = (void (*)(uint64_t, char *, uint64_t))v25[4];
  uint64_t v87 = v25 + 4;
  float v88 = v26;
  uint64_t v89 = (char *)&v77 - v20;
  ((void (*)(char *, char *, uint64_t, __n128))v26)((char *)&v77 - v20, v77, a10, v19);
  v26((uint64_t)v21, v78, a10);
  v26((uint64_t)v22, v79, a10);
  v26((uint64_t)v23, v80, a10);
  v26((uint64_t)v24, v81, a10);
  v26((uint64_t)v97, v82, a10);
  v26((uint64_t)v95, v85, a10);
  v26((uint64_t)v96, (char *)v86, a10);
  uint64_t v82 = &v16[v13[14]];
  uint64_t v27 = v82;
  char v86 = (int *)&v16[v13[18]];
  long long v81 = &v16[v13[22]];
  uint64_t v28 = v81;
  uint64_t v85 = &v16[v13[26]];
  uint64_t v29 = &v16[v13[30]];
  uint64_t v30 = &v16[v13[34]];
  long long v80 = &v16[v13[38]];
  uint64_t v31 = (void (*)(char *, char *, uint64_t))v25[2];
  v31(v16, v89, a10);
  v31(v27, v90, a10);
  v31((char *)v86, v91, a10);
  v31(v28, v92, a10);
  v31(v85, v93, a10);
  v31(v29, v97, a10);
  v31(v30, v95, a10);
  uint64_t v32 = v80;
  v31(v80, v96, a10);
  v88(v94, v16, a10);
  uint64_t v33 = (void (*)(char *, uint64_t))v25[1];
  v33(v32, a10);
  v33(v30, a10);
  v33(v29, a10);
  v33(v85, a10);
  v33(v81, a10);
  v33((char *)v86, a10);
  v33(v82, a10);
  long long v80 = &v16[v13[14]];
  uint64_t v34 = v80;
  uint64_t v82 = &v16[v13[18]];
  uint64_t v35 = v82;
  uint64_t v85 = &v16[v13[22]];
  long long v81 = &v16[v13[26]];
  uint64_t v36 = v81;
  uint64_t v77 = &v16[v13[30]];
  uint64_t v78 = &v16[v13[34]];
  uint64_t v79 = &v16[v13[38]];
  v31(v16, v89, a10);
  v31(v34, v90, a10);
  v31(v35, v91, a10);
  v31(v85, v92, a10);
  v31(v36, v93, a10);
  uint64_t v37 = v77;
  v31(v77, v97, a10);
  uint64_t v38 = v78;
  v31(v78, v95, a10);
  uint64_t v39 = v79;
  v31(v79, v96, a10);
  char v86 = (int *)type metadata accessor for __FixedArrayCodableStorage8();
  v88(v94 + v86[11], v80, a10);
  v33(v39, a10);
  v33(v38, a10);
  v33(v37, a10);
  v33(v81, a10);
  v33(v85, a10);
  v33(v82, a10);
  v33(v16, a10);
  uint64_t v84 = &v16[v13[14]];
  uint64_t v40 = v84;
  long long v80 = &v16[v13[18]];
  uint64_t v41 = v80;
  uint64_t v85 = &v16[v13[22]];
  long long v83 = &v16[v13[26]];
  uint64_t v42 = v83;
  uint64_t v79 = &v16[v13[30]];
  long long v81 = &v16[v13[34]];
  uint64_t v82 = &v16[v13[38]];
  v31(v16, v89, a10);
  v31(v40, v90, a10);
  v31(v41, v91, a10);
  v31(v85, v92, a10);
  v31(v42, v93, a10);
  uint64_t v43 = v79;
  v31(v79, v97, a10);
  uint64_t v44 = v81;
  v31(v81, v95, a10);
  uint64_t v45 = v82;
  v31(v82, v96, a10);
  v88(v94 + v86[12], v80, a10);
  v33(v45, a10);
  v33(v44, a10);
  v33(v43, a10);
  v33(v83, a10);
  v33(v85, a10);
  v33(v84, a10);
  v33(v16, a10);
  long long v83 = &v16[v13[14]];
  uint64_t v46 = v83;
  uint64_t v85 = &v16[v13[18]];
  uint64_t v47 = &v16[v13[22]];
  uint64_t v82 = &v16[v13[26]];
  uint64_t v48 = v82;
  uint64_t v84 = &v16[v13[30]];
  long long v80 = &v16[v13[34]];
  long long v81 = &v16[v13[38]];
  v31(v16, v89, a10);
  v31(v46, v90, a10);
  v31(v85, v91, a10);
  uint64_t v49 = v47;
  v31(v47, v92, a10);
  v31(v48, v93, a10);
  v31(v84, v97, a10);
  uint64_t v50 = v80;
  v31(v80, v95, a10);
  uint64_t v51 = v81;
  v31(v81, v96, a10);
  v88(v94 + v86[13], v49, a10);
  v33(v51, a10);
  v33(v50, a10);
  v33(v84, a10);
  v33(v82, a10);
  v33(v85, a10);
  v33(v83, a10);
  v33(v16, a10);
  long long v83 = &v16[v13[14]];
  uint64_t v52 = v83;
  uint64_t v85 = &v16[v13[18]];
  uint64_t v82 = &v16[v13[22]];
  __n128 v53 = v82;
  uint64_t v54 = &v16[v13[26]];
  uint64_t v84 = &v16[v13[30]];
  long long v80 = &v16[v13[34]];
  long long v81 = &v16[v13[38]];
  v31(v16, v89, a10);
  v31(v52, v90, a10);
  v31(v85, v91, a10);
  v31(v53, v92, a10);
  uint64_t v55 = v54;
  v31(v54, v93, a10);
  v31(v84, v97, a10);
  uint64_t v56 = v80;
  v31(v80, v95, a10);
  uint64_t v57 = v81;
  v31(v81, v96, a10);
  v88(v94 + v86[14], v55, a10);
  v33(v57, a10);
  v33(v56, a10);
  v33(v84, a10);
  v33(v82, a10);
  v33(v85, a10);
  v33(v83, a10);
  v33(v16, a10);
  long long v83 = &v16[v13[14]];
  uint64_t v58 = v83;
  uint64_t v85 = &v16[v13[18]];
  uint64_t v82 = &v16[v13[22]];
  uint64_t v59 = v82;
  uint64_t v84 = &v16[v13[26]];
  uint64_t v60 = &v16[v13[30]];
  long long v80 = &v16[v13[34]];
  long long v81 = &v16[v13[38]];
  v31(v16, v89, a10);
  v31(v58, v90, a10);
  v31(v85, v91, a10);
  v31(v59, v92, a10);
  v31(v84, v93, a10);
  v31(v60, v97, a10);
  uint64_t v61 = v80;
  v31(v80, v95, a10);
  uint64_t v62 = v81;
  v31(v81, v96, a10);
  v88(v94 + v86[15], v60, a10);
  v33(v62, a10);
  v33(v61, a10);
  v33(v84, a10);
  v33(v82, a10);
  v33(v85, a10);
  v33(v83, a10);
  v33(v16, a10);
  uint64_t v84 = &v16[v13[14]];
  uint64_t v63 = v84;
  long long v83 = &v16[v13[18]];
  uint64_t v64 = v83;
  uint64_t v85 = &v16[v13[22]];
  long long v81 = &v16[v13[26]];
  uint64_t v65 = v81;
  uint64_t v79 = &v16[v13[30]];
  long long v80 = &v16[v13[34]];
  uint64_t v82 = &v16[v13[38]];
  v31(v16, v89, a10);
  v31(v63, v90, a10);
  v31(v64, v91, a10);
  v31(v85, v92, a10);
  v31(v65, v93, a10);
  uint64_t v66 = v79;
  v31(v79, v97, a10);
  unsigned __int32 v67 = v80;
  v31(v80, v95, a10);
  uint64_t v68 = v82;
  v31(v82, v96, a10);
  uint64_t v69 = (void (*)(char *, char *, uint64_t))v88;
  v88(v94 + v86[16], v67, a10);
  v33(v68, a10);
  v33(v66, a10);
  v33(v81, a10);
  v33(v85, a10);
  v33(v83, a10);
  v33(v84, a10);
  v33(v16, a10);
  uint64_t v84 = &v16[v13[14]];
  uint64_t v70 = v84;
  uint64_t v85 = &v16[v13[18]];
  long long v83 = &v16[v13[22]];
  uint64_t v71 = v83;
  uint64_t v72 = &v16[v13[26]];
  long long v81 = &v16[v13[30]];
  uint64_t v82 = &v16[v13[34]];
  uint64_t v73 = &v16[v13[38]];
  v69(v16, v89, a10);
  v69(v70, v90, a10);
  v69(v85, v91, a10);
  v69(v71, v92, a10);
  v69(v72, v93, a10);
  uint64_t v74 = v81;
  v69(v81, v97, a10);
  uint64_t v75 = v82;
  v69(v82, v95, a10);
  v69(v73, v96, a10);
  v69((char *)(v94 + v86[17]), v73, a10);
  v33(v75, a10);
  v33(v74, a10);
  v33(v72, a10);
  v33(v83, a10);
  v33(v85, a10);
  v33(v84, a10);
  return ((uint64_t (*)(char *, uint64_t))v33)(v16, a10);
}

uint64_t sub_1B6D72B30(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 3170143 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 3235679 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 3301215 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 3366751 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 3432287 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 3497823 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 3563359 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 3628895 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

unint64_t sub_1B6D72DB0(unsigned __int8 a1)
{
  return ((unint64_t)a1 << 16) + 3170143;
}

uint64_t sub_1B6D72DC8(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  v11[0] = a2;
  v11[1] = v3;
  type metadata accessor for __FixedArrayCodableStorage8.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_1B6E33038();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A88();
  char v19 = 0;
  uint64_t v9 = v11[3];
  sub_1B6E32FA8();
  if (!v9)
  {
    char v18 = 1;
    sub_1B6E32FA8();
    char v17 = 2;
    sub_1B6E32FA8();
    char v16 = 3;
    sub_1B6E32FA8();
    char v15 = 4;
    sub_1B6E32FA8();
    char v14 = 5;
    sub_1B6E32FA8();
    char v13 = 6;
    sub_1B6E32FA8();
    char v12 = 7;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D730D4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a4;
  uint64_t v76 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v60 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v61 = (char *)&v56 - v10;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v62 = (char *)&v56 - v13;
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v63 = (char *)&v56 - v16;
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v64 = (char *)&v56 - v19;
  MEMORY[0x1F4188790](v20, v21);
  unsigned __int32 v67 = (char *)&v56 - v22;
  MEMORY[0x1F4188790](v23, v24);
  uint64_t v66 = (char *)&v56 - v25;
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v69 = (char *)&v56 - v28;
  type metadata accessor for __FixedArrayCodableStorage8.CodingKeys();
  swift_getWitnessTable();
  uint64_t v71 = sub_1B6E32EA8();
  uint64_t v65 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71, v29);
  uint64_t v31 = (char *)&v56 - v30;
  uint64_t v68 = a3;
  uint64_t v74 = (int *)type metadata accessor for __FixedArrayCodableStorage8();
  uint64_t v32 = *((void *)v74 - 1);
  MEMORY[0x1F4188790](v74, v33);
  uint64_t v75 = (char *)&v56 - v34;
  uint64_t v35 = a1[3];
  uint64_t v72 = a1;
  sub_1B62C14BC(a1, v35);
  uint64_t v70 = v31;
  uint64_t v36 = v73;
  sub_1B6E33A48();
  if (v36) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v72);
  }
  uint64_t v38 = v66;
  uint64_t v37 = v67;
  uint64_t v58 = v32;
  char v84 = 0;
  uint64_t v39 = v69;
  sub_1B6E32DF8();
  uint64_t v40 = v75;
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
  v57(v75, v39, a2);
  char v83 = 1;
  sub_1B6E32DF8();
  uint64_t v41 = v38;
  uint64_t v42 = v57;
  v57(&v40[v74[11]], v41, a2);
  char v82 = 2;
  sub_1B6E32DF8();
  v42(&v75[v74[12]], v37, a2);
  char v81 = 3;
  uint64_t v43 = v64;
  sub_1B6E32DF8();
  uint64_t v44 = (uint64_t)v72;
  uint64_t v45 = v43;
  uint64_t v46 = v57;
  v57(&v75[v74[13]], v45, a2);
  char v80 = 4;
  uint64_t v47 = v63;
  sub_1B6E32DF8();
  LODWORD(v69) = 1;
  v46(&v75[v74[14]], v47, a2);
  char v79 = 5;
  uint64_t v48 = v62;
  sub_1B6E32DF8();
  v46(&v75[v74[15]], v48, a2);
  char v78 = 6;
  uint64_t v49 = v61;
  sub_1B6E32DF8();
  v46(&v75[v74[16]], v49, a2);
  char v77 = 7;
  uint64_t v50 = v60;
  sub_1B6E32DF8();
  uint64_t v73 = 0;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v71);
  uint64_t v51 = v74;
  uint64_t v52 = v50;
  __n128 v53 = v75;
  v46(&v75[v74[17]], v52, a2);
  uint64_t v54 = v58;
  (*(void (**)(uint64_t, char *, int *))(v58 + 16))(v59, v53, v51);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v44);
  return (*(uint64_t (**)(char *, int *))(v54 + 8))(v53, v51);
}

uint64_t sub_1B6D73AA8()
{
  swift_getWitnessTable();

  return sub_1B6B37010();
}

uint64_t sub_1B6D73B14()
{
  return sub_1B6916F28();
}

uint64_t sub_1B6D73B38()
{
  return sub_1B6916F00();
}

uint64_t sub_1B6D73B48(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1B6D79490(a1, a2, a3, (void (*)(unsigned char *, void, void, void, void))sub_1B6916F00);
}

unint64_t sub_1B6D73B60()
{
  return sub_1B6D72DB0(*v0);
}

uint64_t sub_1B6D73B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D72B30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D73BA4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B666F160();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D73BD8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1B6D73C2C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t sub_1B6D73C80@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B6D730D4(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_1B6D73CA4(void *a1, uint64_t a2)
{
  return sub_1B6D72DC8(a1, a2);
}

uint64_t sub_1B6D73CBC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v25 = type metadata accessor for __FixedArrayCodableStorage8();
  MEMORY[0x1F4188790](v25, v6);
  uint64_t v35 = (char *)&v19 - v7;
  uint64_t v8 = type metadata accessor for FixedArray8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v19 - v11;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A28();
  if (!v3)
  {
    uint64_t v21 = v12;
    uint64_t v22 = v9;
    uint64_t v23 = v8;
    sub_1B62C14BC(v34, v34[3]);
    uint64_t v13 = (int *)v25;
    swift_getWitnessTable();
    uint64_t v14 = v35;
    sub_1B6E33518();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(a2 - 8) + 32);
    uint64_t v16 = v21;
    v15(v21, v14, a2);
    uint64_t v20 = &v14[v13[11]];
    uint64_t v26 = a2;
    uint64_t v27 = a2;
    uint64_t v28 = a2;
    uint64_t v29 = a2;
    uint64_t v30 = a2;
    uint64_t v31 = a2;
    uint64_t v32 = a2;
    uint64_t v33 = a2;
    uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v15(&v16[TupleTypeMetadata[12]], v20, a2);
    v15(&v16[TupleTypeMetadata[16]], &v14[v13[12]], a2);
    v15(&v16[TupleTypeMetadata[20]], &v14[v13[13]], a2);
    v15(&v16[TupleTypeMetadata[24]], &v14[v13[14]], a2);
    v15(&v16[TupleTypeMetadata[28]], &v14[v13[15]], a2);
    v15(&v16[TupleTypeMetadata[32]], &v14[v13[16]], a2);
    v15(&v16[TupleTypeMetadata[36]], &v14[v13[17]], a2);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v24, v16, v23);
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B6D73FF4(void *a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v47 = a4;
  uint64_t v48 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  v50[1] = v6;
  v50[2] = v6;
  uint64_t v51 = v6;
  uint64_t v52 = v6;
  uint64_t v53 = v6;
  uint64_t v54 = v6;
  uint64_t v55 = v6;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v8 = (int *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata, v9);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v46 = type metadata accessor for __FixedArrayCodableStorage8();
  uint64_t v49 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46, v12);
  uint64_t v45 = (uint64_t)&v34 - v13;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  uint64_t v14 = v8[14];
  uint64_t v56 = &v11[v14];
  uint64_t v15 = v8[18];
  uint64_t v16 = &v11[v15];
  uint64_t v39 = &v11[v15];
  uint64_t v17 = v8[22];
  uint64_t v37 = &v11[v17];
  uint64_t v18 = v8[26];
  uint64_t v40 = &v11[v18];
  uint64_t v19 = v8[30];
  uint64_t v42 = &v11[v19];
  uint64_t v20 = v8[34];
  uint64_t v21 = &v11[v20];
  uint64_t v22 = v8[38];
  uint64_t v44 = (int *)&v11[v22];
  uint64_t v23 = v4 + v14;
  uint64_t v24 = v4 + v15;
  uint64_t v35 = v4 + v17;
  uint64_t v36 = v4 + v18;
  uint64_t v38 = v4 + v19;
  uint64_t v41 = v4 + v20;
  uint64_t v43 = v4 + v22;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v25(v11, v4, v6);
  v25(v56, v23, v6);
  v25(v16, v24, v6);
  uint64_t v26 = v37;
  v25(v37, v35, v6);
  uint64_t v27 = v40;
  v25(v40, v36, v6);
  uint64_t v28 = v42;
  v25(v42, v38, v6);
  v25(v21, v41, v6);
  uint64_t v29 = v44;
  v25((char *)v44, v43, v6);
  uint64_t v33 = v6;
  uint64_t v30 = v45;
  sub_1B6D718D4(v11, v56, v39, v26, v27, v28, v21, v29, v45, v33, v48, v47);
  sub_1B62C550C((uint64_t)v50, v51);
  uint64_t v31 = v46;
  swift_getWitnessTable();
  sub_1B6E335C8();
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v30, v31);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v50);
}

uint64_t sub_1B6D743A0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B6D73CBC(a1, *(void *)(a2 + 16), a3);
}

uint64_t sub_1B6D743C4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D73FF4(a1, a2, *(char **)(a3 - 8), *(char **)(a3 - 16));
}

uint64_t sub_1B6D743E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a3 + 16);
  _DWORD v10[2] = v6;
  v10[3] = v5;
  v10[4] = a1;
  v10[5] = v6;
  int64x2_t v10[6] = v6;
  v10[7] = v6;
  v10[8] = v6;
  v10[9] = v6;
  v10[10] = v6;
  v10[11] = v6;
  v10[12] = v6;
  v10[13] = v6;
  void v10[14] = v6;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  sub_1B6D6C938(v3, (uint64_t)sub_1B6D7A420, (uint64_t)v10, TupleTypeMetadata, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
}

void (*sub_1B6D744C4(void *a1, uint64_t *a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v3;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = malloc(0xB0uLL);
  *a1 = v8;
  uint64_t v9 = *(void *)(a3 + 16);
  v8[10] = v5;
  v8[11] = v9;
  *uint64_t v8 = v9;
  v8[1] = v9;
  v8[2] = v9;
  void v8[3] = v9;
  v8[4] = v9;
  v8[5] = v9;
  void v8[6] = v9;
  v8[7] = v9;
  v8[8] = v9;
  v8[9] = v9;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v8[12] = TupleTypeMetadata;
  uint64_t v54 = *((void *)TupleTypeMetadata - 1);
  size_t v11 = *(void *)(v54 + 64);
  uint64_t v12 = (char *)malloc(v11);
  v8[13] = v12;
  uint64_t v13 = (char *)malloc(v11);
  v8[14] = v13;
  uint64_t v14 = *(void *)(v9 - 8);
  uint64_t v15 = v14;
  v8[15] = v14;
  size_t v16 = *(void *)(v14 + 64);
  uint64_t v52 = (char *)malloc(v16);
  v8[16] = v52;
  uint64_t v53 = (char *)malloc(v16);
  uint64_t v51 = *a2;
  uint64_t v17 = *a2;
  v8[17] = v53;
  v8[18] = v17;
  uint64_t v18 = TupleTypeMetadata[12];
  uint64_t v19 = &v13[v18];
  uint64_t v50 = &v13[v18];
  uint64_t v20 = TupleTypeMetadata[16];
  uint64_t v55 = &v13[v20];
  uint64_t v21 = TupleTypeMetadata[20];
  uint64_t v56 = &v13[v21];
  uint64_t v22 = TupleTypeMetadata[24];
  uint64_t v57 = &v13[v22];
  uint64_t v23 = TupleTypeMetadata[28];
  uint64_t v58 = &v13[v23];
  uint64_t v24 = TupleTypeMetadata[32];
  uint64_t v59 = &v13[v24];
  uint64_t v25 = TupleTypeMetadata[36];
  uint64_t v60 = &v13[v25];
  uint64_t v26 = TupleTypeMetadata[40];
  uint64_t v61 = &v13[v26];
  uint64_t v27 = TupleTypeMetadata[44];
  uint64_t v62 = &v13[v27];
  uint64_t v35 = v5 + v18;
  uint64_t v36 = v5 + v20;
  uint64_t v37 = v5 + v21;
  uint64_t v38 = v5 + v22;
  uint64_t v40 = v5 + v23;
  uint64_t v42 = v5 + v24;
  uint64_t v44 = v5 + v25;
  uint64_t v46 = v5 + v26;
  uint64_t v48 = v5 + v27;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v8[19] = v28;
  v8[20] = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v28(v13, v5, v9);
  v28(v19, v35, v9);
  v28(v55, v36, v9);
  v28(v56, v37, v9);
  v28(v57, v38, v9);
  v28(v58, v40, v9);
  v28(v59, v42, v9);
  v28(v60, v44, v9);
  v28(v61, v46, v9);
  v28(v62, v48, v9);
  uint64_t v29 = &v12[TupleTypeMetadata[12]];
  uint64_t v30 = &v12[TupleTypeMetadata[16]];
  uint64_t v31 = &v12[TupleTypeMetadata[20]];
  uint64_t v39 = &v12[TupleTypeMetadata[24]];
  uint64_t v41 = &v12[TupleTypeMetadata[28]];
  uint64_t v43 = &v12[TupleTypeMetadata[32]];
  uint64_t v45 = &v12[TupleTypeMetadata[36]];
  uint64_t v47 = &v12[TupleTypeMetadata[40]];
  uint64_t v49 = &v12[TupleTypeMetadata[44]];
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v32(v12, v13, v9);
  v32(v29, v50, v9);
  v32(v30, v55, v9);
  v32(v31, v56, v9);
  v32(v39, v57, v9);
  v32(v41, v58, v9);
  v32(v43, v59, v9);
  v32(v45, v60, v9);
  v32(v47, v61, v9);
  v32(v49, v62, v9);
  uint64_t v64 = v9;
  uint64_t v65 = v51;
  sub_1B6B5985C((uint64_t)v12, (uint64_t)sub_1B6D79EF4, (uint64_t)v63, (uint64_t)TupleTypeMetadata, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v33);
  v8[21] = 0;
  (*(void (**)(char *, int *))(v54 + 8))(v12, TupleTypeMetadata);
  v32(v53, v52, v9);
  return sub_1B6D74A14;
}

void sub_1B6D74A14(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void **)a1;
  if (a2)
  {
    uint64_t v3 = (uint64_t (*)(void *, void *, uint64_t))v2[19];
    uint64_t v4 = (void *)v2[17];
    uint64_t v5 = v2[18];
    uint64_t v7 = v2[15];
    uint64_t v6 = (void *)v2[16];
    uint64_t v9 = (void *)v2[13];
    uint64_t v8 = (void *)v2[14];
    v27[1] = *(void *)(*(void *)a1 + 168);
    uint64_t v11 = v2[11];
    uint64_t v10 = v2[12];
    uint64_t v12 = v2[10];
    uint64_t v13 = v3(v6, v4, v11);
    void v27[2] = v27;
    MEMORY[0x1F4188790](v13, v14);
    uint64_t v24 = v11;
    uint64_t v25 = v5;
    uint64_t v26 = v6;
    sub_1B6D6C938(v12, (uint64_t)sub_1B6D7A420, (uint64_t)v23, v10, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v15);
    size_t v16 = *(void (**)(void *, uint64_t))(v7 + 8);
    v16(v6, v11);
    v16(v4, v11);
  }
  else
  {
    uint64_t v4 = (void *)v2[17];
    uint64_t v17 = v2[15];
    uint64_t v6 = (void *)v2[16];
    uint64_t v9 = (void *)v2[13];
    uint64_t v8 = (void *)v2[14];
    uint64_t v18 = v2[11];
    MEMORY[0x1F4188790](v2[10], a2);
    uint64_t v24 = v18;
    uint64_t v25 = v19;
    uint64_t v26 = v4;
    sub_1B6D6C938(v20, (uint64_t)sub_1B6D7A420, (uint64_t)v23, v21, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v22);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v4, v18);
  }
  free(v4);
  free(v6);
  free(v8);
  free(v9);
  free(v2);
}

uint64_t sub_1B6D74BF0(uint64_t a1)
{
  return sub_1B6D74C08(a1);
}

uint64_t sub_1B6D74C08(uint64_t a1)
{
  sub_1B6D7A388();
  swift_getWitnessTable();
  uint64_t v2 = sub_1B6E338D8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1B6D74C9C()
{
  return sub_1B6E316D8();
}

uint64_t sub_1B6D74D1C()
{
  swift_getWitnessTable();

  return sub_1B6E31F58();
}

void *sub_1B6D74D8C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D756D4(a1, a2, a3, (uint64_t)&unk_1B6ECF488, MEMORY[0x1E4FBB618]);
}

uint64_t sub_1B6D74DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1B6D74E3C()
{
  swift_getWitnessTable();

  return sub_1B6E31F38();
}

uint64_t sub_1B6D74EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

void sub_1B6D74F34(void *a1@<X8>)
{
  *a1 = 10;
}

uint64_t (*sub_1B6D74F40(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  void v6[4] = sub_1B6D74FB0(v6, *a2, a3);
  return sub_1B68C8C94;
}

void (*sub_1B6D74FB0(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = malloc(0x80uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[9] = v8;
  v7[10] = v8;
  *uint64_t v7 = v8;
  v7[1] = v8;
  _OWORD v7[2] = v8;
  _OWORD v7[3] = v8;
  double v7[4] = v8;
  v7[5] = v8;
  v7[6] = v8;
  _OWORD v7[7] = v8;
  v7[8] = v8;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v54 = *((void *)TupleTypeMetadata - 1);
  size_t v10 = *(void *)(v54 + 64);
  uint64_t v11 = (char *)malloc(v10);
  v7[11] = v11;
  uint64_t v12 = (char *)malloc(v10);
  v7[12] = v12;
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v14 = v13;
  v7[13] = v13;
  size_t v15 = *(void *)(v13 + 64);
  uint64_t v53 = (char *)malloc(v15);
  v7[14] = v53;
  size_t v16 = (char *)malloc(v15);
  v7[15] = v16;
  uint64_t v17 = TupleTypeMetadata[12];
  uint64_t v18 = &v12[v17];
  uint64_t v50 = &v12[v17];
  uint64_t v19 = TupleTypeMetadata[16];
  uint64_t v20 = &v12[v19];
  uint64_t v51 = &v12[v19];
  uint64_t v52 = v16;
  uint64_t v21 = TupleTypeMetadata[20];
  uint64_t v56 = &v12[v21];
  uint64_t v22 = TupleTypeMetadata[24];
  uint64_t v57 = &v12[v22];
  uint64_t v23 = TupleTypeMetadata[28];
  uint64_t v58 = &v12[v23];
  uint64_t v24 = TupleTypeMetadata[32];
  uint64_t v59 = &v12[v24];
  uint64_t v25 = TupleTypeMetadata[36];
  uint64_t v60 = &v12[v25];
  uint64_t v26 = TupleTypeMetadata[40];
  uint64_t v61 = &v12[v26];
  uint64_t v27 = TupleTypeMetadata[44];
  uint64_t v62 = &v12[v27];
  uint64_t v36 = v4 + v17;
  uint64_t v37 = v4 + v19;
  uint64_t v38 = v4 + v21;
  uint64_t v39 = v4 + v22;
  uint64_t v40 = v4 + v23;
  uint64_t v42 = v4 + v24;
  uint64_t v44 = v4 + v25;
  uint64_t v46 = v4 + v26;
  uint64_t v48 = v4 + v27;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v28(v12, v4, v8);
  v28(v18, v36, v8);
  v28(v20, v37, v8);
  v28(v56, v38, v8);
  v28(v57, v39, v8);
  v28(v58, v40, v8);
  v28(v59, v42, v8);
  v28(v60, v44, v8);
  v28(v61, v46, v8);
  v28(v62, v48, v8);
  uint64_t v29 = &v11[TupleTypeMetadata[12]];
  uint64_t v30 = &v11[TupleTypeMetadata[16]];
  uint64_t v31 = &v11[TupleTypeMetadata[20]];
  uint64_t v32 = &v11[TupleTypeMetadata[24]];
  uint64_t v41 = &v11[TupleTypeMetadata[28]];
  uint64_t v43 = &v11[TupleTypeMetadata[32]];
  uint64_t v45 = &v11[TupleTypeMetadata[36]];
  uint64_t v47 = &v11[TupleTypeMetadata[40]];
  uint64_t v49 = &v11[TupleTypeMetadata[44]];
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v33(v11, v12, v8);
  v33(v29, v50, v8);
  v33(v30, v51, v8);
  v33(v31, v56, v8);
  v33(v32, v57, v8);
  v33(v41, v58, v8);
  v33(v43, v59, v8);
  v33(v45, v60, v8);
  v33(v47, v61, v8);
  v33(v49, v62, v8);
  uint64_t v64 = v8;
  uint64_t v65 = a2;
  sub_1B6B5985C((uint64_t)v11, (uint64_t)sub_1B6D79EF4, (uint64_t)v63, (uint64_t)TupleTypeMetadata, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v34);
  (*(void (**)(char *, int *))(v54 + 8))(v11, TupleTypeMetadata);
  v33(v52, v53, v8);
  return sub_1B6D754E0;
}

void sub_1B6D754E0(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 112);
  uint64_t v2 = *(void **)(*(void *)a1 + 120);
  uint64_t v4 = *(void **)(*(void *)a1 + 96);
  uint64_t v5 = *(void **)(*(void *)a1 + 88);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 104) + 8))(v2, *(void *)(*(void *)a1 + 80));
  free(v2);
  free(v3);
  free(v4);
  free(v5);

  free(v1);
}

uint64_t sub_1B6D75564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1B6D677F4(a1, a2, WitnessTable, a3);
}

uint64_t sub_1B6D755CC()
{
  swift_getWitnessTable();

  return sub_1B6E31F78();
}

uint64_t sub_1B6D75638()
{
  swift_getWitnessTable();

  return sub_1B6E31F48();
}

void *sub_1B6D756A8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D756D4(a1, a2, a3, (uint64_t)&unk_1B6ECF488, MEMORY[0x1E4FBB610]);
}

void *sub_1B6D756D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *(*a5)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a5(&v10, a1, a2, WitnessTable, MEMORY[0x1E4FBB590]);
  *a1 = v10;
  return result;
}

uint64_t sub_1B6D7573C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6D75754(a1, a2);
}

uint64_t sub_1B6D75754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v3, a1);
  swift_getWitnessTable();
  uint64_t result = sub_1B6E32B28();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_1B6D757DC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1B6D75830()
{
  swift_getWitnessTable();

  return sub_1B6E32018();
}

uint64_t sub_1B6D75884()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D758A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D758BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D75920()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D75984()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D759A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D75A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v74 = a3;
  uint64_t v72 = a1;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v92 = v6;
  uint64_t v93 = v6;
  uint64_t v94 = v6;
  uint64_t v95 = v6;
  uint64_t v96 = v6;
  uint64_t v97 = v6;
  uint64_t v98 = v6;
  uint64_t v99 = v6;
  uint64_t v100 = v6;
  uint64_t v101 = v6;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  MEMORY[0x1F4188790](TupleTypeMetadata, v9);
  uint64_t v70 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v71 = (char *)&v51 - v13;
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v68 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18, v19);
  unsigned __int32 v67 = (char *)&v51 - v20;
  swift_getWitnessTable();
  uint64_t v21 = sub_1B6E32B28();
  uint64_t v51 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21, v22);
  uint64_t v25 = (char *)&v51 - v24;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16);
  uint64_t v73 = a2;
  v26(v25, v4, a2, v23);
  uint64_t v27 = 0;
  uint64_t v86 = 0;
  uint64_t v52 = v21;
  uint64_t v66 = &v25[*(int *)(v21 + 36)];
  *(void *)uint64_t v66 = 0;
  uint64_t v65 = &v25[TupleTypeMetadata[12]];
  uint64_t v64 = &v25[TupleTypeMetadata[16]];
  uint64_t v63 = &v25[TupleTypeMetadata[20]];
  uint64_t v62 = &v25[TupleTypeMetadata[24]];
  uint64_t v61 = &v25[TupleTypeMetadata[28]];
  uint64_t v60 = &v25[TupleTypeMetadata[32]];
  uint64_t v59 = &v25[TupleTypeMetadata[36]];
  uint64_t v58 = &v25[TupleTypeMetadata[40]];
  uint64_t v28 = TupleTypeMetadata[44];
  uint64_t v87 = v25;
  uint64_t v57 = &v25[v28];
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v14 += 16;
  uint64_t v54 = v29;
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v56 = (void (**)(uint64_t, int *))(v8 + 8);
  uint64_t v69 = v14;
  uint64_t v55 = (void (**)(char *, uint64_t))(v14 - 8);
  uint64_t v30 = v71;
  do
  {
    uint64_t v85 = v27;
    char v81 = &v30[TupleTypeMetadata[12]];
    uint64_t v31 = v81;
    char v82 = &v30[TupleTypeMetadata[16]];
    uint64_t v32 = v82;
    uint64_t v34 = &v30[TupleTypeMetadata[24]];
    char v83 = &v30[TupleTypeMetadata[20]];
    uint64_t v33 = v83;
    char v84 = v34;
    uint64_t v35 = &v30[TupleTypeMetadata[28]];
    float v88 = &v30[TupleTypeMetadata[32]];
    uint64_t v89 = &v30[TupleTypeMetadata[36]];
    uint64_t v90 = &v30[TupleTypeMetadata[40]];
    uint64_t v91 = &v30[TupleTypeMetadata[44]];
    uint64_t v36 = v54;
    v54(v30, v87, v6);
    v36(v31, v65, v6);
    v36(v32, v64, v6);
    v36(v33, v63, v6);
    v36(v34, v62, v6);
    v36(v35, v61, v6);
    v36(v88, v60, v6);
    v36(v89, v59, v6);
    v36(v90, v58, v6);
    v36(v91, v57, v6);
    uint64_t v37 = (uint64_t)v70;
    uint64_t v38 = &v70[TupleTypeMetadata[12]];
    uint64_t v39 = &v70[TupleTypeMetadata[16]];
    uint64_t v40 = &v70[TupleTypeMetadata[20]];
    uint64_t v75 = &v70[TupleTypeMetadata[24]];
    uint64_t v76 = &v70[TupleTypeMetadata[28]];
    char v77 = &v70[TupleTypeMetadata[32]];
    char v78 = &v70[TupleTypeMetadata[36]];
    char v79 = &v70[TupleTypeMetadata[40]];
    char v80 = &v70[TupleTypeMetadata[44]];
    uint64_t v41 = *v53;
    (*v53)(v70, v30, v6);
    v41(v38, v81, v6);
    v41(v39, v82, v6);
    v41(v40, v83, v6);
    v41(v75, v84, v6);
    v41(v76, v35, v6);
    v41(v77, v88, v6);
    v41(v78, v89, v6);
    v41(v79, v90, v6);
    uint64_t v42 = ((uint64_t (*)(char *, char *, uint64_t))v41)(v80, v91, v6);
    MEMORY[0x1F4188790](v42, v43);
    uint64_t v44 = v85;
    uint64_t v45 = v86;
    *(&v51 - 2) = v6;
    *(&v51 - 1) = v44;
    uint64_t v46 = v68;
    sub_1B6B5985C(v37, (uint64_t)sub_1B6D79EF4, (uint64_t)(&v51 - 4), (uint64_t)TupleTypeMetadata, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v47);
    uint64_t v86 = v45;
    (*v56)(v37, TupleTypeMetadata);
    uint64_t v48 = v67;
    v41(v67, v46, v6);
    swift_getWitnessTable();
    uint64_t v49 = (uint64_t *)v66;
    sub_1B6E31F48();
    *uint64_t v49 = v92;
    sub_1B6E315B8();
    (*v55)(v48, v6);
    uint64_t v27 = *v49;
  }
  while (*v49 != 10);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v87, v52);
}

uint64_t sub_1B6D76270(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t))
{
  sub_1B6E33918();
  a3(v7, a1, a2);
  return sub_1B6E33988();
}

uint64_t sub_1B6D762D0(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6D67CCC(a1, a2, *(char **)(a3 + 16), *(void *)(*(void *)(a4 - 8) + 8));
}

uint64_t sub_1B6D762E0(uint64_t a1, uint64_t a2)
{
  return sub_1B6D76270(a1, *(void *)(a2 - 8), (void (*)(unsigned char *, uint64_t, uint64_t))sub_1B6D75A04);
}

uint64_t sub_1B6D76310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D75A04(a1, a2, *(void *)(a3 - 8));
}

uint64_t sub_1B6D76318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D76330(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))sub_1B6D75A04);
}

uint64_t sub_1B6D76330(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a3 - 8);
  sub_1B6E33918();
  a4(v8, a2, v6);
  return sub_1B6E33988();
}

uint64_t sub_1B6D7638C@<X0>(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, char *a10, int *a11, uint64_t a12, char *a13, char *a14)
{
  uint64_t v108 = a8;
  uint64_t v106 = a7;
  uint64_t v103 = a6;
  uint64_t v102 = a5;
  uint64_t v101 = a4;
  uint64_t v100 = a3;
  uint64_t v99 = a2;
  uint64_t v98 = a1;
  uint64_t v119 = a9;
  uint64_t v105 = a14;
  uint64_t v110 = a11;
  uint64_t v107 = a10;
  uint64_t v104 = a13;
  uint64_t v124 = a12;
  uint64_t v125 = a12;
  uint64_t v126 = a12;
  uint64_t v127 = a12;
  uint64_t v128 = a12;
  uint64_t v129 = a12;
  uint64_t v130 = a12;
  uint64_t v131 = a12;
  uint64_t v132 = a12;
  uint64_t v133 = a12;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v15 = (int *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata, v16);
  uint64_t v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21.n128_f64[0] = MEMORY[0x1F4188790](v19, v20);
  uint64_t v24 = (char *)&v97 + v15[18] - v22;
  uint64_t v114 = (char *)&v97 + v15[14] - v22;
  double v23 = v114;
  uint64_t v115 = v24;
  uint64_t v26 = (char *)&v97 + v15[26] - v22;
  uint64_t v116 = (char *)&v97 + v15[22] - v22;
  uint64_t v25 = v116;
  long long v117 = v26;
  long long v118 = (char *)&v97 + v15[30] - v22;
  uint64_t v27 = v118;
  uint64_t v122 = (char *)&v97 + v15[34] - v22;
  uint64_t v123 = (char *)&v97 + v15[38] - v22;
  uint64_t v120 = (char *)&v97 + v15[42] - v22;
  uint64_t v121 = (char *)&v97 + v15[46] - v22;
  uint64_t v113 = (char *)&v97 - v22;
  uint64_t v109 = *(void **)(a12 - 8);
  uint64_t v28 = (void (*)(uint64_t, char *, uint64_t))v109[4];
  uint64_t v112 = v109 + 4;
  uint64_t v111 = v28;
  ((void (*)(char *, char *, uint64_t, __n128))v28)((char *)&v97 - v22, v98, a12, v21);
  v28((uint64_t)v23, v99, a12);
  v28((uint64_t)v24, v100, a12);
  v28((uint64_t)v25, v101, a12);
  v28((uint64_t)v26, v102, a12);
  v28((uint64_t)v27, v103, a12);
  v28((uint64_t)v122, v106, a12);
  v28((uint64_t)v123, v108, a12);
  v28((uint64_t)v120, v107, a12);
  v28((uint64_t)v121, (char *)v110, a12);
  uint64_t v106 = &v18[v15[14]];
  uint64_t v29 = v106;
  uint64_t v110 = (int *)&v18[v15[18]];
  uint64_t v103 = &v18[v15[22]];
  uint64_t v30 = v103;
  uint64_t v108 = &v18[v15[26]];
  uint64_t v102 = &v18[v15[30]];
  uint64_t v31 = v102;
  uint64_t v107 = &v18[v15[34]];
  uint64_t v32 = &v18[v15[38]];
  uint64_t v101 = &v18[v15[42]];
  uint64_t v33 = &v18[v15[46]];
  uint64_t v34 = (void (*)(char *, char *, uint64_t))v109[2];
  v34(v18, v113, a12);
  v34(v29, v114, a12);
  v34((char *)v110, v115, a12);
  v34(v30, v116, a12);
  v34(v108, v117, a12);
  v34(v31, v118, a12);
  v34(v107, v122, a12);
  uint64_t v35 = v32;
  v34(v32, v123, a12);
  uint64_t v36 = v101;
  v34(v101, v120, a12);
  v34(v33, v121, a12);
  v111(v119, v18, a12);
  uint64_t v38 = v109 + 1;
  uint64_t v37 = (void (*)(char *, uint64_t))v109[1];
  v37(v33, a12);
  v37(v36, a12);
  v37(v35, a12);
  v37(v107, a12);
  v37(v102, a12);
  v37(v108, a12);
  v37(v103, a12);
  v37((char *)v110, a12);
  v37(v106, a12);
  uint64_t v39 = v38;
  uint64_t v101 = &v18[v15[14]];
  uint64_t v40 = v101;
  uint64_t v103 = &v18[v15[18]];
  uint64_t v41 = v103;
  uint64_t v108 = &v18[v15[22]];
  uint64_t v102 = &v18[v15[26]];
  uint64_t v42 = v102;
  uint64_t v107 = &v18[v15[30]];
  uint64_t v106 = &v18[v15[34]];
  uint64_t v98 = &v18[v15[38]];
  uint64_t v99 = &v18[v15[42]];
  uint64_t v100 = &v18[v15[46]];
  v34(v18, v113, a12);
  v34(v40, v114, a12);
  v34(v41, v115, a12);
  v34(v108, v116, a12);
  v34(v42, v117, a12);
  v34(v107, v118, a12);
  v34(v106, v122, a12);
  uint64_t v43 = v98;
  v34(v98, v123, a12);
  uint64_t v44 = v99;
  v34(v99, v120, a12);
  uint64_t v45 = v100;
  v34(v100, v121, a12);
  uint64_t v110 = (int *)type metadata accessor for __FixedArrayCodableStorage10();
  v111(v119 + v110[11], v101, a12);
  v37(v45, a12);
  v37(v44, a12);
  v37(v43, a12);
  v37(v106, a12);
  v37(v107, a12);
  v37(v102, a12);
  v37(v108, a12);
  v37(v103, a12);
  v37(v18, a12);
  uint64_t v105 = &v18[v15[14]];
  uint64_t v46 = v105;
  uint64_t v101 = &v18[v15[18]];
  uint64_t v47 = v101;
  uint64_t v108 = &v18[v15[22]];
  uint64_t v104 = &v18[v15[26]];
  uint64_t v48 = v104;
  uint64_t v107 = &v18[v15[30]];
  uint64_t v106 = &v18[v15[34]];
  uint64_t v100 = &v18[v15[38]];
  uint64_t v102 = &v18[v15[42]];
  uint64_t v103 = &v18[v15[46]];
  v34(v18, v113, a12);
  v34(v46, v114, a12);
  v34(v47, v115, a12);
  v34(v108, v116, a12);
  v34(v48, v117, a12);
  v34(v107, v118, a12);
  v34(v106, v122, a12);
  uint64_t v49 = v100;
  v34(v100, v123, a12);
  uint64_t v50 = v102;
  v34(v102, v120, a12);
  uint64_t v51 = v103;
  v34(v103, v121, a12);
  v111(v119 + v110[12], v101, a12);
  v37(v51, a12);
  v37(v50, a12);
  v37(v49, a12);
  v37(v106, a12);
  v37(v107, a12);
  v37(v104, a12);
  v37(v108, a12);
  v37(v105, a12);
  v37(v18, a12);
  uint64_t v105 = &v18[v15[14]];
  uint64_t v52 = v105;
  uint64_t v108 = &v18[v15[18]];
  uint64_t v100 = &v18[v15[22]];
  uint64_t v53 = v100;
  uint64_t v104 = &v18[v15[26]];
  uint64_t v54 = v104;
  uint64_t v107 = &v18[v15[30]];
  uint64_t v106 = &v18[v15[34]];
  uint64_t v101 = &v18[v15[38]];
  uint64_t v102 = &v18[v15[42]];
  uint64_t v103 = &v18[v15[46]];
  v34(v18, v113, a12);
  v34(v52, v114, a12);
  v34(v108, v115, a12);
  v34(v53, v116, a12);
  v34(v54, v117, a12);
  v34(v107, v118, a12);
  v34(v106, v122, a12);
  uint64_t v55 = v101;
  v34(v101, v123, a12);
  uint64_t v56 = v102;
  v34(v102, v120, a12);
  uint64_t v57 = v103;
  v34(v103, v121, a12);
  v111(v119 + v110[13], v100, a12);
  v37(v57, a12);
  v37(v56, a12);
  v37(v55, a12);
  v37(v106, a12);
  v37(v107, a12);
  v37(v104, a12);
  v37(v108, a12);
  v37(v105, a12);
  v37(v18, a12);
  uint64_t v105 = &v18[v15[14]];
  uint64_t v58 = v105;
  uint64_t v108 = &v18[v15[18]];
  uint64_t v104 = &v18[v15[22]];
  uint64_t v59 = v104;
  uint64_t v100 = &v18[v15[26]];
  uint64_t v60 = v100;
  uint64_t v107 = &v18[v15[30]];
  uint64_t v106 = &v18[v15[34]];
  uint64_t v101 = &v18[v15[38]];
  uint64_t v102 = &v18[v15[42]];
  uint64_t v103 = &v18[v15[46]];
  v34(v18, v113, a12);
  v34(v58, v114, a12);
  v34(v108, v115, a12);
  v34(v59, v116, a12);
  v34(v60, v117, a12);
  v34(v107, v118, a12);
  v34(v106, v122, a12);
  uint64_t v61 = v101;
  v34(v101, v123, a12);
  uint64_t v62 = v102;
  v34(v102, v120, a12);
  uint64_t v63 = v103;
  v34(v103, v121, a12);
  v111(v119 + v110[14], v100, a12);
  v37(v63, a12);
  v37(v62, a12);
  v37(v61, a12);
  v37(v106, a12);
  v37(v107, a12);
  v37(v104, a12);
  v37(v108, a12);
  v37(v105, a12);
  v37(v18, a12);
  uint64_t v105 = &v18[v15[14]];
  uint64_t v64 = v105;
  uint64_t v108 = &v18[v15[18]];
  uint64_t v104 = &v18[v15[22]];
  uint64_t v65 = v104;
  uint64_t v107 = &v18[v15[26]];
  uint64_t v100 = &v18[v15[30]];
  uint64_t v66 = v100;
  uint64_t v106 = &v18[v15[34]];
  uint64_t v101 = &v18[v15[38]];
  uint64_t v102 = &v18[v15[42]];
  uint64_t v103 = &v18[v15[46]];
  v34(v18, v113, a12);
  v34(v64, v114, a12);
  v34(v108, v115, a12);
  v34(v65, v116, a12);
  v34(v107, v117, a12);
  v34(v66, v118, a12);
  v34(v106, v122, a12);
  unsigned __int32 v67 = v101;
  v34(v101, v123, a12);
  uint64_t v68 = v102;
  v34(v102, v120, a12);
  uint64_t v69 = v103;
  v34(v103, v121, a12);
  v111(v119 + v110[15], v100, a12);
  v37(v69, a12);
  v37(v68, a12);
  v37(v67, a12);
  v37(v106, a12);
  v37(v107, a12);
  v37(v104, a12);
  v37(v108, a12);
  v37(v105, a12);
  v37(v18, a12);
  uint64_t v104 = &v18[v15[14]];
  uint64_t v70 = v104;
  uint64_t v108 = &v18[v15[18]];
  uint64_t v103 = &v18[v15[22]];
  uint64_t v71 = v103;
  uint64_t v107 = &v18[v15[26]];
  uint64_t v106 = &v18[v15[30]];
  uint64_t v72 = &v18[v15[34]];
  uint64_t v105 = &v18[v15[38]];
  uint64_t v101 = &v18[v15[42]];
  uint64_t v102 = &v18[v15[46]];
  v34(v18, v113, a12);
  v34(v70, v114, a12);
  v34(v108, v115, a12);
  v34(v71, v116, a12);
  v34(v107, v117, a12);
  v34(v106, v118, a12);
  uint64_t v73 = v72;
  v34(v72, v122, a12);
  v34(v105, v123, a12);
  uint64_t v74 = v101;
  v34(v101, v120, a12);
  uint64_t v75 = v102;
  v34(v102, v121, a12);
  v111(v119 + v110[16], v73, a12);
  v37(v75, a12);
  v37(v74, a12);
  v37(v105, a12);
  v37(v106, a12);
  v37(v107, a12);
  v37(v103, a12);
  v37(v108, a12);
  v37(v104, a12);
  v37(v18, a12);
  uint64_t v104 = &v18[v15[14]];
  uint64_t v76 = v104;
  uint64_t v108 = &v18[v15[18]];
  uint64_t v103 = &v18[v15[22]];
  char v77 = v103;
  uint64_t v107 = &v18[v15[26]];
  uint64_t v106 = &v18[v15[30]];
  uint64_t v105 = &v18[v15[34]];
  char v78 = &v18[v15[38]];
  uint64_t v101 = &v18[v15[42]];
  uint64_t v102 = &v18[v15[46]];
  v34(v18, v113, a12);
  v34(v76, v114, a12);
  v34(v108, v115, a12);
  v34(v77, v116, a12);
  v34(v107, v117, a12);
  v34(v106, v118, a12);
  v34(v105, v122, a12);
  char v79 = v78;
  v34(v78, v123, a12);
  char v80 = v101;
  v34(v101, v120, a12);
  char v81 = v102;
  v34(v102, v121, a12);
  v111(v119 + v110[17], v79, a12);
  v37(v81, a12);
  v37(v80, a12);
  v37(v105, a12);
  v37(v106, a12);
  v37(v107, a12);
  v37(v103, a12);
  v37(v108, a12);
  v37(v104, a12);
  v37(v18, a12);
  uint64_t v104 = &v18[v15[14]];
  char v82 = v104;
  uint64_t v108 = &v18[v15[18]];
  uint64_t v103 = &v18[v15[22]];
  char v83 = v103;
  uint64_t v107 = &v18[v15[26]];
  uint64_t v106 = &v18[v15[30]];
  uint64_t v105 = &v18[v15[34]];
  char v84 = &v18[v15[38]];
  uint64_t v101 = &v18[v15[42]];
  uint64_t v102 = &v18[v15[46]];
  v34(v18, v113, a12);
  v34(v82, v114, a12);
  v34(v108, v115, a12);
  v34(v83, v116, a12);
  v34(v107, v117, a12);
  v34(v106, v118, a12);
  v34(v105, v122, a12);
  v34(v84, v123, a12);
  uint64_t v85 = v101;
  v34(v101, v120, a12);
  uint64_t v86 = v102;
  v34(v102, v121, a12);
  uint64_t v87 = (void (*)(char *, char *, uint64_t))v111;
  v111(v119 + v110[18], v85, a12);
  uint64_t v109 = v39;
  v37(v86, a12);
  v37(v84, a12);
  v37(v105, a12);
  v37(v106, a12);
  v37(v107, a12);
  v37(v103, a12);
  v37(v108, a12);
  v37(v104, a12);
  v37(v18, a12);
  uint64_t v107 = &v18[v15[14]];
  float v88 = v107;
  uint64_t v106 = &v18[v15[18]];
  uint64_t v89 = v106;
  uint64_t v105 = &v18[v15[22]];
  uint64_t v90 = v105;
  uint64_t v108 = &v18[v15[26]];
  uint64_t v101 = &v18[v15[30]];
  uint64_t v102 = &v18[v15[34]];
  uint64_t v103 = &v18[v15[38]];
  uint64_t v91 = &v18[v15[42]];
  uint64_t v104 = &v18[v15[46]];
  v87(v18, v113, a12);
  v87(v88, v114, a12);
  v87(v89, v115, a12);
  v87(v90, v116, a12);
  v87(v108, v117, a12);
  uint64_t v92 = v101;
  v87(v101, v118, a12);
  uint64_t v93 = v102;
  v87(v102, v122, a12);
  uint64_t v94 = v103;
  v87(v103, v123, a12);
  v87(v91, v120, a12);
  uint64_t v95 = v104;
  v87(v104, v121, a12);
  v87((char *)(v119 + v110[19]), v95, a12);
  v37(v91, a12);
  v37(v94, a12);
  v37(v93, a12);
  v37(v92, a12);
  v37(v108, a12);
  v37(v105, a12);
  v37(v106, a12);
  v37(v107, a12);
  return ((uint64_t (*)(char *, uint64_t))v37)(v18, a12);
}

uint64_t sub_1B6D78118(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 3170143 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 3235679 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 3301215 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 3366751 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 3432287 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 3497823 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 3563359 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 3628895 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 3694431 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 3759967 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_1B6D78428(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  v11[1] = a2;
  void v11[2] = v3;
  type metadata accessor for __FixedArrayCodableStorage10.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_1B6E33038();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A88();
  char v21 = 0;
  uint64_t v9 = v11[4];
  sub_1B6E32FA8();
  if (!v9)
  {
    char v20 = 1;
    sub_1B6E32FA8();
    char v19 = 2;
    sub_1B6E32FA8();
    char v18 = 3;
    sub_1B6E32FA8();
    char v17 = 4;
    sub_1B6E32FA8();
    char v16 = 5;
    sub_1B6E32FA8();
    char v15 = 6;
    sub_1B6E32FA8();
    char v14 = 7;
    sub_1B6E32FA8();
    char v13 = 8;
    sub_1B6E32FA8();
    char v12 = 9;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6D787A4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v70 = a4;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v86 = v4;
  uint64_t v87 = v8;
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v71 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v72 = (char *)&v67 - v12;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v73 = (char *)&v67 - v15;
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v74 = (char *)&v67 - v18;
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v75 = (char *)&v67 - v21;
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v76 = (char *)&v67 - v24;
  MEMORY[0x1F4188790](v25, v26);
  char v77 = (char *)&v67 - v27;
  MEMORY[0x1F4188790](v28, v29);
  char v79 = (char *)&v67 - v30;
  MEMORY[0x1F4188790](v31, v32);
  char v78 = (char *)&v67 - v33;
  MEMORY[0x1F4188790](v34, v35);
  char v82 = (char *)&v67 - v36;
  type metadata accessor for __FixedArrayCodableStorage10.CodingKeys();
  swift_getWitnessTable();
  uint64_t v37 = sub_1B6E32EA8();
  uint64_t v80 = *(void *)(v37 - 8);
  uint64_t v81 = v37;
  MEMORY[0x1F4188790](v37, v38);
  uint64_t v40 = (char *)&v67 - v39;
  uint64_t v83 = a3;
  uint64_t v85 = (int *)type metadata accessor for __FixedArrayCodableStorage10();
  uint64_t v41 = *((void *)v85 - 1);
  MEMORY[0x1F4188790](v85, v42);
  float v88 = (char *)&v67 - v43;
  uint64_t v44 = a1[3];
  char v84 = a1;
  sub_1B62C14BC(a1, v44);
  uint64_t v45 = v86;
  sub_1B6E33A48();
  uint64_t v86 = a2;
  if (v45)
  {
    uint64_t v83 = v45;
    uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v84);
    LODWORD(v81) = 0;
    LODWORD(v80) = 0;
    LODWORD(v82) = 0;
  }
  else
  {
    uint64_t v47 = v78;
    uint64_t v46 = v79;
    uint64_t v69 = v41;
    char v98 = 0;
    uint64_t v48 = v82;
    sub_1B6E32DF8();
    uint64_t v50 = a2;
    uint64_t v51 = (char *)(v87 + 32);
    uint64_t v52 = v40;
    uint64_t v53 = v88;
    unsigned __int32 v67 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
    v67(v88, v48, v50);
    char v97 = 1;
    uint64_t v68 = v52;
    sub_1B6E32DF8();
    uint64_t v54 = v85;
    uint64_t v55 = &v53[v85[11]];
    char v78 = v51;
    v67(v55, v47, v50);
    char v96 = 2;
    sub_1B6E32DF8();
    v67(&v53[v54[12]], v46, v50);
    char v95 = 3;
    uint64_t v56 = v77;
    sub_1B6E32DF8();
    uint64_t v57 = v53;
    v67(&v53[v85[13]], v56, v50);
    char v94 = 4;
    uint64_t v58 = v76;
    sub_1B6E32DF8();
    uint64_t v59 = v85;
    v67(&v57[v85[14]], v58, v50);
    char v93 = 5;
    uint64_t v60 = v75;
    sub_1B6E32DF8();
    v67(&v57[v59[15]], v60, v50);
    char v92 = 6;
    uint64_t v61 = v74;
    sub_1B6E32DF8();
    LODWORD(v82) = 1;
    v67(&v57[v59[16]], v61, v50);
    char v91 = 7;
    uint64_t v62 = v73;
    sub_1B6E32DF8();
    v67(&v57[v59[17]], v62, v50);
    char v90 = 8;
    uint64_t v63 = v72;
    sub_1B6E32DF8();
    v67(&v57[v59[18]], v63, v50);
    char v89 = 9;
    sub_1B6E32DF8();
    uint64_t v83 = 0;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v68, v81);
    uint64_t v64 = v85;
    uint64_t v65 = v88;
    v67(&v88[v85[19]], v71, v86);
    uint64_t v66 = v69;
    (*(void (**)(uint64_t, char *, int *))(v69 + 16))(v70, v65, v64);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v84);
    return (*(uint64_t (**)(char *, int *))(v66 + 8))(v65, v64);
  }
  return result;
}

uint64_t sub_1B6D7940C()
{
  swift_getWitnessTable();

  return sub_1B6B37010();
}

uint64_t sub_1B6D79478(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1B6D79490(a1, a2, a3, (void (*)(unsigned char *, void, void, void, void))sub_1B6D7C71C);
}

uint64_t sub_1B6D79490(uint64_t a1, void *a2, uint64_t a3, void (*a4)(unsigned char *, void, void, void, void))
{
  sub_1B6E33918();
  a4(v8, *v4, a2[2], a2[3], a2[4]);
  return sub_1B6E33988();
}

uint64_t sub_1B6D794EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6D78118(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6D79520@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B696C040();
  *a1 = result;
  return result;
}

uint64_t sub_1B6D79554(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1B6D795A8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t sub_1B6D795FC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B6D787A4(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_1B6D79620(void *a1, uint64_t a2)
{
  return sub_1B6D78428(a1, a2);
}

uint64_t sub_1B6D79638@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v26 = type metadata accessor for __FixedArrayCodableStorage10();
  MEMORY[0x1F4188790](v26, v6);
  uint64_t v38 = (char *)&v21 - v7;
  uint64_t v8 = type metadata accessor for FixedArray10();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v21 - v11;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A28();
  if (v3)
  {
    uint64_t v20 = (uint64_t)a1;
  }
  else
  {
    uint64_t v23 = v8;
    uint64_t v24 = a1;
    uint64_t v21 = v12;
    uint64_t v22 = v9;
    sub_1B62C14BC(v37, v37[3]);
    uint64_t v13 = (int *)v26;
    swift_getWitnessTable();
    uint64_t v14 = v38;
    sub_1B6E33518();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(a2 - 8) + 32);
    uint64_t v17 = v21;
    v16(v21, v14, a2);
    uint64_t v18 = &v14[v13[11]];
    uint64_t v27 = a2;
    uint64_t v28 = a2;
    uint64_t v29 = a2;
    uint64_t v30 = a2;
    uint64_t v31 = a2;
    uint64_t v32 = a2;
    uint64_t v33 = a2;
    uint64_t v34 = a2;
    uint64_t v35 = a2;
    uint64_t v36 = a2;
    uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v16(&v17[TupleTypeMetadata[12]], v18, a2);
    v16(&v17[TupleTypeMetadata[16]], &v14[v13[12]], a2);
    v16(&v17[TupleTypeMetadata[20]], &v14[v13[13]], a2);
    v16(&v17[TupleTypeMetadata[24]], &v14[v13[14]], a2);
    v16(&v17[TupleTypeMetadata[28]], &v14[v13[15]], a2);
    v16(&v17[TupleTypeMetadata[32]], &v14[v13[16]], a2);
    v16(&v17[TupleTypeMetadata[36]], &v14[v13[17]], a2);
    v16(&v17[TupleTypeMetadata[40]], &v14[v13[18]], a2);
    v16(&v17[TupleTypeMetadata[44]], &v14[v13[19]], a2);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v37);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v25, v17, v23);
    uint64_t v20 = (uint64_t)v24;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v20);
}

uint64_t sub_1B6D799B8(void *a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v5 = v4;
  uint64_t v52 = a4;
  uint64_t v53 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  v57[0] = v7;
  v57[1] = v7;
  v57[2] = v7;
  uint64_t v58 = v7;
  uint64_t v59 = v7;
  uint64_t v60 = v7;
  uint64_t v61 = v7;
  uint64_t v62 = v7;
  uint64_t v63 = v7;
  uint64_t v64 = v7;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v9 = (int *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata, v10);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v51 = type metadata accessor for __FixedArrayCodableStorage10();
  uint64_t v54 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51, v13);
  uint64_t v50 = (uint64_t)&v37 - v14;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  uint64_t v15 = v9[14];
  uint64_t v65 = &v12[v15];
  uint64_t v16 = v9[18];
  uint64_t v17 = &v12[v16];
  uint64_t v43 = &v12[v16];
  uint64_t v18 = v9[22];
  uint64_t v56 = &v12[v18];
  uint64_t v19 = v9[26];
  uint64_t v55 = &v12[v19];
  uint64_t v20 = v9[30];
  uint64_t v42 = &v12[v20];
  uint64_t v21 = v9[34];
  uint64_t v45 = &v12[v21];
  uint64_t v22 = v9[38];
  uint64_t v46 = &v12[v22];
  uint64_t v23 = v9[42];
  uint64_t v48 = &v12[v23];
  uint64_t v24 = v9[46];
  uint64_t v49 = (int *)&v12[v24];
  uint64_t v25 = v4 + v15;
  uint64_t v26 = v4 + v16;
  uint64_t v27 = v5 + v18;
  uint64_t v38 = v5 + v19;
  uint64_t v39 = v5 + v20;
  uint64_t v40 = v5 + v21;
  uint64_t v41 = v5 + v22;
  uint64_t v44 = v5 + v23;
  uint64_t v47 = v5 + v24;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  v28(v12, v5, v7);
  v28(v65, v25, v7);
  v28(v17, v26, v7);
  v28(v56, v27, v7);
  v28(v55, v38, v7);
  uint64_t v29 = v42;
  v28(v42, v39, v7);
  uint64_t v30 = v45;
  v28(v45, v40, v7);
  uint64_t v31 = v46;
  v28(v46, v41, v7);
  uint64_t v32 = v48;
  v28(v48, v44, v7);
  uint64_t v33 = v49;
  v28((char *)v49, v47, v7);
  uint64_t v35 = v50;
  uint64_t v34 = v51;
  sub_1B6D7638C(v12, v65, v43, v56, v55, v29, v30, v31, v50, v32, v33, v7, v53, v52);
  sub_1B62C550C((uint64_t)v57, v58);
  swift_getWitnessTable();
  sub_1B6E335C8();
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v35, v34);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v57);
}

uint64_t sub_1B6D79DF4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B6D79638(a1, *(void *)(a2 + 16), a3);
}

uint64_t sub_1B6D79E18(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D799B8(a1, a2, *(char **)(a3 - 8), *(char **)(a3 - 16));
}

uint64_t sub_1B6D79E38()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D79E7C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D79EC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1B6D7A43C(a1);
}

uint64_t type metadata accessor for __FixedArrayCodableStorage8()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B6D79EF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1B6D7A43C(a1);
}

uint64_t type metadata accessor for __FixedArrayCodableStorage10()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B6D79F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6D79F80(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

uint64_t sub_1B6D79F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6D79F80(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

uint64_t sub_1B6D79F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), void (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v24 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v20 = (char *)&v23 - v19;
  char v21 = sub_1B6E31668();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if (v21) {
    v24(v20, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
}

uint64_t sub_1B6D7A1B4(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_1B6E320E8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)v17 - v12;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = sub_1B6E31668();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v13, a1, v5);
  v14(v9, a2, v5);
  if (AssociatedConformanceWitness) {
    sub_1B6E31668();
  }
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v5);
}

uint64_t sub_1B6D7A388()
{
  sub_1B6E338D8();
  swift_getWitnessTable();

  return sub_1B6E33088();
}

uint64_t sub_1B6D7A420()
{
  return sub_1B6D7A4D0();
}

uint64_t sub_1B6D7A43C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = sub_1B6E31718();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v5 + *(void *)(*(void *)(v4 - 8) + 72) * v3, v4);
}

uint64_t sub_1B6D7A4B4()
{
  return sub_1B6D7A4D0();
}

uint64_t sub_1B6D7A4D0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = sub_1B6E324D8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 24))(v4 + *(void *)(*(void *)(v1 - 8) + 72) * v2, v3, v1);
}

uint64_t sub_1B6D7A548()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B6D7A5E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  BOOL v10 = v8 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0;
  if (v10
    && (uint64_t v11 = v7 + v8,
        ((v7
        + v8
        + ((v7
          + v8
          + ((v7
            + v8
            + ((v7
              + v8
              + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & (unint64_t)~v8)
      + v7 <= 0x18))
  {
    uint64_t v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v12(a1, a2, v5);
    unint64_t v13 = ((unint64_t)a2 + v11) & v9;
    v12((uint64_t *)(((unint64_t)v4 + v11) & v9), (uint64_t *)v13, v5);
    unint64_t v14 = (v11 + v13) & v9;
    v12((uint64_t *)((v11 + (((unint64_t)v4 + v11) & v9)) & v9), (uint64_t *)v14, v5);
    unint64_t v15 = (v11 + v14) & v9;
    v12((uint64_t *)((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9), (uint64_t *)v15, v5);
    uint64_t v16 = (v11 + v15) & v9;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9), (uint64_t *)v16, v5);
    uint64_t v17 = (v11 + v16) & v9;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9), (uint64_t *)v17, v5);
    uint64_t v18 = (v11 + v17) & v9;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (uint64_t *)v18, v5);
    uint64_t v19 = (v11 + v18) & v9;
    v12((uint64_t *)((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (uint64_t *)v19, v5);
    uint64_t v20 = (v11 + v19) & v9;
    v12((uint64_t *)((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (uint64_t *)v20, v5);
    v12((uint64_t *)((v11+ ((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (uint64_t *)((v11 + v20) & v9), v5);
  }
  else
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v21 + ((v8 + 16) & v9));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1B6D7A878(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v16(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v16(v7, v3);
  uint64_t v8 = (v6 + v7) & ~v5;
  v16(v8, v3);
  uint64_t v9 = (v6 + v8) & ~v5;
  v16(v9, v3);
  uint64_t v10 = (v6 + v9) & ~v5;
  v16(v10, v3);
  uint64_t v11 = (v6 + v10) & ~v5;
  v16(v11, v3);
  uint64_t v12 = (v6 + v11) & ~v5;
  v16(v12, v3);
  uint64_t v13 = (v6 + v12) & ~v5;
  v16(v13, v3);
  uint64_t v14 = (v6 + v13) & ~v5;
  v16(v14, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v16)((v6 + v14) & ~v5, v3);
}

uint64_t sub_1B6D7AA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  uint64_t v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  uint64_t v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  uint64_t v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  uint64_t v16 = (v9 + v15) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, v5);
  uint64_t v17 = (v9 + v16) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, v5);
  v7((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v17) & ~v8, v5);
  return a1;
}

uint64_t sub_1B6D7ABF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  uint64_t v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  uint64_t v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  uint64_t v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  uint64_t v16 = (v9 + v15) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, v5);
  uint64_t v17 = (v9 + v16) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, v5);
  v7((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v17) & ~v8, v5);
  return a1;
}

uint64_t sub_1B6D7ADD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  uint64_t v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  uint64_t v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  uint64_t v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  uint64_t v16 = (v9 + v15) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, v5);
  uint64_t v17 = (v9 + v16) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, v5);
  v7((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v17) & ~v8, v5);
  return a1;
}

uint64_t sub_1B6D7AFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  uint64_t v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  uint64_t v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  uint64_t v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  uint64_t v16 = (v9 + v15) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, v5);
  uint64_t v17 = (v9 + v16) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, v5);
  v7((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v17) & ~v8, v5);
  return a1;
}

uint64_t sub_1B6D7B18C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v9 = ((v6
       + v8
       + ((v6
         + v8
         + ((v6
           + v8
           + ((v6
             + v8
             + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)
     + v6;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_19;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v9 | v13) + 1;
}

void sub_1B6D7B338(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v8
        + v9
        + ((v8
          + v9
          + ((v8
            + v9
            + ((v8
              + v9
              + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  BOOL v11 = a3 >= v7;
  unsigned int v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v14 = ~v7 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1B6D7B5A0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v18 = *(void (**)(void))(v6 + 56);
        v18();
      }
      return;
  }
}

uint64_t sub_1B6D7B5C8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B6D7B664(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  BOOL v10 = v8 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0;
  if (v10
    && (uint64_t v11 = v7 + v8,
        ((v7
        + v8
        + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & (unint64_t)~v8)
      + v7 <= 0x18))
  {
    unsigned int v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v12(a1, a2, v5);
    unint64_t v13 = ((unint64_t)a2 + v11) & v9;
    v12((uint64_t *)(((unint64_t)v4 + v11) & v9), (uint64_t *)v13, v5);
    unint64_t v14 = (v11 + v13) & v9;
    v12((uint64_t *)((v11 + (((unint64_t)v4 + v11) & v9)) & v9), (uint64_t *)v14, v5);
    unint64_t v15 = (v11 + v14) & v9;
    v12((uint64_t *)((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9), (uint64_t *)v15, v5);
    uint64_t v16 = (v11 + v15) & v9;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9), (uint64_t *)v16, v5);
    uint64_t v17 = (v11 + v16) & v9;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9), (uint64_t *)v17, v5);
    uint64_t v18 = (v11 + v17) & v9;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (uint64_t *)v18, v5);
    v12((uint64_t *)((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (uint64_t *)((v11 + v18) & v9), v5);
  }
  else
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v8 + 16) & v9));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1B6D7B894(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v14(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v14(v7, v3);
  uint64_t v8 = (v6 + v7) & ~v5;
  v14(v8, v3);
  uint64_t v9 = (v6 + v8) & ~v5;
  v14(v9, v3);
  uint64_t v10 = (v6 + v9) & ~v5;
  v14(v10, v3);
  uint64_t v11 = (v6 + v10) & ~v5;
  v14(v11, v3);
  uint64_t v12 = (v6 + v11) & ~v5;
  v14(v12, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v14)((v6 + v12) & ~v5, v3);
}

uint64_t sub_1B6D7B9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  uint64_t v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  uint64_t v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  uint64_t v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v15) & ~v8, v5);
  return a1;
}

uint64_t sub_1B6D7BB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  uint64_t v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  uint64_t v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  uint64_t v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v15) & ~v8, v5);
  return a1;
}

uint64_t sub_1B6D7BD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  uint64_t v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  uint64_t v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  uint64_t v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v15) & ~v8, v5);
  return a1;
}

uint64_t sub_1B6D7BE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  uint64_t v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  uint64_t v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  uint64_t v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  uint64_t v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v15) & ~v8, v5);
  return a1;
}

uint64_t sub_1B6D7C028(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v9 = ((v6
       + v8
       + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)
     + v6;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_19;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v9 | v13) + 1;
}

void sub_1B6D7C1C4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v8
        + v9
        + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  BOOL v11 = a3 >= v7;
  unsigned int v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v14 = ~v7 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1B6D7C41CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v18 = *(void (**)(void))(v6 + 56);
        v18();
      }
      return;
  }
}

uint64_t type metadata accessor for __FixedArrayCodableStorage8.CodingKeys()
{
  return sub_1B62C36EC();
}

uint64_t type metadata accessor for __FixedArrayCodableStorage10.CodingKeys()
{
  return sub_1B62C36EC();
}

unsigned char *sub_1B6D7C474(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D7C540);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

unsigned char *sub_1B6D7C568(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6D7C634);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_1B6D7C65C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D7C678()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D7C694()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D7C6B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D7C6CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D7C6E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6D7C72C(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  uint64_t v5 = ecs_stack_allocator_allocate(v4, 16, 8);
  *uint64_t v5 = type metadata accessor for GraphScript(0);
  v5[1] = &off_1F0F55610;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  uint64_t v9 = sub_1B69E2E04((uint64_t)v5, 1, MEMORY[0x1E4FBC860]);
  uint64_t v11 = v10;
  uint64_t v12 = sub_1B637FE60(v9);
  if ((v13 & 1) != 0 || (unint64_t v14 = sub_1B63581E4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    uint64_t v16 = sub_1B6A00108(v5, 1);
    int v15 = sub_1B637C7BC(v9, v11, v16, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v17 = *(void *)(*(void *)(v6 + 80) + 8 * v15 + 32);
  uint64_t v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  uint64_t v19 = sub_1B6B1E684(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v19;
}

uint64_t sub_1B6D7C8A8(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  uint64_t v5 = ecs_stack_allocator_allocate(v4, 16, 8);
  *uint64_t v5 = &type metadata for IBLRuntime;
  v5[1] = &off_1F0F52A50;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  uint64_t v9 = sub_1B69E2E04((uint64_t)v5, 1, MEMORY[0x1E4FBC860]);
  uint64_t v11 = v10;
  uint64_t v12 = sub_1B637FE60(v9);
  if ((v13 & 1) != 0 || (unint64_t v14 = sub_1B63581E4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    uint64_t v16 = sub_1B6A00108(v5, 1);
    int v15 = sub_1B637C7BC(v9, v11, v16, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v17 = *(void *)(*(void *)(v6 + 80) + 8 * v15 + 32);
  uint64_t v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  uint64_t v19 = sub_1B6B1E830(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v19;
}

uint64_t sub_1B6D7CA24(unint64_t a1, uint64_t a2, __n128 a3, __n128 a4, float a5)
{
  uint64_t v8 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v8);
  uint64_t v9 = ecs_stack_allocator_allocate(v8, 64, 8);
  void *v9 = &type metadata for Position;
  v9[1] = &off_1F0FA6EE0;
  v9[2] = &type metadata for Orientation;
  v9[3] = &off_1F0F560A8;
  void v9[4] = &type metadata for Scale1;
  v9[5] = &off_1F0FA0DD0;
  int64x2_t v9[6] = &type metadata for WorldTransform;
  v9[7] = &off_1F0F67720;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v12);
  uint64_t v13 = sub_1B69E2E04((uint64_t)v9, 4, MEMORY[0x1E4FBC860]);
  uint64_t v15 = v14;
  uint64_t v16 = sub_1B637FE60(v13);
  if ((v17 & 1) != 0 || (unint64_t v18 = sub_1B63581E4(v15, v16), v19 = v18, (v18 & 0x100000000) != 0))
  {
    uint64_t v20 = sub_1B6A00108(v9, 4);
    int v19 = sub_1B637C7BC(v13, v15, v20, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v21 = *(void *)(*(void *)(v10 + 80) + 8 * v19 + 32);
  uint64_t v22 = *(os_unfair_lock_s **)(v11 + 24);
  swift_retain();
  os_unfair_lock_unlock(v22);
  swift_release();
  uint64_t v23 = sub_1B6B1EDAC(v21, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v23;
}

uint64_t sub_1B6D7CBFC(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  uint64_t v5 = ecs_stack_allocator_allocate(v4, 64, 8);
  *uint64_t v5 = &type metadata for Position;
  v5[1] = &off_1F0FA6EE0;
  _OWORD v5[2] = &type metadata for Orientation;
  _OWORD v5[3] = &off_1F0F560A8;
  v5[4] = &type metadata for Scale3;
  v5[5] = &off_1F0FA10A0;
  v5[6] = &type metadata for Name;
  v5[7] = &off_1F0F9E630;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  uint64_t v9 = sub_1B69E2E04((uint64_t)v5, 4, MEMORY[0x1E4FBC860]);
  uint64_t v11 = v10;
  uint64_t v12 = sub_1B637FE60(v9);
  if ((v13 & 1) != 0 || (unint64_t v14 = sub_1B63581E4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    uint64_t v16 = sub_1B6A00108(v5, 4);
    int v15 = sub_1B637C7BC(v9, v11, v16, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v17 = *(void *)(*(void *)(v6 + 80) + 8 * v15 + 32);
  unint64_t v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  uint64_t v19 = sub_1B6B1EF9C(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v19;
}

uint64_t sub_1B6D7CDB4(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  uint64_t v5 = ecs_stack_allocator_allocate(v4, 48, 8);
  *uint64_t v5 = &type metadata for VFXTag;
  v5[1] = &off_1F0FA2150;
  _OWORD v5[2] = type metadata accessor for VFXObjectTag();
  _OWORD v5[3] = &off_1F0F5D1E8;
  v5[4] = &type metadata for WorldTransform;
  v5[5] = &off_1F0F67720;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  uint64_t v9 = sub_1B69E2E04((uint64_t)v5, 3, MEMORY[0x1E4FBC860]);
  uint64_t v11 = v10;
  uint64_t v12 = sub_1B637FE60(v9);
  if ((v13 & 1) != 0 || (unint64_t v14 = sub_1B63581E4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    uint64_t v16 = sub_1B6A00108(v5, 3);
    int v15 = sub_1B637C7BC(v9, v11, v16, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v17 = *(void *)(*(void *)(v6 + 80) + 8 * v15 + 32);
  unint64_t v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  uint64_t v19 = sub_1B6B1EFC8(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v19;
}

uint64_t sub_1B6D7CF58(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  uint64_t v5 = ecs_stack_allocator_allocate(v4, 96, 8);
  *uint64_t v5 = &type metadata for Name;
  v5[1] = &off_1F0F9E630;
  _OWORD v5[2] = &type metadata for PointOfView;
  _OWORD v5[3] = &off_1F0F56588;
  v5[4] = &type metadata for WorldTransform;
  v5[5] = &off_1F0F67720;
  v5[6] = &type metadata for ProjectionMatrix;
  v5[7] = &off_1F0F6EED0;
  v5[8] = &type metadata for LastFrameWorldTransform;
  v5[9] = &off_1F0F8F498;
  v5[10] = &type metadata for Beamed;
  v5[11] = &off_1F0F9FB50;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  uint64_t v9 = sub_1B69E2E04((uint64_t)v5, 6, MEMORY[0x1E4FBC860]);
  uint64_t v11 = v10;
  uint64_t v12 = sub_1B637FE60(v9);
  if ((v13 & 1) != 0 || (unint64_t v14 = sub_1B63581E4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    uint64_t v16 = sub_1B6A00108(v5, 6);
    int v15 = sub_1B637C7BC(v9, v11, v16, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v17 = *(void *)(*(void *)(v6 + 80) + 8 * v15 + 32);
  unint64_t v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  uint64_t v19 = sub_1B6B1F194(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v19;
}

uint64_t sub_1B6D7D138(unint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, __n128 a6, float32x4_t a7)
{
  uint64_t v9 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v9);
  uint64_t v10 = ecs_stack_allocator_allocate(v9, 96, 8);
  *uint64_t v10 = &type metadata for Position;
  v10[1] = &off_1F0FA6EE0;
  _DWORD v10[2] = &type metadata for Orientation;
  v10[3] = &off_1F0F560A8;
  v10[4] = &type metadata for Scale3;
  v10[5] = &off_1F0FA10A0;
  int64x2_t v10[6] = &type metadata for WorldTransform;
  v10[7] = &off_1F0F67720;
  v10[8] = &type metadata for ParticlePlaneCollider;
  v10[9] = &off_1F0F895A0;
  v10[10] = &type metadata for NotInHierarchy;
  v10[11] = &off_1F0F64B60;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = v11 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  char v13 = *(os_unfair_lock_s **)(v11 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v13);
  uint64_t v14 = sub_1B69E2E04((uint64_t)v10, 6, MEMORY[0x1E4FBC860]);
  uint64_t v16 = v15;
  uint64_t v17 = sub_1B637FE60(v14);
  if ((v18 & 1) != 0 || (unint64_t v19 = sub_1B63581E4(v16, v17), v20 = v19, (v19 & 0x100000000) != 0))
  {
    uint64_t v21 = sub_1B6A00108(v10, 6);
    int v20 = sub_1B637C7BC(v14, v16, v21, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v22 = *(void *)(*(void *)(v11 + 80) + 8 * v20 + 32);
  uint64_t v23 = *(os_unfair_lock_s **)(v12 + 24);
  swift_retain();
  os_unfair_lock_unlock(v23);
  swift_release();
  uint64_t v24 = sub_1B6B1F1C0(v22, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5, a6, a7);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v24;
}

uint64_t sub_1B6D7D338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v8 = v6;
  sub_1B6BF85D0(a3, a4, a2, (uint64_t)&v29);
  if (v30)
  {
    sub_1B62C15C4(&v29, (uint64_t)&v32);
    sub_1B62C1550((uint64_t)&v32, (uint64_t)&v27);
    sub_1B62C5560(0, (unint64_t *)&qword_1EB97EAE0);
    sub_1B62C5560(0, &qword_1EB97E3B0);
    if (swift_dynamicCast())
    {
      sub_1B62C15C4(v25, (uint64_t)&v29);
      uint64_t v11 = v30;
      uint64_t v12 = v31;
      sub_1B62C14BC(&v29, v30);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 + 8) + 48))(a5, v11);
      if (v13)
      {
        uint64_t v14 = v13;
        swift_release();
        *uint64_t v8 = a2;
        v8[1] = v14;
      }
      else
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        uint64_t v27 = 0;
        unint64_t v28 = 0xE000000000000000;
        swift_retain();
        sub_1B6E328C8();
        sub_1B6E31948();
        *(void *)&v25[0] = a5;
        sub_1B6D80C10(0, a6);
        sub_1B6E32B18();
        sub_1B6E31948();
        sub_1B681F698();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        sub_1B6E33B48();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        uint64_t v22 = v27;
        uint64_t v21 = v28;
        int v23 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        uint64_t v27 = 0;
        swift_retain();
        sub_1B6B33E34(v23, &v27, v22, v21);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v32);
      int v20 = (uint64_t *)&v29;
    }
    else
    {
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      sub_1B62C5EB0((uint64_t)v25, (unint64_t *)&unk_1E9DD3AA8, &qword_1EB97E3B0);
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      *(void *)&long long v29 = 0;
      *((void *)&v29 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      sub_1B6E31948();
      sub_1B6E32B18();
      sub_1B6E31948();
      long long v18 = v29;
      int v19 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      *(void *)&long long v29 = 0;
      swift_retain();
      sub_1B6B33E34(v19, (uint64_t *)&v29, v18, *((uint64_t *)&v18 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      int v20 = &v32;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v20);
  }
  else
  {
    sub_1B62C5EB0((uint64_t)&v29, (unint64_t *)&qword_1EB97EAF0, (unint64_t *)&qword_1EB97EAE0);
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    uint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    uint64_t v32 = 0x6E656E6F706D6F63;
    unint64_t v33 = 0xEA00000000002074;
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v16 = v32;
    uint64_t v15 = v33;
    int v17 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v32 = 0;
    swift_retain();
    sub_1B6B33E34(v17, &v32, v16, v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6D7D90C(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  uint64_t v5 = ecs_stack_allocator_allocate(v4, 32, 8);
  *uint64_t v5 = &type metadata for WorldTransform;
  v5[1] = &off_1F0F67720;
  _OWORD v5[2] = &type metadata for Beamed;
  _OWORD v5[3] = &off_1F0F9FB50;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  uint64_t v9 = sub_1B69E2E04((uint64_t)v5, 2, MEMORY[0x1E4FBC860]);
  uint64_t v11 = v10;
  uint64_t v12 = sub_1B637FE60(v9);
  if ((v13 & 1) != 0 || (unint64_t v14 = sub_1B63581E4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    uint64_t v16 = sub_1B6A00108(v5, 2);
    int v15 = sub_1B637C7BC(v9, v11, v16, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v17 = *(void *)(*(void *)(v6 + 80) + 8 * v15 + 32);
  long long v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  uint64_t v19 = sub_1B6B1F3B0(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v19;
}

uint64_t sub_1B6D7DA9C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  *(unsigned char *)(a1 + 16) = a3;
  *(float *)a2 = a6;
  *(unsigned char *)(a2 + 21) = 1;
  *(void *)(a2 + 40) = a4;
  uint64_t v14 = *(void *)(a5 + 32);
  uint64_t v15 = *(void *)(a5 + 40);
  uint64_t v16 = *(void *)(a5 + 48);
  char v17 = *(unsigned char *)(a5 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v16;
  *(unsigned char *)(a1 + 48) = v17;
  unint64_t v18 = *(void *)(a5 + 16);
  if (v18 >= 2)
  {
    uint64_t v19 = *(void *)(a5 + 64);
    uint64_t v20 = *(void *)(a5 + 72);
    uint64_t v21 = *(void *)(a5 + 80);
    char v22 = *(unsigned char *)(a5 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 56) = v19;
    *(void *)(a1 + 64) = v20;
    *(void *)(a1 + 72) = v21;
    *(unsigned char *)(a1 + 80) = v22;
    if (v18 != 2)
    {
      uint64_t v23 = *(void *)(a5 + 96);
      uint64_t v24 = *(void *)(a5 + 104);
      uint64_t v25 = *(void *)(a5 + 112);
      char v26 = *(unsigned char *)(a5 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = v23;
      *(void *)(a1 + 96) = v24;
      *(void *)(a1 + 104) = v25;
      *(unsigned char *)(a1 + 112) = v26;
      if (v18 >= 4)
      {
        uint64_t v27 = *(void *)(a5 + 128);
        uint64_t v28 = *(void *)(a5 + 136);
        uint64_t v29 = *(void *)(a5 + 144);
        char v30 = *(unsigned char *)(a5 + 152);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 120) = v27;
        *(void *)(a1 + 128) = v28;
        *(void *)(a1 + 136) = v29;
        *(unsigned char *)(a1 + 144) = v30;
      }
    }
  }
  uint64_t v31 = swift_retain();
  sub_1B6D7D338(v31, a8, a10, a11, a9, a12);
  return swift_release();
}

uint64_t sub_1B6D7DCB0(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1B69E2E04((uint64_t)a1, a3, a4);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_1B637FE60(v9);
  if ((v13 & 1) != 0 || (unint64_t v14 = sub_1B63581E4(v11, v12), (v14 & 0x100000000) != 0))
  {
    uint64_t v15 = sub_1B6A00108(a1, a3);
    swift_bridgeObjectRetain();
    LODWORD(v14) = sub_1B637C7BC(v9, v11, v15, a4);
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = *(void *)(*(void *)(v4 + 80) + 8 * (int)v14 + 32);
  char v17 = *(os_unfair_lock_s **)(v8 + 24);
  swift_retain();
  os_unfair_lock_unlock(v17);
  return v16;
}

uint64_t sub_1B6D7DDB8(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  uint64_t v5 = ecs_stack_allocator_allocate(v4, 112, 8);
  *uint64_t v5 = &type metadata for Position;
  v5[1] = &off_1F0FA6EE0;
  _OWORD v5[2] = &type metadata for Orientation;
  _OWORD v5[3] = &off_1F0F560A8;
  v5[4] = &type metadata for Scale3;
  v5[5] = &off_1F0FA10A0;
  v5[6] = &type metadata for Name;
  v5[7] = &off_1F0F9E630;
  v5[8] = &type metadata for PointOfView;
  v5[9] = &off_1F0F56588;
  v5[10] = &type metadata for WorldTransform;
  v5[11] = &off_1F0F67720;
  uint64_t v5[12] = &type metadata for ProjectionMatrix;
  v5[13] = &off_1F0F6EED0;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  uint64_t v9 = sub_1B69E2E04((uint64_t)v5, 7, MEMORY[0x1E4FBC860]);
  uint64_t v11 = v10;
  uint64_t v12 = sub_1B637FE60(v9);
  if ((v13 & 1) != 0 || (unint64_t v14 = sub_1B63581E4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    uint64_t v16 = sub_1B6A00108(v5, 7);
    int v15 = sub_1B637C7BC(v9, v11, v16, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v17 = *(void *)(*(void *)(v6 + 80) + 8 * v15 + 32);
  unint64_t v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  uint64_t v19 = sub_1B6B1F730(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v19;
}

uint64_t sub_1B6D7DFAC(uint64_t a1, unint64_t a2, uint64_t a3, long long *a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v11 = *(void *)(a3 + 32);
  ecs_stack_allocator_push_snapshot(v11);
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = 16 * v12;
  unint64_t v14 = ecs_stack_allocator_allocate(v11, 16 * v12 + 48, 8);
  int v15 = v14;
  *unint64_t v14 = &type metadata for DebugInfoWireframePrimitive;
  v14[1] = &off_1F0F974E8;
  _OWORD v14[2] = &type metadata for WorldTransform;
  v14[3] = &off_1F0F67720;
  void v14[4] = &type metadata for Beamed;
  v14[5] = &off_1F0F9FB50;
  if (!v12)
  {
    uint64_t v23 = 3;
    goto LABEL_18;
  }
  if (v12 < 0x14
    || ((unint64_t v16 = (unint64_t)(v14 + 6),
         uint64_t v17 = 2 * (v12 - 1),
         unint64_t v18 = (unint64_t)&v14[v17 + 6],
         unint64_t v19 = (unint64_t)&v14[v17 + 7],
         v18 >= (unint64_t)(v14 + 6))
      ? (BOOL v20 = v19 >= (unint64_t)(v14 + 7))
      : (BOOL v20 = 0),
        v20 ? (BOOL v21 = (v12 - 1) >> 60 == 0) : (BOOL v21 = 0),
        !v21 || v16 < v13 + a1 + 32 && a1 + 32 < v16 + v13))
  {
    uint64_t v22 = 0;
    uint64_t v23 = 3;
LABEL_14:
    unint64_t v24 = v12 - v22;
    uint64_t v25 = (long long *)(a1 + 16 * v22 + 32);
    do
    {
      long long v26 = *v25++;
      *(_OWORD *)&v14[2 * v23++] = v26;
      --v24;
    }
    while (v24);
    goto LABEL_18;
  }
  uint64_t v22 = v12 & 0x7FFFFFFFFFFFFFFCLL;
  uint64_t v23 = v12 | 3;
  uint64_t v42 = (long long *)(a1 + 64);
  uint64_t v43 = v14 + 10;
  uint64_t v44 = v12 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    long long v46 = *(v42 - 2);
    long long v45 = *(v42 - 1);
    long long v48 = *v42;
    long long v47 = v42[1];
    v42 += 4;
    *(v43 - 2) = v46;
    *(v43 - 1) = v45;
    *uint64_t v43 = v48;
    v43[1] = v47;
    v43 += 4;
    v44 -= 4;
  }
  while (v44);
  if (v12 != v22) {
    goto LABEL_14;
  }
LABEL_18:
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v28 = v27 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v29 = *(os_unfair_lock_s **)(v27 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v29);
  uint64_t v30 = sub_1B69E2E04((uint64_t)v15, v23, MEMORY[0x1E4FBC860]);
  uint64_t v32 = v31;
  uint64_t v33 = sub_1B637FE60(v30);
  if ((v34 & 1) != 0 || (unint64_t v35 = sub_1B63581E4(v32, v33), v36 = v35, (v35 & 0x100000000) != 0))
  {
    uint64_t v37 = sub_1B6A00108(v15, v23);
    int v36 = sub_1B637C7BC(v30, v32, v37, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v38 = *(void *)(*(void *)(v27 + 80) + 8 * v36 + 32);
  uint64_t v39 = *(os_unfair_lock_s **)(v28 + 24);
  swift_retain();
  os_unfair_lock_unlock(v39);
  swift_release();
  uint64_t v40 = sub_1B6B1F3DC(v38, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), a3, a4, a5, a6, a7, a8);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a3 + 32));
  return v40;
}

uint64_t sub_1B6D7E238(uint64_t a1, unint64_t a2, uint64_t a3, long long *a4, int a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v12 = *(void *)(a3 + 32);
  ecs_stack_allocator_push_snapshot(v12);
  unint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = 16 * v13;
  int v15 = ecs_stack_allocator_allocate(v12, 16 * v13 + 64, 8);
  unint64_t v16 = v15;
  *int v15 = &type metadata for DebugInfoWireframePrimitive;
  v15[1] = &off_1F0F974E8;
  unint64_t v15[2] = &type metadata for DebugInfoColor;
  v15[3] = &off_1F0F63878;
  v15[4] = &type metadata for WorldTransform;
  v15[5] = &off_1F0F67720;
  v15[6] = &type metadata for Beamed;
  v15[7] = &off_1F0F9FB50;
  if (!v13)
  {
    uint64_t v24 = 4;
    goto LABEL_18;
  }
  if (v13 < 0x14
    || ((unint64_t v17 = (unint64_t)(v15 + 8),
         uint64_t v18 = 2 * (v13 - 1),
         unint64_t v19 = (unint64_t)&v15[v18 + 8],
         unint64_t v20 = (unint64_t)&v15[v18 + 9],
         v19 >= (unint64_t)(v15 + 8))
      ? (BOOL v21 = v20 >= (unint64_t)(v15 + 9))
      : (BOOL v21 = 0),
        v21 ? (BOOL v22 = (v13 - 1) >> 60 == 0) : (BOOL v22 = 0),
        !v22 || v17 < v14 + a1 + 32 && a1 + 32 < v17 + v14))
  {
    uint64_t v23 = 0;
    uint64_t v24 = 4;
LABEL_14:
    unint64_t v25 = v13 - v23;
    long long v26 = (long long *)(a1 + 16 * v23 + 32);
    do
    {
      long long v27 = *v26++;
      *(_OWORD *)&v15[2 * v24++] = v27;
      --v25;
    }
    while (v25);
    goto LABEL_18;
  }
  uint64_t v23 = v13 & 0x7FFFFFFFFFFFFFFCLL;
  uint64_t v24 = (v13 & 0x7FFFFFFFFFFFFFFCLL) + 4;
  uint64_t v43 = (long long *)(a1 + 64);
  uint64_t v44 = v15 + 12;
  uint64_t v45 = v13 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    long long v47 = *(v43 - 2);
    long long v46 = *(v43 - 1);
    long long v49 = *v43;
    long long v48 = v43[1];
    v43 += 4;
    *(v44 - 2) = v47;
    *(v44 - 1) = v46;
    *uint64_t v44 = v49;
    v44[1] = v48;
    v44 += 4;
    v45 -= 4;
  }
  while (v45);
  if (v13 != v23) {
    goto LABEL_14;
  }
LABEL_18:
  uint64_t v28 = *(void *)(a3 + 16);
  uint64_t v29 = v28 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v30 = *(os_unfair_lock_s **)(v28 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v30);
  uint64_t v31 = sub_1B69E2E04((uint64_t)v16, v24, MEMORY[0x1E4FBC860]);
  uint64_t v33 = v32;
  uint64_t v34 = sub_1B637FE60(v31);
  if ((v35 & 1) != 0 || (unint64_t v36 = sub_1B63581E4(v33, v34), v37 = v36, (v36 & 0x100000000) != 0))
  {
    uint64_t v38 = sub_1B6A00108(v16, v24);
    int v37 = sub_1B637C7BC(v31, v33, v38, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v39 = *(void *)(*(void *)(v28 + 80) + 8 * v37 + 32);
  uint64_t v40 = *(os_unfair_lock_s **)(v29 + 24);
  swift_retain();
  os_unfair_lock_unlock(v40);
  swift_release();
  uint64_t v41 = sub_1B6B1E9D4(v39, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), a3, a4, a5, a6, a7, a8, a9);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a3 + 32));
  return v41;
}

uint64_t sub_1B6D7E4E0(uint64_t a1, unint64_t a2, uint64_t a3, long long *a4, int a5)
{
  uint64_t v8 = *(void *)(a3 + 32);
  ecs_stack_allocator_push_snapshot(v8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = 2 * v9;
  uint64_t v11 = ecs_stack_allocator_allocate(v8, 16 * v9 + 32, 8);
  uint64_t v12 = v11;
  *uint64_t v11 = &type metadata for DebugInfoWireframePrimitive;
  v11[1] = &off_1F0F974E8;
  void v11[2] = &type metadata for DebugInfoColor;
  v11[3] = &off_1F0F63878;
  if (!v9)
  {
    uint64_t v15 = 2;
    goto LABEL_17;
  }
  if (v9 < 6
    || ((unint64_t)(v11 + 4) < a1 + v10 * 8 + 32 ? (BOOL v13 = a1 + 32 >= (unint64_t)&v11[v10 + 4]) : (BOOL v13 = 1),
        !v13))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 2;
LABEL_13:
    unint64_t v23 = v9 - v14;
    uint64_t v24 = (long long *)(a1 + 16 * v14 + 32);
    do
    {
      long long v25 = *v24++;
      *(_OWORD *)&v11[2 * v15++] = v25;
      --v23;
    }
    while (v23);
    goto LABEL_17;
  }
  uint64_t v14 = v9 & 0x7FFFFFFFFFFFFFFCLL;
  uint64_t v15 = v9 & 0x7FFFFFFFFFFFFFFCLL | 2;
  unint64_t v16 = (long long *)(a1 + 64);
  unint64_t v17 = v11 + 8;
  uint64_t v18 = v9 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    long long v20 = *(v16 - 2);
    long long v19 = *(v16 - 1);
    long long v22 = *v16;
    long long v21 = v16[1];
    v16 += 4;
    *(v17 - 2) = v20;
    *(v17 - 1) = v19;
    *unint64_t v17 = v22;
    v17[1] = v21;
    v17 += 4;
    v18 -= 4;
  }
  while (v18);
  if (v9 != v14) {
    goto LABEL_13;
  }
LABEL_17:
  uint64_t v26 = *(void *)(a3 + 16);
  uint64_t v27 = v26 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v28 = *(os_unfair_lock_s **)(v26 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v28);
  uint64_t v29 = sub_1B69E2E04((uint64_t)v12, v15, MEMORY[0x1E4FBC860]);
  uint64_t v31 = v30;
  uint64_t v32 = sub_1B637FE60(v29);
  if ((v33 & 1) != 0 || (unint64_t v34 = sub_1B63581E4(v31, v32), v35 = v34, (v34 & 0x100000000) != 0))
  {
    uint64_t v36 = sub_1B6A00108(v12, v15);
    int v35 = sub_1B637C7BC(v29, v31, v36, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v37 = *(void *)(*(void *)(v26 + 80) + 8 * v35 + 32);
  uint64_t v38 = *(os_unfair_lock_s **)(v27 + 24);
  swift_retain();
  os_unfair_lock_unlock(v38);
  swift_release();
  uint64_t v39 = sub_1B6B1EBC8(v37, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), a3, a4, a5);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a3 + 32));
  return v39;
}

double sub_1B6D7E720(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = sub_1B62C91B8((uint64_t)&type metadata for WorldTransform);
  if (v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = (_OWORD *)(v2 + (v1 << 6));
  }
  sub_1B62C91B8((uint64_t)&type metadata for Beamed);
  *uint64_t v4 = xmmword_1B6E4F300;
  v4[1] = xmmword_1B6E4F320;
  double result = 0.0;
  v4[2] = xmmword_1B6E4F2E0;
  v4[3] = xmmword_1B6E4F370;
  return result;
}

__n128 sub_1B6D7E7B8(uint64_t a1, long long *a2, int a3)
{
  sub_1B6C1E33C(a2, (uint64_t)v19);
  long long v17 = v19[1];
  long long v18 = v19[0];
  long long v15 = v19[3];
  long long v16 = v19[2];
  __n128 v14 = (__n128)v19[4];
  uint64_t v5 = v20;
  uint64_t v6 = v21;
  char v7 = v22;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = sub_1B62C91B8((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v9 + 112 * v8;
  }
  uint64_t v12 = sub_1B62C91B8((uint64_t)&type metadata for DebugInfoColor);
  *(_OWORD *)uint64_t v11 = v18;
  *(_OWORD *)(v11 + 16) = v17;
  *(_OWORD *)(v11 + 32) = v16;
  *(_OWORD *)(v11 + 48) = v15;
  __n128 result = v14;
  *(__n128 *)(v11 + 64) = v14;
  *(void *)(v11 + 80) = v5;
  *(void *)(v11 + 88) = v6;
  *(unsigned char *)(v11 + 96) = v7;
  *(_DWORD *)(v12 + 4 * v8) = a3;
  return result;
}

__n128 sub_1B6D7E8B8(uint64_t a1, long long *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  sub_1B6C1E33C(a2, (uint64_t)v27);
  long long v21 = v27[1];
  long long v22 = v27[0];
  long long v19 = v27[3];
  long long v20 = v27[2];
  long long v18 = v27[4];
  uint64_t v7 = v28;
  uint64_t v8 = v29;
  char v9 = v30;
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = sub_1B62C91B8((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v11 + 112 * v10;
  }
  uint64_t v14 = sub_1B62C91B8((uint64_t)&type metadata for WorldTransform);
  if (v15) {
    long long v16 = 0;
  }
  else {
    long long v16 = (__n128 *)(v14 + (v10 << 6));
  }
  sub_1B62C91B8((uint64_t)&type metadata for Beamed);
  *(_OWORD *)uint64_t v13 = v22;
  *(_OWORD *)(v13 + 16) = v21;
  *(_OWORD *)(v13 + 32) = v20;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  *(void *)(v13 + 80) = v7;
  *(void *)(v13 + 88) = v8;
  *(unsigned char *)(v13 + 96) = v9;
  *long long v16 = a3;
  v16[1] = a4;
  __n128 result = a6;
  uint64_t v16[2] = a5;
  v16[3] = a6;
  return result;
}

__n128 sub_1B6D7E9EC(uint64_t a1, __n128 a2, __n128 a3, float a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = sub_1B62C91B8((uint64_t)&type metadata for Position);
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (__n128 *)(v6 + 16 * v5);
  }
  uint64_t v9 = sub_1B62C91B8((uint64_t)&type metadata for Orientation);
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (__n128 *)(v9 + 16 * v5);
  }
  uint64_t v12 = sub_1B62C91B8((uint64_t)&type metadata for Scale1);
  if (v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (float *)(v12 + 4 * v5);
  }
  sub_1B62C91B8((uint64_t)&type metadata for WorldTransform);
  __n128 v15 = a2;
  v15.n128_u32[3] = 1.0;
  *uint64_t v8 = v15;
  __n128 result = a3;
  *uint64_t v11 = a3;
  *uint64_t v14 = a4;
  return result;
}

uint64_t sub_1B6D7EAE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = sub_1B62C91B8((uint64_t)&type metadata for Position);
  uint64_t v3 = 16 * v1;
  if (v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (_OWORD *)(v2 + v3);
  }
  uint64_t v6 = sub_1B62C91B8((uint64_t)&type metadata for Orientation);
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (_OWORD *)(v6 + v3);
  }
  uint64_t v9 = sub_1B62C91B8((uint64_t)&type metadata for Scale3);
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (_OWORD *)(v9 + v3);
  }
  uint64_t v12 = sub_1B62C91B8((uint64_t)&type metadata for Name);
  if (v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (void *)(v12 + v3);
  }
  *uint64_t v5 = xmmword_1B6E4F370;
  __asm { FMOV            V1.4S, #1.0 }
  *uint64_t v11 = _Q1;
  *uint64_t v8 = xmmword_1B6E4F370;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v14 = 0x746F6F72656874;
  v14[1] = 0xE700000000000000;
  return result;
}

__n128 sub_1B6D7EBEC(uint64_t a1, long long *a2, int a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  sub_1B6C1E33C(a2, (uint64_t)v32);
  long long v26 = v32[1];
  long long v27 = v32[0];
  long long v24 = v32[3];
  long long v25 = v32[2];
  long long v23 = v32[4];
  uint64_t v9 = v33;
  uint64_t v10 = v34;
  char v11 = v35;
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = sub_1B62C91B8((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if (v14) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v13 + 112 * v12;
  }
  uint64_t v16 = sub_1B62C91B8((uint64_t)&type metadata for DebugInfoColor);
  if (v17) {
    long long v18 = 0;
  }
  else {
    long long v18 = (_DWORD *)(v16 + 4 * v12);
  }
  uint64_t v19 = sub_1B62C91B8((uint64_t)&type metadata for WorldTransform);
  if (v20) {
    long long v21 = 0;
  }
  else {
    long long v21 = (__n128 *)(v19 + (v12 << 6));
  }
  sub_1B62C91B8((uint64_t)&type metadata for Beamed);
  *(_OWORD *)uint64_t v15 = v27;
  *(_OWORD *)(v15 + 16) = v26;
  *(_OWORD *)(v15 + 32) = v25;
  *(_OWORD *)(v15 + 48) = v24;
  *(_OWORD *)(v15 + 64) = v23;
  *(void *)(v15 + 80) = v9;
  *(void *)(v15 + 88) = v10;
  *(unsigned char *)(v15 + 96) = v11;
  *long long v18 = a3;
  __n128 *v21 = a4;
  v21[1] = a5;
  __n128 result = a7;
  void v21[2] = a6;
  v21[3] = a7;
  return result;
}

uint64_t sub_1B6D7ED54()
{
  return sub_1B62C91B8((uint64_t)&type metadata for Beamed);
}

double sub_1B6D7EE0C(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, __n128 a5, float32x4_t a6)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = sub_1B62C91B8((uint64_t)&type metadata for Position);
  uint64_t v8 = 16 * v6;
  if (v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (__n128 *)(v7 + 16 * v6);
  }
  uint64_t v11 = sub_1B62C91B8((uint64_t)&type metadata for Orientation);
  char v13 = v12;
  uint64_t v14 = sub_1B62C91B8((uint64_t)&type metadata for Scale3);
  if (v15) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = (float32x4_t *)(v14 + v8);
  }
  sub_1B62C91B8((uint64_t)&type metadata for WorldTransform);
  uint64_t v17 = sub_1B62C91B8((uint64_t)&type metadata for ParticlePlaneCollider);
  char v19 = v18;
  sub_1B62C91B8((uint64_t)&type metadata for NotInHierarchy);
  __n128 v20 = a5;
  v20.n128_u32[3] = 1.0;
  float32x4_t v21 = vmulq_f32(a2, a2);
  *uint64_t v10 = v20;
  float32x4_t v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
  v22.f32[0] = sqrtf(v22.f32[0]);
  float32x4_t v23 = vmulq_f32(a3, a3);
  float32x4_t v24 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2);
  float32x4_t v25 = vmulq_f32(a4, a4);
  v22.i32[1] = sqrtf(vaddq_f32(v24, vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
  v22.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
  *uint64_t v16 = vmulq_f32(v22, a6);
  int32x4_t v26 = vzip2q_s32((int32x4_t)v21, (int32x4_t)v25);
  float32x4_t v27 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v21, (int32x4_t)v25), (int32x4_t)v23);
  float32x4_t v28 = (float32x4_t)vtrn2q_s32((int32x4_t)v21, (int32x4_t)v23);
  v28.i32[2] = v25.i32[1];
  float32x4_t v29 = vaddq_f32((float32x4_t)vzip1q_s32(v26, (int32x4_t)v24), vaddq_f32(v27, v28));
  v27.i64[0] = 0x80000000800000;
  v27.i64[1] = 0x80000000800000;
  int8x16_t v30 = (int8x16_t)vcgeq_f32(v27, v29);
  v29.i32[3] = 0;
  float32x4_t v31 = vrsqrteq_f32(v29);
  float32x4_t v32 = vmulq_f32(v31, vrsqrtsq_f32(v29, vmulq_f32(v31, v31)));
  int32x4_t v33 = (int32x4_t)v30;
  v33.i32[3] = 0;
  float32x4_t v34 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v33), (int8x16_t)v29, (int8x16_t)vmulq_f32(v32, vrsqrtsq_f32(v29, vmulq_f32(v32, v32))));
  float32x4_t v35 = vmulq_n_f32(a2, v34.f32[0]);
  float32x4_t v36 = vmulq_lane_f32(a3, *(float32x2_t *)v34.f32, 1);
  float32x4_t v37 = vmulq_laneq_f32(a4, v34, 2);
  int8x16_t v38 = (int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37);
  int8x16_t v39 = (int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36);
  int32x4_t v40 = (int32x4_t)v35;
  if (v30.i32[0])
  {
    int8x16_t v41 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v38, (int8x16_t)v37, 0xCuLL), vnegq_f32(v36)), v37, (float32x4_t)vextq_s8(v39, (int8x16_t)v36, 0xCuLL));
    int32x4_t v40 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), v41, 0xCuLL);
  }
  int8x16_t v42 = (int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35);
  float32x4_t v43 = v36;
  if (v30.i32[1])
  {
    int8x16_t v44 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v42, (int8x16_t)v35, 0xCuLL), vnegq_f32(v37)), v35, (float32x4_t)vextq_s8(v38, (int8x16_t)v37, 0xCuLL));
    float32x4_t v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), v44, 0xCuLL);
  }
  if (v30.i32[2])
  {
    int8x16_t v30 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v39, (int8x16_t)v36, 0xCuLL), vnegq_f32(v35)), v36, (float32x4_t)vextq_s8(v42, (int8x16_t)v35, 0xCuLL));
    float32x4_t v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), v30, 0xCuLL);
  }
  float v45 = (float)(*(float *)v40.i32 + v43.f32[1]) + v37.f32[2];
  if (v45 <= 0.0)
  {
    if (*(float *)v40.i32 < v43.f32[1] || *(float *)v40.i32 < v37.f32[2])
    {
      if (v43.f32[1] <= v37.f32[2])
      {
        float v47 = sqrtf((float)((float)(v37.f32[2] + 1.0) - *(float *)v40.i32) - v43.f32[1]);
        *(float32x2_t *)v50.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v40, (int32x4_t)v43), *(float32x2_t *)v37.f32);
        float32x2_t v61 = (float32x2_t)__PAIR64__(v40.u32[1], LODWORD(v47));
        float32x2_t v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0);
        *(float32x2_t *)v49.f32 = vsub_f32(*(float32x2_t *)v40.i8, v62);
        v62.f32[0] = v47;
        v62.i32[0] = vmul_f32(v61, v62).u32[0];
        v62.i32[1] = v49.i32[1];
        *(float32x2_t *)&v50.u32[2] = v62;
        goto LABEL_24;
      }
      float v54 = sqrtf((float)((float)(v43.f32[1] + 1.0) - *(float *)v40.i32) - v37.f32[2]);
      *(int32x2_t *)v30.i8 = vdup_laneq_s32((int32x4_t)v43, 2);
      int8x16_t v52 = v30;
      *(float *)v52.i32 = v54;
      v52.i32[0] = vmul_f32(*(float32x2_t *)v52.i8, (float32x2_t)__PAIR64__(v37.u32[1], LODWORD(v54))).u32[0];
      v52.i32[1] = vadd_f32(*(float32x2_t *)&v30, *(float32x2_t *)&v37).i32[1];
      int8x16_t v53 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 1), v43);
      int32x2_t v59 = (int32x2_t)vsubq_f32(v37, (float32x4_t)vdupq_laneq_s32(v40, 2)).u64[0];
      float32x4_t v60 = (float32x4_t)vextq_s8(vextq_s8(v53, v53, 4uLL), v52, 0xCuLL);
      v60.i32[3] = v59.i32[0];
    }
    else
    {
      float v54 = sqrtf((float)((float)(*(float *)v40.i32 + 1.0) - v43.f32[1]) - v37.f32[2]);
      float32x2_t v55 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0);
      float32x2_t v56 = vadd_f32(*(float32x2_t *)v40.i8, v55);
      v55.f32[0] = v54;
      v60.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v40.u32[1], LODWORD(v54)), v55).u32[0];
      v60.i32[1] = v56.i32[1];
      float32x2_t v57 = (float32x2_t)vzip2q_s32(v40, (int32x4_t)v43).u64[0];
      LODWORD(v58) = vadd_f32(v57, *(float32x2_t *)v37.f32).u32[0];
      int32x2_t v59 = (int32x2_t)vsub_f32(v57, *(float32x2_t *)v37.f32);
      HIDWORD(v58) = v59.i32[1];
      v60.i64[1] = v58;
    }
    *(float *)v59.i32 = 0.5 / v54;
    float32x4_t v50 = (float32x4_t)vdupq_lane_s32(v59, 0);
    goto LABEL_25;
  }
  float32x4_t v46 = (float32x4_t)vzip2q_s32((int32x4_t)v43, vuzp1q_s32((int32x4_t)v43, (int32x4_t)v37));
  v46.i32[2] = v40.i32[1];
  float v47 = sqrtf(v45 + 1.0);
  float32x4_t v48 = (float32x4_t)vtrn2q_s32((int32x4_t)v37, vzip2q_s32((int32x4_t)v37, v40));
  v48.i32[2] = v43.i32[0];
  float32x4_t v50 = vsubq_f32(v46, v48);
  v46.f32[3] = v47;
  v48.f32[3] = v47;
  float32x4_t v49 = vmulq_f32(v46, v48);
  v50.i32[3] = v49.i32[3];
LABEL_24:
  v49.f32[0] = 0.5 / v47;
  float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0);
LABEL_25:
  float32x4_t v63 = vmulq_f32(v50, v60);
  uint64_t v64 = v17 + 28 * v6;
  if (v19) {
    uint64_t v64 = 0;
  }
  uint64_t v65 = (float32x4_t *)(v11 + v8);
  if (v13) {
    uint64_t v65 = 0;
  }
  float32x4_t *v65 = v63;
  *(unsigned char *)uint64_t v64 = 0;
  *(void *)&double result = 1065353216;
  *(void *)(v64 + 12) = 1065353216;
  return result;
}

double sub_1B6D7F204(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = sub_1B62C91B8((uint64_t)&type metadata for Position);
  uint64_t v3 = 16 * v1;
  if (v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (_OWORD *)(v2 + 16 * v1);
  }
  uint64_t v6 = sub_1B62C91B8((uint64_t)&type metadata for Orientation);
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (_OWORD *)(v6 + v3);
  }
  uint64_t v9 = sub_1B62C91B8((uint64_t)&type metadata for Scale3);
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (_OWORD *)(v9 + v3);
  }
  uint64_t v12 = sub_1B62C91B8((uint64_t)&type metadata for Name);
  if (v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (void *)(v12 + v3);
  }
  sub_1B62C91B8((uint64_t)&type metadata for PointOfView);
  sub_1B62C91B8((uint64_t)&type metadata for WorldTransform);
  sub_1B62C91B8((uint64_t)&type metadata for ProjectionMatrix);
  swift_bridgeObjectRelease();
  *uint64_t v14 = 0x6172656D6143;
  v14[1] = 0xE600000000000000;
  double result = 0.0;
  *uint64_t v5 = xmmword_1B6E4F370;
  __asm { FMOV            V1.4S, #1.0 }
  *uint64_t v11 = _Q1;
  *uint64_t v8 = xmmword_1B6E4F370;
  return result;
}

uint64_t sub_1B6D7F350(uint64_t a1, char a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = sub_1B62C91B8((uint64_t)&type metadata for Material);
  if (v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v10 + 104 * v9;
  }
  *(unsigned char *)uint64_t v12 = a2;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(v12 + 8) = a3;
  *(_DWORD *)(v12 + 40) = a4;
  *(unsigned char *)(v12 + 44) = BYTE4(a4) & 1;
  *(float *)(v12 + 48) = a5;
  return result;
}

uint64_t sub_1B6D7F3F8(unint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, float a6)
{
  uint64_t v10 = *(void *)(a2 + 32);
  swift_retain();
  ecs_stack_allocator_push_snapshot(v10);
  char v11 = ecs_stack_allocator_allocate(v10, 16, 8);
  *char v11 = &type metadata for Material;
  v11[1] = &off_1F0FA65D0;
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v14 = *(os_unfair_lock_s **)(v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  uint64_t v15 = sub_1B69E2E04((uint64_t)v11, 1, MEMORY[0x1E4FBC860]);
  uint64_t v17 = v16;
  uint64_t v18 = sub_1B637FE60(v15);
  if ((v19 & 1) != 0 || (unint64_t v20 = sub_1B63581E4(v17, v18), v21 = v20, (v20 & 0x100000000) != 0))
  {
    uint64_t v22 = sub_1B6A00108(v11, 1);
    int v21 = sub_1B637C7BC(v15, v17, v22, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v23 = *(void *)(*(void *)(v12 + 80) + 8 * v21 + 32);
  float32x4_t v24 = *(os_unfair_lock_s **)(v13 + 24);
  swift_retain();
  os_unfair_lock_unlock(v24);
  swift_release();
  swift_retain();
  uint64_t v25 = sub_1B6B23134(v23, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6);
  swift_release();
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  swift_release();
  return v25;
}

uint64_t sub_1B6D7F5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = sub_1B62C91B8((uint64_t)&type metadata for SkeletalAnimationPlayer);
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (void *)(v6 + 16 * v5);
  }
  *uint64_t v8 = a2;
  swift_retain();
  uint64_t result = swift_release();
  v8[1] = a3;
  return result;
}

uint64_t sub_1B6D7F654(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 32);
  swift_retain();
  ecs_stack_allocator_push_snapshot(v7);
  uint64_t v8 = ecs_stack_allocator_allocate(v7, 16, 8);
  *uint64_t v8 = &type metadata for SkeletalAnimationPlayer;
  v8[1] = &off_1F0F91658;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  char v11 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  uint64_t v12 = sub_1B69E2E04((uint64_t)v8, 1, MEMORY[0x1E4FBC860]);
  uint64_t v14 = v13;
  uint64_t v15 = sub_1B637FE60(v12);
  if ((v16 & 1) != 0 || (unint64_t v17 = sub_1B63581E4(v14, v15), v18 = v17, (v17 & 0x100000000) != 0))
  {
    uint64_t v19 = sub_1B6A00108(v8, 1);
    int v18 = sub_1B637C7BC(v12, v14, v19, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v20 = *(void *)(*(void *)(v9 + 80) + 8 * v18 + 32);
  int v21 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_unlock(v21);
  swift_release();
  swift_retain();
  uint64_t v22 = sub_1B6B23358(v20, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4);
  swift_release();
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  swift_release();
  return v22;
}

uint64_t sub_1B6D7F800(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = sub_1B62C91B8((uint64_t)&type metadata for Name);
  if (v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (uint64_t *)(v4 + 16 * v3);
  }
  sub_1B62C91B8((uint64_t)&type metadata for WorldTransform);
  id v7 = objc_msgSend(a2, sel_name);
  uint64_t v8 = sub_1B6E31798();
  uint64_t v10 = v9;

  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = v8;
  v6[1] = v10;
  return result;
}

uint64_t sub_1B6D7F8B4(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a2 + 32);
  id v6 = a3;
  ecs_stack_allocator_push_snapshot(v5);
  id v7 = ecs_stack_allocator_allocate(v5, 32, 8);
  *id v7 = &type metadata for Name;
  v7[1] = &off_1F0F9E630;
  _OWORD v7[2] = &type metadata for WorldTransform;
  _OWORD v7[3] = &off_1F0F67720;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v10 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  uint64_t v11 = sub_1B69E2E04((uint64_t)v7, 2, MEMORY[0x1E4FBC860]);
  uint64_t v13 = v12;
  uint64_t v14 = sub_1B637FE60(v11);
  if ((v15 & 1) != 0 || (unint64_t v16 = sub_1B63581E4(v13, v14), v17 = v16, (v16 & 0x100000000) != 0))
  {
    uint64_t v18 = sub_1B6A00108(v7, 2);
    int v17 = sub_1B637C7BC(v11, v13, v18, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v19 = *(void *)(*(void *)(v8 + 80) + 8 * v17 + 32);
  uint64_t v20 = *(os_unfair_lock_s **)(v9 + 24);
  swift_retain();
  os_unfair_lock_unlock(v20);
  swift_release();
  id v21 = v6;
  uint64_t v22 = sub_1B6B23560(v19, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, v21);
  swift_release();

  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v22;
}

uint64_t sub_1B6D7FA64(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = sub_1B62C91B8((uint64_t)&type metadata for Material);
  if (v15) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v14 + 104 * v13;
  }
  uint64_t v17 = sub_1B62C91B8((uint64_t)&type metadata for Name);
  if (v18) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = (void *)(v17 + 16 * v13);
  }
  *(unsigned char *)uint64_t v16 = a2;
  swift_retain();
  swift_release();
  *(void *)(v16 + 8) = a3;
  *(_DWORD *)(v16 + 40) = a4;
  *(unsigned char *)(v16 + 44) = BYTE4(a4) & 1;
  *(float *)(v16 + 48) = a7;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v19 = a5;
  v19[1] = a6;
  return result;
}

uint64_t sub_1B6D7FB60(unint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v12 = *(void *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  ecs_stack_allocator_push_snapshot(v12);
  uint64_t v13 = ecs_stack_allocator_allocate(v12, 32, 8);
  *uint64_t v13 = &type metadata for Material;
  v13[1] = &off_1F0FA65D0;
  _OWORD v13[2] = &type metadata for Name;
  v13[3] = &off_1F0F9E630;
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = v14 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v16 = *(os_unfair_lock_s **)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v16);
  uint64_t v17 = sub_1B69E2E04((uint64_t)v13, 2, MEMORY[0x1E4FBC860]);
  uint64_t v19 = v18;
  uint64_t v20 = sub_1B637FE60(v17);
  if ((v21 & 1) != 0 || (unint64_t v22 = sub_1B63581E4(v19, v20), v23 = v22, (v22 & 0x100000000) != 0))
  {
    uint64_t v24 = sub_1B6A00108(v13, 2);
    int v23 = sub_1B637C7BC(v17, v19, v24, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v25 = *(void *)(*(void *)(v14 + 80) + 8 * v23 + 32);
  int32x4_t v26 = *(os_unfair_lock_s **)(v15 + 24);
  swift_retain();
  os_unfair_lock_unlock(v26);
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_1B6B235B8(v25, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a8, a6, a7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  return v27;
}

uint64_t sub_1B6D7FD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = sub_1B62C91B8((uint64_t)&type metadata for MeshModel);
  uint64_t v11 = 16 * v9;
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = (void *)(v10 + v11);
  }
  uint64_t v14 = sub_1B62C91B8((uint64_t)&type metadata for Name);
  if (v15) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = (void *)(v14 + v11);
  }
  swift_retain();
  swift_release();
  *uint64_t v13 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13[1] = a3;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v16 = a4;
  v16[1] = a5;
  return result;
}

uint64_t sub_1B6D7FE64(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ecs_stack_allocator_push_snapshot(v10);
  uint64_t v11 = ecs_stack_allocator_allocate(v10, 32, 8);
  *uint64_t v11 = &type metadata for MeshModel;
  v11[1] = &off_1F0FA8FD8;
  void v11[2] = &type metadata for Name;
  v11[3] = &off_1F0F9E630;
  uint64_t v29 = a2;
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v14 = *(os_unfair_lock_s **)(v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  uint64_t v15 = sub_1B69E2E04((uint64_t)v11, 2, MEMORY[0x1E4FBC860]);
  uint64_t v17 = v16;
  uint64_t v18 = sub_1B637FE60(v15);
  if ((v19 & 1) != 0 || (unint64_t v20 = sub_1B63581E4(v17, v18), v21 = v20, (v20 & 0x100000000) != 0))
  {
    uint64_t v22 = sub_1B6A00108(v11, 2);
    int v21 = sub_1B637C7BC(v15, v17, v22, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v23 = *(void *)(*(void *)(v12 + 80) + 8 * v21 + 32);
  uint64_t v24 = *(os_unfair_lock_s **)(v13 + 24);
  swift_retain();
  os_unfair_lock_unlock(v24);
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1B6B23808(v23, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), v29, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ecs_stack_allocator_pop_snapshot(*(void *)(v29 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v25;
}

id sub_1B6D8007C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = sub_1B62C91B8((uint64_t)&type metadata for Position);
  uint64_t v5 = 16 * v3;
  if (v6) {
    id v7 = 0;
  }
  else {
    id v7 = (_OWORD *)(v4 + 16 * v3);
  }
  uint64_t v8 = sub_1B62C91B8((uint64_t)&type metadata for Orientation);
  if (v9) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = (_OWORD *)(v8 + v5);
  }
  uint64_t v11 = sub_1B62C91B8((uint64_t)&type metadata for Scale3);
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = (_OWORD *)(v11 + v5);
  }
  sub_1B6B1BDF0(v3);
  sub_1B62C91B8((uint64_t)&type metadata for WorldTransform);
  objc_msgSend(a2, sel_position);
  HIDWORD(v14) = 1.0;
  *id v7 = v14;
  objc_msgSend(a2, sel_orientation);
  *uint64_t v10 = v15;
  id result = objc_msgSend(a2, sel_scale);
  *uint64_t v13 = v17;
  return result;
}

uint64_t sub_1B6D80198(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a2 + 32);
  id v6 = a3;
  ecs_stack_allocator_push_snapshot(v5);
  id v7 = ecs_stack_allocator_allocate(v5, 80, 8);
  *id v7 = &type metadata for Position;
  v7[1] = &off_1F0FA6EE0;
  _OWORD v7[2] = &type metadata for Orientation;
  _OWORD v7[3] = &off_1F0F560A8;
  double v7[4] = &type metadata for Scale3;
  v7[5] = &off_1F0FA10A0;
  v7[6] = type metadata accessor for VFXObjectTag();
  _OWORD v7[7] = &off_1F0F5D1E8;
  v7[8] = &type metadata for WorldTransform;
  v7[9] = &off_1F0F67720;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v10 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  uint64_t v11 = sub_1B69E2E04((uint64_t)v7, 5, MEMORY[0x1E4FBC860]);
  uint64_t v13 = v12;
  uint64_t v14 = sub_1B637FE60(v11);
  if ((v15 & 1) != 0 || (unint64_t v16 = sub_1B63581E4(v13, v14), v17 = v16, (v16 & 0x100000000) != 0))
  {
    uint64_t v18 = sub_1B6A00108(v7, 5);
    int v17 = sub_1B637C7BC(v11, v13, v18, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v19 = *(void *)(*(void *)(v8 + 80) + 8 * v17 + 32);
  unint64_t v20 = *(os_unfair_lock_s **)(v9 + 24);
  swift_retain();
  os_unfair_lock_unlock(v20);
  swift_release();
  id v21 = v6;
  uint64_t v22 = sub_1B6B23A5C(v19, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, v21);
  swift_release();

  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  return v22;
}

uint64_t sub_1B6D80384(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = sub_1B62C91B8((uint64_t)&type metadata for TextureFileData);
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = (uint64_t *)(v6 + 16 * v5);
  }
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_1B62FFBB0(a2, a3);
  uint64_t result = sub_1B665D488(v9, v10);
  *uint64_t v8 = a2;
  v8[1] = a3;
  return result;
}

uint64_t sub_1B6D8040C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = *(void *)(a3 + 32);
  sub_1B62FFBB0(a4, a5);
  ecs_stack_allocator_push_snapshot(v9);
  unint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = 2 * v10;
  uint64_t v12 = ecs_stack_allocator_allocate(v9, 16 * v10 + 16, 8);
  uint64_t v13 = v12;
  *uint64_t v12 = &type metadata for TextureFileData;
  v12[1] = &off_1F0F6A950;
  if (!v10)
  {
    uint64_t v16 = 1;
    goto LABEL_17;
  }
  if (v10 < 6
    || ((unint64_t)(v12 + 2) < v11 * 8 + a1 + 32 ? (BOOL v14 = a1 + 32 >= (unint64_t)&v12[v11 + 2]) : (BOOL v14 = 1),
        !v14))
  {
    uint64_t v15 = 0;
    uint64_t v16 = 1;
LABEL_13:
    unint64_t v24 = v10 - v15;
    uint64_t v25 = (long long *)(a1 + 16 * v15 + 32);
    do
    {
      long long v26 = *v25++;
      *(_OWORD *)&v12[2 * v16++] = v26;
      --v24;
    }
    while (v24);
    goto LABEL_17;
  }
  uint64_t v15 = v10 & 0x7FFFFFFFFFFFFFFCLL;
  uint64_t v16 = v10 & 0x7FFFFFFFFFFFFFFCLL | 1;
  int v17 = (long long *)(a1 + 64);
  uint64_t v18 = v12 + 6;
  uint64_t v19 = v10 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    long long v21 = *(v17 - 2);
    long long v20 = *(v17 - 1);
    long long v23 = *v17;
    long long v22 = v17[1];
    v17 += 4;
    *(v18 - 2) = v21;
    *(v18 - 1) = v20;
    *uint64_t v18 = v23;
    v18[1] = v22;
    v18 += 4;
    v19 -= 4;
  }
  while (v19);
  if (v10 != v15) {
    goto LABEL_13;
  }
LABEL_17:
  uint64_t v43 = a3;
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v28 = v27 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v29 = *(os_unfair_lock_s **)(v27 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v29);
  uint64_t v30 = sub_1B69E2E04((uint64_t)v13, v16, MEMORY[0x1E4FBC860]);
  uint64_t v32 = v31;
  uint64_t v33 = sub_1B637FE60(v30);
  if ((v34 & 1) != 0 || (unint64_t v35 = sub_1B63581E4(v32, v33), v36 = v35, (v35 & 0x100000000) != 0))
  {
    uint64_t v37 = sub_1B6A00108(v13, v16);
    int v36 = sub_1B637C7BC(v30, v32, v37, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v38 = *(void *)(*(void *)(v27 + 80) + 8 * v36 + 32);
  int8x16_t v39 = *(os_unfair_lock_s **)(v28 + 24);
  swift_retain();
  os_unfair_lock_unlock(v39);
  swift_release();
  sub_1B62FFBB0(a4, a5);
  uint64_t v40 = sub_1B6B23C94(v38, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), v43, a4, a5);
  sub_1B62C2360(a4, a5);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(v43 + 32));
  sub_1B62C2360(a4, a5);
  return v40;
}

uint64_t sub_1B6D80674(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  return sub_1B6D80764(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))sub_1B63B667C, a8, (uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, &qword_1E9DDA110);
}

uint64_t sub_1B6D806C8(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  return sub_1B6D809E4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1B63B667C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))sub_1B6B23EB0);
}

uint64_t sub_1B6D80710(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  return sub_1B6D80764(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))sub_1B63B65C8, a8, (uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, &qword_1E9DDA118);
}

uint64_t sub_1B6D80764(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), float a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = a8(0);
  uint64_t v20 = sub_1B62C91B8(v19);
  if (v21) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v20 + 152 * v18;
  }
  uint64_t v23 = sub_1B62C91B8((uint64_t)&type metadata for AnimationTimeSource);
  if (v24) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v23 + 60 * v18;
  }
  return sub_1B6D7DA9C(v22, v25, a2, a3, a4, a9, a5, a6, a7, a10, a11, a12);
}

uint64_t sub_1B6D80864(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  return sub_1B6D809E4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1B63B65C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))sub_1B6B23EF0);
}

uint64_t sub_1B6D808AC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  return sub_1B6D80764(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))sub_1B63B667C, a8, (uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, &qword_1E9DDA118);
}

uint64_t sub_1B6D80900(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  return sub_1B6D809E4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1B63B667C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))sub_1B6B23F30);
}

uint64_t sub_1B6D80948(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  return sub_1B6D80764(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))sub_1B63B667C, a8, (uint64_t)&type metadata for Scale3, (uint64_t)&off_1F0FA10A0, qword_1E9DDA120);
}

uint64_t sub_1B6D8099C(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  return sub_1B6D809E4(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))sub_1B63B667C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))sub_1B6B23F70);
}

uint64_t sub_1B6D809E4(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t (*a10)(void), uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  ecs_stack_allocator_push_snapshot(v15);
  uint64_t v16 = ecs_stack_allocator_allocate(v15, 32, 8);
  *uint64_t v16 = a10(0);
  v16[1] = &off_1F0F719D8;
  uint64_t v16[2] = &type metadata for AnimationTimeSource;
  v16[3] = &off_1F0F7C290;
  uint64_t v17 = *(void *)(a2 + 16);
  uint64_t v18 = v17 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v19 = *(os_unfair_lock_s **)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v19);
  uint64_t v20 = sub_1B69E2E04((uint64_t)v16, 2, MEMORY[0x1E4FBC860]);
  uint64_t v22 = v21;
  uint64_t v23 = sub_1B637FE60(v20);
  if ((v24 & 1) != 0 || (v25 = sub_1B63581E4(v22, v23), int v26 = v25, (v25 & 0x100000000) != 0))
  {
    uint64_t v27 = sub_1B6A00108(v16, 2);
    int v26 = sub_1B637C7BC(v20, v22, v27, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v28 = *(void *)(*(void *)(v17 + 80) + 8 * v26 + 32);
  uint64_t v29 = *(os_unfair_lock_s **)(v18 + 24);
  swift_retain();
  os_unfair_lock_unlock(v29);
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v30 = a11(v28, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5, a9, a6, a7, a8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  return v30;
}

void sub_1B6D80C10(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1B6E329F8();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_1B6D80C58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = sub_1B62C91B8((uint64_t)&type metadata for TextureGPURuntime);
  if (v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (void *)(v4 + 8 * v3);
  }
  sub_1B62C91B8((uint64_t)&type metadata for TextureRequireGPURepresentation);
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v6 = a2;
  return result;
}

uint64_t sub_1B6D80CE4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  ecs_stack_allocator_push_snapshot(v6);
  char v7 = ecs_stack_allocator_allocate(v6, 32, 8);
  *char v7 = &type metadata for TextureGPURuntime;
  v7[1] = &off_1F0F74BA8;
  _OWORD v7[2] = &type metadata for TextureRequireGPURepresentation;
  _OWORD v7[3] = &off_1F0F9AF80;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  unint64_t v10 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  uint64_t v11 = sub_1B69E2E04((uint64_t)v7, 2, MEMORY[0x1E4FBC860]);
  uint64_t v13 = v12;
  uint64_t v14 = sub_1B637FE60(v11);
  if ((v15 & 1) != 0 || (unint64_t v16 = sub_1B63581E4(v13, v14), v17 = v16, (v16 & 0x100000000) != 0))
  {
    uint64_t v18 = sub_1B6A00108(v7, 2);
    int v17 = sub_1B637C7BC(v11, v13, v18, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v19 = *(void *)(*(void *)(v8 + 80) + 8 * v17 + 32);
  uint64_t v20 = *(os_unfair_lock_s **)(v9 + 24);
  swift_retain();
  os_unfair_lock_unlock(v20);
  swift_release();
  swift_unknownObjectRetain();
  uint64_t v21 = sub_1B6B2420C(v19, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3);
  swift_release();
  swift_unknownObjectRelease();
  ecs_stack_allocator_pop_snapshot(*(void *)(a2 + 32));
  swift_unknownObjectRelease();
  return v21;
}

uint64_t sub_1B6D80EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 104);
}

uint64_t type metadata accessor for Query6()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1B6D80ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 88);
}

uint64_t type metadata accessor for Query5()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1B6D80EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 72);
}

uint64_t type metadata accessor for Query4()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Query3()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Query1()
{
  return sub_1B62C36EC();
}

uint64_t type metadata accessor for Query2()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1B6D80F5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v12 = a7(0);
  int v13 = *(_DWORD *)(v7 + 24);
  swift_retain();
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  int v14 = sub_1B637F628(v13, v12, (uint64_t)&off_1F0F84760, 0, 0, (uint64_t)v23, (uint64_t)v21);
  swift_release();
  sub_1B6386458((uint64_t)v21);
  sub_1B6386458((uint64_t)v23);
  if (*(void *)(v7 + 240) - *(void *)(v7 + 232) == a3 && sub_1B63B4340(v14)) {
    return sub_1B66603E4(v14);
  }
  int v16 = *(unsigned __int8 *)(v7 + 120);
  uint64_t v17 = *(unsigned int *)(v7 + 28);
  unsigned __int8 v18 = *(unsigned char *)(v7 + 32);
  if (a4) {
    uint64_t v19 = a4 + (a5 << 6);
  }
  else {
    uint64_t v19 = 0;
  }
  LOBYTE(v23[0]) = *(unsigned char *)(v7 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v14, v16, v17 | ((unint64_t)v18 << 32), a4, v19);
}

uint64_t sub_1B6D810B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v9 = a6(0);
  int v10 = *(_DWORD *)(v6 + 24);
  swift_retain();
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  int v11 = sub_1B637F628(v10, v9, (uint64_t)&off_1F0F84760, 0, 0, (uint64_t)v15, (uint64_t)v13);
  swift_release();
  sub_1B6386458((uint64_t)v13);
  sub_1B6386458((uint64_t)v15);
  if (a2 - a1 == *(void *)(v6 + 240) - *(void *)(v6 + 232) && sub_1B63B4340(v11)) {
    return sub_1B66603E4(v11);
  }
  else {
    return sub_1B628EEF4(a1, a2, v11, *(unsigned char *)(v6 + 120), *(unsigned int *)(v6 + 28) | ((unint64_t)*(unsigned __int8 *)(v6 + 32) << 32));
  }
}

uint64_t sub_1B6D81200(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1B63B13F0();
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  int v13 = sub_1B637F628(v12, v11, (uint64_t)&off_1F0F84760, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B6386458((uint64_t)v20);
  sub_1B6386458((uint64_t)v22);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v13)) {
    return sub_1B66603E4(v13);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + 40 * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v22[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v13, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D81354(uint64_t a1, uint64_t a2)
{
  sub_1B63B13F0();
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v8 = sub_1B637F628(v7, v6, (uint64_t)&off_1F0F84760, 0, 0, (uint64_t)v12, (uint64_t)v10);
  swift_release();
  sub_1B6386458((uint64_t)v10);
  sub_1B6386458((uint64_t)v12);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v8)) {
    return sub_1B66603E4(v8);
  }
  else {
    return sub_1B628EEF4(a1, a2, v8, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D814A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1B6D96724(0, &qword_1EB97F598, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  int v13 = sub_1B637F628(v12, v11, (uint64_t)&off_1F0F84760, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B6386458((uint64_t)v20);
  sub_1B6386458((uint64_t)v22);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v13)) {
    return sub_1B66603E4(v13);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + 32 * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v22[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v13, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D81610(uint64_t a1, uint64_t a2)
{
  sub_1B6D96724(0, &qword_1EB97F598, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v8 = sub_1B637F628(v7, v6, (uint64_t)&off_1F0F84760, 0, 0, (uint64_t)v12, (uint64_t)v10);
  swift_release();
  sub_1B6386458((uint64_t)v10);
  sub_1B6386458((uint64_t)v12);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v8)) {
    return sub_1B66603E4(v8);
  }
  else {
    return sub_1B628EEF4(a1, a2, v8, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D81778(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v12 = a7(0);
  int v13 = *(_DWORD *)(v7 + 24);
  swift_retain();
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  int v14 = sub_1B637F628(v13, v12, (uint64_t)&off_1F0F920F8, 0, 0, (uint64_t)v23, (uint64_t)v21);
  swift_release();
  sub_1B6386458((uint64_t)v21);
  sub_1B6386458((uint64_t)v23);
  if (*(void *)(v7 + 240) - *(void *)(v7 + 232) == a3 && sub_1B63B4340(v14)) {
    return sub_1B66603E4(v14);
  }
  int v16 = *(unsigned __int8 *)(v7 + 120);
  uint64_t v17 = *(unsigned int *)(v7 + 28);
  unsigned __int8 v18 = *(unsigned char *)(v7 + 32);
  if (a4) {
    uint64_t v19 = a4 + (a5 << 6);
  }
  else {
    uint64_t v19 = 0;
  }
  LOBYTE(v23[0]) = *(unsigned char *)(v7 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v14, v16, v17 | ((unint64_t)v18 << 32), a4, v19);
}

uint64_t sub_1B6D818CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v9 = a6(0);
  int v10 = *(_DWORD *)(v6 + 24);
  swift_retain();
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  int v11 = sub_1B637F628(v10, v9, (uint64_t)&off_1F0F920F8, 0, 0, (uint64_t)v15, (uint64_t)v13);
  swift_release();
  sub_1B6386458((uint64_t)v13);
  sub_1B6386458((uint64_t)v15);
  if (a2 - a1 == *(void *)(v6 + 240) - *(void *)(v6 + 232) && sub_1B63B4340(v11)) {
    return sub_1B66603E4(v11);
  }
  else {
    return sub_1B628EEF4(a1, a2, v11, *(unsigned char *)(v6 + 120), *(unsigned int *)(v6 + 28) | ((unint64_t)*(unsigned __int8 *)(v6 + 32) << 32));
  }
}

uint64_t sub_1B6D81A1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1B6666A24();
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  int v13 = sub_1B637F628(v12, v11, (uint64_t)&off_1F0F920F8, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B6386458((uint64_t)v20);
  sub_1B6386458((uint64_t)v22);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v13)) {
    return sub_1B66603E4(v13);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + 48 * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v22[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v13, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D81B70(uint64_t a1, uint64_t a2)
{
  sub_1B6666A24();
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v8 = sub_1B637F628(v7, v6, (uint64_t)&off_1F0F920F8, 0, 0, (uint64_t)v12, (uint64_t)v10);
  swift_release();
  sub_1B6386458((uint64_t)v10);
  sub_1B6386458((uint64_t)v12);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v8)) {
    return sub_1B66603E4(v8);
  }
  else {
    return sub_1B628EEF4(a1, a2, v8, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D81CC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1B6D96724(0, &qword_1EB97F920, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for KeyframeAnimationRuntime);
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  int v13 = sub_1B637F628(v12, v11, (uint64_t)&off_1F0F920F8, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B6386458((uint64_t)v20);
  sub_1B6386458((uint64_t)v22);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v13)) {
    return sub_1B66603E4(v13);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + 48 * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v22[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v13, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D81E30(uint64_t a1, uint64_t a2)
{
  sub_1B6D96724(0, &qword_1EB97F920, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for KeyframeAnimationRuntime);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v8 = sub_1B637F628(v7, v6, (uint64_t)&off_1F0F920F8, 0, 0, (uint64_t)v12, (uint64_t)v10);
  swift_release();
  sub_1B6386458((uint64_t)v10);
  sub_1B6386458((uint64_t)v12);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v8)) {
    return sub_1B66603E4(v8);
  }
  else {
    return sub_1B628EEF4(a1, a2, v8, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D81F9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1F0F70CD0, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 32 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D820EC(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1F0F70CD0, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D82234(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ShaderScript(0);
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  int v12 = sub_1B637F628(v11, v10, (uint64_t)&off_1F0F5C050, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B6386458((uint64_t)v20);
  sub_1B6386458((uint64_t)v22);
  uint64_t v13 = *(void *)(v5 + 192);
  if (v13) {
    sub_1B6BFB238(a1, a2, a3, v10, (uint64_t)&off_1F0F5C050, 1, v13, *(void *)(v5 + 200), *(void *)(v5 + 208));
  }
  sub_1B6BFB510(*(void *)(v5 + 40), v5, a1, a2, a3);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + *(void *)(*(void *)(v10 - 8) + 72) * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v22[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D823FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ShaderScript(0);
  int v6 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v7 = sub_1B637F628(v6, v5, (uint64_t)&off_1F0F5C050, 0, 0, (uint64_t)v12, (uint64_t)v10);
  swift_release();
  sub_1B6386458((uint64_t)v10);
  sub_1B6386458((uint64_t)v12);
  uint64_t v8 = *(void *)(v2 + 192);
  if (v8) {
    sub_1B6BFB3E4(a1, a2, v5, (uint64_t)&off_1F0F5C050, 1, v8, *(void *)(v2 + 200), *(void *)(v2 + 208));
  }
  sub_1B63658B4(*(void *)(v2 + 40), v2, a1, a2);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v7)) {
    return sub_1B66603E4(v7);
  }
  else {
    return sub_1B628EEF4(a1, a2, v7, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D825B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 8 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D82704(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D8284C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for VideoCaptureRuntime, (uint64_t)&off_1F0F7F880, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 32 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D8299C(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for VideoCaptureRuntime, (uint64_t)&off_1F0F7F880, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D82AE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for MovieRuntime(0);
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v12 = sub_1B637F628(v11, v10, (uint64_t)&off_1F0F5A998, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B6386458((uint64_t)v19);
  sub_1B6386458((uint64_t)v21);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + *(void *)(*(void *)(v10 - 8) + 72) * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v21[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D82C54(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for MovieRuntime(0);
  int v6 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v7 = sub_1B637F628(v6, v5, (uint64_t)&off_1F0F5A998, 0, 0, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1B6386458((uint64_t)v9);
  sub_1B6386458((uint64_t)v11);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v7)) {
    return sub_1B66603E4(v7);
  }
  else {
    return sub_1B628EEF4(a1, a2, v7, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D82DBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for AudioSpectrum, (uint64_t)&off_1F0F5DF30, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + (a5 << 6);
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D82F0C(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for AudioSpectrum, (uint64_t)&off_1F0F5DF30, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D83054(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for AudioPlayerComponent(0);
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v12 = sub_1B637F628(v11, v10, (uint64_t)&off_1F0F7FC88, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B6386458((uint64_t)v19);
  sub_1B6386458((uint64_t)v21);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + *(void *)(*(void *)(v10 - 8) + 72) * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v21[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D831C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AudioPlayerComponent(0);
  int v6 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v7 = sub_1B637F628(v6, v5, (uint64_t)&off_1F0F7FC88, 0, 0, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1B6386458((uint64_t)v9);
  sub_1B6386458((uint64_t)v11);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v7)) {
    return sub_1B66603E4(v7);
  }
  else {
    return sub_1B628EEF4(a1, a2, v7, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D8332C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  sub_1B6DA2C04(0, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  uint64_t v15 = v14;
  int v16 = *(_DWORD *)(v9 + 24);
  swift_retain();
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  int v17 = sub_1B637F628(v16, v15, (uint64_t)&off_1F0F8E108, 0, 0, (uint64_t)v26, (uint64_t)v24);
  swift_release();
  sub_1B6386458((uint64_t)v24);
  sub_1B6386458((uint64_t)v26);
  if (*(void *)(v9 + 240) - *(void *)(v9 + 232) == a3 && sub_1B63B4340(v17)) {
    return sub_1B66603E4(v17);
  }
  int v19 = *(unsigned __int8 *)(v9 + 120);
  uint64_t v20 = *(unsigned int *)(v9 + 28);
  unsigned __int8 v21 = *(unsigned char *)(v9 + 32);
  if (a4) {
    uint64_t v22 = a4 + 16 * a5;
  }
  else {
    uint64_t v22 = 0;
  }
  LOBYTE(v26[0]) = *(unsigned char *)(v9 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v17, v19, v20 | ((unint64_t)v21 << 32), a4, v22);
}

uint64_t sub_1B6D8349C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  sub_1B6DA2C04(0, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v8 + 24);
  swift_retain();
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  int v14 = sub_1B637F628(v13, v12, (uint64_t)&off_1F0F8E108, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B6386458((uint64_t)v16);
  sub_1B6386458((uint64_t)v18);
  if (a2 - a1 == *(void *)(v8 + 240) - *(void *)(v8 + 232) && sub_1B63B4340(v14)) {
    return sub_1B66603E4(v14);
  }
  else {
    return sub_1B628EEF4(a1, a2, v14, *(unsigned char *)(v8 + 120), *(unsigned int *)(v8 + 28) | ((unint64_t)*(unsigned __int8 *)(v8 + 32) << 32));
  }
}

uint64_t sub_1B6D83608(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1F0F63F30, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 656 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D8375C(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1F0F63F30, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D838A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1F0F880B8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 8 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D839F8(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1F0F880B8, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D83B40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for Parent, (uint64_t)&off_1F0FA0430, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B6386458((uint64_t)v19);
  sub_1B6386458((uint64_t)v21);
  uint64_t v13 = *(void *)(v5 + 192);
  if (v13) {
    sub_1B6BFB238(a1, a2, a3, (uint64_t)&type metadata for Parent, (uint64_t)&off_1F0FA0430, 1, v13, *(void *)(v5 + 200), *(void *)(v5 + 208));
  }
  sub_1B6BFB510(*(void *)(v5 + 40), v5, a1, a2, a3);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + 8 * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v21[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D83CF0(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for Parent, (uint64_t)&off_1F0FA0430, 0, 0, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1B6386458((uint64_t)v9);
  sub_1B6386458((uint64_t)v11);
  uint64_t v7 = *(void *)(v2 + 192);
  if (v7) {
    sub_1B6BFB3E4(a1, a2, (uint64_t)&type metadata for Parent, (uint64_t)&off_1F0FA0430, 1, v7, *(void *)(v2 + 200), *(void *)(v2 + 208));
  }
  sub_1B63658B4(*(void *)(v2 + 40), v2, a1, a2);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D83E88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1F0F74A68, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 120 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D83FDC(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1F0F74A68, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D84128(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1F0F6B7A8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 4 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D84278(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1F0F6B7A8, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D843C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for MeshModel, (uint64_t)&off_1F0FA8FD8, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B6386458((uint64_t)v19);
  sub_1B6386458((uint64_t)v21);
  uint64_t v13 = *(void *)(v5 + 192);
  if (v13) {
    sub_1B6BFB238(a1, a2, a3, (uint64_t)&type metadata for MeshModel, (uint64_t)&off_1F0FA8FD8, 1, v13, *(void *)(v5 + 200), *(void *)(v5 + 208));
  }
  sub_1B6BFB510(*(void *)(v5 + 40), v5, a1, a2, a3);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + 16 * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v21[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D84570(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for MeshModel, (uint64_t)&off_1F0FA8FD8, 0, 0, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1B6386458((uint64_t)v9);
  sub_1B6386458((uint64_t)v11);
  uint64_t v7 = *(void *)(v2 + 192);
  if (v7) {
    sub_1B6BFB3E4(a1, a2, (uint64_t)&type metadata for MeshModel, (uint64_t)&off_1F0FA8FD8, 1, v7, *(void *)(v2 + 200), *(void *)(v2 + 208));
  }
  sub_1B63658B4(*(void *)(v2 + 40), v2, a1, a2);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D84708(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for SDFRuntimeData, (uint64_t)&off_1F0F65698, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 40 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D8485C(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for SDFRuntimeData, (uint64_t)&off_1F0F65698, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D849A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for FileWatcher, (uint64_t)&off_1F0F55138, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 8 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D84AF8(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for FileWatcher, (uint64_t)&off_1F0F55138, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D84C40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for IBLRuntime, (uint64_t)&off_1F0F52A50, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 16 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D84D90(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for IBLRuntime, (uint64_t)&off_1F0F52A50, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D84ED8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for SceneKitRenderer(0);
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v12 = sub_1B637F628(v11, v10, (uint64_t)&off_1F0F6F3D0, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B6386458((uint64_t)v19);
  sub_1B6386458((uint64_t)v21);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + *(void *)(*(void *)(v10 - 8) + 72) * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v21[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D85048(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SceneKitRenderer(0);
  int v6 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v7 = sub_1B637F628(v6, v5, (uint64_t)&off_1F0F6F3D0, 0, 0, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1B6386458((uint64_t)v9);
  sub_1B6386458((uint64_t)v11);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v7)) {
    return sub_1B66603E4(v7);
  }
  else {
    return sub_1B628EEF4(a1, a2, v7, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D851B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1F0F73F38, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 32 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D85300(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1F0F73F38, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D85448(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for Seed, (uint64_t)&off_1F0F9E9D0, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B6386458((uint64_t)v19);
  sub_1B6386458((uint64_t)v21);
  uint64_t v13 = *(void *)(v5 + 192);
  if (v13) {
    sub_1B6BFB238(a1, a2, a3, (uint64_t)&type metadata for Seed, (uint64_t)&off_1F0F9E9D0, 1, v13, *(void *)(v5 + 200), *(void *)(v5 + 208));
  }
  sub_1B6BFB510(*(void *)(v5 + 40), v5, a1, a2, a3);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + 8 * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v21[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D855F8(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for Seed, (uint64_t)&off_1F0F9E9D0, 0, 0, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1B6386458((uint64_t)v9);
  sub_1B6386458((uint64_t)v11);
  uint64_t v7 = *(void *)(v2 + 192);
  if (v7) {
    sub_1B6BFB3E4(a1, a2, (uint64_t)&type metadata for Seed, (uint64_t)&off_1F0F9E9D0, 1, v7, *(void *)(v2 + 200), *(void *)(v2 + 208));
  }
  sub_1B63658B4(*(void *)(v2 + 40), v2, a1, a2);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D85790(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for Scale1, (uint64_t)&off_1F0FA0DD0, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 4 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D858E0(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for Scale1, (uint64_t)&off_1F0FA0DD0, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D85A28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B6386458((uint64_t)v19);
  sub_1B6386458((uint64_t)v21);
  uint64_t v13 = *(void *)(v5 + 192);
  if (v13) {
    sub_1B6BFB238(a1, a2, a3, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, 1, v13, *(void *)(v5 + 200), *(void *)(v5 + 208));
  }
  sub_1B6BFB510(*(void *)(v5 + 40), v5, a1, a2, a3);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + (a5 << 6);
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v21[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D85BD8(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, 0, 0, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1B6386458((uint64_t)v9);
  sub_1B6386458((uint64_t)v11);
  uint64_t v7 = *(void *)(v2 + 192);
  if (v7) {
    sub_1B6BFB3E4(a1, a2, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, 1, v7, *(void *)(v2 + 200), *(void *)(v2 + 208));
  }
  sub_1B63658B4(*(void *)(v2 + 40), v2, a1, a2);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D85D70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1F0F74E60, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B6386458((uint64_t)v19);
  sub_1B6386458((uint64_t)v21);
  uint64_t v13 = *(void *)(v5 + 192);
  if (v13) {
    sub_1B6BFB238(a1, a2, a3, (uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1F0F74E60, 1, v13, *(void *)(v5 + 200), *(void *)(v5 + 208));
  }
  sub_1B6BFB510(*(void *)(v5 + 40), v5, a1, a2, a3);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v15 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v16 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v17 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v18 = a4 + 4 * a5;
  }
  else {
    uint64_t v18 = 0;
  }
  LOBYTE(v21[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B6D85F20(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1F0F74E60, 0, 0, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1B6386458((uint64_t)v9);
  sub_1B6386458((uint64_t)v11);
  uint64_t v7 = *(void *)(v2 + 192);
  if (v7) {
    sub_1B6BFB3E4(a1, a2, (uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1F0F74E60, 1, v7, *(void *)(v2 + 200), *(void *)(v2 + 208));
  }
  sub_1B63658B4(*(void *)(v2 + 40), v2, a1, a2);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D860B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  int v12 = sub_1B637F628(v11, (uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1F0F596A8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B6386458((uint64_t)v18);
  sub_1B6386458((uint64_t)v20);
  if (*(void *)(v5 + 240) - *(void *)(v5 + 232) == a3 && sub_1B63B4340(v12)) {
    return sub_1B66603E4(v12);
  }
  int v14 = *(unsigned __int8 *)(v5 + 120);
  uint64_t v15 = *(unsigned int *)(v5 + 28);
  unsigned __int8 v16 = *(unsigned char *)(v5 + 32);
  if (a4) {
    uint64_t v17 = a4 + 4 * a5;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v20[0]) = *(unsigned char *)(v5 + 32);
  return sub_1B6BF2AEC(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B6D86208(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(v2 + 24);
  swift_retain();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  int v6 = sub_1B637F628(v5, (uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1F0F596A8, 0, 0, (uint64_t)v10, (uint64_t)v8);
  swift_release();
  sub_1B6386458((uint64_t)v8);
  sub_1B6386458((uint64_t)v10);
  if (a2 - a1 == *(void *)(v2 + 240) - *(void *)(v2 + 232) && sub_1B63B4340(v6)) {
    return sub_1B66603E4(v6);
  }
  else {
    return sub_1B628EEF4(a1, a2, v6, *(unsigned char *)(v2 + 120), *(unsigned int *)(v2 + 28) | ((unint64_t)*(unsigned __int8 *)(v2 + 32) << 32));
  }
}

uint64_t sub_1B6D86350(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D87DC4);
}

uint64_t sub_1B6D8637C(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D88260);
}

uint64_t sub_1B6D863A8(uint64_t result, void (*a2)(void *, void *))
{
  uint64_t v3 = v2;
  long long v29 = *(_OWORD *)result;
  long long v30 = *(_OWORD *)(result + 16);
  uint64_t v31 = *(void *)(result + 32);
  uint64_t v22 = *(void *)(result + 80);
  if (v22 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v6 = *(void *)(result + 64);
    uint64_t v8 = *(void **)(result + 72);
    uint64_t v9 = v8[4];
    ecs_stack_allocator_push_snapshot(v9);
    if (v7)
    {
      uint64_t v21 = v6;
      int v42 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v20 = (uint64_t)(v8 + 6);
      sub_1B62F1F58(v4);
      uint64_t v19 = v8 + 8;
      for (uint64_t i = (uint64_t *)(v5 + 24); ; i += 6)
      {
        uint64_t v11 = v8;
        uint64_t v12 = *((unsigned int *)i - 6);
        uint64_t v13 = *((unsigned int *)i - 4);
        uint64_t v26 = *i;
        uint64_t v27 = *(i - 1);
        uint64_t v14 = i[2];
        uint64_t v24 = *((unsigned int *)i - 5);
        uint64_t v25 = i[1];
        uint64_t v28 = v3;
        if (v42)
        {
          uint64_t v15 = *(os_unfair_lock_s **)(v14 + 376);
          swift_retain();
          os_unfair_lock_lock(v15);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v9);
        sub_1B62CA6FC(v20, (uint64_t)v36, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v16 = v11[4];
        uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v14 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v11[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
        v11[7] = v17;
        v19[1] = 0;
        _OWORD v19[2] = 0;
        *uint64_t v19 = 0;
        swift_release();
        uint64_t v18 = (v24 - v12 + v13);
        v37[0] = v21;
        v37[1] = v14;
        void v37[2] = v11;
        v37[3] = v13;
        uint64_t v8 = v11;
        void v37[4] = v18;
        v37[5] = v22;
        v37[6] = v12;
        _OWORD v37[7] = v24;
        v37[8] = 0;
        v37[9] = 0;
        char v38 = 1;
        uint64_t v39 = v27;
        uint64_t v40 = v26;
        uint64_t v41 = v25;
        a2(v37, v11);
        if (v28) {
          break;
        }
        v34[0] = v29;
        v34[1] = v30;
        uint64_t v35 = v31;
        sub_1B6345178(v11, (unsigned __int16 **)v34, (uint64_t)v36);
        uint64_t v3 = 0;
        sub_1B634507C((char *)v14);
        ecs_stack_allocator_pop_snapshot(v9);
        if (v42)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
        }
        swift_release();
        if (!--v7)
        {
          sub_1B62F073C(v4);
          return ecs_stack_allocator_pop_snapshot(v8[4]);
        }
      }
      v32[0] = v29;
      v32[1] = v30;
      uint64_t v33 = v31;
      sub_1B6345178(v11, (unsigned __int16 **)v32, (uint64_t)v36);
      sub_1B634507C((char *)v14);
      ecs_stack_allocator_pop_snapshot(v9);
      if (v42)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
      }
      sub_1B62F073C(v4);
      swift_release();
    }
    return ecs_stack_allocator_pop_snapshot(v8[4]);
  }
  return result;
}

uint64_t sub_1B6D866BC(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D897A0);
}

uint64_t sub_1B6D866E8(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D89ABC);
}

uint64_t sub_1B6D86714(uint64_t result, unint64_t a2)
{
  uint64_t v3 = v2;
  long long v29 = *(_OWORD *)result;
  long long v30 = *(_OWORD *)(result + 16);
  uint64_t v31 = *(void *)(result + 32);
  uint64_t v22 = *(void *)(result + 80);
  if (v22 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v6 = *(void *)(result + 64);
    uint64_t v8 = *(void **)(result + 72);
    uint64_t v9 = v8[4];
    ecs_stack_allocator_push_snapshot(v9);
    if (v7)
    {
      uint64_t v21 = v6;
      int v42 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v20 = (uint64_t)(v8 + 6);
      sub_1B62F1F58(v4);
      uint64_t v19 = v8 + 8;
      for (uint64_t i = (uint64_t *)(v5 + 24); ; i += 6)
      {
        uint64_t v11 = v8;
        uint64_t v12 = *((unsigned int *)i - 6);
        uint64_t v13 = *((unsigned int *)i - 4);
        uint64_t v26 = *i;
        uint64_t v27 = *(i - 1);
        uint64_t v14 = i[2];
        uint64_t v24 = *((unsigned int *)i - 5);
        uint64_t v25 = i[1];
        uint64_t v28 = v3;
        if (v42)
        {
          uint64_t v15 = *(os_unfair_lock_s **)(v14 + 376);
          swift_retain();
          os_unfair_lock_lock(v15);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v9);
        sub_1B62CA6FC(v20, (uint64_t)v36, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v16 = v11[4];
        uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v14 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v11[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
        v11[7] = v17;
        v19[1] = 0;
        _OWORD v19[2] = 0;
        *uint64_t v19 = 0;
        swift_release();
        uint64_t v18 = (v24 - v12 + v13);
        v37[0] = v21;
        v37[1] = v14;
        void v37[2] = v11;
        v37[3] = v13;
        uint64_t v8 = v11;
        void v37[4] = v18;
        v37[5] = v22;
        v37[6] = v12;
        _OWORD v37[7] = v24;
        v37[8] = 0;
        v37[9] = 0;
        char v38 = 1;
        uint64_t v39 = v27;
        uint64_t v40 = v26;
        uint64_t v41 = v25;
        sub_1B6D8A154(v37, v11, a2);
        if (v28) {
          break;
        }
        v34[0] = v29;
        v34[1] = v30;
        uint64_t v35 = v31;
        sub_1B6345178(v11, (unsigned __int16 **)v34, (uint64_t)v36);
        uint64_t v3 = 0;
        sub_1B634507C((char *)v14);
        ecs_stack_allocator_pop_snapshot(v9);
        if (v42)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
        }
        swift_release();
        if (!--v7)
        {
          sub_1B62F073C(v4);
          return ecs_stack_allocator_pop_snapshot(v8[4]);
        }
      }
      v32[0] = v29;
      v32[1] = v30;
      uint64_t v33 = v31;
      sub_1B6345178(v11, (unsigned __int16 **)v32, (uint64_t)v36);
      sub_1B634507C((char *)v14);
      ecs_stack_allocator_pop_snapshot(v9);
      if (v42)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
      }
      sub_1B62F073C(v4);
      swift_release();
    }
    return ecs_stack_allocator_pop_snapshot(v8[4]);
  }
  return result;
}

uint64_t sub_1B6D86A20(uint64_t a1, uint64_t a2)
{
  return sub_1B6D86AD0(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D8AB3C);
}

uint64_t sub_1B6D86A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D870CC(a1, a2, a3, (void (*)(void *, void *, uint64_t, uint64_t))sub_1B6D8A5F0);
}

uint64_t sub_1B6D86A78(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8AFB0);
}

uint64_t sub_1B6D86AA4(uint64_t a1, uint64_t a2)
{
  return sub_1B6D86AD0(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D8B24C);
}

uint64_t sub_1B6D86AD0(uint64_t result, uint64_t a2, void (*a3)(void *, void *, uint64_t))
{
  uint64_t v4 = v3;
  long long v33 = *(_OWORD *)result;
  long long v34 = *(_OWORD *)(result + 16);
  uint64_t v35 = *(void *)(result + 32);
  uint64_t v26 = *(void *)(result + 80);
  if (v26 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    uint64_t v7 = *(void *)(result + 64);
    uint64_t v9 = *(void **)(result + 72);
    uint64_t v10 = v9[4];
    ecs_stack_allocator_push_snapshot(v10);
    if (v8)
    {
      uint64_t v25 = v7;
      int v11 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v24 = (uint64_t)(v9 + 6);
      uint64_t v21 = v5;
      sub_1B62F1F58(v5);
      uint64_t v23 = v9 + 8;
      uint64_t v12 = (uint64_t *)(v6 + 24);
      int v22 = v11;
      while (1)
      {
        uint64_t v13 = v9;
        uint64_t v14 = *((unsigned int *)v12 - 6);
        uint64_t v15 = *((unsigned int *)v12 - 4);
        uint64_t v31 = *v12;
        uint64_t v32 = *(v12 - 1);
        uint64_t v16 = v12[2];
        uint64_t v29 = *((unsigned int *)v12 - 5);
        uint64_t v30 = v12[1];
        uint64_t v46 = v4;
        if (v11)
        {
          uint64_t v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62CA6FC(v24, (uint64_t)v40, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v13[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v13[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v13[7] = v19;
        v23[1] = 0;
        _OWORD v23[2] = 0;
        *uint64_t v23 = 0;
        swift_release();
        v41[0] = v25;
        v41[1] = v16;
        _OWORD v41[2] = v13;
        v41[3] = v15;
        unsigned char v41[4] = (v29 - v14 + v15);
        v41[5] = v26;
        v41[6] = v14;
        v41[7] = v29;
        uint64_t v9 = v13;
        v41[8] = 0;
        v41[9] = 0;
        char v42 = 1;
        uint64_t v43 = v32;
        uint64_t v44 = v31;
        uint64_t v45 = v30;
        uint64_t v20 = v46;
        a3(v41, v13, a2);
        if (v20) {
          break;
        }
        v38[0] = v33;
        v38[1] = v34;
        uint64_t v39 = v35;
        sub_1B6345178(v13, (unsigned __int16 **)v38, (uint64_t)v40);
        uint64_t v4 = 0;
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        int v11 = v22;
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        if (!--v8)
        {
          sub_1B62F073C(v21);
          return ecs_stack_allocator_pop_snapshot(v9[4]);
        }
      }
      v36[0] = v33;
      v36[1] = v34;
      uint64_t v37 = v35;
      sub_1B6345178(v13, (unsigned __int16 **)v36, (uint64_t)v40);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if (v22)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v21);
      swift_release();
    }
    return ecs_stack_allocator_pop_snapshot(v9[4]);
  }
  return result;
}

uint64_t sub_1B6D86DE0(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8B8D4);
}

uint64_t sub_1B6D86E0C(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8BB44);
}

uint64_t sub_1B6D86E38(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8F14C);
}

uint64_t sub_1B6D86E64(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8ED68);
}

uint64_t sub_1B6D86E90(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8E974);
}

uint64_t sub_1B6D86EBC(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8E590);
}

uint64_t sub_1B6D86EE8(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8E19C);
}

uint64_t sub_1B6D86F14(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8DD28);
}

uint64_t sub_1B6D86F40(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8D8B4);
}

uint64_t sub_1B6D86F6C(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8D440);
}

uint64_t sub_1B6D86F98(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8CFCC);
}

uint64_t sub_1B6D86FC4(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8CB58);
}

uint64_t sub_1B6D86FF0(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8C6E4);
}

uint64_t sub_1B6D8701C(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8C270);
}

uint64_t sub_1B6D87048(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D8BDFC);
}

uint64_t sub_1B6D87074(uint64_t a1, uint64_t a2)
{
  return sub_1B6D86AD0(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D8FB74);
}

uint64_t sub_1B6D870A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D870CC(a1, a2, a3, (void (*)(void *, void *, uint64_t, uint64_t))sub_1B6D8F5C0);
}

uint64_t sub_1B6D870CC(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void *, void *, uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  long long v31 = *(_OWORD *)result;
  long long v32 = *(_OWORD *)(result + 16);
  uint64_t v33 = *(void *)(result + 32);
  uint64_t v22 = *(void *)(result + 80);
  if (v22 >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 40);
    uint64_t v9 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    uint64_t v10 = *(void **)(result + 72);
    uint64_t v11 = v10[4];
    ecs_stack_allocator_push_snapshot(v11);
    if (v9)
    {
      uint64_t v21 = v8;
      int v44 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v20 = v6;
      sub_1B62F1F58(v6);
      for (uint64_t i = (uint64_t *)(v7 + 24); ; i += 6)
      {
        uint64_t v26 = v9;
        uint64_t v13 = *((unsigned int *)i - 6);
        uint64_t v14 = *((unsigned int *)i - 5);
        uint64_t v15 = *((unsigned int *)i - 4);
        uint64_t v28 = *i;
        uint64_t v29 = *(i - 1);
        uint64_t v16 = i[2];
        uint64_t v27 = i[1];
        uint64_t v30 = v5;
        if (v44)
        {
          uint64_t v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B62CA6FC((uint64_t)(v10 + 6), (uint64_t)v38, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v10[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v10[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v10[7] = v19;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v39[0] = v21;
        v39[1] = v16;
        v39[2] = v10;
        v39[3] = v15;
        v39[4] = (v14 - v13 + v15);
        v39[5] = v22;
        v39[6] = v13;
        v39[7] = v14;
        v39[8] = 0;
        v39[9] = 0;
        char v40 = 1;
        uint64_t v41 = v29;
        uint64_t v42 = v28;
        uint64_t v43 = v27;
        a4(v39, v10, a2, a3);
        if (v30) {
          break;
        }
        v36[0] = v31;
        v36[1] = v32;
        uint64_t v37 = v33;
        sub_1B6345178(v10, (unsigned __int16 **)v36, (uint64_t)v38);
        uint64_t v5 = 0;
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v11);
        if (v44)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        uint64_t v9 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B62F073C(v20);
          return ecs_stack_allocator_pop_snapshot(v10[4]);
        }
      }
      v34[0] = v31;
      v34[1] = v32;
      uint64_t v35 = v33;
      sub_1B6345178(v10, (unsigned __int16 **)v34, (uint64_t)v38);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v11);
      if (v44)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v20);
      swift_release();
    }
    return ecs_stack_allocator_pop_snapshot(v10[4]);
  }
  return result;
}

uint64_t sub_1B6D873D0(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D90800);
}

uint64_t sub_1B6D873FC(uint64_t a1)
{
  return sub_1B6D863A8(a1, (void (*)(void *, void *))sub_1B6D90428);
}

void *sub_1B6D87428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6D94728(a2, (uint64_t)v24);
  sub_1B6DA0D94(a2 + 32, (uint64_t)v23, (uint64_t (*)(void))sub_1B6D93BC0);
  uint64_t v6 = ecs_stack_allocator_allocate(a3, a1 << 6, 16);
  uint64_t v7 = v6;
  if (a1)
  {
    long long v8 = *(_OWORD *)a2;
    long long v9 = *(_OWORD *)(a2 + 16);
    long long v10 = *(_OWORD *)(a2 + 32);
    v6[6] = *(void *)(a2 + 48);
    *((_OWORD *)v6 + 1) = v9;
    *((_OWORD *)v6 + 2) = v10;
    *(_OWORD *)uint64_t v6 = v8;
    if (a1 != 1)
    {
      long long v11 = *(_OWORD *)a2;
      long long v12 = *(_OWORD *)(a2 + 16);
      long long v13 = *(_OWORD *)(a2 + 32);
      v6[14] = *(void *)(a2 + 48);
      *((_OWORD *)v6 + 5) = v12;
      *((_OWORD *)v6 + 6) = v13;
      *((_OWORD *)v6 + 4) = v11;
      if (a1 != 2)
      {
        long long v14 = *(_OWORD *)a2;
        long long v15 = *(_OWORD *)(a2 + 16);
        long long v16 = *(_OWORD *)(a2 + 32);
        v6[22] = *(void *)(a2 + 48);
        *((_OWORD *)v6 + 9) = v15;
        *((_OWORD *)v6 + 10) = v16;
        *((_OWORD *)v6 + 8) = v14;
        uint64_t v17 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v18 = v6 + 24;
          do
          {
            sub_1B63846D0((uint64_t)v23);
            sub_1B62CA090((uint64_t)v24);
            long long v20 = *(_OWORD *)(a2 + 16);
            long long v19 = *(_OWORD *)(a2 + 32);
            long long v21 = *(_OWORD *)a2;
            v18[6] = *(void *)(a2 + 48);
            *((_OWORD *)v18 + 1) = v20;
            *((_OWORD *)v18 + 2) = v19;
            *(_OWORD *)uint64_t v18 = v21;
            v18 += 8;
            --v17;
          }
          while (v17);
        }
        sub_1B63846D0((uint64_t)v23);
        sub_1B62CA090((uint64_t)v24);
      }
      sub_1B63846D0((uint64_t)v23);
      sub_1B62CA090((uint64_t)v24);
    }
  }
  else
  {
    sub_1B62CA064((uint64_t)v24);
    sub_1B62D8C10((uint64_t)v23);
  }
  return v7;
}

_OWORD *sub_1B6D87580(uint64_t a1, long long *a2, uint64_t a3)
{
  sub_1B6D94728((uint64_t)a2, (uint64_t)v20);
  sub_1B6DA0D94((uint64_t)a2 + 24, (uint64_t)v19, (uint64_t (*)(void))sub_1B6D93BC0);
  uint64_t v6 = ecs_stack_allocator_allocate(a3, 48 * a1, 8);
  uint64_t v7 = v6;
  if (a1)
  {
    long long v8 = *a2;
    long long v9 = a2[2];
    v6[1] = a2[1];
    _OWORD v6[2] = v9;
    *uint64_t v6 = v8;
    if (a1 != 1)
    {
      long long v10 = *a2;
      long long v11 = a2[2];
      void v6[4] = a2[1];
      v6[5] = v11;
      long long v6[3] = v10;
      if (a1 != 2)
      {
        long long v12 = *a2;
        long long v13 = a2[2];
        v6[7] = a2[1];
        v6[8] = v13;
        v6[6] = v12;
        uint64_t v14 = a1 - 3;
        if (a1 != 3)
        {
          long long v15 = v6 + 9;
          do
          {
            sub_1B63846D0((uint64_t)v19);
            sub_1B62CA090((uint64_t)v20);
            long long v17 = a2[1];
            long long v16 = a2[2];
            *long long v15 = *a2;
            v15[1] = v17;
            _OWORD v15[2] = v16;
            v15 += 3;
            --v14;
          }
          while (v14);
        }
        sub_1B63846D0((uint64_t)v19);
        sub_1B62CA090((uint64_t)v20);
      }
      sub_1B63846D0((uint64_t)v19);
      sub_1B62CA090((uint64_t)v20);
    }
  }
  else
  {
    sub_1B62CA064((uint64_t)v20);
    sub_1B62D8C10((uint64_t)v19);
  }
  return v7;
}

void *sub_1B6D876C0(uint64_t a1, id a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v11 = ecs_stack_allocator_allocate(a6, 32 * a1, 8);
  long long v12 = v11;
  if (a1)
  {
    *long long v11 = a2;
    unsigned int v13 = a3 >> 8;
    char v14 = a3 & 1;
    *((unsigned char *)v11 + 8) = a3 & 1;
    *((unsigned char *)v11 + 9) = BYTE1(a3);
    int v15 = HIWORD(a3) & 1;
    *((unsigned char *)v11 + 10) = v15;
    _OWORD v11[2] = a4;
    v11[3] = a5;
    if (a1 != 1)
    {
      void v11[4] = a2;
      *((unsigned char *)v11 + 40) = v14;
      *((unsigned char *)v11 + 41) = v13;
      *((unsigned char *)v11 + 42) = v15;
      v11[6] = a4;
      v11[7] = a5;
      if (a1 != 2)
      {
        v11[8] = a2;
        *((unsigned char *)v11 + 72) = v14;
        *((unsigned char *)v11 + 73) = v13;
        *((unsigned char *)v11 + 74) = v15;
        v11[10] = a4;
        v11[11] = a5;
        uint64_t v16 = a1 - 3;
        if (a1 != 3)
        {
          long long v17 = v11 + 15;
          do
          {
            *(v17 - 3) = a2;
            *((unsigned char *)v17 - 16) = v14;
            *((unsigned char *)v17 - 15) = v13;
            *((unsigned char *)v17 - 14) = v15;
            *(v17 - 1) = a4;
            *long long v17 = a5;
            swift_bridgeObjectRetain();
            id v18 = a2;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        swift_bridgeObjectRetain();
        a2 = a2;
      }
      swift_bridgeObjectRetain();
      id v19 = a2;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v12;
}

void *sub_1B6D877F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = ecs_stack_allocator_allocate(a4, 16 * a1, 8);
  long long v8 = v7;
  if (a1)
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    if (a1 != 1)
    {
      _OWORD v7[2] = a2;
      _OWORD v7[3] = a3;
      if (a1 != 2)
      {
        double v7[4] = a2;
        v7[5] = a3;
        uint64_t v9 = a1 - 3;
        if (a1 != 3)
        {
          long long v10 = v7 + 7;
          do
          {
            *(v10 - 1) = a2;
            *long long v10 = a3;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v10 += 2;
            --v9;
          }
          while (v9);
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

void *sub_1B6D878C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = ecs_stack_allocator_allocate(a4, 16 * a1, 8);
  long long v8 = v7;
  if (a1)
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    if (a1 != 1)
    {
      _OWORD v7[2] = a2;
      _OWORD v7[3] = a3;
      if (a1 != 2)
      {
        double v7[4] = a2;
        v7[5] = a3;
        uint64_t v9 = a1 - 3;
        if (a1 != 3)
        {
          long long v10 = v7 + 7;
          do
          {
            *(v10 - 1) = a2;
            *long long v10 = a3;
            swift_bridgeObjectRetain();
            swift_retain();
            v10 += 2;
            --v9;
          }
          while (v9);
        }
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_bridgeObjectRetain();
      swift_retain();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v8;
}

void *sub_1B6D879A0(uint64_t a1, long long *a2, uint64_t a3)
{
  sub_1B62CA6FC((uint64_t)a2 + 24, (uint64_t)v20, (uint64_t)&unk_1E9DDA450, (uint64_t)&qword_1EB97D860, (uint64_t)&protocolRef_MTLBuffer, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8BB8);
  sub_1B62CA6FC((uint64_t)(a2 + 2), (uint64_t)&v19, (uint64_t)&unk_1EB980460, (uint64_t)&qword_1EB97D7F0, (uint64_t)&protocolRef_MTLTexture_0, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8BB8);
  uint64_t v6 = ecs_stack_allocator_allocate(a3, 40 * a1, 8);
  uint64_t v7 = v6;
  if (a1)
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    void v6[4] = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v6 = v8;
    *((_OWORD *)v6 + 1) = v9;
    if (a1 != 1)
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      v6[9] = *((void *)a2 + 4);
      *(_OWORD *)(v6 + 7) = v11;
      *(_OWORD *)(v6 + 5) = v10;
      if (a1 != 2)
      {
        long long v12 = *a2;
        long long v13 = a2[1];
        v6[14] = *((void *)a2 + 4);
        *((_OWORD *)v6 + 5) = v12;
        *((_OWORD *)v6 + 6) = v13;
        uint64_t v14 = a1 - 3;
        if (a1 != 3)
        {
          int v15 = v6 + 15;
          do
          {
            sub_1B63846D0((uint64_t)&v19);
            sub_1B63846D0((uint64_t)v20);
            uint64_t v16 = *((void *)a2 + 4);
            long long v17 = a2[1];
            *(_OWORD *)int v15 = *a2;
            *((_OWORD *)v15 + 1) = v17;
            v15[4] = v16;
            v15 += 5;
            --v14;
          }
          while (v14);
        }
        sub_1B63846D0((uint64_t)&v19);
        sub_1B63846D0((uint64_t)v20);
      }
      sub_1B63846D0((uint64_t)&v19);
      sub_1B63846D0((uint64_t)v20);
    }
  }
  else
  {
    sub_1B62D8C10((uint64_t)v20);
    sub_1B62D8C10((uint64_t)&v19);
  }
  return v7;
}

void *sub_1B6D87B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v11 = ecs_stack_allocator_allocate(a6, 32 * a1, 8);
  long long v12 = v11;
  if (a1)
  {
    *long long v11 = a2;
    v11[1] = a3;
    _OWORD v11[2] = a4;
    v11[3] = a5;
    if (a1 != 1)
    {
      void v11[4] = a2;
      void v11[5] = a3;
      v11[6] = a4;
      v11[7] = a5;
      if (a1 != 2)
      {
        v11[8] = a2;
        v11[9] = a3;
        v11[10] = a4;
        v11[11] = a5;
        uint64_t v13 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v14 = v11 + 15;
          do
          {
            *(v14 - 3) = a2;
            *(v14 - 2) = a3;
            *(v14 - 1) = a4;
            *uint64_t v14 = a5;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v14 += 4;
            --v13;
          }
          while (v13);
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t sub_1B6D87C14(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[11];
  uint64_t v3 = a1[13];
  uint64_t result = sub_1B62C9024((uint64_t)&type metadata for ParticleFluidSolver2DEmitter, (uint64_t)&off_1F0F99250, v2, a1[12], v3, a1[2]);
  if (v2)
  {
    if (v3)
    {
      unint64_t v5 = 0;
      unint64_t v6 = v3 - 1;
      if (v3 == 1) {
        goto LABEL_9;
      }
      BOOL v7 = !is_mul_ok(v6, 0x1CuLL);
      if (result + 12 + 28 * v6 < result + 12) {
        goto LABEL_9;
      }
      if (v7) {
        goto LABEL_9;
      }
      unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
      long long v8 = (float *)(result + 40);
      unint64_t v9 = v3 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        float v10 = *v8 * 0.5;
        *(v8 - 7) = *(v8 - 7) * 0.5;
        *long long v8 = v10;
        v8 += 14;
        v9 -= 2;
      }
      while (v9);
      if (v3 != v5)
      {
LABEL_9:
        unint64_t v11 = v3 - v5;
        long long v12 = (float *)(result + 28 * v5 + 12);
        do
        {
          *long long v12 = *v12 * 0.5;
          v12 += 7;
          --v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v13 = a1[6];
    uint64_t v14 = a1[7];
    unint64_t v15 = v14 - v13;
    if (v14 != v13)
    {
      if (v15 < 2) {
        goto LABEL_19;
      }
      unint64_t v16 = v14 + ~v13;
      uint64_t v17 = 28 * v13;
      BOOL v18 = !is_mul_ok(v16, 0x1CuLL);
      if (28 * v13 + result + 12 + 28 * v16 < 28 * v13 + result + 12) {
        goto LABEL_19;
      }
      if (v18) {
        goto LABEL_19;
      }
      v13 += v15 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v19 = (float *)(v17 + result + 40);
      unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        float v21 = *v19 * 0.5;
        *(v19 - 7) = *(v19 - 7) * 0.5;
        *uint64_t v19 = v21;
        v19 += 14;
        v20 -= 2;
      }
      while (v20);
      if (v15 != (v15 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_19:
        uint64_t v22 = v14 - v13;
        uint64_t v23 = (float *)(result + 28 * v13 + 12);
        do
        {
          *uint64_t v23 = *v23 * 0.5;
          v23 += 7;
          --v22;
        }
        while (v22);
      }
    }
  }
  return result;
}

uint64_t sub_1B6D87DC4(void *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_retain();
  uint64_t v51 = sub_1B62C9024((uint64_t)&type metadata for ForceField, (uint64_t)&off_1F0F525A8, v3, v4, v5, v7);
  sub_1B6345398(*(void *)(v6 + 40), (uint64_t)&type metadata for ForceFieldRuntime, &v52);
  if (v52 == 1)
  {
    *(void *)(a2 + 72) = &type metadata for ForceFieldRuntime;
    *(void *)(a2 + 80) = &off_1F0F70CD0;
    uint64_t v8 = sub_1B62C9024((uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1F0F70CD0, v3, v4, v5, v7);
    if (v3)
    {
      if (v5)
      {
        unint64_t v9 = (uint64_t *)(v51 + 24);
        float v10 = (void *)(v8 + 16);
        do
        {
          uint64_t v11 = *v9;
          v9 += 18;
          *(v10 - 2) = v11 + 0x76E15D3EFEFDCBBFLL;
          *(v10 - 1) = 0xC5004E441C522FB3 * v11 - 0x3AFFB1BBE3ADD04DLL;
          *float v10 = 0x77710069854EE241 - v11;
          v10[1] = 0x39109BB02ACBE635 * v11;
          v10 += 4;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      uint64_t v22 = a1[6];
      uint64_t v23 = a1[7] - v22;
      if (v23)
      {
        uint64_t v24 = (void *)(v8 + 32 * v22 + 16);
        uint64_t v25 = (uint64_t *)(v51 + 144 * v22 + 24);
        do
        {
          uint64_t v26 = *v25;
          v25 += 18;
          *(v24 - 2) = v26 + 0x76E15D3EFEFDCBBFLL;
          *(v24 - 1) = 0xC5004E441C522FB3 * v26 - 0x3AFFB1BBE3ADD04DLL;
          *uint64_t v24 = 0x77710069854EE241 - v26;
          v24[1] = 0x39109BB02ACBE635 * v26;
          v24 += 4;
          --v23;
        }
        while (v23);
      }
    }
    return swift_release();
  }
  uint64_t v49 = a2;
  uint64_t v12 = v5;
  if (!v3) {
    uint64_t v12 = a1[7] - a1[6];
  }
  unint64_t v52 = 0;
  unint64_t v13 = v12;
  MEMORY[0x1BA9B84E0](&v52, 8);
  unint64_t v14 = v52;
  unint64_t v52 = 0;
  MEMORY[0x1BA9B84E0](&v52, 8);
  unint64_t v15 = v52;
  unint64_t v52 = 0;
  MEMORY[0x1BA9B84E0](&v52, 8);
  unint64_t v16 = v52;
  unint64_t v52 = 0;
  MEMORY[0x1BA9B84E0](&v52, 8);
  unint64_t v17 = v52;
  float v47 = *(void **)(v49 + 32);
  unint64_t v48 = 32 * v13;
  BOOL v18 = ecs_stack_allocator_allocate((uint64_t)v47, 32 * v13, 8);
  unint64_t v19 = v13;
  unint64_t v20 = (unint64_t)v18;
  if (v19)
  {
    if (v19 >= 0x1C)
    {
      unint64_t v21 = 0;
      uint64_t v28 = 4 * (v19 - 1);
      if (&v18[v28] >= v18
        && &v18[v28 + 1] >= v18 + 1
        && &v18[v28 + 2] >= v18 + 2
        && &v18[v28 + 3] >= v18 + 3
        && !((v19 - 1) >> 59))
      {
        unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v29 = vdupq_n_s64(v14);
        int64x2_t v30 = vdupq_n_s64(v15);
        int64x2_t v31 = vdupq_n_s64(v16);
        int64x2_t v32 = vdupq_n_s64(v17);
        uint64_t v33 = (double *)(v18 + 8);
        unint64_t v34 = v19 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v35 = v33 - 8;
          vst4q_f64(v35, *(float64x2x4_t *)v29.i8);
          vst4q_f64(v33, *(float64x2x4_t *)v29.i8);
          v33 += 16;
          v34 -= 4;
        }
        while (v34);
        if (v19 == v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    unint64_t v36 = v19 - v21;
    uint64_t v37 = &v18[4 * v21 + 2];
    do
    {
      *(v37 - 2) = v14;
      *(v37 - 1) = v15;
      unint64_t *v37 = v16;
      v37[1] = v17;
      v37 += 4;
      --v36;
    }
    while (v36);
  }
LABEL_26:
  if (v3)
  {
    if (v5)
    {
      char v38 = (uint64_t *)(v51 + 24);
      uint64_t v39 = v18 + 2;
      uint64_t v40 = v5;
      do
      {
        uint64_t v41 = *v38;
        v38 += 18;
        *(v39 - 2) = v41 + 0x76E15D3EFEFDCBBFLL;
        *(v39 - 1) = 0xC5004E441C522FB3 * v41 - 0x3AFFB1BBE3ADD04DLL;
        *uint64_t v39 = 0x77710069854EE241 - v41;
        v39[1] = 0x39109BB02ACBE635 * v41;
        v39 += 4;
        --v40;
      }
      while (v40);
    }
    sub_1B6D81F9C(v3, v4, v5, (uint64_t)v18, v19);
  }
  else
  {
    uint64_t v42 = a1[6];
    uint64_t v43 = a1[7] - v42;
    if (v43)
    {
      int v44 = v18 + 2;
      uint64_t v45 = (uint64_t *)(v51 + 144 * v42 + 24);
      do
      {
        uint64_t v46 = *v45;
        v45 += 18;
        *(v44 - 2) = v46 + 0x76E15D3EFEFDCBBFLL;
        *(v44 - 1) = 0xC5004E441C522FB3 * v46 - 0x3AFFB1BBE3ADD04DLL;
        *int v44 = 0x77710069854EE241 - v46;
        v44[1] = 0x39109BB02ACBE635 * v46;
        v44 += 4;
        --v43;
      }
      while (v43);
    }
    sub_1B6D820EC(*(void *)(v6 + 232), *(void *)(v6 + 240));
  }
  ecs_stack_allocator_deallocate(v47, v20, v48);
  return swift_release();
}

uint64_t sub_1B6D88260(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v186 = a2;
  uint64_t v5 = type metadata accessor for ShaderScript(0);
  v209 = *(void **)(v5 - 8);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)&v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B62E17B4();
  uint64_t v201 = v9;
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v200 = (char *)&v179 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = sub_1B6E31098();
  v206 = *(void **)(v199 - 8);
  MEMORY[0x1F4188790](v199, v12);
  uint64_t v198 = (char *)&v179 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = sub_1B6E30F48();
  uint64_t v194 = *(void *)(v205 - 8);
  MEMORY[0x1F4188790](v205, v14);
  uint64_t v202 = (char *)&v179 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v197 = (void (**)(char *, uint64_t))((char *)&v179 - v18);
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v196 = (void (**)(char *, uint64_t))((char *)&v179 - v21);
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v203 = (char *)&v179 - v24;
  uint64_t v26 = (uint64_t *)a1[11];
  uint64_t v25 = a1[12];
  uint64_t v27 = (char *)a1[13];
  uint64_t v29 = a1[1];
  uint64_t v28 = a1[2];
  swift_retain();
  uint64_t v183 = v25;
  uint64_t v30 = sub_1B62C9024((uint64_t)&type metadata for ShaderFileAsset, (uint64_t)&off_1F0F6A340, v26, v25, (uint64_t)v27, v28);
  sub_1B6345398(*(void *)(v29 + 40), v5, &v207);
  uint64_t v204 = v27;
  if (v207 == 1)
  {
    uint64_t v31 = v186;
    *(void *)(v186 + 72) = v5;
    *(void *)(v31 + 80) = &off_1F0F5C050;
    uint64_t v32 = sub_1B6642CD8(v29, (uint64_t)a1);
    uint64_t v33 = v32;
    if (v26)
    {
      if (v204)
      {
        uint64_t v184 = v29;
        uint64_t v202 = (char *)v209[9];
        uint64_t v197 = (void (**)(char *, uint64_t))(v194 + 8);
        unint64_t v34 = (void *)(v30 + 40);
        uint64_t v190 = (void (**)(char *, char *, uint64_t))0x80000001B6F38470;
        uint64_t v191 = (void (**)(char *, char *, uint64_t))(v206 + 4);
        unint64_t v189 = 0x80000001B6F384A0;
        long long v188 = xmmword_1B6E77050;
        do
        {
          char v38 = (void (**)(char *, uint64_t))*(v34 - 3);
          uint64_t v37 = *(v34 - 2);
          uint64_t v39 = (void *)*(v34 - 1);
          v206 = v34;
          if (v39)
          {
            uint64_t v40 = (void *)v33;
            uint64_t v41 = v3;
            uint64_t v42 = v38;
            uint64_t v43 = *v34;
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v45 = *(void (**)(void (**)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(v43 + 8);
            swift_bridgeObjectRetain();
            id v46 = v39;
            float v47 = v42;
            uint64_t v3 = v41;
            uint64_t v33 = (uint64_t)v40;
            uint64_t v48 = v43;
            uint64_t v49 = v203;
            v45(v47, v37, ObjectType, v48);
          }
          else
          {
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            uint64_t v207 = 0;
            unint64_t v208 = 0xE000000000000000;
            uint64_t v195 = qword_1EB997FD0;
            swift_retain();
            sub_1B6E328C8();
            sub_1B6E31948();
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            float32x4_t v50 = v207;
            unint64_t v51 = v208;
            char v52 = sub_1B6E32148();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            uint64_t v196 = v38;
            v209 = v3;
            uint64_t v53 = qword_1EB997FF0;
            uint64_t v54 = qword_1EB985528;
            swift_retain();
            if (v54 != -1) {
              swift_once();
            }
            sub_1B62C6100(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
            uint64_t v55 = swift_allocObject();
            *(_OWORD *)(v55 + 16) = v188;
            *(void *)(v55 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v55 + 64) = sub_1B678615C();
            *(void *)(v55 + 32) = v50;
            *(void *)(v55 + 40) = v51;
            swift_bridgeObjectRetain();
            sub_1B6E31258();
            swift_bridgeObjectRelease();
            swift_retain();
            uint64_t v194 = v53;
            float32x2_t v56 = v198;
            sub_1B6E31088();
            uint64_t v57 = v201[12];
            uint64_t v192 = v201[16];
            uint64_t v193 = v57;
            char v58 = v52;
            uint64_t v59 = (uint64_t)v200;
            float32x4_t v60 = &v200[v201[20]];
            (*v191)(v200, v56, v199);
            *(unsigned char *)(v59 + v193) = v58;
            *(void *)(v59 + v192) = 0;
            *(void *)float32x4_t v60 = v50;
            *((void *)v60 + 1) = v51;
            swift_bridgeObjectRetain();
            sub_1B6E31368();
            swift_release();
            sub_1B6DA29E4(v59, (uint64_t (*)(void))sub_1B62E17B4);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            uint64_t v49 = v203;
            sub_1B6E30E48();
            uint64_t v3 = v209;
          }
          swift_bridgeObjectRelease();
          uint64_t v61 = sub_1B6E31748();
          if (v3)
          {

            uint64_t v3 = 0;
          }
          else
          {
            uint64_t v35 = v61;
            uint64_t v36 = v62;
            swift_bridgeObjectRelease();
            *(void *)uint64_t v33 = v35;
            *(void *)(v33 + 8) = v36;
            sub_1B68F6D68();
          }
          (*v197)(v49, v205);
          v33 += (uint64_t)v202;
          unint64_t v34 = v206 + 6;
          --v204;
        }
        while (v204);
      }
    }
    else
    {
      uint64_t v110 = a1[6];
      uint64_t v111 = a1[7];
      uint64_t v112 = (void *)(v111 - v110);
      if (v111 != v110)
      {
        uint64_t v184 = v29;
        uint64_t v191 = (void (**)(char *, char *, uint64_t))(v206 + 4);
        uint64_t v116 = (char *)v209[9];
        uint64_t v202 = (char *)(v194 + 8);
        uint64_t v203 = v116;
        uint64_t v117 = v32 + v110 * (void)v116;
        long long v118 = (char *)(v30 + 48 * v110 + 40);
        uint64_t v190 = (void (**)(char *, char *, uint64_t))0x80000001B6F38470;
        unint64_t v189 = 0x80000001B6F384A0;
        long long v188 = xmmword_1B6E77050;
        do
        {
          v206 = v112;
          uint64_t v120 = (void (**)(char *, uint64_t))*((void *)v118 - 3);
          uint64_t v119 = *((void *)v118 - 2);
          uint64_t v121 = (void *)*((void *)v118 - 1);
          uint64_t v204 = v118;
          if (v121)
          {
            uint64_t v122 = (void *)v117;
            uint64_t v123 = v120;
            uint64_t v124 = *(void **)v118;
            uint64_t v125 = swift_getObjectType();
            uint64_t v126 = (void (*)(void (**)(char *, uint64_t), uint64_t, uint64_t, void *))v124[1];
            swift_bridgeObjectRetain();
            id v127 = v121;
            uint64_t v128 = v123;
            uint64_t v117 = (uint64_t)v122;
            uint64_t v129 = v124;
            uint64_t v130 = (char *)v196;
            v126(v128, v119, v125, v129);
          }
          else
          {
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            uint64_t v207 = 0;
            unint64_t v208 = 0xE000000000000000;
            uint64_t v195 = qword_1EB997FD0;
            swift_retain();
            sub_1B6E328C8();
            sub_1B6E31948();
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            uint64_t v132 = v207;
            unint64_t v131 = v208;
            char v133 = sub_1B6E32148();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            uint64_t v197 = v120;
            v209 = v3;
            uint64_t v134 = qword_1EB997FF0;
            uint64_t v135 = qword_1EB985528;
            swift_retain();
            if (v135 != -1) {
              swift_once();
            }
            sub_1B62C6100(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
            uint64_t v136 = swift_allocObject();
            *(_OWORD *)(v136 + 16) = v188;
            *(void *)(v136 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v136 + 64) = sub_1B678615C();
            *(void *)(v136 + 32) = v132;
            *(void *)(v136 + 40) = v131;
            swift_bridgeObjectRetain();
            sub_1B6E31258();
            swift_bridgeObjectRelease();
            swift_retain();
            uint64_t v137 = v198;
            sub_1B6E31088();
            uint64_t v138 = v201[12];
            LOBYTE(v136) = v133;
            unint64_t v139 = v131;
            uint64_t v192 = v201[16];
            uint64_t v193 = v138;
            uint64_t v140 = v201[20];
            uint64_t v194 = v134;
            uint64_t v141 = (uint64_t)v200;
            uint64_t v142 = v132;
            uint64_t v143 = &v200[v140];
            (*v191)(v200, v137, v199);
            *(unsigned char *)(v141 + v193) = v136;
            *(void *)(v141 + v192) = 0;
            *(void *)uint64_t v143 = v142;
            *((void *)v143 + 1) = v139;
            swift_bridgeObjectRetain();
            sub_1B6E31368();
            swift_release();
            sub_1B6DA29E4(v141, (uint64_t (*)(void))sub_1B62E17B4);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            uint64_t v130 = (char *)v196;
            sub_1B6E30E48();
            uint64_t v3 = v209;
          }
          swift_bridgeObjectRelease();
          uint64_t v144 = sub_1B6E31748();
          if (v3)
          {

            uint64_t v3 = 0;
          }
          else
          {
            uint64_t v146 = v144;
            uint64_t v147 = v145;
            swift_bridgeObjectRelease();
            *(void *)uint64_t v117 = v146;
            *(void *)(v117 + 8) = v147;
            sub_1B68F6D68();
          }
          (*(void (**)(char *, uint64_t))v202)(v130, v205);
          v117 += (uint64_t)v203;
          long long v118 = v204 + 48;
          uint64_t v112 = (void *)((char *)v206 - 1);
        }
        while (v206 != (void *)1);
      }
    }
  }
  else
  {
    uint64_t v63 = v5;
    uint64_t v203 = (char *)v30;
    uint64_t v64 = v186;
    uint64_t v184 = v29;
    uint64_t v65 = (uint64_t)v27;
    long long v182 = v26;
    if (!v26) {
      uint64_t v65 = a1[7] - a1[6];
    }
    v8[16] = 1;
    uint64_t v66 = v63;
    unsigned __int32 v67 = &v8[*(int *)(v63 + 24)];
    uint64_t v68 = type metadata accessor for ScriptIndex();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 1, 1, v68);
    *(void *)&v8[*(int *)(v66 + 28)] = &unk_1F0F5AE10;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0xE000000000000000;
    uint64_t v69 = *(void *)(v64 + 32);
    uint64_t v70 = v209[9];
    uint64_t v71 = *((unsigned __int8 *)v209 + 80) + 1;
    unint64_t v180 = v70 * v65;
    v185 = ecs_stack_allocator_allocate(v69, v70 * v65, v71);
    if (v65)
    {
      uint64_t v72 = v185;
      uint64_t v73 = v65;
      do
      {
        sub_1B6DA0BCC((uint64_t)v8, (uint64_t)v72, type metadata accessor for ShaderScript);
        uint64_t v72 = (void *)((char *)v72 + v70);
        --v73;
      }
      while (v73);
    }
    uint64_t v195 = v70;
    sub_1B6DA29E4((uint64_t)v8, type metadata accessor for ShaderScript);
    uint64_t v181 = v65;
    if (v182)
    {
      uint64_t v74 = v195;
      if (v204)
      {
        uint64_t v196 = (void (**)(char *, uint64_t))(v194 + 8);
        uint64_t v75 = v203 + 40;
        unint64_t v189 = 0x80000001B6F38470;
        uint64_t v190 = (void (**)(char *, char *, uint64_t))(v206 + 4);
        *(void *)&long long v188 = 0x80000001B6F384A0;
        long long v187 = xmmword_1B6E77050;
        uint64_t v76 = v185;
        char v77 = v204;
        do
        {
          uint64_t v202 = v75;
          uint64_t v203 = v77;
          uint64_t v80 = *((void *)v75 - 3);
          v206 = (void *)*((void *)v75 - 2);
          uint64_t v81 = (void *)*((void *)v75 - 1);
          v209 = v3;
          if (v81)
          {
            uint64_t v82 = *(void *)v75;
            uint64_t v83 = swift_getObjectType();
            char v84 = v206;
            uint64_t v85 = v76;
            uint64_t v86 = v74;
            uint64_t v87 = v83;
            float v88 = *(void (**)(uint64_t, void *, uint64_t, uint64_t))(v82 + 8);
            swift_bridgeObjectRetain();
            id v89 = v81;
            uint64_t v90 = v80;
            char v91 = (char *)v197;
            uint64_t v92 = v87;
            uint64_t v74 = v86;
            uint64_t v76 = v85;
            v88(v90, v84, v92, v82);
          }
          else
          {
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            uint64_t v207 = 0;
            unint64_t v208 = 0xE000000000000000;
            uint64_t v193 = qword_1EB997FD0;
            swift_retain();
            sub_1B6E328C8();
            sub_1B6E31948();
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            char v93 = (void (**)(char *, char *, uint64_t))v207;
            unint64_t v94 = v208;
            char v95 = sub_1B6E32148();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            uint64_t v194 = v80;
            uint64_t v96 = qword_1EB997FF0;
            uint64_t v97 = qword_1EB985528;
            swift_retain();
            if (v97 != -1) {
              swift_once();
            }
            sub_1B62C6100(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
            uint64_t v98 = swift_allocObject();
            *(_OWORD *)(v98 + 16) = v187;
            *(void *)(v98 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v98 + 64) = sub_1B678615C();
            *(void *)(v98 + 32) = v93;
            *(void *)(v98 + 40) = v94;
            swift_bridgeObjectRetain();
            sub_1B6E31258();
            swift_bridgeObjectRelease();
            swift_retain();
            uint64_t v191 = v93;
            uint64_t v99 = v198;
            sub_1B6E31088();
            uint64_t v100 = (uint64_t)v200;
            uint64_t v101 = v201[12];
            uint64_t v192 = v96;
            uint64_t v102 = v201[16];
            unint64_t v103 = v94;
            uint64_t v104 = &v200[v201[20]];
            (*v190)(v200, v99, v199);
            *(unsigned char *)(v100 + v101) = v95;
            *(void *)(v100 + v102) = 0;
            *(void *)uint64_t v104 = v191;
            *((void *)v104 + 1) = v103;
            swift_bridgeObjectRetain();
            sub_1B6E31368();
            swift_release();
            sub_1B6DA29E4(v100, (uint64_t (*)(void))sub_1B62E17B4);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            char v91 = (char *)v197;
            sub_1B6E30E48();
            uint64_t v74 = v195;
          }
          swift_bridgeObjectRelease();
          uint64_t v105 = v209;
          uint64_t v106 = sub_1B6E31748();
          uint64_t v3 = v105;
          if (v105)
          {

            uint64_t v3 = 0;
          }
          else
          {
            uint64_t v78 = v106;
            uint64_t v79 = v107;
            swift_bridgeObjectRelease();
            uint64_t *v76 = v78;
            v76[1] = v79;
            sub_1B68F6D68();
          }
          (*v196)(v91, v205);
          uint64_t v76 = (uint64_t *)((char *)v76 + v74);
          uint64_t v75 = v202 + 48;
          char v77 = v203 - 1;
        }
        while (v203 != (char *)1);
      }
      unint64_t v108 = (unint64_t)v185;
      uint64_t v109 = v186;
      sub_1B6D82234(v182, v183, (uint64_t)v204, (uint64_t)v185, v181);
    }
    else
    {
      v209 = v3;
      uint64_t v113 = a1[6];
      uint64_t v114 = a1[7];
      uint64_t v115 = (void *)(v114 - v113);
      if (v114 != v113)
      {
        uint64_t v191 = (void (**)(char *, char *, uint64_t))(v206 + 4);
        uint64_t v204 = (char *)(v194 + 8);
        __int32 v149 = &v203[48 * v113 + 40];
        unint64_t v189 = 0x80000001B6F384A0;
        uint64_t v190 = (void (**)(char *, char *, uint64_t))0x80000001B6F38470;
        long long v188 = xmmword_1B6E77050;
        uint64_t v150 = v185;
        do
        {
          v206 = v115;
          uint64_t v152 = (char *)*((void *)v149 - 3);
          uint64_t v151 = (void (**)(char *, uint64_t))*((void *)v149 - 2);
          uint64_t v153 = (void *)*((void *)v149 - 1);
          if (v153)
          {
            uint64_t v154 = *((void *)v149 - 3);
            uint64_t v155 = *(void *)v149;
            uint64_t v156 = swift_getObjectType();
            uint64_t v157 = *(void (**)(uint64_t, void (**)(char *, uint64_t), uint64_t, uint64_t))(v155 + 8);
            swift_bridgeObjectRetain();
            id v158 = v153;
            uint64_t v159 = v156;
            uint64_t v160 = v202;
            v157(v154, v151, v159, v155);
          }
          else
          {
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            uint64_t v207 = 0;
            unint64_t v208 = 0xE000000000000000;
            uint64_t v197 = (void (**)(char *, uint64_t))qword_1EB997FD0;
            swift_retain();
            sub_1B6E328C8();
            sub_1B6E31948();
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            uint64_t v162 = v207;
            unint64_t v161 = v208;
            int v163 = sub_1B6E32148();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            uint64_t v196 = v151;
            uint64_t v203 = v152;
            uint64_t v164 = qword_1EB997FF0;
            uint64_t v165 = qword_1EB985528;
            swift_retain();
            if (v165 != -1) {
              swift_once();
            }
            sub_1B62C6100(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
            uint64_t v166 = swift_allocObject();
            *(_OWORD *)(v166 + 16) = v188;
            *(void *)(v166 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v166 + 64) = sub_1B678615C();
            *(void *)(v166 + 32) = v162;
            *(void *)(v166 + 40) = v161;
            swift_bridgeObjectRetain();
            sub_1B6E31258();
            swift_bridgeObjectRelease();
            swift_retain();
            LODWORD(v193) = v163;
            uint64_t v167 = v198;
            sub_1B6E31088();
            uint64_t v168 = (uint64_t)v200;
            uint64_t v169 = v201[12];
            uint64_t v194 = v164;
            unint64_t v170 = v161;
            uint64_t v192 = v201[16];
            uint64_t v171 = v162;
            uint64_t v172 = &v200[v201[20]];
            (*v191)(v200, v167, v199);
            *(unsigned char *)(v168 + v169) = v193;
            *(void *)(v168 + v192) = 0;
            *(void *)uint64_t v172 = v171;
            *((void *)v172 + 1) = v170;
            swift_bridgeObjectRetain();
            sub_1B6E31368();
            swift_release();
            sub_1B6DA29E4(v168, (uint64_t (*)(void))sub_1B62E17B4);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            uint64_t v160 = v202;
            sub_1B6E30E48();
          }
          swift_bridgeObjectRelease();
          uint64_t v173 = v209;
          uint64_t v174 = sub_1B6E31748();
          uint64_t v176 = v195;
          if (v173)
          {

            v209 = 0;
          }
          else
          {
            uint64_t v177 = v174;
            uint64_t v178 = v175;
            v209 = 0;
            swift_bridgeObjectRelease();
            *uint64_t v150 = v177;
            v150[1] = v178;
            sub_1B68F6D68();
          }
          (*(void (**)(char *, uint64_t))v204)(v160, v205);
          uint64_t v150 = (uint64_t *)((char *)v150 + v176);
          v149 += 48;
          uint64_t v115 = (void *)((char *)v206 - 1);
        }
        while (v206 != (void *)1);
      }
      unint64_t v108 = (unint64_t)v185;
      uint64_t v109 = v186;
      sub_1B6D823FC(*(void *)(v184 + 232), *(void *)(v184 + 240));
    }
    ecs_stack_allocator_deallocate(*(void **)(v109 + 32), v108, v180);
  }
  return swift_release();
}

uint64_t sub_1B6D897A0(void *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  unint64_t v9 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for VideoCaptureRuntime, (uint64_t)&off_1F0F7F880, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v52);
  if (v52 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1F0F74BA8;
    uint64_t v10 = sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v5, v4, v6, v8);
    uint64_t v11 = (void *)v10;
    if (v5)
    {
      for (; v6; --v6)
      {
        uint64_t v13 = *v9;
        v9 += 4;
        uint64_t v12 = v13;
        if (v13)
        {
          uint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture);
          if (v14)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *uint64_t v11 = v14;
          }
        }
        ++v11;
      }
    }
    else
    {
      uint64_t v28 = a1[6];
      uint64_t v29 = a1[7];
      uint64_t v30 = v29 - v28;
      if (v29 != v28)
      {
        uint64_t v37 = (void *)(v10 + 8 * v28);
        char v38 = &v9[4 * v28];
        do
        {
          uint64_t v40 = *v38;
          v38 += 4;
          uint64_t v39 = v40;
          if (v40)
          {
            uint64_t v41 = *(void *)(v39 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture);
            if (v41)
            {
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              void *v37 = v41;
            }
          }
          ++v37;
          --v30;
        }
        while (v30);
      }
    }
    return swift_release();
  }
  else
  {
    unint64_t v51 = a2;
    if (v5)
    {
      float v47 = v5;
      uint64_t v49 = a2[4];
      uint64_t v15 = sub_1B6D97130(v6, 0, v49);
      unint64_t v16 = (unint64_t)v15;
      uint64_t v48 = v17;
      uint64_t v19 = v18;
      uint64_t v20 = v4;
      if (v6)
      {
        uint64_t v21 = v15;
        uint64_t v22 = v6;
        do
        {
          uint64_t v24 = *v9;
          v9 += 4;
          uint64_t v23 = v24;
          if (v24)
          {
            uint64_t v25 = *(void *)(v23 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture);
            if (v25)
            {
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              uint64_t v20 = v4;
              void *v21 = v25;
            }
          }
          ++v21;
          --v22;
        }
        while (v22);
      }
      sub_1B6D825B4(v47, v20, v6, v16, v19);
      uint64_t v27 = v48;
      uint64_t v26 = (void *)v49;
    }
    else
    {
      uint64_t v31 = a1[6];
      uint64_t v32 = a1[7];
      uint64_t v50 = v51[4];
      uint64_t v33 = sub_1B6D97130(v32 - v31, 0, v50);
      unint64_t v16 = (unint64_t)v33;
      uint64_t v27 = v34;
      uint64_t v35 = v32 - v31;
      if (v35)
      {
        uint64_t v42 = &v9[4 * v31];
        uint64_t v43 = v33;
        do
        {
          uint64_t v45 = *v42;
          v42 += 4;
          uint64_t v44 = v45;
          if (v45)
          {
            uint64_t v46 = *(void *)(v44 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture);
            if (v46)
            {
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              *uint64_t v43 = v46;
            }
          }
          ++v43;
          --v35;
        }
        while (v35);
      }
      sub_1B6D82704(*(void *)(v7 + 232), *(void *)(v7 + 240));
      uint64_t v26 = (void *)v50;
    }
    ecs_stack_allocator_deallocate(v26, v16, 8 * v27);
    return swift_release();
  }
}

uint64_t sub_1B6D89ABC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v3 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  swift_retain();
  uint64_t v8 = (unsigned char *)sub_1B62C9024((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1F0F76610, v4, v3, v5, v6);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for EmitterRuntime, __dst);
  uint64_t v35 = v7;
  if (LOBYTE(__dst[0]) != 1)
  {
    if (qword_1EB97DBA0 != -1) {
      swift_once();
    }
    __dst[0] = 0;
    MEMORY[0x1BA9B84E0](__dst, 8);
    __dst[0] = 0;
    MEMORY[0x1BA9B84E0](__dst, 8);
    __dst[0] = 0;
    MEMORY[0x1BA9B84E0](__dst, 8);
    __dst[0] = 0;
    MEMORY[0x1BA9B84E0](__dst, 8);
    if (qword_1EB97DC28 != -1) {
      swift_once();
    }
    type metadata accessor for EmitterRuntime.Storage();
    swift_allocObject();
    swift_retain();
    vfx_uniform_grid_create();
  }
  *(void *)(a2 + 72) = &type metadata for EmitterRuntime;
  *(void *)(a2 + 80) = &off_1F0F63F30;
  uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1F0F63F30, v4, v3, v5, v6);
  uint64_t v10 = v9;
  if (!v4)
  {
    uint64_t v20 = a1[6];
    uint64_t v33 = a1[7];
    if (v20 != v33)
    {
      uint64_t v22 = *a1;
      uint64_t v23 = v9 + 656 * v20;
      uint64_t v24 = &v8[88 * v20];
      uint64_t v25 = v35;
      while (1)
      {
        uint64_t v26 = swift_retain();
        if (*(unsigned char *)(v25 + 184)) {
          break;
        }
        uint64_t v27 = *(unsigned int *)(*(void *)(v25 + 168) + 4 * v20);
        uint64_t v28 = *(unsigned int *)(*(void *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v27 + 8);
        swift_release();
        uint64_t v29 = *(unsigned int *)(v25 + 28);
        unsigned __int8 v30 = *(unsigned char *)(v25 + 32);
        swift_retain();
        LOBYTE(__dst[0]) = v30;
        sub_1B6919AD4(v27 | (v28 << 32), v29 | ((unint64_t)v30 << 32), v24, v23, v22, 1);
        swift_release();
        v23 += 656;
        v24 += 88;
        if (v33 == ++v20) {
          return swift_release();
        }
      }
      goto LABEL_19;
    }
    return swift_release();
  }
  uint64_t v11 = v5;
  if (!v5) {
    return swift_release();
  }
  uint64_t v32 = *a1;
  uint64_t v12 = v35;
  while (1)
  {
    uint64_t v14 = *v4++;
    uint64_t v13 = v14;
    uint64_t v15 = swift_retain();
    if (*(unsigned char *)(v12 + 184)) {
      break;
    }
    uint64_t v16 = *(unsigned int *)(*(void *)(v12 + 168) + 4 * v13);
    uint64_t v17 = *(unsigned int *)(*(void *)(v15 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v16 + 8);
    swift_release();
    uint64_t v18 = *(unsigned int *)(v12 + 28);
    unsigned __int8 v19 = *(unsigned char *)(v12 + 32);
    swift_retain();
    LOBYTE(__dst[0]) = v19;
    sub_1B6919AD4(v16 | (v17 << 32), v18 | ((unint64_t)v19 << 32), v8, v10, v32, 1);
    swift_release();
    v10 += 656;
    v8 += 88;
    if (!--v11) {
      return swift_release();
    }
  }
LABEL_19:
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B6D8A154(void *a1, void *a2, unint64_t a3)
{
  unsigned int v3 = a3;
  unint64_t v74 = HIDWORD(a3);
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v6 = a1[12];
  unint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v7, v6, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for Parent, &v75);
  if (v75 != 1)
  {
    unint64_t v14 = v8;
    if (!v7) {
      unint64_t v14 = a1[7] - a1[6];
    }
    uint64_t v73 = (void *)a2[4];
    uint64_t v15 = ecs_stack_allocator_allocate((uint64_t)v73, 8 * v14, 4);
    unint64_t v16 = (unint64_t)v15;
    if (v14)
    {
      if (v14 < 0x18)
      {
        unint64_t v17 = 0;
LABEL_23:
        unint64_t v27 = v14 - v17;
        uint64_t v28 = &v15[v17];
        do
        {
          *v28++ = 0xFFFFFFFFLL;
          --v27;
        }
        while (v27);
        goto LABEL_25;
      }
      unint64_t v17 = 0;
      uint64_t v22 = v14 - 1;
      if (&v15[v22] < v15) {
        goto LABEL_23;
      }
      if ((char *)&v15[v22] + 4 < (char *)v15 + 4 || (v14 - 1) >> 61 != 0) {
        goto LABEL_23;
      }
      unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v24 = v15 + 4;
      *(void *)&long long v25 = 0xFFFFFFFFLL;
      *((void *)&v25 + 1) = 0xFFFFFFFFLL;
      unint64_t v26 = v14 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(v24 - 2) = v25;
        *(v24 - 1) = v25;
        *uint64_t v24 = v25;
        v24[1] = v25;
        v24 += 4;
        v26 -= 8;
      }
      while (v26);
      if (v14 != v17) {
        goto LABEL_23;
      }
    }
LABEL_25:
    if (v7)
    {
      if (v8)
      {
        if (v8 >= 0x18)
        {
          unint64_t v29 = 0;
          uint64_t v49 = v8 - 1;
          if (&v15[v49] >= v15 && (char *)&v15[v49] + 4 >= (char *)v15 + 4 && !((v8 - 1) >> 61))
          {
            unint64_t v29 = v8 & 0xFFFFFFFFFFFFFFF8;
            int32x4_t v50 = vdupq_n_s32(v3);
            int32x4_t v51 = vdupq_n_s32(v74);
            char v52 = (float *)(v15 + 4);
            unint64_t v53 = v8 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              uint64_t v54 = v52 - 8;
              vst2q_f32(v54, *(float32x4x2_t *)v50.i8);
              vst2q_f32(v52, *(float32x4x2_t *)v50.i8);
              v52 += 16;
              v53 -= 8;
            }
            while (v53);
            if (v8 == v29) {
              goto LABEL_62;
            }
          }
        }
        else
        {
          unint64_t v29 = 0;
        }
        unint64_t v55 = v8 - v29;
        float32x2_t v56 = (_DWORD *)&v15[v29] + 1;
        do
        {
          *(v56 - 1) = v3;
          _DWORD *v56 = v74;
          v56 += 2;
          --v55;
        }
        while (v55);
      }
LABEL_62:
      sub_1B6D83B40(v7, v6, v8, (uint64_t)v15, v14);
      goto LABEL_63;
    }
    uint64_t v30 = a1[6];
    uint64_t v31 = a1[7];
    unint64_t v32 = v31 - v30;
    if (v31 != v30)
    {
      if (v32 >= 0x18
        && ((v33 = v31 + ~v30, &v15[v33] >= v15) ? (BOOL v34 = (char *)&v15[v33] + 4 >= (char *)v15 + 4) : (BOOL v34 = 0),
            (unint64_t v35 = v33 >> 61, v34) ? (v36 = v35 == 0) : (v36 = 0),
            v36))
      {
        unint64_t v37 = v32 & 0xFFFFFFFFFFFFFFF8;
        v30 += v32 & 0xFFFFFFFFFFFFFFF8;
        int32x4_t v68 = vdupq_n_s32(v3);
        int32x4_t v69 = vdupq_n_s32(v74);
        uint64_t v70 = (float *)(v15 + 4);
        unint64_t v71 = v32 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          uint64_t v72 = v70 - 8;
          vst2q_f32(v72, *(float32x4x2_t *)v68.i8);
          vst2q_f32(v70, *(float32x4x2_t *)v68.i8);
          v70 += 16;
          v71 -= 8;
        }
        while (v71);
        if (v32 == v37) {
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v37 = 0;
      }
      char v38 = (_DWORD *)&v15[v37] + 1;
      uint64_t v39 = v31 - v30;
      do
      {
        *(v38 - 1) = v3;
        _DWORD *v38 = v74;
        v38 += 2;
        --v39;
      }
      while (v39);
    }
LABEL_41:
    sub_1B6D83CF0(*(void *)(v9 + 232), *(void *)(v9 + 240));
LABEL_63:
    ecs_stack_allocator_deallocate(v73, v16, 8 * v14);
    return swift_release();
  }
  a2[9] = &type metadata for Parent;
  a2[10] = &off_1F0FA0430;
  unint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for Parent, (uint64_t)&off_1F0FA0430, v7, v6, v8, v10);
  if (!v7)
  {
    uint64_t v18 = a1[6];
    uint64_t v19 = a1[7];
    unint64_t v20 = v19 - v18;
    if (v19 == v18) {
      return swift_release();
    }
    if (v20 >= 0x20)
    {
      unint64_t v57 = v19 + ~v18;
      uint64_t v58 = 8 * v18;
      unint64_t v59 = v11 + 8 * v18;
      int v21 = v74;
      if (v59 + 8 * v57 >= v59 && v59 + 4 + 8 * v57 >= v59 + 4 && !(v57 >> 61))
      {
        int32x4_t v60 = vdupq_n_s32(v3);
        v18 += v20 & 0xFFFFFFFFFFFFFFF8;
        int32x4_t v61 = vdupq_n_s32(v74);
        uint64_t v62 = (float *)(v58 + v11 + 32);
        unint64_t v63 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          uint64_t v64 = v62 - 8;
          vst2q_f32(v64, *(float32x4x2_t *)v60.i8);
          vst2q_f32(v62, *(float32x4x2_t *)v60.i8);
          v62 += 16;
          v63 -= 8;
        }
        while (v63);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8)) {
          return swift_release();
        }
      }
    }
    else
    {
      int v21 = v74;
    }
    uint64_t v65 = v19 - v18;
    uint64_t v66 = (_DWORD *)(v11 + 8 * v18 + 4);
    do
    {
      *(v66 - 1) = v3;
      *uint64_t v66 = v21;
      v66 += 2;
      --v65;
    }
    while (v65);
    return swift_release();
  }
  if (!v8) {
    return swift_release();
  }
  if (v8 < 0x18)
  {
    unint64_t v12 = 0;
    int v13 = v74;
LABEL_51:
    unint64_t v47 = v8 - v12;
    uint64_t v48 = (_DWORD *)(v11 + 8 * v12 + 4);
    do
    {
      *(v48 - 1) = v3;
      _DWORD *v48 = v13;
      v48 += 2;
      --v47;
    }
    while (v47);
    return swift_release();
  }
  unint64_t v12 = 0;
  uint64_t v40 = 8 * (v8 - 1);
  int v13 = v74;
  if (v11 + v40 < v11) {
    goto LABEL_51;
  }
  if (v11 + 4 + v40 < v11 + 4 || (v8 - 1) >> 61 != 0) {
    goto LABEL_51;
  }
  unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v42 = vdupq_n_s32(v3);
  int32x4_t v43 = vdupq_n_s32(v74);
  uint64_t v44 = (float *)(v11 + 32);
  unint64_t v45 = v8 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    uint64_t v46 = v44 - 8;
    vst2q_f32(v46, *(float32x4x2_t *)v42.i8);
    vst2q_f32(v44, *(float32x4x2_t *)v42.i8);
    v44 += 16;
    v45 -= 8;
  }
  while (v45);
  if (v8 != v12) {
    goto LABEL_51;
  }
  return swift_release();
}

uint64_t sub_1B6D8A5F0(void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  swift_retain();
  unint64_t v12 = (int *)sub_1B62C9024((uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1F0F6B7A8, v7, v8, v9, v11);
  sub_1B6345398(*(void *)(v10 + 40), (uint64_t)&type metadata for TextureCPURuntime, v107);
  if (LOBYTE(v107[0]) == 1)
  {
    a2[9] = &type metadata for TextureCPURuntime;
    a2[10] = &off_1F0F74A68;
    uint64_t v13 = sub_1B62C9024((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1F0F74A68, v7, v8, v9, v11);
    if (v7)
    {
      if (v9)
      {
        uint64_t v14 = *a4;
        char v91 = *((unsigned char *)a4 + 9);
        char v95 = *((unsigned char *)a4 + 8);
        char v87 = *((unsigned char *)a4 + 10);
        uint64_t v79 = a4[4];
        uint64_t v83 = a4[2];
        uint64_t v15 = a4[7];
        uint64_t v71 = a4[6];
        uint64_t v75 = a4[5];
        uint64_t v16 = a4[8];
        uint64_t v17 = v13 + 56;
        int v18 = *((_DWORD *)a4 + 18);
        do
        {
          uint64_t v19 = *v12++;
          uint64_t v20 = *a3;
          uint64_t v21 = a3[1] + (v19 << 11);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(void *)(v17 - 56) = v20;
          *(void *)(v17 - 48) = v21;
          *(void *)(v17 - 40) = 2048;
          *(void *)(v17 - 24) = v14;
          *(unsigned char *)(v17 - 16) = v95;
          *(unsigned char *)(v17 - 15) = v91;
          *(unsigned char *)(v17 - 14) = v87;
          *(void *)(v17 - 8) = v83;
          *(void *)uint64_t v17 = 0;
          *(void *)(v17 + 16) = v75;
          *(void *)(v17 + 24) = v71;
          *(void *)(v17 + 32) = v15;
          *(void *)(v17 + 40) = v16;
          *(_DWORD *)(v17 + 48) = v18;
          *(void *)(v17 + 8) = v79;
          v17 += 120;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      uint64_t v37 = a1[6];
      uint64_t v38 = a1[7];
      uint64_t v39 = v38 - v37;
      if (v38 != v37)
      {
        uint64_t v53 = *a4;
        char v94 = *((unsigned char *)a4 + 9);
        char v98 = *((unsigned char *)a4 + 8);
        char v90 = *((unsigned char *)a4 + 10);
        uint64_t v82 = a4[4];
        uint64_t v86 = a4[2];
        uint64_t v54 = a4[7];
        uint64_t v74 = a4[6];
        uint64_t v78 = a4[5];
        uint64_t v55 = a4[8];
        int v56 = *((_DWORD *)a4 + 18);
        unint64_t v57 = &v12[v37];
        uint64_t v58 = v13 + 120 * v37 + 56;
        do
        {
          uint64_t v59 = *v57++;
          uint64_t v60 = *a3;
          uint64_t v61 = a3[1] + (v59 << 11);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(void *)(v58 - 56) = v60;
          *(void *)(v58 - 48) = v61;
          *(void *)(v58 - 40) = 2048;
          *(void *)(v58 - 24) = v53;
          *(unsigned char *)(v58 - 16) = v98;
          *(unsigned char *)(v58 - 15) = v94;
          *(unsigned char *)(v58 - 14) = v90;
          *(void *)(v58 - 8) = v86;
          *(void *)uint64_t v58 = 0;
          *(void *)(v58 + 16) = v78;
          *(void *)(v58 + 24) = v74;
          *(void *)(v58 + 32) = v54;
          *(void *)(v58 + 40) = v55;
          *(_DWORD *)(v58 + 48) = v56;
          *(void *)(v58 + 8) = v82;
          v58 += 120;
          --v39;
        }
        while (v39);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v63 = v8;
    uint64_t v22 = v9;
    uint64_t v23 = v7;
    if (!v7) {
      uint64_t v22 = a1[7] - a1[6];
    }
    RGTextureDescriptor.init()((uint64_t)&v99);
    memset(v107, 0, sizeof(v107));
    char v108 = 0;
    uint64_t v109 = v99;
    __int16 v110 = v100;
    char v111 = v101;
    long long v112 = v102;
    long long v113 = v103;
    long long v114 = v104;
    uint64_t v115 = v105;
    int v116 = v106;
    uint64_t v117 = MEMORY[0x1E4FBC860];
    uint64_t v24 = a2[4];
    long long v25 = sub_1B6D99CD4(v22, (uint64_t)v107, v24);
    uint64_t v64 = v27;
    uint64_t v65 = v26;
    swift_bridgeObjectRelease();
    uint64_t v68 = v10;
    uint64_t v66 = (void *)v24;
    uint64_t v67 = (uint64_t)v25;
    if (v23)
    {
      uint64_t v62 = v23;
      if (v9)
      {
        uint64_t v28 = *a4;
        char v92 = *((unsigned char *)a4 + 9);
        char v96 = *((unsigned char *)a4 + 8);
        char v88 = *((unsigned char *)a4 + 10);
        uint64_t v80 = a4[4];
        uint64_t v84 = a4[2];
        uint64_t v72 = a4[6];
        uint64_t v76 = a4[5];
        uint64_t v29 = a4[8];
        uint64_t v70 = a4[7];
        uint64_t v30 = v25 + 7;
        uint64_t v31 = v9;
        int v32 = *((_DWORD *)a4 + 18);
        do
        {
          uint64_t v33 = *v12++;
          uint64_t v34 = *a3;
          uint64_t v35 = a3[1] + (v33 << 11);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(v30 - 7) = v34;
          *(v30 - 6) = v35;
          *(v30 - 5) = 2048;
          *(v30 - 3) = v28;
          *((unsigned char *)v30 - 16) = v96;
          *((unsigned char *)v30 - 15) = v92;
          *((unsigned char *)v30 - 14) = v88;
          *(v30 - 1) = v84;
          *uint64_t v30 = 0;
          void v30[2] = v76;
          void v30[3] = v72;
          v30[4] = v70;
          v30[5] = v29;
          *((_DWORD *)v30 + 12) = v32;
          v30[1] = v80;
          v30 += 15;
          --v31;
        }
        while (v31);
      }
      unint64_t v36 = v67;
      sub_1B6D83E88(v62, v63, v9, v67, v64);
    }
    else
    {
      uint64_t v40 = a1[6];
      uint64_t v41 = a1[7];
      uint64_t v42 = v41 - v40;
      if (v41 != v40)
      {
        uint64_t v43 = *a4;
        char v93 = *((unsigned char *)a4 + 9);
        char v97 = *((unsigned char *)a4 + 8);
        char v89 = *((unsigned char *)a4 + 10);
        uint64_t v81 = a4[4];
        uint64_t v85 = a4[2];
        uint64_t v44 = a4[7];
        uint64_t v73 = a4[6];
        uint64_t v77 = a4[5];
        uint64_t v45 = a4[8];
        uint64_t v46 = &v12[v40];
        unint64_t v47 = v25 + 7;
        int v48 = *((_DWORD *)a4 + 18);
        do
        {
          uint64_t v49 = *v46++;
          uint64_t v50 = *a3;
          uint64_t v51 = a3[1] + (v49 << 11);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(v47 - 7) = v50;
          *(v47 - 6) = v51;
          *(v47 - 5) = 2048;
          *(v47 - 3) = v43;
          *((unsigned char *)v47 - 16) = v97;
          *((unsigned char *)v47 - 15) = v93;
          *((unsigned char *)v47 - 14) = v89;
          *(v47 - 1) = v85;
          *unint64_t v47 = 0;
          v47[2] = v77;
          v47[3] = v73;
          v47[4] = v44;
          v47[5] = v45;
          *((_DWORD *)v47 + 12) = v48;
          v47[1] = v81;
          v47 += 15;
          --v42;
        }
        while (v42);
      }
      unint64_t v36 = v67;
      sub_1B6D83FDC(*(void *)(v68 + 232), *(void *)(v68 + 240));
    }
    ecs_stack_allocator_deallocate(v66, v36, 120 * v65);
    return swift_release();
  }
}

uint64_t sub_1B6D8AB3C(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  unint64_t v7 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for ColorRampComponent, (uint64_t)&off_1F0F75B28, v6, v5, v7, v9);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for ColorRampRuntime, &v77);
  if (v77 == 1)
  {
    a2[9] = &type metadata for ColorRampRuntime;
    a2[10] = &off_1F0F6B7A8;
    uint64_t v10 = sub_1B62C9024((uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1F0F6B7A8, v6, v5, v7, v9);
    if (!v6)
    {
      unint64_t v21 = a1[6];
      uint64_t v20 = a1[7];
      unint64_t v22 = v20 - v21;
      if (v20 != v21)
      {
        uint64_t v23 = a1[3];
        uint64_t v24 = *a3;
        unint64_t v25 = a1[6];
        if (v22 < 8) {
          goto LABEL_19;
        }
        unint64_t v26 = v23 - v21 + v24;
        int64x2_t v27 = vdupq_n_s64(v21);
        unint64_t v25 = v21 + (v22 & 0xFFFFFFFFFFFFFFF8);
        int64x2_t v28 = vaddq_s64(v27, (int64x2_t)xmmword_1B6E9D130);
        int64x2_t v29 = vaddq_s64(v27, (int64x2_t)xmmword_1B6E4F270);
        int64x2_t v30 = vdupq_n_s64(v26);
        int64x2_t v31 = vdupq_n_s64(v26 + 4);
        int v32 = (int32x4_t *)(v10 + 4 * v21 + 16);
        int64x2_t v33 = vdupq_n_s64(8uLL);
        unint64_t v34 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v32[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v30, v29), (int32x4_t)vaddq_s64(v30, v28));
          *int v32 = vuzp1q_s32((int32x4_t)vaddq_s64(v31, v29), (int32x4_t)vaddq_s64(v31, v28));
          int64x2_t v28 = vaddq_s64(v28, v33);
          int64x2_t v29 = vaddq_s64(v29, v33);
          v32 += 2;
          v34 -= 8;
        }
        while (v34);
        if (v22 != (v22 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_19:
          int v35 = v25 + v23 + v24 - v21;
          uint64_t v36 = v20 - v25;
          uint64_t v37 = (_DWORD *)(v10 + 4 * v25);
          do
          {
            *v37++ = v35++;
            --v36;
          }
          while (v36);
        }
      }
      return swift_release();
    }
    if (v7)
    {
      uint64_t v11 = a1[3];
      uint64_t v12 = *a3;
      if (v7 >= 8)
      {
        unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFF8;
        int64x2_t v44 = vdupq_n_s64(v12 + v11);
        int64x2_t v45 = vdupq_n_s64(v12 + v11 + 4);
        int64x2_t v46 = (int64x2_t)xmmword_1B6E9D130;
        int64x2_t v47 = (int64x2_t)xmmword_1B6E4F270;
        int v48 = (int32x4_t *)(v10 + 16);
        int64x2_t v49 = vdupq_n_s64(8uLL);
        unint64_t v50 = v7 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v48[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v44, v47), (int32x4_t)vaddq_s64(v44, v46));
          int32x4_t *v48 = vuzp1q_s32((int32x4_t)vaddq_s64(v45, v47), (int32x4_t)vaddq_s64(v45, v46));
          int64x2_t v46 = vaddq_s64(v46, v49);
          int64x2_t v47 = vaddq_s64(v47, v49);
          v48 += 2;
          v50 -= 8;
        }
        while (v50);
        if (v7 == v13) {
          return swift_release();
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      int v51 = v13 + v11 + v12;
      unint64_t v52 = v7 - v13;
      uint64_t v53 = (_DWORD *)(v10 + 4 * v13);
      do
      {
        *v53++ = v51++;
        --v52;
      }
      while (v52);
    }
    return swift_release();
  }
  unint64_t v14 = v7;
  if (!v6) {
    unint64_t v7 = a1[7] - a1[6];
  }
  uint64_t v75 = (void *)a2[4];
  uint64_t v15 = ecs_stack_allocator_allocate((uint64_t)v75, 4 * v7, 4);
  unint64_t v16 = (unint64_t)v15;
  if (v7) {
    memset(v15, 255, 4 * v7);
  }
  if (!v6)
  {
    uint64_t v38 = a1[6];
    uint64_t v39 = a1[7];
    unint64_t v40 = v39 - v38;
    if (v39 != v38)
    {
      uint64_t v41 = a1[3];
      uint64_t v42 = *a3;
      if (v40 >= 8)
      {
        unint64_t v43 = v40 & 0xFFFFFFFFFFFFFFF8;
        v38 += v40 & 0xFFFFFFFFFFFFFFF8;
        int64x2_t v65 = vdupq_n_s64(v42 + v41);
        int64x2_t v66 = vdupq_n_s64(v42 + v41 + 4);
        int64x2_t v67 = (int64x2_t)xmmword_1B6E9D130;
        int64x2_t v68 = (int64x2_t)xmmword_1B6E4F270;
        int32x4_t v69 = (int32x4_t *)(v16 + 16);
        int64x2_t v70 = vdupq_n_s64(8uLL);
        unint64_t v71 = v40 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v69[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v65, v68), (int32x4_t)vaddq_s64(v65, v67));
          *int32x4_t v69 = vuzp1q_s32((int32x4_t)vaddq_s64(v66, v68), (int32x4_t)vaddq_s64(v66, v67));
          int64x2_t v67 = vaddq_s64(v67, v70);
          int64x2_t v68 = vaddq_s64(v68, v70);
          v69 += 2;
          v71 -= 8;
        }
        while (v71);
        if (v40 == v43) {
          goto LABEL_42;
        }
      }
      else
      {
        unint64_t v43 = 0;
      }
      int v72 = v43 + v41 + v42;
      uint64_t v73 = (_DWORD *)(v16 + 4 * v43);
      uint64_t v74 = v39 - v38;
      do
      {
        *v73++ = v72++;
        --v74;
      }
      while (v74);
    }
LABEL_42:
    sub_1B6D84278(*(void *)(v8 + 232), *(void *)(v8 + 240));
    goto LABEL_43;
  }
  if (v14)
  {
    uint64_t v17 = a1[3];
    uint64_t v18 = *a3;
    if (v14 >= 8)
    {
      unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFF8;
      int64x2_t v55 = vdupq_n_s64(v18 + v17);
      int64x2_t v56 = vdupq_n_s64(v18 + v17 + 4);
      int64x2_t v57 = (int64x2_t)xmmword_1B6E9D130;
      int64x2_t v58 = (int64x2_t)xmmword_1B6E4F270;
      uint64_t v59 = (int32x4_t *)(v16 + 16);
      int64x2_t v60 = vdupq_n_s64(8uLL);
      unint64_t v61 = v14 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v59[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v55, v58), (int32x4_t)vaddq_s64(v55, v57));
        *uint64_t v59 = vuzp1q_s32((int32x4_t)vaddq_s64(v56, v58), (int32x4_t)vaddq_s64(v56, v57));
        int64x2_t v57 = vaddq_s64(v57, v60);
        int64x2_t v58 = vaddq_s64(v58, v60);
        v59 += 2;
        v61 -= 8;
      }
      while (v61);
      if (v14 == v19) {
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
    int v62 = v19 + v17 + v18;
    unint64_t v63 = v14 - v19;
    uint64_t v64 = (_DWORD *)(v16 + 4 * v19);
    do
    {
      *v64++ = v62++;
      --v63;
    }
    while (v63);
  }
LABEL_36:
  sub_1B6D84128(v6, v5, v14, v16, v7);
LABEL_43:
  ecs_stack_allocator_deallocate(v75, v16, 4 * v7);
  return swift_release();
}

uint64_t sub_1B6D8AFB0(void *a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  swift_retain();
  unint64_t v10 = sub_1B62C9024((uint64_t)&type metadata for REMeshAssetPointCache, (uint64_t)&off_1F0F8A8B0, v6, v5, v7, v9);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for PointCacheRuntime, &v38);
  if (v38 == 1)
  {
    *(void *)(a2 + 72) = &type metadata for PointCacheRuntime;
    *(void *)(a2 + 80) = &off_1F0F73F38;
    uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1F0F73F38, v6, v5, v7, v9);
    uint64_t v12 = (uint64_t *)v11;
    if (v6)
    {
      for (; v7; --v7)
      {
        sub_1B6C973B0(v10, v12);
        if (v2) {
          break;
        }
        v12 += 4;
        v10 += 24;
      }
    }
    else
    {
      uint64_t v23 = a1[6];
      uint64_t v24 = a1[7];
      uint64_t v25 = v24 - v23;
      if (v24 != v23)
      {
        unint64_t v26 = (uint64_t *)(v11 + 32 * v23);
        unint64_t v27 = v10 + 24 * v23;
        do
        {
          sub_1B6C973B0(v27, v26);
          if (v2) {
            break;
          }
          v26 += 4;
          v27 += 24;
          --v25;
        }
        while (v25);
      }
    }
  }
  else
  {
    uint64_t v35 = v5;
    uint64_t v13 = a2;
    uint64_t v14 = v8;
    uint64_t v15 = v7;
    if (!v6) {
      uint64_t v15 = a1[7] - a1[6];
    }
    unint64_t v16 = sub_1B67DDA3C(MEMORY[0x1E4FBC860]);
    uint64_t v37 = *(void **)(v13 + 32);
    uint64_t v17 = sub_1B6D87B1C(v15, (uint64_t)v16, 0x636143746E696F50, 0xEA00000000006568, 0, (uint64_t)v37);
    unint64_t v19 = (unint64_t)v17;
    uint64_t v36 = v20;
    if (v6)
    {
      uint64_t v34 = v18;
      if (v7)
      {
        unint64_t v21 = v17;
        uint64_t v22 = v7;
        while (1)
        {
          sub_1B6C973B0(v10, v21);
          if (v2) {
            break;
          }
          v21 += 4;
          v10 += 24;
          if (!--v22) {
            goto LABEL_14;
          }
        }
      }
      else
      {
LABEL_14:
        sub_1B6D851B0(v6, v35, v7, v19, v34);
      }
    }
    else
    {
      uint64_t v28 = a1[6];
      uint64_t v29 = a1[7];
      uint64_t v30 = v29 - v28;
      if (v29 == v28)
      {
LABEL_24:
        sub_1B6D85300(*(void *)(v14 + 232), *(void *)(v14 + 240));
      }
      else
      {
        unint64_t v31 = v10 + 24 * v28;
        int v32 = v17;
        while (1)
        {
          sub_1B6C973B0(v31, v32);
          if (v2) {
            break;
          }
          v32 += 4;
          v31 += 24;
          if (!--v30) {
            goto LABEL_24;
          }
        }
      }
    }
    ecs_stack_allocator_deallocate(v37, v19, 32 * v36);
  }
  return swift_release();
}

uint64_t sub_1B6D8B24C(void *a1, void *a2, char **a3)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  swift_retain();
  uint64_t v94 = sub_1B62C9024((uint64_t)&type metadata for TexturePlaceholder, (uint64_t)&off_1F0F7ABB8, v6, v5, v7, v9);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v99);
  uint64_t v97 = v8;
  if (v99 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1F0F74BA8;
    unint64_t v10 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v6, v5, v7, v9);
    if (v6)
    {
      if (v7)
      {
        for (uint64_t i = (void *)(v94 + 8); ; i += 2)
        {
          uint64_t v13 = *v6++;
          uint64_t v12 = v13;
          uint64_t v15 = *v10++;
          uint64_t v14 = v15;
          if (*((_DWORD *)i - 2) == -1 && *((_DWORD *)i - 1) == 0) {
            break;
          }
          if (v14)
          {
            uint64_t v17 = *i;
LABEL_14:
            if (v17) {
              BOOL v18 = v14 == v17;
            }
            else {
              BOOL v18 = 0;
            }
            if (!v18) {
              goto LABEL_6;
            }
          }
LABEL_19:
          unint64_t v19 = v6;
          char v20 = *(unsigned char *)(v8 + 184);
          uint64_t v21 = swift_retain();
          if (v20) {
            goto LABEL_96;
          }
          int v22 = *(_DWORD *)(*(void *)(v8 + 168) + 4 * v12);
          int v23 = *(_DWORD *)(*(void *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v22 + 8);
          swift_release();
          uint64_t v24 = *a3;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *a3 = v24;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v24 = sub_1B633F784(0, *((void *)v24 + 2) + 1, 1, v24);
            *a3 = v24;
          }
          unint64_t v27 = *((void *)v24 + 2);
          unint64_t v26 = *((void *)v24 + 3);
          if (v27 >= v26 >> 1) {
            uint64_t v24 = sub_1B633F784(v26 > 1, v27 + 1, 1, v24);
          }
          *((void *)v24 + 2) = v27 + 1;
          uint64_t v28 = &v24[8 * v27];
          *((_DWORD *)v28 + 8) = v22;
          *((_DWORD *)v28 + 9) = v23;
          *a3 = v24;
          uint64_t v8 = v97;
          uint64_t v6 = v19;
LABEL_6:
          if (!--v7) {
            return swift_release();
          }
        }
        uint64_t v17 = *i;
        if (!v14)
        {
          if (v17) {
            goto LABEL_6;
          }
          goto LABEL_19;
        }
        goto LABEL_14;
      }
      return swift_release();
    }
    uint64_t v52 = a1[6];
    uint64_t v53 = a1[7];
    if (v52 == v53) {
      return swift_release();
    }
    for (uint64_t j = (void *)(v94 + 16 * v52 + 8); ; j += 2)
    {
      uint64_t v55 = v10[v52];
      if (*((_DWORD *)j - 2) == -1 && *((_DWORD *)j - 1) == 0) {
        break;
      }
      if (v55)
      {
        uint64_t v57 = *j;
LABEL_60:
        if (v57) {
          BOOL v58 = v55 == v57;
        }
        else {
          BOOL v58 = 0;
        }
        if (!v58) {
          goto LABEL_52;
        }
      }
LABEL_65:
      char v59 = *(unsigned char *)(v8 + 184);
      uint64_t v60 = swift_retain();
      if (v59) {
        goto LABEL_96;
      }
      int v61 = *(_DWORD *)(*(void *)(v8 + 168) + 4 * v52);
      int v62 = *(_DWORD *)(*(void *)(v60 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v61 + 8);
      swift_release();
      unint64_t v63 = *a3;
      char v64 = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v63;
      if ((v64 & 1) == 0)
      {
        unint64_t v63 = sub_1B633F784(0, *((void *)v63 + 2) + 1, 1, v63);
        *a3 = v63;
      }
      unint64_t v66 = *((void *)v63 + 2);
      unint64_t v65 = *((void *)v63 + 3);
      if (v66 >= v65 >> 1) {
        unint64_t v63 = sub_1B633F784(v65 > 1, v66 + 1, 1, v63);
      }
      *((void *)v63 + 2) = v66 + 1;
      int64x2_t v67 = &v63[8 * v66];
      *((_DWORD *)v67 + 8) = v61;
      *((_DWORD *)v67 + 9) = v62;
      *a3 = v63;
      uint64_t v8 = v97;
LABEL_52:
      if (v53 == ++v52) {
        return swift_release();
      }
    }
    uint64_t v57 = *j;
    if (!v55)
    {
      if (v57) {
        goto LABEL_52;
      }
      goto LABEL_65;
    }
    goto LABEL_60;
  }
  uint64_t v96 = v5;
  if (v6)
  {
    char v89 = v6;
    char v91 = (void *)a2[4];
    char v92 = sub_1B6D97130(v7, 0, (uint64_t)v91);
    uint64_t v90 = v29;
    uint64_t v88 = v30;
    uint64_t v31 = v5;
    if (v7)
    {
      int v32 = (void *)(v94 + 8);
      int64x2_t v33 = v6;
      uint64_t v34 = v92;
      uint64_t v35 = v7;
      while (1)
      {
        uint64_t v37 = *v33++;
        uint64_t v36 = v37;
        uint64_t v39 = *v34++;
        uint64_t v38 = v39;
        if (*((_DWORD *)v32 - 2) == -1 && *((_DWORD *)v32 - 1) == 0) {
          break;
        }
        if (v38)
        {
          uint64_t v41 = *v32;
LABEL_37:
          if (v41) {
            BOOL v42 = v38 == v41;
          }
          else {
            BOOL v42 = 0;
          }
          if (!v42) {
            goto LABEL_29;
          }
        }
LABEL_42:
        char v43 = *(unsigned char *)(v97 + 184);
        uint64_t v44 = swift_retain();
        if (v43) {
          goto LABEL_96;
        }
        int v45 = *(_DWORD *)(*(void *)(v97 + 168) + 4 * v36);
        int v95 = *(_DWORD *)(*(void *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v45 + 8);
        swift_release();
        int64x2_t v46 = *a3;
        char v47 = swift_isUniquelyReferenced_nonNull_native();
        *a3 = v46;
        if ((v47 & 1) == 0)
        {
          int64x2_t v46 = sub_1B633F784(0, *((void *)v46 + 2) + 1, 1, v46);
          *a3 = v46;
        }
        unint64_t v49 = *((void *)v46 + 2);
        unint64_t v48 = *((void *)v46 + 3);
        if (v49 >= v48 >> 1) {
          int64x2_t v46 = sub_1B633F784(v48 > 1, v49 + 1, 1, v46);
        }
        *((void *)v46 + 2) = v49 + 1;
        unint64_t v50 = &v46[8 * v49];
        *((_DWORD *)v50 + 8) = v45;
        *((_DWORD *)v50 + 9) = v95;
        *a3 = v46;
        uint64_t v31 = v96;
LABEL_29:
        v32 += 2;
        if (!--v35) {
          goto LABEL_48;
        }
      }
      uint64_t v41 = *v32;
      if (!v38)
      {
        if (v41) {
          goto LABEL_29;
        }
        goto LABEL_42;
      }
      goto LABEL_37;
    }
LABEL_48:
    unint64_t v51 = (unint64_t)v92;
    sub_1B6D825B4(v89, v31, v7, (uint64_t)v92, v88);
LABEL_73:
    ecs_stack_allocator_deallocate(v91, v51, 8 * v90);
    return swift_release();
  }
  uint64_t v68 = a1[6];
  uint64_t v69 = a1[7];
  char v91 = (void *)a2[4];
  char v93 = sub_1B6D97130(v69 - v68, 0, (uint64_t)v91);
  uint64_t v90 = v70;
  if (v69 == v68)
  {
LABEL_72:
    unint64_t v51 = (unint64_t)v93;
    sub_1B6D82704(*(void *)(v8 + 232), *(void *)(v8 + 240));
    goto LABEL_73;
  }
  int v72 = (void *)(v94 + 16 * v68 + 8);
  uint64_t v73 = v93;
  while (1)
  {
    uint64_t v75 = *v73++;
    uint64_t v74 = v75;
    if (*((_DWORD *)v72 - 2) != -1 || *((_DWORD *)v72 - 1) != 0) {
      break;
    }
    uint64_t v77 = *v72;
    if (v74) {
      goto LABEL_85;
    }
    if (!v77) {
      goto LABEL_90;
    }
LABEL_77:
    ++v68;
    v72 += 2;
    if (v69 == v68) {
      goto LABEL_72;
    }
  }
  if (!v74) {
    goto LABEL_90;
  }
  uint64_t v77 = *v72;
LABEL_85:
  if (v77) {
    BOOL v78 = v74 == v77;
  }
  else {
    BOOL v78 = 0;
  }
  if (!v78) {
    goto LABEL_77;
  }
LABEL_90:
  char v79 = *(unsigned char *)(v8 + 184);
  uint64_t v80 = swift_retain();
  if ((v79 & 1) == 0)
  {
    int v81 = *(_DWORD *)(*(void *)(v8 + 168) + 4 * v68);
    int v82 = *(_DWORD *)(*(void *)(v80 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v81 + 8);
    swift_release();
    uint64_t v83 = *a3;
    char v84 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v83;
    if ((v84 & 1) == 0)
    {
      uint64_t v83 = sub_1B633F784(0, *((void *)v83 + 2) + 1, 1, v83);
      *a3 = v83;
    }
    unint64_t v86 = *((void *)v83 + 2);
    unint64_t v85 = *((void *)v83 + 3);
    if (v86 >= v85 >> 1) {
      uint64_t v83 = sub_1B633F784(v85 > 1, v86 + 1, 1, v83);
    }
    *((void *)v83 + 2) = v86 + 1;
    char v87 = &v83[8 * v86];
    *((_DWORD *)v87 + 8) = v81;
    *((_DWORD *)v87 + 9) = v82;
    *a3 = v83;
    uint64_t v8 = v97;
    goto LABEL_77;
  }
LABEL_96:
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B6D8B8D4(void *a1, void *a2)
{
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  swift_retain();
  uint64_t v34 = sub_1B62C9024((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1F0F76610, v4, v5, v6, v7);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for Seed, &v35);
  if (v35 == 1)
  {
    a2[9] = &type metadata for Seed;
    a2[10] = &off_1F0F9E9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for Seed, (uint64_t)&off_1F0F9E9D0, v4, v5, v6, v7);
    if (v4)
    {
      if (v6)
      {
        unint64_t v10 = (unsigned char *)(v9 + 4);
        uint64_t v11 = (unsigned char *)(v34 + 72);
        do
        {
          *((_DWORD *)v10 - 1) = *((void *)v11 - 1);
          char v12 = *v11;
          v11 += 88;
          *unint64_t v10 = v12;
          v10 += 8;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v23 = a1[6];
      uint64_t v24 = a1[7] - v23;
      if (v24)
      {
        uint64_t v25 = (unsigned char *)(v9 + 8 * v23 + 4);
        unint64_t v26 = (unsigned char *)(v34 + 88 * v23 + 72);
        do
        {
          *((_DWORD *)v25 - 1) = *((void *)v26 - 1);
          char v27 = *v26;
          v26 += 88;
          unsigned char *v25 = v27;
          v25 += 8;
          --v24;
        }
        while (v24);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v14 = v6;
    if (!v4) {
      uint64_t v14 = a1[7] - a1[6];
    }
    int64x2_t v33 = (void *)a2[4];
    uint64_t v15 = ecs_stack_allocator_allocate((uint64_t)v33, 8 * v14, 4);
    unint64_t v16 = (unint64_t)v15;
    if (v14)
    {
      uint64_t v17 = (char *)v15 + 4;
      uint64_t v18 = v14;
      do
      {
        *((_DWORD *)v17 - 1) = 0;
        *uint64_t v17 = 0;
        v17 += 8;
        --v18;
      }
      while (v18);
    }
    if (v4)
    {
      if (v6)
      {
        unint64_t v19 = (char *)v15 + 4;
        char v20 = (unsigned char *)(v34 + 72);
        uint64_t v21 = v6;
        do
        {
          *((_DWORD *)v19 - 1) = *((void *)v20 - 1);
          char v22 = *v20;
          v20 += 88;
          *unint64_t v19 = v22;
          v19 += 8;
          --v21;
        }
        while (v21);
      }
      sub_1B6D85448(v4, v5, v6, (uint64_t)v15, v14);
    }
    else
    {
      uint64_t v28 = a1[6];
      uint64_t v29 = a1[7] - v28;
      if (v29)
      {
        uint64_t v30 = (char *)v15 + 4;
        uint64_t v31 = (unsigned char *)(v34 + 88 * v28 + 72);
        do
        {
          *((_DWORD *)v30 - 1) = *((void *)v31 - 1);
          char v32 = *v31;
          v31 += 88;
          *uint64_t v30 = v32;
          v30 += 8;
          --v29;
        }
        while (v29);
      }
      sub_1B6D855F8(*(void *)(v8 + 232), *(void *)(v8 + 240));
    }
    ecs_stack_allocator_deallocate(v33, v16, 8 * v14);
    return swift_release();
  }
}

uint64_t sub_1B6D8BB44(void *a1, void *a2)
{
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  swift_retain();
  uint64_t v31 = sub_1B62C9024((uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1F0F818E0, v4, v5, v6, v7);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for Scale1, &v32);
  if (v32 == 1)
  {
    a2[9] = &type metadata for Scale1;
    a2[10] = &off_1F0FA0DD0;
    uint64_t v9 = (_DWORD *)sub_1B62C9024((uint64_t)&type metadata for Scale1, (uint64_t)&off_1F0FA0DD0, v4, v5, v6, v7);
    if (v4)
    {
      if (v6)
      {
        unint64_t v10 = (_DWORD *)(v31 + 12);
        do
        {
          if (*(v10 - 1) == -1 && *v10 == 0) {
            _DWORD *v9 = 1056964608;
          }
          v10 += 10;
          ++v9;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v19 = a1[6];
      uint64_t v20 = a1[7] - v19;
      if (v20)
      {
        uint64_t v24 = (_DWORD *)(v31 + 40 * v19 + 12);
        uint64_t v25 = &v9[v19];
        do
        {
          if (*(v24 - 1) == -1 && *v24 == 0) {
            _DWORD *v25 = 1056964608;
          }
          v24 += 10;
          ++v25;
          --v20;
        }
        while (v20);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v12 = v6;
    if (!v4) {
      uint64_t v12 = a1[7] - a1[6];
    }
    uint64_t v30 = (void *)a2[4];
    uint64_t v13 = ecs_stack_allocator_allocate((uint64_t)v30, 4 * v12, 4);
    unint64_t v14 = (unint64_t)v13;
    if (v12) {
      memset_pattern16(v13, &xmmword_1B6E4F380, 4 * v12);
    }
    if (v4)
    {
      if (v6)
      {
        uint64_t v15 = (_DWORD *)(v31 + 12);
        unint64_t v16 = (_DWORD *)v14;
        uint64_t v17 = v6;
        do
        {
          if (*(v15 - 1) == -1 && *v15 == 0) {
            *unint64_t v16 = 1056964608;
          }
          v15 += 10;
          ++v16;
          --v17;
        }
        while (v17);
      }
      sub_1B6D85790(v4, v5, v6, v14, v12);
    }
    else
    {
      uint64_t v22 = a1[6];
      uint64_t v23 = a1[7] - v22;
      if (v23)
      {
        char v27 = (_DWORD *)(v31 + 40 * v22 + 12);
        uint64_t v28 = (_DWORD *)v14;
        do
        {
          if (*(v27 - 1) == -1 && *v27 == 0) {
            *uint64_t v28 = 1056964608;
          }
          v27 += 10;
          ++v28;
          --v23;
        }
        while (v23);
      }
      sub_1B6D858E0(*(void *)(v8 + 232), *(void *)(v8 + 240));
    }
    ecs_stack_allocator_deallocate(v30, v14, 4 * v12);
    return swift_release();
  }
}

uint64_t sub_1B6D8BDFC(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireIOSurface, (uint64_t)&off_1F0F91838, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    unint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          uint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        char v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        unint64_t v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8C270(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequirePremultiplyWithLinearAlpha, (uint64_t)&off_1F0F9DE18, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    unint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          uint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        char v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        unint64_t v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8C6E4(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireMipmapGeneration, (uint64_t)&off_1F0F9AA80, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    unint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          uint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        char v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        unint64_t v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8CB58(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireMipmap, (uint64_t)&off_1F0F84158, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    unint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          uint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        char v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        unint64_t v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8CFCC(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireCubemap, (uint64_t)&off_1F0F8BB50, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    unint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          uint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        char v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        unint64_t v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8D440(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireUnpremultiply, (uint64_t)&off_1F0F985A8, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    unint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          uint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        char v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        unint64_t v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8D8B4(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireNonSRGB, (uint64_t)&off_1F0F8BC28, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    unint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          uint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        char v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        unint64_t v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8DD28(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireGPURepresentation, (uint64_t)&off_1F0F9AF80, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    unint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          uint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        char v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        uint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        unint64_t v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8E19C(void *a1, void *a2)
{
  unsigned int v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  unint64_t v5 = a1[13];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureArrayFileAsset, (uint64_t)&off_1F0F8B4E8, v3, v4, v5, v7);
  sub_1B6345398(*(void *)(v6 + 40), (uint64_t)&type metadata for TextureLoadPolicy, &v50);
  if (v50 == 1)
  {
    a2[9] = &type metadata for TextureLoadPolicy;
    a2[10] = &off_1F0F74E60;
    uint64_t v8 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1F0F74E60, v3, v4, v5, v7);
    if (!v3)
    {
      uint64_t v19 = a1[6];
      uint64_t v18 = a1[7];
      unint64_t v20 = v18 - v19;
      if (v18 != v19)
      {
        uint64_t v21 = a1[6];
        if (v20 < 2) {
          goto LABEL_22;
        }
        uint64_t v21 = v19 + (v20 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v22 = (unsigned char *)(v8 + 4 * v19 + 5);
        unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 4) = 1;
          *uint64_t v22 = 1;
          v22 += 8;
          v23 -= 2;
        }
        while (v23);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_22:
          uint64_t v24 = (unsigned char *)(v8 + 4 * v21 + 1);
          uint64_t v25 = v18 - v21;
          do
          {
            *uint64_t v24 = 1;
            v24 += 4;
            --v25;
          }
          while (v25);
        }
      }
      return swift_release();
    }
    if (v5)
    {
      if (v5 == 1)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v31 = (unsigned char *)(v8 + 5);
        unint64_t v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v31 - 4) = 1;
          *uint64_t v31 = 1;
          v31 += 8;
          v32 -= 2;
        }
        while (v32);
        if (v5 == v9) {
          return swift_release();
        }
      }
      unint64_t v33 = v5 - v9;
      unint64_t v34 = (unsigned char *)(v8 + 4 * v9 + 1);
      do
      {
        *unint64_t v34 = 1;
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    return swift_release();
  }
  uint64_t v10 = v5;
  uint64_t v11 = v3;
  if (!v3) {
    unint64_t v5 = a1[7] - a1[6];
  }
  uint64_t v12 = (void *)a2[4];
  uint64_t v13 = ecs_stack_allocator_allocate((uint64_t)v12, 4 * v5, 1);
  if (v5)
  {
    if (v5 < 8)
    {
      unint64_t v14 = 0;
      goto LABEL_11;
    }
    unint64_t v14 = 0;
    uint64_t v30 = 4 * (v5 - 1);
    if ((void *)((char *)v13 + v30) < v13
      || (char *)v13 + v30 + 1 < (char *)v13 + 1
      || (char *)v13 + v30 + 2 < (char *)v13 + 2
      || (char *)v13 + v30 + 3 < (char *)v13 + 3
      || (v5 - 1) >> 62)
    {
      goto LABEL_11;
    }
    if (v5 >= 0x20)
    {
      unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v44 = v13 + 8;
      unint64_t v45 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(v44 - 2) = xmmword_1B6ECFA20;
        *(v44 - 1) = xmmword_1B6ECFA20;
        *(v44 - 4) = xmmword_1B6ECFA20;
        *(v44 - 3) = xmmword_1B6ECFA20;
        v44[2] = xmmword_1B6ECFA20;
        v44[3] = xmmword_1B6ECFA20;
        *uint64_t v44 = xmmword_1B6ECFA20;
        v44[1] = xmmword_1B6ECFA20;
        v44 += 8;
        v45 -= 32;
      }
      while (v45);
      if (v5 == v14) {
        goto LABEL_13;
      }
      if ((v5 & 0x18) == 0)
      {
LABEL_11:
        unint64_t v15 = v5 - v14;
        uint64_t v16 = (_DWORD *)v13 + v14;
        do
        {
          *v16++ = 16842752;
          --v15;
        }
        while (v15);
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v46 = v14;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFF8;
    char v47 = (_OWORD *)((char *)v13 + 4 * v46);
    unint64_t v48 = v46 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *char v47 = xmmword_1B6ECFA20;
      v47[1] = xmmword_1B6ECFA20;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    if (v5 != v14) {
      goto LABEL_11;
    }
  }
LABEL_13:
  if (!v11)
  {
    uint64_t v26 = a1[6];
    uint64_t v27 = a1[7];
    unint64_t v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 >= 2)
      {
        unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v26 += v28 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v40 = (char *)v13 + 5;
        unint64_t v41 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 4) = 1;
          *uint64_t v40 = 1;
          v40 += 8;
          v41 -= 2;
        }
        while (v41);
        if (v28 == v29) {
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      uint64_t v42 = (char *)v13 + 4 * v29 + 1;
      uint64_t v43 = v27 - v26;
      do
      {
        *uint64_t v42 = 1;
        v42 += 4;
        --v43;
      }
      while (v43);
    }
LABEL_52:
    sub_1B6D85F20(*(void *)(v6 + 232), *(void *)(v6 + 240));
    goto LABEL_53;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v36 = (char *)v13 + 5;
      unint64_t v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = 1;
        *uint64_t v36 = 1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v10 == v17) {
        goto LABEL_46;
      }
    }
    uint64_t v38 = (char *)v13 + 4 * v17 + 1;
    unint64_t v39 = v10 - v17;
    do
    {
      unsigned char *v38 = 1;
      v38 += 4;
      --v39;
    }
    while (v39);
  }
LABEL_46:
  sub_1B6D85D70(v11, v4, v10, (uint64_t)v13, v5);
LABEL_53:
  ecs_stack_allocator_deallocate(v12, (unint64_t)v13, 4 * v5);
  return swift_release();
}

uint64_t sub_1B6D8E590(void *a1, void *a2)
{
  unsigned int v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  unint64_t v5 = a1[13];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureArrayFileAsset, (uint64_t)&off_1F0F8B4E8, v3, v4, v5, v7);
  sub_1B6345398(*(void *)(v6 + 40), (uint64_t)&type metadata for TextureLoadPolicy, &v50);
  if (v50 == 1)
  {
    a2[9] = &type metadata for TextureLoadPolicy;
    a2[10] = &off_1F0F74E60;
    uint64_t v8 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1F0F74E60, v3, v4, v5, v7);
    if (!v3)
    {
      uint64_t v19 = a1[6];
      uint64_t v18 = a1[7];
      unint64_t v20 = v18 - v19;
      if (v18 != v19)
      {
        uint64_t v21 = a1[6];
        if (v20 < 2) {
          goto LABEL_22;
        }
        uint64_t v21 = v19 + (v20 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v22 = (unsigned char *)(v8 + 4 * v19 + 4);
        unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 4) = 1;
          *uint64_t v22 = 1;
          v22 += 8;
          v23 -= 2;
        }
        while (v23);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_22:
          uint64_t v24 = v18 - v21;
          uint64_t v25 = (unsigned char *)(v8 + 4 * v21);
          do
          {
            unsigned char *v25 = 1;
            v25 += 4;
            --v24;
          }
          while (v24);
        }
      }
      return swift_release();
    }
    if (v5)
    {
      if (v5 == 1)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v31 = (unsigned char *)(v8 + 4);
        unint64_t v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v31 - 4) = 1;
          *uint64_t v31 = 1;
          v31 += 8;
          v32 -= 2;
        }
        while (v32);
        if (v5 == v9) {
          return swift_release();
        }
      }
      unint64_t v33 = v5 - v9;
      unint64_t v34 = (unsigned char *)(v8 + 4 * v9);
      do
      {
        *unint64_t v34 = 1;
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    return swift_release();
  }
  uint64_t v10 = v5;
  uint64_t v11 = v3;
  if (!v3) {
    unint64_t v5 = a1[7] - a1[6];
  }
  uint64_t v12 = (void *)a2[4];
  uint64_t v13 = ecs_stack_allocator_allocate((uint64_t)v12, 4 * v5, 1);
  if (v5)
  {
    if (v5 < 8)
    {
      unint64_t v14 = 0;
      goto LABEL_11;
    }
    unint64_t v14 = 0;
    uint64_t v30 = 4 * (v5 - 1);
    if ((void *)((char *)v13 + v30) < v13
      || (char *)v13 + v30 + 1 < (char *)v13 + 1
      || (char *)v13 + v30 + 2 < (char *)v13 + 2
      || (char *)v13 + v30 + 3 < (char *)v13 + 3
      || (v5 - 1) >> 62)
    {
      goto LABEL_11;
    }
    if (v5 >= 0x20)
    {
      unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v44 = v13 + 8;
      unint64_t v45 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(v44 - 2) = xmmword_1B6ECFA20;
        *(v44 - 1) = xmmword_1B6ECFA20;
        *(v44 - 4) = xmmword_1B6ECFA20;
        *(v44 - 3) = xmmword_1B6ECFA20;
        v44[2] = xmmword_1B6ECFA20;
        v44[3] = xmmword_1B6ECFA20;
        *uint64_t v44 = xmmword_1B6ECFA20;
        v44[1] = xmmword_1B6ECFA20;
        v44 += 8;
        v45 -= 32;
      }
      while (v45);
      if (v5 == v14) {
        goto LABEL_13;
      }
      if ((v5 & 0x18) == 0)
      {
LABEL_11:
        unint64_t v15 = v5 - v14;
        uint64_t v16 = (_DWORD *)v13 + v14;
        do
        {
          *v16++ = 16842752;
          --v15;
        }
        while (v15);
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v46 = v14;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFF8;
    char v47 = (_OWORD *)((char *)v13 + 4 * v46);
    unint64_t v48 = v46 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *char v47 = xmmword_1B6ECFA20;
      v47[1] = xmmword_1B6ECFA20;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    if (v5 != v14) {
      goto LABEL_11;
    }
  }
LABEL_13:
  if (!v11)
  {
    uint64_t v26 = a1[6];
    uint64_t v27 = a1[7];
    unint64_t v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 >= 2)
      {
        unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v26 += v28 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v40 = (char *)v13 + 4;
        unint64_t v41 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 4) = 1;
          *uint64_t v40 = 1;
          v40 += 8;
          v41 -= 2;
        }
        while (v41);
        if (v28 == v29) {
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      uint64_t v42 = (char *)v13 + 4 * v29;
      uint64_t v43 = v27 - v26;
      do
      {
        *uint64_t v42 = 1;
        v42 += 4;
        --v43;
      }
      while (v43);
    }
LABEL_52:
    sub_1B6D85F20(*(void *)(v6 + 232), *(void *)(v6 + 240));
    goto LABEL_53;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v36 = (char *)v13 + 4;
      unint64_t v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = 1;
        *uint64_t v36 = 1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v10 == v17) {
        goto LABEL_46;
      }
    }
    unint64_t v38 = v10 - v17;
    unint64_t v39 = (char *)v13 + 4 * v17;
    do
    {
      *unint64_t v39 = 1;
      v39 += 4;
      --v38;
    }
    while (v38);
  }
LABEL_46:
  sub_1B6D85D70(v11, v4, v10, (uint64_t)v13, v5);
LABEL_53:
  ecs_stack_allocator_deallocate(v12, (unint64_t)v13, 4 * v5);
  return swift_release();
}

uint64_t sub_1B6D8E974(void *a1, void *a2)
{
  unsigned int v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  unint64_t v5 = a1[13];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureFileAsset, (uint64_t)&off_1F0F6F8C8, v3, v4, v5, v7);
  sub_1B6345398(*(void *)(v6 + 40), (uint64_t)&type metadata for TextureLoadPolicy, &v50);
  if (v50 == 1)
  {
    a2[9] = &type metadata for TextureLoadPolicy;
    a2[10] = &off_1F0F74E60;
    uint64_t v8 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1F0F74E60, v3, v4, v5, v7);
    if (!v3)
    {
      uint64_t v19 = a1[6];
      uint64_t v18 = a1[7];
      unint64_t v20 = v18 - v19;
      if (v18 != v19)
      {
        uint64_t v21 = a1[6];
        if (v20 < 2) {
          goto LABEL_22;
        }
        uint64_t v21 = v19 + (v20 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v22 = (unsigned char *)(v8 + 4 * v19 + 5);
        unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 4) = 1;
          *uint64_t v22 = 1;
          v22 += 8;
          v23 -= 2;
        }
        while (v23);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_22:
          uint64_t v24 = (unsigned char *)(v8 + 4 * v21 + 1);
          uint64_t v25 = v18 - v21;
          do
          {
            *uint64_t v24 = 1;
            v24 += 4;
            --v25;
          }
          while (v25);
        }
      }
      return swift_release();
    }
    if (v5)
    {
      if (v5 == 1)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v31 = (unsigned char *)(v8 + 5);
        unint64_t v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v31 - 4) = 1;
          *uint64_t v31 = 1;
          v31 += 8;
          v32 -= 2;
        }
        while (v32);
        if (v5 == v9) {
          return swift_release();
        }
      }
      unint64_t v33 = v5 - v9;
      unint64_t v34 = (unsigned char *)(v8 + 4 * v9 + 1);
      do
      {
        *unint64_t v34 = 1;
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    return swift_release();
  }
  uint64_t v10 = v5;
  uint64_t v11 = v3;
  if (!v3) {
    unint64_t v5 = a1[7] - a1[6];
  }
  uint64_t v12 = (void *)a2[4];
  uint64_t v13 = ecs_stack_allocator_allocate((uint64_t)v12, 4 * v5, 1);
  if (v5)
  {
    if (v5 < 8)
    {
      unint64_t v14 = 0;
      goto LABEL_11;
    }
    unint64_t v14 = 0;
    uint64_t v30 = 4 * (v5 - 1);
    if ((void *)((char *)v13 + v30) < v13
      || (char *)v13 + v30 + 1 < (char *)v13 + 1
      || (char *)v13 + v30 + 2 < (char *)v13 + 2
      || (char *)v13 + v30 + 3 < (char *)v13 + 3
      || (v5 - 1) >> 62)
    {
      goto LABEL_11;
    }
    if (v5 >= 0x20)
    {
      unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v44 = v13 + 8;
      unint64_t v45 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(v44 - 2) = xmmword_1B6ECFA20;
        *(v44 - 1) = xmmword_1B6ECFA20;
        *(v44 - 4) = xmmword_1B6ECFA20;
        *(v44 - 3) = xmmword_1B6ECFA20;
        v44[2] = xmmword_1B6ECFA20;
        v44[3] = xmmword_1B6ECFA20;
        *uint64_t v44 = xmmword_1B6ECFA20;
        v44[1] = xmmword_1B6ECFA20;
        v44 += 8;
        v45 -= 32;
      }
      while (v45);
      if (v5 == v14) {
        goto LABEL_13;
      }
      if ((v5 & 0x18) == 0)
      {
LABEL_11:
        unint64_t v15 = v5 - v14;
        uint64_t v16 = (_DWORD *)v13 + v14;
        do
        {
          *v16++ = 16842752;
          --v15;
        }
        while (v15);
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v46 = v14;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFF8;
    char v47 = (_OWORD *)((char *)v13 + 4 * v46);
    unint64_t v48 = v46 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *char v47 = xmmword_1B6ECFA20;
      v47[1] = xmmword_1B6ECFA20;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    if (v5 != v14) {
      goto LABEL_11;
    }
  }
LABEL_13:
  if (!v11)
  {
    uint64_t v26 = a1[6];
    uint64_t v27 = a1[7];
    unint64_t v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 >= 2)
      {
        unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v26 += v28 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v40 = (char *)v13 + 5;
        unint64_t v41 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 4) = 1;
          *uint64_t v40 = 1;
          v40 += 8;
          v41 -= 2;
        }
        while (v41);
        if (v28 == v29) {
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      uint64_t v42 = (char *)v13 + 4 * v29 + 1;
      uint64_t v43 = v27 - v26;
      do
      {
        *uint64_t v42 = 1;
        v42 += 4;
        --v43;
      }
      while (v43);
    }
LABEL_52:
    sub_1B6D85F20(*(void *)(v6 + 232), *(void *)(v6 + 240));
    goto LABEL_53;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v36 = (char *)v13 + 5;
      unint64_t v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = 1;
        *uint64_t v36 = 1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v10 == v17) {
        goto LABEL_46;
      }
    }
    unint64_t v38 = (char *)v13 + 4 * v17 + 1;
    unint64_t v39 = v10 - v17;
    do
    {
      unsigned char *v38 = 1;
      v38 += 4;
      --v39;
    }
    while (v39);
  }
LABEL_46:
  sub_1B6D85D70(v11, v4, v10, (uint64_t)v13, v5);
LABEL_53:
  ecs_stack_allocator_deallocate(v12, (unint64_t)v13, 4 * v5);
  return swift_release();
}

uint64_t sub_1B6D8ED68(void *a1, void *a2)
{
  unsigned int v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  unint64_t v5 = a1[13];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureFileAsset, (uint64_t)&off_1F0F6F8C8, v3, v4, v5, v7);
  sub_1B6345398(*(void *)(v6 + 40), (uint64_t)&type metadata for TextureLoadPolicy, &v50);
  if (v50 == 1)
  {
    a2[9] = &type metadata for TextureLoadPolicy;
    a2[10] = &off_1F0F74E60;
    uint64_t v8 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1F0F74E60, v3, v4, v5, v7);
    if (!v3)
    {
      uint64_t v19 = a1[6];
      uint64_t v18 = a1[7];
      unint64_t v20 = v18 - v19;
      if (v18 != v19)
      {
        uint64_t v21 = a1[6];
        if (v20 < 2) {
          goto LABEL_22;
        }
        uint64_t v21 = v19 + (v20 & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v22 = (unsigned char *)(v8 + 4 * v19 + 4);
        unint64_t v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 4) = 1;
          *uint64_t v22 = 1;
          v22 += 8;
          v23 -= 2;
        }
        while (v23);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_22:
          uint64_t v24 = v18 - v21;
          uint64_t v25 = (unsigned char *)(v8 + 4 * v21);
          do
          {
            unsigned char *v25 = 1;
            v25 += 4;
            --v24;
          }
          while (v24);
        }
      }
      return swift_release();
    }
    if (v5)
    {
      if (v5 == 1)
      {
        unint64_t v9 = 0;
      }
      else
      {
        unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v31 = (unsigned char *)(v8 + 4);
        unint64_t v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v31 - 4) = 1;
          *uint64_t v31 = 1;
          v31 += 8;
          v32 -= 2;
        }
        while (v32);
        if (v5 == v9) {
          return swift_release();
        }
      }
      unint64_t v33 = v5 - v9;
      unint64_t v34 = (unsigned char *)(v8 + 4 * v9);
      do
      {
        *unint64_t v34 = 1;
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    return swift_release();
  }
  uint64_t v10 = v5;
  uint64_t v11 = v3;
  if (!v3) {
    unint64_t v5 = a1[7] - a1[6];
  }
  uint64_t v12 = (void *)a2[4];
  uint64_t v13 = ecs_stack_allocator_allocate((uint64_t)v12, 4 * v5, 1);
  if (v5)
  {
    if (v5 < 8)
    {
      unint64_t v14 = 0;
      goto LABEL_11;
    }
    unint64_t v14 = 0;
    uint64_t v30 = 4 * (v5 - 1);
    if ((void *)((char *)v13 + v30) < v13
      || (char *)v13 + v30 + 1 < (char *)v13 + 1
      || (char *)v13 + v30 + 2 < (char *)v13 + 2
      || (char *)v13 + v30 + 3 < (char *)v13 + 3
      || (v5 - 1) >> 62)
    {
      goto LABEL_11;
    }
    if (v5 >= 0x20)
    {
      unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v44 = v13 + 8;
      unint64_t v45 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(v44 - 2) = xmmword_1B6ECFA20;
        *(v44 - 1) = xmmword_1B6ECFA20;
        *(v44 - 4) = xmmword_1B6ECFA20;
        *(v44 - 3) = xmmword_1B6ECFA20;
        v44[2] = xmmword_1B6ECFA20;
        v44[3] = xmmword_1B6ECFA20;
        *uint64_t v44 = xmmword_1B6ECFA20;
        v44[1] = xmmword_1B6ECFA20;
        v44 += 8;
        v45 -= 32;
      }
      while (v45);
      if (v5 == v14) {
        goto LABEL_13;
      }
      if ((v5 & 0x18) == 0)
      {
LABEL_11:
        unint64_t v15 = v5 - v14;
        uint64_t v16 = (_DWORD *)v13 + v14;
        do
        {
          *v16++ = 16842752;
          --v15;
        }
        while (v15);
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v46 = v14;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFF8;
    char v47 = (_OWORD *)((char *)v13 + 4 * v46);
    unint64_t v48 = v46 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *char v47 = xmmword_1B6ECFA20;
      v47[1] = xmmword_1B6ECFA20;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    if (v5 != v14) {
      goto LABEL_11;
    }
  }
LABEL_13:
  if (!v11)
  {
    uint64_t v26 = a1[6];
    uint64_t v27 = a1[7];
    unint64_t v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 >= 2)
      {
        unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v26 += v28 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v40 = (char *)v13 + 4;
        unint64_t v41 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 4) = 1;
          *uint64_t v40 = 1;
          v40 += 8;
          v41 -= 2;
        }
        while (v41);
        if (v28 == v29) {
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      uint64_t v42 = (char *)v13 + 4 * v29;
      uint64_t v43 = v27 - v26;
      do
      {
        *uint64_t v42 = 1;
        v42 += 4;
        --v43;
      }
      while (v43);
    }
LABEL_52:
    sub_1B6D85F20(*(void *)(v6 + 232), *(void *)(v6 + 240));
    goto LABEL_53;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v36 = (char *)v13 + 4;
      unint64_t v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = 1;
        *uint64_t v36 = 1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v10 == v17) {
        goto LABEL_46;
      }
    }
    unint64_t v38 = v10 - v17;
    unint64_t v39 = (char *)v13 + 4 * v17;
    do
    {
      *unint64_t v39 = 1;
      v39 += 4;
      --v38;
    }
    while (v38);
  }
LABEL_46:
  sub_1B6D85D70(v11, v4, v10, (uint64_t)v13, v5);
LABEL_53:
  ecs_stack_allocator_deallocate(v12, (unint64_t)v13, 4 * v5);
  return swift_release();
}

uint64_t sub_1B6D8F14C(uint64_t *a1, void *a2)
{
  unint64_t v5 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireCPURepresentation, (uint64_t)&off_1F0F9AEA8, v5, v4, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1F0F8B9D0;
    uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1F0F8B9D0, v5, v4, v6, v8);
    uint64_t v10 = (void *)v9;
    if (v5)
    {
      if (v6)
      {
        uint64_t v11 = a1[3];
        uint64_t v12 = *a1;
        do
        {
          uint64_t v13 = *v5;
          unint64_t v14 = v5 + 1;
          uint64_t v62 = v12;
          uint64_t v63 = v7;
          uint64_t v64 = v8;
          uint64_t v65 = v11;
          uint64_t v66 = v13;
          uint64_t v15 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v16 = *(void *)(v15 + 128);
          if (!*(void *)(v16 + 16)
            || (unint64_t v17 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v15 + 24) + 16 * *(void *)(*(void *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v10 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v10 |= *(void *)v61;
          v10 += 8;
          ++v11;
          --v6;
          unint64_t v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 != v36)
      {
        uint64_t v40 = v8;
        uint64_t v41 = a1[3];
        uint64_t v42 = *a1;
        uint64_t v43 = (void *)(v9 + (v35 << 6));
        do
        {
          uint64_t v62 = v42;
          uint64_t v63 = v7;
          uint64_t v64 = v40;
          uint64_t v65 = v41;
          uint64_t v66 = v35;
          uint64_t v44 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v45 = *(void *)(v44 + 128);
          if (!*(void *)(v45 + 16)
            || (unint64_t v46 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v44 + 24) + 16 * *(void *)(*(void *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *uint64_t v43 = 0;
          }
          ++v35;
          sub_1B6362CBC((uint64_t)v61);
          *v43 |= *(void *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v55 = v4;
    uint64_t v19 = v6;
    if (!v5) {
      uint64_t v19 = a1[7] - a1[6];
    }
    uint64_t v60 = v19;
    uint64_t v67 = v8;
    uint64_t v20 = a2[4];
    unint64_t v21 = v19 << 6;
    uint64_t v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    uint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((unsigned char *)v24 - 8) = -2;
        v24[1] = 0;
        _OWORD v24[2] = 0;
        *uint64_t v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    unint64_t v58 = v21;
    uint64_t v57 = (void *)v20;
    uint64_t v59 = (uint64_t)v22;
    if (v5)
    {
      int64x2_t v56 = v5;
      if (v6)
      {
        uint64_t v25 = a1[3];
        uint64_t v26 = *a1;
        uint64_t v27 = v6;
        unint64_t v28 = v22;
        do
        {
          uint64_t v29 = *v5++;
          uint64_t v62 = v26;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v25;
          uint64_t v66 = v29;
          uint64_t v30 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v31 = *(void *)(v30 + 128);
          if (!*(void *)(v31 + 16)
            || (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *unint64_t v28 = 0;
          }
          sub_1B6362CBC((uint64_t)v61);
          *v28 |= *(void *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      unint64_t v34 = v59;
      sub_1B6D85A28(v56, v55, v6, v59, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      if (v38 != v39)
      {
        uint64_t v48 = a1[3];
        uint64_t v49 = *a1;
        char v50 = v22;
        do
        {
          uint64_t v62 = v49;
          uint64_t v63 = v7;
          uint64_t v64 = v67;
          uint64_t v65 = v48;
          uint64_t v66 = v38;
          uint64_t v51 = *(void *)(*(void *)(v7 + 40) + 16);
          uint64_t v52 = *(void *)(v51 + 128);
          if (!*(void *)(v52 + 16)
            || (unint64_t v53 = sub_1B62C1A30((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(void *)(v51 + 24) + 16 * *(void *)(*(void *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *char v50 = 0;
          }
          ++v38;
          sub_1B6362CBC((uint64_t)v61);
          *v50 |= *(void *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      unint64_t v34 = v59;
      sub_1B6D85BD8(*(void *)(v7 + 232), *(void *)(v7 + 240));
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B6D8F5C0(void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v12 = (int *)sub_1B62C9024((uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1F0F596A8, v7, v8, v9, v11);
  sub_1B6345398(*(void *)(v10 + 40), (uint64_t)&type metadata for TextureCPURuntime, v107);
  if (LOBYTE(v107[0]) == 1)
  {
    a2[9] = &type metadata for TextureCPURuntime;
    a2[10] = &off_1F0F74A68;
    uint64_t v13 = sub_1B62C9024((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1F0F74A68, v7, v8, v9, v11);
    if (v7)
    {
      if (v9)
      {
        uint64_t v14 = *a4;
        char v91 = *((unsigned char *)a4 + 9);
        char v95 = *((unsigned char *)a4 + 8);
        char v87 = *((unsigned char *)a4 + 10);
        uint64_t v79 = a4[4];
        uint64_t v83 = a4[2];
        uint64_t v71 = a4[6];
        uint64_t v75 = a4[5];
        uint64_t v15 = a4[8];
        uint64_t v67 = a4[7];
        uint64_t v16 = v13 + 56;
        int v17 = *((_DWORD *)a4 + 18);
        do
        {
          uint64_t v20 = *a3;
          uint64_t v18 = a3[1];
          if (*a3)
          {
            v18 += (uint64_t)*v12 << 9;
            uint64_t v19 = 512;
          }
          else
          {
            uint64_t v19 = a3[2];
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(void *)(v16 - 56) = v20;
          *(void *)(v16 - 48) = v18;
          *(void *)(v16 - 40) = v19;
          *(void *)(v16 - 24) = v14;
          *(unsigned char *)(v16 - 16) = v95;
          *(unsigned char *)(v16 - 15) = v91;
          *(unsigned char *)(v16 - 14) = v87;
          *(void *)(v16 - 8) = v83;
          *(void *)uint64_t v16 = 0;
          *(void *)(v16 + 16) = v75;
          *(void *)(v16 + 24) = v71;
          *(void *)(v16 + 32) = v67;
          *(void *)(v16 + 40) = v15;
          *(_DWORD *)(v16 + 48) = v17;
          ++v12;
          *(void *)(v16 + 8) = v79;
          v16 += 120;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      uint64_t v37 = v36 - v35;
      if (v36 != v35)
      {
        uint64_t v41 = *a4;
        char v93 = *((unsigned char *)a4 + 9);
        char v97 = *((unsigned char *)a4 + 8);
        char v89 = *((unsigned char *)a4 + 10);
        uint64_t v81 = a4[4];
        uint64_t v85 = a4[2];
        uint64_t v73 = a4[6];
        uint64_t v77 = a4[5];
        uint64_t v42 = a4[8];
        uint64_t v69 = a4[7];
        int v43 = *((_DWORD *)a4 + 18);
        uint64_t v44 = &v12[v35];
        uint64_t v45 = v13 + 120 * v35 + 56;
        do
        {
          uint64_t v48 = *a3;
          uint64_t v46 = a3[1];
          if (*a3)
          {
            v46 += (uint64_t)*v44 << 9;
            uint64_t v47 = 512;
          }
          else
          {
            uint64_t v47 = a3[2];
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(void *)(v45 - 56) = v48;
          *(void *)(v45 - 48) = v46;
          *(void *)(v45 - 40) = v47;
          *(void *)(v45 - 24) = v41;
          *(unsigned char *)(v45 - 16) = v97;
          *(unsigned char *)(v45 - 15) = v93;
          *(unsigned char *)(v45 - 14) = v89;
          *(void *)(v45 - 8) = v85;
          *(void *)uint64_t v45 = 0;
          *(void *)(v45 + 16) = v77;
          *(void *)(v45 + 24) = v73;
          *(void *)(v45 + 32) = v69;
          *(void *)(v45 + 40) = v42;
          *(_DWORD *)(v45 + 48) = v43;
          ++v44;
          *(void *)(v45 + 8) = v81;
          v45 += 120;
          --v37;
        }
        while (v37);
      }
    }
  }
  else
  {
    uint64_t v59 = v8;
    uint64_t v64 = v10;
    uint64_t v21 = v9;
    if (!v7) {
      uint64_t v21 = a1[7] - a1[6];
    }
    RGTextureDescriptor.init()((uint64_t)&v99);
    memset(v107, 0, sizeof(v107));
    char v108 = 0;
    uint64_t v109 = v99;
    __int16 v110 = v100;
    char v111 = v101;
    long long v112 = v102;
    long long v113 = v103;
    long long v114 = v104;
    uint64_t v115 = v105;
    int v116 = v106;
    uint64_t v117 = MEMORY[0x1E4FBC860];
    uint64_t v22 = a2[4];
    uint64_t v23 = sub_1B6D99CD4(v21, (uint64_t)v107, v22);
    uint64_t v25 = v24;
    uint64_t v60 = v26;
    swift_bridgeObjectRelease();
    uint64_t v62 = (void *)v22;
    uint64_t v63 = (uint64_t)v23;
    uint64_t v61 = v25;
    if (v7)
    {
      unint64_t v58 = v7;
      if (v9)
      {
        uint64_t v27 = *a4;
        char v92 = *((unsigned char *)a4 + 9);
        char v96 = *((unsigned char *)a4 + 8);
        char v88 = *((unsigned char *)a4 + 10);
        uint64_t v80 = a4[4];
        uint64_t v84 = a4[2];
        uint64_t v72 = a4[6];
        uint64_t v76 = a4[5];
        uint64_t v66 = a4[8];
        uint64_t v68 = a4[7];
        unint64_t v28 = v23 + 7;
        uint64_t v29 = v9;
        int v30 = *((_DWORD *)a4 + 18);
        do
        {
          uint64_t v33 = *a3;
          uint64_t v31 = a3[1];
          if (*a3)
          {
            v31 += (uint64_t)*v12 << 9;
            uint64_t v32 = 512;
          }
          else
          {
            uint64_t v32 = a3[2];
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(v28 - 7) = v33;
          *(v28 - 6) = v31;
          *(v28 - 5) = v32;
          *(v28 - 3) = v27;
          *((unsigned char *)v28 - 16) = v96;
          *((unsigned char *)v28 - 15) = v92;
          *((unsigned char *)v28 - 14) = v88;
          *(v28 - 1) = v84;
          *unint64_t v28 = 0;
          _OWORD v28[2] = v76;
          v28[3] = v72;
          v28[4] = v68;
          v28[5] = v66;
          *((_DWORD *)v28 + 12) = v30;
          ++v12;
          v28[1] = v80;
          v28 += 15;
          --v29;
        }
        while (v29);
      }
      unint64_t v34 = v63;
      sub_1B6D83E88(v58, v59, v9, v63, v60);
    }
    else
    {
      uint64_t v38 = a1[6];
      uint64_t v39 = a1[7];
      uint64_t v40 = v39 - v38;
      if (v39 != v38)
      {
        uint64_t v50 = *a4;
        char v94 = *((unsigned char *)a4 + 9);
        char v98 = *((unsigned char *)a4 + 8);
        char v90 = *((unsigned char *)a4 + 10);
        uint64_t v82 = a4[4];
        uint64_t v86 = a4[2];
        uint64_t v74 = a4[6];
        uint64_t v78 = a4[5];
        uint64_t v51 = a4[8];
        uint64_t v70 = a4[7];
        uint64_t v52 = &v12[v38];
        unint64_t v53 = v23 + 7;
        int v54 = *((_DWORD *)a4 + 18);
        do
        {
          uint64_t v57 = *a3;
          uint64_t v55 = a3[1];
          if (*a3)
          {
            v55 += (uint64_t)*v52 << 9;
            uint64_t v56 = 512;
          }
          else
          {
            uint64_t v56 = a3[2];
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(v53 - 7) = v57;
          *(v53 - 6) = v55;
          *(v53 - 5) = v56;
          *(v53 - 3) = v50;
          *((unsigned char *)v53 - 16) = v98;
          *((unsigned char *)v53 - 15) = v94;
          *((unsigned char *)v53 - 14) = v90;
          *(v53 - 1) = v86;
          void *v53 = 0;
          v53[2] = v78;
          v53[3] = v74;
          v53[4] = v70;
          v53[5] = v51;
          *((_DWORD *)v53 + 12) = v54;
          ++v52;
          v53[1] = v82;
          v53 += 15;
          --v40;
        }
        while (v40);
      }
      unint64_t v34 = v63;
      sub_1B6D83FDC(*(void *)(v64 + 232), *(void *)(v64 + 240));
    }
    ecs_stack_allocator_deallocate(v62, v34, 120 * v61);
  }
  return swift_release();
}

uint64_t sub_1B6D8FB74(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  unint64_t v7 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  swift_retain();
  sub_1B62C9024((uint64_t)&type metadata for CurveComponent, (uint64_t)&off_1F0F63678, v6, v5, v7, v9);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for CurveRuntime, &v77);
  if (v77 == 1)
  {
    a2[9] = &type metadata for CurveRuntime;
    a2[10] = &off_1F0F596A8;
    uint64_t v10 = sub_1B62C9024((uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1F0F596A8, v6, v5, v7, v9);
    if (!v6)
    {
      unint64_t v21 = a1[6];
      uint64_t v20 = a1[7];
      unint64_t v22 = v20 - v21;
      if (v20 != v21)
      {
        uint64_t v23 = a1[3];
        uint64_t v24 = *a3;
        unint64_t v25 = a1[6];
        if (v22 < 8) {
          goto LABEL_19;
        }
        unint64_t v26 = v23 - v21 + v24;
        int64x2_t v27 = vdupq_n_s64(v21);
        unint64_t v25 = v21 + (v22 & 0xFFFFFFFFFFFFFFF8);
        int64x2_t v28 = vaddq_s64(v27, (int64x2_t)xmmword_1B6E9D130);
        int64x2_t v29 = vaddq_s64(v27, (int64x2_t)xmmword_1B6E4F270);
        int64x2_t v30 = vdupq_n_s64(v26);
        int64x2_t v31 = vdupq_n_s64(v26 + 4);
        uint64_t v32 = (int32x4_t *)(v10 + 4 * v21 + 16);
        int64x2_t v33 = vdupq_n_s64(8uLL);
        unint64_t v34 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v32[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v30, v29), (int32x4_t)vaddq_s64(v30, v28));
          *uint64_t v32 = vuzp1q_s32((int32x4_t)vaddq_s64(v31, v29), (int32x4_t)vaddq_s64(v31, v28));
          int64x2_t v28 = vaddq_s64(v28, v33);
          int64x2_t v29 = vaddq_s64(v29, v33);
          v32 += 2;
          v34 -= 8;
        }
        while (v34);
        if (v22 != (v22 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_19:
          int v35 = v25 + v23 + v24 - v21;
          uint64_t v36 = v20 - v25;
          uint64_t v37 = (_DWORD *)(v10 + 4 * v25);
          do
          {
            *v37++ = v35++;
            --v36;
          }
          while (v36);
        }
      }
      return swift_release();
    }
    if (v7)
    {
      uint64_t v11 = a1[3];
      uint64_t v12 = *a3;
      if (v7 >= 8)
      {
        unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFF8;
        int64x2_t v44 = vdupq_n_s64(v12 + v11);
        int64x2_t v45 = vdupq_n_s64(v12 + v11 + 4);
        int64x2_t v46 = (int64x2_t)xmmword_1B6E9D130;
        int64x2_t v47 = (int64x2_t)xmmword_1B6E4F270;
        uint64_t v48 = (int32x4_t *)(v10 + 16);
        int64x2_t v49 = vdupq_n_s64(8uLL);
        unint64_t v50 = v7 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v48[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v44, v47), (int32x4_t)vaddq_s64(v44, v46));
          int32x4_t *v48 = vuzp1q_s32((int32x4_t)vaddq_s64(v45, v47), (int32x4_t)vaddq_s64(v45, v46));
          int64x2_t v46 = vaddq_s64(v46, v49);
          int64x2_t v47 = vaddq_s64(v47, v49);
          v48 += 2;
          v50 -= 8;
        }
        while (v50);
        if (v7 == v13) {
          return swift_release();
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      int v51 = v13 + v11 + v12;
      unint64_t v52 = v7 - v13;
      unint64_t v53 = (_DWORD *)(v10 + 4 * v13);
      do
      {
        *v53++ = v51++;
        --v52;
      }
      while (v52);
    }
    return swift_release();
  }
  unint64_t v14 = v7;
  if (!v6) {
    unint64_t v7 = a1[7] - a1[6];
  }
  uint64_t v75 = (void *)a2[4];
  uint64_t v15 = ecs_stack_allocator_allocate((uint64_t)v75, 4 * v7, 4);
  unint64_t v16 = (unint64_t)v15;
  if (v7) {
    memset(v15, 255, 4 * v7);
  }
  if (!v6)
  {
    uint64_t v38 = a1[6];
    uint64_t v39 = a1[7];
    unint64_t v40 = v39 - v38;
    if (v39 != v38)
    {
      uint64_t v41 = a1[3];
      uint64_t v42 = *a3;
      if (v40 >= 8)
      {
        unint64_t v43 = v40 & 0xFFFFFFFFFFFFFFF8;
        v38 += v40 & 0xFFFFFFFFFFFFFFF8;
        int64x2_t v65 = vdupq_n_s64(v42 + v41);
        int64x2_t v66 = vdupq_n_s64(v42 + v41 + 4);
        int64x2_t v67 = (int64x2_t)xmmword_1B6E9D130;
        int64x2_t v68 = (int64x2_t)xmmword_1B6E4F270;
        uint64_t v69 = (int32x4_t *)(v16 + 16);
        int64x2_t v70 = vdupq_n_s64(8uLL);
        unint64_t v71 = v40 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v69[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v65, v68), (int32x4_t)vaddq_s64(v65, v67));
          *uint64_t v69 = vuzp1q_s32((int32x4_t)vaddq_s64(v66, v68), (int32x4_t)vaddq_s64(v66, v67));
          int64x2_t v67 = vaddq_s64(v67, v70);
          int64x2_t v68 = vaddq_s64(v68, v70);
          v69 += 2;
          v71 -= 8;
        }
        while (v71);
        if (v40 == v43) {
          goto LABEL_42;
        }
      }
      else
      {
        unint64_t v43 = 0;
      }
      int v72 = v43 + v41 + v42;
      uint64_t v73 = (_DWORD *)(v16 + 4 * v43);
      uint64_t v74 = v39 - v38;
      do
      {
        *v73++ = v72++;
        --v74;
      }
      while (v74);
    }
LABEL_42:
    sub_1B6D86208(*(void *)(v8 + 232), *(void *)(v8 + 240));
    goto LABEL_43;
  }
  if (v14)
  {
    uint64_t v17 = a1[3];
    uint64_t v18 = *a3;
    if (v14 >= 8)
    {
      unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFF8;
      int64x2_t v55 = vdupq_n_s64(v18 + v17);
      int64x2_t v56 = vdupq_n_s64(v18 + v17 + 4);
      int64x2_t v57 = (int64x2_t)xmmword_1B6E9D130;
      int64x2_t v58 = (int64x2_t)xmmword_1B6E4F270;
      uint64_t v59 = (int32x4_t *)(v16 + 16);
      int64x2_t v60 = vdupq_n_s64(8uLL);
      unint64_t v61 = v14 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v59[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v55, v58), (int32x4_t)vaddq_s64(v55, v57));
        *uint64_t v59 = vuzp1q_s32((int32x4_t)vaddq_s64(v56, v58), (int32x4_t)vaddq_s64(v56, v57));
        int64x2_t v57 = vaddq_s64(v57, v60);
        int64x2_t v58 = vaddq_s64(v58, v60);
        v59 += 2;
        v61 -= 8;
      }
      while (v61);
      if (v14 == v19) {
        goto LABEL_36;
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
    int v62 = v19 + v17 + v18;
    unint64_t v63 = v14 - v19;
    uint64_t v64 = (_DWORD *)(v16 + 4 * v19);
    do
    {
      *v64++ = v62++;
      --v63;
    }
    while (v63);
  }
LABEL_36:
  sub_1B6D860B8(v6, v5, v14, v16, v7);
LABEL_43:
  ecs_stack_allocator_deallocate(v75, v16, 4 * v7);
  return swift_release();
}

__n128 sub_1B6D8FFE8(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[2];
  sub_1B62C9024((uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1F0F8D908, v2, v3, v4, v5);
  uint64_t v6 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, v2, v3, v4, v5);
  if (v2)
  {
    for (; v4; --v4)
    {
      result.n128_u64[0] = (unint64_t)vadd_f32(*v6, *v6);
      result.n128_f32[2] = v6[1].f32[0] + v6[1].f32[0];
      result.n128_u32[3] = 0;
      *(__n128 *)v6->f32 = result;
      v6 += 2;
    }
  }
  else
  {
    uint64_t v8 = a1[6];
    uint64_t v9 = a1[7] - v8;
    if (v9)
    {
      uint64_t v10 = &v6[2 * v8];
      do
      {
        result.n128_u64[0] = (unint64_t)vadd_f32(*v10, *v10);
        result.n128_f32[2] = v10[1].f32[0] + v10[1].f32[0];
        result.n128_u32[3] = 0;
        *(__n128 *)v10->f32 = result;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

__n128 sub_1B6D900E0(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[2];
  sub_1B62C9024((uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1F0F7D338, v2, v3, v4, v5);
  uint64_t v6 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, v2, v3, v4, v5);
  if (v2)
  {
    for (; v4; --v4)
    {
      result.n128_u64[0] = (unint64_t)vadd_f32(*v6, *v6);
      result.n128_f32[2] = v6[1].f32[0] + v6[1].f32[0];
      result.n128_u32[3] = 0;
      *(__n128 *)v6->f32 = result;
      v6 += 2;
    }
  }
  else
  {
    uint64_t v8 = a1[6];
    uint64_t v9 = a1[7] - v8;
    if (v9)
    {
      uint64_t v10 = &v6[2 * v8];
      do
      {
        result.n128_u64[0] = (unint64_t)vadd_f32(*v10, *v10);
        result.n128_f32[2] = v10[1].f32[0] + v10[1].f32[0];
        result.n128_u32[3] = 0;
        *(__n128 *)v10->f32 = result;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

__n128 sub_1B6D901D8(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[2];
  sub_1B62C9024((uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1F0F92BD0, v2, v3, v4, v5);
  uint64_t v6 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, v2, v3, v4, v5);
  if (v2)
  {
    for (; v4; --v4)
    {
      result.n128_u64[0] = (unint64_t)vadd_f32(*v6, *v6);
      result.n128_f32[2] = v6[1].f32[0] + v6[1].f32[0];
      result.n128_u32[3] = 0;
      *(__n128 *)v6->f32 = result;
      v6 += 2;
    }
  }
  else
  {
    uint64_t v8 = a1[6];
    uint64_t v9 = a1[7] - v8;
    if (v9)
    {
      uint64_t v10 = &v6[2 * v8];
      do
      {
        result.n128_u64[0] = (unint64_t)vadd_f32(*v10, *v10);
        result.n128_f32[2] = v10[1].f32[0] + v10[1].f32[0];
        result.n128_u32[3] = 0;
        *(__n128 *)v10->f32 = result;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

float32x2_t *sub_1B6D902D0(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[2];
  uint64_t v6 = sub_1B62C9024((uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1F0F818E0, v2, v3, v4, v5);
  __n128 result = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, v2, v3, v4, v5);
  if (v2)
  {
    if (v4)
    {
      uint64_t v8 = (_DWORD *)(v6 + 12);
      do
      {
        if (*(v8 - 1) == -1 && *v8 == 0)
        {
          *(float32x2_t *)&long long v10 = vmul_f32(*result, (float32x2_t)0x3F0000003F000000);
          *((float *)&v10 + 2) = result[1].f32[0] * 0.5;
          HIDWORD(v10) = 0;
          *(_OWORD *)result->f32 = v10;
        }
        v8 += 10;
        result += 2;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    uint64_t v11 = a1[6];
    uint64_t v12 = a1[7] - v11;
    if (v12)
    {
      unint64_t v13 = (_DWORD *)(v6 + 40 * v11 + 12);
      unint64_t v14 = &result[2 * v11];
      do
      {
        if (*(v13 - 1) == -1 && *v13 == 0)
        {
          *(float32x2_t *)&long long v16 = vmul_f32(*v14, (float32x2_t)0x3F0000003F000000);
          *((float *)&v16 + 2) = v14[1].f32[0] * 0.5;
          HIDWORD(v16) = 0;
          *(_OWORD *)v14->f32 = v16;
        }
        v13 += 10;
        v14 += 2;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t sub_1B6D90428(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_retain();
  uint64_t v6 = (void **)sub_1B6642E34(v5, (uint64_t)a1);
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[2];
  int64x2_t v44 = (uint64_t *)a1[11];
  long long v10 = (unsigned char *)sub_1B62C9024((uint64_t)&type metadata for AudioAnalyzer, (uint64_t)&off_1F0F5DC58, v44, v7, v8, v9);
  sub_1B6345398(*(void *)(v4 + 40), (uint64_t)&type metadata for AudioSpectrum, &v52);
  uint64_t v42 = v4;
  if (v52 == 1)
  {
    a2[9] = &type metadata for AudioSpectrum;
    a2[10] = &off_1F0F5DF30;
    uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for AudioSpectrum, (uint64_t)&off_1F0F5DF30, v44, v7, v8, v9);
    if (v44)
    {
      if (v8)
      {
        uint64_t v12 = *(void *)(*(void *)(type metadata accessor for AudioPlayerComponent(0) - 8) + 72);
        do
        {
          sub_1B68107A8(v6, v10, v11);
          if (v2) {
            break;
          }
          v11 += 64;
          v10 += 4;
          uint64_t v6 = (void **)((char *)v6 + v12);
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v23 = a1[6];
      uint64_t v22 = a1[7];
      uint64_t v24 = v22 - v23;
      if (v22 != v23)
      {
        uint64_t v28 = *(void *)(*(void *)(type metadata accessor for AudioPlayerComponent(0) - 8) + 72);
        uint64_t v29 = v11 + (v23 << 6);
        int64x2_t v30 = &v10[4 * v23];
        int64x2_t v31 = (void **)((char *)v6 + v23 * v28);
        do
        {
          sub_1B68107A8(v31, v30, v29);
          if (v2) {
            break;
          }
          v29 += 64;
          v30 += 4;
          int64x2_t v31 = (void **)((char *)v31 + v28);
          --v24;
        }
        while (v24);
      }
    }
  }
  else
  {
    uint64_t v37 = v7;
    uint64_t v13 = v8;
    if (!v44) {
      uint64_t v13 = a1[7] - a1[6];
    }
    uint64_t v14 = sub_1B6E31C98();
    *(void *)(v14 + 16) = 2048;
    bzero((void *)(v14 + 32), 0x2000uLL);
    uint64_t v15 = sub_1B6E31C98();
    *(void *)(v15 + 16) = 2048;
    bzero((void *)(v15 + 32), 0x2000uLL);
    *(void *)&long long v45 = MEMORY[0x1E4FBC860];
    *((void *)&v45 + 1) = MEMORY[0x1E4FBC860];
    uint64_t v46 = MEMORY[0x1E4FBC860];
    int v47 = 0;
    uint64_t v48 = v14;
    uint64_t v49 = v15;
    uint64_t v50 = 0;
    char v51 = 1;
    unint64_t v40 = (void *)a2[4];
    uint64_t v41 = sub_1B6DA0C34(v13, &v45, (uint64_t)v40);
    uint64_t v38 = v17;
    uint64_t v39 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v44)
    {
      if (v8)
      {
        uint64_t v18 = *(void *)(*(void *)(type metadata accessor for AudioPlayerComponent(0) - 8) + 72);
        uint64_t v19 = v8;
        uint64_t v20 = (uint64_t)v41;
        while (1)
        {
          sub_1B68107A8(v6, v10, v20);
          if (v2) {
            break;
          }
          v20 += 64;
          v10 += 4;
          uint64_t v6 = (void **)((char *)v6 + v18);
          if (!--v19) {
            goto LABEL_15;
          }
        }
        unint64_t v21 = (unint64_t)v41;
      }
      else
      {
LABEL_15:
        unint64_t v21 = (unint64_t)v41;
        sub_1B6D82DBC(v44, v37, v8, (uint64_t)v41, v38);
      }
    }
    else
    {
      uint64_t v26 = a1[6];
      uint64_t v25 = a1[7];
      uint64_t v27 = v25 - v26;
      if (v25 == v26)
      {
        unint64_t v21 = (unint64_t)v41;
LABEL_28:
        sub_1B6D82F0C(*(void *)(v42 + 232), *(void *)(v42 + 240));
      }
      else
      {
        uint64_t v32 = *(void *)(*(void *)(type metadata accessor for AudioPlayerComponent(0) - 8) + 72);
        int64x2_t v33 = &v10[4 * v26];
        unint64_t v34 = (void **)((char *)v6 + v26 * v32);
        unint64_t v21 = (unint64_t)v41;
        uint64_t v35 = (uint64_t)v41;
        while (1)
        {
          sub_1B68107A8(v34, v33, v35);
          if (v2) {
            break;
          }
          v35 += 64;
          v33 += 4;
          unint64_t v34 = (void **)((char *)v34 + v32);
          if (!--v27) {
            goto LABEL_28;
          }
        }
      }
    }
    ecs_stack_allocator_deallocate(v40, v21, v39 << 6);
  }
  return swift_release();
}

uint64_t sub_1B6D90800(void *a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v3 = type metadata accessor for AudioPlayerComponent(0);
  uint64_t v56 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (void **)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v12 = (void *)sub_1B62C9024((uint64_t)&type metadata for AudioFileAsset, (uint64_t)&off_1F0F62A68, v7, v8, v9, v11);
  uint64_t v55 = v8;
  uint64_t v13 = sub_1B62C9024((uint64_t)&type metadata for AudioController, (uint64_t)&off_1F0F67FB0, v7, v8, v9, v11);
  uint64_t v14 = (uint64_t)v57;
  sub_1B6345398(*(void *)(v10 + 40), v3, &v59);
  if (v59 == 1)
  {
    uint64_t v15 = v58;
    *(void *)(v58 + 72) = v3;
    *(void *)(v15 + 80) = &off_1F0F7FC88;
    uint64_t v16 = sub_1B6642E34(v10, (uint64_t)a1);
    uint64_t v17 = (id *)v16;
    if (v7)
    {
      if (v9)
      {
        uint64_t v18 = *(void *)(v56 + 72);
        do
        {
          sub_1B680FF24(v12, v13, v17);
          if (v14) {
            break;
          }
          uint64_t v17 = (id *)((char *)v17 + v18);
          v13 += 3;
          v12 += 6;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      uint64_t v32 = a1[6];
      uint64_t v33 = a1[7];
      uint64_t v34 = v33 - v32;
      if (v33 != v32)
      {
        uint64_t v35 = *(void *)(v56 + 72);
        uint64_t v36 = (id *)(v16 + v32 * v35);
        uint64_t v37 = v13 + 3 * v32;
        uint64_t v38 = &v12[6 * v32];
        do
        {
          sub_1B680FF24(v38, v37, v36);
          if (v14) {
            break;
          }
          uint64_t v36 = (id *)((char *)v36 + v35);
          v37 += 3;
          v38 += 6;
          --v34;
        }
        while (v34);
      }
    }
    return swift_release();
  }
  char v51 = a1;
  uint64_t v53 = v10;
  int v54 = v7;
  uint64_t v19 = v9;
  if (!v7) {
    uint64_t v19 = v51[7] - v51[6];
  }
  *uint64_t v6 = 0;
  uint64_t v20 = v19;
  unint64_t v21 = (char *)v6 + *(int *)(v3 + 20);
  uint64_t v22 = sub_1B6E30F48();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = *(void *)(v58 + 32);
  uint64_t v24 = *(void *)(v56 + 72);
  uint64_t v25 = *(unsigned __int8 *)(v56 + 80) + 1;
  unint64_t v52 = v24 * v20;
  uint64_t v26 = (id *)ecs_stack_allocator_allocate(v23, v24 * v20, v25);
  uint64_t v56 = v20;
  int64x2_t v57 = v26;
  if (v20)
  {
    uint64_t v27 = v56;
    uint64_t v28 = (uint64_t)v57;
    do
    {
      sub_1B6DA0BCC((uint64_t)v6, v28, type metadata accessor for AudioPlayerComponent);
      v28 += v24;
      --v27;
    }
    while (v27);
  }
  sub_1B6DA29E4((uint64_t)v6, type metadata accessor for AudioPlayerComponent);
  uint64_t v29 = v54;
  if (v54)
  {
    if (v9)
    {
      int64x2_t v30 = v57;
      uint64_t v31 = v9;
      while (1)
      {
        sub_1B680FF24(v12, v13, v30);
        if (v14) {
          break;
        }
        int64x2_t v30 = (id *)((char *)v30 + v24);
        v13 += 3;
        v12 += 6;
        if (!--v31) {
          goto LABEL_26;
        }
      }
      unint64_t v44 = (unint64_t)v57;
      long long v45 = *(void **)(v58 + 32);
      unint64_t v46 = v52;
      goto LABEL_33;
    }
LABEL_26:
    unint64_t v42 = (unint64_t)v57;
    uint64_t v43 = v58;
    sub_1B6D83054(v29, v55, v9, (uint64_t)v57, v56);
LABEL_32:
    unint64_t v46 = v52;
    long long v45 = *(void **)(v43 + 32);
    unint64_t v44 = v42;
LABEL_33:
    ecs_stack_allocator_deallocate(v45, v44, v46);
    return swift_release();
  }
  uint64_t v39 = v51[6];
  uint64_t v40 = v51[7];
  uint64_t v41 = v40 - v39;
  if (v40 == v39)
  {
    unint64_t v42 = (unint64_t)v57;
LABEL_31:
    uint64_t v43 = v58;
    sub_1B6D831C4(*(void *)(v53 + 232), *(void *)(v53 + 240));
    goto LABEL_32;
  }
  uint64_t v47 = v13 + 3 * v39;
  uint64_t v48 = &v12[6 * v39];
  unint64_t v42 = (unint64_t)v57;
  uint64_t v49 = v57;
  while (1)
  {
    sub_1B680FF24(v48, v47, v49);
    if (v14) {
      break;
    }
    uint64_t v49 = (id *)((char *)v49 + v24);
    v47 += 3;
    v48 += 6;
    if (!--v41) {
      goto LABEL_31;
    }
  }
  ecs_stack_allocator_deallocate(*(void **)(v58 + 32), v42, v52);
  return swift_release();
}

_OWORD *sub_1B6D90C4C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  sub_1B6DA0D94((uint64_t)a2 + 8, (uint64_t)v15, (uint64_t (*)(void))sub_1B6D93BC0);
  uint64_t v6 = ecs_stack_allocator_allocate(a3, 32 * a1, 8);
  uint64_t v7 = v6;
  if (a1)
  {
    long long v8 = a2[1];
    *uint64_t v6 = *a2;
    v6[1] = v8;
    if (a1 != 1)
    {
      long long v9 = a2[1];
      _OWORD v6[2] = *a2;
      long long v6[3] = v9;
      if (a1 != 2)
      {
        long long v10 = a2[1];
        void v6[4] = *a2;
        v6[5] = v10;
        uint64_t v11 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v12 = v6 + 6;
          do
          {
            sub_1B63846D0((uint64_t)v15);
            long long v13 = a2[1];
            *uint64_t v12 = *a2;
            v12[1] = v13;
            v12 += 2;
            --v11;
          }
          while (v11);
        }
        sub_1B63846D0((uint64_t)v15);
      }
      sub_1B63846D0((uint64_t)v15);
    }
    sub_1B63846D0((uint64_t)v15);
  }
  return v7;
}

uint64_t sub_1B6D90D34(void *a1, void *a2, uint64_t a3)
{
  void (*v25)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned char *v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  char v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned char *v52;
  void *v53;
  uint64_t v54;
  int v55;
  char v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  unsigned char *v64;
  float *v65;
  uint64_t v66;
  float v67;
  char v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  _OWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  char v91;
  char v92;
  void v94[4];
  long long v95;
  uint64_t v96;
  uint64_t v97;
  float v98;

  sub_1B6D96724(0, &qword_1EB97F598, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  uint64_t v6 = v5;
  uint64_t v7 = a1[1];
  sub_1B6D96724(0, (unint64_t *)&unk_1EB97E7F0, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for BasicAnimation);
  uint64_t v9 = v8;
  uint64_t v11 = (uint64_t *)a1[11];
  uint64_t v10 = a1[12];
  uint64_t v12 = a1[13];
  uint64_t v13 = a1[2];
  swift_retain();
  uint64_t v83 = sub_1B62C9024(v9, (uint64_t)&off_1F0F62C88, v11, v10, v12, v13);
  sub_1B6345398(*(void *)(v7 + 40), v6, &v95);
  if (v95 == 1)
  {
    a2[9] = v6;
    a2[10] = &off_1F0F84760;
    uint64_t v14 = sub_1B62C9024(v6, (uint64_t)&off_1F0F84760, v11, v10, v12, v13);
    if (v11)
    {
      if (v12)
      {
        uint64_t v15 = (unsigned char *)(v83 + 32);
        uint64_t v16 = v14 + 28;
        uint64_t v85 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          uint64_t v17 = *((void *)v15 - 3);
          if (v17)
          {
            int v18 = *((_DWORD *)v15 - 3);
            char v19 = *(v15 - 8);
            float v20 = *((float *)v15 - 1);
            char v89 = *v15;
            uint64_t v21 = *((void *)v15 - 4);
            *(void *)(v16 - 4) = v21;
            uint64_t v22 = *(void *)(v17 + 80);
            uint64_t v23 = *(void *)(v17 + 88);
            *(void *)(v16 - 20) = v22;
            *(void *)(v16 - 12) = v23;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v22)
            {
              if (v19)
              {
                uint64_t ObjectType = swift_getObjectType();
                uint64_t v25 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8);
                swift_unknownObjectRetain();
                v25(&v95, v21, a3, ObjectType, v23);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v85, MEMORY[0x1E4FBB718]);
                swift_dynamicCast();
                int v18 = v94[0];
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(_DWORD *)(v16 - 28) = v18;
              if (v89)
              {
                uint64_t v26 = swift_getObjectType();
                (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v23 + 8))(&v95, *(void *)(v16 - 4), a3, v26, v23);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                swift_dynamicCast();
                float v20 = *(float *)v94;
              }
              else
              {
                *(float *)char v94 = v20;
              }
              swift_release();
              swift_unknownObjectRelease();
              *(float *)(v16 - 24) = v20 - *(float *)(v16 - 28);
            }
            else
            {
              swift_release();
            }
          }
          v15 += 40;
          v16 += 32;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      long long v45 = a1[6];
      unint64_t v46 = a1[7];
      uint64_t v47 = v46 - v45;
      if (v46 != v45)
      {
        unint64_t v52 = (unsigned char *)(v83 + 40 * v45 + 32);
        uint64_t v53 = (void *)(v14 + 32 * v45 + 16);
        char v87 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          int v54 = *((void *)v52 - 3);
          if (v54)
          {
            uint64_t v55 = *((_DWORD *)v52 - 3);
            uint64_t v56 = *(v52 - 8);
            int64x2_t v57 = *((float *)v52 - 1);
            char v91 = *v52;
            uint64_t v58 = *((void *)v52 - 4);
            v53[1] = v58;
            char v59 = *(void *)(v54 + 80);
            int64x2_t v60 = *(void *)(v54 + 88);
            *(v53 - 1) = v59;
            _DWORD *v53 = v60;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v59)
            {
              if (v56)
              {
                unint64_t v61 = swift_getObjectType();
                int v62 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 8);
                swift_unknownObjectRetain();
                v62(&v95, v58, a3, v61, v60);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v87, MEMORY[0x1E4FBB718]);
                swift_dynamicCast();
                uint64_t v55 = v94[0];
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *((_DWORD *)v53 - 4) = v55;
              if (v91)
              {
                unint64_t v63 = swift_getObjectType();
                (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v60 + 8))(&v95, v53[1], a3, v63, v60);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                swift_dynamicCast();
                int64x2_t v57 = *(float *)v94;
              }
              else
              {
                *(float *)char v94 = v57;
              }
              swift_release();
              swift_unknownObjectRelease();
              *((float *)v53 - 3) = v57 - *((float *)v53 - 4);
            }
            else
            {
              swift_release();
            }
          }
          v52 += 40;
          v53 += 4;
          --v47;
        }
        while (v47);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v86 = v10;
    uint64_t v82 = v7;
    uint64_t v27 = v12;
    if (!v11) {
      uint64_t v27 = a1[7] - a1[6];
    }
    char v95 = 0uLL;
    char v96 = 0;
    char v97 = 0xFFFFFFFFLL;
    uint64_t v79 = (void *)a2[4];
    uint64_t v80 = sub_1B6D90C4C(v27, &v95, (uint64_t)v79);
    char v77 = v29;
    uint64_t v78 = v28;
    if (v11)
    {
      uint64_t v76 = v11;
      int64x2_t v30 = v10;
      if (v12)
      {
        uint64_t v31 = (unsigned char *)(v83 + 32);
        uint64_t v32 = (float *)v80 + 7;
        uint64_t v81 = MEMORY[0x1E4FBC840] + 8;
        uint64_t v33 = v12;
        do
        {
          uint64_t v34 = *((void *)v31 - 3);
          if (v34)
          {
            uint64_t v35 = *((float *)v31 - 3);
            uint64_t v36 = *(v31 - 8);
            uint64_t v37 = *((float *)v31 - 1);
            char v90 = *v31;
            uint64_t v38 = *((void *)v31 - 4);
            *(void *)(v32 - 1) = v38;
            uint64_t v39 = *(void *)(v34 + 80);
            uint64_t v40 = *(void *)(v34 + 88);
            *(void *)(v32 - 5) = v39;
            *(void *)(v32 - 3) = v40;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v39)
            {
              if (v36)
              {
                uint64_t v41 = swift_getObjectType();
                uint64_t v84 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8);
                swift_unknownObjectRetain();
                v84(v94, v38, a3, v41, v40);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v81, MEMORY[0x1E4FBB718]);
                swift_dynamicCast();
                uint64_t v35 = v98;
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(v32 - 7) = v35;
              if (v90)
              {
                unint64_t v42 = swift_getObjectType();
                (*(void (**)(void *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v40 + 8))(v94, *(void *)(v32 - 1), a3, v42, v40);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                swift_dynamicCast();
                uint64_t v37 = v98;
              }
              else
              {
                char v98 = v37;
              }
              swift_release();
              swift_unknownObjectRelease();
              *(v32 - 6) = v37 - *(v32 - 7);
            }
            else
            {
              swift_release();
            }
            int64x2_t v30 = v86;
          }
          v31 += 40;
          v32 += 8;
          --v33;
        }
        while (v33);
      }
      uint64_t v43 = v12;
      unint64_t v44 = (unint64_t)v80;
      sub_1B6D814A4(v76, v30, v43, (uint64_t)v80, v77);
    }
    else
    {
      uint64_t v48 = a1[6];
      uint64_t v49 = a1[7];
      uint64_t v50 = v49 - v48;
      if (v49 != v48)
      {
        uint64_t v64 = (unsigned char *)(v83 + 40 * v48 + 32);
        int64x2_t v65 = (float *)v80 + 7;
        char v88 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          int64x2_t v66 = *((void *)v64 - 3);
          if (v66)
          {
            int64x2_t v67 = *((float *)v64 - 3);
            int64x2_t v68 = *(v64 - 8);
            uint64_t v69 = *((float *)v64 - 1);
            char v92 = *v64;
            int64x2_t v70 = *((void *)v64 - 4);
            *(void *)(v65 - 1) = v70;
            unint64_t v71 = *(void *)(v66 + 80);
            int v72 = *(void *)(v66 + 88);
            *(void *)(v65 - 5) = v71;
            *(void *)(v65 - 3) = v72;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v71)
            {
              if (v68)
              {
                uint64_t v73 = swift_getObjectType();
                uint64_t v74 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 8);
                swift_unknownObjectRetain();
                v74(v94, v70, a3, v73, v72);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v88, MEMORY[0x1E4FBB718]);
                swift_dynamicCast();
                int64x2_t v67 = v98;
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(v65 - 7) = v67;
              if (v92)
              {
                uint64_t v75 = swift_getObjectType();
                (*(void (**)(void *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v72 + 8))(v94, *(void *)(v65 - 1), a3, v75, v72);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                swift_dynamicCast();
                uint64_t v69 = v98;
              }
              else
              {
                char v98 = v69;
              }
              swift_release();
              swift_unknownObjectRelease();
              *(v65 - 6) = v69 - *(v65 - 7);
            }
            else
            {
              swift_release();
            }
          }
          v64 += 40;
          v65 += 8;
          --v50;
        }
        while (v50);
      }
      unint64_t v44 = (unint64_t)v80;
      sub_1B6D81610(*(void *)(v82 + 232), *(void *)(v82 + 240));
    }
    ecs_stack_allocator_deallocate(v79, v44, 32 * v78);
    return swift_release();
  }
}

uint64_t sub_1B6D916D0(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D90D34);
}

void *sub_1B6D916FC(uint64_t a1, long long *a2, uint64_t a3)
{
  sub_1B6DA0D94((uint64_t)(a2 + 1), (uint64_t)v19, (uint64_t (*)(void))sub_1B6D93BC0);
  uint64_t v6 = ecs_stack_allocator_allocate(a3, 40 * a1, 8);
  uint64_t v7 = v6;
  if (a1)
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    void v6[4] = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v6 = v8;
    *((_OWORD *)v6 + 1) = v9;
    if (a1 != 1)
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      v6[9] = *((void *)a2 + 4);
      *(_OWORD *)(v6 + 7) = v11;
      *(_OWORD *)(v6 + 5) = v10;
      if (a1 != 2)
      {
        long long v12 = *a2;
        long long v13 = a2[1];
        v6[14] = *((void *)a2 + 4);
        *((_OWORD *)v6 + 5) = v12;
        *((_OWORD *)v6 + 6) = v13;
        uint64_t v14 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v15 = v6 + 15;
          do
          {
            sub_1B63846D0((uint64_t)v19);
            uint64_t v16 = *((void *)a2 + 4);
            long long v17 = a2[1];
            *(_OWORD *)uint64_t v15 = *a2;
            *((_OWORD *)v15 + 1) = v17;
            v15[4] = v16;
            v15 += 5;
            --v14;
          }
          while (v14);
        }
        sub_1B63846D0((uint64_t)v19);
      }
      sub_1B63846D0((uint64_t)v19);
    }
    sub_1B63846D0((uint64_t)v19);
  }
  return v7;
}

uint64_t sub_1B6D91810(void *a1, void *a2, uint64_t a3)
{
  void (*v25)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t *v31;
  char *v32;
  uint64_t v33;
  float32x2_t v34;
  float32x2_t v35;
  __int8 v36;
  float32x2_t v37;
  float32x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  float32x2_t v56;
  char v57;
  float32x2_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  float32x2_t v68;
  char v69;
  float32x2_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  float32x2_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(void *__return_ptr, void, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int8 v91;
  __int8 v92;
  char v93;
  char v94;
  void v96[4];
  long long v97[2];
  uint64_t v98;
  float32x2_t v99;

  sub_1B63B13F0();
  uint64_t v6 = v5;
  uint64_t v7 = a1[1];
  sub_1B63B8DA4();
  uint64_t v9 = v8;
  long long v11 = (uint64_t *)a1[11];
  uint64_t v10 = a1[12];
  uint64_t v12 = a1[13];
  uint64_t v13 = a1[2];
  swift_retain();
  uint64_t v85 = sub_1B62C9024(v9, (uint64_t)&off_1F0F62C88, v11, v10, v12, v13);
  sub_1B6345398(*(void *)(v7 + 40), v6, v97);
  if (LOBYTE(v97[0]) == 1)
  {
    a2[9] = v6;
    a2[10] = &off_1F0F84760;
    uint64_t v14 = sub_1B62C9024(v6, (uint64_t)&off_1F0F84760, v11, v10, v12, v13);
    if (v11)
    {
      if (v12)
      {
        uint64_t v15 = (float32x2_t *)(v85 + 24);
        uint64_t v16 = v14 + 36;
        char v87 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          float32x2_t v17 = v15[-2];
          if (v17)
          {
            float32x2_t v18 = *v15;
            __int8 v19 = v15[1].i8[0];
            float32x2_t v20 = v15[2];
            char v91 = v15[3].i8[0];
            float32x2_t v21 = v15[-3];
            *(float32x2_t *)(v16 - 4) = v21;
            uint64_t v22 = *(void *)(*(void *)&v17 + 80);
            uint64_t v23 = *(void *)(*(void *)&v17 + 88);
            *(void *)(v16 - 20) = v22;
            *(void *)(v16 - 12) = v23;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v22)
            {
              if (v19)
              {
                uint64_t ObjectType = swift_getObjectType();
                uint64_t v25 = *(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v23 + 8);
                swift_unknownObjectRetain();
                v25(v97, *(void *)&v21, a3, ObjectType, v23);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v87, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
                swift_dynamicCast();
                float32x2_t v18 = (float32x2_t)v96[0];
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(float32x2_t *)(v16 - 36) = v18;
              if (v91)
              {
                uint64_t v26 = swift_getObjectType();
                (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v23 + 8))(v97, *(void *)(v16 - 4), a3, v26, v23);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
                swift_dynamicCast();
                float32x2_t v20 = (float32x2_t)v96[0];
                float32x2_t v18 = *(float32x2_t *)(v16 - 36);
              }
              else
              {
                v96[0] = v20;
              }
              swift_release();
              swift_unknownObjectRelease();
              *(float32x2_t *)(v16 - 28) = vsub_f32(v20, v18);
            }
            else
            {
              swift_release();
            }
          }
          v15 += 7;
          v16 += 40;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      unint64_t v46 = a1[6];
      uint64_t v47 = a1[7];
      uint64_t v48 = v47 - v46;
      if (v47 != v46)
      {
        uint64_t v53 = v85 + 56 * v46 + 24;
        int v54 = (void *)(v14 + 40 * v46 + 24);
        char v89 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          uint64_t v55 = *(void *)(v53 - 16);
          if (v55)
          {
            uint64_t v56 = *(float32x2_t *)v53;
            int64x2_t v57 = *(unsigned char *)(v53 + 8);
            uint64_t v58 = *(float32x2_t *)(v53 + 16);
            char v93 = *(unsigned char *)(v53 + 24);
            char v59 = *(void *)(v53 - 24);
            v54[1] = v59;
            int64x2_t v60 = *(void *)(v55 + 80);
            unint64_t v61 = *(void *)(v55 + 88);
            *(v54 - 1) = v60;
            uint64_t *v54 = v61;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v60)
            {
              if (v57)
              {
                int v62 = swift_getObjectType();
                unint64_t v63 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 8);
                swift_unknownObjectRetain();
                v63(v97, v59, a3, v62, v61);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v89, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
                swift_dynamicCast();
                uint64_t v56 = (float32x2_t)v96[0];
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(v54 - 3) = v56;
              if (v93)
              {
                uint64_t v64 = swift_getObjectType();
                (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v61 + 8))(v97, v54[1], a3, v64, v61);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
                swift_dynamicCast();
                uint64_t v58 = (float32x2_t)v96[0];
                uint64_t v56 = (float32x2_t)*(v54 - 3);
              }
              else
              {
                v96[0] = v58;
              }
              swift_release();
              swift_unknownObjectRelease();
              *(v54 - 2) = vsub_f32(v58, v56);
            }
            else
            {
              swift_release();
            }
          }
          v53 += 56;
          v54 += 5;
          --v48;
        }
        while (v48);
      }
    }
    return swift_release();
  }
  else
  {
    char v88 = v10;
    uint64_t v84 = v7;
    uint64_t v27 = v12;
    if (!v11) {
      uint64_t v27 = a1[7] - a1[6];
    }
    memset(v97, 0, sizeof(v97));
    char v98 = 0xFFFFFFFFLL;
    uint64_t v81 = (void *)a2[4];
    uint64_t v82 = sub_1B6D916FC(v27, v97, (uint64_t)v81);
    uint64_t v79 = v29;
    uint64_t v80 = v28;
    if (v11)
    {
      uint64_t v78 = v11;
      int64x2_t v30 = v10;
      if (v12)
      {
        uint64_t v31 = (float32x2_t *)(v85 + 24);
        uint64_t v32 = (char *)v82 + 36;
        uint64_t v83 = MEMORY[0x1E4FBC840] + 8;
        uint64_t v33 = v12;
        do
        {
          uint64_t v34 = v31[-2];
          if (v34)
          {
            uint64_t v35 = *v31;
            uint64_t v36 = v31[1].i8[0];
            uint64_t v37 = v31[2];
            char v92 = v31[3].i8[0];
            uint64_t v38 = v31[-3];
            *(float32x2_t *)(v32 - 4) = v38;
            uint64_t v39 = *(void *)(*(void *)&v34 + 80);
            uint64_t v40 = *(void *)(*(void *)&v34 + 88);
            *(void *)(v32 - 20) = v39;
            *(void *)(v32 - 12) = v40;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v39)
            {
              if (v36)
              {
                uint64_t v41 = swift_getObjectType();
                uint64_t v86 = *(void (**)(void *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v40 + 8);
                swift_unknownObjectRetain();
                v86(v96, *(void *)&v38, a3, v41, v40);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v83, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
                swift_dynamicCast();
                uint64_t v35 = v99;
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(float32x2_t *)(v32 - 36) = v35;
              if (v92)
              {
                unint64_t v42 = swift_getObjectType();
                (*(void (**)(void *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v40 + 8))(v96, *(void *)(v32 - 4), a3, v42, v40);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
                swift_dynamicCast();
                uint64_t v37 = v99;
              }
              else
              {
                uint64_t v99 = v37;
              }
              uint64_t v43 = *(float32x2_t *)(v32 - 36);
              swift_release();
              swift_unknownObjectRelease();
              *(float32x2_t *)(v32 - 28) = vsub_f32(v37, v43);
            }
            else
            {
              swift_release();
            }
            int64x2_t v30 = v88;
          }
          v31 += 7;
          v32 += 40;
          --v33;
        }
        while (v33);
      }
      unint64_t v44 = v12;
      long long v45 = (unint64_t)v82;
      sub_1B6D81200(v78, v30, v44, (uint64_t)v82, v79);
    }
    else
    {
      uint64_t v49 = a1[6];
      uint64_t v50 = a1[7];
      char v51 = v50 - v49;
      if (v50 != v49)
      {
        int64x2_t v65 = v85 + 56 * v49 + 24;
        int64x2_t v66 = (char *)v82 + 36;
        char v90 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          int64x2_t v67 = *(void *)(v65 - 16);
          if (v67)
          {
            int64x2_t v68 = *(float32x2_t *)v65;
            uint64_t v69 = *(unsigned char *)(v65 + 8);
            int64x2_t v70 = *(float32x2_t *)(v65 + 16);
            char v94 = *(unsigned char *)(v65 + 24);
            unint64_t v71 = *(void *)(v65 - 24);
            *(void *)(v66 - 4) = v71;
            int v72 = *(void *)(v67 + 80);
            uint64_t v73 = *(void *)(v67 + 88);
            *(void *)(v66 - 20) = v72;
            *(void *)(v66 - 12) = v73;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v72)
            {
              if (v69)
              {
                uint64_t v74 = swift_getObjectType();
                uint64_t v75 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 8);
                swift_unknownObjectRetain();
                v75(v96, v71, a3, v74, v73);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v90, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
                swift_dynamicCast();
                int64x2_t v68 = v99;
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(float32x2_t *)(v66 - 36) = v68;
              if (v94)
              {
                uint64_t v76 = swift_getObjectType();
                (*(void (**)(void *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v73 + 8))(v96, *(void *)(v66 - 4), a3, v76, v73);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
                swift_dynamicCast();
                int64x2_t v70 = v99;
              }
              else
              {
                uint64_t v99 = v70;
              }
              char v77 = *(float32x2_t *)(v66 - 36);
              swift_release();
              swift_unknownObjectRelease();
              *(float32x2_t *)(v66 - 28) = vsub_f32(v70, v77);
            }
            else
            {
              swift_release();
            }
          }
          v65 += 56;
          v66 += 40;
          --v51;
        }
        while (v51);
      }
      long long v45 = (unint64_t)v82;
      sub_1B6D81354(*(void *)(v84 + 232), *(void *)(v84 + 240));
    }
    ecs_stack_allocator_deallocate(v81, v45, 40 * v80);
    return swift_release();
  }
}

uint64_t sub_1B6D9229C(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D91810);
}

uint64_t sub_1B6D922C8(void *a1, void *a2, uint64_t a3)
{
  void (*v25)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int32 v97;
  uint64_t v98;
  float32x4_t v99;
  __int32 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  uint64_t v106;
  float32x4_t v107;
  uint64_t v108;
  float32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  float32x4_t v114;
  char v115;
  float32x4_t v116;
  char v117;
  float32x4_t v118;
  uint64_t v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  char v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  long long v129[3];
  uint64_t v130;
  uint64_t v131;

  unint64_t v131 = a3;
  sub_1B63B133C();
  uint64_t v6 = v5;
  uint64_t v7 = a1[1];
  sub_1B63B8CF0();
  uint64_t v9 = v8;
  long long v11 = (uint64_t *)a1[11];
  uint64_t v10 = a1[12];
  uint64_t v12 = a1[13];
  uint64_t v13 = a1[2];
  swift_retain();
  long long v112 = sub_1B62C9024(v9, (uint64_t)&off_1F0F62C88, v11, v10, v12, v13);
  sub_1B6345398(*(void *)(v7 + 40), v6, v129);
  if (LOBYTE(v129[0]) == 1)
  {
    a2[9] = v6;
    a2[10] = &off_1F0F84760;
    uint64_t v14 = sub_1B62C9024(v6, (uint64_t)&off_1F0F84760, v11, v10, v12, v13);
    if (v11)
    {
      if (v12)
      {
        uint64_t v15 = v14 + 52;
        uint64_t v16 = v112 + 40;
        char v94 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          uint64_t v17 = *(void *)(v16 - 32);
          if (v17)
          {
            uint64_t v121 = v12;
            uint64_t v19 = *(void *)(v16 - 8);
            uint64_t v18 = *(void *)v16;
            char v20 = *(unsigned char *)(v16 + 8);
            char v101 = *(void *)(v16 + 24);
            int v106 = *(void *)(v16 + 32);
            long long v113 = *(unsigned char *)(v16 + 40);
            uint64_t v21 = *(void *)(v16 - 40);
            *(void *)(v15 - 4) = v21;
            uint64_t v22 = *(void *)(v17 + 80);
            uint64_t v23 = *(void *)(v17 + 88);
            *(void *)(v15 - 20) = v22;
            *(void *)(v15 - 12) = v23;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v22)
            {
              if (v20)
              {
                uint64_t ObjectType = swift_getObjectType();
                uint64_t v25 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8);
                swift_unknownObjectRetain();
                v25(v129, v21, v131, ObjectType, v23);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v94, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
                swift_dynamicCast();
                uint64_t v18 = v127.i64[1];
                uint64_t v19 = v127.i64[0];
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(void *)(v15 - 52) = v19;
              *(void *)(v15 - 44) = v18;
              if (v113)
              {
                uint64_t v26 = swift_getObjectType();
                (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v23 + 8))(v129, *(void *)(v15 - 4), v131, v26, v23);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
                swift_dynamicCast();
                uint64_t v107 = v127;
                long long v114 = *(float32x4_t *)(v15 - 52);
              }
              else
              {
                v27.i64[0] = v19;
                v27.i64[1] = v18;
                long long v114 = v27;
                v127.i64[0] = v101;
                v127.i64[1] = v106;
                v27.i64[0] = v101;
                v27.i64[1] = v106;
                uint64_t v107 = v27;
              }
              uint64_t v12 = v121;
              swift_release();
              swift_unknownObjectRelease();
              uint64_t v28 = vsubq_f32(v107, v114);
              v28.i32[3] = v100;
              *(float32x4_t *)(v15 - 36) = v28;
            }
            else
            {
              swift_release();
              uint64_t v12 = v121;
            }
          }
          v16 += 96;
          v15 += 64;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      uint64_t v49 = a1[6];
      uint64_t v50 = a1[7];
      char v51 = v50 - v49;
      if (v50 != v49)
      {
        uint64_t v56 = (float32x4_t *)(v14 + (v49 << 6));
        int64x2_t v57 = v112 + 96 * v49 + 40;
        char v95 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          uint64_t v58 = *(void *)(v57 - 32);
          if (v58)
          {
            int64x2_t v60 = *(void *)(v57 - 8);
            char v59 = *(void *)v57;
            unint64_t v61 = *(unsigned char *)(v57 + 8);
            long long v103 = *(void *)(v57 + 24);
            __int16 v110 = *(void *)(v57 + 32);
            uint64_t v117 = *(unsigned char *)(v57 + 40);
            int v62 = *(void *)(v57 - 40);
            v56[3].i64[0] = v62;
            uint64_t v64 = *(void *)(v58 + 80);
            unint64_t v63 = *(void *)(v58 + 88);
            v56[2].i64[0] = v64;
            v56[2].i64[1] = v63;
            uint64_t v123 = v63;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v64)
            {
              if (v61)
              {
                int64x2_t v65 = swift_getObjectType();
                int64x2_t v66 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 8);
                swift_unknownObjectRetain();
                v66(v129, v62, v131, v65, v123);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v95, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
                swift_dynamicCast();
                char v59 = v127.i64[1];
                int64x2_t v60 = v127.i64[0];
              }
              else
              {
                swift_unknownObjectRetain();
              }
              v56->i64[0] = v60;
              v56->i64[1] = v59;
              if (v117)
              {
                int64x2_t v67 = swift_getObjectType();
                (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v123 + 8))(v129, v56[3].i64[0], v131, v67);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
                swift_dynamicCast();
                long long v118 = v127;
                uint64_t v124 = *v56;
              }
              else
              {
                v68.i64[0] = v60;
                v68.i64[1] = v59;
                uint64_t v124 = v68;
                v127.i64[0] = v103;
                v127.i64[1] = v110;
                v68.i64[0] = v103;
                v68.i64[1] = v110;
                long long v118 = v68;
              }
              swift_release();
              swift_unknownObjectRelease();
              uint64_t v69 = vsubq_f32(v118, v124);
              v69.i32[3] = v100;
              v56[1] = v69;
            }
            else
            {
              swift_release();
            }
          }
          v57 += 96;
          v56 += 4;
          --v51;
        }
        while (v51);
      }
    }
    return swift_release();
  }
  else
  {
    char v93 = v10;
    char v92 = v7;
    uint64_t v122 = v12;
    if (!v11) {
      uint64_t v12 = a1[7] - a1[6];
    }
    memset(v129, 0, sizeof(v129));
    uint64_t v130 = 0xFFFFFFFFLL;
    char v88 = (void *)a2[4];
    char v89 = (uint64_t)a2;
    char v90 = sub_1B6D92EB8(v12, v129, (uint64_t)v88);
    uint64_t v86 = v30;
    char v87 = v29;
    if (v11)
    {
      uint64_t v85 = v11;
      uint64_t v31 = v10;
      if (v122)
      {
        uint64_t v32 = (char *)v90 + 52;
        uint64_t v33 = v112 + 40;
        char v91 = MEMORY[0x1E4FBC840] + 8;
        uint64_t v34 = v122;
        do
        {
          uint64_t v35 = *(void *)(v33 - 32);
          if (v35)
          {
            uint64_t v36 = *(void *)(v33 - 8);
            char v98 = *(void *)v33;
            uint64_t v37 = *(unsigned char *)(v33 + 8);
            long long v102 = *(void *)(v33 + 24);
            char v108 = *(void *)(v33 + 32);
            uint64_t v115 = *(unsigned char *)(v33 + 40);
            uint64_t v38 = *(void *)(v33 - 40);
            *(void *)(v32 - 4) = v38;
            uint64_t v39 = *(void *)(v35 + 80);
            uint64_t v40 = *(void *)(v35 + 88);
            *(void *)(v32 - 20) = v39;
            *(void *)(v32 - 12) = v40;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v39)
            {
              if (v37)
              {
                uint64_t v41 = swift_getObjectType();
                unint64_t v42 = *(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8);
                swift_unknownObjectRetain();
                v42(&v127, v38, v131, v41, v40);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v91, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
                swift_dynamicCast();
                uint64_t v43 = v128;
              }
              else
              {
                v44.i64[0] = v36;
                v44.i64[1] = v98;
                uint64_t v99 = v44;
                swift_unknownObjectRetain();
                uint64_t v43 = v99;
              }
              *(float32x4_t *)(v32 - 52) = v43;
              if (v115)
              {
                long long v45 = swift_getObjectType();
                (*(void (**)(float32x4_t *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v40 + 8))(&v127, *(void *)(v32 - 4), v131, v45, v40);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
                swift_dynamicCast();
                unint64_t v46 = v128;
              }
              else
              {
                v128.i64[0] = v102;
                v128.i64[1] = v108;
                v46.i64[0] = v102;
                v46.i64[1] = v108;
              }
              int v116 = v46;
              uint64_t v109 = *(float32x4_t *)(v32 - 52);
              swift_release();
              swift_unknownObjectRelease();
              uint64_t v47 = vsubq_f32(v116, v109);
              v47.i32[3] = v97;
              *(float32x4_t *)(v32 - 36) = v47;
            }
            else
            {
              swift_release();
            }
            uint64_t v31 = v93;
          }
          v33 += 96;
          v32 += 64;
          --v34;
        }
        while (v34);
      }
      uint64_t v48 = (unint64_t)v90;
      sub_1B6D80F5C(v85, v31, v122, (uint64_t)v90, v86, v89, (uint64_t (*)(void))sub_1B63B133C);
    }
    else
    {
      unint64_t v52 = a1[6];
      uint64_t v53 = a1[7];
      int v54 = v53 - v52;
      if (v53 != v52)
      {
        int64x2_t v70 = (char *)v90 + 52;
        unint64_t v71 = v112 + 96 * v52 + 40;
        char v96 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          int v72 = *(void *)(v71 - 32);
          if (v72)
          {
            uint64_t v73 = *(void *)(v71 - 8);
            long long v104 = *(void *)v71;
            uint64_t v74 = *(unsigned char *)(v71 + 8);
            char v111 = *(void *)(v71 + 24);
            uint64_t v119 = *(void *)(v71 + 32);
            uint64_t v125 = *(unsigned char *)(v71 + 40);
            uint64_t v75 = *(void *)(v71 - 40);
            *(void *)(v70 - 4) = v75;
            uint64_t v76 = *(void *)(v72 + 80);
            char v77 = *(void *)(v72 + 88);
            *(void *)(v70 - 20) = v76;
            *(void *)(v70 - 12) = v77;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v76)
            {
              if (v74)
              {
                uint64_t v78 = swift_getObjectType();
                uint64_t v79 = *(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 8);
                swift_unknownObjectRetain();
                v79(&v127, v75, v131, v78, v77);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v96, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
                swift_dynamicCast();
                uint64_t v80 = v128;
              }
              else
              {
                v81.i64[0] = v73;
                v81.i64[1] = v104;
                uint64_t v105 = v81;
                swift_unknownObjectRetain();
                uint64_t v80 = v105;
              }
              *(float32x4_t *)(v70 - 52) = v80;
              if (v125)
              {
                uint64_t v82 = swift_getObjectType();
                (*(void (**)(float32x4_t *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v77 + 8))(&v127, *(void *)(v70 - 4), v131, v82, v77);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
                swift_dynamicCast();
                uint64_t v83 = v128;
              }
              else
              {
                v128.i64[0] = v111;
                v128.i64[1] = v119;
                v83.i64[0] = v111;
                v83.i64[1] = v119;
              }
              uint64_t v120 = v83;
              uint64_t v126 = *(float32x4_t *)(v70 - 52);
              swift_release();
              swift_unknownObjectRelease();
              uint64_t v84 = vsubq_f32(v120, v126);
              v84.i32[3] = v100;
              *(float32x4_t *)(v70 - 36) = v84;
            }
            else
            {
              swift_release();
            }
          }
          v71 += 96;
          v70 += 64;
          --v54;
        }
        while (v54);
      }
      uint64_t v48 = (unint64_t)v90;
      sub_1B6D810B0(*(void *)(v92 + 232), *(void *)(v92 + 240), (uint64_t)v90, v86, v89, (uint64_t (*)(void))sub_1B63B133C);
    }
    ecs_stack_allocator_deallocate(v88, v48, v87 << 6);
    return swift_release();
  }
}

uint64_t sub_1B6D92E8C(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D922C8);
}

void *sub_1B6D92EB8(uint64_t a1, long long *a2, uint64_t a3)
{
  sub_1B6DA0D94((uint64_t)(a2 + 2), (uint64_t)v23, (uint64_t (*)(void))sub_1B6D93BC0);
  uint64_t v6 = ecs_stack_allocator_allocate(a3, a1 << 6, 16);
  uint64_t v7 = v6;
  if (a1)
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    long long v10 = a2[2];
    v6[6] = *((void *)a2 + 6);
    *((_OWORD *)v6 + 1) = v9;
    *((_OWORD *)v6 + 2) = v10;
    *(_OWORD *)uint64_t v6 = v8;
    if (a1 != 1)
    {
      long long v11 = *a2;
      long long v12 = a2[1];
      long long v13 = a2[2];
      v6[14] = *((void *)a2 + 6);
      *((_OWORD *)v6 + 5) = v12;
      *((_OWORD *)v6 + 6) = v13;
      *((_OWORD *)v6 + 4) = v11;
      if (a1 != 2)
      {
        long long v14 = *a2;
        long long v15 = a2[1];
        long long v16 = a2[2];
        v6[22] = *((void *)a2 + 6);
        *((_OWORD *)v6 + 9) = v15;
        *((_OWORD *)v6 + 10) = v16;
        *((_OWORD *)v6 + 8) = v14;
        uint64_t v17 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v18 = v6 + 24;
          do
          {
            sub_1B63846D0((uint64_t)v23);
            long long v20 = a2[1];
            long long v19 = a2[2];
            long long v21 = *a2;
            v18[6] = *((void *)a2 + 6);
            *((_OWORD *)v18 + 1) = v20;
            *((_OWORD *)v18 + 2) = v19;
            *(_OWORD *)uint64_t v18 = v21;
            v18 += 8;
            --v17;
          }
          while (v17);
        }
        sub_1B63846D0((uint64_t)v23);
      }
      sub_1B63846D0((uint64_t)v23);
    }
    sub_1B63846D0((uint64_t)v23);
  }
  return v7;
}

uint64_t sub_1B6D92FE0(void *a1, void *a2, uint64_t a3)
{
  void (*v26)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float32x4_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float32x4_t v104;
  char v105;
  float32x4_t v106;
  uint64_t v107;
  float32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t v112;
  float32x4_t v113;
  char v114;
  float32x4_t v115;
  char v116;
  float32x4_t v117;
  uint64_t v118;
  float32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  char v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  long long v129[3];
  uint64_t v130;
  uint64_t v131;

  unint64_t v131 = a3;
  sub_1B63B1288();
  uint64_t v6 = v5;
  uint64_t v7 = a1[1];
  sub_1B63B8C3C();
  uint64_t v9 = v8;
  long long v11 = (uint64_t *)a1[11];
  uint64_t v10 = a1[12];
  uint64_t v12 = a1[13];
  uint64_t v13 = a1[2];
  swift_retain();
  char v111 = sub_1B62C9024(v9, (uint64_t)&off_1F0F62C88, v11, v10, v12, v13);
  sub_1B6345398(*(void *)(v7 + 40), v6, v129);
  if (LOBYTE(v129[0]) == 1)
  {
    a2[9] = v6;
    a2[10] = &off_1F0F84760;
    uint64_t v14 = sub_1B62C9024(v6, (uint64_t)&off_1F0F84760, v11, v10, v12, v13);
    if (v11)
    {
      uint64_t v15 = v12;
      if (v12)
      {
        uint64_t v16 = v14 + 52;
        uint64_t v17 = v111 + 40;
        char v93 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          uint64_t v18 = *(void *)(v17 - 32);
          if (v18)
          {
            uint64_t v120 = v15;
            uint64_t v19 = *(void *)(v17 - 8);
            uint64_t v20 = *(void *)v17;
            char v21 = *(unsigned char *)(v17 + 8);
            char v95 = *(void *)(v17 + 24);
            __int16 v100 = *(void *)(v17 + 32);
            uint64_t v105 = *(unsigned char *)(v17 + 40);
            uint64_t v22 = *(void *)(v17 - 40);
            *(void *)(v16 - 4) = v22;
            uint64_t v23 = *(void *)(v18 + 80);
            uint64_t v24 = *(void *)(v18 + 88);
            *(void *)(v16 - 20) = v23;
            *(void *)(v16 - 12) = v24;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v23)
            {
              if (v21)
              {
                uint64_t ObjectType = swift_getObjectType();
                uint64_t v26 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8);
                swift_unknownObjectRetain();
                v26(v129, v22, v131, ObjectType, v24);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v93, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
                swift_dynamicCast();
                uint64_t v27 = v127;
              }
              else
              {
                v28.i64[0] = v19;
                v28.i64[1] = v20;
                long long v112 = v28;
                swift_unknownObjectRetain();
                uint64_t v27 = v112;
              }
              *(float32x4_t *)(v16 - 52) = v27;
              uint64_t v15 = v120;
              if (v105)
              {
                uint64_t v29 = swift_getObjectType();
                (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v24 + 8))(v129, *(void *)(v16 - 4), v131, v29, v24);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
                swift_dynamicCast();
                int v106 = v127;
                uint64_t v27 = *(float32x4_t *)(v16 - 52);
              }
              else
              {
                v127.i64[0] = v95;
                v127.i64[1] = v100;
                v30.i64[0] = v95;
                v30.i64[1] = v100;
                int v106 = v30;
              }
              long long v113 = v27;
              swift_release();
              swift_unknownObjectRelease();
              *(float32x4_t *)(v16 - 36) = vsubq_f32(v106, v113);
            }
            else
            {
              swift_release();
              uint64_t v15 = v120;
            }
          }
          v17 += 96;
          v16 += 64;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      uint64_t v50 = a1[6];
      char v51 = a1[7];
      unint64_t v52 = v51 - v50;
      if (v51 != v50)
      {
        int64x2_t v57 = v14 + (v50 << 6) + 52;
        uint64_t v58 = v111 + 96 * v50 + 40;
        char v98 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          char v59 = *(void *)(v58 - 32);
          if (v59)
          {
            int64x2_t v60 = *(void *)(v58 - 8);
            uint64_t v122 = *(void *)v58;
            unint64_t v61 = *(unsigned char *)(v58 + 8);
            long long v102 = *(void *)(v58 + 24);
            uint64_t v109 = *(void *)(v58 + 32);
            int v116 = *(unsigned char *)(v58 + 40);
            int v62 = *(void *)(v58 - 40);
            *(void *)(v57 - 4) = v62;
            unint64_t v63 = *(void *)(v59 + 80);
            uint64_t v64 = *(void *)(v59 + 88);
            *(void *)(v57 - 20) = v63;
            *(void *)(v57 - 12) = v64;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v63)
            {
              if (v61)
              {
                int64x2_t v65 = swift_getObjectType();
                int64x2_t v66 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 8);
                swift_unknownObjectRetain();
                v66(v129, v62, v131, v65, v64);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v98, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
                swift_dynamicCast();
                int64x2_t v67 = v127;
              }
              else
              {
                v68.i64[0] = v60;
                v68.i64[1] = v122;
                uint64_t v123 = v68;
                swift_unknownObjectRetain();
                int64x2_t v67 = v123;
              }
              *(float32x4_t *)(v57 - 52) = v67;
              if (v116)
              {
                uint64_t v69 = swift_getObjectType();
                (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v64 + 8))(v129, *(void *)(v57 - 4), v131, v69, v64);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
                swift_dynamicCast();
                uint64_t v117 = v127;
                int64x2_t v67 = *(float32x4_t *)(v57 - 52);
              }
              else
              {
                v127.i64[0] = v102;
                v127.i64[1] = v109;
                v70.i64[0] = v102;
                v70.i64[1] = v109;
                uint64_t v117 = v70;
              }
              uint64_t v124 = v67;
              swift_release();
              swift_unknownObjectRelease();
              *(float32x4_t *)(v57 - 36) = vsubq_f32(v117, v124);
            }
            else
            {
              swift_release();
            }
          }
          v58 += 96;
          v57 += 64;
          --v52;
        }
        while (v52);
      }
    }
    return swift_release();
  }
  else
  {
    char v94 = v10;
    char v92 = v7;
    uint64_t v121 = v12;
    if (!v11) {
      uint64_t v12 = a1[7] - a1[6];
    }
    memset(v129, 0, sizeof(v129));
    uint64_t v130 = 0xFFFFFFFFLL;
    char v88 = (void *)a2[4];
    char v89 = (uint64_t)a2;
    char v90 = sub_1B6D92EB8(v12, v129, (uint64_t)v88);
    uint64_t v86 = v32;
    char v87 = v31;
    if (v11)
    {
      uint64_t v85 = v11;
      uint64_t v33 = v10;
      if (v121)
      {
        uint64_t v34 = v111 + 40;
        uint64_t v35 = (char *)v90 + 52;
        char v91 = MEMORY[0x1E4FBC840] + 8;
        uint64_t v36 = v121;
        do
        {
          uint64_t v37 = *(void *)(v34 - 32);
          if (v37)
          {
            uint64_t v38 = *(void *)(v34 - 8);
            char v96 = *(void *)v34;
            uint64_t v39 = *(unsigned char *)(v34 + 8);
            char v101 = *(void *)(v34 + 24);
            uint64_t v107 = *(void *)(v34 + 32);
            long long v114 = *(unsigned char *)(v34 + 40);
            uint64_t v40 = *(void *)(v34 - 40);
            *(void *)(v35 - 4) = v40;
            uint64_t v41 = *(void *)(v37 + 80);
            unint64_t v42 = *(void *)(v37 + 88);
            *(void *)(v35 - 20) = v41;
            *(void *)(v35 - 12) = v42;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v41)
            {
              if (v39)
              {
                uint64_t v43 = swift_getObjectType();
                unint64_t v44 = *(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 8);
                swift_unknownObjectRetain();
                v44(&v127, v40, v131, v43, v42);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v91, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
                swift_dynamicCast();
                long long v45 = v128;
              }
              else
              {
                v46.i64[0] = v38;
                v46.i64[1] = v96;
                char v97 = v46;
                swift_unknownObjectRetain();
                long long v45 = v97;
              }
              *(float32x4_t *)(v35 - 52) = v45;
              if (v114)
              {
                uint64_t v47 = swift_getObjectType();
                (*(void (**)(float32x4_t *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v42 + 8))(&v127, *(void *)(v35 - 4), v131, v47, v42);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
                swift_dynamicCast();
                uint64_t v48 = v128;
              }
              else
              {
                v128.i64[0] = v101;
                v128.i64[1] = v107;
                v48.i64[0] = v101;
                v48.i64[1] = v107;
              }
              uint64_t v115 = v48;
              char v108 = *(float32x4_t *)(v35 - 52);
              swift_release();
              swift_unknownObjectRelease();
              *(float32x4_t *)(v35 - 36) = vsubq_f32(v115, v108);
            }
            else
            {
              swift_release();
            }
            uint64_t v33 = v94;
          }
          v34 += 96;
          v35 += 64;
          --v36;
        }
        while (v36);
      }
      uint64_t v49 = (unint64_t)v90;
      sub_1B6D80F5C(v85, v33, v121, (uint64_t)v90, v86, v89, (uint64_t (*)(void))sub_1B63B1288);
    }
    else
    {
      uint64_t v53 = a1[6];
      int v54 = a1[7];
      uint64_t v55 = v54 - v53;
      if (v54 != v53)
      {
        unint64_t v71 = v111 + 96 * v53 + 40;
        int v72 = (char *)v90 + 52;
        uint64_t v99 = MEMORY[0x1E4FBC840] + 8;
        do
        {
          uint64_t v73 = *(void *)(v71 - 32);
          if (v73)
          {
            uint64_t v74 = *(void *)(v71 - 8);
            long long v103 = *(void *)v71;
            uint64_t v75 = *(unsigned char *)(v71 + 8);
            __int16 v110 = *(void *)(v71 + 24);
            long long v118 = *(void *)(v71 + 32);
            uint64_t v125 = *(unsigned char *)(v71 + 40);
            uint64_t v76 = *(void *)(v71 - 40);
            *(void *)(v72 - 4) = v76;
            char v77 = *(void *)(v73 + 80);
            uint64_t v78 = *(void *)(v73 + 88);
            *(void *)(v72 - 20) = v77;
            *(void *)(v72 - 12) = v78;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v77)
            {
              if (v75)
              {
                uint64_t v79 = swift_getObjectType();
                uint64_t v80 = *(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 8);
                swift_unknownObjectRetain();
                v80(&v127, v76, v131, v79, v78);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, v99, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
                swift_dynamicCast();
                uint64_t v81 = v128;
              }
              else
              {
                v82.i64[0] = v74;
                v82.i64[1] = v103;
                long long v104 = v82;
                swift_unknownObjectRetain();
                uint64_t v81 = v104;
              }
              *(float32x4_t *)(v72 - 52) = v81;
              if (v125)
              {
                uint64_t v83 = swift_getObjectType();
                (*(void (**)(float32x4_t *__return_ptr, void, uint64_t, uint64_t, uint64_t))(v78 + 8))(&v127, *(void *)(v72 - 4), v131, v83, v78);
                sub_1B62CA7BC(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
                sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
                swift_dynamicCast();
                uint64_t v84 = v128;
              }
              else
              {
                v128.i64[0] = v110;
                v128.i64[1] = v118;
                v84.i64[0] = v110;
                v84.i64[1] = v118;
              }
              uint64_t v119 = v84;
              uint64_t v126 = *(float32x4_t *)(v72 - 52);
              swift_release();
              swift_unknownObjectRelease();
              *(float32x4_t *)(v72 - 36) = vsubq_f32(v119, v126);
            }
            else
            {
              swift_release();
            }
          }
          v71 += 96;
          v72 += 64;
          --v55;
        }
        while (v55);
      }
      uint64_t v49 = (unint64_t)v90;
      sub_1B6D810B0(*(void *)(v92 + 232), *(void *)(v92 + 240), (uint64_t)v90, v86, v89, (uint64_t (*)(void))sub_1B63B1288);
    }
    ecs_stack_allocator_deallocate(v88, v49, v87 << 6);
    return swift_release();
  }
}

uint64_t sub_1B6D93B94(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D92FE0);
}

void sub_1B6D93BC0()
{
  if (!qword_1EB97EB18)
  {
    sub_1B62C55B0(255, &qword_1EB97EB10);
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB97EB18);
    }
  }
}

uint64_t sub_1B6D93C2C(void *a1, void *a2)
{
  sub_1B66668BC();
  uint64_t v4 = v3;
  uint64_t v5 = a1[1];
  sub_1B63B65C8();
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t *)a1[11];
  uint64_t v9 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v12 = sub_1B62C9024(v7, (uint64_t)&off_1F0F719D8, v8, v9, v10, v11);
  sub_1B6345398(*(void *)(v5 + 40), v4, &v212);
  uint64_t v169 = v5;
  if (v212 == 1)
  {
    a2[9] = v4;
    a2[10] = &off_1F0F920F8;
    uint64_t v13 = sub_1B62C9024(v4, (uint64_t)&off_1F0F920F8, v8, v9, v10, v11);
    if (v8)
    {
      if (v10)
      {
        uint64_t v14 = v10 - 1;
        for (uint64_t i = (void *)(v13 + 32); ; i += 8)
        {
          long long v16 = *(_OWORD *)(v12 + 16);
          long long v212 = *(_OWORD *)v12;
          long long v213 = v16;
          long long v17 = *(_OWORD *)(v12 + 32);
          long long v18 = *(_OWORD *)(v12 + 48);
          long long v19 = *(_OWORD *)(v12 + 80);
          long long v216 = *(_OWORD *)(v12 + 64);
          long long v217 = v19;
          long long v214 = v17;
          long long v215 = v18;
          long long v20 = *(_OWORD *)(v12 + 96);
          long long v21 = *(_OWORD *)(v12 + 112);
          long long v22 = *(_OWORD *)(v12 + 128);
          char v221 = *(unsigned char *)(v12 + 144);
          long long v219 = v21;
          long long v220 = v22;
          long long v218 = v20;
          uint64_t v23 = *((void *)&v212 + 1);
          if (*((void *)&v212 + 1))
          {
            i[2] = v212;
            uint64_t v24 = *(void *)(v23 + 80);
            uint64_t v25 = *(void *)(v23 + 88);
            uint64_t v206 = v14;
            v224 = i;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            void *v224 = v24;
            v224[1] = v25;
            uint64_t v26 = *((void *)&v213 + 1);
            long long v27 = v214;
            char v28 = v215;
            sub_1B636BFA4((uint64_t)&v212);
            long long v182 = sub_1B6B4A5D4(v26, v27, *((uint64_t *)&v27 + 1), v28);
            uint64_t v185 = v29;
            uint64_t v176 = v30;
            char v194 = v31;
            uint64_t v32 = sub_1B6B4A5D4(*((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217);
            uint64_t v174 = v33;
            uint64_t v210 = v34;
            char v190 = v35;
            uint64_t v172 = sub_1B6B4A5D4(*((uint64_t *)&v217 + 1), v218, *((uint64_t *)&v218 + 1), v219);
            uint64_t v37 = v36;
            uint64_t v39 = v38;
            char v41 = v40;
            unint64_t v42 = sub_1B6B4A5D4(*((uint64_t *)&v219 + 1), v220, *((uint64_t *)&v220 + 1), v221);
            uint64_t v191 = sub_1B6B4A694((uint64_t)v182, v176, v185, v194, (uint64_t)v32, v174, v210, v190, (uint64_t)v172, v37, v39, v41, (uint64_t)v42, v43, v44, v45);
            uint64_t v195 = v46;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v26) = v213;
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v47 = sub_1B6B4A9B8((uint64_t)v191, v195, v26);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v212);
            swift_release();
            swift_release();
            uint64_t i = v224;
            uint64_t v14 = v206;
            *(v224 - 4) = v47;
          }
          if (!v14) {
            break;
          }
          --v14;
          v12 += 152;
        }
      }
    }
    else
    {
      uint64_t v88 = a1[6];
      uint64_t v89 = a1[7];
      if (v88 != v89)
      {
        uint64_t v94 = v12 + 152 * v88;
        char v95 = (void *)(v13 + (v88 << 6) + 32);
        for (uint64_t j = ~v88 + v89; ; --j)
        {
          long long v97 = *(_OWORD *)(v94 + 16);
          long long v212 = *(_OWORD *)v94;
          long long v213 = v97;
          long long v98 = *(_OWORD *)(v94 + 32);
          long long v99 = *(_OWORD *)(v94 + 48);
          long long v100 = *(_OWORD *)(v94 + 80);
          long long v216 = *(_OWORD *)(v94 + 64);
          long long v217 = v100;
          long long v214 = v98;
          long long v215 = v99;
          long long v101 = *(_OWORD *)(v94 + 96);
          long long v102 = *(_OWORD *)(v94 + 112);
          long long v103 = *(_OWORD *)(v94 + 128);
          char v221 = *(unsigned char *)(v94 + 144);
          long long v219 = v102;
          long long v220 = v103;
          long long v218 = v101;
          uint64_t v104 = *((void *)&v212 + 1);
          if (*((void *)&v212 + 1))
          {
            v95[2] = v212;
            uint64_t v105 = *(void *)(v104 + 80);
            uint64_t v106 = *(void *)(v104 + 88);
            uint64_t v208 = j;
            v224 = v95;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            void *v224 = v105;
            v224[1] = v106;
            uint64_t v107 = *((void *)&v213 + 1);
            long long v108 = v214;
            char v109 = v215;
            sub_1B636BFA4((uint64_t)&v212);
            uint64_t v183 = sub_1B6B4A5D4(v107, v108, *((uint64_t *)&v108 + 1), v109);
            uint64_t v187 = v110;
            uint64_t v178 = v111;
            char v198 = v112;
            uint64_t v175 = sub_1B6B4A5D4(*((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217);
            uint64_t v114 = v113;
            uint64_t v211 = v115;
            char v192 = v116;
            uint64_t v173 = sub_1B6B4A5D4(*((uint64_t *)&v217 + 1), v218, *((uint64_t *)&v218 + 1), v219);
            uint64_t v118 = v117;
            uint64_t v120 = v119;
            LOBYTE(v107) = v121;
            uint64_t v122 = sub_1B6B4A5D4(*((uint64_t *)&v219 + 1), v220, *((uint64_t *)&v220 + 1), v221);
            uint64_t v193 = sub_1B6B4A694((uint64_t)v183, v178, v187, v198, (uint64_t)v175, v114, v211, v192, (uint64_t)v173, v118, v120, v107, (uint64_t)v122, v123, v124, v125);
            uint64_t v199 = v126;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v107) = v213;
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v127 = sub_1B6B4A9B8((uint64_t)v193, v199, v107);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v212);
            swift_release();
            swift_release();
            char v95 = v224;
            uint64_t j = v208;
            *(v224 - 4) = v127;
          }
          if (!j) {
            break;
          }
          v94 += 152;
          v95 += 8;
        }
      }
    }
  }
  else
  {
    uint64_t v171 = v9;
    uint64_t v168 = v10;
    if (!v8) {
      uint64_t v10 = a1[7] - a1[6];
    }
    memset(v222, 0, sizeof(v222));
    uint64_t v223 = 0xFFFFFFFFLL;
    uint64_t v48 = (uint64_t)a2;
    uint64_t v166 = (void *)a2[4];
    uint64_t v167 = sub_1B6D87428(v10, (uint64_t)v222, (uint64_t)v166);
    uint64_t v164 = v50;
    uint64_t v165 = v49;
    if (v8)
    {
      int v163 = v8;
      uint64_t v51 = v9;
      if (v168)
      {
        uint64_t v52 = v168;
        uint64_t v53 = v167 + 4;
        do
        {
          long long v54 = *(_OWORD *)(v12 + 16);
          long long v212 = *(_OWORD *)v12;
          long long v213 = v54;
          long long v55 = *(_OWORD *)(v12 + 32);
          long long v56 = *(_OWORD *)(v12 + 48);
          long long v57 = *(_OWORD *)(v12 + 80);
          long long v216 = *(_OWORD *)(v12 + 64);
          long long v217 = v57;
          long long v214 = v55;
          long long v215 = v56;
          long long v58 = *(_OWORD *)(v12 + 96);
          long long v59 = *(_OWORD *)(v12 + 112);
          long long v60 = *(_OWORD *)(v12 + 128);
          char v221 = *(unsigned char *)(v12 + 144);
          long long v219 = v59;
          long long v220 = v60;
          long long v218 = v58;
          uint64_t v61 = *((void *)&v212 + 1);
          if (*((void *)&v212 + 1))
          {
            v53[2] = v212;
            uint64_t v62 = *(void *)(v61 + 80);
            uint64_t v63 = *(void *)(v61 + 88);
            uint64_t v207 = v52;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            void *v53 = v62;
            v53[1] = v63;
            uint64_t v64 = *((void *)&v213 + 1);
            long long v65 = v214;
            char v66 = v215;
            sub_1B636BFA4((uint64_t)&v212);
            uint64_t v186 = sub_1B6B4A5D4(v64, v65, *((uint64_t *)&v65 + 1), v66);
            uint64_t v188 = v67;
            uint64_t v180 = v68;
            char v202 = v69;
            uint64_t v177 = sub_1B6B4A5D4(*((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217);
            uint64_t v71 = v70;
            v224 = v72;
            char v196 = v73;
            uint64_t v74 = sub_1B6B4A5D4(*((uint64_t *)&v217 + 1), v218, *((uint64_t *)&v218 + 1), v219);
            uint64_t v76 = v75;
            uint64_t v78 = v77;
            char v80 = v79;
            uint64_t v81 = sub_1B6B4A5D4(*((uint64_t *)&v219 + 1), v220, *((uint64_t *)&v220 + 1), v221);
            uint64_t v197 = sub_1B6B4A694((uint64_t)v186, v180, v188, v202, (uint64_t)v177, v71, (uint64_t)v224, v196, (uint64_t)v74, v76, v78, v80, (uint64_t)v81, v82, v83, v84);
            uint64_t v203 = v85;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v76) = v213;
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v86 = sub_1B6B4A9B8((uint64_t)v197, v203, v76);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v212);
            swift_release();
            swift_release();
            uint64_t v52 = v207;
            uint64_t v51 = v171;
            *(v53 - 4) = v86;
          }
          v53 += 8;
          v12 += 152;
          --v52;
        }
        while (v52);
      }
      unint64_t v87 = (unint64_t)v167;
      sub_1B6D81778(v163, v51, v168, (uint64_t)v167, v164, (uint64_t)a2, (uint64_t (*)(void))sub_1B66668BC);
    }
    else
    {
      uint64_t v90 = a1[6];
      uint64_t v91 = a1[7];
      uint64_t v92 = v91 - v90;
      if (v91 != v90)
      {
        uint64_t v128 = v167 + 4;
        uint64_t v129 = v12 + 152 * v90;
        do
        {
          long long v130 = *(_OWORD *)(v129 + 16);
          long long v212 = *(_OWORD *)v129;
          long long v213 = v130;
          long long v131 = *(_OWORD *)(v129 + 32);
          long long v132 = *(_OWORD *)(v129 + 48);
          long long v133 = *(_OWORD *)(v129 + 80);
          long long v216 = *(_OWORD *)(v129 + 64);
          long long v217 = v133;
          long long v214 = v131;
          long long v215 = v132;
          long long v134 = *(_OWORD *)(v129 + 96);
          long long v135 = *(_OWORD *)(v129 + 112);
          long long v136 = *(_OWORD *)(v129 + 128);
          char v221 = *(unsigned char *)(v129 + 144);
          long long v219 = v135;
          long long v220 = v136;
          long long v218 = v134;
          uint64_t v137 = *((void *)&v212 + 1);
          if (*((void *)&v212 + 1))
          {
            v128[2] = v212;
            uint64_t v138 = *(void *)(v137 + 80);
            uint64_t v139 = *(void *)(v137 + 88);
            uint64_t v209 = v92;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *uint64_t v128 = v138;
            v128[1] = v139;
            uint64_t v140 = *((void *)&v213 + 1);
            long long v141 = v214;
            char v142 = v215;
            sub_1B636BFA4((uint64_t)&v212);
            unint64_t v189 = sub_1B6B4A5D4(v140, v141, *((uint64_t *)&v141 + 1), v142);
            uint64_t v184 = v143;
            v224 = v144;
            char v204 = v145;
            uint64_t v146 = sub_1B6B4A5D4(*((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217);
            uint64_t v179 = v147;
            uint64_t v181 = (uint64_t)v146;
            uint64_t v149 = v148;
            char v200 = v150;
            uint64_t v151 = sub_1B6B4A5D4(*((uint64_t *)&v217 + 1), v218, *((uint64_t *)&v218 + 1), v219);
            uint64_t v153 = v152;
            uint64_t v155 = v154;
            LOBYTE(v140) = v156;
            uint64_t v157 = sub_1B6B4A5D4(*((uint64_t *)&v219 + 1), v220, *((uint64_t *)&v220 + 1), v221);
            uint64_t v201 = sub_1B6B4A694((uint64_t)v189, v184, (uint64_t)v224, v204, v181, v179, v149, v200, (uint64_t)v151, v153, v155, v140, (uint64_t)v157, v158, v159, v160);
            uint64_t v205 = v161;
            uint64_t v48 = (uint64_t)a2;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v140) = v213;
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v162 = sub_1B6B4A9B8((uint64_t)v201, v205, v140);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v212);
            swift_release();
            swift_release();
            uint64_t v92 = v209;
            *(v128 - 4) = v162;
          }
          v128 += 8;
          v129 += 152;
          --v92;
        }
        while (v92);
      }
      unint64_t v87 = (unint64_t)v167;
      sub_1B6D818CC(*(void *)(v169 + 232), *(void *)(v169 + 240), (uint64_t)v167, v164, v48, (uint64_t (*)(void))sub_1B66668BC);
    }
    ecs_stack_allocator_deallocate(v166, v87, v165 << 6);
  }
  return swift_release();
}

uint64_t sub_1B6D946FC(uint64_t a1, uint64_t a2)
{
  return sub_1B6D9515C(a1, a2, (void (*)(void *, void *))sub_1B6D93C2C);
}

uint64_t sub_1B6D94728(uint64_t a1, uint64_t a2)
{
  sub_1B638C280(0, &qword_1EB97F808, (void (*)(uint64_t))type metadata accessor for KeyframeTimelineRuntime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6D947A8(void *a1, void *a2)
{
  sub_1B6666970();
  uint64_t v4 = v3;
  uint64_t v5 = a1[1];
  sub_1B63B667C();
  uint64_t v7 = v6;
  uint64_t v9 = (uint64_t *)a1[11];
  uint64_t v8 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v12 = sub_1B62C9024(v7, (uint64_t)&off_1F0F719D8, v9, v8, v10, v11);
  sub_1B6345398(*(void *)(v5 + 40), v4, &v186);
  uint64_t v157 = v5;
  if (v186 == 1)
  {
    a2[9] = v4;
    a2[10] = &off_1F0F920F8;
    uint64_t v13 = sub_1B62C9024(v4, (uint64_t)&off_1F0F920F8, v9, v8, v10, v11);
    if (v9)
    {
      if (v10)
      {
        uint64_t v14 = v10 - 1;
        for (uint64_t i = (void *)(v13 + 32); ; i += 8)
        {
          long long v16 = *(_OWORD *)(v12 + 16);
          long long v186 = *(_OWORD *)v12;
          long long v187 = v16;
          long long v17 = *(_OWORD *)(v12 + 32);
          long long v18 = *(_OWORD *)(v12 + 48);
          long long v19 = *(_OWORD *)(v12 + 80);
          long long v190 = *(_OWORD *)(v12 + 64);
          long long v191 = v19;
          long long v188 = v17;
          long long v189 = v18;
          long long v20 = *(_OWORD *)(v12 + 96);
          long long v21 = *(_OWORD *)(v12 + 112);
          long long v22 = *(_OWORD *)(v12 + 128);
          char v195 = *(unsigned char *)(v12 + 144);
          long long v193 = v21;
          long long v194 = v22;
          long long v192 = v20;
          uint64_t v23 = *((void *)&v186 + 1);
          if (*((void *)&v186 + 1))
          {
            i[2] = v186;
            uint64_t v24 = *(void *)(v23 + 80);
            uint64_t v25 = *(void *)(v23 + 88);
            uint64_t v182 = v14;
            char v198 = i;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *char v198 = v24;
            v198[1] = v25;
            uint64_t v26 = *((void *)&v187 + 1);
            long long v27 = v188;
            char v28 = v189;
            sub_1B636BFA4((uint64_t)&v186);
            uint64_t v159 = sub_1B6B4A5D4(v26, v27, *((uint64_t *)&v27 + 1), v28);
            uint64_t v163 = v29;
            uint64_t v31 = v30;
            char v174 = v32;
            uint64_t v33 = sub_1B6B4A5D4(*((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191);
            uint64_t v35 = v34;
            uint64_t v37 = v36;
            char v167 = v38;
            uint64_t v39 = sub_1B6B4A5D4(*((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193);
            uint64_t v168 = sub_1B6B4AA88((uint64_t)v159, v163, v31, v174, (uint64_t)v33, v35, v37, v167, (uint64_t)v39, v40, v41, v42);
            uint64_t v175 = v43;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v44 = sub_1B6B4AD24((uint64_t)v168, v175);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v186);
            swift_release();
            swift_release();
            uint64_t i = v198;
            uint64_t v14 = v182;
            *(v198 - 4) = v44;
          }
          if (!v14) {
            break;
          }
          --v14;
          v12 += 152;
        }
      }
    }
    else
    {
      uint64_t v81 = a1[6];
      uint64_t v82 = a1[7];
      if (v81 != v82)
      {
        uint64_t v87 = v12 + 152 * v81;
        uint64_t v88 = v13 + (v81 << 6) + 32;
        for (uint64_t j = ~v81 + v82; ; --j)
        {
          long long v90 = *(_OWORD *)(v87 + 16);
          long long v186 = *(_OWORD *)v87;
          long long v187 = v90;
          long long v91 = *(_OWORD *)(v87 + 32);
          long long v92 = *(_OWORD *)(v87 + 48);
          long long v93 = *(_OWORD *)(v87 + 80);
          long long v190 = *(_OWORD *)(v87 + 64);
          long long v191 = v93;
          long long v188 = v91;
          long long v189 = v92;
          long long v94 = *(_OWORD *)(v87 + 96);
          long long v95 = *(_OWORD *)(v87 + 112);
          long long v96 = *(_OWORD *)(v87 + 128);
          char v195 = *(unsigned char *)(v87 + 144);
          long long v193 = v95;
          long long v194 = v96;
          long long v192 = v94;
          uint64_t v97 = *((void *)&v186 + 1);
          if (*((void *)&v186 + 1))
          {
            *(void *)(v88 + 16) = v186;
            uint64_t v98 = *(void *)(v97 + 80);
            uint64_t v99 = *(void *)(v97 + 88);
            uint64_t v185 = j;
            char v198 = (void *)v88;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *char v198 = v98;
            v198[1] = v99;
            uint64_t v100 = *((void *)&v187 + 1);
            long long v101 = v188;
            char v102 = v189;
            sub_1B636BFA4((uint64_t)&v186);
            uint64_t v161 = sub_1B6B4A5D4(v100, v101, *((uint64_t *)&v101 + 1), v102);
            uint64_t v165 = v103;
            uint64_t v105 = v104;
            char v178 = v106;
            uint64_t v107 = sub_1B6B4A5D4(*((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191);
            uint64_t v109 = v108;
            uint64_t v111 = v110;
            char v170 = v112;
            uint64_t v113 = sub_1B6B4A5D4(*((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193);
            uint64_t v171 = sub_1B6B4AA88((uint64_t)v161, v165, v105, v178, (uint64_t)v107, v109, v111, v170, (uint64_t)v113, v114, v115, v116);
            uint64_t v179 = v117;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v118 = sub_1B6B4AD24((uint64_t)v171, v179);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v186);
            swift_release();
            swift_release();
            uint64_t v88 = (uint64_t)v198;
            uint64_t j = v185;
            *(v198 - 4) = v118;
          }
          if (!j) {
            break;
          }
          v87 += 152;
          v88 += 64;
        }
      }
    }
  }
  else
  {
    uint64_t v158 = v8;
    uint64_t v45 = v10;
    if (!v9) {
      uint64_t v45 = a1[7] - a1[6];
    }
    memset(v196, 0, sizeof(v196));
    uint64_t v197 = 0xFFFFFFFFLL;
    uint64_t v154 = (void *)a2[4];
    uint64_t v155 = sub_1B6D87428(v45, (uint64_t)v196, (uint64_t)v154);
    uint64_t v152 = v47;
    uint64_t v153 = v46;
    if (v9)
    {
      char v150 = v9;
      uint64_t v151 = v10;
      uint64_t v48 = v8;
      if (v10)
      {
        uint64_t v49 = v155 + 4;
        uint64_t v50 = v151;
        do
        {
          long long v51 = *(_OWORD *)(v12 + 16);
          long long v186 = *(_OWORD *)v12;
          long long v187 = v51;
          long long v52 = *(_OWORD *)(v12 + 32);
          long long v53 = *(_OWORD *)(v12 + 48);
          long long v54 = *(_OWORD *)(v12 + 80);
          long long v190 = *(_OWORD *)(v12 + 64);
          long long v191 = v54;
          long long v188 = v52;
          long long v189 = v53;
          long long v55 = *(_OWORD *)(v12 + 96);
          long long v56 = *(_OWORD *)(v12 + 112);
          long long v57 = *(_OWORD *)(v12 + 128);
          char v195 = *(unsigned char *)(v12 + 144);
          long long v193 = v56;
          long long v194 = v57;
          long long v192 = v55;
          long long v58 = (void *)*((void *)&v186 + 1);
          if (*((void *)&v186 + 1))
          {
            v49[2] = v186;
            uint64_t v59 = v58[10];
            uint64_t v60 = v58[11];
            char v198 = v58;
            uint64_t v169 = v50;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *uint64_t v49 = v59;
            v49[1] = v60;
            uint64_t v61 = *((void *)&v187 + 1);
            long long v62 = v188;
            char v63 = v189;
            sub_1B636BFA4((uint64_t)&v186);
            char v160 = sub_1B6B4A5D4(v61, v62, *((uint64_t *)&v62 + 1), v63);
            uint64_t v164 = v64;
            uint64_t v66 = v65;
            char v183 = v67;
            uint64_t v68 = sub_1B6B4A5D4(*((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191);
            uint64_t v70 = v69;
            uint64_t v72 = v71;
            char v176 = v73;
            uint64_t v74 = sub_1B6B4A5D4(*((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193);
            uint64_t v177 = sub_1B6B4AA88((uint64_t)v160, v164, v66, v183, (uint64_t)v68, v70, v72, v176, (uint64_t)v74, v75, v76, v77);
            uint64_t v184 = v78;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v79 = sub_1B6B4AD24((uint64_t)v177, v184);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v186);
            swift_release();
            swift_release();
            uint64_t v50 = v169;
            uint64_t v48 = v158;
            *(v49 - 4) = v79;
          }
          v49 += 8;
          v12 += 152;
          --v50;
        }
        while (v50);
      }
      unint64_t v80 = (unint64_t)v155;
      sub_1B6D81778(v150, v48, v151, (uint64_t)v155, v152, (uint64_t)a2, (uint64_t (*)(void))sub_1B6666970);
    }
    else
    {
      uint64_t v83 = a1[6];
      uint64_t v84 = a1[7];
      uint64_t v85 = (void *)(v84 - v83);
      if (v84 != v83)
      {
        uint64_t v119 = v155 + 4;
        uint64_t v120 = v12 + 152 * v83;
        do
        {
          long long v121 = *(_OWORD *)(v120 + 16);
          long long v186 = *(_OWORD *)v120;
          long long v187 = v121;
          long long v122 = *(_OWORD *)(v120 + 32);
          long long v123 = *(_OWORD *)(v120 + 48);
          long long v124 = *(_OWORD *)(v120 + 80);
          long long v190 = *(_OWORD *)(v120 + 64);
          long long v191 = v124;
          long long v188 = v122;
          long long v189 = v123;
          long long v125 = *(_OWORD *)(v120 + 96);
          long long v126 = *(_OWORD *)(v120 + 112);
          long long v127 = *(_OWORD *)(v120 + 128);
          char v195 = *(unsigned char *)(v120 + 144);
          long long v193 = v126;
          long long v194 = v127;
          long long v192 = v125;
          uint64_t v128 = *((void *)&v186 + 1);
          if (*((void *)&v186 + 1))
          {
            v119[2] = v186;
            uint64_t v129 = *(void *)(v128 + 80);
            uint64_t v130 = *(void *)(v128 + 88);
            char v198 = v85;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *uint64_t v119 = v129;
            v119[1] = v130;
            uint64_t v131 = *((void *)&v187 + 1);
            long long v132 = v188;
            char v133 = v189;
            sub_1B636BFA4((uint64_t)&v186);
            uint64_t v162 = sub_1B6B4A5D4(v131, v132, *((uint64_t *)&v132 + 1), v133);
            uint64_t v166 = v134;
            uint64_t v136 = v135;
            char v180 = v137;
            uint64_t v138 = sub_1B6B4A5D4(*((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191);
            uint64_t v140 = v139;
            uint64_t v142 = v141;
            char v172 = v143;
            uint64_t v144 = sub_1B6B4A5D4(*((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193);
            uint64_t v173 = sub_1B6B4AA88((uint64_t)v162, v166, v136, v180, (uint64_t)v138, v140, v142, v172, (uint64_t)v144, v145, v146, v147);
            uint64_t v181 = v148;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v149 = sub_1B6B4AD24((uint64_t)v173, v181);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v186);
            swift_release();
            swift_release();
            uint64_t v85 = v198;
            *(v119 - 4) = v149;
          }
          v119 += 8;
          v120 += 152;
          uint64_t v85 = (void *)((char *)v85 - 1);
        }
        while (v85);
      }
      unint64_t v80 = (unint64_t)v155;
      sub_1B6D818CC(*(void *)(v157 + 232), *(void *)(v157 + 240), (uint64_t)v155, v152, (uint64_t)a2, (uint64_t (*)(void))sub_1B6666970);
    }
    ecs_stack_allocator_deallocate(v154, v80, v153 << 6);
  }
  return swift_release();
}

uint64_t sub_1B6D95130(uint64_t a1, uint64_t a2)
{
  return sub_1B6D9515C(a1, a2, (void (*)(void *, void *))sub_1B6D947A8);
}

uint64_t sub_1B6D9515C(uint64_t result, uint64_t a2, void (*a3)(void *, void *))
{
  uint64_t v4 = v3;
  long long v30 = *(_OWORD *)result;
  long long v31 = *(_OWORD *)(result + 16);
  uint64_t v32 = *(void *)(result + 32);
  uint64_t v24 = *(void *)(result + 80);
  if (v24 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    uint64_t v9 = *(void **)(result + 72);
    uint64_t v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      int v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v23 = v8;
      uint64_t v21 = v5;
      sub_1B62F1F58(v5);
      uint64_t v12 = (uint64_t *)(v6 + 24);
      int v22 = v11;
      while (1)
      {
        uint64_t v26 = v7;
        uint64_t v13 = *((unsigned int *)v12 - 6);
        uint64_t v14 = *((unsigned int *)v12 - 5);
        uint64_t v15 = *((unsigned int *)v12 - 4);
        uint64_t v28 = *v12;
        uint64_t v29 = *(v12 - 1);
        uint64_t v16 = v12[2];
        uint64_t v27 = v12[1];
        uint64_t v43 = v4;
        if (v11)
        {
          long long v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62CA6FC((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v9[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        _OWORD v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v14 - v13 + v15);
        v38[5] = v24;
        v38[6] = v13;
        v38[7] = v14;
        v38[8] = 0;
        v38[9] = 0;
        char v39 = 1;
        uint64_t v40 = v29;
        uint64_t v41 = v28;
        uint64_t v42 = v27;
        swift_retain();
        uint64_t v20 = v43;
        a3(v38, v9);
        uint64_t v4 = v20;
        if (v20) {
          break;
        }
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        uint64_t v36 = v32;
        sub_1B6345178(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        int v11 = v22;
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        uint64_t v7 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B62F073C(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      uint64_t v34 = v32;
      sub_1B6345178(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if (v22)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D95490(void *a1, void *a2)
{
  sub_1B6666A24();
  uint64_t v4 = v3;
  uint64_t v5 = a1[1];
  sub_1B63B6730();
  uint64_t v7 = v6;
  uint64_t v9 = (uint64_t *)a1[11];
  uint64_t v8 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v12 = sub_1B62C9024(v7, (uint64_t)&off_1F0F719D8, v9, v8, v10, v11);
  sub_1B6345398(*(void *)(v5 + 40), v4, &v142);
  uint64_t v136 = v5;
  if (v142 == 1)
  {
    a2[9] = v4;
    a2[10] = &off_1F0F920F8;
    uint64_t v13 = sub_1B62C9024(v4, (uint64_t)&off_1F0F920F8, v9, v8, v10, v11);
    if (v9)
    {
      if (v10)
      {
        uint64_t v14 = v10 - 1;
        for (uint64_t i = (void *)(v13 + 24); ; i += 6)
        {
          long long v16 = *(_OWORD *)(v12 + 16);
          long long v142 = *(_OWORD *)v12;
          long long v143 = v16;
          long long v17 = *(_OWORD *)(v12 + 32);
          long long v18 = *(_OWORD *)(v12 + 48);
          long long v19 = *(_OWORD *)(v12 + 80);
          long long v146 = *(_OWORD *)(v12 + 64);
          long long v147 = v19;
          long long v144 = v17;
          long long v145 = v18;
          long long v20 = *(_OWORD *)(v12 + 96);
          long long v21 = *(_OWORD *)(v12 + 112);
          long long v22 = *(_OWORD *)(v12 + 128);
          char v151 = *(unsigned char *)(v12 + 144);
          long long v149 = v21;
          long long v150 = v22;
          long long v148 = v20;
          uint64_t v23 = *((void *)&v142 + 1);
          if (*((void *)&v142 + 1))
          {
            i[2] = v142;
            uint64_t v24 = *(void *)(v23 + 80);
            uint64_t v25 = *(void *)(v23 + 88);
            uint64_t v155 = v14;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *uint64_t i = v24;
            i[1] = v25;
            uint64_t v26 = *((void *)&v143 + 1);
            long long v27 = v144;
            char v28 = v145;
            sub_1B636BFA4((uint64_t)&v142);
            uint64_t v29 = sub_1B6B4A5D4(v26, v27, *((uint64_t *)&v27 + 1), v28);
            uint64_t v31 = v30;
            uint64_t v32 = sub_1B6B4A5D4(*((uint64_t *)&v145 + 1), v146, *((uint64_t *)&v146 + 1), v147);
            uint64_t v37 = sub_1B6B4ADCC((uint64_t)v29, v31, (uint64_t)v32, v33, v34, v35, v36);
            uint64_t v138 = v38;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v39 = sub_1B6B4B004((uint64_t)v37, v138);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v142);
            swift_release();
            swift_release();
            uint64_t v14 = v155;
            *(i - 3) = v39;
          }
          if (!v14) {
            break;
          }
          --v14;
          v12 += 152;
        }
      }
    }
    else
    {
      uint64_t v70 = a1[6];
      uint64_t v71 = a1[7];
      if (v70 != v71)
      {
        uint64_t v76 = v12 + 152 * v70;
        char v77 = (void *)(v13 + 48 * v70 + 24);
        for (uint64_t j = ~v70 + v71; ; --j)
        {
          long long v79 = *(_OWORD *)(v76 + 16);
          long long v142 = *(_OWORD *)v76;
          long long v143 = v79;
          long long v80 = *(_OWORD *)(v76 + 32);
          long long v81 = *(_OWORD *)(v76 + 48);
          long long v82 = *(_OWORD *)(v76 + 80);
          long long v146 = *(_OWORD *)(v76 + 64);
          long long v147 = v82;
          long long v144 = v80;
          long long v145 = v81;
          long long v83 = *(_OWORD *)(v76 + 96);
          long long v84 = *(_OWORD *)(v76 + 112);
          long long v85 = *(_OWORD *)(v76 + 128);
          char v151 = *(unsigned char *)(v76 + 144);
          long long v149 = v84;
          long long v150 = v85;
          long long v148 = v83;
          uint64_t v86 = *((void *)&v142 + 1);
          if (*((void *)&v142 + 1))
          {
            v77[2] = v142;
            uint64_t v87 = *(void *)(v86 + 80);
            uint64_t v88 = *(void *)(v86 + 88);
            uint64_t v155 = j;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *char v77 = v87;
            v77[1] = v88;
            uint64_t v89 = *((void *)&v143 + 1);
            long long v90 = v144;
            char v91 = v145;
            sub_1B636BFA4((uint64_t)&v142);
            long long v92 = sub_1B6B4A5D4(v89, v90, *((uint64_t *)&v90 + 1), v91);
            uint64_t v94 = v93;
            long long v95 = sub_1B6B4A5D4(*((uint64_t *)&v145 + 1), v146, *((uint64_t *)&v146 + 1), v147);
            uint64_t v100 = sub_1B6B4ADCC((uint64_t)v92, v94, (uint64_t)v95, v96, v97, v98, v99);
            uint64_t v140 = v101;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v102 = sub_1B6B4B004((uint64_t)v100, v140);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v142);
            swift_release();
            swift_release();
            uint64_t j = v155;
            *(v77 - 3) = v102;
          }
          if (!j) {
            break;
          }
          v76 += 152;
          v77 += 6;
        }
      }
    }
  }
  else
  {
    uint64_t v137 = v8;
    uint64_t v134 = v10;
    if (!v9) {
      uint64_t v10 = a1[7] - a1[6];
    }
    uint64_t v153 = 0;
    memset(v152, 0, sizeof(v152));
    uint64_t v154 = 0xFFFFFFFFLL;
    long long v132 = (void *)a2[4];
    char v133 = sub_1B6D87580(v10, v152, (uint64_t)v132);
    uint64_t v130 = v41;
    uint64_t v131 = v40;
    if (v9)
    {
      uint64_t v129 = v9;
      uint64_t v42 = v8;
      if (v134)
      {
        uint64_t v43 = v134;
        uint64_t v44 = (void *)v133 + 3;
        do
        {
          long long v45 = *(_OWORD *)(v12 + 16);
          long long v142 = *(_OWORD *)v12;
          long long v143 = v45;
          long long v46 = *(_OWORD *)(v12 + 32);
          long long v47 = *(_OWORD *)(v12 + 48);
          long long v48 = *(_OWORD *)(v12 + 80);
          long long v146 = *(_OWORD *)(v12 + 64);
          long long v147 = v48;
          long long v144 = v46;
          long long v145 = v47;
          long long v49 = *(_OWORD *)(v12 + 96);
          long long v50 = *(_OWORD *)(v12 + 112);
          long long v51 = *(_OWORD *)(v12 + 128);
          char v151 = *(unsigned char *)(v12 + 144);
          long long v149 = v50;
          long long v150 = v51;
          long long v148 = v49;
          uint64_t v52 = *((void *)&v142 + 1);
          if (*((void *)&v142 + 1))
          {
            v44[2] = v142;
            uint64_t v53 = *(void *)(v52 + 80);
            uint64_t v54 = *(void *)(v52 + 88);
            uint64_t v155 = v52;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *uint64_t v44 = v53;
            v44[1] = v54;
            uint64_t v55 = *((void *)&v143 + 1);
            long long v56 = v144;
            char v57 = v145;
            sub_1B636BFA4((uint64_t)&v142);
            long long v58 = sub_1B6B4A5D4(v55, v56, *((uint64_t *)&v56 + 1), v57);
            uint64_t v60 = v59;
            uint64_t v61 = sub_1B6B4A5D4(*((uint64_t *)&v145 + 1), v146, *((uint64_t *)&v146 + 1), v147);
            uint64_t v66 = sub_1B6B4ADCC((uint64_t)v58, v60, (uint64_t)v61, v62, v63, v64, v65);
            uint64_t v139 = v67;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v68 = sub_1B6B4B004((uint64_t)v66, v139);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v142);
            swift_release();
            swift_release();
            uint64_t v42 = v137;
            *(v44 - 3) = v68;
          }
          v44 += 6;
          v12 += 152;
          --v43;
        }
        while (v43);
      }
      unint64_t v69 = (unint64_t)v133;
      sub_1B6D81A1C(v129, v42, v134, (uint64_t)v133, v130);
    }
    else
    {
      uint64_t v72 = a1[6];
      uint64_t v73 = a1[7];
      uint64_t v74 = v73 - v72;
      if (v73 != v72)
      {
        uint64_t v103 = (void *)v133 + 3;
        uint64_t v104 = v12 + 152 * v72;
        do
        {
          long long v105 = *(_OWORD *)(v104 + 16);
          long long v142 = *(_OWORD *)v104;
          long long v143 = v105;
          long long v106 = *(_OWORD *)(v104 + 32);
          long long v107 = *(_OWORD *)(v104 + 48);
          long long v108 = *(_OWORD *)(v104 + 80);
          long long v146 = *(_OWORD *)(v104 + 64);
          long long v147 = v108;
          long long v144 = v106;
          long long v145 = v107;
          long long v109 = *(_OWORD *)(v104 + 96);
          long long v110 = *(_OWORD *)(v104 + 112);
          long long v111 = *(_OWORD *)(v104 + 128);
          char v151 = *(unsigned char *)(v104 + 144);
          long long v149 = v110;
          long long v150 = v111;
          long long v148 = v109;
          uint64_t v112 = *((void *)&v142 + 1);
          if (*((void *)&v142 + 1))
          {
            v103[2] = v142;
            uint64_t v113 = *(void *)(v112 + 80);
            uint64_t v114 = *(void *)(v112 + 88);
            uint64_t v155 = v74;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *uint64_t v103 = v113;
            v103[1] = v114;
            uint64_t v115 = *((void *)&v143 + 1);
            long long v116 = v144;
            char v117 = v145;
            sub_1B636BFA4((uint64_t)&v142);
            uint64_t v118 = sub_1B6B4A5D4(v115, v116, *((uint64_t *)&v116 + 1), v117);
            uint64_t v120 = v119;
            long long v121 = sub_1B6B4A5D4(*((uint64_t *)&v145 + 1), v146, *((uint64_t *)&v146 + 1), v147);
            long long v126 = sub_1B6B4ADCC((uint64_t)v118, v120, (uint64_t)v121, v122, v123, v124, v125);
            uint64_t v141 = v127;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            uint64_t v128 = sub_1B6B4B004((uint64_t)v126, v141);
            swift_bridgeObjectRelease();
            sub_1B636BEC8((uint64_t)&v142);
            swift_release();
            swift_release();
            uint64_t v74 = v155;
            *(v103 - 3) = v128;
          }
          v103 += 6;
          v104 += 152;
          --v74;
        }
        while (v74);
      }
      unint64_t v69 = (unint64_t)v133;
      sub_1B6D81B70(*(void *)(v136 + 232), *(void *)(v136 + 240));
    }
    ecs_stack_allocator_deallocate(v132, v69, 48 * v131);
  }
  return swift_release();
}

uint64_t sub_1B6D95C74(uint64_t a1, uint64_t a2)
{
  return sub_1B6D9515C(a1, a2, (void (*)(void *, void *))sub_1B6D95490);
}

uint64_t sub_1B6D95CA0(void *a1, void *a2)
{
  sub_1B6D96724(0, &qword_1EB97F920, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for KeyframeAnimationRuntime);
  uint64_t v5 = v4;
  uint64_t v6 = a1[1];
  sub_1B6D96724(0, &qword_1EB97EEF8, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for KeyframeAnimation);
  uint64_t v8 = v7;
  uint64_t v10 = (uint64_t *)a1[11];
  uint64_t v9 = a1[12];
  uint64_t v11 = a1[13];
  uint64_t v12 = a1[2];
  swift_retain();
  uint64_t v143 = sub_1B62C9024(v8, (uint64_t)&off_1F0F719D8, v10, v9, v11, v12);
  sub_1B6345398(*(void *)(v6 + 40), v5, &v128);
  uint64_t v123 = v6;
  uint64_t v124 = v11;
  if (v128 != 1)
  {
    uint64_t v122 = v9;
    uint64_t v37 = v11;
    if (!v10) {
      uint64_t v37 = a1[7] - a1[6];
    }
    long long v138 = 0uLL;
    int v139 = 0;
    uint64_t v140 = 0;
    uint64_t v141 = 0;
    uint64_t v142 = 0xFFFFFFFFLL;
    uint64_t v38 = a2[4];
    uint64_t v127 = sub_1B6D87580(v37, &v138, v38);
    uint64_t v119 = (void *)v38;
    uint64_t v117 = v40;
    uint64_t v118 = v39;
    if (v10)
    {
      uint64_t v120 = v10;
      uint64_t v41 = v9;
      if (v11)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          uint64_t v46 = v143 + 152 * i;
          long long v47 = *(_OWORD *)(v46 + 16);
          long long v128 = *(_OWORD *)v46;
          long long v129 = v47;
          long long v48 = *(_OWORD *)(v46 + 32);
          long long v49 = *(_OWORD *)(v46 + 48);
          long long v50 = *(_OWORD *)(v46 + 80);
          long long v132 = *(_OWORD *)(v46 + 64);
          long long v133 = v50;
          long long v130 = v48;
          long long v131 = v49;
          long long v51 = *(_OWORD *)(v46 + 96);
          long long v52 = *(_OWORD *)(v46 + 112);
          long long v53 = *(_OWORD *)(v46 + 128);
          char v137 = *(unsigned char *)(v46 + 144);
          long long v135 = v52;
          long long v136 = v53;
          long long v134 = v51;
          uint64_t v54 = *((void *)&v128 + 1);
          if (!*((void *)&v128 + 1)) {
            continue;
          }
          uint64_t v55 = &v127[3 * i];
          v55[5] = v128;
          uint64_t v56 = *(void *)(v54 + 80);
          uint64_t v57 = *(void *)(v54 + 88);
          swift_retain();
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          _OWORD v55[3] = v56;
          v55[4] = v57;
          long long v58 = (char *)*((void *)&v129 + 1);
          uint64_t v59 = *((void *)&v130 + 1);
          uint64_t v60 = v130;
          if (*((void *)&v130 + 1))
          {
            uint64_t v61 = *(void *)(*((void *)&v130 + 1) + 16);
            if (v61)
            {
              char v62 = v131;
              if (*(unsigned char *)(*((void *)&v130 + 1) + 49) != 1)
              {
LABEL_34:
                sub_1B636BFA4((uint64_t)&v128);
                long long v58 = sub_1B6B49C0C((uint64_t)v58, v60, v59, v62, 0.033333);
                uint64_t v60 = v65;
                goto LABEL_25;
              }
              uint64_t v63 = (unsigned __int8 *)(*((void *)&v130 + 1) + 73);
              while (--v61)
              {
                int v64 = *v63;
                v63 += 24;
                if (v64 != 1) {
                  goto LABEL_34;
                }
              }
            }
            sub_1B636BFA4((uint64_t)&v128);
            swift_bridgeObjectRetain();
          }
          else
          {
            sub_1B636BFA4((uint64_t)&v128);
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_25:
          type metadata accessor for KeyframeTimelineRuntime();
          uint64_t v43 = swift_allocObject();
          *(unsigned char *)(v43 + 80) = 1;
          *(void *)(v43 + 32) = 4;
          *(void *)(v43 + 48) = sub_1B6B49948;
          *(void *)(v43 + 56) = 0;
          *(void *)(v43 + 64) = sub_1B636BDE4;
          *(void *)(v43 + 72) = 0;
          size_t v44 = 4 * *((void *)v58 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          long long v45 = (char *)swift_slowAlloc();
          memmove(v45, v58 + 32, v44);
          *(void *)(v43 + 16) = v45;
          *(void *)(v43 + 24) = &v45[v44];
          *(void *)(v43 + 40) = v60;
          swift_bridgeObjectRelease();
          sub_1B636BEC8((uint64_t)&v128);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          *(void *)&v127[3 * i] = v43;
          uint64_t v11 = v124;
          uint64_t v41 = v122;
        }
      }
      unint64_t v66 = (unint64_t)v127;
      sub_1B6D81CC0(v120, v41, v11, (uint64_t)v127, v117);
LABEL_55:
      ecs_stack_allocator_deallocate(v119, v66, 48 * v118);
      return swift_release();
    }
    uint64_t v91 = a1[6];
    uint64_t v121 = a1[7];
    unint64_t v66 = (unint64_t)v127;
    if (v91 == v121)
    {
LABEL_54:
      sub_1B6D81E30(*(void *)(v123 + 232), *(void *)(v123 + 240));
      goto LABEL_55;
    }
    uint64_t v93 = 0;
    while (1)
    {
      uint64_t v98 = v143 + 152 * v91;
      long long v99 = *(_OWORD *)(v98 + 16);
      long long v128 = *(_OWORD *)v98;
      long long v129 = v99;
      long long v100 = *(_OWORD *)(v98 + 32);
      long long v101 = *(_OWORD *)(v98 + 48);
      long long v102 = *(_OWORD *)(v98 + 80);
      long long v132 = *(_OWORD *)(v98 + 64);
      long long v133 = v102;
      long long v130 = v100;
      long long v131 = v101;
      long long v103 = *(_OWORD *)(v98 + 96);
      long long v104 = *(_OWORD *)(v98 + 112);
      long long v105 = *(_OWORD *)(v98 + 128);
      char v137 = *(unsigned char *)(v98 + 144);
      long long v135 = v104;
      long long v136 = v105;
      long long v134 = v103;
      uint64_t v106 = *((void *)&v128 + 1);
      if (!*((void *)&v128 + 1)) {
        goto LABEL_61;
      }
      long long v107 = (void *)(v66 + 48 * v93);
      v107[5] = v128;
      uint64_t v108 = *(void *)(v106 + 80);
      uint64_t v109 = *(void *)(v106 + 88);
      swift_retain();
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      void v107[3] = v108;
      v107[4] = v109;
      long long v110 = (char *)*((void *)&v129 + 1);
      long long v111 = v130;
      if (*((void *)&v130 + 1))
      {
        uint64_t v112 = *(void *)(*((void *)&v130 + 1) + 16);
        if (v112)
        {
          char v113 = v131;
          if (*(unsigned char *)(*((void *)&v130 + 1) + 49) != 1)
          {
LABEL_69:
            sub_1B636BFA4((uint64_t)&v128);
            long long v110 = sub_1B6B49C0C((uint64_t)v110, v111, *((uint64_t *)&v111 + 1), v113, 0.033333);
            uint64_t v94 = v116;
            goto LABEL_60;
          }
          uint64_t v114 = (unsigned __int8 *)(*((void *)&v130 + 1) + 73);
          while (--v112)
          {
            int v115 = *v114;
            v114 += 24;
            if (v115 != 1) {
              goto LABEL_69;
            }
          }
        }
        sub_1B636BFA4((uint64_t)&v128);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1B636BFA4((uint64_t)&v128);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v94 = v111;
LABEL_60:
      unint64_t v66 = (unint64_t)v127;
      type metadata accessor for KeyframeTimelineRuntime();
      uint64_t v95 = swift_allocObject();
      *(unsigned char *)(v95 + 80) = 1;
      *(void *)(v95 + 32) = 4;
      *(void *)(v95 + 48) = sub_1B6B49948;
      *(void *)(v95 + 56) = 0;
      *(void *)(v95 + 64) = sub_1B636BDE4;
      *(void *)(v95 + 72) = 0;
      size_t v96 = 4 * *((void *)v110 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v97 = (char *)swift_slowAlloc();
      memmove(v97, v110 + 32, v96);
      *(void *)(v95 + 16) = v97;
      *(void *)(v95 + 24) = &v97[v96];
      *(void *)(v95 + 40) = v94;
      swift_bridgeObjectRelease();
      sub_1B636BEC8((uint64_t)&v128);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)&v127[3 * v93] = v95;
LABEL_61:
      ++v91;
      ++v93;
      if (v91 == v121) {
        goto LABEL_54;
      }
    }
  }
  a2[9] = v5;
  a2[10] = &off_1F0F920F8;
  uint64_t v126 = sub_1B62C9024(v5, (uint64_t)&off_1F0F920F8, v10, v9, v11, v12);
  if (!v10)
  {
    uint64_t v67 = a1[6];
    uint64_t v125 = a1[7];
    if (v67 == v125) {
      return swift_release();
    }
    while (1)
    {
      uint64_t v71 = v143 + 152 * v67;
      long long v72 = *(_OWORD *)(v71 + 16);
      long long v128 = *(_OWORD *)v71;
      long long v129 = v72;
      long long v73 = *(_OWORD *)(v71 + 32);
      long long v74 = *(_OWORD *)(v71 + 48);
      long long v75 = *(_OWORD *)(v71 + 80);
      long long v132 = *(_OWORD *)(v71 + 64);
      long long v133 = v75;
      long long v130 = v73;
      long long v131 = v74;
      long long v76 = *(_OWORD *)(v71 + 96);
      long long v77 = *(_OWORD *)(v71 + 112);
      long long v78 = *(_OWORD *)(v71 + 128);
      char v137 = *(unsigned char *)(v71 + 144);
      long long v135 = v77;
      long long v136 = v78;
      long long v134 = v76;
      uint64_t v79 = *((void *)&v128 + 1);
      if (!*((void *)&v128 + 1)) {
        goto LABEL_42;
      }
      long long v80 = (void *)(v126 + 48 * v67);
      v80[5] = v128;
      uint64_t v81 = *(void *)(v79 + 80);
      uint64_t v82 = *(void *)(v79 + 88);
      swift_retain();
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v80[3] = v81;
      v80[4] = v82;
      long long v83 = (char *)*((void *)&v129 + 1);
      uint64_t v85 = *((void *)&v130 + 1);
      uint64_t v84 = v130;
      if (*((void *)&v130 + 1))
      {
        uint64_t v86 = *(void *)(*((void *)&v130 + 1) + 16);
        if (v86)
        {
          char v87 = v131;
          if (*(unsigned char *)(*((void *)&v130 + 1) + 49) != 1)
          {
LABEL_50:
            sub_1B636BFA4((uint64_t)&v128);
            long long v83 = sub_1B6B49C0C((uint64_t)v83, v84, v85, v87, 0.033333);
            uint64_t v84 = v90;
            goto LABEL_41;
          }
          uint64_t v88 = (unsigned __int8 *)(*((void *)&v130 + 1) + 73);
          while (--v86)
          {
            int v89 = *v88;
            v88 += 24;
            if (v89 != 1) {
              goto LABEL_50;
            }
          }
        }
        sub_1B636BFA4((uint64_t)&v128);
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1B636BFA4((uint64_t)&v128);
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_41:
      type metadata accessor for KeyframeTimelineRuntime();
      uint64_t v68 = swift_allocObject();
      *(unsigned char *)(v68 + 80) = 1;
      *(void *)(v68 + 32) = 4;
      *(void *)(v68 + 48) = sub_1B6B49948;
      *(void *)(v68 + 56) = 0;
      *(void *)(v68 + 64) = sub_1B636BDE4;
      *(void *)(v68 + 72) = 0;
      size_t v69 = 4 * *((void *)v83 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v70 = (char *)swift_slowAlloc();
      memmove(v70, v83 + 32, v69);
      *(void *)(v68 + 16) = v70;
      *(void *)(v68 + 24) = &v70[v69];
      *(void *)(v68 + 40) = v84;
      swift_bridgeObjectRelease();
      sub_1B636BEC8((uint64_t)&v128);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v126 + 48 * v67) = v68;
LABEL_42:
      if (++v67 == v125) {
        return swift_release();
      }
    }
  }
  if (v11)
  {
    for (uint64_t j = 0; j != v11; ++j)
    {
      uint64_t v17 = v143 + 152 * j;
      long long v18 = *(_OWORD *)(v17 + 16);
      long long v128 = *(_OWORD *)v17;
      long long v129 = v18;
      long long v19 = *(_OWORD *)(v17 + 32);
      long long v20 = *(_OWORD *)(v17 + 48);
      long long v21 = *(_OWORD *)(v17 + 80);
      long long v132 = *(_OWORD *)(v17 + 64);
      long long v133 = v21;
      long long v130 = v19;
      long long v131 = v20;
      long long v22 = *(_OWORD *)(v17 + 96);
      long long v23 = *(_OWORD *)(v17 + 112);
      long long v24 = *(_OWORD *)(v17 + 128);
      char v137 = *(unsigned char *)(v17 + 144);
      long long v135 = v23;
      long long v136 = v24;
      long long v134 = v22;
      uint64_t v25 = *((void *)&v128 + 1);
      if (!*((void *)&v128 + 1)) {
        continue;
      }
      uint64_t v26 = (void *)(v126 + 48 * j);
      v26[5] = v128;
      uint64_t v27 = *(void *)(v25 + 80);
      uint64_t v28 = *(void *)(v25 + 88);
      swift_retain();
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v26[3] = v27;
      v26[4] = v28;
      uint64_t v29 = (char *)*((void *)&v129 + 1);
      uint64_t v31 = *((void *)&v130 + 1);
      uint64_t v30 = v130;
      if (*((void *)&v130 + 1))
      {
        uint64_t v32 = *(void *)(*((void *)&v130 + 1) + 16);
        if (v32)
        {
          char v33 = v131;
          if (*(unsigned char *)(*((void *)&v130 + 1) + 49) != 1)
          {
LABEL_16:
            sub_1B636BFA4((uint64_t)&v128);
            uint64_t v29 = sub_1B6B49C0C((uint64_t)v29, v30, v31, v33, 0.033333);
            uint64_t v30 = v36;
            goto LABEL_7;
          }
          uint64_t v34 = (unsigned __int8 *)(*((void *)&v130 + 1) + 73);
          while (--v32)
          {
            int v35 = *v34;
            v34 += 24;
            if (v35 != 1) {
              goto LABEL_16;
            }
          }
        }
        sub_1B636BFA4((uint64_t)&v128);
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1B636BFA4((uint64_t)&v128);
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      type metadata accessor for KeyframeTimelineRuntime();
      uint64_t v14 = swift_allocObject();
      *(unsigned char *)(v14 + 80) = 1;
      *(void *)(v14 + 32) = 4;
      *(void *)(v14 + 48) = sub_1B6B49948;
      *(void *)(v14 + 56) = 0;
      *(void *)(v14 + 64) = sub_1B636BDE4;
      *(void *)(v14 + 72) = 0;
      size_t v15 = 4 * *((void *)v29 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v16 = (char *)swift_slowAlloc();
      memmove(v16, v29 + 32, v15);
      *(void *)(v14 + 16) = v16;
      *(void *)(v14 + 24) = &v16[v15];
      *(void *)(v14 + 40) = v30;
      swift_bridgeObjectRelease();
      sub_1B636BEC8((uint64_t)&v128);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v126 + 48 * j) = v14;
      uint64_t v11 = v124;
    }
  }
  return swift_release();
}

uint64_t sub_1B6D966F8(uint64_t a1, uint64_t a2)
{
  return sub_1B6D9515C(a1, a2, (void (*)(void *, void *))sub_1B6D95CA0);
}

void sub_1B6D96724(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, _UNKNOWN **))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB470], &off_1F0FAB230);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1B6D96780(void *a1, void *a2, uint64_t a3)
{
  uint64_t v116 = a3;
  char v113 = a2;
  uint64_t v114 = (void *)sub_1B6E31118();
  uint64_t v112 = *(v114 - 1);
  MEMORY[0x1F4188790](v114, v4);
  uint64_t v6 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v12 = sub_1B62C9024((uint64_t)&type metadata for VideoCapture, (uint64_t)&off_1F0F5D5E0, v8, v7, v9, v11);
  uint64_t v13 = v115;
  sub_1B6345398(*(void *)(v10 + 40), (uint64_t)&type metadata for VideoCaptureRuntime, &v117);
  uint64_t v110 = v10;
  uint64_t v106 = v13;
  if (v117 == 1)
  {
    uint64_t v14 = v113;
    v113[9] = &type metadata for VideoCaptureRuntime;
    v14[10] = &off_1F0F7F880;
    uint64_t v15 = sub_1B62C9024((uint64_t)&type metadata for VideoCaptureRuntime, (uint64_t)&off_1F0F7F880, v8, v7, v9, v11);
    if (v8)
    {
      uint64_t v16 = v116;
      if (v9)
      {
        uint64_t v17 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        long long v18 = (void *)(v15 + 24);
        long long v111 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        uint64_t v112 = OBJC_IVAR____TtC3VFX13EntityManager_updateQueue;
        do
        {
          uint64_t v24 = *(void *)&v17[v16];
          if (v24)
          {
            uint64_t v25 = *(void **)(v24 + 16);
            if (*(unsigned char *)v12)
            {
              int v115 = *(char **)(v16 + v112);
              int v26 = *(unsigned __int8 *)(v12 + 1);
              int v27 = *(unsigned __int8 *)(v12 + 2);
              uint64_t v28 = *(void *)(v12 + 8);
              uint64_t v29 = *(void *)(v12 + 16);
              uint64_t v30 = (void *)*(v18 - 3);
              if (!v30
                || *((unsigned char *)v18 - 16) != 1
                || *((unsigned __int8 *)v18 - 15) != v26
                || ((v27 ^ *((unsigned __int8 *)v18 - 14)) & 1) != 0
                || (*(v18 - 1) != v28 || *v18 != v29) && (sub_1B6E334B8() & 1) == 0)
              {
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *((unsigned char *)v18 - 16) = 1;
                *((unsigned char *)v18 - 15) = v26;
                *((unsigned char *)v18 - 14) = v27;
                *(v18 - 1) = v28;
                *long long v18 = v29;
                id v19 = objc_allocWithZone((Class)type metadata accessor for VideoCaptureSession());
                char v113 = v30;
                if (v27) {
                  int v20 = 0x10000;
                }
                else {
                  int v20 = 0;
                }
                unsigned int v21 = v114 & 0xFF000000 | (v26 << 8) | v20 | 1;
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                long long v22 = v115;
                LODWORD(v114) = v21;
                long long v23 = sub_1B6806694(v25, v22, v21);

                *(v18 - 3) = v23;
                swift_unknownObjectRelease();
              }
              uint64_t v16 = v116;
              uint64_t v17 = v111;
            }
            else
            {
              uint64_t v31 = (char *)*(v18 - 3);
              if (v31)
              {
                uint64_t v32 = *(void **)&v31[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
                swift_unknownObjectRetain();
                objc_msgSend(v32, sel_stopRunning);
                swift_unknownObjectRelease();

                *(v18 - 3) = 0;
              }
            }
          }
          v18 += 4;
          v12 += 24;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      uint64_t v60 = a1[6];
      uint64_t v61 = a1[7];
      uint64_t v62 = v61 - v60;
      uint64_t v63 = v116;
      if (v61 != v60)
      {
        uint64_t v68 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        size_t v69 = (void *)(v15 + 32 * v60 + 24);
        uint64_t v70 = v12 + 24 * v60;
        long long v111 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        uint64_t v112 = OBJC_IVAR____TtC3VFX13EntityManager_updateQueue;
        do
        {
          uint64_t v76 = *(void *)&v68[v63];
          if (v76)
          {
            long long v77 = *(void **)(v76 + 16);
            if (*(unsigned char *)v70)
            {
              int v115 = *(char **)(v63 + v112);
              int v78 = *(unsigned __int8 *)(v70 + 1);
              int v79 = *(unsigned __int8 *)(v70 + 2);
              uint64_t v80 = *(void *)(v70 + 8);
              uint64_t v81 = *(void *)(v70 + 16);
              uint64_t v82 = (void *)*(v69 - 3);
              if (!v82
                || *((unsigned char *)v69 - 16) != 1
                || *((unsigned __int8 *)v69 - 15) != v78
                || ((v79 ^ *((unsigned __int8 *)v69 - 14)) & 1) != 0
                || (*(v69 - 1) != v80 || *v69 != v81) && (sub_1B6E334B8() & 1) == 0)
              {
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *((unsigned char *)v69 - 16) = 1;
                *((unsigned char *)v69 - 15) = v78;
                *((unsigned char *)v69 - 14) = v79;
                *(v69 - 1) = v80;
                *size_t v69 = v81;
                id v71 = objc_allocWithZone((Class)type metadata accessor for VideoCaptureSession());
                char v113 = v82;
                if (v79) {
                  int v72 = 0x10000;
                }
                else {
                  int v72 = 0;
                }
                unsigned int v73 = v114 & 0xFF000000 | (v78 << 8) | v72 | 1;
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                long long v74 = v115;
                LODWORD(v114) = v73;
                long long v75 = sub_1B6806694(v77, v74, v73);

                *(v69 - 3) = v75;
                swift_unknownObjectRelease();
              }
              uint64_t v68 = v111;
              uint64_t v63 = v116;
            }
            else
            {
              long long v83 = (char *)*(v69 - 3);
              if (v83)
              {
                uint64_t v84 = *(void **)&v83[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
                swift_unknownObjectRetain();
                objc_msgSend(v84, sel_stopRunning);
                swift_unknownObjectRelease();

                *(v69 - 3) = 0;
              }
            }
          }
          v69 += 4;
          v70 += 24;
          --v62;
        }
        while (v62);
      }
    }
  }
  else
  {
    uint64_t v33 = v112;
    uint64_t v109 = v7;
    uint64_t v34 = v9;
    if (!v8) {
      uint64_t v34 = a1[7] - a1[6];
    }
    sub_1B6E31108();
    uint64_t v35 = sub_1B6E310B8();
    uint64_t v37 = v36;
    (*(void (**)(char *, void *))(v33 + 8))(v6, v114);
    long long v104 = (void *)v113[4];
    long long v105 = sub_1B6D876C0(v34, 0, 0x10000u, v35, v37, (uint64_t)v104);
    uint64_t v102 = v39;
    uint64_t v103 = v38;
    uint64_t v40 = v116;
    if (v8)
    {
      long long v101 = v8;
      uint64_t v41 = v109;
      if (v9)
      {
        uint64_t v42 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        uint64_t v43 = v105 + 3;
        uint64_t v107 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        uint64_t v108 = OBJC_IVAR____TtC3VFX13EntityManager_updateQueue;
        uint64_t v44 = v9;
        do
        {
          uint64_t v49 = *(void *)(v40 + v42);
          if (v49)
          {
            long long v50 = *(void **)(v49 + 16);
            if (*(unsigned char *)v12)
            {
              long long v51 = *(char **)(v40 + v108);
              int v52 = *(unsigned __int8 *)(v12 + 1);
              int v53 = *(unsigned __int8 *)(v12 + 2);
              uint64_t v55 = *(char **)(v12 + 8);
              uint64_t v54 = *(void *)(v12 + 16);
              uint64_t v114 = (void *)*(v43 - 3);
              int v115 = v51;
              if (!v114
                || *((unsigned char *)v43 - 16) != 1
                || *((unsigned __int8 *)v43 - 15) != v52
                || ((v53 ^ *((unsigned __int8 *)v43 - 14)) & 1) != 0
                || ((char *)*(v43 - 1) != v55 || *v43 != v54)
                && (v111 = v55, v56 = sub_1B6E334B8(), uint64_t v55 = v111, (v56 & 1) == 0))
              {
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *((unsigned char *)v43 - 16) = 1;
                *((unsigned char *)v43 - 15) = v52;
                *((unsigned char *)v43 - 14) = v53;
                *(v43 - 1) = v55;
                *uint64_t v43 = v54;
                long long v111 = (char *)objc_allocWithZone((Class)type metadata accessor for VideoCaptureSession());
                if (v53) {
                  int v45 = 0x10000;
                }
                else {
                  int v45 = 0;
                }
                int v46 = v112 & 0xFF000000 | (v52 << 8) | v45 | 1;
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                long long v47 = v115;
                LODWORD(v112) = v46;
                long long v48 = sub_1B6806694(v50, v47, v46);

                *(v43 - 3) = v48;
                swift_unknownObjectRelease();
              }
              uint64_t v40 = v116;
              uint64_t v41 = v109;
              uint64_t v42 = v107;
            }
            else
            {
              uint64_t v57 = (char *)*(v43 - 3);
              if (v57)
              {
                long long v58 = *(void **)&v57[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
                swift_unknownObjectRetain();
                objc_msgSend(v58, sel_stopRunning, v101, v102, v103);
                swift_unknownObjectRelease();

                *(v43 - 3) = 0;
              }
            }
          }
          v43 += 4;
          v12 += 24;
          --v44;
        }
        while (v44);
      }
      unint64_t v59 = (unint64_t)v105;
      sub_1B6D8284C(v101, v41, v9, (uint64_t)v105, v102);
    }
    else
    {
      uint64_t v64 = a1[6];
      uint64_t v65 = a1[7];
      uint64_t v66 = v65 - v64;
      if (v65 != v64)
      {
        int v115 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        uint64_t v85 = v105 + 3;
        uint64_t v86 = v12 + 24 * v64;
        uint64_t v109 = OBJC_IVAR____TtC3VFX13EntityManager_updateQueue;
        do
        {
          uint64_t v92 = *(void *)&v115[v40];
          if (v92)
          {
            uint64_t v93 = *(void **)(v92 + 16);
            if (*(unsigned char *)v86)
            {
              uint64_t v114 = *(void **)(v40 + v109);
              int v94 = *(unsigned __int8 *)(v86 + 1);
              int v95 = *(unsigned __int8 *)(v86 + 2);
              uint64_t v97 = *(void *)(v86 + 8);
              uint64_t v96 = *(void *)(v86 + 16);
              uint64_t v98 = (char *)*(v85 - 3);
              if (!v98
                || *((unsigned char *)v85 - 16) != 1
                || *((unsigned __int8 *)v85 - 15) != v94
                || ((v95 ^ *((unsigned __int8 *)v85 - 14)) & 1) != 0
                || (*(v85 - 1) != v97 || *v85 != v96) && (sub_1B6E334B8() & 1) == 0)
              {
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *((unsigned char *)v85 - 16) = 1;
                *((unsigned char *)v85 - 15) = v94;
                *((unsigned char *)v85 - 14) = v95;
                *(v85 - 1) = v97;
                void *v85 = v96;
                id v87 = objc_allocWithZone((Class)type metadata accessor for VideoCaptureSession());
                long long v111 = v98;
                if (v95) {
                  int v88 = 0x10000;
                }
                else {
                  int v88 = 0;
                }
                int v89 = v112 & 0xFF000000 | (v94 << 8) | v88 | 1;
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v90 = v114;
                LODWORD(v112) = v89;
                uint64_t v91 = sub_1B6806694(v93, v90, v89);

                *(v85 - 3) = v91;
                swift_unknownObjectRelease();
              }
              uint64_t v40 = v116;
            }
            else
            {
              long long v99 = (char *)*(v85 - 3);
              if (v99)
              {
                long long v100 = *(void **)&v99[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
                swift_unknownObjectRetain();
                objc_msgSend(v100, sel_stopRunning);
                swift_unknownObjectRelease();

                *(v85 - 3) = 0;
              }
            }
          }
          v85 += 4;
          v86 += 24;
          --v66;
        }
        while (v66);
      }
      unint64_t v59 = (unint64_t)v105;
      sub_1B6D8299C(*(void *)(v110 + 232), *(void *)(v110 + 240));
    }
    ecs_stack_allocator_deallocate(v104, v59, 32 * v103);
  }
  return swift_release();
}

uint64_t sub_1B6D97104(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D96780);
}

void *sub_1B6D97130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = ecs_stack_allocator_allocate(a3, 8 * a1, 8);
  uint64_t v6 = v5;
  if (a1)
  {
    *uint64_t v5 = a2;
    if (a1 != 1)
    {
      v5[1] = a2;
      if (a1 != 2)
      {
        _OWORD v5[2] = a2;
        uint64_t v7 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v8 = v5 + 3;
          do
          {
            *v8++ = a2;
            swift_unknownObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_unknownObjectRetain();
      }
      swift_unknownObjectRetain();
    }
    swift_unknownObjectRetain();
  }
  return v6;
}

uint64_t sub_1B6D971DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v60 = a3;
  uint64_t v61 = a2;
  uint64_t v6 = (int *)type metadata accessor for MovieRuntime(0);
  unint64_t v59 = (void *)*((void *)v6 - 1);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t *)a1[11];
  uint64_t v11 = a1[12];
  uint64_t v12 = a1[13];
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  swift_retain();
  uint64_t v15 = (void *)sub_1B62C9024((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64880, v10, v11, v12, v14);
  sub_1B6345398(*(void *)(v13 + 40), (uint64_t)v6, &v62);
  if (v62 != 1)
  {
    uint64_t v54 = v11;
    uint64_t v56 = v13;
    uint64_t v21 = v12;
    long long v58 = v10;
    if (!v10) {
      uint64_t v21 = a1[7] - a1[6];
    }
    uint64_t v22 = sub_1B6E30F48();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 1, 1, v22);
    *(void *)&v9[v6[5]] = 0;
    *(void *)&v9[v6[6]] = 0;
    long long v23 = &v9[v6[7]];
    *(void *)long long v23 = 0;
    unsigned char v23[8] = 1;
    v9[v6[8]] = 0;
    *(void *)&v9[v6[9]] = 0;
    *(void *)&v9[v6[10]] = 0;
    uint64_t v24 = v6[11];
    type metadata accessor for IOSurfaceWrapper();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = 0;
    *(void *)&v9[v24] = v25;
    *(void *)&v9[v6[12]] = 0;
    uint64_t v26 = *(void *)(v61 + 32);
    uint64_t v27 = v59[9];
    uint64_t v28 = *((unsigned __int8 *)v59 + 80) + 1;
    unint64_t v55 = v27 * v21;
    unint64_t v59 = ecs_stack_allocator_allocate(v26, v27 * v21, v28);
    uint64_t v57 = v21;
    if (v21)
    {
      uint64_t v29 = v59;
      uint64_t v30 = v57;
      do
      {
        sub_1B6DA0BCC((uint64_t)v9, (uint64_t)v29, type metadata accessor for MovieRuntime);
        uint64_t v29 = (void *)((char *)v29 + v27);
        --v30;
      }
      while (v30);
    }
    sub_1B6DA29E4((uint64_t)v9, type metadata accessor for MovieRuntime);
    uint64_t v31 = v60;
    if (v58)
    {
      if (v12)
      {
        uint64_t v32 = v59;
        uint64_t v33 = v12;
        uint64_t v34 = v54;
        while (1)
        {
          sub_1B680E720(v15, (uint64_t)v32, v31);
          if (v4) {
            break;
          }
          uint64_t v32 = (void *)((char *)v32 + v27);
          v15 += 7;
          if (!--v33) {
            goto LABEL_27;
          }
        }
        long long v48 = *(void **)(v61 + 32);
        unint64_t v49 = (unint64_t)v59;
LABEL_35:
        unint64_t v52 = v55;
        goto LABEL_36;
      }
      uint64_t v34 = v54;
LABEL_27:
      int v46 = v59;
      uint64_t v47 = v61;
      sub_1B6D82AE4(v58, v34, v12, (uint64_t)v59, v57);
    }
    else
    {
      uint64_t v42 = a1[6];
      uint64_t v43 = a1[7];
      uint64_t v44 = v43 - v42;
      uint64_t v45 = v56;
      if (v43 != v42)
      {
        long long v50 = &v15[7 * v42];
        int v46 = v59;
        long long v51 = v59;
        while (1)
        {
          sub_1B680E720(v50, (uint64_t)v51, v31);
          if (v4) {
            break;
          }
          long long v51 = (void *)((char *)v51 + v27);
          v50 += 7;
          if (!--v44) {
            goto LABEL_32;
          }
        }
        long long v48 = *(void **)(v61 + 32);
        unint64_t v49 = (unint64_t)v46;
        goto LABEL_35;
      }
      int v46 = v59;
LABEL_32:
      uint64_t v47 = v61;
      sub_1B6D82C54(*(void *)(v45 + 232), *(void *)(v45 + 240));
    }
    unint64_t v52 = v55;
    long long v48 = *(void **)(v47 + 32);
    unint64_t v49 = (unint64_t)v46;
LABEL_36:
    ecs_stack_allocator_deallocate(v48, v49, v52);
    return swift_release();
  }
  uint64_t v16 = v61;
  *(void *)(v61 + 72) = v6;
  *(void *)(v16 + 80) = &off_1F0F5A998;
  uint64_t v17 = sub_1B6642E00(v13, (uint64_t)a1);
  uint64_t v18 = v17;
  if (v10)
  {
    if (v12)
    {
      uint64_t v19 = v60;
      uint64_t v20 = v59[9];
      do
      {
        sub_1B680E720(v15, v18, v19);
        if (v4) {
          break;
        }
        v18 += v20;
        v15 += 7;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v35 = a1[6];
    uint64_t v36 = a1[7];
    uint64_t v37 = v36 - v35;
    if (v36 != v35)
    {
      uint64_t v38 = v60;
      uint64_t v39 = v59[9];
      uint64_t v40 = v17 + v35 * v39;
      uint64_t v41 = &v15[7 * v35];
      do
      {
        sub_1B680E720(v41, v40, v38);
        if (v4) {
          break;
        }
        v40 += v39;
        v41 += 7;
        --v37;
      }
      while (v37);
    }
  }
  return swift_release();
}

uint64_t sub_1B6D97638(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D971DC);
}

uint64_t sub_1B6D97664(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v30 = *(_OWORD *)result;
  long long v31 = *(_OWORD *)(result + 16);
  uint64_t v32 = *(void *)(result + 32);
  uint64_t v25 = *(void *)(result + 80);
  if (v25 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    uint64_t v9 = *(void **)(result + 72);
    uint64_t v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      uint64_t v23 = v8;
      int v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v21 = v5;
      sub_1B62F1F58(v5);
      uint64_t v12 = (uint64_t *)(v6 + 24);
      int v22 = v11;
      uint64_t v24 = a2;
      while (1)
      {
        uint64_t v13 = *((unsigned int *)v12 - 6);
        uint64_t v14 = *((unsigned int *)v12 - 5);
        uint64_t v15 = *((unsigned int *)v12 - 4);
        uint64_t v28 = *v12;
        uint64_t v29 = *(v12 - 1);
        uint64_t v26 = v7;
        uint64_t v27 = v12[1];
        uint64_t v16 = v12[2];
        uint64_t v43 = v3;
        if (v11)
        {
          uint64_t v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62CA6FC((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v9[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        _OWORD v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v14 - v13 + v15);
        v38[5] = v25;
        v38[6] = v13;
        v38[7] = v14;
        v38[8] = 0;
        v38[9] = 0;
        char v39 = 1;
        uint64_t v40 = v29;
        uint64_t v41 = v28;
        uint64_t v42 = v27;
        swift_retain();
        uint64_t v20 = v43;
        sub_1B6D979EC(v38, (uint64_t)v9, v24, &qword_1EB981070, type metadata accessor for TriggerScript, (uint64_t)&off_1EB984DC8, (unint64_t *)&unk_1EB9811A0, (uint64_t)sub_1B6642C38, (void (*)(uint64_t, uint64_t))sub_1B6927210);
        uint64_t v3 = v20;
        if (v20) {
          break;
        }
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        uint64_t v36 = v32;
        sub_1B6345178(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        int v11 = v22;
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        uint64_t v7 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B62F073C(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      uint64_t v34 = v32;
      sub_1B6345178(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if (v22)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D979EC(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6, unint64_t *a7, uint64_t a8, void (*a9)(uint64_t, uint64_t))
{
  uint64_t v114 = a3;
  uint64_t v115 = a8;
  uint64_t v12 = a4;
  uint64_t v110 = a2;
  char v113 = a9;
  sub_1B6DA2C04(0, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v15 = v14;
  uint64_t v109 = *((void *)v14 - 1);
  MEMORY[0x1F4188790](v14, v16);
  uint64_t v111 = (uint64_t)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v112 = (uint64_t)&v99 - v20;
  MEMORY[0x1F4188790](v21, v22);
  uint64_t v24 = (char *)&v99 - v23;
  MEMORY[0x1F4188790](v25, v26);
  uint64_t v28 = (char *)&v99 - v27;
  uint64_t v107 = a7;
  uint64_t v120 = a5;
  sub_1B6DA2C04(0, a7, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  uint64_t v30 = v29;
  uint64_t v31 = a1[1];
  uint64_t v32 = swift_retain();
  uint64_t v33 = ((uint64_t (*)(uint64_t, void *))v115)(v32, a1);
  sub_1B6345398(*(void *)(v31 + 40), v30, v119);
  uint64_t v115 = a6;
  if (LOBYTE(v119[0]) != 1)
  {
    sub_1B6DA0D94((uint64_t)(a1 + 11), (uint64_t)v116, (uint64_t (*)(void))sub_1B6786014);
    sub_1B6DA0D94((uint64_t)v116, (uint64_t)v119, (uint64_t (*)(void))sub_1B6786014);
    uint64_t v102 = a1;
    if (v119[0]) {
      uint64_t v50 = v119[2];
    }
    else {
      uint64_t v50 = a1[7] - a1[6];
    }
    uint64_t v54 = v111;
    uint64_t v55 = v112;
    uint64_t v56 = *(void **)(v110 + 32);
    uint64_t v57 = sub_1B6D877F0(v50, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], (uint64_t)v56);
    uint64_t v59 = v58;
    uint64_t v103 = v60;
    sub_1B6DA0D94((uint64_t)v116, (uint64_t)v117, (uint64_t (*)(void))sub_1B6786014);
    uint64_t v108 = v31;
    long long v105 = v56;
    uint64_t v106 = v57;
    uint64_t v104 = v59;
    if (v117[0])
    {
      long long v101 = (uint64_t *)v117[0];
      uint64_t v100 = v117[1];
      uint64_t v102 = (void *)v118;
      if (v118)
      {
        uint64_t v111 = *(void *)(v109 + 72);
        uint64_t v61 = (uint64_t)v106;
        for (uint64_t i = (uint64_t)v102; i; --i)
        {
          uint64_t v65 = *(void *)(v33 + v15[10]);
          uint64_t v66 = v12;
          uint64_t v67 = v12;
          uint64_t v68 = v120;
          size_t v69 = v15;
          uint64_t v70 = v115;
          sub_1B6DA2B80(v33, v55, v66, v120, v115);
          if (v65)
          {
            sub_1B633A984(v55, v67, v68, v70);
            uint64_t v12 = v67;
            uint64_t v15 = v69;
          }
          else
          {
            uint64_t v71 = v55;
            uint64_t v72 = *(void *)(v55 + v69[11]);
            swift_bridgeObjectRetain();
            sub_1B633A984(v71, v67, v68, v70);
            uint64_t v12 = v67;
            uint64_t v15 = v69;
            if (!v72) {
              goto LABEL_21;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v63 = *(void *)(v33 + v15[15]);
          uint64_t v64 = *(void *)(v114 + 16);
          swift_retain();
          swift_bridgeObjectRetain();
          v113(v64, v63);
          swift_bridgeObjectRelease();
          swift_release();
LABEL_21:
          v61 += 16;
          uint64_t v55 = v112;
          v33 += v111;
        }
      }
      unint64_t v73 = (unint64_t)v106;
      sub_1B6D8332C(v101, v100, (uint64_t)v102, (uint64_t)v106, v103, v110, v107, v120, v115);
LABEL_28:
      ecs_stack_allocator_deallocate(v105, v73, 16 * v104);
      return swift_release();
    }
    uint64_t v74 = v102[6];
    uint64_t v75 = v102[7];
    uint64_t v76 = v75 - v74;
    if (v75 == v74)
    {
LABEL_27:
      unint64_t v73 = (unint64_t)v106;
      sub_1B6D8349C(*(void *)(v108 + 232), *(void *)(v108 + 240), (uint64_t)v106, v103, v110, v107, v120, v115);
      goto LABEL_28;
    }
    uint64_t v112 = *(void *)(v109 + 72);
    uint64_t v87 = v33 + v74 * v112;
    uint64_t v88 = (uint64_t)v106;
    while (1)
    {
      uint64_t v91 = *(void *)(v87 + v15[10]);
      uint64_t v92 = v12;
      uint64_t v93 = v12;
      int v94 = v120;
      int v95 = v15;
      uint64_t v96 = v115;
      sub_1B6DA2B80(v87, v54, v92, v120, v115);
      if (v91)
      {
        sub_1B633A984(v54, v93, v94, v96);
        uint64_t v12 = v93;
        uint64_t v15 = v95;
      }
      else
      {
        uint64_t v97 = v54;
        uint64_t v98 = *(void *)(v54 + v95[11]);
        swift_bridgeObjectRetain();
        sub_1B633A984(v97, v93, v94, v96);
        uint64_t v12 = v93;
        uint64_t v15 = v95;
        if (!v98) {
          goto LABEL_40;
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v89 = *(void *)(v87 + v15[15]);
      uint64_t v90 = *(void *)(v114 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v113(v90, v89);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_40:
      v88 += 16;
      uint64_t v54 = v111;
      v87 += v112;
      if (!--v76) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v111 = (uint64_t)v24;
  uint64_t v112 = (uint64_t)v28;
  uint64_t v34 = v110;
  *(void *)(v110 + 72) = v30;
  *(void *)(v34 + 80) = &off_1F0F8E108;
  uint64_t v35 = (uint64_t *)a1[11];
  uint64_t v36 = a1[13];
  uint64_t v37 = sub_1B62C9024(v30, (uint64_t)&off_1F0F8E108, v35, a1[12], v36, a1[2]);
  uint64_t v38 = v37;
  if (!v35)
  {
    uint64_t v51 = a1[6];
    uint64_t v52 = a1[7];
    uint64_t v53 = v52 - v51;
    if (v52 == v51) {
      return swift_release();
    }
    uint64_t v108 = v31;
    uint64_t v77 = v37 + 16 * v51;
    uint64_t v115 = *(void *)(v109 + 72);
    uint64_t v78 = v33 + v51 * v115;
    int v79 = v120;
    while (1)
    {
      uint64_t v82 = *(void *)(v78 + v15[10]);
      uint64_t v83 = v111;
      sub_1B6DA2B80(v78, v111, v12, v79, a6);
      if (v82)
      {
        sub_1B633A984(v83, v12, v79, a6);
      }
      else
      {
        uint64_t v84 = v83;
        uint64_t v85 = *(void *)(v83 + v15[11]);
        swift_bridgeObjectRetain();
        sub_1B633A984(v84, v12, v79, a6);
        if (!v85) {
          goto LABEL_32;
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v80 = *(void *)(v78 + v15[15]);
      uint64_t v81 = *(void *)(v114 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v113(v81, v80);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_32:
      v77 += 16;
      v78 += v115;
      if (!--v53) {
        return swift_release();
      }
    }
  }
  if (v36)
  {
    uint64_t v108 = v31;
    uint64_t v111 = *(void *)(v109 + 72);
    do
    {
      uint64_t v41 = *(void *)(v33 + v15[10]);
      uint64_t v42 = v112;
      uint64_t v43 = v12;
      uint64_t v44 = v12;
      uint64_t v45 = v120;
      int v46 = v15;
      uint64_t v47 = v115;
      sub_1B6DA2B80(v33, v112, v43, v120, v115);
      if (v41)
      {
        sub_1B633A984(v42, v44, v45, v47);
        uint64_t v12 = v44;
        uint64_t v15 = v46;
      }
      else
      {
        uint64_t v48 = v42;
        uint64_t v49 = *(void *)(v42 + v46[11]);
        swift_bridgeObjectRetain();
        sub_1B633A984(v48, v44, v45, v47);
        uint64_t v12 = v44;
        uint64_t v15 = v46;
        if (!v49) {
          goto LABEL_7;
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v39 = *(void *)(v33 + v15[15]);
      uint64_t v40 = *(void *)(v114 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v113(v40, v39);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_7:
      v38 += 16;
      v33 += v111;
      --v36;
    }
    while (v36);
  }
  return swift_release();
}

uint64_t sub_1B6D981B4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v30 = *(_OWORD *)result;
  long long v31 = *(_OWORD *)(result + 16);
  uint64_t v32 = *(void *)(result + 32);
  uint64_t v25 = *(void *)(result + 80);
  if (v25 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    uint64_t v9 = *(void **)(result + 72);
    uint64_t v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      uint64_t v23 = v8;
      int v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v21 = v5;
      sub_1B62F1F58(v5);
      uint64_t v12 = (uint64_t *)(v6 + 24);
      int v22 = v11;
      uint64_t v24 = a2;
      while (1)
      {
        uint64_t v13 = *((unsigned int *)v12 - 6);
        uint64_t v14 = *((unsigned int *)v12 - 5);
        uint64_t v15 = *((unsigned int *)v12 - 4);
        uint64_t v28 = *v12;
        uint64_t v29 = *(v12 - 1);
        uint64_t v26 = v7;
        uint64_t v27 = v12[1];
        uint64_t v16 = v12[2];
        uint64_t v43 = v3;
        if (v11)
        {
          uint64_t v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62CA6FC((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v9[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        _OWORD v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v14 - v13 + v15);
        v38[5] = v25;
        v38[6] = v13;
        v38[7] = v14;
        v38[8] = 0;
        v38[9] = 0;
        char v39 = 1;
        uint64_t v40 = v29;
        uint64_t v41 = v28;
        uint64_t v42 = v27;
        swift_retain();
        uint64_t v20 = v43;
        sub_1B6D979EC(v38, (uint64_t)v9, v24, &qword_1EB97E710, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1EB983100, (unint64_t *)&unk_1EB97F780, (uint64_t)sub_1B6642E68, (void (*)(uint64_t, uint64_t))sub_1B6927210);
        uint64_t v3 = v20;
        if (v20) {
          break;
        }
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        uint64_t v36 = v32;
        sub_1B6345178(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        int v11 = v22;
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        uint64_t v7 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B62F073C(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      uint64_t v34 = v32;
      sub_1B6345178(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if (v22)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D9853C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v30 = *(_OWORD *)result;
  long long v31 = *(_OWORD *)(result + 16);
  uint64_t v32 = *(void *)(result + 32);
  uint64_t v25 = *(void *)(result + 80);
  if (v25 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    uint64_t v9 = *(void **)(result + 72);
    uint64_t v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      uint64_t v23 = v8;
      int v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v21 = v5;
      sub_1B62F1F58(v5);
      uint64_t v12 = (uint64_t *)(v6 + 24);
      int v22 = v11;
      uint64_t v24 = a2;
      while (1)
      {
        uint64_t v13 = *((unsigned int *)v12 - 6);
        uint64_t v14 = *((unsigned int *)v12 - 5);
        uint64_t v15 = *((unsigned int *)v12 - 4);
        uint64_t v28 = *v12;
        uint64_t v29 = *(v12 - 1);
        uint64_t v26 = v7;
        uint64_t v27 = v12[1];
        uint64_t v16 = v12[2];
        uint64_t v43 = v3;
        if (v11)
        {
          uint64_t v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62CA6FC((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v9[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        _OWORD v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v14 - v13 + v15);
        v38[5] = v25;
        v38[6] = v13;
        v38[7] = v14;
        v38[8] = 0;
        v38[9] = 0;
        char v39 = 1;
        uint64_t v40 = v29;
        uint64_t v41 = v28;
        uint64_t v42 = v27;
        swift_retain();
        uint64_t v20 = v43;
        sub_1B6D979EC(v38, (uint64_t)v9, v24, &qword_1EB97E700, type metadata accessor for ParticleInitScript, (uint64_t)&off_1EB982C10, (unint64_t *)&unk_1EB97F770, (uint64_t)sub_1B6642EA4, (void (*)(uint64_t, uint64_t))sub_1B6927210);
        uint64_t v3 = v20;
        if (v20) {
          break;
        }
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        uint64_t v36 = v32;
        sub_1B6345178(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        int v11 = v22;
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        uint64_t v7 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B62F073C(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      uint64_t v34 = v32;
      sub_1B6345178(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if (v22)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D988C4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v30 = *(_OWORD *)result;
  long long v31 = *(_OWORD *)(result + 16);
  uint64_t v32 = *(void *)(result + 32);
  uint64_t v25 = *(void *)(result + 80);
  if (v25 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    uint64_t v9 = *(void **)(result + 72);
    uint64_t v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      uint64_t v23 = v8;
      int v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v21 = v5;
      sub_1B62F1F58(v5);
      uint64_t v12 = (uint64_t *)(v6 + 24);
      int v22 = v11;
      uint64_t v24 = a2;
      while (1)
      {
        uint64_t v13 = *((unsigned int *)v12 - 6);
        uint64_t v14 = *((unsigned int *)v12 - 5);
        uint64_t v15 = *((unsigned int *)v12 - 4);
        uint64_t v28 = *v12;
        uint64_t v29 = *(v12 - 1);
        uint64_t v26 = v7;
        uint64_t v27 = v12[1];
        uint64_t v16 = v12[2];
        uint64_t v43 = v3;
        if (v11)
        {
          uint64_t v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62CA6FC((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v9[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        _OWORD v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v14 - v13 + v15);
        v38[5] = v25;
        v38[6] = v13;
        v38[7] = v14;
        v38[8] = 0;
        v38[9] = 0;
        char v39 = 1;
        uint64_t v40 = v29;
        uint64_t v41 = v28;
        uint64_t v42 = v27;
        swift_retain();
        uint64_t v20 = v43;
        sub_1B6D979EC(v38, (uint64_t)v9, v24, (unint64_t *)&unk_1EB97E750, type metadata accessor for EmitterScript, (uint64_t)&off_1EB982298, &qword_1EB97F7C0, (uint64_t)sub_1B6642EE0, (void (*)(uint64_t, uint64_t))sub_1B6927210);
        uint64_t v3 = v20;
        if (v20) {
          break;
        }
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        uint64_t v36 = v32;
        sub_1B6345178(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        int v11 = v22;
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        uint64_t v7 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B62F073C(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      uint64_t v34 = v32;
      sub_1B6345178(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if (v22)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D98C4C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v30 = *(_OWORD *)result;
  long long v31 = *(_OWORD *)(result + 16);
  uint64_t v32 = *(void *)(result + 32);
  uint64_t v25 = *(void *)(result + 80);
  if (v25 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    uint64_t v9 = *(void **)(result + 72);
    uint64_t v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      uint64_t v23 = v8;
      int v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v21 = v5;
      sub_1B62F1F58(v5);
      uint64_t v12 = (uint64_t *)(v6 + 24);
      int v22 = v11;
      uint64_t v24 = a2;
      while (1)
      {
        uint64_t v13 = *((unsigned int *)v12 - 6);
        uint64_t v14 = *((unsigned int *)v12 - 5);
        uint64_t v15 = *((unsigned int *)v12 - 4);
        uint64_t v28 = *v12;
        uint64_t v29 = *(v12 - 1);
        uint64_t v26 = v7;
        uint64_t v27 = v12[1];
        uint64_t v16 = v12[2];
        uint64_t v43 = v3;
        if (v11)
        {
          uint64_t v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62CA6FC((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v9[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        _OWORD v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v14 - v13 + v15);
        v38[5] = v25;
        v38[6] = v13;
        v38[7] = v14;
        v38[8] = 0;
        v38[9] = 0;
        char v39 = 1;
        uint64_t v40 = v29;
        uint64_t v41 = v28;
        uint64_t v42 = v27;
        swift_retain();
        uint64_t v20 = v43;
        sub_1B6D979EC(v38, (uint64_t)v9, v24, (unint64_t *)&unk_1EB97E740, type metadata accessor for SimpleScript, (uint64_t)&off_1EB982058, (unint64_t *)&unk_1EB97F7B0, (uint64_t)sub_1B6642B30, (void (*)(uint64_t, uint64_t))sub_1B6927210);
        uint64_t v3 = v20;
        if (v20) {
          break;
        }
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        uint64_t v36 = v32;
        sub_1B6345178(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        int v11 = v22;
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        uint64_t v7 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B62F073C(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      uint64_t v34 = v32;
      sub_1B6345178(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if (v22)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D98FD4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v30 = *(_OWORD *)result;
  long long v31 = *(_OWORD *)(result + 16);
  uint64_t v32 = *(void *)(result + 32);
  uint64_t v25 = *(void *)(result + 80);
  if (v25 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(result + 56);
    uint64_t v8 = *(void *)(result + 64);
    uint64_t v9 = *(void **)(result + 72);
    uint64_t v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      uint64_t v23 = v8;
      int v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v21 = v5;
      sub_1B62F1F58(v5);
      uint64_t v12 = (uint64_t *)(v6 + 24);
      int v22 = v11;
      uint64_t v24 = a2;
      while (1)
      {
        uint64_t v13 = *((unsigned int *)v12 - 6);
        uint64_t v14 = *((unsigned int *)v12 - 5);
        uint64_t v15 = *((unsigned int *)v12 - 4);
        uint64_t v28 = *v12;
        uint64_t v29 = *(v12 - 1);
        uint64_t v26 = v7;
        uint64_t v27 = v12[1];
        uint64_t v16 = v12[2];
        uint64_t v43 = v3;
        if (v11)
        {
          uint64_t v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62CA6FC((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v18 = v9[4];
        uint64_t v19 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        _OWORD v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v14 - v13 + v15);
        v38[5] = v25;
        v38[6] = v13;
        v38[7] = v14;
        v38[8] = 0;
        v38[9] = 0;
        char v39 = 1;
        uint64_t v40 = v29;
        uint64_t v41 = v28;
        uint64_t v42 = v27;
        swift_retain();
        uint64_t v20 = v43;
        sub_1B6D979EC(v38, (uint64_t)v9, v24, (unint64_t *)&unk_1EB97E720, type metadata accessor for GraphScript, (uint64_t)&off_1EB981C00, (unint64_t *)&unk_1EB97F790, (uint64_t)sub_1B6642B6C, (void (*)(uint64_t, uint64_t))sub_1B6927210);
        uint64_t v3 = v20;
        if (v20) {
          break;
        }
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        uint64_t v36 = v32;
        sub_1B6345178(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B634507C((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        int v11 = v22;
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        uint64_t v7 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B62F073C(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      uint64_t v34 = v32;
      sub_1B6345178(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B634507C((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if (v22)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B62F073C(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

char *sub_1B6D9935C(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = (char *)ecs_stack_allocator_allocate(a3, 656 * a1, 8);
  uint64_t v6 = v5;
  if (a1)
  {
    memcpy(v5, a2, 0x290uLL);
    if (a1 != 1)
    {
      memcpy(v6 + 656, a2, 0x290uLL);
      if (a1 != 2)
      {
        memcpy(v6 + 1312, a2, 0x290uLL);
        uint64_t v7 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v8 = v6 + 1968;
          do
          {
            sub_1B62EEA00((uint64_t)a2);
            memcpy(v8, a2, 0x290uLL);
            v8 += 656;
            --v7;
          }
          while (v7);
        }
        sub_1B62EEA00((uint64_t)a2);
      }
      sub_1B62EEA00((uint64_t)a2);
    }
    sub_1B62EEA00((uint64_t)a2);
  }
  return v6;
}

void *sub_1B6D99440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = ecs_stack_allocator_allocate(a3, 8 * a1, 8);
  uint64_t v6 = v5;
  if (a1)
  {
    *uint64_t v5 = a2;
    if (a1 != 1)
    {
      v5[1] = a2;
      if (a1 != 2)
      {
        _OWORD v5[2] = a2;
        uint64_t v7 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v8 = v5 + 3;
          do
          {
            *v8++ = a2;
            swift_bridgeObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t sub_1B6D994EC(void *a1, void *a2, void *a3, uint64_t a4, id *a5)
{
  uint64_t v9 = a1[1];
  uint64_t v10 = swift_retain();
  uint64_t v11 = sub_1B6642F1C(v10, (uint64_t)a1);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for MetalScriptReflection, &v53);
  if (v53 == 1)
  {
    a2[9] = &type metadata for MetalScriptReflection;
    a2[10] = &off_1F0F880B8;
    uint64_t v12 = (uint64_t *)a1[11];
    uint64_t v13 = a1[13];
    uint64_t v14 = (id *)sub_1B62C9024((uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1F0F880B8, v12, a1[12], v13, a1[2]);
    if (v12)
    {
      if (v13)
      {
        sub_1B6DA2C04(0, (unint64_t *)&qword_1EB981060, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1EB984EE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 72);
        do
        {
          uint64_t v17 = *v12++;
          sub_1B6986494(v9, v17, v11, v14, a3, a4, a5);
          if (v5) {
            break;
          }
          ++v14;
          v11 += v16;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
      uint64_t v19 = a1[6];
      uint64_t v20 = a1[7];
      if (v19 != v20)
      {
        sub_1B6DA2C04(0, (unint64_t *)&qword_1EB981060, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1EB984EE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        uint64_t v22 = *(void *)(*(void *)(v21 - 8) + 72);
        uint64_t v23 = &v14[v19];
        uint64_t v24 = v11 + v19 * v22;
        do
        {
          sub_1B6986494(v9, v19, v24, v23, a3, a4, a5);
          if (v5) {
            break;
          }
          ++v19;
          ++v23;
          v24 += v22;
        }
        while (v20 != v19);
      }
    }
  }
  else
  {
    sub_1B6DA0D94((uint64_t)(a1 + 11), (uint64_t)v49, (uint64_t (*)(void))sub_1B6786014);
    sub_1B6DA0D94((uint64_t)v49, (uint64_t)v52, (uint64_t (*)(void))sub_1B6786014);
    if (v52[0]) {
      uint64_t v18 = v52[2];
    }
    else {
      uint64_t v18 = a1[7] - a1[6];
    }
    uint64_t v25 = sub_1B67DDB64(MEMORY[0x1E4FBC860]);
    uint64_t v26 = a2[4];
    uint64_t v27 = (id *)sub_1B6D99440(v18, (uint64_t)v25, v26);
    uint64_t v45 = v28;
    uint64_t v44 = v29;
    swift_bridgeObjectRelease();
    sub_1B6DA0D94((uint64_t)v49, (uint64_t)v50, (uint64_t (*)(void))sub_1B6786014);
    long long v30 = (uint64_t *)v50[0];
    int v46 = (void *)v26;
    if (v50[0])
    {
      uint64_t v31 = v51;
      uint64_t v42 = v50[1];
      uint64_t v43 = v51;
      if (v51)
      {
        sub_1B6DA2C04(0, (unint64_t *)&qword_1EB981060, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1EB984EE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        uint64_t v32 = 0;
        uint64_t v34 = *(void *)(*(void *)(v33 - 8) + 72);
        while (1)
        {
          sub_1B6986494(v9, v30[v32], v11, &v27[v32], a3, a4, a5);
          if (v5) {
            break;
          }
          ++v32;
          v11 += v34;
          if (!--v31) {
            goto LABEL_21;
          }
        }
      }
      else
      {
LABEL_21:
        sub_1B6D838A8(v30, v42, v43, (uint64_t)v27, v44);
      }
    }
    else
    {
      uint64_t v35 = a1[6];
      uint64_t v36 = a1[7];
      if (v35 == v36)
      {
LABEL_26:
        sub_1B6D839F8(*(void *)(v9 + 232), *(void *)(v9 + 240));
      }
      else
      {
        sub_1B6DA2C04(0, (unint64_t *)&qword_1EB981060, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1EB984EE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        uint64_t v38 = *(void *)(*(void *)(v37 - 8) + 72);
        uint64_t v39 = v11 + v35 * v38;
        uint64_t v40 = v27;
        while (1)
        {
          sub_1B6986494(v9, v35, v39, v40, a3, a4, a5);
          if (v5) {
            break;
          }
          ++v35;
          ++v40;
          v39 += v38;
          if (v36 == v35) {
            goto LABEL_26;
          }
        }
      }
    }
    ecs_stack_allocator_deallocate(v46, (unint64_t)v27, 8 * v45);
  }
  return swift_release();
}

uint64_t sub_1B6D9992C(uint64_t result, void *a2, uint64_t a3, uint64_t a4, id *a5)
{
  uint64_t v6 = v5;
  long long v34 = *(_OWORD *)result;
  long long v35 = *(_OWORD *)(result + 16);
  uint64_t v36 = *(void *)(result + 32);
  uint64_t v26 = *(void *)(result + 80);
  if (v26 >= 1)
  {
    uint64_t v9 = result;
    uint64_t v32 = *(void *)(result + 40);
    uint64_t v11 = *(void *)(result + 56);
    uint64_t v10 = *(void *)(result + 64);
    uint64_t v12 = *(void **)(result + 72);
    uint64_t v13 = v12[4];
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v14 = v13;
    ecs_stack_allocator_push_snapshot(v13);
    if (v11)
    {
      uint64_t v23 = v10;
      int v47 = *(unsigned __int8 *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      sub_1B62F1F58(v9);
      uint64_t v15 = (uint64_t *)(v32 + 24);
      uint64_t v25 = a2;
      uint64_t v24 = a4;
      while (1)
      {
        uint64_t v16 = *((unsigned int *)v15 - 6);
        uint64_t v17 = *((unsigned int *)v15 - 5);
        uint64_t v18 = *((unsigned int *)v15 - 4);
        uint64_t v30 = *v15;
        uint64_t v31 = *(v15 - 1);
        uint64_t v28 = v11;
        uint64_t v29 = v15[1];
        uint64_t v19 = v15[2];
        uint64_t v33 = v6;
        if (v47)
        {
          uint64_t v20 = *(os_unfair_lock_s **)(v19 + 376);
          swift_retain();
          os_unfair_lock_lock(v20);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v14);
        sub_1B62CA6FC((uint64_t)(v12 + 6), (uint64_t)v41, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v21 = v12[4];
        uint64_t v22 = *(void *)(*(void *)(*(void *)(*(void *)(v19 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v12[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
        v12[7] = v22;
        v12[9] = 0;
        v12[10] = 0;
        unsigned char v12[8] = 0;
        swift_release();
        v42[0] = v23;
        v42[1] = v19;
        v42[2] = v12;
        v42[3] = v18;
        v42[4] = (v17 - v16 + v18);
        v42[5] = v26;
        v42[6] = v16;
        v42[7] = v17;
        v42[8] = 0;
        v42[9] = 0;
        char v43 = 1;
        uint64_t v44 = v31;
        uint64_t v45 = v30;
        uint64_t v46 = v29;
        swift_unknownObjectRetain();
        swift_retain();
        swift_retain();
        sub_1B6D994EC(v42, v12, v25, v24, a5);
        uint64_t v6 = v33;
        if (v33) {
          break;
        }
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        v39[0] = v34;
        v39[1] = v35;
        uint64_t v40 = v36;
        sub_1B6345178(v12, (unsigned __int16 **)v39, (uint64_t)v41);
        sub_1B634507C((char *)v19);
        ecs_stack_allocator_pop_snapshot(v14);
        if (v47)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
        }
        swift_release();
        v15 += 6;
        uint64_t v11 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B62F073C(v9);
          goto LABEL_15;
        }
      }
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      v37[0] = v34;
      v37[1] = v35;
      uint64_t v38 = v36;
      sub_1B6345178(v12, (unsigned __int16 **)v37, (uint64_t)v41);
      sub_1B634507C((char *)v19);
      ecs_stack_allocator_pop_snapshot(v14);
      if (v47)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
      }
      sub_1B62F073C(v9);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v12[4]);
    swift_release();
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

void *sub_1B6D99CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = ecs_stack_allocator_allocate(a3, 120 * a1, 8);
  uint64_t v6 = v5;
  if (a1)
  {
    long long v7 = *(_OWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 16);
    long long v9 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v5 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v5 + 3) = v9;
    *(_OWORD *)uint64_t v5 = v7;
    *((_OWORD *)v5 + 1) = v8;
    long long v10 = *(_OWORD *)(a2 + 64);
    long long v11 = *(_OWORD *)(a2 + 80);
    long long v12 = *(_OWORD *)(a2 + 96);
    v5[14] = *(void *)(a2 + 112);
    *((_OWORD *)v5 + 5) = v11;
    *((_OWORD *)v5 + 6) = v12;
    *((_OWORD *)v5 + 4) = v10;
    if (a1 != 1)
    {
      long long v13 = *(_OWORD *)a2;
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v15 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v5 + 21) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v5 + 19) = v15;
      *(_OWORD *)(v5 + 17) = v14;
      *(_OWORD *)(v5 + 15) = v13;
      long long v16 = *(_OWORD *)(a2 + 64);
      long long v17 = *(_OWORD *)(a2 + 80);
      long long v18 = *(_OWORD *)(a2 + 96);
      v5[29] = *(void *)(a2 + 112);
      *(_OWORD *)(v5 + 27) = v18;
      *(_OWORD *)(v5 + 25) = v17;
      *(_OWORD *)(v5 + 23) = v16;
      if (a1 != 2)
      {
        long long v19 = *(_OWORD *)a2;
        long long v20 = *(_OWORD *)(a2 + 16);
        long long v21 = *(_OWORD *)(a2 + 48);
        *((_OWORD *)v5 + 17) = *(_OWORD *)(a2 + 32);
        *((_OWORD *)v5 + 18) = v21;
        *((_OWORD *)v5 + 15) = v19;
        *((_OWORD *)v5 + 16) = v20;
        long long v22 = *(_OWORD *)(a2 + 64);
        long long v23 = *(_OWORD *)(a2 + 80);
        long long v24 = *(_OWORD *)(a2 + 96);
        v5[44] = *(void *)(a2 + 112);
        *((_OWORD *)v5 + 20) = v23;
        *((_OWORD *)v5 + 21) = v24;
        *((_OWORD *)v5 + 19) = v22;
        uint64_t v25 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v26 = v5 + 45;
          do
          {
            sub_1B628D434(a2);
            long long v27 = *(_OWORD *)(a2 + 48);
            long long v29 = *(_OWORD *)a2;
            long long v28 = *(_OWORD *)(a2 + 16);
            *((_OWORD *)v26 + 2) = *(_OWORD *)(a2 + 32);
            *((_OWORD *)v26 + 3) = v27;
            *(_OWORD *)uint64_t v26 = v29;
            *((_OWORD *)v26 + 1) = v28;
            long long v31 = *(_OWORD *)(a2 + 80);
            long long v30 = *(_OWORD *)(a2 + 96);
            long long v32 = *(_OWORD *)(a2 + 64);
            v26[14] = *(void *)(a2 + 112);
            *((_OWORD *)v26 + 5) = v31;
            *((_OWORD *)v26 + 6) = v30;
            *((_OWORD *)v26 + 4) = v32;
            v26 += 15;
            --v25;
          }
          while (v25);
        }
        sub_1B628D434(a2);
      }
      sub_1B628D434(a2);
    }
    sub_1B628D434(a2);
  }
  return v6;
}

uint64_t sub_1B6D99E24(void *a1, void *a2, void *a3)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1F0F6B7A8, v6, v7, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v41);
  if (v41 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1F0F74BA8;
    long long v12 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v6, v7, v8, v10);
    if (v6)
    {
      if (v8)
      {
        swift_getObjectType();
        do
        {
          v11 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          uint64_t v13 = sub_1B6E32108();
          swift_unknownObjectRelease();
          *v12++ = v13;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v21 = a1[6];
      uint64_t v20 = a1[7];
      uint64_t v22 = v20 - v21;
      if (v20 != v21)
      {
        swift_getObjectType();
        long long v31 = &v12[v21];
        uint64_t v32 = v11 + 4 * v21;
        do
        {
          v32 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          uint64_t v33 = sub_1B6E32108();
          swift_unknownObjectRelease();
          *v31++ = v33;
          --v22;
        }
        while (v22);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v36 = v7;
    uint64_t v40 = v9;
    if (v6)
    {
      long long v35 = v6;
      uint64_t v39 = (void *)a2[4];
      uint64_t v37 = sub_1B6D97130(v8, 0, (uint64_t)v39);
      uint64_t v38 = v14;
      uint64_t v34 = v15;
      if (v8)
      {
        swift_getObjectType();
        long long v16 = v37;
        uint64_t v17 = v8;
        do
        {
          v11 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          uint64_t v18 = sub_1B6E32108();
          swift_unknownObjectRelease();
          *v16++ = v18;
          --v17;
        }
        while (v17);
      }
      long long v19 = v37;
      sub_1B6D825B4(v35, v36, v8, (uint64_t)v37, v34);
    }
    else
    {
      uint64_t v23 = a1[6];
      uint64_t v24 = a1[7];
      uint64_t v39 = (void *)a2[4];
      long long v19 = sub_1B6D97130(v24 - v23, 0, (uint64_t)v39);
      uint64_t v38 = v25;
      uint64_t v26 = v24 - v23;
      if (v24 != v23)
      {
        swift_getObjectType();
        long long v27 = v19;
        uint64_t v28 = v11 + 4 * v23;
        do
        {
          v28 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          uint64_t v29 = sub_1B6E32108();
          swift_unknownObjectRelease();
          *v27++ = v29;
          --v26;
        }
        while (v26);
      }
      sub_1B6D82704(*(void *)(v40 + 232), *(void *)(v40 + 240));
    }
    ecs_stack_allocator_deallocate(v39, (unint64_t)v19, 8 * v38);
    return swift_release();
  }
}

uint64_t sub_1B6D9A178(uint64_t a1, uint64_t a2)
{
  return sub_1B6D9F6B0(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D99E24);
}

uint64_t sub_1B6D9A1A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for PrimitiveGenerator, (uint64_t)&off_1F0F7A410, v6, v7, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for MeshModel, &v40);
  if (v40 == 1)
  {
    a2[9] = &type metadata for MeshModel;
    a2[10] = &off_1F0FA8FD8;
    uint64_t v12 = sub_1B62C9024((uint64_t)&type metadata for MeshModel, (uint64_t)&off_1F0FA8FD8, v6, v7, v8, v10);
    uint64_t v13 = (void *)v12;
    if (v6)
    {
      for (; v8; --v8)
      {
        sub_1B6AAA994(v11, v13, a3);
        if (v3) {
          break;
        }
        v13 += 2;
        v11 += 176;
      }
    }
    else
    {
      uint64_t v20 = a1[6];
      uint64_t v21 = a1[7];
      uint64_t v22 = v21 - v20;
      if (v21 != v20)
      {
        uint64_t v23 = (void *)(v12 + 16 * v20);
        uint64_t v24 = v11 + 176 * v20;
        do
        {
          sub_1B6AAA994(v24, v23, a3);
          if (v3) {
            break;
          }
          v23 += 2;
          v24 += 176;
          --v22;
        }
        while (v22);
      }
    }
    return swift_release();
  }
  uint64_t v37 = v9;
  if (v6)
  {
    uint64_t v36 = (void *)a2[4];
    uint64_t v14 = sub_1B6D878C8(v8, 0, MEMORY[0x1E4FBC860], (uint64_t)v36);
    unint64_t v15 = (unint64_t)v14;
    uint64_t v38 = v16;
    uint64_t v35 = v17;
    if (v8)
    {
      uint64_t v18 = v14;
      uint64_t v19 = v8;
      while (1)
      {
        sub_1B6AAA994(v11, v18, a3);
        if (v3) {
          break;
        }
        v18 += 2;
        v11 += 176;
        if (!--v19) {
          goto LABEL_23;
        }
      }
      ecs_stack_allocator_deallocate(v36, v15, 16 * v38);
      return swift_release();
    }
LABEL_23:
    sub_1B6D843C0(v6, v7, v8, v15, v35);
    uint64_t v33 = v36;
LABEL_24:
    ecs_stack_allocator_deallocate(v33, v15, 16 * v38);
    return swift_release();
  }
  uint64_t v26 = a1[6];
  uint64_t v25 = a1[7];
  long long v27 = (void *)a2[4];
  uint64_t v28 = sub_1B6D878C8(v25 - v26, 0, MEMORY[0x1E4FBC860], (uint64_t)v27);
  unint64_t v15 = (unint64_t)v28;
  uint64_t v38 = v29;
  uint64_t v30 = v25 - v26;
  if (!v30)
  {
LABEL_22:
    uint64_t v33 = v27;
    sub_1B6D84570(*(void *)(v37 + 232), *(void *)(v37 + 240));
    goto LABEL_24;
  }
  uint64_t v31 = v11 + 176 * v26;
  uint64_t v32 = v28;
  while (1)
  {
    sub_1B6AAA994(v31, v32, a3);
    if (v3) {
      break;
    }
    v32 += 2;
    v31 += 176;
    if (!--v30) {
      goto LABEL_22;
    }
  }
  ecs_stack_allocator_deallocate(v27, v15, 16 * v38);
  return swift_release();
}

uint64_t sub_1B6D9A4A0(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9A1A4);
}

uint64_t sub_1B6D9A4CC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v12 = (void *)sub_1B62C9024((uint64_t)&type metadata for MeshFileAsset, (uint64_t)&off_1F0F5FFE0, v8, v7, v9, v11);
  sub_1B6345398(*(void *)(v10 + 40), (uint64_t)&type metadata for MeshModel, &v48);
  if (v48 != 1)
  {
    uint64_t v42 = v7;
    uint64_t v45 = a2;
    if (v8)
    {
      uint64_t v16 = a2[4];
      uint64_t v17 = sub_1B6D878C8(v9, 0, MEMORY[0x1E4FBC860], v16);
      uint64_t v40 = v18;
      uint64_t v41 = (uint64_t)v17;
      uint64_t v44 = v19;
      if (v9)
      {
        uint64_t v20 = v8;
        uint64_t v21 = v17;
        uint64_t v22 = v9;
        while (1)
        {
          uint64_t v23 = *v20++;
          sub_1B6BE2E10(v10, v23, v12, v21, a3, a4);
          if (v4) {
            break;
          }
          v21 += 2;
          v12 += 7;
          if (!--v22) {
            goto LABEL_12;
          }
        }
        unint64_t v35 = 16 * v44;
        uint64_t v25 = (void *)v16;
        unint64_t v36 = v41;
        goto LABEL_26;
      }
LABEL_12:
      unint64_t v24 = v41;
      sub_1B6D843C0(v8, v42, v9, v41, v40);
      uint64_t v25 = (void *)v16;
    }
    else
    {
      uint64_t v31 = a1[6];
      uint64_t v30 = a1[7];
      uint64_t v43 = v45[4];
      uint64_t v32 = sub_1B6D878C8(v30 - v31, 0, MEMORY[0x1E4FBC860], v43);
      uint64_t v44 = v33;
      if (v30 != v31)
      {
        uint64_t v37 = &v12[7 * v31];
        uint64_t v34 = v32;
        uint64_t v38 = v32;
        while (1)
        {
          sub_1B6BE2E10(v10, v31, v37, v38, a3, a4);
          if (v4) {
            break;
          }
          ++v31;
          v38 += 2;
          v37 += 7;
          if (v30 == v31) {
            goto LABEL_24;
          }
        }
        uint64_t v25 = (void *)v43;
        unint64_t v35 = 16 * v44;
        unint64_t v36 = (unint64_t)v34;
        goto LABEL_26;
      }
      uint64_t v34 = v32;
LABEL_24:
      unint64_t v24 = (unint64_t)v34;
      sub_1B6D84570(*(void *)(v10 + 232), *(void *)(v10 + 240));
      uint64_t v25 = (void *)v43;
    }
    unint64_t v35 = 16 * v44;
    unint64_t v36 = v24;
LABEL_26:
    ecs_stack_allocator_deallocate(v25, v36, v35);
    return swift_release();
  }
  a2[9] = &type metadata for MeshModel;
  a2[10] = &off_1F0FA8FD8;
  uint64_t v13 = sub_1B62C9024((uint64_t)&type metadata for MeshModel, (uint64_t)&off_1F0FA8FD8, v8, v7, v9, v11);
  uint64_t v14 = (uint64_t *)v13;
  if (v8)
  {
    for (; v9; --v9)
    {
      uint64_t v15 = *v8++;
      sub_1B6BE2E10(v10, v15, v12, v14, a3, a4);
      if (v4) {
        break;
      }
      v14 += 2;
      v12 += 7;
    }
  }
  else
  {
    uint64_t v27 = a1[6];
    uint64_t v26 = a1[7];
    if (v27 != v26)
    {
      uint64_t v28 = (uint64_t *)(v13 + 16 * v27);
      uint64_t v29 = &v12[7 * v27];
      do
      {
        sub_1B6BE2E10(v10, v27, v29, v28, a3, a4);
        if (v4) {
          break;
        }
        ++v27;
        v28 += 2;
        v29 += 7;
      }
      while (v26 != v27);
    }
  }
  return swift_release();
}

uint64_t sub_1B6D9A7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D9AB54(a1, a2, a3, (void (*)(void *, void *, uint64_t, uint64_t))sub_1B6D9A4CC);
}

uint64_t sub_1B6D9A810(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = (uint64_t *)a1[11];
  uint64_t v10 = a1[12];
  uint64_t v11 = a1[13];
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  swift_retain();
  uint64_t v14 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for MeshReferenceAsset, (uint64_t)&off_1F0F772A0, v9, v10, v11, v13);
  sub_1B6345398(*(void *)(v12 + 40), (uint64_t)&type metadata for MeshModel, &v45);
  uint64_t v43 = v12;
  if (v45 == 1)
  {
    a2[9] = &type metadata for MeshModel;
    a2[10] = &off_1F0FA8FD8;
    uint64_t v15 = sub_1B62C9024((uint64_t)&type metadata for MeshModel, (uint64_t)&off_1F0FA8FD8, v9, v10, v11, v13);
    uint64_t v16 = (uint64_t *)v15;
    if (v9)
    {
      for (; v11; --v11)
      {
        sub_1B6BE37EC(v14, v16, a3, a4);
        if (v5) {
          break;
        }
        v16 += 2;
        v14 += 4;
      }
    }
    else
    {
      uint64_t v23 = a1[6];
      uint64_t v24 = a1[7];
      uint64_t v25 = v24 - v23;
      if (v24 != v23)
      {
        uint64_t v34 = (uint64_t *)(v15 + 16 * v23);
        unint64_t v35 = &v14[4 * v23];
        do
        {
          sub_1B6BE37EC(v35, v34, a3, a4);
          if (v5) {
            break;
          }
          v34 += 2;
          v35 += 4;
          --v25;
        }
        while (v25);
      }
    }
    return swift_release();
  }
  uint64_t v41 = v10;
  if (v9)
  {
    uint64_t v17 = (void *)a2[4];
    uint64_t v18 = sub_1B6D878C8(v11, 0, MEMORY[0x1E4FBC860], (uint64_t)v17);
    unint64_t v40 = (unint64_t)v18;
    uint64_t v42 = v19;
    uint64_t v39 = v20;
    if (v11)
    {
      uint64_t v21 = v18;
      uint64_t v22 = v11;
      while (1)
      {
        sub_1B6BE37EC(v14, v21, a3, a4);
        if (v5) {
          break;
        }
        v21 += 2;
        v14 += 4;
        if (!--v22) {
          goto LABEL_17;
        }
      }
      ecs_stack_allocator_deallocate(v17, v40, 16 * v42);
      return swift_release();
    }
LABEL_17:
    unint64_t v33 = v40;
    sub_1B6D843C0(v9, v41, v11, v40, v39);
    uint64_t v28 = v17;
LABEL_27:
    ecs_stack_allocator_deallocate(v28, v33, 16 * v42);
    return swift_release();
  }
  uint64_t v27 = a1[6];
  uint64_t v26 = a1[7];
  uint64_t v28 = (void *)a2[4];
  uint64_t v29 = sub_1B6D878C8(v26 - v27, 0, MEMORY[0x1E4FBC860], (uint64_t)v28);
  uint64_t v42 = v30;
  uint64_t v31 = v26 - v27;
  if (!v31)
  {
    unint64_t v32 = (unint64_t)v29;
LABEL_26:
    unint64_t v33 = v32;
    sub_1B6D84570(*(void *)(v43 + 232), *(void *)(v43 + 240));
    goto LABEL_27;
  }
  unint64_t v36 = &v14[4 * v27];
  unint64_t v32 = (unint64_t)v29;
  uint64_t v37 = v29;
  while (1)
  {
    sub_1B6BE37EC(v36, v37, a3, a4);
    if (v5) {
      break;
    }
    v37 += 2;
    v36 += 4;
    if (!--v31) {
      goto LABEL_26;
    }
  }
  ecs_stack_allocator_deallocate(v28, v32, 16 * v42);
  return swift_release();
}

uint64_t sub_1B6D9AB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D9AB54(a1, a2, a3, (void (*)(void *, void *, uint64_t, uint64_t))sub_1B6D9A810);
}

uint64_t sub_1B6D9AB54(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(void *, void *, uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  long long v32 = *(_OWORD *)result;
  long long v33 = *(_OWORD *)(result + 16);
  uint64_t v34 = *(void *)(result + 32);
  uint64_t v25 = *(void *)(result + 80);
  if (v25 >= 1)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)(result + 40);
    uint64_t v10 = *(void *)(result + 56);
    uint64_t v11 = *(void *)(result + 64);
    uint64_t v12 = *(void **)(result + 72);
    uint64_t v13 = v12[4];
    swift_retain();
    swift_retain();
    ecs_stack_allocator_push_snapshot(v13);
    if (v10)
    {
      uint64_t v23 = v11;
      int v45 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v22 = v8;
      sub_1B62F1F58(v8);
      uint64_t v14 = (uint64_t *)(v9 + 24);
      uint64_t v24 = a2;
      while (1)
      {
        uint64_t v27 = v10;
        uint64_t v15 = *((unsigned int *)v14 - 6);
        uint64_t v16 = *((unsigned int *)v14 - 5);
        uint64_t v17 = *((unsigned int *)v14 - 4);
        uint64_t v29 = *v14;
        uint64_t v30 = *(v14 - 1);
        uint64_t v18 = v14[2];
        uint64_t v28 = v14[1];
        uint64_t v31 = v5;
        if (v45)
        {
          uint64_t v19 = *(os_unfair_lock_s **)(v18 + 376);
          swift_retain();
          os_unfair_lock_lock(v19);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v13);
        sub_1B62CA6FC((uint64_t)(v12 + 6), (uint64_t)v39, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v20 = v12[4];
        uint64_t v21 = *(void *)(*(void *)(*(void *)(*(void *)(v18 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v12[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
        v12[7] = v21;
        v12[9] = 0;
        v12[10] = 0;
        unsigned char v12[8] = 0;
        swift_release();
        v40[0] = v23;
        v40[1] = v18;
        v40[2] = v12;
        v40[3] = v17;
        v40[4] = (v16 - v15 + v17);
        v40[5] = v25;
        v40[6] = v15;
        v40[7] = v16;
        v40[8] = 0;
        v40[9] = 0;
        char v41 = 1;
        uint64_t v42 = v30;
        uint64_t v43 = v29;
        uint64_t v44 = v28;
        swift_retain();
        swift_retain();
        a4(v40, v12, v24, a3);
        uint64_t v5 = v31;
        if (v31) {
          break;
        }
        swift_release();
        swift_release();
        v37[0] = v32;
        v37[1] = v33;
        uint64_t v38 = v34;
        sub_1B6345178(v12, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B634507C((char *)v18);
        ecs_stack_allocator_pop_snapshot(v13);
        if (v45)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
        }
        swift_release();
        v14 += 6;
        uint64_t v10 = v27 - 1;
        if (v27 == 1)
        {
          sub_1B62F073C(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      swift_release();
      v35[0] = v32;
      v35[1] = v33;
      uint64_t v36 = v34;
      sub_1B6345178(v12, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B634507C((char *)v18);
      ecs_stack_allocator_pop_snapshot(v13);
      if (v45)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
      }
      sub_1B62F073C(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v12[4]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D9AEC0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1;
  v121[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = swift_retain();
  uint64_t v9 = sub_1B6642F58(v8, v6);
  uint64_t v10 = &off_1F0F65698;
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for SDFRuntimeData, v117);
  uint64_t v11 = v3;
  uint64_t v114 = a3;
  uint64_t v105 = v7;
  if (LOBYTE(v117[0]) != 1)
  {
    sub_1B6DA0D94(v6 + 88, (uint64_t)v116, (uint64_t (*)(void))sub_1B6786014);
    sub_1B6DA0D94((uint64_t)v116, (uint64_t)v121, (uint64_t (*)(void))sub_1B6786014);
    if (v121[0]) {
      uint64_t v33 = v121[2];
    }
    else {
      uint64_t v33 = *(void *)(v6 + 56) - *(void *)(v6 + 48);
    }
    uint64_t v118 = 0;
    memset(v117, 0, sizeof(v117));
    uint64_t v104 = (void *)a2[4];
    uint64_t v13 = (uint64_t)sub_1B6D879A0(v33, v117, (uint64_t)v104);
    uint64_t v101 = v37;
    uint64_t v102 = v36;
    sub_1B6DA0D94((uint64_t)v116, (uint64_t)v119, (uint64_t (*)(void))sub_1B6786014);
    uint64_t v103 = v13;
    if (v119[0])
    {
      uint64_t v100 = (uint64_t *)v119[0];
      uint64_t v38 = v120;
      uint64_t v98 = v119[1];
      uint64_t v99 = v120;
      if (v120)
      {
        uint64_t v39 = *(void *)(*(void *)(type metadata accessor for SDFFileAsset() - 8) + 72);
        uint64_t v6 = v13;
        uint64_t v111 = v39;
        while (2)
        {
          uint64_t v40 = sub_1B6E30F68();
          if (!v11)
          {
            uint64_t v10 = (_UNKNOWN **)v41;
            uint64_t v13 = v40;
            switch(v41 >> 62)
            {
              case 1uLL:
                swift_retain_n();
                sub_1B62FFBB0(v13, (unint64_t)v10);
                uint64_t v50 = sub_1B6E30B98();
                if (v50) {
                  v50 += (int)v13 - sub_1B6E30BC8();
                }
                uint64_t v51 = sub_1B6E30BB8();
                uint64_t v52 = (v13 >> 32) - (int)v13;
                if (v51 < v52) {
                  uint64_t v52 = v51;
                }
                uint64_t v53 = v50 + v52;
                if (v50) {
                  uint64_t v54 = v53;
                }
                else {
                  uint64_t v54 = 0;
                }
                uint64_t v55 = (unsigned __int16 *)v50;
                a3 = v114;
                sub_1B6D3BC2C(v55, v54, (uint64_t *)v6, v114);
                uint64_t v11 = 0;
                swift_release();
                sub_1B62C2360(v13, (unint64_t)v10);
                goto LABEL_36;
              case 2uLL:
                uint64_t v43 = *(void *)(v40 + 16);
                uint64_t v107 = *(void *)(v40 + 24);
                swift_retain_n();
                swift_retain();
                swift_retain();
                uint64_t v44 = sub_1B6E30B98();
                if (v44) {
                  v44 += v43 - sub_1B6E30BC8();
                }
                uint64_t v45 = sub_1B6E30BB8();
                uint64_t v46 = v107 - v43;
                if (v45 < v107 - v43) {
                  uint64_t v46 = v45;
                }
                uint64_t v47 = v44 + v46;
                if (v44) {
                  uint64_t v48 = v47;
                }
                else {
                  uint64_t v48 = 0;
                }
                uint64_t v49 = (unsigned __int16 *)v44;
                a3 = v114;
                sub_1B6D3BC2C(v49, v48, (uint64_t *)v6, v114);
                uint64_t v11 = 0;
                swift_release();
                swift_release();
                swift_release();
LABEL_36:
                sub_1B62C2360(v13, (unint64_t)v10);
                swift_release_n();
                uint64_t v39 = v111;
                goto LABEL_37;
              case 3uLL:
                memset(v115, 0, 14);
                swift_retain_n();
                uint64_t v42 = (char *)v115;
                goto LABEL_50;
              default:
                v115[0] = v40;
                LOWORD(v115[1]) = v41;
                BYTE2(v115[1]) = BYTE2(v41);
                BYTE3(v115[1]) = BYTE3(v41);
                BYTE4(v115[1]) = BYTE4(v41);
                BYTE5(v115[1]) = BYTE5(v41);
                swift_retain_n();
                uint64_t v42 = (char *)v115 + BYTE6(v10);
LABEL_50:
                sub_1B6D3BC2C((unsigned __int16 *)v115, (uint64_t)v42, (uint64_t *)v6, a3);
                uint64_t v11 = 0;
                sub_1B62C2360(v13, (unint64_t)v10);
                swift_release_n();
LABEL_37:
                v6 += 40;
                v9 += v39;
                if (--v38) {
                  continue;
                }
                goto LABEL_59;
            }
          }
          goto LABEL_111;
        }
      }
LABEL_59:
      unint64_t v56 = v103;
      sub_1B6D84708(v100, v98, v99, v103, v101);
    }
    else
    {
      uint64_t v58 = *(void *)(v6 + 48);
      uint64_t v57 = *(void *)(v6 + 56);
      uint64_t v59 = v57 - v58;
      if (v57 != v58)
      {
        uint64_t v113 = *(void *)(*(void *)(type metadata accessor for SDFFileAsset() - 8) + 72);
        uint64_t v81 = v9 + v58 * v113;
        do
        {
          uint64_t v82 = sub_1B6E30F68();
          if (v11) {
            goto LABEL_111;
          }
          uint64_t v10 = (_UNKNOWN **)v83;
          uint64_t v6 = v82;
          switch(v83 >> 62)
          {
            case 1uLL:
              swift_retain_n();
              sub_1B62FFBB0(v6, (unint64_t)v10);
              uint64_t v92 = sub_1B6E30B98();
              if (v92) {
                v92 += (int)v6 - sub_1B6E30BC8();
              }
              uint64_t v93 = sub_1B6E30BB8();
              uint64_t v94 = (v6 >> 32) - (int)v6;
              if (v93 < v94) {
                uint64_t v94 = v93;
              }
              uint64_t v95 = v92 + v94;
              if (v92) {
                uint64_t v96 = v95;
              }
              else {
                uint64_t v96 = 0;
              }
              uint64_t v97 = (unsigned __int16 *)v92;
              a3 = v114;
              sub_1B6D3BC2C(v97, v96, (uint64_t *)v13, v114);
              uint64_t v11 = 0;
              swift_release();
              sub_1B62C2360(v6, (unint64_t)v10);
              break;
            case 2uLL:
              uint64_t v85 = *(void *)(v82 + 16);
              uint64_t v109 = *(void *)(v82 + 24);
              swift_retain_n();
              swift_retain();
              swift_retain();
              uint64_t v86 = sub_1B6E30B98();
              if (v86) {
                v86 += v85 - sub_1B6E30BC8();
              }
              uint64_t v87 = sub_1B6E30BB8();
              uint64_t v88 = v109 - v85;
              if (v87 < v109 - v85) {
                uint64_t v88 = v87;
              }
              uint64_t v89 = v86 + v88;
              if (v86) {
                uint64_t v90 = v89;
              }
              else {
                uint64_t v90 = 0;
              }
              uint64_t v91 = (unsigned __int16 *)v86;
              a3 = v114;
              sub_1B6D3BC2C(v91, v90, (uint64_t *)v13, v114);
              uint64_t v11 = 0;
              swift_release();
              swift_release();
              swift_release();
              break;
            case 3uLL:
              memset(v115, 0, 14);
              swift_retain_n();
              uint64_t v84 = (char *)v115;
              goto LABEL_102;
            default:
              v115[0] = v82;
              LOWORD(v115[1]) = v83;
              BYTE2(v115[1]) = BYTE2(v83);
              BYTE3(v115[1]) = BYTE3(v83);
              BYTE4(v115[1]) = BYTE4(v83);
              BYTE5(v115[1]) = BYTE5(v83);
              swift_retain_n();
              uint64_t v84 = (char *)v115 + BYTE6(v10);
LABEL_102:
              sub_1B6D3BC2C((unsigned __int16 *)v115, (uint64_t)v84, (uint64_t *)v13, a3);
              uint64_t v11 = 0;
              break;
          }
          sub_1B62C2360(v6, (unint64_t)v10);
          swift_release_n();
          v13 += 40;
          v81 += v113;
        }
        while (--v59);
      }
      unint64_t v56 = v103;
      sub_1B6D8485C(*(void *)(v105 + 232), *(void *)(v105 + 240));
    }
    ecs_stack_allocator_deallocate(v104, v56, 40 * v102);
    return swift_release();
  }
  a2[9] = &type metadata for SDFRuntimeData;
  a2[10] = &off_1F0F65698;
  uint64_t v12 = *(uint64_t **)(v6 + 88);
  uint64_t v13 = *(void *)(v6 + 104);
  uint64_t v14 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for SDFRuntimeData, (uint64_t)&off_1F0F65698, v12, *(void *)(v6 + 96), v13, *(void *)(v6 + 16));
  if (!v12)
  {
    uint64_t v35 = *(void *)(v6 + 48);
    uint64_t v34 = *(void *)(v6 + 56);
    uint64_t v10 = (_UNKNOWN **)(v34 - v35);
    if (v34 == v35) {
      return swift_release();
    }
    uint64_t v61 = *(void *)(*(void *)(type metadata accessor for SDFFileAsset() - 8) + 72);
    char v62 = &v14[5 * v35];
    uint64_t v63 = v9 + v35 * v61;
    uint64_t v64 = v114;
    uint64_t v112 = v61;
    while (2)
    {
      uint64_t v65 = sub_1B6E30F68();
      if (!v11)
      {
        uint64_t v6 = v66;
        uint64_t v13 = v65;
        switch(v66 >> 62)
        {
          case 1uLL:
            swift_retain_n();
            sub_1B62FFBB0(v13, v6);
            uint64_t v75 = sub_1B6E30B98();
            if (v75) {
              v75 += (int)v13 - sub_1B6E30BC8();
            }
            uint64_t v76 = sub_1B6E30BB8();
            uint64_t v77 = (v13 >> 32) - (int)v13;
            if (v76 < v77) {
              uint64_t v77 = v76;
            }
            uint64_t v78 = v75 + v77;
            if (v75) {
              uint64_t v79 = v78;
            }
            else {
              uint64_t v79 = 0;
            }
            uint64_t v80 = (unsigned __int16 *)v75;
            uint64_t v64 = v114;
            sub_1B6D3BC2C(v80, v79, v62, v114);
            uint64_t v11 = 0;
            swift_release();
            sub_1B62C2360(v13, v6);
            goto LABEL_65;
          case 2uLL:
            uint64_t v68 = *(void *)(v65 + 16);
            uint64_t v108 = *(void *)(v65 + 24);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v69 = sub_1B6E30B98();
            if (v69) {
              v69 += v68 - sub_1B6E30BC8();
            }
            uint64_t v70 = sub_1B6E30BB8();
            uint64_t v71 = v108 - v68;
            if (v70 < v108 - v68) {
              uint64_t v71 = v70;
            }
            uint64_t v72 = v69 + v71;
            if (v69) {
              uint64_t v73 = v72;
            }
            else {
              uint64_t v73 = 0;
            }
            uint64_t v74 = (unsigned __int16 *)v69;
            uint64_t v64 = v114;
            sub_1B6D3BC2C(v74, v73, v62, v114);
            uint64_t v11 = 0;
            swift_release();
            swift_release();
            swift_release();
LABEL_65:
            sub_1B62C2360(v13, v6);
            swift_release_n();
            uint64_t v61 = v112;
            goto LABEL_66;
          case 3uLL:
            *(void *)((char *)v117 + 6) = 0;
            *(void *)&v117[0] = 0;
            swift_retain_n();
            uint64_t v67 = v117;
            goto LABEL_79;
          default:
            *(void *)&v117[0] = v65;
            WORD4(v117[0]) = v66;
            BYTE10(v117[0]) = BYTE2(v66);
            BYTE11(v117[0]) = BYTE3(v66);
            BYTE12(v117[0]) = BYTE4(v66);
            BYTE13(v117[0]) = BYTE5(v66);
            swift_retain_n();
            uint64_t v67 = (long long *)((char *)v117 + BYTE6(v6));
LABEL_79:
            sub_1B6D3BC2C((unsigned __int16 *)v117, (uint64_t)v67, v62, v64);
            uint64_t v11 = 0;
            sub_1B62C2360(v13, v6);
            swift_release_n();
LABEL_66:
            v62 += 5;
            v63 += v61;
            uint64_t v10 = (_UNKNOWN **)((char *)v10 - 1);
            if (v10) {
              continue;
            }
            return swift_release();
        }
      }
      break;
    }
LABEL_111:

    sub_1B6E32BE8();
    __break(1u);
    swift_release_n();
    __break(1u);
    swift_release();
    swift_release();
    swift_release_n();
    __break(1u);
    swift_release_n();
    sub_1B62C2360(v6, (unint64_t)v10);
    __break(1u);
    swift_release_n();
    sub_1B62C2360(v13, v6);
    __break(1u);
    JUMPOUT(0x1B6D9BC44);
  }
  if (v13)
  {
    uint64_t v15 = *(void *)(*(void *)(type metadata accessor for SDFFileAsset() - 8) + 72);
    uint64_t v16 = v114;
    uint64_t v110 = v15;
    while (2)
    {
      uint64_t v17 = sub_1B6E30F68();
      if (!v11)
      {
        uint64_t v10 = (_UNKNOWN **)v18;
        uint64_t v6 = v17;
        switch(v18 >> 62)
        {
          case 1uLL:
            swift_retain_n();
            sub_1B62FFBB0(v6, (unint64_t)v10);
            uint64_t v27 = sub_1B6E30B98();
            if (v27) {
              v27 += (int)v6 - sub_1B6E30BC8();
            }
            uint64_t v28 = sub_1B6E30BB8();
            uint64_t v29 = (v6 >> 32) - (int)v6;
            if (v28 < v29) {
              uint64_t v29 = v28;
            }
            uint64_t v30 = v27 + v29;
            if (v27) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = 0;
            }
            long long v32 = (unsigned __int16 *)v27;
            uint64_t v16 = v114;
            sub_1B6D3BC2C(v32, v31, v14, v114);
            uint64_t v11 = 0;
            swift_release();
            sub_1B62C2360(v6, (unint64_t)v10);
            goto LABEL_5;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v106 = *(void *)(v17 + 24);
            swift_retain_n();
            swift_retain();
            swift_retain();
            uint64_t v21 = sub_1B6E30B98();
            if (v21) {
              v21 += v20 - sub_1B6E30BC8();
            }
            uint64_t v22 = sub_1B6E30BB8();
            uint64_t v23 = v106 - v20;
            if (v22 < v106 - v20) {
              uint64_t v23 = v22;
            }
            uint64_t v24 = v21 + v23;
            if (v21) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = (unsigned __int16 *)v21;
            uint64_t v16 = v114;
            sub_1B6D3BC2C(v26, v25, v14, v114);
            uint64_t v11 = 0;
            swift_release();
            swift_release();
            swift_release();
LABEL_5:
            sub_1B62C2360(v6, (unint64_t)v10);
            swift_release_n();
            uint64_t v15 = v110;
            goto LABEL_6;
          case 3uLL:
            *(void *)((char *)v117 + 6) = 0;
            *(void *)&v117[0] = 0;
            swift_retain_n();
            uint64_t v19 = v117;
            goto LABEL_19;
          default:
            *(void *)&v117[0] = v17;
            WORD4(v117[0]) = v18;
            BYTE10(v117[0]) = BYTE2(v18);
            BYTE11(v117[0]) = BYTE3(v18);
            BYTE12(v117[0]) = BYTE4(v18);
            BYTE13(v117[0]) = BYTE5(v18);
            swift_retain_n();
            uint64_t v19 = (long long *)((char *)v117 + BYTE6(v10));
LABEL_19:
            sub_1B6D3BC2C((unsigned __int16 *)v117, (uint64_t)v19, v14, v16);
            uint64_t v11 = 0;
            sub_1B62C2360(v6, (unint64_t)v10);
            swift_release_n();
LABEL_6:
            v14 += 5;
            v9 += v15;
            if (--v13) {
              continue;
            }
            return swift_release();
        }
      }
      goto LABEL_111;
    }
  }
  return swift_release();
}

uint64_t sub_1B6D9BC84(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9AEC0);
}

void *sub_1B6D9BCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = ecs_stack_allocator_allocate(a3, 8 * a1, 8);
  uint64_t v6 = v5;
  if (a1)
  {
    *uint64_t v5 = a2;
    if (a1 != 1)
    {
      v5[1] = a2;
      if (a1 != 2)
      {
        _OWORD v5[2] = a2;
        uint64_t v7 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v8 = v5 + 3;
          do
          {
            *v8++ = a2;
            swift_retain();
            --v7;
          }
          while (v7);
        }
        swift_retain();
      }
      swift_retain();
    }
    swift_retain();
  }
  return v6;
}

uint64_t sub_1B6D9BD5C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v11 = (void *)sub_1B62C9024((uint64_t)&type metadata for TextureFileAsset, (uint64_t)&off_1F0F6F8C8, v6, v7, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for FileWatcher, &v40);
  if (v40 != 1)
  {
    uint64_t v37 = v7;
    if (v6)
    {
      uint64_t v15 = a2[4];
      uint64_t v16 = sub_1B6D9BCB0(v8, 0, v15);
      uint64_t v38 = v15;
      uint64_t v35 = v18;
      uint64_t v36 = v17;
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v8;
        while (1)
        {
          sub_1B6D02B80(v9, v6[v19], v11, &v16[v19], a3);
          if (v3) {
            break;
          }
          ++v19;
          v11 += 6;
          if (!--v20) {
            goto LABEL_12;
          }
        }
        unint64_t v22 = 8 * v36;
LABEL_25:
        uint64_t v21 = (void *)v38;
        goto LABEL_26;
      }
LABEL_12:
      sub_1B6D849A8(v6, v37, v8, (uint64_t)v16, v35);
      uint64_t v21 = (void *)v38;
      unint64_t v22 = 8 * v36;
    }
    else
    {
      uint64_t v27 = a1[6];
      uint64_t v28 = a1[7];
      uint64_t v38 = a2[4];
      uint64_t v29 = sub_1B6D9BCB0(v28 - v27, 0, v38);
      uint64_t v16 = v29;
      uint64_t v31 = v30;
      if (v28 != v27)
      {
        long long v32 = &v11[6 * v27];
        uint64_t v33 = v29;
        while (1)
        {
          sub_1B6D02B80(v9, v27, v32, v33, a3);
          if (v3) {
            break;
          }
          ++v27;
          ++v33;
          v32 += 6;
          if (v28 == v27) {
            goto LABEL_22;
          }
        }
        unint64_t v22 = 8 * v31;
        goto LABEL_25;
      }
LABEL_22:
      sub_1B6D84AF8(*(void *)(v9 + 232), *(void *)(v9 + 240));
      uint64_t v21 = (void *)v38;
      unint64_t v22 = 8 * v31;
    }
LABEL_26:
    ecs_stack_allocator_deallocate(v21, (unint64_t)v16, v22);
    return swift_release();
  }
  a2[9] = &type metadata for FileWatcher;
  a2[10] = &off_1F0F55138;
  uint64_t v12 = sub_1B62C9024((uint64_t)&type metadata for FileWatcher, (uint64_t)&off_1F0F55138, v6, v7, v8, v10);
  uint64_t v13 = (uint64_t *)v12;
  if (v6)
  {
    for (; v8; --v8)
    {
      uint64_t v14 = *v6++;
      sub_1B6D02B80(v9, v14, v11, v13, a3);
      if (v3) {
        break;
      }
      ++v13;
      v11 += 6;
    }
  }
  else
  {
    uint64_t v23 = a1[6];
    uint64_t v24 = a1[7];
    if (v23 != v24)
    {
      uint64_t v25 = (uint64_t *)(v12 + 8 * v23);
      uint64_t v26 = &v11[6 * v23];
      do
      {
        sub_1B6D02B80(v9, v23, v26, v25, a3);
        if (v3) {
          break;
        }
        ++v23;
        ++v25;
        v26 += 6;
      }
      while (v24 != v23);
    }
  }
  return swift_release();
}

uint64_t sub_1B6D9C034(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9BD5C);
}

uint64_t sub_1B6D9C060(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v106 = a3;
  uint64_t v97 = a2;
  sub_1B638C280(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v100 = (CGImage *)((char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v98 = (char *)&v93 - v11;
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v101 = (uint64_t *)((char *)&v93 - v14);
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v102 = (CGImage *)((char *)&v93 - v17);
  uint64_t v19 = a1[11];
  uint64_t v18 = (uint64_t)a1[12];
  uint64_t v20 = (uint64_t)a1[13];
  uint64_t v21 = a1[1];
  uint64_t v22 = (uint64_t)a1[2];
  uint64_t v107 = a1;
  swift_retain();
  uint64_t v134 = sub_1B62C9024((uint64_t)&type metadata for TextureCGImage, (uint64_t)&off_1F0F66BC8, v19, v18, v20, v22);
  sub_1B6345398(v21[5], (uint64_t)&type metadata for TextureCPURuntime, v123);
  uint64_t v104 = v21;
  uint64_t v108 = v22;
  if (LOBYTE(v123[0]) == 1)
  {
    uint64_t v23 = v97;
    *(void *)(v97 + 72) = &type metadata for TextureCPURuntime;
    *(void *)(v23 + 80) = &off_1F0F74A68;
    uint64_t v24 = sub_1B62C9024((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1F0F74A68, v19, v18, v20, v108);
    uint64_t v25 = v24;
    if (v19)
    {
      uint64_t v26 = (void **)v134;
      if (v20)
      {
        uint64_t v27 = v20;
        uint64_t v28 = v107[3];
        uint64_t v103 = *v107;
        uint64_t v29 = v102;
        do
        {
          uint64_t v30 = *v19++;
          uint64_t v110 = v103;
          uint64_t v111 = v21;
          *(void *)&long long v112 = v108;
          *((void *)&v112 + 1) = v28;
          *(void *)&long long v113 = v30;
          long long v32 = *v26++;
          uint64_t v31 = v32;
          if (v32)
          {
            uint64_t v105 = (uint64_t *)v27;
            uint64_t v134 = (uint64_t)v26;
            uint64_t v33 = v31;
            sub_1B6362CBC((uint64_t)v123);
            uint64_t v34 = *(void *)(v106 + 16);
            uint64_t v35 = sub_1B6E30F48();
            (*(void (**)(CGImage *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v29, 1, 1, v35);
            sub_1B628D46C(v33, (CGColorSpace *)v123, v34, (size_t)v29, 0, 1);
            if (v4)
            {
              uint64_t v101 = v19;
              sub_1B663ABE8((uint64_t)v29);
              if (qword_1EB9852D0 != -1) {
                swift_once();
              }
              swift_getErrorValue();
              swift_retain();
              uint64_t v36 = sub_1B6E33868();
              uint64_t v107 = v4;
              uint64_t v37 = v36;
              uint64_t v39 = v38;
              int v40 = sub_1B6E32148();
              if (qword_1EB9854F8 != -1) {
                swift_once();
              }
              v117[0] = 0;
              swift_retain();
              sub_1B6B33E34(v40, v117, v37, v39);
              swift_release();
              swift_bridgeObjectRelease();

              swift_release();
              uint64_t v4 = 0;
              uint64_t v21 = v104;
              uint64_t v27 = (uint64_t)v105;
              uint64_t v26 = (void **)v134;
              uint64_t v19 = v101;
              uint64_t v29 = v102;
            }
            else
            {
              sub_1B663ABE8((uint64_t)v29);

              uint64_t v26 = (void **)v134;
              uint64_t v27 = (uint64_t)v105;
            }
          }
          uint64_t v28 = (uint64_t *)((char *)v28 + 1);
          v25 += 120;
          --v27;
        }
        while (v27);
      }
    }
    else
    {
      uint64_t v65 = v107[6];
      uint64_t v105 = v107[7];
      uint64_t v66 = v134;
      if (v65 != v105)
      {
        uint64_t v67 = v107[3];
        uint64_t v68 = v24 + 120 * (void)v65;
        uint64_t v103 = *v107;
        uint64_t v69 = v101;
        do
        {
          uint64_t v110 = v103;
          uint64_t v111 = v21;
          *(void *)&long long v112 = v108;
          *((void *)&v112 + 1) = v67;
          *(void *)&long long v113 = v65;
          uint64_t v70 = *(void **)(v66 + 8 * (void)v65);
          if (v70)
          {
            uint64_t v71 = v70;
            sub_1B6362CBC((uint64_t)v123);
            uint64_t v72 = *(void *)(v106 + 16);
            uint64_t v73 = sub_1B6E30F48();
            (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v69, 1, 1, v73);
            sub_1B628D46C(v71, (CGColorSpace *)v123, v72, (size_t)v69, 0, 1);
            if (v4)
            {
              uint64_t v102 = v71;
              sub_1B663ABE8((uint64_t)v69);
              if (qword_1EB9852D0 != -1) {
                swift_once();
              }
              swift_getErrorValue();
              swift_retain();
              uint64_t v74 = sub_1B6E33868();
              uint64_t v76 = v75;
              int v77 = sub_1B6E32148();
              uint64_t v107 = v4;
              if (qword_1EB9854F8 != -1) {
                swift_once();
              }
              v117[0] = 0;
              swift_retain();
              sub_1B6B33E34(v77, v117, v74, v76);
              swift_release();
              swift_bridgeObjectRelease();

              swift_release();
              uint64_t v4 = 0;
              uint64_t v21 = v104;
              uint64_t v66 = v134;
              uint64_t v69 = v101;
            }
            else
            {
              sub_1B663ABE8((uint64_t)v69);

              uint64_t v66 = v134;
            }
          }
          uint64_t v65 = (uint64_t *)((char *)v65 + 1);
          uint64_t v67 = (uint64_t *)((char *)v67 + 1);
          v68 += 120;
        }
        while (v105 != v65);
      }
    }
  }
  else
  {
    uint64_t v99 = v18;
    uint64_t v105 = (uint64_t *)v20;
    uint64_t v41 = v20;
    uint64_t v42 = (CGImage **)v107;
    if (!v19) {
      uint64_t v41 = (char *)v107[7] - (char *)v107[6];
    }
    RGTextureDescriptor.init()((uint64_t)&v110);
    memset(v123, 0, sizeof(v123));
    char v124 = 0;
    uint64_t v125 = v110;
    __int16 v126 = (__int16)v111;
    char v127 = BYTE2(v111);
    long long v128 = v112;
    long long v129 = v113;
    long long v130 = v114;
    uint64_t v131 = v115;
    int v132 = v116;
    uint64_t v133 = MEMORY[0x1E4FBC860];
    uint64_t v43 = *(void **)(v97 + 32);
    uint64_t v96 = sub_1B6D99CD4(v41, (uint64_t)v123, (uint64_t)v43);
    uint64_t v45 = v44;
    uint64_t v93 = v46;
    swift_bridgeObjectRelease();
    uint64_t v101 = v19;
    uint64_t v94 = v45;
    uint64_t v95 = v43;
    if (v19)
    {
      uint64_t v47 = (void **)v134;
      if (v105)
      {
        uint64_t v48 = v42[3];
        uint64_t v102 = *v42;
        uint64_t v49 = v101;
        uint64_t v50 = v96;
        uint64_t v51 = (uint64_t)v105;
        size_t v53 = (size_t)v98;
        uint64_t v52 = v99;
        do
        {
          uint64_t v54 = (CGImage *)*v49++;
          uint64_t v118 = (char *)v102;
          uint64_t v119 = v21;
          uint64_t v120 = v108;
          uint64_t v121 = v48;
          uint64_t v122 = v54;
          unint64_t v56 = *v47++;
          uint64_t v55 = v56;
          if (v56)
          {
            uint64_t v57 = v21;
            uint64_t v103 = v49;
            uint64_t v134 = (uint64_t)v47;
            uint64_t v58 = v55;
            sub_1B6362CBC((uint64_t)v117);
            uint64_t v59 = *(void *)(v106 + 16);
            uint64_t v60 = sub_1B6E30F48();
            (*(void (**)(size_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v53, 1, 1, v60);
            sub_1B628D46C(v58, (CGColorSpace *)v117, v59, v53, 0, 1);
            if (v4)
            {
              uint64_t v100 = v58;
              sub_1B663ABE8(v53);
              if (qword_1EB9852D0 != -1) {
                swift_once();
              }
              swift_getErrorValue();
              swift_retain();
              uint64_t v61 = sub_1B6E33868();
              uint64_t v63 = v62;
              int v64 = sub_1B6E32148();
              uint64_t v107 = v4;
              if (qword_1EB9854F8 != -1) {
                swift_once();
              }
              v109[0] = 0;
              swift_retain();
              sub_1B6B33E34(v64, v109, v61, v63);
              swift_release();
              swift_bridgeObjectRelease();

              swift_release();
              uint64_t v4 = 0;
              uint64_t v49 = v103;
              uint64_t v21 = v104;
              uint64_t v47 = (void **)v134;
              size_t v53 = (size_t)v98;
              uint64_t v52 = v99;
            }
            else
            {
              sub_1B663ABE8(v53);

              uint64_t v47 = (void **)v134;
              uint64_t v52 = v99;
              uint64_t v49 = v103;
              uint64_t v21 = v57;
            }
          }
          uint64_t v48 = (CGImage *)((char *)v48 + 1);
          v50 += 15;
          --v51;
        }
        while (v51);
      }
      else
      {
        uint64_t v52 = v99;
      }
      unint64_t v80 = (unint64_t)v96;
      sub_1B6D83E88(v101, v52, (uint64_t)v105, (uint64_t)v96, v93);
    }
    else
    {
      uint64_t v78 = v42[6];
      uint64_t v105 = (uint64_t *)v42[7];
      uint64_t v79 = v134;
      if (v78 != (CGImage *)v105)
      {
        uint64_t v82 = v42[3];
        uint64_t v103 = (uint64_t *)*v42;
        unint64_t v83 = v96;
        uint64_t v84 = v100;
        do
        {
          uint64_t v118 = (char *)v103;
          uint64_t v119 = v21;
          uint64_t v120 = v108;
          uint64_t v121 = v82;
          uint64_t v122 = v78;
          uint64_t v85 = *(void **)(v79 + 8 * (void)v78);
          if (v85)
          {
            uint64_t v86 = v85;
            sub_1B6362CBC((uint64_t)v117);
            uint64_t v87 = *(void *)(v106 + 16);
            uint64_t v88 = sub_1B6E30F48();
            (*(void (**)(CGImage *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v84, 1, 1, v88);
            sub_1B628D46C(v86, (CGColorSpace *)v117, v87, (size_t)v84, 0, 1);
            if (v4)
            {
              uint64_t v102 = v86;
              sub_1B663ABE8((uint64_t)v84);
              if (qword_1EB9852D0 != -1) {
                swift_once();
              }
              swift_getErrorValue();
              swift_retain();
              uint64_t v89 = sub_1B6E33868();
              uint64_t v91 = v90;
              int v92 = sub_1B6E32148();
              uint64_t v107 = v4;
              if (qword_1EB9854F8 != -1) {
                swift_once();
              }
              v109[0] = 0;
              swift_retain();
              sub_1B6B33E34(v92, v109, v89, v91);
              swift_release();
              swift_bridgeObjectRelease();

              swift_release();
              uint64_t v4 = 0;
              uint64_t v21 = v104;
              uint64_t v79 = v134;
              uint64_t v84 = v100;
            }
            else
            {
              sub_1B663ABE8((uint64_t)v84);

              uint64_t v79 = v134;
            }
          }
          uint64_t v78 = (CGImage *)((char *)v78 + 1);
          uint64_t v82 = (CGImage *)((char *)v82 + 1);
          v83 += 15;
        }
        while (v105 != (uint64_t *)v78);
      }
      unint64_t v80 = (unint64_t)v96;
      sub_1B6D83FDC(v21[29], v21[30]);
    }
    ecs_stack_allocator_deallocate(v95, v80, 120 * v94);
  }
  return swift_release();
}

uint64_t sub_1B6D9CBAC(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9C060);
}

uint64_t sub_1B6D9CBD8(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v93 = (char *)sub_1B62C9024((uint64_t)&type metadata for TextureFileData, (uint64_t)&off_1F0F6A950, v8, v7, v9, v11);
  sub_1B6345398(*(void *)(v10 + 40), (uint64_t)&type metadata for TextureCPURuntime, v110);
  uint64_t v90 = v10;
  uint64_t v121 = v11;
  if (LOBYTE(v110[0]) != 1)
  {
    uint64_t v83 = v7;
    uint64_t v92 = v9;
    if (!v8) {
      uint64_t v9 = a1[7] - a1[6];
    }
    RGTextureDescriptor.init()((uint64_t)&v97);
    memset(v110, 0, sizeof(v110));
    char v111 = 0;
    uint64_t v112 = v97;
    __int16 v113 = v98;
    char v114 = BYTE2(v98);
    long long v115 = v99;
    long long v116 = v100;
    long long v117 = v101;
    uint64_t v118 = v102;
    int v119 = v103;
    uint64_t v120 = MEMORY[0x1E4FBC860];
    uint64_t v76 = (void *)a2[4];
    int v77 = sub_1B6D99CD4(v9, (uint64_t)v110, (uint64_t)v76);
    uint64_t v75 = v29;
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    uint64_t v32 = v121;
    uint64_t v74 = v31;
    if (v8)
    {
      uint64_t v33 = v10;
      uint64_t v87 = v8;
      if (v92)
      {
        uint64_t v34 = a1[3];
        uint64_t v35 = (unint64_t *)(v93 + 8);
        uint64_t v36 = *a1;
        uint64_t v37 = v8;
        uint64_t v38 = v77;
        uint64_t v39 = v92;
        uint64_t v40 = v83;
        uint64_t v78 = *a1;
        do
        {
          uint64_t v41 = *v37++;
          uint64_t v105 = v36;
          uint64_t v106 = v33;
          uint64_t v107 = v32;
          uint64_t v108 = v34;
          uint64_t v109 = v41;
          unint64_t v42 = *v35;
          if (*v35 >> 60 != 15)
          {
            uint64_t v94 = v37;
            uint64_t v43 = *(v35 - 1);
            sub_1B62FFBB0(v43, v42);
            sub_1B6362CBC((uint64_t)v104);
            sub_1B6CFA5B8(v43, v42, (CGColorSpace *)v104, *(void *)(a3 + 16));
            if (v4)
            {
              if (qword_1EB9852D0 != -1) {
                swift_once();
              }
              swift_getErrorValue();
              swift_retain();
              uint64_t v79 = sub_1B6E33868();
              uint64_t v45 = v44;
              int v46 = sub_1B6E32148();
              if (qword_1EB9854F8 != -1) {
                swift_once();
              }
              uint64_t v96 = 0;
              swift_retain();
              sub_1B6B33E34(v46, &v96, v79, v45);
              swift_release();
              sub_1B665D488(v43, v42);
              swift_release();
              swift_bridgeObjectRelease();

              uint64_t v4 = 0;
              uint64_t v33 = v90;
            }
            else
            {
              sub_1B665D488(v43, v42);
            }
            uint64_t v32 = v121;
            uint64_t v40 = v83;
            uint64_t v36 = v78;
            uint64_t v37 = v94;
          }
          v35 += 2;
          ++v34;
          v38 += 15;
          --v39;
        }
        while (v39);
      }
      else
      {
        uint64_t v40 = v7;
      }
      unint64_t v63 = (unint64_t)v77;
      sub_1B6D83E88(v87, v40, v92, (uint64_t)v77, v74);
    }
    else
    {
      uint64_t v61 = a1[6];
      uint64_t v60 = a1[7];
      uint64_t v62 = v10;
      if (v61 != v60)
      {
        uint64_t v64 = a1[3];
        uint64_t v65 = (unint64_t *)&v93[16 * v61 + 8];
        uint64_t v66 = *a1;
        uint64_t v67 = v77;
        uint64_t v82 = *a1;
        uint64_t v85 = a1[7];
        do
        {
          uint64_t v105 = v66;
          uint64_t v106 = v62;
          uint64_t v107 = v32;
          uint64_t v108 = v64;
          uint64_t v109 = v61;
          unint64_t v68 = *v65;
          if (*v65 >> 60 != 15)
          {
            uint64_t v69 = *(v65 - 1);
            sub_1B62FFBB0(v69, *v65);
            sub_1B6362CBC((uint64_t)v104);
            sub_1B6CFA5B8(v69, v68, (CGColorSpace *)v104, *(void *)(a3 + 16));
            if (v4)
            {
              uint64_t v89 = v69;
              if (qword_1EB9852D0 != -1) {
                swift_once();
              }
              swift_getErrorValue();
              swift_retain();
              uint64_t v70 = sub_1B6E33868();
              uint64_t v72 = v71;
              int v73 = sub_1B6E32148();
              if (qword_1EB9854F8 != -1) {
                swift_once();
              }
              uint64_t v96 = 0;
              swift_retain();
              sub_1B6B33E34(v73, &v96, v70, v72);
              swift_release();
              sub_1B665D488(v89, v68);
              swift_release();
              swift_bridgeObjectRelease();

              uint64_t v4 = 0;
              uint64_t v62 = v90;
            }
            else
            {
              sub_1B665D488(v69, v68);
            }
            uint64_t v32 = v121;
            uint64_t v66 = v82;
            uint64_t v60 = v85;
          }
          ++v61;
          v65 += 2;
          ++v64;
          v67 += 15;
        }
        while (v60 != v61);
      }
      unint64_t v63 = (unint64_t)v77;
      sub_1B6D83FDC(*(void *)(v62 + 232), *(void *)(v62 + 240));
    }
    ecs_stack_allocator_deallocate(v76, v63, 120 * v75);
    return swift_release();
  }
  a2[9] = &type metadata for TextureCPURuntime;
  a2[10] = &off_1F0F74A68;
  uint64_t v12 = sub_1B62C9024((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1F0F74A68, v8, v7, v9, v11);
  uint64_t v13 = v12;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  if (!v8)
  {
    uint64_t v49 = a1[6];
    uint64_t v48 = a1[7];
    if (v49 != v48)
    {
      uint64_t v50 = a1[3];
      uint64_t v51 = v12 + 120 * v49;
      uint64_t v52 = *a1;
      size_t v53 = (unint64_t *)&v93[16 * v49 + 8];
      uint64_t v81 = *a1;
      uint64_t v84 = a1[7];
      do
      {
        uint64_t v97 = v52;
        uint64_t v98 = v14;
        *(void *)&long long v99 = v15;
        *((void *)&v99 + 1) = v50;
        *(void *)&long long v100 = v49;
        unint64_t v54 = *v53;
        if (*v53 >> 60 != 15)
        {
          uint64_t v55 = *(v53 - 1);
          sub_1B62FFBB0(v55, *v53);
          sub_1B6362CBC((uint64_t)v110);
          sub_1B6CFA5B8(v55, v54, (CGColorSpace *)v110, *(void *)(a3 + 16));
          if (v4)
          {
            uint64_t v88 = v55;
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            swift_getErrorValue();
            swift_retain();
            uint64_t v56 = sub_1B6E33868();
            uint64_t v58 = v57;
            int v59 = sub_1B6E32148();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            v104[0] = 0;
            swift_retain();
            sub_1B6B33E34(v59, v104, v56, v58);
            swift_release();
            sub_1B665D488(v88, v54);
            swift_release();
            swift_bridgeObjectRelease();

            uint64_t v4 = 0;
            uint64_t v14 = v90;
          }
          else
          {
            sub_1B665D488(v55, v54);
          }
          uint64_t v15 = v121;
          uint64_t v52 = v81;
          uint64_t v48 = v84;
        }
        ++v49;
        v53 += 2;
        ++v50;
        v51 += 120;
      }
      while (v48 != v49);
    }
    return swift_release();
  }
  if (!v9) {
    return swift_release();
  }
  uint64_t v16 = v9;
  uint64_t v17 = v3;
  uint64_t v18 = a1[3];
  uint64_t v19 = (unint64_t *)(v93 + 8);
  uint64_t v20 = *a1;
  uint64_t v80 = *a1;
  do
  {
    uint64_t v21 = *v8++;
    uint64_t v97 = v20;
    uint64_t v98 = v14;
    *(void *)&long long v99 = v15;
    *((void *)&v99 + 1) = v18;
    *(void *)&long long v100 = v21;
    unint64_t v22 = *v19;
    if (*v19 >> 60 != 15)
    {
      uint64_t v91 = v16;
      uint64_t v23 = *(v19 - 1);
      sub_1B62FFBB0(v23, v22);
      sub_1B6362CBC((uint64_t)v110);
      uint64_t v24 = v17;
      sub_1B6CFA5B8(v23, v22, (CGColorSpace *)v110, *(void *)(a3 + 16));
      if (v17)
      {
        uint64_t v86 = v8;
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        swift_getErrorValue();
        swift_retain();
        uint64_t v25 = sub_1B6E33868();
        uint64_t v27 = v26;
        int v28 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        v104[0] = 0;
        swift_retain();
        sub_1B6B33E34(v28, v104, v25, v27);
        swift_release();
        sub_1B665D488(v23, v22);
        swift_release();
        swift_bridgeObjectRelease();

        uint64_t v17 = 0;
        uint64_t v8 = v86;
        uint64_t v14 = v10;
      }
      else
      {
        sub_1B665D488(v23, v22);
      }
      uint64_t v15 = v121;
      uint64_t v16 = v91;
      uint64_t v20 = v80;
    }
    v19 += 2;
    ++v18;
    v13 += 120;
    --v16;
  }
  while (v16);
  return swift_release();
}

uint64_t sub_1B6D9D530(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9CBD8);
}

uint64_t sub_1B6D9D55C(void *a1, void *a2)
{
  uint64_t v4 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  swift_retain();
  uint64_t v9 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for TextureRenderTarget, (uint64_t)&off_1F0F7F530, v4, v5, v6, v8);
  sub_1B6345398(*(void *)(v7 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v38);
  if (v38 != 1)
  {
    uint64_t v35 = v5;
    if (v4)
    {
      uint64_t v13 = a2[4];
      uint64_t v14 = sub_1B6D97130(v6, 0, v13);
      uint64_t v36 = v13;
      uint64_t v33 = v16;
      uint64_t v34 = v15;
      if (v6)
      {
        uint64_t v17 = 0;
        uint64_t v18 = v6;
        while (1)
        {
          sub_1B6D02F68(v7, v4[v17], v9, &v14[v17]);
          if (v2) {
            break;
          }
          ++v17;
          v9 += 10;
          if (!--v18) {
            goto LABEL_12;
          }
        }
        unint64_t v20 = 8 * v34;
LABEL_25:
        uint64_t v19 = (void *)v36;
        goto LABEL_26;
      }
LABEL_12:
      sub_1B6D825B4(v4, v35, v6, (uint64_t)v14, v33);
      uint64_t v19 = (void *)v36;
      unint64_t v20 = 8 * v34;
    }
    else
    {
      uint64_t v25 = a1[6];
      uint64_t v26 = a1[7];
      uint64_t v36 = a2[4];
      uint64_t v27 = sub_1B6D97130(v26 - v25, 0, v36);
      uint64_t v14 = v27;
      uint64_t v29 = v28;
      if (v26 != v25)
      {
        uint64_t v30 = &v9[10 * v25];
        uint64_t v31 = v27;
        while (1)
        {
          sub_1B6D02F68(v7, v25, v30, v31);
          if (v2) {
            break;
          }
          ++v25;
          ++v31;
          v30 += 10;
          if (v26 == v25) {
            goto LABEL_22;
          }
        }
        unint64_t v20 = 8 * v29;
        goto LABEL_25;
      }
LABEL_22:
      sub_1B6D82704(*(void *)(v7 + 232), *(void *)(v7 + 240));
      uint64_t v19 = (void *)v36;
      unint64_t v20 = 8 * v29;
    }
LABEL_26:
    ecs_stack_allocator_deallocate(v19, (unint64_t)v14, v20);
    return swift_release();
  }
  a2[9] = &type metadata for TextureGPURuntime;
  a2[10] = &off_1F0F74BA8;
  uint64_t v10 = sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v4, v5, v6, v8);
  uint64_t v11 = (void *)v10;
  if (v4)
  {
    for (; v6; --v6)
    {
      uint64_t v12 = *v4++;
      sub_1B6D02F68(v7, v12, v9, v11);
      if (v2) {
        break;
      }
      ++v11;
      v9 += 10;
    }
  }
  else
  {
    uint64_t v21 = a1[6];
    uint64_t v22 = a1[7];
    if (v21 != v22)
    {
      uint64_t v23 = (void *)(v10 + 8 * v21);
      uint64_t v24 = &v9[10 * v21];
      do
      {
        sub_1B6D02F68(v7, v21, v24, v23);
        if (v2) {
          break;
        }
        ++v21;
        ++v23;
        v24 += 10;
      }
      while (v22 != v21);
    }
  }
  return swift_release();
}

uint64_t sub_1B6D9D834(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9D55C);
}

uint64_t sub_1B6D9D860(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  swift_retain();
  uint64_t v12 = (unsigned int *)sub_1B62C9024((uint64_t)&type metadata for SDFTextureGenerator, (uint64_t)&off_1F0F7F260, v8, v7, v9, v11);
  sub_1B6345398(*(void *)(v10 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v42);
  if (v42 != 1)
  {
    uint64_t v39 = a2;
    if (v8)
    {
      uint64_t v16 = a2[4];
      uint64_t v17 = sub_1B6D97130(v9, 0, v39[4]);
      uint64_t v38 = v16;
      uint64_t v36 = v19;
      uint64_t v37 = v18;
      if (v9)
      {
        uint64_t v20 = 0;
        uint64_t v21 = v9;
        while (1)
        {
          sub_1B6D3D8FC(v10, v8[v20], v12, (void **)&v17[v20], a3, a4);
          if (v4) {
            break;
          }
          ++v20;
          v12 += 6;
          if (!--v21) {
            goto LABEL_12;
          }
        }
        unint64_t v23 = 8 * v37;
LABEL_25:
        uint64_t v22 = (void *)v38;
        goto LABEL_26;
      }
LABEL_12:
      sub_1B6D825B4(v8, v7, v9, (uint64_t)v17, v36);
      uint64_t v22 = (void *)v38;
      unint64_t v23 = 8 * v37;
    }
    else
    {
      uint64_t v29 = a1[6];
      uint64_t v28 = a1[7];
      uint64_t v38 = v39[4];
      uint64_t v30 = sub_1B6D97130(v28 - v29, 0, v38);
      uint64_t v17 = v30;
      uint64_t v32 = v31;
      if (v28 != v29)
      {
        uint64_t v33 = &v12[6 * v29];
        uint64_t v34 = (void **)v30;
        while (1)
        {
          sub_1B6D3D8FC(v10, v29, v33, v34, a3, a4);
          if (v4) {
            break;
          }
          ++v29;
          ++v34;
          v33 += 6;
          if (v28 == v29) {
            goto LABEL_22;
          }
        }
        unint64_t v23 = 8 * v32;
        goto LABEL_25;
      }
LABEL_22:
      sub_1B6D82704(*(void *)(v10 + 232), *(void *)(v10 + 240));
      uint64_t v22 = (void *)v38;
      unint64_t v23 = 8 * v32;
    }
LABEL_26:
    ecs_stack_allocator_deallocate(v22, (unint64_t)v17, v23);
    return swift_release();
  }
  a2[9] = &type metadata for TextureGPURuntime;
  a2[10] = &off_1F0F74BA8;
  uint64_t v13 = sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v8, v7, v9, v11);
  uint64_t v14 = (void **)v13;
  if (v8)
  {
    for (; v9; --v9)
    {
      uint64_t v15 = *v8++;
      sub_1B6D3D8FC(v10, v15, v12, v14, a3, a4);
      if (v4) {
        break;
      }
      ++v14;
      v12 += 6;
    }
  }
  else
  {
    uint64_t v25 = a1[6];
    uint64_t v24 = a1[7];
    if (v25 != v24)
    {
      uint64_t v26 = (void **)(v13 + 8 * v25);
      uint64_t v27 = &v12[6 * v25];
      do
      {
        sub_1B6D3D8FC(v10, v25, v27, v26, a3, a4);
        if (v4) {
          break;
        }
        ++v25;
        ++v26;
        v27 += 6;
      }
      while (v24 != v25);
    }
  }
  return swift_release();
}

uint64_t sub_1B6D9DB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D9AB54(a1, a2, a3, (void (*)(void *, void *, uint64_t, uint64_t))sub_1B6D9D860);
}

uint64_t sub_1B6D9DB88(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a2;
  uint64_t v5 = type metadata accessor for SceneKitRenderer(0);
  uint64_t v60 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (uint64_t *)((char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = (uint64_t *)a1[11];
  uint64_t v10 = a1[12];
  uint64_t v11 = a1[13];
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  swift_retain();
  uint64_t v59 = sub_1B62C9024((uint64_t)&type metadata for SceneKitAssetInstance, (uint64_t)&off_1F0F8AC10, v9, v10, v11, v13);
  uint64_t v14 = v61;
  sub_1B6345398(*(void *)(v12 + 40), v5, &v63);
  if (v63 == 1)
  {
    uint64_t v15 = v62;
    *(void *)(v62 + 72) = v5;
    *(void *)(v15 + 80) = &off_1F0F6F3D0;
    uint64_t v16 = sub_1B6642F8C(v12, (uint64_t)a1);
    uint64_t v17 = (id *)v16;
    if (v9)
    {
      if (v11)
      {
        uint64_t v18 = *(void *)(v60 + 72);
        uint64_t v19 = (unsigned __int8 *)(v59 + 8);
        do
        {
          uint64_t v20 = *((void *)v19 - 1);
          int v21 = *v19;
          v19 += 12;
          sub_1B6C698DC(a3, v20, v21, v17);
          uint64_t v17 = (id *)((char *)v17 + v18);
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v39 = a1[6];
      uint64_t v40 = a1[7];
      uint64_t v41 = v40 - v39;
      if (v40 != v39)
      {
        uint64_t v42 = *(void *)(v60 + 72);
        uint64_t v43 = (id *)(v16 + v39 * v42);
        uint64_t v44 = (unsigned __int8 *)(v59 + 12 * v39 + 8);
        do
        {
          uint64_t v45 = *((void *)v44 - 1);
          int v46 = *v44;
          v44 += 12;
          sub_1B6C698DC(a3, v45, v46, v43);
          uint64_t v43 = (id *)((char *)v43 + v42);
          --v41;
        }
        while (v41);
      }
    }
  }
  else
  {
    uint64_t v56 = v10;
    uint64_t v58 = v14;
    uint64_t v22 = v11;
    uint64_t v61 = v9;
    if (!v9) {
      uint64_t v22 = a1[7] - a1[6];
    }
    *uint64_t v8 = 0;
    v8[1] = 0;
    unint64_t v23 = (char *)v8 + *(int *)(v5 + 24);
    uint64_t v24 = sub_1B6E30F48();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
    uint64_t v25 = *(void *)(v62 + 32);
    uint64_t v26 = *(void *)(v60 + 72);
    uint64_t v27 = *(unsigned __int8 *)(v60 + 80) + 1;
    unint64_t v57 = v26 * v22;
    uint64_t v28 = ecs_stack_allocator_allocate(v25, v26 * v22, v27);
    uint64_t v29 = (uint64_t)v28;
    uint64_t v60 = v22;
    if (v22)
    {
      uint64_t v30 = (uint64_t)v28;
      uint64_t v31 = v60;
      do
      {
        sub_1B6DA0BCC((uint64_t)v8, v30, type metadata accessor for SceneKitRenderer);
        v30 += v26;
        --v31;
      }
      while (v31);
    }
    sub_1B6DA29E4((uint64_t)v8, type metadata accessor for SceneKitRenderer);
    if (v61)
    {
      unint64_t v32 = v29;
      if (v11)
      {
        uint64_t v33 = (unsigned __int8 *)(v59 + 8);
        uint64_t v34 = (id *)v29;
        uint64_t v35 = v11;
        do
        {
          uint64_t v36 = *((void *)v33 - 1);
          int v37 = *v33;
          v33 += 12;
          sub_1B6C698DC(a3, v36, v37, v34);
          uint64_t v34 = (id *)((char *)v34 + v26);
          --v35;
        }
        while (v35);
      }
      uint64_t v38 = v62;
      sub_1B6D84ED8(v61, v56, v11, v29, v60);
    }
    else
    {
      uint64_t v47 = a1[6];
      uint64_t v48 = a1[7];
      uint64_t v49 = v48 - v47;
      unint64_t v32 = v29;
      if (v48 != v47)
      {
        uint64_t v50 = (unsigned __int8 *)(v59 + 12 * v47 + 8);
        uint64_t v51 = (id *)v32;
        do
        {
          uint64_t v52 = *((void *)v50 - 1);
          int v53 = *v50;
          v50 += 12;
          sub_1B6C698DC(a3, v52, v53, v51);
          uint64_t v51 = (id *)((char *)v51 + v26);
          --v49;
        }
        while (v49);
      }
      uint64_t v38 = v62;
      sub_1B6D85048(*(void *)(v12 + 232), *(void *)(v12 + 240));
    }
    ecs_stack_allocator_deallocate(*(void **)(v38 + 32), v32, v57);
  }
  return swift_release();
}

uint64_t sub_1B6D9DF18(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  long long v31 = *(_OWORD *)result;
  long long v32 = *(_OWORD *)(result + 16);
  uint64_t v33 = *(void *)(result + 32);
  uint64_t v26 = *(void *)(result + 80);
  if (v26 >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    uint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = *(void **)(result + 72);
    uint64_t v11 = v10[4];
    swift_retain();
    swift_retain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      uint64_t v24 = v9;
      int v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v22 = v6;
      sub_1B62F1F58(v6);
      uint64_t v13 = (uint64_t *)(v7 + 24);
      int v23 = v12;
      uint64_t v25 = a3;
      while (1)
      {
        uint64_t v14 = *((unsigned int *)v13 - 6);
        uint64_t v15 = *((unsigned int *)v13 - 5);
        uint64_t v16 = *((unsigned int *)v13 - 4);
        uint64_t v29 = *v13;
        uint64_t v30 = *(v13 - 1);
        uint64_t v27 = v8;
        uint64_t v28 = v13[1];
        uint64_t v17 = v13[2];
        uint64_t v44 = v4;
        if (v12)
        {
          uint64_t v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B62CA6FC((uint64_t)(v10 + 6), (uint64_t)v38, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v19 = v10[4];
        uint64_t v20 = *(void *)(*(void *)(*(void *)(*(void *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v39[0] = v24;
        v39[1] = v17;
        _OWORD v39[2] = v10;
        v39[3] = v16;
        v39[4] = (v15 - v14 + v16);
        v39[5] = v26;
        v39[6] = v14;
        v39[7] = v15;
        v39[8] = 0;
        v39[9] = 0;
        char v40 = 1;
        uint64_t v41 = v30;
        uint64_t v42 = v29;
        uint64_t v43 = v28;
        swift_retain();
        swift_retain();
        uint64_t v21 = v44;
        sub_1B6D9DB88(v39, (uint64_t)v10, v25);
        uint64_t v4 = v21;
        if (v21) {
          break;
        }
        swift_release();
        swift_release();
        v36[0] = v31;
        v36[1] = v32;
        uint64_t v37 = v33;
        sub_1B6345178(v10, (unsigned __int16 **)v36, (uint64_t)v38);
        sub_1B634507C((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        int v12 = v23;
        if (v23)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        uint64_t v8 = v27 - 1;
        if (v27 == 1)
        {
          sub_1B62F073C(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      swift_release();
      v34[0] = v31;
      v34[1] = v32;
      uint64_t v35 = v33;
      sub_1B6345178(v10, (unsigned __int16 **)v34, (uint64_t)v38);
      sub_1B634507C((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if (v23)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B62F073C(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6D9E27C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v6 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v11 = (void *)sub_1B62C9024((uint64_t)&type metadata for PointCacheFileAsset, (uint64_t)&off_1F0F7E0F0, v7, v6, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for PointCacheRuntime, &v40);
  if (v40 == 1)
  {
    a2[9] = &type metadata for PointCacheRuntime;
    a2[10] = &off_1F0F73F38;
    uint64_t v12 = sub_1B62C9024((uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1F0F73F38, v7, v6, v8, v10);
    uint64_t v13 = (uint64_t *)v12;
    if (v7)
    {
      for (; v8; --v8)
      {
        sub_1B6C97610(v11, v13, a3);
        if (v3) {
          break;
        }
        v13 += 4;
        v11 += 6;
      }
    }
    else
    {
      uint64_t v24 = a1[6];
      uint64_t v25 = a1[7];
      uint64_t v26 = v25 - v24;
      if (v25 != v24)
      {
        uint64_t v27 = (uint64_t *)(v12 + 32 * v24);
        uint64_t v28 = &v11[6 * v24];
        do
        {
          sub_1B6C97610(v28, v27, a3);
          if (v3) {
            break;
          }
          v27 += 4;
          v28 += 6;
          --v26;
        }
        while (v26);
      }
    }
  }
  else
  {
    uint64_t v36 = v6;
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    if (!v7) {
      uint64_t v15 = a1[7] - a1[6];
    }
    uint64_t v16 = sub_1B67DDA3C(MEMORY[0x1E4FBC860]);
    uint64_t v17 = a2[4];
    uint64_t v18 = sub_1B6D87B1C(v15, (uint64_t)v16, 0x636143746E696F50, 0xEA00000000006568, 0, v17);
    uint64_t v37 = v20;
    uint64_t v38 = (void *)v17;
    if (v7)
    {
      uint64_t v35 = v19;
      if (v8)
      {
        unint64_t v21 = (unint64_t)v18;
        uint64_t v22 = v18;
        uint64_t v23 = v8;
        while (1)
        {
          sub_1B6C97610(v11, v22, a3);
          if (v3) {
            break;
          }
          v22 += 4;
          v11 += 6;
          if (!--v23) {
            goto LABEL_23;
          }
        }
      }
      else
      {
        unint64_t v21 = (unint64_t)v18;
LABEL_23:
        sub_1B6D851B0(v7, v36, v8, v21, v35);
      }
    }
    else
    {
      uint64_t v29 = a1[6];
      uint64_t v30 = a1[7];
      uint64_t v31 = v30 - v29;
      if (v30 == v29)
      {
        unint64_t v21 = (unint64_t)v18;
LABEL_27:
        sub_1B6D85300(*(void *)(v14 + 232), *(void *)(v14 + 240));
      }
      else
      {
        long long v32 = &v11[6 * v29];
        unint64_t v21 = (unint64_t)v18;
        uint64_t v33 = v18;
        while (1)
        {
          sub_1B6C97610(v32, v33, a3);
          if (v3) {
            break;
          }
          v33 += 4;
          v32 += 6;
          if (!--v31) {
            goto LABEL_27;
          }
        }
      }
    }
    ecs_stack_allocator_deallocate(v38, v21, 32 * v37);
  }
  return swift_release();
}

uint64_t sub_1B6D9E540(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9E27C);
}

uint64_t sub_1B6D9E56C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  swift_retain();
  uint64_t v114 = sub_1B62C9024((uint64_t)&type metadata for PointCacheGenerator, (uint64_t)&off_1F0F7E6B8, v6, v5, v7, v9);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for PointCacheRuntime, &v120);
  if (v120 == 1)
  {
    a2[9] = &type metadata for PointCacheRuntime;
    a2[10] = &off_1F0F73F38;
    uint64_t v10 = sub_1B62C9024((uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1F0F73F38, v6, v5, v7, v9);
    if (v6)
    {
      if (v7)
      {
        uint64_t v11 = 0;
        uint64_t v12 = (void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        uint64_t v13 = MEMORY[0x1E4FBC868];
        do
        {
          uint64_t v26 = (int *)(v114 + 32 * v11);
          uint64_t v27 = (void *)(v10 + 32 * v11);
          swift_bridgeObjectRelease();
          *uint64_t v27 = v13;
          v27[3] = 0;
          int v28 = v26[1];
          uint64_t v29 = *v26;
          BOOL v30 = v29 == -1 && v28 == 0;
          if (!v30 && (v29 & 0x80000000) == 0 && v12[1] > v29)
          {
            uint64_t v31 = *v12 + 12 * (int)v29;
            if (v28 == -1 || *(_DWORD *)(v31 + 8) == v28)
            {
              uint64_t v33 = *(void *)(*(void *)(a3 + 136) + 8 * *(int *)(*v12 + 12 * (int)v29) + 32);
              uint64_t v34 = *(void *)(v33 + 48);
              uint64_t v35 = *(void *)(v34 + 16);
              if (v35)
              {
                uint64_t v36 = *(__int16 *)(v31 + 4);
                uint64_t v37 = (void *)(v34 + 56);
                while ((ValueMetadata *)*(v37 - 3) != &type metadata for MeshModel)
                {
                  v37 += 5;
                  if (!--v35) {
                    goto LABEL_13;
                  }
                }
                uint64_t v22 = (uint64_t *)(*(void *)(v33 + 128) + *v37 + 16 * v36);
                uint64_t v23 = *v22;
                uint64_t v24 = v22[1];
                uint64_t v25 = v114 + 32 * v11;
                uint64_t v111 = *(void *)(v25 + 8);
                uint64_t v113 = *(void *)(v25 + 24);
                __int16 v108 = *(_WORD *)(v25 + 18);
                char v105 = *(unsigned char *)(v25 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B6C8C2EC(v10 + 32 * v11, v23, v24, v111, v105, v108, v113);
                if (v116) {

                }
                long long v116 = 0;
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
          }
LABEL_13:
          ++v11;
        }
        while (v11 != v7);
      }
    }
    else
    {
      uint64_t v56 = a1[6];
      uint64_t v55 = a1[7];
      if (v56 != v55)
      {
        uint64_t v60 = (void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        uint64_t v61 = MEMORY[0x1E4FBC868];
        do
        {
          uint64_t v64 = (int *)(v114 + 32 * v56);
          uint64_t v65 = (void *)(v10 + 32 * v56);
          swift_bridgeObjectRelease();
          void *v65 = v61;
          v65[3] = 0;
          int v66 = v64[1];
          uint64_t v67 = *v64;
          BOOL v68 = v67 == -1 && v66 == 0;
          if (!v68 && (v67 & 0x80000000) == 0 && v60[1] > v67)
          {
            uint64_t v69 = *v60 + 12 * (int)v67;
            if (v66 == -1 || *(_DWORD *)(v69 + 8) == v66)
            {
              uint64_t v71 = *(void *)(*(void *)(a3 + 136) + 8 * *(int *)(*v60 + 12 * (int)v67) + 32);
              uint64_t v72 = *(void *)(v71 + 48);
              uint64_t v73 = *(void *)(v72 + 16);
              if (v73)
              {
                uint64_t v74 = *(__int16 *)(v69 + 4);
                uint64_t v75 = (void *)(v72 + 56);
                while ((ValueMetadata *)*(v75 - 3) != &type metadata for MeshModel)
                {
                  v75 += 5;
                  if (!--v73) {
                    goto LABEL_63;
                  }
                }
                uint64_t v76 = (uint64_t *)(*(void *)(v71 + 128) + *v75 + 16 * v74);
                uint64_t v77 = *v76;
                uint64_t v78 = v76[1];
                uint64_t v79 = v114 + 32 * v56;
                uint64_t v109 = *(void *)(v79 + 8);
                uint64_t v112 = *(void *)(v79 + 24);
                __int16 v106 = *(_WORD *)(v79 + 18);
                char v103 = *(unsigned char *)(v79 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B6C8C2EC(v10 + 32 * v56, v77, v78, v109, v103, v106, v112);
                if (v116) {

                }
                long long v116 = 0;
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
          }
LABEL_63:
          ++v56;
        }
        while (v56 != v55);
      }
    }
  }
  else
  {
    uint64_t v115 = v8;
    uint64_t v14 = v7;
    if (!v6) {
      uint64_t v14 = a1[7] - a1[6];
    }
    uint64_t v15 = sub_1B67DDA3C(MEMORY[0x1E4FBC860]);
    uint64_t v16 = a2[4];
    uint64_t v17 = sub_1B6D87B1C(v14, (uint64_t)v15, 0x636143746E696F50, 0xEA00000000006568, 0, v16);
    uint64_t v107 = v18;
    uint64_t v110 = (void *)v16;
    uint64_t v104 = v19;
    if (v6)
    {
      if (v7)
      {
        uint64_t v20 = 0;
        unint64_t v21 = (void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        uint64_t v96 = (void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        do
        {
          uint64_t v42 = (int *)(v114 + 32 * v20);
          uint64_t v43 = &v17[4 * v20];
          swift_bridgeObjectRelease();
          *uint64_t v43 = MEMORY[0x1E4FBC868];
          v43[3] = 0;
          int v44 = v42[1];
          uint64_t v45 = *v42;
          uint64_t v46 = v5;
          BOOL v47 = v45 == -1 && v44 == 0;
          if (!v47 && (v45 & 0x80000000) == 0 && v21[1] > v45)
          {
            uint64_t v48 = *v21 + 12 * (int)v45;
            if (v44 == -1 || *(_DWORD *)(v48 + 8) == v44)
            {
              uint64_t v50 = *(void *)(*(void *)(a3 + 136) + 8 * *(int *)(*v21 + 12 * (int)v45) + 32);
              uint64_t v51 = *(void *)(v50 + 48);
              uint64_t v52 = *(void *)(v51 + 16);
              if (v52)
              {
                uint64_t v53 = *(__int16 *)(v48 + 4);
                unint64_t v54 = (void *)(v51 + 56);
                while ((ValueMetadata *)*(v54 - 3) != &type metadata for MeshModel)
                {
                  v54 += 5;
                  if (!--v52) {
                    goto LABEL_34;
                  }
                }
                uint64_t v38 = (uint64_t *)(*(void *)(v50 + 128) + *v54 + 16 * v53);
                uint64_t v39 = *v38;
                uint64_t v40 = v38[1];
                uint64_t v41 = v114 + 32 * v20;
                uint64_t v99 = *(void *)(v41 + 8);
                uint64_t v101 = *(void *)(v41 + 24);
                __int16 v118 = *(_WORD *)(v41 + 18);
                char v97 = *(unsigned char *)(v41 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B6C8C2EC((uint64_t)&v17[4 * v20], v39, v40, v99, v97, v118, v101);
                if (v116) {

                }
                long long v116 = 0;
                unint64_t v21 = v96;
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
          }
LABEL_34:
          ++v20;
        }
        while (v20 != v7);
      }
      else
      {
        uint64_t v46 = v5;
      }
      sub_1B6D851B0(v6, v46, v7, (uint64_t)v17, v104);
    }
    else
    {
      uint64_t v58 = a1[6];
      uint64_t v57 = a1[7];
      if (v58 != v57)
      {
        uint64_t v62 = 0;
        char v63 = (void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        do
        {
          uint64_t v80 = (int *)(v114 + 32 * v58);
          uint64_t v81 = &v17[4 * v62];
          swift_bridgeObjectRelease();
          void *v81 = MEMORY[0x1E4FBC868];
          v81[3] = 0;
          int v82 = v80[1];
          uint64_t v83 = *v80;
          BOOL v84 = v83 == -1 && v82 == 0;
          if (!v84 && (v83 & 0x80000000) == 0 && v63[1] > v83)
          {
            uint64_t v85 = *v63 + 12 * (int)v83;
            if (v82 == -1 || *(_DWORD *)(v85 + 8) == v82)
            {
              uint64_t v87 = *(void *)(*(void *)(a3 + 136) + 8 * *(int *)(*v63 + 12 * (int)v83) + 32);
              uint64_t v88 = *(void *)(v87 + 48);
              uint64_t v89 = *(void *)(v88 + 16);
              if (v89)
              {
                uint64_t v90 = *(__int16 *)(v85 + 4);
                uint64_t v91 = (void *)(v88 + 56);
                while ((ValueMetadata *)*(v91 - 3) != &type metadata for MeshModel)
                {
                  v91 += 5;
                  if (!--v89) {
                    goto LABEL_83;
                  }
                }
                uint64_t v92 = (uint64_t *)(*(void *)(v87 + 128) + *v91 + 16 * v90);
                uint64_t v94 = *v92;
                uint64_t v93 = v92[1];
                uint64_t v95 = v114 + 32 * v58;
                uint64_t v100 = *(void *)(v95 + 8);
                uint64_t v102 = *(void *)(v95 + 24);
                __int16 v119 = *(_WORD *)(v95 + 18);
                char v98 = *(unsigned char *)(v95 + 16);
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B6C8C2EC((uint64_t)&v17[4 * v62], v94, v93, v100, v98, v119, v102);
                if (v116) {

                }
                long long v116 = 0;
                swift_bridgeObjectRelease();
                swift_release();
              }
            }
          }
LABEL_83:
          ++v58;
          ++v62;
        }
        while (v58 != v57);
      }
      sub_1B6D85300(*(void *)(v115 + 232), *(void *)(v115 + 240));
    }
    ecs_stack_allocator_deallocate(v110, (unint64_t)v17, 32 * v107);
  }
  return swift_release();
}

uint64_t sub_1B6D9ED0C(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9E56C);
}

uint64_t sub_1B6D9ED38(void *a1, void *a2, void *a3)
{
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v6 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for PointCacheFromModel, (uint64_t)&off_1F0F7E3D0, v7, v6, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for PointCacheRuntime, &v40);
  if (v40 == 1)
  {
    a2[9] = &type metadata for PointCacheRuntime;
    a2[10] = &off_1F0F73F38;
    uint64_t v12 = sub_1B62C9024((uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1F0F73F38, v7, v6, v8, v10);
    uint64_t v13 = (void *)v12;
    if (v7)
    {
      for (; v8; --v8)
      {
        sub_1B6C98B40(v11, v13, a3);
        if (v3) {
          break;
        }
        v13 += 4;
        v11 += 48;
      }
    }
    else
    {
      uint64_t v24 = a1[6];
      uint64_t v25 = a1[7];
      uint64_t v26 = v25 - v24;
      if (v25 != v24)
      {
        uint64_t v27 = (void *)(v12 + 32 * v24);
        uint64_t v28 = v11 + 48 * v24;
        do
        {
          sub_1B6C98B40(v28, v27, a3);
          if (v3) {
            break;
          }
          v27 += 4;
          v28 += 48;
          --v26;
        }
        while (v26);
      }
    }
  }
  else
  {
    uint64_t v36 = v6;
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    if (!v7) {
      uint64_t v15 = a1[7] - a1[6];
    }
    uint64_t v16 = sub_1B67DDA3C(MEMORY[0x1E4FBC860]);
    uint64_t v17 = a2[4];
    uint64_t v18 = sub_1B6D87B1C(v15, (uint64_t)v16, 0x636143746E696F50, 0xEA00000000006568, 0, v17);
    uint64_t v37 = v20;
    uint64_t v38 = (void *)v17;
    if (v7)
    {
      uint64_t v35 = v19;
      if (v8)
      {
        unint64_t v21 = (unint64_t)v18;
        uint64_t v22 = v18;
        uint64_t v23 = v8;
        while (1)
        {
          sub_1B6C98B40(v11, v22, a3);
          if (v3) {
            break;
          }
          v22 += 4;
          v11 += 48;
          if (!--v23) {
            goto LABEL_23;
          }
        }
      }
      else
      {
        unint64_t v21 = (unint64_t)v18;
LABEL_23:
        sub_1B6D851B0(v7, v36, v8, v21, v35);
      }
    }
    else
    {
      uint64_t v29 = a1[6];
      uint64_t v30 = a1[7];
      uint64_t v31 = v30 - v29;
      if (v30 == v29)
      {
        unint64_t v21 = (unint64_t)v18;
LABEL_27:
        sub_1B6D85300(*(void *)(v14 + 232), *(void *)(v14 + 240));
      }
      else
      {
        uint64_t v32 = v11 + 48 * v29;
        unint64_t v21 = (unint64_t)v18;
        uint64_t v33 = v18;
        while (1)
        {
          sub_1B6C98B40(v32, v33, a3);
          if (v3) {
            break;
          }
          v33 += 4;
          v32 += 48;
          if (!--v31) {
            goto LABEL_27;
          }
        }
      }
    }
    ecs_stack_allocator_deallocate(v38, v21, 32 * v37);
  }
  return swift_release();
}

void sub_1B6D9EFFC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  long long v31 = *(_OWORD *)a1;
  long long v32 = *(_OWORD *)(a1 + 16);
  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v25 = *(void *)(a1 + 80);
  if (v25 >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v8 = *(void **)(a1 + 72);
    uint64_t v9 = v8[4];
    id v26 = a2;
    ecs_stack_allocator_push_snapshot(v9);
    if (v7)
    {
      uint64_t v24 = v6;
      int v10 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v22 = a1;
      sub_1B62F1F58(a1);
      uint64_t v11 = (uint64_t *)(v5 + 24);
      int v23 = v10;
      while (1)
      {
        uint64_t v12 = *((unsigned int *)v11 - 6);
        uint64_t v13 = *((unsigned int *)v11 - 5);
        uint64_t v14 = *((unsigned int *)v11 - 4);
        uint64_t v29 = *v11;
        uint64_t v30 = *(v11 - 1);
        uint64_t v27 = v7;
        uint64_t v28 = v11[1];
        uint64_t v15 = v11[2];
        uint64_t v44 = v3;
        if (v10)
        {
          uint64_t v16 = *(os_unfair_lock_s **)(v15 + 376);
          swift_retain();
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v9);
        sub_1B62CA6FC((uint64_t)(v8 + 6), (uint64_t)v38, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v17 = v8[4];
        uint64_t v18 = *(void *)(*(void *)(*(void *)(*(void *)(v15 + 40) + 16) + 32) + 16) + 1;
        uint64_t v19 = v9;
        swift_retain();
        void v8[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
        v8[7] = v18;
        v8[9] = 0;
        v8[10] = 0;
        v8[8] = 0;
        swift_release();
        v39[0] = v24;
        v39[1] = v15;
        _OWORD v39[2] = v8;
        v39[3] = v14;
        v39[4] = (v13 - v12 + v14);
        v39[5] = v25;
        v39[6] = v12;
        v39[7] = v13;
        v39[8] = 0;
        v39[9] = 0;
        char v40 = 1;
        uint64_t v41 = v30;
        uint64_t v42 = v29;
        uint64_t v43 = v28;
        id v20 = v26;
        uint64_t v21 = v44;
        sub_1B6D9ED38(v39, v8, v20);
        uint64_t v3 = v21;
        if (v21) {
          break;
        }

        v36[0] = v31;
        v36[1] = v32;
        uint64_t v37 = v33;
        sub_1B6345178(v8, (unsigned __int16 **)v36, (uint64_t)v38);
        sub_1B634507C((char *)v15);
        ecs_stack_allocator_pop_snapshot(v19);
        uint64_t v9 = v19;
        int v10 = v23;
        if (v23)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
        }
        swift_release();
        v11 += 6;
        uint64_t v7 = v27 - 1;
        if (v27 == 1)
        {
          sub_1B62F073C(v22);
          goto LABEL_12;
        }
      }

      v34[0] = v31;
      v34[1] = v32;
      uint64_t v35 = v33;
      sub_1B6345178(v8, (unsigned __int16 **)v34, (uint64_t)v38);
      sub_1B634507C((char *)v15);
      ecs_stack_allocator_pop_snapshot(v19);
      if (v23)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
      }
      sub_1B62F073C(v22);
      swift_release();
      ecs_stack_allocator_pop_snapshot(v8[4]);
    }
    else
    {
LABEL_12:
      ecs_stack_allocator_pop_snapshot(v8[4]);
    }
  }
}

uint64_t sub_1B6D9F330(void *a1, void *a2, void *a3)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1F0F596A8, v6, v7, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v41);
  if (v41 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1F0F74BA8;
    uint64_t v12 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v6, v7, v8, v10);
    if (v6)
    {
      if (v8)
      {
        swift_getObjectType();
        do
        {
          v11 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          uint64_t v13 = sub_1B6E32108();
          swift_unknownObjectRelease();
          *v12++ = v13;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v21 = a1[6];
      uint64_t v20 = a1[7];
      uint64_t v22 = v20 - v21;
      if (v20 != v21)
      {
        swift_getObjectType();
        long long v31 = &v12[v21];
        uint64_t v32 = v11 + 4 * v21;
        do
        {
          v32 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          uint64_t v33 = sub_1B6E32108();
          swift_unknownObjectRelease();
          *v31++ = v33;
          --v22;
        }
        while (v22);
      }
    }
    return swift_release();
  }
  else
  {
    uint64_t v36 = v7;
    uint64_t v40 = v9;
    if (v6)
    {
      uint64_t v35 = v6;
      uint64_t v39 = (void *)a2[4];
      uint64_t v37 = sub_1B6D97130(v8, 0, (uint64_t)v39);
      uint64_t v38 = v14;
      uint64_t v34 = v15;
      if (v8)
      {
        swift_getObjectType();
        uint64_t v16 = v37;
        uint64_t v17 = v8;
        do
        {
          v11 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          uint64_t v18 = sub_1B6E32108();
          swift_unknownObjectRelease();
          *v16++ = v18;
          --v17;
        }
        while (v17);
      }
      uint64_t v19 = v37;
      sub_1B6D825B4(v35, v36, v8, (uint64_t)v37, v34);
    }
    else
    {
      uint64_t v23 = a1[6];
      uint64_t v24 = a1[7];
      uint64_t v39 = (void *)a2[4];
      uint64_t v19 = sub_1B6D97130(v24 - v23, 0, (uint64_t)v39);
      uint64_t v38 = v25;
      uint64_t v26 = v24 - v23;
      if (v24 != v23)
      {
        swift_getObjectType();
        uint64_t v27 = v19;
        uint64_t v28 = v11 + 4 * v23;
        do
        {
          v28 += 4;
          objc_msgSend(a3, sel_pixelFormat);
          uint64_t v29 = sub_1B6E32108();
          swift_unknownObjectRelease();
          *v27++ = v29;
          --v26;
        }
        while (v26);
      }
      sub_1B6D82704(*(void *)(v40 + 232), *(void *)(v40 + 240));
    }
    ecs_stack_allocator_deallocate(v39, (unint64_t)v19, 8 * v38);
    return swift_release();
  }
}

uint64_t sub_1B6D9F684(uint64_t a1, uint64_t a2)
{
  return sub_1B6D9F6B0(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6D9F330);
}

uint64_t sub_1B6D9F6B0(uint64_t result, uint64_t a2, void (*a3)(void *, void *, uint64_t))
{
  uint64_t v4 = v3;
  long long v32 = *(_OWORD *)result;
  long long v33 = *(_OWORD *)(result + 16);
  uint64_t v34 = *(void *)(result + 32);
  uint64_t v26 = *(void *)(result + 80);
  if (v26 >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    uint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = *(void **)(result + 72);
    uint64_t v11 = v10[4];
    swift_unknownObjectRetain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      int v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v24 = v9;
      uint64_t v22 = v6;
      sub_1B62F1F58(v6);
      uint64_t v13 = (uint64_t *)(v7 + 24);
      int v23 = v12;
      uint64_t v25 = a2;
      while (1)
      {
        uint64_t v28 = v8;
        uint64_t v14 = *((unsigned int *)v13 - 6);
        uint64_t v15 = *((unsigned int *)v13 - 5);
        uint64_t v16 = *((unsigned int *)v13 - 4);
        uint64_t v30 = *v13;
        uint64_t v31 = *(v13 - 1);
        uint64_t v17 = v13[2];
        uint64_t v29 = v13[1];
        uint64_t v45 = v4;
        if (v12)
        {
          uint64_t v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B62CA6FC((uint64_t)(v10 + 6), (uint64_t)v39, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v19 = v10[4];
        uint64_t v20 = *(void *)(*(void *)(*(void *)(*(void *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v40[0] = v24;
        v40[1] = v17;
        v40[2] = v10;
        v40[3] = v16;
        v40[4] = (v15 - v14 + v16);
        v40[5] = v26;
        v40[6] = v14;
        v40[7] = v15;
        v40[8] = 0;
        v40[9] = 0;
        char v41 = 1;
        uint64_t v42 = v31;
        uint64_t v43 = v30;
        uint64_t v44 = v29;
        swift_unknownObjectRetain();
        uint64_t v21 = v45;
        a3(v40, v10, v25);
        uint64_t v4 = v21;
        if (v21) {
          break;
        }
        swift_unknownObjectRelease();
        v37[0] = v32;
        v37[1] = v33;
        uint64_t v38 = v34;
        sub_1B6345178(v10, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B634507C((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        int v12 = v23;
        if (v23)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        uint64_t v8 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B62F073C(v22);
          goto LABEL_15;
        }
      }
      swift_unknownObjectRelease();
      v35[0] = v32;
      v35[1] = v33;
      uint64_t v36 = v34;
      sub_1B6345178(v10, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B634507C((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if (v23)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B62F073C(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B6D9F9E8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v6 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v85 = sub_1B62C9024((uint64_t)&type metadata for TextureNamedAsset, (uint64_t)&off_1F0F750C8, v7, v6, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v88);
  uint64_t v86 = v8;
  if (v88 != 1)
  {
    uint64_t v84 = v9;
    if (v7)
    {
      uint64_t v79 = v7;
      uint64_t v25 = v8;
      uint64_t v81 = (void *)a2[4];
      int v82 = sub_1B6D97130(v8, 0, (uint64_t)v81);
      uint64_t v80 = v26;
      uint64_t v78 = v27;
      uint64_t v28 = v6;
      if (v8)
      {
        uint64_t v29 = v8 - 1;
        uint64_t v30 = (uint64_t *)(v85 + 8);
        for (uint64_t i = v82; ; ++i)
        {
          id v35 = sub_1B6D46F70(*(v30 - 1), *v30);
          if (v35)
          {
            id v36 = v35;
          }
          else
          {
            uint64_t v37 = *(void *)(a4 + 240);
            uint64_t v38 = *(os_unfair_lock_s **)(v37 + 48);
            swift_retain();
            os_unfair_lock_lock(v38);
            uint64_t v39 = *(void *)(v37 + 128);
            if (!*(void *)(v39 + 16)
              || (uint64_t v40 = sub_1B62B2CE0(0xD000000000000015, 0x80000001B6F45BA0), (v41 & 1) == 0))
            {
              long long v32 = (void *)sub_1B67FFDF0(a4);
              long long v33 = (void *)sub_1B6E31768();
              objc_msgSend(v32, sel_setLabel_, v33, v78, v79);

              swift_unknownObjectRetain();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v88 = *(void *)(v37 + 128);
              *(void *)(v37 + 128) = 0x8000000000000000;
              sub_1B6331384((uint64_t)v32, 0xD000000000000015, 0x80000001B6F45BA0, isUniquelyReferenced_nonNull_native);
              *(void *)(v37 + 128) = v88;
              swift_bridgeObjectRelease();
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 48));
              swift_release();
              swift_unknownObjectRelease();
              *uint64_t i = v32;
              uint64_t v25 = v8;
              uint64_t v28 = v6;
              if (!v29) {
                break;
              }
              goto LABEL_17;
            }
            id v36 = *(id *)(*(void *)(v39 + 56) + 8 * v40);
            uint64_t v42 = *(os_unfair_lock_s **)(v37 + 48);
            swift_unknownObjectRetain();
            os_unfair_lock_unlock(v42);
            swift_release();
            uint64_t v25 = v8;
          }
          uint64_t v28 = v6;
          swift_unknownObjectRelease();
          *uint64_t i = v36;
          if (!v29) {
            break;
          }
LABEL_17:
          v30 += 2;
          --v29;
        }
      }
      unint64_t v43 = (unint64_t)v82;
      sub_1B6D825B4(v79, v28, v25, (uint64_t)v82, v78);
LABEL_40:
      ecs_stack_allocator_deallocate(v81, v43, 8 * v80);
      return swift_release();
    }
    uint64_t v61 = a1[6];
    uint64_t v60 = a1[7];
    uint64_t v81 = (void *)a2[4];
    uint64_t v83 = sub_1B6D97130(v60 - v61, 0, (uint64_t)v81);
    uint64_t v80 = v62;
    if (v60 == v61)
    {
LABEL_39:
      unint64_t v43 = (unint64_t)v83;
      sub_1B6D82704(*(void *)(v84 + 232), *(void *)(v84 + 240));
      goto LABEL_40;
    }
    uint64_t v64 = ~v61 + v60;
    uint64_t v65 = (uint64_t *)(v85 + 16 * v61 + 8);
    for (uint64_t j = v83; ; ++j)
    {
      id v70 = sub_1B6D46F70(*(v65 - 1), *v65);
      if (v70)
      {
        id v71 = v70;
      }
      else
      {
        uint64_t v72 = *(void *)(a4 + 240);
        uint64_t v73 = *(os_unfair_lock_s **)(v72 + 48);
        swift_retain();
        os_unfair_lock_lock(v73);
        uint64_t v74 = *(void *)(v72 + 128);
        if (!*(void *)(v74 + 16) || (uint64_t v75 = sub_1B62B2CE0(0xD000000000000015, 0x80000001B6F45BA0), (v76 & 1) == 0))
        {
          uint64_t v67 = (void *)sub_1B67FFDF0(a4);
          BOOL v68 = (void *)sub_1B6E31768();
          objc_msgSend(v67, sel_setLabel_, v68);

          swift_unknownObjectRetain();
          char v69 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v88 = *(void *)(v72 + 128);
          *(void *)(v72 + 128) = 0x8000000000000000;
          sub_1B6331384((uint64_t)v67, 0xD000000000000015, 0x80000001B6F45BA0, v69);
          *(void *)(v72 + 128) = v88;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v72 + 48));
          swift_release();
          swift_unknownObjectRelease();
          *uint64_t j = v67;
          if (!v64) {
            goto LABEL_39;
          }
          goto LABEL_44;
        }
        id v71 = *(id *)(*(void *)(v74 + 56) + 8 * v75);
        uint64_t v77 = *(os_unfair_lock_s **)(v72 + 48);
        swift_unknownObjectRetain();
        os_unfair_lock_unlock(v77);
        swift_release();
      }
      swift_unknownObjectRelease();
      *uint64_t j = v71;
      if (!v64) {
        goto LABEL_39;
      }
LABEL_44:
      v65 += 2;
      --v64;
    }
  }
  a2[9] = &type metadata for TextureGPURuntime;
  a2[10] = &off_1F0F74BA8;
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v7, v6, v8, v10);
  if (v7)
  {
    if (v8)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v85;
      do
      {
        while (1)
        {
          id v17 = sub_1B6D46F70(*(void *)(v13 + 16 * v12), *(void *)(v13 + 16 * v12 + 8));
          if (!v17) {
            break;
          }
          id v18 = v17;
LABEL_8:
          swift_unknownObjectRelease();
          *(void *)(v11 + 8 * v12++) = v18;
          if (v12 == v8) {
            return swift_release();
          }
        }
        uint64_t v19 = *(void *)(a4 + 240);
        uint64_t v20 = *(os_unfair_lock_s **)(v19 + 48);
        swift_retain();
        os_unfair_lock_lock(v20);
        uint64_t v21 = *(void *)(v19 + 128);
        if (*(void *)(v21 + 16))
        {
          uint64_t v22 = sub_1B62B2CE0(0xD000000000000015, 0x80000001B6F45BA0);
          if (v23)
          {
            id v18 = *(id *)(*(void *)(v21 + 56) + 8 * v22);
            uint64_t v24 = *(os_unfair_lock_s **)(v19 + 48);
            swift_unknownObjectRetain();
            os_unfair_lock_unlock(v24);
            swift_release();
            uint64_t v13 = v85;
            uint64_t v8 = v86;
            goto LABEL_8;
          }
        }
        uint64_t v14 = (void *)sub_1B67FFDF0(a4);
        uint64_t v15 = (void *)sub_1B6E31768();
        objc_msgSend(v14, sel_setLabel_, v15);

        swift_unknownObjectRetain();
        char v16 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v88 = *(void *)(v19 + 128);
        *(void *)(v19 + 128) = 0x8000000000000000;
        sub_1B6331384((uint64_t)v14, 0xD000000000000015, 0x80000001B6F45BA0, v16);
        *(void *)(v19 + 128) = v88;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 48));
        swift_release();
        swift_unknownObjectRelease();
        *(void *)(v11 + 8 * v12++) = v14;
        uint64_t v13 = v85;
        uint64_t v8 = v86;
      }
      while (v12 != v86);
    }
  }
  else
  {
    uint64_t v44 = a1[6];
    uint64_t v45 = a1[7];
    if (v44 != v45)
    {
      uint64_t v46 = ~v44 + v45;
      BOOL v47 = (void *)(v11 + 8 * v44);
      for (k = (uint64_t *)(v85 + 16 * v44 + 8); ; k += 2)
      {
        id v49 = sub_1B6D46F70(*(k - 1), *k);
        if (v49)
        {
          uint64_t v50 = v49;
        }
        else
        {
          uint64_t v51 = *(void *)(a4 + 240);
          uint64_t v52 = *(os_unfair_lock_s **)(v51 + 48);
          swift_retain();
          os_unfair_lock_lock(v52);
          uint64_t v53 = *(void *)(v51 + 128);
          if (*(void *)(v53 + 16)
            && (uint64_t v54 = sub_1B62B2CE0(0xD000000000000015, 0x80000001B6F45BA0), (v55 & 1) != 0))
          {
            uint64_t v50 = *(void **)(*(void *)(v53 + 56) + 8 * v54);
            uint64_t v56 = *(os_unfair_lock_s **)(v51 + 48);
            swift_unknownObjectRetain();
            uint64_t v57 = v56;
          }
          else
          {
            uint64_t v50 = (void *)sub_1B67FFDF0(a4);
            uint64_t v58 = (void *)sub_1B6E31768();
            objc_msgSend(v50, sel_setLabel_, v58);

            swift_unknownObjectRetain();
            char v59 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v88 = *(void *)(v51 + 128);
            *(void *)(v51 + 128) = 0x8000000000000000;
            sub_1B6331384((uint64_t)v50, 0xD000000000000015, 0x80000001B6F45BA0, v59);
            *(void *)(v51 + 128) = v88;
            swift_bridgeObjectRelease();
            uint64_t v57 = *(os_unfair_lock_s **)(v51 + 48);
          }
          os_unfair_lock_unlock(v57);
          swift_release();
        }
        swift_unknownObjectRelease();
        *BOOL v47 = v50;
        if (!v46) {
          break;
        }
        --v46;
        ++v47;
      }
    }
  }
  return swift_release();
}

uint64_t sub_1B6DA01A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  long long v32 = *(_OWORD *)result;
  long long v33 = *(_OWORD *)(result + 16);
  uint64_t v34 = *(void *)(result + 32);
  uint64_t v26 = *(void *)(result + 80);
  if (v26 >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    uint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = *(void **)(result + 72);
    uint64_t v11 = v10[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      int v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v24 = v9;
      uint64_t v22 = v6;
      sub_1B62F1F58(v6);
      uint64_t v13 = (uint64_t *)(v7 + 24);
      int v23 = v12;
      uint64_t v25 = a3;
      while (1)
      {
        uint64_t v28 = v8;
        uint64_t v14 = *((unsigned int *)v13 - 6);
        uint64_t v15 = *((unsigned int *)v13 - 5);
        uint64_t v16 = *((unsigned int *)v13 - 4);
        uint64_t v30 = *v13;
        uint64_t v31 = *(v13 - 1);
        uint64_t v17 = v13[2];
        uint64_t v29 = v13[1];
        uint64_t v45 = v4;
        if (v12)
        {
          id v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B62CA6FC((uint64_t)(v10 + 6), (uint64_t)v39, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v19 = v10[4];
        uint64_t v20 = *(void *)(*(void *)(*(void *)(*(void *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v40[0] = v24;
        v40[1] = v17;
        v40[2] = v10;
        v40[3] = v16;
        v40[4] = (v15 - v14 + v16);
        v40[5] = v26;
        v40[6] = v14;
        v40[7] = v15;
        v40[8] = 0;
        v40[9] = 0;
        char v41 = 1;
        uint64_t v42 = v31;
        uint64_t v43 = v30;
        uint64_t v44 = v29;
        swift_retain();
        uint64_t v21 = v45;
        sub_1B6D9F9E8(v40, v10, a2, v25);
        uint64_t v4 = v21;
        if (v21) {
          break;
        }
        swift_release();
        v37[0] = v32;
        v37[1] = v33;
        uint64_t v38 = v34;
        sub_1B6345178(v10, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B634507C((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        int v12 = v23;
        if (v23)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        uint64_t v8 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B62F073C(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      v35[0] = v32;
      v35[1] = v33;
      uint64_t v36 = v34;
      sub_1B6345178(v10, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B634507C((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if (v23)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B62F073C(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6DA04D8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v6 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v11 = (unsigned char *)sub_1B62C9024((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1F0F64880, v7, v6, v8, v10);
  uint64_t v12 = sub_1B6642E00(v9, (uint64_t)a1);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v51);
  if (v51 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1F0F74BA8;
    uint64_t v13 = (void *)sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v7, v6, v8, v10);
    if (v7)
    {
      if (v8)
      {
        uint64_t v14 = *(void *)(*(void *)(type metadata accessor for MovieRuntime(0) - 8) + 72);
        do
        {
          uint64_t v15 = *v7++;
          sub_1B680F8C8(v9, v15, v11, v12, v13, a3);
          if (v4) {
            break;
          }
          ++v13;
          v12 += v14;
          v11 += 56;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v26 = a1[6];
      uint64_t v25 = a1[7];
      if (v26 != v25)
      {
        uint64_t v39 = *(void *)(*(void *)(type metadata accessor for MovieRuntime(0) - 8) + 72);
        uint64_t v40 = &v13[v26];
        uint64_t v41 = v12 + v26 * v39;
        uint64_t v42 = &v11[56 * v26];
        do
        {
          sub_1B680F8C8(v9, v26, v42, v41, v40, a3);
          if (v4) {
            break;
          }
          ++v26;
          ++v40;
          v41 += v39;
          v42 += 56;
        }
        while (v25 != v26);
      }
    }
    return swift_release();
  }
  uint64_t v44 = v6;
  if (!v7)
  {
    uint64_t v28 = a1[6];
    uint64_t v27 = a1[7];
    BOOL v47 = (void *)a2[4];
    uint64_t v29 = sub_1B6D97130(v27 - v28, 0, (uint64_t)v47);
    uint64_t v45 = v29;
    uint64_t v46 = v30;
    if (v27 != v28)
    {
      uint64_t v31 = v29;
      uint64_t v32 = *(void *)(*(void *)(type metadata accessor for MovieRuntime(0) - 8) + 72);
      uint64_t v33 = v12 + v28 * v32;
      uint64_t v34 = &v11[56 * v28];
      while (1)
      {
        sub_1B680F8C8(v9, v28, v34, v33, v31, a3);
        if (v4) {
          break;
        }
        ++v28;
        ++v31;
        v33 += v32;
        v34 += 56;
        if (v27 == v28) {
          goto LABEL_20;
        }
      }
      id v35 = v47;
      unint64_t v36 = 8 * v46;
      unint64_t v37 = (unint64_t)v45;
      goto LABEL_22;
    }
LABEL_20:
    unint64_t v24 = (unint64_t)v45;
    sub_1B6D82704(*(void *)(v9 + 232), *(void *)(v9 + 240));
LABEL_21:
    id v35 = v47;
    unint64_t v36 = 8 * v46;
    unint64_t v37 = v24;
LABEL_22:
    ecs_stack_allocator_deallocate(v35, v37, v36);
    return swift_release();
  }
  uint64_t v16 = a2[4];
  uint64_t v17 = sub_1B6D97130(v8, 0, v16);
  uint64_t v46 = v18;
  BOOL v47 = (void *)v16;
  uint64_t v49 = v9;
  uint64_t v43 = v19;
  unint64_t v20 = (unint64_t)v17;
  if (!v8)
  {
LABEL_13:
    unint64_t v24 = v20;
    sub_1B6D825B4(v7, v44, v8, v20, v43);
    goto LABEL_21;
  }
  uint64_t v21 = 0;
  uint64_t v22 = *(void *)(*(void *)(type metadata accessor for MovieRuntime(0) - 8) + 72);
  uint64_t v23 = v8;
  while (1)
  {
    sub_1B680F8C8(v49, v7[v21], v11, v12, (void *)(v20 + v21 * 8), a3);
    if (v4) {
      break;
    }
    ++v21;
    v12 += v22;
    v11 += 56;
    if (!--v23) {
      goto LABEL_13;
    }
  }
  ecs_stack_allocator_deallocate(v47, v20, 8 * v46);
  return swift_release();
}

uint64_t sub_1B6DA0868(uint64_t a1, uint64_t a2)
{
  return sub_1B6DA0894(a1, a2, (void (*)(void *, void *, uint64_t))sub_1B6DA04D8);
}

uint64_t sub_1B6DA0894(uint64_t result, uint64_t a2, void (*a3)(void *, void *, uint64_t))
{
  uint64_t v4 = v3;
  long long v32 = *(_OWORD *)result;
  long long v33 = *(_OWORD *)(result + 16);
  uint64_t v34 = *(void *)(result + 32);
  uint64_t v26 = *(void *)(result + 80);
  if (v26 >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    uint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = *(void **)(result + 72);
    uint64_t v11 = v10[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      int v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v24 = v9;
      uint64_t v22 = v6;
      sub_1B62F1F58(v6);
      uint64_t v13 = (uint64_t *)(v7 + 24);
      int v23 = v12;
      uint64_t v25 = a2;
      while (1)
      {
        uint64_t v28 = v8;
        uint64_t v14 = *((unsigned int *)v13 - 6);
        uint64_t v15 = *((unsigned int *)v13 - 5);
        uint64_t v16 = *((unsigned int *)v13 - 4);
        uint64_t v30 = *v13;
        uint64_t v31 = *(v13 - 1);
        uint64_t v17 = v13[2];
        uint64_t v29 = v13[1];
        uint64_t v45 = v4;
        if (v12)
        {
          uint64_t v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B62CA6FC((uint64_t)(v10 + 6), (uint64_t)v39, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v19 = v10[4];
        uint64_t v20 = *(void *)(*(void *)(*(void *)(*(void *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v40[0] = v24;
        v40[1] = v17;
        v40[2] = v10;
        v40[3] = v16;
        v40[4] = (v15 - v14 + v16);
        v40[5] = v26;
        v40[6] = v14;
        v40[7] = v15;
        v40[8] = 0;
        v40[9] = 0;
        char v41 = 1;
        uint64_t v42 = v31;
        uint64_t v43 = v30;
        uint64_t v44 = v29;
        swift_retain();
        uint64_t v21 = v45;
        a3(v40, v10, v25);
        uint64_t v4 = v21;
        if (v21) {
          break;
        }
        swift_release();
        v37[0] = v32;
        v37[1] = v33;
        uint64_t v38 = v34;
        sub_1B6345178(v10, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B634507C((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        int v12 = v23;
        if (v23)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        uint64_t v8 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B62F073C(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      v35[0] = v32;
      v35[1] = v33;
      uint64_t v36 = v34;
      sub_1B6345178(v10, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B634507C((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if (v23)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B62F073C(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6DA0BCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_OWORD *sub_1B6DA0C34(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v5 = ecs_stack_allocator_allocate(a3, a1 << 6, 8);
  uint64_t v6 = v5;
  if (a1)
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    long long v9 = a2[2];
    *(_OWORD *)((char *)v5 + 41) = *(long long *)((char *)a2 + 41);
    v5[1] = v8;
    _OWORD v5[2] = v9;
    *uint64_t v5 = v7;
    if (a1 != 1)
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      long long v12 = a2[2];
      *(_OWORD *)((char *)v5 + 105) = *(long long *)((char *)a2 + 41);
      v5[5] = v11;
      v5[6] = v12;
      v5[4] = v10;
      if (a1 != 2)
      {
        long long v13 = *a2;
        long long v14 = a2[1];
        long long v15 = a2[2];
        *(_OWORD *)((char *)v5 + 169) = *(long long *)((char *)a2 + 41);
        v5[9] = v14;
        v5[10] = v15;
        v5[8] = v13;
        uint64_t v16 = a1 - 3;
        if (a1 != 3)
        {
          uint64_t v17 = v5 + 12;
          do
          {
            sub_1B6DA0D30((uint64_t)a2);
            long long v19 = a2[1];
            long long v18 = a2[2];
            long long v20 = *a2;
            *(_OWORD *)((char *)v17 + 41) = *(long long *)((char *)a2 + 41);
            v17[1] = v19;
            void v17[2] = v18;
            *uint64_t v17 = v20;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        sub_1B6DA0D30((uint64_t)a2);
      }
      sub_1B6DA0D30((uint64_t)a2);
    }
    sub_1B6DA0D30((uint64_t)a2);
  }
  return v6;
}

uint64_t sub_1B6DA0D30(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B6DA0D94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B6DA0DFC(uint64_t *a1, void *a2, char **a3, uint64_t a4)
{
  uint64_t v122 = a3;
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  swift_retain();
  uint64_t v10 = sub_1B62C9024((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1F0F74A68, v6, v5, v7, v9);
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireGPURepresentation, (uint64_t)&off_1F0F9AF80, v6, v5, v7, v9);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v109);
  uint64_t v107 = v8;
  uint64_t v105 = v9;
  if (v109 != 1)
  {
    uint64_t v90 = v5;
    if (v6)
    {
      uint64_t v92 = v6;
      uint64_t v94 = (void *)a2[4];
      uint64_t v95 = (void **)sub_1B6D97130(v7, 0, (uint64_t)v94);
      uint64_t v93 = v29;
      uint64_t v89 = v30;
      uint64_t v91 = v7;
      if (v7)
      {
        uint64_t v31 = a1[3];
        uint64_t v100 = *a1;
        uint64_t v32 = v91;
        long long v33 = v95;
        do
        {
          uint64_t v35 = *v6++;
          uint64_t v34 = v35;
          uint64_t v117 = v100;
          uint64_t v118 = v107;
          uint64_t v119 = v105;
          uint64_t v120 = v31;
          uint64_t v121 = v35;
          sub_1B6362CBC((uint64_t)v108);
          char v36 = *(unsigned char *)(v107 + 184);
          uint64_t v37 = swift_retain();
          if (v36) {
            goto LABEL_43;
          }
          int v38 = *(_DWORD *)(*(void *)(v107 + 168) + 4 * v34);
          int v39 = *(_DWORD *)(*(void *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v38 + 8);
          swift_release();
          uint64_t v40 = v122;
          char v41 = *v122;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v40 = v41;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            char v41 = sub_1B633F784(0, *((void *)v41 + 2) + 1, 1, v41);
            *uint64_t v122 = v41;
          }
          unint64_t v44 = *((void *)v41 + 2);
          unint64_t v43 = *((void *)v41 + 3);
          if (v44 >= v43 >> 1) {
            char v41 = sub_1B633F784(v43 > 1, v44 + 1, 1, v41);
          }
          *((void *)v41 + 2) = v44 + 1;
          uint64_t v45 = &v41[8 * v44];
          *((_DWORD *)v45 + 8) = v38;
          *((_DWORD *)v45 + 9) = v39;
          *uint64_t v122 = v41;
          long long v46 = *(_OWORD *)(v10 + 80);
          long long v113 = *(_OWORD *)(v10 + 64);
          long long v114 = v46;
          long long v115 = *(_OWORD *)(v10 + 96);
          uint64_t v116 = *(void *)(v10 + 112);
          long long v47 = *(_OWORD *)(v10 + 16);
          long long v109 = *(_OWORD *)v10;
          long long v110 = v47;
          long long v48 = *(_OWORD *)(v10 + 48);
          long long v111 = *(_OWORD *)(v10 + 32);
          long long v112 = v48;
          id v49 = sub_1B628B9D4((void **)&v109, v108, a4, *v33);
          swift_unknownObjectRelease();
          *v33++ = v49;
          ++v31;
          v10 += 120;
        }
        while (--v32);
      }
      unint64_t v50 = (unint64_t)v95;
      sub_1B6D825B4(v92, v90, v91, (uint64_t)v95, v89);
    }
    else
    {
      uint64_t v69 = a1[6];
      uint64_t v68 = a1[7];
      uint64_t v94 = (void *)a2[4];
      uint64_t v96 = (void **)sub_1B6D97130(v68 - v69, 0, (uint64_t)v94);
      uint64_t v93 = v70;
      uint64_t v104 = v68;
      if (v68 != v69)
      {
        uint64_t v72 = a1[3];
        uint64_t v102 = *a1;
        uint64_t v73 = v10 + 120 * v69;
        uint64_t v74 = v96;
        do
        {
          uint64_t v117 = v102;
          uint64_t v118 = v107;
          uint64_t v119 = v9;
          uint64_t v120 = v72;
          uint64_t v121 = v69;
          sub_1B6362CBC((uint64_t)v108);
          char v75 = *(unsigned char *)(v107 + 184);
          uint64_t v76 = swift_retain();
          if (v75) {
            goto LABEL_43;
          }
          int v77 = *(_DWORD *)(*(void *)(v107 + 168) + 4 * v69);
          int v78 = *(_DWORD *)(*(void *)(v76 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v77 + 8);
          swift_release();
          uint64_t v79 = v122;
          uint64_t v80 = *v122;
          char v81 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v79 = v80;
          if ((v81 & 1) == 0)
          {
            uint64_t v80 = sub_1B633F784(0, *((void *)v80 + 2) + 1, 1, v80);
            *uint64_t v122 = v80;
          }
          unint64_t v83 = *((void *)v80 + 2);
          unint64_t v82 = *((void *)v80 + 3);
          if (v83 >= v82 >> 1) {
            uint64_t v80 = sub_1B633F784(v82 > 1, v83 + 1, 1, v80);
          }
          ++v69;
          *((void *)v80 + 2) = v83 + 1;
          uint64_t v84 = &v80[8 * v83];
          *((_DWORD *)v84 + 8) = v77;
          *((_DWORD *)v84 + 9) = v78;
          *uint64_t v122 = v80;
          long long v85 = *(_OWORD *)(v73 + 80);
          long long v113 = *(_OWORD *)(v73 + 64);
          long long v114 = v85;
          long long v115 = *(_OWORD *)(v73 + 96);
          uint64_t v116 = *(void *)(v73 + 112);
          long long v86 = *(_OWORD *)(v73 + 16);
          long long v109 = *(_OWORD *)v73;
          long long v110 = v86;
          long long v87 = *(_OWORD *)(v73 + 48);
          long long v111 = *(_OWORD *)(v73 + 32);
          long long v112 = v87;
          id v88 = sub_1B628B9D4((void **)&v109, v108, a4, *v74);
          swift_unknownObjectRelease();
          *v74++ = v88;
          ++v72;
          v73 += 120;
          uint64_t v9 = v105;
        }
        while (v104 != v69);
      }
      unint64_t v50 = (unint64_t)v96;
      sub_1B6D82704(*(void *)(v107 + 232), *(void *)(v107 + 240));
    }
    ecs_stack_allocator_deallocate(v94, v50, 8 * v93);
    return swift_release();
  }
  a2[9] = &type metadata for TextureGPURuntime;
  a2[10] = &off_1F0F74BA8;
  char v103 = (void **)sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v6, v5, v7, v9);
  if (!v6)
  {
    uint64_t v51 = a1[6];
    uint64_t v101 = a1[7];
    if (v51 != v101)
    {
      uint64_t v52 = a1[3];
      uint64_t v98 = *a1;
      uint64_t v53 = v10 + 120 * v51;
      while (1)
      {
        uint64_t v117 = v98;
        uint64_t v118 = v107;
        uint64_t v119 = v9;
        uint64_t v120 = v52;
        uint64_t v121 = v51;
        sub_1B6362CBC((uint64_t)v108);
        char v54 = *(unsigned char *)(v107 + 184);
        uint64_t v55 = swift_retain();
        if (v54) {
          break;
        }
        int v56 = *(_DWORD *)(*(void *)(v107 + 168) + 4 * v51);
        int v57 = *(_DWORD *)(*(void *)(v55 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v56 + 8);
        swift_release();
        uint64_t v58 = v122;
        char v59 = *v122;
        char v60 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v58 = v59;
        if ((v60 & 1) == 0)
        {
          char v59 = sub_1B633F784(0, *((void *)v59 + 2) + 1, 1, v59);
          *uint64_t v122 = v59;
        }
        unint64_t v62 = *((void *)v59 + 2);
        unint64_t v61 = *((void *)v59 + 3);
        if (v62 >= v61 >> 1) {
          char v59 = sub_1B633F784(v61 > 1, v62 + 1, 1, v59);
        }
        *((void *)v59 + 2) = v62 + 1;
        char v63 = &v59[8 * v62];
        *((_DWORD *)v63 + 8) = v56;
        *((_DWORD *)v63 + 9) = v57;
        *uint64_t v122 = v59;
        long long v64 = *(_OWORD *)(v53 + 80);
        long long v113 = *(_OWORD *)(v53 + 64);
        long long v114 = v64;
        long long v115 = *(_OWORD *)(v53 + 96);
        uint64_t v116 = *(void *)(v53 + 112);
        long long v65 = *(_OWORD *)(v53 + 16);
        long long v109 = *(_OWORD *)v53;
        long long v110 = v65;
        long long v66 = *(_OWORD *)(v53 + 48);
        long long v111 = *(_OWORD *)(v53 + 32);
        long long v112 = v66;
        id v67 = sub_1B628B9D4((void **)&v109, v108, a4, v103[v51]);
        swift_unknownObjectRelease();
        v103[v51] = v67;
        ++v52;
        v53 += 120;
        ++v51;
        uint64_t v9 = v105;
        if (v101 == v51) {
          return swift_release();
        }
      }
      goto LABEL_43;
    }
    return swift_release();
  }
  if (!v7) {
    return swift_release();
  }
  uint64_t v11 = v7;
  uint64_t v12 = a1[3];
  uint64_t v99 = *a1;
  while (1)
  {
    uint64_t v14 = *v6++;
    uint64_t v13 = v14;
    uint64_t v117 = v99;
    uint64_t v118 = v107;
    uint64_t v119 = v9;
    uint64_t v120 = v12;
    uint64_t v121 = v14;
    sub_1B6362CBC((uint64_t)v108);
    char v15 = *(unsigned char *)(v107 + 184);
    uint64_t v16 = swift_retain();
    if (v15) {
      break;
    }
    int v17 = *(_DWORD *)(*(void *)(v107 + 168) + 4 * v13);
    int v18 = *(_DWORD *)(*(void *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v17 + 8);
    swift_release();
    long long v19 = v122;
    long long v20 = *v122;
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    *long long v19 = v20;
    if ((v21 & 1) == 0)
    {
      long long v20 = sub_1B633F784(0, *((void *)v20 + 2) + 1, 1, v20);
      *uint64_t v122 = v20;
    }
    unint64_t v23 = *((void *)v20 + 2);
    unint64_t v22 = *((void *)v20 + 3);
    if (v23 >= v22 >> 1) {
      long long v20 = sub_1B633F784(v22 > 1, v23 + 1, 1, v20);
    }
    *((void *)v20 + 2) = v23 + 1;
    uint64_t v24 = &v20[8 * v23];
    *((_DWORD *)v24 + 8) = v17;
    *((_DWORD *)v24 + 9) = v18;
    *uint64_t v122 = v20;
    long long v25 = *(_OWORD *)(v10 + 80);
    long long v113 = *(_OWORD *)(v10 + 64);
    long long v114 = v25;
    long long v115 = *(_OWORD *)(v10 + 96);
    uint64_t v116 = *(void *)(v10 + 112);
    long long v26 = *(_OWORD *)(v10 + 16);
    long long v109 = *(_OWORD *)v10;
    long long v110 = v26;
    long long v27 = *(_OWORD *)(v10 + 48);
    long long v111 = *(_OWORD *)(v10 + 32);
    long long v112 = v27;
    id v28 = sub_1B628B9D4((void **)&v109, v108, a4, *v103);
    swift_unknownObjectRelease();
    *v103++ = v28;
    ++v12;
    v10 += 120;
    --v11;
    uint64_t v9 = v105;
    if (!v11) {
      return swift_release();
    }
  }
LABEL_43:
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B6DA15B8(uint64_t result, char **a2, uint64_t a3)
{
  uint64_t v4 = v3;
  long long v32 = *(_OWORD *)result;
  long long v33 = *(_OWORD *)(result + 16);
  uint64_t v34 = *(void *)(result + 32);
  uint64_t v26 = *(void *)(result + 80);
  if (v26 >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 40);
    uint64_t v8 = *(void *)(result + 56);
    uint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = *(void **)(result + 72);
    uint64_t v11 = v10[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v11);
    if (v8)
    {
      int v12 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v24 = v9;
      uint64_t v22 = v6;
      sub_1B62F1F58(v6);
      uint64_t v13 = (uint64_t *)(v7 + 24);
      int v23 = v12;
      uint64_t v25 = a3;
      while (1)
      {
        uint64_t v28 = v8;
        uint64_t v14 = *((unsigned int *)v13 - 6);
        uint64_t v15 = *((unsigned int *)v13 - 5);
        uint64_t v16 = *((unsigned int *)v13 - 4);
        uint64_t v30 = *v13;
        uint64_t v31 = *(v13 - 1);
        uint64_t v17 = v13[2];
        uint64_t v29 = v13[1];
        uint64_t v45 = v4;
        if (v12)
        {
          int v18 = *(os_unfair_lock_s **)(v17 + 376);
          swift_retain();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B62CA6FC((uint64_t)(v10 + 6), (uint64_t)v39, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62CA7BC);
        uint64_t v19 = v10[4];
        uint64_t v20 = *(void *)(*(void *)(*(void *)(*(void *)(v17 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        int64x2_t v10[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v10[7] = v20;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v40[0] = v24;
        v40[1] = v17;
        v40[2] = (uint64_t)v10;
        v40[3] = v16;
        v40[4] = (v15 - v14 + v16);
        v40[5] = v26;
        v40[6] = v14;
        v40[7] = v15;
        v40[8] = 0;
        v40[9] = 0;
        char v41 = 1;
        uint64_t v42 = v31;
        uint64_t v43 = v30;
        uint64_t v44 = v29;
        swift_retain();
        uint64_t v21 = v45;
        sub_1B6DA0DFC(v40, v10, a2, v25);
        uint64_t v4 = v21;
        if (v21) {
          break;
        }
        swift_release();
        v37[0] = v32;
        v37[1] = v33;
        uint64_t v38 = v34;
        sub_1B6345178(v10, (unsigned __int16 **)v37, (uint64_t)v39);
        sub_1B634507C((char *)v17);
        ecs_stack_allocator_pop_snapshot(v11);
        int v12 = v23;
        if (v23)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
        }
        swift_release();
        v13 += 6;
        uint64_t v8 = v28 - 1;
        if (v28 == 1)
        {
          sub_1B62F073C(v22);
          goto LABEL_15;
        }
      }
      swift_release();
      v35[0] = v32;
      v35[1] = v33;
      uint64_t v36 = v34;
      sub_1B6345178(v10, (unsigned __int16 **)v35, (uint64_t)v39);
      sub_1B634507C((char *)v17);
      ecs_stack_allocator_pop_snapshot(v11);
      if (v23)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      sub_1B62F073C(v22);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v10[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6DA18EC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v5 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  swift_retain();
  uint64_t v10 = (unsigned int *)sub_1B62C9024((uint64_t)&type metadata for Skybox, (uint64_t)&off_1F0FA1BB0, v6, v5, v7, v9);
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for IBLGenerator, (uint64_t)&off_1F0F5A5F0, v6, v5, v7, v9);
  sub_1B6345398(*(void *)(v8 + 40), (uint64_t)&type metadata for IBLRuntime, &v53);
  if (v53 != 1)
  {
    uint64_t v44 = v5;
    unint64_t v15 = v7;
    if (!v6) {
      unint64_t v15 = a1[7] - a1[6];
    }
    uint64_t v46 = a2[4];
    uint64_t v16 = ecs_stack_allocator_allocate(v46, 16 * v15, 4);
    if (v15)
    {
      if (v15 < 0x1C)
      {
        unint64_t v17 = 0;
LABEL_22:
        unint64_t v24 = v15 - v17;
        uint64_t v25 = &v16[2 * v17];
        *(void *)&long long v26 = 0xFFFFFFFFLL;
        *((void *)&v26 + 1) = 0xFFFFFFFFLL;
        do
        {
          *v25++ = v26;
          --v24;
        }
        while (v24);
        goto LABEL_24;
      }
      unint64_t v17 = 0;
      uint64_t v20 = 2 * (v15 - 1);
      if (&v16[v20] < v16) {
        goto LABEL_22;
      }
      if ((char *)&v16[v20] + 4 < (char *)v16 + 4) {
        goto LABEL_22;
      }
      if (&v16[v20 + 1] < v16 + 1) {
        goto LABEL_22;
      }
      if ((char *)&v16[v20 + 1] + 4 < (char *)v16 + 12) {
        goto LABEL_22;
      }
      if ((v15 - 1) >> 60) {
        goto LABEL_22;
      }
      unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v21 = v16 + 8;
      *(void *)&long long v22 = 0xFFFFFFFFLL;
      *((void *)&v22 + 1) = 0xFFFFFFFFLL;
      unint64_t v23 = v15 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(v21 - 2) = v22;
        *(v21 - 1) = v22;
        *(v21 - 4) = v22;
        *(v21 - 3) = v22;
        _OWORD v21[2] = v22;
        v21[3] = v22;
        _OWORD *v21 = v22;
        v21[1] = v22;
        v21 += 8;
        v23 -= 8;
      }
      while (v23);
      if (v15 != v17) {
        goto LABEL_22;
      }
    }
LABEL_24:
    unint64_t v47 = 16 * v15;
    uint64_t v48 = (uint64_t)v16;
    uint64_t v45 = v15;
    if (v6)
    {
      if (v7)
      {
        long long v27 = v6;
        uint64_t v28 = v16;
        uint64_t v29 = v7;
        while (1)
        {
          uint64_t v30 = *v27++;
          sub_1B6D60718(v8, v30, v10, v11, v28, a3, a4);
          if (v4) {
            break;
          }
          v10 += 8;
          v28 += 2;
          v11 += 4;
          if (!--v29) {
            goto LABEL_29;
          }
        }
        long long v32 = (void *)v46;
LABEL_33:
        uint64_t v35 = v32;
        unint64_t v36 = v48;
LABEL_43:
        ecs_stack_allocator_deallocate(v35, v36, v47);
        return swift_release();
      }
LABEL_29:
      unint64_t v31 = v48;
      sub_1B6D84C40(v6, v44, v7, v48, v45);
      long long v32 = (void *)v46;
    }
    else
    {
      uint64_t v33 = a1[6];
      uint64_t v34 = a1[7];
      if (v33 != v34)
      {
        uint64_t v40 = &v10[8 * v33];
        char v41 = v16;
        uint64_t v42 = v11 + 4 * v33;
        long long v32 = (void *)v46;
        while (1)
        {
          sub_1B6D60718(v8, v33, v40, v42, v41, a3, a4);
          if (v4) {
            goto LABEL_33;
          }
          ++v33;
          v41 += 2;
          v40 += 8;
          v42 += 4;
          if (v34 == v33) {
            goto LABEL_41;
          }
        }
      }
      long long v32 = (void *)v46;
LABEL_41:
      unint64_t v31 = v48;
      sub_1B6D84D90(*(void *)(v8 + 232), *(void *)(v8 + 240));
    }
    uint64_t v35 = v32;
    unint64_t v36 = v31;
    goto LABEL_43;
  }
  a2[9] = &type metadata for IBLRuntime;
  a2[10] = &off_1F0F52A50;
  uint64_t v12 = sub_1B62C9024((uint64_t)&type metadata for IBLRuntime, (uint64_t)&off_1F0F52A50, v6, v5, v7, v9);
  uint64_t v13 = (uint64_t *)v12;
  if (v6)
  {
    for (; v7; --v7)
    {
      uint64_t v14 = *v6++;
      sub_1B6D60718(v8, v14, v10, v11, v13, a3, a4);
      if (v4) {
        break;
      }
      v10 += 8;
      v13 += 2;
      v11 += 4;
    }
  }
  else
  {
    uint64_t v19 = a1[6];
    uint64_t v18 = a1[7];
    if (v19 != v18)
    {
      uint64_t v37 = &v10[8 * v19];
      uint64_t v38 = (uint64_t *)(v12 + 16 * v19);
      uint64_t v39 = v11 + 4 * v19;
      do
      {
        sub_1B6D60718(v8, v19, v37, v39, v38, a3, a4);
        if (v4) {
          break;
        }
        ++v19;
        v37 += 8;
        v38 += 2;
        v39 += 4;
      }
      while (v18 != v19);
    }
  }
  return swift_release();
}

uint64_t sub_1B6DA1CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D9AB54(a1, a2, a3, (void (*)(void *, void *, uint64_t, uint64_t))sub_1B6DA18EC);
}

uint64_t sub_1B6DA1CF0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v90 = a4;
  uint64_t v6 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  swift_retain();
  uint64_t v68 = sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v6, v7, v8, v10);
  sub_1B62C9024((uint64_t)&type metadata for TextureRequireCPURepresentation, (uint64_t)&off_1F0F9AEA8, v6, v7, v8, v10);
  sub_1B6345398(*(void *)(v9 + 40), (uint64_t)&type metadata for TextureCPURuntime, v79);
  uint64_t v69 = v9;
  if (LOBYTE(v79[0]) == 1)
  {
    a2[9] = &type metadata for TextureCPURuntime;
    a2[10] = &off_1F0F74A68;
    uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1F0F74A68, v6, v7, v8, v10);
    uint64_t v12 = v11;
    if (v6)
    {
      if (v8)
      {
        uint64_t v13 = (void **)v68;
        while (1)
        {
          uint64_t v15 = *v6++;
          uint64_t v14 = v15;
          unint64_t v17 = *v13++;
          uint64_t v16 = v17;
          if (v17)
          {
            uint64_t v18 = v6;
            uint64_t v19 = *(void *)(v9 + 16);
            char v20 = *(unsigned char *)(v9 + 184);
            swift_retain();
            if (v20) {
              goto LABEL_35;
            }
            int v21 = *(_DWORD *)(*(void *)(v9 + 168) + 4 * v14);
            int v22 = *(_DWORD *)(*(void *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v21 + 8);
            swift_unknownObjectRetain();
            swift_release();
            uint64_t v23 = swift_allocObject();
            *(void *)(v23 + 16) = v90;
            *(_DWORD *)(v23 + 24) = v21;
            *(_DWORD *)(v23 + 28) = v22;
            swift_retain();
            sub_1B6D01A34(a3, v16, v12, 0, (uint64_t)sub_1B6DA2CE8, v23);
            swift_unknownObjectRelease();
            swift_release();
            uint64_t v6 = v18;
          }
          v12 += 120;
          if (!--v8) {
            return swift_release();
          }
        }
      }
    }
    else
    {
      uint64_t v42 = a1[6];
      uint64_t v41 = a1[7];
      if (v42 != v41)
      {
        uint64_t v47 = v11 + 120 * v42;
        uint64_t v48 = v68;
        while (1)
        {
          id v49 = *(void **)(v48 + 8 * v42);
          if (v49)
          {
            uint64_t v50 = *(void *)(v9 + 16);
            char v51 = *(unsigned char *)(v9 + 184);
            swift_retain();
            if (v51) {
              goto LABEL_35;
            }
            int v52 = *(_DWORD *)(*(void *)(v9 + 168) + 4 * v42);
            int v53 = *(_DWORD *)(*(void *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v52 + 8);
            swift_unknownObjectRetain();
            swift_release();
            uint64_t v54 = swift_allocObject();
            *(void *)(v54 + 16) = v90;
            *(_DWORD *)(v54 + 24) = v52;
            *(_DWORD *)(v54 + 28) = v53;
            swift_retain();
            sub_1B6D01A34(a3, v49, v47, 0, (uint64_t)sub_1B6DA2CE8, v54);
            swift_unknownObjectRelease();
            swift_release();
            uint64_t v48 = v68;
          }
          ++v42;
          v47 += 120;
          if (v41 == v42) {
            return swift_release();
          }
        }
      }
    }
    return swift_release();
  }
  uint64_t v24 = v8;
  if (!v6) {
    uint64_t v24 = a1[7] - a1[6];
  }
  RGTextureDescriptor.init()((uint64_t)&v71);
  memset(v79, 0, sizeof(v79));
  char v80 = 0;
  uint64_t v81 = v71;
  __int16 v82 = v72;
  char v83 = v73;
  long long v84 = v74;
  long long v85 = v75;
  long long v86 = v76;
  uint64_t v87 = v77;
  int v88 = v78;
  uint64_t v89 = MEMORY[0x1E4FBC860];
  long long v65 = (void *)a2[4];
  id v67 = sub_1B6D99CD4(v24, (uint64_t)v79, (uint64_t)v65);
  uint64_t v64 = v25;
  uint64_t v66 = v26;
  swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t v62 = v7;
    char v63 = v6;
    long long v27 = (void **)v68;
    if (v8)
    {
      uint64_t v28 = v63;
      uint64_t v29 = (uint64_t)v67;
      for (uint64_t i = v8; i; --i)
      {
        uint64_t v32 = *v28++;
        uint64_t v31 = v32;
        uint64_t v34 = *v27++;
        uint64_t v33 = v34;
        if (v34)
        {
          uint64_t v35 = *(void *)(v69 + 16);
          char v36 = *(unsigned char *)(v69 + 184);
          swift_retain();
          if (v36) {
            goto LABEL_35;
          }
          int v37 = *(_DWORD *)(*(void *)(v69 + 168) + 4 * v31);
          int v38 = *(_DWORD *)(*(void *)(v35 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v37 + 8);
          swift_unknownObjectRetain();
          swift_release();
          uint64_t v39 = swift_allocObject();
          *(void *)(v39 + 16) = v90;
          *(_DWORD *)(v39 + 24) = v37;
          *(_DWORD *)(v39 + 28) = v38;
          swift_retain();
          sub_1B6D01A34(a3, v33, v29, 0, (uint64_t)sub_1B6DA2CE8, v39);
          swift_unknownObjectRelease();
          swift_release();
        }
        v29 += 120;
      }
    }
    unint64_t v40 = (unint64_t)v67;
    sub_1B6D83E88(v63, v62, v8, (uint64_t)v67, v66);
    goto LABEL_23;
  }
  uint64_t v43 = a1[6];
  uint64_t v44 = a1[7];
  uint64_t v45 = v68;
  if (v43 == v44)
  {
LABEL_22:
    unint64_t v40 = (unint64_t)v67;
    sub_1B6D83FDC(*(void *)(v9 + 232), *(void *)(v9 + 240));
LABEL_23:
    ecs_stack_allocator_deallocate(v65, v40, 120 * v64);
    return swift_release();
  }
  uint64_t v55 = (uint64_t)v67;
  while (1)
  {
    int v56 = *(void **)(v45 + 8 * v43);
    if (v56) {
      break;
    }
LABEL_31:
    ++v43;
    v55 += 120;
    if (v44 == v43) {
      goto LABEL_22;
    }
  }
  uint64_t v57 = *(void *)(v9 + 16);
  char v58 = *(unsigned char *)(v9 + 184);
  swift_retain();
  if ((v58 & 1) == 0)
  {
    int v59 = *(_DWORD *)(*(void *)(v9 + 168) + 4 * v43);
    int v60 = *(_DWORD *)(*(void *)(v57 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v59 + 8);
    swift_unknownObjectRetain();
    swift_release();
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = v90;
    *(_DWORD *)(v61 + 24) = v59;
    *(_DWORD *)(v61 + 28) = v60;
    swift_retain();
    sub_1B6D01A34(a3, v56, v55, 0, (uint64_t)sub_1B6DA2B78, v61);
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v45 = v68;
    goto LABEL_31;
  }
LABEL_35:
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B6DA22D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6D9AB54(a1, a2, a3, (void (*)(void *, void *, uint64_t, uint64_t))sub_1B6DA1CF0);
}

uint64_t sub_1B6DA22FC(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t *)a1[11];
  uint64_t v7 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[2];
  sub_1B62C9024((uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1F0F8D908, v8, v7, v9, v10);
  uint64_t v37 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v8, v7, v9, v10);
  uint64_t result = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v8, v7, v9, v10);
  if (v8)
  {
    if (v9)
    {
      uint64_t v12 = (float32x4_t *)(v37 + 32);
      do
      {
        float32x4_t v15 = v12[-2];
        float32x4_t v14 = v12[-1];
        float32x4_t v16 = vmulq_f32(v15, v15);
        float v17 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]);
        float32x4_t v18 = vmulq_f32(v14, v14);
        float v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        if (v19 >= v17)
        {
          if ((LODWORD(v19) & 0x7FFFFF) == 0) {
            float v17 = v19;
          }
          if ((~LODWORD(v19) & 0x7F800000) != 0) {
            float v17 = v19;
          }
        }
        float32x4_t v20 = *v12;
        float32x4_t v21 = vmulq_f32(v20, v20);
        float v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
        if (v22 >= v17)
        {
          if ((LODWORD(v22) & 0x7FFFFF) == 0) {
            float v17 = v22;
          }
          if ((~LODWORD(v22) & 0x7F800000) != 0) {
            float v17 = v22;
          }
        }
        float32x4_t v13 = vaddq_f32(v12[1], vmlaq_f32(vmlaq_f32(vmulq_f32(v15, (float32x4_t)0), (float32x4_t)0, v14), (float32x4_t)0, v20));
        v13.f32[3] = v17 * 0.5;
        float32x4_t v39 = v13;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        char v45 = 3;
        uint64_t result = sub_1B6D7E4E0(a3, 0x100000000uLL, a2, (long long *)&v39, a4);
        v12 += 4;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    uint64_t v23 = a1[6];
    uint64_t v24 = a1[7];
    uint64_t v25 = v24 - v23;
    if (v24 != v23)
    {
      uint64_t v26 = v37 + (v23 << 6) + 32;
      do
      {
        float32x4_t v29 = *(float32x4_t *)(v26 - 32);
        float32x4_t v28 = *(float32x4_t *)(v26 - 16);
        float32x4_t v30 = vmulq_f32(v29, v29);
        float v31 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]);
        float32x4_t v32 = vmulq_f32(v28, v28);
        float v33 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]);
        if (v33 >= v31)
        {
          if ((LODWORD(v33) & 0x7FFFFF) == 0) {
            float v31 = v33;
          }
          if ((~LODWORD(v33) & 0x7F800000) != 0) {
            float v31 = v33;
          }
        }
        float32x4_t v34 = *(float32x4_t *)v26;
        float32x4_t v35 = vmulq_f32(v34, v34);
        float v36 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0]);
        if (v36 >= v31)
        {
          if ((LODWORD(v36) & 0x7FFFFF) == 0) {
            float v31 = v36;
          }
          if ((~LODWORD(v36) & 0x7F800000) != 0) {
            float v31 = v36;
          }
        }
        float32x4_t v27 = vaddq_f32(*(float32x4_t *)(v26 + 16), vmlaq_f32(vmlaq_f32(vmulq_f32(v29, (float32x4_t)0), (float32x4_t)0, v28), (float32x4_t)0, v34));
        v27.f32[3] = v31 * 0.5;
        float32x4_t v39 = v27;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        char v45 = 3;
        uint64_t result = sub_1B6D7E4E0(a3, 0x100000000uLL, a2, (long long *)&v39, a4);
        v26 += 64;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t sub_1B6DA2624(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t *)a1[11];
  uint64_t v9 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v26 = a1[2];
  sub_1B62C9024((uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1F0F7D338, v8, v9, v10, v26);
  uint64_t v25 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v8, v9, v10, v26);
  uint64_t result = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v8, v9, v10, v26);
  if (v8)
  {
    if (v10)
    {
      long long v27 = xmmword_1B6E4F370;
      long long v28 = xmmword_1B6E87B90;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      char v33 = 6;
      uint64_t v12 = (__n128 *)(v25 + 32);
      do
      {
        __n128 v13 = v12[-2];
        __n128 v14 = v12[-1];
        __n128 v15 = *v12;
        __n128 v16 = v12[1];
        char v34 = 1;
        uint64_t result = sub_1B6D7E238(a3, 0x100000000uLL, a2, &v27, a4, v13, v14, v15, v16);
        v12 += 4;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    uint64_t v17 = a1[6];
    uint64_t v18 = a1[7];
    uint64_t v19 = v18 - v17;
    if (v18 != v17)
    {
      long long v27 = xmmword_1B6E4F370;
      long long v28 = xmmword_1B6E87B90;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      char v33 = 6;
      float32x4_t v20 = (__n128 *)(v25 + (v17 << 6) + 32);
      do
      {
        __n128 v21 = v20[-2];
        __n128 v22 = v20[-1];
        __n128 v23 = *v20;
        __n128 v24 = v20[1];
        v20 += 4;
        char v34 = 1;
        uint64_t result = sub_1B6D7E238(a3, 0x100000000uLL, a2, &v27, a4, v21, v22, v23, v24);
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t sub_1B6DA27F4(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t *)a1[11];
  uint64_t v9 = a1[12];
  uint64_t v10 = a1[13];
  uint64_t v26 = a1[2];
  sub_1B62C9024((uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1F0F92BD0, v8, v9, v10, v26);
  uint64_t v25 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v8, v9, v10, v26);
  uint64_t result = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v8, v9, v10, v26);
  if (v8)
  {
    if (v10)
    {
      long long v27 = xmmword_1B6EB4110;
      int64x2_t v28 = vdupq_n_s64(0x3F00000000000000uLL);
      uint64_t v29 = 4;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v33 = 0;
      char v34 = 7;
      uint64_t v12 = (__n128 *)(v25 + 32);
      do
      {
        __n128 v13 = v12[-2];
        __n128 v14 = v12[-1];
        __n128 v15 = *v12;
        __n128 v16 = v12[1];
        char v35 = 1;
        uint64_t result = sub_1B6D7E238(a3, 0x100000000uLL, a2, &v27, a4, v13, v14, v15, v16);
        v12 += 4;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    uint64_t v17 = a1[6];
    uint64_t v18 = a1[7];
    uint64_t v19 = v18 - v17;
    if (v18 != v17)
    {
      long long v27 = xmmword_1B6EB4110;
      int64x2_t v28 = vdupq_n_s64(0x3F00000000000000uLL);
      uint64_t v29 = 4;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v33 = 0;
      char v34 = 7;
      float32x4_t v20 = (__n128 *)(v25 + (v17 << 6) + 32);
      do
      {
        __n128 v21 = v20[-2];
        __n128 v22 = v20[-1];
        __n128 v23 = *v20;
        __n128 v24 = v20[1];
        v20 += 4;
        char v35 = 1;
        uint64_t result = sub_1B6D7E238(a3, 0x100000000uLL, a2, &v27, a4, v21, v22, v23, v24);
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t sub_1B6DA29E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B6DA2A44(void *a1, uint64_t a2, char **a3)
{
  uint64_t v7 = (uint64_t *)a1[11];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[1];
  uint64_t v10 = sub_1B62C9024((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1F0F74BA8, v7, a1[12], v8, a1[2]);
  uint64_t v11 = (void **)v10;
  if (v7)
  {
    for (; v8; --v8)
    {
      uint64_t v12 = *v7++;
      sub_1B6D094AC(v9, v12, v11, a2, a3);
      if (v3) {
        break;
      }
      ++v11;
    }
  }
  else
  {
    uint64_t v13 = a1[6];
    uint64_t v14 = a1[7];
    if (v13 != v14)
    {
      __n128 v15 = (void **)(v10 + 8 * v13);
      do
      {
        sub_1B6D094AC(v9, v13, v15, a2, a3);
        if (v3) {
          break;
        }
        ++v13;
        ++v15;
      }
      while (v14 != v13);
    }
  }
  return swift_release();
}

uint64_t sub_1B6DA2B40()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6DA2B78()
{
  return sub_1B6CFEFE0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1B6DA2B80(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  sub_1B6DA2C04(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void sub_1B6DA2C04(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t type metadata accessor for QueryResult1()
{
  return sub_1B62C36EC();
}

uint64_t type metadata accessor for QueryResult2()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for QueryResult3()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for QueryResult4()
{
  return swift_getGenericMetadata();
}

_OWORD *vfx_script_particle_set_position(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2];
  unint64_t v5 = sub_1B6A82538(a2);
  if (v6 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v9 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v11[0] = 0;
    swift_retain();
    sub_1B6B33E34(v9, v11, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    return (_OWORD *)swift_release();
  }
  else
  {
    uint64_t result = (_OWORD *)sub_1B6C43C38(v3, v5 | ((HIDWORD(v5) & 1) << 32), v6, v4);
    if (result)
    {
      __n128 v8 = a3;
      v8.n128_u32[3] = 1.0;
      *uint64_t result = v8;
    }
  }
  return result;
}

double vfx_script_particle_get_position(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_position(_:_:)(a1, a2);
}

double vfx_script_particle_get_position(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA32C8(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C43C38);
}

float *vfx_script_particle_set_mass(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  unint64_t v6 = sub_1B6A82538(a2);
  if (v7 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v10 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v11[0] = 0;
    swift_retain();
    sub_1B6B33E34(v10, v11, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    return (float *)swift_release();
  }
  else
  {
    uint64_t result = (float *)sub_1B6C45310(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
    if (result)
    {
      float v9 = 1.0 / a3;
      if (a3 <= 0.001) {
        float v9 = 1000.0;
      }
      *uint64_t result = v9;
    }
  }
  return result;
}

double vfx_script_particle_get_mass(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2];
  unint64_t v4 = sub_1B6A82538(a2);
  if (v5 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v8 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v9[0] = 0;
    swift_retain();
    sub_1B6B33E34(v8, v9, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v6 = (float *)sub_1B6C45310(v2, v4 | ((HIDWORD(v4) & 1) << 32), v5, v3);
    if (v6)
    {
      *(float *)&double result = 1.0 / *v6;
      return result;
    }
  }
  return 0.0;
}

__n128 *vfx_script_particle_set_color(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45370, a3);
}

double vfx_script_particle_get_color(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45370);
}

_OWORD *vfx_script_particle_set_velocity(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2];
  unint64_t v5 = sub_1B6A82538(a2);
  if (v6 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v9 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v11[0] = 0;
    swift_retain();
    sub_1B6B33E34(v9, v11, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    return (_OWORD *)swift_release();
  }
  else
  {
    double result = (_OWORD *)sub_1B6C453D0(v3, v5 | ((HIDWORD(v5) & 1) << 32), v6, v4);
    if (result)
    {
      __n128 v8 = a3;
      v8.n128_u32[3] = 0;
      *double result = v8;
    }
  }
  return result;
}

double vfx_script_particle_get_velocity(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_velocity(_:_:)(a1, a2);
}

double vfx_script_particle_get_velocity(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA32C8(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C453D0);
}

double sub_1B6DA32C8(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  unint64_t v6 = sub_1B6A82538(a2);
  if (v7 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v10 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v12[0] = 0;
    swift_retain();
    sub_1B6B33E34(v10, v12, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    swift_release();
    goto LABEL_9;
  }
  __n128 v8 = (long long *)a3(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
  if (!v8)
  {
LABEL_9:
    *(void *)&long long v9 = 0;
    return *(double *)&v9;
  }
  long long v9 = *v8;
  return *(double *)&v9;
}

__n128 *vfx_script_particle_set_size(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45430, a3);
}

double vfx_script_particle_get_size(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_size(_:_:)(a1, a2);
}

double vfx_script_particle_get_size(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45430);
}

__n128 *vfx_script_particle_set_size3d(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45490, a3);
}

double vfx_script_particle_get_size3d(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_size3d(_:_:)(a1, a2);
}

double vfx_script_particle_get_size3d(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45490);
}

float *vfx_script_particle_set_size1d(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B6DA3FAC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C454F0, a3);
}

double vfx_script_particle_get_size1d(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4110(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C454F0);
}

double *vfx_script_particle_set_size2d(_:_:_:)(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2];
  unint64_t v6 = sub_1B6A82538(a2);
  if (v7 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v9 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v10[0] = 0;
    swift_retain();
    sub_1B6B33E34(v9, v10, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    return (double *)swift_release();
  }
  else
  {
    double result = (double *)sub_1B6C45550(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
    if (result) {
      *double result = a3;
    }
  }
  return result;
}

double vfx_script_particle_get_size2d(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2];
  unint64_t v4 = sub_1B6A82538(a2);
  if (v5 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v8 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v9[0] = 0;
    swift_retain();
    sub_1B6B33E34(v8, v9, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v6 = sub_1B6C45550(v2, v4 | ((HIDWORD(v4) & 1) << 32), v5, v3);
    if (v6) {
      return *(double *)v6;
    }
  }
  return 0.0;
}

__n128 *vfx_script_particle_set_angular_velocity(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C455B0, a3);
}

double vfx_script_particle_get_angular_velocity(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C455B0);
}

__n128 *vfx_script_particle_set_orientation(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45610, a3);
}

double vfx_script_particle_get_orientation(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45610);
}

float *vfx_script_particle_set_angle(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B6DA3FAC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45670, a3);
}

double vfx_script_particle_get_angle(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4110(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45670);
}

float *vfx_script_particle_set_angle_velocity(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B6DA3FAC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C456D0, a3);
}

double vfx_script_particle_get_angle_velocity(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4110(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C456D0);
}

_DWORD *vfx_script_particle_set_id(_:_:_:)(uint64_t *a1, uint64_t a2, int a3)
{
  return sub_1B6DA388C(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45730);
}

unsigned int *vfx_script_particle_get_id(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA39E8(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45730);
}

_DWORD *vfx_script_particle_set_parent_id(_:_:_:)(uint64_t *a1, uint64_t a2, int a3)
{
  return sub_1B6DA388C(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45790);
}

_DWORD *sub_1B6DA388C(uint64_t *a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[2];
  unint64_t v8 = sub_1B6A82538(a2);
  if (v9 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v11 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v12[0] = 0;
    swift_retain();
    sub_1B6B33E34(v11, v12, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    return (_DWORD *)swift_release();
  }
  else
  {
    double result = (_DWORD *)a4(v6, v8 | ((HIDWORD(v8) & 1) << 32), v9, v7);
    if (result) {
      *double result = a3;
    }
  }
  return result;
}

unsigned int *vfx_script_particle_get_parent_id(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA39E8(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45790);
}

unsigned int *sub_1B6DA39E8(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  unint64_t v6 = sub_1B6A82538(a2);
  if (v7 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v9 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v10[0] = 0;
    swift_retain();
    sub_1B6B33E34(v9, v10, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    swift_release();
    return 0;
  }
  else
  {
    double result = (unsigned int *)a3(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
    if (result) {
      return (unsigned int *)*result;
    }
  }
  return result;
}

float *vfx_script_particle_set_texture_frame(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B6DA3FAC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C457F0, a3);
}

double vfx_script_particle_get_texture_frame(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4110(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C457F0);
}

uint64_t vfx_script_particle_set_pivot(_:_:_:)(uint64_t *a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2];
  unint64_t v5 = sub_1B6A82538(a2);
  if (v6 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v10 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v12[0] = 0;
    swift_retain();
    sub_1B6B33E34(v10, v12, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t result = sub_1B6C45850(v3, v5 | ((HIDWORD(v5) & 1) << 32), v6, v4);
    if (result)
    {
      unint64_t v8 = (_DWORD *)result;
      float32x4_t v9 = a3;
      v9.i32[3] = 1.0;
      uint64_t result = sub_1B67487EC(v9);
      *unint64_t v8 = result;
    }
  }
  return result;
}

double vfx_script_particle_get_pivot(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_pivot(_:_:)(a1, a2);
}

double vfx_script_particle_get_pivot(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2];
  unint64_t v4 = sub_1B6A82538(a2);
  if (v5 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v8 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v9[0] = 0;
    swift_retain();
    sub_1B6B33E34(v8, v9, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    swift_release();
  }
  else
  {
    unsigned int v6 = (unsigned int *)sub_1B6C45850(v2, v4 | ((HIDWORD(v4) & 1) << 32), v5, v3);
    if (v6) {
      return sub_1B6748838(*v6);
    }
  }
  return 0.0;
}

__n128 *vfx_script_particle_set_linear_factor(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C458B0, a3);
}

double vfx_script_particle_get_linear_factor(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_linear_factor(_:_:)(a1, a2);
}

double vfx_script_particle_get_linear_factor(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C458B0);
}

__n128 *vfx_script_particle_set_angular_factor(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45910, a3);
}

double vfx_script_particle_get_angular_factor(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_angular_factor(_:_:)(a1, a2);
}

double vfx_script_particle_get_angular_factor(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45910);
}

float *vfx_script_particle_set_age(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B6DA3FAC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45970, a3);
}

double vfx_script_particle_get_age(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4110(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45970);
}

__n128 *vfx_script_particle_set_target(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C459D0, a3);
}

double vfx_script_particle_get_target(uint64_t *a1, uint64_t a2)
{
  return vfx_script_particle_get_target(_:_:)(a1, a2);
}

double vfx_script_particle_get_target(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C459D0);
}

float *vfx_script_particle_set_roughness(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B6DA3FAC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45A30, a3);
}

double vfx_script_particle_get_roughness(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4110(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45A30);
}

float *vfx_script_particle_set_metalness(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B6DA3FAC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45A90, a3);
}

double vfx_script_particle_get_metalness(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4110(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45A90);
}

float *vfx_script_particle_set_emission(_:_:_:)(uint64_t *a1, uint64_t a2, float a3)
{
  return sub_1B6DA3FAC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45AF0, a3);
}

float *sub_1B6DA3FAC(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t), float a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[2];
  unint64_t v8 = sub_1B6A82538(a2);
  if (v9 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v11 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v12[0] = 0;
    swift_retain();
    sub_1B6B33E34(v11, v12, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    return (float *)swift_release();
  }
  else
  {
    uint64_t result = (float *)a3(v6, v8 | ((HIDWORD(v8) & 1) << 32), v9, v7);
    if (result) {
      *uint64_t result = a4;
    }
  }
  return result;
}

double vfx_script_particle_get_emission(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4110(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45AF0);
}

double sub_1B6DA4110(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  unint64_t v6 = sub_1B6A82538(a2);
  if (v7 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v10 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v11[0] = 0;
    swift_retain();
    sub_1B6B33E34(v10, v11, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v8 = (_DWORD *)a3(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
    if (v8)
    {
      LODWORD(result) = *v8;
      return result;
    }
  }
  return 0.0;
}

__n128 *vfx_script_particle_set_user_data1(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45B50, a3);
}

double vfx_script_particle_get_user_data1(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45B50);
}

__n128 *vfx_script_particle_set_user_data2(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45BB0, a3);
}

double vfx_script_particle_get_user_data2(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45BB0);
}

__n128 *vfx_script_particle_set_user_data3(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45C10, a3);
}

double vfx_script_particle_get_user_data3(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45C10);
}

__n128 *vfx_script_particle_set_user_data4(_:_:_:)(uint64_t *a1, uint64_t a2, __n128 a3)
{
  return sub_1B6DA4314(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45C70, a3);
}

__n128 *sub_1B6DA4314(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t), __n128 a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[2];
  unint64_t v7 = sub_1B6A82538(a2);
  if (v8 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v10 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v12[0] = 0;
    swift_retain();
    sub_1B6B33E34(v10, v12, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    return (__n128 *)swift_release();
  }
  else
  {
    double result = (__n128 *)a3(v5, v7 | ((HIDWORD(v7) & 1) << 32), v8, v6);
    if (result) {
      *double result = a4;
    }
  }
  return result;
}

double vfx_script_particle_get_user_data4(_:_:)(uint64_t *a1, uint64_t a2)
{
  return sub_1B6DA4474(a1, a2, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_1B6C45C70);
}

double sub_1B6DA4474(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  unint64_t v6 = sub_1B6A82538(a2);
  if (v7 == -1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v10 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v12[0] = 0;
    swift_retain();
    sub_1B6B33E34(v10, v12, 0xD000000000000021, 0x80000001B6F4DF50);
    swift_release();
    swift_release();
    goto LABEL_9;
  }
  uint64_t v8 = (long long *)a3(v4, v6 | ((HIDWORD(v6) & 1) << 32), v7, v5);
  if (!v8)
  {
LABEL_9:
    *(void *)&long long v9 = 0;
    return *(double *)&v9;
  }
  long long v9 = *v8;
  return *(double *)&v9;
}

void sub_1B6DA45B4()
{
}

void *sub_1B6DA4618(void *result)
{
  if (result)
  {
    sub_1B6DA47EC(result);
    JUMPOUT(0x1BA9B6D80);
  }
  return result;
}

float sub_1B6DA467C(uint64_t a1, float a2)
{
  float result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 24) = result;
  return result;
}

float sub_1B6DA4694(uint64_t a1, float a2)
{
  float result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 28) = result;
  return result;
}

float sub_1B6DA46AC(uint64_t a1, float a2)
{
  float result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 32) = result;
  return result;
}

float sub_1B6DA46C4(uint64_t a1, float a2)
{
  float result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 36) = result;
  return result;
}

float sub_1B6DA46DC(uint64_t a1, float a2)
{
  float result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 40) = result;
  return result;
}

float sub_1B6DA46F4(uint64_t a1, float a2)
{
  float result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 44) = result;
  return result;
}

float sub_1B6DA470C(uint64_t a1, float a2)
{
  float result = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 48) = result;
  return result;
}

float sub_1B6DA4734(float32x4_t *a1, int a2, float32x4_t a3)
{
  if (a2)
  {
    float32x4_t v3 = a1[7];
    float32x4_t v4 = vsubq_f32(a3, a1[4]);
    float32x4_t v5 = vmulq_f32(v3, (float32x4_t)xmmword_1B6E4F550);
    int32x4_t v6 = (int32x4_t)vnegq_f32(v5);
    int8x16_t v7 = (int8x16_t)vtrn2q_s32((int32x4_t)v5, vtrn1q_s32((int32x4_t)v5, v6));
    float32x4_t v8 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL), *(float32x2_t *)v4.f32, 1), (float32x4_t)vextq_s8(v7, v7, 8uLL), v4.f32[0]);
    float32x4_t v9 = (float32x4_t)vrev64q_s32((int32x4_t)v5);
    v9.i32[0] = v6.i32[1];
    v9.i32[3] = v6.i32[2];
    float32x4_t v10 = vmlaq_laneq_f32(v8, v9, v4, 2);
    int32x4_t v11 = (int32x4_t)vnegq_f32(v10);
    int8x16_t v12 = (int8x16_t)vtrn2q_s32((int32x4_t)v10, vtrn1q_s32((int32x4_t)v10, v11));
    float32x4_t v13 = (float32x4_t)vrev64q_s32((int32x4_t)v10);
    v13.i32[0] = v11.i32[1];
    v13.i32[3] = v11.i32[2];
    a3 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v10, v3, 3), v13, v3, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL), *(float32x2_t *)v3.f32, 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), v3.f32[0]));
  }
  return fmaxf(fmaxf(fabsf(a3.f32[0]) + (float)(a1[8].f32[0] * -0.5), 0.0), fmaxf(fmaxf(fabsf(a3.f32[1]) + (float)(a1[8].f32[1] * -0.5), 0.0), fabsf(a3.f32[2])));
}

void *sub_1B6DA47EC(void *a1)
{
  uint64_t v2 = (void *)a1[104];
  if (v2)
  {
    a1[105] = v2;
    operator delete(v2);
  }
  float32x4_t v3 = (void *)a1[101];
  if (v3)
  {
    a1[102] = v3;
    operator delete(v3);
  }
  float32x4_t v4 = (void *)a1[98];
  if (v4)
  {
    a1[99] = v4;
    operator delete(v4);
  }
  float32x4_t v5 = (void *)a1[95];
  if (v5)
  {
    a1[96] = v5;
    operator delete(v5);
  }
  int32x4_t v6 = (void *)a1[92];
  if (v6)
  {
    a1[93] = v6;
    operator delete(v6);
  }
  int8x16_t v7 = (void *)a1[88];
  if (v7)
  {
    a1[89] = v7;
    operator delete(v7);
  }
  float32x4_t v8 = (void *)a1[85];
  if (v8)
  {
    a1[86] = v8;
    operator delete(v8);
  }
  float32x4_t v9 = (void *)a1[82];
  if (v9)
  {
    a1[83] = v9;
    operator delete(v9);
  }
  for (uint64_t i = 0; i != -12; i -= 3)
  {
    int32x4_t v11 = (void *)a1[i + 79];
    if (v11)
    {
      a1[i + 80] = v11;
      operator delete(v11);
    }
  }
  for (uint64_t j = 0; j != -12; j -= 3)
  {
    float32x4_t v13 = (void *)a1[j + 67];
    if (v13)
    {
      a1[j + 68] = v13;
      operator delete(v13);
    }
  }
  for (uint64_t k = 0; k != -12; k -= 3)
  {
    __n128 v15 = (void *)a1[k + 55];
    if (v15)
    {
      a1[k + 56] = v15;
      operator delete(v15);
    }
  }
  __n128 v16 = (void *)a1[25];
  if (v16)
  {
    a1[26] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[22];
  if (v17)
  {
    a1[23] = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)a1[19];
  if (v18)
  {
    a1[20] = v18;
    operator delete(v18);
  }
  return a1;
}

double sub_1B6DA492C(uint64_t a1)
{
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  sub_1B6DA4D68((float32x4_t *)a1, (float32x4_t)xmmword_1B6ECFC90);
  *(void *)(a1 + 240) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 2;
  *(unsigned char *)(a1 + 268) = 0;
  *(void *)(a1 + 272) = 1;
  *(_DWORD *)(a1 + 280) = -1082130432;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 3;
  *(unsigned char *)(a1 + 300) = 0;
  *(void *)(a1 + 304) = 2;
  *(_DWORD *)(a1 + 312) = -1082130432;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 332) = 0;
  *(void *)(a1 + 336) = 3;
  *(_DWORD *)(a1 + 344) = 1065353216;
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 1;
  *(unsigned char *)(a1 + 364) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  double result = 0.000000789642512;
  *(void *)(a1 + 44) = 0x3EAA7EFA3F400000;
  *(_WORD *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 730) = 0;
  return result;
}

void sub_1B6DA4A10(uint64_t a1, float a2, float a3, float a4)
{
  *(float *)(a1 + 224) = a2;
  *(float *)(a1 + 228) = a3;
  *(float *)(a1 + 232) = a4;
  float v5 = fmaxf(a4, 1.0e-12);
  int v6 = llroundf((float)(1.0 / v5) * a2);
  *(float *)(a1 + 144) = v5;
  *(float *)(a1 + 148) = 1.0 / v5;
  if (v6 >= 1024) {
    int v6 = 1024;
  }
  if (v6 <= 8) {
    LOWORD(v6) = 8;
  }
  int v7 = v6 & 0x7FC;
  int v8 = llroundf((float)(1.0 / v5) * a3);
  if (v8 >= 1024) {
    int v9 = 1024;
  }
  else {
    int v9 = v8;
  }
  if (v9 <= 8) {
    int v9 = 8;
  }
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v9;
  float v10 = v5 * (float)v7;
  float v11 = v5 * (float)v9;
  *(float *)(a1 + 128) = v10;
  *(float *)(a1 + 132) = v11;
  if (v10 < v11) {
    float v10 = v5 * (float)v9;
  }
  *(float *)(a1 + 136) = v10;
  *(float *)(a1 + 140) = 1.0 / v10;
  *(_DWORD *)(a1 + 8) = v7 | 2;
  *(_DWORD *)(a1 + 12) = v9 + 2;
  unint64_t v12 = (v7 | 2u) * (v9 + 2);
  *(_DWORD *)(a1 + 16) = v12;
  if (v7 <= v9) {
    int v7 = v9;
  }
  *(float *)(a1 + 20) = (float)v7;
  float32x4_t v13 = (uint64_t *)(a1 + 152);
  sub_1B642860C(a1 + 152, v12);
  sub_1B642860C(a1 + 176, *(int *)(a1 + 16));
  sub_1B642860C(a1 + 200, *(int *)(a1 + 16));
  sub_1B6DA4EB0(a1 + 368, *(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  sub_1B6DA4EB0(a1 + 464, *(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  sub_1B6DA4EB0(a1 + 560, *(_DWORD *)a1, *(_DWORD *)(a1 + 4));
  sub_1B642860C(a1 + 656, *(int *)(a1 + 16));
  sub_1B642860C(a1 + 680, *(int *)(a1 + 16));
  sub_1B642860C(a1 + 704, *(int *)(a1 + 16));
  sub_1B642860C(a1 + 736, *(int *)(a1 + 16));
  sub_1B642860C(a1 + 760, *(int *)(a1 + 16));
  sub_1B642860C(a1 + 784, *(int *)(a1 + 16));
  sub_1B642860C(a1 + 808, *(int *)(a1 + 16));
  sub_1B642860C(a1 + 832, *(int *)(a1 + 16));
  sub_1B6DA4F1C(a1);
  uint64_t v14 = *(unsigned int *)(a1 + 16);
  if ((int)v14 >= 1)
  {
    size_t v15 = 4 * v14;
    bzero(*(void **)(a1 + 200), 4 * v14);
    bzero(*(void **)(a1 + 784), v15);
  }
  sub_1B6DA5018((int *)a1, v13, a1 + 368);
  sub_1B6DA5018((int *)a1, (uint64_t *)(a1 + 176), a1 + 464);
  sub_1B6DA5018((int *)a1, (uint64_t *)(a1 + 200), a1 + 560);
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if ((int)v16 < 1)
  {
    *(_WORD *)(a1 + 728) = 257;
    *(unsigned char *)(a1 + 730) = 1;
  }
  else
  {
    size_t v17 = 4 * v16;
    bzero(*(void **)(a1 + 656), 4 * v16);
    bzero(*(void **)(a1 + 680), v17);
    bzero(*(void **)(a1 + 704), v17);
    *(_WORD *)(a1 + 728) = 257;
    *(unsigned char *)(a1 + 730) = 1;
    bzero(*(void **)(a1 + 808), v17);
    uint64_t v18 = *(void **)(a1 + 832);
    bzero(v18, v17);
  }
}

uint64_t sub_1B6DA4CAC(uint64_t a1, float a2, float a3, float a4)
{
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  sub_1B6DA492C(a1);
  sub_1B6DA4A10(a1, a2, a3, a4);
  return a1;
}

__n128 *sub_1B6DA4D60(__n128 *result, __n128 a2)
{
  result[4] = a2;
  return result;
}

float32x4_t *sub_1B6DA4D68(float32x4_t *result, float32x4_t a2)
{
  int8x16_t v2 = (int8x16_t)vmulq_f32(a2, a2);
  float32x2_t v3 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  float v4 = vaddv_f32(v3);
  if (sqrtf(v4) != 1.0)
  {
    if (v4 == 0.0)
    {
      a2 = (float32x4_t)xmmword_1B6E4F370;
    }
    else
    {
      unsigned __int32 v5 = vadd_f32(v3, (float32x2_t)vdup_lane_s32((int32x2_t)v3, 1)).u32[0];
      float32x2_t v6 = vrsqrte_f32((float32x2_t)v5);
      float32x2_t v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5, vmul_f32(v6, v6)));
      a2 = vmulq_n_f32(a2, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5, vmul_f32(v7, v7))).f32[0]);
    }
  }
  int8x16_t v8 = (int8x16_t)vmulq_f32(a2, a2);
  *(float32x2_t *)v8.i8 = vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  float32x4_t v9 = vmulq_f32(a2, (float32x4_t)xmmword_1B6E4F550);
  v8.i32[0] = vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  float32x2_t v10 = vrecpe_f32((float32x2_t)v8.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10));
  result[7] = vmulq_n_f32(v9, vmul_f32(v11, vrecps_f32((float32x2_t)v8.u32[0], v11)).f32[0]);
  int32x4_t v12 = (int32x4_t)vnegq_f32(v9);
  int8x16_t v13 = (int8x16_t)vtrn2q_s32((int32x4_t)v9, vtrn1q_s32((int32x4_t)v9, v12));
  float32x4_t v14 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v12, 8uLL), (float32x4_t)0), (float32x4_t)0, (float32x4_t)vextq_s8(v13, v13, 8uLL));
  float32x4_t v15 = (float32x4_t)vrev64q_s32((int32x4_t)v9);
  v15.i32[0] = v12.i32[1];
  v15.i32[3] = v12.i32[2];
  float32x4_t v16 = vaddq_f32(v15, v14);
  int32x4_t v17 = (int32x4_t)vnegq_f32(v16);
  int8x16_t v18 = (int8x16_t)vtrn2q_s32((int32x4_t)v16, vtrn1q_s32((int32x4_t)v16, v17));
  float32x4_t v19 = (float32x4_t)vrev64q_s32((int32x4_t)v16);
  v19.i32[0] = v17.i32[1];
  v19.i32[3] = v17.i32[2];
  result[5] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v16, a2, 3), v19, a2, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 8uLL), *(float32x2_t *)a2.f32, 1), (float32x4_t)vextq_s8(v18, v18, 8uLL), a2.f32[0]));
  result[6] = a2;
  return result;
}

BOOL sub_1B6DA4E74(float *a1, float a2, float a3, float a4)
{
  return a1[36] <= 0.0 || a1[56] != a2 || a1[57] != a3 || a1[58] != a4;
}

void sub_1B6DA4EB0(uint64_t a1, int a2, int a3)
{
  unint64_t v5 = a2;
  sub_1B642860C(a1, a2);
  sub_1B642860C(a1 + 24, a3);
  sub_1B642860C(a1 + 48, v5);

  sub_1B642860C(a1 + 72, a3);
}

void sub_1B6DA4F1C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if ((int)v1 >= 1)
  {
    size_t v3 = 4 * v1;
    memset_pattern16(*(void **)(a1 + 152), &unk_1B6ECFC80, 4 * v1);
    memset_pattern16(*(void **)(a1 + 176), &unk_1B6ECFC80, v3);
    memset_pattern16(*(void **)(a1 + 736), &unk_1B6ECFC80, v3);
    float v4 = *(void **)(a1 + 760);
    memset_pattern16(v4, &unk_1B6ECFC80, v3);
  }
}

void sub_1B6DA4FB8(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if ((int)v1 >= 1)
  {
    size_t v3 = 4 * v1;
    bzero(*(void **)(a1 + 200), 4 * v1);
    float v4 = *(void **)(a1 + 784);
    bzero(v4, v3);
  }
}

float sub_1B6DA5018(int *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 >= 1)
  {
    uint64_t v5 = a1[2];
    int v6 = v5 * v3;
    float32x2_t v7 = *(_DWORD **)a3;
    int8x16_t v8 = *(float **)(a3 + 48);
    float32x4_t v9 = (float *)(*a2 + 4 * v5 + 4);
    float32x2_t v10 = (int *)(*a2 + 4 * v6 + 4);
    uint64_t v11 = *a1;
    do
    {
      int v12 = *v10++;
      *v7++ = v12;
      float v13 = *v9++;
      float result = v13;
      *v8++ = v13;
      --v11;
    }
    while (v11);
  }
  if ((int)v3 >= 1)
  {
    uint64_t v15 = a1[2];
    uint64_t v16 = *a2;
    int32x4_t v17 = *(_DWORD **)(a3 + 24);
    int8x16_t v18 = *(float **)(a3 + 72);
    uint64_t v19 = v15 + v4;
    uint64_t v20 = 4 * v15;
    do
    {
      *v17++ = *(_DWORD *)(v16 + v20 + 4);
      float result = *(float *)(v16 + 4 * v19);
      *v18++ = result;
      v16 += v20;
      --v3;
    }
    while (v3);
  }
  return result;
}

float sub_1B6DA50A8(uint64_t a1)
{
  sub_1B6DA5018((int *)a1, (uint64_t *)(a1 + 152), a1 + 368);
  sub_1B6DA5018((int *)a1, (uint64_t *)(a1 + 176), a1 + 464);

  return sub_1B6DA5018((int *)a1, (uint64_t *)(a1 + 200), a1 + 560);
}

void sub_1B6DA5100(uint64_t a1, char a2, char a3, char a4, char a5, char a6, float a7)
{
  int v13 = llroundf((float)(*(float *)(a1 + 44) * 16.0) + 4.0);
  float v14 = fmaxf(fminf(a7, 1.0), 0.0);
  if (v13 >= 20) {
    int v13 = 20;
  }
  int v15 = llroundf((float)(*(float *)(a1 + 48) * 16.0) + 4.0);
  if (v13 <= 4) {
    int v16 = 4;
  }
  else {
    int v16 = v13;
  }
  if (v15 >= 20) {
    int v17 = 20;
  }
  else {
    int v17 = v15;
  }
  if (v17 <= 4) {
    int v18 = 4;
  }
  else {
    int v18 = v17;
  }
  float v19 = powf(*(float *)(a1 + 24), 3.0);
  float v21 = *(float *)(a1 + 28);
  float v20 = *(float *)(a1 + 32);
  float v22 = powf(v14, 0.888);
  float v23 = powf(fmaxf(*(float *)(a1 + 36) + *(float *)(a1 + 36), 0.0), 0.777);
  float v24 = powf(fmaxf(*(float *)(a1 + 40) + *(float *)(a1 + 40), 0.0), 0.777);
  if ((a2 & 1) == 0)
  {
    float v25 = v22 * v23;
    if ((float)(v22 * v23) > 0.0)
    {
      if (v25 >= 1.0)
      {
        sub_1B6DA4F1C(a1);
      }
      else
      {
        float v26 = 1.0 - v25;
        if (v26 != 1.0)
        {
          int v27 = *(_DWORD *)(a1 + 16);
          if (v27 >= 1)
          {
            int64x2_t v28 = *(float **)(a1 + 152);
            int v29 = *(_DWORD *)(a1 + 16);
            do
            {
              *int64x2_t v28 = v26 * *v28;
              ++v28;
              --v29;
            }
            while (v29);
            long long v30 = *(float **)(a1 + 176);
            do
            {
              *long long v30 = v26 * *v30;
              ++v30;
              --v27;
            }
            while (v27);
          }
        }
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    float v31 = v22 * v24;
    if ((float)(v22 * v24) > 0.0)
    {
      if (v31 >= 1.0)
      {
        uint64_t v35 = *(unsigned int *)(a1 + 16);
        if ((int)v35 >= 1)
        {
          size_t v36 = 4 * v35;
          bzero(*(void **)(a1 + 200), 4 * v35);
          bzero(*(void **)(a1 + 784), v36);
        }
      }
      else
      {
        float v32 = 1.0 - v31;
        if (v32 != 1.0)
        {
          int v33 = *(_DWORD *)(a1 + 16);
          if (v33 >= 1)
          {
            char v34 = *(float **)(a1 + 200);
            do
            {
              *char v34 = v32 * *v34;
              ++v34;
              --v33;
            }
            while (v33);
          }
        }
      }
    }
  }
  if ((a4 & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 728) && v14 != 0.0)
    {
      int v53 = *(_DWORD *)(a1 + 16);
      if (v53 >= 1)
      {
        uint64_t v54 = *(float **)(a1 + 656);
        uint64_t v55 = *(float **)(a1 + 152);
        do
        {
          float v56 = *v54++;
          *uint64_t v55 = *v55 + (float)(v14 * v56);
          ++v55;
          --v53;
        }
        while (v53);
      }
    }
    if (!*(unsigned char *)(a1 + 729) && v14 != 0.0)
    {
      int v57 = *(_DWORD *)(a1 + 16);
      if (v57 >= 1)
      {
        char v58 = *(float **)(a1 + 680);
        int v59 = *(float **)(a1 + 176);
        do
        {
          float v60 = *v58++;
          *int v59 = *v59 + (float)(v14 * v60);
          ++v59;
          --v57;
        }
        while (v57);
      }
    }
    if (!*(unsigned char *)(a1 + 730) && v14 != 0.0)
    {
      int v61 = *(_DWORD *)(a1 + 16);
      if (v61 >= 1)
      {
        uint64_t v62 = *(float **)(a1 + 704);
        char v63 = *(float **)(a1 + 200);
        do
        {
          float v64 = *v62++;
          float *v63 = *v63 + (float)(v14 * v64);
          ++v63;
          --v61;
        }
        while (v61);
      }
    }
  }
  if ((a5 & 1) == 0)
  {
    float v37 = v19 * 0.01;
    if ((float)(v19 * 0.01) > 0.0)
    {
      long long v38 = *(_OWORD *)(a1 + 152);
      long long v39 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 736);
      long long v40 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 168) = v39;
      *(_OWORD *)(a1 + 736) = v38;
      *(_OWORD *)(a1 + 752) = v40;
      long long v41 = *(_OWORD *)(a1 + 184);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 768) = v41;
      sub_1B6DA5648((int *)a1, 1, (float **)(a1 + 152), (uint64_t *)(a1 + 736), v18, v37, v14);
      sub_1B6DA5648((int *)a1, 2, (float **)(a1 + 176), (uint64_t *)(a1 + 760), v18, v37, v14);
    }
    if ((float)(v21 * 10.0) > 0.0) {
      sub_1B6DA5788((unsigned int *)a1, (float **)(a1 + 152), (float **)(a1 + 176), (float **)(a1 + 736), (float **)(a1 + 760), (float **)(a1 + 784), v21 * 10.0, v14);
    }
    sub_1B6DA5A3C((float *)a1, (float **)(a1 + 152), (float **)(a1 + 176), (float **)(a1 + 736), (float **)(a1 + 760), v16);
    long long v42 = *(_OWORD *)(a1 + 152);
    long long v43 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 736);
    long long v44 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 168) = v43;
    *(_OWORD *)(a1 + 736) = v42;
    *(_OWORD *)(a1 + 752) = v44;
    long long v45 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a1 + 768) = v45;
    sub_1B6DA5D1C((unsigned int *)a1, 1, (float **)(a1 + 152), (uint64_t *)(a1 + 736), (void *)(a1 + 736), (void *)(a1 + 760), v14);
    sub_1B6DA5D1C((unsigned int *)a1, 2, (float **)(a1 + 176), (uint64_t *)(a1 + 760), (void *)(a1 + 736), (void *)(a1 + 760), v14);
    sub_1B6DA5A3C((float *)a1, (float **)(a1 + 152), (float **)(a1 + 176), (float **)(a1 + 736), (float **)(a1 + 760), v16);
  }
  if ((a6 & 1) == 0)
  {
    if ((float)(v20 * 0.1) > 0.0)
    {
      long long v46 = *(_OWORD *)(a1 + 200);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 784) = v46;
      uint64_t v47 = *(void *)(a1 + 216);
      *(void *)(a1 + 216) = *(void *)(a1 + 800);
      *(void *)(a1 + 800) = v47;
      sub_1B6DA5648((int *)a1, 0, (float **)(a1 + 200), (uint64_t *)(a1 + 784), v18, v20 * 0.1, v14);
    }
    long long v48 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 784) = v48;
    uint64_t v49 = *(void *)(a1 + 216);
    *(void *)(a1 + 216) = *(void *)(a1 + 800);
    *(void *)(a1 + 800) = v49;
    sub_1B6DA5D1C((unsigned int *)a1, 0, (float **)(a1 + 200), (uint64_t *)(a1 + 784), (void *)(a1 + 152), (void *)(a1 + 176), v14);
  }
  if (!*(unsigned char *)(a1 + 728))
  {
    uint64_t v50 = *(unsigned int *)(a1 + 16);
    if ((int)v50 >= 1) {
      bzero(*(void **)(a1 + 656), 4 * v50);
    }
    *(unsigned char *)(a1 + 728) = 1;
  }
  if (!*(unsigned char *)(a1 + 729))
  {
    uint64_t v51 = *(unsigned int *)(a1 + 16);
    if ((int)v51 >= 1) {
      bzero(*(void **)(a1 + 680), 4 * v51);
    }
    *(unsigned char *)(a1 + 729) = 1;
  }
  if (!*(unsigned char *)(a1 + 730))
  {
    uint64_t v52 = *(unsigned int *)(a1 + 16);
    if ((int)v52 >= 1) {
      bzero(*(void **)(a1 + 704), 4 * v52);
    }
    *(unsigned char *)(a1 + 730) = 1;
  }
}

void sub_1B6DA5648(int *a1, int a2, float **a3, uint64_t *a4, int a5, float a6, float a7)
{
  if (a5 >= 1)
  {
    int v12 = 0;
    int v13 = *a1;
    int v14 = a1[1];
    float v15 = (float)(a6 * a7) * (float)(v14 * *a1);
    uint64_t v16 = (*a1 + 1);
    do
    {
      if (v13 >= 1)
      {
        uint64_t v17 = *a4;
        int v18 = *a3;
        uint64_t v19 = 1;
        do
        {
          if (v14 <= 0)
          {
            uint64_t v22 = v19 + 1;
          }
          else
          {
            uint64_t v20 = a1[2];
            uint64_t v21 = 4 * v19;
            uint64_t v22 = v19 + 1;
            uint64_t v23 = 4 * v20;
            float v24 = &v18[2 * v20];
            uint64_t v25 = v17 + 4 * v20;
            float v26 = &v18[v20];
            uint64_t v27 = (v14 + 1) - 1;
            do
            {
              *(float *)((char *)v26 + v21) = (float)(1.0 / (float)((float)(v15 * 4.0) + 1.0))
                                            * (float)(*(float *)(v25 + v21)
                                                    + (float)(v15
                                                            * (float)((float)((float)(*(float *)((char *)v26 + v21 - 4)
                                                                                    + *(float *)((char *)v26 + v21 + 4))
                                                                            + *(float *)((char *)v18 + v21))
                                                                    + *(float *)((char *)v24 + v21))));
              v21 += v23;
              --v27;
            }
            while (v27);
          }
          uint64_t v19 = v22;
        }
        while (v22 != v16);
      }
      sub_1B6DA672C((unsigned int *)a1, a2, a3);
      ++v12;
    }
    while (v12 != a5);
  }
}

float sub_1B6DA5788(unsigned int *a1, float **a2, float **a3, float **a4, float **a5, float **a6, float a7, float a8)
{
  uint64_t v14 = *a1;
  uint64_t v15 = a1[4];
  if ((int)v14 <= 0)
  {
    sub_1B6DA672C(a1, 0, a6);
  }
  else
  {
    int v18 = a1[1];
    uint64_t v19 = *a2;
    uint64_t v20 = *a6;
    uint64_t v21 = v14 + 1;
    uint64_t v22 = (uint64_t)(*a3 - 1);
    uint64_t v23 = 1;
    do
    {
      if (v18 <= 0)
      {
        uint64_t v25 = v23 + 1;
      }
      else
      {
        uint64_t v24 = (int)a1[2];
        uint64_t v25 = v23 + 1;
        float v26 = &v19[v23];
        uint64_t v27 = 4 * v24;
        uint64_t v28 = 4 * (v23 + v24);
        uint64_t v29 = 2 * v24;
        uint64_t v30 = (v18 + 1) - 1;
        do
        {
          *(float *)((char *)v20 + v28) = vabds_f32((float)(v26[v29] - *v26) + *(float *)(v22 + v28), *(float *)(v22 + v28 + 8));
          float v26 = (float *)((char *)v26 + v27);
          v28 += v27;
          --v30;
        }
        while (v30);
      }
      uint64_t v23 = v25;
    }
    while (v25 != v21);
    sub_1B6DA672C(a1, 0, a6);
    float v31 = *a6;
    uint64_t v32 = (uint64_t)(*a6 + 1);
    uint64_t v33 = 1;
    do
    {
      if (v18 <= 0)
      {
        uint64_t v36 = v33 + 1;
      }
      else
      {
        unint64_t v34 = 0;
        uint64_t v35 = (int)a1[2];
        uint64_t v36 = v33 + 1;
        float v37 = *a5;
        uint64_t v38 = (uint64_t)&(*a2)[v33];
        uint64_t v39 = v33 + v35;
        uint64_t v40 = (uint64_t)&(*a4)[v33 + v35];
        uint64_t v41 = 8 * v35 + 4 * v33;
        long long v42 = (char *)*a2 + v41;
        long long v43 = (char *)v31 + v41;
        uint64_t v44 = (uint64_t)&(*a3)[v33 + 1 + v35];
        uint64_t v45 = (v18 + 1) - 1;
        uint64_t v46 = 1;
        do
        {
          float v47 = v31[v33 + v34 / 4] - *(float *)&v43[v34];
          float v48 = *(float *)(v32 + 4 * (v33 + v35) + v34) - *(float *)(v32 + 4 * (v33 + v35) + v34 - 8);
          float v49 = (float)(v48 * v48) + (float)(v47 * v47);
          if (v49 <= 1.0e-12)
          {
            *(_DWORD *)(v40 + v34) = 0;
            float v52 = 0.0;
            uint64_t v51 = v39;
          }
          else
          {
            float v50 = (float)((float)(a7 * a8)
                        * (float)((float)((float)(*(float *)&v42[v34] - *(float *)(v38 + v34))
                                        + *(float *)(v44 + v34 - 8))
                                - *(float *)(v44 + v34)))
                / sqrtf(v49);
            uint64_t v51 = v46 * v35 + v33;
            *(float *)(v40 + v34) = v47 * v50;
            float v52 = v48 * v50;
          }
          v37[v51] = v52;
          v34 += 4 * v35;
          v39 += v35;
          ++v46;
          --v45;
        }
        while (v45);
      }
      uint64_t v33 = v36;
    }
    while (v36 != v21);
  }
  if ((int)v15 >= 1)
  {
    int v53 = *a4;
    uint64_t v54 = *a2;
    uint64_t v55 = *a5;
    float v56 = *a3;
    do
    {
      float v57 = *v53++;
      float *v54 = v57 + *v54;
      ++v54;
      float v58 = *v55++;
      float *v56 = v58 + *v56;
      ++v56;
      --v15;
    }
    while (v15);
  }
  sub_1B6DA672C(a1, 1, a2);

  return sub_1B6DA672C(a1, 2, a3);
}

float sub_1B6DA5A3C(float *a1, float **a2, float **a3, float **a4, float **a5, int a6)
{
  uint64_t v13 = *(unsigned int *)a1;
  int v12 = *((_DWORD *)a1 + 1);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = *a3;
    uint64_t v15 = *a5;
    uint64_t v16 = *a4;
    uint64_t v17 = (uint64_t)(*a2 + 2);
    uint64_t v18 = 1;
    uint64_t v19 = 4;
    float v20 = -0.5 / a1[5];
    do
    {
      if (v12 >= 1)
      {
        uint64_t v21 = *((int *)a1 + 2);
        uint64_t v22 = 4 * v21;
        uint64_t v23 = &v15[v21];
        uint64_t v24 = &v16[v21];
        uint64_t v25 = &v14[2 * v21];
        uint64_t v26 = v17 + 4 * v21;
        uint64_t v27 = (v12 + 1) - 1;
        uint64_t v28 = v19;
        do
        {
          *(float *)((char *)v23 + v28) = v20
                                        * (float)((float)((float)(*(float *)(v26 + v28 - 4) - *(float *)(v26 + v28 - 12))
                                                        + *(float *)((char *)v25 + v28))
                                                - *(float *)((char *)v14 + v28));
          *(float *)((char *)v24 + v28) = 0.0;
          v28 += v22;
          --v27;
        }
        while (v27);
      }
      ++v18;
      v19 += 4;
    }
    while (v18 != v13 + 1);
  }
  sub_1B6DA672C((unsigned int *)a1, 0, a5);
  sub_1B6DA6688((int *)a1, a4, 0.0);
  if (a6 >= 1)
  {
    int v29 = 0;
    uint64_t v30 = *a4;
    float v31 = *a5;
    __asm { FMOV            V5.4S, #0.25 }
    float32x4_t v57 = _Q5;
    do
    {
      if ((int)v13 >= 1)
      {
        int v37 = 1;
        do
        {
          if (v12 >= 1)
          {
            for (int i = 0; i != v12; ++i)
            {
              unsigned int v39 = *((_DWORD *)a1 + 2);
              int v40 = v39 * (i + 1);
              *(float32x4_t *)&v30[v40 + v37] = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)&v31[v40 + v37], *(float32x4_t *)&v30[v37 + v39 * i]), *(float32x4_t *)&v30[v37 - 1 + v40]), *(float32x4_t *)&v30[v37 + 1 + v40]), *(float32x4_t *)&v30[v37 + v39 * (i + 2)]), _Q5);
            }
          }
          v37 += 4;
        }
        while (v37 <= (int)v13);
      }
      sub_1B6DA672C((unsigned int *)a1, 0, a4);
      _Q5 = v57;
      ++v29;
    }
    while (v29 != a6);
  }
  if ((int)v13 >= 1)
  {
    uint64_t v41 = *a4;
    long long v42 = *a2;
    float v43 = a1[5] * -0.5;
    uint64_t v44 = *a3;
    uint64_t v45 = (uint64_t)(*a4 + 2);
    uint64_t v46 = 1;
    uint64_t v47 = 4;
    do
    {
      if (v12 >= 1)
      {
        uint64_t v48 = *((int *)a1 + 2);
        uint64_t v49 = 4 * v48;
        float v50 = &v42[v48];
        uint64_t v51 = &v44[v48];
        float v52 = &v41[2 * v48];
        uint64_t v53 = v45 + 4 * v48;
        uint64_t v54 = (v12 + 1) - 1;
        uint64_t v55 = v47;
        do
        {
          *(float *)((char *)v50 + v55) = *(float *)((char *)v50 + v55)
                                        + (float)(v43 * (float)(*(float *)(v53 + v55 - 4) - *(float *)(v53 + v55 - 12)));
          *(float *)((char *)v51 + v55) = *(float *)((char *)v51 + v55)
                                        + (float)(v43
                                                * (float)(*(float *)((char *)v52 + v55) - *(float *)((char *)v41 + v55)));
          v55 += v49;
          --v54;
        }
        while (v54);
      }
      ++v46;
      v47 += 4;
    }
    while (v46 != v13 + 1);
  }
  sub_1B6DA672C((unsigned int *)a1, 1, a2);

  return sub_1B6DA672C((unsigned int *)a1, 2, a3);
}

float sub_1B6DA5D1C(unsigned int *a1, int a2, float **a3, uint64_t *a4, void *a5, void *a6, float a7)
{
  uint64_t v8 = *a1;
  if ((int)v8 >= 1)
  {
    int v9 = a1[1];
    float v10 = (float)(int)v8 + 0.5;
    float v11 = -(float)(*((float *)a1 + 5) * a7);
    uint64_t v12 = *a4;
    uint64_t v13 = v8 + 1;
    uint64_t v14 = *a5 + 4;
    uint64_t v15 = *a6 + 4;
    uint64_t v16 = *a3 + 1;
    uint64_t v17 = 1;
    do
    {
      if (v9 >= 1)
      {
        float v18 = (float)(int)v17;
        uint64_t v19 = (int)a1[2];
        uint64_t v20 = 4 * v19;
        uint64_t v21 = 1;
        do
        {
          float v22 = v18 + (float)(v11 * *(float *)(v14 + v20));
          float v23 = 0.5;
          float v24 = 0.5;
          if (v22 >= 0.5)
          {
            float v24 = v18 + (float)(v11 * *(float *)(v14 + v20));
            if (v22 > v10) {
              float v24 = v10;
            }
          }
          float v25 = (float)(int)v21 + (float)(v11 * *(float *)(v15 + v20));
          if (v25 >= 0.5)
          {
            float v23 = (float)(int)v21 + (float)(v11 * *(float *)(v15 + v20));
            if (v25 > (float)((float)v9 + 0.5)) {
              float v23 = (float)v9 + 0.5;
            }
          }
          int v26 = (int)v23;
          float v27 = v23 - (float)(int)v23;
          int v28 = v19 * v26;
          v16[(unint64_t)v20 / 4] = (float)((float)(v24 - (float)(int)v24)
                                                 * (float)((float)(v27
                                                                 * *(float *)(v12 + 4
                                                                                  * ((int)v19 + v28 + (int)v24 + 1)))
                                                         + (float)((float)(1.0 - v27)
                                                                 * *(float *)(v12 + 4 * (v28 + (int)v24 + 1)))))
                                         + (float)((float)(1.0 - (float)(v24 - (float)(int)v24))
                                                 * (float)((float)(v27
                                                                 * *(float *)(v12 + 4 * ((int)v19 + v28 + (int)v24)))
                                                         + (float)((float)(1.0 - v27)
                                                                 * *(float *)(v12 + 4 * (v28 + (int)v24)))));
          ++v21;
          v20 += 4 * v19;
        }
        while (v9 + 1 != v21);
      }
      ++v17;
      v14 += 4;
      v15 += 4;
      ++v16;
    }
    while (v17 != v13);
  }
  return sub_1B6DA672C(a1, a2, a3);
}

float32x4_t *sub_1B6DA5E8C(float32x4_t *result, int a2, float32x4_t a3, float a4, float32x4_t a5, float a6)
{
  uint64_t v8 = (uint64_t)result;
  if (a2)
  {
    float32x4_t v9 = vmulq_f32(vsubq_f32(a3, result[4]), result[5]);
    LODWORD(v10) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).u32[0];
  }
  else
  {
    float v10 = a3.f32[2];
  }
  float v11 = fabsf(v10);
  if (a6 > 0.0 && v11 < a4)
  {
    float v13 = result[8].f32[3] / a6;
    float v14 = acosf(v10 / a4);
    float v15 = sinf(v14) * a4;
    if (a2)
    {
      float32x4_t v16 = *(float32x4_t *)(v8 + 112);
      float32x4_t v17 = vsubq_f32(a3, *(float32x4_t *)(v8 + 64));
      float32x4_t v18 = vmulq_f32(v16, (float32x4_t)xmmword_1B6E4F550);
      int8x16_t v19 = (int8x16_t)vnegq_f32(v18);
      int8x16_t v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, (int32x4_t)v19));
      float32x4_t v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
      float32x4_t v22 = (float32x4_t)vextq_s8((int8x16_t)v18, v19, 8uLL);
      float32x4_t v23 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
      v23.i32[0] = v19.i32[1];
      v23.i32[3] = v19.i32[2];
      float32x4_t v24 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v22, *(float32x2_t *)v17.f32, 1), v21, v17.f32[0]), v23, v17, 2);
      int8x16_t v25 = (int8x16_t)vnegq_f32(v24);
      int8x16_t v26 = (int8x16_t)vtrn2q_s32((int32x4_t)v24, vtrn1q_s32((int32x4_t)v24, (int32x4_t)v25));
      float32x4_t v27 = (float32x4_t)vrev64q_s32((int32x4_t)v24);
      v27.i32[0] = v25.i32[1];
      v27.i32[3] = v25.i32[2];
      float32x2_t v28 = vadd_f32((float32x2_t)*(_OWORD *)&vmlaq_laneq_f32(vmulq_laneq_f32(v24, v16, 3), v27, v16, 2), (float32x2_t)*(_OWORD *)&vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v24, v25, 8uLL), *(float32x2_t *)v16.f32, 1), (float32x4_t)vextq_s8(v26, v26, 8uLL), v16.f32[0]));
      float32x4_t v29 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v22, *(float32x2_t *)a5.f32, 1), v21, a5.f32[0]), v23, a5, 2);
      int8x16_t v30 = (int8x16_t)vnegq_f32(v29);
      int8x16_t v31 = (int8x16_t)vtrn2q_s32((int32x4_t)v29, vtrn1q_s32((int32x4_t)v29, (int32x4_t)v30));
      float32x4_t v32 = (float32x4_t)vrev64q_s32((int32x4_t)v29);
      v32.i32[0] = v30.i32[1];
      v32.i32[3] = v30.i32[2];
      unint64_t v33 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v29, v16, 3), v32, v16, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v29, v30, 8uLL), *(float32x2_t *)v16.f32, 1), (float32x4_t)vextq_s8(v31, v31, 8uLL), v16.f32[0])).u64[0];
    }
    else
    {
      float32x2_t v28 = *(float32x2_t *)a3.f32;
      unint64_t v33 = a5.i64[0];
    }
    double v37 = *(double *)&v28;
    float32x2_t v39 = (float32x2_t)v33;
    int v34 = sub_1B6DA6048(v8, (uint64_t *)(v8 + 656), 0, *(double *)&v28, v15, v13 * *(float *)&v33) ^ 1;
    if (!*(unsigned char *)(v8 + 728)) {
      LOBYTE(v34) = 0;
    }
    *(unsigned char *)(v8 + 728) = v34;
    float result = (float32x4_t *)sub_1B6DA6048(v8, (uint64_t *)(v8 + 680), 0, v37, v15, vmuls_lane_f32(v13, v39, 1));
    char v35 = result ^ 1;
    if (!*(unsigned char *)(v8 + 729)) {
      char v35 = 0;
    }
    *(unsigned char *)(v8 + 729) = v35;
  }
  return result;
}

uint64_t sub_1B6DA6048(uint64_t a1, uint64_t *a2, int a3, double a4, float a5, float a6)
{
  uint64_t v6 = 0;
  BOOL v7 = a6 == 0.0 && a3 == 0;
  char v8 = v7;
  if (a5 > 1.0e-12 && (v8 & 1) == 0)
  {
    float v9 = *(float *)(a1 + 128);
    if ((float)(*(float *)&a4 + a5) <= (float)(v9 * -0.5)) {
      return 0;
    }
    if ((float)(*(float *)&a4 - a5) >= (float)(v9 * 0.5)) {
      return 0;
    }
    float v10 = *(float *)(a1 + 132);
    if ((float)(*((float *)&a4 + 1) + a5) <= (float)(v10 * -0.5)
      || (float)(*((float *)&a4 + 1) - a5) >= (float)(v10 * 0.5))
    {
      return 0;
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 4);
      float v12 = *(float *)(a1 + 148);
      float v13 = (float)(v12 * (float)(*((float *)&a4 + 1) + (float)(v10 * 0.5))) + 1.0;
      float v14 = v12 * a5;
      int v15 = vcvtms_s32_f32(v13 - v14);
      int v16 = v15 & ~(v15 >> 31);
      signed int v17 = vcvtps_s32_f32(v13 + v14);
      if (v11 + 1 < v17) {
        signed int v18 = v11 + 1;
      }
      else {
        signed int v18 = v17;
      }
      if (v16 <= v18)
      {
        *(float *)&a4 = (float)(v12 * (float)(*(float *)&a4 + (float)(v9 * 0.5))) + 1.0;
        *((float *)&a4 + 1) = (float)(v12 * (float)(*((float *)&a4 + 1) + (float)(v10 * 0.5))) + 1.0;
        float v21 = (float)(v14 + v14) / 3.0;
        float v22 = 0.2 / (float)(v14 - v21);
        int v23 = vcvtms_s32_f32(*(float *)&a4 - v14);
        int v24 = v23 & ~(v23 >> 31);
        int v25 = vcvtps_s32_f32(*(float *)&a4 + v14);
        if (*(_DWORD *)a1 + 1 < v25) {
          int v26 = *(_DWORD *)a1 + 1;
        }
        else {
          int v26 = v25;
        }
        do
        {
          if (v24 <= v26)
          {
            uint64_t v27 = *a2;
            int v28 = v24;
            do
            {
              v29.f32[0] = (float)v28;
              v29.f32[1] = (float)v16;
              float32x2_t v30 = vsub_f32(*(float32x2_t *)&a4, v29);
              float v31 = sqrtf(vaddv_f32(vmul_f32(v30, v30)));
              float v32 = (float)((float)(v14 - v31) * v22) + 0.0;
              if (v31 >= v14) {
                float v32 = 0.0;
              }
              v29.f32[0] = (float)v28 + 1.0;
              if (v31 >= v21) {
                float v33 = v32;
              }
              else {
                float v33 = 0.2;
              }
              float32x2_t v34 = vsub_f32(*(float32x2_t *)&a4, v29);
              float v35 = sqrtf(vaddv_f32(vmul_f32(v34, v34)));
              if (v35 >= v21)
              {
                BOOL v36 = v35 < v14;
                float v37 = v33 + (float)((float)(v14 - v35) * v22);
                if (v36) {
                  float v33 = v37;
                }
              }
              else
              {
                float v33 = v33 + 0.2;
              }
              v29.f32[1] = (float)v16 + 1.0;
              float32x2_t v38 = vsub_f32(*(float32x2_t *)&a4, v29);
              float v39 = sqrtf(vaddv_f32(vmul_f32(v38, v38)));
              if (v39 >= v21)
              {
                BOOL v36 = v39 < v14;
                float v40 = v33 + (float)((float)(v14 - v39) * v22);
                if (v36) {
                  float v33 = v40;
                }
              }
              else
              {
                float v33 = v33 + 0.2;
              }
              v29.f32[0] = (float)((float)v28 + 1.0) + -1.0;
              float32x2_t v41 = vsub_f32(*(float32x2_t *)&a4, v29);
              float v42 = sqrtf(vaddv_f32(vmul_f32(v41, v41)));
              if (v42 >= v21)
              {
                if (v42 < v14) {
                  float v33 = v33 + (float)((float)(v14 - v42) * v22);
                }
              }
              else
              {
                float v33 = v33 + 0.2;
              }
              v43.f32[0] = (float)((float)((float)v28 + 1.0) + -1.0) + 0.5;
              v43.f32[1] = (float)((float)v16 + 1.0) + -0.5;
              float32x2_t v44 = vsub_f32(*(float32x2_t *)&a4, v43);
              float v45 = sqrtf(vaddv_f32(vmul_f32(v44, v44)));
              if (v45 >= v21)
              {
                if (v45 < v14) {
                  float v33 = v33 + (float)((float)(v14 - v45) * v22);
                }
              }
              else
              {
                float v33 = v33 + 0.2;
              }
              if (v33 != 0.0) {
                *(float *)(v27 + 4 * (v28 + v16 * *(_DWORD *)(a1 + 8))) = *(float *)(v27
              }
                                                                                     + 4
                                                                                     * (v28 + v16 * *(_DWORD *)(a1 + 8)))
                                                                          + (float)(v33 * a6);
              ++v28;
            }
            while (v26 + 1 != v28);
          }
          uint64_t v6 = 1;
          BOOL v7 = v16++ == v18;
        }
        while (!v7);
      }
      else
      {
        return 1;
      }
    }
  }
  return v6;
}

float32x4_t *sub_1B6DA62E8(float32x4_t *result, int a2, float32x4_t a3, float a4, float a5, float a6)
{
  uint64_t v10 = (uint64_t)result;
  if (a2)
  {
    float32x4_t v11 = vmulq_f32(vsubq_f32(a3, result[4]), result[5]);
    LODWORD(v12) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).u32[0];
  }
  else
  {
    float v12 = a3.f32[2];
  }
  float v13 = fabsf(v12);
  if (a6 > 0.0 && v13 < a4)
  {
    float v15 = 1.0 / a6;
    float32x4_t v32 = a3;
    float v16 = acosf(v12 / a4);
    float v17 = sinf(v16);
    double v18 = *(double *)v32.i64;
    float v19 = v17 * a4;
    if (a2)
    {
      float32x4_t v20 = *(float32x4_t *)(v10 + 112);
      float32x4_t v21 = vsubq_f32(v32, *(float32x4_t *)(v10 + 64));
      float32x4_t v22 = vmulq_f32(v20, (float32x4_t)xmmword_1B6E4F550);
      int8x16_t v23 = (int8x16_t)vnegq_f32(v22);
      int8x16_t v24 = (int8x16_t)vtrn2q_s32((int32x4_t)v22, vtrn1q_s32((int32x4_t)v22, (int32x4_t)v23));
      float32x4_t v25 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v22, v23, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v24, v24, 8uLL), v21.f32[0]);
      float32x4_t v26 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
      v26.i32[0] = v23.i32[1];
      v26.i32[3] = v23.i32[2];
      float32x4_t v27 = vmlaq_laneq_f32(v25, v26, v21, 2);
      int8x16_t v28 = (int8x16_t)vnegq_f32(v27);
      int8x16_t v29 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, (int32x4_t)v28));
      float32x4_t v30 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
      v30.i32[0] = v28.i32[1];
      v30.i32[3] = v28.i32[2];
      *(void *)&double v18 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v27, v20, 3), v30, v20, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v27, v28, 8uLL), *(float32x2_t *)v20.f32, 1), (float32x4_t)vextq_s8(v29, v29, 8uLL), v20.f32[0])).u64[0];
    }
    float result = (float32x4_t *)sub_1B6DA6048(v10, (uint64_t *)(v10 + 704), 0, v18, v19, v15 * a5);
    char v31 = result ^ 1;
    if (!*(unsigned char *)(v10 + 730)) {
      char v31 = 0;
    }
    *(unsigned char *)(v10 + 730) = v31;
  }
  return result;
}

uint64_t sub_1B6DA6430(uint64_t result, unsigned int a2, int a3, uint64_t a4, int a5, char a6)
{
  uint64_t v6 = result + 32 * a2;
  *(_DWORD *)(v6 + 244) = a3;
  *(void *)(v6 + 256) = 0;
  *(_DWORD *)(v6 + 264) = a5;
  *(unsigned char *)(v6 + 268) = a6;
  if (a4)
  {
    if (*(_DWORD *)(result + 4 * ((a2 & 0xFFFFFFFD) == 1)) == *(_DWORD *)(a4 + 4 * ((a5 & 0xFFFFFFFD) == 1))) {
      *(void *)(v6 + 256) = a4;
    }
  }
  return result;
}

double sub_1B6DA6480(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t v2 = a1[7];
  float32x4_t v3 = vsubq_f32(a2, a1[4]);
  float32x4_t v4 = vmulq_f32(v2, (float32x4_t)xmmword_1B6E4F550);
  int32x4_t v5 = (int32x4_t)vnegq_f32(v4);
  int8x16_t v6 = (int8x16_t)vtrn2q_s32((int32x4_t)v4, vtrn1q_s32((int32x4_t)v4, v5));
  float32x4_t v7 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL), *(float32x2_t *)v3.f32, 1);
  float32x4_t v8 = (float32x4_t)vrev64q_s32((int32x4_t)v4);
  v8.i32[0] = v5.i32[1];
  v8.i32[3] = v5.i32[2];
  float32x4_t v9 = vmlaq_laneq_f32(vmlaq_n_f32(v7, (float32x4_t)vextq_s8(v6, v6, 8uLL), v3.f32[0]), v8, v3, 2);
  int32x4_t v10 = (int32x4_t)vnegq_f32(v9);
  int8x16_t v11 = (int8x16_t)vtrn2q_s32((int32x4_t)v9, vtrn1q_s32((int32x4_t)v9, v10));
  float32x4_t v12 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL), *(float32x2_t *)v2.f32, 1), (float32x4_t)vextq_s8(v11, v11, 8uLL), v2.f32[0]);
  float32x4_t v13 = (float32x4_t)vrev64q_s32((int32x4_t)v9);
  v13.i32[0] = v10.i32[1];
  v13.i32[3] = v10.i32[2];
  v2.i64[0] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v9, v2, 3), v13, v2, 2), v12).u64[0];
  v13.i32[0] = a1[9].i32[1];
  float v14 = (float)(v13.f32[0] * (float)(v2.f32[0] + (float)(a1[8].f32[0] * 0.5))) + 0.5;
  float v15 = (float)(v13.f32[0] * (float)(v2.f32[1] + (float)(a1[8].f32[1] * 0.5))) + 0.5;
  float v16 = 0.5;
  if (v14 >= 0.5)
  {
    float v16 = v14;
    if (v14 > (float)((float)a1->i32[0] + 0.5)) {
      float v16 = (float)a1->i32[0] + 0.5;
    }
  }
  if (v15 >= 0.5)
  {
    if (v15 > (float)((float)a1->i32[1] + 0.5)) {
      float v15 = (float)a1->i32[1] + 0.5;
    }
  }
  else
  {
    float v15 = 0.5;
  }
  int v17 = (int)v15;
  int v18 = (int)v16 + 1;
  float v19 = v16 - (float)(int)v16;
  float v20 = v15 - (float)(int)v15;
  __int32 v21 = a1->i32[2];
  int v22 = v21 * v17;
  int v23 = v22 + (int)v16;
  uint64_t v24 = a1[9].i64[1];
  float v25 = a1[8].f32[2];
  __int32 v26 = v21 + v22;
  int v27 = v26 + (int)v16;
  int v28 = v22 + v18;
  int v29 = v26 + v18;
  float v30 = v25
      * (float)((float)(v19
                      * (float)((float)(v20 * *(float *)(v24 + 4 * v29))
                              + (float)((float)(1.0 - v20) * *(float *)(v24 + 4 * v28))))
              + (float)((float)(1.0 - v19)
                      * (float)((float)(v20 * *(float *)(v24 + 4 * v27))
                              + (float)((float)(1.0 - v20) * *(float *)(v24 + 4 * v23)))));
  uint64_t v31 = a1[11].i64[0];
  float v32 = v25
      * (float)((float)(v19
                      * (float)((float)(v20 * *(float *)(v31 + 4 * v29))
                              + (float)((float)(1.0 - v20) * *(float *)(v31 + 4 * v28))))
              + (float)((float)(1.0 - v19)
                      * (float)((float)(v20 * *(float *)(v31 + 4 * v27))
                              + (float)((float)(1.0 - v20) * *(float *)(v31 + 4 * v23)))));
  float32x4_t v33 = a1[6];
  float32x4_t v34 = vmulq_f32(v33, (float32x4_t)xmmword_1B6E4F550);
  int32x4_t v35 = (int32x4_t)vnegq_f32(v34);
  int8x16_t v36 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v35));
  float32x4_t v37 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 8uLL), v32), (float32x4_t)vextq_s8(v36, v36, 8uLL), v30);
  float32x4_t v38 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
  v38.i32[0] = v35.i32[1];
  v38.i32[3] = v35.i32[2];
  float32x4_t v39 = vmlaq_f32(v37, (float32x4_t)0, v38);
  int32x4_t v40 = (int32x4_t)vnegq_f32(v39);
  int8x16_t v41 = (int8x16_t)vtrn2q_s32((int32x4_t)v39, vtrn1q_s32((int32x4_t)v39, v40));
  float32x4_t v42 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v40, 8uLL), *(float32x2_t *)v33.f32, 1), (float32x4_t)vextq_s8(v41, v41, 8uLL), v33.f32[0]);
  float32x4_t v43 = (float32x4_t)vrev64q_s32((int32x4_t)v39);
  v43.i32[0] = v40.i32[1];
  v43.i32[3] = v40.i32[2];
  *(void *)&double result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v39, v33, 3), v43, v33, 2), v42).u64[0];
  return result;
}

int *sub_1B6DA6688(int *result, float **a2, float a3)
{
  int v4 = *result;
  uint64_t v3 = result[1];
  int32x4_t v5 = *a2;
  if (*result >= 1)
  {
    uint64_t v6 = result[2] + result[2] * (uint64_t)(int)v3;
    float32x4_t v7 = v5 + 1;
    uint64_t v8 = *result;
    do
    {
      *float32x4_t v7 = a3;
      v7[v6] = a3;
      ++v7;
      --v8;
    }
    while (v8);
  }
  uint64_t v9 = result[2];
  if ((int)v3 <= 0)
  {
    int v12 = v3 + 1;
    int v11 = v4 + 1;
    uint64_t v10 = v11;
  }
  else
  {
    uint64_t v10 = v4 + 1;
    int v11 = v4 + 1;
    int v12 = v3 + 1;
    float32x4_t v13 = v5;
    do
    {
      v13[v9] = a3;
      v13[v9 + v10] = a3;
      v13 += v9;
      --v3;
    }
    while (v3);
  }
  *int32x4_t v5 = a3;
  v5[(int)v9 * v12] = a3;
  v5[v10] = a3;
  v5[(int)v9 * v12 + v11] = a3;
  return result;
}

float sub_1B6DA672C(unsigned int *a1, int a2, float **a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[61];
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = (int)v4 < 1;
  }
  if (!v7)
  {
    unsigned int v8 = a1[2];
    int v9 = v8 + v8 * v5;
    uint64_t v10 = &(*a3)[(int)(v8 * v5) + 1];
    int v11 = &(*a3)[v9 + 1];
    uint64_t v12 = *a1;
    do
    {
      float v13 = *v10++;
      float v14 = v13;
      float v15 = -v13;
      if (a2 == 2) {
        float v14 = v15;
      }
      *v11++ = v14;
      --v12;
    }
    while (v12);
  }
  unsigned int v16 = a1[69];
  if (v16) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = (int)v5 < 1;
  }
  if (!v17)
  {
    int v18 = *a3;
    uint64_t v19 = (int)a1[2];
    int v20 = v19 + 1;
    __int32 v21 = &(*a3)[v19];
    uint64_t v22 = v5;
    do
    {
      float v23 = v18[v20];
      if (a2 == 1) {
        float v23 = -v23;
      }
      float *v21 = v23;
      v20 += v19;
      v21 += v19;
      --v22;
    }
    while (v22);
  }
  uint64_t v24 = (int)v4;
  unsigned int v25 = a1[77];
  if (v25) {
    BOOL v26 = 1;
  }
  else {
    BOOL v26 = (int)v4 < 1;
  }
  if (!v26)
  {
    int v27 = *a3;
    int v28 = a1[2] + 1;
    int v29 = *a3 + 1;
    uint64_t v30 = v4;
    do
    {
      float v31 = v27[v28];
      if (a2 == 2) {
        float v31 = -v31;
      }
      *v29++ = v31;
      ++v28;
      --v30;
    }
    while (v30);
  }
  if (a1[85]) {
    BOOL v32 = 1;
  }
  else {
    BOOL v32 = (int)v5 <= 0;
  }
  unsigned int v132 = a1[85];
  unsigned int v133 = v25;
  if (v32)
  {
    uint64_t v36 = (v4 + 1);
    unsigned int v37 = v5 + 1;
    uint64_t v35 = (int)v36;
  }
  else
  {
    float32x4_t v33 = *a3;
    uint64_t v34 = (int)a1[2];
    uint64_t v35 = (int)v4 + 1;
    uint64_t v36 = (v4 + 1);
    unsigned int v37 = v5 + 1;
    int v38 = v34 + v4;
    float32x4_t v39 = &(*a3)[v34 + v35];
    uint64_t v40 = v5;
    do
    {
      float v41 = v33[v38];
      if (a2 == 1) {
        float v41 = -v41;
      }
      *float32x4_t v39 = v41;
      v38 += v34;
      v39 += v34;
      --v40;
    }
    while (v40);
  }
  uint64_t v42 = 0;
  float32x4_t v43 = a1 + 38;
  float32x2_t v44 = a1 + 44;
  float v45 = a1 + 50;
  uint64_t v46 = *a3;
  uint64_t v47 = (uint64_t)(*a3 + 1);
  size_t v48 = 4 * v4;
  unsigned int v49 = v37;
  int v136 = v5 - 1;
  uint64_t v50 = v37 - 1;
  int v135 = v4 - 1;
  uint64_t v51 = v36 - 1;
  uint64_t v124 = (int)v4;
  unsigned int v134 = v37;
  do
  {
    float v52 = &a1[8 * v42];
    if (v52[61] == 1)
    {
      LODWORD(v53) = ((_BYTE)v42 + 2) & 3;
      uint64_t v54 = *((void *)v52 + 32);
      float v55 = 1.0;
      if (v54)
      {
        if (v43 == (unsigned int *)a3) {
          float v56 = (uint64_t *)(v54 + 24 * (int)a1[8 * v42 + 66] + 368);
        }
        else {
          float v56 = 0;
        }
        if (v44 == (unsigned int *)a3) {
          float v56 = (uint64_t *)(v54 + 24 * (int)a1[8 * v42 + 66] + 464);
        }
        if (v45 == (unsigned int *)a3)
        {
          LODWORD(v53) = a1[8 * v42 + 66];
          float v56 = (uint64_t *)(v54 + 24 * (int)v53 + 560);
        }
        else if (v56)
        {
          uint64_t v53 = a1[8 * v42 + 66];
          if (((v42 - v53 + 4) & 0x80000001) == 1)
          {
            float v56 = (uint64_t *)(v54 + 24 * (int)v53 + 464);
            if (v43 != (unsigned int *)a3) {
              float v56 = (uint64_t *)(v54 + 24 * (int)v53 + 368);
            }
          }
          BOOL v57 = v44 != (unsigned int *)a3;
          if (v42) {
            BOOL v57 = v43 != (unsigned int *)a3;
          }
          if (v57)
          {
            int v58 = (v53 + 1) & 3;
            if ((int)v53 + 1 <= 0) {
              int v58 = -(-(v53 + 1) & 3);
            }
            float v55 = *(float *)&a1[8 * (((_BYTE)v42 + 1) & 3) + 62] * *(float *)&a1[8 * v58 + 62];
          }
          else
          {
            float v55 = -(float)(*(float *)&a1[8 * v42 + 62] * *(float *)&a1[8 * v53 + 62]);
          }
        }
      }
      else
      {
        float v56 = 0;
      }
      int v59 = *((unsigned __int8 *)v52 + 268);
      switch((int)v42)
      {
        case 0:
          if (v56)
          {
            if ((int)v4 >= 1)
            {
              uint64_t v60 = 0;
              uint64_t v61 = *v56;
              uint64_t v62 = v47 + 4 * (int)(a1[2] * v49);
              int v63 = v135;
              do
              {
                if (v59) {
                  int v64 = v63;
                }
                else {
                  int v64 = v60;
                }
                *(float *)(v62 + 4 * v60++) = v55 * *(float *)(v61 + 4 * v64);
                --v63;
              }
              while (v51 != v60);
            }
          }
          else if (a1[8 * v53 + 61] == 1)
          {
            if ((int)v4 >= 1)
            {
              uint64_t v82 = (int)a1[2];
              int v83 = v82 * v49;
              long long v84 = (int *)(v47 + 4 * v82);
              long long v85 = (_DWORD *)(v47 + 4 * v83);
              uint64_t v86 = v51;
              do
              {
                int v87 = *v84++;
                *v85++ = v87;
                --v86;
              }
              while (v86);
            }
          }
          else if ((int)v4 >= 1)
          {
            uint64_t v100 = (void *)(v47 + 4 * (int)(a1[2] * v49));
            goto LABEL_116;
          }
          break;
        case 1:
          if (v56)
          {
            if ((int)v5 >= 1)
            {
              uint64_t v65 = 0;
              uint64_t v66 = *v56;
              uint64_t v67 = (int)a1[2];
              uint64_t v68 = &v46[v67];
              int v69 = v136;
              do
              {
                if (v59) {
                  int v70 = v69;
                }
                else {
                  int v70 = v65;
                }
                float *v68 = v55 * *(float *)(v66 + 4 * v70);
                ++v65;
                --v69;
                uint64_t v68 = (float *)((char *)v68 + v67 * 4);
              }
              while (v50 != v65);
            }
          }
          else if (a1[8 * v53 + 61] == 1)
          {
            if ((int)v5 >= 1)
            {
              uint64_t v88 = (int)a1[2];
              uint64_t v89 = v50;
              uint64_t v90 = v46;
              do
              {
                float v91 = v90[v124 + v88];
                uint64_t v90 = (float *)((char *)v90 + v88 * 4);
                *uint64_t v90 = v91;
                --v89;
              }
              while (v89);
            }
          }
          else if ((int)v5 >= 1)
          {
            uint64_t v101 = (int)a1[2];
            uint64_t v102 = &v46[v101];
            uint64_t v103 = v50;
            do
            {
              *uint64_t v102 = 0.0;
              uint64_t v102 = (float *)((char *)v102 + v101 * 4);
              --v103;
            }
            while (v103);
          }
          break;
        case 2:
          if (v56)
          {
            if ((int)v4 >= 1)
            {
              uint64_t v71 = 0;
              uint64_t v72 = *v56;
              int v73 = v135;
              do
              {
                if (v59) {
                  int v74 = v73;
                }
                else {
                  int v74 = v71;
                }
                *(float *)(v47 + 4 * v71++) = v55 * *(float *)(v72 + 4 * v74);
                --v73;
              }
              while (v51 != v71);
            }
          }
          else if (a1[8 * v53 + 61] == 1)
          {
            if ((int)v24 >= 1)
            {
              uint64_t v92 = (int)a1[2] * (uint64_t)(int)v5;
              uint64_t v93 = v51;
              uint64_t v94 = (_DWORD *)v47;
              do
              {
                _DWORD *v94 = v94[v92];
                ++v94;
                --v93;
              }
              while (v93);
            }
          }
          else
          {
            uint64_t v100 = (void *)v47;
            if ((int)v4 >= 1)
            {
LABEL_116:
              uint64_t v130 = v36;
              uint64_t v131 = v24;
              long long v128 = v43;
              uint64_t v129 = v5;
              __int16 v126 = v45;
              uint64_t v127 = v4;
              uint64_t v104 = v6;
              uint64_t v105 = v35;
              uint64_t v125 = a3;
              size_t v106 = v48;
              uint64_t v107 = v44;
              bzero(v100, v48);
              float32x2_t v44 = v107;
              uint64_t v4 = v127;
              float32x4_t v43 = v128;
              size_t v48 = v106;
              unsigned int v49 = v134;
              uint64_t v35 = v105;
              a3 = v125;
              float v45 = v126;
              uint64_t v6 = v104;
              uint64_t v5 = v129;
              uint64_t v36 = v130;
              uint64_t v24 = v131;
            }
          }
          break;
        case 3:
          if (v56)
          {
            if ((int)v5 >= 1)
            {
              uint64_t v75 = 0;
              uint64_t v76 = *v56;
              uint64_t v77 = (int)a1[2];
              int v78 = &v46[v35 + v77];
              uint64_t v79 = 4 * v77;
              int v80 = v136;
              do
              {
                if (v59) {
                  int v81 = v80;
                }
                else {
                  int v81 = v75;
                }
                *int v78 = v55 * *(float *)(v76 + 4 * v81);
                ++v75;
                --v80;
                int v78 = (float *)((char *)v78 + v79);
              }
              while (v50 != v75);
            }
          }
          else if (a1[8 * v53 + 61] == 1)
          {
            if ((int)v5 >= 1)
            {
              uint64_t v95 = (int)a1[2];
              uint64_t v96 = v35 + v95;
              uint64_t v97 = v95;
              uint64_t v98 = v50;
              uint64_t v99 = v46;
              do
              {
                v99[v96] = v99[v97 + 1];
                uint64_t v99 = (float *)((char *)v99 + v97 * 4);
                --v98;
              }
              while (v98);
            }
          }
          else if ((int)v5 >= 1)
          {
            uint64_t v108 = (int)a1[2];
            long long v109 = &v46[v35 + v108];
            uint64_t v110 = 4 * v108;
            uint64_t v111 = v50;
            do
            {
              *long long v109 = 0.0;
              long long v109 = (float *)((char *)v109 + v110);
              --v111;
            }
            while (v111);
          }
          break;
        default:
          break;
      }
    }
    ++v42;
  }
  while (v42 != 4);
  long long v112 = *a3;
  if (v6 == 2 && (int)v24 >= 1)
  {
    int v113 = v4;
    uint64_t v114 = v35;
    size_t v115 = v48;
    bzero(&v112[a1[2] * v49 + 1], v48);
    size_t v48 = v115;
    unsigned int v49 = v134;
    uint64_t v35 = v114;
    LODWORD(v4) = v113;
  }
  if (v16 == 2 && (int)v5 >= 1)
  {
    uint64_t v116 = (int)a1[2];
    uint64_t v117 = &v112[v116];
    uint64_t v118 = v50;
    do
    {
      *uint64_t v117 = 0.0;
      uint64_t v117 = (float *)((char *)v117 + v116 * 4);
      --v118;
    }
    while (v118);
  }
  if (v133 == 2 && (int)v4 >= 1)
  {
    uint64_t v119 = v35;
    bzero(v112 + 1, v48);
    unsigned int v49 = v134;
    uint64_t v35 = v119;
  }
  uint64_t v120 = (int)a1[2];
  if (v132 == 2 && (int)v5 >= 1)
  {
    uint64_t v121 = &v112[v35 + v120];
    do
    {
      *uint64_t v121 = 0.0;
      v121 += v120;
      --v50;
    }
    while (v50);
  }
  float *v112 = (float)(v112[1] + v112[v120]) * 0.5;
  int v122 = v120 * v49;
  v112[v122] = (float)(v112[v122 + 1] + v112[(int)v120 * (int)v5]) * 0.5;
  v112[v35] = (float)(v112[v24] + v112[(int)v120 + (int)v36]) * 0.5;
  float result = (float)(v112[(int)(v120 * v49 + v24)] + v112[(int)v120 * (int)v5 + (int)v36]) * 0.5;
  v112[v122 + (int)v36] = result;
  return result;
}

void sub_1B6DA6F08()
{
  if (!qword_1E9E498C0) {
    operator new();
  }
}

void sub_1B6DA6FA8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x1000C40504FFAC1);
  _Unwind_Resume(a1);
}

BOOL PFlameProbeData_hasAssociatedData(uint64_t a1)
{
  return *(void *)(a1 + 48) != 0;
}

BOOL PEventProbeData_hasAssociatedData(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0;
}

void prof_eventTime(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (byte_1E9E498C9)
  {
    uint64_t v10 = currentThreadProfiler_0();
    uint64_t v11 = *(void *)(v10 + 16);
    uint64_t v12 = v10 + 56 * v11;
    unsigned int v13 = *(_DWORD *)(v12 + 40);
    unsigned int v14 = *(_DWORD *)(v12 + 44);
    float v15 = (unsigned int *)(v12 + 40);
    if (v13 + 1 > v14)
    {
      sub_1B6DA8C5C(v15);
      unsigned int v13 = *v15;
    }
    uint64_t v16 = *(void *)(v10 + 56 * v11 + 48) + 48 * v13;
    *(void *)uint64_t v16 = a3;
    *(void *)(v16 + 8) = a4;
    *(void *)(v16 + 16) = a5;
    *(void *)(v16 + 24) = a2;
    *(void *)(v16 + 32) = 0;
    *(unsigned char *)(v16 + 40) = a1;
    *(unsigned char *)(v16 + 41) = 0;
    ++*v15;
  }
}

uint64_t currentThreadProfiler_0()
{
  uint64_t v0 = *(void *)off_1EC56B810();
  if (!v0) {
    operator new();
  }
  return v0;
}

void sub_1B6DA7168(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x10B2C401994A623);
  _Unwind_Resume(a1);
}

void prof_eventTimeSmallData(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (byte_1E9E498C9)
  {
    uint64_t v12 = currentThreadProfiler_0();
    uint64_t v13 = *(void *)(v12 + 16);
    uint64_t v14 = v12 + 56 * v13;
    unsigned int v15 = *(_DWORD *)(v14 + 40);
    unsigned int v16 = *(_DWORD *)(v14 + 44);
    BOOL v17 = (unsigned int *)(v14 + 40);
    if (v15 + 1 > v16)
    {
      sub_1B6DA8C5C(v17);
      unsigned int v15 = *v17;
    }
    uint64_t v18 = *(void *)(v12 + 56 * v13 + 48) + 48 * v15;
    *(void *)uint64_t v18 = a3;
    *(void *)(v18 + 8) = a4;
    *(void *)(v18 + 16) = a5;
    *(void *)(v18 + 24) = a2;
    *(void *)(v18 + 32) = a6;
    *(unsigned char *)(v18 + 40) = a1;
    *(unsigned char *)(v18 + 41) = 1;
    ++*v17;
  }
}

void prof_eventTimeBlockData(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v31 = a7;
  if (byte_1E9E498C9)
  {
    uint64_t v13 = currentThreadProfiler_0();
    char v29 = a1;
    uint64_t v30 = a5;
    uint64_t v14 = *(void *)(v13 + 16);
    id v15 = v31;
    unsigned int v16 = v15;
    if (a6) {
      BOOL v17 = v15 == 0;
    }
    else {
      BOOL v17 = 0;
    }
    char v18 = v17;
    uint64_t v19 = v13 + 56 * v14;
    unsigned int v20 = *(_DWORD *)(v19 + 40);
    unsigned int v21 = *(_DWORD *)(v19 + 44);
    uint64_t v22 = (unsigned int *)(v19 + 40);
    if (v20 + 1 > v21)
    {
      sub_1B6DA8C5C(v22);
      unsigned int v20 = *v22;
    }
    uint64_t v23 = v13 + 56 * v14;
    uint64_t v24 = *(void *)(v23 + 48) + 48 * v20;
    *(void *)uint64_t v24 = a3;
    *(void *)(v24 + 8) = a4;
    *(void *)(v24 + 16) = v30;
    *(void *)(v24 + 24) = a2;
    *(void *)(v24 + 32) = a6;
    *(unsigned char *)(v24 + 40) = v29;
    *(unsigned char *)(v24 + 41) = v18;
    ++*v22;
    unsigned int v26 = *(_DWORD *)(v23 + 56);
    unsigned int v25 = *(_DWORD *)(v23 + 60);
    int v27 = (unsigned int *)(v23 + 56);
    if (v26 + 1 > v25)
    {
      sub_1B6DA8CE0(v27);
      unsigned int v26 = *v27;
    }
    uint64_t v28 = *(void *)(v13 + 56 * v14 + 64);
    *(void *)(v28 + 8 * v26) = _Block_copy(v16);
    ++*v27;
  }
}

void sub_1B6DA73A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void prof_eventTimeRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (byte_1E9E498C9)
  {
    uint64_t v10 = currentThreadProfiler_0();
    uint64_t v11 = *(void *)(v10 + 16);
    uint64_t v12 = v10 + 56 * v11;
    unsigned int v14 = *(_DWORD *)(v12 + 44);
    uint64_t v13 = (_DWORD *)(v12 + 44);
    unsigned int v16 = v13 - 1;
    unsigned int v15 = *(v13 - 1);
    if (v15 + 1 > v14)
    {
      sub_1B6DA8C5C(v13 - 1);
      unsigned int v15 = *v16;
    }
    uint64_t v17 = v10 + 56 * v11;
    uint64_t v19 = *(void *)(v17 + 48);
    char v18 = (void *)(v17 + 48);
    uint64_t v20 = v19 + 48 * v15;
    *(void *)uint64_t v20 = a3;
    *(void *)(v20 + 8) = a4;
    *(void *)(v20 + 16) = a5;
    *(void *)(v20 + 24) = a1;
    *(void *)(v20 + 32) = 0;
    *(_WORD *)(v20 + 40) = 0;
    unsigned int v21 = *v16;
    unsigned int v22 = *v16 + 1;
    *unsigned int v16 = v22;
    if (v21 + 2 > *v13)
    {
      sub_1B6DA8C5C(v13 - 1);
      unsigned int v22 = *v16;
    }
    uint64_t v23 = *v18 + 48 * v22;
    *(void *)uint64_t v23 = a3;
    *(void *)(v23 + 8) = a4;
    *(void *)(v23 + 16) = a5;
    *(void *)(v23 + 24) = a2;
    *(void *)(v23 + 32) = 0;
    *(_WORD *)(v23 + 40) = 1;
    ++*v16;
  }
}

void prof_eventTimeRangeSmallData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (byte_1E9E498C9)
  {
    uint64_t v12 = currentThreadProfiler_0();
    uint64_t v13 = *(void *)(v12 + 16);
    uint64_t v14 = v12 + 56 * v13;
    unsigned int v16 = *(_DWORD *)(v14 + 44);
    unsigned int v15 = (_DWORD *)(v14 + 44);
    char v18 = v15 - 1;
    unsigned int v17 = *(v15 - 1);
    if (v17 + 1 > v16)
    {
      sub_1B6DA8C5C(v15 - 1);
      unsigned int v17 = *v18;
    }
    uint64_t v19 = v12 + 56 * v13;
    uint64_t v21 = *(void *)(v19 + 48);
    uint64_t v20 = (void *)(v19 + 48);
    uint64_t v22 = v21 + 48 * v17;
    *(void *)uint64_t v22 = a3;
    *(void *)(v22 + 8) = a4;
    *(void *)(v22 + 16) = a5;
    *(void *)(v22 + 24) = a1;
    *(void *)(v22 + 32) = a6;
    *(_WORD *)(v22 + 40) = 256;
    unsigned int v23 = *v18;
    unsigned int v24 = *v18 + 1;
    *char v18 = v24;
    if (v23 + 2 > *v15)
    {
      sub_1B6DA8C5C(v15 - 1);
      unsigned int v24 = *v18;
    }
    uint64_t v25 = *v20 + 48 * v24;
    *(void *)uint64_t v25 = a3;
    *(void *)(v25 + 8) = a4;
    *(void *)(v25 + 16) = a5;
    *(void *)(v25 + 24) = a2;
    *(void *)(v25 + 32) = a6;
    *(_WORD *)(v25 + 40) = 257;
    ++*v18;
  }
}

void prof_eventTimeRangeBlockData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v43 = a7;
  if (byte_1E9E498C9)
  {
    uint64_t v39 = a2;
    uint64_t v11 = currentThreadProfiler_0();
    uint64_t v12 = *(void *)(v11 + 16);
    id v13 = v43;
    uint64_t v14 = v13;
    if (a6) {
      BOOL v15 = v13 == 0;
    }
    else {
      BOOL v15 = 0;
    }
    uint64_t v16 = v11 + 56 * v12;
    unsigned int v19 = *(_DWORD *)(v16 + 44);
    char v18 = (_DWORD *)(v16 + 44);
    unsigned int v17 = v19;
    char v20 = v15;
    char v40 = v20;
    uint64_t v22 = v18 - 1;
    unsigned int v21 = *(v18 - 1);
    if (v21 + 1 > v17)
    {
      sub_1B6DA8C5C(v18 - 1);
      unsigned int v21 = *v22;
    }
    uint64_t v23 = v11 + 56 * v12;
    unsigned int v24 = (void *)(v23 + 48);
    uint64_t v25 = *(void *)(v23 + 48) + 48 * v21;
    *(void *)uint64_t v25 = a3;
    *(void *)(v25 + 8) = a4;
    uint64_t v38 = a5;
    *(void *)(v25 + 16) = a5;
    *(void *)(v25 + 24) = a1;
    *(void *)(v25 + 32) = a6;
    *(unsigned char *)(v25 + 40) = 0;
    *(unsigned char *)(v25 + 41) = v40;
    unsigned int v27 = *(_DWORD *)(v23 + 60);
    unsigned int v26 = (_DWORD *)(v23 + 60);
    ++*v22;
    char v29 = v26 - 1;
    unsigned int v28 = *(v26 - 1);
    if (v28 + 1 > v27)
    {
      sub_1B6DA8CE0(v26 - 1);
      unsigned int v28 = *v29;
    }
    uint64_t v30 = v11 + 56 * v12;
    uint64_t v32 = *(void *)(v30 + 64);
    id v31 = (uint64_t *)(v30 + 64);
    *(void *)(v32 + 8 * v28) = _Block_copy(v14);
    ++*v29;

    id v33 = v14;
    unsigned int v34 = *v22;
    if (*v22 + 1 > *v18)
    {
      sub_1B6DA8C5C(v22);
      unsigned int v34 = *v22;
    }
    uint64_t v35 = *v24 + 48 * v34;
    *(void *)uint64_t v35 = a3;
    *(void *)(v35 + 8) = a4;
    *(void *)(v35 + 16) = v38;
    *(void *)(v35 + 24) = v39;
    *(void *)(v35 + 32) = a6;
    *(unsigned char *)(v35 + 40) = 1;
    *(unsigned char *)(v35 + 41) = v40;
    ++*v22;
    unsigned int v36 = *v29;
    if (*v29 + 1 > *v26)
    {
      sub_1B6DA8CE0(v26 - 1);
      unsigned int v36 = *v29;
    }
    uint64_t v37 = *v31;
    *(void *)(v37 + 8 * v36) = _Block_copy(v33);
    ++*v29;
  }
}

void sub_1B6DA77F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void prof_event(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (byte_1E9E498C9)
  {
    uint64_t v8 = currentThreadProfiler_0();
    uint64_t v9 = *(void *)(v8 + 16);
    switch(byte_1E9DDA458)
    {
      case 1:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        uint64_t StatusReg = mach_absolute_time();
        break;
    }
    uint64_t v11 = v8 + 56 * v9;
    unsigned int v12 = *(_DWORD *)(v11 + 40);
    unsigned int v13 = *(_DWORD *)(v11 + 44);
    uint64_t v14 = (unsigned int *)(v11 + 40);
    if (v12 + 1 > v13)
    {
      sub_1B6DA8C5C(v14);
      unsigned int v12 = *v14;
    }
    uint64_t v15 = *(void *)(v8 + 56 * v9 + 48) + 48 * v12;
    *(void *)uint64_t v15 = a2;
    *(void *)(v15 + 8) = a3;
    *(void *)(v15 + 16) = a4;
    *(void *)(v15 + 24) = StatusReg;
    *(void *)(v15 + 32) = 0;
    *(unsigned char *)(v15 + 40) = a1;
    *(unsigned char *)(v15 + 41) = 0;
    ++*v14;
  }
}

void prof_eventSmallData(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (byte_1E9E498C9)
  {
    uint64_t v10 = currentThreadProfiler_0();
    uint64_t v11 = *(void *)(v10 + 16);
    switch(byte_1E9DDA458)
    {
      case 1:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        uint64_t StatusReg = mach_absolute_time();
        break;
    }
    uint64_t v13 = v10 + 56 * v11;
    unsigned int v14 = *(_DWORD *)(v13 + 40);
    unsigned int v15 = *(_DWORD *)(v13 + 44);
    uint64_t v16 = (unsigned int *)(v13 + 40);
    if (v14 + 1 > v15)
    {
      sub_1B6DA8C5C(v16);
      unsigned int v14 = *v16;
    }
    uint64_t v17 = *(void *)(v10 + 56 * v11 + 48) + 48 * v14;
    *(void *)uint64_t v17 = a2;
    *(void *)(v17 + 8) = a3;
    *(void *)(v17 + 16) = a4;
    *(void *)(v17 + 24) = StatusReg;
    *(void *)(v17 + 32) = a5;
    *(unsigned char *)(v17 + 40) = a1;
    *(unsigned char *)(v17 + 41) = 1;
    ++*v16;
  }
}

void prof_eventBlockData(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v31 = a6;
  if (byte_1E9E498C9)
  {
    uint64_t v11 = currentThreadProfiler_0();
    uint64_t v12 = *(void *)(v11 + 16);
    char v30 = a1;
    uint64_t v29 = a2;
    switch(byte_1E9DDA458)
    {
      case 1:
        uint64_t v13 = a4;
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        uint64_t v13 = a4;
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        uint64_t v13 = a4;
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        uint64_t StatusReg = mach_absolute_time();
        uint64_t v13 = a4;
        break;
    }
    id v15 = v31;
    uint64_t v16 = v15;
    if (a5) {
      BOOL v17 = v15 == 0;
    }
    else {
      BOOL v17 = 0;
    }
    char v18 = v17;
    uint64_t v19 = v11 + 56 * v12;
    unsigned int v20 = *(_DWORD *)(v19 + 40);
    unsigned int v21 = *(_DWORD *)(v19 + 44);
    uint64_t v22 = (unsigned int *)(v19 + 40);
    if (v20 + 1 > v21)
    {
      sub_1B6DA8C5C(v22);
      unsigned int v20 = *v22;
    }
    uint64_t v23 = v11 + 56 * v12;
    uint64_t v24 = *(void *)(v23 + 48) + 48 * v20;
    *(void *)uint64_t v24 = v29;
    *(void *)(v24 + 8) = a3;
    *(void *)(v24 + 16) = v13;
    *(void *)(v24 + 24) = StatusReg;
    *(void *)(v24 + 32) = a5;
    *(unsigned char *)(v24 + 40) = v30;
    *(unsigned char *)(v24 + 41) = v18;
    ++*v22;
    unsigned int v26 = *(_DWORD *)(v23 + 56);
    unsigned int v25 = *(_DWORD *)(v23 + 60);
    unsigned int v27 = (unsigned int *)(v23 + 56);
    if (v26 + 1 > v25)
    {
      sub_1B6DA8CE0(v27);
      unsigned int v26 = *v27;
    }
    uint64_t v28 = *(void *)(v11 + 56 * v12 + 64);
    *(void *)(v28 + 8 * v26) = _Block_copy(v16);
    ++*v27;
  }
}

void sub_1B6DA7BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void prof_beginFlameSmallData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (byte_1E9E498C9)
  {
    uint64_t v8 = currentThreadProfiler_0();
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = v8 + 56 * v9 + 24;
    uint64_t v21 = a4;
    switch(byte_1E9DDA458)
    {
      case 1:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        uint64_t StatusReg = mach_absolute_time();
        break;
    }
    uint64_t v12 = v8 + 56 * v9;
    int v15 = *(unsigned __int16 *)(v12 + 76);
    uint64_t v13 = (_WORD *)(v12 + 76);
    int v14 = v15;
    int v16 = *((_DWORD *)v13 - 1);
    unsigned int v17 = *(_DWORD *)v10;
    __int16 v18 = v15;
    unsigned int v19 = *(_DWORD *)v10;
    if ((*(_DWORD *)v10 + 1) > *(_DWORD *)(v10 + 4))
    {
      sub_1B6DA8BE0((unsigned int *)v10);
      unsigned int v19 = *(_DWORD *)v10;
      __int16 v18 = *v13;
    }
    unint64_t v20 = *(void *)(v10 + 8) + ((unint64_t)v19 << 6);
    *(void *)unint64_t v20 = a1;
    *(void *)(v20 + 8) = a2;
    *(void *)(v20 + 16) = a3;
    *(void *)(v20 + 24) = StatusReg;
    *(void *)(v20 + 32) = 0;
    *(_DWORD *)(v20 + 40) = v16;
    *(_DWORD *)(v20 + 44) = v14;
    *(void *)(v20 + 48) = v21;
    *(unsigned char *)(v20 + 56) = 1;
    ++*(_DWORD *)v10;
    *((_DWORD *)v13 - 1) = v17;
    *uint64_t v13 = v18 + 1;
  }
}

void prof_beginFlameBlockData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  if (byte_1E9E498C9)
  {
    id v13 = v9;
    uint64_t v10 = currentThreadProfiler_0();
    uint64_t v11 = *(void *)(v10 + 16);
    switch(byte_1E9DDA458)
    {
      case 1:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
        break;
      case 3:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
        break;
      case 2:
        uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
        break;
      default:
        uint64_t StatusReg = mach_absolute_time();
        break;
    }
    sub_1B6DA7E08(v10 + 56 * v11 + 24, StatusReg, a1, a2, a3, a4, v13);
    id v9 = v13;
  }
}

void sub_1B6DA7DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B6DA7E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13 = a7;
  int v14 = *(_DWORD *)(a1 + 48);
  int v15 = *(unsigned __int16 *)(a1 + 52);
  aBlocuint64_t k = v13;
  if (a6) {
    BOOL v16 = v13 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  char v17 = v16;
  unsigned int v18 = *(_DWORD *)a1;
  unsigned int v19 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B6DA8BE0((unsigned int *)a1);
    unsigned int v19 = *(_DWORD *)a1;
  }
  unint64_t v20 = *(void *)(a1 + 8) + ((unint64_t)v19 << 6);
  *(void *)unint64_t v20 = a3;
  *(void *)(v20 + 8) = a4;
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a2;
  *(void *)(v20 + 32) = 0;
  *(_DWORD *)(v20 + 40) = v14;
  *(_DWORD *)(v20 + 44) = v15;
  *(void *)(v20 + 48) = a6;
  *(unsigned char *)(v20 + 56) = v17;
  ++*(_DWORD *)a1;
  unsigned int v21 = *(_DWORD *)(a1 + 32);
  if (v21 + 1 > *(_DWORD *)(a1 + 36))
  {
    sub_1B6DA8CE0((unsigned int *)(a1 + 32));
    unsigned int v21 = *(_DWORD *)(a1 + 32);
  }
  uint64_t v22 = *(void *)(a1 + 40);
  *(void *)(v22 + 8 * v21) = _Block_copy(aBlock);
  ++*(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 48) = v18;
  ++*(_WORD *)(a1 + 52);
}

void sub_1B6DA7F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void prof_setData(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (byte_1E9E498C9)
  {
    id v5 = v3;
    uint64_t v4 = currentThreadProfiler_0();
    sub_1B6DA7FD0(v4 + 56 * *(void *)(v4 + 16) + 24, a1, v5);
    id v3 = v5;
  }
}

void sub_1B6DA7FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B6DA7FD0(uint64_t a1, uint64_t a2, void *a3)
{
  aBlocuint64_t k = a3;
  unint64_t v5 = *(void *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 48) << 6);
  uint64_t v7 = *(void *)(v5 + 48);
  unint64_t v6 = v5 + 48;
  if (v7) {
    BOOL v8 = *(unsigned char *)(v6 + 8) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    sub_1B6DA8FA0(a1 + 32);
    id v9 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v9 = 0;
  }
  *(void *)unint64_t v6 = a2;
  if (aBlock)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    if (v10 + 1 > *(_DWORD *)(a1 + 36))
    {
      sub_1B6DA8CE0((unsigned int *)(a1 + 32));
      unsigned int v10 = *(_DWORD *)(a1 + 32);
    }
    uint64_t v11 = *(void *)(a1 + 40);
    *(void *)(v11 + 8 * v10) = _Block_copy(aBlock);
    ++*(_DWORD *)(a1 + 32);
  }
  if (v9) {
    v9[2](v9);
  }
}

void sub_1B6DA80B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t prof_setLabel(uint64_t result)
{
  if (byte_1E9E498C9)
  {
    uint64_t v1 = result;
    float result = currentThreadProfiler_0();
    *(void *)(*(void *)(result + 56 * *(void *)(result + 16) + 32)
              + ((unint64_t)*(unsigned int *)(result + 56 * *(void *)(result + 16) + 72) << 6)) = v1;
  }
  return result;
}

double prof_clockTicksToNanoseconds(unint64_t a1)
{
  if (!byte_1E9E498C9) {
    return 0.0;
  }
  sub_1B6DA6F08();
  return *(double *)(qword_1E9E498C0 + 8) * (double)a1;
}

double prof_clockTicksToSeconds(unint64_t a1)
{
  if (!byte_1E9E498C9) {
    return 0.0;
  }
  sub_1B6DA6F08();
  return *(double *)qword_1E9E498C0 * (double)a1;
}

uint64_t ProfilerGetCurrentChunkIndex(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t ProfilerGetChunkCount()
{
  return 512;
}

uint64_t ProfilerGetFlameChunkAtIndex(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 56 * a2 + 32);
}

uint64_t ProfilerGetEventChunkAtIndex(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 56 * a2 + 48);
}

void prof_collectProfilers()
{
}

void sub_1B6DA8218()
{
  if (!qword_1E9E498D0) {
    operator new();
  }
}

void sub_1B6DA8274(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x1080C4057E67DB5);
  _Unwind_Resume(a1);
}

uint64_t prof_getAllProfilers()
{
  return *(void *)(qword_1E9E498D0 + 8);
}

uint64_t prof_isRunning(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28698);
}

double sub_1B6DA82D0(uint64_t a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = -1;
  do
  {
    if (v1 != *(void *)(a1 + 16))
    {
      uint64_t v3 = a1 + 56 * v1;
      uint64_t v4 = *(unsigned int *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v3 + 32);
        uint64_t v6 = v4 << 6;
        uint64_t v7 = (unint64_t *)(v5 + 24);
        unint64_t v8 = -1;
        do
        {
          unint64_t v10 = *v7;
          v7 += 8;
          unint64_t v9 = v10;
          if (v10 < v8) {
            unint64_t v8 = v9;
          }
          v6 -= 64;
        }
        while (v6);
      }
      else
      {
        unint64_t v8 = -1;
      }
      uint64_t v11 = a1 + 56 * v1;
      uint64_t v12 = *(unsigned int *)(v11 + 40);
      if (v12)
      {
        uint64_t v13 = 48 * v12;
        int v14 = (unint64_t *)(*(void *)(v11 + 48) + 24);
        do
        {
          unint64_t v16 = *v14;
          v14 += 6;
          unint64_t v15 = v16;
          if (v16 < v8) {
            unint64_t v8 = v15;
          }
          v13 -= 48;
        }
        while (v13);
      }
      if (v8 < v2) {
        unint64_t v2 = v8;
      }
    }
    ++v1;
  }
  while (v1 != 512);
  double result = 0.0;
  if (v2 != -1)
  {
    if (byte_1E9E498C9)
    {
      sub_1B6DA6F08();
      return *(double *)qword_1E9E498C0 * (double)v2;
    }
  }
  return result;
}

double sub_1B6DA83B4(uint64_t a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = 0;
  do
  {
    if (v1 != *(void *)(a1 + 16))
    {
      uint64_t v3 = a1 + 56 * v1;
      uint64_t v4 = *(unsigned int *)(v3 + 24);
      if (v4)
      {
        unint64_t v5 = 0;
        uint64_t v6 = v4 << 6;
        uint64_t v7 = (unint64_t *)(*(void *)(v3 + 32) + 32);
        do
        {
          unint64_t v9 = *v7;
          v7 += 8;
          unint64_t v8 = v9;
          if (v5 <= v9) {
            unint64_t v5 = v8;
          }
          v6 -= 64;
        }
        while (v6);
      }
      else
      {
        unint64_t v5 = 0;
      }
      uint64_t v10 = a1 + 56 * v1;
      uint64_t v11 = *(unsigned int *)(v10 + 40);
      if (v11)
      {
        uint64_t v12 = 48 * v11;
        uint64_t v13 = (unint64_t *)(*(void *)(v10 + 48) + 24);
        do
        {
          unint64_t v15 = *v13;
          v13 += 6;
          unint64_t v14 = v15;
          if (v5 <= v15) {
            unint64_t v5 = v14;
          }
          v12 -= 48;
        }
        while (v12);
      }
      if (v2 <= v5) {
        unint64_t v2 = v5;
      }
    }
    ++v1;
  }
  while (v1 != 512);
  if (!byte_1E9E498C9) {
    return 0.0;
  }
  sub_1B6DA6F08();
  return *(double *)qword_1E9E498C0 * (double)v2;
}

uint64_t prof_flameMaxDepth(uint64_t a1)
{
  uint64_t v1 = 0;
  unsigned int v2 = 0;
  do
  {
    if (v1 != *(void *)(a1 + 16))
    {
      uint64_t v3 = a1 + 56 * v1;
      uint64_t v4 = *(unsigned int *)(v3 + 24);
      if (v4)
      {
        unsigned int v5 = 0;
        uint64_t v6 = v4 << 6;
        uint64_t v7 = (unsigned int *)(*(void *)(v3 + 32) + 44);
        do
        {
          unsigned int v9 = *v7;
          v7 += 16;
          unsigned int v8 = v9;
          if (v5 <= v9) {
            unsigned int v5 = v8;
          }
          v6 -= 64;
        }
        while (v6);
      }
      else
      {
        unsigned int v5 = 0;
      }
      if (v2 <= v5) {
        unsigned int v2 = v5;
      }
    }
    ++v1;
  }
  while (v1 != 512);
  return v2 + 1;
}

uint64_t prof_name(uint64_t a1)
{
  uint64_t result = a1 + 28704;
  if (*(char *)(a1 + 28727) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t prof_setPaused(uint64_t result)
{
  byte_1E9E498C8 = result;
  return result;
}

uint64_t prof_getPaused()
{
  return byte_1E9E498C8;
}

void prof_setEnabled(int a1)
{
  char v1 = a1;
  if (byte_1E9E498C9) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = a1 == 0;
  }
  if (!v2)
  {
    sub_1B6DA8218();
    uint64_t v3 = *(unsigned int *)qword_1E9E498D0;
    if (v3)
    {
      uint64_t v4 = *(uint64_t **)(qword_1E9E498D0 + 8);
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4++;
        uint64_t v7 = v6 + 56 * *(void *)(v6 + 16);
        *(_DWORD *)(v7 + 72) = 0;
        *(_WORD *)(v7 + 76) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v5 -= 8;
      }
      while (v5);
    }
  }
  byte_1E9E498C9 = v1;
}

uint64_t prof_getEnabled()
{
  return byte_1E9E498C9;
}

uint64_t prof_clockReadTicks()
{
  if (!byte_1E9E498C9) {
    return 0;
  }
  sub_1B6DA6F08();
  switch(byte_1E9DDA458)
  {
    case 1:
      return _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
    case 3:
      return _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
    case 2:
      return _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
  }

  return mach_absolute_time();
}

unint64_t prof_clockTicksFromSecondsMonotonic(double a1)
{
  if (!byte_1E9E498C9) {
    return 0;
  }
  sub_1B6DA6F08();
  return (unint64_t)(a1 / *(double *)qword_1E9E498C0) - *(void *)(qword_1E9E498C0 + 16);
}

double prof_clockTimeSeconds()
{
  if (!byte_1E9E498C9) {
    return 0.0;
  }
  sub_1B6DA6F08();
  uint64_t v0 = (double *)qword_1E9E498C0;
  switch(byte_1E9DDA458)
  {
    case 1:
      uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 2));
      break;
    case 3:
      uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 4, 15, 10, 6));
      break;
    case 2:
      uint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 14, 0, 6));
      break;
    default:
      uint64_t StatusReg = mach_absolute_time();
      break;
  }
  return *v0 * (double)StatusReg;
}

void prof_registerRunloopIDLE()
{
  if (byte_1E9E498C9)
  {
    uint64_t v0 = currentThreadProfiler_0();
    sub_1B6DA8748(v0);
  }
}

void sub_1B6DA8748(uint64_t a1)
{
  Current = CFRunLoopGetCurrent();
  uint64_t v3 = CFRunLoopObserverCreate(0, 0x20uLL, 1u, 2000000, (CFRunLoopObserverCallBack)sub_1B6DA9224, 0);
  if (v3)
  {
    *(void *)(a1 + 8) = v3;
    CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D410];
    CFRunLoopAddObserver(Current, v3, v4);
  }
}

void *sub_1B6DA87D4(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 3587;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  do
  {
    sub_1B6DA8AAC((uint64_t)&a1[v4 + 3]);
    v4 += 7;
  }
  while (v4 != 3584);
  *(_WORD *)uint64_t v5 = 0;
  *((unsigned char *)v5 + 2) = 1;
  unsigned int v9 = (void **)(a1 + 3588);
  a1[3588] = 0;
  a1[3590] = 0;
  a1[3589] = 0;
  if (a2)
  {
    MEMORY[0x1BA9B6BD0](a1 + 3588, a2);
  }
  else
  {
    uint64_t v10 = objc_msgSend_currentThread(MEMORY[0x1E4F29060], v6, v7, v8);
    objc_msgSend_name(v10, v11, v12, v13);
    id v14 = objc_claimAutoreleasedReturnValue();
    unsigned int v18 = (const char *)objc_msgSend_UTF8String(v14, v15, v16, v17);

    if (v18)
    {
      if (qword_1E9E498D0) {
        uint64_t v19 = *(unsigned int *)qword_1E9E498D0;
      }
      else {
        uint64_t v19 = 0;
      }
      if (*v18) {
        unint64_t v20 = v18;
      }
      else {
        unint64_t v20 = "Thread";
      }
      sub_1B6DA89C8("%s [%d]", (uint64_t)v20, v19, &v22);
      if (*((char *)v5 + 31) < 0) {
        operator delete(*v9);
      }
      *(_OWORD *)unsigned int v9 = v22;
      a1[3590] = v23;
    }
  }
  return a1;
}

void sub_1B6DA8908(_Unwind_Exception *a1)
{
  if (*(char *)(v3 + 31) < 0) {
    operator delete(*v2);
  }
  for (uint64_t i = 28640; i != -32; i -= 56)
    sub_1B6DA897C(v1 + i);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6DA897C(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 0;
  free(*(void **)(a1 + 24));
  *(_DWORD *)a1 = 0;
  free(*(void **)(a1 + 8));
  return a1;
}

void sub_1B6DA89C8(char *__format@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v8 = snprintf(0, 0, __format, a2, a3);
  if (v8 < 0)
  {
    sub_1B65B8BB0(a4, "");
  }
  else
  {
    size_t v9 = (v8 + 1);
    uint64_t v10 = (char *)malloc_type_malloc(v9, 0xC1922019uLL);
    snprintf(v10, v9, __format, a2, a3);
    sub_1B6DA8DC0(a4, v10, &v10[v9 - 1], v9 - 1);
    free(v10);
  }
}

uint64_t sub_1B6DA8AAC(uint64_t a1)
{
  *(void *)a1 = 0x20000000000;
  *(void *)(a1 + 8) = 0;
  sub_1B6DA8BE0((unsigned int *)a1);
  *(void *)(a1 + 16) = 0x20000000000;
  *(void *)(a1 + 24) = 0;
  sub_1B6DA8C5C((unsigned int *)(a1 + 16));
  *(void *)(a1 + 32) = 0x2000000000;
  *(void *)(a1 + 40) = 0;
  sub_1B6DA8CE0((unsigned int *)(a1 + 32));
  sub_1B6DA8B68(a1);
  return a1;
}

void sub_1B6DA8B20(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  sub_1B6DA8D74(v3);
  free(*(void **)(v1 + 40));
  *(_DWORD *)(v1 + 16) = 0;
  free(*(void **)(v1 + 24));
  *(_DWORD *)uint64_t v1 = 0;
  free(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B6DA8B68(uint64_t a1)
{
  BOOL v2 = (unsigned int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32))
  {
    unint64_t v3 = 0;
    do
      (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 8 * v3++) + 16))();
    while (v3 < *(unsigned int *)(a1 + 32));
  }
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 0;
  sub_1B6DA8D74(v2);
  *(_DWORD *)(a1 + 48) = -1;
  *(_WORD *)(a1 + 52) = 0;
}

void sub_1B6DA8BE0(unsigned int *a1)
{
  BOOL v2 = (void *)*((void *)a1 + 1);
  uint64_t v3 = 2 * a1[1];
  uint64_t v4 = malloc_type_malloc(v3 << 6, 0x10D00407BA5AEB2uLL);
  memcpy(v4, v2, (unint64_t)*a1 << 6);
  *((void *)a1 + 1) = v4;
  a1[1] = v3;

  free(v2);
}

void sub_1B6DA8C5C(unsigned int *a1)
{
  BOOL v2 = (void *)*((void *)a1 + 1);
  unsigned int v3 = 2 * a1[1];
  uint64_t v4 = malloc_type_malloc(48 * v3, 0x10D0040BB2815FCuLL);
  memcpy(v4, v2, 48 * *a1);
  *((void *)a1 + 1) = v4;
  a1[1] = v3;

  free(v2);
}

void sub_1B6DA8CE0(unsigned int *a1)
{
  BOOL v2 = (void *)*((void *)a1 + 1);
  uint64_t v3 = 2 * a1[1];
  uint64_t v4 = malloc_type_malloc(8 * v3, 0x80040B8603338uLL);
  if (*a1)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *((void *)a1 + 1);
      uint64_t v7 = *(void *)(v6 + 8 * v5);
      *(void *)(v6 + 8 * v5) = 0;
      v4[v5++] = v7;
    }
    while (v5 < *a1);
  }
  *((void *)a1 + 1) = v4;
  a1[1] = v3;

  free(v2);
}

void sub_1B6DA8D74(unsigned int *a1)
{
  if (*a1)
  {
    unint64_t v2 = 0;
    do

    while (v2 < *a1);
  }
  *a1 = 0;
}

void *sub_1B6DA8DC0(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v7[1] = a4;
    _OWORD v7[2] = v9 | 0x8000000000000000;
    *uint64_t v7 = result;
    uint64_t v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v7 = v10;
    uint64_t v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)uint64_t v7 = 0;
  return result;
}

void sub_1B6DA8E64(uint64_t a1)
{
  unint64_t v2 = *(__CFRunLoopObserver **)(a1 + 8);
  if (v2)
  {
    CFRunLoopObserverInvalidate(v2);
    *(void *)(a1 + 8) = 0;
  }
  *(unsigned char *)(a1 + 28698) = 0;
}

void sub_1B6DA8E9C(void **a1)
{
  os_unfair_lock_lock(&stru_1E9DDA45C);
  sub_1B6DA6F08();
  sub_1B6DA8218();
  uint64_t v2 = qword_1E9E498D0;
  uint64_t v3 = *a1;
  unsigned int v4 = *(_DWORD *)qword_1E9E498D0;
  unsigned int v5 = *(_DWORD *)qword_1E9E498D0 + 1;
  if (v5 > *(_DWORD *)(qword_1E9E498D0 + 4))
  {
    sub_1B6DA8F24((unsigned int *)qword_1E9E498D0);
    unsigned int v4 = *(_DWORD *)v2;
    unsigned int v5 = *(_DWORD *)v2 + 1;
  }
  *(void *)(*(void *)(v2 + 8) + 8 * v4) = *v3;
  *(_DWORD *)uint64_t v2 = v5;

  os_unfair_lock_unlock(&stru_1E9DDA45C);
}

void sub_1B6DA8F24(unsigned int *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 1);
  uint64_t v3 = 2 * a1[1];
  unsigned int v4 = malloc_type_malloc(8 * v3, 0x2004093837F09uLL);
  memcpy(v4, v2, 8 * *a1);
  *((void *)a1 + 1) = v4;
  a1[1] = v3;

  free(v2);
}

id sub_1B6DA8FA0(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)a1 - 1;
  uint64_t v3 = _Block_copy(*(const void **)(*(void *)(a1 + 8) + 8 * v2));

  --*(_DWORD *)a1;
  unsigned int v4 = _Block_copy(v3);

  return v4;
}

void sub_1B6DA901C()
{
  os_unfair_lock_lock(&stru_1E9DDA460);
  uint64_t v0 = (unsigned int *)qword_1E9E498D0;
  uint64_t v1 = *(unsigned int *)qword_1E9E498D0;
  if (v1)
  {
    unsigned int v2 = *(uint64_t **)(qword_1E9E498D0 + 8);
    double v3 = INFINITY;
    do
    {
      if (*(unsigned char *)(*v2 + 28698))
      {
        double v4 = sub_1B6DA82D0(*v2);
        if (v4 < v3) {
          double v3 = v4;
        }
        uint64_t v0 = (unsigned int *)qword_1E9E498D0;
        uint64_t v1 = *(unsigned int *)qword_1E9E498D0;
      }
      ++v2;
      unsigned int v5 = (uint64_t *)*((void *)v0 + 1);
    }
    while (v2 != &v5[v1]);
    if (v1)
    {
      uint64_t v6 = -(uint64_t)v5;
      do
      {
        uint64_t v7 = *v5;
        if (!*(unsigned char *)(*v5 + 28698))
        {
          double v8 = sub_1B6DA83B4(*v5);
          uint64_t v0 = (unsigned int *)qword_1E9E498D0;
          if (v8 < v3)
          {
            unsigned int v9 = *(_DWORD *)qword_1E9E498D0 - 1;
            *(_DWORD *)qword_1E9E498D0 = v9;
            uint64_t v10 = *((void *)v0 + 1) + 8 * v9;
            if (v5 != (uint64_t *)v10) {
              memmove(v5, v5 + 1, v6 + v10);
            }
            uint64_t v11 = sub_1B6DA915C(v7);
            MEMORY[0x1BA9B6D80](v11, 0x10B2C401994A623);
            uint64_t v0 = (unsigned int *)qword_1E9E498D0;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while ((unint64_t)v5 < *((void *)v0 + 1) + 8 * (unint64_t)*v0);
    }
  }

  os_unfair_lock_unlock(&stru_1E9DDA460);
}

uint64_t sub_1B6DA915C(uint64_t a1)
{
  if (MEMORY[0xFFFFFC088] != *(void *)(qword_1E9E498C0 + 16)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    sub_1B6DA9274();
  }
  if (*(char *)(a1 + 28727) < 0) {
    operator delete(*(void **)(a1 + 28704));
  }
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 28640;
  do
  {
    sub_1B6DA8D74((unsigned int *)(a1 + v2 + 28672));
    free(*(void **)(a1 + v2 + 28680));
    *(_DWORD *)(v3 + v2 + 16) = 0;
    free(*(void **)(a1 + v2 + 28664));
    *(_DWORD *)(v3 + v2) = 0;
    free(*(void **)(a1 + v2 + 28648));
    v2 -= 56;
  }
  while (v2 != -28672);
  return a1;
}

void sub_1B6DA9224()
{
  uint64_t v0 = currentThreadProfiler_0();
  uint64_t v1 = *(void *)(v0 + 16);
  if (!byte_1E9E498C8)
  {
    uint64_t v1 = ((_WORD)v1 + 1) & 0x1FF;
    *(void *)(v0 + 16) = v1;
  }
  uint64_t v2 = v0 + 56 * v1 + 24;

  sub_1B6DA8B68(v2);
}

void sub_1B6DA9274()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_1B6287000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "!!! Clock offset inconsistency, computer went to sleep during profiling, profiling timing are invalid. !!!\n", v0, 2u);
}

void *vfx_counters_destroy(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[5];
    if (result[6] != v2)
    {
      uint64_t v3 = 0;
      unsigned int v4 = 1;
      do
      {
        uint64_t v5 = 3 * v3;
        free(*(void **)(v2 + 24 * v3));
        uint64_t v2 = v1[5];
        uint64_t v6 = v1[6];
        *(void *)(v2 + 8 * v5) = 0;
        uint64_t v3 = v4;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v6 - v2) >> 3) > v4++);
    }
    double v8 = (void *)v1[11];
    if (v8)
    {
      v1[12] = v8;
      operator delete(v8);
    }
    unsigned int v9 = (void *)v1[8];
    if (v9)
    {
      v1[9] = v9;
      operator delete(v9);
    }
    uint64_t v10 = (void *)v1[5];
    if (v10)
    {
      v1[6] = v10;
      operator delete(v10);
    }
    sub_1B6491404((uint64_t)v1);
    JUMPOUT(0x1BA9B6D80);
  }
  return result;
}

uint64_t vfx_counters_push_frame(uint64_t result, unsigned int a2)
{
  if (result)
  {
    *(_DWORD *)(result + 112) = a2;
    uint64_t v3 = *(void *)(result + 40);
    uint64_t v2 = *(void *)(result + 48);
    uint64_t v4 = v2 - v3;
    if (v2 != v3)
    {
      int v5 = 0;
      unsigned int v6 = *(_DWORD *)(result + 116);
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
      int v8 = a2 % v6;
      unsigned int v9 = (unsigned __int8 *)(v3 + 17);
      unsigned int v10 = 1;
      do
      {
        int v11 = v8 + v5 * v6;
        int v12 = *v9;
        v9 += 24;
        if (v12 == 1)
        {
          uint64_t v13 = *(void *)(result + 88);
          if (v8 < 1) {
            *(void *)(v13 + 8 * v11) = *(void *)(v13 + 8 * (v6 - 1 + v11));
          }
          else {
            *(void *)(v13 + 8 * v11) = *(void *)(v13 + 8 * v11 - 8);
          }
        }
        else
        {
          *(void *)(*(void *)(result + 88) + 8 * v11) = 0;
        }
        ++v5;
      }
      while (v7 > v10++);
    }
  }
  return result;
}

void vfx_counters_remove_counter(void *a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v4 = a2;
    int v5 = *(unsigned char **)(a1[5] + 24 * a2);
    LOBYTE(v6) = *v5;
    if (*v5)
    {
      int v7 = 0;
      int v8 = 63689;
      unsigned int v9 = 1;
      do
      {
        int v7 = v8 * v7 + (char)v6;
        v8 *= 378551;
        int v6 = v5[v9++];
      }
      while (v6);
    }
    else
    {
      int v7 = 0;
    }
    int v23 = v7;
    sub_1B6DA9B94(a1, (unsigned int *)&v23);
    uint64_t v10 = 3 * v4;
    free(*(void **)(a1[5] + 8 * v10));
    *(void *)(a1[5] + 8 * v10) = 0;
    unint64_t v11 = a1[10];
    int v12 = (char *)a1[9];
    if ((unint64_t)v12 >= v11)
    {
      id v14 = (char *)a1[8];
      uint64_t v15 = (v12 - v14) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        abort();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        uint64_t v19 = (char *)sub_1B64282E0((uint64_t)(a1 + 10), v18);
        id v14 = (char *)a1[8];
        int v12 = (char *)a1[9];
      }
      else
      {
        uint64_t v19 = 0;
      }
      unint64_t v20 = &v19[4 * v15];
      unsigned int v21 = &v19[4 * v18];
      *(_DWORD *)unint64_t v20 = a2;
      uint64_t v13 = v20 + 4;
      while (v12 != v14)
      {
        int v22 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v22;
        v20 -= 4;
      }
      a1[8] = v20;
      a1[9] = v13;
      a1[10] = v21;
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)int v12 = a2;
      uint64_t v13 = v12 + 4;
    }
    a1[9] = v13;
  }
}

double vfx_counters_update_with_frame(uint64_t a1, unsigned int a2, unint64_t a3, double result)
{
  if (a1)
  {
    if (a3 == -1) {
      a3 = *(unsigned int *)(a1 + 112);
    }
    int v4 = a3 % *(unsigned int *)(a1 + 116) + *(_DWORD *)(a1 + 116) * a2;
    uint64_t v5 = *(void *)(a1 + 88);
    uint64_t result = *(double *)(v5 + 8 * v4) + result;
    *(double *)(v5 + 8 * v4) = result;
    uint64_t v6 = *(void *)(a1 + 40) + 24 * a2;
    ++*(_DWORD *)(v6 + 8);
  }
  return result;
}

unint64_t vfx_counters_get_count(unint64_t result)
{
  if (result) {
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 48) - *(void *)(result + 40)) >> 3);
  }
  return result;
}

void vfx_counters_enumerate_counters(uint64_t a1, void *a2)
{
  int v7 = a2;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3 != v4)
    {
      unint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        if (*(void *)(v4 + 24 * v5))
        {
          v7[2](v7, v6);
          uint64_t v4 = *(void *)(a1 + 40);
          uint64_t v3 = *(void *)(a1 + 48);
        }
        unint64_t v5 = (v6 + 1);
        unint64_t v6 = v5;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3) > v5);
    }
  }
}

void sub_1B6DA96B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double vfx_counters_get_value(uint64_t a1, int a2, unint64_t a3)
{
  if (!a1) {
    return 0.0;
  }
  if (a3 == -1) {
    a3 = *(unsigned int *)(a1 + 112);
  }
  return *(double *)(*(void *)(a1 + 88) + 8 * (int)(a3 % *(unsigned int *)(a1 + 116) + *(_DWORD *)(a1 + 116) * a2));
}

uint64_t vfx_counters_get_values(uint64_t result, unsigned int a2, void *a3, unsigned int a4)
{
  if (result)
  {
    unsigned int v4 = *(_DWORD *)(result + 116);
    LODWORD(v5) = *(_DWORD *)(*(void *)(result + 40) + 24 * a2 + 8);
    if (v4 < v5) {
      LODWORD(v5) = *(_DWORD *)(result + 116);
    }
    if (a3)
    {
      if (v5 >= a4) {
        uint64_t v5 = a4;
      }
      else {
        uint64_t v5 = v5;
      }
      if (v5)
      {
        uint64_t v6 = *(void *)(result + 88);
        unsigned int v7 = *(_DWORD *)(result + 112) - v5;
        uint64_t v8 = v5;
        do
        {
          *a3++ = *(void *)(v6 + 8 * (int)(v7 % v4 + v4 * a2));
          ++v7;
          --v8;
        }
        while (v8);
      }
    }
    return v5;
  }
  return result;
}

uint64_t vfx_counters_get_color(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 40) + 24 * a2 + 12);
}

uint64_t vfx_counters_update_color(uint64_t result, unsigned int a2, int a3)
{
  *(_DWORD *)(*(void *)(result + 40) + 24 * a2 + 12) = a3;
  return result;
}

uint64_t vfx_counters_get_desc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  v20[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1, a2);
  unsigned int v7 = (double *)((char *)v20 - ((v6 + 15) & 0xFFFFFFFF0));
  uint64_t result = vfx_counters_get_values(v8, v9, v7, v10);
  if (result)
  {
    double v12 = 0.0;
    double v13 = -INFINITY;
    double v14 = INFINITY;
    uint64_t v15 = result;
    do
    {
      double v16 = *v7++;
      double v17 = v16;
      if (v16 < v14) {
        double v14 = v17;
      }
      if (v13 < v17) {
        double v13 = v17;
      }
      double v12 = v12 + v17;
      --v15;
    }
    while (v15);
    double v18 = v12 / (double)result;
  }
  else
  {
    double v13 = 0.0;
    double v14 = 0.0;
    double v18 = 0.0;
  }
  uint64_t v19 = *(void *)(a1 + 40) + 24 * v3;
  *(void *)a3 = *(void *)v19;
  *(double *)(a3 + 8) = v14;
  *(double *)(a3 + 16) = v13;
  *(double *)(a3 + 24) = v18;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v19 + 12);
  *(_WORD *)(a3 + 36) = *(_WORD *)(v19 + 16);
  return result;
}

uint64_t *sub_1B6DA98BC(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_1B6DA9970(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x18uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_1B63C8630(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    *unint64_t v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B6DA9B80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B6DA9B94(void *a1, unsigned int *a2)
{
  uint64_t result = sub_1B6DA98BC(a1, a2);
  if (result)
  {
    sub_1B63C8AF8(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

Swift::Double __swiftcall vfx_counters.value(of:)(Swift::UInt32 of)
{
  return vfx_counters_get_value(v1, of, 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t vfx_counters.values(of:)(unsigned int a1, uint64_t a2)
{
  uint64_t values = vfx_counters_get_values(a2, a1, 0, 0);
  if (values < 1)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v5 = sub_1B6E31C98();
    *(void *)(v5 + 16) = values;
  }
  *(void *)(v5 + 16) = vfx_counters_get_values(a2, a1, (void *)(v5 + 32), values);
  return v5;
}

uint64_t vfx_counters.addCounter(name:scope:kind:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v8 = sub_1B6E31848();
  uint64_t v9 = vfx_counters_add_counter(a5, (const char *)(v8 + 32), a3, a4, 0);
  swift_release();
  return v9;
}

uint64_t vfx_counters.addCounter(name:scope:kind:color:)(const char *a1, uint64_t a2, uint64_t a3, char a4, char a5, unsigned int a6, uint64_t a7)
{
  return vfx_counters_add_counter(a7, a1, a4, a5, a6);
}

uint64_t sub_1B6DA9CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(_DWORD *)(a2 + 8) = vfx_counters_add_counter(a1, "Draw Call", 0, 1, 0);
  *(_DWORD *)(a2 + 12) = vfx_counters_add_counter(a1, "Indirect Draw Call", 0, 1, 0);
  uint64_t result = vfx_counters_add_counter(a1, "Primitive Count", 0, 1, 0);
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

void sub_1B6DAB7C8(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 1344;
  uint64_t v31 = a1 + 1344;
  do
  {
    uint64_t v29 = a1 + 8 * v4;
    unint64_t v6 = *(void *)(v29 + 4144);
    if (v6)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0xFFFFFFFFLL;
      do
      {
        if (v6)
        {
          if (v8 >= v7) {
            uint64_t v9 = v7;
          }
          else {
            uint64_t v9 = v8;
          }
          if ((v6 & 2) == 0)
          {
            unint64_t v10 = (v7 - v9 + 1);
            uint64_t v11 = (v4 << 6) + v9;
            if (v10 < 2)
            {
              uint64_t v15 = a1 + 8 * v11;
              objc_msgSend_setVertexTexture_atIndex_(a2, (const char *)a2, *(void *)(v15 + 1344), v11);

              *(void *)(v15 + 1344) = 0;
            }
            else
            {
              objc_msgSend_setVertexTextures_withRange_(a2, (const char *)a2, v31 + 8 * v11, v11, (v7 - v9 + 1));
              unint64_t v12 = 0;
              unint64_t v13 = v8;
              if (v7 < v8) {
                unint64_t v13 = v7;
              }
              uint64_t v14 = v5 + 8 * v13;
              do
              {

                *(void *)(v14 + 8 * v12++) = 0;
              }
              while (v12 < v10);
            }
            uint64_t v9 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          uint64_t v9 = v8;
        }
        ++v7;
        uint64_t v8 = v9;
        BOOL v16 = v6 >= 2;
        v6 >>= 1;
      }
      while (v16);
    }
    *(void *)(v29 + 4144) = 0;
    ++v4;
    v5 += 512;
  }
  while (v4 != 2);
  uint64_t v17 = 0;
  uint64_t v18 = a1 + 2992;
  do
  {
    uint64_t v30 = a1 + 8 * v17;
    unint64_t v19 = *(void *)(v30 + 4160);
    if (v19)
    {
      unint64_t v20 = 0;
      uint64_t v21 = 0xFFFFFFFFLL;
      do
      {
        if (v19)
        {
          if (v21 >= v20) {
            uint64_t v22 = v20;
          }
          else {
            uint64_t v22 = v21;
          }
          if ((v19 & 2) == 0)
          {
            unint64_t v23 = (v20 - v22 + 1);
            uint64_t v24 = (v17 << 6) + v22;
            if (v23 < 2)
            {
              uint64_t v28 = a1 + 8 * v24;
              objc_msgSend_setFragmentTexture_atIndex_(a2, (const char *)a2, *(void *)(v28 + 2992), v24);

              *(void *)(v28 + 2992) = 0;
            }
            else
            {
              objc_msgSend_setFragmentTextures_withRange_(a2, (const char *)a2, a1 + 2992 + 8 * v24, v24, (v20 - v22 + 1));
              unint64_t v25 = 0;
              unint64_t v26 = v21;
              if (v20 < v21) {
                unint64_t v26 = v20;
              }
              uint64_t v27 = v18 + 8 * v26;
              do
              {

                *(void *)(v27 + 8 * v25++) = 0;
              }
              while (v25 < v23);
            }
            uint64_t v22 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          uint64_t v22 = v21;
        }
        ++v20;
        uint64_t v21 = v22;
        BOOL v16 = v19 >= 2;
        v19 >>= 1;
      }
      while (v16);
    }
    *(void *)(v30 + 4160) = 0;
    ++v17;
    v18 += 512;
  }
  while (v17 != 2);
  *(_WORD *)(a1 + 4176) &= ~0x100u;
}