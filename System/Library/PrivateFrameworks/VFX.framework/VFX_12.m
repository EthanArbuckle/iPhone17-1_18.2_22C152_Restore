uint64_t sub_1B696A21C()
{
  sub_1B6391138();
  return sub_1B6E31B28();
}

uint64_t sub_1B696A26C@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  a2(v52);
  sub_1B62EAE14((uint64_t)v52, (uint64_t)&v70, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
  if (sub_1B630C698((uint64_t)&v70) == 1)
  {
    a3(&v54, a1);
    sub_1B62EAE14((uint64_t)&v54, (uint64_t)v53, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
    sub_1B62EAE14((uint64_t)v53, (uint64_t)v86, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
    return sub_1B62EAE14((uint64_t)v86, a4, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
  }
  long long v49 = v82;
  long long v50 = v83;
  long long v31 = v85;
  long long v51 = v84;
  long long v47 = v80;
  long long v48 = v81;
  uint64_t v7 = v70;
  uint64_t v8 = v71;
  uint64_t v9 = v72;
  uint64_t v10 = v73;
  uint64_t v11 = v74;
  uint64_t v12 = v75;
  uint64_t v32 = v76;
  uint64_t v33 = v77;
  uint64_t v34 = v78;
  uint64_t v35 = v79;
  if (v71)
  {
    sub_1B6312ABC(v70, v71);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    if (v10)
    {
      uint64_t v54 = v7;
      uint64_t v55 = v8;
      uint64_t v56 = v9;
      uint64_t v57 = v10;
      uint64_t v58 = v11;
      uint64_t v59 = v12;
      uint64_t v60 = v32;
      uint64_t v61 = v33;
      uint64_t v62 = v34;
      uint64_t v63 = v35;
      long long v66 = v49;
      long long v67 = v50;
      long long v65 = v48;
      long long v64 = v47;
      long long v68 = v51;
      long long v69 = v31;
      nullsub_1(&v54);
      v13 = &v54;
LABEL_8:
      sub_1B62EAE14((uint64_t)v13, (uint64_t)v86, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
      return sub_1B62EAE14((uint64_t)v86, a4, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
    }
  }
  a3(v53, a1);
  sub_1B62EAE14((uint64_t)v53, (uint64_t)v46, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
  sub_1B62EAE14((uint64_t)v53, (uint64_t)&v54, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
  if (sub_1B630C698((uint64_t)&v54) == 1)
  {
    sub_1B630D0DC(v52);
    v13 = (uint64_t *)v46;
    goto LABEL_8;
  }
  uint64_t v24 = a4;
  uint64_t v14 = v54;
  uint64_t v15 = v55;
  long long v16 = v64;
  long long v17 = v65;
  long long v18 = v66;
  uint64_t v19 = v67;
  uint64_t v20 = v68;
  uint64_t v30 = *((void *)&v67 + 1);
  uint64_t v21 = *((void *)&v68 + 1);
  uint64_t v23 = *((void *)&v69 + 1);
  uint64_t v28 = v55;
  uint64_t v29 = v54;
  uint64_t v26 = v57;
  uint64_t v27 = v56;
  uint64_t v25 = v58;
  if (!(void)v31)
  {
    *(void *)&long long v31 = v69;
    swift_bridgeObjectRetain();
    uint64_t v15 = v28;
    uint64_t v14 = v29;
  }
  sub_1B6312ABC(v14, v15);
  sub_1B6312ABC(v16, *((uint64_t *)&v16 + 1));
  sub_1B6312ABC(*((uint64_t *)&v18 + 1), v19);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6312ABC(v12, v32);
  sub_1B630D0DC(v53);
  sub_1B630D0DC(v52);
  v36[0] = v29;
  v36[1] = v28;
  v36[2] = v27;
  v36[3] = v26;
  v36[4] = v25;
  v36[5] = v12;
  v36[6] = v32;
  v36[7] = v33;
  v36[8] = v34;
  v36[9] = v35;
  long long v37 = v16;
  long long v38 = v17;
  long long v39 = v18;
  uint64_t v40 = v19;
  uint64_t v41 = v30;
  uint64_t v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v31;
  uint64_t v45 = v23;
  nullsub_1(v36);
  sub_1B62EAE14((uint64_t)v36, (uint64_t)v86, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
  a4 = v24;
  return sub_1B62EAE14((uint64_t)v86, a4, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
}

uint64_t sub_1B696A76C(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1B62C3CF0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1B62C3CF0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B696A7F8()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B62C3CF0(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B696A85C()
{
  sub_1B62C3CF0(*v0);
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B696A8B0()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B62C3CF0(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B696A910@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B696C130();
  *a1 = result;
  return result;
}

unint64_t sub_1B696A940@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B62C3CF0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B696A96C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B696C130();
  *a1 = result;
  return result;
}

void sub_1B696A994(unsigned char *a1@<X8>)
{
  *a1 = 36;
}

uint64_t sub_1B696A9A0(uint64_t a1)
{
  unint64_t v2 = sub_1B62A8444();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B696A9DC(uint64_t a1)
{
  unint64_t v2 = sub_1B62A8444();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B696AA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[3] = a4;
  v14[4] = a5;
  uint64_t v7 = swift_allocObject();
  v14[0] = v7;
  long long v8 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)v5;
  *(_OWORD *)(v7 + 32) = v8;
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v5 + 32);
  unint64_t v9 = *sub_1B62C14BC(v14, a4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
  uint64_t v10 = (void *)sub_1B62EBE70(v9, v14);
  uint64_t v11 = v10;
  if (!v10) {
    return (uint64_t)v11;
  }
  unint64_t v12 = (unint64_t)objc_msgSend(v10, sel_textureType);
  if (v12 <= 7 && (((1 << v12) & 0x2D) != 0 || v12 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v11;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B696AB90()
{
  v8[3] = &type metadata for ParticleLineRenderer;
  v8[4] = &off_1F0F81100;
  char v1 = (_OWORD *)swift_allocObject();
  v8[0] = v1;
  long long v2 = v0[1];
  v1[1] = *v0;
  v1[2] = v2;
  *(_OWORD *)((char *)v1 + 44) = *(_OWORD *)((char *)v0 + 28);
  unint64_t v3 = *(void *)((char *)sub_1B62C14BC(v8, (uint64_t)&type metadata for ParticleLineRenderer) + 36);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  unint64_t v4 = (void *)sub_1B62EBE70(v3, v8);
  uint64_t v5 = v4;
  if (!v4) {
    return (uint64_t)v5;
  }
  unint64_t v6 = (unint64_t)objc_msgSend(v4, sel_textureType);
  if (v6 <= 7 && (((1 << v6) & 0x2D) != 0 || v6 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v5;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B696AD14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = (void *)sub_1B62EBE70(a4, &v8);
  uint64_t v5 = v4;
  if (!v4) {
    return (uint64_t)v5;
  }
  unint64_t v6 = (unint64_t)objc_msgSend(v4, sel_textureType);
  if (v6 <= 7 && (((1 << v6) & 0x2D) != 0 || v6 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v5;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B696AE38()
{
  v8[3] = &type metadata for ParticlePointRenderer;
  v8[4] = &off_1F0F89748;
  char v1 = (_OWORD *)swift_allocObject();
  v8[0] = v1;
  long long v2 = v0[1];
  v1[1] = *v0;
  v1[2] = v2;
  v1[3] = v0[2];
  unint64_t v3 = *sub_1B62C14BC(v8, (uint64_t)&type metadata for ParticlePointRenderer);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  unint64_t v4 = (void *)sub_1B62EBE70(v3, v8);
  uint64_t v5 = v4;
  if (!v4) {
    return (uint64_t)v5;
  }
  unint64_t v6 = (unint64_t)objc_msgSend(v4, sel_textureType);
  if (v6 <= 7 && (((1 << v6) & 0x2D) != 0 || v6 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v5;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B696AFBC()
{
  v10[3] = &type metadata for ParticleRibbonRenderer;
  v10[4] = &off_1F0F8D478;
  char v1 = (_OWORD *)swift_allocObject();
  v10[0] = v1;
  long long v2 = v0[5];
  v1[5] = v0[4];
  v1[6] = v2;
  *(_OWORD *)((char *)v1 + 105) = *(_OWORD *)((char *)v0 + 89);
  long long v3 = v0[1];
  v1[1] = *v0;
  v1[2] = v3;
  long long v4 = v0[3];
  v1[3] = v0[2];
  v1[4] = v4;
  unint64_t v5 = *sub_1B62C14BC(v10, (uint64_t)&type metadata for ParticleRibbonRenderer);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
  unint64_t v6 = (void *)sub_1B62EBE70(v5, v10);
  uint64_t v7 = v6;
  if (!v6) {
    return (uint64_t)v7;
  }
  unint64_t v8 = (unint64_t)objc_msgSend(v6, sel_textureType);
  if (v8 <= 7 && (((1 << v8) & 0x2D) != 0 || v8 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v7;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B696B160()
{
  v8[3] = &type metadata for ParticlePrimitiveRenderer;
  v8[4] = &off_1F0F95480;
  uint64_t v1 = swift_allocObject();
  v8[0] = v1;
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 32) = v2;
  *(void *)(v1 + 45) = *(void *)(v0 + 29);
  unint64_t v3 = *sub_1B62C14BC(v8, (uint64_t)&type metadata for ParticlePrimitiveRenderer);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  long long v4 = (void *)sub_1B62EBE70(v3, v8);
  unint64_t v5 = v4;
  if (!v4) {
    return (uint64_t)v5;
  }
  unint64_t v6 = (unint64_t)objc_msgSend(v4, sel_textureType);
  if (v6 <= 7 && (((1 << v6) & 0x2D) != 0 || v6 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v5;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ParticleDefaultRenderSystem()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B696B2FC(uint64_t a1)
{
  unint64_t v2 = sub_1B696D87C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B696B338(uint64_t a1)
{
  unint64_t v2 = sub_1B696D87C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B696B374()
{
  return sub_1B6E33988();
}

uint64_t sub_1B696B3A8(void *a1)
{
  sub_1B696D820();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B62C14BC(a1, a1[3]);
  sub_1B696D87C();
  sub_1B6E33A88();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B696B4B4(uint64_t a1)
{
  if ((uint64_t)v1[10] < 1) {
    return 0;
  }
  uint64_t v2 = v1[7];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = v1[5];
  uint64_t v5 = v4 + 48 * v2;
  int v6 = -2;
  while (2)
  {
    char v7 = 0;
    while (2)
    {
      int v8 = v6;
      while (2)
      {
        for (v4 += 48; ; v4 += 48)
        {
          uint64_t v9 = *(void *)(v4 - 8);
          int v6 = *(_DWORD *)(v9 + 24);
          if (v8 != v6) {
            break;
          }
          if (v4 == v5)
          {
            if ((v7 & 1) == 0) {
              return 0;
            }
            return v3;
          }
        }
        if (v7)
        {
          char v7 = 1;
          int v8 = *(_DWORD *)(v9 + 24);
          if (v4 != v5) {
            continue;
          }
          return v3;
        }
        break;
      }
      uint64_t v11 = *(void *)(v9 + 40);
      uint64_t v12 = v1[8];
      uint64_t v13 = *(void *)(*(void *)(v12 + 96) + 40 * *(int *)(v11 + 204) + 32);
      uint64_t v14 = *(void *)(v13 + 16);
      if (!v14)
      {
        uint64_t v17 = 0;
        goto LABEL_23;
      }
      uint64_t v15 = *(void *)(v12 + 136) + 32;
      if (v14 == 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_21:
        uint64_t v24 = v14 - v16;
        uint64_t v25 = (int *)(v13 + 4 * v16 + 32);
        do
        {
          uint64_t v26 = *v25++;
          v17 += *(void *)(*(void *)(v15 + 8 * v26) + 240) - *(void *)(*(void *)(v15 + 8 * v26) + 232);
          --v24;
        }
        while (v24);
        goto LABEL_23;
      }
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v16 = v14 & 0x7FFFFFFFFFFFFFFELL;
      uint64_t v20 = (int *)(v13 + 36);
      uint64_t v21 = v14 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v22 = *(void *)(v15 + 8 * *(v20 - 1));
        uint64_t v23 = *(void *)(v15 + 8 * *v20);
        v18 += *(void *)(v22 + 240) - *(void *)(v22 + 232);
        v19 += *(void *)(v23 + 240) - *(void *)(v23 + 232);
        v20 += 2;
        v21 -= 2;
      }
      while (v21);
      uint64_t v17 = v19 + v18;
      if (v14 != v16) {
        goto LABEL_21;
      }
LABEL_23:
      uint64_t v27 = *(void *)(v11 + 112);
      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        uint64_t v29 = *(void *)(v11 + 96);
        uint64_t v30 = (void *)(v27 + 56);
        while ((ValueMetadata *)*(v30 - 3) != &type metadata for ParticleClassSpawnID)
        {
          v30 += 5;
          if (!--v28) {
            goto LABEL_31;
          }
        }
        if (*(void *)(v29 + *v30) == a1)
        {
          char v7 = 1;
          if (v4 != v5) {
            continue;
          }
          return v3;
        }
      }
      break;
    }
LABEL_31:
    uint64_t v31 = 0;
    v3 += v17;
    if (v4 != v5) {
      continue;
    }
    return v31;
  }
}

void sub_1B696B6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (*(_OWORD *)(a2 + 48) == 0)
  {
    uint64_t v9 = 520;
    if (a6) {
      uint64_t v9 = 528;
    }
    uint64_t v10 = *(void *)(a3 + v9);
    if (v10)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void *)(a3 + 368) + 28;
      swift_unknownObjectRetain();
      uint64_t v13 = swift_unknownObjectRetain();
      sub_1B6B59478(v13, v12, 4, 0);
      swift_unknownObjectRelease();
      v36[0] = vuzp1q_s32(*(int32x4_t *)(a2 + 16), *(int32x4_t *)(a2 + 32));
      type metadata accessor for indirect_draw_arguments_uniforms(0);
      sub_1B6B594A8((uint64_t)v36, 1, ObjectType, v14, v15, v16, v17, v18);
      uint64_t v19 = *(void *)(a5 + 8);
      uint64_t v20 = *(void *)(a5 + 16);
      uint64_t v21 = swift_unknownObjectRetain();
      sub_1B6B59478(v21, v19, v20, 0);
      swift_unknownObjectRelease();
      sub_1B6B59510(v10);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_1B696C860(a3 + 536, (uint64_t)v37);
    sub_1B696C860((uint64_t)v37, (uint64_t)&v38);
    uint64_t v23 = v38;
    if (v38)
    {
      uint64_t v24 = swift_getObjectType();
      uint64_t v25 = *(void *)(a3 + 368) + 28;
      sub_1B63846D0((uint64_t)v37);
      uint64_t v26 = swift_unknownObjectRetain();
      sub_1B6B59478(v26, v25, 4, 0);
      swift_unknownObjectRelease();
      long long v27 = *(_OWORD *)(a4 + 240);
      *(int32x2_t *)&v36[0] = vmovn_s64(*(int64x2_t *)(a2 + 48));
      v36[1] = v27;
      type metadata accessor for indirect_draw_mesh_arguments_uniforms(0);
      sub_1B6B594A8((uint64_t)v36, 1, v24, v28, v29, v30, v31, v32);
      uint64_t v33 = *(void *)(a5 + 8);
      uint64_t v34 = *(void *)(a5 + 16);
      uint64_t v35 = swift_unknownObjectRetain();
      sub_1B6B59478(v35, v33, v34, 0);
      swift_unknownObjectRelease();
      sub_1B6B59510(v23);
      sub_1B62D8C10((uint64_t)v37);
    }
  }
}

uint64_t type metadata accessor for ParticleRibbonLengthUpdate.System()
{
  return self;
}

const char *sub_1B696B900()
{
  return "ParticleRibbonSystem";
}

uint64_t sub_1B696B914()
{
  return type metadata accessor for ParticleRibbonLengthUpdate.System();
}

void sub_1B696B934()
{
}

uint64_t sub_1B696B974(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = 0xFFFFFFFFLL;
  uint64_t v5 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(a2 + 8);
  v5(&v7, 0, ObjectType, a2);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v5)(v2, 0, ObjectType, a2);
}

void sub_1B696BA04()
{
}

uint64_t sub_1B696BA40(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = (void *)*v7;
  uint64_t v15 = sub_1B696BE00(a5, *v7);
  if (v16)
  {
    sub_1B6916440(a1, a2, a3, a4);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1B68C4CC4(0, v14[2] + 1, 1, v14);
      uint64_t v14 = (void *)result;
    }
    unint64_t v30 = v14[2];
    unint64_t v29 = v14[3];
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B68C4CC4(v29 > 1, v30 + 1, 1, v14);
      uint64_t v14 = (void *)result;
    }
    v14[2] = v30 + 1;
    uint64_t v31 = &v14[5 * v30];
    v31[4] = a1;
    v31[5] = a2;
    v31[6] = a3;
    *((unsigned char *)v31 + 56) = a4;
    v31[8] = a5;
    *uint64_t v7 = (uint64_t)v14;
  }
  else
  {
    uint64_t v17 = v15;
    if (v14[5 * v15 + 8] == a5)
    {
      uint64_t v33 = a5;
      uint64_t v18 = a1;
      uint64_t v19 = a2;
      uint64_t v20 = a3;
      if (a6)
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        *(void *)&long long v35 = 0;
        *((void *)&v35 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B6E328C8();
        long long v34 = v35;
        sub_1B6E31948();
        sub_1B6E32B18();
        sub_1B6E31948();
        *((void *)&v35 + 1) = v19;
        uint64_t v36 = a3;
        char v37 = a4;
        sub_1B6E32B18();
        sub_1B6E31948();
        *(void *)&long long v35 = v33;
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        int v21 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        *(void *)&long long v35 = 0;
        swift_retain();
        sub_1B6B33E34(v21, (uint64_t *)&v35, v34, *((uint64_t *)&v34 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      uint64_t v32 = v7;
      char v22 = a4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = sub_1B6C168A0(v14);
      }
      uint64_t v23 = &v14[5 * v17];
      uint64_t v24 = v23[4];
      uint64_t v25 = v23[5];
      uint64_t v26 = v23[6];
      char v27 = *((unsigned char *)v23 + 56);
      sub_1B6916440(v18, v19, v20, v22);
      uint64_t result = sub_1B6916620(v24, v25, v26, v27);
      v23[4] = v18;
      v23[5] = v19;
      v23[6] = v20;
      *((unsigned char *)v23 + 56) = v22;
      v23[8] = v33;
      *uint64_t v32 = (uint64_t)v14;
    }
    else
    {
      *(void *)&long long v35 = a1;
      *((void *)&v35 + 1) = a2;
      uint64_t v36 = a3;
      char v37 = a4;
      uint64_t v38 = a5;
      sub_1B6916440(a1, a2, a3, a4);
      return (uint64_t)sub_1B68E89C8(v17, v17, (uint64_t)&v35);
    }
  }
  return result;
}

uint64_t sub_1B696BE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v5 = v2 - 1;
    do
    {
      while (1)
      {
        uint64_t v6 = result + (v5 - result) / 2;
        uint64_t v7 = *(void *)(a2 + 32 + 40 * v6 + 32);
        if (v7 >= a1) {
          break;
        }
        uint64_t result = v6 + 1;
        if (v5 < v6 + 1) {
          goto LABEL_7;
        }
      }
      if (v7 <= a1)
      {
        result += (v5 - result) / 2;
        return result;
      }
      uint64_t v5 = v6 - 1;
    }
    while (v6 - 1 >= result);
LABEL_7:
    if (result < v2) {
      return result;
    }
  }
  return 0;
}

void sub_1B696BE84()
{
}

uint64_t sub_1B696BEC0(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = 0xFFFFFFFFLL;
  uint64_t v5 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(a2 + 8);
  v5(&v7, 0, ObjectType, a2);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v5)(v2 + 36, 0, ObjectType, a2);
}

void sub_1B696BF50()
{
}

void sub_1B696BF8C()
{
}

void sub_1B696BFC8()
{
}

void sub_1B696C004()
{
}

uint64_t sub_1B696C040()
{
  return 10;
}

uint64_t sub_1B696C048()
{
  return 33;
}

uint64_t sub_1B696C050()
{
  return 34;
}

void sub_1B696C058()
{
}

uint64_t sub_1B696C094()
{
  return 30;
}

uint64_t sub_1B696C09C()
{
  return 6;
}

uint64_t sub_1B696C0A4()
{
  return 11;
}

uint64_t sub_1B696C0AC()
{
  return 5;
}

uint64_t sub_1B696C0B4()
{
  return 31;
}

uint64_t sub_1B696C0BC()
{
  return 9;
}

uint64_t sub_1B696C0C4()
{
  return 14;
}

uint64_t sub_1B696C0CC()
{
  return 17;
}

uint64_t sub_1B696C0D4()
{
  return 18;
}

uint64_t sub_1B696C0DC()
{
  return 19;
}

uint64_t sub_1B696C0E4()
{
  return 20;
}

uint64_t sub_1B696C0EC()
{
  return 7;
}

void sub_1B696C0F4()
{
}

uint64_t sub_1B696C130()
{
  unint64_t v0 = sub_1B6E337B8();
  swift_bridgeObjectRelease();
  if (v0 >= 0x24) {
    return 36;
  }
  else {
    return v0;
  }
}

void *sub_1B696C184(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v6 = a1[5];
  v43[4] = a1[4];
  v43[5] = v6;
  v43[6] = a1[6];
  long long v7 = a1[1];
  v43[0] = *a1;
  v43[1] = v7;
  long long v8 = a1[3];
  v43[2] = a1[2];
  v43[3] = v8;
  uint64_t v9 = *(void **)(a2 + 16);
  if (!v9) {
    return 0;
  }
  uint64_t v12 = v9[22];
  if (v12 <= 0)
  {
    uint64_t v12 = v9[25];
    if (v12 < 1) {
      return 0;
    }
  }
  swift_retain();
  swift_retain();
  uint64_t v13 = (void *)sub_1B62F1868(0, v12);
  uint64_t v15 = v14;
  uint64_t v35 = v16;
  swift_unknownObjectRetain();
  swift_release();
  if (v9[21])
  {
    uint64_t v17 = (void *)v9[21];
  }
  else
  {
    uint64_t v17 = (void *)v9[24];
    if (!v17)
    {
      long long v25 = a1[5];
      long long v40 = a1[4];
      long long v41 = v25;
      long long v42 = a1[6];
      long long v26 = a1[1];
      long long v36 = *a1;
      long long v37 = v26;
      long long v27 = a1[3];
      long long v38 = a1[2];
      long long v39 = v27;
      objc_msgSend(v13, sel_storageMode);
      uint64_t v28 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v29 = v13;
      unint64_t v30 = &v28[v15];
      long long v31 = v41;
      *((_OWORD *)v30 + 4) = v40;
      *((_OWORD *)v30 + 5) = v31;
      *((_OWORD *)v30 + 6) = v42;
      long long v32 = v37;
      *(_OWORD *)unint64_t v30 = v36;
      *((_OWORD *)v30 + 1) = v32;
      long long v33 = v39;
      *((_OWORD *)v30 + 2) = v38;
      *((_OWORD *)v30 + 3) = v33;
      swift_release();
      return v13;
    }
    swift_unknownObjectRetain();
  }
  uint64_t ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  if (objc_msgSend(v17, sel_encodedLength) != (id)v12)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    uint64_t v19 = sub_1B6E32148();
    *(void *)&long long v36 = 1;
    sub_1B6B33B70(v19, 0xD00000000000002ELL, 0x80000001B6F3F1B0, (uint64_t *)&v36);
    swift_release();
  }
  sub_1B62EC494((uint64_t)v13, v15, v35, 0);
  type metadata accessor for particle_ribbon_material_constants(0);
  sub_1B62EC4C0((uint64_t)v43, 0, ObjectType, v20);
  swift_retain();
  uint64_t v21 = sub_1B696AFBC();
  uint64_t v23 = v22;
  swift_release();
  sub_1B62EC578(v23, 200);
  sub_1B62EC1A8(v21, 201, (unint64_t *)(a2 + 136));
  sub_1B6CD0FC0((uint64_t)v17, (unint64_t *)(a2 + 136), a6);
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

uint64_t sub_1B696C4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = sub_1B62C9024((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1F0F709E8, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
  uint64_t v13 = sub_1B67A84C8();
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v17 = v16 - v15;
  unint64_t v30 = (void *)a1;
  if (v16 != v15)
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(a1 + 24) + a2;
    uint64_t v21 = (_OWORD *)(v13 + 32 * v15 + 16);
    uint64_t v22 = (uint64_t *)(v12 + 8 * v15);
    do
    {
      *(void *)(a3 + 120) = 1;
      *(void *)(a3 + 128) = v20;
      long long v25 = *(_OWORD *)(a4 + 16 * v20);
      HIDWORD(v25) = v32;
      if ((v19 & 1) == 0)
      {
        long long v26 = v25;
        HIDWORD(v26) = 1.0;
        *(v21 - 1) = v26;
        *uint64_t v21 = xmmword_1B6E963D0;
      }
      uint64_t v23 = *(void *)(a5 + 176);
      swift_retain();
      uint64_t v24 = sub_1B62EC590((uint64_t)&type metadata for DrawCallPool, (uint64_t)&off_1F0F59788, v23);
      swift_release();
      if (!v24)
      {
        type metadata accessor for DrawCall();
        swift_allocObject();
        uint64_t v24 = sub_1B630041C();
      }
      sub_1B699E460(a3);
      *v22++ = v24;
      swift_release();
      ++v20;
      v21 += 2;
      --v17;
    }
    while (v17);
  }
  return sub_1B62F0788(a5, a6, *(void *)(a7 + 32), 0, *(unsigned __int8 *)(a8 + 227), a9 & 1, v30);
}

void sub_1B696C670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t *a7)
{
  if (a3)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a5 + 12;
    uint64_t v15 = 1;
    while (1)
    {
      uint64_t v16 = *(unsigned int *)(a4 + 8 * v13 + 4);
      if (v16 == -1)
      {
        float v23 = *a6;
        *(float *)(a5 + 8 * v13) = *a6;
        uint64_t v24 = *a7;
        *(float *)(a5 + 8 * *a7 + 4) = COERCE_FLOAT(*(void *)(a5 + 8 * *a7)) / v23;
        if (v24 != v13)
        {
          long long v25 = (float *)(v14 + 8 * v24);
          do
          {
            ++v24;
            *long long v25 = COERCE_FLOAT(*(void *)(v25 - 1)) / v23;
            v25 += 2;
          }
          while (v13 != v24);
        }
        *a7 = v15;
        float v22 = 0.0;
      }
      else
      {
        unsigned int v17 = *(_DWORD *)(a4 + 8 * v13);
        if (v17 == -1) {
          unsigned int v17 = v13;
        }
        float32x4_t v18 = *(float32x4_t *)(a1 + 16 * v17);
        float32x4_t v19 = *(float32x4_t *)(a1 + 16 * v13);
        float32x4_t v20 = *(float32x4_t *)(a1 + 16 * v16);
        if (*(_DWORD *)(a4 + 8 * v16 + 4) != -1) {
          LODWORD(v16) = *(_DWORD *)(a4 + 8 * v16 + 4);
        }
        float32x4_t v21 = *(float32x4_t *)(a1 + 16 * v16);
        *(float *)(a5 + 8 * v13) = *a6;
        float v22 = catmull_rom_spline_arclength(v18, v19, v20, v21, 0.0, 1.0) + *a6;
      }
      *a6 = v22;
      if (v15 == a3) {
        break;
      }
      ++v15;
      ++v13;
      if (v15 == 0x100000001)
      {
        sub_1B6E32BD8();
        __break(1u);
        return;
      }
    }
  }
}

uint64_t sub_1B696C7F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B696C828(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B696C860(uint64_t a1, uint64_t a2)
{
  sub_1B62FA30C(0, &qword_1E9DD2C88, (void (*)(uint64_t))sub_1B696C8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B696C8E0()
{
  unint64_t result = qword_1E9DD2C90;
  if (!qword_1E9DD2C90)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9DD2C90);
  }
  return result;
}

uint64_t sub_1B696C938(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B696C998()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B696C9D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B696A26C(a1, *(void (**)(uint64_t *__return_ptr))(v2 + 16), *(void (**)(uint64_t *__return_ptr, uint64_t))(v2 + 32), a2);
}

uint64_t sub_1B696C9E4(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (result)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v5 = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

void *sub_1B696CB34(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30]);
  return a1;
}

uint64_t *sub_1B696CBB8(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  long long v3 = *(_OWORD *)(a1 + 104);
  long long v66 = *(_OWORD *)(a1 + 88);
  long long v67 = v3;
  uint64_t v68 = *(void *)(a1 + 120);
  swift_retain();
  sub_1B6781EAC(1, 2, (uint64_t)v52);
  v64[0] = v52[0];
  v64[1] = v52[1];
  uint64_t v65 = v53;
  sub_1B62C9DA8(v2, (uint64_t)v64, 0x200000000, v54);
  sub_1B62EAE14((uint64_t)v54, (uint64_t)v55, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v55[0])
  {
LABEL_31:
    sub_1B62CA064((uint64_t)v52);
    return (uint64_t *)swift_release();
  }
  long long v58 = v55[2];
  long long v59 = v55[3];
  long long v60 = v55[4];
  long long v61 = v55[5];
  long long v56 = v55[0];
  long long v57 = v55[1];
  unint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = 0;
  unint64_t v6 = sub_1B6BF9630(v4, v2);
  if (v6 >= 2)
  {
    uint64_t v10 = (void *)v6;
    uint64_t v11 = v7;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      uint64_t v13 = 0;
    }
    else
    {
      id v14 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v15 = v10;
      uint64_t v13 = (uint64_t)v14 + v11;
    }
    uint64_t v16 = v61;
    uint64_t v17 = *(void *)(*(void *)(*(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                + 8 * *(void *)thread_worker_index(&thread_worker_index, v12)
                                + 8)
                    + 32);
    ecs_stack_allocator_push_snapshot(v17);
    uint64_t v39 = v17;
    float32x4_t v18 = ecs_stack_allocator_allocate(v17, 8 * v16, 8);
    uint64_t v51 = 0;
    int v50 = 0;
    swift_retain();
    swift_retain();
    swift_retain();
    long long v40 = v18;
    sub_1B6846AD4((unsigned __int16 **)&v56, v16, v13, (uint64_t)v18, (float *)&v50, &v51);
    sub_1B632F170(v54);
    if (v16 > 0)
    {
      uint64_t v45 = *((void *)&v59 + 1);
      if (*((void *)&v59 + 1))
      {
        long long v38 = v10;
        float32x4_t v19 = (void *)*((void *)&v60 + 1);
        uint64_t v20 = *(void *)(*((void *)&v60 + 1) + 32);
        int v21 = *(unsigned __int8 *)(v60 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v62[0] = v56;
        v62[1] = v57;
        uint64_t v63 = v58;
        uint64_t v42 = *((void *)&v60 + 1) + 48;
        uint64_t v43 = *((void *)&v58 + 1);
        long long v41 = (void *)(*((void *)&v60 + 1) + 64);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v22 = 0;
        int v44 = v21;
        do
        {
          float v23 = (unsigned int *)(v43 + 48 * v22);
          uint64_t v47 = *v23;
          uint64_t v46 = v23[1];
          uint64_t v48 = v23[2];
          uint64_t v49 = v5;
          uint64_t v24 = (uint64_t *)*((void *)v23 + 2);
          uint64_t v25 = *((void *)v23 + 3);
          uint64_t v27 = *((void *)v23 + 4);
          uint64_t v26 = *((void *)v23 + 5);
          if (v21)
          {
            uint64_t v28 = *(os_unfair_lock_s **)(v26 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v28);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v20);
          sub_1B62EAE14(v42, (uint64_t)v69, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v29 = v19[4];
          uint64_t v30 = *(void *)(*(void *)(*(void *)(*(void *)(v26 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v19[6] = ecs_stack_allocator_allocate(v29, 48 * v30, 8);
          v19[7] = v30;
          v41[1] = 0;
          v41[2] = 0;
          *long long v41 = 0;
          swift_release();
          sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v24, v25, v27, (uint64_t)v19);
          long long v31 = (void *)sub_1B62C9024((uint64_t)&type metadata for ParticleRibbonLength, (uint64_t)&off_1F0F81FC0, v24, v25, v27, (uint64_t)v19);
          if (v24)
          {
            uint64_t v5 = v49;
            if (v27)
            {
              int v32 = &v40[v48];
              do
              {
                uint64_t v33 = *v32++;
                *v31++ = v33;
                --v27;
              }
              while (v27);
            }
          }
          else
          {
            uint64_t v5 = v49;
            if (v47 != v46)
            {
              long long v34 = &v40[v48];
              uint64_t v35 = v46 - v47;
              long long v36 = &v31[v47];
              do
              {
                uint64_t v37 = *v34++;
                *v36++ = v37;
                --v35;
              }
              while (v35);
            }
          }
          sub_1B6345178(v19, (unsigned __int16 **)v62, (uint64_t)v69);
          sub_1B634507C((char *)v26);
          ecs_stack_allocator_pop_snapshot(v20);
          int v21 = v44;
          if (v44)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 376));
          }
          swift_release();
          ++v22;
        }
        while (v22 != v45);
        sub_1B632F170(v54);
        uint64_t v10 = v38;
      }
    }
    ecs_stack_allocator_pop_snapshot(v39);
    sub_1B696D160((uint64_t)v10);
    sub_1B696D160((uint64_t)v10);
    sub_1B632F170(v54);
    goto LABEL_31;
  }
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  swift_retain();
  int v8 = sub_1B6E32148();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  v69[0] = 0;
  swift_retain();
  sub_1B6B33E34(v8, v69, 0xD000000000000017, 0x80000001B6F3F0F0);
  swift_release();
  sub_1B62CA064((uint64_t)v52);
  swift_release();
  swift_release();
  return sub_1B632F170(v54);
}

uint64_t sub_1B696D160(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B696D170()
{
  return MEMORY[0x1F4186498](v0, 160, 15);
}

uint64_t sub_1B696D180()
{
  return MEMORY[0x1F4186498](v0, 52, 7);
}

ValueMetadata *type metadata accessor for ParticleRibbonLengthUpdate()
{
  return &type metadata for ParticleRibbonLengthUpdate;
}

uint64_t getEnumTagSinglePayload for ParticleDefaultRendererableCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDD) {
    goto LABEL_17;
  }
  if (a2 + 35 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 35) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 35;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 35;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 35;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x24;
  int v8 = v6 - 36;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ParticleDefaultRendererableCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 35 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 35) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDC)
  {
    unsigned int v6 = ((a2 - 221) >> 8) + 1;
    *uint64_t result = a2 + 35;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B696D2FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 35;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleDefaultRendererableCodingKeys()
{
  return &type metadata for ParticleDefaultRendererableCodingKeys;
}

ValueMetadata *type metadata accessor for FluidRenderer()
{
  return &type metadata for FluidRenderer;
}

unsigned char *storeEnumTagSinglePayload for ParticleOrientationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B696D410);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleOrientationMode()
{
  return &type metadata for ParticleOrientationMode;
}

unsigned char *storeEnumTagSinglePayload for ParticleAnimationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B696D514);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleAnimationMode()
{
  return &type metadata for ParticleAnimationMode;
}

uint64_t sub_1B696D54C()
{
  return sub_1B696D604(&qword_1E9DD2CB0, &qword_1E9DD2CB8, (uint64_t)&type metadata for ParticleAnimationMode);
}

unint64_t sub_1B696D580()
{
  unint64_t result = qword_1E9DD2CC0;
  if (!qword_1E9DD2CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2CC0);
  }
  return result;
}

uint64_t sub_1B696D5D4()
{
  return sub_1B696D604(&qword_1E9DD2CC8, &qword_1E9DD2CD0, (uint64_t)&type metadata for ParticleOrientationMode);
}

uint64_t sub_1B696D604(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62EAEE0(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B696D66C()
{
  unint64_t result = qword_1E9DD2CD8;
  if (!qword_1E9DD2CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2CD8);
  }
  return result;
}

unint64_t sub_1B696D6C4()
{
  unint64_t result = qword_1E9DD2CE0;
  if (!qword_1E9DD2CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2CE0);
  }
  return result;
}

unint64_t sub_1B696D71C()
{
  unint64_t result = qword_1E9DD2CE8;
  if (!qword_1E9DD2CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2CE8);
  }
  return result;
}

unint64_t sub_1B696D774()
{
  unint64_t result = qword_1EB97FB90;
  if (!qword_1EB97FB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FB90);
  }
  return result;
}

unint64_t sub_1B696D7CC()
{
  unint64_t result = qword_1EB97FB88;
  if (!qword_1EB97FB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FB88);
  }
  return result;
}

void sub_1B696D820()
{
  if (!qword_1E9DD2D28)
  {
    sub_1B696D87C();
    unint64_t v0 = sub_1B6E33038();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD2D28);
    }
  }
}

unint64_t sub_1B696D87C()
{
  unint64_t result = qword_1E9DD2D30;
  if (!qword_1E9DD2D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2D30);
  }
  return result;
}

uint64_t sub_1B696D8D0()
{
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1B696D8E0()
{
  return MEMORY[0x1F4186498](v0, 60, 7);
}

uint64_t sub_1B696D8F0()
{
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1B696D900()
{
  return MEMORY[0x1F4186498](v0, 128, 7);
}

ValueMetadata *type metadata accessor for FluidRenderer.CodingKeys()
{
  return &type metadata for FluidRenderer.CodingKeys;
}

unint64_t sub_1B696D924()
{
  unint64_t result = qword_1E9DD2D60;
  if (!qword_1E9DD2D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2D60);
  }
  return result;
}

unint64_t sub_1B696D97C()
{
  unint64_t result = qword_1E9DD2D68;
  if (!qword_1E9DD2D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2D68);
  }
  return result;
}

uint64_t initializeWithCopy for Query(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Query(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  int v4 = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for Query(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for Query()
{
  return &type metadata for Query;
}

float sub_1B696DB08(int a1, float a2, float a3)
{
  if (a1 < 0) {
    float v4 = 0.0;
  }
  else {
    float v4 = (float)a1;
  }
  float v5 = fminf(a3, 1.01);
  float v6 = powf(v5, v4);
  float v7 = 1.0 - v6;
  float v8 = (float)((float)(v6 * 0.5) + (float)(v7 / v7)) * a2;
  float v9 = logf(1.0 - (float)((float)(1.0 - v5) * v8));
  float v10 = floorf(v9 / logf(v5));
  float v11 = (float)(1.0 - powf(v5, v10)) / v7;
  float v12 = powf(v5, v10 + 1.0);
  float v13 = (float)(v8 - (float)((float)(v11 + (float)((float)(1.0 - v12) / v7)) * 0.5))
      / (float)((float)((float)(1.0 - v12) / v7) - (float)((float)(v11 + (float)((float)(1.0 - v12) / v7)) * 0.5));
  return powf(1.0 / v5, v4 - v10) * (float)(1.0 - (float)(v13 * v13));
}

uint64_t sub_1B696DC00(uint64_t a1)
{
  unint64_t v2 = sub_1B696DF00();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B696DC3C(uint64_t a1)
{
  unint64_t v2 = sub_1B696DF00();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B696DC78(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B696DD70(a1, a2, a3, &qword_1E9DD2D70, (void (*)(void))sub_1B696DF00, (uint64_t)&type metadata for Anchored.CodingKeys, (void (*)(void))sub_1B696DF00);
}

uint64_t sub_1B696DCB8(uint64_t a1)
{
  unint64_t v2 = sub_1B696DFB4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B696DCF4(uint64_t a1)
{
  unint64_t v2 = sub_1B696DFB4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B696DD30(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B696DD70(a1, a2, a3, &qword_1E9DD2D80, (void (*)(void))sub_1B696DFB4, (uint64_t)&type metadata for ParticleAnchored.CodingKeys, (void (*)(void))sub_1B696DFB4);
}

uint64_t sub_1B696DD70(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(void), uint64_t a6, void (*a7)(void))
{
  sub_1B696DF54(0, a4, a5);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v12);
  id v14 = (char *)&v16 - v13;
  sub_1B62C14BC(a1, a1[3]);
  a7();
  sub_1B6E33A88();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

double sub_1B696DE98()
{
  sub_1B62D2B64();
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B6E77050;
  *(void *)(v0 + 32) = &type metadata for Anchored;
  *(void *)(v0 + 40) = &off_1F0FA2E10;
  return result;
}

ValueMetadata *type metadata accessor for Anchored()
{
  return &type metadata for Anchored;
}

ValueMetadata *type metadata accessor for ParticleAnchored()
{
  return &type metadata for ParticleAnchored;
}

unint64_t sub_1B696DF00()
{
  unint64_t result = qword_1E9DD2D78;
  if (!qword_1E9DD2D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2D78);
  }
  return result;
}

void sub_1B696DF54(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_1B6E33038();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1B696DFB4()
{
  unint64_t result = qword_1E9DD2D88;
  if (!qword_1E9DD2D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2D88);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleAnchored.CodingKeys()
{
  return &type metadata for ParticleAnchored.CodingKeys;
}

ValueMetadata *type metadata accessor for Anchored.CodingKeys()
{
  return &type metadata for Anchored.CodingKeys;
}

unint64_t sub_1B696E02C()
{
  unint64_t result = qword_1E9DD2D90;
  if (!qword_1E9DD2D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2D90);
  }
  return result;
}

unint64_t sub_1B696E084()
{
  unint64_t result = qword_1E9DD2D98;
  if (!qword_1E9DD2D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2D98);
  }
  return result;
}

unint64_t sub_1B696E0DC()
{
  unint64_t result = qword_1E9DD2DA0;
  if (!qword_1E9DD2DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2DA0);
  }
  return result;
}

unint64_t sub_1B696E134()
{
  unint64_t result = qword_1E9DD2DA8;
  if (!qword_1E9DD2DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2DA8);
  }
  return result;
}

__objc2_class *sub_1B696E188@<X0>(__objc2_class *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(v3 + 24)
    && (uint64_t v6 = (uint64_t)result,
        unint64_t result = (__objc2_class *)object_getClass(*(id *)(v3 + 24)),
        result == _TtC3VFX16CustomParameters))
  {
    sub_1B6B98418(v6, a2, (uint64_t)&v7);
    if (v8)
    {
      return (__objc2_class *)sub_1B62B57A8(&v7, (_OWORD *)a3);
    }
    else
    {
      *(void *)(a3 + 24) = MEMORY[0x1E4FBB550];
      *(void *)a3 = 0;
      return (__objc2_class *)sub_1B639560C((uint64_t)&v7, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8);
    }
  }
  else
  {
    *(void *)(a3 + 24) = MEMORY[0x1E4FBB550];
    *(void *)a3 = 0;
  }
  return result;
}

uint64_t sub_1B696E254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(v3 + 24);
  if (v6 && object_getClass(v6) == (Class)_TtC3VFX16CustomParameters)
  {
    swift_unknownObjectRetain();
    sub_1B6B98550(a2, a3, a1);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
}

uint64_t sub_1B696E2D4(uint64_t a1, char a2)
{
  return a2 & 1 | (a1 > 2020);
}

uint64_t sub_1B696E2E8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  if (qword_1E9DCC0D8 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1E9E48F20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1B68C75F8(v1, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B6712824);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6641860((unint64_t)v4);
  return v3;
}

uint64_t sub_1B696E3B8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(v4 + 88);
  uint64_t v10 = MEMORY[0x1BA9B34C0]();
  if (*(void *)(v9 + 16) && (uint64_t v12 = sub_1B62B2CE0(v10, v11), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(*(void *)(v9 + 56) + 8 * v12);
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1E9DCC0D8 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    unint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v14 = sub_1B6971778(v15, a1, a2, a3, a4);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1B696E4B4(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  uint64_t v4 = *(void **)(v3 + 24);
  if (!v4 || object_getClass(v4) != (Class)_TtC3VFX16CustomParameters) {
    return 0;
  }
  swift_unknownObjectRetain();
  uint64_t v9 = sub_1B6B98D5C(a1, a2, a3);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t *sub_1B696E534(uint64_t a1)
{
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v111 = qword_1EB997A18;
  int v112 = 0;
  char v113 = 2;
  uint64_t v114 = 0;
  char v115 = 2;
  uint64_t v116 = 0;
  swift_retain();
  sub_1B6A6EF08(2, (uint64_t)&v85);
  swift_release();
  uint64_t v105 = v85;
  int v106 = v86;
  char v107 = v87;
  uint64_t v108 = v88 | 1;
  char v109 = v89;
  uint64_t v110 = v90;
  sub_1B62C9DA8(a1, (uint64_t)&v105, 0x200000000, v91);
  sub_1B62D7A90((uint64_t)v91, (uint64_t)v92, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v92[0]) {
    return (uint64_t *)sub_1B62CA064((uint64_t)&v85);
  }
  long long v99 = v92[0];
  long long v100 = v92[1];
  uint64_t v101 = v93;
  if (v98 <= 0)
  {
    sub_1B62CA064((uint64_t)&v85);
    return sub_1B632F170(v91);
  }
  uint64_t v75 = v95;
  if (!v95)
  {
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_74:
    sub_1B62CA064((uint64_t)&v85);
    sub_1B632F170(v91);
    return sub_1B632F170(v91);
  }
  uint64_t v74 = v94;
  uint64_t v2 = v97[4];
  char v78 = *(unsigned char *)(v96 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  long long v82 = v97;
  uint64_t v71 = v97 + 8;
  uint64_t v72 = (uint64_t)(v97 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v73 = v2;
  while (1)
  {
    uint64_t v5 = (unsigned int *)(v74 + 48 * v3);
    uint64_t v6 = *v5;
    uint64_t v79 = v5[1];
    uint64_t v8 = (uint64_t *)*((void *)v5 + 2);
    uint64_t v7 = *((void *)v5 + 3);
    uint64_t v9 = *((void *)v5 + 4);
    uint64_t v10 = *((void *)v5 + 5);
    uint64_t v76 = v4;
    uint64_t v77 = v3;
    if (v78)
    {
      uint64_t v11 = *(os_unfair_lock_s **)(v10 + 376);
      swift_retain();
      os_unfair_lock_lock(v11);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v2);
    sub_1B62D7A90(v72, (uint64_t)v104, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
    uint64_t v12 = v82[4];
    uint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)(v10 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v82[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
    v82[7] = v13;
    v71[1] = 0;
    v71[2] = 0;
    *uint64_t v71 = 0;
    swift_release();
    uint64_t v14 = sub_1B62C9024((uint64_t)&type metadata for MaterialRuntime, (uint64_t)&off_1F0F68E78, v8, v7, v9, (uint64_t)v82);
    uint64_t v81 = v14;
    if (v8)
    {
      if (v9)
      {
        uint64_t v15 = 0;
        while (1)
        {
          uint64_t v16 = v8[v15];
          uint64_t v17 = *(void *)(v10 + 192);
          swift_retain();
          if (v17)
          {
            uint64_t v18 = *(void *)(v10 + 208);
            uint64_t v19 = 8 * (v16 >> 6);
            *(void *)(v17 + v19) |= 1 << v16;
            *(void *)(v18 + v19) &= ~(1 << v16);
          }
          if (*(unsigned char *)(*(void *)(v10 + 40) + 213) == 1)
          {
            uint64_t v20 = *(void *)(v10 + 48);
            uint64_t v21 = *(void *)(v20 + 16);
            if (v21)
            {
              uint64_t v22 = (uint64_t *)(v20 + 56);
              while ((ValueMetadata *)*(v22 - 3) != &type metadata for PropagateDirtiness)
              {
                v22 += 5;
                if (!--v21) {
                  goto LABEL_23;
                }
              }
              uint64_t v23 = *v22;
            }
            else
            {
LABEL_23:
              uint64_t v23 = 0;
            }
            uint64_t v24 = *(void *)(v10 + 128);
            char v25 = *(unsigned char *)(v10 + 184);
            uint64_t v26 = swift_retain();
            if (v25) {
              goto LABEL_76;
            }
            uint64_t v27 = v24 + v23;
            unsigned int v28 = *(_DWORD *)(*(void *)(v10 + 168) + 4 * v16);
            uint64_t v29 = (unsigned int *)(v27 + 8 * v16);
            uint64_t v30 = *(unsigned int *)(*(void *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v28 + 8);
            swift_release();
            uint64_t v32 = *v29;
            uint64_t v31 = v29[1];
            if (v32 == -1 && v31 == 0)
            {
              swift_release();
              uint64_t v14 = v81;
            }
            else
            {
              unsigned int v80 = v28;
              uint64_t v34 = v82[11];
              sub_1B6E33918();
              sub_1B6E33958();
              sub_1B6E33958();
              uint64_t v35 = sub_1B6E33988();
              uint64_t v36 = -1 << *(unsigned char *)(v34 + 32);
              unint64_t v37 = v35 & ~v36;
              if ((*(void *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37))
              {
                uint64_t v38 = ~v36;
                while (1)
                {
                  uint64_t v39 = *(void *)(v34 + 48) + 16 * v37;
                  int v41 = *(_DWORD *)(v39 + 8);
                  int v40 = *(_DWORD *)(v39 + 12);
                  if (v41 == v32 && v40 == v31) {
                    break;
                  }
                  unint64_t v37 = (v37 + 1) & v38;
                  if (((*(void *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v37) & 1) == 0) {
                    goto LABEL_37;
                  }
                }
                swift_release();
              }
              else
              {
LABEL_37:
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v83 = v82[11];
                v82[11] = 0x8000000000000000;
                sub_1B6397A60(v80 | (unint64_t)(v30 << 32), v32 | (v31 << 32), v37, isUniquelyReferenced_nonNull_native);
                v82[11] = v83;
                swift_release();
                swift_bridgeObjectRelease();
              }
              uint64_t v14 = v81;
            }
          }
          else
          {
            swift_release();
          }
          *(void *)(v14 + 248 * v15++ + 232) = 0;
          if (v15 == v9) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
    if (v6 != v79) {
      break;
    }
LABEL_42:
    v102[0] = v99;
    v102[1] = v100;
    uint64_t v103 = v101;
    uint64_t v4 = v76;
    sub_1B6345178(v82, (unsigned __int16 **)v102, (uint64_t)v104);
    sub_1B634507C((char *)v10);
    uint64_t v2 = v73;
    ecs_stack_allocator_pop_snapshot(v73);
    if (v78)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
    }
    swift_release();
    uint64_t v3 = v77 + 1;
    if (v77 + 1 == v75) {
      goto LABEL_74;
    }
  }
  while (1)
  {
    uint64_t v44 = *(void *)(v10 + 192);
    swift_retain();
    if (v44)
    {
      uint64_t v45 = *(void *)(v10 + 208);
      uint64_t v46 = 8 * (v6 >> 6);
      *(void *)(v44 + v46) |= 1 << v6;
      *(void *)(v45 + v46) &= ~(1 << v6);
    }
    if (*(unsigned char *)(*(void *)(v10 + 40) + 213) != 1) {
      goto LABEL_44;
    }
    uint64_t v47 = *(void *)(v10 + 48);
    uint64_t v48 = *(void *)(v47 + 16);
    if (v48)
    {
      uint64_t v49 = (uint64_t *)(v47 + 56);
      while ((ValueMetadata *)*(v49 - 3) != &type metadata for PropagateDirtiness)
      {
        v49 += 5;
        if (!--v48) {
          goto LABEL_53;
        }
      }
      uint64_t v50 = *v49;
    }
    else
    {
LABEL_53:
      uint64_t v50 = 0;
    }
    uint64_t v51 = *(void *)(v10 + 128);
    char v52 = *(unsigned char *)(v10 + 184);
    uint64_t v53 = swift_retain();
    if (v52) {
      break;
    }
    unsigned int v54 = *(_DWORD *)(*(void *)(v10 + 168) + 4 * v6);
    uint64_t v55 = (unsigned int *)(v51 + v50 + 8 * v6);
    uint64_t v56 = *(unsigned int *)(*(void *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v54 + 8);
    swift_release();
    uint64_t v58 = *v55;
    uint64_t v57 = v55[1];
    if (v58 == -1 && v57 == 0)
    {
LABEL_44:
      swift_release();
    }
    else
    {
      uint64_t v60 = v82[11];
      sub_1B6E33918();
      sub_1B6E33958();
      sub_1B6E33958();
      uint64_t v61 = sub_1B6E33988();
      uint64_t v62 = -1 << *(unsigned char *)(v60 + 32);
      unint64_t v63 = v61 & ~v62;
      if ((*(void *)(v60 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63))
      {
        uint64_t v64 = ~v62;
        while (1)
        {
          uint64_t v65 = *(void *)(v60 + 48) + 16 * v63;
          int v67 = *(_DWORD *)(v65 + 8);
          int v66 = *(_DWORD *)(v65 + 12);
          if (v67 == v58 && v66 == v57) {
            break;
          }
          unint64_t v63 = (v63 + 1) & v64;
          if (((*(void *)(v60 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v63) & 1) == 0) {
            goto LABEL_67;
          }
        }
        swift_release();
      }
      else
      {
LABEL_67:
        char v69 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v84 = v82[11];
        v82[11] = 0x8000000000000000;
        sub_1B6397A60(v54 | (unint64_t)(v56 << 32), v58 | (v57 << 32), v63, v69);
        v82[11] = v84;
        swift_release();
        swift_bridgeObjectRelease();
      }
      uint64_t v14 = v81;
    }
    *(void *)(v14 + 248 * v6++ + 232) = 0;
    if (v6 == v79) {
      goto LABEL_42;
    }
  }
LABEL_76:
  unint64_t result = (uint64_t *)sub_1B6E32BE8();
  __break(1u);
  return result;
}

void sub_1B696ED3C(void *a1@<X8>)
{
  *a1 = &unk_1F0FBADB8;
}

uint64_t sub_1B696ED4C()
{
  return sub_1B6E31BC8();
}

uint64_t sub_1B696EDAC()
{
  return sub_1B6E31B28();
}

uint64_t *sub_1B696EDFC@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_1B696EE14(void *a1@<X8>)
{
  *a1 = &unk_1F0FA6560;
}

uint64_t sub_1B696EE24()
{
  return sub_1B6E31BA8();
}

uint64_t sub_1B696EE84()
{
  return sub_1B6E31B08();
}

unint64_t sub_1B696EED4(char a1)
{
  unint64_t result = 1684957547;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x646F4D646E656C62;
      break;
    case 2:
      unint64_t result = 0x68536D6F74737563;
      break;
    case 3:
      unint64_t result = 0x6574656D61726170;
      break;
    case 4:
      unint64_t result = 0x65646F4D6C6C7563;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x6D6F436874706564;
      break;
    case 7:
      unint64_t result = 0x6972576874706564;
      break;
    case 8:
      unint64_t result = 0x66666F747563;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B696F00C(char a1)
{
  unint64_t result = 1684957547;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x646F4D646E656C62;
      break;
    case 2:
      unint64_t result = 0x68536D6F74737563;
      break;
    case 3:
      unint64_t result = 0x6574656D61726170;
      break;
    case 4:
      unint64_t result = 0x65646F4D6C6C7563;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x6D6F436874706564;
      break;
    case 7:
      unint64_t result = 0x6972576874706564;
      break;
    case 8:
      unint64_t result = 0x66666F747563;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B696F144(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BBA410(*a1, *a2);
}

uint64_t sub_1B696F150()
{
  return sub_1B6E33988();
}

uint64_t sub_1B696F198()
{
  return sub_1B69E91FC();
}

uint64_t sub_1B696F1A0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B696F1E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6971938();
  *a1 = result;
  return result;
}

unint64_t sub_1B696F214@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B696EED4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B696F240()
{
  return sub_1B696F00C(*v0);
}

uint64_t sub_1B696F248@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6971938();
  *a1 = result;
  return result;
}

void sub_1B696F270(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1B696F27C(uint64_t a1)
{
  unint64_t v2 = sub_1B69729E0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B696F2B8(uint64_t a1)
{
  unint64_t v2 = sub_1B69729E0();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B696F2F4(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6972A34(0, &qword_1E9DD2DD0, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)v13 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69729E0();
  sub_1B6E33A88();
  LOBYTE(v13[0]) = *(unsigned char *)v3;
  char v14 = 0;
  sub_1B66C5004();
  sub_1B6E32FA8();
  if (!v2)
  {
    sub_1B630C4C0(v3 + 40, (uint64_t)v15);
    sub_1B630C4C0((uint64_t)v15, (uint64_t)v13);
    char v14 = 1;
    sub_1B66C6810();
    sub_1B6E32FA8();
    LOBYTE(v13[0]) = 8;
    sub_1B6E32F78();
    v13[0] = *(void *)(v3 + 16);
    char v14 = 2;
    sub_1B6657A10();
    sub_1B6E32FA8();
    v13[0] = *(void *)(v3 + 80);
    char v14 = 4;
    type metadata accessor for MTLCullMode(0);
    sub_1B6971E64(&qword_1E9DCDE40, type metadata accessor for MTLCullMode);
    sub_1B6E32FA8();
    if (*(unsigned char *)(v3 + 53) == 1)
    {
      LOBYTE(v13[0]) = 5;
      sub_1B6E32F58();
      v13[0] = *(void *)(v3 + 56);
      char v14 = 6;
      type metadata accessor for MTLCompareFunction(0);
      sub_1B6971E64(&qword_1E9DCDE50, type metadata accessor for MTLCompareFunction);
      sub_1B6E32FA8();
      LOBYTE(v13[0]) = 7;
      sub_1B6E32F58();
    }
    uint64_t v12 = *(void *)(v3 + 24);
    if (v12)
    {
      v13[3] = swift_getObjectType();
      v13[0] = v12;
      char v14 = 3;
      sub_1B691370C();
      swift_unknownObjectRetain();
      sub_1B6E32FA8();
      sub_1B6913760((uint64_t)v13);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

unint64_t sub_1B696F6C4()
{
  uint64_t v1 = v0;
  sub_1B6E33918();
  sub_1B6E33958();
  sub_1B6E33958();
  unint64_t v2 = sub_1B6E33988() - 0x61C8864680B583EBLL;
  sub_1B630C4C0((uint64_t)(v1 + 10), (uint64_t)v14);
  sub_1B630C4C0((uint64_t)v14, (uint64_t)&v12);
  if (v13) {
    uint64_t v3 = v12 - 0x61C8864680B583EBLL;
  }
  else {
    uint64_t v3 = 0x9E3779B97F4A7C18;
  }
  unint64_t v4 = ((v2 >> 2) + (v2 << 6) + v3) ^ v2;
  if (v1[12] < 0.0) {
    unint64_t v5 = 0x9E3779B97F4A7C15;
  }
  else {
    unint64_t v5 = 0x9E3779B97F4A7C16;
  }
  unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2)) ^ v4;
  unint64_t v7 = (*(unsigned __int8 *)v1 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  if (*((unsigned char *)v1 + 53)) {
    unint64_t v8 = 0x9E3779B97F4A7C16;
  }
  else {
    unint64_t v8 = 0x9E3779B97F4A7C15;
  }
  unint64_t result = (v8 + (v7 << 6) + (v7 >> 2)) ^ v7;
  if (*((unsigned char *)v1 + 53))
  {
    if ((_BYTE)v1[16]) {
      unint64_t v11 = 0x9E3779B97F4A7C16;
    }
    else {
      unint64_t v11 = 0x9E3779B97F4A7C15;
    }
    unint64_t v10 = ((result << 6) - 0x61C8864680B583EBLL + (result >> 2) + *((void *)v1 + 7)) ^ result;
    return (v11 + (v10 << 6) + (v10 >> 2)) ^ v10;
  }
  return result;
}

__n128 sub_1B696F7F4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6971F5C(a1, v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 96) = v8;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B696F854(void *a1)
{
  return sub_1B696F2F4(a1);
}

uint64_t sub_1B696F8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8))(v3 + 16, 4, ObjectType, a2);
  uint64_t v8 = *(void *)(v3 + 32);
  if (*(void *)(v3 + 24))
  {
    uint64_t v9 = swift_getObjectType();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2, v9, v8);
    uint64_t result = swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)(v3 + 24) = v10;
  *(void *)(v3 + 32) = v8;
  return result;
}

double sub_1B696F950@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  uint64_t v2 = sub_1B62FFCAC(0);
  uint64_t v3 = sub_1B6335620(MEMORY[0x1E4FBC860]);
  *(unsigned char *)a1 = 2;
  *(void *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 48) = -1082130432;
  *(_WORD *)(a1 + 52) = 3;
  *(void *)(a1 + 56) = 7;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 72) = xmmword_1B6E77050;
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v5;
  return result;
}

uint64_t sub_1B696F9FC(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v251 = a3;
  v264 = a4;
  sub_1B62F9340(0, (unint64_t *)&qword_1EB97D688, (uint64_t (*)(uint64_t))sub_1B6971BE0, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8, v11);
  char v13 = &v243[-v12];
  sub_1B6971BE0();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v17);
  uint64_t v19 = &v243[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = *(unsigned char **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v20)
  {
    return swift_release();
  }
  if ((*(unsigned char *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) & 1) != 0
    || (v20[537] & 1) != 0
    || (v20[539] & 1) != 0)
  {
    int v21 = 1;
  }
  else
  {
    int v21 = v20[540];
  }
  LODWORD(v261) = v21;
  int v22 = *a2;
  unint64_t v265 = a1;
  v262 = (void *)a6;
  v249 = v20;
  if (v22)
  {
    if (v22 == 1)
    {
      type metadata accessor for RenderPipelineFactory();
      swift_allocObject();
      swift_retain();
      uint64_t v23 = sub_1B62FFCAC(196);
      *(void *)(v23 + 88) = sub_1B6D28CFC;
      *(void *)(v23 + 96) = 0;
      swift_release();
      swift_release();
      *((void *)a2 + 1) = v23;
      uint64_t v24 = *((void *)a2 + 3);
      if (v24)
      {
        uint64_t v25 = *((void *)a2 + 4);
        if (object_getClass(*((id *)a2 + 3)) == (Class)_TtC3VFX16PrelitParameters) {
          goto LABEL_70;
        }
      }
      type metadata accessor for PrelitParameters();
      uint64_t v36 = swift_allocObject();
      *(void *)&long long v37 = 0xFFFFFFFFLL;
      *((void *)&v37 + 1) = 0xFFFFFFFFLL;
      *(_OWORD *)(v36 + 16) = v37;
      *(unsigned char *)(v36 + 32) = 0;
      swift_unknownObjectRelease();
      uint64_t v38 = (unint64_t *)&unk_1E9DD2DB8;
      uint64_t v39 = type metadata accessor for PrelitParameters;
LABEL_34:
      uint64_t v25 = sub_1B6971E64(v38, (void (*)(uint64_t))v39);
      *((void *)a2 + 3) = v36;
      *((void *)a2 + 4) = v25;
      Class = (__objc2_class *)object_getClass((id)v36);
      if (!v36 || Class != _TtC3VFX16CustomParameters)
      {
LABEL_68:
        uint64_t v62 = sub_1B6335620(MEMORY[0x1E4FBC860]);
        uint64_t v64 = v65;
        goto LABEL_69;
      }
LABEL_67:
      swift_unknownObjectRetain();
      uint64_t v62 = sub_1B6B98A6C();
      uint64_t v64 = v63;
      swift_release();
LABEL_69:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *((void *)a2 + 11) = v62;
      *((void *)a2 + 12) = v64;
      uint64_t v24 = v36;
      goto LABEL_70;
    }
    sub_1B695F7D0(*((void *)a2 + 2), (uint64_t)v13);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) == 1)
    {
      swift_retain();
      sub_1B6971C40((uint64_t)v13);
LABEL_63:
      uint64_t v24 = *((void *)a2 + 3);
      if (!v24
        || (uint64_t v25 = *((void *)a2 + 4),
            object_getClass(*((id *)a2 + 3)) != (Class)_TtC3VFX16CustomParameters))
      {
        type metadata accessor for CustomParameters();
        uint64_t v36 = swift_allocObject();
        uint64_t v60 = MEMORY[0x1E4FBC860];
        *(void *)(v36 + 16) = MEMORY[0x1E4FBC860];
        *(void *)(v36 + 24) = v60;
        *(void *)(v36 + 32) = v60;
        swift_unknownObjectRelease();
        uint64_t v25 = sub_1B6971E64(&qword_1E9DD2DB0, (void (*)(uint64_t))type metadata accessor for CustomParameters);
        *((void *)a2 + 3) = v36;
        *((void *)a2 + 4) = v25;
        uint64_t v61 = (__objc2_class *)object_getClass((id)v36);
        if (!v36 || v61 != _TtC3VFX16CustomParameters) {
          goto LABEL_68;
        }
        goto LABEL_67;
      }
      goto LABEL_70;
    }
    sub_1B6971CCC((uint64_t)v13, (uint64_t)v19);
    unint64_t v28 = *(void *)&v19[*(int *)(v15 + 44)];
    if (!v28)
    {
      swift_retain();
      sub_1B6971D30((uint64_t)v19);
LABEL_62:
      a1 = v265;
      goto LABEL_63;
    }
    type metadata accessor for RenderPipelineFactory();
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1B62FFCAC(128);
    uint64_t v30 = v29;
    __int16 v31 = *(_WORD *)(v29 + 80);
    if ((v31 & 8) == 0) {
      *(_WORD *)(v29 + 80) = v31 | 8;
    }
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_1B6E32C18();
      v246 = a2;
      if (v32)
      {
LABEL_24:
        uint64_t v245 = a5;
        uint64_t v33 = 0;
        unint64_t v34 = v28 & 0xC000000000000001;
        while (1)
        {
          if (v34)
          {
            uint64_t v35 = (void *)MEMORY[0x1BA9B4580](v33, v28);
          }
          else
          {
            uint64_t v35 = *(void **)(v28 + 8 * v33 + 32);
            swift_unknownObjectRetain();
          }
          if (objc_msgSend(v35, sel_functionType) == (id)1) {
            break;
          }
          swift_unknownObjectRelease();
          if (v32 == ++v33)
          {
            swift_bridgeObjectRelease();
            uint64_t v266 = 0xD000000000000010;
            unint64_t v263 = 0x80000001B6F3F290;
            goto LABEL_40;
          }
        }
        swift_bridgeObjectRelease();
        id v41 = objc_msgSend(v35, sel_name);
        uint64_t v266 = sub_1B6E31798();
        unint64_t v263 = v42;
        swift_unknownObjectRelease();

        __int16 v43 = *(_WORD *)(v30 + 80);
        if ((v43 & 0x20) == 0) {
          *(_WORD *)(v30 + 80) = v43 | 0x20;
        }
LABEL_40:
        swift_bridgeObjectRetain();
        uint64_t v44 = 0;
        while (1)
        {
          if (v34)
          {
            uint64_t v45 = (void *)MEMORY[0x1BA9B4580](v44, v28);
          }
          else
          {
            uint64_t v45 = *(void **)(v28 + 8 * v44 + 32);
            swift_unknownObjectRetain();
          }
          if (objc_msgSend(v45, sel_functionType) == (id)2) {
            break;
          }
          swift_unknownObjectRelease();
          if (v32 == ++v44)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v46 = 0xD000000000000015;
            unint64_t v47 = 0x80000001B6F3F2B0;
            a5 = v245;
            goto LABEL_51;
          }
        }
        swift_bridgeObjectRelease_n();
        id v48 = objc_msgSend(v45, sel_name);
        uint64_t v46 = sub_1B6E31798();
        unint64_t v47 = v49;
        swift_unknownObjectRelease();

        __int16 v50 = *(_WORD *)(v30 + 80);
        a5 = v245;
        if ((v50 & 0x10) == 0) {
          *(_WORD *)(v30 + 80) = v50 | 0x10;
        }
LABEL_51:
        uint64_t v51 = *(void *)&v19[*(int *)(v15 + 36)];
        if (!v51)
        {
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          uint64_t v55 = 0;
LABEL_61:
          sub_1B6971D30((uint64_t)v19);
          uint64_t v57 = swift_allocObject();
          unint64_t v58 = v263;
          *(void *)(v57 + 16) = v266;
          *(void *)(v57 + 24) = v58;
          *(void *)(v57 + 32) = 0;
          *(void *)(v57 + 40) = v53;
          uint64_t v59 = MEMORY[0x1E4FBC860];
          *(void *)(v57 + 48) = MEMORY[0x1E4FBC860];
          *(void *)(v57 + 56) = v46;
          *(void *)(v57 + 64) = v47;
          *(void *)(v57 + 72) = 0;
          *(void *)(v57 + 80) = v54;
          *(void *)(v57 + 88) = v59;
          *(_OWORD *)(v57 + 96) = 0u;
          *(_OWORD *)(v57 + 112) = 0u;
          *(_OWORD *)(v57 + 128) = 0u;
          *(_OWORD *)(v57 + 144) = 0u;
          *(_OWORD *)(v57 + 160) = 0u;
          *(void *)(v57 + 176) = v55;
          *(void *)(v57 + 184) = 0;
          *(void *)(v30 + 88) = sub_1B6971E5C;
          *(void *)(v30 + 96) = v57;
          swift_release();
          a2 = v246;
          swift_release();
          *((void *)a2 + 1) = v30;
          goto LABEL_62;
        }
        uint64_t v260 = v46;
        __int16 v52 = *(_WORD *)(v30 + 80);
        if ((v52 & 0x20) != 0)
        {
          uint64_t v53 = *(void *)(v51 + 72);
          swift_unknownObjectRetain();
          if ((v52 & 0x10) != 0) {
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v53 = 0;
          if ((v52 & 0x10) != 0)
          {
LABEL_54:
            uint64_t v54 = *(void *)(v51 + 72);
            swift_unknownObjectRetain();
LABEL_58:
            uint64_t v56 = qword_1EB97D6B8;
            swift_retain();
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            if (v56 != -1) {
              swift_once();
            }
            uint64_t v55 = qword_1EB97EB60;
            swift_bridgeObjectRetain();
            swift_release();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v46 = v260;
            goto LABEL_61;
          }
        }
        uint64_t v54 = 0;
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v32 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v246 = a2;
      if (v32) {
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v266 = 0xD000000000000010;
    uint64_t v46 = 0xD000000000000015;
    unint64_t v47 = 0x80000001B6F3F2B0;
    unint64_t v263 = 0x80000001B6F3F290;
    goto LABEL_51;
  }
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  swift_retain();
  uint64_t v27 = sub_1B62FFCAC(140);
  *(void *)(v27 + 88) = sub_1B6D2EFB4;
  *(void *)(v27 + 96) = 0;
  swift_release();
  swift_release();
  *((void *)a2 + 1) = v27;
  uint64_t v24 = *((void *)a2 + 3);
  if (!v24
    || (uint64_t v25 = *((void *)a2 + 4), object_getClass(*((id *)a2 + 3)) != (Class)_TtC3VFX13PBRParameters))
  {
    type metadata accessor for PBRParameters();
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1B6E781D0;
    *(void *)(v36 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 40) = 16777473;
    *(unsigned char *)(v36 + 44) = 1;
    *(_OWORD *)(v36 + 48) = xmmword_1B6E4F490;
    *(void *)(v36 + 64) = 0;
    *(void *)(v36 + 72) = 0;
    *(void *)(v36 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 88) = 16777473;
    *(unsigned char *)(v36 + 92) = 1;
    *(_OWORD *)(v36 + 96) = xmmword_1B6E4F490;
    *(void *)(v36 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 120) = 16777473;
    *(unsigned char *)(v36 + 124) = 1;
    *(_DWORD *)(v36 + 128) = 1056964608;
    *(_OWORD *)(v36 + 144) = xmmword_1B6E4F490;
    *(void *)(v36 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 168) = 16777473;
    *(unsigned char *)(v36 + 172) = 1;
    *(_DWORD *)(v36 + 176) = 0;
    *(_OWORD *)(v36 + 192) = xmmword_1B6E4F490;
    *(void *)(v36 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 216) = 16777473;
    *(unsigned char *)(v36 + 220) = 1;
    *(_DWORD *)(v36 + 224) = 1065353216;
    *(_OWORD *)(v36 + 240) = xmmword_1B6E4F490;
    *(void *)(v36 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 264) = 16777473;
    *(unsigned char *)(v36 + 268) = 1;
    *(_DWORD *)(v36 + 272) = 1065353216;
    *(_OWORD *)(v36 + 288) = xmmword_1B6E4F490;
    *(_WORD *)(v36 + 304) = 0;
    swift_unknownObjectRelease();
    uint64_t v38 = (unint64_t *)&qword_1E9DD2DC0;
    uint64_t v39 = type metadata accessor for PBRParameters;
    goto LABEL_34;
  }
LABEL_70:
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v68 = *((void *)a2 + 1);
  int v69 = *((_DWORD *)a2 + 10);
  unsigned __int8 v70 = a2[44];
  int v71 = *((_DWORD *)a2 + 12);
  unsigned __int8 v72 = a2[52];
  unsigned __int8 v73 = a2[53];
  uint64_t v74 = *((void *)a2 + 7);
  unsigned __int8 v75 = a2[64];
  v308[0] = *a2;
  int v67 = v308[0];
  uint64_t v309 = v68;
  uint64_t v310 = *((void *)a2 + 2);
  uint64_t v311 = v24;
  uint64_t v312 = v25;
  int v313 = v69;
  unsigned __int8 v314 = v70;
  int v315 = v71;
  unsigned __int8 v316 = v72;
  unsigned __int8 v317 = v73;
  uint64_t v318 = v74;
  unsigned __int8 v319 = v75;
  long long v320 = *(_OWORD *)(a2 + 72);
  long long v321 = *(_OWORD *)(a2 + 88);
  uint64_t v76 = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 32))(v308, ObjectType, v25);
  BOOL v77 = v67 == 2;
  swift_bridgeObjectRetain();
  char v78 = v76;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v78 = sub_1B62D96F4(0, v76[2] + 1, 1, v76);
  }
  uint64_t v266 = HIDWORD(a1);
  unint64_t v80 = v78[2];
  unint64_t v79 = v78[3];
  if (v80 >= v79 >> 1) {
    char v78 = sub_1B62D96F4(v79 > 1, v80 + 1, 1, v78);
  }
  v78[2] = v80 + 1;
  uint64_t v81 = &v78[14 * v80];
  *((_OWORD *)v81 + 2) = xmmword_1B6E96390;
  *((unsigned char *)v81 + 48) = 0;
  v81[8] = v77;
  *(_OWORD *)(v81 + 9) = 0u;
  *(_OWORD *)(v81 + 11) = 0u;
  *(_OWORD *)(v81 + 13) = 0u;
  v81[15] = 0;
  *((unsigned char *)v81 + 128) = 13;
  swift_bridgeObjectRelease();
  uint64_t v82 = v251;
  long long v83 = *(_OWORD *)(v251 + 208);
  v267[12] = *(_OWORD *)(v251 + 192);
  v267[13] = v83;
  v267[14] = *(_OWORD *)(v251 + 224);
  uint64_t v268 = *(void *)(v251 + 240);
  long long v84 = *(_OWORD *)(v251 + 144);
  v267[8] = *(_OWORD *)(v251 + 128);
  v267[9] = v84;
  long long v85 = *(_OWORD *)(v251 + 176);
  v267[10] = *(_OWORD *)(v251 + 160);
  v267[11] = v85;
  long long v86 = *(_OWORD *)(v251 + 80);
  v267[4] = *(_OWORD *)(v251 + 64);
  v267[5] = v86;
  long long v87 = *(_OWORD *)(v251 + 112);
  v267[6] = *(_OWORD *)(v251 + 96);
  v267[7] = v87;
  long long v88 = *(_OWORD *)(v251 + 16);
  v267[0] = *(_OWORD *)v251;
  v267[1] = v88;
  long long v89 = *(_OWORD *)(v251 + 48);
  v267[2] = *(_OWORD *)(v251 + 32);
  v267[3] = v89;
  sub_1B63427E4((uint64_t)v267);
  uint64_t v90 = MEMORY[0x1E4FBC860];
  v91 = sub_1B6303E64(MEMORY[0x1E4FBC860]);
  v92 = sub_1B6303CBC(v90);
  *(void *)uint64_t v82 = v91;
  *(void *)(v82 + 8) = v92;
  *(void *)(v82 + 16) = 0;
  *(void *)(v82 + 24) = 0;
  *(void *)(v82 + 32) = v90;
  *(void *)(v82 + 40) = v90;
  *(void *)(v82 + 48) = v90;
  *(void *)(v82 + 56) = v90;
  *(void *)(v82 + 64) = v90;
  *(void *)(v82 + 72) = v90;
  *(void *)(v82 + 80) = v90;
  *(void *)(v82 + 88) = v90;
  *(void *)(v82 + 96) = v90;
  *(void *)(v82 + 104) = v90;
  *(void *)(v82 + 112) = v90;
  *(void *)(v82 + 120) = v90;
  *(_DWORD *)(v82 + 128) = 0;
  *(void *)(v82 + 136) = v90;
  *(_OWORD *)(v82 + 176) = 0u;
  *(_OWORD *)(v82 + 192) = 0u;
  *(_OWORD *)(v82 + 144) = 0u;
  *(_OWORD *)(v82 + 160) = 0u;
  *(_OWORD *)(v82 + 208) = xmmword_1B6E77050;
  *(_DWORD *)(v82 + 224) = 0;
  *(void *)(v82 + 232) = 0;
  *(void *)(v82 + 240) = 0;
  uint64_t v93 = sub_1B6358600(a1, a5);
  unint64_t v263 = 0;
  if (v93) {
    uint64_t v90 = v93;
  }
  swift_retain();
  v248 = v78;
  int v94 = sub_1B630A1B0((uint64_t)a2, v82, v90, (uint64_t)v78, v264, a5, (uint64_t)v262, (char)v261);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v95 = v250;
  long long v96 = *(_OWORD *)(v250 + 112);
  v306[0] = *(_OWORD *)(v250 + 96);
  v306[1] = v96;
  uint64_t v307 = *(void *)(v250 + 128);
  uint64_t v247 = OBJC_IVAR____TtC3VFX13EntityManager_queryManager;
  sub_1B62C9DA8(a5, (uint64_t)v306, 0x200000000, v269);
  sub_1B62D7A90((uint64_t)v269, (uint64_t)v281, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v281[0])
  {
LABEL_139:
    long long v162 = *(_OWORD *)(v95 + 152);
    v303[0] = *(_OWORD *)(v95 + 136);
    v303[1] = v162;
    uint64_t v304 = *(void *)(v95 + 168);
    sub_1B62C9DA8(a5, (uint64_t)v303, 0x200000000, v270);
    sub_1B62D7A90((uint64_t)v270, (uint64_t)v271, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (*(void *)&v271[0])
    {
      long long v278 = v271[0];
      long long v279 = v271[1];
      uint64_t v280 = v272;
      if (v277 >= 1 && (uint64_t v257 = v274) != 0)
      {
        int v244 = v94;
        uint64_t v245 = a5;
        v246 = a2;
        uint64_t v256 = v273;
        uint64_t v163 = v276[4];
        int v164 = *(unsigned __int8 *)(v275 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v261 = v276;
        v262 = v276 + 11;
        v252 = v276 + 8;
        v253 = v276 + 6;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v165 = 0;
        unint64_t v166 = v265;
        int v254 = v164;
        uint64_t v255 = v163;
        do
        {
          v167 = (unsigned int *)(v256 + 48 * v165);
          uint64_t v169 = *v167;
          uint64_t v168 = v167[1];
          v264 = (uint64_t *)*((void *)v167 + 2);
          uint64_t v170 = *((void *)v167 + 3);
          uint64_t v171 = *((void *)v167 + 4);
          uint64_t v172 = *((void *)v167 + 5);
          uint64_t v260 = v165;
          uint64_t v258 = v168;
          uint64_t v259 = v170;
          if (v164)
          {
            v173 = *(os_unfair_lock_s **)(v172 + 376);
            swift_retain();
            os_unfair_lock_lock(v173);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v172 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v163);
          sub_1B62D7A90((uint64_t)v253, (uint64_t)v302, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v174 = v261;
          uint64_t v175 = v261[4];
          uint64_t v176 = *(void *)(*(void *)(*(void *)(*(void *)(v172 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v174[6] = ecs_stack_allocator_allocate(v175, 48 * v176, 8);
          v174[7] = v176;
          v177 = v252;
          v252[1] = 0;
          v177[2] = 0;
          void *v177 = 0;
          swift_release();
          v178 = v264;
          uint64_t v179 = sub_1B62C9024((uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1F0F81D50, v264, v259, v171, (uint64_t)v174);
          if (v178)
          {
            int v180 = v266;
            if (v171)
            {
              for (uint64_t i = 0; i != v171; ++i)
              {
                uint64_t v182 = v179 + 144 * i;
                int v184 = *(_DWORD *)(v182 + 28);
                int v183 = *(_DWORD *)(v182 + 32);
                if (v184 == v166 && v183 == v180)
                {
                  uint64_t v186 = v264[i];
                  uint64_t v187 = *(void *)(v172 + 192);
                  swift_retain();
                  if (v187)
                  {
                    uint64_t v188 = *(void *)(v172 + 208);
                    uint64_t v189 = 8 * (v186 >> 6);
                    *(void *)(v187 + v189) |= 1 << v186;
                    *(void *)(v188 + v189) &= ~(1 << v186);
                  }
                  if (*(unsigned char *)(*(void *)(v172 + 40) + 213) == 1)
                  {
                    uint64_t v190 = *(void *)(v172 + 48);
                    uint64_t v191 = *(void *)(v190 + 16);
                    if (v191)
                    {
                      v192 = (uint64_t *)(v190 + 56);
                      while ((ValueMetadata *)*(v192 - 3) != &type metadata for PropagateDirtiness)
                      {
                        v192 += 5;
                        if (!--v191) {
                          goto LABEL_165;
                        }
                      }
                      uint64_t v193 = *v192;
                    }
                    else
                    {
LABEL_165:
                      uint64_t v193 = 0;
                    }
                    uint64_t v194 = *(void *)(v172 + 128);
                    char v195 = *(unsigned char *)(v172 + 184);
                    uint64_t v196 = swift_retain();
                    if (v195) {
                      goto LABEL_219;
                    }
                    uint64_t v197 = v194 + v193;
                    unsigned int v198 = *(_DWORD *)(*(void *)(v172 + 168) + 4 * v186);
                    v199 = (unsigned int *)(v197 + 8 * v186);
                    uint64_t v200 = *(unsigned int *)(*(void *)(v196 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v198
                                           + 8);
                    swift_release();
                    uint64_t v201 = *v199;
                    uint64_t v202 = v199[1];
                    if (v201 != -1 || v202 != 0) {
                      sub_1B6398CA0(&v295, v198 | (unint64_t)(v200 << 32), v201 | (v202 << 32));
                    }
                    swift_release();
                    unint64_t v166 = v265;
                  }
                  else
                  {
                    swift_release();
                  }
                  int v180 = v266;
                }
              }
            }
          }
          else
          {
            uint64_t v204 = v258;
            int v205 = v266;
            if (v169 != v258)
            {
              do
              {
                uint64_t v207 = v179 + 144 * v169;
                int v209 = *(_DWORD *)(v207 + 28);
                int v208 = *(_DWORD *)(v207 + 32);
                if (v209 == v166 && v208 == v205)
                {
                  uint64_t v211 = *(void *)(v172 + 192);
                  swift_retain();
                  if (v211)
                  {
                    uint64_t v212 = *(void *)(v172 + 208);
                    uint64_t v213 = 8 * (v169 >> 6);
                    *(void *)(v211 + v213) |= 1 << v169;
                    *(void *)(v212 + v213) &= ~(1 << v169);
                  }
                  if (*(unsigned char *)(*(void *)(v172 + 40) + 213) == 1)
                  {
                    uint64_t v214 = *(void *)(v172 + 48);
                    uint64_t v215 = *(void *)(v214 + 16);
                    if (v215)
                    {
                      v216 = (uint64_t *)(v214 + 56);
                      while ((ValueMetadata *)*(v216 - 3) != &type metadata for PropagateDirtiness)
                      {
                        v216 += 5;
                        if (!--v215) {
                          goto LABEL_191;
                        }
                      }
                      uint64_t v217 = *v216;
                    }
                    else
                    {
LABEL_191:
                      uint64_t v217 = 0;
                    }
                    uint64_t v218 = *(void *)(v172 + 128);
                    char v219 = *(unsigned char *)(v172 + 184);
                    uint64_t v220 = swift_retain();
                    if (v219) {
                      goto LABEL_219;
                    }
                    uint64_t v221 = v218 + v217;
                    unsigned int v222 = *(_DWORD *)(*(void *)(v172 + 168) + 4 * v169);
                    v223 = (unsigned int *)(v221 + 8 * v169);
                    uint64_t v224 = *(unsigned int *)(*(void *)(v220 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v222
                                           + 8);
                    swift_release();
                    uint64_t v225 = *v223;
                    uint64_t v226 = v223[1];
                    if (v225 != -1 || v226 != 0) {
                      sub_1B6398CA0(&v295, v222 | (unint64_t)(v224 << 32), v225 | (v226 << 32));
                    }
                    swift_release();
                    unint64_t v166 = v265;
                    int v205 = v266;
                  }
                  else
                  {
                    swift_release();
                  }
                }
                ++v169;
              }
              while (v169 != v204);
            }
          }
          v293[0] = v278;
          v293[1] = v279;
          uint64_t v294 = v280;
          unint64_t v206 = v263;
          sub_1B6345178(v261, (unsigned __int16 **)v293, (uint64_t)v302);
          unint64_t v263 = v206;
          sub_1B634507C((char *)v172);
          uint64_t v163 = v255;
          ecs_stack_allocator_pop_snapshot(v255);
          int v164 = v254;
          if (v254)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v172 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v172 + 376));
          }
          swift_release();
          uint64_t v165 = v260 + 1;
        }
        while (v260 + 1 != v257);
        sub_1B632F170(v270);
        a5 = v245;
        a2 = v246;
        LOBYTE(v94) = v244;
      }
      else
      {
        unint64_t v166 = v265;
      }
      sub_1B632F170(v270);
      if ((v94 & 1) == 0) {
        goto LABEL_205;
      }
    }
    else
    {
      unint64_t v166 = v265;
      if ((v94 & 1) == 0)
      {
LABEL_205:
        if ((v94 & 4) == 0)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return swift_release();
        }
        long long v228 = *((_OWORD *)a2 + 5);
        long long v299 = *((_OWORD *)a2 + 4);
        long long v300 = v228;
        uint64_t v301 = *((void *)a2 + 12);
        long long v229 = *((_OWORD *)a2 + 1);
        long long v295 = *(_OWORD *)a2;
        long long v296 = v229;
        long long v230 = *((_OWORD *)a2 + 3);
        long long v297 = *((_OWORD *)a2 + 2);
        long long v298 = v230;
        v231 = (void *)*((void *)&v296 + 1);
        unint64_t v232 = sub_1B696F6C4();
        uint64_t v233 = v251;
        *(void *)(v251 + 232) = v232;
        sub_1B6971B8C();
        uint64_t v234 = sub_1B6E31D38();
        swift_bridgeObjectRelease();
        *(void *)(v233 + 240) = v234;
        if (v231 && object_getClass(v231) == (Class)_TtC3VFX16CustomParameters)
        {
          swift_unknownObjectRetain();
          uint64_t v235 = swift_bridgeObjectRetain();
          char v236 = sub_1B6B98ED8(v235);
          swift_bridgeObjectRelease();
          if (v236)
          {
            uint64_t v237 = a5 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
            uint64_t v238 = type metadata accessor for ScriptingConfiguration();
            ++*(void *)(v237 + *(int *)(v238 + 36));
          }
          swift_unknownObjectRelease();
        }
        if (sub_1B62EC0CC((uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1F0F58BA8, v166))
        {
          uint64_t v322 = v301;
          v323[0] = *((void *)&v300 + 1);
          if (v231 && object_getClass(v231) == (Class)_TtC3VFX16CustomParameters)
          {
            swift_unknownObjectRetain();
            uint64_t v239 = sub_1B6B98A6C();
            uint64_t v241 = v242;
            swift_unknownObjectRelease();
          }
          else
          {
            uint64_t v239 = sub_1B6335620(MEMORY[0x1E4FBC860]);
            uint64_t v241 = v240;
          }
          sub_1B62D8C3C((uint64_t)v323);
          sub_1B62D8C3C((uint64_t)&v322);
          *((void *)a2 + 11) = v239;
          *((void *)a2 + 12) = v241;
          swift_retain();
          sub_1B6A61140(0, a5, a5, v166, (uint64_t)a2);
        }
LABEL_218:
        swift_release();
        return swift_release();
      }
    }
    swift_bridgeObjectRelease();
    sub_1B63BAF34(v166);
    goto LABEL_218;
  }
  long long v288 = v281[0];
  long long v289 = v281[1];
  uint64_t v290 = v282;
  if (v287 < 1 || (uint64_t v257 = v284) == 0)
  {
LABEL_138:
    sub_1B632F170(v269);
    goto LABEL_139;
  }
  int v244 = v94;
  uint64_t v245 = a5;
  v246 = a2;
  uint64_t v256 = v283;
  uint64_t v97 = v286[4];
  int v98 = *(unsigned __int8 *)(v285 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v261 = v286;
  v262 = v286 + 11;
  v252 = v286 + 8;
  v253 = v286 + 6;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v99 = 0;
  int v100 = v265;
  int v254 = v98;
  uint64_t v255 = v97;
  while (1)
  {
    uint64_t v101 = (unsigned int *)(v256 + 48 * v99);
    uint64_t v103 = *v101;
    uint64_t v102 = v101[1];
    v264 = (uint64_t *)*((void *)v101 + 2);
    uint64_t v104 = *((void *)v101 + 3);
    uint64_t v105 = *((void *)v101 + 4);
    uint64_t v106 = *((void *)v101 + 5);
    uint64_t v260 = v99;
    uint64_t v258 = v102;
    uint64_t v259 = v104;
    if (v98)
    {
      char v107 = *(os_unfair_lock_s **)(v106 + 376);
      swift_retain();
      os_unfair_lock_lock(v107);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v106 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v97);
    sub_1B62D7A90((uint64_t)v253, (uint64_t)v305, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
    uint64_t v108 = v261;
    uint64_t v109 = v261[4];
    uint64_t v110 = *(void *)(*(void *)(*(void *)(*(void *)(v106 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v108[6] = ecs_stack_allocator_allocate(v109, 48 * v110, 8);
    v108[7] = v110;
    uint64_t v111 = v252;
    v252[1] = 0;
    v111[2] = 0;
    *uint64_t v111 = 0;
    swift_release();
    int v112 = v264;
    uint64_t v113 = sub_1B62C9024((uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1F0F818E0, v264, v259, v105, (uint64_t)v108);
    if (v112)
    {
      int v114 = v266;
      if (v105)
      {
        uint64_t v115 = 0;
        while (1)
        {
          uint64_t v116 = v113 + 40 * v115;
          int v118 = *(_DWORD *)(v116 + 8);
          int v117 = *(_DWORD *)(v116 + 12);
          if (v118 == v100 && v117 == v114)
          {
            uint64_t v120 = v264[v115];
            uint64_t v121 = *(void *)(v106 + 192);
            swift_retain();
            if (v121)
            {
              uint64_t v122 = *(void *)(v106 + 208);
              uint64_t v123 = 8 * (v120 >> 6);
              *(void *)(v121 + v123) |= 1 << v120;
              *(void *)(v122 + v123) &= ~(1 << v120);
            }
            if (*(unsigned char *)(*(void *)(v106 + 40) + 213) == 1)
            {
              uint64_t v124 = *(void *)(v106 + 48);
              uint64_t v125 = *(void *)(v124 + 16);
              if (v125)
              {
                v126 = (uint64_t *)(v124 + 56);
                while ((ValueMetadata *)*(v126 - 3) != &type metadata for PropagateDirtiness)
                {
                  v126 += 5;
                  if (!--v125) {
                    goto LABEL_102;
                  }
                }
                uint64_t v127 = *v126;
              }
              else
              {
LABEL_102:
                uint64_t v127 = 0;
              }
              uint64_t v128 = *(void *)(v106 + 128);
              char v129 = *(unsigned char *)(v106 + 184);
              uint64_t v130 = swift_retain();
              if (v129) {
                goto LABEL_219;
              }
              uint64_t v131 = v128 + v127;
              unsigned int v132 = *(_DWORD *)(*(void *)(v106 + 168) + 4 * v120);
              v133 = (unsigned int *)(v131 + 8 * v120);
              uint64_t v134 = *(unsigned int *)(*(void *)(v130 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                     + 12 * (int)v132
                                     + 8);
              swift_release();
              uint64_t v135 = *v133;
              uint64_t v136 = v133[1];
              if (v135 != -1 || v136 != 0) {
                sub_1B6398CA0(&v295, v132 | (unint64_t)(v134 << 32), v135 | (v136 << 32));
              }
              swift_release();
              int v100 = v265;
            }
            else
            {
              swift_release();
            }
            int v114 = v266;
          }
          if (++v115 == v105) {
            goto LABEL_112;
          }
        }
      }
      goto LABEL_112;
    }
    uint64_t v138 = v258;
    int v139 = v266;
    if (v103 != v258) {
      break;
    }
LABEL_112:
    v291[0] = v288;
    v291[1] = v289;
    uint64_t v292 = v290;
    unint64_t v140 = v263;
    sub_1B6345178(v261, (unsigned __int16 **)v291, (uint64_t)v305);
    unint64_t v263 = v140;
    sub_1B634507C((char *)v106);
    uint64_t v97 = v255;
    ecs_stack_allocator_pop_snapshot(v255);
    int v98 = v254;
    if (v254)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v106 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v106 + 376));
    }
    swift_release();
    uint64_t v99 = v260 + 1;
    if (v260 + 1 == v257)
    {
      sub_1B632F170(v269);
      a5 = v245;
      a2 = v246;
      uint64_t v95 = v250;
      int v94 = v244;
      goto LABEL_138;
    }
  }
  while (1)
  {
    uint64_t v141 = v113 + 40 * v103;
    int v143 = *(_DWORD *)(v141 + 8);
    int v142 = *(_DWORD *)(v141 + 12);
    if (v143 != v100 || v142 != v139) {
      goto LABEL_115;
    }
    uint64_t v145 = *(void *)(v106 + 192);
    swift_retain();
    if (v145)
    {
      uint64_t v146 = *(void *)(v106 + 208);
      uint64_t v147 = 8 * (v103 >> 6);
      *(void *)(v145 + v147) |= 1 << v103;
      *(void *)(v146 + v147) &= ~(1 << v103);
    }
    if (*(unsigned char *)(*(void *)(v106 + 40) + 213) == 1) {
      break;
    }
    swift_release();
LABEL_115:
    if (++v103 == v138) {
      goto LABEL_112;
    }
  }
  uint64_t v148 = *(void *)(v106 + 48);
  uint64_t v149 = *(void *)(v148 + 16);
  if (v149)
  {
    v150 = (uint64_t *)(v148 + 56);
    while ((ValueMetadata *)*(v150 - 3) != &type metadata for PropagateDirtiness)
    {
      v150 += 5;
      if (!--v149) {
        goto LABEL_128;
      }
    }
    uint64_t v151 = *v150;
  }
  else
  {
LABEL_128:
    uint64_t v151 = 0;
  }
  uint64_t v152 = *(void *)(v106 + 128);
  char v153 = *(unsigned char *)(v106 + 184);
  uint64_t v154 = swift_retain();
  if ((v153 & 1) == 0)
  {
    uint64_t v155 = v152 + v151;
    unsigned int v156 = *(_DWORD *)(*(void *)(v106 + 168) + 4 * v103);
    v157 = (unsigned int *)(v155 + 8 * v103);
    uint64_t v158 = *(unsigned int *)(*(void *)(v154 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v156 + 8);
    swift_release();
    uint64_t v159 = *v157;
    uint64_t v160 = v157[1];
    if (v159 != -1 || v160 != 0) {
      sub_1B6398CA0(&v295, v156 | (unint64_t)(v158 << 32), v159 | (v160 << 32));
    }
    swift_release();
    int v100 = v265;
    int v139 = v266;
    goto LABEL_115;
  }
LABEL_219:
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B6971288@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 144);
  v10[8] = *(_OWORD *)(a1 + 128);
  v10[9] = v4;
  v10[10] = *(_OWORD *)(a1 + 160);
  long long v5 = *(_OWORD *)(a1 + 80);
  v10[4] = *(_OWORD *)(a1 + 64);
  void v10[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 112);
  v10[6] = *(_OWORD *)(a1 + 96);
  v10[7] = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v8;
  nullsub_1(v10);
  sub_1B63129D0((uint64_t *)a1);
  return sub_1B62D7A90((uint64_t)v10, a2, &qword_1EB97EB68, (uint64_t)&type metadata for RenderFunctions);
}

uint64_t sub_1B6971310(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v4 = a3;
  unint64_t v6 = HIDWORD(a3);
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t KeyPath = swift_getKeyPath();
  int v14 = v4;
  int v15 = v6;
  uint64_t v16 = a2;
  sub_1B6971EAC();
  uint64_t v20 = v10;
  int v21 = &off_1F0F7FE30;
  uint64_t v17 = KeyPath;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  char v22 = 11;
  swift_unknownObjectRetain();
  sub_1B6A62610((uint64_t)&v14);
  sub_1B67421B0((uint64_t)&v14);
  uint64_t v11 = swift_getKeyPath();
  int v14 = v4;
  int v15 = v6;
  uint64_t v16 = a2;
  sub_1B674ED54();
  uint64_t v20 = v12;
  int v21 = &off_1F0F7FE30;
  uint64_t v17 = v11;
  LOBYTE(v18) = 1;
  char v22 = 11;
  sub_1B6A62610((uint64_t)&v14);
  return sub_1B67421B0((uint64_t)&v14);
}

uint64_t destroy for Material()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Material(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Material(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v4;
  int v5 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithCopy for WorldCounters(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Material(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Material(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Material(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Material()
{
  return &type metadata for Material;
}

uint64_t sub_1B6971778(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!(a1 >> 62))
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_3;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1B6E32C18();
  if (!v10) {
    goto LABEL_25;
  }
LABEL_3:
  uint64_t v11 = 0;
  unint64_t v12 = a2 >> 16;
  unint64_t v13 = a3 >> 16;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v14 = MEMORY[0x1BA9B4580](v11, a1);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 8 * v11 + 32);
      swift_retain();
    }
    uint64_t v15 = *(void *)(v14 + 16);
    unint64_t v16 = *(void *)(v14 + 24);
    uint64_t v17 = (v16 & 0x2000000000000000) != 0 ? HIBYTE(v16) & 0xF : v15 & 0xFFFFFFFFFFFFLL;
    BOOL v18 = v15 == a4 && v16 == a5;
    BOOL v19 = v18 && v12 == 0;
    BOOL v20 = v19 && v17 == v13;
    if (v20 || (sub_1B6E33078() & 1) != 0) {
      break;
    }
    swift_release();
    if (v10 == ++v11) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1B69718E4()
{
  unint64_t result = qword_1EB97FF30;
  if (!qword_1EB97FF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FF30);
  }
  return result;
}

uint64_t sub_1B6971938()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 9) {
    return 9;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6971984(_WORD *a1)
{
  sub_1B62F7E24(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
  uint64_t result = swift_allocObject();
  int v3 = (unsigned __int16)a1[54];
  int v4 = (unsigned __int16)a1[58];
  int v5 = (unsigned __int16)a1[62];
  int v6 = (unsigned __int16)a1[66];
  int v7 = (unsigned __int16)a1[70];
  int v8 = (unsigned __int16)a1[74];
  int v9 = (unsigned __int16)a1[78];
  BOOL v10 = a1[50] != 0;
  *(_OWORD *)(result + 16) = xmmword_1B6E96DA0;
  *(_OWORD *)(result + 32) = xmmword_1B6E96DB0;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 64) = v10;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(void *)(result + 120) = 0;
  *(unsigned char *)(result + 128) = 13;
  *(_OWORD *)(result + 144) = xmmword_1B6E96DC0;
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 176) = v3 != 0;
  *(void *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = 0u;
  *(_OWORD *)(result + 200) = 0u;
  *(_OWORD *)(result + 184) = 0u;
  *(unsigned char *)(result + 240) = 13;
  *(_OWORD *)(result + 256) = xmmword_1B6E96DD0;
  *(unsigned char *)(result + 272) = 0;
  *(void *)(result + 288) = v4 != 0;
  *(_OWORD *)(result + 296) = 0u;
  *(_OWORD *)(result + 312) = 0u;
  *(_OWORD *)(result + 328) = 0u;
  *(void *)(result + 344) = 0;
  *(unsigned char *)(result + 352) = 13;
  *(_OWORD *)(result + 368) = xmmword_1B6E96DE0;
  *(unsigned char *)(result + 384) = 0;
  *(void *)(result + 400) = v5 != 0;
  *(void *)(result + 456) = 0;
  *(_OWORD *)(result + 424) = 0u;
  *(_OWORD *)(result + 440) = 0u;
  *(_OWORD *)(result + 408) = 0u;
  *(unsigned char *)(result + 464) = 13;
  *(_OWORD *)(result + 480) = xmmword_1B6E96DF0;
  *(unsigned char *)(result + 496) = 0;
  *(void *)(result + 512) = v8 != 0;
  *(_OWORD *)(result + 520) = 0u;
  *(_OWORD *)(result + 536) = 0u;
  *(_OWORD *)(result + 552) = 0u;
  *(void *)(result + 568) = 0;
  *(unsigned char *)(result + 576) = 13;
  *(_OWORD *)(result + 592) = xmmword_1B6E96E00;
  *(unsigned char *)(result + 608) = 0;
  *(void *)(result + 624) = v9 != 0;
  *(_OWORD *)(result + 632) = 0u;
  *(_OWORD *)(result + 648) = 0u;
  *(_OWORD *)(result + 664) = 0u;
  *(void *)(result + 680) = 0;
  *(unsigned char *)(result + 688) = 13;
  *(_OWORD *)(result + 704) = xmmword_1B6E96E10;
  *(unsigned char *)(result + 720) = 0;
  *(void *)(result + 736) = v6 != 0;
  *(void *)(result + 792) = 0;
  *(_OWORD *)(result + 760) = 0u;
  *(_OWORD *)(result + 776) = 0u;
  *(_OWORD *)(result + 744) = 0u;
  *(unsigned char *)(result + 800) = 13;
  *(_OWORD *)(result + 816) = xmmword_1B6E96E20;
  *(unsigned char *)(result + 832) = 0;
  *(void *)(result + 848) = v7 != 0;
  *(void *)(result + 904) = 0;
  *(_OWORD *)(result + 872) = 0u;
  *(_OWORD *)(result + 888) = 0u;
  *(_OWORD *)(result + 856) = 0u;
  *(unsigned char *)(result + 912) = 13;
  return result;
}

unint64_t sub_1B6971B8C()
{
  unint64_t result = qword_1EB97EC28;
  if (!qword_1EB97EC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EC28);
  }
  return result;
}

void sub_1B6971BE0()
{
  if (!qword_1EB97E730)
  {
    type metadata accessor for ShaderScript(255);
    unint64_t v0 = type metadata accessor for ScriptRuntime();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB97E730);
    }
  }
}

uint64_t sub_1B6971C40(uint64_t a1)
{
  sub_1B62F9340(0, (unint64_t *)&qword_1EB97D688, (uint64_t (*)(uint64_t))sub_1B6971BE0, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B6971CCC(uint64_t a1, uint64_t a2)
{
  sub_1B6971BE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6971D30(uint64_t a1)
{
  sub_1B6971BE0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B6971D8C()
{
  if (v0[3])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[13])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[18])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 192, 7);
}

uint64_t sub_1B6971E5C@<X0>(uint64_t a1@<X8>)
{
  return sub_1B6971288(v1 + 16, a1);
}

uint64_t sub_1B6971E64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B6971EAC()
{
  if (!qword_1EB97F2B8)
  {
    sub_1B62C5FD4(255, &qword_1EB97F9B8, &qword_1EB97F9B0);
    unint64_t v0 = type metadata accessor for ComponentValueWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB97F2B8);
    }
  }
}

void sub_1B6971F30(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1B6971F38()
{
  return sub_1B697293C();
}

uint64_t sub_1B6971F5C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v59 = a2;
  sub_1B6972A34(0, &qword_1EB980AC0, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  int v9 = (char *)&v51 - v8;
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  uint64_t v60 = sub_1B62FFCAC(0);
  char v71 = 1;
  char v70 = 0;
  unsigned __int8 v69 = 0;
  uint64_t v62 = sub_1B6335620(MEMORY[0x1E4FBC860]);
  uint64_t v63 = v10;
  uint64_t v11 = a1[3];
  uint64_t v61 = a1;
  sub_1B62C14BC(a1, v11);
  sub_1B69729E0();
  sub_1B6E33A48();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v12 = v6;
  LOBYTE(v66) = 0;
  sub_1B66C4FB0();
  sub_1B6E32D78();
  if (LOBYTE(v68[0]) == 3) {
    int v14 = 2;
  }
  else {
    int v14 = LOBYTE(v68[0]);
  }
  LOBYTE(v66) = 1;
  sub_1B62A83F0();
  sub_1B6E32D78();
  uint64_t v15 = v61;
  int v58 = v14;
  if (BYTE5(v68[0])) {
    float v16 = 0.0;
  }
  else {
    float v16 = *(float *)v68;
  }
  char v71 = BYTE5(v68[0]) | BYTE4(v68[0]) & 1;
  LOBYTE(v66) = 2;
  sub_1B62B1EA8();
  sub_1B6E32D78();
  float v57 = v16;
  if (BYTE8(v68[0])) {
    int v17 = -1;
  }
  else {
    int v17 = v68[0];
  }
  if (BYTE8(v68[0])) {
    int v18 = 0;
  }
  else {
    int v18 = DWORD1(v68[0]);
  }
  type metadata accessor for MTLCullMode(0);
  LOBYTE(v66) = 4;
  sub_1B6971E64((unint64_t *)&unk_1EB980488, type metadata accessor for MTLCullMode);
  sub_1B6E32D78();
  int v56 = v18;
  if (BYTE8(v68[0])) {
    uint64_t v19 = 2;
  }
  else {
    uint64_t v19 = *(void *)&v68[0];
  }
  LOBYTE(v68[0]) = 8;
  uint64_t v20 = sub_1B6E32D58();
  if ((v20 & 0x100000000) != 0) {
    float v21 = -1.0;
  }
  else {
    float v21 = *(float *)&v20;
  }
  LOBYTE(v68[0]) = 5;
  char v22 = sub_1B6E32D38();
  if (v22 == 2)
  {
    char v70 = 0;
LABEL_25:
    uint64_t v55 = 7;
    goto LABEL_26;
  }
  char v70 = v22 & 1;
  if ((v22 & 1) == 0) {
    goto LABEL_25;
  }
  type metadata accessor for MTLCompareFunction(0);
  LOBYTE(v66) = 6;
  sub_1B6971E64(&qword_1E9DCDE48, type metadata accessor for MTLCompareFunction);
  sub_1B6E32DF8();
  uint64_t v55 = *(void *)&v68[0];
  LOBYTE(v68[0]) = 7;
  unsigned __int8 v69 = sub_1B6E32DA8() & 1;
LABEL_26:
  int v54 = v17;
  if (!v58)
  {
    swift_allocObject();
    uint64_t v23 = sub_1B62FFCAC(140);
    uint64_t v24 = v23;
    uint64_t v25 = sub_1B6D2EFB4;
    goto LABEL_30;
  }
  if (v58 == 1)
  {
    swift_allocObject();
    uint64_t v23 = sub_1B62FFCAC(196);
    uint64_t v24 = v23;
    uint64_t v25 = sub_1B6D28CFC;
LABEL_30:
    *(void *)(v23 + 88) = v25;
    *(void *)(v23 + 96) = 0;
    swift_release();
    goto LABEL_32;
  }
  swift_allocObject();
  uint64_t v24 = sub_1B62FFCAC(128);
LABEL_32:
  swift_release();
  uint64_t v26 = v15[3];
  uint64_t v27 = v15[4];
  sub_1B62C14BC(v15, v26);
  if (!sub_1B62BF5E0(2021, v26, v27))
  {
    LOBYTE(v64) = 3;
    sub_1B62B58FC();
    sub_1B6E32D78();
    uint64_t v28 = v12;
    uint64_t v60 = v5;
    if (!*((void *)&v67 + 1))
    {
      sub_1B639560C((uint64_t)&v66, &qword_1E9DD2DC8, (uint64_t)&type metadata for AnyCoder);
      goto LABEL_34;
    }
    v68[0] = v66;
    v68[1] = v67;
    sub_1B62CAAD8((uint64_t)v68, (uint64_t)&v66);
    sub_1B62C55B0(0, &qword_1EB97F9B0);
    if (swift_dynamicCast())
    {
      uint64_t v51 = v65;
      uint64_t v53 = (uint64_t)v64;
      if (object_getClass(v64) == (Class)_TtC3VFX16CustomParameters && v53)
      {
        swift_unknownObjectRetain();
        uint64_t v29 = sub_1B6B98A6C();
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
LABEL_49:
        sub_1B6913760((uint64_t)v68);
        uint64_t v62 = v29;
        uint64_t v63 = v31;
LABEL_50:
        uint64_t v28 = v12;
        uint64_t v15 = v61;
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v51 = 0;
      uint64_t v53 = 0;
    }
    uint64_t v29 = sub_1B6335620(MEMORY[0x1E4FBC860]);
    uint64_t v31 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  uint64_t v60 = v5;
  uint64_t v28 = v12;
  if (!v58)
  {
    type metadata accessor for PBRParameters();
    LOBYTE(v66) = 3;
    sub_1B6971E64(&qword_1E9DD8FD0, (void (*)(uint64_t))type metadata accessor for PBRParameters);
    sub_1B6E32D78();
    uint64_t v53 = *(void *)&v68[0];
    if (!*(void *)&v68[0])
    {
      uint64_t v32 = swift_allocObject();
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(v32 + 16) = _Q0;
      *(void *)(v32 + 32) = 0xFFFFFFFFLL;
      *(_DWORD *)(v32 + 40) = 16777473;
      *(unsigned char *)(v32 + 44) = 1;
      *(_OWORD *)(v32 + 48) = xmmword_1B6E4F490;
      *(void *)(v32 + 64) = 0;
      *(void *)(v32 + 72) = 0;
      *(void *)(v32 + 80) = 0xFFFFFFFFLL;
      *(_DWORD *)(v32 + 88) = 16777473;
      *(unsigned char *)(v32 + 92) = 1;
      *(_OWORD *)(v32 + 96) = xmmword_1B6E4F490;
      *(void *)(v32 + 112) = 0xFFFFFFFFLL;
      *(_DWORD *)(v32 + 120) = 16777473;
      *(unsigned char *)(v32 + 124) = 1;
      *(_DWORD *)(v32 + 128) = 1065353216;
      *(_OWORD *)(v32 + 144) = xmmword_1B6E4F490;
      *(void *)(v32 + 160) = 0xFFFFFFFFLL;
      *(_DWORD *)(v32 + 168) = 16777473;
      *(unsigned char *)(v32 + 172) = 1;
      *(_DWORD *)(v32 + 176) = 1065353216;
      *(_OWORD *)(v32 + 192) = xmmword_1B6E4F490;
      *(void *)(v32 + 208) = 0xFFFFFFFFLL;
      *(_DWORD *)(v32 + 216) = 16777473;
      *(unsigned char *)(v32 + 220) = 1;
      *(_DWORD *)(v32 + 224) = 1065353216;
      *(_OWORD *)(v32 + 240) = xmmword_1B6E4F490;
      *(void *)(v32 + 256) = 0xFFFFFFFFLL;
      *(_DWORD *)(v32 + 264) = 16777473;
      *(unsigned char *)(v32 + 268) = 1;
      *(_DWORD *)(v32 + 272) = 1065353216;
      *(_OWORD *)(v32 + 288) = xmmword_1B6E4F490;
      uint64_t v53 = v32;
      *(_WORD *)(v32 + 304) = 0;
    }
    uint64_t v51 = sub_1B6971E64((unint64_t *)&qword_1E9DD2DC0, (void (*)(uint64_t))type metadata accessor for PBRParameters);
    goto LABEL_50;
  }
LABEL_34:
  uint64_t v51 = 0;
  uint64_t v53 = 0;
LABEL_51:
  uint64_t v39 = v15[3];
  uint64_t v40 = v15[4];
  sub_1B62C14BC(v15, v39);
  LOBYTE(v39) = sub_1B62BF5E0(2047, v39, v40);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v60);
  char v41 = v39 | v71;
  float v42 = v57;
  uint64_t v52 = v19;
  if (v39)
  {
    uint64_t v43 = v63;
    if ((v71 & 1) == 0)
    {
      float v21 = v57;
      char v41 = 1;
      char v71 = 1;
      float v42 = 0.0;
    }
  }
  else
  {
    uint64_t v43 = v63;
  }
  char v44 = v70;
  LODWORD(v63) = v69;
  uint64_t v45 = v53;
  swift_unknownObjectRetain();
  uint64_t v46 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = swift_release();
  uint64_t v47 = v24;
  id v48 = v59;
  *uint64_t v59 = v58;
  *((void *)v48 + 1) = v47;
  int v49 = v56;
  *((_DWORD *)v48 + 4) = v54;
  *((_DWORD *)v48 + 5) = v49;
  uint64_t v50 = v51;
  *((void *)v48 + 3) = v45;
  *((void *)v48 + 4) = v50;
  *((float *)v48 + 10) = v42;
  v48[44] = v41 & 1;
  *((float *)v48 + 12) = v21;
  v48[52] = 3;
  v48[53] = v44;
  *((void *)v48 + 7) = v55;
  v48[64] = v63;
  *((void *)v48 + 9) = 1;
  *((void *)v48 + 10) = v52;
  *((void *)v48 + 11) = v46;
  *((void *)v48 + 12) = v43;
  return result;
}

uint64_t sub_1B697293C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 24);
  if (v2 && object_getClass(v2) == (Class)_TtC3VFX16CustomParameters)
  {
    swift_unknownObjectRetain();
    uint64_t v7 = sub_1B6B98A6C();
    uint64_t v9 = v8;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v1 + 88) = v7;
    *(void *)(v1 + 96) = v9;
  }
  else
  {
    uint64_t v3 = sub_1B6335620(MEMORY[0x1E4FBC860]);
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v1 + 88) = v3;
    *(void *)(v1 + 96) = v5;
  }
  return result;
}

unint64_t sub_1B69729E0()
{
  unint64_t result = qword_1EB97FF18;
  if (!qword_1EB97FF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FF18);
  }
  return result;
}

void sub_1B6972A34(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B69729E0();
    unint64_t v7 = a3(a1, &type metadata for Material.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for ScriptScheduling(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Material.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6972BF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Material.CodingKeys()
{
  return &type metadata for Material.CodingKeys;
}

ValueMetadata *type metadata accessor for Layer()
{
  return &type metadata for Layer;
}

unsigned char *_s3VFX8MaterialV4KindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6972D0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Material.Kind()
{
  return &type metadata for Material.Kind;
}

uint64_t sub_1B6972D44()
{
  return sub_1B6972D74(&qword_1E9DD2DD8, &qword_1E9DD2DE0, (uint64_t)&type metadata for Material.Kind);
}

uint64_t sub_1B6972D74(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62F7E24(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6972DDC()
{
  unint64_t result = qword_1E9DD2DE8;
  if (!qword_1E9DD2DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2DE8);
  }
  return result;
}

unint64_t sub_1B6972E34()
{
  unint64_t result = qword_1E9DD2DF0;
  if (!qword_1E9DD2DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2DF0);
  }
  return result;
}

uint64_t sub_1B6972E88()
{
  return sub_1B6972D74(&qword_1E9DD2DF8, &qword_1E9DD2E00, (uint64_t)&type metadata for Layer);
}

unint64_t sub_1B6972EBC()
{
  unint64_t result = qword_1E9DD2E08;
  if (!qword_1E9DD2E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2E08);
  }
  return result;
}

unint64_t sub_1B6972F14()
{
  unint64_t result = qword_1EB97FF28;
  if (!qword_1EB97FF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FF28);
  }
  return result;
}

unint64_t sub_1B6972F6C()
{
  unint64_t result = qword_1EB97FF20;
  if (!qword_1EB97FF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FF20);
  }
  return result;
}

unint64_t sub_1B6972FC0()
{
  unint64_t result = qword_1E9DD2E10;
  if (!qword_1E9DD2E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2E10);
  }
  return result;
}

uint64_t sub_1B6973014()
{
  uint64_t v1 = sub_1B6E31808();
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v3 = *(void *)(v0 + 16);
  if (*(void *)v0)
  {
    uint64_t v4 = *(void *)(v0 + 8) - *(void *)v0;
    if (v3 >= v4) {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    if ((v3 & 0x8000000000000000) == 0) {
      return v5;
    }
  }
  sub_1B69EFCE8(*(unsigned char *)(v0 + 24), *(void *)(v0 + 16), v4, *(void *)v0);
  sub_1B6E317F8();
  sub_1B6973228();
  sub_1B6973314(&qword_1E9DD2E30, (void (*)(uint64_t))sub_1B6973228);
  uint64_t v5 = sub_1B6E317C8();
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1B6E318C8();
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v3 + v7 + 1;
  }
  return v5;
}

uint64_t sub_1B6973190(uint64_t a1)
{
  if ((sub_1B6E334B8() & 1) == 0
    && (sub_1B6E315C8() & 1) != 0
    && (sub_1B6B06D70(10, 0xE100000000000000) & 0xFFFFFF80) == 0)
  {
    sub_1B6B06D70(10, 0xE100000000000000);
  }
  return a1;
}

void sub_1B6973228()
{
  if (!qword_1E9DD2E18)
  {
    sub_1B69732BC();
    sub_1B6973314(&qword_1E9DD2E28, (void (*)(uint64_t))sub_1B69732BC);
    unint64_t v0 = sub_1B6E338D8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD2E18);
    }
  }
}

void sub_1B69732BC()
{
  if (!qword_1E9DD2E20)
  {
    unint64_t v0 = sub_1B6E31728();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD2E20);
    }
  }
}

uint64_t sub_1B6973314(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for TypeConstraint(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1B66456F8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for TypeConstraint(unint64_t *a1)
{
  return sub_1B6645740(*a1);
}

unint64_t *assignWithCopy for TypeConstraint(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1B66456F8(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1B6645740(v4);
  return a1;
}

unint64_t *assignWithTake for TypeConstraint(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1B6645740(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TypeConstraint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TypeConstraint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)uint64_t result = a2 - 124;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B69734B4(void *a1)
{
  uint64_t v1 = *a1 >> 61;
  if (v1 <= 3) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 4;
  }
}

void *sub_1B69734D0(void *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1B69734E0(unint64_t *result, uint64_t a2)
{
  if (a2 < 4)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 61;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 4);
    unint64_t v3 = 0x8000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for TypeConstraint()
{
  return &type metadata for TypeConstraint;
}

uint64_t sub_1B697351C(unint64_t a1, unint64_t a2)
{
  switch(a1 >> 61)
  {
    case 1uLL:
      if (a2 >> 61 != 1) {
        goto LABEL_30;
      }
      unint64_t v2 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v3 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      goto LABEL_12;
    case 2uLL:
      if (a2 >> 61 != 2) {
        goto LABEL_30;
      }
      uint64_t result = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      break;
    case 3uLL:
      if (a2 >> 61 != 3) {
        goto LABEL_30;
      }
      unint64_t v6 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v7 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      sub_1B67C52A4(v6);
      sub_1B67C52A4(v7);
      char v8 = sub_1B69B18E4(v6, v7);
      sub_1B678FC34(v7);
      sub_1B678FC34(v6);
      uint64_t result = v8 & 1;
      break;
    case 4uLL:
      switch(__ROR8__(a1, 3) ^ 0x1000000000000000)
      {
        case 1:
          if (a2 != 0x8000000000000008) {
            goto LABEL_30;
          }
          break;
        case 2:
          if (a2 != 0x8000000000000010) {
            goto LABEL_30;
          }
          break;
        case 3:
          if (a2 != 0x8000000000000018) {
            goto LABEL_30;
          }
          break;
        case 4:
          if (a2 != 0x8000000000000020) {
            goto LABEL_30;
          }
          break;
        case 5:
          if (a2 != 0x8000000000000028) {
            goto LABEL_30;
          }
          break;
        case 6:
          if (a2 != 0x8000000000000030) {
            goto LABEL_30;
          }
          break;
        case 7:
          if (a2 != 0x8000000000000038) {
            goto LABEL_30;
          }
          break;
        case 8:
          if (a2 != 0x8000000000000040) {
            goto LABEL_30;
          }
          break;
        default:
          if (a2 != 0x8000000000000000) {
            goto LABEL_30;
          }
          break;
      }
      return 1;
    default:
      if (a2 >> 61 || *(void *)(a1 + 16) != *(void *)(a2 + 16))
      {
LABEL_30:
        uint64_t result = 0;
      }
      else
      {
        unint64_t v2 = *(void *)(a1 + 24);
        unint64_t v3 = *(void *)(a2 + 24);
LABEL_12:
        sub_1B66456F8(v2);
        sub_1B66456F8(v3);
        char v5 = sub_1B697351C(v2, v3);
        sub_1B6645740(v3);
        sub_1B6645740(v2);
        uint64_t result = v5 & 1;
      }
      break;
  }
  return result;
}

uint64_t sub_1B6973788(unint64_t a1)
{
  unint64_t v1 = a1 >> 61;
  if (a1 >> 61 == 2) {
    return *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  }
  if (v1 == 1)
  {
    unint64_t v2 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  }
  else
  {
    if (v1) {
      return 0;
    }
    unint64_t v2 = *(void *)(a1 + 24);
  }
  sub_1B66456F8(v2);
  uint64_t v3 = sub_1B6973788(v2);
  sub_1B6645740(v2);
  return v3;
}

uint64_t sub_1B6973818(unint64_t a1)
{
  uint64_t v1 = 0x7961727261;
  switch(a1 >> 61)
  {
    case 2uLL:
      uint64_t v1 = sub_1B69741B0(*(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10));
      break;
    case 3uLL:
      unint64_t v2 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      sub_1B67C52A4(v2);
      uint64_t v1 = sub_1B69B0F8C(v2);
      sub_1B678FC34(v2);
      break;
    case 4uLL:
      uint64_t v1 = 42;
      switch(__ROR8__(a1, 3) ^ 0x1000000000000000)
      {
        case 1:
          uint64_t v1 = 0x636972656D756ELL;
          break;
        case 2:
          uint64_t v1 = 0x72656765746E69;
          break;
        case 3:
          uint64_t v1 = 0x72616C616373;
          break;
        case 4:
        case 5:
          uint64_t v1 = 0x6E97C374616F6C66;
          break;
        case 6:
          uint64_t v1 = 0x78697274616DLL;
          break;
        case 7:
          uint64_t v1 = 0x6576727563;
          break;
        case 8:
          uint64_t v1 = 0x6D6152726F6C6F63;
          break;
        default:
          return v1;
      }
      break;
    default:
      return v1;
  }
  return v1;
}

uint64_t sub_1B69739C0(unint64_t a1, unint64_t a2)
{
  LOBYTE(v2) = 1;
  switch(a2 >> 61)
  {
    case 1uLL:
      if (a1 >> 60 != 3) {
        goto LABEL_46;
      }
      unint64_t v8 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      sub_1B66456F8(v8);
      sub_1B67C52A4(v9);
      char v10 = sub_1B69739C0(v9, v8);
      sub_1B678FC34(v9);
      sub_1B6645740(v8);
      return v10 & 1;
    case 2uLL:
      return v2 & 1;
    case 3uLL:
      unint64_t v11 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      sub_1B67C52A4(v11);
      char v12 = sub_1B69B23C4(a1, v11);
      sub_1B678FC34(v11);
      return v12 & 1;
    case 4uLL:
      switch(__ROR8__(a2, 3) ^ 0x1000000000000000)
      {
        case 1:
          if (a1 >> 60 == 1)
          {
            unint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            if (v23 >> 60 == 1) {
              goto LABEL_46;
            }
            if (v23 >> 60 == 8 && (unint64_t v24 = v23 + 0x7FFFFFFFFFFFFFD0, v24 < 0x11)) {
              unsigned int v2 = (0xFEFEu >> v24) & 1;
            }
            else {
LABEL_37:
            }
              LOBYTE(v2) = 1;
          }
          else
          {
            *((void *)&v15 + 1) = a1;
            *(void *)&long long v15 = a1 + 0x7FFFFFFFFFFFFFD0;
            unint64_t v14 = v15 >> 3;
            BOOL v16 = v14 >= 6;
            unsigned int v17 = (0x37u >> v14) & 1;
            if (v16) {
              LOBYTE(v17) = 0;
            }
            if (a1 >> 60 == 8) {
              LOBYTE(v2) = v17;
            }
            else {
              LOBYTE(v2) = 0;
            }
          }
          break;
        case 2:
          unsigned int v18 = (0x10101u >> (a1 - 48)) & 1;
          if (a1 + 0x7FFFFFFFFFFFFFD0 >= 0x11) {
            LOBYTE(v18) = 0;
          }
          if (a1 >> 60 == 8) {
            LOBYTE(v2) = v18;
          }
          else {
            LOBYTE(v2) = 0;
          }
          return v2 & 1;
        case 3:
          if (a1 >> 60 == 8
            && a1 + 0x7FFFFFFFFFFFFFD0 <= 0x10
            && ((1 << (a1 - 48)) & 0x10101) != 0
            || (sub_1B69B18E4(a1, 0x8000000000000050) & 1) != 0)
          {
            goto LABEL_37;
          }
          unint64_t v19 = 0x8000000000000058;
          goto LABEL_39;
        case 4:
          if ((sub_1B69B18E4(a1, 0x8000000000000050) & 1) == 0) {
            goto LABEL_11;
          }
          goto LABEL_37;
        case 5:
LABEL_11:
          if (a1 >> 60 != 1) {
            goto LABEL_46;
          }
          uint64_t v13 = a1 & 0xFFFFFFFFFFFFFFFLL;
LABEL_33:
          unint64_t v21 = *(void *)(v13 + 24);
          sub_1B67C52A4(v21);
          char v22 = sub_1B69B18E4(v21, 0x8000000000000050);
          sub_1B678FC34(v21);
          return v22 & 1;
        case 6:
          if (a1 >> 60 != 1) {
            goto LABEL_46;
          }
          unint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          if (v20 >> 60 != 1) {
            goto LABEL_46;
          }
          uint64_t v13 = v20 & 0xFFFFFFFFFFFFFFFLL;
          goto LABEL_33;
        case 7:
          if (sub_1B69B18E4(a1, 0x8000000000000080)) {
            goto LABEL_37;
          }
          unint64_t v19 = 0x8000000000000088;
          goto LABEL_39;
        case 8:
          if (sub_1B69B18E4(a1, 0x8000000000000070)) {
            goto LABEL_37;
          }
          unint64_t v19 = 0x8000000000000078;
LABEL_39:
          return sub_1B69B18E4(a1, v19);
        default:
          LOBYTE(v2) = sub_1B69B18E4(a1, 0x8000000000000008) ^ 1;
          return v2 & 1;
      }
      return v2 & 1;
    default:
      if (a1 >> 60 == 3 && *(void *)(a2 + 16) == *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10))
      {
        unint64_t v4 = *(void *)(a2 + 24);
        unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        sub_1B66456F8(v4);
        sub_1B67C52A4(v5);
        char v6 = sub_1B69739C0(v5, v4);
        sub_1B6645740(v4);
        sub_1B678FC34(v5);
        return v6 & 1;
      }
      else
      {
LABEL_46:
        LOBYTE(v2) = 0;
        return v2 & 1;
      }
  }
}

uint64_t sub_1B6973D74(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 61;
  if (!(a2 >> 61))
  {
    uint64_t v3 = (unint64_t *)(a2 + 24);
    goto LABEL_5;
  }
  if (v2 == 1)
  {
    uint64_t v3 = (unint64_t *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 16);
LABEL_5:
    unint64_t v4 = *v3;
    if (a1 >> 60 == 3)
    {
      uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      sub_1B67C52A4(v6);
    }
    else
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0xF000000000000007;
    }
    sub_1B66456F8(v4);
    uint64_t v7 = sub_1B6973D74(v6, v4);
    sub_1B6645740(v4);
    sub_1B683DE78(v5, v6);
    return v7;
  }
  if (v2 == 2)
  {
    uint64_t v7 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    sub_1B67C52A4(a1);
    return v7;
  }
  sub_1B6E328C8();
  sub_1B6E31948();
  sub_1B6E32B18();
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

unint64_t sub_1B6973EEC(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 61)
  {
    case 1uLL:
      unint64_t v6 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      sub_1B6E33928();
      sub_1B66456F8(v6);
      sub_1B6973EEC(a1, v6);
      unint64_t v4 = v6;
      goto LABEL_6;
    case 2uLL:
      sub_1B6E33928();
      goto LABEL_4;
    case 3uLL:
      unint64_t v7 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      sub_1B6E33928();
      sub_1B67C52A4(v7);
      sub_1B69B2FF4(a1, v7);
      return sub_1B678FC34(v7);
    case 4uLL:
LABEL_4:
      unint64_t result = sub_1B6E33928();
      break;
    default:
      unint64_t v3 = *(void *)(a2 + 24);
      sub_1B6E33928();
      sub_1B6E33928();
      sub_1B66456F8(v3);
      sub_1B6973EEC(a1, v3);
      unint64_t v4 = v3;
LABEL_6:
      unint64_t result = sub_1B6645740(v4);
      break;
  }
  return result;
}

uint64_t sub_1B69740B8()
{
  unint64_t v1 = *v0;
  sub_1B6E33918();
  sub_1B6973EEC((uint64_t)v3, v1);
  return sub_1B6E33988();
}

unint64_t sub_1B6974100(uint64_t a1)
{
  return sub_1B6973EEC(a1, *v1);
}

uint64_t sub_1B6974108()
{
  unint64_t v1 = *v0;
  sub_1B6E33918();
  sub_1B6973EEC((uint64_t)v3, v1);
  return sub_1B6E33988();
}

uint64_t sub_1B697414C(unint64_t *a1, unint64_t *a2)
{
  return sub_1B697351C(*a1, *a2);
}

unint64_t sub_1B697415C()
{
  unint64_t result = qword_1E9DD2E38[0];
  if (!qword_1E9DD2E38[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9DD2E38);
  }
  return result;
}

uint64_t sub_1B69741B0(uint64_t a1)
{
  unint64_t v2 = sub_1B67F46F4((uint64_t)&unk_1F0F672F0);
  sub_1B682BAF0();
  swift_arrayDestroy();
  if (v2[2] && (unint64_t v3 = sub_1B62C1A30(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(v2[7] + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = 63;
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t static SelfBuildInfo.RC_ProjectSourceVersion.getter()
{
  return 0x342E30362E343831;
}

uint64_t static SelfBuildInfo.gitDescribe.getter()
{
  return 0x6E776F6E6B6E753CLL;
}

uint64_t static SelfBuildInfo.XCODE_PRODUCT_BUILD_VERSION.getter()
{
  return 0x6730373136413631;
}

ValueMetadata *type metadata accessor for SelfBuildInfo()
{
  return &type metadata for SelfBuildInfo;
}

uint64_t sub_1B69742A8@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  v6[0] = 0xD000000000000013;
  v6[1] = 0x80000001B6F3F340;
  v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4800) == 0x4000) {
    unint64_t v3 = 0xD00000000000001CLL;
  }
  else {
    unint64_t v3 = 0xD000000000000013;
  }
  v6[4] = MEMORY[0x1E4FBC860];
  v6[5] = v3;
  unint64_t v4 = 0x80000001B6F3F360;
  if ((a1 & 0x4800) == 0x4000) {
    unint64_t v4 = 0x80000001B6F3F380;
  }
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E4FBC860];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  nullsub_1(v6);
  return sub_1B62CA210((uint64_t)v6, a2, &qword_1EB97EB68);
}

void *sub_1B6974370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a3 + 8);
  swift_retain();
  sub_1B62E9D50(v5, (uint64_t)v16);
  swift_release();
  sub_1B62CA210((uint64_t)v16, (uint64_t)v17, qword_1EB97EA20);
  if (v18)
  {
    long long v6 = xmmword_1B6E4F370;
    long long v7 = xmmword_1B6E4F2E0;
    long long v8 = xmmword_1B6E4F320;
    long long v9 = xmmword_1B6E4F300;
  }
  else
  {
    long long v9 = v17[0];
    long long v8 = v17[1];
    long long v7 = v17[2];
    long long v6 = v17[3];
  }
  unsigned int v10 = *(_DWORD *)(v3 + 24);
  if (v10 - 11 > 0xF4)
  {
    float v13 = *(float *)(v3 + 16);
    if (v13 > -1.0) {
      float v14 = *(float *)(v3 + 16);
    }
    else {
      float v14 = -1.0;
    }
    if (v13 >= 0.0) {
      float v11 = v14;
    }
    else {
      float v11 = -1.0;
    }
  }
  else
  {
    float v11 = 1.0 / (float)v10;
    float v12 = *(float *)(v3 + 16);
    if (v12 >= 0.0 && v12 > v11) {
      float v11 = *(float *)(v3 + 16);
    }
  }
  v19[0] = v9;
  v19[1] = v8;
  v19[2] = v7;
  v19[3] = v6;
  float v20 = v11;
  long long v21 = *(_OWORD *)(v3 + 32);
  return sub_1B6969820(v19, a1);
}

uint64_t sub_1B69744A4(uint64_t result)
{
  *(unsigned char *)(v1 + 21) = result;
  return result;
}

uint64_t sub_1B69744AC(uint64_t result)
{
  *(unsigned char *)(v1 + 22) = result;
  return result;
}

double (*sub_1B69744B4())(void)
{
  return nullsub_1;
}

void *sub_1B69744D4()
{
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  unint64_t v0 = (void *)sub_1B62FFCAC(4);
  v0[2] = 1;
  v0[11] = sub_1B69742A8;
  v0[12] = 0;
  swift_release();
  return v0;
}

double sub_1B697453C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a2 + 40) = 1;
  *(void *)&double result = 1;
  *(_OWORD *)(a2 + 16) = xmmword_1B6E50D30;
  return result;
}

void *sub_1B6974558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6974370(a1, a2, a3);
}

double sub_1B6974594@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 1;
  *(unsigned char *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = -1082130432;
  *(_WORD *)(a1 + 20) = 256;
  *(unsigned char *)(a1 + 22) = 0;
  *(_DWORD *)(a1 + 24) = 256;
  *(_WORD *)(a1 + 28) = 256;
  double result = 131072.0;
  *(_OWORD *)(a1 + 32) = xmmword_1B6E973A0;
  return result;
}

double sub_1B69745D4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(float *)&double result = sub_1B697472C(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B6974618(void *a1)
{
  sub_1B62A7DBC(0, (unint64_t *)&unk_1E9DD01B0, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  long long v9 = (char *)v12 - v8;
  long long v10 = v1[1];
  v12[0] = *v1;
  v12[1] = v10;
  v12[2] = v1[2];
  uint64_t result = sub_1B67C659C(a1, (uint64_t)v12 - v8);
  if (!v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

float sub_1B697472C@<S0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B62A7DBC(0, &qword_1EB980A78, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  long long v10 = (char *)&v21 - v9;
  uint64_t v21 = 0xFFFFFFFFLL;
  int v22 = 1;
  char v23 = 1;
  float v24 = -1.0;
  __int16 v25 = 256;
  char v26 = 0;
  int v27 = 256;
  __int16 v28 = 256;
  long long v29 = xmmword_1B6E973A0;
  sub_1B67C7204(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    int v12 = v22;
    char v13 = v23;
    float result = v24;
    char v14 = v25;
    char v15 = HIBYTE(v25);
    char v16 = v26;
    int v17 = v27;
    char v18 = v28;
    char v19 = HIBYTE(v28);
    long long v20 = v29;
    *(void *)a2 = v21;
    *(_DWORD *)(a2 + 8) = v12;
    *(unsigned char *)(a2 + 12) = v13;
    *(float *)(a2 + 16) = result;
    *(unsigned char *)(a2 + 20) = v14;
    *(unsigned char *)(a2 + 21) = v15;
    *(unsigned char *)(a2 + 22) = v16;
    *(_DWORD *)(a2 + 24) = v17;
    *(unsigned char *)(a2 + 28) = v18;
    *(unsigned char *)(a2 + 29) = v19;
    *(_OWORD *)(a2 + 32) = v20;
  }
  return result;
}

__n128 initializeWithCopy for ParticlePointRenderer(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticlePointRenderer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticlePointRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticlePointRenderer()
{
  return &type metadata for ParticlePointRenderer;
}

uint64_t sub_1B69749A0(uint64_t a1, uint64_t a2)
{
  unint64_t v45 = *(void *)(a1 + 16);
  unint64_t v43 = *(void *)(a2 + 16);
  if (v43 >= v45) {
    int64_t v4 = *(void *)(a1 + 16);
  }
  else {
    int64_t v4 = *(void *)(a2 + 16);
  }
  uint64_t v56 = MEMORY[0x1E4FBC860];
  sub_1B6C3C3B8(0, v4, 0);
  uint64_t v5 = v56;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  if (v4)
  {
    uint64_t v41 = a2 + 32;
    uint64_t v42 = a1 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v6 = 0;
    uint64_t v44 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      int64_t v49 = v4;
      uint64_t v50 = v5;
      if (v6)
      {
        unint64_t v48 = v7;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        uint64_t v54 = 0;
        long long v10 = 0uLL;
        long long v53 = 0u;
        char v46 = 1;
      }
      else
      {
        unint64_t v11 = v45;
        if (v7 != v45)
        {
          unint64_t v11 = v7 + 1;
          if (v44 != v43)
          {
            uint64_t v17 = *(void *)(v42 + 16 * v7 + 8);
            char v18 = (uint64_t *)(v41 + 40 * v44);
            uint64_t v20 = *v18;
            unint64_t v19 = v18[1];
            uint64_t v21 = v18[2];
            uint64_t v22 = v18[3];
            uint64_t v23 = v18[4];
            ++v44;
            *(void *)&long long v51 = *(void *)(v42 + 16 * v7);
            *((void *)&v51 + 1) = v17;
            *(void *)&long long v52 = v20;
            *((void *)&v52 + 1) = v19;
            *(void *)&long long v53 = v21;
            *((void *)&v53 + 1) = v22;
            uint64_t v54 = v23;
            swift_bridgeObjectRetain();
            sub_1B629C9E8(v20, v19);
            char v46 = 0;
            uint64_t v8 = *((void *)&v51 + 1);
            uint64_t v9 = v51;
            unint64_t v48 = v11;
            goto LABEL_12;
          }
        }
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        uint64_t v54 = 0;
        long long v10 = 0uLL;
        long long v53 = 0u;
        char v46 = 1;
        unint64_t v48 = v11;
      }
      long long v51 = v10;
      long long v52 = v10;
LABEL_12:
      sub_1B629C37C((uint64_t)&v52, (uint64_t)v55);
      long long v12 = v52;
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      sub_1B6A3D8B8();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      uint64_t v13 = v9;
      swift_bridgeObjectRelease();
      sub_1B629DCAC(v12, *((unint64_t *)&v12 + 1));
      uint64_t v5 = v50;
      uint64_t v56 = v50;
      unint64_t v15 = *(void *)(v50 + 16);
      unint64_t v14 = *(void *)(v50 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B6C3C3B8(v14 > 1, v15 + 1, 1);
        uint64_t v5 = v56;
      }
      *(void *)(v5 + 16) = v15 + 1;
      uint64_t v16 = v5 + 16 * v15;
      *(void *)(v16 + 32) = v13;
      *(void *)(v16 + 40) = v8;
      unint64_t v7 = v48;
      int64_t v4 = v49 - 1;
      char v6 = v46;
      if (v49 == 1)
      {
        unint64_t v24 = v45;
        unint64_t v25 = v43;
        if (v46) {
          goto LABEL_25;
        }
        goto LABEL_20;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  uint64_t v44 = 0;
  unint64_t v24 = v45;
  unint64_t v25 = v43;
LABEL_20:
  if (v7 != v24 && v44 != v25)
  {
    unint64_t v28 = ~v44 + v25;
    long long v29 = (uint64_t *)(v40 + 16 * v7 + 40);
    uint64_t v30 = (uint64_t *)(v39 + 40 * v44 + 32);
    unint64_t v31 = ~v7 + v24;
    do
    {
      unint64_t v47 = v28;
      uint64_t v32 = *(v29 - 1);
      uint64_t v33 = *v29;
      sub_1B629C37C((uint64_t)v30, (uint64_t)&v51);
      uint64_t v34 = *v30;
      unint64_t v35 = v30[1];
      swift_bridgeObjectRetain_n();
      sub_1B6646D94(&v51, (void (*)(void, void, void, void, void))sub_1B629C9E8);
      sub_1B6E31948();
      sub_1B6A3D8B8();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B629DCAC(v34, v35);
      uint64_t v56 = v5;
      unint64_t v37 = *(void *)(v5 + 16);
      unint64_t v36 = *(void *)(v5 + 24);
      if (v37 >= v36 >> 1)
      {
        sub_1B6C3C3B8(v36 > 1, v37 + 1, 1);
        uint64_t v5 = v56;
      }
      *(void *)(v5 + 16) = v37 + 1;
      uint64_t v38 = v5 + 16 * v37;
      *(void *)(v38 + 32) = v32;
      *(void *)(v38 + 40) = v33;
      if (!v31) {
        break;
      }
      v30 += 5;
      unint64_t v28 = v47 - 1;
      v29 += 2;
      --v31;
    }
    while (v47);
  }
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_1B6974D98()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B69749A0(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6385FEC(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  sub_1B6646D3C();
  sub_1B6E31638();
  swift_bridgeObjectRelease();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return 0xD000000000000011;
}

uint64_t sub_1B6974F20(uint64_t result, uint64_t a2, void *a3)
{
  int64_t v4 = (void *)v3[5];
  uint64_t v5 = v4[2];
  if (!v5) {
    return result;
  }
  uint64_t v8 = result;
  BOOL v9 = v4[4] == result && v4[5] == a2;
  if (v9 || (__n128 result = sub_1B6E334B8(), (result & 1) != 0))
  {
    uint64_t v10 = 0;
LABEL_8:
    unint64_t v11 = (void *)v3[6];
    sub_1B6646D94(a3, (void (*)(void, void, void, void, void))sub_1B629C9E8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[6] = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v11 = sub_1B6C16878(v11);
      v3[6] = v11;
    }
    sub_1B6979158((uint64_t)a3, (uint64_t)&v11[5 * v10 + 4]);
    uint64_t v13 = v3[7];
    if ((v13 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = MEMORY[0x1BA9B4580](v10, v13);
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(v21 + 56);
      unint64_t v23 = *(void *)(v21 + 64);
      sub_1B629C37C((uint64_t)a3, v21 + 56);
      sub_1B6646D94(a3, (void (*)(void, void, void, void, void))sub_1B629C9E8);
      sub_1B629DCAC(v22, v23);
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v14 = *(void *)(v13 + 8 * v10 + 32);
      uint64_t v15 = *(void *)(v14 + 56);
      unint64_t v16 = *(void *)(v14 + 64);
      sub_1B629C37C((uint64_t)a3, v14 + 56);
      sub_1B6646D94(a3, (void (*)(void, void, void, void, void))sub_1B629C9E8);
      return sub_1B629DCAC(v15, v16);
    }
  }
  if (v5 == 1) {
    return result;
  }
  BOOL v17 = v4[6] == v8 && v4[7] == a2;
  if (v17 || (__n128 result = sub_1B6E334B8(), (result & 1) != 0))
  {
    uint64_t v10 = 1;
    goto LABEL_8;
  }
  char v18 = v4 + 9;
  uint64_t v19 = 2;
  while (v5 != v19)
  {
    uint64_t v10 = v19;
    if (*(v18 - 1) != v8 || *v18 != a2)
    {
      __n128 result = sub_1B6E334B8();
      uint64_t v19 = v10 + 1;
      v18 += 2;
      if ((result & 1) == 0) {
        continue;
      }
    }
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1B697517C()
{
  return 1599362383;
}

void *sub_1B6975220(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 40);
  int64_t v4 = (void *)v3[2];
  if (v4)
  {
    BOOL v7 = v3[4] == a1 && v3[5] == a2;
    if (v7 || (sub_1B6E334B8() & 1) != 0) {
      goto LABEL_7;
    }
    if (v4 != (void *)1)
    {
      BOOL v18 = v3[6] == a1 && v3[7] == a2;
      if (v18 || (sub_1B6E334B8() & 1) != 0) {
        goto LABEL_7;
      }
      if (v4 == (void *)2) {
        return 0;
      }
      if (v3[8] == a1 && v3[9] == a2 || (sub_1B6E334B8() & 1) != 0)
      {
LABEL_7:
        uint64_t v8 = sub_1B69EFB10(a1, a2, v3);
        swift_bridgeObjectRetain();
        uint64_t v22 = sub_1B697517C();
        uint64_t v10 = v9;
        unint64_t v11 = (void *)(*(void *)(v2 + 48) + 40 * v8);
        uint64_t v12 = v11[4];
        unint64_t v13 = v11[5];
        uint64_t v14 = v11[6];
        uint64_t v15 = v11[7];
        uint64_t v16 = v11[8];
        _s11ParameterInCMa();
        int64_t v4 = (void *)swift_allocObject();
        swift_weakInit();
        swift_weakAssign();
        v4[3] = a1;
        v4[4] = a2;
        v4[5] = v22;
        v4[6] = v10;
        v4[7] = v12;
        v4[8] = v13;
        v4[9] = v14;
        v4[10] = v15;
        v4[11] = v16;
        sub_1B629C9E8(v12, v13);
        return v4;
      }
      uint64_t v19 = (char *)v4 - 3;
      if (v4 != (void *)3)
      {
        for (uint64_t i = v3 + 11; ; i += 2)
        {
          BOOL v21 = *(i - 1) == a1 && *i == a2;
          if (v21 || (sub_1B6E334B8() & 1) != 0) {
            break;
          }
          int64_t v4 = 0;
          if (!--v19) {
            return v4;
          }
        }
        goto LABEL_7;
      }
    }
    return 0;
  }
  return v4;
}

uint64_t sub_1B69753F0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  char v6 = v5;
  int v239 = a5;
  int v246 = a4;
  sub_1B62E17B4();
  v252 = v10;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v251 = (char *)&v237 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v250 = sub_1B6E31098();
  unint64_t v248 = *(void *)(v250 - 8);
  MEMORY[0x1F4188790](v250, v13);
  v249 = (char *)&v237 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v267 = *(unsigned __int8 *)(*a1 + 24);
  uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v277 = sub_1B67DF928(MEMORY[0x1E4FBC860]);
  swift_retain();
  uint64_t v242 = a2;
  sub_1B6978A18(a2, (uint64_t)a1, (uint64_t *)&v277, a3);
  uint64_t v260 = a3;
  uint64_t v261 = 0;
  swift_release();
  uint64_t v16 = v6[5];
  uint64_t v17 = *(void *)(v16 + 16);
  int v254 = v6;
  unint64_t v265 = a1;
  uint64_t v256 = v17;
  if (v17)
  {
    *(void *)&long long v253 = v16 + 32;
    uint64_t v247 = (const char *)v16;
    swift_bridgeObjectRetain_n();
    uint64_t v18 = 0;
    uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v20 = v6[5];
      uint64_t v21 = *(void *)(v20 + 16);
      if (!v21) {
        goto LABEL_5;
      }
      uint64_t v22 = a1;
      unint64_t v23 = (uint64_t *)(v253 + 16 * v18);
      uint64_t v25 = *v23;
      unint64_t v24 = (void *)v23[1];
      BOOL v26 = *(void *)(v20 + 32) == *v23 && *(void *)(v20 + 40) == (void)v24;
      uint64_t v266 = (void *)v23[1];
      uint64_t v263 = v25;
      uint64_t v264 = v18;
      if (v26)
      {
        v262 = v19;
      }
      else
      {
        if ((sub_1B6E334B8() & 1) == 0)
        {
          if (v21 == 1) {
            goto LABEL_38;
          }
          uint64_t v25 = v263;
          unint64_t v24 = v266;
          BOOL v57 = *(void *)(v20 + 48) == v263 && *(void *)(v20 + 56) == (void)v266;
          if (!v57 && (sub_1B6E334B8() & 1) == 0)
          {
            if (v21 == 2) {
              goto LABEL_38;
            }
            uint64_t v25 = v263;
            unint64_t v24 = v266;
            if ((*(void *)(v20 + 64) != v263 || *(void **)(v20 + 72) != v266) && (sub_1B6E334B8() & 1) == 0)
            {
              uint64_t v58 = v21 - 3;
              if (v21 == 3)
              {
LABEL_38:
                uint64_t v18 = v264;
                a1 = v22;
                goto LABEL_5;
              }
              uint64_t v59 = (void *)(v20 + 88);
              while (1)
              {
                uint64_t v25 = v263;
                unint64_t v24 = v266;
                if (*(v59 - 1) == v263 && *v59 == (void)v266) {
                  break;
                }
                unint64_t v258 = (unint64_t)v59;
                uint64_t v259 = v58;
                if (sub_1B6E334B8()) {
                  break;
                }
                uint64_t v59 = (void *)(v258 + 16);
                uint64_t v58 = v259 - 1;
                if (v259 == 1) {
                  goto LABEL_38;
                }
              }
            }
          }
        }
        char v27 = sub_1B6E334B8();
        v262 = v19;
        if ((v27 & 1) == 0)
        {
          uint64_t v28 = 0;
          long long v29 = (void *)(v20 + 56);
          uint64_t v30 = 1;
          while (v21 != v30)
          {
            ++v28;
            if (*(v29 - 1) == v25 && *v29 == (void)v24)
            {
              uint64_t v32 = v28;
              goto LABEL_23;
            }
            uint64_t v32 = v30++;
            v29 += 2;
            if (sub_1B6E334B8()) {
              goto LABEL_23;
            }
          }
        }
      }
      uint64_t v32 = 0;
LABEL_23:
      *(void *)&long long v281 = 1599362383;
      *((void *)&v281 + 1) = 0xE400000000000000;
      uint64_t v33 = v6[4];
      *(void *)&long long v294 = v6[3];
      *((void *)&v294 + 1) = v33;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      long long v34 = v281;
      unint64_t v35 = (void *)(v6[6] + 40 * v32);
      uint64_t v37 = v35[4];
      uint64_t v36 = v35[5];
      uint64_t v38 = v35[7];
      unint64_t v258 = v35[6];
      uint64_t v259 = v36;
      uint64_t v39 = v35[8];
      _s11ParameterInCMa();
      uint64_t v40 = swift_allocObject();
      uint64_t v257 = swift_weakInit();
      swift_weakAssign();
      *(void *)(v40 + 24) = v25;
      *(void *)(v40 + 32) = v24;
      uint64_t v255 = (void (**)(char *, char *, uint64_t))v34;
      *(_OWORD *)(v40 + 40) = v34;
      unint64_t v42 = v258;
      unint64_t v41 = v259;
      *(void *)(v40 + 56) = v37;
      *(void *)(v40 + 64) = v41;
      *(void *)(v40 + 72) = v42;
      *(void *)(v40 + 80) = v38;
      *(void *)(v40 + 88) = v39;
      unint64_t v43 = v277;
      uint64_t v44 = v277[2];
      sub_1B629C9E8(v37, v41);
      uint64_t v19 = v262;
      unint64_t v45 = v265;
      if (!v44) {
        goto LABEL_31;
      }
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_1B62B2CE0((uint64_t)v255, *((uint64_t *)&v34 + 1));
      if ((v47 & 1) == 0) {
        break;
      }
      uint64_t v48 = *(void *)(v43[7] + 8 * v46);
      swift_retain();
      swift_bridgeObjectRelease();
      char v6 = v254;
      int64_t v49 = sub_1B6975220(v263, (uint64_t)v266);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = sub_1B68C41B0(0, v19[2] + 1, 1, v19);
      }
      unint64_t v51 = v19[2];
      unint64_t v50 = v19[3];
      if (v51 >= v50 >> 1) {
        uint64_t v19 = sub_1B68C41B0(v50 > 1, v51 + 1, 1, v19);
      }
      v19[2] = v51 + 1;
      long long v52 = &v19[2 * v51];
      v52[4] = v49;
      v52[5] = v48;
      swift_setDeallocating();
      swift_weakDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B629DCAC(*(void *)(v40 + 56), *(void *)(v40 + 64));
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
      swift_release();
      a1 = v265;
LABEL_4:
      uint64_t v18 = v264;
LABEL_5:
      if (++v18 == v256)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_60;
      }
    }
    swift_bridgeObjectRelease();
LABEL_31:
    a1 = v45;
    if (*(unsigned char *)(*v45 + 161))
    {
      char v6 = v254;
      long long v53 = sub_1B6975220(v263, (uint64_t)v266);
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v19 = sub_1B68C41B0(0, v19[2] + 1, 1, v19);
      }
      unint64_t v55 = v19[2];
      unint64_t v54 = v19[3];
      if (v55 >= v54 >> 1) {
        uint64_t v19 = sub_1B68C41B0(v54 > 1, v55 + 1, 1, v19);
      }
      v19[2] = v55 + 1;
      uint64_t v56 = &v19[2 * v55];
      v56[4] = v53;
      v56[5] = 0;
      swift_setDeallocating();
      swift_weakDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B629DCAC(*(void *)(v40 + 56), *(void *)(v40 + 64));
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_setDeallocating();
      swift_weakDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B629DCAC(*(void *)(v40 + 56), *(void *)(v40 + 64));
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
      char v6 = v254;
    }
    goto LABEL_4;
  }
  uint64_t v19 = v15;
LABEL_60:
  v276 = v15;
  unint64_t v258 = (unint64_t)sub_1B6BD43FC();
  v262 = v19;
  if (v258)
  {
    uint64_t v61 = *(void *)(v258 + 16);
    if (!v61)
    {
      swift_bridgeObjectRelease();
      uint64_t v81 = v19[2];
      if (!v81) {
        goto LABEL_75;
      }
      goto LABEL_72;
    }
    uint64_t v62 = v258 + 104;
    uint64_t v63 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v259 = MEMORY[0x1E4FBC840] + 8;
    do
    {
      uint64_t v65 = *(void *)(v62 - 72);
      uint64_t v64 = *(void *)(v62 - 64);
      sub_1B62B31E8(v62, (uint64_t)&v294);
      sub_1B62B57A8(&v294, &v281);
      swift_dynamicCast();
      sub_1B629C678(v291, v292, v278);
      uint64_t v67 = v278[0];
      uint64_t v66 = v278[1];
      uint64_t v266 = (void *)v278[2];
      uint64_t v263 = v278[4];
      uint64_t v264 = v278[3];
      char v68 = sub_1B6E31A08();
      swift_bridgeObjectRetain();
      if (v68)
      {
        sub_1B6E318C8();
        sub_1B6E318F8();
        uint64_t v69 = sub_1B6E31A78();
        uint64_t v71 = v70;
        uint64_t v73 = v72;
        uint64_t v75 = v74;
        swift_bridgeObjectRelease();
        uint64_t v65 = MEMORY[0x1BA9B34C0](v69, v71, v73, v75);
        uint64_t v64 = v76;
        swift_bridgeObjectRelease();
        uint64_t v63 = v276;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v63 = sub_1B68C4F6C(0, v63[2] + 1, 1, v63);
      }
      unint64_t v78 = v63[2];
      unint64_t v77 = v63[3];
      if (v78 >= v77 >> 1) {
        uint64_t v63 = sub_1B68C4F6C(v77 > 1, v78 + 1, 1, v63);
      }
      v63[2] = v78 + 1;
      unint64_t v79 = &v63[8 * v78];
      v79[4] = v65;
      v79[5] = v64;
      v79[6] = v67;
      v79[7] = v66;
      uint64_t v80 = v264;
      v79[8] = v266;
      v79[9] = v80;
      v79[10] = v263;
      *((unsigned char *)v79 + 88) = 0;
      v62 += 104;
      v276 = v63;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease();
    uint64_t v19 = v262;
    a1 = v265;
  }
  uint64_t v81 = v19[2];
  if (!v81) {
    goto LABEL_75;
  }
LABEL_72:
  swift_bridgeObjectRetain();
  uint64_t v82 = v19 + 5;
  do
  {
    swift_retain();
    uint64_t v83 = swift_retain();
    sub_1B6978E2C(v83, &v276);
    swift_release();
    swift_release();
    v82 += 2;
    --v81;
  }
  while (v81);
  swift_bridgeObjectRelease();
LABEL_75:
  unint64_t v84 = *(void *)(*a1 + 120);
  if (v84 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v167 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v167 < 1) {
      goto LABEL_222;
    }
  }
  else if (*(uint64_t *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1)
  {
    goto LABEL_222;
  }
  uint64_t v274 = 0;
  unint64_t v275 = 0xE000000000000000;
  uint64_t v85 = v19[2];
  if (v85)
  {
    swift_bridgeObjectRetain();
    long long v86 = v19 + 5;
    do
    {
      if (*v86)
      {
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          long long v88 = (__objc2_class **)Strong;
          swift_retain();
          swift_retain();
          sub_1B6A19E2C(a1, v88, 1);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      v86 += 2;
      --v85;
    }
    while (v85);
    swift_bridgeObjectRelease();
  }
  unint64_t v273 = MEMORY[0x1E4FBC860];
  uint64_t v238 = *a1;
  unint64_t v89 = *(void *)(v238 + 112);
  if (v89 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v90 = sub_1B6E32C18();
    uint64_t v91 = v261;
    if (v90) {
      goto LABEL_86;
    }
  }
  else
  {
    uint64_t v90 = *(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    uint64_t v91 = v261;
    if (v90)
    {
LABEL_86:
      uint64_t v92 = 0;
      do
      {
        if ((v89 & 0xC000000000000001) != 0)
        {
          uint64_t v93 = MEMORY[0x1BA9B4580](v92, v89);
        }
        else
        {
          uint64_t v93 = *(void *)(v89 + 8 * v92 + 32);
          swift_retain();
        }
        ++v92;
        *(void *)&long long v281 = v93;
        sub_1B69779CC((uint64_t)&v281, &v273);
        swift_release();
      }
      while (v90 != v92);
      swift_bridgeObjectRelease_n();
      unint64_t v94 = v273;
      if (!(v273 >> 62)) {
        goto LABEL_92;
      }
      goto LABEL_170;
    }
  }
  swift_bridgeObjectRelease_n();
  unint64_t v94 = MEMORY[0x1E4FBC860];
  if (!(MEMORY[0x1E4FBC860] >> 62))
  {
LABEL_92:
    uint64_t v95 = *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    goto LABEL_93;
  }
LABEL_170:
  swift_bridgeObjectRetain_n();
  uint64_t v95 = sub_1B6E32C18();
LABEL_93:
  uint64_t v261 = v91;
  if (v95)
  {
    uint64_t v96 = 0;
    unint64_t v258 = v94 & 0xC000000000000001;
    uint64_t v255 = (void (**)(char *, char *, uint64_t))(v248 + 32);
    uint64_t v97 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v248 = (unint64_t)"};out = &#TEMP#[0]";
    uint64_t v247 = "CodeGenContext.typeAsCode: ";
    unint64_t v240 = 0x80000001B6F31720;
    unint64_t v241 = 0x80000001B6F31700;
    long long v253 = xmmword_1B6E77050;
    uint64_t v256 = v94;
    uint64_t v259 = v95;
    while (1)
    {
      uint64_t v264 = (uint64_t)v97;
      if (v258)
      {
        uint64_t v98 = MEMORY[0x1BA9B4580](v96, v94);
      }
      else
      {
        uint64_t v98 = *(void *)(v94 + 8 * v96 + 32);
        swift_retain();
      }
      swift_bridgeObjectRetain();
      uint64_t v99 = (void *)sub_1B6BDE8D8();
      uint64_t v101 = v100;
      swift_bridgeObjectRelease();
      sub_1B629C37C(v98 + 56, (uint64_t)v287);
      if (v267)
      {
        if (v267 != 1)
        {
          *(void *)&long long v281 = 8287;
          *((void *)&v281 + 1) = 0xE200000000000000;
          sub_1B6646D94(v287, (void (*)(void, void, void, void, void))sub_1B629C9E8);
          sub_1B6E31948();
          sub_1B6E31948();
          sub_1B629C37C((uint64_t)v287, (uint64_t)&v294);
          uint64_t v263 = v101;
          if (*((void *)&v294 + 1) >= 0x3BuLL)
          {
            if (*(void *)(v295 + 16) && (sub_1B69FA7C0(2u), (v123 & 1) != 0))
            {
              swift_bridgeObjectRetain();
              a1 = v265;
            }
            else
            {
              if (qword_1EB9852D0 != -1) {
                swift_once();
              }
              unint64_t v285 = 0;
              unint64_t v286 = 0xE000000000000000;
              uint64_t v266 = (void *)qword_1EB997FD0;
              swift_retain();
              sub_1B6E328C8();
              swift_bridgeObjectRelease();
              unint64_t v285 = 0xD00000000000001BLL;
              unint64_t v286 = v248 | 0x8000000000000000;
              swift_bridgeObjectRetain();
              sub_1B6E31948();
              swift_bridgeObjectRelease();
              sub_1B6E31948();
              sub_1B6E31948();
              unint64_t v136 = v285;
              unint64_t v137 = v286;
              char v138 = sub_1B6E32158();
              if (qword_1EB9854F8 != -1) {
                swift_once();
              }
              uint64_t v257 = v98;
              uint64_t v139 = qword_1EB997FF0;
              uint64_t v140 = qword_1EB985528;
              swift_retain();
              if (v140 != -1) {
                swift_once();
              }
              sub_1B67A36D0();
              uint64_t v141 = swift_allocObject();
              *(_OWORD *)(v141 + 16) = v253;
              *(void *)(v141 + 56) = MEMORY[0x1E4FBB1A0];
              *(void *)(v141 + 64) = sub_1B678615C();
              *(void *)(v141 + 32) = v136;
              *(void *)(v141 + 40) = v137;
              swift_bridgeObjectRetain();
              sub_1B6E31258();
              swift_bridgeObjectRelease();
              swift_retain();
              uint64_t v244 = v136;
              int v142 = v249;
              sub_1B6E31088();
              uint64_t v143 = v252[12];
              uint64_t v144 = v252[16];
              uint64_t v145 = v252[20];
              char v146 = v138;
              unint64_t v147 = v137;
              uint64_t v148 = (uint64_t)v251;
              uint64_t v245 = v139;
              uint64_t v149 = &v251[v145];
              (*v255)(v251, v142, v250);
              *(unsigned char *)(v148 + v143) = v146;
              *(void *)(v148 + v144) = 0;
              *(void *)uint64_t v149 = v244;
              *((void *)v149 + 1) = v147;
              swift_bridgeObjectRetain();
              sub_1B6E31368();
              swift_release();
              sub_1B67A3738(v148);
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              a1 = v265;
              unint64_t v94 = v256;
            }
          }
          else
          {
            sub_1B68A163C((uint64_t)v287);
          }
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          sub_1B6646D94(v287, (void (*)(void, void, void, void, void))sub_1B629DCAC);
          goto LABEL_143;
        }
        unint64_t v102 = *(void *)(v98 + 64);
        unint64_t v103 = 0xE000000000000000;
        if (v102 > 0x26)
        {
          uint64_t v105 = 0;
        }
        else
        {
          BOOL v104 = ((1 << v102) & 0x43A0000000) == 0;
          uint64_t v105 = 0x20646165726874;
          if (v104) {
            uint64_t v105 = 0;
          }
          if (!v104) {
            unint64_t v103 = 0xE700000000000000;
          }
        }
        uint64_t v266 = v99;
        *(void *)&long long v281 = v105;
        *((void *)&v281 + 1) = v103;
        sub_1B629C37C((uint64_t)v287, (uint64_t)v288);
        if (v289 >= 0x3B)
        {
          uint64_t v106 = *(void *)(v290 + 16);
          sub_1B6646D94(v287, (void (*)(void, void, void, void, void))sub_1B629C9E8);
          if (!v106 || (sub_1B69FA7C0(1u), (v107 & 1) == 0))
          {
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            unint64_t v285 = 0;
            unint64_t v286 = 0xE000000000000000;
            uint64_t v245 = qword_1EB997FD0;
            swift_retain();
            sub_1B6E328C8();
            swift_bridgeObjectRelease();
            unint64_t v285 = 0xD00000000000001BLL;
            unint64_t v286 = v248 | 0x8000000000000000;
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            sub_1B6E31948();
            unint64_t v108 = v285;
            unint64_t v109 = v286;
            char v110 = sub_1B6E32158();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            uint64_t v257 = v98;
            uint64_t v263 = v101;
            uint64_t v111 = qword_1EB997FF0;
            uint64_t v112 = qword_1EB985528;
            swift_retain();
            if (v112 != -1) {
              swift_once();
            }
            sub_1B67A36D0();
            uint64_t v113 = swift_allocObject();
            *(_OWORD *)(v113 + 16) = v253;
            *(void *)(v113 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v113 + 64) = sub_1B678615C();
            *(void *)(v113 + 32) = v108;
            *(void *)(v113 + 40) = v109;
            swift_bridgeObjectRetain();
            sub_1B6E31258();
            swift_bridgeObjectRelease();
            swift_retain();
            unint64_t v243 = v108;
            int v114 = v249;
            sub_1B6E31088();
            uint64_t v115 = v252[12];
            uint64_t v116 = v252[16];
            uint64_t v117 = v252[20];
            unint64_t v118 = v109;
            uint64_t v119 = (uint64_t)v251;
            uint64_t v244 = v111;
            uint64_t v120 = &v251[v117];
            (*v255)(v251, v114, v250);
            *(unsigned char *)(v119 + v115) = v110;
            *(void *)(v119 + v116) = 0;
            *(void *)uint64_t v120 = v243;
            *((void *)v120 + 1) = v118;
            swift_bridgeObjectRetain();
            sub_1B6E31368();
            swift_release();
            sub_1B67A3738(v119);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            a1 = v265;
            unint64_t v94 = v256;
            goto LABEL_134;
          }
          goto LABEL_123;
        }
        sub_1B6646D94(v287, (void (*)(void, void, void, void, void))sub_1B629C9E8);
        sub_1B68A1DAC((uint64_t)v287);
      }
      else
      {
        uint64_t v266 = v99;
        *(void *)&long long v281 = 0x2074736E6F63;
        *((void *)&v281 + 1) = 0xE600000000000000;
        sub_1B629C37C((uint64_t)v287, (uint64_t)&v291);
        if (v292 >= 0x3B)
        {
          uint64_t v121 = *(void *)(v293 + 16);
          sub_1B6646D94(v287, (void (*)(void, void, void, void, void))sub_1B629C9E8);
          if (!v121 || (sub_1B69FA7C0(0), (v122 & 1) == 0))
          {
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            unint64_t v285 = 0;
            unint64_t v286 = 0xE000000000000000;
            uint64_t v257 = qword_1EB997FD0;
            swift_retain();
            sub_1B6E328C8();
            swift_bridgeObjectRelease();
            unint64_t v285 = 0xD00000000000001BLL;
            unint64_t v286 = v241;
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            sub_1B6E31948();
            unint64_t v124 = v285;
            unint64_t v125 = v286;
            char v126 = sub_1B6E32158();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            uint64_t v263 = v101;
            uint64_t v127 = qword_1EB997FF0;
            uint64_t v128 = qword_1EB985528;
            swift_retain();
            if (v128 != -1) {
              swift_once();
            }
            sub_1B67A36D0();
            uint64_t v129 = swift_allocObject();
            *(_OWORD *)(v129 + 16) = v253;
            *(void *)(v129 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v129 + 64) = sub_1B678615C();
            *(void *)(v129 + 32) = v124;
            *(void *)(v129 + 40) = v125;
            swift_bridgeObjectRetain();
            sub_1B6E31258();
            swift_bridgeObjectRelease();
            swift_retain();
            uint64_t v244 = v124;
            uint64_t v130 = v249;
            sub_1B6E31088();
            uint64_t v131 = v252[12];
            uint64_t v245 = v127;
            unint64_t v243 = v252[16];
            char v132 = v126;
            unint64_t v133 = v125;
            uint64_t v134 = (uint64_t)v251;
            uint64_t v135 = &v251[v252[20]];
            (*v255)(v251, v130, v250);
            *(unsigned char *)(v134 + v131) = v132;
            *(void *)(v134 + v243) = 0;
            *(void *)uint64_t v135 = v244;
            *((void *)v135 + 1) = v133;
            swift_bridgeObjectRetain();
            sub_1B6E31368();
            swift_release();
            sub_1B67A3738(v134);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            a1 = v265;
            unint64_t v94 = v256;
            goto LABEL_134;
          }
LABEL_123:
          swift_bridgeObjectRetain();
          a1 = v265;
          goto LABEL_134;
        }
        sub_1B6646D94(v287, (void (*)(void, void, void, void, void))sub_1B629C9E8);
        sub_1B68A2434((uint64_t)v287);
      }
LABEL_134:
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      sub_1B6E31948();
      sub_1B6646D94(v287, (void (*)(void, void, void, void, void))sub_1B629DCAC);
LABEL_143:
      swift_bridgeObjectRelease();
      long long v150 = v281;
      uint64_t v97 = (void *)v264;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v97 = sub_1B6335858(0, v97[2] + 1, 1, v97);
      }
      unint64_t v152 = v97[2];
      unint64_t v151 = v97[3];
      if (v152 >= v151 >> 1) {
        uint64_t v97 = sub_1B6335858(v151 > 1, v152 + 1, 1, v97);
      }
      ++v96;
      v97[2] = v152 + 1;
      *(_OWORD *)&v97[2 * v152 + 4] = v150;
      swift_release();
      if (v259 == v96) {
        goto LABEL_153;
      }
    }
  }
  uint64_t v97 = (void *)MEMORY[0x1E4FBC860];
LABEL_153:
  swift_bridgeObjectRelease_n();
  unint64_t v153 = *(void *)(v238 + 120);
  if (!(v153 >> 62))
  {
    uint64_t v154 = *(void *)((v153 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    uint64_t v264 = (uint64_t)v97;
    if (v154) {
      goto LABEL_155;
    }
LABEL_172:
    uint64_t v266 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_173;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v154 = sub_1B6E32C18();
  uint64_t v264 = (uint64_t)v97;
  if (!v154) {
    goto LABEL_172;
  }
LABEL_155:
  uint64_t v155 = 0;
  uint64_t v266 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    if ((v153 & 0xC000000000000001) != 0)
    {
      uint64_t v156 = MEMORY[0x1BA9B4580](v155, v153);
    }
    else
    {
      uint64_t v156 = *(void *)(v153 + 8 * v155 + 32);
      swift_retain();
    }
    swift_bridgeObjectRetain();
    uint64_t v157 = sub_1B6BDE8D8();
    uint64_t v159 = v158;
    swift_bridgeObjectRelease();
    sub_1B629C37C(v156 + 56, (uint64_t)&v285);
    sub_1B6646D94(&v285, (void (*)(void, void, void, void, void))sub_1B629C9E8);
    uint64_t v160 = sub_1B68A8B00(v157, v159, (uint64_t)&v285, v267);
    uint64_t v162 = v161;
    sub_1B6646D94(&v285, (void (*)(void, void, void, void, void))sub_1B629DCAC);
    swift_bridgeObjectRelease();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v163 = v266;
    }
    else {
      uint64_t v163 = sub_1B6335858(0, v266[2] + 1, 1, v266);
    }
    unint64_t v165 = v163[2];
    unint64_t v164 = v163[3];
    if (v165 >= v164 >> 1) {
      uint64_t v163 = sub_1B6335858(v164 > 1, v165 + 1, 1, v163);
    }
    ++v155;
    v163[2] = v165 + 1;
    uint64_t v266 = v163;
    unint64_t v166 = &v163[2 * v165];
    v166[4] = v160;
    v166[5] = v162;
    swift_release();
    a1 = v265;
  }
  while (v154 != v155);
LABEL_173:
  swift_bridgeObjectRelease_n();
  if (v246 & 1) != 0 && (v239)
  {
    *((void *)&v282 + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v281 = 0;
    *((void *)&v281 + 1) = 0xE000000000000000;
    sub_1B6A3C61C(1701667182, 0xE400000000000000, (uint64_t)&v281, v280);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v281);
    sub_1B62B57A8(v280, &v281);
    swift_dynamicCast();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v168 = sub_1B6BDE8D8();
  uint64_t v170 = v169;
  uint64_t v171 = v262;
  swift_bridgeObjectRelease();
  uint64_t v172 = *a1;
  uint64_t v173 = *(void *)(*a1 + 48);
  if (v246)
  {
    swift_bridgeObjectRetain();
    uint64_t v174 = v264;
    swift_bridgeObjectRetain();
    uint64_t v175 = v266;
    swift_bridgeObjectRetain();
    sub_1B6895AB8(v168, v170, v173, v174, (uint64_t)v175, 0, 0, 1, 1, v267);
  }
  else
  {
    char v176 = *(unsigned char *)(v172 + 41);
    swift_bridgeObjectRetain();
    uint64_t v177 = v264;
    swift_bridgeObjectRetain();
    v178 = v266;
    swift_bridgeObjectRetain();
    sub_1B689568C(v168, v170, v173, v177, (uint64_t)v178, 0, 0, 0, 1, v176, v267);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v179 = *(void **)(v172 + 128);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v172 + 128) = v179;
  uint64_t v181 = v172;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v179 = sub_1B6335858(0, v179[2] + 1, 1, v179);
    *(void *)(v172 + 128) = v179;
  }
  unint64_t v183 = v179[2];
  unint64_t v182 = v179[3];
  if (v183 >= v182 >> 1)
  {
    uint64_t v179 = sub_1B6335858(v182 > 1, v183 + 1, 1, v179);
    *(void *)(v181 + 128) = v179;
  }
  v179[2] = v183 + 1;
  int v184 = &v179[2 * v183];
  v184[4] = 0;
  v184[5] = 0xE000000000000000;
  swift_release();
  unint64_t v185 = *(void *)(v181 + 112);
  if (v185 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v186 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v186 = *(void *)((v185 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v187 = v273;
  if (v273 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v188 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v188 = *(void *)((v273 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v257 = v187;
  unint64_t v258 = v181 + 24;
  if (v188 >= v186) {
    goto LABEL_200;
  }
  unint64_t v189 = *(void *)(v181 + 112);
  if (v189 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v190 = sub_1B6E32C18();
    if (v190)
    {
LABEL_191:
      uint64_t v191 = 0;
      do
      {
        if ((v189 & 0xC000000000000001) != 0)
        {
          uint64_t v192 = MEMORY[0x1BA9B4580](v191, v189);
        }
        else
        {
          uint64_t v192 = *(void *)(v189 + 8 * v191 + 32);
          swift_retain();
        }
        ++v191;
        *(void *)&long long v281 = v192;
        uint64_t v193 = v261;
        sub_1B6977BB4((uint64_t *)&v281, (uint64_t)&v273, (uint64_t)&v274, v260, v267, a1);
        uint64_t v261 = v193;
        swift_release();
      }
      while (v190 != v191);
    }
  }
  else
  {
    uint64_t v190 = *(void *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v190) {
      goto LABEL_191;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_200:
  long long v194 = *(_OWORD *)(v258 + 16);
  long long v281 = *(_OWORD *)v258;
  long long v282 = v194;
  long long v195 = *(_OWORD *)(v258 + 48);
  long long v283 = *(_OWORD *)(v258 + 32);
  long long v284 = v195;
  uint64_t v196 = *(void *)(v181 + 88);
  uint64_t v197 = *(void *)(v181 + 96);
  uint64_t v198 = v260;
  swift_retain();
  sub_1B6979094((uint64_t)&v281);
  swift_bridgeObjectRetain();
  v199 = sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
  char v200 = *(unsigned char *)(v181 + 161);
  _s7ContextC14GenerationDataCMa();
  swift_allocObject();
  uint64_t v201 = sub_1B6A22CA4(v198, &v281, v196, v197, (uint64_t)v199, v200);
  uint64_t v272 = v201;
  uint64_t v202 = (uint64_t)v254;
  sub_1B6A15684((uint64_t)&v272, (uint64_t)v254, v242);
  uint64_t v259 = v201;
  if (*(void *)(*(void *)(v201 + 128) + 16))
  {
    *(void *)&v280[0] = *(void *)(v201 + 128);
    sub_1B6385FEC(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    sub_1B6646D3C();
    swift_bridgeObjectRetain();
    uint64_t v203 = sub_1B6E31638();
    uint64_t v205 = v204;
    swift_bridgeObjectRelease();
    *(void *)&v280[0] = v203;
    *((void *)&v280[0] + 1) = v205;
    sub_1B6E31948();
  }
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  *(void *)&v280[0] = *(void *)(v181 + 128);
  sub_1B6385FEC(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  uint64_t v207 = v206;
  int v208 = (void (**)(char *, char *, uint64_t))sub_1B6646D3C();
  swift_bridgeObjectRetain();
  uint64_t v255 = v208;
  uint64_t v256 = v207;
  sub_1B6E31638();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  int v209 = (uint64_t *)v171[2];
  if (v209)
  {
    uint64_t v263 = v181;
    swift_bridgeObjectRetain();
    v210 = v171 + 5;
    uint64_t v211 = v263;
    do
    {
      uint64_t v220 = *v210;
      if (*v210)
      {
        unint64_t v265 = v209;
        uint64_t v221 = (void *)*(v210 - 1);
        unint64_t v222 = v221[4];
        uint64_t v270 = v221[3];
        unint64_t v271 = v222;
        uint64_t v268 = 46;
        unint64_t v269 = 0xE100000000000000;
        sub_1B633AF88();
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if (sub_1B6E32678())
        {
          swift_bridgeObjectRetain();
          uint64_t v223 = swift_bridgeObjectRetain();
          uint64_t v224 = v261;
          sub_1B6978C44(v223);
          uint64_t v261 = v224;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        sub_1B629C37C((uint64_t)(v221 + 7), (uint64_t)v279);
        uint64_t v212 = v221[5];
        uint64_t v213 = v221[6];
        sub_1B629C37C(v220 + 56, (uint64_t)v280);
        swift_retain();
        sub_1B6646D94(v279, (void (*)(void, void, void, void, void))sub_1B629C9E8);
        swift_bridgeObjectRetain();
        sub_1B6646D94(v280, (void (*)(void, void, void, void, void))sub_1B629C9E8);
        swift_bridgeObjectRetain();
        uint64_t v214 = sub_1B6BDE8D8();
        uint64_t v216 = v215;
        swift_release();
        swift_bridgeObjectRelease();
        swift_retain();
        uint64_t v217 = sub_1B6A34770(v279, v212, v213, (uint64_t)v280, v214, v216, v267, 0, v211);
        unint64_t v219 = v218;
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B6646D94(v280, (void (*)(void, void, void, void, void))sub_1B629DCAC);
        swift_bridgeObjectRelease();
        sub_1B6646D94(v279, (void (*)(void, void, void, void, void))sub_1B629DCAC);
        swift_bridgeObjectRelease();
        uint64_t v270 = v217;
        unint64_t v271 = v219;
        swift_bridgeObjectRetain();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release_n();
        int v209 = v265;
      }
      v210 += 2;
      int v209 = (uint64_t *)((char *)v209 - 1);
    }
    while (v209);
    swift_bridgeObjectRelease();
    uint64_t v202 = (uint64_t)v254;
    uint64_t v181 = v263;
  }
  uint64_t v225 = v259;
  *(void *)(v259 + 128) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  sub_1B6A1566C((uint64_t)&v272, v202, v242);
  sub_1B6A1541C(&v272, v202);
  uint64_t v226 = *(void *)(v225 + 128);
  if (*(void *)(v226 + 16))
  {
    uint64_t v270 = v226;
    swift_bridgeObjectRetain();
    uint64_t v227 = sub_1B6E31638();
    unint64_t v229 = v228;
    swift_bridgeObjectRelease();
    uint64_t v270 = v227;
    unint64_t v271 = v229;
    sub_1B6E31948();
  }
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v181 + 168) + 16))
  {
    uint64_t v270 = *(void *)(v181 + 168);
    swift_bridgeObjectRetain();
    uint64_t v230 = sub_1B6E31638();
    unint64_t v232 = v231;
    swift_bridgeObjectRelease();
    uint64_t v270 = v230;
    unint64_t v271 = v232;
    sub_1B6E31948();
  }
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  if (v246)
  {
    if (v267 > 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v233 = sub_1B6E334B8();
      swift_bridgeObjectRelease();
      if ((v233 & 1) == 0)
      {
        uint64_t v270 = 8200317;
        unint64_t v271 = 0xE300000000000000;
        sub_1B6E31948();
        swift_bridgeObjectRelease();
      }
    }
  }
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6385FEC(0, (unint64_t *)&qword_1EB980C90, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v234 = swift_allocObject();
  *(_OWORD *)(v234 + 16) = xmmword_1B6E77050;
  unint64_t v235 = v275;
  *(void *)(v234 + 32) = v274;
  *(void *)(v234 + 40) = v235;
  *(void *)(v181 + 128) = v234;
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v181 + 112) = v257;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_222:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69777DC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v10 = a1[4];
  if (*(unsigned char *)(*(void *)a2 + 65) != 1)
  {
    swift_retain();
    goto LABEL_8;
  }
  if (!v10)
  {
LABEL_8:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v19 = *(void *)(v11 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v19)
    {
      swift_bridgeObjectRetain();
      sub_1B62B2CE0(1701536102, 0xE400000000000000);
      char v20 = v12;
      swift_bridgeObjectRelease();
      if (v20)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
  }
LABEL_9:
  uint64_t v14 = *(void *)(a4 + 264);
  if (!*(void *)(v14 + 16)) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1B62B2CE0(v9, v8);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    goto LABEL_15;
  }
  uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_15:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *a3;
  *a3 = 0x8000000000000000;
  sub_1B67E74B4(v17, v7, v6, isUniquelyReferenced_nonNull_native);
  *a3 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B69779CC(uint64_t a1, void *a2)
{
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  swift_weakLoadStrong();
  uint64_t v12 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v11 = 0;
  *((void *)&v11 + 1) = 0xE000000000000000;
  sub_1B6A3C61C(1701667182, 0xE400000000000000, (uint64_t)&v11, v10);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v11);
  sub_1B62B57A8(v10, &v11);
  swift_dynamicCast();
  swift_release();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v4 = v13;
  uint64_t v3 = v14;
  swift_weakLoadStrong();
  char v5 = sub_1B6BD00F8();
  swift_release();
  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = swift_bridgeObjectRetain();
    uint64_t v7 = sub_1B6978474(v6, v4, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_release();
    if (v7) {
      return result;
    }
  }
  uint64_t v9 = swift_retain();
  MEMORY[0x1BA9B3870](v9);
  if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1B6E31C78();
  }
  sub_1B6E31CC8();
  return sub_1B6E31C48();
}

uint64_t sub_1B6977BB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v6 = *a1;
  swift_weakLoadStrong();
  uint64_t v7 = MEMORY[0x1E4FBB1A0];
  uint64_t v24 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v23 = 0;
  *((void *)&v23 + 1) = 0xE000000000000000;
  sub_1B6A3C61C(1701667182, 0xE400000000000000, (uint64_t)&v23, v22);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v23);
  sub_1B62B57A8(v22, &v23);
  swift_dynamicCast();
  swift_release();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_weakLoadStrong();
  uint64_t v24 = v7;
  *(void *)&long long v23 = 0;
  *((void *)&v23 + 1) = 0xE000000000000000;
  sub_1B6A3C61C(1701667182, 0xE400000000000000, (uint64_t)&v23, v22);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v23);
  sub_1B62B57A8(v22, &v23);
  swift_dynamicCast();
  swift_release();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_1B6978348(v8, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  unint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_1B6978474(v10, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v9)
  {
    uint64_t v12 = v9;
  }
  else
  {
    swift_retain();
    uint64_t v12 = v11;
  }
  uint64_t v14 = *(void *)(v6 + 40);
  uint64_t v13 = *(void *)(v6 + 48);
  if (v14 == *(void *)(v12 + 40) && v13 == *(void *)(v12 + 48) || (sub_1B6E334B8() & 1) != 0)
  {
    swift_retain();
    swift_release();
  }
  else
  {
    sub_1B629C37C(v6 + 56, (uint64_t)v22);
    sub_1B629C37C(v12 + 56, (uint64_t)&v23);
    swift_retain();
    sub_1B6646D94(v22, (void (*)(void, void, void, void, void))sub_1B629C9E8);
    swift_bridgeObjectRetain();
    sub_1B6646D94(&v23, (void (*)(void, void, void, void, void))sub_1B629C9E8);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_1B6BDE8D8();
    uint64_t v17 = v16;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v18 = *a6;
    swift_retain();
    uint64_t v25 = sub_1B6A34770(v22, v14, v13, (uint64_t)&v23, v15, v17, a5, 1, v18);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B6646D94(&v23, (void (*)(void, void, void, void, void))sub_1B629DCAC);
    swift_bridgeObjectRelease();
    sub_1B6646D94(v22, (void (*)(void, void, void, void, void))sub_1B629DCAC);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_1B6978030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  swift_weakLoadStrong();
  uint64_t v9 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v8 = 0;
  *((void *)&v8 + 1) = 0xE000000000000000;
  sub_1B6A3C61C(1701667182, 0xE400000000000000, (uint64_t)&v8, v7);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v8);
  sub_1B62B57A8(v7, &v8);
  swift_dynamicCast();
  swift_release();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  if (v10 == a2 && v11 == a3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1B69781C0(uint64_t a1)
{
  swift_allocObject();
  sub_1B62C1550(a1, (uint64_t)v4);
  uint64_t v2 = sub_1B6BD73F8(v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  return v2;
}

uint64_t sub_1B6978238()
{
  sub_1B6BD807C();

  return swift_deallocClassInstance();
}

uint64_t _s11ContextExitCMa()
{
  return self;
}

unint64_t sub_1B697828C()
{
  return sub_1B6974D98();
}

uint64_t sub_1B69782B0()
{
  sub_1B6E318F8();

  return sub_1B6E31A78();
}

uint64_t sub_1B6978348(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(a1 >> 62))
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1B6E32C18();
  if (!v7) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v8 = 0;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v9 = MEMORY[0x1BA9B4580](v8, a1);
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 8 * v8 + 32);
      swift_retain();
    }
    uint64_t v12 = v9;
    char v10 = sub_1B6978030((uint64_t)&v12, a2, a3);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v9;
    }
    if (v10) {
      break;
    }
    swift_release();
    if (v7 == ++v8) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B6978474(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = a3;
    uint64_t v6 = sub_1B6E32C18();
    if (v6) {
      goto LABEL_3;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_39;
  }
LABEL_3:
  uint64_t v47 = v3;
  uint64_t v7 = 0;
  uint64_t v30 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v31 = v6;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = MEMORY[0x1BA9B4580](v7, a1);
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 8 * v7 + 32);
      swift_retain();
    }
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    uint64_t Strong = swift_weakLoadStrong();
    v42[3] = MEMORY[0x1E4FBB1A0];
    v42[0] = 0;
    v42[1] = 0xE000000000000000;
    uint64_t v10 = *(void *)(Strong + 16);
    if (v10)
    {
      if (!*(void *)(v10 + 16)) {
        goto LABEL_9;
      }
    }
    else
    {
      *(void *)(Strong + 16) = sub_1B67DD080(MEMORY[0x1E4FBC860]);
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(Strong + 16);
      if (!*(void *)(v10 + 16))
      {
LABEL_9:
        if (v10) {
          goto LABEL_10;
        }
LABEL_15:
        *(void *)(Strong + 16) = sub_1B67DD080(MEMORY[0x1E4FBC860]);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRetain();
    sub_1B62B2CE0(1701667182, 0xE400000000000000);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_22;
    }
    if (!*(void *)(Strong + 16)) {
      goto LABEL_15;
    }
LABEL_10:
    sub_1B62CAAD8((uint64_t)v42, (uint64_t)v43);
    memset((char *)v35 + 8, 0, 32);
    *(void *)&long long v32 = 1701667182;
    *((void *)&v32 + 1) = 0xE400000000000000;
    sub_1B6A4943C(v43, v46);
    sub_1B629C37C((uint64_t)v46, (uint64_t)&v33);
    sub_1B69790E8((uint64_t)v35 + 8, (unint64_t *)&qword_1EB980F60, v30);
    sub_1B62B57A8(v43, (_OWORD *)((char *)v35 + 8));
    long long v38 = v34;
    long long v39 = v35[0];
    long long v40 = v35[1];
    uint64_t v41 = *(void *)&v35[2];
    long long v36 = v32;
    long long v37 = v33;
    if (*((void *)&v32 + 1))
    {
      long long v34 = v38;
      v35[0] = v39;
      v35[1] = v40;
      *(void *)&v35[2] = v41;
      long long v32 = v36;
      long long v33 = v37;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v43[0] = *(void *)(Strong + 16);
      *(void *)(Strong + 16) = 0x8000000000000000;
      sub_1B67E3A2C((uint64_t)&v32, 1701667182, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
      *(void *)(Strong + 16) = *(void *)&v43[0];
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B69790E8((uint64_t)&v36, (unint64_t *)&unk_1EB981180, (uint64_t)&_s8MetadataVN);
      swift_bridgeObjectRetain();
      unint64_t v14 = sub_1B62B2CE0(1701667182, 0xE400000000000000);
      char v16 = v15;
      swift_bridgeObjectRelease();
      if (v16)
      {
        char v17 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v18 = *(void *)(Strong + 16);
        *(void *)&v43[0] = v18;
        *(void *)(Strong + 16) = 0x8000000000000000;
        if ((v17 & 1) == 0)
        {
          sub_1B6ACB8DC();
          uint64_t v18 = *(void *)&v43[0];
        }
        swift_bridgeObjectRelease();
        uint64_t v19 = *(void *)(v18 + 56) + 88 * v14;
        long long v20 = *(_OWORD *)(v19 + 16);
        long long v32 = *(_OWORD *)v19;
        long long v33 = v20;
        long long v22 = *(_OWORD *)(v19 + 48);
        long long v21 = *(_OWORD *)(v19 + 64);
        long long v23 = *(_OWORD *)(v19 + 32);
        *(void *)&v35[2] = *(void *)(v19 + 80);
        v35[0] = v22;
        v35[1] = v21;
        long long v34 = v23;
        sub_1B6AC8328(v14, v18);
        *(void *)(Strong + 16) = v18;
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v35, 0, 40);
        long long v33 = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
      }
      sub_1B69790E8((uint64_t)&v32, (unint64_t *)&unk_1EB981180, (uint64_t)&_s8MetadataVN);
    }
LABEL_22:
    uint64_t v24 = *(void *)(Strong + 16);
    if (!v24) {
      goto LABEL_30;
    }
    if (!*(void *)(v24 + 16))
    {
      uint64_t v41 = 0;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v36 = 0u;
      swift_bridgeObjectRetain();
LABEL_29:
      sub_1B69790E8((uint64_t)&v36, (unint64_t *)&unk_1EB981180, (uint64_t)&_s8MetadataVN);
      swift_bridgeObjectRelease();
LABEL_30:
      memset(v43, 0, sizeof(v43));
      goto LABEL_31;
    }
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_1B62B2CE0(1701667182, 0xE400000000000000);
    if ((v26 & 1) == 0)
    {
      uint64_t v41 = 0;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v36 = 0u;
      goto LABEL_29;
    }
    sub_1B66459A4(*(void *)(v24 + 56) + 88 * v25, (uint64_t)&v36);
    if (!*((void *)&v36 + 1)) {
      goto LABEL_29;
    }
    sub_1B66459A4((uint64_t)&v36, (uint64_t)&v32);
    sub_1B69790E8((uint64_t)&v36, (unint64_t *)&unk_1EB981180, (uint64_t)&_s8MetadataVN);
    swift_bridgeObjectRelease();
    sub_1B62B31E8((uint64_t)v35 + 8, (uint64_t)v43);
    sub_1B666BD18((uint64_t)&v32);
LABEL_31:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v42);
    sub_1B62B57A8(v43, &v36);
    swift_dynamicCast();
    swift_release();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    if (v44 == a2 && v45 == v47) {
      break;
    }
    char v27 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_37;
    }
    swift_release();
    if (v31 == ++v7)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
LABEL_37:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B6978A18(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v5 = v4;
  uint64_t v26 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v15 = v14 | (v13 << 6);
  while (1)
  {
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v15);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    long long v21 = (uint64_t *)(*(void *)(a1 + 56) + 24 * v15);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = v21[2];
    v27[0] = v19;
    v27[1] = v20;
    v27[2] = v22;
    v27[3] = v23;
    v27[4] = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B69777DC(v27, a2, a3, v28);
    if (v5)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v16 = v13 + 1;
    if (v13 + 1 >= v12) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v26 + 8 * v16);
    if (!v17)
    {
      uint64_t v16 = v13 + 2;
      if (v13 + 2 >= v12) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v26 + 8 * v16);
      if (!v17)
      {
        uint64_t v16 = v13 + 3;
        if (v13 + 3 >= v12) {
          return swift_release();
        }
        unint64_t v17 = *(void *)(v26 + 8 * v16);
        if (!v17)
        {
          uint64_t v16 = v13 + 4;
          if (v13 + 4 >= v12) {
            return swift_release();
          }
          unint64_t v17 = *(void *)(v26 + 8 * v16);
          if (!v17)
          {
            uint64_t v16 = v13 + 5;
            if (v13 + 5 >= v12) {
              return swift_release();
            }
            unint64_t v17 = *(void *)(v26 + 8 * v16);
            if (!v17)
            {
              while (v12 - 6 != v13)
              {
                unint64_t v17 = *(void *)(a1 + 8 * v13++ + 112);
                if (v17)
                {
                  uint64_t v16 = v13 + 5;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    uint64_t v13 = v16;
  }
}

uint64_t sub_1B6978C44(uint64_t a1)
{
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    return 0;
  }
  uint64_t v1 = 0;
  for (uint64_t i = a1 + 80; ; i += 64)
  {
    uint64_t v4 = *(void *)(i - 48);
    unint64_t v3 = *(void *)(i - 40);
    uint64_t v5 = *(void *)(i - 32);
    unint64_t v6 = *(void *)(i - 24);
    swift_bridgeObjectRetain();
    unint64_t v16 = v6;
    sub_1B629C9E8(v5, v6);
    sub_1B633AF88();
    uint64_t v7 = (void *)sub_1B6E32688();
    if (v7[2])
    {
      unint64_t v9 = v7[4];
      unint64_t v8 = v7[5];
      uint64_t v11 = v7[6];
      uint64_t v10 = v7[7];
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v9 = 0;
      unint64_t v8 = 0;
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = (v3 & 0x2000000000000000) != 0 ? HIBYTE(v3) & 0xF : v4 & 0xFFFFFFFFFFFFLL;
    if (v4 == v11 && v10 == v3 && !(v9 >> 16) && v12 == v8 >> 16) {
      break;
    }
    char v13 = sub_1B6E33078();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B629DCAC(v5, v16);
    if (v13) {
      return v1;
    }
    if (v15 == ++v1) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B629DCAC(v5, v16);
  return v1;
}

uint64_t sub_1B6978E2C(uint64_t a1, void *a2)
{
  sub_1B633AF88();
  swift_bridgeObjectRetain();
  if ((sub_1B6E32678() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1B6978C44(v4);
  char v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v7)
  {
LABEL_8:
    swift_retain();
    sub_1B6AB47C4(a1);
    return swift_release();
  }
  uint64_t v8 = v5 << 6;
  uint64_t v9 = *a2 + (v5 << 6);
  uint64_t v10 = *(void *)(v9 + 48);
  unint64_t v11 = *(void *)(v9 + 56);
  char v12 = *(unsigned char *)(v9 + 88);
  swift_bridgeObjectRetain();
  sub_1B629C9E8(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1B629DCAC(v10, v11);
  if (v12) {
    return result;
  }
  unint64_t v14 = (void *)*a2;
  uint64_t v15 = (void *)(*a2 + v8);
  uint64_t v16 = v15[5];
  uint64_t v27 = v15[4];
  uint64_t v17 = v15[6];
  unint64_t v18 = v15[7];
  uint64_t v20 = v15[8];
  uint64_t v19 = v15[9];
  uint64_t v21 = v15[10];
  swift_bridgeObjectRetain();
  unint64_t v28 = v18;
  sub_1B629C9E8(v17, v18);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v14 = sub_1B6C168DC(v14);
  }
  *((unsigned char *)v14 + v8 + 88) = 1;
  *a2 = v14;
  uint64_t v23 = sub_1B697517C();
  uint64_t v25 = v24;
  _s11ParameterInCMa();
  uint64_t v26 = (void *)swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  v26[3] = v27;
  v26[4] = v16;
  v26[5] = v23;
  v26[6] = v25;
  v26[7] = v17;
  v26[8] = v28;
  v26[9] = v20;
  v26[10] = v19;
  v26[11] = v21;
  swift_retain();
  sub_1B6AB47C4((uint64_t)v26);
  swift_release();
  return swift_release();
}

uint64_t sub_1B6979094(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B69790E8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  sub_1B6385FEC(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1B6979158(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _s12ChunkFiltersVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t _s12ChunkFiltersVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *_s12ChunkFiltersVMa()
{
  return &_s12ChunkFiltersVN;
}

uint64_t sub_1B6979248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a7 + 8) + 88))(a2, a3, a6, *(void *)(a7 + 8));
  if (result)
  {
    uint64_t v10 = v7[24];
    if (v10)
    {
      uint64_t v11 = v7[26];
      uint64_t v12 = 8 * (a1 >> 6);
      *(void *)(v10 + v12) |= 1 << a1;
      *(void *)(v11 + v12) &= ~(1 << a1);
    }
    return sub_1B635AD78(v7[5], (uint64_t)v7, a1);
  }
  return result;
}

uint64_t sub_1B69792FC()
{
  return swift_initClassMetadata2();
}

BOOL sub_1B6979350()
{
  sub_1B6E31118();
  swift_getFunctionTypeMetadata1();
  sub_1B6966E04();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_1B6E31528();
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t sub_1B69793F0()
{
  return sub_1B6E31558();
}

uint64_t sub_1B6979480()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EventSource()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B69794D8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B697951C()
{
  return sub_1B69793EC() & 1;
}

uint64_t sub_1B6979544()
{
  return sub_1B69793F0();
}

uint64_t sub_1B6979568()
{
  sub_1B62C6A50(*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DelegateEventSource()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B69795B8()
{
  return sub_1B6E31358();
}

id sub_1B69795DC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  objc_msgSend(v1, sel_lock);
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    sub_1B6979BF4(v0 + 32, (uint64_t)&v11);
    if (v12)
    {
      sub_1B62C15C4(&v11, (uint64_t)v13);
      uint64_t v2 = v14;
      uint64_t v3 = v15;
      sub_1B62C14BC(v13, v14);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3) & 1) == 0)
      {
        uint64_t v4 = v14;
        uint64_t v5 = v15;
        sub_1B62C550C((uint64_t)v13, v14);
        (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
    }
    else
    {
      sub_1B6979D08((uint64_t)&v11, (uint64_t (*)(void))sub_1B6979C58);
    }
    sub_1B6979BF4(v0 + 72, (uint64_t)&v11);
    if (v12)
    {
      sub_1B62C15C4(&v11, (uint64_t)v13);
      uint64_t v6 = v14;
      uint64_t v7 = v15;
      sub_1B62C14BC(v13, v14);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7) & 1) == 0)
      {
        uint64_t v8 = v14;
        uint64_t v9 = v15;
        sub_1B62C550C((uint64_t)v13, v14);
        (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
    }
    else
    {
      sub_1B6979D08((uint64_t)&v11, (uint64_t (*)(void))sub_1B6979C58);
    }
  }
  return objc_msgSend(v1, sel_unlock);
}

id (*sub_1B697979C(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return sub_1B69797C0;
}

id sub_1B69797C0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_1B69795DC();
  }
  return result;
}

id sub_1B69797EC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  objc_msgSend(v1, sel_lock);
  if ((*(unsigned char *)(v0 + 16) & 1) == 0)
  {
    uint64_t v3 = sub_1B697979C(v11);
    uint64_t v4 = *(void *)(v2 + 24);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      sub_1B62C550C(v2, *(void *)(v2 + 24));
      (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    }
    v3((uint64_t)v11, 0);
    uint64_t v7 = sub_1B697979C(v11);
    uint64_t v8 = *(void *)(v6 + 64);
    if (v8)
    {
      uint64_t v9 = *(void *)(v6 + 72);
      sub_1B62C550C(v6 + 40, *(void *)(v6 + 64));
      (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    }
    v7((uint64_t)v11, 0);
    *(unsigned char *)(v0 + 16) = 1;
  }
  return objc_msgSend(v1, sel_unlock);
}

uint64_t sub_1B6979920()
{
  sub_1B6979D08(v0 + 32, (uint64_t (*)(void))sub_1B6979D68);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CancelTuple()
{
  return self;
}

id sub_1B6979998()
{
  return sub_1B69797EC();
}

id sub_1B69799BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 24);
  objc_msgSend(v2, sel_lock);
  if ((*(unsigned char *)(v0 + 16) & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(v0 + 32) + 16);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v5 = *(void **)(v1 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v1 + 32) = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v5 = sub_1B6C1675C(v5);
          *(void *)(v1 + 32) = v5;
        }
        uint64_t v7 = &v5[5 * i];
        uint64_t v8 = v7[7];
        uint64_t v9 = v7[8];
        sub_1B62C550C((uint64_t)(v7 + 4), v8);
        (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
        objc_msgSend(v2, sel_lock);
        if (*(unsigned char *)(v1 + 16) == 1)
        {
          uint64_t v10 = *(void **)(v1 + 32);
          uint64_t v11 = v10[2];
          if (v11)
          {
            uint64_t v12 = 0;
            do
            {
              char v13 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v1 + 32) = v10;
              if ((v13 & 1) == 0)
              {
                uint64_t v10 = sub_1B6C1675C(v10);
                *(void *)(v1 + 32) = v10;
              }
              uint64_t v14 = v10[v12 + 7];
              uint64_t v15 = v10[v12 + 8];
              sub_1B62C550C((uint64_t)&v10[v12 + 4], v14);
              (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
              uint64_t v10 = *(void **)(v1 + 32);
              v12 += 5;
              --v11;
            }
            while (v11);
          }
        }
        objc_msgSend(v2, sel_unlock);
      }
    }
    *(unsigned char *)(v1 + 16) = 1;
  }

  return objc_msgSend(v2, sel_unlock);
}

uint64_t sub_1B6979B60()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CancelList()
{
  return self;
}

uint64_t sub_1B6979BC4()
{
  return *(unsigned __int8 *)(*(void *)v0 + 16);
}

id sub_1B6979BD0()
{
  return sub_1B69799BC();
}

uint64_t sub_1B6979BF4(uint64_t a1, uint64_t a2)
{
  sub_1B6979C58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B6979C58()
{
  if (!qword_1E9DD2F40)
  {
    sub_1B6979CB0();
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD2F40);
    }
  }
}

unint64_t sub_1B6979CB0()
{
  unint64_t result = qword_1E9DD1D00;
  if (!qword_1E9DD1D00)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9DD1D00);
  }
  return result;
}

uint64_t sub_1B6979D08(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1B6979D68()
{
  if (!qword_1E9DD2F48)
  {
    sub_1B6979C58();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DD2F48);
    }
  }
}

uint64_t sub_1B6979DD0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(v1 + 28);
  uint64_t v3 = *(unsigned int *)(v1 + 32);
  if (v2 != -1 || v3 != 0) {
    return sub_1B62EBE70(v2 | (v3 << 32), &v10);
  }
  if (!*(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v7 = *(void *)(v1 + 16);
  char v8 = *(unsigned char *)(v1 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1B6A7CBB0(v6, v7, v8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v9;
}

uint64_t sub_1B6979EB0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB62B8(*a1, *a2);
}

uint64_t sub_1B6979EBC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6979F68()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B697A000()
{
  return sub_1B6E33988();
}

uint64_t sub_1B697A0A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B697B48C();
  *a1 = result;
  return result;
}

void sub_1B697A0D8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEB000000006E6F69;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1886216562;
  if (v2 != 1)
  {
    uint64_t v5 = 0x4173746365666661;
    unint64_t v4 = 0xEC0000006168706CLL;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7469736F706D6F63;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B697A140@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B697B48C();
  *a1 = result;
  return result;
}

uint64_t sub_1B697A168(uint64_t a1)
{
  unint64_t v2 = sub_1B63B09BC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B697A1A4(uint64_t a1)
{
  unint64_t v2 = sub_1B63B09BC();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B697A1E0(uint64_t *a1)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  swift_retain();
  uint64_t v3 = a1[1];
  swift_retain();
  sub_1B695F0A8(v3, (uint64_t)&v155);
  swift_release();
  uint64_t v4 = v156;
  if (v156)
  {
    uint64_t v5 = v159;
    uint64_t v7 = v157;
    char v6 = v158;
    unsigned int v109 = v155;
    float v8 = *((float *)&v155 + 1);
    uint64_t v9 = (v158 >> 8) & 1;
    unint64_t v10 = HIDWORD(v158);
  }
  else
  {
    sub_1B697B264((uint64_t)v113);
    unsigned int v109 = v113[0];
    float v8 = v114;
    uint64_t v4 = v115;
    uint64_t v7 = v116;
    char v6 = v117;
    LODWORD(v9) = v118;
    LODWORD(v10) = v119;
    uint64_t v5 = v120;
  }
  if (v10 != -1 || v5 != 0)
  {
    sub_1B6CEE8E8(v10 | (unint64_t)(v5 << 32), &v128);
    uint64_t v12 = v128.i64[1];
    uint64_t v13 = v128.i64[0];
    uint64_t v14 = v129;
    uint64_t v15 = v130;
    uint64_t v16 = v131;
    uint64_t v17 = v132;
    uint64_t v18 = v133;
    uint64_t v19 = v134;
    uint64_t v20 = v135;
    uint64_t v21 = v136;
    uint64_t v22 = v137;
    uint64_t v23 = v138;
    uint64_t v24 = v139;
    uint64_t v25 = v140;
    uint64_t v26 = v141;
    if (v141) {
      goto LABEL_9;
    }
LABEL_60:
    swift_release();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  if (!*(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer)) {
    goto LABEL_60;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6A7C7BC(v4, v7, v6, (uint64_t)&v128);
  uint64_t v101 = v128.i64[1];
  uint64_t v85 = v129;
  uint64_t v87 = v130;
  uint64_t v89 = v131;
  uint64_t v91 = v132;
  uint64_t v81 = v128.i64[0];
  uint64_t v83 = v133;
  uint64_t v93 = v134;
  uint64_t v77 = v136;
  uint64_t v79 = v135;
  uint64_t v32 = v137;
  uint64_t v33 = v138;
  uint64_t v34 = v139;
  uint64_t v25 = v140;
  uint64_t v35 = v141;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = v91;
  uint64_t v19 = v93;
  uint64_t v26 = v35;
  uint64_t v24 = v34;
  uint64_t v23 = v33;
  uint64_t v22 = v32;
  uint64_t v21 = v77;
  uint64_t v20 = v79;
  uint64_t v14 = v85;
  uint64_t v15 = v87;
  uint64_t v12 = v101;
  uint64_t v13 = v81;
  uint64_t v18 = v83;
  uint64_t v16 = v89;
  if (!v26) {
    goto LABEL_60;
  }
LABEL_9:
  uint64_t v74 = v2;
  uint64_t v155 = v13;
  uint64_t v156 = v12;
  uint64_t v100 = v12;
  uint64_t v157 = v14;
  LOBYTE(v158) = v15 & 1;
  uint64_t v159 = v16;
  __int16 v160 = v17;
  char v161 = BYTE2(v17) & 1;
  uint64_t v162 = v18;
  uint64_t v163 = v19;
  uint64_t v164 = v20;
  uint64_t v165 = v21;
  uint64_t v166 = v22;
  uint64_t v167 = v23;
  uint64_t v168 = v24;
  __int16 v169 = v25;
  char v170 = BYTE2(v25);
  char v171 = BYTE3(v25);
  uint64_t v172 = v26;
  uint64_t v86 = v15;
  uint64_t v88 = v16;
  uint64_t v84 = v14;
  uint64_t v27 = v21;
  uint64_t v28 = v24;
  uint64_t v29 = v26;
  uint64_t v90 = v17;
  uint64_t v92 = v19;
  uint64_t v30 = v18;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6AFF0F4((uint64_t)&v155, 1, 1, (uint64_t)v142);
  uint64_t v72 = v28;
  uint64_t v73 = v23;
  uint64_t v76 = v27;
  uint64_t v78 = v20;
  uint64_t v80 = v13;
  uint64_t v82 = v30;
  sub_1B6657748(v13, v100, v84, v86, v88, v90, v30, v92, v20, v27, v22, v23, v28, v25, v29);
  sub_1B697B3F8((uint64_t)v142, (uint64_t)&v151);
  if (*((void *)&v152 + 1) == 1)
  {
    sub_1B6657748(v13, v100, v84, v86, v88, v90, v30, v92, v20, v27, v22, v23, v28, v25, v29);
    swift_release();
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  uint64_t v68 = v29;
  uint64_t v69 = v25;
  uint64_t v70 = v22;
  long long v125 = v151;
  long long v126 = v152;
  uint64_t v127 = v153;
  v36.i32[1] = 0;
  *(float *)v36.i32 = fminf(fmaxf(v8, 0.0), 1.0);
  if (v109 != 3) {
    *(float *)v36.i32 = v8;
  }
  int32x2_t v108 = v36;
  long long v37 = *(_OWORD *)(v107 + 32);
  v123[0] = *(_OWORD *)(v107 + 16);
  v123[1] = v37;
  uint64_t v124 = *(void *)(v107 + 48);
  sub_1B62C9DA8(v74, (uint64_t)v123, 0x200000000, v143);
  sub_1B62CA210((uint64_t)v143, (uint64_t)v144, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v144[0])
  {
    if (v150 <= 0)
    {
      sub_1B6657794(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
      sub_1B6657748(v13, v100, v84, v86, v88, v90, v30, v92, v20, v27, v22, v23, v28, v25, v29);
      swift_release();
      sub_1B6657794(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v99 = v147;
      if (v147)
      {
        char v38 = *(unsigned char *)(v148 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v39 = v149[4];
        v121[0] = v144[0];
        v121[1] = v144[1];
        uint64_t v122 = v145;
        uint64_t v97 = (uint64_t)(v149 + 6);
        uint64_t v98 = v146;
        uint64_t v105 = v149;
        uint64_t v96 = v149 + 8;
        float32x2_t v106 = (float32x2_t)vdupq_lane_s32(v108, 0).u64[0];
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = v109;
        char v95 = v38;
        uint64_t v94 = v39;
        while (1)
        {
          uint64_t v104 = v40;
          unint64_t v43 = (unsigned int *)(v98 + 48 * v40);
          uint64_t v103 = *v43;
          uint64_t v102 = v43[1];
          unint64_t v45 = (uint64_t *)*((void *)v43 + 2);
          uint64_t v44 = *((void *)v43 + 3);
          uint64_t v46 = *((void *)v43 + 4);
          uint64_t v47 = *((void *)v43 + 5);
          uint64_t v110 = v41;
          if (v38)
          {
            uint64_t v48 = *(os_unfair_lock_s **)(v47 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v48);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v47 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v39);
          sub_1B62CA210(v97, (uint64_t)v154, &qword_1EB97DE20);
          uint64_t v49 = v105[4];
          uint64_t v50 = *(void *)(*(void *)(*(void *)(*(void *)(v47 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v105[6] = ecs_stack_allocator_allocate(v49, 48 * v50, 8);
          v105[7] = v50;
          v96[1] = 0;
          v96[2] = 0;
          *uint64_t v96 = 0;
          swift_release();
          unint64_t v51 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v45, v44, v46, (uint64_t)v105);
          uint64_t v52 = sub_1B62C9024((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1F0F56330, v45, v44, v46, (uint64_t)v105);
          long long v53 = (float *)v52;
          if (v45)
          {
            uint64_t v41 = v110;
            if (v46)
            {
              uint64_t v54 = v104;
              float32x4_t v55 = v75;
              do
              {
                float32x4_t v111 = v55;
                (*((void (**)(long long *, float))&v126 + 1))(&v125, *v53);
                if (v9)
                {
                  float32x4_t v55 = v111;
                  switch(v42)
                  {
                    case 1:
                      float32x4_t v57 = vaddq_f32(vmulq_n_f32(v58, *(float *)v108.i32), *v51);
                      break;
                    case 2:
                      float32x4_t v57 = vmulq_f32(vmulq_n_f32(v58, *(float *)v108.i32), *v51);
                      break;
                    case 3:
                      float32x4_t v57 = vaddq_f32(*v51, vmulq_n_f32(vsubq_f32(v58, *v51), *(float *)v108.i32));
                      break;
                    default:
                      float32x4_t v57 = vmulq_n_f32(v58, *(float *)v108.i32);
                      break;
                  }
                }
                else
                {
                  float32x4_t v59 = *v51;
                  float32x4_t v55 = *v51;
                  v55.i32[3] = v111.i32[3];
                  switch(v42)
                  {
                    case 1:
                      float32x4_t v57 = vaddq_f32(v55, vmulq_n_f32(v58, *(float *)v108.i32));
                      break;
                    case 2:
                      float32x4_t v57 = vmulq_f32(v55, vmulq_n_f32(v58, *(float *)v108.i32));
                      break;
                    case 3:
                      float32x4_t v57 = vsubq_f32(v58, v59);
                      float v56 = vmuls_lane_f32(*(float *)v108.i32, v57, 2);
                      *(float32x2_t *)v57.f32 = vadd_f32(*(float32x2_t *)v59.f32, vmul_f32(v106, *(float32x2_t *)v57.f32));
                      v57.f32[2] = v59.f32[2] + v56;
                      break;
                    default:
                      float32x4_t v57 = vmulq_n_f32(v58, *(float *)v108.i32);
                      break;
                  }
                  v57.i32[3] = HIDWORD(*(unsigned long long *)v51);
                }
                *v51++ = v57;
                ++v53;
                --v46;
              }
              while (v46);
              float32x4_t v75 = v55;
              char v38 = v95;
              uint64_t v39 = v94;
              goto LABEL_58;
            }
          }
          else
          {
            uint64_t v41 = v110;
            if (v103 != v102)
            {
              uint64_t v60 = v102 - v103;
              uint64_t v61 = (float *)(v52 + 4 * v103);
              uint64_t v62 = &v51[v103];
              char v38 = v95;
              uint64_t v39 = v94;
              uint64_t v54 = v104;
              float32x4_t v63 = v71;
              do
              {
                float32x4_t v112 = v63;
                (*((void (**)(long long *, float))&v126 + 1))(&v125, *v61);
                if (v9)
                {
                  float32x4_t v63 = v112;
                  switch(v42)
                  {
                    case 1:
                      float32x4_t v65 = vaddq_f32(vmulq_n_f32(v66, *(float *)v108.i32), *v62);
                      break;
                    case 2:
                      float32x4_t v65 = vmulq_f32(vmulq_n_f32(v66, *(float *)v108.i32), *v62);
                      break;
                    case 3:
                      float32x4_t v65 = vaddq_f32(*v62, vmulq_n_f32(vsubq_f32(v66, *v62), *(float *)v108.i32));
                      break;
                    default:
                      float32x4_t v65 = vmulq_n_f32(v66, *(float *)v108.i32);
                      break;
                  }
                }
                else
                {
                  float32x4_t v67 = *v62;
                  float32x4_t v63 = *v62;
                  v63.i32[3] = v112.i32[3];
                  switch(v42)
                  {
                    case 1:
                      float32x4_t v65 = vaddq_f32(v63, vmulq_n_f32(v66, *(float *)v108.i32));
                      break;
                    case 2:
                      float32x4_t v65 = vmulq_f32(v63, vmulq_n_f32(v66, *(float *)v108.i32));
                      break;
                    case 3:
                      float32x4_t v65 = vsubq_f32(v66, v67);
                      float v64 = vmuls_lane_f32(*(float *)v108.i32, v65, 2);
                      *(float32x2_t *)v65.f32 = vadd_f32(*(float32x2_t *)v67.f32, vmul_f32(v106, *(float32x2_t *)v65.f32));
                      v65.f32[2] = v67.f32[2] + v64;
                      break;
                    default:
                      float32x4_t v65 = vmulq_n_f32(v66, *(float *)v108.i32);
                      break;
                  }
                  v65.i32[3] = HIDWORD(*(unsigned long long *)v62);
                }
                *v62++ = v65;
                ++v61;
                --v60;
              }
              while (v60);
              float32x4_t v71 = v63;
              goto LABEL_58;
            }
          }
          char v38 = v95;
          uint64_t v39 = v94;
          uint64_t v54 = v104;
LABEL_58:
          sub_1B6345178(v105, (unsigned __int16 **)v121, (uint64_t)v154);
          sub_1B634507C((char *)v47);
          ecs_stack_allocator_pop_snapshot(v39);
          if (v38)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v47 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v47 + 376));
          }
          swift_release();
          uint64_t v40 = v54 + 1;
          if (v40 == v99)
          {
            sub_1B6657748(v80, v100, v84, v86, v88, v90, v82, v92, v78, v76, v70, v73, v72, v69, v68);
            swift_release();
            goto LABEL_67;
          }
        }
      }
      sub_1B6657794(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
      sub_1B6657748(v13, v100, v84, v86, v88, v90, v30, v92, v20, v27, v22, v23, v28, v25, v29);
      swift_release();
LABEL_67:
      sub_1B6657794(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return sub_1B6657794(v143, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  else
  {
    sub_1B6657748(v13, v100, v84, v86, v88, v90, v30, v92, v20, v27, v22, v23, v28, v25, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)swift_release();
  }
}

uint64_t type metadata accessor for ParticleColorOverLife.System()
{
  return self;
}

uint64_t sub_1B697AE68(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6395A90(0, &qword_1E9DD2F50, (uint64_t (*)(void))sub_1B63B09BC, (uint64_t)&type metadata for ParticleColorOverLife.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)v14 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B63B09BC();
  sub_1B6E33A88();
  v14[0] = *(void *)v3;
  char v16 = 0;
  sub_1B67FEC7C();
  sub_1B6E32FA8();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + 8);
    char v12 = *(unsigned char *)(v3 + 24);
    uint64_t v18 = *(void *)(v3 + 16);
    uint64_t v17 = v11;
    v14[0] = v11;
    v14[1] = v18;
    char v15 = v12;
    char v16 = 1;
    sub_1B697B9BC(v3);
    sub_1B697B9F4();
    sub_1B6E32FA8();
    sub_1B62D8C3C((uint64_t)&v17);
    sub_1B62D8C3C((uint64_t)&v18);
    LOBYTE(v14[0]) = 2;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B697B090(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  long long v3 = *(_OWORD *)(a1 + 104);
  long long v8 = *(_OWORD *)(a1 + 88);
  long long v9 = v3;
  uint64_t v10 = *(void *)(a1 + 120);
  sub_1B663DFF8((uint64_t)v6);
  sub_1B62F648C(a1);
  long long v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(void *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B697B118()
{
  return "ParticleColorOverLife";
}

uint64_t sub_1B697B12C(void *a1)
{
  return sub_1B697AE68(a1);
}

uint64_t sub_1B697B168()
{
  return sub_1B697B4D8();
}

uint64_t sub_1B697B1A4()
{
  return type metadata accessor for ParticleColorOverLife.System();
}

double sub_1B697B1C4@<D0>(uint64_t a1@<X8>)
{
  sub_1B697B264((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t type metadata accessor for ParticleColorOverLife.GPUSystem()
{
  return self;
}

const char *sub_1B697B230()
{
  return "ParticleColorOverLife.GPU";
}

uint64_t sub_1B697B244()
{
  return type metadata accessor for ParticleColorOverLife.GPUSystem();
}

double sub_1B697B264@<D0>(uint64_t a1@<X8>)
{
  sub_1B62D2A54(0, (unint64_t *)&unk_1EB980D90, (uint64_t (*)(uint64_t))sub_1B6395D64, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76900;
  simd_float4 v3 = _simd_pow_f4((simd_float4)xmmword_1B6E976C0, (simd_float4)xmmword_1B6E72D40);
  v3.i32[3] = 0;
  *(simd_float4 *)(v2 + 32) = v3;
  *(_DWORD *)(v2 + 48) = 0;
  simd_float4 v4 = _simd_pow_f4((simd_float4)xmmword_1B6E976D0, (simd_float4)xmmword_1B6E72D40);
  v4.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 64) = v4;
  *(_DWORD *)(v2 + 80) = 1048576000;
  simd_float4 v5 = _simd_pow_f4((simd_float4)xmmword_1B6E976E0, (simd_float4)xmmword_1B6E72D40);
  v5.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 96) = v5;
  *(_DWORD *)(v2 + 112) = 1056964608;
  simd_float4 v6 = _simd_pow_f4((simd_float4)xmmword_1B6E976F0, (simd_float4)xmmword_1B6E72D40);
  v6.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 128) = v6;
  *(_DWORD *)(v2 + 144) = 1061158912;
  simd_float4 v7 = _simd_pow_f4((simd_float4)xmmword_1B6E97700, (simd_float4)xmmword_1B6E72D40);
  v7.i32[3] = 0;
  *(simd_float4 *)(v2 + 160) = v7;
  *(_DWORD *)(v2 + 176) = 1065353216;
  uint64_t v8 = sub_1B6397618(v2);
  swift_setDeallocating();
  swift_deallocClassInstance();
  long long v9 = sub_1B639EA20(v8);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 1065353216;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  *(_WORD *)(a1 + 24) = 257;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_1B697B3F8(uint64_t a1, uint64_t a2)
{
  sub_1B62D2A54(0, &qword_1EB9811E0, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler1d, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B697B48C()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B697B4D8()
{
  int v1 = *v0;
  sub_1B62D2A54(0, (unint64_t *)&qword_1EB980BA0, (uint64_t (*)(uint64_t))sub_1B663C11C, MEMORY[0x1E4FBBE00]);
  uint64_t result = swift_allocObject();
  if (v1)
  {
    *(_OWORD *)(result + 16) = xmmword_1B6E76B30;
    *(void *)(result + 32) = &type metadata for TransientOriginColor;
    *(void *)(result + 40) = &off_1F0F842D0;
    *(void *)(result + 48) = &type metadata for Color;
    simd_float4 v3 = (void *)(result + 56);
  }
  else
  {
    *(_OWORD *)(result + 16) = xmmword_1B6E77050;
    *(void *)(result + 32) = &type metadata for Color;
    simd_float4 v3 = (void *)(result + 40);
  }
  *simd_float4 v3 = &off_1F0F9ECD8;
  return result;
}

uint64_t sub_1B697B5A8(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 112);
  long long v4 = *(_OWORD *)(a1 + 128);
  long long v48 = *(_OWORD *)(a1 + 96);
  long long v49 = v3;
  long long v50 = v4;
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v43 = *(_OWORD *)(a1 + 16);
  long long v44 = v5;
  long long v6 = *(_OWORD *)(a1 + 64);
  long long v45 = *(_OWORD *)(a1 + 48);
  long long v46 = v6;
  long long v47 = v2;
  uint64_t v7 = v43;
  swift_retain();
  sub_1B695F0A8(*((uint64_t *)&v43 + 1), (uint64_t)&v29);
  swift_release();
  uint64_t v8 = v31;
  if (v31)
  {
    int v9 = v34;
    uint64_t v11 = v32;
    char v10 = v33;
    char v12 = v29;
    int v13 = v30;
    uint64_t v14 = (v33 >> 8) & 1;
    unint64_t v15 = HIDWORD(v33);
  }
  else
  {
    sub_1B697B264((uint64_t)v35);
    char v12 = v35[0];
    int v13 = v36;
    uint64_t v8 = v37;
    uint64_t v11 = v38;
    char v10 = v39;
    LOBYTE(v14) = v40;
    LODWORD(v15) = v41;
    int v9 = v42;
  }
  char v51 = v12;
  int v52 = v13;
  uint64_t v53 = v8;
  uint64_t v54 = v11;
  char v55 = v10;
  char v56 = v14;
  int v57 = v15;
  int v58 = v9;
  sub_1B62EBAB4();
  BOOL v16 = sub_1B62FACF8((uint64_t)&type metadata for ParticleAge);
  swift_release();
  if (v16 && (sub_1B62EBAB4(), BOOL v17 = sub_1B62FACF8((uint64_t)&type metadata for ParticleLifetime), swift_release(), v17))
  {
    int v29 = v13;
    LOBYTE(v30) = v12;
    LOBYTE(v31) = v14;
    uint64_t v18 = *(void **)a1;
    if (*(void *)a1)
    {
      uint64_t ObjectType = swift_getObjectType();
      type metadata accessor for particle_color_over_life_uniforms(0);
      sub_1B6B594A8((uint64_t)&v29, 1, ObjectType, v20, v21, v22, v23, v24);
    }
    uint64_t v25 = swift_retain();
    uint64_t v26 = sub_1B6979DD0(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v26)
    {
      if (v18) {
        objc_msgSend(v18, sel_setTexture_atIndex_, v26, 0);
      }
      uint64_t v28 = v45;
      swift_retain();
      sub_1B6786A24(a1);
      sub_1B6BFF388(v28, v7, v18 == 0, 0, a1, 0xD000000000000018, 0x80000001B6F3F4C0, 0);
      sub_1B6786A7C(a1);
      swift_unknownObjectRelease();
      return swift_release();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t assignWithCopy for ParticleColorOverLife(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ParticleColorOverLife(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleColorOverLife(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleColorOverLife(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverLife()
{
  return &type metadata for ParticleColorOverLife;
}

uint64_t sub_1B697B9BC(uint64_t a1)
{
  return a1;
}

unint64_t sub_1B697B9F4()
{
  unint64_t result = qword_1E9DD4730;
  if (!qword_1E9DD4730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD4730);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ParticleColorOverLife.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B697BB14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverLife.CodingKeys()
{
  return &type metadata for ParticleColorOverLife.CodingKeys;
}

unint64_t sub_1B697BB50()
{
  unint64_t result = qword_1E9DD2F58;
  if (!qword_1E9DD2F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2F58);
  }
  return result;
}

uint64_t sub_1B697BBA4()
{
  type metadata accessor for TypeRegistry();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 16) = sub_1B67DD900(MEMORY[0x1E4FBC860]);
  *(void *)(v0 + 24) = sub_1B67DD900(v1);
  *(void *)(v0 + 32) = sub_1B67DDA1C(v1);
  sub_1B697BC2C();
  off_1EB97E350 = (_UNKNOWN *)v0;
  swift_retain();
  uint64_t result = swift_release();
  qword_1EB97E348 = v0;
  return result;
}

uint64_t sub_1B697BC2C()
{
  sub_1B697D028();
  uint64_t v0 = sub_1B6E31818();
  uint64_t v2 = sub_1B62B2184(v0, v1, 0, 1);
  swift_bridgeObjectRelease();
  if (!v2 || ((result = swift_conformsToProtocol2()) != 0 ? (uint64_t v4 = v2) : (uint64_t v4 = 0), !v4))
  {
    sub_1B6A9BB2C();
    sub_1B6A9BBAC();
    sub_1B697D064();
    sub_1B6654DA4((uint64_t)&type metadata for OldEvent, (uint64_t)&unk_1F0F5D0C0);
    sub_1B697DD18();
    swift_arrayDestroy();
    uint64_t v5 = MEMORY[0x1E4FBC860];
    sub_1B6654DA4((uint64_t)&type metadata for NewEvent, MEMORY[0x1E4FBC860]);
    sub_1B6654DA4((uint64_t)&type metadata for NullEntityComponent, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Name, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SetActive, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Skybox, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Navigation, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleContinuousSpawn, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleVariableSpawn, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleBurstSpawn, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticlePeriodicBurstSpawn, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSpawnOverDistance, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSubSpawn, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleGrowEmitter, v5);
    sub_1B6654DA4((uint64_t)&type metadata for EmitterShape, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSizeInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAngleInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleLifeInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleMassInit, v5);
    sub_1B697DD84(0, &qword_1EB97F180, (uint64_t)&type metadata for LinearFactor, (uint64_t)&off_1F0F5A7E8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ParticleFloat3Init);
    sub_1B6654DA4(v6, v5);
    sub_1B697DD84(0, &qword_1EB97F188, (uint64_t)&type metadata for AngularFactor, (uint64_t)&off_1F0F5D9D0, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ParticleFloat3Init);
    sub_1B6654DA4(v7, v5);
    sub_1B697DD84(0, &qword_1EB97F178, (uint64_t)&type metadata for ParticleTarget, (uint64_t)&off_1F0F64DE8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ParticleFloat3Init);
    sub_1B6654DA4(v8, (uint64_t)&unk_1F0F5CEF8);
    swift_arrayDestroy();
    sub_1B6654DA4((uint64_t)&type metadata for ParticleVelocityInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAngularVelocityInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleOrientationInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAngleVelocityInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleColorInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticlePivotInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleTextureFrameInit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticlePositionOverTexture, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleColorOverPosition, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleColorOverLife, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleColorOverVelocity, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleColorOverTexture, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleOpacityEvolution, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleOpacityOverLife, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleOpacityOverVelocity, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSizeOverLife, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSizeOverVelocity, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSizeOverTexture, v5);
    sub_1B6654DA4((uint64_t)&type metadata for OrientationConstraint, v5);
    sub_1B6654DA4((uint64_t)&type metadata for OrientationOverVelocity, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAngleEvolution, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleTextureFrameEvolution, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAffectedByGravity, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleGravityForce, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleForce, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Anchored, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAnchored, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleRibbonTrails, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFlockingAlignOrientation, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFlockingConstrainToArea, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFlockingConstrainToPlane, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFlockingFlyTowardsArea, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFlockingSolver, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFlockingSpeedControl, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleGlobalFluidSolver2DEmitter, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFluidSolver2DEmitter, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAffectedByGlobalFluidSolver2DSolver, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleGlobalFluidSolver2DSolver, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleFluidSolver2DSolver, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleDrag, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleCopyData, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleNoise, (uint64_t)&unk_1F0F5CF30);
    swift_arrayDestroy();
    sub_1B6654DA4((uint64_t)&type metadata for ProjectorParameters, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleCollide, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticlePlaneCollider, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSphereCollider, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleBoxCollider, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleCylinderCollider, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSDFCollider, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleMeshCollider, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSphereAttractor, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSDFAttractor, v5);
    sub_1B6654DA4((uint64_t)&type metadata for KillShape, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleKillable, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ForceField, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleForceField, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleGlobalForce, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAffectedByGlobalForce, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Vortex, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleTargetFromPosition, v5);
    sub_1B6654DA4((uint64_t)&type metadata for DistanceConstraint, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Attach, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleLocalBoxCollider, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticlePointRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleLineRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleQuadRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleBoxRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSphereRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSurfaceRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleVolumetricRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticlePrimitiveRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAOSphereRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAOBoxRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleGaussianRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleDecalRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleVoxelRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for FluidRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleMeshRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleRibbonRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for MeshModel, (uint64_t)&unk_1F0F5CF68);
    swift_arrayDestroy();
    sub_1B6654DA4((uint64_t)&type metadata for ModelRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for GenericLOD, v5);
    sub_1B6654DA4((uint64_t)&type metadata for LODRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for LODState, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PointOfCulling, v5);
    sub_1B6654DA4((uint64_t)&type metadata for FrustumCulled, v5);
    sub_1B6654DA4((uint64_t)&type metadata for LODCulled, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleLegacyRenderer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Color, v5);
    sub_1B6654DA4((uint64_t)&type metadata for DirectionalLight, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PointLight, v5);
    sub_1B6654DA4((uint64_t)&type metadata for AmbientLight, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SpotLight, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Shadow, (uint64_t)&unk_1F0F5CFA0);
    swift_arrayDestroy();
    sub_1B6654DA4((uint64_t)&type metadata for ParticleRoughness, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleMetalness, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleEmission, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleTarget, (uint64_t)&unk_1F0F5CFD8);
    swift_arrayDestroy();
    sub_1B6654DA4((uint64_t)&type metadata for UserData1, v5);
    sub_1B6654DA4((uint64_t)&type metadata for UserData2, v5);
    sub_1B6654DA4((uint64_t)&type metadata for UserData3, v5);
    sub_1B6654DA4((uint64_t)&type metadata for UserData4, v5);
    sub_1B6654DA4((uint64_t)&type metadata for NeighborCount, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAngle, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAngleVelocity, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleTextureFrame, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Mass, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleID, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleAge, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleLifetime, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticlePivot, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleCustomEmitter, v5);
    sub_1B6654DA4((uint64_t)&type metadata for LocalAABB, v5);
    sub_1B6654DA4((uint64_t)&type metadata for WorldAABB, v5);
    sub_1B6654DA4((uint64_t)&type metadata for IBLGenerator, v5);
    sub_1B6654DA4((uint64_t)&type metadata for IBLRuntime, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PointOfView, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ProjectionMatrix, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PerspectiveCamera, v5);
    sub_1B6654DA4((uint64_t)&type metadata for OrthographicCamera, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CameraDepthOfField, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CameraLensBlur, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CameraBloom, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CameraVignetting, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CameraColorGrading, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CameraToneMapping, v5);
    uint64_t v9 = type metadata accessor for SDFFileAsset();
    sub_1B6654DA4(v9, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SDFRuntimeData, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SDFTextureGenerator, v5);
    sub_1B6654DA4((uint64_t)&type metadata for RenderSettings, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SceneFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for MeshFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for MeshReferenceAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for MeshImportOptions, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureSource, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for UnmanagedFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CSVFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for MovieFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureArrayFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureClient, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureNamedAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRenderTarget, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureShaderAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureLoadingOptions, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireMipmap, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireMipmapGeneration, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireCubemap, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireNonSRGB, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireUnpremultiply, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequirePremultiplyWithLinearAlpha, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireSizeLimit, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireAnimationRepresentation, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireCPURepresentation, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireGPURepresentation, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireMask, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureRequireIOSurface, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureLoadPolicy, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureGPURepresentationDoNotUpload, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TextureFileData, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CALayerFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for RenderGraphTextureTarget, v5);
    sub_1B6654DA4((uint64_t)&type metadata for TexturePlaceholder, v5);
    sub_1B6654DA4((uint64_t)&type metadata for AudioFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for AudioAnalyzer, v5);
    sub_1B6654DA4((uint64_t)&type metadata for AudioController, v5);
    sub_1B6654DA4((uint64_t)&type metadata for AudioSpectrum, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Parent, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Children, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Hidden, v5);
    sub_1B6654DA4((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, v5);
    sub_1B6654DA4((uint64_t)&type metadata for WorldTransform, v5);
    sub_1B6654DA4((uint64_t)&type metadata for InverseWorldTransform, v5);
    sub_1B6654DA4((uint64_t)&type metadata for NotInHierarchy, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParentedToScene, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SpaceOverride, v5);
    sub_1B6654DA4((uint64_t)&type metadata for LastFrameWorldTransform, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Static, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Fixed, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Beamed, v5);
    sub_1B6654DA4((uint64_t)&type metadata for RotateAction, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SineMoveAction, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SineYAction, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Scale1, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Scale2, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Scale3, (uint64_t)&unk_1F0F5D010);
    swift_arrayDestroy();
    uint64_t v10 = type metadata accessor for VFXObjectTag();
    sub_1B6654DA4(v10, v5);
    sub_1B6654DA4((uint64_t)&type metadata for VFXTag, v5);
    sub_1B6654DA4((uint64_t)&type metadata for VFXAssetTag, v5);
    sub_1B6654DA4((uint64_t)&type metadata for VFXBridgeTag, v5);
    sub_1B6654DA4((uint64_t)&type metadata for VFXParentAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Prefab, v5);
    sub_1B6654DA4((uint64_t)&type metadata for EmbeddedAssets, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Seed, v5);
    sub_1B6654DA4((uint64_t)&type metadata for EmitterDescription, v5);
    sub_1B6654DA4((uint64_t)&type metadata for EmitterRuntime, v5);
    sub_1B6654DA4((uint64_t)&type metadata for DebugSelectedCamera, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSpawnDelay, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSpawnDuration, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleRespawn, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Rect2D, v5);
    sub_1B6654DA4((uint64_t)&type metadata for DiscShape, v5);
    sub_1B6654DA4((uint64_t)&type metadata for RoundedRectShape, v5);
    sub_1B6654DA4((uint64_t)&type metadata for StrokeColor, v5);
    sub_1B6654DA4((uint64_t)&type metadata for StrokeWidth, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Shadow, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Velocity2D, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ZOrder, v5);
    sub_1B6654DA4((uint64_t)&type metadata for HZOrder, v5);
    sub_1B6654DA4((uint64_t)&type metadata for LookAt, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SmoothMotion, v5);
    sub_1B6654DA4((uint64_t)&type metadata for RenderingOrder, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ProjectorParameters, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleCollisionEvent, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSpawnID, v5);
    sub_1B6654DA4((uint64_t)&type metadata for GrowEmitterRuntime, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ClampBox, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CodeGenerationComponent, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CodeGenerationInitialized, v5);
    sub_1B6654DA4((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, v5);
    sub_1B6654DA4((uint64_t)&type metadata for GraphScriptingConfig, v5);
    sub_1B6654DA4((uint64_t)&type metadata for GraphScriptGroup, v5);
    sub_1B6654DA4((uint64_t)&type metadata for GraphComponent, v5);
    sub_1B6654DA4((uint64_t)&type metadata for GraphSideStorage, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Bindings, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ColorRampComponent, v5);
    sub_1B6654DA4((uint64_t)&type metadata for CurveComponent, v5);
    sub_1B6654DA4((uint64_t)&type metadata for WrapAroundCamera, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Position, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Normal, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Velocity, v5);
    sub_1B6654DA4((uint64_t)&type metadata for AngularVelocity, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Orientation, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SubEntity, (uint64_t)&unk_1F0F5D048);
    swift_arrayDestroy();
    sub_1B6654DA4((uint64_t)&type metadata for ParticleSetID, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PropagateDirtiness, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PrimitiveGenerator, v5);
    uint64_t v11 = type metadata accessor for SceneKitAsset(0);
    sub_1B6654DA4(v11, v5);
    sub_1B6654DA4((uint64_t)&type metadata for SceneKitAssetInstance, v5);
    sub_1B6654DA4((uint64_t)&type metadata for ShaderFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for VideoCapture, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PointCacheFileAsset, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PointCacheFromModel, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PointCacheGenerator, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PointCacheEmitter, v5);
    sub_1B6654DA4((uint64_t)&type metadata for PointCacheSpawner, v5);
    sub_1B6654DA4((uint64_t)&type metadata for REMeshAssetPointCache, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Material, (uint64_t)&unk_1F0F5D080);
    swift_arrayDestroy();
    sub_1B6654DA4((uint64_t)&type metadata for MaterialParameters, v5);
    sub_1B6654DA4((uint64_t)&type metadata for AnimationTimeSource, v5);
    sub_1B697DD84(0, &qword_1EB97EEF8, MEMORY[0x1E4FBB470], (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for KeyframeAnimation);
    sub_1B6654DA4(v12, v5);
    sub_1B63B6730();
    sub_1B6654DA4(v13, v5);
    sub_1B63B667C();
    sub_1B6654DA4(v14, v5);
    sub_1B63B65C8();
    sub_1B6654DA4(v15, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Authoring, v5);
    sub_1B6654DA4((uint64_t)&type metadata for DoNotSave, v5);
    sub_1B6654DA4((uint64_t)&type metadata for DoNotExport, v5);
    sub_1B6654DA4((uint64_t)&type metadata for Scheduling, v5);
    sub_1B6654DA4((uint64_t)&type metadata for IsSubEntityOf, v5);
    sub_1B697D264();
    sub_1B6654DA4((uint64_t)&type metadata for ParticleClassSpawnID, v5);
    sub_1B697D370();
    return sub_1B697D500();
  }
  return result;
}

unint64_t sub_1B697D028()
{
  unint64_t result = qword_1EB97FF48;
  if (!qword_1EB97FF48)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB97FF48);
  }
  return result;
}

uint64_t sub_1B697D064()
{
  uint64_t v0 = sub_1B63989B8(0, (unint64_t *)&qword_1EB980620);
  uint64_t v1 = MEMORY[0x1E4FBC860];
  sub_1B6654DA4(v0, MEMORY[0x1E4FBC860]);
  uint64_t v2 = sub_1B63989B8(0, &qword_1EB981260);
  sub_1B6654DA4(v2, v1);
  uint64_t v3 = sub_1B63989B8(0, &qword_1EB9811E8);
  sub_1B6654DA4(v3, v1);
  uint64_t v4 = sub_1B63989B8(0, &qword_1EB981238);
  sub_1B6654DA4(v4, v1);
  uint64_t v5 = sub_1B63989B8(0, &qword_1EB9811F0);
  sub_1B6654DA4(v5, v1);
  uint64_t v6 = sub_1B63989B8(0, &qword_1EB981228);
  sub_1B6654DA4(v6, v1);
  uint64_t v7 = sub_1B63989B8(0, &qword_1EB981230);
  sub_1B6654DA4(v7, v1);
  uint64_t v8 = sub_1B63989B8(0, &qword_1EB981220);
  sub_1B6654DA4(v8, v1);
  uint64_t v9 = sub_1B63989B8(0, &qword_1EB981210);
  sub_1B6654DA4(v9, v1);
  uint64_t v10 = sub_1B63989B8(0, &qword_1EB9811F8);
  sub_1B6654DA4(v10, v1);
  uint64_t v11 = sub_1B63989B8(0, &qword_1EB981218);
  sub_1B6654DA4(v11, v1);
  uint64_t v12 = sub_1B63989B8(0, &qword_1EB981200);
  sub_1B6654DA4(v12, v1);
  uint64_t v13 = sub_1B63989B8(0, &qword_1EB981258);
  sub_1B6654DA4(v13, v1);
  uint64_t v14 = sub_1B63989B8(0, (unint64_t *)&unk_1EB981240);
  sub_1B6654DA4(v14, v1);
  type metadata accessor for VFXCameraToneMappingMode(0);

  return sub_1B6654DA4(v15, v1);
}

uint64_t sub_1B697D264()
{
  uint64_t v0 = type metadata accessor for EmitterScript(0);
  uint64_t v1 = MEMORY[0x1E4FBC860];
  sub_1B6654DA4(v0, MEMORY[0x1E4FBC860]);
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  sub_1B6654DA4(updated, (uint64_t)&unk_1F0F5CEB8);
  sub_1B697DD18();
  swift_arrayDestroy();
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  sub_1B6654DA4(inited, (uint64_t)&unk_1F0F5CE40);
  swift_arrayDestroy();
  uint64_t v4 = type metadata accessor for GraphScript(0);
  sub_1B6654DA4(v4, v1);
  uint64_t v5 = type metadata accessor for SimpleScript(0);
  sub_1B6654DA4(v5, v1);
  uint64_t v6 = type metadata accessor for MetalFunctionScript(0);
  sub_1B6654DA4(v6, (uint64_t)&unk_1F0F5CE78);
  swift_arrayDestroy();
  uint64_t v7 = type metadata accessor for ShaderScript(0);
  sub_1B6654DA4(v7, v1);
  uint64_t v8 = type metadata accessor for TriggerScript(0);

  return sub_1B6654DA4(v8, v1);
}

uint64_t sub_1B697D370()
{
  uint64_t v0 = MEMORY[0x1E4FBC860];
  sub_1B6654DA4((uint64_t)&type metadata for InputStream, MEMORY[0x1E4FBC860]);
  sub_1B6654DA4((uint64_t)&type metadata for DefaultMaterialInstance, v0);
  sub_1B6654DA4((uint64_t)&type metadata for AssetManagerInstance, v0);
  sub_1B6654DA4((uint64_t)&type metadata for CurvesState, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ColorRampsState, v0);
  sub_1B6654DA4((uint64_t)&type metadata for AssetCatalog, v0);
  sub_1B6654DA4((uint64_t)&type metadata for EffectsRegistry, v0);
  sub_1B6654DA4((uint64_t)&type metadata for DiagnosticsTrackerInstance, v0);
  sub_1B6654DA4((uint64_t)&type metadata for SceneAssetRegistryInstance, v0);
  sub_1B6654DA4((uint64_t)&type metadata for SceneWorldAABB, v0);
  sub_1B6654DA4((uint64_t)&type metadata for kClusterState, v0);
  sub_1B6654DA4((uint64_t)&_s21DrawCallEntityClassesVN, v0);
  sub_1B6654DA4((uint64_t)&type metadata for NoiseGlobalTexture, v0);
  sub_1B6654DA4((uint64_t)&type metadata for WorldFromScene, v0);
  sub_1B6654DA4((uint64_t)&type metadata for MeshRenderSystemState, v0);
  uint64_t v1 = type metadata accessor for VectorRenderSystemRenderPipelineStates();
  sub_1B6654DA4(v1, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FluidRenderSystemState, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FrameConstantsStorage, v0);
  uint64_t v2 = type metadata accessor for ScriptingConfiguration();
  sub_1B6654DA4(v2, v0);
  sub_1B6654DA4((uint64_t)&type metadata for RERendererConfiguration, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ShadowState, v0);

  return sub_1B6654DA4((uint64_t)&type metadata for LightsUniforms, v0);
}

uint64_t sub_1B697D500()
{
  uint64_t v0 = MEMORY[0x1E4FBC860];
  sub_1B6654DA4(MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC860]);
  sub_1B6654DA4(MEMORY[0x1E4FBB390], v0);
  sub_1B6654DA4(MEMORY[0x1E4FBC358], v0);
  sub_1B6654DA4(MEMORY[0x1E4FBC450], v0);
  uint64_t v1 = MEMORY[0x1E4FBC4C0];
  sub_1B6654DA4(MEMORY[0x1E4FBC4C0], v0);
  sub_1B6654DA4(MEMORY[0x1E4FBC538], v0);
  uint64_t v2 = MEMORY[0x1E4FBB550];
  sub_1B6654DA4(MEMORY[0x1E4FBB550], v0);
  sub_1B6654DA4(MEMORY[0x1E4FBC098], v0);
  sub_1B6654DA4(MEMORY[0x1E4FBC150], v0);
  uint64_t v3 = MEMORY[0x1E4FBC1C8];
  sub_1B6654DA4(MEMORY[0x1E4FBC1C8], v0);
  sub_1B6654DA4(MEMORY[0x1E4FBB3D0], v0);
  uint64_t v4 = MEMORY[0x1E4FBB470];
  sub_1B6654DA4(MEMORY[0x1E4FBB470], v0);
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
  sub_1B6395E08(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, v4, MEMORY[0x1E4FBC280]);
  sub_1B6654DA4(v6, v0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B6395E08(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, v4, MEMORY[0x1E4FBC2A8]);
  sub_1B6654DA4(v8, v0);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B6395E08(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, v4, MEMORY[0x1E4FBC2F8]);
  sub_1B6654DA4(v10, v0);
  type metadata accessor for simd_float2x2(0);
  sub_1B6654DA4(v11, v0);
  type metadata accessor for simd_float2x3(0);
  sub_1B6654DA4(v12, v0);
  type metadata accessor for simd_float2x4(0);
  sub_1B6654DA4(v13, v0);
  type metadata accessor for simd_float3x2(0);
  sub_1B6654DA4(v14, v0);
  type metadata accessor for simd_float3x3(0);
  sub_1B6654DA4(v15, v0);
  type metadata accessor for simd_float3x4(0);
  sub_1B6654DA4(v16, v0);
  type metadata accessor for simd_float4x2(0);
  sub_1B6654DA4(v17, v0);
  type metadata accessor for simd_float4x3(0);
  sub_1B6654DA4(v18, v0);
  type metadata accessor for simd_float4x4(0);
  sub_1B6654DA4(v19, v0);
  sub_1B6395E08(0, (unint64_t *)&unk_1EB980EC0, (uint64_t (*)(void))sub_1B675900C, v1, v7);
  sub_1B6654DA4(v20, v0);
  uint64_t v21 = MEMORY[0x1E4FBC0F8];
  sub_1B6654DA4(MEMORY[0x1E4FBC0F8], v0);
  sub_1B6395E08(0, &qword_1EB980E98, (uint64_t (*)(void))sub_1B6645884, v21, v5);
  sub_1B6654DA4(v22, v0);
  sub_1B6395E08(0, &qword_1EB980EB8, (uint64_t (*)(void))sub_1B6645884, v21, v7);
  sub_1B6654DA4(v23, v0);
  sub_1B6395E08(0, &qword_1EB980F00, (uint64_t (*)(void))sub_1B6645884, v21, v9);
  sub_1B6654DA4(v24, v0);
  type metadata accessor for simd_quatf(0);
  sub_1B6654DA4(v25, v0);
  sub_1B6654DA4(MEMORY[0x1E4FBB2A0], v0);
  uint64_t v26 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4FBB6A0];
  sub_1B697DD84(0, (unint64_t *)&qword_1EB980420, v2, MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  sub_1B6654DA4(v27, v0);
  sub_1B697DD84(0, (unint64_t *)&unk_1EB980430, v3, MEMORY[0x1E4FBC1E0], v26);
  sub_1B6654DA4(v28, v0);
  sub_1B697DD84(0, (unint64_t *)&qword_1EB980410, v4, MEMORY[0x1E4FBB498], v26);
  sub_1B6654DA4(v29, v0);
  type metadata accessor for TextureDescriptor(0);
  sub_1B6654DA4(v30, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ColorRamp, v0);
  sub_1B697DD84(0, (unint64_t *)&qword_1EB97FDA0, v4, (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Curve);
  sub_1B6654DA4(v31, v0);
  type metadata accessor for MTLPixelFormat(0);
  sub_1B6654DA4(v32, v0);
  type metadata accessor for MTLStorageMode(0);
  sub_1B6654DA4(v33, v0);
  sub_1B6654DA4((uint64_t)&type metadata for KernelReference, v0);
  sub_1B6654DA4((uint64_t)&type metadata for Entity, v0);
  sub_1B6654DA4((uint64_t)&type metadata for Material.Kind, v0);
  uint64_t v34 = type metadata accessor for PBRParameters();
  sub_1B6654DA4(v34, v0);
  uint64_t v35 = type metadata accessor for PrelitParameters();
  sub_1B6654DA4(v35, v0);
  uint64_t v36 = type metadata accessor for CustomParameters();
  sub_1B6654DA4(v36, v0);
  sub_1B6654DA4((uint64_t)&type metadata for BlendMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FilterMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for TextureMipFilterMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for AddressMode, v0);
  type metadata accessor for MTLCullMode(0);
  uint64_t v38 = v37;
  sub_1B6654DA4(v37, v0);
  type metadata accessor for MTLCompareFunction(0);
  uint64_t v40 = v39;
  sub_1B6654DA4(v39, v0);
  type metadata accessor for MTLWinding(0);
  sub_1B6654DA4(v41, v0);
  type metadata accessor for VFXForceFieldType(0);
  sub_1B6654DA4(v42, v0);
  sub_1B6654DA4((uint64_t)&type metadata for Composition.Operation, v0);
  sub_1B6654DA4((uint64_t)&type metadata for LensBlurQuality, v0);
  sub_1B6654DA4((uint64_t)&type metadata for PointCache.Distribution, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FlockingSizeMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for TextureChannel, v0);
  sub_1B6654DA4((uint64_t)&type metadata for AddressMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for BlendMode, v0);
  type metadata accessor for VFXCameraProjectionDirection(0);
  sub_1B6654DA4(v43, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleSortMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleAnimationMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for Composition.Operation, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleColorOverPosition.GradientMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ScaleMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleColorInit.Mode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for Material.Kind, v0);
  sub_1B6654DA4((uint64_t)&type metadata for KillShape.Shape, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleQuadRenderer.Shape, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleOrientationMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FluidSolver2DSolverSetupType, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FluidSolver2DSolverBorderType, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FlockingLocalAxis, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ToneMappingOperator, v0);
  sub_1B6654DA4((uint64_t)&type metadata for MotionDistribution, v0);
  sub_1B6654DA4((uint64_t)&type metadata for EmitterDescription.PhysicsSimulation, v0);
  sub_1B6654DA4((uint64_t)&type metadata for NoiseKind, v0);
  sub_1B6654DA4((uint64_t)&type metadata for EmitterShape.Shape, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ShapeDistribution, v0);
  sub_1B6654DA4((uint64_t)&type metadata for EmitterShape.Direction, v0);
  sub_1B6654DA4((uint64_t)&type metadata for EmissionOrder, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticlePrimitiveRenderer.Shape, v0);
  sub_1B6654DA4((uint64_t)&type metadata for EasingFunction, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FillMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for EvolutionMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for VideoCapture.OrientationMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for OrientationConstraint.Mode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ProjectionDirection, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleSubSpawn.Mode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for EntitySpace, v0);
  sub_1B6654DA4(v38, v0);
  sub_1B6654DA4(v40, v0);
  sub_1B6654DA4((uint64_t)&type metadata for FilterMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for TextureMipFilterMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for PrimitiveGenerator.PrimitiveType, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleRibbonTextureMode, v0);
  sub_1B6654DA4((uint64_t)&type metadata for ParticleRibbonProfile, v0);

  return sub_1B6654DA4((uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis, v0);
}

void sub_1B697DD18()
{
  if (!qword_1EB9803C8)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB9803C8);
    }
  }
}

void sub_1B697DD84(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1B697DDD4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t sub_1B697DE1C(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  swift_weakInit();
  uint64_t v13 = (void *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__rootNode);
  void *v13 = 0;
  v13[1] = 0;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_loaded) = 0;
  uint64_t v14 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  *(void *)(v7 + v14) = sub_1B67DFEE0(MEMORY[0x1E4FBC860]);
  uint64_t v16 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_entityToId;
  *(void *)(v7 + v16) = sub_1B67F5F8C(v15);
  *(void *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_counter) = 0;
  swift_weakAssign();
  uint64_t v17 = v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_asset;
  uint64_t v18 = sub_1B6E30F48();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, a2, v18);
  uint64_t v20 = v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_options;
  *(void *)uint64_t v20 = a3;
  *(unsigned char *)(v20 + 8) = a4 & 1;
  *(unsigned char *)(v20 + 9) = HIBYTE(a4) & 1;
  uint64_t v21 = (void *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_sceneIdentifier);
  *uint64_t v21 = a5;
  v21[1] = a6;
  strcpy((char *)v25, "registry for ");
  HIWORD(v25[1]) = -4864;
  sub_1B6E30E58();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  type metadata accessor for EntityManager();
  swift_allocObject();
  uint64_t v22 = sub_1B6299098(v25[0], v25[1], 1, 0);
  *(void *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__entityManager) = v22;
  uint64_t v23 = *(void *)(swift_weakLoadStrong() + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a2, v18);
  *(void *)(v22 + OBJC_IVAR____TtC3VFX13EntityManager_renderer) = v23;
  swift_release();
  swift_release();
  return v7;
}

uint64_t sub_1B697E084(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v9 = a1;
  uint64_t v10 = 1701080942;
  unint64_t v11 = HIDWORD(a1);
  if (a1 != 0xFFFFFFFF)
  {
    swift_retain();
    if ((v9 & 0x80000000) == 0
      && v9 < *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
      && ((uint64_t v12 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v11 == -1)
       || *(_DWORD *)(v12 + 12 * v9 + 8) == v11))
    {
      uint64_t v22 = sub_1B636A914(*(void *)(*(void *)(a2 + 136) + 8 * *(int *)(v12 + 12 * v9) + 32), *(_DWORD *)(v12 + 12 * v9), *(_WORD *)(v12 + 12 * v9 + 4), 16, a2);
      uint64_t v13 = v23;
      swift_release();
      if (v13)
      {
        uint64_t v10 = v22;
        goto LABEL_8;
      }
    }
    else
    {
      swift_release();
    }
  }
  uint64_t v13 = 0xE400000000000000;
LABEL_8:
  uint64_t v14 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity;
  if (*(void *)(*(void *)(v5 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity) + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B62B2CE0(v10, v13);
    char v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
      if (a4)
      {
        swift_bridgeObjectRetain();
        if (sub_1B6E319F8())
        {
          if (!*(void *)(*(void *)(v5 + v14) + 16)) {
            goto LABEL_22;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B62B2CE0(a3, a4);
          if ((v17 & 1) == 0)
          {
LABEL_20:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
          swift_bridgeObjectRelease_n();
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v18 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_counter;
      ++*(void *)(v5 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_counter);
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      sub_1B6E33098();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      a3 = v10;
      if (*(void *)(*(void *)(v5 + v14) + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B62B2CE0(v10, v13);
        if (v19)
        {
          while (1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++*(void *)(v5 + v18);
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            a3 = v10;
            swift_bridgeObjectRelease();
            if (!*(void *)(*(void *)(v5 + v14) + 16)) {
              goto LABEL_22;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1B62B2CE0(v10, v13);
            if ((v20 & 1) == 0) {
              goto LABEL_20;
            }
          }
        }
        goto LABEL_20;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      return a3;
    }
  }
  return v10;
}

uint64_t sub_1B697E3B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_1B697E084(a1, a2, a5, a6);
  uint64_t v10 = v9;
  uint64_t v11 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(a4 + v11);
  *(void *)(a4 + v11) = 0x8000000000000000;
  sub_1B67E7FE8(a1, v8, v10, isUniquelyReferenced_nonNull_native);
  *(void *)(a4 + v11) = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_entityToId;
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *(void *)(a4 + v13);
  *(void *)(a4 + v13) = 0x8000000000000000;
  sub_1B67E7EC4(v8, v10, a1, v14);
  *(void *)(a4 + v13) = v17;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B697E4BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_entityToId);
  if (*(void *)(v4 + 16))
  {
    unint64_t v5 = result;
    unint64_t result = sub_1B62BE38C(result);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(v4 + 56) + 16 * result);
      uint64_t v9 = *v7;
      uint64_t v8 = v7[1];
      if (v5 != 0xFFFFFFFF)
      {
        swift_retain();
        uint64_t v10 = sub_1B695E724(v5);
        uint64_t v12 = v11;
        swift_bridgeObjectRetain();
        swift_release();
        if (v12)
        {
          if (v10)
          {
            *(void *)(v10 + 56) = v9;
            *(void *)(v10 + 64) = v8;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          uint64_t v13 = swift_retain();
          MEMORY[0x1F4188790](v13, v14);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B636C318(0, (void (*)(unsigned char *))sub_1B697F0DC);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        else
        {
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B697E698()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_asset;
  uint64_t v2 = sub_1B6E30F48();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B697E78C()
{
  return type metadata accessor for SceneAssetRegistryEntry();
}

uint64_t type metadata accessor for SceneAssetRegistryEntry()
{
  uint64_t result = qword_1E9DD2F70;
  if (!qword_1E9DD2F70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B697E7E0()
{
  uint64_t result = sub_1B6E30F48();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void sub_1B697E8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_1B62E17B4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1B6E31098();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  char v15 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1B6E30F48();
  double v20 = MEMORY[0x1F4188790](v16, v17);
  uint64_t v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_loaded) & 1) == 0)
  {
    uint64_t v103 = a1;
    uint64_t v92 = v15;
    uint64_t v93 = v11;
    uint64_t v94 = v10;
    char v95 = v7;
    *(unsigned char *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_loaded) = 1;
    uint64_t v98 = v19;
    uint64_t v99 = v18;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v22, v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_asset, v18, v20);
    uint64_t v23 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__entityManager;
    uint64_t v24 = *(void *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__entityManager);
    uint64_t v25 = *(void *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_options);
    char v26 = *(unsigned char *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_options + 8);
    swift_retain();
    unint64_t v27 = sub_1B6C30B90(v22, v24, v25, v26);
    unint64_t v29 = v28;
    uint64_t v31 = v30;
    swift_release();
    if (v31) {
      unint64_t v32 = v27;
    }
    else {
      unint64_t v32 = 0;
    }
    if (v31) {
      unint64_t v33 = v29;
    }
    else {
      unint64_t v33 = 0;
    }
    if (v31) {
      uint64_t v34 = v31;
    }
    else {
      uint64_t v34 = MEMORY[0x1E4FBC860];
    }
    uint64_t v35 = v23;
    uint64_t v36 = (unint64_t *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__rootNode);
    *uint64_t v36 = v32;
    v36[1] = v33;
    uint64_t v100 = v36;
    uint64_t v101 = v34;
    uint64_t v37 = *(void *)(v3 + v23);
    uint64_t v38 = **(void **)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    swift_retain();
    LOBYTE(v104[0]) = 1;
    unint64_t v39 = sub_1B6D7CA24(0x100000000uLL, v38, (__n128)0, (__n128)xmmword_1B6E4F370, 1.0);
    swift_release();
    v104[0] = 0x656372756F736572;
    v104[1] = 0xE900000000000073;
    if (v39 != -1 || HIDWORD(v39) != 0)
    {
      uint64_t v41 = swift_retain();
      MEMORY[0x1F4188790](v41, v42);
      *(&v85 - 4) = (uint64_t)v104;
      *(&v85 - 3) = v39;
      *(&v85 - 2) = v37;
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C1B0);
      swift_release();
    }
    uint64_t v97 = v22;
    uint64_t v43 = v100[1];
    if (v43) {
      sub_1B6AADDB4(*v100, v43, v39, v37);
    }
    uint64_t v44 = v101;
    uint64_t v45 = *(void *)(v101 + 16);
    if (v45)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = v44 + 36;
      uint64_t v47 = v45;
      do
      {
        sub_1B6AADDB4(v39, v37, *(void *)(v46 - 4), *(void *)(v3 + v35));
        v46 += 8;
        --v47;
      }
      while (v47);
      swift_bridgeObjectRelease();
    }
    long long v48 = v100;
    uint64_t v49 = v100[1];
    if (v49)
    {
      unint64_t v50 = *v100;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B6AAF390(v50, v49, v3, v103, a2);
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (v45)
    {
      uint64_t v102 = v35;
      uint64_t v103 = v3;
      uint64_t v90 = (void (**)(char *, char *, uint64_t))(v12 + 32);
      uint64_t v51 = swift_bridgeObjectRetain();
      unint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v96 = 0;
      uint64_t v54 = (unsigned int *)(v51 + 36);
      char v55 = &unk_1EB97E000;
      long long v89 = xmmword_1B6E77050;
      unint64_t v91 = 0x80000001B6F3F5D0;
      uint64_t v56 = v45;
      while (1)
      {
        uint64_t v57 = (int)*(v54 - 1);
        uint64_t v58 = *v54;
        uint64_t v59 = *(void *)(v103 + v102);
        if (v57 == -1)
        {
          if (!v58) {
            goto LABEL_27;
          }
          swift_retain();
        }
        else
        {
          uint64_t v60 = v55[142];
          swift_retain();
          if ((v57 & 0x80000000) == 0 && *(void *)(v59 + v60 + 8) > v57)
          {
            uint64_t v61 = *(void *)(v59 + v60);
            if (v58 == -1 || *(_DWORD *)(v61 + 12 * (int)v57 + 8) == v58)
            {
              uint64_t v62 = *(void *)(*(void *)(*(void *)(v59 + 80) + 8 * *(__int16 *)(v61 + 12 * (int)v57 + 6) + 32)
                              + 16);
              uint64_t v63 = *(void *)(v62 + 128);
              if (*(void *)(v63 + 16) && (unint64_t v64 = sub_1B62C1A30((uint64_t)&type metadata for MeshModel), (v65 & 1) != 0))
              {
                float32x4_t v66 = *(ValueMetadata **)(*(void *)(v62 + 24)
                                        + 16 * *(void *)(*(void *)(v63 + 56) + 8 * v64)
                                        + 32);
                swift_release();
                char v55 = (void *)&unk_1EB97E000;
                if (v66 == &type metadata for MeshModel)
                {
                  if (v96)
                  {
                    if (qword_1EB9852D0 != -1) {
                      swift_once();
                    }
                    uint64_t v88 = qword_1EB997FD0;
                    swift_retain();
                    LODWORD(v96) = sub_1B6E32168();
                    if (qword_1EB9854F8 != -1) {
                      swift_once();
                    }
                    uint64_t v67 = qword_1EB997FF0;
                    uint64_t v68 = qword_1EB985528;
                    swift_retain();
                    if (v68 != -1) {
                      swift_once();
                    }
                    sub_1B67A36D0();
                    uint64_t v69 = swift_allocObject();
                    *(_OWORD *)(v69 + 16) = v89;
                    *(void *)(v69 + 56) = MEMORY[0x1E4FBB1A0];
                    *(void *)(v69 + 64) = sub_1B678615C();
                    *(void *)(v69 + 32) = 0xD00000000000005ELL;
                    *(void *)(v69 + 40) = v91;
                    sub_1B6E31258();
                    swift_bridgeObjectRelease();
                    swift_retain();
                    uint64_t v70 = v92;
                    sub_1B6E31088();
                    uint64_t v86 = v95[12];
                    uint64_t v85 = v95[16];
                    uint64_t v71 = v95[20];
                    uint64_t v72 = (uint64_t)v94;
                    uint64_t v87 = v67;
                    uint64_t v73 = &v94[v71];
                    (*v90)(v94, v70, v93);
                    *(unsigned char *)(v72 + v86) = v96;
                    *(void *)(v72 + v85) = 0;
                    *(void *)uint64_t v73 = 0xD00000000000005ELL;
                    *((void *)v73 + 1) = v91;
                    sub_1B6E31368();
                    swift_release();
                    sub_1B67A3738(v72);
                    swift_release();
                    swift_release();
                    char v55 = (void *)&unk_1EB97E000;
                  }
                  unint64_t v52 = v57 | (unint64_t)(v58 << 32);
                  uint64_t v53 = v59;
                  uint64_t v96 = v59;
                }
              }
              else
              {
                swift_release();
                char v55 = (void *)&unk_1EB97E000;
              }
              goto LABEL_27;
            }
          }
        }
        swift_release();
LABEL_27:
        v54 += 2;
        if (!--v56)
        {
          uint64_t v74 = v101;
          swift_bridgeObjectRelease();
          long long v48 = v100;
          if (v96)
          {
            uint64_t v75 = v100[1];
            if (v75) {
              sub_1B6AADDB4(*v100, v75, v52, v96);
            }
          }
          uint64_t v76 = (unsigned int *)(v74 + 36);
          uint64_t v77 = v102;
          uint64_t v3 = v103;
          while (1)
          {
            uint64_t v78 = *(v76 - 1);
            uint64_t v79 = *v76;
            if (v53)
            {
              BOOL v80 = v78 == v52 && v79 == HIDWORD(v52);
              unint64_t v81 = v52;
              uint64_t v82 = v53;
              if (v80) {
                goto LABEL_53;
              }
            }
            else
            {
              uint64_t v82 = v48[1];
              if (!v82) {
                goto LABEL_53;
              }
              unint64_t v81 = *v48;
            }
            sub_1B6AADDB4(v81, v82, v78 | (v79 << 32), *(void *)(v3 + v77));
LABEL_53:
            v76 += 2;
            if (!--v45) {
              goto LABEL_63;
            }
          }
        }
      }
    }
LABEL_63:
    swift_bridgeObjectRelease();
    uint64_t v83 = v48[1];
    if (v83)
    {
      unint64_t v84 = *v48;
      swift_retain();
      sub_1B6AAF508(v84, v83, v3);
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
  }
}

void *sub_1B697F0DC(void *a1)
{
  return sub_1B6B7157C(a1, **(void **)(v1 + 16), *(void *)(*(void *)(v1 + 16) + 8), *(void *)(*(void *)(v1 + 16) + 16), *(void *)(*(void *)(v1 + 16) + 24), *(void *)(v1 + 24));
}

ValueMetadata *type metadata accessor for SceneAssetRegistryInstance()
{
  return &type metadata for SceneAssetRegistryInstance;
}

uint64_t sub_1B697F114(uint64_t a1)
{
  unint64_t v2 = sub_1B697F414();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B697F150(uint64_t a1)
{
  unint64_t v2 = sub_1B697F414();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B697F18C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B697F284(a1, a2, a3, &qword_1E9DD2F80, (void (*)(void))sub_1B697F414, (uint64_t)&type metadata for ParticleAffectedByGravity.CodingKeys, (void (*)(void))sub_1B697F414);
}

uint64_t sub_1B697F1CC(uint64_t a1)
{
  unint64_t v2 = sub_1B697F4C8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B697F208(uint64_t a1)
{
  unint64_t v2 = sub_1B697F4C8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B697F244(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B697F284(a1, a2, a3, &qword_1E9DD2F90, (void (*)(void))sub_1B697F4C8, (uint64_t)&type metadata for ParticleGravityForce.CodingKeys, (void (*)(void))sub_1B697F4C8);
}

uint64_t sub_1B697F284(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(void), uint64_t a6, void (*a7)(void))
{
  sub_1B697F468(0, a4, a5);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v12);
  uint64_t v14 = (char *)&v16 - v13;
  sub_1B62C14BC(a1, a1[3]);
  a7();
  sub_1B6E33A88();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

double sub_1B697F3AC()
{
  sub_1B62D2B64();
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B6E77050;
  *(void *)(v0 + 32) = &type metadata for ParticleAffectedByGravity;
  *(void *)(v0 + 40) = &off_1F0F947B0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGravity()
{
  return &type metadata for ParticleAffectedByGravity;
}

ValueMetadata *type metadata accessor for ParticleGravityForce()
{
  return &type metadata for ParticleGravityForce;
}

unint64_t sub_1B697F414()
{
  unint64_t result = qword_1E9DD2F88;
  if (!qword_1E9DD2F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2F88);
  }
  return result;
}

void sub_1B697F468(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_1B6E33038();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1B697F4C8()
{
  unint64_t result = qword_1E9DD2F98;
  if (!qword_1E9DD2F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2F98);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleGravityForce.CodingKeys()
{
  return &type metadata for ParticleGravityForce.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGravity.CodingKeys()
{
  return &type metadata for ParticleAffectedByGravity.CodingKeys;
}

unint64_t sub_1B697F540()
{
  unint64_t result = qword_1E9DD2FA0;
  if (!qword_1E9DD2FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2FA0);
  }
  return result;
}

unint64_t sub_1B697F598()
{
  unint64_t result = qword_1E9DD2FA8;
  if (!qword_1E9DD2FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2FA8);
  }
  return result;
}

unint64_t sub_1B697F5F0()
{
  unint64_t result = qword_1E9DD2FB0;
  if (!qword_1E9DD2FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2FB0);
  }
  return result;
}

unint64_t sub_1B697F648()
{
  unint64_t result = qword_1E9DD2FB8;
  if (!qword_1E9DD2FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2FB8);
  }
  return result;
}

uint64_t sub_1B697F69C(uint64_t a1)
{
  if (qword_1E9DD2FC0 == a1) {
    return 0x72466E696765622ELL;
  }
  if (qword_1E9DD2FC8 == a1) {
    return 0x616470556572702ELL;
  }
  if (qword_1E9DD2FD0 == a1) {
    return 0x6C616974696E692ELL;
  }
  if (qword_1E9DD2FD8 == a1) {
    return 0x6574616470752ELL;
  }
  if (qword_1E9DD2FE0 == a1) {
    return 0x64705574736F702ELL;
  }
  if (qword_1E9DD2FE8 == a1) {
    return 0x646E6572202D2D3CLL;
  }
  if (qword_1E9DD2FF0 == a1) {
    return 0x65526E696765622ELL;
  }
  if (qword_1E9DD2FF8 == a1) {
    return 0xD000000000000011;
  }
  uint64_t result = 0x4F7265646E65722ELL;
  if (qword_1E9DD3000 != a1)
  {
    if (qword_1E9DD3008 == a1)
    {
      return 0x61704F74736F702ELL;
    }
    else if (qword_1E9DD3010 == a1)
    {
      return 0xD000000000000012;
    }
    else if (qword_1E9DD3018 == a1)
    {
      return 0x584674736F702ELL;
    }
    else if (qword_1E9DD3020 != a1)
    {
      if (qword_1E9DD3028 == a1)
      {
        return 0x6975676D692ELL;
      }
      else if (qword_1E9DD3030 == a1)
      {
        return 0x6E655274736F702ELL;
      }
      else if (qword_1E9DD3038 == a1)
      {
        return 0x69636570736E752ELL;
      }
      else
      {
        if (qword_1E9DD2FC0 <= 100 * (a1 / 100)) {
          uint64_t v3 = 100 * (a1 / 100);
        }
        else {
          uint64_t v3 = qword_1E9DD2FC0;
        }
        if (v3 <= a1)
        {
          uint64_t v4 = sub_1B6E33098();
          sub_1B6E31948();
          sub_1B697F69C(v3);
        }
        else
        {
          uint64_t v4 = sub_1B697F69C(v3);
          sub_1B6E31948();
          sub_1B6E33098();
        }
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        return v4;
      }
    }
  }
  return result;
}

BOOL sub_1B697FA54(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1B697FA68(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1B697FA7C(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1B697FA90(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_1B697FAA4()
{
  return sub_1B697F69C(*v0);
}

uint64_t sub_1B697FAAC()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GenericComponentSystem()
{
  return self;
}

ValueMetadata *type metadata accessor for SystemStage()
{
  return &type metadata for SystemStage;
}

unint64_t sub_1B697FB1C()
{
  unint64_t result = qword_1E9DD3040;
  if (!qword_1E9DD3040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3040);
  }
  return result;
}

uint64_t sub_1B697FB70(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(v1 + 40);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t sub_1B697FBC4()
{
  type metadata accessor for GenericComponentSystem();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = "Default";
  *(void *)(result + 24) = 7;
  *(unsigned char *)(result + 32) = 2;
  *(void *)(result + 40) = nullsub_1;
  *(void *)(result + 48) = 0;
  return result;
}

uint64_t ResizingMode.init(rawValue:)(unsigned __int8 a1)
{
  if (a1 <= 2u) {
    unsigned __int8 v1 = a1;
  }
  else {
    unsigned __int8 v1 = 0;
  }
  return v1 | ((a1 > 2u) << 8);
}

void *static ResizingMode.allCases.getter()
{
  return &unk_1F0F5B158;
}

unint64_t sub_1B697FC54()
{
  unint64_t result = qword_1E9DD3050;
  if (!qword_1E9DD3050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3050);
  }
  return result;
}

uint64_t sub_1B697FCA8()
{
  return sub_1B6981C8C(&qword_1E9DD3058, (void (*)(uint64_t))sub_1B697FCF0);
}

void sub_1B697FCF0()
{
  if (!qword_1E9DD3060)
  {
    unint64_t v0 = sub_1B6E31D18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD3060);
    }
  }
}

void sub_1B697FD48(void *a1@<X8>)
{
  *a1 = &unk_1F0F5B180;
}

uint64_t sub_1B697FD5C()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for VFXError()
{
  return sub_1B697FD74();
}

uint64_t sub_1B697FD74()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s3VFX8VFXErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1B697FD5C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VFXError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1B697FD5C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1B697FD74();
  return a1;
}

uint64_t assignWithTake for VFXError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1B697FD74();
  return a1;
}

ValueMetadata *type metadata accessor for VFXError()
{
  return &type metadata for VFXError;
}

ValueMetadata *type metadata accessor for ResizingMode()
{
  return &type metadata for ResizingMode;
}

void sub_1B697FE88()
{
  uint64_t v1 = MEMORY[0x1BA9B8670](v0 + 16);
  if (v1)
  {
    unint64_t v2 = (void *)v1;
    char v3 = *(void **)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect);
    uint64_t v7 = v3;

    if (v3)
    {
      uint64_t v4 = (void *)MEMORY[0x1BA9B8670](&v7[OBJC_IVAR____TtC3VFX9VFXEffect_scene]);

      if (v4)
      {
        sub_1B639D66C();
        uint64_t v5 = swift_allocObject();
        *(void *)(v5 + 16) = v7;
        *(unsigned char *)(v5 + 24) = 0;
        char v6 = v7;
        sub_1B69DECC8((uint64_t)sub_1B6981B14, v5);

        swift_release();
        swift_release();
      }
      else
      {
      }
    }
  }
}

uint64_t sub_1B697FFB4()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69801AC()
{
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v1 = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (v2)
    {
      swift_retain();
      swift_release();
      uint64_t v1 = *(void *)(v2 + 312);
      swift_unknownObjectRetain();
      swift_release();
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return v1;
}

uint64_t sub_1B6980464(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1B69805D4(char *a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    uint64_t v4 = (void *)MEMORY[0x1BA9B8670](&a1[OBJC_IVAR____TtC3VFX9VFXEffect_scene]);

    if (v4)
    {
      sub_1B639D66C();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = a1;
      *(unsigned char *)(v5 + 24) = 0;
      char v6 = a1;
      sub_1B69DECC8((uint64_t)sub_1B6981D0C, v5);
      swift_release();
      swift_release();
    }
  }
  uint64_t v7 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect;
  uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect);
  if (v8) {
    uint64_t v9 = (void *)MEMORY[0x1BA9B8670](v8 + OBJC_IVAR____TtC3VFX9VFXEffect_scene);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene);
  *(void *)(v2 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene) = v9;
  id v11 = v9;

  sub_1B6981140();
  uint64_t v12 = *(char **)(v2 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView);
  uint64_t v13 = *(void *)(v2 + v7);
  if (!v13 || (uint64_t v14 = (int *)(v13 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID), *((unsigned char *)v14 + 4) == 1)) {
    uint64_t v14 = &dword_1E9E49870;
  }
  *(_DWORD *)&v12[OBJC_IVAR____TtC3VFX11VFXCoreView_effectID] = *v14;
  char v15 = v12;
  sub_1B6A7E9D8();

  uint64_t v16 = *(char **)(v2 + v7);
  if (v16)
  {
    uint64_t v17 = (void *)MEMORY[0x1BA9B8670](&v16[OBJC_IVAR____TtC3VFX9VFXEffect_scene]);
    double v20 = v16;

    if (v17)
    {
      sub_1B639D66C();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v20;
      *(unsigned char *)(v18 + 24) = 1;
      uint64_t v19 = v20;
      sub_1B69DECC8((uint64_t)sub_1B6981D0C, v18);

      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

void sub_1B6980888(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView;
  char v3 = *(void **)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView);
  *(void *)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView) = a1;

  uint64_t v4 = *(void *)(v1 + v2);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView)
                 + OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput);
  if (v6)
  {
    BOOL v7 = v4 == 0;
    if (v4) {
      int v8 = v5;
    }
    else {
      int v8 = -1;
    }
    if (v7) {
      int v9 = 0;
    }
    else {
      int v9 = HIDWORD(v5);
    }
    *(_DWORD *)(v6 + 24) = v8;
    *(_DWORD *)(v6 + 28) = v9;
  }
}

void sub_1B6980AC0(double a1)
{
  uint64_t v2 = *(char **)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView);
  uint64_t v3 = OBJC_IVAR____TtC3VFX11VFXCoreView_scaleFactor;
  *(double *)&v2[OBJC_IVAR____TtC3VFX11VFXCoreView_scaleFactor] = a1;
  uint64_t v4 = v2;
  id v5 = objc_msgSend(v4, sel_window);
  if (v5)
  {
    id v24 = v5;
    uint64_t v6 = self;
    objc_msgSend(v6, sel_begin);
    objc_msgSend(v6, sel_setDisableActions_, 1);
    double v7 = *(double *)&v2[v3];
    id v8 = objc_msgSend(v24, sel_screen);
    objc_msgSend(v8, sel_nativeScale);
    double v10 = v9;

    objc_msgSend(v4, sel_setContentScaleFactor_, v7 * v10);
    objc_msgSend(v4, sel_bounds);
    double v12 = v11;
    double v14 = v13;
    objc_msgSend(v4, sel_contentScaleFactor);
    double v16 = v12 * v15;
    objc_msgSend(v4, sel_contentScaleFactor);
    double v18 = v14 * v17;
    double v19 = ceil(v16);
    double v20 = ceil(v18);
    uint64_t v21 = (double *)&v4[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize];
    if (*(double *)&v4[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize] != v19
      || *(double *)&v4[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize + 8] != v20)
    {
      *uint64_t v21 = v19;
      v21[1] = v20;
      sub_1B6A7E9D8();
    }
    objc_msgSend(v6, sel_commit);

    uint64_t v23 = (char *)v24;
  }
  else
  {
    uint64_t v23 = v4;
  }
}

void sub_1B6980CCC(uint64_t a1)
{
  uint64_t v2 = *(char **)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView);
  uint64_t v3 = &v2[OBJC_IVAR____TtC3VFX11VFXCoreView_preferredFramesPerSecond];
  *(void *)uint64_t v3 = a1 & ~(a1 >> 63);
  v3[8] = a1 < 1;
  uint64_t v4 = v2;
  sub_1B6A7E9D8();
}

char *sub_1B6980D94(double a1, double a2, double a3, double a4)
{
  id v5 = v4;
  uint64_t v10 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_delegateImpl;
  type metadata accessor for VFXViewLegacy.VFXViewDelagate();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)&v5[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
  id v13 = objc_allocWithZone((Class)type metadata accessor for VFXCoreView());
  double v14 = v5;
  *(void *)&v5[v12] = sub_1B6A7F228(0, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v14[OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene] = 0;
  *(void *)&v14[OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect] = 0;
  *(void *)&v14[OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView] = 0;

  v21.receiver = v14;
  v21.super_class = (Class)type metadata accessor for VFXViewLegacy();
  double v15 = (char *)objc_msgSendSuper2(&v21, sel_initWithFrame_, a1, a2, a3, a4);
  uint64_t v16 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
  double v17 = *(void **)&v15[OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView];
  double v18 = v15;
  id v19 = v17;
  objc_msgSend(v18, sel_bounds);
  objc_msgSend(v19, sel_setFrame_);

  objc_msgSend(v18, sel_addSubview_, *(void *)&v15[v16]);
  swift_unknownObjectWeakAssign();
  *(void *)(*(void *)&v15[v16] + OBJC_IVAR____TtC3VFX11VFXCoreView_delegate + 8) = &off_1F0F62738;
  swift_unknownObjectWeakAssign();
  objc_msgSend(*(id *)&v15[v16], sel_setAutoresizingMask_, 18);

  return v18;
}

char *sub_1B6980F74(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_delegateImpl;
  type metadata accessor for VFXViewLegacy.VFXViewDelagate();
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)&v2[v4] = v5;
  uint64_t v6 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
  id v7 = objc_allocWithZone((Class)type metadata accessor for VFXCoreView());
  id v8 = v2;
  *(void *)&v2[v6] = sub_1B6A7F228(0, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v8[OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene] = 0;
  *(void *)&v8[OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect] = 0;
  *(void *)&v8[OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView] = 0;

  v16.receiver = v8;
  v16.super_class = (Class)type metadata accessor for VFXViewLegacy();
  double v9 = (char *)objc_msgSendSuper2(&v16, sel_initWithCoder_, a1);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
    uint64_t v12 = *(void **)&v9[OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView];
    id v13 = v9;
    id v14 = v12;
    objc_msgSend(v13, sel_bounds);
    objc_msgSend(v14, sel_setFrame_);

    objc_msgSend(v13, sel_addSubview_, *(void *)&v10[v11]);
    swift_unknownObjectWeakAssign();
    *(void *)(*(void *)&v10[v11] + OBJC_IVAR____TtC3VFX11VFXCoreView_delegate + 8) = &off_1F0F62738;
    swift_unknownObjectWeakAssign();
    objc_msgSend(*(id *)&v10[v11], sel_setAutoresizingMask_, 18);
  }
  return v10;
}

void sub_1B6981140()
{
  uint64_t v1 = *(char **)&v0[OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene];
  if (v1)
  {
    uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
    swift_weakAssign();
    uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    *(unsigned char *)(v5 + 24) = v3 != 0;
    *(void *)(v5 + 32) = v0;
    if (v3)
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = sub_1B6981B98;
      *(void *)(v6 + 24) = v5;
      id v7 = v1;
      swift_retain();
      id v8 = v0;
      swift_retain();
      sub_1B69DECC8((uint64_t)sub_1B633A544, v6);
      swift_release();

      swift_release();
    }
    else
    {
      double v9 = v1;
      swift_retain();
      uint64_t v10 = v0;
      swift_retain();
      sub_1B69D8E40(v2, sub_1B6981B98, v5);
      swift_release();
    }
    swift_release();
  }
}

void sub_1B6981324(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = sub_1B6E313D8();
  id v7 = *(void **)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1B6E31418();
  uint64_t v12 = *(void *)(v11 - 8);
  double v14 = MEMORY[0x1F4188790](v11, v13);
  objc_super v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1BA9B8670](a1 + 16, v14);
  if (!v17) {
    return;
  }
  double v18 = (void *)v17;
  uint64_t v37 = v11;
  id v38 = v7;
  uint64_t v19 = *(void *)(v17 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  uint64_t v20 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
  if (*(void *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    swift_retain();
  }
  else
  {
    *((void *)&v40 + 1) = 0;
    LODWORD(v40) = 0;
    BYTE4(v40) = 0;
    char v41 = 1;
    uint64_t v42 = 0;
    char v43 = 1;
    uint64_t v44 = 0;
    __int16 v45 = 257;
    uint64_t v46 = 260;
    char v47 = 0;
    uint64_t v48 = 0;
    type metadata accessor for Renderer();
    swift_allocObject();
    swift_retain();
    *(void *)(v19 + v20) = sub_1B6390860(0, 0, &v40);
    swift_release();
  }
  sub_1B68831E4();
  if (!*(void *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8))
  {
    sub_1B6B65E48();
    uint64_t v36 = v12;
    if (a2) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v21 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
    if (!*(void *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
    {
      type metadata accessor for RuntimeThread();
      swift_allocObject();
      uint64_t v22 = swift_retain();
      uint64_t v23 = sub_1B6A93D78(v22, 0, 0);
      swift_release();
      *(void *)(v19 + v21) = v23;
      swift_release();
    }
    goto LABEL_11;
  }
  uint64_t v36 = v12;
  if ((a2 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v24 = *(void *)(v19 + v20);
  uint64_t v25 = (void *)swift_allocObject();
  uint64_t v25[2] = a3;
  v25[3] = v19;
  v25[4] = v24;
  char v26 = self;
  swift_retain_n();
  swift_retain();
  unint64_t v27 = a3;
  if (objc_msgSend(v26, sel_isMainThread))
  {
    uint64_t v28 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
    swift_weakAssign();
    unint64_t v29 = *(void **)&v27[v28];
    swift_retain();
    id v38 = v29;
    sub_1B6A7E6D8();

    swift_release();
    swift_release();
    swift_release();
    uint64_t v30 = v38;
  }
  else
  {
    sub_1B6299DFC();
    uint64_t v35 = sub_1B6E32238();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = sub_1B6981C28;
    *(void *)(v31 + 24) = v25;
    aBlock[4] = sub_1B633A540;
    aBlock[5] = v31;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1B639AA00;
    aBlock[3] = &unk_1F0FBA0B8;
    unint64_t v32 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    sub_1B6E313F8();
    aBlock[0] = MEMORY[0x1E4FBC860];
    sub_1B6981C8C((unint64_t *)&qword_1EB97D188, MEMORY[0x1E4FBCB00]);
    sub_1B6981C34();
    sub_1B6981C8C((unint64_t *)&qword_1EB97D198, (void (*)(uint64_t))sub_1B6981C34);
    sub_1B6E327B8();
    unint64_t v33 = (void *)v35;
    MEMORY[0x1BA9B3EB0](0, v16, v10, v32);
    _Block_release(v32);
    swift_release();
    swift_release();
    swift_release();

    (*((void (**)(char *, uint64_t))v38 + 1))(v10, v6);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
  }
}

void sub_1B6981880(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
  swift_weakAssign();
  uint64_t v3 = *(void **)(a1 + v2);
  swift_retain();
  id v4 = v3;
  sub_1B6A7E6D8();
}

id sub_1B69819E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXViewLegacy();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for VFXViewLegacy()
{
  return self;
}

uint64_t type metadata accessor for VFXViewLegacy.VFXViewDelagate()
{
  return self;
}

uint64_t sub_1B6981ADC()
{
  return MEMORY[0x1F4186498](v0, 25, 7);
}

void sub_1B6981B14()
{
  sub_1B6B5F934(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1B6981B20()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6981B58()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void sub_1B6981B98()
{
  sub_1B6981324(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1B6981BA8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6981BE0()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void sub_1B6981C28()
{
  sub_1B6981880(*(void *)(v0 + 16));
}

void sub_1B6981C34()
{
  if (!qword_1EB9802E0)
  {
    sub_1B6E313D8();
    unint64_t v0 = sub_1B6E31D18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB9802E0);
    }
  }
}

uint64_t sub_1B6981C8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6981CD4()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1B6981D30(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = sub_1B6981D60();
  *a1 = xmmword_1B6E4F370;
  a1[1] = v2;
}

double sub_1B6981D60()
{
  return -9.41755707e297;
}

ValueMetadata *type metadata accessor for SceneWorldAABB()
{
  return &type metadata for SceneWorldAABB;
}

uint64_t *sub_1B6981D7C(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 32);
  v64[0] = *(_OWORD *)(v1 + 16);
  v64[1] = v3;
  uint64_t v65 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v64, 0x200000000, v26);
  sub_1B62CA3FC((uint64_t)v26, (uint64_t)&v34, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v34)
  {
    uint64_t v53 = v34;
    int v54 = v35;
    char v55 = v36;
    uint64_t v56 = v37;
    char v57 = v38;
    uint64_t v58 = v39;
    uint64_t v59 = v40;
    long long v60 = v41;
    long long v61 = v42;
    uint64_t v62 = v43;
    uint64_t v63 = v44;
    sub_1B6D8637C((uint64_t)&v53);
    sub_1B632F170(v26);
  }
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v47 = qword_1EB997A18;
  int v48 = 0;
  char v49 = 2;
  uint64_t v50 = 0;
  char v51 = 2;
  uint64_t v52 = 0;
  swift_retain();
  sub_1B63AA054(1, (uint64_t)v27);
  swift_release();
  v45[0] = v27[0];
  v45[1] = v27[1];
  uint64_t v46 = v28;
  sub_1B62C9DA8(a1, (uint64_t)v45, 0x200000000, v29);
  sub_1B62CA3FC((uint64_t)v29, (uint64_t)v30, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!v30[0]) {
    return (uint64_t *)sub_1B62CA064((uint64_t)v27);
  }
  if (v33 >= 1)
  {
    uint64_t v4 = v31;
    if (v31)
    {
      uint64_t v5 = v30[5];
      uint64_t v6 = v32;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v7 = 48 * v4;
      uint64_t v8 = (uint64_t *)(v5 + 40);
      do
      {
        uint64_t v13 = *v8;
        double v14 = *(os_unfair_lock_s **)(*v8 + 376);
        swift_retain();
        os_unfair_lock_lock(v14);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        if ((*(unsigned char *)(v6 + 112) & 1) == 0)
        {
          uint64_t v15 = *(void *)(v13 + 232);
          uint64_t v16 = *(void *)(v13 + 240);
          if (v16 != v15)
          {
            uint64_t v17 = *(void *)(v13 + 192);
            if (v17)
            {
              uint64_t v18 = *(void *)(v13 + 208);
              sub_1B63B52E8(v15, v16, v17);
              sub_1B62C9D00(v15, v16, v18);
            }
            sub_1B63658B4(*(void *)(v13 + 40), v13, v15, v16);
          }
        }
        int v19 = *(_DWORD *)(v13 + 24);
        swift_retain();
        uint64_t v25 = 0;
        memset(v24, 0, sizeof(v24));
        uint64_t v23 = 0;
        memset(v22, 0, sizeof(v22));
        int v20 = sub_1B637F628(v19, 0, 0, (uint64_t)&type metadata for ShaderFileAsset, (uint64_t)&off_1F0F6A340, (uint64_t)v24, (uint64_t)v22);
        swift_release();
        sub_1B6386458((uint64_t)v22);
        sub_1B6386458((uint64_t)v24);
        if (sub_1B63B4340(v20))
        {
          sub_1B66603E4(v20);
        }
        else
        {
          uint64_t v9 = *(void *)(v13 + 232);
          uint64_t v10 = *(void *)(v13 + 240);
          char v11 = *(unsigned char *)(v13 + 120);
          uint64_t v12 = *(unsigned int *)(v13 + 28);
          LOBYTE(v24[0]) = *(unsigned char *)(v13 + 32);
          sub_1B628EEF4(v9, v10, v20, v11, v12 | ((unint64_t)LOBYTE(v24[0]) << 32));
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        swift_release();
        v8 += 6;
        v7 -= 48;
      }
      while (v7);
      sub_1B632F170(v29);
    }
  }
  sub_1B62CA064((uint64_t)v27);
  return sub_1B632F170(v29);
}

double sub_1B698212C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v6 = 0;
  *((void *)&v6 + 1) = 0xE000000000000000;
  sub_1B63AE428(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0xE000000000000000;
    *(_OWORD *)(a2 + 32) = 0uLL;
  }
  return result;
}

void sub_1B69821C0(uint64_t a1)
{
  switch(a1)
  {
    case 4:
      uint64_t v1 = &qword_1EB980E90;
      uint64_t v2 = MEMORY[0x1E4FBB470];
      long long v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
      goto LABEL_5;
    case 5:
      uint64_t v1 = (unint64_t *)&qword_1EB980EB0;
      uint64_t v2 = MEMORY[0x1E4FBB470];
      long long v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
      goto LABEL_5;
    case 6:
      uint64_t v1 = (unint64_t *)&qword_1EB980EF0;
      uint64_t v2 = MEMORY[0x1E4FBB470];
      long long v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
LABEL_5:
      sub_1B6987F50(0, v1, (uint64_t (*)(void))sub_1B6645830, v2, v3);
      break;
    case 7:
      type metadata accessor for simd_float2x2(0);
      break;
    case 8:
      type metadata accessor for simd_float2x3(0);
      break;
    case 9:
      type metadata accessor for simd_float2x4(0);
      break;
    case 10:
      type metadata accessor for simd_float3x2(0);
      break;
    case 11:
      type metadata accessor for simd_float3x3(0);
      break;
    case 12:
      type metadata accessor for simd_float3x4(0);
      break;
    case 13:
      type metadata accessor for simd_float4x2(0);
      break;
    case 14:
      type metadata accessor for simd_float4x3(0);
      break;
    case 15:
      type metadata accessor for simd_float4x4(0);
      break;
    default:
      return;
  }
}

BOOL sub_1B6982450(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1B6985508((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_1B6982498(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a3;
  uint64_t v19 = a5;
  uint64_t v17 = a4;
  sub_1B6987F50(0, &qword_1E9DD3108, (uint64_t (*)(void))sub_1B6987EA8, (uint64_t)&type metadata for MetalFunctionReflection.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v17 - v12;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6987EA8();
  sub_1B6E33A88();
  uint64_t v21 = a2;
  char v20 = 0;
  sub_1B637F094();
  sub_1B6987FB8(&qword_1E9DD3110);
  sub_1B6E32FA8();
  if (!v5)
  {
    uint64_t v14 = v17;
    uint64_t v15 = v19;
    uint64_t v21 = v18;
    char v20 = 1;
    sub_1B62D83C0(0, &qword_1E9DD30F0, (uint64_t)&type metadata for MetalFunctionReflection.Arg, MEMORY[0x1E4FBB320]);
    sub_1B6988018(&qword_1E9DD3118, (void (*)(void))sub_1B69880A8);
    sub_1B6E32FA8();
    uint64_t v21 = v14;
    char v20 = 2;
    sub_1B6E32FA8();
    uint64_t v21 = v15;
    char v20 = 3;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

unint64_t sub_1B698275C(char a1)
{
  unint64_t result = 1684957547;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7865646E69;
      break;
    case 2:
    case 4:
      unint64_t result = 0x79747265706F7270;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x5465727574786574;
      break;
    case 6:
      unint64_t result = 0x74657366666FLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B698283C(char a1)
{
  unint64_t result = 1684957547;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7865646E69;
      break;
    case 2:
    case 4:
      unint64_t result = 0x79747265706F7270;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x5465727574786574;
      break;
    case 6:
      unint64_t result = 0x74657366666FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B698291C(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB6E88(*a1, *a2);
}

uint64_t sub_1B6982928()
{
  uint64_t result = 0x5373726566667562;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x737475706E69;
      break;
    case 2:
      uint64_t result = 0x7374757074756FLL;
      break;
    case 3:
      uint64_t result = 0x74754F7475706E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69829C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B698557C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B69829EC(uint64_t a1)
{
  unint64_t v2 = sub_1B6987EA8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6982A28(uint64_t a1)
{
  unint64_t v2 = sub_1B6987EA8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6982A64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6987468(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1B6982A94(void *a1)
{
  return sub_1B6982498(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1B6982AB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  if ((sub_1B6984CBC(*a1, *a2) & 1) == 0 || (sub_1B6918F70(v2, v5) & 1) == 0 || (sub_1B6918F70(v4, v7) & 1) == 0) {
    return 0;
  }

  return sub_1B6918F70(v3, v6);
}

uint64_t sub_1B6982B50(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB7030(*a1, *a2);
}

uint64_t sub_1B6982B5C()
{
  return sub_1B69EABA8();
}

uint64_t sub_1B6982B68()
{
  return sub_1B69E95AC();
}

uint64_t sub_1B6982B70()
{
  return sub_1B69EABA8();
}

uint64_t sub_1B6982B78@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6985760();
  *a1 = result;
  return result;
}

unint64_t sub_1B6982BA8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B698275C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B6982BD4()
{
  return sub_1B698283C(*v0);
}

uint64_t sub_1B6982BDC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6985760();
  *a1 = result;
  return result;
}

uint64_t sub_1B6982C04(uint64_t a1)
{
  unint64_t v2 = sub_1B6987C1C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6982C40(uint64_t a1)
{
  unint64_t v2 = sub_1B6987C1C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6982C7C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6987F50(0, &qword_1E9DD30A0, (uint64_t (*)(void))sub_1B6987C1C, (uint64_t)&type metadata for MetalFunctionReflection.Arg.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = &v14[-v9 - 16];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6987C1C();
  sub_1B6E33A88();
  LOBYTE(v13) = 0;
  sub_1B6E32F88();
  if (!v2)
  {
    sub_1B6987C70(v3 + 8, (uint64_t)v14);
    sub_1B6987C70((uint64_t)v14, (uint64_t)&v15);
    if ((v16 & 1) == 0)
    {
      LOBYTE(v13) = 5;
      sub_1B6E32F98();
    }
    LOBYTE(v13) = 1;
    sub_1B6E32F88();
    uint64_t v12 = *(void *)(v3 + 40);
    LOBYTE(v13) = 4;
    swift_bridgeObjectRetain();
    sub_1B6E32F48();
    swift_bridgeObjectRelease();
    long long v13 = *(_OWORD *)(v12 + 144);
    char v17 = 3;
    sub_1B69137B4();
    sub_1B6E32FA8();
    *(void *)&long long v13 = *(void *)(v12 + 40);
    char v17 = 2;
    sub_1B67CD420();
    sub_1B6E32FA8();
    LOBYTE(v13) = 6;
    sub_1B6E32F88();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B6982F70@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B6987804(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B6982FB4(void *a1)
{
  return sub_1B6982C7C(a1);
}

void *sub_1B6982FF0@<X0>(void *a1@<X8>)
{
  double result = sub_1B67DDB64(MEMORY[0x1E4FBC860]);
  *a1 = result;
  return result;
}

uint64_t sub_1B6983020(uint64_t result)
{
  uint64_t v2 = *(void *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(void **)(v2 + 16);
    id v6 = (id)MEMORY[0x1E4FBC868];
    long long v5 = *(_OWORD *)(v1 + 40);
    v30[0] = *(_OWORD *)(v1 + 24);
    v30[1] = v5;
    uint64_t v31 = *(void *)(v1 + 56);
    swift_unknownObjectRetain();
    swift_retain();
    sub_1B62C9DA8(v3, (uint64_t)v30, 0x200000000, v7);
    sub_1B62CA3FC((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (v8)
    {
      uint64_t v19 = v8;
      int v20 = v9;
      char v21 = v10;
      uint64_t v22 = v11;
      char v23 = v12;
      uint64_t v24 = v13;
      uint64_t v25 = v14;
      long long v26 = v15;
      long long v27 = v16;
      uint64_t v28 = v17;
      uint64_t v29 = v18;
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      sub_1B6D9992C((uint64_t)&v19, v4, v1, v2, &v6);
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      sub_1B632F170(v7);
    }
    swift_retain();
    swift_retain();
    sub_1B6A61290(2, v3, v3, v1, (uint64_t *)&v6);
    swift_release();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B69831C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = a2;
  long long v7 = *(_OWORD *)(a3 + 160);
  v264[0] = *(_OWORD *)(a3 + 144);
  v264[1] = v7;
  uint64_t v265 = *(void *)(a3 + 176);
  sub_1B62C9DA8(a2, (uint64_t)v264, 0x200000000, v220);
  sub_1B62CA3FC((uint64_t)v220, (uint64_t)v233, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v233[0])
  {
    uint64_t v43 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_34;
  }
  long long v240 = v233[0];
  long long v241 = v233[1];
  uint64_t v242 = v234;
  if (v239 < 1 || (uint64_t v196 = v236) == 0)
  {
    char v10 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_33;
  }
  uint64_t v181 = v6;
  uint64_t v8 = v238;
  uint64_t v191 = v235;
  uint64_t v206 = v238[4];
  int v203 = *(unsigned __int8 *)(v237 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  uint64_t v187 = v238 + 8;
  uint64_t v189 = (uint64_t)(v238 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v9 = 0;
  char v10 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v193 = v8;
  while (1)
  {
    uint64_t v11 = (unsigned int *)(v191 + 48 * v9);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    long long v15 = (uint64_t *)*((void *)v11 + 2);
    uint64_t v14 = *((void *)v11 + 3);
    uint64_t v17 = *((void *)v11 + 4);
    long long v16 = (char *)*((void *)v11 + 5);
    uint64_t v199 = v5;
    uint64_t v202 = v9;
    if (v203)
    {
      uint64_t v18 = (os_unfair_lock_s *)*((void *)v16 + 47);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*((os_unfair_lock_t *)v16 + 43));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v206);
    sub_1B62CA3FC(v189, (uint64_t)v263, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
    uint64_t v19 = *(void *)(*(void *)(*(void *)(*((void *)v16 + 5) + 16) + 32) + 16);
    uint64_t v20 = v8[4];
    uint64_t v266 = v16;
    uint64_t v21 = v19 + 1;
    uint64_t v22 = 48 * (v19 + 1);
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v20, v22, 8);
    v8[7] = v21;
    char v23 = v266;
    v187[1] = 0;
    v187[2] = 0;
    *uint64_t v187 = 0;
    swift_release();
    uint64_t v24 = sub_1B62C9024((uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1F0F880B8, v15, v14, v17, (uint64_t)v8);
    if (!v15)
    {
      if (v12 != v13)
      {
        while (1)
        {
          uint64_t v35 = swift_retain();
          if (v23[184]) {
            goto LABEL_189;
          }
          int v36 = *(_DWORD *)(*((void *)v23 + 21) + 4 * v12);
          int v37 = *(_DWORD *)(*(void *)(v35 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v36 + 8);
          swift_release();
          uint64_t v38 = *(void *)(v24 + 8 * v12);
          swift_bridgeObjectRetain();
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v39 = v10;
          }
          else {
            uint64_t v39 = sub_1B68C5774(0, v10[2] + 1, 1, v10);
          }
          unint64_t v41 = v39[2];
          unint64_t v40 = v39[3];
          if (v41 >= v40 >> 1) {
            uint64_t v39 = sub_1B68C5774(v40 > 1, v41 + 1, 1, v39);
          }
          ++v12;
          v39[2] = v41 + 1;
          char v10 = v39;
          long long v42 = &v39[2 * v41];
          *((_DWORD *)v42 + 8) = v36;
          *((_DWORD *)v42 + 9) = v37;
          v42[5] = v38;
          char v23 = v266;
          if (v13 == v12) {
            goto LABEL_20;
          }
        }
      }
      goto LABEL_20;
    }
    if (v17) {
      break;
    }
LABEL_20:
    v243[0] = v240;
    v243[1] = v241;
    uint64_t v244 = v242;
    uint64_t v8 = v193;
    sub_1B6345178(v193, (unsigned __int16 **)v243, (uint64_t)v263);
    uint64_t v5 = v199;
    sub_1B634507C(v23);
    ecs_stack_allocator_pop_snapshot(v206);
    if (v203)
    {
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v23 + 43));
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v23 + 47));
    }
    swift_release();
    uint64_t v9 = v202 + 1;
    if (v202 + 1 == v196)
    {
      sub_1B632F170(v220);
      uint64_t v6 = v181;
LABEL_33:
      sub_1B632F170(v220);
      uint64_t v43 = v10;
LABEL_34:
      uint64_t v44 = v43[2];
      if (!v44) {
        goto LABEL_74;
      }
      uint64_t v182 = v6;
      uint64_t v200 = v5;
      __int16 v45 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
      uint64_t v266 = (char *)&v222 + 8;
      while (2)
      {
        uint64_t v47 = *((unsigned int *)v45 - 2);
        uint64_t v46 = *((unsigned int *)v45 - 1);
        uint64_t v48 = *v45;
        sub_1B6987D8C(a1, (uint64_t)&v222);
        if (v47 == -1 && v46 == 0)
        {
          swift_bridgeObjectRetain();
          goto LABEL_37;
        }
        uint64_t v50 = v222;
        swift_unownedRetainStrong();
        if ((v47 & 0x80000000) == 0
          && *(void *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v47
          && ((uint64_t v51 = *(void *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v46 == -1)
           || *(_DWORD *)(v51 + 12 * (int)v47 + 8) == v46))
        {
          uint64_t v53 = *(void *)(*(void *)(*(void *)(v50 + 80) + 8 * *(__int16 *)(v51 + 12 * (int)v47 + 6) + 32)
                          + 16);
          uint64_t v54 = *(void *)(v53 + 128);
          if (*(void *)(v54 + 16)
            && (unint64_t v55 = sub_1B62C1A30((uint64_t)&type metadata for MetalScriptReflection), (v56 & 1) != 0))
          {
            char v57 = *(ValueMetadata **)(*(void *)(v53 + 24) + 16 * *(void *)(*(void *)(v54 + 56) + 8 * v55) + 32);
            swift_bridgeObjectRetain();
            swift_release();
            BOOL v52 = v57 != &type metadata for MetalScriptReflection;
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_release();
            BOOL v52 = 1;
          }
          swift_unownedRetainStrong();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_release();
          swift_unownedRetainStrong();
          BOOL v52 = 1;
          if ((v47 & 0x80000000) != 0) {
            goto LABEL_58;
          }
        }
        if (*(void *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v47)
        {
          uint64_t v58 = *(void *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          if (v46 == -1 || *(_DWORD *)(v58 + 12 * (int)v47 + 8) == v46)
          {
            BOOL v59 = v52;
            long long v60 = (int *)(v58 + 12 * (int)v47);
            uint64_t v24 = *(void *)(*(void *)(v50 + 136) + 8 * *v60 + 32);
            __int16 v61 = *((_WORD *)v60 + 2);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
            sub_1B6869354(v24, v61, v48, v50, v47 | (v46 << 32));
            if (v200) {
              goto LABEL_190;
            }
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
            BOOL v52 = v59;
          }
        }
LABEL_58:
        swift_release();
        swift_unownedRetainStrong();
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong()) {
          swift_unknownObjectRelease();
        }
        if (BYTE8(v223) == 1)
        {
          swift_unownedRetainStrong();
          *(void *)&long long v250 = __PAIR64__(v46, v47);
          *((void *)&v250 + 1) = v50;
          sub_1B6987E48();
          *((void *)&v252 + 1) = v62;
          *(void *)&long long v253 = &off_1F0F68360;
          *(void *)&long long v251 = v48;
          BYTE8(v251) = v52;
          BYTE8(v253) = 12;
          uint64_t v63 = *(void *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          if (v63 && (*(unsigned char *)(v63 + 81) & 1) != 0 && *(void *)(v63 + 24))
          {
            uint64_t Strong = swift_weakLoadStrong();
            swift_bridgeObjectRetain();
            if (Strong)
            {
              swift_retain();
              swift_unknownObjectRetain();
              swift_release();
              sub_1B6873570((uint64_t)&v250, (uint64_t)v248);
              uint64_t v65 = *(void **)(v63 + 16);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v63 + 16) = v65;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                uint64_t v65 = sub_1B68C0B2C(0, v65[2] + 1, 1, v65);
                *(void *)(v63 + 16) = v65;
              }
              unint64_t v68 = v65[2];
              unint64_t v67 = v65[3];
              if (v68 >= v67 >> 1)
              {
                uint64_t v65 = sub_1B68C0B2C(v67 > 1, v68 + 1, 1, v65);
                *(void *)(v63 + 16) = v65;
              }
              v65[2] = v68 + 1;
              sub_1B68735CC((uint64_t)v248, (uint64_t)&v65[8 * v68 + 4]);
              swift_release();
              swift_unknownObjectRelease();
              swift_release();
LABEL_72:
              sub_1B67421B0((uint64_t)&v250);
              goto LABEL_37;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          swift_release();
          goto LABEL_72;
        }
LABEL_37:
        sub_1B636C450((uint64_t)&v222);
        swift_bridgeObjectRelease();
        v45 += 2;
        if (--v44) {
          continue;
        }
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v5 = v200;
      uint64_t v6 = v182;
LABEL_74:
      long long v69 = *(_OWORD *)(a3 + 120);
      v261[0] = *(_OWORD *)(a3 + 104);
      v261[1] = v69;
      uint64_t v262 = *(void *)(a3 + 136);
      sub_1B62C9DA8(v6, (uint64_t)v261, 0x200000000, v221);
      sub_1B62CA3FC((uint64_t)v221, (uint64_t)&v222, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
      if ((void)v222)
      {
        long long v230 = v222;
        long long v231 = v223;
        uint64_t v232 = v224;
        if (v229 > 0)
        {
          uint64_t v186 = v226;
          if (v226)
          {
            uint64_t v184 = v225;
            uint64_t v70 = v228[4];
            int v190 = *(unsigned __int8 *)(v227 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            uint64_t v192 = v228;
            uint64_t v179 = v228 + 8;
            uint64_t v180 = (uint64_t)(v228 + 6);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v71 = 0;
            uint64_t v183 = v70;
            while (1)
            {
              uint64_t v188 = v71;
              uint64_t v72 = (unsigned int *)(v184 + 48 * v71);
              uint64_t v74 = *v72;
              uint64_t v73 = v72[1];
              uint64_t v76 = (uint64_t *)*((void *)v72 + 2);
              uint64_t v75 = *((void *)v72 + 3);
              uint64_t v77 = (char *)*((void *)v72 + 5);
              uint64_t v204 = *((void *)v72 + 4);
              if (v190)
              {
                uint64_t v78 = (os_unfair_lock_s *)*((void *)v77 + 47);
                swift_retain();
                os_unfair_lock_lock(v78);
                os_unfair_lock_lock(*((os_unfair_lock_t *)v77 + 43));
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v70);
              sub_1B62CA3FC(v180, (uint64_t)v247, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
              uint64_t v79 = v192[4];
              uint64_t v80 = *(void *)(*(void *)(*(void *)(*((void *)v77 + 5) + 16) + 32) + 16) + 1;
              swift_retain();
              v192[6] = ecs_stack_allocator_allocate(v79, 48 * v80, 8);
              v192[7] = v80;
              v179[1] = 0;
              v179[2] = 0;
              *uint64_t v179 = 0;
              swift_release();
              unint64_t v81 = v76;
              uint64_t v82 = sub_1B62C9024((uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1F0F7B198, v76, v75, v204, (uint64_t)v192);
              uint64_t v266 = v77;
              uint64_t v207 = v82;
              uint64_t v201 = v5;
              if (!v81) {
                break;
              }
              uint64_t v83 = a4;
              if (v204)
              {
                uint64_t v84 = v204;
                uint64_t v85 = 0;
                uint64_t v197 = v81;
                while (1)
                {
                  uint64_t v86 = *v83;
                  if (!*(void *)(*v83 + 16)) {
                    goto LABEL_87;
                  }
                  uint64_t v87 = v81[v85];
                  uint64_t v88 = sub_1B62BE38C(*(void *)(v82 + 168 * v85));
                  if ((v89 & 1) == 0) {
                    goto LABEL_87;
                  }
                  uint64_t v90 = (uint64_t *)(*(void *)(v86 + 56) + 32 * v88);
                  uint64_t v92 = *v90;
                  uint64_t v91 = v90[1];
                  uint64_t v93 = v90[2];
                  uint64_t v94 = v90[3];
                  sub_1B6987D8C(a1, (uint64_t)v218);
                  uint64_t KeyPath = swift_getKeyPath();
                  uint64_t v96 = *((void *)v77 + 2);
                  uint64_t v24 = v77[184];
                  swift_retain();
                  if (v24) {
                    goto LABEL_189;
                  }
                  int v97 = *(_DWORD *)(*((void *)v77 + 21) + 4 * v87);
                  int v98 = *(_DWORD *)(*(void *)(v96 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v97 + 8);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_release();
                  if (v97 != -1 || v98 != 0)
                  {
                    uint64_t v100 = v218[0];
                    swift_unownedRetainStrong();
                    swift_release();
                    if (swift_unknownObjectUnownedLoadStrong()) {
                      swift_unknownObjectRelease();
                    }
                    swift_unownedRetainStrong();
                    if (v97 < 0
                      || *(void *)(v100 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v97
                      || ((uint64_t v101 = *(void *)(v100 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v98 != -1)
                        ? (BOOL v102 = *(_DWORD *)(v101 + 12 * v97 + 8) == v98)
                        : (BOOL v102 = 1),
                          !v102
                       || (uint64_t v103 = (int *)(v101 + 12 * v97),
                           uint64_t v104 = *(void *)(*(void *)(v100 + 136) + 8 * *v103 + 32),
                           uint64_t v105 = *(void *)(v104 + 48),
                           (uint64_t v106 = *(void *)(v105 + 16)) == 0)))
                    {
LABEL_108:
                      swift_release();
LABEL_109:
                      uint64_t v109 = swift_unknownObjectUnownedLoadStrong();
                      swift_release();
                      uint64_t v77 = v266;
                      if (v109) {
                        swift_unknownObjectRelease();
                      }
                      goto LABEL_86;
                    }
                    int v107 = *((__int16 *)v103 + 2);
                    int32x2_t v108 = (void *)(v105 + 56);
                    while ((ValueMetadata *)*(v108 - 3) != &type metadata for TextureShaderAsset)
                    {
                      v108 += 5;
                      if (!--v106) {
                        goto LABEL_108;
                      }
                    }
                    uint64_t v110 = (void *)(*(void *)(v104 + 128) + *v108 + 168 * v107);
                    uint64_t v194 = v110[15];
                    __int16 v169 = v110;
                    uint64_t v175 = v110[14];
                    uint64_t v177 = v110[16];
                    uint64_t v174 = v110[13];
                    uint64_t v171 = v100;
                    uint64_t v111 = v175;
                    if ((sub_1B6984CBC(v174, v92) & 1) != 0
                      && (sub_1B6918F70(v175, v91) & 1) != 0
                      && (sub_1B6918F70(v194, v93) & 1) != 0
                      && (sub_1B6918F70(v177, v94) & 1) != 0)
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      uint64_t v112 = swift_bridgeObjectRetain();
                      uint64_t v113 = v194;
                      uint64_t v114 = v174;
                      char v168 = 0;
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                      char v168 = 1;
                      uint64_t v114 = v92;
                      uint64_t v111 = v91;
                      uint64_t v113 = v93;
                      uint64_t v112 = v94;
                    }
                    v169[13] = v114;
                    v169[14] = v111;
                    v169[15] = v113;
                    v169[16] = v112;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v248[7] = *((_OWORD *)v169 + 7);
                    v248[8] = *((_OWORD *)v169 + 8);
                    v248[9] = *((_OWORD *)v169 + 9);
                    uint64_t v249 = v169[20];
                    v248[3] = *((_OWORD *)v169 + 3);
                    v248[4] = *((_OWORD *)v169 + 4);
                    v248[5] = *((_OWORD *)v169 + 5);
                    v248[6] = *((_OWORD *)v169 + 6);
                    v248[0] = *(_OWORD *)v169;
                    v248[1] = *((_OWORD *)v169 + 1);
                    v248[2] = *((_OWORD *)v169 + 2);
                    v169[19] = sub_1B6CF9014();
                    v169[20] = v115;
                    swift_release();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v168 & 1) == 0) {
                      goto LABEL_109;
                    }
                    if (swift_unknownObjectUnownedLoadStrong()) {
                      swift_unknownObjectRelease();
                    }
                    if (v219 == 1) {
                      break;
                    }
                  }
                  swift_release();
                  uint64_t v77 = v266;
LABEL_86:
                  unint64_t v81 = v197;
                  sub_1B636C450((uint64_t)v218);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v82 = v207;
                  uint64_t v83 = a4;
                  uint64_t v84 = v204;
LABEL_87:
                  if (++v85 == v84) {
                    goto LABEL_135;
                  }
                }
                swift_unownedRetainStrong();
                int v211 = v97;
                int v212 = v98;
                uint64_t v213 = v171;
                sub_1B677BF9C();
                uint64_t v215 = v116;
                uint64_t v216 = &off_1F0F7FE30;
                char v117 = (void *)swift_allocObject();
                uint64_t v214 = v117;
                v117[2] = KeyPath;
                v117[3] = v92;
                v117[4] = v91;
                v117[5] = v93;
                v117[6] = v94;
                char v217 = 11;
                uint64_t v118 = *(void *)(v171 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
                if (v118)
                {
                  uint64_t v77 = v266;
                  if ((*(unsigned char *)(v118 + 81) & 1) != 0 && *(void *)(v118 + 24))
                  {
                    uint64_t v119 = swift_weakLoadStrong();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_retain();
                    if (v119)
                    {
                      swift_retain();
                      swift_unknownObjectRetain();
                      swift_release();
                      sub_1B6873570((uint64_t)&v211, (uint64_t)v210);
                      unsigned int v120 = *(void **)(v118 + 16);
                      char v121 = swift_isUniquelyReferenced_nonNull_native();
                      uint64_t v122 = v120;
                      *(void *)(v118 + 16) = v120;
                      if ((v121 & 1) == 0)
                      {
                        uint64_t v122 = sub_1B68C0B2C(0, v120[2] + 1, 1, v120);
                        *(void *)(v118 + 16) = v122;
                      }
                      unint64_t v124 = v122[2];
                      unint64_t v123 = v122[3];
                      unint64_t v125 = v124 + 1;
                      if (v124 >= v123 >> 1)
                      {
                        long long v126 = sub_1B68C0B2C(v123 > 1, v124 + 1, 1, v122);
                        unint64_t v125 = v124 + 1;
                        uint64_t v122 = v126;
                        *(void *)(v118 + 16) = v126;
                      }
                      v122[2] = v125;
                      sub_1B68735CC((uint64_t)v210, (uint64_t)&v122[8 * v124 + 4]);
                      swift_release();
                      swift_unknownObjectRelease();
                      swift_release();
                      goto LABEL_133;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_retain();
                  }
                  swift_release();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_release();
                  uint64_t v77 = v266;
                }
LABEL_133:
                sub_1B67421B0((uint64_t)&v211);
                swift_release();
                goto LABEL_86;
              }
LABEL_135:
              v245[0] = v230;
              v245[1] = v231;
              uint64_t v246 = v232;
              sub_1B6345178(v192, (unsigned __int16 **)v245, (uint64_t)v247);
              uint64_t v5 = v201;
              sub_1B634507C(v77);
              uint64_t v70 = v183;
              ecs_stack_allocator_pop_snapshot(v183);
              if (v190)
              {
                os_unfair_lock_unlock(*((os_unfair_lock_t *)v77 + 43));
                os_unfair_lock_unlock(*((os_unfair_lock_t *)v77 + 47));
              }
              swift_release();
              uint64_t v71 = v188 + 1;
              if (v188 + 1 == v186)
              {
                sub_1B632F170(v221);
                goto LABEL_187;
              }
            }
            uint64_t v127 = a4;
            if (v74 == v73) {
              goto LABEL_135;
            }
            uint64_t v195 = v73;
            while (2)
            {
              uint64_t v128 = *v127;
              if (!*(void *)(*v127 + 16)) {
                goto LABEL_140;
              }
              uint64_t v129 = sub_1B62BE38C(*(void *)(v82 + 168 * v74));
              if ((v130 & 1) == 0) {
                goto LABEL_140;
              }
              uint64_t v131 = (uint64_t *)(*(void *)(v128 + 56) + 32 * v129);
              uint64_t v132 = *v131;
              uint64_t v133 = v131[1];
              uint64_t v134 = v131[2];
              uint64_t v135 = v131[3];
              sub_1B6987D8C(a1, (uint64_t)v218);
              uint64_t v136 = swift_getKeyPath();
              uint64_t v137 = *((void *)v77 + 2);
              uint64_t v24 = v77[184];
              swift_retain();
              if (v24) {
                goto LABEL_189;
              }
              int v138 = *(_DWORD *)(*((void *)v77 + 21) + 4 * v74);
              int v139 = *(_DWORD *)(*(void *)(v137 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v138 + 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_release();
              if (v138 == -1 && !v139) {
                goto LABEL_138;
              }
              int v205 = v139;
              uint64_t v140 = v218[0];
              swift_unownedRetainStrong();
              swift_release();
              if (swift_unknownObjectUnownedLoadStrong()) {
                swift_unknownObjectRelease();
              }
              swift_unownedRetainStrong();
              if ((v138 & 0x80000000) == 0
                && *(void *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v138
                && ((uint64_t v141 = *(void *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v205 != -1)
                  ? (BOOL v142 = *(_DWORD *)(v141 + 12 * v138 + 8) == v205)
                  : (BOOL v142 = 1),
                    v142
                 && (uint64_t v143 = (int *)(v141 + 12 * v138),
                     uint64_t v144 = *(void *)(*(void *)(v140 + 136) + 8 * *v143 + 32),
                     uint64_t v145 = *(void *)(v144 + 48),
                     (uint64_t v146 = *(void *)(v145 + 16)) != 0)))
              {
                int v147 = *((__int16 *)v143 + 2);
                uint64_t v148 = (void *)(v145 + 56);
                while ((ValueMetadata *)*(v148 - 3) != &type metadata for TextureShaderAsset)
                {
                  v148 += 5;
                  if (!--v146) {
                    goto LABEL_159;
                  }
                }
                uint64_t v150 = (void *)(*(void *)(v144 + 128) + *v148 + 168 * v147);
                uint64_t v151 = v150[14];
                uint64_t v198 = v150[15];
                uint64_t v172 = v150;
                uint64_t v176 = v150[13];
                uint64_t v178 = v150[16];
                uint64_t v173 = v140;
                if ((sub_1B6984CBC(v176, v132) & 1) != 0
                  && (uint64_t v152 = v151, (sub_1B6918F70(v151, v133) & 1) != 0)
                  && (sub_1B6918F70(v198, v134) & 1) != 0
                  && (sub_1B6918F70(v178, v135) & 1) != 0)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  uint64_t v153 = swift_bridgeObjectRetain();
                  uint64_t v154 = v198;
                  char v170 = 0;
                  uint64_t v155 = v176;
                }
                else
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_retain();
                  char v170 = 1;
                  uint64_t v155 = v132;
                  uint64_t v152 = v133;
                  uint64_t v154 = v134;
                  uint64_t v153 = v135;
                }
                v172[13] = v155;
                v172[14] = v152;
                v172[15] = v154;
                v172[16] = v153;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                long long v257 = *((_OWORD *)v172 + 7);
                long long v258 = *((_OWORD *)v172 + 8);
                long long v259 = *((_OWORD *)v172 + 9);
                uint64_t v260 = v172[20];
                long long v253 = *((_OWORD *)v172 + 3);
                long long v254 = *((_OWORD *)v172 + 4);
                long long v255 = *((_OWORD *)v172 + 5);
                long long v256 = *((_OWORD *)v172 + 6);
                long long v250 = *(_OWORD *)v172;
                long long v251 = *((_OWORD *)v172 + 1);
                long long v252 = *((_OWORD *)v172 + 2);
                v172[19] = sub_1B6CF9014();
                v172[20] = v156;
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v170)
                {
                  if (swift_unknownObjectUnownedLoadStrong()) {
                    swift_unknownObjectRelease();
                  }
                  if (v219 == 1)
                  {
                    swift_unownedRetainStrong();
                    int v211 = v138;
                    int v212 = v205;
                    uint64_t v213 = v173;
                    sub_1B677BF9C();
                    uint64_t v215 = v157;
                    uint64_t v216 = &off_1F0F7FE30;
                    unint64_t v158 = (void *)swift_allocObject();
                    uint64_t v214 = v158;
                    v158[2] = v136;
                    v158[3] = v132;
                    v158[4] = v133;
                    v158[5] = v134;
                    v158[6] = v135;
                    char v217 = 11;
                    uint64_t v159 = *(void *)(v173 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
                    if (!v159)
                    {
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                      goto LABEL_184;
                    }
                    uint64_t v77 = v266;
                    if ((*(unsigned char *)(v159 + 81) & 1) != 0 && *(void *)(v159 + 24))
                    {
                      uint64_t v160 = swift_weakLoadStrong();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                      if (v160)
                      {
                        swift_retain();
                        swift_unknownObjectRetain();
                        swift_release();
                        sub_1B6873570((uint64_t)&v211, (uint64_t)v210);
                        char v161 = *(void **)(v159 + 16);
                        char v162 = swift_isUniquelyReferenced_nonNull_native();
                        uint64_t v163 = v161;
                        *(void *)(v159 + 16) = v161;
                        if ((v162 & 1) == 0)
                        {
                          uint64_t v163 = sub_1B68C0B2C(0, v161[2] + 1, 1, v161);
                          *(void *)(v159 + 16) = v163;
                        }
                        unint64_t v165 = v163[2];
                        unint64_t v164 = v163[3];
                        unint64_t v166 = v165 + 1;
                        if (v165 >= v164 >> 1)
                        {
                          uint64_t v167 = sub_1B68C0B2C(v164 > 1, v165 + 1, 1, v163);
                          unint64_t v166 = v165 + 1;
                          uint64_t v163 = v167;
                          *(void *)(v159 + 16) = v167;
                        }
                        v163[2] = v166;
                        sub_1B68735CC((uint64_t)v210, (uint64_t)&v163[8 * v165 + 4]);
                        swift_release();
                        swift_unknownObjectRelease();
LABEL_184:
                        swift_release();
                        uint64_t v77 = v266;
LABEL_185:
                        sub_1B67421B0((uint64_t)&v211);
                        swift_release();
LABEL_139:
                        uint64_t v82 = v207;
                        sub_1B636C450((uint64_t)v218);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v127 = a4;
                        uint64_t v73 = v195;
LABEL_140:
                        if (++v74 == v73) {
                          goto LABEL_135;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                    }
                    swift_release();
                    goto LABEL_185;
                  }
LABEL_138:
                  swift_release();
                  uint64_t v77 = v266;
                  goto LABEL_139;
                }
              }
              else
              {
LABEL_159:
                swift_release();
              }
              break;
            }
            uint64_t v149 = swift_unknownObjectUnownedLoadStrong();
            swift_release();
            uint64_t v77 = v266;
            if (v149) {
              swift_unknownObjectRelease();
            }
            goto LABEL_139;
          }
        }
LABEL_187:
        sub_1B632F170(v221);
      }
      swift_bridgeObjectRelease();
      return;
    }
  }
  while (1)
  {
    uint64_t v26 = *v15++;
    uint64_t v25 = v26;
    uint64_t v27 = swift_retain();
    if (v23[184]) {
      break;
    }
    int v28 = *(_DWORD *)(*((void *)v23 + 21) + 4 * v25);
    int v29 = *(_DWORD *)(*(void *)(v27 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v28 + 8);
    swift_release();
    uint64_t v30 = *(void *)v24;
    swift_bridgeObjectRetain();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v31 = v10;
    }
    else {
      uint64_t v31 = sub_1B68C5774(0, v10[2] + 1, 1, v10);
    }
    unint64_t v33 = v31[2];
    unint64_t v32 = v31[3];
    if (v33 >= v32 >> 1) {
      uint64_t v31 = sub_1B68C5774(v32 > 1, v33 + 1, 1, v31);
    }
    v31[2] = v33 + 1;
    char v10 = v31;
    uint64_t v34 = &v31[2 * v33];
    *((_DWORD *)v34 + 8) = v28;
    *((_DWORD *)v34 + 9) = v29;
    v34[5] = v30;
    v24 += 8;
    --v17;
    char v23 = v266;
    if (!v17) {
      goto LABEL_20;
    }
  }
LABEL_189:
  sub_1B6E32BE8();
  __break(1u);
LABEL_190:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
  __break(1u);
}

uint64_t sub_1B6984950@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[14];
  uint64_t v3 = a1[15];
  uint64_t v4 = a1[16];
  *a2 = a1[13];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B69849B0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B6CF0F08(v1, v2, v3, v4);
}

uint64_t sub_1B6984A1C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

void *initializeWithCopy for MetalFunctionReflection(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MetalFunctionReflection(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MetalFunctionReflection(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MetalFunctionReflection()
{
  return &type metadata for MetalFunctionReflection;
}

ValueMetadata *type metadata accessor for ShaderFileAsset()
{
  return &type metadata for ShaderFileAsset;
}

ValueMetadata *type metadata accessor for MetalScriptReflection()
{
  return &type metadata for MetalScriptReflection;
}

uint64_t *sub_1B6984BE8(uint64_t a1)
{
  long long v2 = *(_OWORD *)(v1 + 32);
  v27[0] = *(_OWORD *)(v1 + 16);
  v27[1] = v2;
  uint64_t v28 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v27, 0x200000000, v4);
  double result = (uint64_t *)sub_1B62CA3FC((uint64_t)v4, (uint64_t)&v5, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v5)
  {
    uint64_t v16 = v5;
    int v17 = v6;
    char v18 = v7;
    uint64_t v19 = v8;
    char v20 = v9;
    uint64_t v21 = v10;
    uint64_t v22 = v11;
    long long v23 = v12;
    long long v24 = v13;
    uint64_t v25 = v14;
    uint64_t v26 = v15;
    sub_1B6D8637C((uint64_t)&v16);
    return sub_1B632F170(v4);
  }
  return result;
}

uint64_t sub_1B6984CBC(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_20;
    }
    uint64_t v12 = v4 + 1;
    if (v4 + 1 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    if (!v13)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v12);
      if (!v13)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v12);
        if (!v13)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v12);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_19:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v12 << 6);
    uint64_t v4 = v12;
LABEL_20:
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    unint64_t v15 = sub_1B62C1A30(*(void *)(*(void *)(a1 + 48) + 8 * v11));
    if ((v16 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * v15) != v14) {
      return 0;
    }
  }
  while (v9 - 5 != v4)
  {
    unint64_t v13 = *(void *)(a1 + 104 + 8 * v4++);
    if (v13)
    {
      uint64_t v12 = v4 + 4;
      goto LABEL_19;
    }
  }
  return 1;
}

uint64_t sub_1B6984E30(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v27 = a1 + 112;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    uint64_t v11 = v4 + 1;
    if (v4 + 1 >= v28) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    if (!v12)
    {
      uint64_t v11 = v4 + 2;
      if (v4 + 2 >= v28) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v11);
      if (!v12)
      {
        uint64_t v11 = v4 + 3;
        if (v4 + 3 >= v28) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v11);
        if (!v12)
        {
          uint64_t v11 = v4 + 4;
          if (v4 + 4 >= v28) {
            return 1;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v11);
          if (!v12)
          {
            uint64_t v11 = v4 + 5;
            if (v4 + 5 >= v28) {
              return 1;
            }
            unint64_t v12 = *(void *)(v5 + 8 * v11);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v11 << 6);
    uint64_t v4 = v11;
LABEL_23:
    uint64_t v13 = 16 * v10;
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    int v17 = (uint64_t *)(*(void *)(a1 + 56) + v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1B62B2CE0(v15, v16);
    char v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    long long v23 = (void *)(*(void *)(a2 + 56) + 16 * v20);
    if (*v23 == v19 && v23[1] == v18)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v25 = sub_1B6E334B8();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0) {
        return 0;
      }
    }
  }
  while (v28 - 6 != v4)
  {
    unint64_t v12 = *(void *)(v27 + 8 * v4++);
    if (v12)
    {
      uint64_t v11 = v4 + 5;
      goto LABEL_22;
    }
  }
  return 1;
}

uint64_t sub_1B6985050(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v44 = v2;
  uint64_t v45 = v3;
  uint64_t v5 = a1;
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  uint64_t v30 = a1 + 64;
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v29 = a1 + 112;
  while (v9)
  {
    uint64_t v34 = (v9 - 1) & v9;
    uint64_t v35 = v6;
    unint64_t v10 = __clz(__rbit64(v9)) | (v6 << 6);
LABEL_22:
    uint64_t v13 = *(void *)(v5 + 56) + 80 * v10;
    uint64_t v15 = *(void *)v13;
    uint64_t v14 = *(void *)(v13 + 8);
    uint64_t v17 = *(void *)(v13 + 16);
    uint64_t v16 = *(void *)(v13 + 24);
    uint64_t v19 = *(void *)(v13 + 32);
    uint64_t v18 = *(void *)(v13 + 40);
    uint64_t v20 = *(void *)(v13 + 56);
    uint64_t v33 = *(void *)(v13 + 48);
    int v21 = *(char *)(v13 + 64);
    unint64_t v22 = sub_1B62C1A30(*(void *)(*(void *)(v5 + 48) + 8 * v10));
    if ((v23 & 1) == 0) {
      return 0;
    }
    uint64_t v24 = *(void *)(a2 + 56) + 80 * v22;
    int v25 = *(char *)(v24 + 64);
    if (v25 < 0)
    {
      uint64_t result = 0;
      if ((v21 & 0x80000000) == 0) {
        return result;
      }
      uint64_t v5 = a1;
      unint64_t v9 = v34;
      uint64_t v6 = v35;
      if (*(void *)v24 != v15) {
        return result;
      }
    }
    else
    {
      uint64_t v26 = *(void *)(v24 + 56);
      uint64_t v36 = *(void *)v24;
      long long v37 = *(_OWORD *)(v24 + 8);
      long long v38 = *(_OWORD *)(v24 + 24);
      long long v39 = *(_OWORD *)(v24 + 40);
      uint64_t v40 = v26;
      char v41 = v25;
      if (v21 < 0) {
        return 0;
      }
      v42[0] = v15;
      v42[1] = v14;
      v42[2] = v17;
      v42[3] = v16;
      void v42[4] = v19;
      v42[5] = v18;
      v42[6] = v33;
      v42[7] = v20;
      char v43 = v21;
      char v27 = sub_1B6790DC4((uint64_t)&v36, (uint64_t)v42);
      uint64_t v5 = a1;
      unint64_t v9 = v34;
      uint64_t v6 = v35;
      if ((v27 & 1) == 0) {
        return 0;
      }
    }
  }
  uint64_t v11 = v6 + 1;
  if (v6 + 1 >= v31) {
    return 1;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v11);
  if (v12) {
    goto LABEL_21;
  }
  uint64_t v11 = v6 + 2;
  if (v6 + 2 >= v31) {
    return 1;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v11);
  if (v12) {
    goto LABEL_21;
  }
  uint64_t v11 = v6 + 3;
  if (v6 + 3 >= v31) {
    return 1;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v11);
  if (v12) {
    goto LABEL_21;
  }
  uint64_t v11 = v6 + 4;
  if (v6 + 4 >= v31) {
    return 1;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v11);
  if (v12) {
    goto LABEL_21;
  }
  uint64_t v11 = v6 + 5;
  if (v6 + 5 >= v31) {
    return 1;
  }
  unint64_t v12 = *(void *)(v30 + 8 * v11);
  if (v12)
  {
LABEL_21:
    uint64_t v34 = (v12 - 1) & v12;
    uint64_t v35 = v11;
    unint64_t v10 = __clz(__rbit64(v12)) + (v11 << 6);
    goto LABEL_22;
  }
  while (v31 - 6 != v6)
  {
    unint64_t v12 = *(void *)(v29 + 8 * v6++);
    if (v12)
    {
      uint64_t v11 = v6 + 5;
      goto LABEL_21;
    }
  }
  return 1;
}

uint64_t sub_1B69852C4(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    uint64_t v12 = v4 + 1;
    if (v4 + 1 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    if (!v13)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v12);
      if (!v13)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v12);
        if (!v13)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v12);
          if (!v13)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              return 1;
            }
            unint64_t v13 = *(void *)(v5 + 8 * v12);
            if (!v13) {
              break;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v12 << 6);
    uint64_t v4 = v12;
LABEL_22:
    int32x2_t v14 = *(int32x2_t *)(*(void *)(a1 + 56) + 8 * v11);
    unint64_t v15 = sub_1B62C1A30(*(void *)(*(void *)(a1 + 48) + 8 * v11));
    if (v16)
    {
      int32x2_t v17 = vceq_s32(*(int32x2_t *)(*(void *)(a2 + 56) + 8 * v15), v14);
      if (v17.i32[0] & v17.i32[1]) {
        continue;
      }
    }
    return 0;
  }
  while (v9 - 6 != v4)
  {
    unint64_t v13 = *(void *)(a1 + 112 + 8 * v4++);
    if (v13)
    {
      uint64_t v12 = v4 + 5;
      goto LABEL_21;
    }
  }
  return 1;
}

uint64_t sub_1B6985458(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4;
  }
  unint64_t v8 = v7 - 4;
  int64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

BOOL sub_1B6985508(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  char v2 = *(unsigned char *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32)) {
    return *(void *)(a1 + 40) == *(void *)(a2 + 40);
  }
  return 0;
}

uint64_t sub_1B698557C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5373726566667562 && a2 == 0xEB00000000657A69;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737475706E69 && a2 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7374757074756FLL && a2 == 0xE700000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74754F7475706E69 && a2 == 0xEC00000073747570)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1B6985760()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 7) {
    return 7;
  }
  else {
    return v0;
  }
}

__n128 sub_1B69857AC(uint64_t a1, uint64_t a2, void *a3)
{
  switch(a2)
  {
    case 2:
      uint64_t v12 = (void *)a3[2];
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = sub_1B68C2068(0, v12[2] + 1, 1, v12);
      }
      unint64_t v13 = v12[2];
      unint64_t v14 = v12[3];
      unint64_t v15 = v13 + 1;
      if (v13 >= v14 >> 1)
      {
        unint64_t v34 = v13 + 1;
        char v27 = v12;
        unint64_t v28 = v12[2];
        uint64_t v29 = sub_1B68C2068(v14 > 1, v13 + 1, 1, v27);
        unint64_t v13 = v28;
        unint64_t v15 = v34;
        uint64_t v12 = v29;
      }
      v12[2] = v15;
      char v16 = &v12[6 * v13];
      __n128 result = *(__n128 *)a1;
      long long v17 = *(_OWORD *)(a1 + 32);
      *((_OWORD *)v16 + 3) = *(_OWORD *)(a1 + 16);
      *((_OWORD *)v16 + 4) = v17;
      *((__n128 *)v16 + 2) = result;
      a3[2] = v12;
      break;
    case 1:
      uint64_t v18 = (void *)a3[3];
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = sub_1B68C2068(0, v18[2] + 1, 1, v18);
      }
      unint64_t v19 = v18[2];
      unint64_t v20 = v18[3];
      unint64_t v21 = v19 + 1;
      if (v19 >= v20 >> 1)
      {
        unint64_t v35 = v19 + 1;
        uint64_t v30 = v18;
        unint64_t v31 = v18[2];
        unint64_t v32 = sub_1B68C2068(v20 > 1, v19 + 1, 1, v30);
        unint64_t v19 = v31;
        unint64_t v21 = v35;
        uint64_t v18 = v32;
      }
      v18[2] = v21;
      unint64_t v22 = &v18[6 * v19];
      __n128 result = *(__n128 *)a1;
      long long v23 = *(_OWORD *)(a1 + 32);
      *((_OWORD *)v22 + 3) = *(_OWORD *)(a1 + 16);
      *((_OWORD *)v22 + 4) = v23;
      *((__n128 *)v22 + 2) = result;
      a3[3] = v18;
      break;
    case 0:
      char v5 = (void *)a3[1];
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v5 = sub_1B68C2068(0, v5[2] + 1, 1, v5);
      }
      unint64_t v6 = v5[2];
      unint64_t v7 = v5[3];
      unint64_t v8 = v6 + 1;
      if (v6 >= v7 >> 1)
      {
        unint64_t v33 = v6 + 1;
        uint64_t v24 = v5;
        unint64_t v25 = v5[2];
        uint64_t v26 = sub_1B68C2068(v7 > 1, v6 + 1, 1, v24);
        unint64_t v6 = v25;
        unint64_t v8 = v33;
        char v5 = v26;
      }
      v5[2] = v8;
      int64_t v9 = &v5[6 * v6];
      __n128 result = *(__n128 *)a1;
      long long v11 = *(_OWORD *)(a1 + 32);
      *((_OWORD *)v9 + 3) = *(_OWORD *)(a1 + 16);
      *((_OWORD *)v9 + 4) = v11;
      *((__n128 *)v9 + 2) = result;
      a3[1] = v5;
      break;
  }
  return result;
}

void sub_1B69859C4(void *a1, id *a2)
{
  uint64_t v4 = swift_dynamicCastObjCProtocolConditional();
  if (v4)
  {
    char v5 = (void *)v4;
    swift_unknownObjectRetain();
    id v6 = objc_msgSend(v5, sel_bufferStructType);
    if (v6)
    {
      uint64_t v78 = a2;
      uint64_t v70 = v6;
      id v7 = objc_msgSend(v6, sel_members);
      sub_1B63989B8(0, (unint64_t *)&qword_1EB97D840);
      unint64_t v8 = sub_1B6E31C28();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_1B6E32C18();
        swift_bridgeObjectRelease();
        if (v9)
        {
LABEL_5:
          uint64_t v10 = 0;
          uint64_t v73 = v5;
          unint64_t v74 = v8 & 0xC000000000000001;
          long long v11 = &selRef_bufferIndex;
          uint64_t v71 = v9;
          unint64_t v72 = v8;
          do
          {
            if (v74) {
              id v12 = (id)MEMORY[0x1BA9B4580](v10, v8);
            }
            else {
              id v12 = *(id *)(v8 + 8 * v10 + 32);
            }
            unint64_t v13 = v12;
            id v14 = [v12 v11[268]];
            uint64_t v15 = MEMORY[0x1E4FBB470];
            switch((unint64_t)v14)
            {
              case 3uLL:
                goto LABEL_24;
              case 4uLL:
                char v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
                long long v17 = &qword_1EB980E90;
                goto LABEL_13;
              case 5uLL:
                char v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
                long long v17 = (unint64_t *)&qword_1EB980EB0;
                goto LABEL_13;
              case 6uLL:
                char v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
                long long v17 = (unint64_t *)&qword_1EB980EF0;
LABEL_13:
                sub_1B6987F50(0, v17, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], v16);
                goto LABEL_23;
              case 7uLL:
                type metadata accessor for simd_float2x2(0);
                goto LABEL_23;
              case 8uLL:
                type metadata accessor for simd_float2x3(0);
                goto LABEL_23;
              case 9uLL:
                type metadata accessor for simd_float2x4(0);
                goto LABEL_23;
              case 0xAuLL:
                type metadata accessor for simd_float3x2(0);
                goto LABEL_23;
              case 0xBuLL:
                type metadata accessor for simd_float3x3(0);
                goto LABEL_23;
              case 0xCuLL:
                type metadata accessor for simd_float3x4(0);
                goto LABEL_23;
              case 0xDuLL:
                type metadata accessor for simd_float4x2(0);
                goto LABEL_23;
              case 0xEuLL:
                type metadata accessor for simd_float4x3(0);
                goto LABEL_23;
              case 0xFuLL:
                type metadata accessor for simd_float4x4(0);
LABEL_23:
                uint64_t v15 = v18;
                goto LABEL_24;
              case 0x1DuLL:
                uint64_t v15 = MEMORY[0x1E4FBB550];
                goto LABEL_24;
              case 0x21uLL:
                uint64_t v15 = MEMORY[0x1E4FBB808];
                goto LABEL_24;
              case 0x35uLL:
                uint64_t v15 = MEMORY[0x1E4FBB390];
LABEL_24:
                id v19 = objc_msgSend(v5, sel_name);
                uint64_t v20 = sub_1B6E31798();
                unint64_t v22 = v21;

                id v80 = (id)v20;
                id v81 = v22;
                sub_1B6E31948();
                id v23 = objc_msgSend(v13, sel_name);
                sub_1B6E31798();

                sub_1B6E31948();
                swift_bridgeObjectRelease();
                uint64_t v24 = v20;
                if ([v13 v11[268]] == (id)58) {
                  uint64_t v25 = 8;
                }
                else {
                  uint64_t v25 = 1;
                }
                type metadata accessor for PropertyDescription();
                uint64_t v26 = swift_allocObject();
                *(void *)(v26 + 104) = 0;
                *(void *)(v26 + 80) = 0;
                *(void *)(v26 + 88) = 0;
                *(unsigned char *)(v26 + 112) = 1;
                *(void *)(v26 + 128) = 0;
                *(void *)(v26 + 136) = 0;
                *(void *)(v26 + 120) = 0;
                uint64_t v27 = MEMORY[0x1E4FBC860];
                *(void *)(v26 + 160) = MEMORY[0x1E4FBC860];
                *(void *)(v26 + 216) = 0;
                uint64_t v28 = sub_1B684D3C0();
                *(void *)(v26 + 16) = v24;
                *(void *)(v26 + 24) = v22;
                *(void *)(v26 + 32) = v28;
                *(void *)(v26 + 40) = v15;
                *(void *)(v26 + 48) = 0;
                *(unsigned char *)(v26 + 56) = 1;
                *(_WORD *)(v26 + 58) = 1024;
                *(_DWORD *)(v26 + 184) = 0;
                *(unsigned char *)(v26 + 188) = 1;
                *(_DWORD *)(v26 + 192) = 0;
                *(unsigned char *)(v26 + 196) = 1;
                *(void *)(v26 + 200) = 0x1000100000000;
                *(unsigned char *)(v26 + 208) = 1;
                *(void *)(v26 + 96) = 0;
                *(_WORD *)(v26 + 210) = 0;
                *(void *)(v26 + 64) = 0;
                *(void *)(v26 + 72) = 0;
                *(void *)(v26 + 144) = v25;
                *(void *)(v26 + 152) = 0;
                *(void *)(v26 + 168) = 0;
                *(void *)(v26 + 176) = 0;
                *(void *)(v26 + 160) = v27;
                swift_bridgeObjectRelease();
                uint64_t v29 = (void *)swift_dynamicCastObjCProtocolConditional();
                uint64_t v30 = v29;
                if (v29) {
                  id v31 = objc_msgSend(v29, sel_textureType);
                }
                else {
                  id v31 = 0;
                }
                id v32 = objc_msgSend(v13, sel_offset);
                unint64_t v33 = a1;
                id v34 = objc_msgSend(a1, sel_type);
                id v35 = objc_msgSend(v33, sel_index);
                swift_retain();
                uint64_t v36 = v33;
                id v37 = objc_msgSend(v33, sel_access);
                if (v37 == (id)2)
                {
                  long long v42 = v78[2];
                  swift_retain();
                  id v76 = v32;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    long long v42 = sub_1B68C2068(0, v42[2] + 1, 1, v42);
                  }
                  unint64_t v44 = v42[2];
                  unint64_t v43 = v42[3];
                  if (v44 >= v43 >> 1) {
                    long long v42 = sub_1B68C2068(v43 > 1, v44 + 1, 1, v42);
                  }
                  v42[2] = v44 + 1;
                  uint64_t v45 = &v42[6 * v44];
                  v45[4] = v34;
                  v45[5] = v31;
                  *((unsigned char *)v45 + 48) = v30 == 0;
                  v45[7] = v35;
                  v45[8] = v76;
                  v45[9] = v26;
                  swift_release_n();

                  v78[2] = v42;
                }
                else if (v37 == (id)1)
                {
                  uint64_t v46 = v78[3];
                  swift_retain();
                  id v77 = v32;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v46 = sub_1B68C2068(0, v46[2] + 1, 1, v46);
                  }
                  unint64_t v48 = v46[2];
                  unint64_t v47 = v46[3];
                  if (v48 >= v47 >> 1) {
                    uint64_t v46 = sub_1B68C2068(v47 > 1, v48 + 1, 1, v46);
                  }
                  v46[2] = v48 + 1;
                  char v49 = &v46[6 * v48];
                  v49[4] = v34;
                  v49[5] = v31;
                  *((unsigned char *)v49 + 48) = v30 == 0;
                  v49[7] = v35;
                  v49[8] = v77;
                  v49[9] = v26;
                  swift_release_n();

                  v78[3] = v46;
                }
                else if (v37)
                {
                  swift_release_n();
                }
                else
                {
                  long long v38 = v78[1];
                  swift_retain();
                  id v75 = v32;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    long long v38 = sub_1B68C2068(0, v38[2] + 1, 1, v38);
                  }
                  unint64_t v40 = v38[2];
                  unint64_t v39 = v38[3];
                  if (v40 >= v39 >> 1) {
                    long long v38 = sub_1B68C2068(v39 > 1, v40 + 1, 1, v38);
                  }
                  v38[2] = v40 + 1;
                  char v41 = &v38[6 * v40];
                  v41[4] = v34;
                  v41[5] = v31;
                  *((unsigned char *)v41 + 48) = v30 == 0;
                  v41[7] = v35;
                  v41[8] = v75;
                  v41[9] = v26;
                  swift_release_n();

                  v78[1] = v38;
                }
                a1 = v36;
                unint64_t v8 = v72;
                char v5 = v73;
                uint64_t v9 = v71;
                long long v11 = &selRef_bufferIndex;
                break;
              default:

                break;
            }
            ++v10;
          }
          while (v9 != v10);
        }
      }
      else
      {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v9) {
          goto LABEL_5;
        }
      }
      swift_bridgeObjectRelease();
      id v67 = objc_msgSend(a1, sel_index);
      id v68 = objc_msgSend(v5, sel_bufferDataSize);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v80 = *v78;
      *uint64_t v78 = (id)0x8000000000000000;
      sub_1B67E391C((uint64_t)v68, (uint64_t)v67, isUniquelyReferenced_nonNull_native);
      *uint64_t v78 = v80;
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      return;
    }
    swift_unknownObjectRelease();
  }
  id v50 = objc_msgSend(a1, sel_type);
  if (v50 == (id)2)
  {
    BOOL v52 = &type metadata for Entity;
  }
  else
  {
    if (v50) {
      return;
    }
    sub_1B69821C0((uint64_t)objc_msgSend(a1, sel_bufferDataType));
    if (!v51) {
      return;
    }
    BOOL v52 = v51;
  }
  id v53 = objc_msgSend(a1, sel_name);
  uint64_t v54 = sub_1B6E31798();
  uint64_t v56 = v55;

  if (objc_msgSend(a1, sel_type) == (id)2) {
    uint64_t v57 = 8;
  }
  else {
    uint64_t v57 = 1;
  }
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  uint64_t v58 = sub_1B684D5F0(v54, v56, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, v57, 0, (uint64_t)v52, 0, 0, 0,
          MEMORY[0x1E4FBC860]);
  BOOL v59 = (void *)swift_dynamicCastObjCProtocolConditional();
  long long v60 = v59;
  if (v59) {
    id v61 = objc_msgSend(v59, sel_textureType);
  }
  else {
    id v61 = 0;
  }
  id v80 = objc_msgSend(a1, sel_type);
  id v81 = v61;
  BOOL v82 = v60 == 0;
  id v83 = objc_msgSend(a1, sel_index);
  uint64_t v84 = 0;
  uint64_t v85 = v58;
  uint64_t v62 = swift_dynamicCastObjCProtocolConditional();
  if (v62)
  {
    uint64_t v63 = (void *)v62;
    swift_unknownObjectRetain();
    swift_retain();
    id v64 = objc_msgSend(a1, sel_index);
    id v65 = objc_msgSend(v63, sel_bufferDataSize);
    char v66 = swift_isUniquelyReferenced_nonNull_native();
    id v79 = *a2;
    *a2 = (id)0x8000000000000000;
    sub_1B67E391C((uint64_t)v65, (uint64_t)v64, v66);
    *a2 = v79;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  sub_1B69857AC((uint64_t)&v80, (uint64_t)objc_msgSend(a1, sel_access), a2);
  swift_release_n();
}

uint64_t sub_1B6986494(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, void *a5, uint64_t a6, id *a7)
{
  uint64_t v120 = a6;
  id v128 = a5;
  uint64_t v116 = a2;
  uint64_t v119 = a1;
  v144[1] = *(id *)MEMORY[0x1E4F143B8];
  sub_1B62E17B4();
  uint64_t v127 = v10;
  MEMORY[0x1F4188790](v10, v11);
  long long v126 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_1B6E31098();
  uint64_t v13 = *(void *)(v125 - 8);
  MEMORY[0x1F4188790](v125, v14);
  unint64_t v124 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  char v130 = a4;
  *a4 = (id)MEMORY[0x1E4FBC868];
  sub_1B6987D2C();
  unint64_t v17 = *(void *)(a3 + *(int *)(v16 + 44));
  if (v17) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = MEMORY[0x1E4FBC860];
  }
  unint64_t v133 = v18;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    unint64_t v18 = v133;
    if (v19) {
      goto LABEL_6;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
LABEL_6:
  uint64_t v20 = 0;
  unint64_t v131 = v18 & 0xC000000000000001;
  unint64_t v117 = v18 + 32;
  unint64_t v123 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  unint64_t v122 = 0x80000001B6F3FA60;
  long long v121 = xmmword_1B6E77050;
  uint64_t v118 = 0x80000001B6F3FA30;
  uint64_t v132 = v19;
  uint64_t v129 = a7;
  while (1)
  {
    uint64_t v139 = v20;
    if (v131)
    {
      unint64_t v21 = (void *)MEMORY[0x1BA9B4580]();
    }
    else
    {
      unint64_t v21 = *(void **)(v117 + 8 * v20);
      swift_unknownObjectRetain();
    }
    if (objc_msgSend(v21, sel_functionType) == (id)3)
    {
      id v140 = 0;
      v144[0] = 0;
      id v22 = objc_msgSend(v128, sel_newComputePipelineStateWithFunction_options_reflection_error_, v21, 3, &v140, v144);
      id v23 = v140;
      if (v22)
      {
        id v24 = v144[0];
        id v25 = v23;
        swift_unknownObjectRelease();
        if (!v25) {
          goto LABEL_48;
        }
        id v140 = (id)MEMORY[0x1E4FBC868];
        unint64_t v141 = MEMORY[0x1E4FBC860];
        uint64_t v142 = MEMORY[0x1E4FBC860];
        uint64_t v143 = MEMORY[0x1E4FBC860];
        id v26 = v25;
        id v27 = objc_msgSend(v26, sel_bindings);
        sub_1B62F3064(0, (unint64_t *)&qword_1EB97D7E0);
        unint64_t v28 = sub_1B6E31C28();

        if (v28 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v29 = sub_1B6E32C18();
          swift_bridgeObjectRelease();
          id v137 = v26;
          if (v29)
          {
LABEL_17:
            for (uint64_t i = 0; i != v29; ++i)
            {
              if ((v28 & 0xC000000000000001) != 0)
              {
                id v31 = (void *)MEMORY[0x1BA9B4580](i, v28);
              }
              else
              {
                id v31 = *(void **)(v28 + 8 * i + 32);
                swift_unknownObjectRetain();
              }
              sub_1B69859C4(v31, &v140);
              swift_unknownObjectRelease();
            }
          }
        }
        else
        {
          uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v137 = v26;
          if (v29) {
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRelease();
        id v60 = objc_msgSend(v21, sel_name);
        uint64_t v61 = sub_1B6E31798();
        uint64_t v63 = v62;

        uint64_t v65 = (uint64_t)v140;
        uint64_t v64 = v141;
        uint64_t v67 = v142;
        uint64_t v66 = v143;
        id v68 = v130;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v144[0] = *v68;
        *id v68 = (id)0x8000000000000000;
        sub_1B67E8278(v65, v64, v67, v66, v61, v63, isUniquelyReferenced_nonNull_native);
        *id v68 = v144[0];
        id v32 = v137;
LABEL_46:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = v132;
        a7 = v129;
        goto LABEL_47;
      }
      id v36 = v144[0];
      id v32 = v23;
      id v35 = (void *)sub_1B6E30D78();

      swift_willThrow();
LABEL_35:
      int v138 = 0;

      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      id v140 = 0;
      unint64_t v141 = 0xE000000000000000;
      uint64_t v135 = qword_1EB997FD0;
      swift_retain();
      sub_1B6E328C8();
      sub_1B6E31948();
      v144[0] = v21;
      sub_1B62F3064(0, (unint64_t *)&unk_1EB9804C0);
      sub_1B6E32B18();
      sub_1B6E31948();
      v144[0] = v35;
      sub_1B62C5560(0, (unint64_t *)&qword_1EB980E40);
      sub_1B6E32B18();
      id v48 = v140;
      unint64_t v49 = v141;
      char v50 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      id v136 = v35;
      id v137 = v21;
      uint64_t v51 = qword_1EB997FF0;
      uint64_t v52 = qword_1EB985528;
      swift_retain();
      if (v52 != -1) {
        swift_once();
      }
      sub_1B62C6034(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v121;
      *(void *)(v53 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v53 + 64) = sub_1B678615C();
      *(void *)(v53 + 32) = v48;
      *(void *)(v53 + 40) = v49;
      swift_bridgeObjectRetain();
      sub_1B6E31258();
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v54 = v124;
      sub_1B6E31088();
      uint64_t v55 = (uint64_t)v126;
      uint64_t v56 = v127[12];
      uint64_t v57 = v127[16];
      uint64_t v58 = v127[20];
      uint64_t v134 = v51;
      BOOL v59 = &v126[v58];
      (*v123)(v126, v54, v125);
      *(unsigned char *)(v55 + v56) = v50;
      *(void *)(v55 + v57) = 0;
      *(void *)BOOL v59 = v48;
      *((void *)v59 + 1) = v49;
      swift_bridgeObjectRetain();
      sub_1B6E31368();
      swift_release();
      sub_1B67A3738(v55);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      swift_unknownObjectRelease();
      a7 = v129;
      uint64_t v19 = v132;
      goto LABEL_8;
    }
    id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F352F0]), sel_init);
    objc_msgSend(v32, sel_setFragmentFunction_, v21);
    unint64_t v33 = v138;
    id v34 = sub_1B679506C(0xD000000000000023, v118, 0, MEMORY[0x1E4FBC860], 0);
    if (v33)
    {
      id v35 = v33;
      goto LABEL_35;
    }
    int v138 = 0;
    objc_msgSend(v32, sel_setVertexFunction_, v34);
    swift_unknownObjectRelease();
    id v140 = 0;
    v144[0] = 0;
    id v37 = objc_msgSend(v128, sel_newRenderPipelineStateWithDescriptor_options_reflection_error_, v32, 3, &v140, v144);
    id v38 = v140;
    if (!v37)
    {
      id v46 = v144[0];
      id v47 = v38;
      id v35 = (void *)sub_1B6E30D78();

      swift_willThrow();
      goto LABEL_35;
    }
    id v39 = v144[0];
    id v40 = v38;
    swift_unknownObjectRelease();
    if (v40)
    {
      id v140 = (id)MEMORY[0x1E4FBC868];
      unint64_t v141 = MEMORY[0x1E4FBC860];
      uint64_t v142 = MEMORY[0x1E4FBC860];
      uint64_t v143 = MEMORY[0x1E4FBC860];
      id v136 = v40;
      id v41 = objc_msgSend(v136, sel_fragmentBindings);
      sub_1B62F3064(0, (unint64_t *)&qword_1EB97D7E0);
      unint64_t v42 = sub_1B6E31C28();

      if (v42 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v43 = sub_1B6E32C18();
        swift_bridgeObjectRelease();
        id v137 = v32;
        if (v43) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v137 = v32;
        if (v43)
        {
LABEL_29:
          for (uint64_t j = 0; j != v43; ++j)
          {
            if ((v42 & 0xC000000000000001) != 0)
            {
              uint64_t v45 = (void *)MEMORY[0x1BA9B4580](j, v42);
            }
            else
            {
              uint64_t v45 = *(void **)(v42 + 8 * j + 32);
              swift_unknownObjectRetain();
            }
            sub_1B69859C4(v45, &v140);
            swift_unknownObjectRelease();
          }
        }
      }
      swift_bridgeObjectRelease();
      id v70 = objc_msgSend(v21, sel_name);
      uint64_t v71 = sub_1B6E31798();
      uint64_t v73 = v72;

      uint64_t v74 = (uint64_t)v140;
      uint64_t v75 = v141;
      uint64_t v76 = v142;
      uint64_t v77 = v143;
      uint64_t v78 = v130;
      char v79 = swift_isUniquelyReferenced_nonNull_native();
      v144[0] = *v78;
      *uint64_t v78 = (id)0x8000000000000000;
      sub_1B67E8278(v74, v75, v76, v77, v71, v73, v79);
      *uint64_t v78 = v144[0];

      id v32 = v136;
      goto LABEL_46;
    }
LABEL_47:

LABEL_48:
    id v80 = *v130;
    char v81 = *((unsigned char *)*v130 + 32);
    uint64_t v82 = 1 << v81;
    unint64_t v83 = *((void *)*v130 + 8);
    uint64_t v84 = v119;
    if (v83)
    {
      uint64_t v85 = 0;
    }
    else
    {
      unsigned int v105 = v81 & 0x3F;
      if (v105 < 7) {
        goto LABEL_7;
      }
      unint64_t v83 = v80[9];
      if (v83)
      {
        uint64_t v85 = 1;
        uint64_t v84 = v119;
      }
      else
      {
        if (v105 < 8) {
          goto LABEL_7;
        }
        unint64_t v83 = v80[10];
        if (v83)
        {
          uint64_t v85 = 2;
          uint64_t v84 = v119;
        }
        else
        {
          unint64_t v83 = v80[11];
          uint64_t v84 = v119;
          if (!v83)
          {
            uint64_t v111 = 0;
            unint64_t v112 = (unint64_t)(v82 + 63) >> 6;
            if (v112 <= 4) {
              unint64_t v112 = 4;
            }
            unint64_t v113 = v112 - 4;
            while (v113 != v111)
            {
              unint64_t v83 = v80[v111++ + 12];
              if (v83)
              {
                uint64_t v85 = v111 + 3;
                goto LABEL_50;
              }
            }
            goto LABEL_7;
          }
          uint64_t v85 = 3;
        }
      }
    }
LABEL_50:
    unint64_t v86 = __clz(__rbit64(v83)) + (v85 << 6);
    if (v86 != v82) {
      break;
    }
LABEL_7:
    swift_unknownObjectRelease();
LABEL_8:
    uint64_t v20 = v139 + 1;
    if (v139 + 1 == v19) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v87 = (uint64_t *)(v80[6] + 16 * v86);
  uint64_t v89 = *v87;
  uint64_t v88 = v87[1];
  uint64_t v90 = *(void *)(v84 + 16);
  char v91 = *(unsigned char *)(v84 + 184);
  uint64_t v92 = v84;
  swift_retain();
  if ((v91 & 1) == 0)
  {
    uint64_t v93 = *(unsigned int *)(*(void *)(v92 + 168) + 4 * v116);
    uint64_t v94 = *(unsigned int *)(*(void *)(v90 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                          + 12 * *(int *)(*(void *)(v92 + 168) + 4 * v116)
                          + 8);
    swift_bridgeObjectRetain();
    swift_release();
    char v95 = *v130;
    if (*((void *)*v130 + 2) && (uint64_t v96 = sub_1B62B2CE0(v89, v88), (v97 & 1) != 0))
    {
      uint64_t v98 = v95[7] + 32 * v96;
      uint64_t v99 = *(void *)(v98 + 8);
      id v137 = *(id *)v98;
      uint64_t v100 = a7;
      uint64_t v101 = *(void *)(v98 + 16);
      uint64_t v102 = *(void *)(v98 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      char v103 = swift_isUniquelyReferenced_nonNull_native();
      id v140 = *v100;
      *uint64_t v100 = (id)0x8000000000000000;
      uint64_t v104 = v102;
      a7 = v100;
      sub_1B67E8118((uint64_t)v137, v99, v101, v104, v93 | (v94 << 32), v103);
      *uint64_t v100 = v140;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = v132;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v106 = sub_1B62BE38C(v93 | (v94 << 32));
      if (v107)
      {
        unint64_t v108 = v106;
        char v109 = swift_isUniquelyReferenced_nonNull_native();
        id v110 = *a7;
        id v140 = *a7;
        *a7 = (id)0x8000000000000000;
        if ((v109 & 1) == 0)
        {
          sub_1B6AD40A0();
          id v110 = v140;
        }
        sub_1B6ACA480(v108, (uint64_t)v110);
        *a7 = v110;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = v132;
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t v19 = v132;
      }
    }
    goto LABEL_8;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B6987230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v11 = v10[4];
      BOOL v12 = *(void *)(v11 + 16) == a1 && *(void *)(v11 + 24) == a2;
      if (v12 || (sub_1B6E334B8() & 1) != 0) {
        break;
      }
      v10 += 6;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    char v21 = 0;
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v13 = *(void *)(a4 + 16);
  if (v13)
  {
    uint64_t v10 = (uint64_t *)(a4 + 40);
    while (1)
    {
      uint64_t v14 = v10[4];
      BOOL v15 = *(void *)(v14 + 16) == a1 && *(void *)(v14 + 24) == a2;
      if (v15 || (sub_1B6E334B8() & 1) != 0) {
        break;
      }
      v10 += 6;
      if (!--v13) {
        goto LABEL_17;
      }
    }
    char v21 = 2;
LABEL_20:
    uint64_t v17 = *((unsigned __int8 *)v10 + 8);
    uint64_t v13 = *(v10 - 1);
    uint64_t v16 = *v10;
    uint64_t v18 = v10[2];
    uint64_t v19 = v10[3];
    uint64_t result = swift_retain();
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t result = 0;
  char v21 = 0;
LABEL_21:
  *(void *)a5 = v13;
  *(void *)(a5 + 8) = v16;
  *(void *)(a5 + 16) = v17;
  *(void *)(a5 + 24) = v18;
  *(void *)(a5 + 32) = v19;
  *(void *)(a5 + 40) = result;
  *(unsigned char *)(a5 + 48) = v21;
  return result;
}

uint64_t sub_1B698734C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v11 = v10[4];
      BOOL v12 = *(void *)(v11 + 16) == a1 && *(void *)(v11 + 24) == a2;
      if (v12 || (sub_1B6E334B8() & 1) != 0) {
        break;
      }
      v10 += 6;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    char v21 = 1;
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v13 = *(void *)(a4 + 16);
  if (v13)
  {
    uint64_t v10 = (uint64_t *)(a4 + 40);
    while (1)
    {
      uint64_t v14 = v10[4];
      BOOL v15 = *(void *)(v14 + 16) == a1 && *(void *)(v14 + 24) == a2;
      if (v15 || (sub_1B6E334B8() & 1) != 0) {
        break;
      }
      v10 += 6;
      if (!--v13) {
        goto LABEL_17;
      }
    }
    char v21 = 2;
LABEL_20:
    uint64_t v17 = *((unsigned __int8 *)v10 + 8);
    uint64_t v13 = *(v10 - 1);
    uint64_t v16 = *v10;
    uint64_t v18 = v10[2];
    uint64_t v19 = v10[3];
    uint64_t result = swift_retain();
    goto LABEL_21;
  }
LABEL_17:
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t result = 0;
  char v21 = 0;
LABEL_21:
  *(void *)a5 = v13;
  *(void *)(a5 + 8) = v16;
  *(void *)(a5 + 16) = v17;
  *(void *)(a5 + 24) = v18;
  *(void *)(a5 + 32) = v19;
  *(void *)(a5 + 40) = result;
  *(unsigned char *)(a5 + 48) = v21;
  return result;
}

uint64_t sub_1B6987468(void *a1)
{
  sub_1B6987F50(0, &qword_1E9DD30D0, (uint64_t (*)(void))sub_1B6987EA8, (uint64_t)&type metadata for MetalFunctionReflection.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  unint64_t v8 = (char *)&v12 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6987EA8();
  sub_1B6E33A48();
  if (v1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC868];
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B637F094();
    char v13 = 0;
    sub_1B6987FB8(&qword_1E9DD30E8);
    sub_1B6E32DF8();
    uint64_t v10 = v14;
    sub_1B62D83C0(0, &qword_1E9DD30F0, (uint64_t)&type metadata for MetalFunctionReflection.Arg, MEMORY[0x1E4FBB320]);
    char v13 = 1;
    uint64_t v11 = sub_1B6988018(&qword_1E9DD30F8, (void (*)(void))sub_1B6987EFC);
    sub_1B6E32DF8();
    char v13 = 2;
    uint64_t v12 = v11;
    sub_1B6E32DF8();
    char v13 = 3;
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v10;
}

uint64_t sub_1B6987804@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6987F50(0, &qword_1E9DD3090, (uint64_t (*)(void))sub_1B6987C1C, (uint64_t)&type metadata for MetalFunctionReflection.Arg.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = a1[3];
  uint64_t v30 = a1;
  sub_1B62C14BC(a1, v11);
  sub_1B6987C1C();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v30);
  }
  uint64_t v12 = v7;
  LOBYTE(v32) = 0;
  uint64_t v13 = sub_1B6E32DD8();
  LOBYTE(v32) = 5;
  uint64_t v14 = sub_1B6E32DE8();
  LOBYTE(v32) = 1;
  uint64_t v29 = sub_1B6E32DD8();
  LOBYTE(v32) = 4;
  uint64_t v27 = sub_1B6E32D98();
  uint64_t v28 = v16;
  LOBYTE(v34) = 3;
  sub_1B6913610();
  sub_1B6E32DF8();
  uint64_t v25 = v33;
  uint64_t v26 = v32;
  char v31 = 2;
  sub_1B62BFBD8();
  sub_1B6E32DF8();
  uint64_t v24 = v34;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  uint64_t v17 = sub_1B684D5F0(v27, v28, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, v26, v25, v24, 0, 0, 0,
          MEMORY[0x1E4FBC860]);
  LOBYTE(v32) = 6;
  uint64_t v28 = v17;
  swift_retain();
  uint64_t v18 = sub_1B6E32D68();
  char v20 = v19;
  LODWORD(v27) = 0;
  uint64_t v21 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v6);
  if (v20) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v30);
  uint64_t v23 = v28;
  uint64_t result = swift_release();
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  *(unsigned char *)(a2 + 16) = v27;
  *(void *)(a2 + 24) = v29;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v23;
  return result;
}

unint64_t sub_1B6987C1C()
{
  unint64_t result = qword_1E9DD3098;
  if (!qword_1E9DD3098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3098);
  }
  return result;
}

uint64_t sub_1B6987C70(uint64_t a1, uint64_t a2)
{
  sub_1B6987CD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B6987CD4()
{
  if (!qword_1E9DD30A8)
  {
    type metadata accessor for MTLTextureType(255);
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD30A8);
    }
  }
}

void sub_1B6987D2C()
{
  if (!qword_1EB981060)
  {
    type metadata accessor for MetalFunctionScript(255);
    unint64_t v0 = type metadata accessor for ScriptRuntime();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB981060);
    }
  }
}

uint64_t sub_1B6987D8C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B6987DF0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

void sub_1B6987E48()
{
  if (!qword_1E9DD30C0)
  {
    unint64_t v0 = type metadata accessor for ComponentWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD30C0);
    }
  }
}

unint64_t sub_1B6987EA8()
{
  unint64_t result = qword_1E9DD30D8;
  if (!qword_1E9DD30D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD30D8);
  }
  return result;
}

unint64_t sub_1B6987EFC()
{
  unint64_t result = qword_1E9DD3100;
  if (!qword_1E9DD3100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3100);
  }
  return result;
}

void sub_1B6987F50(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_1B6987FB8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B637F094();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6988018(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62D83C0(255, &qword_1E9DD30F0, (uint64_t)&type metadata for MetalFunctionReflection.Arg, MEMORY[0x1E4FBB320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B69880A8()
{
  unint64_t result = qword_1E9DD3120;
  if (!qword_1E9DD3120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3120);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MetalFunctionReflection.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69881C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetalFunctionReflection.CodingKeys()
{
  return &type metadata for MetalFunctionReflection.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for MetalFunctionReflection.Arg.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69882CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetalFunctionReflection.Arg.CodingKeys()
{
  return &type metadata for MetalFunctionReflection.Arg.CodingKeys;
}

uint64_t initializeWithCopy for MetalFunctionReflection.Arg(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MetalFunctionReflection.Arg(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MetalFunctionReflection.Arg(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MetalFunctionReflection.Arg()
{
  return &type metadata for MetalFunctionReflection.Arg;
}

unint64_t sub_1B6988410()
{
  unint64_t result = qword_1E9DD3130;
  if (!qword_1E9DD3130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3130);
  }
  return result;
}

unint64_t sub_1B6988468()
{
  unint64_t result = qword_1E9DD3138;
  if (!qword_1E9DD3138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3138);
  }
  return result;
}

unint64_t sub_1B69884C0()
{
  unint64_t result = qword_1E9DD3140;
  if (!qword_1E9DD3140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3140);
  }
  return result;
}

unint64_t sub_1B6988518()
{
  unint64_t result = qword_1E9DD3148;
  if (!qword_1E9DD3148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3148);
  }
  return result;
}

unint64_t sub_1B6988570()
{
  unint64_t result = qword_1E9DD3150;
  if (!qword_1E9DD3150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3150);
  }
  return result;
}

unint64_t sub_1B69885C8()
{
  unint64_t result = qword_1E9DD3158;
  if (!qword_1E9DD3158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3158);
  }
  return result;
}

uint64_t sub_1B698861C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>, float32x4_t a7@<Q3>, float32x4_t a8@<Q4>, float32x4_t a9@<Q5>, float32x4_t a10@<Q6>, float32x4_t a11@<Q7>)
{
  sub_1B633C598(a1, (uint64_t)v137);
  float32x2_t v13 = (float32x2_t)v137[0];
  uint64_t v14 = v137[1];
  float32x2_t v15 = (float32x2_t)v137[2];
  uint64_t v16 = v137[3];
  float32x2_t v18 = (float32x2_t)v137[4];
  uint64_t v17 = v137[5];
  float32x2_t v20 = (float32x2_t)v137[6];
  uint64_t v19 = v137[7];
  float32x4_t v108 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, a4.f32[0]), a9, *(float32x2_t *)a4.f32, 1), a10, a4, 2), a11, a4, 3);
  float32x4_t v107 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, a5.f32[0]), a9, *(float32x2_t *)a5.f32, 1), a10, a5, 2), a11, a5, 3);
  float32x4_t v106 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, a6.f32[0]), a9, *(float32x2_t *)a6.f32, 1), a10, a6, 2), a11, a6, 3);
  float32x4_t v120 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, a7.f32[0]), a9, *(float32x2_t *)a7.f32, 1), a10, a7, 2), a11, a7, 3);
  sub_1B633C598(a1, (uint64_t)v138);
  float32x4_t v21 = v120;
  float32x4_t v22 = v106;
  float32x4_t v23 = v107;
  float32x4_t v24 = v108;
  if ((v138[64] & 1) == 0)
  {
    *(float32x2_t *)v25.f32 = v13;
    v25.i64[1] = v14;
    *(float32x2_t *)v26.f32 = v15;
    v26.i64[1] = v16;
    *(float32x2_t *)v27.f32 = v18;
    v27.i64[1] = v17;
    *(float32x2_t *)v28.f32 = v20;
    v28.i64[1] = v19;
    float32x4_t v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, v13.f32[0]), a9, v13, 1), a10, v25, 2), a11, v25, 3);
    float32x4_t v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, v15.f32[0]), a9, v15, 1), a10, v26, 2), a11, v26, 3);
    float32x4_t v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, v18.f32[0]), a9, v18, 1), a10, v27, 2), a11, v27, 3);
    float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, v20.f32[0]), a9, v20, 1), a10, v28, 2), a11, v28, 3);
  }
  int32x4_t v29 = (int32x4_t)vmulq_f32(a4, a4);
  float32x4_t v30 = vmulq_f32(a5, a5);
  int32x4_t v31 = (int32x4_t)vmulq_f32(a6, a6);
  int32x4_t v32 = vzip2q_s32(v29, v31);
  float32x4_t v33 = (float32x4_t)vzip1q_s32(vzip1q_s32(v29, v31), (int32x4_t)v30);
  float32x4_t v34 = (float32x4_t)vtrn2q_s32(v29, (int32x4_t)v30);
  v34.i32[2] = v31.i32[1];
  float32x4_t v35 = vaddq_f32((float32x4_t)vzip1q_s32(v32, vdupq_laneq_s32((int32x4_t)v30, 2)), vaddq_f32(v33, v34));
  v30.i64[0] = 0x80000000800000;
  v30.i64[1] = 0x80000000800000;
  int8x16_t v36 = (int8x16_t)vcgeq_f32(v30, v35);
  v35.i32[3] = 0;
  float32x4_t v37 = vrsqrteq_f32(v35);
  float32x4_t v38 = vmulq_f32(v37, vrsqrtsq_f32(v35, vmulq_f32(v37, v37)));
  int32x4_t v39 = (int32x4_t)v36;
  v39.i32[3] = 0;
  float32x4_t v40 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)v35, (int8x16_t)vmulq_f32(v38, vrsqrtsq_f32(v35, vmulq_f32(v38, v38))));
  float32x4_t v41 = vmulq_n_f32(a4, v40.f32[0]);
  float32x4_t v42 = vmulq_lane_f32(a5, *(float32x2_t *)v40.f32, 1);
  float32x4_t v43 = vmulq_laneq_f32(a6, v40, 2);
  int8x16_t v44 = (int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43);
  int8x16_t v45 = (int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42);
  int32x4_t v46 = (int32x4_t)v41;
  if (v36.i32[0])
  {
    int8x16_t v47 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v44, (int8x16_t)v43, 0xCuLL), vnegq_f32(v42)), v43, (float32x4_t)vextq_s8(v45, (int8x16_t)v42, 0xCuLL));
    int32x4_t v46 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), v47, 0xCuLL);
  }
  int8x16_t v48 = (int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41);
  float32x4_t v49 = v42;
  if (v36.i32[1])
  {
    int8x16_t v50 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v48, (int8x16_t)v41, 0xCuLL), vnegq_f32(v43)), v41, (float32x4_t)vextq_s8(v44, (int8x16_t)v43, 0xCuLL));
    float32x4_t v49 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), v50, 0xCuLL);
  }
  if (v36.i32[2])
  {
    int8x16_t v36 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v45, (int8x16_t)v42, 0xCuLL), vnegq_f32(v41)), v42, (float32x4_t)vextq_s8(v48, (int8x16_t)v41, 0xCuLL));
    float32x4_t v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), v36, 0xCuLL);
  }
  float v51 = (float)(*(float *)v46.i32 + v49.f32[1]) + v43.f32[2];
  if (v51 <= 0.0)
  {
    if (*(float *)v46.i32 < v49.f32[1] || *(float *)v46.i32 < v43.f32[2])
    {
      if (v49.f32[1] <= v43.f32[2])
      {
        float v53 = sqrtf((float)((float)(v43.f32[2] + 1.0) - *(float *)v46.i32) - v49.f32[1]);
        *(float32x2_t *)v56.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v46, (int32x4_t)v49), *(float32x2_t *)v43.f32);
        float32x2_t v103 = (float32x2_t)__PAIR64__(v46.u32[1], LODWORD(v53));
        float32x2_t v104 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 0);
        *(float32x2_t *)v55.f32 = vsub_f32(*(float32x2_t *)v46.i8, v104);
        v104.f32[0] = v53;
        v104.i32[0] = vmul_f32(v103, v104).u32[0];
        v104.i32[1] = v55.i32[1];
        *(float32x2_t *)&v56.u32[2] = v104;
        goto LABEL_11;
      }
      float v61 = sqrtf((float)((float)(v49.f32[1] + 1.0) - *(float *)v46.i32) - v43.f32[2]);
      *(int32x2_t *)v36.i8 = vdup_laneq_s32((int32x4_t)v49, 2);
      int8x16_t v59 = v36;
      *(float *)v59.i32 = v61;
      v59.i32[0] = vmul_f32(*(float32x2_t *)v59.i8, (float32x2_t)__PAIR64__(v43.u32[1], LODWORD(v61))).u32[0];
      v59.i32[1] = vadd_f32(*(float32x2_t *)&v36, *(float32x2_t *)&v43).i32[1];
      int8x16_t v60 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 1), v49);
      int32x2_t v66 = (int32x2_t)vsubq_f32(v43, (float32x4_t)vdupq_laneq_s32(v46, 2)).u64[0];
      float32x4_t v57 = (float32x4_t)vextq_s8(vextq_s8(v60, v60, 4uLL), v59, 0xCuLL);
      v57.i32[3] = v66.i32[0];
    }
    else
    {
      float v61 = sqrtf((float)((float)(*(float *)v46.i32 + 1.0) - v49.f32[1]) - v43.f32[2]);
      float32x2_t v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 0);
      float32x2_t v63 = vadd_f32(*(float32x2_t *)v46.i8, v62);
      v62.f32[0] = v61;
      v57.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v46.u32[1], LODWORD(v61)), v62).u32[0];
      v57.i32[1] = v63.i32[1];
      float32x2_t v64 = (float32x2_t)vzip2q_s32(v46, (int32x4_t)v49).u64[0];
      LODWORD(v65) = vadd_f32(v64, *(float32x2_t *)v43.f32).u32[0];
      int32x2_t v66 = (int32x2_t)vsub_f32(v64, *(float32x2_t *)v43.f32);
      HIDWORD(v65) = v66.i32[1];
      v57.i64[1] = v65;
    }
    *(float *)v66.i32 = 0.5 / v61;
    float32x4_t v56 = (float32x4_t)vdupq_lane_s32(v66, 0);
    goto LABEL_20;
  }
  float32x4_t v52 = (float32x4_t)vzip2q_s32((int32x4_t)v49, vuzp1q_s32((int32x4_t)v49, (int32x4_t)v43));
  v52.i32[2] = v46.i32[1];
  float v53 = sqrtf(v51 + 1.0);
  float32x4_t v54 = (float32x4_t)vtrn2q_s32((int32x4_t)v43, vzip2q_s32((int32x4_t)v43, v46));
  v54.i32[2] = v49.i32[0];
  float32x4_t v56 = vsubq_f32(v52, v54);
  v52.f32[3] = v53;
  v54.f32[3] = v53;
  float32x4_t v55 = vmulq_f32(v52, v54);
  v56.i32[3] = v55.i32[3];
LABEL_11:
  v55.f32[0] = 0.5 / v53;
  float32x4_t v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
LABEL_20:
  float32x4_t v67 = vabsq_f32(vaddq_f32(vmulq_f32(v56, v57), (float32x4_t)xmmword_1B6E500A0));
  v68.i64[0] = 0x3400000034000000;
  v68.i64[1] = 0x3400000034000000;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v68, v67)))) & 1) != 0
    || (*(_DWORD *)(v11 + 20) & 0x7FFFFFFF) != 0
    || (*(_DWORD *)(a2 + 16) & 0x7FFFFFFF) != 0)
  {
    int8x16_t v69 = (int8x16_t)vmulq_f32(v108, v108);
    int8x16_t v70 = (int8x16_t)vmulq_f32(v107, v107);
    int8x16_t v71 = (int8x16_t)vmulq_f32(v106, v106);
    float32x4_t v72 = (float32x4_t)vtrn2q_s32((int32x4_t)v69, (int32x4_t)v70);
    v72.i32[2] = v71.i32[1];
    float32x4_t v124 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2);
    float32x4_t v73 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v69, (int32x4_t)v71), (int32x4_t)v124), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v69, (int32x4_t)v71), (int32x4_t)v70), v72));
    v74.i64[0] = 0x80000000800000;
    v74.i64[1] = 0x80000000800000;
    int32x4_t v75 = vcgeq_f32(v74, v73);
    v73.i32[3] = 0;
    float32x4_t v76 = vrsqrteq_f32(v73);
    float32x4_t v77 = vmulq_f32(v76, vrsqrtsq_f32(v73, vmulq_f32(v76, v76)));
    int32x4_t v78 = v75;
    v78.i32[3] = 0;
    float32x4_t v79 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v78), (int8x16_t)v73, (int8x16_t)vmulq_f32(v77, vrsqrtsq_f32(v73, vmulq_f32(v77, v77))));
    float32x4_t v80 = vmulq_n_f32(v108, v79.f32[0]);
    float32x4_t v81 = vmulq_lane_f32(v107, *(float32x2_t *)v79.f32, 1);
    float32x4_t v82 = vmulq_laneq_f32(v106, v79, 2);
    int8x16_t v83 = (int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82);
    int8x16_t v84 = (int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81);
    int8x16_t v85 = (int8x16_t)v80;
    if (v75.i32[0])
    {
      int8x16_t v86 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v83, (int8x16_t)v82, 0xCuLL), vnegq_f32(v81)), v82, (float32x4_t)vextq_s8(v84, (int8x16_t)v81, 0xCuLL));
      int8x16_t v85 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), v86, 0xCuLL);
    }
    int8x16_t v122 = v85;
    int8x16_t v87 = (int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80);
    int8x16_t v88 = (int8x16_t)v81;
    if (v75.i32[1])
    {
      int8x16_t v89 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v87, (int8x16_t)v80, 0xCuLL), vnegq_f32(v82)), v80, (float32x4_t)vextq_s8(v83, (int8x16_t)v82, 0xCuLL));
      int8x16_t v88 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), v89, 0xCuLL);
    }
    int8x16_t v118 = v88;
    float32x4_t v126 = v21;
    if (v75.i32[2])
    {
      int8x16_t v90 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v84, (int8x16_t)v81, 0xCuLL), vnegq_f32(v80)), v81, (float32x4_t)vextq_s8(v87, (int8x16_t)v80, 0xCuLL));
      float32x4_t v82 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), v90, 0xCuLL);
    }
    float32x4_t v116 = v82;
    int32x2_t v91 = (int32x2_t)vadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL));
    v91.i32[0] = vadd_f32((float32x2_t)v91, (float32x2_t)vdup_lane_s32(v91, 1)).u32[0];
    float32x2_t v92 = vrsqrte_f32((float32x2_t)v91.u32[0]);
    float32x2_t v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v92, v92)));
    v91.i32[0] = vmul_f32(v93, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v93, v93))).u32[0];
    int32x2_t v94 = (int32x2_t)vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
    v94.i32[0] = vadd_f32((float32x2_t)v94, (float32x2_t)vdup_lane_s32(v94, 1)).u32[0];
    v139.columns[0] = (simd_float4)vmulq_n_f32(v108, *(float *)v91.i32);
    float32x2_t v95 = vrsqrte_f32((float32x2_t)v94.u32[0]);
    float32x2_t v96 = vmul_f32(v95, vrsqrts_f32((float32x2_t)v94.u32[0], vmul_f32(v95, v95)));
    v94.i32[0] = vmul_f32(v96, vrsqrts_f32((float32x2_t)v94.u32[0], vmul_f32(v96, v96))).u32[0];
    int32x2_t v97 = (int32x2_t)vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
    v139.columns[1] = (simd_float4)vmulq_n_f32(v107, *(float *)v94.i32);
    v97.i32[0] = vadd_f32((float32x2_t)v97, (float32x2_t)vdup_lane_s32(v97, 1)).u32[0];
    float32x2_t v98 = vrsqrte_f32((float32x2_t)v97.u32[0]);
    float32x2_t v99 = vmul_f32(v98, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v98, v98)));
    v139.columns[2] = (simd_float4)vmulq_n_f32(v106, vmul_f32(v99, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v99, v99))).f32[0]);
    v139.columns[3] = (simd_float4)v120;
    float32x4_t v112 = (float32x4_t)v70;
    float32x4_t v114 = (float32x4_t)v71;
    float32x4_t v109 = (float32x4_t)v69;
    simd_float4x4 v140 = __invert_f4(v139);
    float32x4_t v100 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 2), vaddq_f32(v109, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 1)));
    v100.f32[0] = sqrtf(v100.f32[0]);
    v100.i32[1] = sqrtf(vaddq_f32(v124, vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).f32[0]);
    v100.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).f32[0]);
    v101.i64[0] = 0x3F0000003F000000;
    v101.i64[1] = 0x3F0000003F000000;
    float32x4_t v127 = (float32x4_t)v140.columns[0];
    float32x4_t v128 = (float32x4_t)v140.columns[1];
    float32x4_t v129 = (float32x4_t)v140.columns[2];
    simd_float4 v130 = v140.columns[3];
    int8x16_t v131 = v122;
    int8x16_t v132 = v118;
    float32x4_t v133 = v116;
    float32x4_t v134 = vmulq_f32(v100, v101);
    float32x4_t v135 = vsubq_f32(v120, v126);
    sub_1B698C10C((uint64_t)&v127);
  }
  else
  {
    float32x4_t v127 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v120, (float32x4_t)0, v106), (float32x4_t)0, v107), (float32x4_t)0, v108);
    float32x4_t v128 = vmlaq_f32(vmlaq_f32(vmulq_f32(vabsq_f32(v107), (float32x4_t)xmmword_1B6E87B90), (float32x4_t)xmmword_1B6E87B90, vabsq_f32(v108)), (float32x4_t)xmmword_1B6E87B90, vabsq_f32(v106));
    float32x4_t v129 = vsubq_f32(v127, vmlaq_f32(vmlaq_f32(vmlaq_f32(v21, (float32x4_t)0, v22), (float32x4_t)0, v23), (float32x4_t)0, v24));
    sub_1B698C118((uint64_t)&v127);
  }
  sub_1B698C0CC((uint64_t)&v127, (uint64_t)v136);
  return sub_1B698C0CC((uint64_t)v136, a3);
}

float sub_1B6988CD4()
{
  return *(float *)v0;
}

void sub_1B6988CDC(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_1B6988CE4(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

double sub_1B6988CEC@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1B6E98660;
  *(void *)(a1 + 16) = 255;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

uint64_t sub_1B6988D0C(void *a1)
{
  sub_1B698B528(0, &qword_1E9DD1BC0, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = &v10[-v7];
  uint64_t result = sub_1B6891AB0(a1, (uint64_t)&v10[-v7]);
  if (!v1)
  {
    v10[15] = 10;
    sub_1B6E32F58();
    v10[14] = 11;
    sub_1B6E32F78();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

double sub_1B6988E60@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B698B300(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B6988E9C(void *a1)
{
  return sub_1B6988D0C(a1);
}

double sub_1B6988ED0()
{
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1EB997A18;
  int v4 = 0;
  char v5 = 2;
  uint64_t v6 = 0;
  char v7 = 2;
  uint64_t v8 = 0;
  swift_retain();
  sub_1B67A70E0((uint64_t)v1);
  swift_release();
  double result = *(double *)v1;
  xmmword_1E9E49460 = v1[0];
  *(_OWORD *)algn_1E9E49470 = v1[1];
  qword_1E9E49480 = v2;
  return result;
}

uint64_t *sub_1B6988F7C(uint64_t a1, uint64_t a2)
{
  if (qword_1E9DCC518 != -1) {
    swift_once();
  }
  v53[0] = xmmword_1E9E49460;
  v53[1] = *(_OWORD *)algn_1E9E49470;
  uint64_t v54 = qword_1E9E49480;
  uint64_t v5 = a2 & 0xFFFFFFFFFFLL;
  sub_1B62C9DA8(a1, (uint64_t)v53, a2 & 0xFFFFFFFFFFLL, v39);
  double result = (uint64_t *)sub_1B62D7410((uint64_t)v39, (uint64_t)v40, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (*(void *)&v40[0])
  {
    long long v47 = v40[0];
    long long v48 = v40[1];
    uint64_t v49 = v41;
    if (v46 >= 1)
    {
      uint64_t v32 = v43;
      if (v43)
      {
        uint64_t v30 = v42;
        uint64_t v7 = v45[4];
        int i = *(unsigned __int8 *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        float32x4_t v38 = v45;
        float32x4_t v27 = v45 + 8;
        uint64_t v28 = (uint64_t)(v45 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v9 = 0;
        int v29 = i;
        uint64_t v31 = v7;
        float32x4_t v26 = v2;
        do
        {
          unint64_t v10 = (unsigned int *)(v30 + 48 * v9);
          uint64_t v34 = *v10;
          uint64_t v11 = *((void *)v10 + 3);
          uint64_t v13 = *((void *)v10 + 4);
          uint64_t v12 = *((void *)v10 + 5);
          float32x4_t v35 = (uint64_t *)*((void *)v10 + 2);
          uint64_t v36 = v9;
          uint64_t v33 = v10[1];
          if (i)
          {
            uint64_t v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          sub_1B62D7410(v28, (uint64_t)v52, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v15 = v38[4];
          uint64_t v16 = *(void *)(*(void *)(*(void *)(*(void *)(v12 + 40) + 16) + 32) + 16) + 1;
          uint64_t v17 = v12;
          swift_retain();
          v38[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v38[7] = v16;
          v27[1] = 0;
          _OWORD v27[2] = 0;
          *float32x4_t v27 = 0;
          swift_release();
          float32x2_t v18 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1F0F7D338, v35, v11, v13, (uint64_t)v38);
          uint64_t v19 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v35, v11, v13, (uint64_t)v38);
          uint64_t v37 = v17;
          uint64_t v20 = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v35, v11, v13, (uint64_t)v38);
          uint64_t v21 = v20;
          if (v35)
          {
            for (int i = v29; v13; --v13)
            {
              sub_1B698B58C(v18, v19, v21, v26, v5, a1);
              v21 += 64;
              v19 += 4;
              v18 += 4;
            }
          }
          else
          {
            int i = v29;
            if (v34 != v33)
            {
              uint64_t v22 = v33 - v34;
              uint64_t v23 = v20 + (v34 << 6);
              float32x4_t v24 = &v19[4 * v34];
              float32x4_t v25 = &v18[4 * v34];
              do
              {
                sub_1B698B58C(v25, v24, v23, v26, v5, a1);
                v23 += 64;
                v24 += 4;
                v25 += 4;
                --v22;
              }
              while (v22);
            }
          }
          v50[0] = v47;
          v50[1] = v48;
          uint64_t v51 = v49;
          sub_1B6345178(v38, (unsigned __int16 **)v50, (uint64_t)v52);
          sub_1B634507C((char *)v37);
          uint64_t v7 = v31;
          ecs_stack_allocator_pop_snapshot(v31);
          if (i)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 376));
          }
          swift_release();
          uint64_t v9 = v36 + 1;
        }
        while (v36 + 1 != v32);
        sub_1B632F170(v39);
      }
    }
    return sub_1B632F170(v39);
  }
  return result;
}

uint64_t sub_1B69893CC(long long *a1, long long *a2, uint64_t a3, unint64_t a4, uint64_t a5, float32x4_t a6, float32x4_t a7, __n128 a8, float a9)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (uint64_t *)*((void *)a1 + 11);
  uint64_t v12 = *((void *)a1 + 12);
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t v15 = *((void *)a1 + 1);
  uint64_t v14 = *((void *)a1 + 2);
  uint64_t v16 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v11, v12, v13, v14);
  uint64_t v17 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v11, v12, v13, v14);
  uint64_t v63 = sub_1B67A819C();
  char v71 = v18;
  long long v77 = *a2;
  __n128 v81 = a8;
  long long v91 = a1[6];
  long long v19 = a1[4];
  long long v90 = a1[5];
  long long v89 = v19;
  long long v20 = a1[2];
  long long v88 = a1[3];
  long long v21 = a1[1];
  long long v85 = *a1;
  float32x4_t v79 = &type metadata for CollisionProperties;
  float32x4_t v80 = &off_1F0F7C560;
  uint64_t v78 = *((void *)a2 + 2);
  uint64_t v22 = *(void *)(a3 + 16);
  long long v86 = v21;
  long long v87 = v20;
  uint64_t v24 = *((void *)a1 + 6);
  uint64_t v23 = *((void *)a1 + 7);
  uint64_t v25 = *(void *)(v14 + 32);
  swift_retain();
  float32x2_t v92 = ecs_stack_allocator_allocate(v25, 8 * (v23 - v24), 8);
  uint64_t v93 = v23 - v24;
  uint64_t v94 = 0;
  sub_1B62C1550((uint64_t)&v77, (uint64_t)v82);
  float v83 = a9;
  v82[5] = v22;
  sub_1B6345398(*(void *)(v15 + 40), (uint64_t)&type metadata for Anchored, &v76);
  char v84 = v76;
  swift_retain();
  float32x4_t v26 = ecs_stack_allocator_allocate(v25, 80 * (v23 - v24), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v77);
  float32x4_t v30 = a6;
  float32x4_t v29 = a7;
  float v31 = a9;
  float32x2_t v95 = v26;
  uint64_t v96 = v23 - v24;
  uint64_t v97 = 0;
  if (v23 != v24)
  {
    __asm
    {
      FMOV            V21.4S, #-1.0
      FMOV            V22.4S, #1.0
    }
    float32x4_t v39 = (float32x4_t)xmmword_1B6E4FCD0;
    float32x4_t v66 = _Q22;
    int8x16_t v67 = _Q21;
    do
    {
      long long v47 = (float32x4_t *)(v17 + 16 * v24);
      float32x4_t v48 = vmulq_n_f32(*v47, v31);
      uint64_t v49 = (float32x4_t *)(v16 + 16 * v24);
      float32x4_t v50 = vsubq_f32(*v49, v48);
      int32x4_t v51 = vcgezq_f32(v48);
      v51.i32[3] = 0;
      float32x4_t v52 = vabsq_f32(v48);
      v52.i32[3] = 0;
      float32x4_t v53 = vdivq_f32(_Q22, vmaxnmq_f32(v52, v39));
      float32x4_t v54 = vmulq_f32(v29, v53);
      float32x4_t v55 = vnegq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v51), (int8x16_t)_Q22, _Q21));
      float32x4_t v56 = vmulq_f32(vsubq_f32(v50, v30), vmulq_f32(v53, v55));
      int8x16_t v57 = (int8x16_t)vsubq_f32(v56, v54);
      float32x4_t v58 = vaddq_f32(v54, v56);
      float v59 = fmaxf(fmaxf(*(float *)v57.i32, *(float *)&v57.i32[2]), *(float *)&v57.i32[1]);
      float v60 = fminf(fminf(v58.f32[0], v58.f32[2]), v58.f32[1]);
      if (v59 <= v60 && v60 >= 0.0)
      {
        if (*(unsigned char *)(a5 + 24))
        {
          float v59 = v60;
          unsigned int v61 = -1;
        }
        else
        {
          unsigned int v61 = 0;
        }
        if (v59 >= 0.0 && v59 <= 1.0)
        {
          int v75 = v28;
          if (v71)
          {
            uint64_t v41 = 0;
            uint64_t v42 = 0;
          }
          else
          {
            float32x4_t v40 = (uint64_t *)(v63 + 16 * v24);
            uint64_t v41 = *v40;
            uint64_t v42 = v40[1];
          }
          float32x4_t v43 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v61), (int8x16_t)vnegq_f32(v58), v57);
          float32x4_t v44 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL), v43), (int8x16_t)0, (int8x16_t)_Q22), vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL), (int8x16_t)v43, 8uLL), v43), (int8x16_t)0, (int8x16_t)_Q22),
                    v55));
          int32x4_t v45 = (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v43), (int8x16_t)vcgezq_f32(v43));
          v45.i32[3] = 0;
          float32x4_t v46 = vaddq_f32(v50, vmulq_n_f32(v48, v59));
          v46.i32[3] = v27;
          __int32 v72 = v27;
          sub_1B6C323C0(v24, v49, v47, v41, v42, v71 & 1, v46, vmulq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32(v45), (int8x16_t)_Q22)), v59);
          __int32 v27 = v72;
          _Q22 = v66;
          _Q21 = v67;
          float32x4_t v29 = a7;
          float v31 = a9;
          float32x4_t v30 = a6;
          float32x4_t v39 = (float32x4_t)xmmword_1B6E4FCD0;
          int v28 = v75;
        }
      }
      ++v24;
    }
    while (v24 != v23);
  }
  sub_1B6989F90((uint64_t)&v81, a4 | ((HIDWORD(a4) & 1) << 32), (void (*)(void *))sub_1B68947C0);
  return sub_1B6894710((uint64_t)&v81);
}

uint64_t sub_1B69897B4(long long *a1, long long *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, float a7)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (uint64_t *)*((void *)a1 + 11);
  uint64_t v12 = *((void *)a1 + 12);
  uint64_t v13 = *((void *)a1 + 13);
  uint64_t v14 = *((void *)a1 + 1);
  uint64_t v15 = *((void *)a1 + 2);
  uint64_t v123 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v11, v12, v13, v15);
  uint64_t v124 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v11, v12, v13, v15);
  uint64_t v127 = sub_1B67A819C();
  char v136 = v16;
  uint64_t v134 = sub_1B63459F8();
  char v133 = v17;
  long long v140 = *a2;
  long long v144 = *(_OWORD *)(a3 + 128);
  long long v18 = a1[3];
  long long v150 = a1[2];
  long long v19 = *a1;
  long long v149 = a1[1];
  long long v148 = v19;
  long long v154 = a1[6];
  long long v20 = a1[4];
  long long v153 = a1[5];
  long long v152 = v20;
  uint64_t v142 = &type metadata for CollisionProperties;
  uint64_t v143 = &off_1F0F7C560;
  uint64_t v141 = *((void *)a2 + 2);
  uint64_t v21 = *(void *)(a4 + 16);
  long long v151 = v18;
  uint64_t v22 = *((void *)a1 + 6);
  uint64_t v23 = *((void *)a1 + 7);
  uint64_t v24 = *(void *)(v15 + 32);
  swift_retain();
  uint64_t v155 = ecs_stack_allocator_allocate(v24, 8 * (v23 - v22), 8);
  uint64_t v156 = v23 - v22;
  uint64_t v157 = 0;
  sub_1B62C1550((uint64_t)&v140, (uint64_t)v145);
  float v146 = a7;
  v145[5] = v21;
  sub_1B6345398(*(void *)(v14 + 40), (uint64_t)&type metadata for Anchored, &v139);
  char v147 = v139;
  swift_retain();
  uint64_t v25 = ecs_stack_allocator_allocate(v24, 80 * (v23 - v22), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v140);
  char v28 = v133;
  uint64_t v29 = v134;
  float v30 = a7;
  unint64_t v158 = v25;
  uint64_t v159 = v23 - v22;
  uint64_t v160 = 0;
  if (v23 != v22)
  {
    int v32 = v136 & 1;
    float v33 = *(float *)(a4 + 80) * 0.5;
    float32x4_t v35 = *(float32x4_t *)a3;
    float32x4_t v34 = *(float32x4_t *)(a3 + 16);
    float32x4_t v36 = *(float32x4_t *)(a3 + 32);
    float32x4_t v37 = *(float32x4_t *)(a3 + 48);
    uint64_t v38 = 16 * v22;
    __asm
    {
      FMOV            V15.4S, #-1.0
      FMOV            V23.4S, #1.0
    }
    float32x4_t v44 = (float32x4_t)xmmword_1B6E4FCD0;
    v45.i64[0] = 0x8000000080000000;
    v45.i64[1] = 0x8000000080000000;
    float32x4_t v46 = 0uLL;
    float32x4_t v131 = v34;
    float32x4_t v132 = *(float32x4_t *)a3;
    float32x4_t v129 = v37;
    float32x4_t v130 = v36;
    int8x16_t v128 = _Q15;
    float32x4_t v137 = _Q23;
    do
    {
      float32x4_t v52 = vmulq_n_f32(*(float32x4_t *)(v124 + 16 * v22), v30);
      float32x4_t v53 = vsubq_f32(*(float32x4_t *)(v123 + 16 * v22), v52);
      float32x4_t v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v53.f32[0]), v34, *(float32x2_t *)v53.f32, 1), v36, v53, 2), v37, v53, 3);
      float32x4_t v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v52.f32[0]), v34, *(float32x2_t *)v52.f32, 1), v36, v52, 2), v37, v52, 3);
      float v56 = *(float *)(a6 + 20);
      if (v56 > 0.0 || (*(_DWORD *)(a4 + 80) & 0x7FFFFFFF) != 0)
      {
        if (v28) {
          float32x4_t v57 = _Q23;
        }
        else {
          float32x4_t v57 = *(float32x4_t *)(v29 + 16 * v22);
        }
        v27.f32[0] = v33 * fmaxf(fmaxf(v57.f32[0], v57.f32[2]), v57.f32[1]);
        float32x4_t v58 = vaddq_f32(*(float32x4_t *)(a3 + 112), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
        int32x4_t v59 = vcgezq_f32(v55);
        v59.i32[3] = 0;
        float32x4_t v60 = vabsq_f32(v55);
        v60.i32[3] = 0;
        float32x4_t v61 = vdivq_f32(_Q23, vmaxnmq_f32(v60, v44));
        float32x4_t v62 = vmulq_f32(v61, v58);
        float32x4_t v63 = vmulq_f32(v54, vmulq_f32(v61, vnegq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v59), (int8x16_t)_Q23, _Q15))));
        float32x4_t v66 = vsubq_f32(v63, v62);
        float32x4_t v64 = vaddq_f32(v63, v62);
        float v65 = fmaxf(fmaxf(v66.f32[0], v66.f32[2]), v66.f32[1]);
        v66.f32[0] = fminf(fminf(v64.f32[0], v64.f32[2]), v64.f32[1]);
        if (v65 <= v66.f32[0] && v66.f32[0] >= 0.0)
        {
          v66.f32[0] = v56 + v27.f32[0];
          float32x4_t v67 = vmlaq_n_f32(v54, v55, v65);
          float32x4_t v68 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v67), (int8x16_t)vcgtzq_f32(v67)), vorrq_s8(vandq_s8((int8x16_t)v67, v45), (int8x16_t)_Q23), (int8x16_t)v46);
          float32x4_t v27 = vmulq_f32(v54, v68);
          _Q16 = vmulq_f32(v55, v68);
          v66.f32[0] = fminf(v66.f32[0], fminf(fminf(v58.f32[0], v58.f32[2]), v58.f32[1]));
          float32x4_t v70 = vsubq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 0));
          float32x4_t v71 = vsubq_f32(vmulq_f32(v67, v68), v70);
          float32x4_t v72 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL), (int8x16_t)v71, 8uLL);
          v71.i32[3] = 0;
          v72.i32[3] = 0;
          float32x4_t v73 = vmaxnmq_f32(v71, v72);
          if (fminf(fminf(v73.f32[0], v73.f32[2]), v73.f32[1]) < 0.0 && v65 >= 0.0 && v65 <= 1.0)
          {
LABEL_56:
            float32x4_t v117 = vmlaq_f32(vmulq_n_f32(_Q16, v65), v68, v27);
            float32x4_t v97 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v117), (int8x16_t)vcgtzq_f32(v117)), vorrq_s8(vandq_s8((int8x16_t)v117, v45), (int8x16_t)_Q23), (int8x16_t)v46);
            float32x4_t v118 = vsubq_f32(vabsq_f32(v117), v70);
            v118.i32[3] = 0;
            float32x4_t v119 = vmaxnmq_f32(v118, v46);
            float32x4_t v27 = vmulq_f32(v119, v119);
            v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v27, 2), vadd_f32(*(float32x2_t *)v27.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1))).u32[0];
            *(float32x2_t *)v117.f32 = vrsqrte_f32((float32x2_t)v27.u32[0]);
            *(float32x2_t *)v117.f32 = vmul_f32(*(float32x2_t *)v117.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32)));
            *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)v117.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32)));
            float32x4_t v99 = vmulq_n_f32(v119, v27.f32[0]);
LABEL_57:
            float32x4_t v120 = vmulq_f32(v97, v99);
            if (v65 >= 0.0 && v65 <= 1.0)
            {
              if (v32)
              {
                uint64_t v48 = 0;
                uint64_t v49 = 0;
              }
              else
              {
                long long v47 = (uint64_t *)(v127 + 16 * v22);
                uint64_t v48 = *v47;
                uint64_t v49 = v47[1];
              }
              float32x4_t v50 = vaddq_f32(v53, vmulq_n_f32(v52, v65));
              float32x4_t v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a3 + 64), v120.f32[0]), *(float32x4_t *)(a3 + 80), *(float32x2_t *)v120.f32, 1), *(float32x4_t *)(a3 + 96), v120, 2);
              v51.i32[3] = v26;
              v50.i32[3] = HIDWORD(v7);
              __int32 v135 = v26;
              sub_1B6C323C0(v22, (float32x4_t *)(v123 + v38), (float32x4_t *)(v124 + v38), v48, v49, v32, v50, v51, v65);
              __int32 v26 = v135;
              _Q23 = v137;
              float v30 = a7;
              uint64_t v29 = v134;
              char v28 = v133;
              float32x4_t v34 = v131;
              float32x4_t v35 = v132;
              float32x4_t v37 = v129;
              float32x4_t v36 = v130;
              _Q15 = v128;
              float32x4_t v44 = (float32x4_t)xmmword_1B6E4FCD0;
              v45.i64[0] = 0x8000000080000000;
              v45.i64[1] = 0x8000000080000000;
              float32x4_t v46 = 0uLL;
            }
            goto LABEL_6;
          }
          float32x4_t v75 = vmulq_f32(_Q16, _Q16);
          float v76 = vaddv_f32(*(float32x2_t *)v75.f32);
          float v77 = v75.f32[2] + v76;
          if ((float)(v75.f32[2] + v76) >= 0.00000011921)
          {
            float v78 = v66.f32[0] * v66.f32[0];
            float32x4_t v79 = vsubq_f32(v27, v70);
            float32x4_t v80 = vmulq_f32(_Q16, v79);
            float32x4_t v81 = vmulq_f32(v79, v79);
            float v82 = vaddv_f32(*(float32x2_t *)v80.f32);
            float v83 = v80.f32[2] + v82;
            float v84 = vaddv_f32(*(float32x2_t *)v81.f32);
            float v85 = (float)(v83 * v83) - (float)(v77 * (float)((float)(v81.f32[2] + v84) - v78));
            if (v85 <= 0.0) {
              float v65 = 1.0e10;
            }
            else {
              float v65 = (float)((float)-v83 - sqrtf(v85)) / v77;
            }
            float v100 = v80.f32[1] + v80.f32[2];
            float v101 = (float)(v100 * v100)
                 - (float)((float)(v75.f32[1] + v75.f32[2]) * (float)((float)(v81.f32[1] + v81.f32[2]) - v78));
            if (v101 > 0.0)
            {
              float v102 = (float)((float)-v100 - sqrtf(v101)) / (float)(v75.f32[1] + v75.f32[2]);
              _NF = fabsf(vmlas_n_f32(v27.f32[0], v102, _Q16.f32[0])) < v70.f32[0] && v102 < v65;
              if (_NF && v102 >= 0.0) {
                float v65 = v102;
              }
            }
            float v105 = v75.f32[2] + v75.f32[0];
            float v106 = v80.f32[2] + v80.f32[0];
            float v107 = (float)(v106 * v106) - (float)(v105 * (float)((float)(v81.f32[2] + v81.f32[0]) - v78));
            if (v107 <= 0.0)
            {
              float32x4_t v44 = (float32x4_t)xmmword_1B6E4FCD0;
              _Q23 = v137;
              v45.i64[0] = 0x8000000080000000;
              v45.i64[1] = 0x8000000080000000;
              float32x4_t v46 = 0uLL;
            }
            else
            {
              _S21 = (float)((float)-v106 - sqrtf(v107)) / v105;
              __asm { FMLA            S22, S21, V16.S[1] }
              float v110 = fabsf(_S22);
              BOOL v111 = _NF && v110 < v70.f32[1];
              float32x4_t v44 = (float32x4_t)xmmword_1B6E4FCD0;
              _Q23 = v137;
              v45.i64[0] = 0x8000000080000000;
              v45.i64[1] = 0x8000000080000000;
              float32x4_t v46 = 0uLL;
              if (v111) {
                float v65 = _S21;
              }
            }
            float v112 = (float)(v82 * v82) - (float)(v76 * (float)(v84 - v78));
            if (v112 <= 0.0) {
              goto LABEL_54;
            }
            _S17 = (float)((float)-v82 - sqrtf(v112)) / v76;
            __asm { FMLA            S18, S17, V16.S[2] }
            float v115 = fabsf(_S18);
            if (_NF && v115 < v70.f32[2])
            {
              float v65 = _S17;
              if (_S17 < 0.0) {
                goto LABEL_6;
              }
            }
            else
            {
LABEL_54:
              if (v65 < 0.0) {
                goto LABEL_6;
              }
            }
            if (v65 <= 1.0) {
              goto LABEL_56;
            }
          }
        }
      }
      else
      {
        int32x4_t v86 = vcgezq_f32(v55);
        v86.i32[3] = 0;
        float32x4_t v87 = vabsq_f32(v55);
        v87.i32[3] = 0;
        float32x4_t v88 = vdivq_f32(_Q23, vmaxnmq_f32(v87, v44));
        float32x4_t v89 = vmulq_f32(*(float32x4_t *)(a3 + 112), v88);
        float32x4_t v90 = vnegq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v86), (int8x16_t)_Q23, _Q15));
        float32x4_t v91 = vmulq_f32(v54, vmulq_f32(v88, v90));
        int8x16_t v92 = (int8x16_t)vsubq_f32(v91, v89);
        float32x4_t v27 = vaddq_f32(v89, v91);
        float v65 = fmaxf(fmaxf(*(float *)v92.i32, *(float *)&v92.i32[2]), *(float *)&v92.i32[1]);
        float v93 = fminf(fminf(v27.f32[0], v27.f32[2]), v27.f32[1]);
        if (v65 <= v93 && v93 >= 0.0)
        {
          if (*(unsigned char *)(a6 + 24)) {
            float v65 = v93;
          }
          int8x16_t v94 = (int8x16_t)vnegq_f32(v27);
          if (*(unsigned char *)(a6 + 24)) {
            unsigned int v95 = -1;
          }
          else {
            unsigned int v95 = 0;
          }
          float32x4_t v96 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v95), v94, v92);
          float32x4_t v97 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), (int8x16_t)v96, 0xCuLL), v96), (int8x16_t)v46, (int8x16_t)_Q23), vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v96, (int8x16_t)v96, 0xCuLL), (int8x16_t)v96, 8uLL), v96), (int8x16_t)v46, (int8x16_t)_Q23),
                    v90));
          float32x4_t v27 = (float32x4_t)vcgezq_f32(v96);
          int32x4_t v98 = (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v96), (int8x16_t)v27);
          v98.i32[3] = 0;
          float32x4_t v99 = (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32(v98), (int8x16_t)_Q23);
          goto LABEL_57;
        }
      }
LABEL_6:
      ++v22;
      v38 += 16;
    }
    while (v23 != v22);
  }
  sub_1B6989F90((uint64_t)&v144, a5 | ((HIDWORD(a5) & 1) << 32), (void (*)(void *))sub_1B698C2C4);
  return sub_1B6894710((uint64_t)&v144);
}

uint64_t sub_1B6989F90(uint64_t a1, unint64_t a2, void (*a3)(void *))
{
  uint64_t v5 = sub_1B6894764(a1, (uint64_t)v11);
  if (v11[28])
  {
    MEMORY[0x1F4188790](v5, v11[7]);
    _OWORD v10[2] = v11;
    sub_1B6B2150C(0, v6, 1, a2 | ((HIDWORD(a2) & 1) << 32), v7, a3, (uint64_t)v10, v8);
    ecs_stack_allocator_deallocate(*(void **)(v11[11] + 32), v11[26], 80 * v11[27]);
  }
  sub_1B6C33184(v11);
  return sub_1B6894710((uint64_t)v11);
}

uint64_t *sub_1B698A060(uint64_t a1, uint64_t a2, uint64_t *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  if (qword_1E9DCC518 != -1) {
    swift_once();
  }
  v243[0] = xmmword_1E9E49460;
  v243[1] = *(_OWORD *)algn_1E9E49470;
  uint64_t v244 = qword_1E9E49480;
  long long v9 = *((_OWORD *)a3 + 6);
  v237[2] = *((_OWORD *)a3 + 5);
  v237[3] = v9;
  long long v10 = *((_OWORD *)a3 + 8);
  v237[4] = *((_OWORD *)a3 + 7);
  v237[5] = v10;
  long long v11 = *((_OWORD *)a3 + 2);
  long long v235 = *((_OWORD *)a3 + 1);
  long long v236 = v11;
  long long v12 = *((_OWORD *)a3 + 4);
  v237[0] = *((_OWORD *)a3 + 3);
  v237[1] = v12;
  sub_1B62EA708((uint64_t)v237 + 8, (uint64_t)v238);
  sub_1B62EA708((uint64_t)v238, (uint64_t)&v245);
  if (v246) {
    uint64_t v13 = 0x200000000;
  }
  else {
    uint64_t v13 = v245;
  }
  sub_1B62C9DA8(a2, (uint64_t)v243, v13, v263);
  double result = (uint64_t *)sub_1B62D7410((uint64_t)v263, (uint64_t)v268, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (*(void *)&v268[0])
  {
    long long v230 = v268[0];
    long long v231 = v268[1];
    uint64_t v232 = v269;
    if (v274 >= 1)
    {
      uint64_t v194 = v271;
      if (v271)
      {
        uint64_t v229 = a3;
        uint64_t v193 = v270;
        uint64_t v197 = v273[4];
        int v196 = *(unsigned __int8 *)(v272 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v198 = v273;
        uint64_t v191 = v273 + 8;
        uint64_t v192 = (uint64_t)(v273 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v15 = 0;
        do
        {
          char v16 = (unsigned int *)(v193 + 48 * v15);
          uint64_t v17 = *v16;
          uint64_t v219 = v16[1];
          long long v18 = (uint64_t *)*((void *)v16 + 2);
          uint64_t v225 = *((void *)v16 + 3);
          uint64_t v19 = *((void *)v16 + 5);
          uint64_t v209 = *((void *)v16 + 4);
          uint64_t v199 = v19;
          if (v196)
          {
            long long v20 = *(os_unfair_lock_s **)(v19 + 376);
            swift_retain();
            os_unfair_lock_lock(v20);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v197);
          sub_1B62D7410(v192, (uint64_t)v275, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v21 = v198[4];
          uint64_t v22 = *(void *)(*(void *)(*(void *)(*(void *)(v19 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v198[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
          v198[7] = v22;
          v191[1] = 0;
          v191[2] = 0;
          *uint64_t v191 = 0;
          swift_release();
          uint64_t v23 = v209;
          uint64_t v24 = sub_1B62C9024((uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1F0F7D338, v18, v225, v209, (uint64_t)v198);
          uint64_t v217 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v18, v225, v209, (uint64_t)v198);
          uint64_t v216 = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v18, v225, v209, (uint64_t)v198);
          uint64_t v218 = v24;
          uint64_t v195 = v15;
          if (v18)
          {
            if (v209)
            {
              uint64_t v25 = 0;
              float v26 = *(float *)(a1 + 12);
              float v205 = *(float *)(a1 + 8);
              float v207 = *(float *)(a1 + 4);
              int v220 = *(_DWORD *)(a1 + 20);
              do
              {
                uint64_t v32 = v24 + 32 * v25;
                if ((*(_DWORD *)(v32 + 16) & v220) != 0)
                {
                  float v33 = (float32x4_t *)(v217 + (v25 << 6));
                  float v34 = fminf(fmaxf(v207 + *(float *)(v32 + 4), 0.0), 1.0);
                  float v35 = fminf(fmaxf(v205 + *(float *)(v32 + 8), 0.0), 1.0);
                  long long v36 = *(_OWORD *)v32;
                  long long v37 = *(_OWORD *)(v32 + 16);
                  float v38 = 1.0 - fminf(fmaxf(v26 + *(float *)(v32 + 12), 0.0), 1.0);
                  uint64_t v39 = v216 + (v25 << 6);
                  long long v239 = v36;
                  long long v240 = v37;
                  float32x4_t v40 = *v33;
                  float32x4_t v41 = v33[1];
                  float32x4_t v42 = v33[2];
                  float32x4_t v43 = v33[3];
                  long long v44 = *(_OWORD *)v39;
                  long long v45 = *(_OWORD *)(v39 + 16);
                  long long v46 = *(_OWORD *)(v39 + 32);
                  uint64_t v49 = v39 + 48;
                  uint64_t v47 = *(void *)(v39 + 48);
                  uint64_t v48 = *(void *)(v49 + 8);
                  v276[0] = v44;
                  v276[1] = v45;
                  v276[2] = v46;
                  uint64_t v277 = v47;
                  uint64_t v278 = v48;
                  char v279 = 0;
                  sub_1B698861C((uint64_t)v276, a1, (uint64_t)v264, v40, v41, v42, v43, a4, a5, a6, a7);
                  float v50 = *(float *)(a1 + 16);
                  sub_1B698C0CC((uint64_t)v264, (uint64_t)v266);
                  int v51 = sub_1B698C104((uint64_t)v266);
                  nullsub_1(v266);
                  long long v221 = *v52;
                  long long v226 = v52[1];
                  long long v223 = v52[2];
                  if (v51 == 1)
                  {
                    long long v201 = v52[3];
                    long long v203 = v52[7];
                    long long v200 = v52[8];
                    uint64_t v53 = v235;
                    float v54 = *(float *)(v235 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                    uint64_t v55 = SLODWORD(v237[0]);
                    uint64_t v56 = DWORD1(v237[0]);
                    swift_retain();
                    if (v55 == -1 && !v56) {
                      goto LABEL_90;
                    }
                    if ((v55 & 0x80000000) != 0) {
                      goto LABEL_90;
                    }
                    float32x4_t v57 = (uint64_t *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                    if (*(void *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v55) {
                      goto LABEL_90;
                    }
                    uint64_t v58 = *v57;
                    uint64_t v59 = *v57 + 12 * (int)v55;
                    int v60 = *(__int16 *)(v59 + 4);
                    if (v56 != -1 && *(_DWORD *)(v59 + 8) != v56) {
                      goto LABEL_90;
                    }
                    uint64_t v61 = *(void *)(*(void *)(v53 + 136) + 8 * *(int *)(v58 + 12 * (int)v55) + 32);
                    uint64_t v62 = *(void *)(v61 + 48);
                    uint64_t v63 = *(void *)(v62 + 16);
                    if (!v63) {
                      goto LABEL_90;
                    }
                    float v64 = v50 * 0.5;
                    float v65 = (void *)(v62 + 56);
                    while ((ValueMetadata *)*(v65 - 3) != &type metadata for EmitterDescription)
                    {
                      v65 += 5;
                      if (!--v63) {
                        goto LABEL_90;
                      }
                    }
                    float v78 = *(float *)(*(void *)(v61 + 128) + *v65 + 88 * v60 + 52);
                    swift_release();
                    float32x4_t v79 = *v33;
                    float32x4_t v80 = v33[1];
                    float32x4_t v81 = v33[2];
                    float32x4_t v82 = v33[3];
                    uint64_t v83 = v24 + 32 * v25;
                    int v84 = *(_DWORD *)(v83 + 20);
                    char v85 = *(unsigned char *)(v83 + 24);
                    *(float *)&uint64_t v247 = v54 * v78;
                    *((float *)&v247 + 1) = v35;
                    long long v249 = v200;
                    long long v250 = v221;
                    long long v251 = v226;
                    long long v252 = v223;
                    long long v253 = v201;
                    float32x4_t v254 = v79;
                    float32x4_t v255 = v80;
                    float32x4_t v256 = v81;
                    float32x4_t v257 = v82;
                    long long v258 = v203;
                    *(float *)&unint64_t v248 = v38;
                    int v259 = v84;
                    char v260 = v85;
                    float v261 = v34;
                    float v262 = v64;
                    uint64_t v86 = *v229;
                    if (*v229)
                    {
                      uint64_t ObjectType = swift_getObjectType();
                      type metadata accessor for particle_obb_collider_uniforms(0);
                      sub_1B6B594A8((uint64_t)&v247, 1, ObjectType, v88, v89, v90, v91, v92);
                    }
                    float v93 = (unsigned __int8 *)(v83 + 24);
                    char v94 = v86 == 0;
                    sub_1B62D8328(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
                    uint64_t v95 = swift_allocObject();
                    *(_OWORD *)(v95 + 16) = xmmword_1B6E77050;
                    uint64_t v96 = *v93;
                    *(_OWORD *)(v95 + 32) = xmmword_1B6E98670;
                    *(unsigned char *)(v95 + 48) = 0;
                    *(void *)(v95 + 64) = v96;
                    *(void *)(v95 + 120) = 0;
                    *(_OWORD *)(v95 + 104) = 0u;
                    *(_OWORD *)(v95 + 88) = 0u;
                    *(_OWORD *)(v95 + 72) = 0u;
                    *(unsigned char *)(v95 + 128) = 13;
                    swift_retain();
                    sub_1B6786A24((uint64_t)v229);
                    char v97 = sub_1B6BFF2C8(v55 | (unint64_t)(v56 << 32), v53, v94, v95, (uint64_t)v229, 0xD000000000000015, 0x80000001B6F3FAC0, 0);
                    sub_1B6786A7C((uint64_t)v229);
                    if ((v97 & 1) == 0) {
                      goto LABEL_90;
                    }
                  }
                  else
                  {
                    uint64_t v66 = v235;
                    float v67 = *(float *)(v235 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                    uint64_t v68 = SLODWORD(v237[0]);
                    uint64_t v69 = DWORD1(v237[0]);
                    swift_retain();
                    if (v68 == -1 && !v69) {
                      goto LABEL_90;
                    }
                    if ((v68 & 0x80000000) != 0) {
                      goto LABEL_90;
                    }
                    float32x4_t v70 = (uint64_t *)(v66 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                    if (*(void *)(v66 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v68) {
                      goto LABEL_90;
                    }
                    uint64_t v71 = *v70;
                    uint64_t v72 = *v70 + 12 * (int)v68;
                    int v73 = *(__int16 *)(v72 + 4);
                    if (v69 != -1 && *(_DWORD *)(v72 + 8) != v69) {
                      goto LABEL_90;
                    }
                    uint64_t v74 = *(void *)(*(void *)(v66 + 136) + 8 * *(int *)(v71 + 12 * (int)v68) + 32);
                    uint64_t v75 = *(void *)(v74 + 48);
                    uint64_t v76 = *(void *)(v75 + 16);
                    if (!v76) {
                      goto LABEL_90;
                    }
                    float v77 = (void *)(v75 + 56);
                    while ((ValueMetadata *)*(v77 - 3) != &type metadata for EmitterDescription)
                    {
                      v77 += 5;
                      if (!--v76) {
                        goto LABEL_90;
                      }
                    }
                    float v98 = *(float *)(*(void *)(v74 + 128) + *v77 + 88 * v73 + 52);
                    swift_release();
                    uint64_t v99 = v24 + 32 * v25;
                    char v100 = *(unsigned char *)(v99 + 24);
                    *(float *)&uint64_t v247 = v67 * v98;
                    *((float *)&v247 + 1) = v35;
                    *(float *)&unint64_t v248 = v38;
                    long long v249 = v221;
                    long long v250 = v223;
                    long long v251 = v226;
                    LOBYTE(v252) = v100;
                    *((float *)&v252 + 1) = v34;
                    uint64_t v101 = *v229;
                    if (*v229)
                    {
                      uint64_t v102 = swift_getObjectType();
                      type metadata accessor for particle_aabb_collider_uniforms(0);
                      sub_1B6B594A8((uint64_t)&v247, 1, v102, v103, v104, v105, v106, v107);
                    }
                    float32x4_t v27 = (unsigned __int8 *)(v99 + 24);
                    char v28 = v101 == 0;
                    sub_1B62D8328(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
                    uint64_t v29 = swift_allocObject();
                    *(_OWORD *)(v29 + 16) = xmmword_1B6E77050;
                    uint64_t v30 = *v27;
                    *(_OWORD *)(v29 + 32) = xmmword_1B6E98670;
                    *(unsigned char *)(v29 + 48) = 0;
                    *(void *)(v29 + 64) = v30;
                    *(void *)(v29 + 120) = 0;
                    *(_OWORD *)(v29 + 104) = 0u;
                    *(_OWORD *)(v29 + 88) = 0u;
                    *(_OWORD *)(v29 + 72) = 0u;
                    *(unsigned char *)(v29 + 128) = 13;
                    swift_retain();
                    sub_1B6786A24((uint64_t)v229);
                    char v31 = sub_1B6BFF2C8(v68 | (unint64_t)(v69 << 32), v66, v28, v29, (uint64_t)v229, 0xD000000000000016, 0x80000001B6F3FAE0, 0);
                    sub_1B6786A7C((uint64_t)v229);
                    if ((v31 & 1) == 0) {
                      goto LABEL_90;
                    }
                  }
                  uint64_t v23 = v209;
                  swift_release();
                  swift_setDeallocating();
                  swift_arrayDestroy();
                  swift_deallocClassInstance();
                  uint64_t v24 = v218;
                }
                ++v25;
              }
              while (v25 != v23);
            }
          }
          else if (v17 != v219)
          {
            float v108 = *(float *)(a1 + 12);
            float v206 = *(float *)(a1 + 8);
            float v208 = *(float *)(a1 + 4);
            int v210 = *(_DWORD *)(a1 + 20);
            do
            {
              uint64_t v113 = v24 + 32 * v17;
              if ((*(_DWORD *)(v113 + 16) & v210) != 0)
              {
                float32x4_t v114 = (float32x4_t *)(v217 + (v17 << 6));
                float v115 = fminf(fmaxf(v208 + *(float *)(v113 + 4), 0.0), 1.0);
                float v116 = fminf(fmaxf(v206 + *(float *)(v113 + 8), 0.0), 1.0);
                long long v117 = *(_OWORD *)v113;
                long long v118 = *(_OWORD *)(v113 + 16);
                float v119 = 1.0 - fminf(fmaxf(v108 + *(float *)(v113 + 12), 0.0), 1.0);
                uint64_t v120 = v216 + (v17 << 6);
                long long v241 = v117;
                long long v242 = v118;
                float32x4_t v121 = *v114;
                float32x4_t v122 = v114[1];
                float32x4_t v123 = v114[2];
                float32x4_t v124 = v114[3];
                long long v125 = *(_OWORD *)v120;
                long long v126 = *(_OWORD *)(v120 + 16);
                long long v127 = *(_OWORD *)(v120 + 32);
                uint64_t v130 = v120 + 48;
                uint64_t v128 = *(void *)(v120 + 48);
                uint64_t v129 = *(void *)(v130 + 8);
                v280[0] = v125;
                v280[1] = v126;
                _OWORD v280[2] = v127;
                uint64_t v281 = v128;
                uint64_t v282 = v129;
                char v283 = 0;
                sub_1B698861C((uint64_t)v280, a1, (uint64_t)v265, v121, v122, v123, v124, a4, a5, a6, a7);
                float v131 = *(float *)(a1 + 16);
                sub_1B698C0CC((uint64_t)v265, (uint64_t)v267);
                int v132 = sub_1B698C104((uint64_t)v267);
                nullsub_1(v267);
                long long v222 = *v133;
                long long v227 = v133[1];
                long long v224 = v133[2];
                if (v132 == 1)
                {
                  long long v228 = v133[7];
                  long long v202 = v133[8];
                  long long v204 = v133[3];
                  uint64_t v134 = v235;
                  float v135 = *(float *)(v235 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                  uint64_t v136 = SLODWORD(v237[0]);
                  uint64_t v137 = DWORD1(v237[0]);
                  swift_retain();
                  if (v136 == -1 && !v137) {
                    goto LABEL_90;
                  }
                  if ((v136 & 0x80000000) != 0) {
                    goto LABEL_90;
                  }
                  int v138 = (uint64_t *)(v134 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                  if (*(void *)(v134 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v136) {
                    goto LABEL_90;
                  }
                  uint64_t v139 = *v138;
                  uint64_t v140 = *v138 + 12 * (int)v136;
                  int v141 = *(__int16 *)(v140 + 4);
                  if (v137 != -1 && *(_DWORD *)(v140 + 8) != v137) {
                    goto LABEL_90;
                  }
                  uint64_t v142 = *(void *)(*(void *)(v134 + 136) + 8 * *(int *)(v139 + 12 * (int)v136) + 32);
                  uint64_t v143 = *(void *)(v142 + 48);
                  uint64_t v144 = *(void *)(v143 + 16);
                  if (!v144) {
                    goto LABEL_90;
                  }
                  float v145 = v131 * 0.5;
                  float v146 = (void *)(v143 + 56);
                  while ((ValueMetadata *)*(v146 - 3) != &type metadata for EmitterDescription)
                  {
                    v146 += 5;
                    if (!--v144) {
                      goto LABEL_90;
                    }
                  }
                  float v159 = *(float *)(*(void *)(v142 + 128) + *v146 + 88 * v141 + 52);
                  swift_release();
                  float32x4_t v160 = *v114;
                  float32x4_t v161 = v114[1];
                  float32x4_t v162 = v114[2];
                  float32x4_t v163 = v114[3];
                  uint64_t v164 = v24 + 32 * v17;
                  int v165 = *(_DWORD *)(v164 + 20);
                  char v166 = *(unsigned char *)(v164 + 24);
                  *(float *)&uint64_t v247 = v135 * v159;
                  *((float *)&v247 + 1) = v116;
                  long long v249 = v202;
                  long long v250 = v222;
                  long long v251 = v227;
                  long long v252 = v224;
                  long long v253 = v204;
                  float32x4_t v254 = v160;
                  float32x4_t v255 = v161;
                  float32x4_t v256 = v162;
                  float32x4_t v257 = v163;
                  long long v258 = v228;
                  *(float *)&unint64_t v248 = v119;
                  int v259 = v165;
                  char v260 = v166;
                  float v261 = v115;
                  float v262 = v145;
                  uint64_t v167 = *v229;
                  if (*v229)
                  {
                    uint64_t v168 = v137;
                    uint64_t v169 = swift_getObjectType();
                    type metadata accessor for particle_obb_collider_uniforms(0);
                    uint64_t v170 = v169;
                    uint64_t v137 = v168;
                    sub_1B6B594A8((uint64_t)&v247, 1, v170, v171, v172, v173, v174, v175);
                  }
                  char v109 = v167 == 0;
                  sub_1B62D8328(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
                  uint64_t v110 = swift_allocObject();
                  *(_OWORD *)(v110 + 16) = xmmword_1B6E77050;
                  unsigned int v111 = *(unsigned __int8 *)(v164 + 24);
                  *(_OWORD *)(v110 + 32) = xmmword_1B6E98670;
                  *(unsigned char *)(v110 + 48) = 0;
                  *(void *)(v110 + 64) = v111;
                  *(void *)(v110 + 120) = 0;
                  *(_OWORD *)(v110 + 104) = 0u;
                  *(_OWORD *)(v110 + 88) = 0u;
                  *(_OWORD *)(v110 + 72) = 0u;
                  *(unsigned char *)(v110 + 128) = 13;
                  swift_retain();
                  sub_1B6786A24((uint64_t)v229);
                  char v112 = sub_1B6BFF2C8(v136 | (unint64_t)(v137 << 32), v134, v109, v110, (uint64_t)v229, 0xD000000000000015, 0x80000001B6F3FAC0, 0);
                  sub_1B6786A7C((uint64_t)v229);
                  if ((v112 & 1) == 0) {
                    goto LABEL_90;
                  }
                }
                else
                {
                  uint64_t v147 = v235;
                  float v148 = *(float *)(v235 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                  uint64_t v149 = SLODWORD(v237[0]);
                  uint64_t v150 = DWORD1(v237[0]);
                  swift_retain();
                  if (v149 == -1 && !v150) {
                    goto LABEL_90;
                  }
                  if ((v149 & 0x80000000) != 0) {
                    goto LABEL_90;
                  }
                  long long v151 = (uint64_t *)(v147 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                  if (*(void *)(v147 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v149) {
                    goto LABEL_90;
                  }
                  uint64_t v152 = *v151;
                  uint64_t v153 = *v151 + 12 * (int)v149;
                  int v154 = *(__int16 *)(v153 + 4);
                  if (v150 != -1 && *(_DWORD *)(v153 + 8) != v150) {
                    goto LABEL_90;
                  }
                  uint64_t v155 = *(void *)(*(void *)(v147 + 136) + 8 * *(int *)(v152 + 12 * (int)v149) + 32);
                  uint64_t v156 = *(void *)(v155 + 48);
                  uint64_t v157 = *(void *)(v156 + 16);
                  if (!v157) {
                    goto LABEL_90;
                  }
                  unint64_t v158 = (void *)(v156 + 56);
                  while ((ValueMetadata *)*(v158 - 3) != &type metadata for EmitterDescription)
                  {
                    v158 += 5;
                    if (!--v157) {
                      goto LABEL_90;
                    }
                  }
                  float v176 = *(float *)(*(void *)(v155 + 128) + *v158 + 88 * v154 + 52);
                  swift_release();
                  uint64_t v177 = v24 + 32 * v17;
                  char v178 = *(unsigned char *)(v177 + 24);
                  *(float *)&uint64_t v247 = v148 * v176;
                  *((float *)&v247 + 1) = v116;
                  *(float *)&unint64_t v248 = v119;
                  long long v249 = v222;
                  long long v250 = v224;
                  long long v251 = v227;
                  LOBYTE(v252) = v178;
                  *((float *)&v252 + 1) = v115;
                  uint64_t v179 = *v229;
                  if (*v229)
                  {
                    uint64_t v180 = swift_getObjectType();
                    type metadata accessor for particle_aabb_collider_uniforms(0);
                    sub_1B6B594A8((uint64_t)&v247, 1, v180, v181, v182, v183, v184, v185);
                  }
                  uint64_t v186 = (unsigned __int8 *)(v177 + 24);
                  char v187 = v179 == 0;
                  sub_1B62D8328(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
                  uint64_t v188 = swift_allocObject();
                  *(_OWORD *)(v188 + 16) = xmmword_1B6E77050;
                  uint64_t v189 = *v186;
                  *(_OWORD *)(v188 + 32) = xmmword_1B6E98670;
                  *(unsigned char *)(v188 + 48) = 0;
                  *(void *)(v188 + 64) = v189;
                  *(void *)(v188 + 120) = 0;
                  *(_OWORD *)(v188 + 104) = 0u;
                  *(_OWORD *)(v188 + 88) = 0u;
                  *(_OWORD *)(v188 + 72) = 0u;
                  *(unsigned char *)(v188 + 128) = 13;
                  swift_retain();
                  sub_1B6786A24((uint64_t)v229);
                  char v190 = sub_1B6BFF2C8(v149 | (unint64_t)(v150 << 32), v147, v187, v188, (uint64_t)v229, 0xD000000000000016, 0x80000001B6F3FAE0, 0);
                  sub_1B6786A7C((uint64_t)v229);
                  if ((v190 & 1) == 0)
                  {
LABEL_90:
                    uint64_t v247 = 0;
                    unint64_t v248 = 0xE000000000000000;
                    sub_1B6E328C8();
                    sub_1B6E31948();
                    sub_1B681F698();
                    sub_1B6E31948();
                    swift_bridgeObjectRelease();
                    sub_1B6E31948();
                    sub_1B6E31948();
                    sub_1B6E31948();
                    sub_1B6E32BE8();
                    __break(1u);
                  }
                }
                swift_release();
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
                uint64_t v24 = v218;
              }
              ++v17;
            }
            while (v17 != v219);
          }
          v233[0] = v230;
          v233[1] = v231;
          uint64_t v234 = v232;
          sub_1B6345178(v198, (unsigned __int16 **)v233, (uint64_t)v275);
          sub_1B634507C((char *)v199);
          ecs_stack_allocator_pop_snapshot(v197);
          if (v196)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v199 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v199 + 376));
          }
          swift_release();
          uint64_t v15 = v195 + 1;
        }
        while (v195 + 1 != v194);
        sub_1B632F170(v263);
      }
    }
    return sub_1B632F170(v263);
  }
  return result;
}

uint64_t sub_1B698B300@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B698B528(0, (unint64_t *)&unk_1E9DD6DA0, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  long long v10 = (char *)&v19 - v9;
  long long v21 = xmmword_1B6E98660;
  uint64_t v22 = 255;
  char v23 = 0;
  int v24 = 0;
  sub_1B68923B4(a1, 0);
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  char v20 = 10;
  char v23 = sub_1B6E32DA8() & 1;
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1B62C14BC(a1, v12);
  if (sub_1B62B8F14(1042, v12, v13))
  {
    char v20 = 11;
    sub_1B6E32DC8();
    int v15 = v14;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    int v15 = HIDWORD(v22);
  }
  int v16 = v22;
  char v17 = v23;
  int v18 = v24;
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_OWORD *)a2 = v21;
  *(_DWORD *)(a2 + 16) = v16;
  *(_DWORD *)(a2 + 20) = v15;
  *(unsigned char *)(a2 + 24) = v17;
  *(_DWORD *)(a2 + 28) = v18;
  return result;
}

void sub_1B698B528(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6893F78();
    unint64_t v7 = a3(a1, &type metadata for ParticleCollidableCodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t *sub_1B698B58C(uint64_t *result, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v175 = (uint64_t)result;
  int v6 = *((_DWORD *)result + 4);
  __int32 v7 = a4[5].i32[1];
  if ((v7 & v6) == 0) {
    return result;
  }
  uint64_t v9 = (uint64_t)a4;
  float v10 = *((float *)result + 7);
  uint64_t v11 = a5;
  float v13 = a4[4].f32[3];
  float v12 = a4[5].f32[0];
  if ((a5 & 0xFE00000000) != 0) {
    uint64_t v11 = 0;
  }
  uint64_t v173 = v11;
  float v15 = *((float *)result + 2);
  float v14 = *((float *)result + 3);
  float v17 = a4[4].f32[1];
  float v16 = a4[4].f32[2];
  float v19 = *(float *)result;
  float v18 = *((float *)result + 1);
  float v20 = a4[4].f32[0];
  *(void *)&long long v204 = __PAIR64__(COERCE_UNSIGNED_INT(fminf(fmaxf(v18 + v17, 0.0), 1.0)), COERCE_UNSIGNED_INT(fminf(fmaxf(*(float *)result + v20, 0.0), 1.0)));
  DWORD2(v204) = fminf(fmaxf(v15 + v16, 0.0), 1.0);
  *((float *)&v204 + 3) = 1.0 - fminf(fmaxf(v14 + v13, 0.0), 1.0);
  float v205 = v10 + v12;
  int v206 = v7 & v6;
  float v21 = a4[10].f32[0];
  int v22 = *((_DWORD *)result + 5);
  char v23 = *((unsigned char *)result + 24);
  *(float *)&v226[6] = v19;
  *(float *)&v226[7] = v18;
  *(float *)&v226[8] = v15;
  *(float *)&v226[9] = v14;
  v226[10] = v6;
  v226[11] = v22;
  char v227 = v23;
  float v228 = v10;
  float32x4_t v24 = *a2;
  float32x4_t v25 = a2[1];
  float32x4_t v26 = a2[2];
  float32x4_t v27 = a2[3];
  long long v28 = *(_OWORD *)(a3 + 16);
  long long v29 = *(_OWORD *)(a3 + 32);
  uint64_t v31 = *(void *)(a3 + 48);
  uint64_t v30 = *(void *)(a3 + 56);
  v222[0] = *(_OWORD *)a3;
  v222[1] = v28;
  v222[2] = v29;
  uint64_t v223 = v31;
  uint64_t v224 = v30;
  char v225 = 0;
  float32x4_t v32 = a4[6];
  float32x4_t v33 = a4[7];
  float32x4_t v34 = a4[8];
  float32x4_t v35 = a4[9];
  *(float *)long long v226 = v20;
  *(float *)&v226[1] = v17;
  *(float *)&v226[2] = v16;
  *(float *)&v226[3] = v13;
  *(float *)&v226[4] = v12;
  v226[5] = v7;
  if (a5) {
    BOOL v36 = (a5 & 0xFE00000000) != 0;
  }
  else {
    BOOL v36 = 1;
  }
  BOOL v172 = v36;
  sub_1B698861C((uint64_t)v222, (uint64_t)v226, (uint64_t)v186, v24, v25, v26, v27, v32, v33, v34, v35);
  sub_1B698C0CC((uint64_t)v186, (uint64_t)v194);
  int v37 = sub_1B698C104((uint64_t)v194);
  nullsub_1(v194);
  uint64_t v174 = v9;
  if (v37 != 1)
  {
    float32x4_t v153 = *((float32x4_t *)v38 + 1);
    float32x4_t v155 = *(float32x4_t *)v38;
    __n128 v151 = *((__n128 *)v38 + 2);
    long long v92 = *(_OWORD *)(v9 + 40);
    v187[0] = *(_OWORD *)(v9 + 24);
    v187[1] = v92;
    uint64_t v188 = *(void *)(v9 + 56);
    sub_1B62C9DA8(a6, (uint64_t)v187, 0x200000000, v189);
    uint64_t result = (uint64_t *)sub_1B62D7410((uint64_t)v189, (uint64_t)&v207, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    uint64_t v179 = (unsigned __int16 *)v207;
    if (!(void)v207) {
      return result;
    }
    uint64_t v149 = v216;
    if (v216 < 1 || (uint64_t v147 = v213) == 0)
    {
      uint64_t v140 = v189;
      return sub_1B632F170(v140);
    }
    uint64_t v93 = 0;
    uint64_t v145 = v211;
    char v94 = v215;
    uint64_t v95 = v215[4];
    int v171 = *(unsigned __int8 *)(v214 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    uint64_t v142 = v215 + 8;
    uint64_t v144 = v214;
    uint64_t v141 = v95;
    uint64_t v177 = v207 + 41;
    uint64_t v185 = v215;
    while (1)
    {
      uint64_t v165 = v93;
      uint64_t v96 = (unsigned int *)(v145 + 48 * v93);
      uint64_t v97 = *v96;
      uint64_t v98 = v96[1];
      uint64_t v99 = v96[2];
      uint64_t v100 = *((void *)v96 + 2);
      uint64_t v101 = *((void *)v96 + 3);
      uint64_t v102 = *((void *)v96 + 5);
      uint64_t v182 = *((void *)v96 + 4);
      if (v171)
      {
        uint64_t v103 = *(os_unfair_lock_s **)(v102 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v103);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v102 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v95);
      uint64_t v157 = v94[6];
      uint64_t v161 = v94[8];
      uint64_t v163 = v94[7];
      uint64_t v167 = v94[10];
      uint64_t v169 = v94[9];
      uint64_t v104 = v94[4];
      uint64_t v105 = *(void *)(*(void *)(*(void *)(*(void *)(v102 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v185[6] = ecs_stack_allocator_allocate(v104, 48 * v105, 8);
      v185[7] = v105;
      char v94 = v185;
      v142[1] = 0;
      v142[2] = 0;
      *uint64_t v142 = 0;
      swift_release();
      v195.i64[0] = v144;
      v195.i64[1] = v102;
      uint64_t v159 = v102;
      *(void *)&long long v196 = v185;
      *((void *)&v196 + 1) = v99;
      *(void *)&long long v197 = (v98 - v97 + v99);
      *((void *)&v197 + 1) = v149;
      *(void *)&long long v198 = v97;
      *((void *)&v198 + 1) = v98;
      long long v199 = 0uLL;
      LOBYTE(v200) = 1;
      *((void *)&v200 + 1) = v100;
      *(void *)&long long v201 = v101;
      LOBYTE(v220[0]) = v172;
      *((void *)&v201 + 1) = v182;
      sub_1B69893CC((long long *)&v195, &v204, v9, v173 | ((unint64_t)v172 << 32), v175, v155, v153, v151, v21);
      unint64_t v106 = v185[6];
      uint64_t v183 = v185[8];
      if (v183) {
        break;
      }
      uint64_t v132 = v185[7];
      char v133 = (void *)v185[4];
      uint64_t v135 = v163;
      uint64_t v134 = v165;
      uint64_t v95 = v141;
      uint64_t v139 = v157;
      uint64_t v138 = v159;
      uint64_t v136 = v161;
LABEL_102:
      ecs_stack_allocator_deallocate(v133, v106, 48 * v132);
      v94[6] = v139;
      v94[7] = v135;
      v94[8] = v136;
      v94[9] = v169;
      v94[10] = v167;
      sub_1B634507C((char *)v138);
      ecs_stack_allocator_pop_snapshot(v95);
      if (v171)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v138 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v138 + 376));
      }
      swift_release();
      uint64_t v93 = v134 + 1;
      uint64_t v9 = v174;
      if (v93 == v147)
      {
        uint64_t v140 = v189;
        return sub_1B632F170(v140);
      }
    }
    uint64_t v107 = 0;
    while (1)
    {
      unint64_t v109 = v106;
      uint64_t v110 = (uint64_t *)(v106 + 48 * v107);
      uint64_t v111 = *v110;
      char v112 = (void (*)(uint64_t))v110[4];
      uint64_t v113 = v94[9];
      if (v113) {
        BOOL v114 = v111 == v113;
      }
      else {
        BOOL v114 = 0;
      }
      if (!v114 && v179[11])
      {
        unint64_t v115 = v179[9];
        float v116 = (void *)(v177 + v179[8]);
        uint64_t v117 = v110[2];
        long long v118 = v116;
        unint64_t v119 = v115 >> 4;
        uint64_t v120 = v177;
        if (v115 < 0x10) {
          goto LABEL_81;
        }
        while (*v118 != v111)
        {
          ++v120;
          v118 += 2;
          if (!--v119) {
            goto LABEL_81;
          }
        }
        unsigned int v121 = *(unsigned __int8 *)(v120 + v179[10]);
        BOOL v73 = v121 > 5;
        int v122 = (1 << v121) & 0x23;
        if (!v73 && v122 != 0)
        {
LABEL_81:
          if (swift_conformsToProtocol2()) {
            uint64_t v124 = v117;
          }
          else {
            uint64_t v124 = 0;
          }
          if (!v124) {
            goto LABEL_67;
          }
          if (v115 >= 0x10)
          {
            long long v125 = v116;
            unint64_t v126 = v115 >> 4;
            uint64_t v127 = v177;
            while (*v125 != v124)
            {
              ++v127;
              v125 += 2;
              if (!--v126) {
                goto LABEL_94;
              }
            }
            unsigned int v128 = *(unsigned __int8 *)(v127 + v179[10]);
            BOOL v73 = v128 > 5;
            int v129 = (1 << v128) & 0x23;
            if (!v73 && v129 != 0)
            {
LABEL_94:
              uint64_t v131 = 16 * (v115 >> 4);
              while (*v116 != v124)
              {
                v116 += 2;
                v131 -= 16;
                if (!v131) {
                  goto LABEL_66;
                }
              }
              goto LABEL_67;
            }
          }
        }
      }
LABEL_66:
      uint64_t v108 = swift_retain();
      v112(v108);
      swift_release();
LABEL_67:
      ++v107;
      char v94 = v185;
      unint64_t v106 = v109;
      if (v107 == v183)
      {
        uint64_t v132 = v185[7];
        unint64_t v106 = v185[6];
        char v133 = (void *)v185[4];
        uint64_t v135 = v163;
        uint64_t v134 = v165;
        uint64_t v95 = v141;
        uint64_t v136 = v161;
        if ((uint64_t)v185[8] >= 1)
        {
          unint64_t v137 = v185[6];
          swift_arrayDestroy();
          unint64_t v106 = v137;
        }
        uint64_t v139 = v157;
        uint64_t v138 = v159;
        goto LABEL_102;
      }
    }
  }
  long long v39 = v38[7];
  long long v201 = v38[6];
  long long v202 = v39;
  long long v203 = v38[8];
  long long v40 = v38[3];
  long long v197 = v38[2];
  long long v198 = v40;
  long long v41 = v38[5];
  long long v199 = v38[4];
  long long v200 = v41;
  long long v42 = v38[1];
  float32x4_t v195 = *(float32x4_t *)v38;
  long long v196 = v42;
  long long v43 = *(_OWORD *)(v9 + 40);
  v220[0] = *(_OWORD *)(v9 + 24);
  v220[1] = v43;
  uint64_t v221 = *(void *)(v9 + 56);
  sub_1B62C9DA8(a6, (uint64_t)v220, 0x200000000, v187);
  uint64_t result = (uint64_t *)sub_1B62D7410((uint64_t)v187, (uint64_t)v189, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  char v178 = (unsigned __int16 *)v189[0];
  if (!v189[0]) {
    return result;
  }
  uint64_t v154 = v193;
  if (v193 < 1 || (uint64_t v152 = v190) == 0)
  {
    uint64_t v140 = (uint64_t *)v187;
    return sub_1B632F170(v140);
  }
  uint64_t v44 = 0;
  uint64_t v150 = v189[5];
  long long v45 = v192;
  uint64_t v46 = v192[4];
  int v170 = *(unsigned __int8 *)(v191 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  float v146 = v192 + 8;
  uint64_t v148 = v191;
  uint64_t v143 = v46;
  uint64_t v176 = v189[0] + 41;
  uint64_t v184 = v192;
  while (2)
  {
    uint64_t v164 = v44;
    uint64_t v47 = (unsigned int *)(v150 + 48 * v44);
    uint64_t v48 = *v47;
    uint64_t v49 = v47[1];
    uint64_t v50 = v47[2];
    uint64_t v51 = *((void *)v47 + 2);
    uint64_t v52 = *((void *)v47 + 3);
    uint64_t v53 = *((void *)v47 + 5);
    uint64_t v180 = *((void *)v47 + 4);
    if (v170)
    {
      float v54 = *(os_unfair_lock_s **)(v53 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v54);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v53 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v46);
    uint64_t v156 = v45[6];
    uint64_t v160 = v45[8];
    uint64_t v162 = v45[7];
    uint64_t v166 = v45[10];
    uint64_t v168 = v45[9];
    uint64_t v55 = v45[4];
    uint64_t v56 = *(void *)(*(void *)(*(void *)(*(void *)(v53 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v184[6] = ecs_stack_allocator_allocate(v55, 48 * v56, 8);
    v184[7] = v56;
    long long v45 = v184;
    v146[1] = 0;
    v146[2] = 0;
    *float v146 = 0;
    swift_release();
    *(void *)&long long v207 = v148;
    uint64_t v158 = v53;
    *((void *)&v207 + 1) = v53;
    float v208 = v184;
    uint64_t v209 = v50;
    uint64_t v210 = (v49 - v48 + v50);
    uint64_t v211 = v154;
    uint64_t v212 = v48;
    uint64_t v213 = v49;
    uint64_t v214 = 0;
    uint64_t v215 = 0;
    LOBYTE(v216) = 1;
    uint64_t v217 = v51;
    uint64_t v218 = v52;
    uint64_t v219 = v180;
    sub_1B69897B4(&v207, &v204, (uint64_t)&v195, v9, v173 | ((unint64_t)v172 << 32), v175, v21);
    unint64_t v57 = v184[6];
    uint64_t v181 = v184[8];
    if (!v181)
    {
      uint64_t v84 = v184[7];
      char v85 = (void *)v184[4];
      uint64_t v87 = v162;
      uint64_t v86 = v164;
      uint64_t v46 = v143;
      uint64_t v91 = v156;
      uint64_t v90 = v158;
      uint64_t v88 = v160;
      goto LABEL_54;
    }
    for (uint64_t i = 0; i != v181; ++i)
    {
      unint64_t v60 = v57;
      uint64_t v61 = (uint64_t *)(v57 + 48 * i);
      uint64_t v62 = *v61;
      uint64_t v63 = (void (*)(uint64_t))v61[4];
      uint64_t v64 = v45[9];
      if (v64) {
        BOOL v65 = v62 == v64;
      }
      else {
        BOOL v65 = 0;
      }
      if (v65 || !v178[11]) {
        goto LABEL_18;
      }
      unint64_t v66 = v178[9];
      float v67 = (void *)(v176 + v178[8]);
      uint64_t v68 = v61[2];
      uint64_t v69 = v67;
      unint64_t v70 = v66 >> 4;
      uint64_t v71 = v176;
      if (v66 >= 0x10)
      {
        while (*v69 != v62)
        {
          ++v71;
          v69 += 2;
          if (!--v70) {
            goto LABEL_33;
          }
        }
        unsigned int v72 = *(unsigned __int8 *)(v71 + v178[10]);
        BOOL v73 = v72 > 5;
        int v74 = (1 << v72) & 0x23;
        if (v73 || v74 == 0)
        {
LABEL_18:
          uint64_t v59 = swift_retain();
          v63(v59);
          swift_release();
          goto LABEL_19;
        }
      }
LABEL_33:
      if (swift_conformsToProtocol2()) {
        uint64_t v76 = v68;
      }
      else {
        uint64_t v76 = 0;
      }
      if (v76)
      {
        if (v66 < 0x10) {
          goto LABEL_18;
        }
        float v77 = v67;
        unint64_t v78 = v66 >> 4;
        uint64_t v79 = v176;
        while (*v77 != v76)
        {
          ++v79;
          v77 += 2;
          if (!--v78) {
            goto LABEL_46;
          }
        }
        unsigned int v80 = *(unsigned __int8 *)(v79 + v178[10]);
        BOOL v73 = v80 > 5;
        int v81 = (1 << v80) & 0x23;
        if (v73 || v81 == 0) {
          goto LABEL_18;
        }
LABEL_46:
        uint64_t v83 = 16 * (v66 >> 4);
        while (*v67 != v76)
        {
          v67 += 2;
          v83 -= 16;
          if (!v83) {
            goto LABEL_18;
          }
        }
      }
LABEL_19:
      long long v45 = v184;
      unint64_t v57 = v60;
    }
    uint64_t v84 = v184[7];
    unint64_t v57 = v184[6];
    char v85 = (void *)v184[4];
    uint64_t v87 = v162;
    uint64_t v86 = v164;
    uint64_t v46 = v143;
    uint64_t v88 = v160;
    if ((uint64_t)v184[8] >= 1)
    {
      unint64_t v89 = v184[6];
      swift_arrayDestroy();
      unint64_t v57 = v89;
    }
    uint64_t v91 = v156;
    uint64_t v90 = v158;
LABEL_54:
    ecs_stack_allocator_deallocate(v85, v57, 48 * v84);
    v45[6] = v91;
    v45[7] = v87;
    v45[8] = v88;
    v45[9] = v168;
    v45[10] = v166;
    sub_1B634507C((char *)v90);
    ecs_stack_allocator_pop_snapshot(v46);
    if (v170)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v90 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v90 + 376));
    }
    swift_release();
    uint64_t v44 = v86 + 1;
    uint64_t v9 = v174;
    if (v44 != v152) {
      continue;
    }
    break;
  }
  uint64_t v140 = (uint64_t *)v187;
  return sub_1B632F170(v140);
}

uint64_t sub_1B698C0CC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  long long v6 = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 112);
  long long v8 = *(_OWORD *)(a1 + 128);
  *(unsigned char *)(a2 + 144) = *(unsigned char *)(a1 + 144);
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 96) = v6;
  return a2;
}

uint64_t sub_1B698C104(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t sub_1B698C10C(uint64_t result)
{
  *(unsigned char *)(result + 144) = 1;
  return result;
}

uint64_t sub_1B698C118(uint64_t result)
{
  *(unsigned char *)(result + 144) = 0;
  return result;
}

__n128 initializeWithCopy for ParticleBoxCollider.Features(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleBoxCollider.Features(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 145)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 144);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleBoxCollider.Features(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 145) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 144) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B698C208(uint64_t result, char a2)
{
  *(unsigned char *)(result + 144) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleBoxCollider.Features()
{
  return &type metadata for ParticleBoxCollider.Features;
}

ValueMetadata *type metadata accessor for ParticleBoxCollider()
{
  return &type metadata for ParticleBoxCollider;
}

uint64_t getEnumTagSinglePayload for ParticleBoxCollider.OBBFeature(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParticleBoxCollider.OBBFeature(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 144) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleBoxCollider.OBBFeature()
{
  return &type metadata for ParticleBoxCollider.OBBFeature;
}

ValueMetadata *type metadata accessor for ParticleBoxCollider.AABBFeature()
{
  return &type metadata for ParticleBoxCollider.AABBFeature;
}

double sub_1B698C2C4(uint64_t a1)
{
  return sub_1B68947C0(a1);
}

uint64_t sub_1B698C2DC@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  v6[0] = 0xD000000000000011;
  v6[1] = 0x80000001B6F3FB00;
  _OWORD v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4800) == 0x4000) {
    unint64_t v3 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v3 = 0xD000000000000011;
  }
  v6[4] = MEMORY[0x1E4FBC860];
  v6[5] = v3;
  unint64_t v4 = 0x80000001B6F3FB20;
  if ((a1 & 0x4800) == 0x4000) {
    unint64_t v4 = 0x80000001B6F3FB40;
  }
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E4FBC860];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  nullsub_1(v6);
  return sub_1B62CA210((uint64_t)v6, a2, &qword_1EB97EB68);
}

void *sub_1B698C3A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long v7 = (void *)a3[1];
  swift_retain();
  sub_1B62E9D50(v7, (uint64_t)v19);
  swift_release();
  sub_1B62CA210((uint64_t)v19, (uint64_t)v20, qword_1EB97EA20);
  if (v21)
  {
    long long v8 = xmmword_1B6E4F370;
    long long v9 = xmmword_1B6E4F2E0;
    long long v10 = xmmword_1B6E4F320;
    long long v11 = xmmword_1B6E4F300;
  }
  else
  {
    long long v11 = v20[0];
    long long v10 = v20[1];
    long long v9 = v20[2];
    long long v8 = v20[3];
  }
  unsigned int v12 = *(_DWORD *)(v3 + 24);
  if (v12 - 11 > 0xF4)
  {
    float v15 = *(float *)(v3 + 16);
    if (v15 > -1.0) {
      float v16 = *(float *)(v3 + 16);
    }
    else {
      float v16 = -1.0;
    }
    if (v15 >= 0.0) {
      float v13 = v16;
    }
    else {
      float v13 = -1.0;
    }
  }
  else
  {
    float v13 = 1.0 / (float)v12;
    float v14 = *(float *)(v3 + 16);
    if (v14 >= 0.0 && v14 > v13) {
      float v13 = *(float *)(v3 + 16);
    }
  }
  int v17 = *(_DWORD *)(v3 + 32);
  v22[0] = v11;
  v22[1] = v10;
  _OWORD v22[2] = v9;
  v22[3] = v8;
  float v23 = v13;
  int v24 = v17;
  return sub_1B696918C(v22, a1, a2, a3, v3);
}

uint64_t sub_1B698C4D4()
{
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  uint64_t v0 = sub_1B62FFCAC(4);
  *(void *)(v0 + 88) = sub_1B698C2DC;
  *(void *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

void *sub_1B698C534(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1B698C3A4(a1, a2, a3);
}

double sub_1B698C570@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(float *)&double result = sub_1B698C6CC(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B698C5B8(void *a1)
{
  sub_1B62A7DBC(0, (unint64_t *)&unk_1E9DD01B0, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  long long v9 = (char *)v12 - v8;
  long long v10 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v10;
  int v13 = *(_DWORD *)(v1 + 32);
  uint64_t result = sub_1B67C68A8(a1, (uint64_t)v12 - v8);
  if (!v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

float sub_1B698C6CC@<S0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B62A7DBC(0, &qword_1EB980A78, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  long long v10 = (char *)&v21 - v9;
  uint64_t v22 = 0xFFFFFFFFLL;
  int v23 = 0;
  char v24 = 1;
  float v25 = -1.0;
  char v26 = 0;
  int v27 = 256;
  uint64_t v28 = 16843008;
  sub_1B67C76B8(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    int v12 = v23;
    char v13 = v24;
    float result = v25;
    char v14 = v26;
    int v15 = v27;
    char v16 = v28;
    char v17 = BYTE1(v28);
    char v18 = BYTE2(v28);
    char v19 = BYTE3(v28);
    int v20 = HIDWORD(v28);
    *(void *)a2 = v22;
    *(_DWORD *)(a2 + 8) = v12;
    *(unsigned char *)(a2 + 12) = v13;
    *(float *)(a2 + 16) = result;
    *(unsigned char *)(a2 + 20) = v14;
    *(_DWORD *)(a2 + 24) = v15;
    *(unsigned char *)(a2 + 28) = v16;
    *(unsigned char *)(a2 + 29) = v17;
    *(unsigned char *)(a2 + 30) = v18;
    *(unsigned char *)(a2 + 31) = v19;
    *(_DWORD *)(a2 + 32) = v20;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleBoxRenderer()
{
  return &type metadata for ParticleBoxRenderer;
}

uint64_t sub_1B698C884(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = a1;
  uint64_t v15 = 0;
  if (qword_1E9DCC4A0 != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1, a2);
  _OWORD v12[2] = a2;
  char v13 = a3 & 1;
  char v14 = &v15;
  sub_1B68B708C((uint64_t)sub_1B698F50C, (uint64_t)v12, v7, v8, v9, MEMORY[0x1E4FBC860]);
  if (!v3)
  {
    uint64_t v10 = sub_1B68C70AC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v6 + 24) = v10;
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t sub_1B698C9C8()
{
  return 0x65536D6F646E6152;
}

double sub_1B698C9E4@<D0>(_OWORD *a1@<X8>)
{
  sub_1B682AF48((unint64_t)&unk_1F0F65060, v4);
  swift_arrayDestroy();
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

void *sub_1B698CA44(void *a1)
{
  *(void *)(swift_allocObject() + OBJC_IVAR____TtC3VFX14RandomSeedNode_entity) = *(void *)((char *)a1
                                                                                             + OBJC_IVAR____TtC3VFX14RandomSeedNode_entity);
  return sub_1B682A2AC(a1);
}

void sub_1B698CA90()
{
}

uint64_t sub_1B698CAC0()
{
  return type metadata accessor for RandomSeedNode(0);
}

uint64_t type metadata accessor for RandomSeedNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3160);
}

uint64_t sub_1B698CAE8()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B698CB2C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 8))(v2 + OBJC_IVAR____TtC3VFX14RandomSeedNode_entity, 0, ObjectType, a2);
}

uint64_t sub_1B698CB8C()
{
  return sub_1B698F29C();
}

uint64_t sub_1B698CBB0()
{
  sub_1B68805E0(0, &qword_1EB980BA8);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B6E77050;
  uint64_t v2 = OBJC_IVAR____TtC3VFX14RandomSeedNode_entity;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = *(void *)(v0 + v2);
  *(void *)(v1 + 32) = v3 | 0xC000000000000000;
  *(unsigned char *)(v1 + 40) = 3;
  *(void *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 56) = 1;
  return v1;
}

uint64_t sub_1B698CC4C(unint64_t a1)
{
  if (a1 == 0x8000000000000050) {
    return 0x646E61725F786676;
  }
  unint64_t v1 = 0xD000000000000013;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E8F480;
  char v4 = sub_1B69B18E4(v3 | 0x1000000000000000, a1);
  swift_release();
  if (v4) {
    return v1;
  }
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B6E8DAE0;
  char v6 = sub_1B69B18E4(v5 | 0x1000000000000000, a1);
  swift_release();
  if (v6) {
    return v1;
  }
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B6E8DAD0;
  char v8 = sub_1B69B18E4(v7 | 0x1000000000000000, a1);
  swift_release();
  if (v8) {
    return v1;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

void sub_1B698CDF0()
{
}

uint64_t sub_1B698CE3C()
{
  return type metadata accessor for RandomNode(0);
}

uint64_t type metadata accessor for RandomNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3170);
}

uint64_t sub_1B698CE64(char a1)
{
  return (*(uint64_t (**)(void))(*(void *)v1 + 248))(a1 & 1);
}

void sub_1B698CE8C()
{
}

unint64_t sub_1B698CED8@<X0>(uint64_t *a1@<X8>)
{
  sub_1B68805E0(0, (unint64_t *)&qword_1E9DD1D50);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E77050;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x8000000000000038;
  *(void *)(v3 + 32) = v4 | 0x6000000000000000;
  sub_1B68805E0(0, &qword_1E9DD1998);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 64) = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v5 + 16) = xmmword_1B6E77050;
  *(_OWORD *)(v5 + 32) = xmmword_1B6E8DB00;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E77050;
  uint64_t v7 = swift_allocObject();
  unint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  *(void *)(v7 + 16) = v8;
  *(void *)(v6 + 32) = v7 | 0x6000000000000000;
  unint64_t result = sub_1B67C52A4(v8);
  *a1 = v3;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1F0F69C28;
  a1[3] = (uint64_t)&unk_1F0F69BF8;
  a1[4] = MEMORY[0x1E4FBC860];
  a1[5] = v5;
  return result;
}

void *sub_1B698D02C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  unint64_t v3 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  *(void *)(v2 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v3;
  sub_1B67C52A4(v3);
  uint64_t v4 = sub_1B682A2AC(a1);
  (*(void (**)(void))(*v4 + 288))();
  return v4;
}

void sub_1B698D0BC()
{
}

uint64_t sub_1B698D108(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A28();
  if (!v2)
  {
    sub_1B62C14BC(v5, v5[3]);
    sub_1B698F4B8();
    sub_1B6E33518();
    unint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
    *(void *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v5[6];
    sub_1B678FC34(v4);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  return result;
}

void sub_1B698D1D8()
{
}

unint64_t sub_1B698D208()
{
  return sub_1B678FC34(*(void *)(v0 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type));
}

uint64_t sub_1B698D218()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1B678FC34(*(void *)(v0 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type));

  return swift_deallocClassInstance();
}

uint64_t sub_1B698D2DC()
{
  return type metadata accessor for RandomTypedNode(0);
}

uint64_t type metadata accessor for RandomTypedNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3180);
}

uint64_t sub_1B698D304()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B698D348(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  sub_1B62C550C((uint64_t)v3, v4);
  sub_1B698F244();
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B698D3FC(void *a1)
{
  return sub_1B698D108(a1);
}

uint64_t sub_1B698D414()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  sub_1B67C52A4(v1);
  sub_1B69B0F8C(v1);
  sub_1B678FC34(v1);
  swift_bridgeObjectRetain();
  sub_1B67BB63C();
  swift_bridgeObjectRelease();
  sub_1B6E32518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6A04144();
  swift_bridgeObjectRelease();
  sub_1B678C2E8();
  swift_bridgeObjectRetain();
  sub_1B6E31928();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return 0x6D6F646E6152;
}

uint64_t sub_1B698D594()
{
  unint64_t v1 = *(void *)(*(void *)(v0 + 32) + 32);
  sub_1B68289A0(*(void *)(v0 + 24));
  sub_1B67C52A4(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1B698CC4C(v1);
  sub_1B678FC34(v1);
  sub_1B6E31948();
  return v2;
}

uint64_t sub_1B698D62C()
{
  return type metadata accessor for Random01Node(0);
}

uint64_t type metadata accessor for Random01Node(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3190);
}

uint64_t sub_1B698D658()
{
  uint64_t result = 0x6E556D6F646E6152;
  sub_1B698D944();
  return result;
}

uint64_t sub_1B698D674()
{
  unint64_t v1 = *(void *)(*(void *)(v0 + 32) + 32);
  sub_1B68289A0(*(void *)(v0 + 24));
  sub_1B67C52A4(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B698CC4C(v1);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E8F480;
  unint64_t v3 = v2 | 0x1000000000000000;
  sub_1B67C52A4(v1);
  LOBYTE(v3) = sub_1B69B18E4(v3, v1);
  swift_release();
  sub_1B678FC34(v1);
  if (v3) {
    goto LABEL_4;
  }
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E8DAE0;
  unint64_t v5 = v4 | 0x1000000000000000;
  sub_1B67C52A4(v1);
  LOBYTE(v5) = sub_1B69B18E4(v5, v1);
  swift_release();
  sub_1B678FC34(v1);
  if ((v5 & 1) != 0
    || (uint64_t v6 = swift_allocObject(),
        *(_OWORD *)(v6 + 16) = xmmword_1B6E8DAD0,
        unint64_t v7 = v6 | 0x1000000000000000,
        sub_1B67C52A4(v1),
        LOBYTE(v7) = sub_1B69B18E4(v7, v1),
        swift_release(),
        sub_1B678FC34(v1),
        (v7 & 1) != 0))
  {
LABEL_4:
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B678FC34(v1);
    return 0xD000000000000015;
  }
  else
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B698D904()
{
  return type metadata accessor for RandomUnitVectorNode(0);
}

uint64_t type metadata accessor for RandomUnitVectorNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD31A0);
}

uint64_t sub_1B698D92C()
{
  uint64_t result = 0x6E496D6F646E6152;
  sub_1B698D944();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1B698D944()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  sub_1B67C52A4(v1);
  sub_1B69B0F8C(v1);
  sub_1B678FC34(v1);
  swift_bridgeObjectRetain();
  sub_1B67BB63C();
  swift_bridgeObjectRelease();
  sub_1B6E32518();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6A04144();
  swift_bridgeObjectRelease();
  sub_1B678C2E8();
  swift_bridgeObjectRetain();
  sub_1B6E31928();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
}

uint64_t sub_1B698DA9C@<X0>(uint64_t *a1@<X8>)
{
  sub_1B68805E0(0, (unint64_t *)&qword_1E9DD1D50);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E76B30;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x8000000000000038;
  *(void *)(v3 + 32) = v4 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = OBJC_IVAR____TtC3VFX15RandomTypedNode_type;
  unint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  *(void *)(v5 + 16) = v7;
  *(void *)(v3 + 40) = v5 | 0x6000000000000000;
  sub_1B68805E0(0, &qword_1E9DD1998);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 64) = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v8 + 16) = xmmword_1B6E76B30;
  *(_OWORD *)(v8 + 32) = xmmword_1B6E8DB00;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0x8000000000000040;
  unint64_t v10 = v9 | 0x2000000000000000;
  sub_1B67C52A4(v7);
  sub_1B67C52A4(v7);
  LOBYTE(v10) = sub_1B69B18E4(v7, v10);
  swift_release();
  sub_1B678FC34(v7);
  if (v10)
  {
    sub_1B68E2CC0(0, (unint64_t *)&unk_1EB980430);
    uint64_t v12 = v11;
    long long v23 = xmmword_1B6E4F270;
  }
  else
  {
    sub_1B68E2CC0(0, (unint64_t *)&qword_1EB980410);
    uint64_t v12 = v13;
    *(void *)&long long v23 = 0x3F80000000000000;
  }
  uint64_t v24 = v12;
  sub_1B62C14BC(&v23, v12);
  uint64_t DynamicType = swift_getDynamicType();
  unint64_t v15 = sub_1B69B1CC4(DynamicType);
  if ((~v15 & 0xF000000000000007) != 0)
  {
    unint64_t v16 = v15;
    sub_1B62CAAD8((uint64_t)&v23, v8 + 80);
    *(void *)(v8 + 72) = v16;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v23);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1B6E77050;
    unint64_t v18 = *(void *)(v1 + v6);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = 0x8000000000000040;
    unint64_t v20 = v19 | 0x2000000000000000;
    sub_1B67C52A4(v18);
    LOBYTE(v20) = sub_1B69B18E4(v18, v20);
    swift_release();
    sub_1B678FC34(v18);
    if (v20) {
      unint64_t v21 = 0x8000000000000040;
    }
    else {
      unint64_t v21 = 0x8000000000000050;
    }
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v21;
    *(void *)(v17 + 32) = result | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v17;
    a1[2] = (uint64_t)&unk_1F0F74518;
    a1[3] = (uint64_t)&unk_1F0F744D8;
    a1[4] = MEMORY[0x1E4FBC860];
    a1[5] = v8;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

unint64_t sub_1B698DE08()
{
  return 0xD00000000000005ELL;
}

uint64_t sub_1B698DE24()
{
  return type metadata accessor for RandomInRangeNode(0);
}

uint64_t type metadata accessor for RandomInRangeNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD31B0);
}

uint64_t sub_1B698DE4C()
{
  return swift_updateClassMetadata2();
}

unint64_t sub_1B698DE84()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B698DEA0@<X0>(uint64_t *a1@<X8>)
{
  sub_1B68805E0(0, (unint64_t *)&qword_1E9DD1D50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x8000000000000038;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x8000000000000050;
  *(void *)(v2 + 40) = v4 | 0x6000000000000000;
  sub_1B68805E0(0, &qword_1E9DD1998);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 64) = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v5 + 16) = xmmword_1B6E76B30;
  *(_OWORD *)(v5 + 32) = xmmword_1B6E8DB00;
  void v12[3] = MEMORY[0x1E4FBB470];
  LODWORD(v12[0]) = 1065353216;
  sub_1B62C14BC(v12, MEMORY[0x1E4FBB470]);
  uint64_t DynamicType = swift_getDynamicType();
  unint64_t v7 = sub_1B69B1CC4(DynamicType);
  if ((~v7 & 0xF000000000000007) != 0)
  {
    unint64_t v8 = v7;
    sub_1B62CAAD8((uint64_t)v12, v5 + 80);
    *(void *)(v5 + 72) = v8;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1B6E77050;
    uint64_t v10 = swift_allocObject();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B6E8DAE0;
    *(void *)(v10 + 16) = result | 0x1000000000000000;
    *(void *)(v9 + 32) = v10 | 0x6000000000000000;
    *a1 = v2;
    a1[1] = v9;
    a1[2] = (uint64_t)&unk_1F0F9A988;
    a1[3] = (uint64_t)&unk_1F0F9A948;
    a1[4] = MEMORY[0x1E4FBC860];
    a1[5] = v5;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B698E11C()
{
  sub_1B6E328C8();
  sub_1B6E31948();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E8DAE0;
  sub_1B698CC4C(v0 | 0x1000000000000000);
  swift_release();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  return 0;
}

uint64_t sub_1B698E24C()
{
  return type metadata accessor for RandomPositionInsideSphereNode(0);
}

uint64_t type metadata accessor for RandomPositionInsideSphereNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD31C0);
}

unint64_t sub_1B698E278()
{
  return 0xD000000000000018;
}

uint64_t sub_1B698E294@<X0>(uint64_t *a1@<X8>)
{
  sub_1B68805E0(0, (unint64_t *)&qword_1E9DD1D50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x8000000000000038;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v4 + 16) = v5 | 0x1000000000000000;
  *(void *)(v2 + 40) = v4 | 0x6000000000000000;
  sub_1B68805E0(0, &qword_1E9DD1998);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 64) = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v6 + 16) = xmmword_1B6E76B30;
  *(_OWORD *)(v6 + 32) = xmmword_1B6E8DB00;
  sub_1B698F44C();
  uint64_t v8 = v7;
  v15[3] = v7;
  v15[0] = swift_allocObject();
  *(_OWORD *)(v15[0] + 16) = xmmword_1B6E4F540;
  sub_1B62C14BC(v15, v8);
  uint64_t DynamicType = swift_getDynamicType();
  unint64_t v10 = sub_1B69B1CC4(DynamicType);
  if ((~v10 & 0xF000000000000007) != 0)
  {
    unint64_t v11 = v10;
    sub_1B62CAAD8((uint64_t)v15, v6 + 80);
    *(void *)(v6 + 72) = v11;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1B6E77050;
    uint64_t v13 = swift_allocObject();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B6E8DAE0;
    *(void *)(v13 + 16) = result | 0x1000000000000000;
    *(void *)(v12 + 32) = v13 | 0x6000000000000000;
    *a1 = v2;
    a1[1] = v12;
    a1[2] = (uint64_t)&unk_1F0F995F8;
    a1[3] = (uint64_t)&unk_1F0F995B8;
    a1[4] = MEMORY[0x1E4FBC860];
    a1[5] = v6;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

unint64_t sub_1B698E554(char a1)
{
  if (a1)
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    unint64_t v1 = 0x7325202A20302E32;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    unint64_t v1 = 0xD000000000000010;
  }
  unint64_t v4 = v1;
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E8DAE0;
  sub_1B698CC4C(v2 | 0x1000000000000000);
  swift_release();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return v4;
}

uint64_t sub_1B698E674()
{
  return type metadata accessor for RandomPositionInsideCubeNode(0);
}

uint64_t type metadata accessor for RandomPositionInsideCubeNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD31D0);
}

unint64_t sub_1B698E69C()
{
  return 0xD000000000000010;
}

uint64_t sub_1B698E6B8@<X0>(uint64_t *a1@<X8>)
{
  sub_1B68805E0(0, (unint64_t *)&qword_1E9DD1D50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v3 + 16) = v4 | 0x1000000000000000;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000050;
  *(void *)(v5 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v5;
  a1[2] = (uint64_t)&unk_1F0F83470;
  a1[3] = (uint64_t)&unk_1F0F83440;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  a1[4] = MEMORY[0x1E4FBC860];
  a1[5] = v7;
  return result;
}

unint64_t sub_1B698E7DC()
{
  return 0xD000000000000014;
}

uint64_t sub_1B698E7F8()
{
  return type metadata accessor for PerlinNoiseFloatNode(0);
}

uint64_t type metadata accessor for PerlinNoiseFloatNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD31E0);
}

unint64_t sub_1B698E820()
{
  return 0xD000000000000011;
}

double sub_1B698E83C@<D0>(uint64_t *a1@<X8>)
{
  sub_1B68805E0(0, (unint64_t *)&qword_1E9DD1D50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v3 + 16) = v4 | 0x1000000000000000;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v5 + 16) = v6 | 0x1000000000000000;
  *(void *)(v2 + 40) = v5 | 0x6000000000000000;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B6E77050;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v9 + 16) = xmmword_1B6E8F480;
  *(void *)(v8 + 16) = v9 | 0x1000000000000000;
  *(void *)(v7 + 32) = v8 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v7;
  a1[2] = (uint64_t)&unk_1F0F8A438;
  a1[3] = (uint64_t)&unk_1F0F8A3F8;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  a1[4] = MEMORY[0x1E4FBC860];
  a1[5] = v11;
  return result;
}

unint64_t sub_1B698E9C0()
{
  return 0xD000000000000018;
}

uint64_t sub_1B698E9DC()
{
  return type metadata accessor for PerlinNoiseFloat2Node(0);
}

uint64_t type metadata accessor for PerlinNoiseFloat2Node(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD31F0);
}

unint64_t sub_1B698EA04()
{
  return 0xD000000000000011;
}

__n128 sub_1B698EA20@<Q0>(uint64_t *a1@<X8>)
{
  sub_1B68805E0(0, (unint64_t *)&qword_1E9DD1D50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77D10;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v3 + 16) = v4 | 0x1000000000000000;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v5 + 16) = v6 | 0x1000000000000000;
  *(void *)(v2 + 40) = v5 | 0x6000000000000000;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v7 + 16) = v8 | 0x1000000000000000;
  *(void *)(v2 + 48) = v7 | 0x6000000000000000;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B6E77050;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = swift_allocObject();
  __n128 result = (__n128)xmmword_1B6E8DAE0;
  *(_OWORD *)(v11 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v10 + 16) = v11 | 0x1000000000000000;
  *(void *)(v9 + 32) = v10 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v9;
  a1[2] = (uint64_t)&unk_1F0F8A4B8;
  a1[3] = (uint64_t)&unk_1F0F8A468;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  a1[4] = MEMORY[0x1E4FBC860];
  a1[5] = v13;
  return result;
}

unint64_t sub_1B698EBDC()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B698EBF8()
{
  return type metadata accessor for PerlinNoiseFloat3Node(0);
}

uint64_t type metadata accessor for PerlinNoiseFloat3Node(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3200);
}

unint64_t sub_1B698EC20()
{
  return 0xD000000000000011;
}

double sub_1B698EC3C@<D0>(uint64_t *a1@<X8>)
{
  sub_1B68805E0(0, (unint64_t *)&qword_1E9DD1D50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E85730;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v3 + 16) = v4 | 0x1000000000000000;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v5 + 16) = v6 | 0x1000000000000000;
  *(void *)(v2 + 40) = v5 | 0x6000000000000000;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v7 + 16) = v8 | 0x1000000000000000;
  *(void *)(v2 + 48) = v7 | 0x6000000000000000;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v9 + 16) = v10 | 0x1000000000000000;
  *(void *)(v2 + 56) = v9 | 0x6000000000000000;
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B6E77050;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = swift_allocObject();
  *(void *)&double result = 4;
  *(_OWORD *)(v13 + 16) = xmmword_1B6E8DAD0;
  *(void *)(v12 + 16) = v13 | 0x1000000000000000;
  *(void *)(v11 + 32) = v12 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v11;
  a1[2] = (uint64_t)&unk_1F0F8A548;
  a1[3] = (uint64_t)&unk_1F0F8A4E8;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  a1[4] = MEMORY[0x1E4FBC860];
  a1[5] = v15;
  return result;
}

unint64_t sub_1B698EE38()
{
  return 0xD000000000000020;
}

uint64_t sub_1B698EE54()
{
  return type metadata accessor for PerlinNoiseFloat4Node(0);
}

uint64_t type metadata accessor for PerlinNoiseFloat4Node(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3210);
}

uint64_t sub_1B698EE7C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B698EE8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  float v38 = a5;
  sub_1B62B5820();
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for GraphError();
  MEMORY[0x1F4188790](v13, v14);
  unint64_t v16 = (uint64_t *)((char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void *)(a1 + 8);
  unint64_t v18 = *(__objc2_class ***)(v17 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
  type metadata accessor for RandomTypedNode(0);
  if (!swift_dynamicCastClass()
    && *v18 != _TtC3VFX30RandomPositionInsideSphereNode
    && *v18 != _TtC3VFX28RandomPositionInsideCubeNode)
  {
LABEL_13:
    *float v38 = v17;
    return swift_retain();
  }
  if ((a3 & 1) == 0)
  {
    uint64_t v20 = *a4;
    if (!*a4)
    {
      type metadata accessor for RandomSeedNode(0);
      unint64_t v21 = (void *)swift_allocObject();
      *(void *)((char *)v21 + OBJC_IVAR____TtC3VFX14RandomSeedNode_entity) = a2;
      uint64_t v22 = MEMORY[0x1E4FBC860];
      v21[2] = MEMORY[0x1E4FBC860];
      v21[3] = 0;
      v21[4] = 0;
      sub_1B6E31108();
      uint64_t v23 = sub_1B6E31118();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v12, 1, 1, v23);
      type metadata accessor for AuthoringNode();
      swift_allocObject();
      uint64_t v20 = sub_1B6CE3580((uint64_t)v21, v22, (uint64_t)v12, 0, 0xF000000000000000);
      swift_release();
    }
    *a4 = v20;
    swift_retain();
    swift_release();
    uint64_t v24 = *a4;
    uint64_t v25 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
    char v26 = *(void **)(v17 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v17 + v25) = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v26 = sub_1B6C16864(v26);
      *(void *)(v17 + v25) = v26;
    }
    v26[4] = v24;
    v26[5] = 0;
    swift_release();
    goto LABEL_13;
  }
  sub_1B683DB30();
  swift_allocError();
  uint64_t v30 = v29;
  *unint64_t v16 = v17;
  uint64_t v31 = (char *)v16 + v13[5];
  uint64_t v32 = v17 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  uint64_t v33 = sub_1B6E31118();
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  float32x4_t v35 = (char *)v16 + v13[6];
  *(void *)float32x4_t v35 = 2;
  v35[8] = -96;
  BOOL v36 = (void *)((char *)v16 + v13[7]);
  *BOOL v36 = 0xD000000000000011;
  v36[1] = 0x80000001B6F40080;
  sub_1B683DB88((uint64_t)v16, v30);
  swift_retain();
  return swift_willThrow();
}

unint64_t sub_1B698F244()
{
  unint64_t result = qword_1E9DD3220;
  if (!qword_1E9DD3220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3220);
  }
  return result;
}

uint64_t sub_1B698F29C()
{
  return 0;
}

uint64_t sub_1B698F3DC()
{
  sub_1B678FC34(*(void *)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B698F414()
{
  sub_1B678FC34(*(void *)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1B698F44C()
{
  if (!qword_1EB980EB0)
  {
    sub_1B6645830();
    unint64_t v0 = sub_1B6E338B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980EB0);
    }
  }
}

uint64_t sub_1B698F4A8()
{
  return MEMORY[0x1F4186498](v0, 32, 15);
}

unint64_t sub_1B698F4B8()
{
  unint64_t result = qword_1E9DD3228;
  if (!qword_1E9DD3228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3228);
  }
  return result;
}

uint64_t sub_1B698F50C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1B698EE8C(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), *(uint64_t **)(v2 + 32), a2);
}

uint64_t sub_1B698F530(uint64_t result)
{
  *(_DWORD *)(v1 + 20) = result;
  return result;
}

double sub_1B698F538@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1B6E98660;
  *(void *)(a1 + 16) = 0xFF00000000;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

double sub_1B698F554@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B6990B58(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = *(_OWORD *)v5;
    double result = *(double *)&v5[9];
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v5[9];
  }
  return result;
}

uint64_t sub_1B698F598(void *a1)
{
  sub_1B698B528(0, &qword_1E9DD1BC0, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = &v11[-v8];
  *(_OWORD *)uint64_t v12 = *v1;
  *(_OWORD *)&v12[9] = *(_OWORD *)((char *)v1 + 9);
  uint64_t result = sub_1B6891CB4(a1, (uint64_t)&v11[-v8]);
  if (!v2)
  {
    v11[15] = 10;
    sub_1B6E32F58();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

double sub_1B698F6D0()
{
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1EB997A18;
  int v4 = 0;
  char v5 = 2;
  uint64_t v6 = 0;
  char v7 = 2;
  uint64_t v8 = 0;
  swift_retain();
  sub_1B6664100(1, 1, 1, (uint64_t)v1);
  swift_release();
  double result = *(double *)v1;
  xmmword_1E9E49498 = v1[0];
  unk_1E9E494A8 = v1[1];
  qword_1E9E494B8 = v2;
  return result;
}

uint64_t *sub_1B698F788(uint64_t a1, uint64_t a2)
{
  float v5 = *(float *)(v2 + 160);
  if (qword_1E9DCC520 != -1) {
    swift_once();
  }
  v54[0] = xmmword_1E9E49498;
  v54[1] = unk_1E9E494A8;
  uint64_t v55 = qword_1E9E494B8;
  uint64_t v6 = a2 & 0xFFFFFFFFFFLL;
  sub_1B62C9DA8(a1, (uint64_t)v54, a2 & 0xFFFFFFFFFFLL, v40);
  double result = (uint64_t *)sub_1B62CA210((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v41[0])
  {
    long long v48 = v41[0];
    long long v49 = v41[1];
    uint64_t v50 = v42;
    if (v47 >= 1)
    {
      uint64_t v33 = v44;
      if (v44)
      {
        uint64_t v31 = v43;
        uint64_t v8 = v46[4];
        int i = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        long long v39 = v46;
        uint64_t v28 = v46 + 8;
        uint64_t v29 = (uint64_t)(v46 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v10 = 0;
        int v30 = i;
        uint64_t v32 = v8;
        uint64_t v27 = v2;
        do
        {
          uint64_t v11 = (unsigned int *)(v31 + 48 * v10);
          uint64_t v35 = *v11;
          uint64_t v12 = *((void *)v11 + 3);
          uint64_t v14 = *((void *)v11 + 4);
          uint64_t v13 = *((void *)v11 + 5);
          BOOL v36 = (uint64_t *)*((void *)v11 + 2);
          uint64_t v37 = v10;
          uint64_t v34 = v11[1];
          if (i)
          {
            uint64_t v15 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v8);
          sub_1B62CA210(v29, (uint64_t)v53, &qword_1EB97DE20);
          uint64_t v16 = v39[4];
          uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v13 + 40) + 16) + 32) + 16) + 1;
          uint64_t v18 = v13;
          swift_retain();
          v39[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v39[7] = v17;
          v28[1] = 0;
          v28[2] = 0;
          *uint64_t v28 = 0;
          swift_release();
          uint64_t v19 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1F0F8D908, v36, v12, v14, (uint64_t)v39);
          uint64_t v20 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v36, v12, v14, (uint64_t)v39);
          uint64_t v38 = v18;
          uint64_t v21 = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v36, v12, v14, (uint64_t)v39);
          uint64_t v22 = (float32x2_t *)v21;
          if (v36)
          {
            for (int i = v30; v14; --v14)
            {
              sub_1B6990D50(v19, v20, v22, v27, v6, a1, v5);
              v22 += 8;
              v20 += 8;
              uint64_t v19 = (float32x2_t *)((char *)v19 + 28);
            }
          }
          else
          {
            int i = v30;
            if (v35 != v34)
            {
              uint64_t v23 = v34 - v35;
              uint64_t v24 = (float32x2_t *)(v21 + (v35 << 6));
              uint64_t v25 = &v20[8 * v35];
              char v26 = (float32x2_t *)((char *)v19 + 28 * v35);
              do
              {
                sub_1B6990D50(v26, v25, v24, v27, v6, a1, v5);
                v24 += 8;
                v25 += 8;
                char v26 = (float32x2_t *)((char *)v26 + 28);
                --v23;
              }
              while (v23);
            }
          }
          v51[0] = v48;
          v51[1] = v49;
          uint64_t v52 = v50;
          sub_1B6345178(v39, (unsigned __int16 **)v51, (uint64_t)v53);
          sub_1B634507C((char *)v38);
          uint64_t v8 = v32;
          ecs_stack_allocator_pop_snapshot(v32);
          if (i)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 376));
          }
          swift_release();
          uint64_t v10 = v37 + 1;
        }
        while (v37 + 1 != v33);
        sub_1B632F170(v40);
      }
    }
    return sub_1B632F170(v40);
  }
  return result;
}

uint64_t sub_1B698FBF0(long long *a1, long long *a2, uint64_t a3, unint64_t a4, uint64_t a5, float32x4_t a6, __n128 a7, float a8, float a9)
{
  uint64_t v12 = (uint64_t *)*((void *)a1 + 11);
  uint64_t v13 = *((void *)a1 + 12);
  uint64_t v14 = *((void *)a1 + 13);
  uint64_t v15 = *((void *)a1 + 2);
  uint64_t v77 = *((void *)a1 + 1);
  uint64_t v16 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v12, v13, v14, v15);
  uint64_t v17 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v12, v13, v14, v15);
  uint64_t v71 = sub_1B67A819C();
  char v73 = v18;
  uint64_t v82 = sub_1B63459F8();
  char v20 = v19;
  long long v85 = *a2;
  __n128 v89 = a7;
  long long v99 = a1[6];
  long long v21 = a1[4];
  long long v98 = a1[5];
  long long v97 = v21;
  long long v22 = a1[2];
  long long v96 = a1[3];
  long long v23 = a1[1];
  long long v93 = *a1;
  uint64_t v87 = &type metadata for CollisionProperties;
  uint64_t v88 = &off_1F0F7C560;
  uint64_t v86 = *((void *)a2 + 2);
  uint64_t v24 = *(void *)(a3 + 16);
  long long v94 = v23;
  long long v95 = v22;
  uint64_t v26 = *((void *)a1 + 6);
  uint64_t v25 = *((void *)a1 + 7);
  a7.n128_u64[0] = *(void *)(v15 + 32);
  swift_retain();
  uint64_t v100 = ecs_stack_allocator_allocate(a7.n128_i64[0], 8 * (v25 - v26), 8);
  uint64_t v101 = v25 - v26;
  uint64_t v102 = 0;
  sub_1B62C1550((uint64_t)&v85, (uint64_t)v90);
  float v91 = a9;
  v90[5] = v24;
  sub_1B6345398(*(void *)(v77 + 40), (uint64_t)&type metadata for Anchored, &v84);
  char v92 = v84;
  swift_retain();
  uint64_t v27 = ecs_stack_allocator_allocate(a7.n128_i64[0], 80 * (v25 - v26), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v85);
  float32x4_t v32 = a6;
  uint64_t v103 = v27;
  uint64_t v104 = v25 - v26;
  uint64_t v105 = 0;
  if (v25 != v26)
  {
    float v34 = *(float *)(a3 + 80) * 0.5;
    uint64_t v35 = 16 * v26;
    do
    {
      __int32 v42 = v31.i32[3];
      if (v20)
      {
        __asm { FMOV            V4.4S, #1.0 }
        HIDWORD(_Q4) = HIDWORD(v30);
        long long v30 = _Q4;
      }
      else
      {
        _Q4 = *(_OWORD *)(v82 + 16 * v26);
      }
      float32x4_t v48 = vmulq_n_f32(*(float32x4_t *)(v17 + 16 * v26), a9);
      float32x4_t v49 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v26), v48);
      float32x4_t v31 = v49;
      v31.i32[3] = v42;
      float32x4_t v50 = vmulq_f32(v48, v48);
      float v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0];
      if (v51 >= 0.00000011921)
      {
        float32x4_t v52 = vsubq_f32(v31, v32);
        float v53 = v34 * fmaxf(fmaxf(*(float *)&_Q4, *((float *)&_Q4 + 2)), *((float *)&_Q4 + 1));
        if (*(unsigned char *)(a5 + 24)) {
          float v53 = -v53;
        }
        float32x4_t v54 = vmulq_f32(v48, v52);
        LODWORD(v55) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).u32[0];
        float32x4_t v56 = vmulq_f32(v52, v52);
        float v57 = vmlas_n_f32(-(float)(v51* (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0]- (float)((float)(v53 + a8) * (float)(v53 + a8)))), v55, v55);
        if (v57 >= 0.0)
        {
          float v58 = sqrtf(v57);
          if (!*(unsigned char *)(a5 + 24)) {
            float v58 = -v58;
          }
          float v59 = (float)(v58 - v55) / v51;
          if (v59 >= 0.0 && v59 <= 1.0)
          {
            float32x4_t v60 = vmlaq_n_f32(v49, v48, v59);
            v60.i32[3] = v29;
            if (*(unsigned char *)(a5 + 24)) {
              float v61 = -1.0;
            }
            else {
              float v61 = 1.0;
            }
            float32x4_t v62 = vsubq_f32(v60, v32);
            int32x4_t v63 = (int32x4_t)vmulq_f32(v62, v62);
            v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1))).u32[0];
            float32x2_t v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
            float32x2_t v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
            float32x4_t v66 = vmulq_n_f32(vmulq_n_f32(v62, vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).f32[0]), v61);
            float32x4_t v67 = v66;
            v67.i32[3] = v28;
            __int32 v78 = v31.i32[3];
            long long v80 = v30;
            __int32 v74 = v28;
            __int32 v76 = v60.i32[3];
            if (*(unsigned char *)(a5 + 24))
            {
              if (v73)
              {
                uint64_t v37 = 0;
                uint64_t v38 = 0;
              }
              else
              {
                BOOL v36 = (uint64_t *)(v71 + 16 * v26);
                uint64_t v37 = *v36;
                uint64_t v38 = v36[1];
              }
              float32x4_t v39 = vaddq_f32(v60, vmulq_f32(v66, (float32x4_t)vdupq_n_s32(0x3C23D70Au)));
              v39.i32[3] = v70;
              uint64_t v40 = v26;
              float32x4_t v41 = v39;
            }
            else
            {
              if (v73)
              {
                uint64_t v37 = 0;
                uint64_t v38 = 0;
              }
              else
              {
                uint64_t v68 = (uint64_t *)(v71 + 16 * v26);
                uint64_t v37 = *v68;
                uint64_t v38 = v68[1];
              }
              uint64_t v40 = v26;
              float32x4_t v41 = v60;
            }
            sub_1B6C323C0(v40, (float32x4_t *)(v16 + v35), (float32x4_t *)(v17 + v35), v37, v38, v73 & 1, v41, v67, v59);
            __int32 v28 = v74;
            __int32 v29 = v76;
            long long v30 = v80;
            float32x4_t v32 = a6;
            v31.i32[3] = v78;
          }
        }
      }
      ++v26;
      v35 += 16;
    }
    while (v25 != v26);
  }
  sub_1B699005C((uint64_t)&v89, a4 | ((HIDWORD(a4) & 1) << 32));
  return sub_1B6894710((uint64_t)&v89);
}

uint64_t sub_1B699005C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_1B6894764(a1, (uint64_t)v9);
  if (v9[28])
  {
    MEMORY[0x1F4188790](v3, v9[7]);
    v8[2] = v9;
    sub_1B6B2150C(0, v4, 1, a2 | ((HIDWORD(a2) & 1) << 32), v5, (void (*)(void *))sub_1B68947C0, (uint64_t)v8, v6);
    ecs_stack_allocator_deallocate(*(void **)(v9[11] + 32), v9[26], 80 * v9[27]);
  }
  sub_1B6C33184(v9);
  return sub_1B6894710((uint64_t)v9);
}

uint64_t *sub_1B6990138(int a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  if (qword_1E9DCC520 != -1) {
    swift_once();
  }
  v149[0] = xmmword_1E9E49498;
  v149[1] = unk_1E9E494A8;
  uint64_t v150 = qword_1E9E494B8;
  long long v16 = *(_OWORD *)(a3 + 96);
  v146[2] = *(_OWORD *)(a3 + 80);
  v146[3] = v16;
  long long v17 = *(_OWORD *)(a3 + 128);
  v146[4] = *(_OWORD *)(a3 + 112);
  v146[5] = v17;
  long long v18 = *(_OWORD *)(a3 + 32);
  long long v144 = *(_OWORD *)(a3 + 16);
  long long v145 = v18;
  long long v19 = *(_OWORD *)(a3 + 64);
  v146[0] = *(_OWORD *)(a3 + 48);
  v146[1] = v19;
  sub_1B62EA708((uint64_t)v146 + 8, (uint64_t)v147);
  sub_1B62EA708((uint64_t)v147, (uint64_t)&v151);
  if (v152) {
    uint64_t v20 = 0x200000000;
  }
  else {
    uint64_t v20 = v151;
  }
  sub_1B62C9DA8(a2, (uint64_t)v149, v20, v131);
  double result = (uint64_t *)sub_1B62CA210((uint64_t)v131, (uint64_t)v132, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v132[0])
  {
    long long v139 = v132[0];
    long long v140 = v132[1];
    uint64_t v141 = v133;
    if (v138 >= 1)
    {
      uint64_t v90 = v135;
      if (v135)
      {
        uint64_t v89 = v134;
        int v22 = *(unsigned __int8 *)(v136 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v23 = v137[4];
        long long v93 = v137;
        long long v85 = v137 + 8;
        uint64_t v86 = (uint64_t)(v137 + 6);
        float v24 = a7 * 0.5;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v25 = 0;
        int v96 = a1;
        int v88 = v22;
        uint64_t v87 = v23;
        do
        {
          uint64_t v26 = (unsigned int *)(v89 + 48 * v25);
          uint64_t v27 = (uint64_t *)*((void *)v26 + 2);
          uint64_t v28 = *((void *)v26 + 3);
          uint64_t v30 = *((void *)v26 + 4);
          uint64_t v29 = *((void *)v26 + 5);
          uint64_t v92 = v25;
          uint64_t v119 = *v26;
          uint64_t v114 = v26[1];
          if (v22)
          {
            float32x4_t v31 = *(os_unfair_lock_s **)(v29 + 376);
            swift_retain();
            os_unfair_lock_lock(v31);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v23);
          sub_1B62CA210(v86, (uint64_t)v148, &qword_1EB97DE20);
          uint64_t v32 = v93[4];
          uint64_t v33 = v29;
          uint64_t v34 = *(void *)(*(void *)(*(void *)(*(void *)(v29 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v93[6] = ecs_stack_allocator_allocate(v32, 48 * v34, 8);
          v93[7] = v34;
          v85[1] = 0;
          v85[2] = 0;
          *long long v85 = 0;
          swift_release();
          uint64_t v35 = sub_1B62C9024((uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1F0F8D908, v27, v28, v30, (uint64_t)v93);
          uint64_t v36 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v27, v28, v30, (uint64_t)v93);
          uint64_t v91 = v33;
          uint64_t v37 = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v27, v28, v30, (uint64_t)v93);
          if (v27)
          {
            if (v30)
            {
              uint64_t v38 = v35 + 12;
              float32x4_t v39 = (float32x2_t *)(v37 + 32);
              uint64_t v40 = (float32x2_t *)(v36 + 32);
              int v41 = v96;
              do
              {
                if ((*(_DWORD *)(v38 + 8) & v41) != 0)
                {
                  float v42 = *(float *)(v38 - 8);
                  float v43 = *(float *)(v38 - 4);
                  float v44 = *(float *)v38;
                  float32x4_t v115 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v39[-4].f32)), a9, v39[-4], 1), a10, *(float32x4_t *)v39[-4].f32, 2), a11, *(float32x4_t *)v39[-4].f32, 3);
                  float32x4_t v108 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v39[-2].f32)), a9, v39[-2], 1), a10, *(float32x4_t *)v39[-2].f32, 2), a11, *(float32x4_t *)v39[-2].f32, 3);
                  float32x4_t v103 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v39[2].f32)), a9, v39[2], 1), a10, *(float32x4_t *)v39[2].f32, 2), a11, *(float32x4_t *)v39[2].f32, 3);
                  float32x4_t v105 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v39->f32)), a9, *v39, 1), a10, *(float32x4_t *)v39->f32, 2), a11, *(float32x4_t *)v39->f32, 3);
                  __n128 v120 = sub_1B684B004((float32x4_t)xmmword_1B6E8B620, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v40[-4].f32)), a9, v40[-4], 1), a10, *(float32x4_t *)v40[-4].f32, 2), a11, *(float32x4_t *)v40[-4].f32, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v40[-2].f32)), a9, v40[-2], 1), a10, *(float32x4_t *)v40[-2].f32, 2), a11, *(float32x4_t *)v40[-2].f32, 3),
                           vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v40->f32)), a9, *v40, 1), a10, *(float32x4_t *)v40->f32, 2), a11, *(float32x4_t *)v40->f32, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v40[2].f32)), a9, v40[2], 1), a10, *(float32x4_t *)v40[2].f32, 2), a11, *(float32x4_t *)v40[2].f32, 3));
                  __n128 v116 = sub_1B684B004((float32x4_t)xmmword_1B6E8B620, v115, v108, v105, v103);
                  uint64_t v45 = v144;
                  unint64_t v46 = *(void *)&v146[0];
                  float v47 = *(float *)(v144 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                  swift_retain();
                  unint64_t v48 = sub_1B6BF94C8(v46, v45);
                  if ((v48 & 0x100000000) != 0) {
                    goto LABEL_36;
                  }
                  float v49 = *(float *)&v48;
                  __n128 v50 = v120;
                  unsigned __int32 v111 = v120.n128_u32[3];
                  float32x4_t v51 = vsubq_f32((float32x4_t)v120, (float32x4_t)v116);
                  v50.n128_u32[3] = v112;
                  __n128 v121 = v50;
                  v51.i32[3] = v113.i32[3];
                  float32x4_t v113 = v51;
                  swift_release();
                  char v52 = *(unsigned char *)(v38 + 12);
                  *(float *)&uint64_t v124 = v47 * v49;
                  HIDWORD(v124) = fminf(fmaxf(v43 + a5, 0.0), 1.0);
                  *(float *)&unint64_t v125 = 1.0 - fminf(fmaxf(v44 + a6, 0.0), 1.0);
                  *(_DWORD *)((unint64_t)&v124 | 0xC) = v111;
                  __n128 v126 = v121;
                  float32x4_t v127 = v113;
                  float v128 = fminf(fmaxf(v42 + a4, 0.0), 1.0);
                  char v129 = v52;
                  float v130 = v24;
                  uint64_t v53 = *(void *)a3;
                  if (*(void *)a3)
                  {
                    uint64_t ObjectType = swift_getObjectType();
                    type metadata accessor for particle_sphere_collider_uniforms(0);
                    uint64_t v55 = ObjectType;
                    int v41 = v96;
                    sub_1B6B594A8((uint64_t)&v124, 1, v55, v56, v57, v58, v59, v60);
                  }
                  swift_retain();
                  sub_1B6786A24(a3);
                  sub_1B6BFF388(v46, v45, v53 == 0, 0, a3, 0xD000000000000018, 0x80000001B6F400A0, 0);
                  sub_1B6786A7C(a3);
                  swift_release();
                  unsigned __int32 v112 = v121.n128_u32[3];
                }
                v38 += 28;
                v39 += 8;
                v40 += 8;
                --v30;
              }
              while (v30);
            }
          }
          else if (v119 != v114)
          {
            uint64_t v61 = v114 - v119;
            uint64_t v62 = v35 + 28 * v119 + 12;
            int32x4_t v63 = (float32x2_t *)(v37 + (v119 << 6) + 32);
            float32x2_t v64 = (float32x2_t *)(v36 + (v119 << 6) + 32);
            int v65 = v96;
            do
            {
              if ((*(_DWORD *)(v62 + 8) & v65) != 0)
              {
                float v66 = *(float *)(v62 - 8);
                float v67 = *(float *)(v62 - 4);
                float v68 = *(float *)v62;
                float32x4_t v117 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v63[-4].f32)), a9, v63[-4], 1), a10, *(float32x4_t *)v63[-4].f32, 2), a11, *(float32x4_t *)v63[-4].f32, 3);
                float32x4_t v109 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v63[-2].f32)), a9, v63[-2], 1), a10, *(float32x4_t *)v63[-2].f32, 2), a11, *(float32x4_t *)v63[-2].f32, 3);
                float32x4_t v104 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v63[2].f32)), a9, v63[2], 1), a10, *(float32x4_t *)v63[2].f32, 2), a11, *(float32x4_t *)v63[2].f32, 3);
                float32x4_t v106 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v63->f32)), a9, *v63, 1), a10, *(float32x4_t *)v63->f32, 2), a11, *(float32x4_t *)v63->f32, 3);
                __n128 v122 = sub_1B684B004((float32x4_t)xmmword_1B6E8B620, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v64[-4].f32)), a9, v64[-4], 1), a10, *(float32x4_t *)v64[-4].f32, 2), a11, *(float32x4_t *)v64[-4].f32, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v64[-2].f32)), a9, v64[-2], 1), a10, *(float32x4_t *)v64[-2].f32, 2), a11, *(float32x4_t *)v64[-2].f32, 3),
                         vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v64->f32)), a9, *v64, 1), a10, *(float32x4_t *)v64->f32, 2), a11, *(float32x4_t *)v64->f32, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v64[2].f32)), a9, v64[2], 1), a10, *(float32x4_t *)v64[2].f32, 2), a11, *(float32x4_t *)v64[2].f32, 3));
                __n128 v118 = sub_1B684B004((float32x4_t)xmmword_1B6E8B620, v117, v109, v106, v104);
                uint64_t v69 = v144;
                unint64_t v70 = *(void *)&v146[0];
                float v71 = *(float *)(v144 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                swift_retain();
                unint64_t v72 = sub_1B6BF94C8(v70, v69);
                if ((v72 & 0x100000000) != 0)
                {
LABEL_36:
                  uint64_t v124 = 0;
                  unint64_t v125 = 0xE000000000000000;
                  sub_1B6E328C8();
                  sub_1B6E31948();
                  sub_1B681F698();
                  sub_1B6E31948();
                  swift_bridgeObjectRelease();
                  sub_1B6E31948();
                  sub_1B6E31948();
                  sub_1B6E31948();
                  double result = (uint64_t *)sub_1B6E32BE8();
                  __break(1u);
                  return result;
                }
                float v73 = *(float *)&v72;
                __n128 v74 = v122;
                unsigned __int32 v107 = v122.n128_u32[3];
                float32x4_t v75 = vsubq_f32((float32x4_t)v122, (float32x4_t)v118);
                v74.n128_u32[3] = v94;
                __n128 v123 = v74;
                v75.i32[3] = v95;
                float32x4_t v110 = v75;
                swift_release();
                char v76 = *(unsigned char *)(v62 + 12);
                *(float *)&uint64_t v124 = v71 * v73;
                HIDWORD(v124) = fminf(fmaxf(v67 + a5, 0.0), 1.0);
                *(float *)&unint64_t v125 = 1.0 - fminf(fmaxf(v68 + a6, 0.0), 1.0);
                *(_DWORD *)((unint64_t)&v124 | 0xC) = v107;
                __n128 v126 = v123;
                float32x4_t v127 = v110;
                float v128 = fminf(fmaxf(v66 + a4, 0.0), 1.0);
                char v129 = v76;
                float v130 = v24;
                uint64_t v77 = *(void *)a3;
                if (*(void *)a3)
                {
                  uint64_t v78 = swift_getObjectType();
                  type metadata accessor for particle_sphere_collider_uniforms(0);
                  uint64_t v79 = v78;
                  int v65 = v96;
                  sub_1B6B594A8((uint64_t)&v124, 1, v79, v80, v81, v82, v83, v84);
                }
                swift_retain();
                sub_1B6786A24(a3);
                sub_1B6BFF388(v70, v69, v77 == 0, 0, a3, 0xD000000000000018, 0x80000001B6F400A0, 0);
                sub_1B6786A7C(a3);
                swift_release();
                __int32 v95 = v110.i32[3];
                unsigned __int32 v94 = v123.n128_u32[3];
              }
              v62 += 28;
              v63 += 8;
              v64 += 8;
              --v61;
            }
            while (v61);
          }
          int v22 = v88;
          uint64_t v23 = v87;
          v142[0] = v139;
          v142[1] = v140;
          uint64_t v143 = v141;
          sub_1B6345178(v93, (unsigned __int16 **)v142, (uint64_t)v148);
          sub_1B634507C((char *)v91);
          ecs_stack_allocator_pop_snapshot(v87);
          if (v88)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v91 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v91 + 376));
          }
          swift_release();
          uint64_t v25 = v92 + 1;
        }
        while (v92 + 1 != v90);
        sub_1B632F170(v131);
      }
    }
    return sub_1B632F170(v131);
  }
  return result;
}

uint64_t sub_1B6990B58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B698B528(0, (unint64_t *)&unk_1E9DD6DA0, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v17 - v9;
  long long v17 = xmmword_1B6E98660;
  uint64_t v18 = 0xFF00000000;
  char v19 = 0;
  sub_1B6892668(a1, 0);
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1B62C14BC(a1, v12);
  if (sub_1B62B8F14(2024, v12, v13))
  {
    char v20 = 10;
    char v14 = sub_1B6E32DA8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    char v14 = v19;
  }
  int v15 = v18;
  int v16 = HIDWORD(v18);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_OWORD *)a2 = v17;
  *(_DWORD *)(a2 + 16) = v15;
  *(_DWORD *)(a2 + 20) = v16;
  *(unsigned char *)(a2 + 24) = v14 & 1;
  return result;
}

float32x2_t *sub_1B6990D50(float32x2_t *result, float32x2_t *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int v7 = *(_DWORD *)(a4 + 84) & result[2].i32[1];
  if (v7)
  {
    uint64_t v10 = a4;
    uint64_t v11 = result;
    float v12 = result[2].f32[0] + *(float *)(a4 + 80);
    float v13 = 1.0 - fminf(fmaxf(result[1].f32[1] + *(float *)(a4 + 76), 0.0), 1.0);
    float v14 = fminf(fmaxf(result[1].f32[0] + *(float *)(a4 + 72), 0.0), 1.0);
    float32x2_t v15 = vadd_f32(*result, *(float32x2_t *)(a4 + 64));
    uint64_t v16 = a5;
    BOOL v17 = (a5 & 0xFE00000000) != 0;
    if ((a5 & 0xFE00000000) != 0) {
      uint64_t v16 = 0;
    }
    uint64_t v88 = v16;
    __asm { FMOV            V4.2S, #1.0 }
    *(float32x2_t *)&long long v127 = vminnm_f32(vmaxnm_f32(v15, 0), _D4);
    *((void *)&v127 + 1) = __PAIR64__(LODWORD(v13), LODWORD(v14));
    float v128 = v12;
    int v129 = v7;
    float32x4_t v22 = *(float32x4_t *)(a4 + 96);
    float32x4_t v23 = *(float32x4_t *)(a4 + 112);
    float32x4_t v24 = *(float32x4_t *)(a4 + 128);
    float32x4_t v25 = *(float32x4_t *)(a4 + 144);
    float32x4_t v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2->f32)), v23, *a2, 1), v24, *(float32x4_t *)a2->f32, 2), v25, *(float32x4_t *)a2->f32, 3);
    float32x4_t v27 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v23, a2[2], 1), v24, *(float32x4_t *)a2[2].f32, 2), v25, *(float32x4_t *)a2[2].f32, 3);
    float32x4_t v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v23, a2[4], 1), v24, *(float32x4_t *)a2[4].f32, 2), v25, *(float32x4_t *)a2[4].f32, 3);
    float32x4_t v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v23, a2[6], 1), v24, *(float32x4_t *)a2[6].f32, 2), v25, *(float32x4_t *)a2[6].f32, 3);
    float32x4_t v105 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3->f32)), v23, *a3, 1), v24, *(float32x4_t *)a3->f32, 2), v25, *(float32x4_t *)a3->f32, 3);
    float32x4_t v102 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3[2].f32)), v23, a3[2], 1), v24, *(float32x4_t *)a3[2].f32, 2), v25, *(float32x4_t *)a3[2].f32, 3);
    float32x4_t v98 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3[6].f32)), v23, a3[6], 1), v24, *(float32x4_t *)a3[6].f32, 2), v25, *(float32x4_t *)a3[6].f32, 3);
    float32x4_t v100 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3[4].f32)), v23, a3[4], 1), v24, *(float32x4_t *)a3[4].f32, 2), v25, *(float32x4_t *)a3[4].f32, 3);
    if (_ZF) {
      BOOL v17 = 1;
    }
    BOOL v87 = v17;
    __n128 v89 = sub_1B684B004((float32x4_t)xmmword_1B6E8B620, v26, v27, v28, v29);
    __n128 v106 = sub_1B684B004((float32x4_t)xmmword_1B6E8B620, v105, v102, v100, v98);
    v130[0] = *(_OWORD *)(v10 + 24);
    v130[1] = *(_OWORD *)(v10 + 40);
    uint64_t v131 = *(void *)(v10 + 56);
    sub_1B62C9DA8(a6, (uint64_t)v130, 0x200000000, v108);
    uint64_t result = (float32x2_t *)sub_1B62CA210((uint64_t)v108, (uint64_t)v109, (unint64_t *)&qword_1EB97DC50);
    uint64_t v101 = (unsigned __int16 *)v109[0];
    if (v109[0])
    {
      uint64_t v85 = v113;
      uint64_t v86 = (uint64_t)v11;
      if (v113 >= 1)
      {
        uint64_t v84 = v110;
        if (v110)
        {
          uint64_t v30 = 0;
          __n128 v82 = (__n128)vsubq_f32((float32x4_t)v89, (float32x4_t)v106);
          uint64_t v81 = v109[5];
          uint64_t v31 = v112[4];
          uint64_t v79 = v31;
          uint64_t v80 = v111;
          int v97 = *(unsigned __int8 *)(v111 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          uint64_t v78 = v112 + 8;
          uint64_t v99 = v109[0] + 41;
          uint64_t v83 = v10;
          unsigned __int32 v107 = v112;
          do
          {
            uint64_t v32 = (unsigned int *)(v81 + 48 * v30);
            uint64_t v33 = *v32;
            uint64_t v34 = v32[1];
            uint64_t v35 = v32[2];
            uint64_t v37 = *((void *)v32 + 4);
            uint64_t v36 = *((void *)v32 + 5);
            uint64_t v95 = v30;
            uint64_t v96 = *((void *)v32 + 3);
            uint64_t v103 = *((void *)v32 + 2);
            if (v97)
            {
              uint64_t v38 = *(os_unfair_lock_s **)(v36 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v38);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v36 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v31);
            float32x4_t v39 = v107;
            uint64_t v90 = v107[7];
            uint64_t v91 = v107[6];
            uint64_t v93 = v107[9];
            uint64_t v94 = v107[8];
            uint64_t v132 = v107[10];
            uint64_t v40 = v107[4];
            uint64_t v41 = *(void *)(*(void *)(*(void *)(*(void *)(v36 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v107[6] = ecs_stack_allocator_allocate(v40, 48 * v41, 8);
            v107[7] = v41;
            v78[1] = 0;
            v78[2] = 0;
            *uint64_t v78 = 0;
            swift_release();
            *(void *)&long long v114 = v80;
            *((void *)&v114 + 1) = v36;
            uint64_t v92 = v36;
            float32x4_t v115 = v107;
            uint64_t v116 = v35;
            uint64_t v117 = (v34 - v33 + v35);
            uint64_t v118 = v85;
            uint64_t v119 = v33;
            uint64_t v120 = v34;
            uint64_t v121 = 0;
            uint64_t v122 = 0;
            char v123 = 1;
            uint64_t v124 = v103;
            uint64_t v125 = v96;
            uint64_t v126 = v37;
            sub_1B698FBF0(&v114, &v127, v10, v88 | ((unint64_t)v87 << 32), v86, (float32x4_t)v89, v82, v89.n128_f32[3], a7);
            unint64_t v42 = v107[6];
            uint64_t v104 = v107[8];
            if (!v104)
            {
              uint64_t v69 = v107[7];
              unint64_t v70 = (void *)v107[4];
              uint64_t v72 = v94;
              uint64_t v71 = v95;
              uint64_t v76 = v91;
              uint64_t v75 = v92;
              uint64_t v77 = v90;
              uint64_t v73 = v93;
              goto LABEL_53;
            }
            for (uint64_t i = 0; i != v104; ++i)
            {
              unint64_t v45 = v42;
              unint64_t v46 = (uint64_t *)(v42 + 48 * i);
              uint64_t v47 = *v46;
              unint64_t v48 = (void (*)(uint64_t))v46[4];
              uint64_t v49 = v39[9];
              if (v49) {
                _ZF = v47 == v49;
              }
              else {
                _ZF = 0;
              }
              if (_ZF || !v101[11]) {
                goto LABEL_17;
              }
              unint64_t v51 = v101[9];
              char v52 = (void *)(v99 + v101[8]);
              uint64_t v53 = v46[2];
              float32x4_t v54 = v52;
              unint64_t v55 = v51 >> 4;
              uint64_t v56 = v99;
              if (v51 >= 0x10)
              {
                while (*v54 != v47)
                {
                  ++v56;
                  v54 += 2;
                  if (!--v55) {
                    goto LABEL_32;
                  }
                }
                unsigned int v57 = *(unsigned __int8 *)(v56 + v101[10]);
                BOOL v58 = v57 > 5;
                int v59 = (1 << v57) & 0x23;
                if (v58 || v59 == 0)
                {
LABEL_17:
                  uint64_t v44 = swift_retain();
                  v48(v44);
                  swift_release();
                  goto LABEL_18;
                }
              }
LABEL_32:
              if (swift_conformsToProtocol2()) {
                uint64_t v61 = v53;
              }
              else {
                uint64_t v61 = 0;
              }
              if (v61)
              {
                if (v51 < 0x10) {
                  goto LABEL_17;
                }
                uint64_t v62 = v52;
                unint64_t v63 = v51 >> 4;
                uint64_t v64 = v99;
                while (*v62 != v61)
                {
                  ++v64;
                  v62 += 2;
                  if (!--v63) {
                    goto LABEL_45;
                  }
                }
                unsigned int v65 = *(unsigned __int8 *)(v64 + v101[10]);
                BOOL v58 = v65 > 5;
                int v66 = (1 << v65) & 0x23;
                if (v58 || v66 == 0) {
                  goto LABEL_17;
                }
LABEL_45:
                uint64_t v68 = 16 * (v51 >> 4);
                while (*v52 != v61)
                {
                  v52 += 2;
                  v68 -= 16;
                  if (!v68) {
                    goto LABEL_17;
                  }
                }
              }
LABEL_18:
              float32x4_t v39 = v107;
              unint64_t v42 = v45;
            }
            uint64_t v69 = v107[7];
            unint64_t v42 = v107[6];
            unint64_t v70 = (void *)v107[4];
            uint64_t v72 = v94;
            uint64_t v71 = v95;
            uint64_t v73 = v93;
            if ((uint64_t)v107[8] >= 1)
            {
              unint64_t v74 = v107[6];
              swift_arrayDestroy();
              unint64_t v42 = v74;
            }
            uint64_t v76 = v91;
            uint64_t v75 = v92;
            uint64_t v77 = v90;
LABEL_53:
            ecs_stack_allocator_deallocate(v70, v42, 48 * v69);
            v39[6] = v76;
            v39[7] = v77;
            uint64_t v39[8] = v72;
            v39[9] = v73;
            v39[10] = v132;
            sub_1B634507C((char *)v75);
            uint64_t v31 = v79;
            ecs_stack_allocator_pop_snapshot(v79);
            if (v97)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v75 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v75 + 376));
            }
            swift_release();
            uint64_t v30 = v71 + 1;
            uint64_t v10 = v83;
          }
          while (v30 != v84);
        }
      }
      return (float32x2_t *)sub_1B632F170(v108);
    }
  }
  return result;
}

__n128 initializeWithCopy for ParticleSphereCollider(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSphereCollider()
{
  return &type metadata for ParticleSphereCollider;
}

void *sub_1B69913F8(uint64_t a1, uint64_t *a2)
{
  float v146 = a2;
  v147[9] = *(id *)MEMORY[0x1E4F143B8];
  sub_1B638C09C(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  int v129 = (void (**)(char *, uint64_t, uint64_t))((char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v124 - v8;
  MEMORY[0x1F4188790](v10, v11);
  long long v140 = (char *)&v124 - v12;
  uint64_t v13 = sub_1B6E30F48();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13, v15);
  uint64_t v138 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v125 = (char *)&v124 - v19;
  double v22 = MEMORY[0x1F4188790](v20, v21);
  float32x4_t v24 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v124 - v23);
  uint64_t v126 = OBJC_IVAR____TtC3VFX16AssetFileManager_lock;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC3VFX16AssetFileManager_lock), sel_lock, v22);
  uint64_t v134 = sub_1B67DEEDC(MEMORY[0x1E4FBC860]);
  id v25 = objc_msgSend(self, sel_defaultManager);
  uint64_t v145 = a1;
  float32x4_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v128 = a1 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory;
  uint64_t v136 = v26;
  uint64_t v137 = v14 + 16;
  ((void (*)(void (**)(char *, uint64_t, uint64_t, uint64_t)))v26)(v24);
  sub_1B6E30EF8();
  uint64_t v135 = v14;
  float32x4_t v27 = *(void (**)(void (**)(char *, uint64_t, uint64_t, uint64_t), uint64_t))(v14 + 8);
  uint64_t v131 = v14 + 8;
  float v130 = v27;
  v27(v24, v13);
  float32x4_t v28 = (void *)sub_1B6E31768();
  swift_bridgeObjectRelease();
  v147[0] = 0;
  id v29 = objc_msgSend(v25, sel_contentsOfDirectoryAtPath_error_, v28, v147);

  id v30 = v147[0];
  if (v29)
  {
    uint64_t v31 = sub_1B6E31C28();
  }
  else
  {
    uint64_t v32 = v30;
    uint64_t v33 = (void *)sub_1B6E30D78();

    swift_willThrow();
    uint64_t v127 = 0;
    uint64_t v31 = MEMORY[0x1E4FBC860];
  }
  uint64_t v34 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v31 + 16);
  uint64_t v35 = &qword_1E9DD3000;
  uint64_t v141 = v13;
  if (v34)
  {
    uint64_t v36 = 0;
    uint64_t v143 = OBJC_IVAR____TtC3VFX16AssetFileManager_allReferencesWithTemporaryCopy;
    uint64_t v124 = v31;
    uint64_t v142 = v31 + 32;
    uint64_t v144 = v135 + 56;
    long long v139 = (unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48);
    uint64_t v132 = v9;
    uint64_t v133 = v34;
    while (1)
    {
      uint64_t v37 = (uint64_t *)(v142 + 16 * v36);
      uint64_t v38 = *v37;
      uint64_t v39 = v37[1];
      uint64_t v40 = *(void *)(v145 + v143);
      if (!*(void *)(v40 + 16)) {
        break;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v41 = sub_1B62B2CE0(v38, v39);
      if (v42)
      {
        uint64_t v43 = *(void *)(v40 + 56);
        uint64_t v44 = v135;
        v136(v9, v43 + *(void *)(v135 + 72) * v41, v13);
        unint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
        v45(v9, 0, 1, v13);
      }
      else
      {
        unint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v144;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v144)(v9, 1, 1, v13);
      }
      swift_bridgeObjectRelease();
      if ((*v139)(v9, 1, v13) == 1) {
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
      sub_1B699407C((uint64_t)v9, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
LABEL_7:
      if ((unsigned int (**)(uint64_t, uint64_t, uint64_t))++v36 == v34)
      {
        swift_bridgeObjectRelease();
        uint64_t v35 = &qword_1E9DD3000;
        goto LABEL_46;
      }
    }
    unint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v144;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v144)(v9, 1, 1, v13);
    swift_bridgeObjectRetain();
LABEL_14:
    sub_1B699407C((uint64_t)v9, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
    uint64_t v46 = *v146;
    if (*(void *)(*v146 + 16))
    {
      sub_1B6E33918();
      swift_bridgeObjectRetain();
      sub_1B6E318B8();
      uint64_t v47 = sub_1B6E33988();
      uint64_t v48 = -1 << *(unsigned char *)(v46 + 32);
      unint64_t v49 = v47 & ~v48;
      if ((*(void *)(v46 + 56 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49))
      {
        uint64_t v50 = *(void *)(v46 + 48);
        unint64_t v51 = (void *)(v50 + 16 * v49);
        BOOL v52 = *v51 == v38 && v51[1] == v39;
        if (v52 || (sub_1B6E334B8() & 1) != 0)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          uint64_t v53 = (uint64_t)v129;
          uint64_t v13 = v141;
          v136((char *)v129, v128, v141);
          v45((char *)v53, 0, 1, v13);
          sub_1B6E30E38();
          sub_1B699407C(v53, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
          id v54 = objc_allocWithZone(MEMORY[0x1E4F28CF0]);
          unint64_t v55 = (void *)sub_1B6E30E78();
          v147[0] = 0;
          id v56 = objc_msgSend(v54, sel_initWithURL_options_error_, v55, 0, v147, v124);

          if (!v56)
          {
            id v120 = v147[0];
            uint64_t v121 = sub_1B6E30D78();

            uint64_t v127 = v121;
            swift_willThrow();
            swift_bridgeObjectRelease();
            v130(v138, v13);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return objc_msgSend(*(id *)(v145 + v126), sel_unlock, v124);
          }
          id v57 = v147[0];
          BOOL v58 = v134;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v147[0] = v58;
          unint64_t v60 = sub_1B62B2CE0(v38, v39);
          char v62 = v61;
          uint64_t v63 = v58[2] + ((v61 & 1) == 0);
          if (v58[3] >= v63)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              sub_1B6ACFB60();
            }
          }
          else
          {
            sub_1B6ABCD5C(v63, isUniquelyReferenced_nonNull_native);
            uint64_t v64 = sub_1B62B2CE0(v38, v39);
            if ((v62 & 1) != (v65 & 1))
            {
LABEL_101:
              __n128 result = (void *)sub_1B6E33838();
              __break(1u);
              return result;
            }
            unint64_t v60 = v64;
          }
          int v66 = v147[0];
          uint64_t v134 = v147[0];
          if (v62)
          {
            uint64_t v67 = *((void *)v147[0] + 7);

            *(void *)(v67 + 8 * v60) = v56;
          }
          else
          {
            *((void *)v147[0] + (v60 >> 6) + 8) |= 1 << v60;
            uint64_t v68 = (uint64_t *)(v66[6] + 16 * v60);
            *uint64_t v68 = v38;
            v68[1] = v39;
            *(void *)(v66[7] + 8 * v60) = v56;
            ++v66[2];
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v130(v138, v13);
        }
        else
        {
          uint64_t v69 = ~v48;
          while (1)
          {
            unint64_t v49 = (v49 + 1) & v69;
            if (((*(void *)(v46 + 56 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
              break;
            }
            unint64_t v70 = (void *)(v50 + 16 * v49);
            BOOL v71 = *v70 == v38 && v70[1] == v39;
            if (v71 || (sub_1B6E334B8() & 1) != 0) {
              goto LABEL_21;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v13 = v141;
        }
        uint64_t v9 = v132;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = v141;
      }
      uint64_t v34 = v133;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_46:
  uint64_t v72 = *(void *)(v145 + OBJC_IVAR____TtC3VFX16AssetFileManager_referencesToWrite);
  uint64_t v73 = *(void *)(v72 + 56);
  uint64_t v142 = v72 + 56;
  uint64_t v74 = 1 << *(unsigned char *)(v72 + 32);
  if (v74 < 64) {
    uint64_t v75 = ~(-1 << v74);
  }
  else {
    uint64_t v75 = -1;
  }
  unint64_t v76 = v75 & v73;
  long long v139 = (unsigned int (**)(char *, uint64_t, uint64_t))v35[78];
  unint64_t v77 = (unint64_t)(v74 + 63) >> 6;
  uint64_t v138 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v135 + 56);
  uint64_t v133 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
  int v129 = (void (**)(char *, uint64_t, uint64_t))(v135 + 32);
  uint64_t v144 = v72;
  swift_bridgeObjectRetain();
  uint64_t v78 = 0;
  uint64_t v143 = v77;
  uint64_t v132 = (char *)(v77 - 5);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        do
        {
          if (v76)
          {
            unint64_t v79 = __clz(__rbit64(v76));
            v76 &= v76 - 1;
            unint64_t v80 = v79 | ((void)v78 << 6);
          }
          else
          {
            uint64_t v81 = v78 + 1;
            if ((uint64_t)(v78 + 1) >= v143) {
              goto LABEL_97;
            }
            unint64_t v82 = *(void *)(v142 + 8 * (void)v81);
            if (!v82)
            {
              uint64_t v81 = v78 + 2;
              if ((uint64_t)(v78 + 2) >= v143) {
                goto LABEL_97;
              }
              unint64_t v82 = *(void *)(v142 + 8 * (void)v81);
              if (!v82)
              {
                uint64_t v81 = v78 + 3;
                if ((uint64_t)(v78 + 3) >= v143) {
                  goto LABEL_97;
                }
                unint64_t v82 = *(void *)(v142 + 8 * (void)v81);
                if (!v82)
                {
                  uint64_t v81 = v78 + 4;
                  if ((uint64_t)(v78 + 4) >= v143) {
                    goto LABEL_97;
                  }
                  unint64_t v82 = *(void *)(v142 + 8 * (void)v81);
                  if (!v82)
                  {
                    while (v132 != v78)
                    {
                      unint64_t v82 = *(void *)(v144 + 8 * (void)v78++ + 96);
                      if (v82)
                      {
                        uint64_t v81 = v78 + 4;
                        goto LABEL_64;
                      }
                    }
LABEL_97:
                    swift_release();
                    objc_msgSend(*(id *)(v145 + v126), sel_unlock);
                    return v134;
                  }
                }
              }
            }
LABEL_64:
            unint64_t v76 = (v82 - 1) & v82;
            unint64_t v80 = __clz(__rbit64(v82)) + ((void)v81 << 6);
            uint64_t v78 = v81;
          }
          uint64_t v83 = *v146;
        }
        while (!*(void *)(*v146 + 16));
        uint64_t v84 = (uint64_t *)(*(void *)(v144 + 48) + 16 * v80);
        uint64_t v85 = *v84;
        uint64_t v86 = v84[1];
        sub_1B6E33918();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B6E318B8();
        uint64_t v87 = sub_1B6E33988();
        uint64_t v88 = -1 << *(unsigned char *)(v83 + 32);
        unint64_t v89 = v87 & ~v88;
        if ((*(void *)(v83 + 56 + ((v89 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v89)) {
          break;
        }
LABEL_50:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v90 = *(void *)(v83 + 48);
      uint64_t v91 = (void *)(v90 + 16 * v89);
      BOOL v92 = *v91 == v85 && v91[1] == v86;
      if (!v92 && (sub_1B6E334B8() & 1) == 0)
      {
        uint64_t v99 = ~v88;
        do
        {
          unint64_t v89 = (v89 + 1) & v99;
          if (((*(void *)(v83 + 56 + ((v89 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v89) & 1) == 0) {
            goto LABEL_50;
          }
          float32x4_t v100 = (void *)(v90 + 16 * v89);
          BOOL v101 = *v100 == v85 && v100[1] == v86;
        }
        while (!v101 && (sub_1B6E334B8() & 1) == 0);
      }
      swift_bridgeObjectRelease();
      uint64_t v93 = (uint64_t)v140;
      uint64_t v94 = *(uint64_t *)((char *)v139 + v145);
      uint64_t v95 = v141;
      if (!*(void *)(v94 + 16))
      {
        (*v138)(v140, 1, 1, v141);
        goto LABEL_78;
      }
      swift_bridgeObjectRetain();
      uint64_t v96 = sub_1B62B2CE0(v85, v86);
      if (v97)
      {
        v136((char *)v93, *(void *)(v94 + 56) + *(void *)(v135 + 72) * v96, v95);
        uint64_t v98 = 0;
      }
      else
      {
        uint64_t v98 = 1;
      }
      (*v138)((char *)v93, v98, 1, v95);
      swift_bridgeObjectRelease();
      if ((*v133)(v93, 1, v95) != 1) {
        break;
      }
LABEL_78:
      swift_bridgeObjectRelease();
      sub_1B699407C(v93, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
    }
    (*v129)(v125, v93, v95);
    id v102 = objc_allocWithZone(MEMORY[0x1E4F28CF0]);
    uint64_t v103 = (void *)sub_1B6E30E78();
    v147[0] = 0;
    id v104 = objc_msgSend(v102, sel_initWithURL_options_error_, v103, 0, v147);

    if (!v104) {
      break;
    }
    id v105 = v147[0];
    __n128 v106 = (void *)sub_1B6E31768();
    objc_msgSend(v104, sel_setPreferredFilename_, v106);

    id v107 = v104;
    float32x4_t v108 = v134;
    char v109 = swift_isUniquelyReferenced_nonNull_native();
    v147[0] = v108;
    unint64_t v110 = sub_1B62B2CE0(v85, v86);
    char v112 = v111;
    uint64_t v113 = v108[2] + ((v111 & 1) == 0);
    if (v108[3] >= v113)
    {
      if ((v109 & 1) == 0) {
        sub_1B6ACFB60();
      }
    }
    else
    {
      sub_1B6ABCD5C(v113, v109);
      uint64_t v114 = sub_1B62B2CE0(v85, v86);
      if ((v112 & 1) != (v115 & 1)) {
        goto LABEL_101;
      }
      unint64_t v110 = v114;
    }
    uint64_t v116 = v147[0];
    uint64_t v134 = v147[0];
    if (v112)
    {
      uint64_t v117 = *((void *)v147[0] + 7);

      *(void *)(v117 + 8 * v110) = v107;
    }
    else
    {
      *((void *)v147[0] + (v110 >> 6) + 8) |= 1 << v110;
      uint64_t v118 = (uint64_t *)(v116[6] + 16 * v110);
      *uint64_t v118 = v85;
      v118[1] = v86;
      *(void *)(v116[7] + 8 * v110) = v107;
      ++v116[2];
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v130((void (**)(char *, uint64_t, uint64_t, uint64_t))v125, v141);
  }
  id v122 = v147[0];
  uint64_t v123 = sub_1B6E30D78();

  uint64_t v127 = v123;
  swift_willThrow();
  swift_bridgeObjectRelease();
  v130((void (**)(char *, uint64_t, uint64_t, uint64_t))v125, v141);
  swift_bridgeObjectRelease();
  swift_release();
  return objc_msgSend(*(id *)(v145 + v126), sel_unlock, v124);
}

uint64_t sub_1B699230C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1B638C09C(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  double v9 = MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = MEMORY[0x1BA9B8670](v3 + OBJC_IVAR____TtC3VFX24AssetManagerPathResolver_assetManager, v9);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    LOBYTE(v21) = 1;
    sub_1B69927D8(a1, a2, 0x100000000, (uint64_t)v11);

    uint64_t v14 = sub_1B6E30F48();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14) != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v11, v14);
    }
  }
  else
  {
    uint64_t v17 = sub_1B6E30F48();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v11, 1, 1, v17);
  }
  sub_1B699407C((uint64_t)v11, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  swift_retain();
  sub_1B6E328C8();
  sub_1B6E31948();
  sub_1B6E31948();
  uint64_t v18 = v21;
  uint64_t v19 = v22;
  int v20 = sub_1B6E32148();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v21 = 0;
  swift_retain();
  sub_1B6B33E34(v20, &v21, v18, v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return sub_1B6E30E48();
}

id sub_1B6992624()
{
  return sub_1B69937F4(type metadata accessor for AssetManagerPathResolver);
}

uint64_t sub_1B69927D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v74 = a4;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1B638C09C(0, &qword_1E9DD3288, (uint64_t (*)(uint64_t))sub_1B6993FF8, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v69 = (uint64_t)&v66 - v9;
  uint64_t v75 = sub_1B6E30F48();
  uint64_t v10 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75, v11);
  uint64_t v67 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v71 = (uint64_t)&v66 - v15;
  MEMORY[0x1F4188790](v16, v17);
  int v66 = (char *)&v66 - v18;
  sub_1B638C09C(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], v6);
  MEMORY[0x1F4188790](v19 - 8, v20);
  uint64_t v68 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v23);
  unint64_t v70 = (char *)&v66 - v24;
  MEMORY[0x1F4188790](v25, v26);
  float32x4_t v28 = (char *)&v66 - v27;
  uint64_t v29 = sub_1B6E30DE8();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29, v31);
  uint64_t v33 = (char *)&v66 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a1;
  uint64_t v78 = a1;
  uint64_t v79 = a2;
  uint64_t v76 = 47;
  unint64_t v77 = 0xE100000000000000;
  sub_1B666BDC4();
  sub_1B666BE18();
  if (sub_1B6E31618())
  {
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v33, *MEMORY[0x1E4F276B8], v29);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v36 = v75;
    v35(v28, 1, 1, v75);
    swift_bridgeObjectRetain();
    uint64_t v37 = v74;
    sub_1B6E30F28();
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v35)(v37, 0, 1, v36);
  }
  uint64_t v39 = a2;
  uint64_t v40 = v75;
  uint64_t v41 = v10;
  uint64_t v42 = v73;
  if ((v72 & 0x100000000) == 0 && dword_1E9E49870 != v72)
  {
    uint64_t v43 = *(void *)(v73 + OBJC_IVAR____TtC3VFX12AssetManager_effectIDToAssetsDirectory);
    if (*(void *)(v43 + 16) && (LOBYTE(v78) = 0, unint64_t v44 = sub_1B69FAC48(v72), (v45 & 1) != 0))
    {
      uint64_t v46 = (uint64_t)v70;
      (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v70, *(void *)(v43 + 56) + *(void *)(v41 + 72) * v44, v40);
      uint64_t v47 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56);
      v47(v46, 0, 1, v40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v46, 1, v40) != 1)
      {
        uint64_t v48 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v66, v46, v40);
        uint64_t v49 = v71;
        sub_1B6E30EA8();
        uint64_t v50 = v74;
        sub_1B6E30DB8();
        unint64_t v51 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v51(v49, v40);
        v51((uint64_t)v48, v40);
        return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v47)(v50, 0, 1, v40);
      }
    }
    else
    {
      uint64_t v46 = (uint64_t)v70;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v70, 1, 1, v40);
    }
    sub_1B699407C(v46, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
  }
  if (*(void *)(v42 + OBJC_IVAR____TtC3VFX12AssetManager_authoringFileManager))
  {
    swift_retain();
    uint64_t v52 = v71;
    sub_1B6992FA8(v34, v39, v71);
    uint64_t v53 = v74;
    sub_1B6E30DB8();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v52, v40);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v53, 0, 1, v40);
  }
  uint64_t v54 = swift_bridgeObjectRetain();
  uint64_t v55 = v69;
  sub_1B6A02BC0(v54, v69);
  swift_bridgeObjectRelease();
  sub_1B6993FF8();
  uint64_t v57 = v56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48))(v55, 1, v56) == 1)
  {
    sub_1B699407C(v55, &qword_1E9DD3288, (uint64_t (*)(uint64_t))sub_1B6993FF8);
    BOOL v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
    uint64_t v59 = (uint64_t)v68;
    v58(v68, 1, 1, v40);
LABEL_16:
    uint64_t v61 = v74;
    sub_1B699407C(v59, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v58)(v61, 1, 1, v40);
  }
  unint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 32);
  uint64_t v59 = (uint64_t)v68;
  v60(v68, v55 + *(int *)(v57 + 48), v40);
  BOOL v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  v58((char *)v59, 0, 1, v40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v59, 1, v40) == 1) {
    goto LABEL_16;
  }
  char v62 = v67;
  v60(v67, v59, v40);
  uint64_t v63 = v71;
  sub_1B6E30EA8();
  uint64_t v64 = v74;
  sub_1B6E30DB8();
  char v65 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v65(v63, v40);
  v65((uint64_t)v62, v40);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v58)(v64, 0, 1, v40);
}

id sub_1B6992FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1B6E30F48();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B638C09C(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  double v15 = MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v25 = OBJC_IVAR____TtC3VFX16AssetFileManager_lock;
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC3VFX16AssetFileManager_lock), sel_lock, v15);
  uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC3VFX16AssetFileManager_referencesToWrite);
  swift_bridgeObjectRetain();
  char v19 = sub_1B677F67C(a1, a2, v18);
  swift_bridgeObjectRelease();
  if (v19)
  {
    uint64_t v20 = *(void *)(v4 + OBJC_IVAR____TtC3VFX16AssetFileManager_allReferencesWithTemporaryCopy);
    if (*(void *)(v20 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_1B62B2CE0(a1, a2);
      if (v22)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v17, *(void *)(v20 + 56) + *(void *)(v9 + 72) * v21, v8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
      }
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v17, v8);
        return objc_msgSend(*(id *)(v4 + v25), sel_unlock);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
    }
    sub_1B699407C((uint64_t)v17, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory, v8);
  sub_1B6E30EA8();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return objc_msgSend(*(id *)(v4 + v25), sel_unlock);
}

uint64_t sub_1B69932C8(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v41 = a1;
  sub_1B638C09C(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v36 - v11;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = sub_1B6E30F48();
  uint64_t v18 = *(void *)(v17 - 8);
  v20.n128_f64[0] = MEMORY[0x1F4188790](v17, v19);
  char v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a3 + OBJC_IVAR____TtC3VFX12AssetManager_effectIDToAssetsDirectory);
  if (!*(void *)(v23 + 16) || (v46 = 0, unint64_t v24 = sub_1B69FAC48(a2), (v25 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56))(v16, 1, 1, v17, v20);
    goto LABEL_9;
  }
  uint64_t v26 = *(void *)(v23 + 56);
  uint64_t v38 = *(void *)(v18 + 72);
  uint64_t v39 = v8;
  uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
  v27(v16, v26 + v38 * v24, v17);
  uint64_t v40 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
  v40(v16, 0, 1, v17);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v37(v16, 1, v17) == 1)
  {
LABEL_9:
    sub_1B699407C((uint64_t)v16, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v34 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v45 = 0;
    swift_retain();
    sub_1B6B33E34(v34, &v45, 0xD000000000000034, 0x80000001B6F40220);
    swift_release();
    return swift_release();
  }
  uint64_t v36 = v27;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v16, v17);
  uint64_t v42 = (uint64_t *)((char *)v42 + OBJC_IVAR____TtC3VFX12AssetManager_effectIDToAssetsDirectory);
  uint64_t v28 = *v42;
  if (*(void *)(*v42 + 16))
  {
    char v44 = 0;
    unint64_t v29 = v41;
    unint64_t v30 = sub_1B69FAC48(v41);
    uint64_t v31 = v40;
    if (v32)
    {
      v36(v12, *(void *)(v28 + 56) + v30 * v38, v17);
      v31(v12, 0, 1, v17);
      if (v37(v12, 1, v17) != 1)
      {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
        return sub_1B699407C((uint64_t)v12, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
      }
    }
    else
    {
      v40(v12, 1, 1, v17);
    }
  }
  else
  {
    uint64_t v31 = v40;
    v40(v12, 1, 1, v17);
    unint64_t v29 = v41;
  }
  sub_1B699407C((uint64_t)v12, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0]);
  uint64_t v35 = (uint64_t)v39;
  v36(v39, (unint64_t)v22, v17);
  v31((char *)v35, 0, 1, v17);
  char v43 = 0;
  sub_1B6CE0AD8(v35, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
}

id sub_1B69937DC()
{
  return sub_1B69937F4(type metadata accessor for AssetManager);
}

id sub_1B69937F4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_1B6993888(char *a1)
{
  v46[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = sub_1B6E31118();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1B6E30F48();
  uint64_t v39 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (char *)&v39 - v14;
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v19 = (char *)&v39 - v18;
  *(void *)(v1 + OBJC_IVAR____TtC3VFX16AssetFileManager_isPerformingChangesLevel) = 0;
  uint64_t v20 = OBJC_IVAR____TtC3VFX16AssetFileManager_lock;
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  uint64_t v40 = v1;
  *(void *)(v1 + v20) = v21;
  uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v45 = a1;
  v42(v1 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory, (uint64_t)a1, v7);
  id v41 = self;
  id v22 = objc_msgSend(v41, sel_defaultManager);
  id v23 = objc_msgSend(v22, sel_temporaryDirectory);

  sub_1B6E30EE8();
  sub_1B6E30EA8();
  unint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  char v25 = v11;
  uint64_t v26 = v39;
  v24(v25, v39);
  sub_1B6E31108();
  sub_1B6E310B8();
  uint64_t v27 = v6;
  uint64_t v28 = v40;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v44);
  sub_1B6E30EA8();
  swift_bridgeObjectRelease();
  v24(v15, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v28 + OBJC_IVAR____TtC3VFX16AssetFileManager_temporaryDirectory, v19, v26);
  id v29 = objc_msgSend(v41, sel_defaultManager);
  v42((uint64_t)v19, v28 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory, v26);
  sub_1B6E30EF8();
  v24(v19, v26);
  unint64_t v30 = (void *)sub_1B6E31768();
  swift_bridgeObjectRelease();
  v46[0] = 0;
  id v31 = objc_msgSend(v29, sel_contentsOfDirectoryAtPath_error_, v30, v46);

  id v32 = v46[0];
  if (v31)
  {
    uint64_t v33 = sub_1B6E31C28();
  }
  else
  {
    int v34 = v32;
    uint64_t v35 = (void *)sub_1B6E30D78();

    swift_willThrow();
    uint64_t v33 = MEMORY[0x1E4FBC860];
  }
  uint64_t v36 = sub_1B638E5B0(v33);
  swift_bridgeObjectRelease();
  *(void *)(v28 + OBJC_IVAR____TtC3VFX16AssetFileManager_referencesToWrite) = v36;
  uint64_t v37 = sub_1B67DFA94(MEMORY[0x1E4FBC860]);
  v24(v45, v26);
  *(void *)(v28 + OBJC_IVAR____TtC3VFX16AssetFileManager_allReferencesWithTemporaryCopy) = v37;
  return v28;
}

uint64_t sub_1B6993D08()
{
  uint64_t v1 = v0;
  v12[1] = *(id *)MEMORY[0x1E4F143B8];
  id v2 = objc_msgSend(self, sel_defaultManager);
  uint64_t v3 = v0 + OBJC_IVAR____TtC3VFX16AssetFileManager_temporaryDirectory;
  uint64_t v4 = (void *)sub_1B6E30E78();
  v12[0] = 0;
  unsigned int v5 = objc_msgSend(v2, sel_removeItemAtURL_error_, v4, v12);

  if (v5)
  {
    id v6 = v12[0];
  }
  else
  {
    id v7 = v12[0];
    uint64_t v8 = (void *)sub_1B6E30D78();

    swift_willThrow();
  }
  uint64_t v9 = sub_1B6E30F48();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v3, v9);
  v10(v1 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory, v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B6993E90()
{
  sub_1B6993D08();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6993EE8()
{
  return type metadata accessor for AssetFileManager();
}

uint64_t type metadata accessor for AssetFileManager()
{
  uint64_t result = qword_1E9DD3278;
  if (!qword_1E9DD3278) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B6993F3C()
{
  uint64_t result = sub_1B6E30F48();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1B6993FF8()
{
  if (!qword_1E9DD3290)
  {
    sub_1B62D82E0(255, &qword_1EB980E58);
    sub_1B6E30F48();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DD3290);
    }
  }
}

uint64_t sub_1B699407C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1B638C09C(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1B69940EC(uint64_t a1, char a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v65 = MEMORY[0x1E4FBC870];
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v95 = qword_1EB997A18;
  int v96 = 0;
  char v97 = 2;
  uint64_t v98 = 0;
  char v99 = 2;
  uint64_t v100 = 0;
  swift_retain();
  sub_1B6A6EAF8(1, (uint64_t)&v66);
  swift_release();
  uint64_t v4 = v66;
  int v5 = v67;
  char v6 = v68;
  char v7 = v70;
  uint64_t v8 = v71;
  uint64_t v9 = v69 | 1;
  if (a2)
  {
    uint64_t v89 = v66;
    int v90 = v67;
    char v91 = v68;
    uint64_t v92 = v69 | 1;
    char v93 = v70;
    uint64_t v94 = v71;
    sub_1B638C09C(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
    *(void *)(inited + 32) = &type metadata for DoNotExport;
    *(void *)(inited + 40) = &off_1F0F54D58;
    swift_retain();
    sub_1B62AD184(&v72);
    swift_setDeallocating();
    sub_1B62CA064((uint64_t)&v66);
    sub_1B62CA064((uint64_t)&v66);
    uint64_t v4 = v72;
    int v5 = v73;
    char v6 = v74;
    uint64_t v9 = v75;
    char v7 = v76;
    uint64_t v8 = v77;
  }
  uint64_t v83 = v4;
  int v84 = v5;
  char v85 = v6;
  uint64_t v86 = v9;
  char v87 = v7;
  uint64_t v88 = v8;
  swift_retain();
  sub_1B62C9DA8(a1, (uint64_t)&v83, 0x200000000, v101);
  sub_1B62CA210((uint64_t)v101, (uint64_t)v102, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v102[0])
  {
    long long v78 = v102[0];
    long long v79 = v102[1];
    uint64_t v60 = v104;
    uint64_t v80 = v103;
    uint64_t v12 = v105;
    uint64_t v11 = v106;
    uint64_t v13 = v108;
    uint64_t v63 = v107;
    swift_release();
    if (v13 > 0 && v12)
    {
      uint64_t v14 = v63[4];
      int v15 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v81[0] = v78;
      v81[1] = v79;
      uint64_t v82 = v80;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v16 = 0;
      uint64_t v58 = v14;
      uint64_t v59 = v12;
      int v57 = v15;
      do
      {
        uint64_t v17 = (unsigned int *)(v60 + 48 * v16);
        uint64_t v18 = *v17;
        uint64_t v19 = (uint64_t *)*((void *)v17 + 2);
        uint64_t v20 = *((void *)v17 + 3);
        uint64_t v22 = *((void *)v17 + 4);
        uint64_t v21 = *((void *)v17 + 5);
        uint64_t v61 = v17[1];
        uint64_t v62 = v16;
        if (v15)
        {
          id v23 = *(os_unfair_lock_s **)(v21 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v23);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v14);
        sub_1B62CA210((uint64_t)(v63 + 6), (uint64_t)v109, &qword_1EB97DE20);
        uint64_t v24 = v63[4];
        uint64_t v25 = *(void *)(*(void *)(*(void *)(*(void *)(v21 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v63[6] = ecs_stack_allocator_allocate(v24, 48 * v25, 8);
        v63[7] = v25;
        v63[9] = 0;
        v63[10] = 0;
        v63[8] = 0;
        swift_release();
        uint64_t v26 = sub_1B62C9024((uint64_t)&type metadata for VirtualFileAsset, (uint64_t)&off_1F0F6FB90, v19, v20, v22, (uint64_t)v63);
        if (v19)
        {
          if (v22)
          {
            uint64_t v27 = (uint64_t *)(v26 + 24);
            do
            {
              uint64_t v29 = *(v27 - 1);
              uint64_t v28 = *v27;
              swift_bridgeObjectRetain_n();
              sub_1B638E648(&v64, v29, v28);
              swift_bridgeObjectRelease();
              uint64_t v30 = *(void *)(*(void *)(v21 + 40) + 16);
              uint64_t v31 = *(void *)(v30 + 128);
              if (*(void *)(v31 + 16)
                && (unint64_t v32 = sub_1B62C1A30((uint64_t)&type metadata for MeshFileAsset), (v33 & 1) != 0)
                && *(ValueMetadata **)(*(void *)(v30 + 24) + 16 * *(void *)(*(void *)(v31 + 56) + 8 * v32) + 32) == &type metadata for MeshFileAsset)
              {
                int v34 = (void *)sub_1B6E31768();
                id v35 = objc_msgSend(v34, sel_stringByDeletingPathExtension);

                sub_1B6E31798();
                uint64_t v36 = (void *)sub_1B6E31768();
                uint64_t v37 = (void *)sub_1B6E31768();
                id v38 = objc_msgSend(v36, sel_stringByAppendingPathExtension_, v37);

                if (v38)
                {
                  uint64_t v29 = sub_1B6E31798();
                  uint64_t v40 = v39;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  uint64_t v28 = v40;
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
                sub_1B638E648(&v64, v29, v28);
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              v27 += 6;
              --v22;
            }
            while (v22);
          }
        }
        else if (v18 != v61)
        {
          id v41 = (uint64_t *)(v26 + 48 * v18 + 24);
          uint64_t v42 = v61 - v18;
          do
          {
            uint64_t v44 = *(v41 - 1);
            uint64_t v43 = *v41;
            swift_bridgeObjectRetain_n();
            sub_1B638E648(&v64, v44, v43);
            swift_bridgeObjectRelease();
            uint64_t v45 = *(void *)(*(void *)(v21 + 40) + 16);
            uint64_t v46 = *(void *)(v45 + 128);
            if (*(void *)(v46 + 16)
              && (unint64_t v47 = sub_1B62C1A30((uint64_t)&type metadata for MeshFileAsset), (v48 & 1) != 0)
              && *(ValueMetadata **)(*(void *)(v45 + 24) + 16 * *(void *)(*(void *)(v46 + 56) + 8 * v47) + 32) == &type metadata for MeshFileAsset)
            {
              uint64_t v49 = (void *)sub_1B6E31768();
              id v50 = objc_msgSend(v49, sel_stringByDeletingPathExtension);

              sub_1B6E31798();
              unint64_t v51 = (void *)sub_1B6E31768();
              uint64_t v52 = (void *)sub_1B6E31768();
              id v53 = objc_msgSend(v51, sel_stringByAppendingPathExtension_, v52);

              if (v53)
              {
                uint64_t v44 = sub_1B6E31798();
                uint64_t v55 = v54;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                uint64_t v43 = v55;
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              sub_1B638E648(&v64, v44, v43);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            v41 += 6;
            --v42;
          }
          while (v42);
        }
        sub_1B6345178(v63, (unsigned __int16 **)v81, (uint64_t)v109);
        sub_1B634507C((char *)v21);
        uint64_t v14 = v58;
        ecs_stack_allocator_pop_snapshot(v58);
        int v15 = v57;
        if (v57)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 376));
        }
        swift_release();
        uint64_t v16 = v62 + 1;
      }
      while (v62 + 1 != v59);
      sub_1B632F170(v101);
      sub_1B632F170(v101);
    }
    else
    {
      sub_1B632F170(v101);
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  return v65;
}

uint64_t sub_1B699487C()
{
  MEMORY[0x1BA9B84C0](*(void *)(v0 + 32), -1, -1);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Bitset()
{
  return self;
}

uint64_t sub_1B69948E0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(uint64_t **)(v0 + 32);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t v2 = v4 - v2 + 32 * v2;
      --v1;
    }
    while (v1);
  }
  return sub_1B6E33968();
}

uint64_t sub_1B6994964()
{
  uint64_t v1 = v0;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  swift_retain();
  sub_1B6C3C3B8(0, 0, 0);
  uint64_t v2 = *(void *)(v0 + 24);
  if (v2 <= 0)
  {
    swift_release();
  }
  else
  {
    uint64_t v3 = *(unint64_t **)(v1 + 32);
    unint64_t v4 = *v3;
    swift_retain();
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 99;
    unint64_t v8 = v4;
    if (!v4) {
      goto LABEL_4;
    }
LABEL_3:
    for (unint64_t i = __clz(__rbit64(v8)) + v5; ; unint64_t i = __clz(__rbit64(v11)) + (v10 << 6))
    {
      sub_1B6918938();
      uint64_t v13 = sub_1B6E326F8();
      uint64_t v15 = v14;
      unint64_t v17 = *(void *)(v32 + 16);
      unint64_t v16 = *(void *)(v32 + 24);
      if (v17 >= v16 >> 1) {
        sub_1B6C3C3B8(v16 > 1, v17 + 1, 1);
      }
      *(void *)(v32 + 16) = v17 + 1;
      uint64_t v18 = v32 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v15;
      if (!v7) {
        break;
      }
      unint64_t v5 = i + 1;
      uint64_t v6 = (uint64_t)(i + 1) >> 6;
      uint64_t v2 = *(void *)(v1 + 24);
      if (v6 >= v2) {
        break;
      }
      uint64_t v3 = *(unint64_t **)(v1 + 32);
      --v7;
      unint64_t v8 = v3[v6] >> (v5 & 0x3F);
      if (v8) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v10 = v6 + 1;
      if (v6 + 1 >= v2) {
        break;
      }
      unint64_t v11 = v3[v10];
      if (!v11)
      {
        uint64_t v10 = v6 + 2;
        if (v6 + 2 >= v2) {
          break;
        }
        unint64_t v11 = v3[v10];
        if (!v11)
        {
          uint64_t v10 = v6 + 3;
          if (v6 + 3 >= v2) {
            break;
          }
          unint64_t v11 = v3[v10];
          if (!v11)
          {
            uint64_t v12 = v6 + 4;
            while (v2 != v12)
            {
              unint64_t v11 = v3[v12++];
              if (v11)
              {
                uint64_t v10 = v12 - 1;
                goto LABEL_14;
              }
            }
            break;
          }
        }
      }
LABEL_14:
      ;
    }
    swift_release_n();
  }
  sub_1B6646CE4();
  sub_1B6995078((unint64_t *)&qword_1EB980300, 255, (void (*)(uint64_t))sub_1B6646CE4);
  sub_1B6E31638();
  swift_release();
  unint64_t v19 = *(void *)(v1 + 24);
  if (v19)
  {
    uint64_t v20 = *(int8x16_t **)(v1 + 32);
    if (v19 >= 4)
    {
      unint64_t v22 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      id v23 = v20 + 1;
      int64x2_t v24 = 0uLL;
      unint64_t v25 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v26 = 0uLL;
      do
      {
        int64x2_t v24 = (int64x2_t)vpadalq_u32((uint64x2_t)v24, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v23[-1]))));
        int64x2_t v26 = (int64x2_t)vpadalq_u32((uint64x2_t)v26, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v23))));
        v23 += 2;
        v25 -= 4;
      }
      while (v25);
      uint64_t v21 = vaddvq_s64(vaddq_s64(v26, v24));
      if (v19 == v22)
      {
LABEL_31:
        if (v21 >= 100) {
          sub_1B6E31948();
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
    }
    unint64_t v27 = v19 - v22;
    uint64_t v28 = (int8x8_t *)v20 + v22;
    do
    {
      int8x8_t v29 = *v28++;
      uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
      v30.i16[0] = vaddlv_u8(v30);
      v21 += v30.u32[0];
      --v27;
    }
    while (v27);
    goto LABEL_31;
  }
LABEL_33:
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return 123;
}

void sub_1B6994CA0(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = -1;
}

void *sub_1B6994CB0()
{
  uint64_t v1 = sub_1B68C6EA4(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1B6994CE8(void *a1, int64_t *a2, uint64_t a3)
{
  return sub_1B66430B8(a1, a2, a3);
}

BOOL sub_1B6994D0C(uint64_t *a1, uint64_t *a2)
{
  return sub_1B6994F9C(*a1, *a2);
}

uint64_t sub_1B6994D18()
{
  return sub_1B6994964();
}

uint64_t sub_1B6994D3C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6994D80()
{
  return sub_1B69948E0();
}

uint64_t sub_1B6994DA4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6994DE4@<X0>(int64x2_t *a1@<X0>, uint64_t *a2@<X8>)
{
  swift_allocObject();
  uint64_t v4 = sub_1B69950C0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1B6994E3C(uint64_t a1, uint64_t a2)
{
  return sub_1B6995078(&qword_1E9DD3298, a2, (void (*)(uint64_t))type metadata accessor for Bitset);
}

unint64_t sub_1B6994E88()
{
  unint64_t result = qword_1E9DD32A0;
  if (!qword_1E9DD32A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD32A0);
  }
  return result;
}

unint64_t sub_1B6994EDC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1] + 1;
  v0[1] = v2;
  uint64_t v3 = v2 >> 6;
  uint64_t v4 = *(void *)(v1 + 24);
  if (v2 >> 6 < v4)
  {
    uint64_t v5 = *(void *)(v1 + 32);
    unint64_t v6 = *(void *)(v5 + 8 * v3) >> v2;
    if (v6)
    {
      unint64_t result = __clz(__rbit64(v6)) + v2;
LABEL_4:
      v0[1] = result;
      return result;
    }
    uint64_t v8 = v3 + 1;
    if (v3 + 1 < v4)
    {
      unint64_t v9 = *(void *)(v5 + 8 * v8);
      if (v9)
      {
LABEL_11:
        unint64_t result = __clz(__rbit64(v9)) + (v8 << 6);
        goto LABEL_4;
      }
      uint64_t v10 = v3 + 2;
      while (v4 != v10)
      {
        unint64_t v9 = *(void *)(v5 + 8 * v10++);
        if (v9)
        {
          uint64_t v8 = v10 - 1;
          goto LABEL_11;
        }
      }
    }
  }
  return 0;
}

unint64_t sub_1B6994F6C@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = sub_1B6994EDC();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

BOOL sub_1B6994F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3 >= v2)
  {
    if (v2 < v3)
    {
      uint64_t v8 = *(void *)(a2 + 32);
      if (*(void *)(v8 + 8 * v2)) {
        return 0;
      }
      uint64_t v9 = ~v2 + v3;
      uint64_t v10 = (uint64_t *)(v8 + 8 * v2 + 8);
      while (v9)
      {
        uint64_t v11 = *v10++;
        --v9;
        if (v11) {
          return 0;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(void *)(v4 + 8 * v3)) {
      return 0;
    }
    uint64_t v5 = ~v3 + v2;
    unint64_t v6 = (uint64_t *)(v4 + 8 * v3 + 8);
    while (v5)
    {
      uint64_t v7 = *v6++;
      --v5;
      if (v7) {
        return 0;
      }
    }
  }
  if (v2 >= v3) {
    uint64_t v12 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 24);
  }
  if (!v12) {
    return 1;
  }
  uint64_t v13 = *(void **)(a2 + 32);
  uint64_t v14 = *(void **)(a1 + 32);
  if (*v13 != *v14) {
    return 0;
  }
  uint64_t v15 = v13 + 1;
  unint64_t v16 = v14 + 1;
  uint64_t v17 = v12 - 1;
  do
  {
    BOOL result = v17 == 0;
    if (!v17) {
      break;
    }
    uint64_t v20 = *v15++;
    uint64_t v19 = v20;
    uint64_t v21 = *v16++;
    --v17;
  }
  while (v19 == v21);
  return result;
}

uint64_t sub_1B6995078(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B69950C0(int64x2_t *a1)
{
  *(_OWORD *)(v1 + 16) = xmmword_1B6E98AF0;
  unint64_t v3 = a1[1].u64[0];
  if (!v3)
  {
    uint64_t v6 = 1;
    goto LABEL_15;
  }
  if (v3 < 4)
  {
    int8x8_t v4 = 0;
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = v3 & 0x7FFFFFFFFFFFFFFCLL;
  uint64_t v7 = a1 + 3;
  int8x16_t v8 = 0uLL;
  uint64_t v9 = v3 & 0x7FFFFFFFFFFFFFFCLL;
  int8x16_t v10 = 0uLL;
  do
  {
    int8x16_t v8 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v8, v7[-1]), v8, (int8x16_t)v7[-1]);
    int8x16_t v10 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v10, *v7), v10, *(int8x16_t *)v7);
    v7 += 2;
    v9 -= 4;
  }
  while (v9);
  int8x16_t v11 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v8, (int64x2_t)v10), v8, v10);
  uint64_t v12 = vextq_s8(v11, v11, 8uLL).u64[0];
  int8x8_t v4 = vbsl_s8((int8x8_t)vcgtd_s64(v11.i64[0], v12), *(int8x8_t *)v11.i8, (int8x8_t)v12);
  if (v3 != v5)
  {
LABEL_8:
    unint64_t v13 = v3 - v5;
    uint64_t v14 = (int8x8_t *)&a1[2] + v5;
    do
    {
      int8x8_t v16 = *v14++;
      int8x8_t v15 = v16;
      if (*(void *)&v4 <= *(void *)&v16) {
        int8x8_t v4 = v15;
      }
      --v13;
    }
    while (v13);
  }
  uint64_t v17 = *(void *)&v4 + 63;
  uint64_t v18 = *(void *)&v4 + 126;
  if (v17 < 0) {
    uint64_t v17 = v18;
  }
  uint64_t v6 = (v17 >> 6) + 1;
LABEL_15:
  *(void *)(v1 + 16) = v6;
  *(void *)(v1 + 24) = v6;
  *(void *)(v1 + 32) = swift_slowAlloc();
  uint64_t v19 = *(void *)(v1 + 24);
  if (v19)
  {
    for (uint64_t i = 0; i != v19; ++i)
      *(void *)(*(void *)(v1 + 32) + 8 * i) = 0;
  }
  if (v3)
  {
    uint64_t v21 = 0;
    unint64_t v22 = a1 + 2;
    do
    {
      uint64_t v23 = v22->i64[v21];
      uint64_t v24 = v23 >> 6;
      uint64_t v25 = *(void *)(v1 + 24);
      if (v23 >> 6 >= v25)
      {
        uint64_t v26 = v24 + 1;
        if (*(void *)(v1 + 16) <= v24)
        {
          uint64_t v27 = swift_slowAlloc();
          unint64_t v29 = *(void *)(v1 + 24);
          uint64_t v28 = *(void *)(v1 + 32);
          if (v29)
          {
            unint64_t v30 = 0;
            if (v29 < 4) {
              goto LABEL_30;
            }
            if ((unint64_t)(v27 - v28) < 0x20) {
              goto LABEL_30;
            }
            unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            uint64_t v31 = (long long *)(v28 + 16);
            uint64_t v32 = (_OWORD *)(v27 + 16);
            unint64_t v33 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              long long v34 = *v31;
              *(v32 - 1) = *(v31 - 1);
              *uint64_t v32 = v34;
              v31 += 2;
              v32 += 2;
              v33 -= 4;
            }
            while (v33);
            if (v29 != v30)
            {
LABEL_30:
              unint64_t v35 = v29 - v30;
              uint64_t v36 = 8 * v30;
              uint64_t v37 = (void *)(v27 + 8 * v30);
              id v38 = (uint64_t *)(v28 + v36);
              do
              {
                uint64_t v39 = *v38++;
                *v37++ = v39;
                --v35;
              }
              while (v35);
            }
          }
          MEMORY[0x1BA9B84C0](v28, -1, -1);
          *(void *)(v1 + 32) = v27;
          *(void *)(v1 + 16) = 2 * v26;
          uint64_t v25 = *(void *)(v1 + 24);
        }
        for (; v26 != v25; ++v25)
          *(void *)(*(void *)(v1 + 32) + 8 * v25) = 0;
        *(void *)(v1 + 24) = v26;
      }
      ++v21;
      *(void *)(*(void *)(v1 + 32) + 8 * v24) |= 1 << v23;
    }
    while (v21 != v3);
  }
  return v1;
}

ValueMetadata *type metadata accessor for BitsetIterator()
{
  return &type metadata for BitsetIterator;
}

uint64_t sub_1B6995328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t sub_1B6995330()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69953C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B69954EC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

__n128 sub_1B699568C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_1B69956C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t sub_1B69957C8(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1B6995810(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for KeyframeAnimation()
{
  return sub_1B62C36EC();
}

__n128 initializeWithCopy for AnimationTimeSource(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AnimationTimeSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationTimeSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimeSource()
{
  return &type metadata for AnimationTimeSource;
}

double sub_1B6995964(uint64_t a1, uint64_t a2, float a3)
{
  float v3 = a3;
  switch(BYTE4(a2))
  {
    case 1:
      *(float *)&double result = sub_1B696DB08(a1, a3, *((float *)&a1 + 1));
      return result;
    case 2:
      float v5 = *((float *)&a1 + 1);
      if (a1 << 32 <= (uint64_t)0xFFFFFFFF00000000) {
        float v6 = 0.25;
      }
      else {
        float v6 = (float)(int)a1 + 0.25;
      }
      float v12 = a3;
      if (*((float *)&a1 + 1) > 0.0)
      {
        float v13 = 1.0 - expf(*((float *)&a1 + 1) * a3);
        float v12 = v13 / (float)(1.0 - expf(v5));
      }
      float v3 = v12 * sinf((float)(v6 * 6.2832) * v3);
      goto LABEL_22;
    case 3:
      float v7 = *(float *)&a1;
      float v8 = 1.0 - expf(*(float *)&a1 * a3);
      float v3 = v8 / (float)(1.0 - expf(v7));
      goto LABEL_22;
    case 4:
      float v9 = *(float *)&a1;
      float v10 = logf((float)((float)(*(float *)&a1 + -1.0) * a3) + 1.0);
      float v3 = v10 / logf(v9);
      goto LABEL_22;
    case 5:
      *(float *)&double result = powf(a3, *(float *)&a1);
      return result;
    case 6:
      if ((int)a2 < 1)
      {
        float v14 = (float)(*(float *)&a1 - *((float *)&a1 + 1)) - *((float *)&a1 + 1);
        float v15 = v14 + (float)(*(float *)&a1 * *((float *)&a1 + 1));
        if (*((float *)&a1 + 1) <= a3) {
          float v3 = (float)((float)((float)((float)(*(float *)&a1 + -2.0) * *((float *)&a1 + 1)) * *((float *)&a1 + 1))
        }
                     + (float)((float)((float)(a3 + -2.0) * a3) * v14))
             / (float)((float)(*((float *)&a1 + 1) + -1.0) * v15);
        else {
          float v3 = (float)((float)(a3 + a3) * (float)(*(float *)&a1 - a3)) / v15;
        }
        goto LABEL_22;
      }
      float v11 = *((float *)&a1 + 1) - *(float *)&a1;
      if (*((float *)&a1 + 1) > a3)
      {
        float v3 = (float)((float)(a3 - *(float *)&a1) * a3) / (float)(v11 * *((float *)&a1 + 1));
LABEL_22:
        *(float *)&double result = v3;
        return result;
      }
      float v16 = 1.0 - *((float *)&a1 + 1);
      float v17 = (float)(int)a2;
      float v18 = a3 - *((float *)&a1 + 1);
      float v19 = sinf((float)((float)((float)(int)a2 * 3.1416) * (float)(a3 - *((float *)&a1 + 1)))/ (float)(1.0 - *((float *)&a1 + 1)))* (float)((float)((float)(1.0 - *((float *)&a1 + 1)) * (float)(v11 + *((float *)&a1 + 1)))/ (float)((float)((float)(v11 * *((float *)&a1 + 1)) * (float)(int)a2) * 3.1416));
      *(float *)&double result = (float)(v19 * expf((float)(v17 / (float)(v16 * -4.0)) * v18)) + 1.0;
      return result;
    case 7:
      switch(a1)
      {
        case 1:
          float v3 = a3 * a3;
          goto LABEL_22;
        case 2:
          float v3 = -(float)(a3 * (float)(a3 + -2.0));
          goto LABEL_22;
        case 3:
          if (a3 >= 0.5) {
            float v3 = (float)((float)((float)(a3 * -2.0) + 4.0) * a3) + -1.0;
          }
          else {
            float v3 = (float)(a3 * a3) + (float)(a3 * a3);
          }
          goto LABEL_22;
        case 4:
          float v3 = (float)(a3 * a3) * a3;
          goto LABEL_22;
        case 5:
          float v20 = 1.0;
          float v21 = 1.0 - v3;
          float v22 = v21 * v21;
          goto LABEL_46;
        case 6:
          if (a3 < 0.5)
          {
            float v23 = a3 * 4.0;
            goto LABEL_49;
          }
          *(float *)&double result = (float)((float)((float)(a3 + -1.0) * (float)((float)(a3 * 2.0) + -2.0))
                                    * (float)((float)(a3 * 2.0) + -2.0))
                            + 1.0;
          return result;
        case 7:
          float v23 = a3 * a3;
          goto LABEL_49;
        case 8:
          float v20 = 1.0;
          float v21 = 1.0 - v3;
          float v25 = v21 * v21;
          goto LABEL_45;
        case 9:
          if (a3 < 0.5)
          {
            float v24 = a3 * 8.0;
            goto LABEL_48;
          }
          float v26 = (float)(a3 * -2.0) + 2.0;
          float v27 = v26 * v26;
          goto LABEL_53;
        case 10:
          float v24 = a3 * a3;
          goto LABEL_48;
        case 11:
          float v20 = 1.0;
          float v21 = 1.0 - v3;
          float v25 = v21 * (float)(v21 * v21);
LABEL_45:
          float v22 = v21 * v25;
LABEL_46:
          float v3 = v20 - (float)(v21 * v22);
          goto LABEL_22;
        case 12:
          if (a3 < 0.5)
          {
            float v24 = (float)(a3 * 16.0) * a3;
LABEL_48:
            float v23 = v24 * v3;
LABEL_49:
            float v3 = (float)(v23 * v3) * v3;
            goto LABEL_22;
          }
          float v26 = (float)(a3 * -2.0) + 2.0;
          float v27 = v26 * (float)(v26 * v26);
LABEL_53:
          *(float *)&double result = (float)((float)(v26 * (float)(v26 * v27)) * -0.5) + 1.0;
          break;
        case 13:
          float v3 = 1.0 - sqrtf(1.0 - (float)(a3 * a3));
          goto LABEL_22;
        case 14:
          float v3 = (float)((float)(a3 * a3) * (float)(3.0 - a3)) * 0.5;
          goto LABEL_22;
        case 15:
          float v3 = sinf((float)((float)(1.0 - a3) * -3.1416) * 0.5) + 1.0;
          goto LABEL_22;
        default:
          goto LABEL_22;
      }
      return result;
    default:
      float v3 = (float)((float)(a3 * a3) * a3) + (float)(sinf(a3 * -3.1416) * (float)(*(float *)&a1 * a3));
      goto LABEL_22;
  }
}

double sub_1B6995E48(float32x4_t a1)
{
  _Q2 = a1;
  int8x16_t v2 = (int8x16_t)vmulq_f32(a1, a1);
  float v3 = vaddv_f32(vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)));
  if (v3 == 0.0) {
    return 0.0;
  }
  float v5 = _Q2.f32[3];
  _S9 = _Q2.f32[1];
  float v7 = _Q2.f32[2];
  __asm { FMLA            S1, S9, V2.S[3] }
  float v13 = _S1 / v3;
  double v14 = (float)(_S1 / v3);
  if (v14 <= 0.4999)
  {
    if (v14 >= -0.4999)
    {
      float v19 = *(float *)&v2.i32[1];
      uint64_t v20 = v2.i64[1];
      float v21 = _Q2.f32[0];
      float v22 = *(float *)v2.i32;
      float v24 = atan2f((float)((float)(_Q2.f32[0] * _Q2.f32[3]) + (float)(_Q2.f32[1] * _Q2.f32[2]))+ (float)((float)(_Q2.f32[0] * _Q2.f32[3]) + (float)(_Q2.f32[1] * _Q2.f32[2])), *(float *)&v2.i32[3]+ (float)(*(float *)&v2.i32[2] + (float)((float)-*(float *)v2.i32 - *(float *)&v2.i32[1])));
      float v23 = asinf(v13 + v13);
      atan2f((float)((float)(v7 * v5) + (float)(v21 * _S9)) + (float)((float)(v7 * v5) + (float)(v21 * _S9)), *((float *)&v20 + 1) + (float)((float)(v22 - v19) - *(float *)&v20));
      return COERCE_DOUBLE(__PAIR64__(LODWORD(v23), LODWORD(v24)));
    }
    float v18 = atan2f(_Q2.f32[0], _Q2.f32[3]);
    *(float *)&double v16 = v18 + v18;
    int v17 = -1077342245;
  }
  else
  {
    float v15 = atan2f(_Q2.f32[0], _Q2.f32[3]);
    *(float *)&double v16 = v15 + v15;
    int v17 = 1070141403;
  }
  HIDWORD(v16) = v17;
  return v16;
}

void sub_1B6995FA8(void *a1@<X8>)
{
  *a1 = &unk_1F0FA4588;
}

uint64_t sub_1B6995FB8()
{
  return sub_1B6E31BA8();
}

uint64_t sub_1B6996018()
{
  return sub_1B6E31B08();
}

void sub_1B6996068(void *a1@<X8>)
{
  *a1 = &unk_1F0F5FCB0;
}

uint64_t sub_1B6996078()
{
  return sub_1B6E31BA8();
}

uint64_t sub_1B69960D8()
{
  return sub_1B6E31B08();
}

uint64_t sub_1B6996128(void *a1, uint64_t a2, uint64_t a3)
{
  char v4 = BYTE4(a3);
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  switch(v4)
  {
    case 1:
    case 2:
      sub_1B62C550C((uint64_t)v6, v7);
      sub_1B6E332A8();
      if (!v3)
      {
        sub_1B62C550C((uint64_t)v6, v7);
        sub_1B6E332C8();
        goto LABEL_5;
      }
      break;
    case 6:
      sub_1B62C550C((uint64_t)v6, v7);
      sub_1B6E332A8();
      if (!v3)
      {
        sub_1B62C550C((uint64_t)v6, v7);
        sub_1B6E33298();
        sub_1B62C550C((uint64_t)v6, v7);
        sub_1B6E33298();
        sub_1B62C550C((uint64_t)v6, v7);
        sub_1B6E332C8();
      }
      break;
    case 7:
      sub_1B62C550C((uint64_t)v6, v7);
      sub_1B6E332A8();
      break;
    default:
      sub_1B62C550C((uint64_t)v6, v7);
      sub_1B6E332A8();
      if (!v3)
      {
LABEL_5:
        sub_1B62C550C((uint64_t)v6, v7);
        sub_1B6E33298();
      }
      break;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
}

unint64_t sub_1B6996618@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1B6998EE0(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_DWORD *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 12) = BYTE4(v5);
  }
  return result;
}

uint64_t sub_1B6996650(void *a1)
{
  return sub_1B6996128(a1, *(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32));
}

uint64_t sub_1B6996678(uint64_t a1, uint64_t a2)
{
  return sub_1B69985A4(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32));
}

void sub_1B69966A0(void *a1@<X8>)
{
  *a1 = &unk_1F0F63B00;
}

uint64_t sub_1B69966B0(char a1)
{
  uint64_t result = 0x6E6F697461727564;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6465657073;
      break;
    case 2:
      uint64_t v3 = 0x546E69676562;
      goto LABEL_13;
    case 3:
      uint64_t result = 0x7366664F656D6974;
      break;
    case 4:
      uint64_t result = 0x6F43746165706572;
      break;
    case 5:
      uint64_t result = 0x657665726F747561;
      break;
    case 6:
      uint64_t result = 0x77726F466C6C6966;
      break;
    case 7:
      uint64_t result = 0xD000000000000010;
      break;
    case 8:
      uint64_t result = 0x7546676E69736165;
      break;
    case 9:
      uint64_t result = 0x746E65726170;
      break;
    case 10:
      uint64_t result = 0x69546C61626F6C67;
      break;
    case 11:
      uint64_t v3 = 0x546C61636F6CLL;
LABEL_13:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6D69000000000000;
      break;
    case 12:
      uint64_t result = 0x657669746361;
      break;
    case 13:
      uint64_t result = 0x6574656C706D6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B699688C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6395E70(0, &qword_1E9DD32C8, (uint64_t (*)(void))sub_1B69999B8, (uint64_t)&type metadata for AnimationTimeSource.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  float v10 = (char *)v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69999B8();
  sub_1B6E33A88();
  LOBYTE(v12[0]) = 0;
  sub_1B6E32F78();
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    sub_1B6E32F78();
    LOBYTE(v12[0]) = 2;
    sub_1B6E32F78();
    LOBYTE(v12[0]) = 3;
    sub_1B6E32F78();
    LOBYTE(v12[0]) = 4;
    sub_1B6E32F78();
    LOBYTE(v12[0]) = 5;
    sub_1B6E32F58();
    LOBYTE(v12[0]) = *(unsigned char *)(v3 + 21);
    char v14 = 6;
    sub_1B66C6198();
    sub_1B6E32FA8();
    LOBYTE(v12[0]) = *(unsigned char *)(v3 + 22);
    char v14 = 7;
    sub_1B6E32FA8();
    sub_1B6777804(v3 + 24, (uint64_t)v13);
    sub_1B6777804((uint64_t)v13, (uint64_t)v12);
    char v14 = 8;
    sub_1B66C6790();
    sub_1B6E32FA8();
    v12[0] = *(void *)(v3 + 40);
    char v14 = 9;
    sub_1B6657A10();
    sub_1B6E32FA8();
    LOBYTE(v12[0]) = 10;
    sub_1B6E32F78();
    LOBYTE(v12[0]) = 11;
    sub_1B6E32F78();
    LOBYTE(v12[0]) = 12;
    sub_1B6E32F58();
    LOBYTE(v12[0]) = 13;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6996C74(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_1B69966B0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1B69966B0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B6996D00()
{
  return sub_1B69966B0(*v0);
}

uint64_t sub_1B6996D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B69988C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B6996D30(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_1B6996D3C(uint64_t a1)
{
  unint64_t v2 = sub_1B69999B8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6996D78(uint64_t a1)
{
  unint64_t v2 = sub_1B69999B8();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6996DB4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B69994E8(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = *(_OWORD *)v7;
    double result = *(double *)&v7[10];
    *(_OWORD *)((char *)a2 + 42) = *(_OWORD *)&v7[10];
  }
  return result;
}

uint64_t sub_1B6996E04(void *a1)
{
  return sub_1B699688C(a1);
}

double sub_1B6996E48@<D0>(uint64_t a1@<X8>)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)a1 = _D0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 15) = 0;
  *(unsigned char *)(a1 + 36) = 7;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 40) = 0xFFFFFFFFLL;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 1;
  return result;
}

uint64_t sub_1B6996E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BasicAnimation();
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  v7(a2 + *(int *)(v4 + 40), 1, 1, a1);
  uint64_t v5 = a2 + *(int *)(v4 + 44);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, a1);
}

void sub_1B6996F44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[1];
  if (v3)
  {
    uint64_t v5 = *v2;
    uint64_t ObjectType = swift_getObjectType();
    swift_retain();
    sub_1B6B1BF68(v5, 0, ObjectType, a2);
    swift_release();
    *uint64_t v2 = v5;
    v2[1] = v3;
  }
}

uint64_t sub_1B6996FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6996E80(*(void *)(a1 + 16), a2);
}

double sub_1B6996FCC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void (**)(void))(a2 + 32);
  v6();
  uint64_t v7 = type metadata accessor for BasicAnimationRuntime();
  ((void (*)(uint64_t, uint64_t))v6)(a1, a2);
  char v8 = (void *)(a3 + *(int *)(v7 + 40));
  *char v8 = 0;
  v8[1] = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a3 + *(int *)(v7 + 44)) = 0xFFFFFFFFLL;
  return result;
}

double sub_1B6997060@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6996FCC(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

void sub_1B699706C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_1F0F718E8;
  *(void *)(a1 + 32) = &unk_1F0F717D0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = &unk_1F0F717F8;
  *(void *)(a1 + 64) = &unk_1F0F71820;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = &unk_1F0F71848;
  *(void *)(a1 + 96) = &unk_1F0F71870;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(void *)(a1 + 120) = &unk_1F0F71898;
  *(void *)(a1 + 128) = &unk_1F0F718C0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 1;
}

uint64_t sub_1B69970EC()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B699713C(char a1)
{
  uint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656E696C656D6974;
      break;
    case 2:
      uint64_t result = 0x656E696C656D6974;
      break;
    case 3:
      uint64_t result = 0x656E696C656D6974;
      break;
    case 4:
      uint64_t result = 0x656E696C656D6974;
      break;
    case 5:
      uint64_t result = 0x6C6F707265746E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B699722C(char a1)
{
  uint64_t result = 0x746567726174;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656E696C656D6974;
      break;
    case 2:
      uint64_t result = 0x656E696C656D6974;
      break;
    case 3:
      uint64_t result = 0x656E696C656D6974;
      break;
    case 4:
      uint64_t result = 0x656E696C656D6974;
      break;
    case 5:
      uint64_t result = 0x6C6F707265746E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B699731C()
{
  swift_getWitnessTable();

  return sub_1B6B37010();
}

uint64_t sub_1B6997388(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1B69973F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1B6997464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1B69974D4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69970EC();
  *a1 = result;
  return result;
}

uint64_t sub_1B699750C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1B699713C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B699753C()
{
  return sub_1B699722C(*v0);
}

uint64_t sub_1B6997548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = sub_1B6997138(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
  *a4 = result;
  return result;
}

uint64_t sub_1B6997578@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B696C09C();
  *a1 = result;
  return result;
}

uint64_t sub_1B69975A4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1B69975F8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t sub_1B699764C(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v13 = *(void *)(a2 + 16);
  type metadata accessor for KeyframeAnimation.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = sub_1B6E33038();
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v13 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A88();
  uint64_t v10 = *(void *)(v4 + 8);
  if (v10)
  {
    uint64_t v11 = HIDWORD(*(void *)v4);
    LODWORD(v15[0]) = *(void *)v4;
    DWORD1(v15[0]) = v11;
    *((void *)&v15[0] + 1) = v10;
    char v16 = 0;
    sub_1B6878CE8();
    swift_retain();
    sub_1B6E32FA8();
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v6);
      return swift_release();
    }
    swift_release();
  }
  LOBYTE(v15[0]) = *(unsigned char *)(v4 + 16);
  char v16 = 5;
  sub_1B6999440();
  sub_1B6E32FA8();
  if (!v3)
  {
    v15[0] = *(_OWORD *)(v4 + 24);
    *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(v4 + 33);
    char v16 = 1;
    sub_1B6999494();
    sub_1B6E32FA8();
    sub_1B6395E70(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
    if (swift_dynamicCastMetatype())
    {
      v15[0] = *(_OWORD *)(v4 + 56);
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(v4 + 65);
      char v16 = 2;
      sub_1B6E32FA8();
    }
    sub_1B6395E70(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    if (swift_dynamicCastMetatype())
    {
      v15[0] = *(_OWORD *)(v4 + 56);
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(v4 + 65);
      char v16 = 2;
      sub_1B6E32FA8();
      v15[0] = *(_OWORD *)(v4 + 88);
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(v4 + 97);
      char v16 = 3;
      sub_1B6E32FA8();
    }
    sub_1B6395E70(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    if (swift_dynamicCastMetatype())
    {
      v15[0] = *(_OWORD *)(v4 + 56);
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(v4 + 65);
      char v16 = 2;
      sub_1B6E32FA8();
      v15[0] = *(_OWORD *)(v4 + 88);
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(v4 + 97);
      char v16 = 3;
      sub_1B6E32FA8();
      v15[0] = *(_OWORD *)(v4 + 120);
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)(v4 + 129);
      char v16 = 4;
      sub_1B6E32FA8();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v9, v6);
}

uint64_t sub_1B6997B3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  type metadata accessor for KeyframeAnimation.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = sub_1B6E32EA8();
  uint64_t v46 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = a1[3];
  char v48 = a1;
  sub_1B62C14BC(a1, v8);
  sub_1B6E33A48();
  if (v2)
  {
    uint64_t v47 = v2;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v90 = 0;
    unint64_t v51 = &unk_1F0F71690;
    uint64_t v52 = &unk_1F0F717A8;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v48);
    uint64_t v66 = 0;
    *(void *)&long long v67 = 0;
    BYTE8(v67) = 0;
    *(_DWORD *)((char *)&v67 + 9) = v89[0];
    HIDWORD(v67) = *(_DWORD *)((char *)v89 + 3);
    char v68 = v52;
    uint64_t v69 = v51;
    uint64_t v70 = v90;
    char v71 = 1;
    *(_DWORD *)uint64_t v72 = *(_DWORD *)v88;
    *(_DWORD *)&v72[3] = *(_DWORD *)&v88[3];
    int v73 = &unk_1F0F716B8;
    char v74 = &unk_1F0F716E0;
    uint64_t v75 = v50;
    char v76 = 1;
    *(_DWORD *)uint64_t v77 = *(_DWORD *)v87;
    *(_DWORD *)&v77[3] = *(_DWORD *)&v87[3];
    long long v78 = &unk_1F0F71708;
    long long v79 = &unk_1F0F71730;
    uint64_t v80 = v49;
    char v81 = 1;
    *(_DWORD *)uint64_t v82 = *(_DWORD *)v86;
    *(_DWORD *)&v82[3] = *(_DWORD *)&v86[3];
    uint64_t v83 = &unk_1F0F71758;
    *(void *)&long long v84 = &unk_1F0F71780;
    *((void *)&v84 + 1) = 0;
    char v85 = 1;
    return sub_1B636BEC8((uint64_t)&v66);
  }
  else
  {
    LOBYTE(v53) = 1;
    unint64_t v9 = sub_1B6999398();
    sub_1B6E32DF8();
    uint64_t v43 = (void *)v9;
    float v12 = (void *)v66;
    uint64_t v11 = (void *)v67;
    int v42 = v68;
    uint64_t v90 = *((void *)&v67 + 1);
    swift_bridgeObjectRetain();
    uint64_t v52 = v12;
    swift_bridgeObjectRetain();
    unint64_t v51 = v11;
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_1B6E32E88();
    LOBYTE(v53) = 2;
    uint64_t v13 = sub_1B6E31D18();
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t v47 = v13;
    LOBYTE(v11) = sub_1B6E31AC8();
    swift_bridgeObjectRelease();
    if (v11)
    {
      LOBYTE(v53) = 2;
      sub_1B6E32DF8();
      id v41 = (void *)v66;
      uint64_t v50 = *((void *)&v67 + 1);
      uint64_t v44 = (void *)v67;
      int v40 = v68;
    }
    else
    {
      uint64_t v50 = 0;
      id v41 = &unk_1F0F716B8;
      int v40 = 1;
      uint64_t v44 = &unk_1F0F716E0;
    }
    uint64_t v66 = sub_1B6E32E88();
    uint64_t v14 = v7;
    LOBYTE(v53) = 3;
    char v15 = sub_1B6E31AC8();
    swift_bridgeObjectRelease();
    if (v15)
    {
      LOBYTE(v53) = 3;
      sub_1B6E32DF8();
      uint64_t v39 = (void *)v66;
      uint64_t v49 = *((void *)&v67 + 1);
      uint64_t v37 = (void *)v67;
      int v38 = v68;
    }
    else
    {
      uint64_t v49 = 0;
      uint64_t v39 = &unk_1F0F71708;
      int v38 = 1;
      uint64_t v37 = &unk_1F0F71730;
    }
    uint64_t v66 = sub_1B6E32E88();
    LOBYTE(v53) = 4;
    char v16 = sub_1B6E31AC8();
    swift_bridgeObjectRelease();
    int v17 = v44;
    if (v16)
    {
      LOBYTE(v53) = 4;
      sub_1B6E32DF8();
      float v18 = (void *)v66;
      long long v36 = v67;
      int v35 = v68;
    }
    else
    {
      float v18 = &unk_1F0F71758;
      int v35 = 1;
      *(void *)&long long v36 = &unk_1F0F71780;
      *((void *)&v36 + 1) = 0;
    }
    LOBYTE(v53) = 5;
    sub_1B69993EC();
    sub_1B6E32D78();
    if (v66 == 3) {
      char v19 = 0;
    }
    else {
      char v19 = v66;
    }
    char v63 = 0;
    sub_1B62A2730();
    sub_1B6E32DF8();
    uint64_t v43 = v18;
    uint64_t v44 = v17;
    uint64_t v47 = 0;
    uint64_t v21 = v64;
    uint64_t v20 = v65;
    uint64_t v22 = v46;
    uint64_t v46 = v64;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v4);
    *(void *)&long long v53 = v21;
    *((void *)&v53 + 1) = v20;
    char v23 = v19;
    LOBYTE(v54) = v19;
    float v25 = v51;
    float v24 = v52;
    *((void *)&v54 + 1) = v52;
    *(void *)&long long v55 = v51;
    uint64_t v26 = v90;
    *((void *)&v55 + 1) = v90;
    char v27 = v42;
    LOBYTE(v56) = v42;
    uint64_t v28 = v41;
    *((void *)&v56 + 1) = v41;
    *(void *)&long long v57 = v44;
    *((void *)&v57 + 1) = v50;
    LOBYTE(v21) = v40;
    LOBYTE(v58) = v40;
    *((void *)&v58 + 1) = v39;
    *(void *)&long long v59 = v37;
    *((void *)&v59 + 1) = v49;
    LOBYTE(v60) = v38;
    *((void *)&v60 + 1) = v43;
    long long v61 = v36;
    char v62 = v35;
    swift_retain();
    sub_1B636BFA4((uint64_t)&v53);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v48);
    uint64_t v66 = v46;
    *(void *)&long long v67 = v20;
    BYTE8(v67) = v23;
    *(_DWORD *)((char *)&v67 + 9) = v89[0];
    HIDWORD(v67) = *(_DWORD *)((char *)v89 + 3);
    char v68 = v24;
    uint64_t v69 = v25;
    uint64_t v70 = v26;
    char v71 = v27;
    *(_DWORD *)uint64_t v72 = *(_DWORD *)v88;
    *(_DWORD *)&v72[3] = *(_DWORD *)&v88[3];
    int v73 = v28;
    char v74 = v44;
    uint64_t v75 = v50;
    char v76 = v21;
    *(_DWORD *)uint64_t v77 = *(_DWORD *)v87;
    *(_DWORD *)&v77[3] = *(_DWORD *)&v87[3];
    long long v78 = v39;
    long long v79 = v37;
    uint64_t v80 = v49;
    char v81 = v38;
    *(_DWORD *)uint64_t v82 = *(_DWORD *)v86;
    *(_DWORD *)&v82[3] = *(_DWORD *)&v86[3];
    uint64_t v83 = v43;
    long long v84 = v36;
    char v85 = v35;
    uint64_t result = sub_1B636BEC8((uint64_t)&v66);
    long long v29 = v60;
    uint64_t v30 = v45;
    *(_OWORD *)(v45 + 96) = v59;
    *(_OWORD *)(v30 + 112) = v29;
    *(_OWORD *)(v30 + 128) = v61;
    *(unsigned char *)(v30 + 144) = v62;
    long long v31 = v56;
    *(_OWORD *)(v30 + 32) = v55;
    *(_OWORD *)(v30 + 48) = v31;
    long long v32 = v58;
    *(_OWORD *)(v30 + 64) = v57;
    *(_OWORD *)(v30 + 80) = v32;
    long long v33 = v54;
    *(_OWORD *)uint64_t v30 = v53;
    *(_OWORD *)(v30 + 16) = v33;
  }
  return result;
}

double sub_1B699844C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6997B3C(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(unsigned char *)(a2 + 144) = v10;
    long long v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_1B69984C8(void *a1, uint64_t a2)
{
  return sub_1B699764C(a1, a2);
}

uint64_t sub_1B69984E4()
{
  return sub_1B699C708(&qword_1E9DD32A8, &qword_1E9DD32B0);
}

double sub_1B6998514@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for KeyframeAnimationRuntime();
  *a3 = 0;
  a3[1] = 0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  long long v7 = (void *)((char *)a3 + *(int *)(v6 + 44));
  *long long v7 = 0;
  v7[1] = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)((char *)a3 + *(int *)(v6 + 48)) = 0xFFFFFFFFLL;
  return result;
}

double sub_1B6998598@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1B6998514(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t sub_1B69985A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(BYTE4(a2))
  {
    case 1:
      if (BYTE4(a4) == 1) {
        goto LABEL_7;
      }
      goto LABEL_92;
    case 2:
      if (BYTE4(a4) != 2) {
        goto LABEL_92;
      }
LABEL_7:
      uint64_t result = a1 == a3 && *((float *)&a1 + 1) == *((float *)&a3 + 1);
      break;
    case 3:
      if (BYTE4(a4) != 3) {
        goto LABEL_92;
      }
      goto LABEL_15;
    case 4:
      if (BYTE4(a4) != 4) {
        goto LABEL_92;
      }
      goto LABEL_15;
    case 5:
      if (BYTE4(a4) == 5) {
        goto LABEL_15;
      }
      goto LABEL_92;
    case 6:
      if (BYTE4(a4) != 6) {
        goto LABEL_92;
      }
      BOOL v5 = *(float *)&a1 == *(float *)&a3;
      if (*((float *)&a1 + 1) != *((float *)&a3 + 1)) {
        BOOL v5 = 0;
      }
      uint64_t result = a2 == a4 && v5;
      break;
    case 7:
      switch(a1)
      {
        case 1:
          if (BYTE4(a4) != 7 || a3 != 1 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 2:
          if (BYTE4(a4) != 7 || a3 != 2 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 3:
          if (BYTE4(a4) != 7 || a3 != 3 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 4:
          if (BYTE4(a4) != 7 || a3 != 4 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 5:
          if (BYTE4(a4) != 7 || a3 != 5 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 6:
          if (BYTE4(a4) != 7 || a3 != 6 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 7:
          if (BYTE4(a4) != 7 || a3 != 7 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 8:
          if (BYTE4(a4) != 7 || a3 != 8 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 9:
          if (BYTE4(a4) != 7 || a3 != 9 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 10:
          if (BYTE4(a4) != 7 || a3 != 10 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 11:
          if (BYTE4(a4) != 7 || a3 != 11 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 12:
          if (BYTE4(a4) != 7 || a3 != 12 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 13:
          if (BYTE4(a4) != 7 || a3 != 13 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 14:
          if (BYTE4(a4) != 7 || a3 != 14 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        case 15:
          if (BYTE4(a4) != 7 || a3 != 15 || a4) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
        default:
          if (BYTE4(a4) != 7 || a3 != 0 || a4 != 0) {
            goto LABEL_92;
          }
          uint64_t result = 1;
          break;
      }
      return result;
    default:
      if (BYTE4(a4)) {
LABEL_92:
      }
        uint64_t result = 0;
      else {
LABEL_15:
      }
        uint64_t result = *(float *)&a1 == *(float *)&a3;
      break;
  }
  return result;
}

uint64_t sub_1B69988C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465657073 && a2 == 0xE500000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D69546E69676562 && a2 == 0xE900000000000065 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7366664F656D6974 && a2 == 0xEA00000000007465 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F43746165706572 && a2 == 0xEB00000000746E75 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657665726F747561 && a2 == 0xEC00000073657372 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x77726F466C6C6966 && a2 == 0xEF65646F4D647261 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B6F40310 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7546676E69736165 && a2 == 0xEE006E6F6974636ELL || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x746E65726170 && a2 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x69546C61626F6C67 && a2 == 0xEA0000000000656DLL || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6D69546C61636F6CLL && a2 == 0xE900000000000065 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x657669746361 && a2 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6574656C706D6F63 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

unint64_t sub_1B6998EE0(void *a1)
{
  unint64_t v3 = (unint64_t)sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A18();
  if (v1)
  {
LABEL_3:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B62C550C((uint64_t)v14, v15);
    uint64_t v4 = sub_1B6E33148();
    unint64_t v3 = v4;
    switch(v4)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        break;
      case 16:
      case 19:
      case 20:
      case 21:
        sub_1B62C550C((uint64_t)v14, v15);
        sub_1B6E33138();
        unint64_t v3 = v8;
        break;
      case 17:
      case 18:
        sub_1B62C550C((uint64_t)v14, v15);
        unsigned int v6 = sub_1B6E33178();
        sub_1B62C550C((uint64_t)v14, v15);
        sub_1B6E33138();
        unint64_t v3 = v6 | ((unint64_t)v7 << 32);
        break;
      case 22:
        sub_1B62C550C((uint64_t)v14, v15);
        sub_1B6E33138();
        unsigned int v10 = v9;
        sub_1B62C550C((uint64_t)v14, v15);
        sub_1B6E33138();
        unsigned int v12 = v11;
        sub_1B62C550C((uint64_t)v14, v15);
        sub_1B6E33178();
        unint64_t v3 = v10 | ((unint64_t)v12 << 32);
        break;
      default:
        sub_1B62C1550((uint64_t)v14, (uint64_t)v13);
        sub_1B6E32998();
        swift_allocError();
        sub_1B6E32958();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
        swift_willThrow();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
        goto LABEL_3;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

unint64_t sub_1B699932C()
{
  unint64_t result = qword_1EB97FEF8;
  if (!qword_1EB97FEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FEF8);
  }
  return result;
}

uint64_t type metadata accessor for KeyframeAnimation.CodingKeys()
{
  return sub_1B62C36EC();
}

unint64_t sub_1B6999398()
{
  unint64_t result = qword_1EB97EC60;
  if (!qword_1EB97EC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EC60);
  }
  return result;
}

unint64_t sub_1B69993EC()
{
  unint64_t result = qword_1EB97E5A0;
  if (!qword_1EB97E5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E5A0);
  }
  return result;
}

unint64_t sub_1B6999440()
{
  unint64_t result = qword_1E9DD32B8;
  if (!qword_1E9DD32B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD32B8);
  }
  return result;
}

unint64_t sub_1B6999494()
{
  unint64_t result = qword_1E9DD32C0;
  if (!qword_1E9DD32C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD32C0);
  }
  return result;
}

uint64_t sub_1B69994E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6395E70(0, &qword_1EB9809F0, (uint64_t (*)(void))sub_1B69999B8, (uint64_t)&type metadata for AnimationTimeSource.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v35 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  unsigned int v9 = (char *)&v31 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69999B8();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v6;
  LOBYTE(v36) = 0;
  sub_1B6E32DC8();
  int v12 = v11;
  LOBYTE(v36) = 1;
  sub_1B6E32DC8();
  int v14 = v13;
  LOBYTE(v36) = 2;
  sub_1B6E32DC8();
  int v16 = v15;
  LOBYTE(v36) = 3;
  sub_1B6E32DC8();
  int v18 = v17;
  LOBYTE(v36) = 4;
  sub_1B6E32DC8();
  int v20 = v19;
  LOBYTE(v36) = 5;
  int v39 = sub_1B6E32DA8();
  char v40 = 6;
  sub_1B66C6144();
  sub_1B6E32DF8();
  char v21 = v36;
  char v40 = 7;
  sub_1B6E32DF8();
  char v22 = v36;
  char v40 = 8;
  sub_1B66C673C();
  sub_1B6E32DF8();
  uint64_t v34 = v36;
  int v32 = v38;
  int v33 = v37;
  char v40 = 9;
  sub_1B62B1EA8();
  sub_1B6E32DF8();
  uint64_t v23 = v36;
  LOBYTE(v36) = 10;
  sub_1B6E32DC8();
  int v25 = v24;
  LOBYTE(v36) = 11;
  sub_1B6E32DC8();
  int v27 = v26;
  LOBYTE(v36) = 12;
  char v28 = sub_1B6E32DA8();
  LOBYTE(v36) = 13;
  char v29 = sub_1B6E32DA8();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v35);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 4) = v14;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 12) = v18;
  *(_DWORD *)(a2 + 16) = v20;
  *(unsigned char *)(a2 + 20) = v39 & 1;
  *(unsigned char *)(a2 + 21) = v21;
  *(unsigned char *)(a2 + 22) = v22;
  *(void *)(a2 + 24) = v34;
  *(_DWORD *)(a2 + 32) = v33;
  *(unsigned char *)(a2 + 36) = v32;
  *(void *)(a2 + 40) = v23;
  *(_DWORD *)(a2 + 48) = v25;
  *(_DWORD *)(a2 + 52) = v27;
  *(unsigned char *)(a2 + 56) = v28 & 1;
  *(unsigned char *)(a2 + 57) = v29 & 1;
  return result;
}

unint64_t sub_1B69999B8()
{
  unint64_t result = qword_1EB97F1E8;
  if (!qword_1EB97F1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F1E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnimationTimeSource.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AnimationTimeSource.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6999B68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimeSource.CodingKeys()
{
  return &type metadata for AnimationTimeSource.CodingKeys;
}

unsigned char *sub_1B6999BA0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6999C6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_1B6999C94()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B6999D50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    int v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v16(v14, v15, v4);
    int v17 = (_OWORD *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8);
    int v18 = (_OWORD *)((v7 + v15) & 0xFFFFFFFFFFFFFFF8);
    *int v17 = *v18;
    *(void *)(((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t sub_1B6999EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_unknownObjectRelease();
}

void *sub_1B6999F48(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  unint64_t v12 = (v10 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = *(void *)(v9 + 48) + 7;
  uint64_t v14 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  *(void *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

void *sub_1B699A024(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 15;
  swift_retain();
  swift_release();
  *(void *)(v6 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v10 = (v9 + 8 + (v6 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  unint64_t v11 = (v9 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 40) + 7;
  uint64_t v13 = (void *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v13[1] = v15;
  int v16 = (_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  int v17 = (_DWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8);
  *int v16 = *v17;
  v16[1] = v17[1];
  return a1;
}

void *sub_1B699A12C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32) + 7;
  uint64_t v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (_OWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_1B699A1F0(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  unint64_t v11 = (v9 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  (*(void (**)(uint64_t, unint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24) + 7;
  uint64_t v13 = (void *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  swift_unknownObjectRelease();
  v13[1] = v15;
  int v16 = (_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  int v17 = (_DWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8);
  *int v16 = *v17;
  v16[1] = v17[1];
  return a1;
}

uint64_t sub_1B699A2E0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B699A458);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 > 0x7FFFFFFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                  + v6
                                                                  + 8) & ~v6);
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void sub_1B699A46C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 19) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 > 0x7FFFFFFE)
            {
              unint64_t v18 = (((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
              int v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if (a2 > 0x7FFFFFFE)
            {
              *(void *)a1 = 0;
              *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
            }
            else
            {
              *(void *)a1 = a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8)
         + 19) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8)
       + 19) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8)
       + 19) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1B699A684);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for KeyframeAnimationRuntime()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B699A6C4()
{
  uint64_t result = sub_1B6E324B8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B699A768(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + v7;
  unint64_t v11 = ((v10 + ((v7 + 17) & ~(unint64_t)v7)) & ~(unint64_t)v7)
      + v9;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v8;
    uint64_t v17 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v17;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    unint64_t v18 = (void *)((a1 + v8 + 17) & ~v8);
    int v19 = (const void *)(((unint64_t)a2 + v8 + 17) & ~v8);
    int v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v20(v19, 1, v4))
    {
      memcpy(v18, v19, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v4);
    }
    char v21 = (void *)(((unint64_t)v18 + v10) & v16);
    char v22 = (const void *)(((unint64_t)v19 + v10) & v16);
    if (v20(v22, 1, v4))
    {
      memcpy(v21, v22, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v21, v22, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_1B699A980(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(v4 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v6 = a1 + v5 + 17;
  uint64_t v7 = ~v5;
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v8(v6 & ~v5, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v6 & ~v5, v4);
  }
  uint64_t v9 = (v6 | v5) + *(void *)(v13 + 64);
  if (!*(_DWORD *)(v13 + 84)) {
    ++v9;
  }
  uint64_t v10 = v9 & v7;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9 & v7, 1, v4);
  if (!result)
  {
    int v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v10, v4);
  }
  return result;
}

uint64_t sub_1B699AAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v7 + 17 + a1;
  uint64_t v18 = ~v7;
  uint64_t v9 = v7 + 17 + a2;
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain();
  int v19 = v10;
  if (v10((const void *)(v9 & ~v7), 1, v5))
  {
    int v11 = *(_DWORD *)(v6 + 84);
    size_t v12 = *(void *)(v6 + 64);
    if (v11) {
      size_t v13 = *(void *)(v6 + 64);
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v13);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8 & ~v7, v9 & ~v7, v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
    int v11 = *(_DWORD *)(v6 + 84);
    size_t v12 = *(void *)(v6 + 64);
  }
  if (v11) {
    size_t v14 = v12;
  }
  else {
    size_t v14 = v12 + 1;
  }
  uint64_t v15 = (void *)(((v8 | v7) + v14) & v18);
  uint64_t v16 = (const void *)(((v9 | v7) + v14) & v18);
  if (v19(v16, 1, v5))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1B699ACE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v8 + 17 + a1;
  uint64_t v23 = v8 + 17 + a2;
  uint64_t v24 = ~v8;
  uint64_t v10 = (const void *)(v23 & ~v8);
  int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9 & ~v8, 1, v6);
  int v13 = v11((uint64_t)v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v7 + 16))(v9 & ~v8, v10, v6);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9 & ~v8, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v7 + 24))(v9 & ~v8, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9 & ~v8, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy((void *)(v9 & ~v8), v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    size_t v17 = *(void *)(v7 + 64);
  }
  else {
    size_t v17 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v18 = (void *)(((v9 | v8) + v17) & v24);
  int v19 = (const void *)(((v23 | v8) + v17) & v24);
  int v20 = v11((uint64_t)v18, 1, v6);
  int v21 = v11((uint64_t)v19, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(v18, v19, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v18, v6);
    goto LABEL_20;
  }
  if (v21)
  {
LABEL_20:
    memcpy(v18, v19, v17);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v18, v19, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
  return a1;
}

uint64_t sub_1B699AFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v6 + 17 + a1;
  uint64_t v16 = ~v6;
  uint64_t v8 = v6 + 17 + a2;
  size_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17(v8 & ~v6, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = *(void *)(v5 + 64);
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy((void *)(v7 & ~v6), (const void *)(v8 & ~v6), v11);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 & ~v6, v8 & ~v6, v4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v7 & ~v6, 0, 1, v4);
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  if (v9) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  int v13 = (void *)(((v7 | v6) + v12) & v16);
  int v14 = (const void *)(((v8 | v6) + v12) & v16);
  if (v17((uint64_t)v14, 1, v4))
  {
    memcpy(v13, v14, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v13, v14, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
  }
  return a1;
}

uint64_t sub_1B699B19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v8 + 17 + a1;
  uint64_t v23 = v8 + 17 + a2;
  uint64_t v24 = ~v8;
  size_t v10 = (const void *)(v23 & ~v8);
  size_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9 & ~v8, 1, v6);
  int v13 = v11((uint64_t)v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v7 + 32))(v9 & ~v8, v10, v6);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9 & ~v8, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, const void *, uint64_t))(v7 + 40))(v9 & ~v8, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9 & ~v8, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy((void *)(v9 & ~v8), v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    size_t v17 = *(void *)(v7 + 64);
  }
  else {
    size_t v17 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v18 = (void *)(((v9 | v8) + v17) & v24);
  int v19 = (const void *)(((v23 | v8) + v17) & v24);
  int v20 = v11((uint64_t)v18, 1, v6);
  int v21 = v11((uint64_t)v19, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(v18, v19, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v18, v6);
    goto LABEL_20;
  }
  if (v21)
  {
LABEL_20:
    memcpy(v18, v19, v17);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v18, v19, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
  return a1;
}

uint64_t sub_1B699B454(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = ((v9 + v8 + ((v8 + 17) & ~v8)) & ~v8) + v9;
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v6 > 0x7FFFFFFE)
      {
        unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v8 + 17) & ~v8);
        if (v18 >= 2) {
          return v18 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v17 = *((void *)a1 + 1);
        if (v17 >= 0xFFFFFFFF) {
          LODWORD(v17) = -1;
        }
        if ((v17 + 1) >= 2) {
          return v17;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void sub_1B699B64C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + v11 + ((v11 + 17) & ~v11)) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x1B699B97CLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if (v9 > 0x7FFFFFFE)
        {
          int v20 = (unsigned char *)((unint64_t)&a1[v11 + 17] & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            int v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v26 = (unint64_t)&a1[v11 + 17] & ~v11;
            v25(v26, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)int v20 = v22;
                  break;
                case 3:
                  *(_WORD *)int v20 = v22;
                  v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)int v20 = v22;
                  break;
                default:
                  *int v20 = v22;
                  break;
              }
            }
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *((void *)a1 + 1) = a2;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for BasicAnimation()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B699B9CC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B699BA70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  uint64_t v10 = v7 + 7;
  unint64_t v11 = ((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v8;
    unsigned int v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v16(a1, a2, v5);
    unint64_t v17 = ((unint64_t)a2 + v9) & v15;
    v16((uint64_t *)(((unint64_t)v4 + v9) & v15), (uint64_t *)v17, v5);
    int v18 = (_OWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8);
    int v19 = (_OWORD *)((v10 + v17) & 0xFFFFFFFFFFFFFFF8);
    *int v18 = *v19;
    *(void *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v4;
}

uint64_t sub_1B699BBD8(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  v5(a1, v3);
  v5((*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);

  return swift_unknownObjectRelease();
}

uint64_t sub_1B699BC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  size_t v12 = (_OWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (_OWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *size_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1B699BD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  size_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *size_t v12 = *v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v12[1] = v14;
  uint64_t v15 = (_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v16 = (_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t sub_1B699BE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  size_t v12 = (_OWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (_OWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  *size_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B699BF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9 + a1) & ~v9;
  uint64_t v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  size_t v12 = (void *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *size_t v12 = *v13;
  swift_unknownObjectRelease();
  v12[1] = v14;
  uint64_t v15 = (_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v16 = (_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t sub_1B699C008(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = v6 + v8;
  uint64_t v10 = v6 + 7;
  if (v7 < a2)
  {
    unint64_t v11 = ((((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v12 = a2 - v7;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B699C17CLL);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_22:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v7 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v20 = *(void *)((v10 + (((unint64_t)a1 + v9) & ~v8)) & 0xFFFFFFFFFFFFFFF8);
  if (v20 >= 0xFFFFFFFF) {
    LODWORD(v20) = -1;
  }
  if ((v20 + 1) >= 2) {
    return v20;
  }
  else {
    return 0;
  }
}

void sub_1B699C190(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = v9 + v10;
  uint64_t v12 = (v9 + v10) & ~v10;
  uint64_t v13 = v9 + 7;
  size_t v14 = ((((v13 + v12) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              int v23 = (void *)((v13 + ((unint64_t)&a1[v11] & ~v10)) & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *int v23 = 0;
                v23[1] = 0;
                *(_DWORD *)int v23 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *int v23 = a2;
              }
            }
            else
            {
              int v22 = *(void (**)(void))(v6 + 56);
              v22();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = a3 - v8;
    if (((((v13 + v12) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (v14) {
    int v20 = 1;
  }
  else {
    int v20 = v19;
  }
  if (v14)
  {
    unsigned int v21 = ~v8 + a2;
    bzero(a1, v14);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1B699C3A8);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for BasicAnimationRuntime()
{
  return sub_1B62C36EC();
}

unsigned char *storeEnumTagSinglePayload for Interpolation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B699C4B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Interpolation()
{
  return &type metadata for Interpolation;
}

void *initializeBufferWithCopyOfBuffer for EasingFunction(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EasingFunction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EasingFunction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 249;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 13) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B699C590(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 12) <= 6u) {
    return *(unsigned __int8 *)(a1 + 12);
  }
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t sub_1B699C5A8(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(void *)uint64_t result = a2 - 7;
    *(_DWORD *)(result + 8) = 0;
    LOBYTE(a2) = 7;
  }
  *(unsigned char *)(result + 12) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EasingFunction()
{
  return &type metadata for EasingFunction;
}

unsigned char *storeEnumTagSinglePayload for FillMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B699C6A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FillMode()
{
  return &type metadata for FillMode;
}

uint64_t sub_1B699C6D8()
{
  return sub_1B699C708(&qword_1E9DD32D0, &qword_1E9DD32D8);
}

uint64_t sub_1B699C708(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6399A70(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B699C75C()
{
  unint64_t result = qword_1E9DD32E0;
  if (!qword_1E9DD32E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD32E0);
  }
  return result;
}

uint64_t sub_1B699C7B0()
{
  return sub_1B699C708(&qword_1E9DD32E8, &qword_1E9DD32F0);
}

unint64_t sub_1B699C7E4()
{
  unint64_t result = qword_1E9DD32F8;
  if (!qword_1E9DD32F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD32F8);
  }
  return result;
}

uint64_t sub_1B699C838()
{
  return swift_getWitnessTable();
}

unint64_t sub_1B699C858()
{
  unint64_t result = qword_1E9DD3300[0];
  if (!qword_1E9DD3300[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9DD3300);
  }
  return result;
}

unint64_t sub_1B699C8B0()
{
  unint64_t result = qword_1EB97F1F8;
  if (!qword_1EB97F1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F1F8);
  }
  return result;
}

unint64_t sub_1B699C908()
{
  unint64_t result = qword_1EB97F1F0;
  if (!qword_1EB97F1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F1F0);
  }
  return result;
}

uint64_t sub_1B699C95C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B699C978()
{
  return swift_getWitnessTable();
}

unint64_t sub_1B699C994()
{
  unint64_t result = qword_1EB97E598;
  if (!qword_1EB97E598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E598);
  }
  return result;
}

uint64_t sub_1B699C9EC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = v9;
  unsigned __int8 v38 = a1;
  uint64_t v39 = a2;
  uint64_t v32 = *(void *)(a5 - 8);
  uint64_t v33 = a8;
  MEMORY[0x1F4188790](a1, a2);
  char v40 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness, v15);
  int v17 = (char *)&v30 - v16;
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(v20 - 8);
  uint64_t v36 = v20;
  MEMORY[0x1F4188790](v20, v21);
  uint64_t v42 = v8;
  uint64_t v43 = (char *)&v30 - v22;
  uint64_t v41 = a3;
  uint64_t v23 = sub_1B6E31FC8();
  if (!v23) {
    return sub_1B6E31C88();
  }
  uint64_t v24 = v23;
  uint64_t v31 = a5;
  uint64_t v45 = sub_1B6E314A8();
  uint64_t v37 = sub_1B6E32AB8();
  sub_1B6E32A38();
  sub_1B6E31F98();
  int v25 = (void (**)(char *))(v14 + 16);
  unint64_t v26 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v27 = AssociatedTypeWitness;
  while (1)
  {
    char v28 = (void (*)(char *, void))sub_1B6E320B8();
    (*v25)(v17);
    v28(v44, 0);
    v38(v17, v40);
    if (v10) {
      break;
    }
    uint64_t v10 = 0;
    (*v26)(v17, v27);
    sub_1B6E32A98();
    sub_1B6E31FF8();
    if (!--v24)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v43, v36);
      return v45;
    }
  }
  (*v26)(v17, v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v43, v36);
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v33, v40, v31);
}

void *sub_1B699CDAC(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4 = a3 << 6;
  uint64_t v5 = (void *)sub_1B62F1868(a1, a3 << 6);
  uint64_t v7 = v6;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v10 = v5;
    uint64_t v8 = &v9[v7];
  }
  memcpy(v8, a2, v4);
  return v5;
}

void *sub_1B699CE50(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4 = 16 * a3;
  uint64_t v5 = (void *)sub_1B62F1868(a1, 16 * a3);
  uint64_t v7 = v6;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v10 = v5;
    uint64_t v8 = &v9[v7];
  }
  memcpy(v8, a2, v4);
  return v5;
}

void *sub_1B699CEF4(uint64_t a1, uint64_t a2, __n128 a3)
{
  int v3 = (void *)sub_1B62F1868(a1, 16 * a2);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) != (id)2)
  {
    uint64_t v8 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v9 = v3;
    if (v7 >= 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v7 + 15;
    }
    if (v8) {
      BOOL v11 = (unint64_t)(v7 + 15) >= 0x1F;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      uint64_t v12 = v10 >> 4;
      uint64_t v13 = (__n128 *)&v8[v5];
      do
      {
        *v13++ = a3;
        --v12;
      }
      while (v12);
    }
  }
  return v3;
}

void sub_1B699CFAC()
{
  swift_getTupleTypeMetadata2();

  JUMPOUT(0x1BA9B3960);
}

uint64_t sub_1B699D000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41842B8](a1, a2, a3, a4, MEMORY[0x1E4FBB590]);
}

uint64_t sub_1B699D010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41842C8](a1, a2, a3, a4, MEMORY[0x1E4FBB590]);
}

uint64_t sub_1B699D01C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2, v7);
  id v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12.n128_f64[0] = MEMORY[0x1F4188790](v10, v11);
  uint64_t v14 = &v23[-v13];
  uint64_t v16 = *(void *)(a1 + *(int *)(v15 + 48));
  uint64_t v17 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v17 + 32))(&v23[-v13], a1, v4, v12);
  *(void *)&v14[*(int *)(TupleTypeMetadata2 + 48)] = v16;
  uint64_t v18 = *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 16))(v9, v14, v4);
  *(void *)&v9[v18] = v16;
  sub_1B6E31D18();
  uint64_t v19 = (void (*)(unsigned char *, void))sub_1B6E31D68();
  uint64_t v21 = v20;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v17 + 40))(v20, v9, v4);
  *(void *)(v21 + *(int *)(TupleTypeMetadata2 + 48)) = v16;
  v19(v23, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v14, TupleTypeMetadata2);
}

void (*sub_1B699D21C(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  swift_getTupleTypeMetadata2();
  sub_1B6E31D18();
  v2[4] = sub_1B6E31D68();
  return sub_1B638329C;
}

uint64_t sub_1B699D2C0()
{
  return swift_bridgeObjectRelease();
}

void (*sub_1B699D300(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = sub_1B6D67480(v8, a2, a3, a4);
  return sub_1B699D378;
}

void sub_1B699D378(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_1B699D3C0()
{
  return sub_1B6E316D8();
}

uint64_t sub_1B699D444()
{
  swift_getWitnessTable();

  return sub_1B6E31F58();
}

void *sub_1B699D4B4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B699D980(a1, a2, a3, MEMORY[0x1E4FBB618]);
}

uint64_t sub_1B699D4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1B699D550()
{
  swift_getWitnessTable();

  return sub_1B6E31F38();
}

uint64_t sub_1B699D5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

void sub_1B699D648(void *a1@<X8>)
{
  sub_1B699CFAC();
  *a1 = v2;
}

void (*sub_1B699D67C(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v4 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v6;
  size_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = (char *)malloc(v7);
  a1[2] = (uint64_t)v8;
  id v9 = (char *)malloc(v7);
  a1[3] = (uint64_t)v9;
  sub_1B6E31D78();
  uint64_t v10 = *(void *)&v9[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(v8, v9, v4);
  *(void *)&v8[*(int *)(TupleTypeMetadata2 + 48)] = v10;
  return sub_1B699D7BC;
}

void sub_1B699D7BC(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  unint64_t v1 = (void *)a1[3];
  (*(void (**)(void *, void))(a1[1] + 8))(v2, *a1);
  free(v1);

  free(v2);
}

uint64_t sub_1B699D810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1B6D677F4(a1, a2, WitnessTable, a3);
}

uint64_t sub_1B699D878()
{
  swift_getWitnessTable();

  return sub_1B6E31F78();
}

uint64_t sub_1B699D8F8()
{
  swift_getWitnessTable();

  return sub_1B6E31F48();
}

void *sub_1B699D968(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B699D980(a1, a2, a3, MEMORY[0x1E4FBB610]);
}

void *sub_1B699D980(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x1E4FBB590]);
  *a1 = v9;
  return result;
}

void sub_1B699D9F8(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1B699DA04(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1B699DA58()
{
  swift_getWitnessTable();

  return sub_1B6E32018();
}

uint64_t sub_1B699DAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  v8[2] = a2;
  uint64_t v2 = type metadata accessor for IndexedArray();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  uint64_t v9 = sub_1B699C9EC((void (*)(char *, char *))sub_1B69A21C8, (uint64_t)v8, v2, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v5);
  sub_1B62CB234(0, (unint64_t *)&qword_1EB9802F0, v4, MEMORY[0x1E4FBB320]);
  sub_1B6646D3C();
  uint64_t v6 = sub_1B6E31638();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1B699DBBC@<X0>(void *a1@<X8>)
{
  sub_1B6E31948();
  swift_getTupleTypeMetadata2();
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  uint64_t result = sub_1B6E33458();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

uint64_t sub_1B699DCA0(uint64_t a1)
{
  return sub_1B699DAB0(*v1, *(void *)(a1 + 16));
}

uint64_t sub_1B699DCB0(uint64_t a1)
{
  uint64_t v2 = sub_1B6E339D8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63998E8(0, (unint64_t *)&qword_1E9DD2C20, MEMORY[0x1E4FBC420], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v10 = (char *)v13 - v9;
  v13[1] = a1;
  v13[0] = MEMORY[0x1E4FBC860];
  uint64_t v11 = sub_1B6E339B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  type metadata accessor for IndexedArray();
  sub_1B63998E8(0, &qword_1E9DD2C28, (uint64_t (*)(uint64_t))sub_1B6967AC0, MEMORY[0x1E4FBB320]);
  sub_1B6967B88();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E4FBC430], v2);
  swift_bridgeObjectRetain();
  return sub_1B6E339F8();
}

uint64_t sub_1B699DEDC()
{
  return sub_1B699DCB0(*v0);
}

uint64_t sub_1B699DEEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B699DF7C(uint64_t a1)
{
  unint64_t v2 = sub_1B69A2A6C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B699DFB8(uint64_t a1)
{
  unint64_t v2 = sub_1B69A2A6C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B699DFF4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B69A2AC0(0, &qword_1E9DD33A8, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v13 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69A2A6C();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  int v11 = sub_1B6E32E28();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  return result;
}

uint64_t sub_1B699E17C(void *a1)
{
  sub_1B69A2AC0(0, &qword_1E9DD33B8, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69A2A6C();
  sub_1B6E33A88();
  sub_1B6E32FD8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1B699E2C4(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1B699E2CC(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v5 = *a1;
  if (qword_1EB985418 != -1) {
    swift_once();
  }
  uint64_t v6 = *(void *)(v2 + 264);
  long long v7 = 0uLL;
  if (*(void *)(v6 + 16))
  {
    uint64_t v8 = *((void *)a1 + 11);
    int v25 = dword_1EB985420 & v5;
    long long v26 = *(_OWORD *)(a1 + 2);
    long long v27 = *(_OWORD *)(a1 + 6);
    long long v28 = *(_OWORD *)(a1 + 10);
    long long v29 = *(_OWORD *)(a1 + 14);
    long long v30 = *(_OWORD *)(a1 + 18);
    uint64_t v31 = v8;
    sub_1B6311200((int64x2_t *)&v25);
    if (v10)
    {
      uint64_t v11 = *(void *)(v6 + 56) + 112 * v9;
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(v11 + 8);
      uint64_t v14 = *(void *)(v11 + 16);
      uint64_t v15 = *(unsigned __int8 *)(v11 + 24);
      long long v23 = *(_OWORD *)(v11 + 48);
      long long v24 = *(_OWORD *)(v11 + 32);
      long long v21 = *(_OWORD *)(v11 + 88);
      long long v22 = *(_OWORD *)(v11 + 72);
      uint64_t v16 = *(void *)(v11 + 64);
      uint64_t v17 = *(void *)(v11 + 104);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      long long v19 = v21;
      long long v18 = v22;
      long long v20 = v23;
      long long v7 = v24;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      long long v20 = 0uLL;
      long long v18 = 0uLL;
      long long v19 = 0uLL;
      long long v7 = 0uLL;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    long long v20 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
  }
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v20;
  *(void *)(a2 + 64) = v16;
  *(_OWORD *)(a2 + 72) = v18;
  *(_OWORD *)(a2 + 88) = v19;
  *(void *)(a2 + 104) = v17;
}

uint64_t sub_1B699E460(uint64_t a1)
{
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(_DWORD *)(v1 + 24) = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(v1 + 48) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(v1 + 56) = *(void *)(a1 + 56);
  *(void *)(v1 + 64) = *(void *)(a1 + 64);
  *(void *)(v1 + 72) = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 96);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 80);
  *(void *)(v1 + 96) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(v1 + 104) = *(void *)(a1 + 104);
  *(void *)(v1 + 112) = *(void *)(a1 + 112);
  *(void *)(v1 + 120) = *(void *)(a1 + 120);
  *(void *)(v1 + 128) = *(void *)(a1 + 128);
  *(_DWORD *)(v1 + 136) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(v1 + 140) = *(_DWORD *)(a1 + 140);
  *(void *)(v1 + 144) = *(void *)(a1 + 144);
  *(void *)(v1 + 152) = *(void *)(a1 + 152);
  *(void *)(v1 + 160) = *(void *)(a1 + 160);
  *(void *)(v1 + 168) = *(void *)(a1 + 168);
  *(unsigned char *)(v1 + 176) = *(unsigned char *)(a1 + 176);
  uint64_t v5 = *(void *)(a1 + 200);
  *(_OWORD *)(v1 + 184) = *(_OWORD *)(a1 + 184);
  *(void *)(v1 + 200) = v5;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(v1 + 208) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(v1 + 224) = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(v1 + 240) = *(_OWORD *)(a1 + 240);
  *(unsigned char *)(v1 + 256) = *(unsigned char *)(a1 + 256);
  *(void *)(v1 + 264) = *(void *)(a1 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a1 + 280);
  uint64_t v7 = *(void *)(a1 + 288);
  uint64_t v8 = *(void *)(a1 + 296);
  uint64_t v9 = *(void *)(a1 + 304);
  uint64_t v10 = *(void *)(a1 + 312);
  uint64_t v12 = *(void *)(a1 + 320);
  uint64_t v11 = *(void *)(a1 + 328);
  uint64_t v14 = *(void *)(a1 + 336);
  uint64_t v13 = *(void *)(a1 + 344);
  uint64_t v18 = *(void *)(a1 + 352);
  int v15 = *(_DWORD *)(a1 + 368);
  uint64_t v19 = *(void *)(a1 + 360);
  uint64_t v20 = *(void *)(a1 + 376);
  *(void *)(v1 + 272) = *(void *)(a1 + 272);
  *(void *)(v1 + 280) = v6;
  *(void *)(v1 + 288) = v7;
  *(void *)(v1 + 296) = v8;
  *(void *)(v1 + 304) = v9;
  *(void *)(v1 + 312) = v10;
  *(void *)(v1 + 320) = v12;
  *(void *)(v1 + 328) = v11;
  *(void *)(v1 + 336) = v14;
  *(void *)(v1 + 344) = v13;
  *(void *)(v1 + 352) = v18;
  *(void *)(v1 + 360) = v19;
  *(_DWORD *)(v1 + 368) = v15;
  *(void *)(v1 + 376) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a1 + 400);
  *(_OWORD *)(v1 + 384) = *(_OWORD *)(a1 + 384);
  *(void *)(v1 + 400) = v16;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_1B699E778()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

id sub_1B699E8B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 1:
      sub_1B69A1D74(a1 + 40, (uint64_t)&v29);
      if (v30)
      {
        sub_1B62C15C4(&v29, (uint64_t)&v31);
        if (a4)
        {
          uint64_t v17 = (void *)*sub_1B62C14BC(&v31, v33);
          if (qword_1E9DCC588 != -1) {
            swift_once();
          }
          if (*(void *)(qword_1E9E49628 + 16))
          {
            swift_bridgeObjectRetain();
            sub_1B62B2CE0(a3, a4);
            if (v18)
            {
              swift_bridgeObjectRetain();
              sub_1B6916620(a2, a3, a4, 1);
LABEL_36:
              long long v26 = (void *)sub_1B6E31768();
              swift_bridgeObjectRelease();
              id v7 = objc_msgSend(v17, sel_texture::, a2, v26);

              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v31);
              return v7;
            }
            sub_1B6916620(a2, a3, a4, 1);
          }
          swift_bridgeObjectRetain();
          goto LABEL_36;
        }
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v31);
      }
      else
      {
        sub_1B69A1E04((uint64_t)&v29);
      }
      switch((char)a2)
      {
        case 2:
          if (!a4) {
            goto LABEL_43;
          }
          if (a3 == 0x65636E6169646172 && a4 == 0xE800000000000000 || (sub_1B6E334B8() & 1) != 0)
          {
            uint64_t v22 = sub_1B6AB2AE4();
            if (!v22) {
              return 0;
            }
            uint64_t v24 = v22;
            id v7 = v23;
            swift_unknownObjectRetain();
            sub_1B69A1E9C(v24);
          }
          else
          {
            if ((a3 != 0x6E61696461727269 || a4 != 0xEA00000000006563) && (sub_1B6E334B8() & 1) == 0)
            {
LABEL_43:
              sub_1B6E32BE8();
              __break(1u);
              JUMPOUT(0x1B699EE84);
            }
            id v7 = (id)sub_1B6AB2AE4();
            if (v7)
            {
              uint64_t v28 = swift_unknownObjectRetain();
              sub_1B69A1E9C(v28);
            }
          }
          break;
        case 4:
          uint64_t v25 = *(void *)(*(void *)a1 + 240);
          swift_retain_n();
          id v7 = (id)sub_1B635C9FC(0x46445242584656, 0xE700000000000000, v25);
          swift_release_n();
          return v7;
        default:
          goto LABEL_43;
      }
      return v7;
    case 2:
      if (a2 == 0xFFFFFFFF) {
        return 0;
      }
      swift_retain();
      id v7 = (id)sub_1B62EBE70(a2, &v31);
      swift_release();
      if (!v7)
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        uint64_t v31 = 0;
        unint64_t v32 = 0xE000000000000000;
        swift_retain();
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        uint64_t v31 = 0xD000000000000010;
        unint64_t v32 = 0x80000001B6F40580;
        swift_retain();
        sub_1B6C0A280(a2);
        swift_release();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        uint64_t v20 = v31;
        uint64_t v19 = v32;
        int v21 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        uint64_t v31 = 0;
        swift_retain();
        sub_1B6B33E34(v21, &v31, v20, v19);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return 0;
      }
      return v7;
    case 3:
      uint64_t v8 = *(void *)(*(void *)a1 + 272);
      swift_retain();
      sub_1B6383E40((uint64_t)&v31);
      uint64_t v9 = *(void *)(*(void *)(*(void *)(v8 + 16) + 264) + 40);
      uint64_t v10 = *(void *)(v9 + 16);
      swift_retain();
      if (!v10) {
        goto LABEL_23;
      }
      uint64_t v12 = v31;
      uint64_t v11 = v32;
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_1B62B2CE0(v12, v11);
      if (v14)
      {
        id v7 = *(id *)(*(void *)(v9 + 56) + 8 * v13);
        swift_unknownObjectRetain();
        sub_1B62C7BF4((uint64_t)&v31);
        swift_release();
        sub_1B62C7BF4((uint64_t)&v31);
      }
      else
      {
        sub_1B62C7BF4((uint64_t)&v31);
LABEL_23:
        swift_release();
        sub_1B62C7BF4((uint64_t)&v31);
        id v7 = 0;
      }
      swift_release();
      return v7;
    default:
      swift_unknownObjectRetain();
      return (id)a2;
  }
}

uint64_t sub_1B699EEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 + 176);
  swift_retain();
  swift_retain();
  uint64_t v10 = sub_1B62EC590((uint64_t)&type metadata for DrawCallPool, (uint64_t)&off_1F0F59788, v9);
  swift_release();
  if (!v10)
  {
    type metadata accessor for DrawCall();
    uint64_t v10 = swift_allocObject();
    sub_1B630041C();
  }
  swift_release();
  swift_retain();
  sub_1B62EE21C();
  swift_release();
  sub_1B699F09C(a1, v10, a4);
  sub_1B69A1EF8(a2, v10, 0);
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(*(void *)a3 + 16) && (sub_1B62C1A30(*(void *)(a1 + 16)), (v11 & 1) != 0)) {
      uint64_t v12 = swift_bridgeObjectRetain();
    }
    else {
      uint64_t v12 = (uint64_t)sub_1B6303CBC(MEMORY[0x1E4FBC860]);
    }
    *(void *)(v10 + 264) = v12;
  }
  else
  {
    *(void *)(v10 + 264) = *(void *)(a3 + 8);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  *(void *)(v10 + 152) = *(void *)(a3 + 216);
  *(void *)(v10 + 144) = *(void *)(a3 + 208);
  *(unsigned char *)(v10 + 256) = *(unsigned char *)(a3 + 224);
  *(unsigned char *)(v10 + 257) = *(unsigned char *)(a3 + 226);
  long long v13 = *(_OWORD *)(a3 + 112);
  _OWORD v17[4] = *(_OWORD *)(a3 + 96);
  v17[5] = v13;
  v17[6] = *(_OWORD *)(a3 + 128);
  long long v14 = *(_OWORD *)(a3 + 48);
  v17[0] = *(_OWORD *)(a3 + 32);
  v17[1] = v14;
  long long v15 = *(_OWORD *)(a3 + 80);
  v17[2] = *(_OWORD *)(a3 + 64);
  v17[3] = v15;
  sub_1B62ED358((uint64_t)v17);
  return v10;
}

uint64_t sub_1B699F09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = (void *)(a2 + 272);
  uint64_t v6 = *(void **)(a2 + 272);
  uint64_t v7 = v6[2];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 16) + v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 272) = v6;
  if (!result || v8 > v6[3] >> 1)
  {
    if (v7 <= v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v7;
    }
    uint64_t result = (uint64_t)sub_1B62E95AC(result, v10, 0, v6);
    uint64_t v6 = (void *)result;
  }
  *uint64_t v34 = v6;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    uint64_t v14 = 32;
    do
    {
      long long v16 = *(_OWORD *)(v11 + v14);
      long long v17 = *(_OWORD *)(v11 + v14 + 16);
      char v33 = *(unsigned char *)(v11 + v14 + 32);
      *(_OWORD *)unint64_t v32 = v16;
      *(_OWORD *)&v32[16] = v17;
      uint64_t v18 = *(void *)(a3 + 848);
      uint64_t v19 = *(void *)(v18 + 16);
      swift_retain();
      if (v19 && (unint64_t v20 = sub_1B69FB2A8((uint64_t)v32), (v21 & 1) != 0))
      {
        uint64_t v22 = (uint64_t *)(*(void *)(v18 + 56) + 40 * v20);
        uint64_t v24 = *v22;
        uint64_t v23 = v22[1];
        uint64_t v25 = v22[2];
        sub_1B63846D0((uint64_t)v32);
        swift_unknownObjectRetain();
        swift_release();
        v30[0] = v24;
        v30[1] = v23;
        _OWORD v30[2] = v25;
        v30[3] = 0;
        char v31 = 0;
        swift_unknownObjectRetain();
        sub_1B62E9144((uint64_t)v30, v13 + 21, 1);
        sub_1B62D8C10((uint64_t)v32);
        swift_unknownObjectRelease_n();
      }
      else
      {
        uint64_t v15 = *(void *)v32;
        swift_unknownObjectRetain();
        swift_release();
        uint64_t v26 = v15;
        long long v27 = *(_OWORD *)&v32[8];
        uint64_t v28 = 0;
        char v29 = 0;
        swift_unknownObjectRetain();
        sub_1B62E9144((uint64_t)&v26, v13 + 21, 1);
        sub_1B62D8C10((uint64_t)v32);
        sub_1B62D8C10((uint64_t)v32);
      }
      ++v13;
      v14 += 40;
    }
    while (v12 != v13);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B699F28C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, uint64_t a7, const void *a8, uint64_t a9, char a10, uint64_t a11, unint64_t a12)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t v13 = *(void *)(result + 40);
    uint64_t v73 = *(void *)(v13 + 16);
    if (v73)
    {
      uint64_t v72 = v13 + 32;
      unint64_t v67 = HIDWORD(a5);
      BOOL v16 = a5 == -1 && HIDWORD(a5) == 0;
      BOOL v71 = v16;
      uint64_t v69 = a5 << 32;
      int v66 = a5;
      uint64_t v68 = (int)a5;
      uint64_t v65 = result;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = (long long *)(v72 + (v17 << 7));
        long long v19 = *v18;
        long long v20 = v18[1];
        long long v21 = v18[3];
        long long v77 = v18[2];
        long long v78 = v21;
        long long v75 = v19;
        long long v76 = v20;
        long long v22 = v18[4];
        long long v23 = v18[5];
        long long v24 = v18[7];
        long long v81 = v18[6];
        long long v82 = v24;
        long long v79 = v22;
        long long v80 = v23;
        swift_retain();
        if (v71 || v69 < 0 || v68 >= *(void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
        {
          sub_1B696C7F0((uint64_t)&v75);
          swift_release();
        }
        else
        {
          int v25 = *(_DWORD *)(*(void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v68 + 8);
          sub_1B696C7F0((uint64_t)&v75);
          swift_release();
          if (v67 == -1)
          {
            int v26 = v66;
            int v27 = -1;
            goto LABEL_45;
          }
          if (v25 == v67)
          {
            int v26 = v66;
            int v27 = v67;
            goto LABEL_45;
          }
        }
        int v27 = 0;
        int v26 = -1;
        if ((*((void *)&v76 + 1) & 0x8000000000000000) == 0)
        {
          uint64_t v28 = a1[1];
          if (*((uint64_t *)&v76 + 1) < *(void *)(v28 + 16))
          {
            uint64_t v29 = v28 + 8 * *((void *)&v76 + 1);
            int v26 = *(_DWORD *)(v29 + 32);
            int v27 = *(_DWORD *)(v29 + 36);
          }
        }
        swift_retain();
        if (v26 == -1 && !v27 || v26 < 0 || *(void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v26)
        {
          swift_release();
LABEL_30:
          swift_retain();
          char v31 = *(void **)(a3 + 176);
          swift_retain();
          os_unfair_recursive_lock_lock_with_options();
          uint64_t v32 = v31[6];
          uint64_t v33 = *(void *)(v32 + 16);
          if (!v33) {
            goto LABEL_40;
          }
          unint64_t v34 = 0;
          uint64_t v35 = (void *)(v32 + 56);
          uint64_t v36 = 24;
          while ((ValueMetadata *)*(v35 - 3) != &type metadata for DefaultMaterialInstance)
          {
            ++v34;
            v36 += 32;
            v35 += 5;
            if (v33 == v34) {
              goto LABEL_40;
            }
          }
          if (v34 < 0x40 && ((v31[15] >> v34) & 1) != 0)
          {
            uint64_t v37 = (unsigned int *)(v31[2] + *v35);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v31[4] + v36));
            os_unfair_recursive_lock_unlock();
            unsigned int v39 = *v37;
            unsigned int v38 = v37[1];
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31[4] + v36));
            swift_release();
            unint64_t v74 = __PAIR64__(v38, v39);
            if (v39 != -1 || v38)
            {
              swift_release();
LABEL_44:
              int v26 = v74;
              int v27 = HIDWORD(v74);
              goto LABEL_45;
            }
          }
          else
          {
LABEL_40:
            os_unfair_recursive_lock_unlock();
            swift_release();
          }
          type metadata accessor for PBRParameters();
          uint64_t v40 = swift_allocObject();
          *(_OWORD *)(v40 + 16) = xmmword_1B6E781D0;
          *(void *)(v40 + 32) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 40) = 16777473;
          *(unsigned char *)(v40 + 44) = 1;
          *(_OWORD *)(v40 + 48) = xmmword_1B6E4F490;
          *(void *)(v40 + 64) = 0;
          *(void *)(v40 + 72) = 0;
          *(void *)(v40 + 80) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 88) = 16777473;
          *(unsigned char *)(v40 + 92) = 1;
          *(_OWORD *)(v40 + 96) = xmmword_1B6E4F490;
          *(void *)(v40 + 112) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 120) = 16777473;
          *(unsigned char *)(v40 + 124) = 1;
          *(_DWORD *)(v40 + 128) = 1056964608;
          *(_OWORD *)(v40 + 144) = xmmword_1B6E4F490;
          *(void *)(v40 + 160) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 168) = 16777473;
          *(unsigned char *)(v40 + 172) = 1;
          *(_DWORD *)(v40 + 176) = 0;
          *(_OWORD *)(v40 + 192) = xmmword_1B6E4F490;
          *(void *)(v40 + 208) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 216) = 16777473;
          *(unsigned char *)(v40 + 220) = 1;
          *(_DWORD *)(v40 + 224) = 1065353216;
          *(_OWORD *)(v40 + 240) = xmmword_1B6E4F490;
          *(void *)(v40 + 256) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 264) = 16777473;
          *(unsigned char *)(v40 + 268) = 1;
          *(_DWORD *)(v40 + 272) = 1065353216;
          *(_OWORD *)(v40 + 288) = xmmword_1B6E4F490;
          *(_WORD *)(v40 + 304) = 0;
          type metadata accessor for RenderPipelineFactory();
          uint64_t v41 = swift_allocObject();
          *(void *)(v41 + 16) = 3;
          *(void *)(v41 + 24) = 0;
          *(void *)(v41 + 32) = 0;
          *(void *)(v41 + 40) = 2;
          *(void *)(v41 + 48) = 0;
          *(void *)(v41 + 56) = 0;
          *(void *)(v41 + 64) = 0;
          *(void *)(v41 + 72) = 15;
          *(_WORD *)(v41 + 80) = 0;
          *(void *)(v41 + 88) = sub_1B6CCBF58;
          *(void *)(v41 + 96) = 0;
          if (qword_1EB97EB70 != -1) {
            swift_once();
          }
          uint64_t v42 = qword_1EB997C30;
          uint64_t v43 = *(void *)algn_1EB997C38;
          uint64_t v44 = qword_1EB997C40;
          uint64_t v45 = qword_1EB997C48;
          long long v46 = xmmword_1EB997C50;
          unsigned __int8 v47 = byte_1EB997C60;
          *(void *)(v41 + 104) = qword_1EB997C30;
          *(void *)(v41 + 112) = v43;
          *(void *)(v41 + 120) = v44;
          *(void *)(v41 + 128) = v45;
          *(_OWORD *)(v41 + 136) = v46;
          *(unsigned char *)(v41 + 152) = v47;
          *(void *)(v41 + 160) = v42;
          *(void *)(v41 + 168) = v43;
          *(void *)(v41 + 176) = v44;
          *(void *)(v41 + 184) = v45;
          *(_OWORD *)(v41 + 192) = v46;
          *(_WORD *)(v41 + 208) = v47;
          *(_WORD *)(v41 + 80) = 140;
          *(void *)(v41 + 88) = sub_1B6D2EFB4;
          *(void *)(v41 + 96) = 0;
          swift_unknownObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_unknownObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_release();
          uint64_t v48 = sub_1B6D7FB60(0x100000000uLL, **(void **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), 0, v41, 0x100000000uLL, 0xD000000000000018, 0x80000001B6F3DF20, -1.0);
          swift_release();
          swift_retain();
          sub_1B6C0327C(v48, a3, v40);
          uint64_t v49 = swift_release_n();
          unint64_t v74 = v48;
          MEMORY[0x1F4188790](v49, v50);
          unint64_t v51 = *(void **)(a3 + 176);
          swift_retain();
          sub_1B636E6CC((uint64_t)&type metadata for DefaultMaterialInstance, (uint64_t)&off_1F0F8EF50, v51, (void (*)(uint64_t))sub_1B6916820);
          swift_release();
          swift_release();
          goto LABEL_44;
        }
        int v30 = *(_DWORD *)(*(void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v26 + 8);
        swift_release();
        if (v27 != -1 && v30 != v27) {
          goto LABEL_30;
        }
LABEL_45:
        swift_retain();
        if ((v26 != -1 || v27) && (v26 & 0x80000000) == 0)
        {
          uint64_t v52 = (uint64_t *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          if (*(void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v26)
          {
            uint64_t v53 = *v52;
            uint64_t v54 = *v52 + 12 * v26;
            int v55 = *(__int16 *)(v54 + 4);
            if (v27 == -1 || *(_DWORD *)(v54 + 8) == v27)
            {
              uint64_t v56 = *(void *)(*(void *)(a3 + 136) + 8 * *(int *)(v53 + 12 * v26) + 32);
              uint64_t v57 = *(void *)(v56 + 48);
              uint64_t v58 = *(void *)(v57 + 16);
              if (v58)
              {
                long long v59 = (void *)(v57 + 56);
                while ((ValueMetadata *)*(v59 - 3) != &type metadata for MaterialRuntime)
                {
                  v59 += 5;
                  if (!--v58) {
                    goto LABEL_11;
                  }
                }
                sub_1B699FADC(*(void *)(v56 + 128) + *v59 + 248 * v55, a2, a3, a4, a6, a7, a8, a9, a10 & 1, v65, (uint64_t)&v75, a11, a12 | ((HIDWORD(a12) & 1) << 32));
              }
            }
          }
        }
LABEL_11:
        swift_release();
        ++v17;
        sub_1B696C828((uint64_t)&v75);
        if (v17 == v73)
        {
          swift_release();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B699FADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  int v18 = *(unsigned __int8 *)(a1 + 227);
  swift_retain();
  swift_retain();
  if (qword_1EB97DBA0 != -1) {
    swift_once();
  }
  v71[0] = qword_1EB997A00;
  MEMORY[0x1F4188790](qword_1EB997A00, v19);
  int v51 = v18;
  long long v20 = *(void **)(a3 + 176);
  swift_retain();
  swift_retain();
  sub_1B636E6CC((uint64_t)&_s21DrawCallEntityClassesVN, (uint64_t)&off_1F0F5EEB0, v20, (void (*)(uint64_t))sub_1B636EA8C);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v65 = v71[0];
  uint64_t v21 = *(void *)(a4 + 24);
  swift_retain();
  uint64_t v61 = (uint64_t)a5;
  int v66 = sub_1B699CDAC(v21, a5, a6);
  uint64_t v55 = v23;
  uint64_t v56 = v22;
  swift_release();
  uint64_t v24 = *(void *)(a4 + 24);
  swift_retain();
  uint64_t v25 = a4;
  if ((a9 & 1) != 0 || a8 < 1)
  {
    __asm { FMOV            V0.4S, #1.0 }
    int v26 = sub_1B699CEF4(v24, a6, _Q0);
  }
  else
  {
    int v26 = sub_1B699CE50(v24, a7, a8);
  }
  uint64_t v64 = (uint64_t)v26;
  uint64_t v53 = v28;
  uint64_t v54 = v27;
  swift_release();
  uint64_t v68 = sub_1B699EEE8(a10, a11, a1, a2, a3);
  uint64_t v58 = HIDWORD(a13) & 1;
  uint64_t v63 = a4;
  if (v51)
  {
    *(void *)(v68 + 120) = 1;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1B696C7F0(a11);
    sub_1B6B25EE4(0, v65, 1, a13 | (unint64_t)(v58 << 32), a12, a4, v61, (int32x4_t *)a11, v68, (uint64_t)v66, v56, v55, 64, v64, v54, v53, 16, a2, a3,
      v51);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B696C828(a11);
  }
  else
  {
    *(void *)(v68 + 120) = a12;
    v79[0] = v66;
    v79[1] = v56;
    v79[2] = v55;
    v79[3] = 0;
    char v80 = 0;
    swift_unknownObjectRetain();
    sub_1B62E9144((uint64_t)v79, 4, 0);
    swift_unknownObjectRelease();
    v77[0] = v64;
    v77[1] = v54;
    v77[2] = v53;
    v77[3] = 0;
    char v78 = 0;
    swift_unknownObjectRetain();
    sub_1B62E9144((uint64_t)v77, 5, 0);
    swift_unknownObjectRelease();
    float32x4_t v35 = *(float32x4_t *)(v61 + 16);
    float32x4_t v36 = *(float32x4_t *)(v61 + 32);
    float32x4_t v37 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v61 + 48), v36, *(float32x4_t *)(a11 + 96), 2), v35, *(float32x2_t *)(a11 + 96), 1), *(float32x4_t *)v61, COERCE_FLOAT(*(_OWORD *)(a11 + 96)));
    v37.i32[3] = HIDWORD(*(_OWORD *)(a11 + 96));
    __n128 v52 = (__n128)v37;
    float32x4_t v38 = *(float32x4_t *)(a11 + 112);
    v38.i32[1] = v38.i32[0];
    v38.i32[2] = *(_OWORD *)(a11 + 112);
    __n128 v50 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)(a11 + 112), 1), *(int32x4_t *)(a11 + 112)), vabsq_f32(v35)), v38, vabsq_f32(*(float32x4_t *)v61)), (float32x4_t)vzip2q_s32(vtrn1q_s32(*(int32x4_t *)(a11 + 112), *(int32x4_t *)(a11 + 112)), *(int32x4_t *)(a11 + 112)), vabsq_f32(v36));
    swift_retain();
    sub_1B6B251CC(0, v65, 1, a13 | (unint64_t)(v58 << 32), 1, v25, v68, a2, v52, v50, a3, 0);
    swift_release();
  }
  swift_retain();
  sub_1B6311058(a2 + 624, (uint64_t)v70, (unint64_t *)&unk_1EB9852B0, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  sub_1B6311058((uint64_t)v70, (uint64_t)v71, (unint64_t *)&unk_1EB9852B0, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  if (sub_1B6388C10(v71) == 1)
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  else
  {
    char v39 = v72;
    swift_release();
    if (v39)
    {
      uint64_t v41 = sub_1B699EEE8(a10, a11, a1, a2, a3);
      *(void *)(v41 + 120) = a12;
      v75[0] = v66;
      v75[1] = v56;
      v75[2] = v55;
      v75[3] = 0;
      char v76 = 0;
      swift_unknownObjectRetain();
      sub_1B62E9144((uint64_t)v75, 4, 0);
      swift_unknownObjectRelease();
      v73[0] = v64;
      v73[1] = v54;
      v73[2] = v53;
      v73[3] = 0;
      char v74 = 0;
      swift_unknownObjectRetain();
      sub_1B62E9144((uint64_t)v73, 5, 0);
      swift_unknownObjectRelease();
      swift_retain();
      swift_retain();
      uint64_t v69 = qword_1EB997A00;
      MEMORY[0x1F4188790](qword_1EB997A00, v42);
      uint64_t v43 = *(void **)(a3 + 176);
      swift_retain();
      swift_retain();
      sub_1B636E6CC((uint64_t)&_s21DrawCallEntityClassesVN, (uint64_t)&off_1F0F5EEB0, v43, (void (*)(uint64_t))sub_1B69A2D00);
      swift_release();
      swift_release();
      swift_release();
      float32x4_t v44 = *(float32x4_t *)v61;
      float32x4_t v45 = *(float32x4_t *)(v61 + 16);
      float32x4_t v46 = *(float32x4_t *)(v61 + 32);
      float32x4_t v47 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v61 + 48), v46, *(float32x4_t *)(a11 + 96), 2), v45, *(float32x2_t *)(a11 + 96), 1), *(float32x4_t *)v61, COERCE_FLOAT(*(_OWORD *)(a11 + 96)));
      v47.i32[3] = HIDWORD(*(_OWORD *)(a11 + 96));
      __n128 v62 = (__n128)v47;
      float32x4_t v48 = *(float32x4_t *)(a11 + 112);
      v48.i32[1] = v48.i32[0];
      v48.i32[2] = *(_OWORD *)(a11 + 112);
      __n128 v60 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)(a11 + 112), 1), *(int32x4_t *)(a11 + 112)), vabsq_f32(v45)), v48, vabsq_f32(v44)), (float32x4_t)vzip2q_s32(vtrn1q_s32(*(int32x4_t *)(a11 + 112), *(int32x4_t *)(a11 + 112)), *(int32x4_t *)(a11 + 112)), vabsq_f32(v46));
      swift_retain();
      sub_1B6B26CB4(0, v69, 1, a13 | (unint64_t)(v58 << 32), 1, v63, v41, v62, v60);
      swift_release();
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return swift_release_n();
    }
    else
    {
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DrawCallComponent()
{
  return &type metadata for DrawCallComponent;
}

uint64_t sub_1B69A0250(void *a1, char a2, unsigned __int8 a3)
{
  if (objc_msgSend(a1, sel_isDrawingBlur)) {
    unsigned int v6 = 8256;
  }
  else {
    unsigned int v6 = 0;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_useDitherFade) & 1) != 0
    && objc_msgSend(a1, sel_useDitherFade))
  {
    v6 |= 0xCu;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_enableBreakthrough) & 1) != 0
    && objc_msgSend(a1, sel_enableBreakthrough))
  {
    v6 |= 0x20u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_enableClipping) & 1) != 0
    && (objc_msgSend(a1, sel_enableClipping) & ((v6 & 2) == 0)) != 0)
  {
    v6 |= 2u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_enableNearFieldVignetting) & 1) != 0
    && (objc_msgSend(a1, sel_enableNearFieldVignetting) & ((v6 & 0x200) == 0)) != 0)
  {
    v6 |= 0x200u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_depthOnly) & 1) != 0
    && (objc_msgSend(a1, sel_depthOnly) & ((v6 & 0x800) == 0)) != 0)
  {
    v6 |= 0x800u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_renderInGBuffer) & 1) != 0
    && objc_msgSend(a1, sel_renderInGBuffer))
  {
    v6 |= 0x4000u;
  }
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_renderMode))
  {
    id v7 = objc_msgSend(a1, sel_renderMode);
    switch((unint64_t)v7)
    {
      case 1uLL:
        v6 |= 0x20000u;
        break;
      case 2uLL:
        v6 |= 0x40000u;
        break;
      case 3uLL:
        v6 |= 0x80000u;
        break;
      case 4uLL:
        v6 |= 0x100000u;
        break;
      case 5uLL:
        v6 |= 0x200000u;
        break;
      case 6uLL:
        v6 |= 0x400000u;
        break;
      case 7uLL:
        v6 |= 0x800000u;
        break;
      default:
        if (v7 == (id)8) {
          v6 |= 0x1000000u;
        }
        break;
    }
  }
  if (objc_msgSend(a1, sel_respondsToSelector_, sel_portalClippingMode))
  {
    unsigned int v8 = objc_msgSend(a1, sel_portalClippingMode);
    int v9 = v6 | 0x14000000;
    if (v8 != 2) {
      int v9 = v6;
    }
    if (v8 == 1) {
      int v9 = v6 | 0xC000000;
    }
    if (v8) {
      unsigned int v6 = v9;
    }
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_isLayeredRendering) & 1) != 0
    && (objc_msgSend(a1, sel_isLayeredRendering) & ((v6 & 0x2000000) == 0)) != 0)
  {
    v6 |= 0x2000000u;
  }
  if (!a2 && (v6 & 0x800) == 0)
  {
    if (objc_msgSend(a1, sel_respondsToSelector_, sel_fadeOpacity))
    {
      objc_msgSend(a1, sel_fadeOpacity);
      int v10 = (v6 >> 12) & 1;
      if (v11 >= 1.0) {
        int v10 = 1;
      }
      if (!v10) {
        v6 |= 0x1000u;
      }
    }
    if ((v6 & 0x1020) == 0x20) {
      v6 |= 0x1000u;
    }
  }
  BOOL v12 = a2 == 1 && (v6 & 0x2800) == 2048;
  int v13 = v6 | 0x2000;
  if (!v12) {
    int v13 = v6;
  }
  return (v13 & 0x400 | a3 & ((v13 & 1) == 0)) ^ 0x400 | v13;
}

uint64_t sub_1B69A05A8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t a8)
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v15 = result;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v17 = (void *)Strong;
      if ((a5 & 0x100000000) != 0 || (a5 & 0x7FFFFFFF) != 0)
      {
        uint64_t v104 = a1;
        uint64_t v128 = v15;
        *(unsigned char *)(*(void *)(Strong + 288) + 136) = 1;
        id v18 = objc_msgSend(a2, sel_renderTargetInfo);
        swift_getObjectType();
        sub_1B6A9829C(v131);
        uint64_t v19 = v131[0];
        uint64_t v20 = v131[2];
        uint64_t v121 = v131[3];
        uint64_t v124 = v131[1];
        uint64_t v21 = v131[6];
        uint64_t v117 = v131[5];
        int v129 = v17;
        uint64_t v127 = a8;
        uint64_t v111 = v131[4];
        uint64_t v114 = v131[7];
        uint64_t v22 = v131[10];
        uint64_t v105 = v131[9];
        uint64_t v108 = v131[8];
        swift_unknownObjectRelease();
        char v103 = a7;
        id v120 = a2;
        int v23 = sub_1B69A0250(a2, a6, a7 & 1);
        int v162 = v23;
        uint64_t v163 = v19;
        uint64_t v164 = v124;
        uint64_t v165 = v20;
        uint64_t v166 = v121;
        uint64_t v167 = v111;
        uint64_t v168 = v117;
        uint64_t v169 = v21;
        uint64_t v170 = v114;
        uint64_t v171 = v108;
        uint64_t v172 = v105;
        uint64_t v173 = v22;
        char v101 = a6;
        if (*(void *)(v129[99] + 8 * a6 + 32) == *(void *)(*(void *)(a8 + 264) + 16))
        {
          int v24 = v23;
          sub_1B699E2CC(&v162, (uint64_t)v191);
          sub_1B6311058((uint64_t)v191, (uint64_t)v192, (unint64_t *)&unk_1EB97E290, (uint64_t)&type metadata for RenderStates);
          if (v192[0])
          {
            uint64_t v100 = v192[1];
            unsigned __int8 v25 = v193;
            v146[0] = *(_DWORD *)v194;
            *(_DWORD *)((char *)v146 + 3) = *(_DWORD *)&v194[3];
            uint64_t v26 = v196;
            uint64_t v122 = v195;
            uint64_t v125 = v192[2];
            uint64_t v28 = v197;
            uint64_t v27 = v198;
            int v112 = v199;
            int v115 = v200;
            uint64_t v29 = v202;
            uint64_t v118 = v201;
            uint64_t v30 = v203;
            uint64_t v31 = v204;
            unsigned int v106 = v205;
            uint64_t v109 = v206;
            unsigned __int8 v130 = v193;
            uint64_t v96 = v192[0];
            if (objc_msgSend(v120, sel_respondsToSelector_, sel_stencilInfo))
            {
              uint64_t v147 = v125;
              unsigned __int8 v148 = v25;
              *(_DWORD *)uint64_t v149 = v146[0];
              *(_DWORD *)&v149[3] = *(_DWORD *)((char *)v146 + 3);
              uint64_t v150 = v122;
              uint64_t v151 = v26;
              uint64_t v152 = v28;
              uint64_t v153 = v27;
              int v154 = v112;
              int v155 = v115;
              uint64_t v156 = v118;
              uint64_t v157 = v29;
              uint64_t v158 = v30;
              uint64_t v159 = v31;
              unsigned int v160 = v106;
              int v161 = v109;
              swift_unknownObjectRetain();
              uint64_t v32 = v120;
              id v33 = objc_msgSend(v120, sel_stencilInfo);
              sub_1B6B66114(v33, (uint64_t)&v132);
              unint64_t v34 = v129;
              uint64_t v35 = v129[31];
              float32x4_t v36 = *(os_unfair_lock_s **)(v35 + 56);
              swift_retain();
              os_unfair_lock_lock(v36);
              sub_1B6D26C88(v35, &v132, &v182);
              os_unfair_lock_unlock(v36);
              swift_release();
              uint64_t v37 = v182.i64[0];
              *(_DWORD *)(v127 + 140) = objc_msgSend(v33, sel_backReferenceValue);
              LODWORD(v35) = objc_msgSend(v33, sel_frontReferenceValue);
              swift_unknownObjectRelease();
              *(_DWORD *)(v127 + 136) = v35;
              swift_unknownObjectRelease();
              uint64_t v38 = v132;
              unsigned __int8 v130 = v133;
              uint64_t v39 = v134;
              uint64_t v27 = v137;
              uint64_t v98 = v136;
              uint64_t v99 = v135;
              int v40 = v138;
              int v41 = v139;
              uint64_t v42 = v140;
              uint64_t v29 = v141;
              uint64_t v30 = v142;
              uint64_t v31 = v143;
              uint64_t v100 = v37;
              unsigned int v43 = v144;
              uint64_t v44 = v145;
            }
            else
            {
              uint64_t v98 = v28;
              uint64_t v99 = v26;
              swift_unknownObjectRetain();
              unint64_t v34 = v129;
              uint64_t v38 = v125;
              int v41 = v115;
              uint64_t v42 = v118;
              int v40 = v112;
              uint64_t v44 = v109;
              unsigned int v43 = v106;
              uint64_t v32 = v120;
              uint64_t v39 = v122;
            }
            uint64_t v123 = v39;
            uint64_t v126 = v38;
            uint64_t v97 = v27;
            int v116 = v41;
            uint64_t v119 = v42;
            uint64_t v95 = v30;
            uint64_t v94 = v31;
            int v113 = v40;
            uint64_t v110 = v44;
            unsigned int v107 = v43;
            if ((v103 & 1) == 0)
            {
              objc_msgSend(objc_msgSend(v32, sel_renderTargetInfo), sel_vrrEnabled);
              swift_unknownObjectRelease();
            }
            uint64_t v58 = **(void **)(v128 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
            v181[4] = &off_1F0F7F0B8;
            v181[3] = &type metadata for REExternalDataTable;
            v181[0] = v32;
            *(_OWORD *)((char *)v176 + 8) = 0u;
            *(_OWORD *)((char *)&v176[1] + 8) = 0u;
            long long v177 = xmmword_1B6E50D30;
            *((void *)&v176[2] + 1) = 0;
            long long v178 = 1uLL;
            *(void *)&long long v179 = 0;
            *((void *)&v179 + 1) = 1;
            long long v180 = 0uLL;
            LOBYTE(v176[0]) = v101;
            v174.i64[0] = (uint64_t)v34;
            v174.i64[1] = v128;
            *((void *)&v175 + 1) = 1;
            *(void *)&long long v175 = v58;
            swift_unknownObjectRetain();
            uint64_t v59 = sub_1B635FA4C((uint64_t)v181, (uint64_t)v176 + 8);
            long long v188 = v178;
            long long v189 = v179;
            long long v190 = v180;
            long long v184 = v176[0];
            long long v185 = v176[1];
            long long v186 = v176[2];
            long long v187 = v177;
            int64x2_t v182 = v174;
            long long v183 = v175;
            uint64_t v61 = MEMORY[0x1F4188790](v59, v60);
            char v102 = v62;
            uint64_t v63 = *(void **)(v128 + 176);
            MEMORY[0x1F4188790](v61, v64);
            swift_retain();
            sub_1B636E6E4((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1F0F851A8, v63, (void (*)(uint64_t))sub_1B636EA28);
            swift_release();
            uint64_t v65 = v182.i64[1];
            swift_retain();
            uint64_t v66 = swift_retain();
            MEMORY[0x1F4188790](v66, v67);
            uint64_t v68 = *(void *)(v65 + 176);
            swift_retain();
            uint64_t v69 = (void *)sub_1B6B3A598((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1F0F851A8, v68, (void (*)(void *__return_ptr, uint64_t))sub_1B69A2108);
            uint64_t v71 = v70;
            uint64_t v73 = v72;
            swift_release();
            swift_release();
            swift_release();
            if (v69)
            {
              swift_getObjectType();
              sub_1B6D0E064(v69, v71, v73, 0, 0, v102);
              swift_unknownObjectRelease();
            }
            uint64_t v74 = v182.i64[1];
            swift_retain();
            uint64_t v75 = swift_retain();
            MEMORY[0x1F4188790](v75, v76);
            long long v77 = *(void **)(v74 + 176);
            swift_retain();
            sub_1B636E6E4((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1F0F851A8, v77, (void (*)(uint64_t))sub_1B69A2128);
            swift_release();
            swift_release();
            swift_release();
            int64x2_t v78 = v174;
            long long v79 = v175;
            uint64_t v80 = *(void *)&v176[0];
            long long v81 = *(void **)&v176[1];
            uint64_t v90 = *((void *)&v176[0] + 1);
            long long v82 = v176[2];
            uint64_t v93 = v177;
            uint64_t v91 = *((void *)&v176[1] + 1);
            uint64_t v92 = *((void *)&v177 + 1);
            swift_unknownObjectRetain();
            if (v78.i64[0])
            {
              swift_getObjectType();
              sub_1B6D0E064((id)v78.i64[0], v78.i64[1], v79, 0, 10, v102);
              swift_unknownObjectRelease();
            }
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (*((void *)&v79 + 1))
            {
              swift_getObjectType();
              sub_1B6D0E064(*((id *)&v79 + 1), v80, v90, 0, 11, v102);
              swift_unknownObjectRelease();
            }
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            if (v81)
            {
              swift_getObjectType();
              sub_1B6D0E064(v81, v91, v82, 0, 12, v102);
              swift_unknownObjectRelease();
            }
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            uint64_t v83 = swift_unknownObjectRelease();
            if (*((void *)&v82 + 1))
            {
              swift_getObjectType();
              sub_1B6D0E064(*((id *)&v82 + 1), v93, v92, 0, 14, 2);
              sub_1B62CB234(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
              uint64_t v85 = swift_allocObject();
              *(_OWORD *)(v85 + 16) = xmmword_1B6E78130;
              *(void *)(v85 + 32) = *((void *)&v82 + 1);
              v174.i64[0] = v85;
              sub_1B6E31C48();
              unint64_t v86 = v174.i64[0];
              swift_unknownObjectRetain();
              sub_1B62E73B0(v86, 1, 2);
              swift_unknownObjectRelease();
              uint64_t v83 = swift_bridgeObjectRelease();
            }
            uint64_t v87 = MEMORY[0x1F4188790](v83, v84);
            uint64_t v88 = *(void **)(v128 + 176);
            MEMORY[0x1F4188790](v87, v89);
            swift_retain();
            sub_1B636E6E4((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1F0F851A8, v88, (void (*)(uint64_t))sub_1B69A2D1C);
            swift_release();
            v174.i64[0] = v96;
            v174.i64[1] = v100;
            *(void *)&long long v175 = v126;
            *((void *)&v175 + 1) = v130;
            *(void *)&v176[0] = v123;
            *((void *)&v176[0] + 1) = v99;
            *(void *)&v176[1] = v98;
            *((void *)&v176[1] + 1) = v97;
            LODWORD(v176[2]) = v113;
            DWORD1(v176[2]) = v116;
            *((void *)&v176[2] + 1) = v119;
            *(void *)&long long v177 = v29;
            *((void *)&v177 + 1) = v95;
            *(void *)&long long v178 = v94;
            *((void *)&v178 + 1) = v107 | (unint64_t)(v110 << 32);
            swift_unknownObjectRetain();
            sub_1B631083C(v127, &v162, v174.i64, v104, (uint64_t)&v182, v120);
            swift_release();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            sub_1B635FC14((uint64_t)&v182);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            *(unsigned char *)(v129[36] + 136) = 0;
          }
          else
          {
            int v45 = v24;
            if (qword_1EB985418 != -1)
            {
              swift_once();
              int v45 = v24;
            }
            float32x4_t v46 = (char *)v129[98];
            v182.i32[0] = dword_1EB985420 & v45;
            v182.i64[1] = v19;
            *(void *)&long long v183 = v124;
            *((void *)&v183 + 1) = v20;
            *(void *)&long long v184 = v121;
            *((void *)&v184 + 1) = v111;
            *(void *)&long long v185 = v117;
            *((void *)&v185 + 1) = v21;
            *(void *)&long long v186 = v114;
            *((void *)&v186 + 1) = v108;
            *(void *)&long long v187 = v105;
            *((void *)&v187 + 1) = v22;
            if ((sub_1B6382B10(&v182, (uint64_t)v46) & 1) == 0)
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v129[98] = v46;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                float32x4_t v46 = sub_1B6383918(0, *((void *)v46 + 2) + 1, 1, v46);
                v129[98] = v46;
              }
              unint64_t v49 = *((void *)v46 + 2);
              unint64_t v48 = *((void *)v46 + 3);
              if (v49 >= v48 >> 1) {
                float32x4_t v46 = sub_1B6383918(v48 > 1, v49 + 1, 1, v46);
              }
              *((void *)v46 + 2) = v49 + 1;
              __n128 v50 = &v46[96 * v49];
              long long v51 = v183;
              *((int64x2_t *)v50 + 2) = v182;
              *((_OWORD *)v50 + 3) = v51;
              long long v52 = v184;
              long long v53 = v185;
              long long v54 = v187;
              *((_OWORD *)v50 + 6) = v186;
              *((_OWORD *)v50 + 7) = v54;
              *((_OWORD *)v50 + 4) = v52;
              *((_OWORD *)v50 + 5) = v53;
              v129[98] = v46;
              sub_1B6382BCC();
              if (qword_1EB9852D0 != -1) {
                swift_once();
              }
              v174.i64[0] = 0;
              v174.i64[1] = 0xE000000000000000;
              swift_retain();
              sub_1B6E328C8();
              sub_1B6E31948();
              LOBYTE(v147) = v101;
              sub_1B6E32B18();
              sub_1B6E31948();
              LODWORD(v147) = v24;
              sub_1B6E32B18();
              sub_1B6E31948();
              int64x2_t v55 = v174;
              strcpy(v174.i8, "PassFormat: ");
              v174.i8[13] = 0;
              v174.i16[7] = -5120;
              sub_1B63B6E84();
              sub_1B6E31948();
              swift_bridgeObjectRelease();
              int64x2_t v174 = v55;
              swift_bridgeObjectRetain();
              sub_1B6E31948();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              int64x2_t v56 = v174;
              int v57 = sub_1B6E32148();
              if (qword_1EB9854F8 != -1) {
                swift_once();
              }
              v174.i64[0] = 0;
              swift_retain();
              sub_1B6B33E34(v57, v174.i64, v56.i64[0], v56.i64[1]);
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              sub_1B696E534(v128);
            }
            swift_release();
            *(unsigned char *)(v129[36] + 136) = 0;
          }
          return swift_release();
        }
        swift_release();
        *(unsigned char *)(v129[36] + 136) = 0;
      }
      else
      {
        swift_release();
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B69A15E8(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, char a5, uint64_t a6, char a7)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  sub_1B6A4DA6C((uint64_t)a2);
  memcpy(__dst, (const void *)(a1 + 48), sizeof(__dst));
  uint64_t v9 = sub_1B6A4DDAC();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a1 + 1224);
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_1B62C1A30(v9), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(v11 + 56) + 24 * v12;
    uint64_t v15 = *(void **)v14;
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 16);
    swift_unknownObjectRetain();
  }
  else
  {
    swift_retain();
    uint64_t v15 = (void *)sub_1B62F1868(0, 1152);
    uint64_t v16 = v18;
    uint64_t v17 = v19;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      uint64_t aBlock = 0;
      unint64_t v33 = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      int v20 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      uint64_t aBlock = 0;
      swift_retain();
      sub_1B6B33E34(v20, &aBlock, 0xD000000000000034, 0x80000001B6F405F0);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v21 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v22 = v15;
      memcpy(&v21[v16], __dst, 0x480uLL);
      swift_release();
    }
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t aBlock = *(void *)(a1 + 1224);
    *(void *)(a1 + 1224) = 0x8000000000000000;
    sub_1B67E8400((uint64_t)v15, v16, v17, v10, isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 1224) = aBlock;
    swift_bridgeObjectRelease();
  }
  objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode);
  int v24 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v25 = v15;
  *a4 = *(_DWORD *)&v24[v16 + 832];
  sub_1B6A4DEDC(a5 & 1);
  swift_getObjectType();
  sub_1B6D0E064(v25, v16, v17, 0, 1, a7);
  if ((unint64_t)qword_1E9DD6490 >= 0x2540BE406)
  {
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v16;
    *(void *)(v26 + 32) = v17;
    *(unsigned char *)(v26 + 40) = a5 & 1;
    float32x4_t v36 = sub_1B69A21B8;
    uint64_t v37 = v26;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    unint64_t v33 = 1107296256;
    unint64_t v34 = sub_1B69A1A84;
    uint64_t v35 = &unk_1F0FBA0E0;
    uint64_t v27 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_release();
    objc_msgSend(a2, sel_setLateLatchingPatchHandler_, v27);
    _Block_release(v27);
  }
  return swift_unknownObjectRelease_n();
}

void sub_1B69A19EC(uint64_t a1, int a2, id a3, float32x4_t a4, uint64_t a5, uint64_t a6, char a7)
{
  objc_msgSend(a3, sel_storageMode);
  uint64_t v11 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v12 = a3;

  sub_1B6A4E784((float32x4_t *)&v11[a5], a1, a7, a4);
}

uint64_t sub_1B69A1A84(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  unsigned int v6 = *(void (**)(uint64_t, uint64_t, __n128))(a1 + 32);
  swift_retain();
  v6(a2, a3, a4);

  return swift_release();
}

unint64_t sub_1B69A1AF4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  swift_getObjectType();
  sub_1B62E73B0(a1[163], 1, a3);
  unint64_t v5 = a1[182];
  if (v5) {
    sub_1B62E73B0(v5, 1, a3);
  }
  unint64_t result = a1[196];
  if (result) {
    return sub_1B62E73B0(result, 1, a3);
  }
  return result;
}

void *sub_1B69A1B84(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
LABEL_3:
  if (v2 < 1)
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    sub_1B62CB234(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  sub_1B69A1C94((uint64_t)(v3 + 4), v2, a1);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1B69A1C94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    if (a2 >= 1)
    {
      swift_bridgeObjectRetain();
      sub_1B6E32C18();
      sub_1B6E32C18();
      sub_1B6E32C18();
      sub_1B6E32C08();
    }
  }
  else if (a2 >= 1)
  {
    sub_1B62FB89C();
    swift_arrayInitWithCopy();
  }
  return a3;
}

uint64_t sub_1B69A1D74(uint64_t a1, uint64_t a2)
{
  sub_1B62C6034(0, (unint64_t *)&qword_1EB97D6E0, (unint64_t *)&unk_1EB97D6D0, (uint64_t)&protocol descriptor for ExternalDataTable, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B69A1E04(uint64_t a1)
{
  sub_1B62C6034(0, (unint64_t *)&qword_1EB97D6E0, (unint64_t *)&unk_1EB97D6D0, (uint64_t)&protocol descriptor for ExternalDataTable, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B69A1E8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return swift_bridgeObjectRelease();
  }
  else {
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_1B69A1E9C(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B69A1EDC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1B6AB2BFC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1B69A1EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 16) = *(void *)a1;
  *(int8x16_t *)(a2 + 104) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  if (a3 >= 1 && (uint64_t v5 = *(void *)(a1 + 88), *(void *)(v5 + 16) >= (unint64_t)a3))
  {
    uint64_t v9 = (uint64_t *)(v5 + 40 * a3);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    *(void *)(a2 + 32) = *(v9 - 1);
    *(void *)(a2 + 40) = v10;
    *(void *)(a2 + 48) = v11;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    uint64_t v12 = *(void *)(a1 + 80);
    *(void *)(a2 + 56) = v12 != 2;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v8 = v11 / v12;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      *(void *)(a2 + 32) = v6;
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v8 = *(void *)(a1 + 72);
      *(void *)(a2 + 56) = *(void *)(a1 + 80) != 2;
    }
    else
    {
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 32) = 0;
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v8 = 0;
    }
  }
  *(void *)(a2 + 64) = v8;
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = (_OWORD *)(v13 + 40 * v14);
    long long v16 = *v15;
    *(void *)(a2 + 80) = *((void *)v15 - 1);
    *(_OWORD *)(a2 + 88) = v16;
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }
  *(void *)(a2 + 72) = 0;
  return result;
}

uint64_t sub_1B69A2030()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B69A2068()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B69A20B0(void *a1, void *a2)
{
  return sub_1B69A05A8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned int *)(v2 + 32) | ((unint64_t)*(unsigned __int8 *)(v2 + 36) << 32), *(unsigned char *)(v2 + 37), *(unsigned char *)(v2 + 38), *(void *)(v2 + 40));
}

uint64_t sub_1B69A20E0(uint64_t a1)
{
  return sub_1B69A15E8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(_DWORD **)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1B69A2108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6AEC3C4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1B69A2128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6AED6DC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(_DWORD *)(v2 + 40), *(unsigned int *)(v2 + 44) | ((unint64_t)*(unsigned __int8 *)(v2 + 48) << 32), a2);
}

unint64_t sub_1B69A2164(unint64_t *a1)
{
  return sub_1B69A1AF4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B69A2180()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 41, 7);
}

void sub_1B69A21B8(uint64_t a1, int a2, float32x4_t a3)
{
  sub_1B69A19EC(a1, a2, *(id *)(v3 + 16), a3, *(void *)(v3 + 24), *(void *)(v3 + 32), *(unsigned char *)(v3 + 40));
}

uint64_t sub_1B69A21C8@<X0>(void *a1@<X8>)
{
  return sub_1B699DBBC(a1);
}

uint64_t type metadata accessor for IndexedArray()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B69A2200(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __n128 a6, __n128 a7)
{
  uint64_t v10 = (uint64_t *)a1[11];
  uint64_t v11 = a1[12];
  uint64_t v12 = a1[13];
  uint64_t v13 = a1[2];
  uint64_t v14 = sub_1B62C9024((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1F0F709E8, v10, v11, v12, v13);
  uint64_t v15 = sub_1B62C9024((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1F0FAAB28, v10, v11, v12, v13);
  uint64_t v16 = a1[6];
  uint64_t v17 = (__n128 *)(v15 + 32 * v16);
  *uint64_t v17 = a6;
  v17[1] = a7;
  *(void *)(v14 + 8 * v16) = a2;
  swift_retain();
  swift_release();
  swift_retain();
  swift_retain();
  sub_1B62F0788(a4, a3, 0, 1, a5, 0, a1);
  swift_release();
  return swift_release();
}

uint64_t sub_1B69A2328(void *a1, uint64_t a2, int32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15)
{
  int v20 = (uint64_t *)a1[11];
  uint64_t v19 = a1[12];
  uint64_t v21 = a1[13];
  uint64_t v22 = a1[2];
  uint64_t v62 = sub_1B62C9024((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1F0F709E8, v20, v19, v21, v22);
  uint64_t v23 = sub_1B62C9024((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1F0FAAB28, v20, v19, v21, v22);
  uint64_t v24 = a1[6];
  uint64_t v25 = a1[7];
  uint64_t v26 = v25 - v24;
  unint64_t v48 = a1;
  if (v25 == v24)
  {
    uint64_t v27 = a14;
  }
  else
  {
    uint64_t v29 = a1[3];
    int32x4_t v31 = a3[6];
    int32x4_t v30 = a3[7];
    float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 0);
    __int32 v55 = v31.i32[3];
    uint64_t v57 = a4;
    float32x4_t v52 = (float32x4_t)vdupq_laneq_s32(v31, 2);
    float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 1);
    float32x4_t v32 = (float32x4_t)v30;
    v32.i32[1] = v30.i32[0];
    v32.i32[2] = v30.i32[0];
    float32x4_t v51 = v32;
    float32x4_t v49 = (float32x4_t)vzip2q_s32(vtrn1q_s32(v30, v30), v30);
    float32x4_t v50 = (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v30.i8, 1), v30);
    unint64_t v33 = (float32x4_t *)(v23 + 32 * v24 + 16);
    uint64_t v63 = (uint64_t *)(v62 + 8 * v24);
    unint64_t v34 = (float32x4_t *)(a2 + (v29 << 6) + 32);
    uint64_t v59 = a8;
    uint64_t v35 = a7 - v29 * a8;
    uint64_t v36 = a6 + v29 * a8;
    uint64_t v37 = a11 - v29 * a12;
    uint64_t v38 = a10 + v29 * a12;
    uint64_t v27 = a14;
    do
    {
      uint64_t v61 = v26;
      float32x4_t v39 = v34[-2];
      float32x4_t v40 = v34[-1];
      float32x4_t v41 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v34[1], *v34, v52), v40, v53), v39, v54);
      v41.i32[3] = v55;
      float32x4_t v42 = vmlaq_f32(vmlaq_f32(vmulq_f32(v50, vabsq_f32(v40)), v51, vabsq_f32(v39)), v49, vabsq_f32(*v34));
      v33[-1] = v41;
      *unint64_t v33 = v42;
      v66[0] = a5;
      v66[1] = v36;
      v66[2] = v35;
      v66[3] = 0;
      char v67 = 0;
      swift_unknownObjectRetain();
      sub_1B62E9144((uint64_t)v66, 4, 0);
      swift_unknownObjectRelease();
      v64[0] = a9;
      v64[1] = v38;
      _OWORD v64[2] = v37;
      v64[3] = 0;
      char v65 = 0;
      swift_unknownObjectRetain();
      sub_1B62E9144((uint64_t)v64, 5, 0);
      swift_unknownObjectRelease();
      uint64_t v43 = v27;
      uint64_t v44 = *(void *)(v27 + 176);
      swift_retain();
      swift_retain();
      uint64_t v45 = v68;
      uint64_t v46 = sub_1B62EC590((uint64_t)&type metadata for DrawCallPool, (uint64_t)&off_1F0F59788, v44);
      uint64_t v68 = v45;
      swift_release();
      if (!v46)
      {
        type metadata accessor for DrawCall();
        uint64_t v46 = swift_allocObject();
        sub_1B630041C();
      }
      swift_release();
      uint64_t v27 = v43;
      sub_1B699E460(v57);
      *v63++ = v46;
      swift_release();
      v33 += 2;
      v34 += 4;
      v35 -= v59;
      v36 += v59;
      v37 -= a12;
      v38 += a12;
      uint64_t v26 = v61 - 1;
    }
    while (v61 != 1);
  }
  swift_retain();
  swift_retain();
  sub_1B62F0788(v27, a13, 0, 1, a15, 0, v48);
  swift_release();
  return swift_release();
}

ValueMetadata *type metadata accessor for DrawCallLayer()
{
  return &type metadata for DrawCallLayer;
}

unsigned char *_s3VFX13DrawCallLayerVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69A2750);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s28DrawCallEntityClassesContextVMa()
{
  return &_s28DrawCallEntityClassesContextVN;
}

ValueMetadata *_s21DrawCallEntityClassesVMa()
{
  return &_s21DrawCallEntityClassesVN;
}

ValueMetadata *type metadata accessor for DrawCallPool()
{
  return &type metadata for DrawCallPool;
}

ValueMetadata *type metadata accessor for RenderingOrder()
{
  return &type metadata for RenderingOrder;
}

ValueMetadata *type metadata accessor for DrawCallGenerationContext()
{
  return &type metadata for DrawCallGenerationContext;
}

uint64_t sub_1B69A27C8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B69A27E4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B69A2800()
{
  return sub_1B69A2A04();
}

uint64_t sub_1B69A2818()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B69A287C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B69A28E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B69A28FC()
{
  return sub_1B69A2A04();
}

uint64_t sub_1B69A2914()
{
  return swift_getWitnessTable();
}

unint64_t sub_1B69A297C()
{
  unint64_t result = qword_1E9DD3398;
  if (!qword_1E9DD3398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3398);
  }
  return result;
}

uint64_t sub_1B69A29D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B69A29EC()
{
  return sub_1B69A2A04();
}

uint64_t sub_1B69A2A04()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B69A2A50()
{
  return swift_getWitnessTable();
}

unint64_t sub_1B69A2A6C()
{
  unint64_t result = qword_1E9DD33B0;
  if (!qword_1E9DD33B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD33B0);
  }
  return result;
}

void sub_1B69A2AC0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B69A2A6C();
    unint64_t v7 = a3(a1, &type metadata for RenderingOrder.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for RenderingOrder.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B69A2BC0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderingOrder.CodingKeys()
{
  return &type metadata for RenderingOrder.CodingKeys;
}

unint64_t sub_1B69A2BFC()
{
  unint64_t result = qword_1E9DD33C0;
  if (!qword_1E9DD33C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD33C0);
  }
  return result;
}

unint64_t sub_1B69A2C54()
{
  unint64_t result = qword_1E9DD33C8;
  if (!qword_1E9DD33C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD33C8);
  }
  return result;
}

unint64_t sub_1B69A2CAC()
{
  unint64_t result = qword_1E9DD33D0;
  if (!qword_1E9DD33D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD33D0);
  }
  return result;
}

uint64_t sub_1B69A2D00(uint64_t *a1)
{
  return sub_1B636EA8C(a1);
}

uint64_t sub_1B69A2D1C(uint64_t a1)
{
  return sub_1B636EA28(a1);
}

uint64_t sub_1B69A2D40()
{
  if (v0[4] == 1) {
    return *v0 & 1;
  }
  else {
    return 1;
  }
}

double sub_1B69A2D60(uint64_t a1, unsigned int a2, char a3)
{
  double result = 0.0;
  if (!a3)
  {
    v4.i64[0] = a1;
    v4.i64[1] = a2;
    *(void *)&double result = vmaxq_u32(v4, (uint32x4_t)xmmword_1B6E78280).u64[0];
  }
  return result;
}

uint64_t sub_1B69A2D8C(unsigned int a1, uint64_t a2, char a3)
{
  if (a1 <= 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = a1;
  }
  if (a3 == 1) {
    return v3;
  }
  else {
    return 0;
  }
}

BOOL sub_1B69A2DA4()
{
  return *(_DWORD *)(v0 + 152) != -1 || *(_DWORD *)(v0 + 156) != 0;
}

double sub_1B69A2DC8(__n128 _Q0, float a2, float a3)
{
  _S4 = -2.0;
  __asm { FMLA            S5, S4, V0.S[1] }
  __int32 v15 = LODWORD(_S5);
  float v16 = _Q0.n128_f32[2];
  float v9 = sqrtf(1.0 - (float)(_S5 * _S5));
  __float2 v10 = __sincosf_stret(vmlas_n_f32(a2, a3 - a2, _Q0.n128_f32[0]));
  v11.f32[0] = v9 * v10.__cosval;
  v11.i32[1] = v15;
  v11.f32[2] = v9 * v10.__sinval;
  float32x4_t v12 = vmulq_n_f32(v11, cbrtf(v16));
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  *(void *)&double result = vmulq_f32(v12, v13).u64[0];
  return result;
}

double sub_1B69A2EB8(float32x4_t a1, float a2, float a3)
{
  float v3 = vmlas_n_f32(a2, a3 - a2, a1.f32[0]);
  __float2 v4 = __sincosf_stret((float)(1.0 - a1.f32[1]) * 3.1416);
  float v5 = fmaxf(v4.__sinval, 0.0000001);
  __float2 v6 = __sincosf_stret(v3);
  v7.f32[0] = v5 * v6.__cosval;
  v7.i32[1] = LODWORD(v4.__cosval);
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  v7.f32[2] = v5 * v6.__sinval;
  *(void *)&double result = vmulq_f32(vmulq_laneq_f32(v7, a1, 2), v8).u64[0];
  return result;
}

uint64_t sub_1B69A2FB8()
{
  return sub_1B6E31BC8();
}

uint64_t sub_1B69A3018()
{
  return sub_1B6E31B28();
}

void sub_1B69A3068(void *a1@<X8>)
{
  *a1 = &unk_1F0F783F8;
}

double sub_1B69A3078()
{
  sub_1B62AA5A0(0, &qword_1EB980BE8, (uint64_t)&type metadata for ShapeDistribution, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E77D10;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 48) = 2;
  sub_1B684C6E4(0xAuLL, 0xAuLL, 0xAuLL);
  *(_OWORD *)(v0 + 64) = v1;
  *(unsigned char *)(v0 + 80) = 0;
  *(void *)&double result = 100;
  *(_OWORD *)(v0 + 96) = xmmword_1B6E78260;
  *(unsigned char *)(v0 + 112) = 1;
  qword_1EB997CF8 = v0;
  return result;
}

uint64_t sub_1B69A311C(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  if (a4)
  {
    if (a4 == 1)
    {
      sub_1B62C550C((uint64_t)v7, v8);
      sub_1B6E332A8();
      if (!v4)
      {
        sub_1B62C550C((uint64_t)v7, v8);
        sub_1B6E332E8();
      }
    }
    else
    {
      sub_1B62C550C((uint64_t)v7, v8);
      sub_1B6E332A8();
    }
  }
  else
  {
    sub_1B62C550C((uint64_t)v7, v8);
    sub_1B6E332A8();
    if (!v4)
    {
      sub_1B62C550C((uint64_t)v7, v8);
      sub_1B62AA450(0, (unint64_t *)&unk_1EB980EC0, (uint64_t (*)(void))sub_1B675900C, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC2A8]);
      sub_1B69ACCF4((unint64_t *)&qword_1E9DD33E8);
      sub_1B6E332B8();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
}

uint64_t sub_1B69A32F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B69A731C(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1B69AB904);
}

uint64_t sub_1B69A3310(void *a1)
{
  return sub_1B69A311C(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t sub_1B69A3330@<X0>(void *a1@<X8>)
{
  return sub_1B69A7384(&qword_1EB97EFC0, &qword_1EB997CF8, a1);
}

uint64_t sub_1B69A3354()
{
  return sub_1B6E31B28();
}

void sub_1B69A33A4(void *a1@<X8>)
{
  *a1 = &unk_1F0F5E970;
}

uint64_t sub_1B69A33B4(uint64_t a1)
{
  if (qword_1E9DCC530 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E9E494D0;
  if (*(void *)(qword_1E9E494D0 + 16) && (unint64_t v3 = sub_1B62C1A30(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = sub_1B66410A0(a1, 0.0);
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = v6 + 1;
      uint64_t v8 = *(void *)(sub_1B69AB338(v6 + 1, 2uLL) + 32);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = (uint64_t)sub_1B6C16918(v5);
      }
      *(void *)(v5 + 8 * v6++ + 32) = v8;
    }
    while (a1 != v7);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = qword_1E9E494D0;
    qword_1E9E494D0 = 0x8000000000000000;
    sub_1B67E8540(v5, a1, isUniquelyReferenced_nonNull_native);
    qword_1E9E494D0 = v11;
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_1B69A34FC(uint64_t a1)
{
  if (qword_1E9DCC538 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E9E494D8;
  if (*(void *)(qword_1E9E494D8 + 16) && (unint64_t v3 = sub_1B62C1A30(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = sub_1B6640FB8(a1, (__n128)0);
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = v6 + 1;
      uint64_t v8 = sub_1B69AB338(v6 + 1, 3uLL);
      uint64_t v13 = *(void *)(v8 + 32);
      unsigned int v12 = *(_DWORD *)(v8 + 40);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = (uint64_t)sub_1B6C1688C(v5);
      }
      *(void *)&long long v9 = v13;
      *((void *)&v9 + 1) = v12;
      *(_OWORD *)(v5 + 16 * v6++ + 32) = v9;
    }
    while (a1 != v7);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = qword_1E9E494D8;
    qword_1E9E494D8 = 0x8000000000000000;
    sub_1B67E7148(v5, a1, isUniquelyReferenced_nonNull_native);
    qword_1E9E494D8 = v14;
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t *sub_1B69A3654(uint64_t *result, uint64_t a2, uint64_t a3, __n128 *a4, int32x4_t a5, double a6, double a7, double a8, __n128 a9, double a10, int32x4_t a11)
{
  if (a2 != a3)
  {
    int v11 = a4[1].n128_u8[0];
    unint64_t v12 = a4[5].n128_u64[0];
    unint64_t v13 = a4[6].n128_u64[0];
    unint64_t v14 = a4[7].n128_u64[0];
    unint64_t v15 = a4->n128_u64[0];
    uint32x4_t v16 = *(uint32x4_t *)a4;
    v16.i32[3] = 0;
    unint64_t v17 = -(uint64_t)v15;
    a5.i64[0] = 0x3F0000003F000000;
    int32x4_t v18 = (int32x4_t)vmaxq_u32(v16, (uint32x4_t)xmmword_1B6E78280);
    unsigned __int32 v19 = vmulq_laneq_s32(vmulq_lane_s32(v18, *(int32x2_t *)v18.i8, 1), v18, 2).u32[0];
    do
    {
      if (v11)
      {
        if (v11 == 1)
        {
          uint64_t v29 = a4[4].n128_i64[0];
          float32x2_t v27 = *(float32x2_t *)(a4[8].n128_u64[0] + 8 * (v29 % (int64_t)a4[4].n128_u64[1]) + 32);
          switch(a4[1].n128_u8[1])
          {
            case 1u:
              a4[4].n128_u64[0] = v29 - 1;
              break;
            case 2u:
              a4[4].n128_u64[0] = ((v29 >> 63) | 1) + v29;
              break;
            case 3u:
              uint64_t v33 = result[1];
              uint64_t v34 = 9 * __ROR8__(5 * v33, 57);
              uint64_t v35 = result[2] ^ *result;
              uint64_t v36 = result[3] ^ v33;
              uint64_t v37 = v35 ^ v33;
              uint64_t v38 = v36 ^ *result;
              *double result = v38;
              result[1] = v35 ^ v33;
              uint64_t v39 = __ROR8__(v36, 19);
              uint64_t v40 = v35 ^ (v33 << 17);
              result[2] = v40;
              result[3] = v39;
              unint64_t v41 = ((unint64_t)v34 * (unsigned __int128)v15) >> 64;
              if (v15 > v34 * v15 && v17 % v15 > v34 * v15)
              {
                do
                {
                  uint64_t v42 = 9 * __ROR8__(5 * v37, 57);
                  uint64_t v43 = v38 ^ v40;
                  uint64_t v44 = v37 ^ v39;
                  v40 ^= v38 ^ (v37 << 17);
                  v37 ^= v43;
                  v38 ^= v44;
                  uint64_t v39 = __ROR8__(v44, 19);
                }
                while (v17 % v15 > v42 * v15);
                *double result = v38;
                result[1] = v37;
                unint64_t v41 = ((unint64_t)v42 * (unsigned __int128)v15) >> 64;
                result[2] = v40;
                result[3] = v39;
              }
              a4[4].n128_u64[0] = v41;
              break;
            default:
              a4[4].n128_u64[0] = v29 + 1;
              break;
          }
        }
        else
        {
          uint64_t v20 = result[1];
          uint64_t v21 = result[2] ^ *result;
          uint64_t v22 = result[3] ^ v20;
          uint64_t v23 = v21 ^ v20;
          uint64_t v24 = v22 ^ *result;
          v27.f32[0] = (float)((9 * ((((unint64_t)(5 * v20) >> 32) >> 25) | (640 * v20))) & 0xFFFFFF)
                     * 0.000000059605;
          uint64_t v25 = v24 ^ v21 ^ (v20 << 17);
          uint64_t v26 = v23 ^ __ROR8__(v22, 19);
          *double result = v26 ^ v24;
          result[1] = v25 ^ v23;
          result[2] = v25 ^ (v23 << 17);
          result[3] = __ROR8__(v26, 19);
          v27.f32[1] = (float)((9 * ((((unint64_t)(5 * v23) >> 32) >> 25) | (640 * v23))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v30 = a4[4].n128_i64[0];
        float v31 = (float)v30;
        switch(a4[1].n128_u8[1])
        {
          case 1u:
            uint64_t v32 = v30 - 1;
            break;
          case 2u:
            uint64_t v32 = ((v30 >> 63) | 1) + v30;
            break;
          case 3u:
            uint64_t v45 = result[1];
            uint64_t v46 = 9 * __ROR8__(5 * v45, 57);
            uint64_t v47 = result[2] ^ *result;
            uint64_t v48 = result[3] ^ v45;
            uint64_t v49 = v47 ^ v45;
            uint64_t v50 = v48 ^ *result;
            *double result = v50;
            result[1] = v47 ^ v45;
            uint64_t v51 = __ROR8__(v48, 19);
            uint64_t v52 = v47 ^ (v45 << 17);
            result[2] = v52;
            result[3] = v51;
            uint64_t v32 = ((unint64_t)v46 * (unsigned __int128)v19) >> 64;
            unint64_t v53 = v46 * v19;
            if (v53 < v19)
            {
              unint64_t v54 = -(uint64_t)v19 % (unint64_t)v19;
              if (v54 > v53)
              {
                do
                {
                  uint64_t v55 = 9 * __ROR8__(5 * v49, 57);
                  uint64_t v56 = v50 ^ v52;
                  uint64_t v57 = v49 ^ v51;
                  v52 ^= v50 ^ (v49 << 17);
                  v49 ^= v56;
                  v50 ^= v57;
                  uint64_t v51 = __ROR8__(v57, 19);
                }
                while (v54 > v55 * (unint64_t)v19);
                *double result = v50;
                result[1] = v49;
                uint64_t v32 = ((unint64_t)v55 * (unsigned __int128)v19) >> 64;
                result[2] = v52;
                result[3] = v51;
              }
            }
            break;
          default:
            uint64_t v32 = v30 + 1;
            break;
        }
        a4[4].n128_u64[0] = v32;
        a11 = (int32x4_t)a4[2];
        float v58 = v31 * *(float *)a11.i32;
        v59.f32[0] = fminf(v58 - floorf(v58), 1.0);
        float v60 = vmuls_lane_f32(v58 - v59.f32[0], *(float32x2_t *)a11.i8, 1);
        v59.i32[1] = fminf(v60 - floorf(v60), 1.0);
        float32x2_t v27 = vadd_f32(vmul_f32(*(float32x2_t *)a11.i8, (float32x2_t)0x3F0000003F000000), v59);
      }
      *(float32x2_t *)a11.i8 = vadd_f32(v27, (float32x2_t)0xBF000000BF000000);
      a11 = vzip1q_s32(a11, a5);
      a11.i32[1] = 0;
      a11.i32[3] = a9.n128_i32[3];
      uint64_t v28 = 16 * a2;
      *(int32x4_t *)(v12 + v28) = a11;
      *(_OWORD *)(v13 + v28) = xmmword_1B6E4F320;
      *(float32x2_t *)(v14 + 8 * a2++) = v27;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1B69A39D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, __n128 a7)
{
  if (a2 != a3)
  {
    uint64_t v10 = a2;
    int v12 = *(unsigned __int8 *)(a4 + 16);
    uint64_t v13 = *(void *)(a4 + 80);
    uint64_t v14 = *(void *)(a4 + 96);
    uint64_t v15 = *(void *)(a4 + 112);
    unint64_t v16 = *(void *)a4;
    unint64_t v65 = -(uint64_t)v16;
    uint32x4_t v17 = *(uint32x4_t *)a4;
    v17.i32[3] = 0;
    float v18 = a6 - a5;
    int32x4_t v19 = (int32x4_t)vmaxq_u32(v17, (uint32x4_t)xmmword_1B6E78280);
    int32x4_t v20 = vmulq_lane_s32(v19, *(int32x2_t *)v19.i8, 1);
    unsigned __int32 v66 = vmulq_laneq_s32(v20, v19, 2).u32[0];
    do
    {
      unsigned __int32 v68 = a7.n128_u32[3];
      __int32 v69 = v20.i32[3];
      if (v12)
      {
        if (v12 == 1)
        {
          uint64_t v33 = *(void *)(a4 + 64);
          float32x2_t v28 = *(float32x2_t *)(*(void *)(a4 + 128) + 8 * (v33 % *(void *)(a4 + 72)) + 32);
          switch(*(unsigned char *)(a4 + 17))
          {
            case 1:
              *(void *)(a4 + 64) = v33 - 1;
              break;
            case 2:
              *(void *)(a4 + 64) = ((v33 >> 63) | 1) + v33;
              break;
            case 3:
              uint64_t v36 = a1[1];
              uint64_t v37 = 9 * __ROR8__(5 * v36, 57);
              uint64_t v38 = a1[2] ^ *a1;
              uint64_t v39 = a1[3] ^ v36;
              uint64_t v40 = v38 ^ v36;
              uint64_t v41 = v39 ^ *a1;
              *a1 = v41;
              a1[1] = v38 ^ v36;
              uint64_t v42 = __ROR8__(v39, 19);
              uint64_t v43 = v38 ^ (v36 << 17);
              a1[2] = v43;
              a1[3] = v42;
              uint64_t v44 = ((unint64_t)v37 * (unsigned __int128)v16) >> 64;
              if (v16 > v37 * v16 && v65 % v16 > v37 * v16)
              {
                do
                {
                  uint64_t v45 = 9 * __ROR8__(5 * v40, 57);
                  uint64_t v46 = v41 ^ v43;
                  uint64_t v47 = v40 ^ v42;
                  v43 ^= v41 ^ (v40 << 17);
                  v40 ^= v46;
                  v41 ^= v47;
                  uint64_t v42 = __ROR8__(v47, 19);
                }
                while (v65 % v16 > v45 * v16);
                *a1 = v41;
                a1[1] = v40;
                uint64_t v44 = ((unint64_t)v45 * (unsigned __int128)v16) >> 64;
                a1[2] = v43;
                a1[3] = v42;
              }
              *(void *)(a4 + 64) = v44;
              break;
            default:
              *(void *)(a4 + 64) = v33 + 1;
              break;
          }
        }
        else
        {
          uint64_t v21 = a1[1];
          uint64_t v22 = a1[2] ^ *a1;
          uint64_t v23 = a1[3] ^ v21;
          uint64_t v24 = v22 ^ v21;
          uint64_t v25 = v23 ^ *a1;
          v28.f32[0] = (float)((9 * ((((unint64_t)(5 * v21) >> 32) >> 25) | (640 * v21))) & 0xFFFFFF)
                     * 0.000000059605;
          uint64_t v26 = v25 ^ v22 ^ (v21 << 17);
          uint64_t v27 = v24 ^ __ROR8__(v23, 19);
          *a1 = v27 ^ v25;
          a1[1] = v26 ^ v24;
          a1[2] = v26 ^ (v24 << 17);
          a1[3] = __ROR8__(v27, 19);
          v28.f32[1] = (float)((9 * ((((unint64_t)(5 * v24) >> 32) >> 25) | (640 * v24))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(a4 + 64);
        switch(*(unsigned char *)(a4 + 17))
        {
          case 1:
            uint64_t v35 = v34 - 1;
            break;
          case 2:
            uint64_t v35 = ((v34 >> 63) | 1) + v34;
            break;
          case 3:
            uint64_t v48 = a1[1];
            uint64_t v49 = 9 * __ROR8__(5 * v48, 57);
            uint64_t v50 = a1[2] ^ *a1;
            uint64_t v51 = a1[3] ^ v48;
            uint64_t v52 = v50 ^ v48;
            uint64_t v53 = v51 ^ *a1;
            *a1 = v53;
            a1[1] = v50 ^ v48;
            uint64_t v54 = __ROR8__(v51, 19);
            uint64_t v55 = v50 ^ (v48 << 17);
            a1[2] = v55;
            a1[3] = v54;
            uint64_t v35 = ((unint64_t)v49 * (unsigned __int128)v66) >> 64;
            unint64_t v56 = v49 * v66;
            if (v56 < v66)
            {
              unint64_t v57 = -(uint64_t)v66 % (unint64_t)v66;
              if (v57 > v56)
              {
                do
                {
                  uint64_t v58 = 9 * __ROR8__(5 * v52, 57);
                  uint64_t v59 = v53 ^ v55;
                  uint64_t v60 = v52 ^ v54;
                  v55 ^= v53 ^ (v52 << 17);
                  v52 ^= v59;
                  v53 ^= v60;
                  uint64_t v54 = __ROR8__(v60, 19);
                }
                while (v57 > v58 * (unint64_t)v66);
                *a1 = v53;
                a1[1] = v52;
                uint64_t v35 = ((unint64_t)v58 * (unsigned __int128)v66) >> 64;
                a1[2] = v55;
                a1[3] = v54;
              }
            }
            break;
          default:
            uint64_t v35 = v34 + 1;
            break;
        }
        *(void *)(a4 + 64) = v35;
        long long v61 = *(_OWORD *)(a4 + 32);
        float v62 = (float)v34 * *(float *)&v61;
        v63.f32[0] = fminf(v62 - floorf(v62), 1.0);
        float v64 = vmuls_lane_f32(v62 - v63.f32[0], *(float32x2_t *)&v61, 1);
        v63.i32[1] = fminf(v64 - floorf(v64), 1.0);
        float32x2_t v28 = vadd_f32(vmul_f32(*(float32x2_t *)&v61, (float32x2_t)0x3F0000003F000000), v63);
      }
      float32x2_t v67 = v28;
      __float2 v29 = __sincosf_stret(vmlas_n_f32(a5, v18, v28.f32[0]));
      *(float32x2_t *)v20.i8 = vmul_f32((float32x2_t)__PAIR64__(v67.u32[1], LODWORD(v29.__cosval)), (float32x2_t)0x3F0000003F000000);
      float32x4_t v30 = (float32x4_t)v20;
      v30.i32[1] = vadd_f32(v67, (float32x2_t)0xBF000000BF000000).i32[1];
      v30.f32[2] = v29.__sinval * 0.5;
      v20.i32[1] = v30.i32[1];
      *(float *)&v20.i32[2] = v29.__sinval * 0.5;
      v20.i32[3] = v68;
      float32x4_t v31 = vmulq_f32(v30, (float32x4_t)xmmword_1B6E99DE0);
      v31.i32[3] = v69;
      uint64_t v32 = 16 * v10;
      *(int32x4_t *)(v13 + v32) = v20;
      *(float32x4_t *)(v14 + v32) = v31;
      *(float32x2_t *)(v15 + 8 * v10) = v67;
      a7.n128_u32[3] = v68;
      v20.i32[3] = v69;
      ++v10;
    }
    while (v10 != a3);
  }
}

void sub_1B69A3E1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7)
{
  if (a2 != a3)
  {
    uint64_t v11 = a2;
    int v13 = *(unsigned __int8 *)(a4 + 16);
    uint64_t v14 = *(void *)(a4 + 80);
    uint64_t v15 = *(void *)(a4 + 96);
    uint64_t v16 = *(void *)(a4 + 112);
    unint64_t v17 = *(void *)a4;
    unint64_t v73 = -(uint64_t)v17;
    uint32x4_t v18 = *(uint32x4_t *)a4;
    v18.i32[3] = 0;
    float v19 = a7 - a6;
    int32x4_t v20 = (int32x4_t)vmaxq_u32(v18, (uint32x4_t)xmmword_1B6E78280);
    float32x4_t v21 = (float32x4_t)vmulq_lane_s32(v20, *(int32x2_t *)v20.i8, 1);
    unsigned __int32 v74 = vmulq_laneq_s32((int32x4_t)v21, v20, 2).u32[0];
    do
    {
      __int32 v75 = v21.i32[3];
      if (v13)
      {
        if (v13 == 1)
        {
          uint64_t v41 = *(void *)(a4 + 64);
          float32x2_t v29 = *(float32x2_t *)(*(void *)(a4 + 128) + 8 * (v41 % *(void *)(a4 + 72)) + 32);
          switch(*(unsigned char *)(a4 + 17))
          {
            case 1:
              *(void *)(a4 + 64) = v41 - 1;
              break;
            case 2:
              *(void *)(a4 + 64) = ((v41 >> 63) | 1) + v41;
              break;
            case 3:
              uint64_t v44 = a1[1];
              uint64_t v45 = 9 * __ROR8__(5 * v44, 57);
              uint64_t v46 = a1[2] ^ *a1;
              uint64_t v47 = a1[3] ^ v44;
              uint64_t v48 = v46 ^ v44;
              uint64_t v49 = v47 ^ *a1;
              *a1 = v49;
              a1[1] = v46 ^ v44;
              uint64_t v50 = __ROR8__(v47, 19);
              uint64_t v51 = v46 ^ (v44 << 17);
              a1[2] = v51;
              a1[3] = v50;
              uint64_t v52 = ((unint64_t)v45 * (unsigned __int128)v17) >> 64;
              if (v17 > v45 * v17 && v73 % v17 > v45 * v17)
              {
                do
                {
                  uint64_t v53 = 9 * __ROR8__(5 * v48, 57);
                  uint64_t v54 = v49 ^ v51;
                  uint64_t v55 = v48 ^ v50;
                  v51 ^= v49 ^ (v48 << 17);
                  v48 ^= v54;
                  v49 ^= v55;
                  uint64_t v50 = __ROR8__(v55, 19);
                }
                while (v73 % v17 > v53 * v17);
                *a1 = v49;
                a1[1] = v48;
                uint64_t v52 = ((unint64_t)v53 * (unsigned __int128)v17) >> 64;
                a1[2] = v51;
                a1[3] = v50;
              }
              *(void *)(a4 + 64) = v52;
              break;
            default:
              *(void *)(a4 + 64) = v41 + 1;
              break;
          }
        }
        else
        {
          uint64_t v22 = a1[1];
          uint64_t v23 = a1[2] ^ *a1;
          uint64_t v24 = a1[3] ^ v22;
          uint64_t v25 = v23 ^ v22;
          uint64_t v26 = v24 ^ *a1;
          v29.f32[0] = (float)((9 * ((((unint64_t)(5 * v22) >> 32) >> 25) | (640 * v22))) & 0xFFFFFF)
                     * 0.000000059605;
          uint64_t v27 = v26 ^ v23 ^ (v22 << 17);
          uint64_t v28 = v25 ^ __ROR8__(v24, 19);
          *a1 = v28 ^ v26;
          a1[1] = v27 ^ v25;
          a1[2] = v27 ^ (v25 << 17);
          a1[3] = __ROR8__(v28, 19);
          v29.f32[1] = (float)((9 * ((((unint64_t)(5 * v25) >> 32) >> 25) | (640 * v25))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(a4 + 64);
        switch(*(unsigned char *)(a4 + 17))
        {
          case 1:
            uint64_t v43 = v42 - 1;
            break;
          case 2:
            uint64_t v43 = ((v42 >> 63) | 1) + v42;
            break;
          case 3:
            uint64_t v56 = a1[1];
            uint64_t v57 = 9 * __ROR8__(5 * v56, 57);
            uint64_t v58 = a1[2] ^ *a1;
            uint64_t v59 = a1[3] ^ v56;
            uint64_t v60 = v58 ^ v56;
            uint64_t v61 = v59 ^ *a1;
            *a1 = v61;
            a1[1] = v58 ^ v56;
            uint64_t v62 = __ROR8__(v59, 19);
            uint64_t v63 = v58 ^ (v56 << 17);
            a1[2] = v63;
            a1[3] = v62;
            uint64_t v43 = ((unint64_t)v57 * (unsigned __int128)v74) >> 64;
            unint64_t v64 = v57 * v74;
            if (v64 < v74)
            {
              unint64_t v65 = -(uint64_t)v74 % (unint64_t)v74;
              if (v65 > v64)
              {
                do
                {
                  uint64_t v66 = 9 * __ROR8__(5 * v60, 57);
                  uint64_t v67 = v61 ^ v63;
                  uint64_t v68 = v60 ^ v62;
                  v63 ^= v61 ^ (v60 << 17);
                  v60 ^= v67;
                  v61 ^= v68;
                  uint64_t v62 = __ROR8__(v68, 19);
                }
                while (v65 > v66 * (unint64_t)v74);
                *a1 = v61;
                a1[1] = v60;
                uint64_t v43 = ((unint64_t)v66 * (unsigned __int128)v74) >> 64;
                a1[2] = v63;
                a1[3] = v62;
              }
            }
            break;
          default:
            uint64_t v43 = v42 + 1;
            break;
        }
        *(void *)(a4 + 64) = v43;
        long long v69 = *(_OWORD *)(a4 + 32);
        float v70 = (float)v42 * *(float *)&v69;
        v71.f32[0] = fminf(v70 - floorf(v70), 1.0);
        float v72 = vmuls_lane_f32(v70 - v71.f32[0], *(float32x2_t *)&v69, 1);
        v71.i32[1] = fminf(v72 - floorf(v72), 1.0);
        float32x2_t v29 = vadd_f32(vmul_f32(*(float32x2_t *)&v69, (float32x2_t)0x3F0000003F000000), v71);
      }
      float32x2_t v76 = v29;
      __float2 v30 = __sincosf_stret(vmlas_n_f32(a6, v19, v29.f32[0]));
      __float2 v31 = __sincosf_stret(vmuls_lane_f32(6.2832, v76, 1));
      float64x2_t v32 = vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v30.__sinval), LODWORD(v30.__cosval))), (float)(v31.__cosval * a5) + 0.5);
      *(float32x2_t *)v21.f32 = vcvt_f32_f64(v32);
      v21.f32[2] = v31.__sinval * a5;
      v33.i64[0] = 0xBF000000BF000000;
      v33.i64[1] = 0xBF000000BF000000;
      float32x4_t v34 = vaddq_f32(v21, vmulq_f32((float32x4_t)__PAIR64__(LODWORD(v30.__sinval), LODWORD(v30.__cosval)), v33));
      float32x4_t v35 = vmulq_f32(v34, v34);
      v35.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).u64[0];
      float32x4_t v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0);
      v36.i32[3] = 0;
      float32x4_t v37 = vrsqrteq_f32(v36);
      float32x4_t v38 = vmulq_f32(v37, vrsqrtsq_f32(v36, vmulq_f32(v37, v37)));
      int32x4_t v39 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v35.f32[0] != 0.0)), 0x1FuLL));
      v39.i32[3] = 0;
      v21.i32[3] = v75;
      uint64_t v40 = 16 * v11;
      *(float32x4_t *)(v14 + v40) = v21;
      *(int8x16_t *)(v15 + v40) = vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)vmulq_f32(vmulq_f32(v38, vrsqrtsq_f32(v36, vmulq_f32(v38, v38))), v34), (int8x16_t)v34);
      *(float32x2_t *)(v16 + 8 * v11++) = v76;
    }
    while (v11 != a3);
  }
}

void sub_1B69A4304(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, float a6, float a7)
{
  if (a2 != a3)
  {
    uint64_t v11 = a2;
    int v13 = *(unsigned __int8 *)(a4 + 16);
    uint64_t v74 = *(void *)(a4 + 80);
    uint64_t v14 = *(void *)(a4 + 96);
    uint64_t v15 = *(void *)(a4 + 112);
    unint64_t v16 = *(void *)a4;
    unint64_t v72 = -(uint64_t)v16;
    uint32x4_t v17 = *(uint32x4_t *)a4;
    v17.i32[3] = 0;
    float v18 = a7 - a6;
    int32x4_t v19 = (int32x4_t)vmaxq_u32(v17, (uint32x4_t)xmmword_1B6E78280);
    int32x4_t v20 = vmulq_lane_s32(v19, *(int32x2_t *)v19.i8, 1);
    unsigned __int32 v73 = vmulq_laneq_s32(v20, v19, 2).u32[0];
    do
    {
      __int32 v76 = v20.i32[3];
      if (v13)
      {
        if (v13 == 1)
        {
          uint64_t v40 = *(void *)(a4 + 64);
          float32x2_t v28 = *(float32x2_t *)(*(void *)(a4 + 128) + 8 * (v40 % *(void *)(a4 + 72)) + 32);
          switch(*(unsigned char *)(a4 + 17))
          {
            case 1:
              *(void *)(a4 + 64) = v40 - 1;
              break;
            case 2:
              *(void *)(a4 + 64) = ((v40 >> 63) | 1) + v40;
              break;
            case 3:
              uint64_t v43 = a1[1];
              uint64_t v44 = 9 * __ROR8__(5 * v43, 57);
              uint64_t v45 = a1[2] ^ *a1;
              uint64_t v46 = a1[3] ^ v43;
              uint64_t v47 = v45 ^ v43;
              uint64_t v48 = v46 ^ *a1;
              *a1 = v48;
              a1[1] = v45 ^ v43;
              uint64_t v49 = __ROR8__(v46, 19);
              uint64_t v50 = v45 ^ (v43 << 17);
              a1[2] = v50;
              a1[3] = v49;
              uint64_t v51 = ((unint64_t)v44 * (unsigned __int128)v16) >> 64;
              if (v16 > v44 * v16 && v72 % v16 > v44 * v16)
              {
                do
                {
                  uint64_t v52 = 9 * __ROR8__(5 * v47, 57);
                  uint64_t v53 = v48 ^ v50;
                  uint64_t v54 = v47 ^ v49;
                  v50 ^= v48 ^ (v47 << 17);
                  v47 ^= v53;
                  v48 ^= v54;
                  uint64_t v49 = __ROR8__(v54, 19);
                }
                while (v72 % v16 > v52 * v16);
                *a1 = v48;
                a1[1] = v47;
                uint64_t v51 = ((unint64_t)v52 * (unsigned __int128)v16) >> 64;
                a1[2] = v50;
                a1[3] = v49;
              }
              *(void *)(a4 + 64) = v51;
              break;
            default:
              *(void *)(a4 + 64) = v40 + 1;
              break;
          }
        }
        else
        {
          uint64_t v21 = a1[1];
          uint64_t v22 = a1[2] ^ *a1;
          uint64_t v23 = a1[3] ^ v21;
          uint64_t v24 = v22 ^ v21;
          uint64_t v25 = v23 ^ *a1;
          v28.f32[0] = (float)((9 * ((((unint64_t)(5 * v21) >> 32) >> 25) | (640 * v21))) & 0xFFFFFF)
                     * 0.000000059605;
          uint64_t v26 = v25 ^ v22 ^ (v21 << 17);
          uint64_t v27 = v24 ^ __ROR8__(v23, 19);
          *a1 = v27 ^ v25;
          a1[1] = v26 ^ v24;
          a1[2] = v26 ^ (v24 << 17);
          a1[3] = __ROR8__(v27, 19);
          v28.f32[1] = (float)((9 * ((((unint64_t)(5 * v24) >> 32) >> 25) | (640 * v24))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v41 = *(void *)(a4 + 64);
        switch(*(unsigned char *)(a4 + 17))
        {
          case 1:
            uint64_t v42 = v41 - 1;
            break;
          case 2:
            uint64_t v42 = ((v41 >> 63) | 1) + v41;
            break;
          case 3:
            uint64_t v55 = a1[1];
            uint64_t v56 = 9 * __ROR8__(5 * v55, 57);
            uint64_t v57 = a1[2] ^ *a1;
            uint64_t v58 = a1[3] ^ v55;
            uint64_t v59 = v57 ^ v55;
            uint64_t v60 = v58 ^ *a1;
            *a1 = v60;
            a1[1] = v57 ^ v55;
            uint64_t v61 = __ROR8__(v58, 19);
            uint64_t v62 = v57 ^ (v55 << 17);
            a1[2] = v62;
            a1[3] = v61;
            uint64_t v42 = ((unint64_t)v56 * (unsigned __int128)v73) >> 64;
            unint64_t v63 = v56 * v73;
            if (v63 < v73)
            {
              unint64_t v64 = -(uint64_t)v73 % (unint64_t)v73;
              if (v64 > v63)
              {
                do
                {
                  uint64_t v65 = 9 * __ROR8__(5 * v59, 57);
                  uint64_t v66 = v60 ^ v62;
                  uint64_t v67 = v59 ^ v61;
                  v62 ^= v60 ^ (v59 << 17);
                  v59 ^= v66;
                  v60 ^= v67;
                  uint64_t v61 = __ROR8__(v67, 19);
                }
                while (v64 > v65 * (unint64_t)v73);
                *a1 = v60;
                a1[1] = v59;
                uint64_t v42 = ((unint64_t)v65 * (unsigned __int128)v73) >> 64;
                a1[2] = v62;
                a1[3] = v61;
              }
            }
            break;
          default:
            uint64_t v42 = v41 + 1;
            break;
        }
        *(void *)(a4 + 64) = v42;
        long long v68 = *(_OWORD *)(a4 + 32);
        float v69 = (float)v41 * *(float *)&v68;
        v70.f32[0] = fminf(v69 - floorf(v69), 1.0);
        float v71 = vmuls_lane_f32(v69 - v70.f32[0], *(float32x2_t *)&v68, 1);
        v70.i32[1] = fminf(v71 - floorf(v71), 1.0);
        float32x2_t v28 = vadd_f32(vmul_f32(*(float32x2_t *)&v68, (float32x2_t)0x3F0000003F000000), v70);
      }
      float32x2_t v75 = v28;
      uint64_t v29 = v11 + 1;
      float v30 = sqrtf(v28.f32[1]);
      if (a5) {
        float v31 = v28.f32[1];
      }
      else {
        float v31 = v30;
      }
      __float2 v32 = __sincosf_stret(vmlas_n_f32(a6, v18, v28.f32[0]));
      v33.i64[0] = LODWORD(v32.__cosval) | 0x3F00000000000000;
      v33.i64[1] = LODWORD(v32.__sinval) | 0x3F00000000000000;
      float32x4_t v34 = vmulq_f32(v33, v33);
      v34.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).u64[0];
      float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0);
      v35.i32[3] = 0;
      float32x4_t v36 = vrsqrteq_f32(v35);
      float32x4_t v37 = vmulq_f32(v36, vrsqrtsq_f32(v35, vmulq_f32(v36, v36)));
      int32x4_t v38 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v34.f32[0] != 0.0)), 0x1FuLL));
      v38.i32[3] = 0;
      *(float *)v20.i32 = v32.__cosval * (float)(v31 * 0.5);
      *(float *)&v20.i32[1] = 0.5 - v31;
      *(float *)&v20.i32[2] = v32.__sinval * (float)(v31 * 0.5);
      v20.i32[3] = v76;
      uint64_t v39 = 16 * v11;
      *(int32x4_t *)(v74 + v39) = v20;
      *(int8x16_t *)(v14 + v39) = vbslq_s8((int8x16_t)vcltzq_s32(v38), (int8x16_t)vmulq_f32(v33, vmulq_f32(v37, vrsqrtsq_f32(v35, vmulq_f32(v37, v37)))), (int8x16_t)v33);
      *(float32x2_t *)(v15 + 8 * v11++) = v75;
    }
    while (v29 != a3);
  }
}

void sub_1B69A47C8(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  if (a2 != a3)
  {
    uint64_t v7 = a2;
    int v9 = *(unsigned __int8 *)(v4 + 16);
    uint64_t v58 = *(void *)(v4 + 96);
    uint64_t v59 = *(void *)(v4 + 80);
    uint64_t v10 = *(void *)(v4 + 112);
    unint64_t v11 = *(void *)v4;
    unint64_t v56 = -(uint64_t)v11;
    uint32x4_t v12 = *(uint32x4_t *)v4;
    v12.i32[3] = 0;
    int32x4_t v13 = (int32x4_t)vmaxq_u32(v12, (uint32x4_t)xmmword_1B6E78280);
    int32x4_t v14 = vmulq_laneq_s32(vmulq_lane_s32(v13, *(int32x2_t *)v13.i8, 1), v13, 2);
    unsigned __int32 v57 = v14.i32[0];
    do
    {
      if (v9)
      {
        if (v9 == 1)
        {
          uint64_t v24 = *(void *)(v4 + 64);
          v14.i64[0] = *(void *)(*(void *)(v4 + 128) + 8 * (v24 % *(void *)(v4 + 72)) + 32);
          switch(*(unsigned char *)(v4 + 17))
          {
            case 1:
              *(void *)(v4 + 64) = v24 - 1;
              break;
            case 2:
              *(void *)(v4 + 64) = ((v24 >> 63) | 1) + v24;
              break;
            case 3:
              uint64_t v27 = a1[1];
              uint64_t v28 = 9 * __ROR8__(5 * v27, 57);
              uint64_t v29 = a1[2] ^ *a1;
              uint64_t v30 = a1[3] ^ v27;
              uint64_t v31 = v29 ^ v27;
              uint64_t v32 = v30 ^ *a1;
              *a1 = v32;
              a1[1] = v29 ^ v27;
              uint64_t v33 = __ROR8__(v30, 19);
              uint64_t v34 = v29 ^ (v27 << 17);
              a1[2] = v34;
              a1[3] = v33;
              uint64_t v35 = ((unint64_t)v28 * (unsigned __int128)v11) >> 64;
              if (v11 > v28 * v11 && v56 % v11 > v28 * v11)
              {
                do
                {
                  uint64_t v36 = 9 * __ROR8__(5 * v31, 57);
                  uint64_t v37 = v32 ^ v34;
                  uint64_t v38 = v31 ^ v33;
                  v34 ^= v32 ^ (v31 << 17);
                  v31 ^= v37;
                  v32 ^= v38;
                  uint64_t v33 = __ROR8__(v38, 19);
                }
                while (v56 % v11 > v36 * v11);
                *a1 = v32;
                a1[1] = v31;
                uint64_t v35 = ((unint64_t)v36 * (unsigned __int128)v11) >> 64;
                a1[2] = v34;
                a1[3] = v33;
              }
              *(void *)(v4 + 64) = v35;
              break;
            default:
              *(void *)(v4 + 64) = v24 + 1;
              break;
          }
        }
        else
        {
          uint64_t v15 = a1[1];
          uint64_t v16 = a1[2] ^ *a1;
          uint64_t v17 = a1[3] ^ v15;
          uint64_t v18 = v16 ^ v15;
          uint64_t v19 = v17 ^ *a1;
          *(float *)v14.i32 = (float)((9 * ((((unint64_t)(5 * v15) >> 32) >> 25) | (640 * v15))) & 0xFFFFFF)
                            * 0.000000059605;
          uint64_t v20 = v19 ^ v16 ^ (v15 << 17);
          uint64_t v21 = v18 ^ __ROR8__(v17, 19);
          *a1 = v21 ^ v19;
          a1[1] = v20 ^ v18;
          a1[2] = v20 ^ (v18 << 17);
          a1[3] = __ROR8__(v21, 19);
          *(float *)&v14.i32[1] = (float)((9 * ((((unint64_t)(5 * v18) >> 32) >> 25) | (640 * v18))) & 0xFFFFFF)
                                * 0.000000059605;
        }
      }
      else
      {
        uint64_t v25 = *(void *)(v4 + 64);
        switch(*(unsigned char *)(v4 + 17))
        {
          case 1:
            uint64_t v26 = v25 - 1;
            break;
          case 2:
            uint64_t v26 = ((v25 >> 63) | 1) + v25;
            break;
          case 3:
            uint64_t v39 = a1[1];
            uint64_t v40 = 9 * __ROR8__(5 * v39, 57);
            uint64_t v41 = a1[2] ^ *a1;
            uint64_t v42 = a1[3] ^ v39;
            uint64_t v43 = v41 ^ v39;
            uint64_t v44 = v42 ^ *a1;
            *a1 = v44;
            a1[1] = v41 ^ v39;
            uint64_t v45 = __ROR8__(v42, 19);
            uint64_t v46 = v41 ^ (v39 << 17);
            a1[2] = v46;
            a1[3] = v45;
            uint64_t v26 = ((unint64_t)v40 * (unsigned __int128)v57) >> 64;
            unint64_t v47 = v40 * v57;
            if (v47 < v57)
            {
              unint64_t v48 = -(uint64_t)v57 % (unint64_t)v57;
              if (v48 > v47)
              {
                do
                {
                  uint64_t v49 = 9 * __ROR8__(5 * v43, 57);
                  uint64_t v50 = v44 ^ v46;
                  uint64_t v51 = v43 ^ v45;
                  v46 ^= v44 ^ (v43 << 17);
                  v43 ^= v50;
                  v44 ^= v51;
                  uint64_t v45 = __ROR8__(v51, 19);
                }
                while (v48 > v49 * (unint64_t)v57);
                *a1 = v44;
                a1[1] = v43;
                uint64_t v26 = ((unint64_t)v49 * (unsigned __int128)v57) >> 64;
                a1[2] = v46;
                a1[3] = v45;
              }
            }
            break;
          default:
            uint64_t v26 = v25 + 1;
            break;
        }
        *(void *)(v4 + 64) = v26;
        long long v52 = *(_OWORD *)(v4 + 32);
        float v53 = (float)v25 * *(float *)&v52;
        v54.f32[0] = fminf(v53 - floorf(v53), 1.0);
        float v55 = vmuls_lane_f32(v53 - v54.f32[0], *(float32x2_t *)&v52, 1);
        v54.i32[1] = fminf(v55 - floorf(v55), 1.0);
        *(float32x2_t *)v14.i8 = vadd_f32(vmul_f32(*(float32x2_t *)&v52, (float32x2_t)0x3F0000003F000000), v54);
      }
      int32x4_t v60 = v14;
      *(double *)v14.i64 = a4();
      uint64_t v22 = 16 * v7;
      *(int32x4_t *)(v59 + v22) = v14;
      *(_OWORD *)(v58 + v22) = v23;
      v14.i64[1] = v60.i64[1];
      *(void *)(v10 + 8 * v7++) = v60.i64[0];
    }
    while (v7 != a3);
  }
}

uint64_t *sub_1B69A4BA4(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    int v7 = *(unsigned __int8 *)(a4 + 16);
    uint64_t v8 = *(void *)(a4 + 80);
    uint64_t v9 = *(void *)(a4 + 96);
    uint64_t v10 = *(void *)(a4 + 112);
    unint64_t v11 = *(void *)a4;
    unint64_t v12 = -(uint64_t)v11;
    uint32x4_t v13 = *(uint32x4_t *)a4;
    v13.i32[3] = 0;
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    int32x4_t v15 = (int32x4_t)vmaxq_u32(v13, (uint32x4_t)xmmword_1B6E78280);
    unsigned __int32 v16 = vmulq_laneq_s32(vmulq_lane_s32(v15, *(int32x2_t *)v15.i8, 1), v15, 2).u32[0];
    do
    {
      if (v7)
      {
        if (v7 == 1)
        {
          uint64_t v19 = *(void *)(a4 + 64);
          float32x4_t v20 = *(float32x4_t *)(*(void *)(a4 + 136) + 16 * (v19 % *(void *)(a4 + 72)) + 32);
          switch(*(unsigned char *)(a4 + 17))
          {
            case 1:
              *(void *)(a4 + 64) = v19 - 1;
              break;
            case 2:
              *(void *)(a4 + 64) = ((v19 >> 63) | 1) + v19;
              break;
            case 3:
              uint64_t v36 = result[1];
              uint64_t v37 = 9 * __ROR8__(5 * v36, 57);
              uint64_t v38 = result[2] ^ *result;
              uint64_t v39 = result[3] ^ v36;
              uint64_t v40 = v38 ^ v36;
              uint64_t v41 = v39 ^ *result;
              *double result = v41;
              result[1] = v38 ^ v36;
              uint64_t v42 = __ROR8__(v39, 19);
              uint64_t v43 = v38 ^ (v36 << 17);
              result[2] = v43;
              result[3] = v42;
              uint64_t v44 = ((unint64_t)v37 * (unsigned __int128)v11) >> 64;
              if (v11 > v37 * v11 && v12 % v11 > v37 * v11)
              {
                do
                {
                  uint64_t v45 = 9 * __ROR8__(5 * v40, 57);
                  uint64_t v46 = v41 ^ v43;
                  uint64_t v47 = v40 ^ v42;
                  v43 ^= v41 ^ (v40 << 17);
                  v40 ^= v46;
                  v41 ^= v47;
                  uint64_t v42 = __ROR8__(v47, 19);
                }
                while (v12 % v11 > v45 * v11);
                *double result = v41;
                result[1] = v40;
                uint64_t v44 = ((unint64_t)v45 * (unsigned __int128)v11) >> 64;
                result[2] = v43;
                result[3] = v42;
              }
              *(void *)(a4 + 64) = v44;
              break;
            default:
              *(void *)(a4 + 64) = v19 + 1;
              break;
          }
        }
        else
        {
          uint64_t v24 = result[1];
          uint64_t v25 = result[2] ^ *result;
          uint64_t v26 = result[3] ^ v24;
          uint64_t v27 = v25 ^ v24;
          uint64_t v28 = v26 ^ *result;
          float32_t v29 = (float)((9 * ((((unint64_t)(5 * v24) >> 32) >> 25) | (640 * v24))) & 0xFFFFFF)
              * 0.000000059605;
          uint64_t v30 = v28 ^ v25 ^ (v24 << 17);
          uint64_t v31 = __ROR8__(v26, 19);
          uint64_t v32 = v30 ^ v27;
          uint64_t v33 = v27 ^ v31 ^ v28;
          uint64_t v34 = v30 ^ (v27 << 17) ^ v33;
          uint64_t v35 = v32 ^ __ROR8__(v27 ^ v31, 19);
          *double result = v35 ^ v33;
          result[1] = v34 ^ v32;
          result[2] = v34 ^ (v32 << 17);
          result[3] = __ROR8__(v35, 19);
          v20.i32[3] = 0;
          v20.f32[0] = v29;
          v20.f32[1] = (float)((9 * ((((unint64_t)(5 * v27) >> 32) >> 25) | (640 * v27))) & 0xFFFFFF)
                     * 0.000000059605;
          v20.f32[2] = (float)((9 * ((((unint64_t)(5 * v32) >> 32) >> 25) | (640 * v32))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v21 = *(void *)(a4 + 64);
        float v22 = (float)v21;
        switch(*(unsigned char *)(a4 + 17))
        {
          case 1:
            uint64_t v23 = v21 - 1;
            break;
          case 2:
            uint64_t v23 = ((v21 >> 63) | 1) + v21;
            break;
          case 3:
            uint64_t v48 = result[1];
            uint64_t v49 = 9 * __ROR8__(5 * v48, 57);
            uint64_t v50 = result[2] ^ *result;
            uint64_t v51 = result[3] ^ v48;
            uint64_t v52 = v50 ^ v48;
            uint64_t v53 = v51 ^ *result;
            *double result = v53;
            result[1] = v50 ^ v48;
            uint64_t v54 = __ROR8__(v51, 19);
            uint64_t v55 = v50 ^ (v48 << 17);
            result[2] = v55;
            result[3] = v54;
            uint64_t v23 = ((unint64_t)v49 * (unsigned __int128)v16) >> 64;
            unint64_t v56 = v49 * v16;
            if (v56 < v16)
            {
              unint64_t v57 = -(uint64_t)v16 % (unint64_t)v16;
              if (v57 > v56)
              {
                do
                {
                  uint64_t v58 = 9 * __ROR8__(5 * v52, 57);
                  uint64_t v59 = v53 ^ v55;
                  uint64_t v60 = v52 ^ v54;
                  v55 ^= v53 ^ (v52 << 17);
                  v52 ^= v59;
                  v53 ^= v60;
                  uint64_t v54 = __ROR8__(v60, 19);
                }
                while (v57 > v58 * (unint64_t)v16);
                *double result = v53;
                result[1] = v52;
                uint64_t v23 = ((unint64_t)v58 * (unsigned __int128)v16) >> 64;
                result[2] = v55;
                result[3] = v54;
              }
            }
            break;
          default:
            uint64_t v23 = v21 + 1;
            break;
        }
        *(void *)(a4 + 64) = v23;
        float32x4_t v61 = *(float32x4_t *)(a4 + 32);
        float v62 = v22 * v61.f32[0];
        v6.f32[0] = fminf(v62 - floorf(v62), 1.0);
        float v63 = vmuls_lane_f32(v62 - v6.f32[0], *(float32x2_t *)v61.f32, 1);
        float v64 = fminf(v63 - floorf(v63), 1.0);
        float v65 = vmuls_lane_f32(v63 - v64, v61, 2);
        v6.f32[1] = v64;
        v6.i32[2] = fminf(v65 - floorf(v65), 1.0);
        float32x4_t v20 = vaddq_f32(vmulq_f32(v61, v14), v6);
        v20.i32[3] = HIDWORD(v4);
      }
      float32x2_t v66 = vadd_f32(*(float32x2_t *)v20.f32, (float32x2_t)0xBF000000BF000000);
      switch((int)vmuls_lane_f32(6.0, v20, 2))
      {
        case 0:
          LODWORD(v17) = 1056964608;
          *(float32x2_t *)((char *)&v17 + 4) = v66;
          float32x4_t v6 = (float32x4_t)xmmword_1B6E4F300;
          break;
        case 1:
          LODWORD(v17) = -1090519040;
          *(float32x2_t *)((char *)&v17 + 4) = v66;
          float32x4_t v6 = (float32x4_t)xmmword_1B6E4F310;
          break;
        case 2:
          *(void *)&long long v17 = v66.u32[0] | 0x3F00000000000000;
          DWORD2(v17) = v66.i32[1];
          float32x4_t v6 = (float32x4_t)xmmword_1B6E4F320;
          break;
        case 3:
          *(void *)&long long v17 = v66.u32[0] | 0xBF00000000000000;
          DWORD2(v17) = v66.i32[1];
          float32x4_t v6 = (float32x4_t)xmmword_1B6E4F330;
          break;
        case 4:
          DWORD2(v17) = 1056964608;
          *(float32x2_t *)&long long v17 = v66;
          float32x4_t v6 = (float32x4_t)xmmword_1B6E4F2E0;
          break;
        default:
          DWORD2(v17) = -1090519040;
          *(float32x2_t *)&long long v17 = v66;
          float32x4_t v6 = (float32x4_t)xmmword_1B6E4F340;
          break;
      }
      HIDWORD(v17) = HIDWORD(v5);
      uint64_t v18 = 16 * a2;
      *(_OWORD *)(v8 + v18) = v17;
      *(float32x4_t *)(v9 + v18) = v6;
      *(void *)(v10 + 8 * a2++) = v20.i64[0];
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t *sub_1B69A50AC(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, int8x16_t a8, double a9, double a10, double a11, __n128 a12)
{
  if (a2 != a3)
  {
    int v14 = *(unsigned __int8 *)(a4 + 16);
    uint64_t v15 = *(void *)(a4 + 80);
    uint64_t v16 = *(void *)(a4 + 96);
    uint64_t v17 = *(void *)(a4 + 112);
    unint64_t v18 = *(void *)a4;
    unint64_t v19 = -(uint64_t)v18;
    uint32x4_t v20 = *(uint32x4_t *)a4;
    v20.i32[3] = 0;
    v21.i64[0] = 0x3F0000003F000000;
    v21.i64[1] = 0x3F0000003F000000;
    int32x4_t v22 = (int32x4_t)vmaxq_u32(v20, (uint32x4_t)xmmword_1B6E78280);
    unsigned __int32 v23 = vmulq_laneq_s32(vmulq_lane_s32(v22, *(int32x2_t *)v22.i8, 1), v22, 2).u32[0];
    v24.i64[0] = 0xBF000000BF000000;
    v24.i64[1] = 0xBF000000BF000000;
    a8.i32[0] = 1.0;
    v25.i64[0] = 0x8000000080000000;
    v25.i64[1] = 0x8000000080000000;
    while (1)
    {
      if (v14)
      {
        if (v14 == 1)
        {
          uint64_t v30 = *(void *)(a4 + 64);
          float32x4_t v31 = *(float32x4_t *)(*(void *)(a4 + 136) + 16 * (v30 % *(void *)(a4 + 72)) + 32);
          switch(*(unsigned char *)(a4 + 17))
          {
            case 1:
              *(void *)(a4 + 64) = v30 - 1;
              break;
            case 2:
              *(void *)(a4 + 64) = ((v30 >> 63) | 1) + v30;
              break;
            case 3:
              uint64_t v47 = result[1];
              uint64_t v48 = 9 * __ROR8__(5 * v47, 57);
              uint64_t v49 = result[2] ^ *result;
              uint64_t v50 = result[3] ^ v47;
              uint64_t v51 = v49 ^ v47;
              uint64_t v52 = v50 ^ *result;
              *double result = v52;
              result[1] = v49 ^ v47;
              uint64_t v53 = __ROR8__(v50, 19);
              uint64_t v54 = v49 ^ (v47 << 17);
              result[2] = v54;
              result[3] = v53;
              uint64_t v55 = ((unint64_t)v48 * (unsigned __int128)v18) >> 64;
              if (v18 > v48 * v18 && v19 % v18 > v48 * v18)
              {
                do
                {
                  uint64_t v56 = 9 * __ROR8__(5 * v51, 57);
                  uint64_t v57 = v52 ^ v54;
                  uint64_t v58 = v51 ^ v53;
                  v54 ^= v52 ^ (v51 << 17);
                  v51 ^= v57;
                  v52 ^= v58;
                  uint64_t v53 = __ROR8__(v58, 19);
                }
                while (v19 % v18 > v56 * v18);
                *double result = v52;
                result[1] = v51;
                uint64_t v55 = ((unint64_t)v56 * (unsigned __int128)v18) >> 64;
                result[2] = v54;
                result[3] = v53;
              }
              *(void *)(a4 + 64) = v55;
              break;
            default:
              *(void *)(a4 + 64) = v30 + 1;
              break;
          }
        }
        else
        {
          uint64_t v35 = result[1];
          uint64_t v36 = result[2] ^ *result;
          uint64_t v37 = result[3] ^ v35;
          uint64_t v38 = v36 ^ v35;
          uint64_t v39 = v37 ^ *result;
          float32_t v40 = (float)((9 * ((((unint64_t)(5 * v35) >> 32) >> 25) | (640 * v35))) & 0xFFFFFF)
              * 0.000000059605;
          uint64_t v41 = v39 ^ v36 ^ (v35 << 17);
          uint64_t v42 = __ROR8__(v37, 19);
          uint64_t v43 = v41 ^ v38;
          uint64_t v44 = v38 ^ v42 ^ v39;
          uint64_t v45 = v41 ^ (v38 << 17) ^ v44;
          uint64_t v46 = v43 ^ __ROR8__(v38 ^ v42, 19);
          *double result = v46 ^ v44;
          result[1] = v45 ^ v43;
          result[2] = v45 ^ (v43 << 17);
          result[3] = __ROR8__(v46, 19);
          v31.i32[3] = 0;
          v31.f32[0] = v40;
          v31.f32[1] = (float)((9 * ((((unint64_t)(5 * v38) >> 32) >> 25) | (640 * v38))) & 0xFFFFFF)
                     * 0.000000059605;
          v31.f32[2] = (float)((9 * ((((unint64_t)(5 * v43) >> 32) >> 25) | (640 * v43))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v32 = *(void *)(a4 + 64);
        float v33 = (float)v32;
        switch(*(unsigned char *)(a4 + 17))
        {
          case 1:
            uint64_t v34 = v32 - 1;
            break;
          case 2:
            uint64_t v34 = ((v32 >> 63) | 1) + v32;
            break;
          case 3:
            uint64_t v59 = result[1];
            uint64_t v60 = 9 * __ROR8__(5 * v59, 57);
            uint64_t v61 = result[2] ^ *result;
            uint64_t v62 = result[3] ^ v59;
            uint64_t v63 = v61 ^ v59;
            uint64_t v64 = v62 ^ *result;
            *double result = v64;
            result[1] = v61 ^ v59;
            uint64_t v65 = __ROR8__(v62, 19);
            uint64_t v66 = v61 ^ (v59 << 17);
            result[2] = v66;
            result[3] = v65;
            uint64_t v34 = ((unint64_t)v60 * (unsigned __int128)v23) >> 64;
            unint64_t v67 = v60 * v23;
            if (v67 < v23)
            {
              unint64_t v68 = -(uint64_t)v23 % (unint64_t)v23;
              if (v68 > v67)
              {
                do
                {
                  uint64_t v69 = 9 * __ROR8__(5 * v63, 57);
                  uint64_t v70 = v64 ^ v66;
                  uint64_t v71 = v63 ^ v65;
                  v66 ^= v64 ^ (v63 << 17);
                  v63 ^= v70;
                  v64 ^= v71;
                  uint64_t v65 = __ROR8__(v71, 19);
                }
                while (v68 > v69 * (unint64_t)v23);
                *double result = v64;
                result[1] = v63;
                uint64_t v34 = ((unint64_t)v69 * (unsigned __int128)v23) >> 64;
                result[2] = v66;
                result[3] = v65;
              }
            }
            break;
          default:
            uint64_t v34 = v32 + 1;
            break;
        }
        *(void *)(a4 + 64) = v34;
        float32x4_t v72 = *(float32x4_t *)(a4 + 32);
        float v73 = v33 * v72.f32[0];
        v13.f32[0] = fminf(v73 - floorf(v73), 1.0);
        float v74 = vmuls_lane_f32(v73 - v13.f32[0], *(float32x2_t *)v72.f32, 1);
        float v75 = fminf(v74 - floorf(v74), 1.0);
        float v76 = vmuls_lane_f32(v74 - v75, v72, 2);
        v13.f32[1] = v75;
        v13.i32[2] = fminf(v76 - floorf(v76), 1.0);
        float32x4_t v31 = vaddq_f32(vmulq_f32(v72, v21), v13);
        v31.i32[3] = a12.n128_i32[3];
      }
      float32x4_t v77 = vaddq_f32(v31, v24);
      int8x16_t v78 = (int8x16_t)vabsq_f32(v77);
      if (*(float *)v78.i32 >= *(float *)&v78.i32[1]) {
        break;
      }
      if (*(float *)&v78.i32[1] < *(float *)&v78.i32[2]) {
        goto LABEL_4;
      }
      v78.i32[0] = v77.i32[1];
      unsigned __int32 v79 = vbslq_s8(v25, a8, v78).u32[0];
      if (v77.f32[1] == 0.0) {
        float v80 = 0.0;
      }
      else {
        float v80 = *(float *)&v79;
      }
      float v81 = v80;
      v13.i32[0] = 0;
      v13.i64[1] = 0;
      v13.f32[1] = v81;
LABEL_8:
      v77.i32[3] = HIDWORD(v12);
      uint64_t v29 = 16 * a2;
      *(float32x4_t *)(v15 + v29) = v77;
      *(float32x4_t *)(v16 + v29) = v13;
      *(void *)(v17 + 8 * a2++) = v31.i64[0];
      if (a2 == a3) {
        return result;
      }
    }
    if (*(float *)v78.i32 >= *(float *)&v78.i32[2])
    {
      v13.i32[0] = vbslq_s8(v25, a8, (int8x16_t)v77).u32[0];
      if (v77.f32[0] == 0.0) {
        v13.f32[0] = 0.0;
      }
      v13.i32[1] = 0;
      v13.i64[1] = 0;
      goto LABEL_8;
    }
LABEL_4:
    v78.i32[0] = v77.i32[2];
    unsigned __int32 v26 = vbslq_s8(v25, a8, v78).u32[0];
    if (v77.f32[2] == 0.0) {
      float v27 = 0.0;
    }
    else {
      float v27 = *(float *)&v26;
    }
    float v28 = v27;
    v13.i64[0] = 0;
    v13.i32[3] = 0;
    v13.f32[2] = v28;
    goto LABEL_8;
  }
  return result;
}

void sub_1B69A555C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, float a6, float a7, float32x4_t a8)
{
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    int v14 = *(unsigned __int8 *)(a4 + 16);
    uint64_t v77 = *(void *)(a4 + 80);
    uint64_t v15 = *(void *)(a4 + 96);
    uint64_t v16 = *(void *)(a4 + 112);
    unint64_t v17 = *(void *)a4;
    unint64_t v75 = -(uint64_t)v17;
    uint32x4_t v18 = *(uint32x4_t *)a4;
    v18.i32[3] = 0;
    float v19 = a7 - a6;
    int32x4_t v20 = (int32x4_t)vmaxq_u32(v18, (uint32x4_t)xmmword_1B6E78280);
    int32x4_t v21 = vmulq_lane_s32(v20, *(int32x2_t *)v20.i8, 1);
    unsigned __int32 v76 = vmulq_laneq_s32(v21, v20, 2).u32[0];
    do
    {
      unsigned __int32 v80 = a8.u32[3];
      __int32 v81 = v21.i32[3];
      if (v14)
      {
        if (v14 == 1)
        {
          uint64_t v41 = *(void *)(a4 + 64);
          float32x4_t v34 = *(float32x4_t *)(*(void *)(a4 + 136) + 16 * (v41 % *(void *)(a4 + 72)) + 32);
          switch(*(unsigned char *)(a4 + 17))
          {
            case 1:
              *(void *)(a4 + 64) = v41 - 1;
              break;
            case 2:
              *(void *)(a4 + 64) = ((v41 >> 63) | 1) + v41;
              break;
            case 3:
              uint64_t v44 = a1[1];
              uint64_t v45 = 9 * __ROR8__(5 * v44, 57);
              uint64_t v46 = a1[2] ^ *a1;
              uint64_t v47 = a1[3] ^ v44;
              uint64_t v48 = v46 ^ v44;
              uint64_t v49 = v47 ^ *a1;
              *a1 = v49;
              a1[1] = v46 ^ v44;
              uint64_t v50 = __ROR8__(v47, 19);
              uint64_t v51 = v46 ^ (v44 << 17);
              a1[2] = v51;
              a1[3] = v50;
              uint64_t v52 = ((unint64_t)v45 * (unsigned __int128)v17) >> 64;
              if (v17 > v45 * v17 && v75 % v17 > v45 * v17)
              {
                do
                {
                  uint64_t v53 = 9 * __ROR8__(5 * v48, 57);
                  uint64_t v54 = v49 ^ v51;
                  uint64_t v55 = v48 ^ v50;
                  v51 ^= v49 ^ (v48 << 17);
                  v48 ^= v54;
                  v49 ^= v55;
                  uint64_t v50 = __ROR8__(v55, 19);
                }
                while (v75 % v17 > v53 * v17);
                *a1 = v49;
                a1[1] = v48;
                uint64_t v52 = ((unint64_t)v53 * (unsigned __int128)v17) >> 64;
                a1[2] = v51;
                a1[3] = v50;
              }
              *(void *)(a4 + 64) = v52;
              break;
            default:
              *(void *)(a4 + 64) = v41 + 1;
              break;
          }
        }
        else
        {
          uint64_t v22 = a1[1];
          uint64_t v23 = a1[2] ^ *a1;
          uint64_t v24 = a1[3] ^ v22;
          uint64_t v25 = v23 ^ v22;
          uint64_t v26 = v24 ^ *a1;
          float32_t v27 = (float)((9 * ((((unint64_t)(5 * v22) >> 32) >> 25) | (640 * v22))) & 0xFFFFFF)
              * 0.000000059605;
          uint64_t v28 = v26 ^ v23 ^ (v22 << 17);
          uint64_t v29 = __ROR8__(v24, 19);
          uint64_t v30 = v28 ^ v25;
          uint64_t v31 = v25 ^ v29 ^ v26;
          uint64_t v32 = v28 ^ (v25 << 17) ^ v31;
          uint64_t v33 = v30 ^ __ROR8__(v25 ^ v29, 19);
          *a1 = v33 ^ v31;
          a1[1] = v32 ^ v30;
          a1[2] = v32 ^ (v30 << 17);
          a1[3] = __ROR8__(v33, 19);
          v34.f32[0] = v27;
          v34.f32[1] = (float)((9 * ((((unint64_t)(5 * v25) >> 32) >> 25) | (640 * v25))) & 0xFFFFFF)
                     * 0.000000059605;
          v34.f32[2] = (float)((9 * ((((unint64_t)(5 * v30) >> 32) >> 25) | (640 * v30))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v42 = *(void *)(a4 + 64);
        switch(*(unsigned char *)(a4 + 17))
        {
          case 1:
            uint64_t v43 = v42 - 1;
            break;
          case 2:
            uint64_t v43 = ((v42 >> 63) | 1) + v42;
            break;
          case 3:
            uint64_t v56 = a1[1];
            uint64_t v57 = 9 * __ROR8__(5 * v56, 57);
            uint64_t v58 = a1[2] ^ *a1;
            uint64_t v59 = a1[3] ^ v56;
            uint64_t v60 = v58 ^ v56;
            uint64_t v61 = v59 ^ *a1;
            *a1 = v61;
            a1[1] = v58 ^ v56;
            uint64_t v62 = __ROR8__(v59, 19);
            uint64_t v63 = v58 ^ (v56 << 17);
            a1[2] = v63;
            a1[3] = v62;
            uint64_t v43 = ((unint64_t)v57 * (unsigned __int128)v76) >> 64;
            unint64_t v64 = v57 * v76;
            if (v64 < v76)
            {
              unint64_t v65 = -(uint64_t)v76 % (unint64_t)v76;
              if (v65 > v64)
              {
                do
                {
                  uint64_t v66 = 9 * __ROR8__(5 * v60, 57);
                  uint64_t v67 = v61 ^ v63;
                  uint64_t v68 = v60 ^ v62;
                  v63 ^= v61 ^ (v60 << 17);
                  v60 ^= v67;
                  v61 ^= v68;
                  uint64_t v62 = __ROR8__(v68, 19);
                }
                while (v65 > v66 * (unint64_t)v76);
                *a1 = v61;
                a1[1] = v60;
                uint64_t v43 = ((unint64_t)v66 * (unsigned __int128)v76) >> 64;
                a1[2] = v63;
                a1[3] = v62;
              }
            }
            break;
          default:
            uint64_t v43 = v42 + 1;
            break;
        }
        *(void *)(a4 + 64) = v43;
        float32x4_t v69 = *(float32x4_t *)(a4 + 32);
        float v70 = (float)v42 * v69.f32[0];
        a8.f32[0] = fminf(v70 - floorf(v70), 1.0);
        float v71 = vmuls_lane_f32(v70 - a8.f32[0], *(float32x2_t *)v69.f32, 1);
        float v72 = fminf(v71 - floorf(v71), 1.0);
        float v73 = vmuls_lane_f32(v71 - v72, v69, 2);
        a8.f32[1] = v72;
        a8.i32[2] = fminf(v73 - floorf(v73), 1.0);
        v74.i64[0] = 0x3F0000003F000000;
        v74.i64[1] = 0x3F0000003F000000;
        float32x4_t v34 = vaddq_f32(vmulq_f32(v69, v74), a8);
      }
      uint64_t v35 = v12 + 1;
      float v36 = sqrtf(v34.f32[2]);
      if (a5) {
        float v36 = v34.f32[2];
      }
      float32x2_t v78 = *(float32x2_t *)v34.f32;
      *(float *)&unsigned int v79 = v36 * 0.5;
      __float2 v37 = __sincosf_stret(vmlas_n_f32(a6, v19, v34.f32[0]));
      *(float32x2_t *)v21.i8 = vmul_f32((float32x2_t)__PAIR64__(v78.u32[1], LODWORD(v37.__cosval)), (float32x2_t)(v79 | 0xBF00000000000000));
      float32x4_t v38 = (float32x4_t)v21;
      v38.i32[1] = vadd_f32(v78, (float32x2_t)0xBF000000BF000000).i32[1];
      v38.f32[2] = v37.__sinval * *(float *)&v79;
      v21.i32[1] = v38.i32[1];
      *(float *)&v21.i32[2] = v37.__sinval * *(float *)&v79;
      v21.i32[3] = v80;
      float32x4_t v39 = vmulq_f32(v38, (float32x4_t)xmmword_1B6E99DE0);
      v39.i32[3] = v81;
      uint64_t v40 = 16 * v12;
      *(int32x4_t *)(v77 + v40) = v21;
      *(float32x4_t *)(v15 + v40) = v39;
      *(float32x2_t *)(v16 + 8 * v12) = v78;
      a8.i32[3] = v80;
      v21.i32[3] = v81;
      ++v12;
    }
    while (v35 != a3);
  }
}

void sub_1B69A5A2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, float a6, float a7, int32x4_t a8)
{
  if (a2 != a3)
  {
    uint64_t v13 = a2;
    int v15 = *(unsigned __int8 *)(a4 + 16);
    uint64_t v86 = *(void *)(a4 + 80);
    uint64_t v16 = *(void *)(a4 + 96);
    uint64_t v17 = *(void *)(a4 + 112);
    unint64_t v18 = *(void *)a4;
    unint64_t v84 = -(uint64_t)v18;
    uint32x4_t v19 = *(uint32x4_t *)a4;
    v19.i32[3] = 0;
    float v20 = *(float *)a8.i32 - a7;
    int32x4_t v21 = (int32x4_t)vmaxq_u32(v19, (uint32x4_t)xmmword_1B6E78280);
    float32x4_t v22 = (float32x4_t)vmulq_lane_s32(v21, *(int32x2_t *)v21.i8, 1);
    unsigned __int32 v85 = vmulq_laneq_s32((int32x4_t)v22, v21, 2).u32[0];
    do
    {
      __int32 v87 = v22.i32[3];
      if (v15)
      {
        if (v15 == 1)
        {
          uint64_t v50 = *(void *)(a4 + 64);
          float32x4_t v35 = *(float32x4_t *)(*(void *)(a4 + 136) + 16 * (v50 % *(void *)(a4 + 72)) + 32);
          switch(*(unsigned char *)(a4 + 17))
          {
            case 1:
              *(void *)(a4 + 64) = v50 - 1;
              break;
            case 2:
              *(void *)(a4 + 64) = ((v50 >> 63) | 1) + v50;
              break;
            case 3:
              uint64_t v53 = a1[1];
              uint64_t v54 = 9 * __ROR8__(5 * v53, 57);
              uint64_t v55 = a1[2] ^ *a1;
              uint64_t v56 = a1[3] ^ v53;
              uint64_t v57 = v55 ^ v53;
              uint64_t v58 = v56 ^ *a1;
              *a1 = v58;
              a1[1] = v55 ^ v53;
              uint64_t v59 = __ROR8__(v56, 19);
              uint64_t v60 = v55 ^ (v53 << 17);
              a1[2] = v60;
              a1[3] = v59;
              uint64_t v61 = ((unint64_t)v54 * (unsigned __int128)v18) >> 64;
              if (v18 > v54 * v18 && v84 % v18 > v54 * v18)
              {
                do
                {
                  uint64_t v62 = 9 * __ROR8__(5 * v57, 57);
                  uint64_t v63 = v58 ^ v60;
                  uint64_t v64 = v57 ^ v59;
                  v60 ^= v58 ^ (v57 << 17);
                  v57 ^= v63;
                  v58 ^= v64;
                  uint64_t v59 = __ROR8__(v64, 19);
                }
                while (v84 % v18 > v62 * v18);
                *a1 = v58;
                a1[1] = v57;
                uint64_t v61 = ((unint64_t)v62 * (unsigned __int128)v18) >> 64;
                a1[2] = v60;
                a1[3] = v59;
              }
              *(void *)(a4 + 64) = v61;
              break;
            default:
              *(void *)(a4 + 64) = v50 + 1;
              break;
          }
        }
        else
        {
          uint64_t v23 = a1[1];
          uint64_t v24 = a1[2] ^ *a1;
          uint64_t v25 = a1[3] ^ v23;
          uint64_t v26 = v24 ^ v23;
          uint64_t v27 = v25 ^ *a1;
          float32_t v28 = (float)((9 * ((((unint64_t)(5 * v23) >> 32) >> 25) | (640 * v23))) & 0xFFFFFF)
              * 0.000000059605;
          uint64_t v29 = v27 ^ v24 ^ (v23 << 17);
          uint64_t v30 = __ROR8__(v25, 19);
          uint64_t v31 = v29 ^ v26;
          uint64_t v32 = v26 ^ v30 ^ v27;
          uint64_t v33 = v29 ^ (v26 << 17) ^ v32;
          uint64_t v34 = v31 ^ __ROR8__(v26 ^ v30, 19);
          *a1 = v34 ^ v32;
          a1[1] = v33 ^ v31;
          a1[2] = v33 ^ (v31 << 17);
          a1[3] = __ROR8__(v34, 19);
          v35.f32[0] = v28;
          v35.f32[1] = (float)((9 * ((((unint64_t)(5 * v26) >> 32) >> 25) | (640 * v26))) & 0xFFFFFF)
                     * 0.000000059605;
          v35.f32[2] = (float)((9 * ((((unint64_t)(5 * v31) >> 32) >> 25) | (640 * v31))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v51 = *(void *)(a4 + 64);
        switch(*(unsigned char *)(a4 + 17))
        {
          case 1:
            uint64_t v52 = v51 - 1;
            break;
          case 2:
            uint64_t v52 = ((v51 >> 63) | 1) + v51;
            break;
          case 3:
            uint64_t v65 = a1[1];
            uint64_t v66 = 9 * __ROR8__(5 * v65, 57);
            uint64_t v67 = a1[2] ^ *a1;
            uint64_t v68 = a1[3] ^ v65;
            uint64_t v69 = v67 ^ v65;
            uint64_t v70 = v68 ^ *a1;
            *a1 = v70;
            a1[1] = v67 ^ v65;
            uint64_t v71 = __ROR8__(v68, 19);
            uint64_t v72 = v67 ^ (v65 << 17);
            a1[2] = v72;
            a1[3] = v71;
            uint64_t v52 = ((unint64_t)v66 * (unsigned __int128)v85) >> 64;
            unint64_t v73 = v66 * v85;
            if (v73 < v85)
            {
              unint64_t v74 = -(uint64_t)v85 % (unint64_t)v85;
              if (v74 > v73)
              {
                do
                {
                  uint64_t v75 = 9 * __ROR8__(5 * v69, 57);
                  uint64_t v76 = v70 ^ v72;
                  uint64_t v77 = v69 ^ v71;
                  v72 ^= v70 ^ (v69 << 17);
                  v69 ^= v76;
                  v70 ^= v77;
                  uint64_t v71 = __ROR8__(v77, 19);
                }
                while (v74 > v75 * (unint64_t)v85);
                *a1 = v70;
                a1[1] = v69;
                uint64_t v52 = ((unint64_t)v75 * (unsigned __int128)v85) >> 64;
                a1[2] = v72;
                a1[3] = v71;
              }
            }
            break;
          default:
            uint64_t v52 = v51 + 1;
            break;
        }
        *(void *)(a4 + 64) = v52;
        float32x4_t v78 = *(float32x4_t *)(a4 + 32);
        float v79 = (float)v51 * v78.f32[0];
        *(float *)a8.i32 = fminf(v79 - floorf(v79), 1.0);
        float v80 = vmuls_lane_f32(v79 - *(float *)a8.i32, *(float32x2_t *)v78.f32, 1);
        float v81 = fminf(v80 - floorf(v80), 1.0);
        float v82 = vmuls_lane_f32(v80 - v81, v78, 2);
        *(float *)&a8.i32[1] = v81;
        a8.i32[2] = fminf(v82 - floorf(v82), 1.0);
        v83.i64[0] = 0x3F0000003F000000;
        v83.i64[1] = 0x3F0000003F000000;
        float32x4_t v35 = vaddq_f32(vmulq_f32(v78, v83), (float32x4_t)a8);
      }
      uint64_t v88 = v35.i64[0];
      uint64_t v36 = v13 + 1;
      float v37 = sqrtf(v35.f32[2]);
      if (a5) {
        float v38 = v35.f32[2];
      }
      else {
        float v38 = v37;
      }
      __float2 v39 = __sincosf_stret(vmuls_lane_f32(6.2832, *(float32x2_t *)v35.f32, 1));
      __float2 v40 = __sincosf_stret(vmlas_n_f32(a7, v20, *(float *)&v88));
      float64x2_t v41 = vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v40.__sinval), LODWORD(v40.__cosval))), (float)(v39.__cosval * (float)(v38 * a6)) + 0.5);
      *(float32x2_t *)v22.f32 = vcvt_f32_f64(v41);
      v22.f32[2] = v39.__sinval * (float)(v38 * a6);
      v42.i64[0] = 0xBF000000BF000000;
      v42.i64[1] = 0xBF000000BF000000;
      float32x4_t v43 = vaddq_f32(v22, vmulq_f32((float32x4_t)__PAIR64__(LODWORD(v40.__sinval), LODWORD(v40.__cosval)), v42));
      float32x4_t v44 = vmulq_f32(v43, v43);
      v44.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).u64[0];
      float32x4_t v45 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0);
      v45.i32[3] = 0;
      float32x4_t v46 = vrsqrteq_f32(v45);
      float32x4_t v47 = vmulq_f32(v46, vrsqrtsq_f32(v45, vmulq_f32(v46, v46)));
      int32x4_t v48 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v44.f32[0] != 0.0)), 0x1FuLL));
      v48.i32[3] = 0;
      a8 = vcltzq_s32(v48);
      v22.i32[3] = v87;
      uint64_t v49 = 16 * v13;
      *(float32x4_t *)(v86 + v49) = v22;
      *(int8x16_t *)(v16 + v49) = vbslq_s8((int8x16_t)a8, (int8x16_t)vmulq_f32(vmulq_f32(v47, vrsqrtsq_f32(v45, vmulq_f32(v47, v47))), v43), (int8x16_t)v43);
      *(void *)(v17 + 8 * v13++) = v88;
    }
    while (v36 != a3);
  }
}

void sub_1B69A5FA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, float a6, float a7, float32x4_t a8)
{
  if (a2 != a3)
  {
    uint64_t v12 = a2;
    int v14 = *(unsigned __int8 *)(a4 + 16);
    uint64_t v86 = *(void *)(a4 + 80);
    uint64_t v15 = *(void *)(a4 + 96);
    uint64_t v16 = *(void *)(a4 + 112);
    unint64_t v17 = *(void *)a4;
    uint32x4_t v18 = *(uint32x4_t *)a4;
    v18.i32[3] = 0;
    unint64_t v83 = -(uint64_t)v17;
    float v19 = a7 - a6;
    int32x4_t v20 = (int32x4_t)vmaxq_u32(v18, (uint32x4_t)xmmword_1B6E78280);
    int32x4_t v21 = vmulq_lane_s32(v20, *(int32x2_t *)v20.i8, 1);
    unsigned __int32 v84 = vmulq_laneq_s32(v21, v20, 2).u32[0];
    do
    {
      __int32 v89 = v21.i32[3];
      if (v14)
      {
        if (v14 == 1)
        {
          uint64_t v49 = *(void *)(a4 + 64);
          int8x16_t v34 = *(int8x16_t *)(*(void *)(a4 + 136) + 16 * (v49 % *(void *)(a4 + 72)) + 32);
          switch(*(unsigned char *)(a4 + 17))
          {
            case 1:
              *(void *)(a4 + 64) = v49 - 1;
              break;
            case 2:
              *(void *)(a4 + 64) = ((v49 >> 63) | 1) + v49;
              break;
            case 3:
              uint64_t v52 = a1[1];
              uint64_t v53 = 9 * __ROR8__(5 * v52, 57);
              uint64_t v54 = a1[2] ^ *a1;
              uint64_t v55 = a1[3] ^ v52;
              uint64_t v56 = v54 ^ v52;
              uint64_t v57 = v55 ^ *a1;
              *a1 = v57;
              a1[1] = v54 ^ v52;
              uint64_t v58 = __ROR8__(v55, 19);
              uint64_t v59 = v54 ^ (v52 << 17);
              a1[2] = v59;
              a1[3] = v58;
              uint64_t v60 = ((unint64_t)v53 * (unsigned __int128)v17) >> 64;
              if (v17 > v53 * v17 && v83 % v17 > v53 * v17)
              {
                do
                {
                  uint64_t v61 = 9 * __ROR8__(5 * v56, 57);
                  uint64_t v62 = v57 ^ v59;
                  uint64_t v63 = v56 ^ v58;
                  v59 ^= v57 ^ (v56 << 17);
                  v56 ^= v62;
                  v57 ^= v63;
                  uint64_t v58 = __ROR8__(v63, 19);
                }
                while (v83 % v17 > v61 * v17);
                *a1 = v57;
                a1[1] = v56;
                uint64_t v60 = ((unint64_t)v61 * (unsigned __int128)v17) >> 64;
                a1[2] = v59;
                a1[3] = v58;
              }
              *(void *)(a4 + 64) = v60;
              break;
            default:
              *(void *)(a4 + 64) = v49 + 1;
              break;
          }
        }
        else
        {
          uint64_t v22 = a1[1];
          uint64_t v23 = a1[2] ^ *a1;
          uint64_t v24 = a1[3] ^ v22;
          uint64_t v25 = v23 ^ v22;
          uint64_t v26 = v24 ^ *a1;
          float v27 = (float)((9 * ((((unint64_t)(5 * v22) >> 32) >> 25) | (640 * v22))) & 0xFFFFFF)
              * 0.000000059605;
          uint64_t v28 = v26 ^ v23 ^ (v22 << 17);
          uint64_t v29 = __ROR8__(v24, 19);
          uint64_t v30 = v28 ^ v25;
          uint64_t v31 = v25 ^ v29 ^ v26;
          uint64_t v32 = v28 ^ (v25 << 17) ^ v31;
          uint64_t v33 = v30 ^ __ROR8__(v25 ^ v29, 19);
          *a1 = v33 ^ v31;
          a1[1] = v32 ^ v30;
          a1[2] = v32 ^ (v30 << 17);
          a1[3] = __ROR8__(v33, 19);
          v34.i32[3] = 0;
          *(float *)v34.i32 = v27;
          *(float *)&v34.i32[1] = (float)((9 * ((((unint64_t)(5 * v25) >> 32) >> 25) | (640 * v25))) & 0xFFFFFF)
                                * 0.000000059605;
          *(float *)&v34.i32[2] = (float)((9 * ((((unint64_t)(5 * v30) >> 32) >> 25) | (640 * v30))) & 0xFFFFFF)
                                * 0.000000059605;
        }
      }
      else
      {
        uint64_t v50 = *(void *)(a4 + 64);
        switch(*(unsigned char *)(a4 + 17))
        {
          case 1:
            uint64_t v51 = v50 - 1;
            break;
          case 2:
            uint64_t v51 = ((v50 >> 63) | 1) + v50;
            break;
          case 3:
            uint64_t v64 = a1[1];
            uint64_t v65 = 9 * __ROR8__(5 * v64, 57);
            uint64_t v66 = a1[2] ^ *a1;
            uint64_t v67 = a1[3] ^ v64;
            uint64_t v68 = v66 ^ v64;
            uint64_t v69 = v67 ^ *a1;
            *a1 = v69;
            a1[1] = v66 ^ v64;
            uint64_t v70 = __ROR8__(v67, 19);
            uint64_t v71 = v66 ^ (v64 << 17);
            a1[2] = v71;
            a1[3] = v70;
            uint64_t v51 = ((unint64_t)v65 * (unsigned __int128)v84) >> 64;
            unint64_t v72 = v65 * v84;
            if (v72 < v84)
            {
              unint64_t v73 = -(uint64_t)v84 % (unint64_t)v84;
              if (v73 > v72)
              {
                do
                {
                  uint64_t v74 = 9 * __ROR8__(5 * v68, 57);
                  uint64_t v75 = v69 ^ v71;
                  uint64_t v76 = v68 ^ v70;
                  v71 ^= v69 ^ (v68 << 17);
                  v68 ^= v75;
                  v69 ^= v76;
                  uint64_t v70 = __ROR8__(v76, 19);
                }
                while (v73 > v74 * (unint64_t)v84);
                *a1 = v69;
                a1[1] = v68;
                uint64_t v51 = ((unint64_t)v74 * (unsigned __int128)v84) >> 64;
                a1[2] = v71;
                a1[3] = v70;
              }
            }
            break;
          default:
            uint64_t v51 = v50 + 1;
            break;
        }
        *(void *)(a4 + 64) = v51;
        float32x4_t v77 = *(float32x4_t *)(a4 + 32);
        float v78 = (float)v50 * v77.f32[0];
        a8.f32[0] = fminf(v78 - floorf(v78), 1.0);
        float v79 = vmuls_lane_f32(v78 - a8.f32[0], *(float32x2_t *)v77.f32, 1);
        float v80 = fminf(v79 - floorf(v79), 1.0);
        float v81 = vmuls_lane_f32(v79 - v80, v77, 2);
        a8.f32[1] = v80;
        a8.i32[2] = fminf(v81 - floorf(v81), 1.0);
        v82.i64[0] = 0x3F0000003F000000;
        v82.i64[1] = 0x3F0000003F000000;
        int8x16_t v34 = (int8x16_t)vaddq_f32(vmulq_f32(v77, v82), a8);
        v34.i32[3] = v85;
      }
      uint64_t v35 = v12 + 1;
      float32x2_t v36 = (float32x2_t)vextq_s8(v34, v34, 4uLL).u64[0];
      int8x8_t v37 = (int8x8_t)vsqrt_f32(v36);
      if (a5) {
        unsigned int v38 = -1;
      }
      else {
        unsigned int v38 = 0;
      }
      float32x2_t v87 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v38), (int8x8_t)v36, v37);
      uint64_t v88 = v34.i64[0];
      __float2 v39 = __sincosf_stret(vmlas_n_f32(a6, v19, *(float *)v34.i32));
      a8.i64[0] = LODWORD(v39.__cosval) | 0x3F00000000000000;
      a8.i64[1] = LODWORD(v39.__sinval) | 0x3F00000000000000;
      float32x4_t v40 = vmulq_f32(a8, a8);
      v40.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u64[0];
      float32x4_t v41 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0);
      v41.i32[3] = 0;
      float v42 = vmuls_lane_f32(0.5 * v87.f32[0], v87, 1);
      float32x4_t v43 = vrsqrteq_f32(v41);
      float32x4_t v44 = vmulq_f32(v43, vrsqrtsq_f32(v41, vmulq_f32(v43, v43)));
      int32x4_t v45 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v40.f32[0] != 0.0)), 0x1FuLL));
      v45.i32[3] = 0;
      float32x2_t v46 = (float32x2_t)vdup_lane_s32((int32x2_t)v87, 0);
      float32x2_t v47 = vsub_f32((float32x2_t)0x3F0000003F000000, v46);
      v46.f32[0] = v42;
      v21.i32[0] = vmul_f32(*(float32x2_t *)a8.f32, v46).u32[0];
      v21.i32[1] = v47.i32[1];
      *(float *)&v21.i32[2] = v39.__sinval * v42;
      v21.i32[3] = v89;
      uint64_t v48 = 16 * v12;
      *(int32x4_t *)(v86 + v48) = v21;
      *(int8x16_t *)(v15 + v48) = vbslq_s8((int8x16_t)vcltzq_s32(v45), (int8x16_t)vmulq_f32(a8, vmulq_f32(v44, vrsqrtsq_f32(v41, vmulq_f32(v44, v44)))), (int8x16_t)a8);
      *(void *)(v16 + 8 * v12++) = v88;
    }
    while (v35 != a3);
  }
}

__n128 sub_1B69A64EC(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void), __n128 result, double a6, float32x4_t a7)
{
  if (a2 != a3)
  {
    uint64_t v10 = a2;
    int v12 = *(unsigned __int8 *)(v7 + 16);
    uint64_t v70 = *(void *)(v7 + 96);
    uint64_t v71 = *(void *)(v7 + 80);
    uint64_t v13 = *(void *)(v7 + 112);
    unint64_t v14 = *(void *)v7;
    unint64_t v67 = -(uint64_t)v14;
    uint32x4_t v15 = *(uint32x4_t *)v7;
    v15.i32[3] = 0;
    int32x4_t v16 = (int32x4_t)vmaxq_u32(v15, (uint32x4_t)xmmword_1B6E78280);
    unsigned __int32 v68 = vmulq_laneq_s32(vmulq_lane_s32(v16, *(int32x2_t *)v16.i8, 1), v16, 2).u32[0];
    do
    {
      if (v12)
      {
        if (v12 == 1)
        {
          uint64_t v33 = *(void *)(v7 + 64);
          float32x4_t v29 = *(float32x4_t *)(*(void *)(v7 + 136) + 16 * (v33 % *(void *)(v7 + 72)) + 32);
          switch(*(unsigned char *)(v7 + 17))
          {
            case 1:
              *(void *)(v7 + 64) = v33 - 1;
              break;
            case 2:
              *(void *)(v7 + 64) = ((v33 >> 63) | 1) + v33;
              break;
            case 3:
              uint64_t v36 = a1[1];
              uint64_t v37 = 9 * __ROR8__(5 * v36, 57);
              uint64_t v38 = a1[2] ^ *a1;
              uint64_t v39 = a1[3] ^ v36;
              uint64_t v40 = v38 ^ v36;
              uint64_t v41 = v39 ^ *a1;
              *a1 = v41;
              a1[1] = v38 ^ v36;
              uint64_t v42 = __ROR8__(v39, 19);
              uint64_t v43 = v38 ^ (v36 << 17);
              a1[2] = v43;
              a1[3] = v42;
              uint64_t v44 = ((unint64_t)v37 * (unsigned __int128)v14) >> 64;
              if (v14 > v37 * v14 && v67 % v14 > v37 * v14)
              {
                do
                {
                  uint64_t v45 = 9 * __ROR8__(5 * v40, 57);
                  uint64_t v46 = v41 ^ v43;
                  uint64_t v47 = v40 ^ v42;
                  v43 ^= v41 ^ (v40 << 17);
                  v40 ^= v46;
                  v41 ^= v47;
                  uint64_t v42 = __ROR8__(v47, 19);
                }
                while (v67 % v14 > v45 * v14);
                *a1 = v41;
                a1[1] = v40;
                uint64_t v44 = ((unint64_t)v45 * (unsigned __int128)v14) >> 64;
                a1[2] = v43;
                a1[3] = v42;
              }
              *(void *)(v7 + 64) = v44;
              break;
            default:
              *(void *)(v7 + 64) = v33 + 1;
              break;
          }
        }
        else
        {
          uint64_t v17 = a1[1];
          uint64_t v18 = a1[2] ^ *a1;
          uint64_t v19 = a1[3] ^ v17;
          uint64_t v20 = v18 ^ v17;
          uint64_t v21 = v19 ^ *a1;
          float32_t v22 = (float)((9 * ((((unint64_t)(5 * v17) >> 32) >> 25) | (640 * v17))) & 0xFFFFFF)
              * 0.000000059605;
          uint64_t v23 = v21 ^ v18 ^ (v17 << 17);
          uint64_t v24 = __ROR8__(v19, 19);
          uint64_t v25 = v23 ^ v20;
          uint64_t v26 = v20 ^ v24 ^ v21;
          uint64_t v27 = v23 ^ (v20 << 17) ^ v26;
          uint64_t v28 = v25 ^ __ROR8__(v20 ^ v24, 19);
          *a1 = v28 ^ v26;
          a1[1] = v27 ^ v25;
          a1[2] = v27 ^ (v25 << 17);
          a1[3] = __ROR8__(v28, 19);
          v29.i32[3] = 0;
          v29.f32[0] = v22;
          v29.f32[1] = (float)((9 * ((((unint64_t)(5 * v20) >> 32) >> 25) | (640 * v20))) & 0xFFFFFF)
                     * 0.000000059605;
          v29.f32[2] = (float)((9 * ((((unint64_t)(5 * v25) >> 32) >> 25) | (640 * v25))) & 0xFFFFFF)
                     * 0.000000059605;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(v7 + 64);
        switch(*(unsigned char *)(v7 + 17))
        {
          case 1:
            uint64_t v35 = v34 - 1;
            break;
          case 2:
            uint64_t v35 = ((v34 >> 63) | 1) + v34;
            break;
          case 3:
            uint64_t v48 = a1[1];
            uint64_t v49 = 9 * __ROR8__(5 * v48, 57);
            uint64_t v50 = a1[2] ^ *a1;
            uint64_t v51 = a1[3] ^ v48;
            uint64_t v52 = v50 ^ v48;
            uint64_t v53 = v51 ^ *a1;
            *a1 = v53;
            a1[1] = v50 ^ v48;
            uint64_t v54 = __ROR8__(v51, 19);
            uint64_t v55 = v50 ^ (v48 << 17);
            a1[2] = v55;
            a1[3] = v54;
            uint64_t v35 = ((unint64_t)v49 * (unsigned __int128)v68) >> 64;
            unint64_t v56 = v49 * v68;
            if (v56 < v68)
            {
              unint64_t v57 = -(uint64_t)v68 % (unint64_t)v68;
              if (v57 > v56)
              {
                do
                {
                  uint64_t v58 = 9 * __ROR8__(5 * v52, 57);
                  uint64_t v59 = v53 ^ v55;
                  uint64_t v60 = v52 ^ v54;
                  v55 ^= v53 ^ (v52 << 17);
                  v52 ^= v59;
                  v53 ^= v60;
                  uint64_t v54 = __ROR8__(v60, 19);
                }
                while (v57 > v58 * (unint64_t)v68);
                *a1 = v53;
                a1[1] = v52;
                uint64_t v35 = ((unint64_t)v58 * (unsigned __int128)v68) >> 64;
                a1[2] = v55;
                a1[3] = v54;
              }
            }
            break;
          default:
            uint64_t v35 = v34 + 1;
            break;
        }
        *(void *)(v7 + 64) = v35;
        float32x4_t v61 = *(float32x4_t *)(v7 + 32);
        float v62 = (float)v34 * v61.f32[0];
        a7.f32[0] = fminf(v62 - floorf(v62), 1.0);
        float v63 = vmuls_lane_f32(v62 - a7.f32[0], *(float32x2_t *)v61.f32, 1);
        float v64 = fminf(v63 - floorf(v63), 1.0);
        float v65 = vmuls_lane_f32(v63 - v64, v61, 2);
        a7.f32[1] = v64;
        a7.i32[2] = fminf(v65 - floorf(v65), 1.0);
        v66.i64[0] = 0x3F0000003F000000;
        v66.i64[1] = 0x3F0000003F000000;
        float32x4_t v29 = vaddq_f32(vmulq_f32(v61, v66), a7);
        v29.i32[3] = v69;
      }
      __n128 v72 = (__n128)v29;
      *(double *)&long long v30 = a4();
      uint64_t v31 = 16 * v10;
      *(_OWORD *)(v71 + v31) = v30;
      *(_OWORD *)(v70 + v31) = v32;
      double result = v72;
      *(void *)(v13 + 8 * v10++) = v72.n128_u64[0];
    }
    while (v10 != a3);
  }
  return result;
}

uint64_t *sub_1B69A6928(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  if (!*(unsigned char *)(v3 + 16))
  {
    uint32x4_t v60 = *(uint32x4_t *)v3;
    double result = (uint64_t *)sub_1B684C6E4(2uLL, 2uLL, 2uLL);
    if (v5 == a3) {
      return result;
    }
    double result = *(uint64_t **)(v3 + 64);
    if (((unint64_t)result & 0x8000000000000000) != 0 || (unint64_t)result >> 32)
    {
LABEL_46:
      sub_1B6E32BD8();
      __break(1u);
      JUMPOUT(0x1B69A6DECLL);
    }
    uint32x4_t v11 = v60;
    v11.i32[3] = 0;
    v8.i32[3] = 0;
    int8x16_t v12 = (int8x16_t)vmaxq_u32(v11, v8);
    *(float *)v9.i32 = (float)v12.u32[0];
    float32x2_t v13 = vcvt_f32_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 4uLL));
    unsigned int v14 = v12.i32[2] * v12.i32[1];
    __int32 v15 = v12.i32[0] * v12.i32[2];
    __int32 v16 = v12.i32[0] * v12.i32[1];
    __int32 v17 = v12.i32[2] * v12.i32[1] + v12.i32[0] * v12.i32[2];
    unsigned __int32 v18 = 2 * (v17 + v12.i32[0] * v12.i32[1]);
    unsigned int v19 = 2 * v12.i32[2] * v12.i32[1];
    uint64_t v20 = *(void *)(v3 + 80);
    uint64_t v21 = *(void *)(v3 + 96);
    uint64_t v22 = *(void *)(v3 + 112);
    uint64_t v23 = *(unsigned __int8 *)(v3 + 17);
    unsigned int v24 = 2 * v17;
    float32x2_t v25 = (float32x2_t)vdup_n_s32(0x3F800008u);
    float32x2_t v26 = vdiv_f32(v25, (float32x2_t)vzip1_s32(v9, (int32x2_t)v13));
    float32x2_t v27 = vdiv_f32(v25, v13);
    v13.i32[0] = v9.i32[0];
    unsigned int v28 = v24 + v16;
    float32x2_t v29 = vdiv_f32(v25, v13);
    unsigned int v30 = v19 + v15;
    int32x4_t v31 = (int32x4_t)vmaxq_u32(v11, (uint32x4_t)xmmword_1B6E78280);
    unsigned __int32 v32 = vmulq_laneq_s32(vmulq_lane_s32(v31, *(int32x2_t *)v31.i8, 1), v31, 2).u32[0];
    while (1)
    {
      unsigned int v33 = result % v18;
      float v34 = (float)(result % v18);
      if (result % v18 >= v19)
      {
        v39.f32[0] = fminf((float)(v26.f32[0] * v34) - floorf(v26.f32[0] * v34), 1.0);
        v39.i32[1] = fminf((float)(v26.f32[1] * (float)((float)(v26.f32[0] * v34) - v39.f32[0]))- floorf(v26.f32[1] * (float)((float)(v26.f32[0] * v34) - v39.f32[0])), 1.0);
        double v40 = COERCE_DOUBLE(vmla_f32(v39, (float32x2_t)0x3F0000003F000000, v26));
        if (v33 >= v28) {
          float v41 = 5.0;
        }
        else {
          float v41 = 4.0;
        }
        float v42 = v29.f32[0] * v34;
        v43.f32[0] = fminf(v42 - floorf(v42), 1.0);
        v43.i32[1] = fminf((float)(v29.f32[1] * (float)(v42 - v43.f32[0])) - floorf(v29.f32[1] * (float)(v42 - v43.f32[0])), 1.0);
        double v37 = COERCE_DOUBLE(vmla_f32(v43, (float32x2_t)0x3F0000003F000000, v29));
        if (v33 >= v30) {
          float v38 = 3.0;
        }
        else {
          float v38 = 2.0;
        }
        if (v33 >= v24)
        {
          double v37 = v40;
          float v38 = v41;
        }
      }
      else
      {
        float v35 = v27.f32[0] * v34;
        v36.f32[0] = fminf(v35 - floorf(v35), 1.0);
        v36.i32[1] = fminf((float)(v27.f32[1] * (float)(v35 - v36.f32[0])) - floorf(v27.f32[1] * (float)(v35 - v36.f32[0])), 1.0);
        double v37 = COERCE_DOUBLE(vmla_f32(v36, (float32x2_t)0x3F0000003F000000, v27));
        if (v33 >= v14) {
          float v38 = 1.0;
        }
        else {
          float v38 = 0.0;
        }
      }
      float32x2_t v44 = vadd_f32(*(float32x2_t *)&v37, (float32x2_t)0xBF000000BF000000);
      switch((int)v38)
      {
        case 0:
          *(_OWORD *)(v21 + 16 * v5) = xmmword_1B6E4F300;
          LODWORD(v45) = 1056964608;
          goto LABEL_30;
        case 1:
          *(_OWORD *)(v21 + 16 * v5) = xmmword_1B6E4F310;
          LODWORD(v45) = -1090519040;
LABEL_30:
          *(float32x2_t *)((char *)&v45 + 4) = v44;
          goto LABEL_33;
        case 2:
          *(_OWORD *)(v21 + 16 * v5) = xmmword_1B6E4F320;
          DWORD1(v45) = 1056964608;
          goto LABEL_28;
        case 3:
          *(_OWORD *)(v21 + 16 * v5) = xmmword_1B6E4F330;
          DWORD1(v45) = -1090519040;
LABEL_28:
          DWORD2(v45) = v44.i32[1];
          LODWORD(v45) = v44.i32[0];
          goto LABEL_33;
        case 4:
          *(_OWORD *)(v21 + 16 * v5) = xmmword_1B6E4F2E0;
          DWORD2(v45) = 1056964608;
          goto LABEL_32;
        default:
          *(_OWORD *)(v21 + 16 * v5) = xmmword_1B6E4F340;
          DWORD2(v45) = -1090519040;
LABEL_32:
          *(float32x2_t *)&long long v45 = v44;
LABEL_33:
          uint64_t v46 = v5 + 1;
          HIDWORD(v45) = v10;
          *(_OWORD *)(v20 + 16 * v5) = v45;
          *(double *)(v22 + 8 * v5) = v37;
          switch(v23)
          {
            case 1:
              double result = (uint64_t *)((char *)result - 1);
              break;
            case 3:
              uint64_t v47 = a1[1];
              uint64_t v48 = 9 * __ROR8__(5 * v47, 57);
              uint64_t v49 = a1[2] ^ *a1;
              uint64_t v50 = a1[3] ^ v47;
              uint64_t v51 = v49 ^ v47;
              uint64_t v52 = v50 ^ *a1;
              *a1 = v52;
              a1[1] = v49 ^ v47;
              uint64_t v53 = __ROR8__(v50, 19);
              uint64_t v54 = v49 ^ (v47 << 17);
              a1[2] = v54;
              a1[3] = v53;
              double result = (uint64_t *)(((unint64_t)v48 * (unsigned __int128)v32) >> 64);
              unint64_t v55 = v48 * v32;
              if (v55 < v32)
              {
                unint64_t v56 = -(uint64_t)v32 % (unint64_t)v32;
                if (v56 > v55)
                {
                  do
                  {
                    uint64_t v57 = 9 * __ROR8__(5 * v51, 57);
                    uint64_t v58 = v52 ^ v54;
                    uint64_t v59 = v51 ^ v53;
                    v54 ^= v52 ^ (v51 << 17);
                    v51 ^= v58;
                    v52 ^= v59;
                    uint64_t v53 = __ROR8__(v59, 19);
                  }
                  while (v56 > v57 * (unint64_t)v32);
                  *a1 = v52;
                  a1[1] = v51;
                  double result = (uint64_t *)(((unint64_t)v57 * (unsigned __int128)v32) >> 64);
                  a1[2] = v54;
                  a1[3] = v53;
                }
              }
              break;
            default:
              double result = (uint64_t *)((char *)result + 1);
              break;
          }
          if (v46 == a3)
          {
            *(void *)(v3 + 64) = result;
            return result;
          }
          if (((unint64_t)result & 0x8000000000000000) != 0) {
            goto LABEL_46;
          }
          uint64_t v5 = v46;
          if ((unint64_t)result >> 32) {
            goto LABEL_46;
          }
          break;
      }
    }
  }
  if (*(unsigned char *)(v3 + 16) != 1)
  {
    *(_DWORD *)(v3 + 40) = 1042983595;
    *(_DWORD *)(v3 + 56) = 1067030938;
  }

  return sub_1B69A4BA4(a1, a2, a3, v3);
}

void sub_1B69A6E10()
{
  qword_1EB997A40 = (uint64_t)&unk_1F0F598A0;
}

uint64_t sub_1B69A6E24(void *a1, uint64_t a2)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  if ((a2 & 0x100000000) != 0)
  {
    sub_1B62C550C((uint64_t)v5, v6);
    sub_1B6E332A8();
  }
  else
  {
    sub_1B62C550C((uint64_t)v5, v6);
    sub_1B6E332A8();
    if (!v2)
    {
      sub_1B62C550C((uint64_t)v5, v6);
      sub_1B6E33298();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

BOOL sub_1B69A6FEC(unsigned int *a1, unsigned int *a2)
{
  return sub_1B69AB6AC(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

uint64_t sub_1B69A7020(void *a1)
{
  return sub_1B69A6E24(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

uint64_t sub_1B69A7054@<X0>(void *a1@<X8>)
{
  return sub_1B69A7384(&qword_1EB97DE38, &qword_1EB997A40, a1);
}

double sub_1B69A7078()
{
  sub_1B62AA5A0(0, (unint64_t *)&unk_1EB980B08, (uint64_t)&type metadata for EmitterShape.Direction, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E76900;
  *(_OWORD *)(v0 + 32) = xmmword_1B6E4F320;
  *(unsigned char *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 64) = xmmword_1B6E4F320;
  *(unsigned char *)(v0 + 80) = 1;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(unsigned char *)(v0 + 112) = 2;
  *(_OWORD *)(v0 + 128) = xmmword_1B6E50D30;
  *(unsigned char *)(v0 + 144) = 2;
  *(void *)&double result = 2;
  *(_OWORD *)(v0 + 160) = xmmword_1B6E78210;
  *(unsigned char *)(v0 + 176) = 2;
  qword_1EB997A50 = v0;
  return result;
}

uint64_t sub_1B69A711C(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  if (a4 > 1u)
  {
    sub_1B62C550C((uint64_t)v7, v8);
    sub_1B6E332A8();
  }
  else
  {
    sub_1B62C550C((uint64_t)v7, v8);
    sub_1B6E332A8();
    if (!v4)
    {
      sub_1B62C550C((uint64_t)v7, v8);
      sub_1B62AA450(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
      sub_1B62AF09C((unint64_t *)&qword_1EB97D1D8);
      sub_1B6E332B8();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
}

uint64_t sub_1B69A7304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B69A731C(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1B69AB784);
}

uint64_t sub_1B69A731C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t sub_1B69A7340(void *a1)
{
  return sub_1B69A711C(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t sub_1B69A7360@<X0>(void *a1@<X8>)
{
  return sub_1B69A7384(&qword_1EB97DE70, &qword_1EB997A50, a1);
}

uint64_t sub_1B69A7384@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_bridgeObjectRetain();
}

unint64_t sub_1B69A73DC(char a1)
{
  unint64_t result = 0x4C72616C75676E61;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F69746365726964;
      break;
    case 2:
      unint64_t result = 0x7562697274736964;
      break;
    case 3:
      unint64_t result = 0x75536E4F74696D65;
      break;
    case 4:
      unint64_t result = 0x7461746E6569726FLL;
      break;
    case 5:
      unint64_t result = 0x6570616873;
      break;
    case 6:
      unint64_t result = 0x6E69646165727073;
      break;
    case 7:
      unint64_t result = 0x41746E65676E6174;
      break;
    case 8:
      unint64_t result = 0x46746E65676E6174;
      break;
    case 9:
      unint64_t result = 0x726F66736E617274;
      break;
    case 10:
      unint64_t result = 0x797469636F6C6576;
      break;
    case 11:
      unint64_t result = 0x65727574786574;
      break;
    case 12:
    case 17:
      unint64_t result = 0xD000000000000012;
      break;
    case 13:
      unint64_t result = 0x5365727574786574;
      break;
    case 14:
      unint64_t result = 0x4265727574786574;
      break;
    case 15:
      unint64_t result = 0xD000000000000017;
      break;
    case 16:
      unint64_t result = 0x6E6F697373696D65;
      break;
    case 18:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69A76E0(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1B62C38F0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1B62C38F0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B69A776C()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B69A73DC(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B69A77D0()
{
  sub_1B69A73DC(*v0);
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69A7824()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B69A73DC(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B69A7884@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69ABD50();
  *a1 = result;
  return result;
}

unint64_t sub_1B69A78B4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B69A73DC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B69A78E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69ABD50();
  *a1 = result;
  return result;
}

void sub_1B69A7908(unsigned char *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_1B69A7914(uint64_t a1)
{
  unint64_t v2 = sub_1B62AAA98();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69A7950(uint64_t a1)
{
  unint64_t v2 = sub_1B62AAA98();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69A798C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B62AA450(0, &qword_1E9DD3458, (uint64_t (*)(void))sub_1B62AAA98, (uint64_t)&type metadata for EmitterShape.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  int v10 = (char *)v15 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B62AAA98();
  sub_1B6E33A88();
  *(void *)&v16[0] = *(void *)(v3 + 8);
  char v21 = 0;
  sub_1B62AA858();
  sub_1B62AA5EC(qword_1E9DD02C8);
  sub_1B6E32FA8();
  if (!v2)
  {
    sub_1B67599F4(v3 + 48, (uint64_t)v19);
    sub_1B67599F4((uint64_t)v19, (uint64_t)v16);
    char v21 = 1;
    sub_1B66C6890();
    sub_1B6E32FA8();
    LOBYTE(v16[0]) = 3;
    sub_1B6E32F58();
    sub_1B62AA520(v3 + 80, (uint64_t)v18, &qword_1EB97DE80, (uint64_t)&type metadata for EmitterShape.Direction);
    sub_1B62AA520((uint64_t)v18, (uint64_t)v16, &qword_1EB97DE80, (uint64_t)&type metadata for EmitterShape.Direction);
    char v21 = 4;
    sub_1B62AA5A0(0, &qword_1EB97DE80, (uint64_t)&type metadata for EmitterShape.Direction, MEMORY[0x1E4FBB718]);
    sub_1B62AA9B4(&qword_1E9DD3460, (void (*)(void))sub_1B66C6890);
    sub_1B6E32FA8();
    sub_1B675A9A4(v3, (uint64_t)v20);
    sub_1B675A9A4((uint64_t)v20, (uint64_t)v16);
    char v21 = 5;
    sub_1B66C65E8();
    sub_1B6E32FA8();
    *(void *)&v16[0] = *(void *)(v3 + 112);
    char v21 = 6;
    sub_1B6E32FA8();
    v16[0] = *(_OWORD *)(v3 + 128);
    char v21 = 7;
    sub_1B62AA450(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    uint64_t v12 = v11;
    uint64_t v13 = sub_1B62AF09C((unint64_t *)&qword_1EB97D1D8);
    v15[1] = v12;
    sub_1B6E32FA8();
    v15[0] = v13;
    *(void *)&v16[0] = *(void *)(v3 + 144);
    char v21 = 8;
    sub_1B6E32FA8();
    LOBYTE(v16[0]) = 9;
    sub_1B6E32F78();
    sub_1B67599F4(v3 + 16, (uint64_t)v17);
    sub_1B67599F4((uint64_t)v17, (uint64_t)v16);
    char v21 = 2;
    sub_1B66C694C();
    sub_1B6E32FA8();
    *(void *)&v16[0] = *(void *)(v3 + 104);
    char v21 = 10;
    sub_1B6E32FA8();
    *(void *)&v16[0] = *(void *)(v3 + 152);
    char v21 = 11;
    sub_1B6657A10();
    sub_1B6E32FA8();
    LOBYTE(v16[0]) = *(unsigned char *)(v3 + 160);
    char v21 = 12;
    sub_1B66C63C0();
    sub_1B6E32FA8();
    v16[0] = *(_OWORD *)(v3 + 176);
    char v21 = 13;
    sub_1B6E32FA8();
    v16[0] = *(_OWORD *)(v3 + 192);
    char v21 = 14;
    sub_1B6E32FA8();
    LOBYTE(v16[0]) = 15;
    sub_1B6E32F58();
    LOBYTE(v16[0]) = *(unsigned char *)(v3 + 33);
    char v21 = 16;
    sub_1B66C5E9C();
    sub_1B6E32FA8();
    LOBYTE(v16[0]) = *(unsigned char *)(v3 + 97);
    char v21 = 17;
    sub_1B66C5E1C();
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B69A8028(void *a1)
{
  return sub_1B69A798C(a1);
}

uint64_t sub_1B69A8094(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 8))(v2 + 152, 0, ObjectType, a2);
}

__n128 sub_1B69A80EC@<Q0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
  *(void *)(a1 + 8) = 0x40C90FDA00000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 2;
  *(unsigned char *)(a1 + 34) = 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 767;
  *(_OWORD *)(a1 + 100) = xmmword_1B6E99DF0;
  *(_DWORD *)(a1 + 116) = 1050253722;
  *(_OWORD *)(a1 + 128) = xmmword_1B6E4F320;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 160) = 2;
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(a1 + 176) = result;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  return result;
}

double sub_1B69A817C(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  sub_1B688AC0C(v18, a1, a2, a3);
  int32x4_t v16 = (int32x4_t)v18[1];
  int32x4_t v17 = (int32x4_t)v18[0];
  int32x4_t v15 = (int32x4_t)v18[2];
  sub_1B67599F4(v3 + 48, (uint64_t)v19);
  sub_1B67599F4((uint64_t)v19, (uint64_t)&v20);
  double result = 0.0;
  if (v21 == 1)
  {
    int8x16_t v7 = (int8x16_t)vabsq_f32(v20);
    if (*(float *)v7.i32 > 0.00000011921
      || (v7.i32[0] = vextq_s8(v7, v7, 8uLL).u32[0],
          *(int32x2_t *)v7.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v7.i8),
          (v7.i8[4] & 1) == 0)
      || (v7.i8[0] & 1) == 0)
    {
      int32x4_t v8 = (int32x4_t)vmulq_f32(v20, v20);
      v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
      float32x2_t v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
      float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
      *(void *)&double result = vmulq_n_f32(v20, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]).u64[0];
    }
  }
  else if (!v21)
  {
    int8x16_t v5 = (int8x16_t)vabsq_f32(v20);
    if (*(float *)v5.i32 <= 0.00000011921
      && (v5.i32[0] = vextq_s8(v5, v5, 8uLL).u32[0],
          *(int32x2_t *)v5.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v5.i8),
          (v5.i8[4] & 1) != 0)
      && (v5.i8[0] & 1) != 0)
    {
      float32x4_t v6 = (float32x4_t)xmmword_1B6E4F2E0;
    }
    else
    {
      int32x4_t v11 = (int32x4_t)vmulq_f32(v20, v20);
      v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
      float32x2_t v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
      float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
      float32x4_t v6 = vmulq_n_f32(v20, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
    }
    float32x4_t v14 = (float32x4_t)vtrn2q_s32(v17, v16);
    v14.i32[2] = v15.i32[1];
    *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v17, v15), v16), v6.f32[0]), v14, *(float32x2_t *)v6.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v17, v15), vdupq_laneq_s32(v16, 2)), v6, 2).u64[0];
  }
  return result;
}

double sub_1B69A82F8(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  sub_1B62AA520(v3 + 80, (uint64_t)v59, &qword_1EB97DE80, (uint64_t)&type metadata for EmitterShape.Direction);
  sub_1B62AA520((uint64_t)v59, (uint64_t)v60, &qword_1EB97DE80, (uint64_t)&type metadata for EmitterShape.Direction);
  double result = 0.0;
  if (v60[16] != 255)
  {
    sub_1B67599F4((uint64_t)v60, (uint64_t)v61);
    sub_1B67599F4((uint64_t)v61, (uint64_t)&v62);
    if (v63 == 1)
    {
      float32x4_t v54 = v62;
      sub_1B688AC0C(v58, a1, a2, a3);
      int8x16_t v8 = (int8x16_t)vabsq_f32(v54);
      if (*(float *)v8.i32 <= 0.00000011921
        && (v8.i32[0] = vextq_s8(v8, v8, 8uLL).u32[0],
            *(int32x2_t *)v8.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v8.i8),
            (v8.i8[4] & 1) != 0)
        && (v8.i8[0] & 1) != 0)
      {
        float32x4_t v9 = (float32x4_t)xmmword_1B6E4F2E0;
      }
      else
      {
        int32x4_t v25 = (int32x4_t)vmulq_f32(v54, v54);
        v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
        float32x2_t v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
        float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
        float32x4_t v9 = vmulq_n_f32(v54, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
      }
      float32x4_t v18 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58[0], v9.f32[0]), v58[1], *(float32x2_t *)v9.f32, 1), v58[2], v9, 2);
      float32x4_t v28 = vmulq_f32(v18, v18);
      v28.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).u64[0];
      float32x4_t v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0);
      v29.i32[3] = 0;
      float32x4_t v30 = vrsqrteq_f32(v29);
      float32x4_t v31 = vmulq_f32(v30, vrsqrtsq_f32(v29, vmulq_f32(v30, v30)));
      float32x4_t v17 = vmulq_f32(v31, v31);
      int32x4_t v32 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v28.f32[0] != 0.0)), 0x1FuLL));
      v32.i32[3] = 0;
      float32x4_t v24 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v32), (int8x16_t)vmulq_f32(v18, vmulq_f32(v31, vrsqrtsq_f32(v29, v17))), (int8x16_t)v18);
    }
    else
    {
      double result = 0.0;
      if (v63) {
        return result;
      }
      int8x16_t v6 = (int8x16_t)vabsq_f32(v62);
      if (*(float *)v6.i32 <= 0.00000011921
        && (v6.i32[0] = vextq_s8(v6, v6, 8uLL).u32[0],
            *(int32x2_t *)v6.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v6.i8),
            (v6.i8[4] & 1) != 0)
        && (v6.i8[0] & 1) != 0)
      {
        float32x4_t v7 = (float32x4_t)xmmword_1B6E4F2E0;
      }
      else
      {
        int32x4_t v10 = (int32x4_t)vmulq_f32(v62, v62);
        v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
        float32x2_t v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
        float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
        float32x4_t v7 = vmulq_n_f32(v62, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
      }
      float32x4_t v13 = vmulq_f32(v7, v7);
      v13.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u64[0];
      float32x4_t v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
      v14.i32[3] = 0;
      float32x4_t v15 = vrsqrteq_f32(v14);
      float32x4_t v16 = vmulq_f32(v15, vrsqrtsq_f32(v14, vmulq_f32(v15, v15)));
      float32x4_t v17 = vmulq_f32(v16, v16);
      float32x4_t v18 = vmulq_f32(v16, vrsqrtsq_f32(v14, v17));
      int32x4_t v19 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v13.f32[0] != 0.0)), 0x1FuLL));
      v19.i32[3] = 0;
      __asm { FMOV            V3.4S, #1.0 }
      float32x4_t v24 = vmulq_f32(v7, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v19), (int8x16_t)v18, _Q3));
    }
    v17.i32[0] = v24.i32[2];
    v5.i32[0] = 1.0;
    v33.i64[0] = 0x8000000080000000;
    v33.i64[1] = 0x8000000080000000;
    float v34 = *(float *)vbslq_s8(v33, v5, (int8x16_t)v17).i32;
    *(float *)v33.i32 = v24.f32[1] / (float)(fabsf(v24.f32[2]) + 1.0);
    float v35 = vmuls_lane_f32(*(float *)v33.i32, *(float32x2_t *)v24.f32, 1);
    float v36 = -(float)(v24.f32[0] * *(float *)v33.i32);
    float v37 = v24.f32[2] + (float)(v34 * v35);
    v18.f32[0] = v34 * v36;
    float v38 = 1.0 - v35;
    float v39 = vmuls_lane_f32(-v34, *(float32x2_t *)v24.f32, 1);
    float v40 = v24.f32[2] + (float)(v37 + v38);
    if (v40 <= 0.0)
    {
      if (v37 >= v38 && v37 >= v24.f32[2])
      {
        float v51 = sqrtf((float)((float)(v37 + 1.0) - v38) - v24.f32[2]);
        v52.f32[0] = v51 * v51;
        v52.f32[1] = v36 + v18.f32[0];
        *(float32x2_t *)&v52.u32[2] = vsub_f32((float32x2_t)__PAIR64__(LODWORD(v39), v24.u32[0]), *(float32x2_t *)v24.f32);
        *(void *)&double result = vmulq_n_f32(v52, 0.5 / v51).u64[0];
        return result;
      }
      if (v38 > v24.f32[2])
      {
        float v48 = sqrtf((float)((float)(v38 + 1.0) - v37) - v24.f32[2]);
        v49.f32[0] = v36 + v18.f32[0];
        float32x2_t v50 = (float32x2_t)vrev64_s32(*(int32x2_t *)v24.f32);
        v49.f32[1] = v48 * v48;
        *(float32x2_t *)&v49.u32[2] = vadd_f32(v50, (float32x2_t)__PAIR64__(v50.u32[1], LODWORD(v39)));
        *(void *)&double result = vmulq_n_f32(v49, 0.5 / v48).u64[0];
        return result;
      }
      float v53 = sqrtf((float)((float)(v24.f32[2] + 1.0) - v37) - v38);
      v24.i32[0] = vsubq_f32(v24, v24).u32[0];
      v45.f32[1] = v24.f32[1] + v39;
      v45.f32[2] = v53 * v53;
      v45.f32[3] = v18.f32[0] - v36;
      float v46 = 0.5 / v53;
    }
    else
    {
      float32x2_t v41 = (float32x2_t)vrev64_s32(*(int32x2_t *)v24.f32);
      *(int32x2_t *)v45.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), 0);
      v45.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v41.u32[1], LODWORD(v39)), v41).u32[0];
      float32x2_t v42 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v40 + 1.0)), v18.u32[0]);
      float32x2_t v43 = vmul_f32(v42, v42);
      v42.f32[0] = v36;
      LODWORD(v44) = vsub_f32(*(float32x2_t *)v18.f32, v42).u32[0];
      HIDWORD(v44) = v43.i32[1];
      v45.i64[1] = v44;
      float v46 = 0.5 / v42.f32[1];
    }
    *(void *)&double result = vmulq_n_f32(v45, v46).u64[0];
  }
  return result;
}

uint64_t sub_1B69A86FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v727 = *MEMORY[0x1E4F143B8];
  uint64_t v649 = a1[2];
  uint64_t v6 = *(void *)(v649 + 32);
  swift_retain();
  ecs_stack_allocator_push_snapshot(v6);
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  float32x4_t v9 = ecs_stack_allocator_allocate(v6, 16 * v8, 16);
  int32x4_t v10 = ecs_stack_allocator_allocate(v6, 16 * v8, 16);
  uint64_t v605 = v6;
  float32x2_t v11 = ecs_stack_allocator_allocate(v6, 8 * v8, 8);
  int v618 = *(unsigned __int8 *)(v3 + 4);
  float v606 = *(float *)v3;
  _ZF = v618 == 1 && *(_DWORD *)v3 == 0;
  v621 = v9;
  v623 = v10;
  uint64_t v624 = v7;
  v617 = a1;
  if (_ZF)
  {
    uint64_t v37 = v8 - v7;
    _ZF = v8 == v7;
    float32x2_t v27 = a1;
    uint64_t v34 = v8;
    uint64_t v29 = v3;
    if (!_ZF)
    {
      float v38 = &v623[2 * v7];
      float v39 = &v9[2 * v7];
      do
      {
        *float v39 = 0;
        v39[1] = 0;
        v39 += 2;
        *v38++ = xmmword_1B6E4F320;
        --v37;
      }
      while (v37);
    }
  }
  else
  {
    unint64_t v13 = *(void *)(v3 + 16);
    int8x8_t v14 = *(int8x8_t *)(v3 + 24);
    int v15 = *(unsigned __int8 *)(v3 + 32);
    uint64_t v16 = *(void *)(a3 + 104) + a1[3] - a1[5];
    float32x4_t v17 = (uint64_t *)(a3 + 8);
    float32x4_t v18 = v11;
    sub_1B69AB9DC(v13, v14, v15, *(unsigned char *)(v4 + 33), v16, (uint64_t)v9, (16 * v8) >> 4, (uint64_t)v10, (uint64_t)&v671, (16 * v8) >> 4, (uint64_t)v11, (8 * v8) >> 3);
    long long v668 = v677;
    long long v669 = v678;
    long long v670 = v679;
    __n128 v664 = v673;
    long long v665 = v674;
    long long v666 = v675;
    long long v667 = v676;
    __n128 v662 = v671;
    int32x4_t v663 = v672;
    char v26 = v15 != 2 || (*(void *)&v14 | v13) != 0;
    if (*(unsigned char *)(v4 + 34))
    {
      uint64_t v7 = v624;
      float32x2_t v27 = v617;
      uint64_t v28 = v8;
      if (v618)
      {
        uint64_t v29 = v4;
        float32x4_t v30 = v18;
        switch(v618)
        {
          case 1:
            float v40 = sub_1B69ACEDC;
            if (!v15) {
              float v40 = sub_1B69ACF5C;
            }
            v642 = (double (*)(void))v40;
            *(void *)(swift_allocObject() + 16) = *(void *)(v4 + 8);
            uint64_t v34 = v28;
            sub_1B69A47C8(v17, v624, v28, v642);
LABEL_34:
            uint64_t v7 = v624;
            swift_release();
            goto LABEL_38;
          case 2:
            uint64_t v34 = v28;
            sub_1B69A6928(v17, v624, v28);
            goto LABEL_38;
          case 3:
            uint64_t v34 = v28;
            sub_1B69A39D4(v17, v624, v28, (uint64_t)&v662, *(float *)(v4 + 8), *(float *)(v4 + 12), v19);
            goto LABEL_38;
          case 4:
LABEL_27:
            uint64_t v34 = v28;
            sub_1B69A3654(v17, v7, v28, &v662, v672, v671.n128_f64[0], v19.n128_f64[0], *(double *)v20.i64, v21, v22, v23);
            goto LABEL_38;
          case 5:
            uint64_t v34 = v28;
            sub_1B69A4304(v17, v624, v28, (uint64_t)&v662, v26, *(float *)(v4 + 8), *(float *)(v4 + 12));
            goto LABEL_38;
          default:
LABEL_23:
            sub_1B69ACE98((uint64_t)&v671);
            uint64_t v34 = v28;
            goto LABEL_82;
        }
      }
      uint64_t v29 = v4;
      sub_1B69A3E1C(v17, v624, v28, (uint64_t)&v662, v606, *(float *)(v4 + 8), *(float *)(v4 + 12));
    }
    else
    {
      uint64_t v7 = v624;
      float32x2_t v27 = v617;
      uint64_t v28 = v8;
      if (v618)
      {
        uint64_t v29 = v4;
        float32x4_t v30 = v18;
        switch(v618)
        {
          case 1:
            float32x4_t v31 = (double (*)(void))sub_1B69ACE78;
            if (!v15) {
              float32x4_t v31 = (double (*)(void))sub_1B69ACE90;
            }
            v641 = v31;
            uint64_t v32 = swift_allocObject();
            v33.n128_u64[0] = *(void *)(v4 + 8);
            *(void *)(v32 + 16) = v33.n128_u64[0];
            uint64_t v34 = v28;
            sub_1B69A64EC(v17, v624, v28, v641, v33, v35, v36);
            goto LABEL_34;
          case 2:
            uint64_t v34 = v28;
            sub_1B69A50AC(v17, v624, v28, (uint64_t)&v662, *(double *)v672.i64, v671.n128_f64[0], v19.n128_f64[0], v20, v21.n128_f64[0], v22, *(double *)v23.i64, v24);
            goto LABEL_38;
          case 3:
            uint64_t v34 = v28;
            sub_1B69A555C(v17, v624, v28, (uint64_t)&v662, v26, *(float *)(v4 + 8), *(float *)(v4 + 12), (float32x4_t)v19);
            goto LABEL_38;
          case 4:
            goto LABEL_27;
          case 5:
            uint64_t v34 = v28;
            sub_1B69A5FA0(v17, v624, v28, (uint64_t)&v662, v26, *(float *)(v4 + 8), *(float *)(v4 + 12), (float32x4_t)v19);
            goto LABEL_38;
          default:
            goto LABEL_23;
        }
      }
      uint64_t v29 = v4;
      v19.n128_u32[0] = *(_DWORD *)(v4 + 12);
      sub_1B69A5A2C(v17, v624, v28, (uint64_t)&v662, v26, v606, *(float *)(v4 + 8), (int32x4_t)v19);
    }
    float32x4_t v30 = v18;
    uint64_t v34 = v28;
LABEL_38:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v41 = *(void *)(v29 + 152);
    sub_1B6CEE8E8(v41, v680);
    sub_1B62AA520((uint64_t)v680, (uint64_t)v709, (unint64_t *)&unk_1EB97EFD0, (uint64_t)&type metadata for TextureCPURuntime);
    if (v714)
    {
      long long v666 = v711;
      long long v667 = v712;
      long long v668 = v713;
      *(void *)&long long v669 = v714;
      __n128 v662 = v709[0];
      int32x4_t v663 = (int32x4_t)v709[1];
      __n128 v664 = v709[2];
      long long v665 = v710;
      if (*((void *)&v710 + 1) != 2)
      {
        sub_1B66576EC(v680[0].i64);
        goto LABEL_82;
      }
      sub_1B6AFEFC8((uint64_t)&v662, *(unsigned char *)(v29 + 160), 1, (uint64_t)v681);
      sub_1B69ACDFC((uint64_t)v681, (uint64_t)v706, (unint64_t *)&qword_1E9DD6DC0, type metadata accessor for __vfx_sampler2d);
      if (v707.i64[1] == 1)
      {
        sub_1B66576EC(v680[0].i64);
        goto LABEL_245;
      }
      float32x4_t v703 = v707;
      uint64_t v704 = v708;
      float32x4_t v701 = v706[0];
      float32x4_t v702 = v706[1];
      uint64_t v629 = v34 - v7;
      swift_retain();
      uint64_t v643 = sub_1B62FC4C8(8 * (v34 - v7), 8);
      unint64_t v42 = sub_1B695E910(v41);
      uint64_t v43 = v34;
      if (*(unsigned char *)(v29 + 208) & 1) == 0 || (uint64_t v633 = sub_1B67A819C(), (v44))
      {
        if (v42 == 5)
        {
          if (v34 != v7)
          {
            uint64_t v52 = v7;
            uint64_t v53 = 0;
            float32x2_t v54 = *(float32x2_t *)(v29 + 176);
            float32x2_t v55 = *(float32x2_t *)(v29 + 192);
            do
            {
              if (((float (*)(float32x4_t *, double))v703.i64[1])(&v701, COERCE_DOUBLE(vadd_f32(v55, vmul_f32(v54, (float32x2_t)v30[v52])))) <= 0.0)*(void *)(v643 + 8 * v53++) = v52; {
              ++v52;
              }
            }
            while (v34 != v52);
            goto LABEL_71;
          }
        }
        else if (v34 != v7)
        {
          uint64_t v56 = v7;
          uint64_t v53 = 0;
          float32x2_t v57 = *(float32x2_t *)(v29 + 176);
          float32x2_t v58 = *(float32x2_t *)(v29 + 192);
          uint64_t v59 = v56;
          do
          {
            uint64_t v60 = v59++;
            ((void (*)(float32x4_t *, double))v703.i64[1])(&v701, COERCE_DOUBLE(vadd_f32(v58, vmul_f32(v57, (float32x2_t)v30[v60]))));
            switch((char)v42)
            {
              case 1:
                if (*(float *)&v61.i32[1] <= *((float *)&v42 + 1)) {
                  goto LABEL_66;
                }
                break;
              case 2:
                if (*(float *)&v61.i32[2] <= *((float *)&v42 + 1)) {
                  goto LABEL_66;
                }
                break;
              case 3:
                if (*(float *)&v61.i32[3] <= *((float *)&v42 + 1)) {
                  goto LABEL_66;
                }
                break;
              case 4:
                float v62 = 0.2126 * *(float *)v61.i32;
                v61.i32[0] = vextq_s8(v61, v61, 8uLL).u32[0];
                *(float32x2_t *)v61.i8 = vmul_f32(*(float32x2_t *)v61.i8, (float32x2_t)0x3F3717593D93DD98);
                *(float *)v61.i32 = *(float *)v61.i32 + (float)(v62 + *(float *)&v61.i32[1]);
                goto LABEL_65;
              default:
LABEL_65:
                if (*(float *)v61.i32 <= *((float *)&v42 + 1)) {
LABEL_66:
                }
                  *(void *)(v643 + 8 * v53++) = v60;
                break;
            }
            float32x2_t v27 = v617;
            uint64_t v34 = v43;
          }
          while (v43 != v59);
          goto LABEL_71;
        }
      }
      else if (v42 == 5)
      {
        uint64_t v45 = v34 - v7;
        if (v34 != v7)
        {
          float32x2_t v46 = *(float32x2_t *)(v29 + 176);
          float32x2_t v47 = *(float32x2_t *)(v29 + 192);
          float v48 = (_OWORD *)(v633 + 16 * v7);
          float32x4_t v49 = (float32x2_t *)&v30[v7];
          do
          {
            float32x2_t v50 = *v49++;
            *(double *)&long long v51 = ((double (*)(float32x4_t *, double))v703.i64[1])(&v701, COERCE_DOUBLE(vadd_f32(v47, vmul_f32(v46, v50))));
            *v48++ = v51;
            --v45;
          }
          while (v45);
        }
      }
      else if (v34 != v7)
      {
        uint64_t v591 = v7;
        uint64_t v53 = 0;
        float32x2_t v592 = *(float32x2_t *)(v29 + 176);
        float32x2_t v593 = *(float32x2_t *)(v29 + 192);
        uint64_t v594 = v591;
        float32x2_t v27 = v617;
        do
        {
          uint64_t v595 = v594++;
          ((void (*)(float32x4_t *, double))v703.i64[1])(&v701, COERCE_DOUBLE(vadd_f32(v593, vmul_f32(v592, (float32x2_t)v30[v595]))));
          switch((char)v42)
          {
            case 1:
              float v597 = *(float *)&v596.i32[1];
              break;
            case 2:
              float v597 = *(float *)&v596.i32[2];
              break;
            case 3:
              float v597 = *(float *)&v596.i32[3];
              break;
            case 4:
              v598.i32[1] = v596.i32[1];
              v598.i32[0] = vextq_s8(v596, v596, 8uLL).u32[0];
              float32x2_t v599 = vmul_f32(v598, (float32x2_t)0x3F3717593D93DD98);
              float v597 = v599.f32[0] + (float)((float)(0.2126 * *(float *)v596.i32) + v599.f32[1]);
              break;
            default:
              float v597 = *(float *)v596.i32;
              break;
          }
          if (v597 <= *((float *)&v42 + 1)) {
            *(void *)(v643 + 8 * v53++) = v595;
          }
          else {
            *(int8x16_t *)(v633 + 16 * v595) = v596;
          }
          uint64_t v34 = v43;
        }
        while (v43 != v594);
        goto LABEL_71;
      }
      uint64_t v53 = 0;
LABEL_71:
      uint64_t v63 = v27[1];
      v698.i64[0] = 0;
      float32x4_t v697 = 0u;
      float32x4_t v696 = 0u;
      v698.i8[8] = 5;
      if (v53 < 1)
      {
        swift_retain();
      }
      else
      {
        if (v53 == *(void *)(v63 + 240) - *(void *)(v63 + 232))
        {
          sub_1B639192C((uint64_t)&v696, (uint64_t)&v657);
          uint64_t v661 = 0;
          float32x4_t v660 = 0uLL;
        }
        else
        {
          sub_1B639192C((uint64_t)&v696, (uint64_t)&v657);
          v660.i64[0] = v643;
          v660.i64[1] = v629;
          uint64_t v661 = v53;
        }
        float v64 = *(void **)(v649 + 104);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v649 + 104) = v64;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          float v64 = sub_1B68C0C6C(0, v64[2] + 1, 1, v64);
          *(void *)(v649 + 104) = v64;
        }
        unint64_t v67 = v64[2];
        unint64_t v66 = v64[3];
        if (v67 >= v66 >> 1)
        {
          float v64 = sub_1B68C0C6C(v66 > 1, v67 + 1, 1, v64);
          *(void *)(v649 + 104) = v64;
        }
        _OWORD v64[2] = v67 + 1;
        unsigned __int32 v68 = (float32x4_t *)&v64[9 * v67];
        _OWORD v68[2] = v657;
        float32x4_t v69 = v658;
        float32x4_t v70 = v659;
        float32x4_t v71 = v660;
        v68[6].i64[0] = v661;
        v68[4] = v70;
        v68[5] = v71;
        v68[3] = v69;
      }
      sub_1B6391400((uint64_t)&v696);
      swift_release();
      swift_release();
      sub_1B66576EC(v680[0].i64);
      uint64_t v7 = v624;
    }
  }
LABEL_82:
  __n128 v72 = *(void **)(a2 + 8);
  sub_1B62E9D50(v72, (uint64_t)v682);
  sub_1B6372CD8(v72, (uint64_t)v683);
  sub_1B62AA520((uint64_t)v682, (uint64_t)&v657, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
  float32x4_t v73 = (float32x4_t)xmmword_1B6E4F2E0;
  float32x4_t v74 = (float32x4_t)xmmword_1B6E4F320;
  float32x4_t v75 = (float32x4_t)xmmword_1B6E4F300;
  v644.i32[3] = 0;
  int8x16_t v650 = (int8x16_t)xmmword_1B6E4F370;
  if ((v661 & 1) == 0)
  {
    float32x4_t v75 = v657;
    float32x4_t v74 = v658;
    float32x4_t v73 = v659;
  }
  *(double *)v76.i64 = sub_1B69A817C(v75, v74, v73);
  simd_float4 v627 = v76;
  sub_1B62AA520((uint64_t)v682, (uint64_t)&v701, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
  float32x4_t v77 = (float32x4_t)xmmword_1B6E4F2E0;
  float32x4_t v78 = (float32x4_t)xmmword_1B6E4F300;
  float32x4_t v79 = (float32x4_t)xmmword_1B6E4F320;
  if ((v705 & 1) == 0)
  {
    float32x4_t v78 = v701;
    float32x4_t v79 = v702;
    float32x4_t v77 = v703;
  }
  *(double *)v80.i64 = sub_1B69A82F8(v78, v79, v77);
  float32x4_t v637 = v80;
  int v604 = *(unsigned __int8 *)(a3 + 50);
  unint64_t v603 = (unint64_t)v72;
  if (v604 == 1)
  {
    v650.i64[0] = v29;
    uint64_t v81 = v34;
    sub_1B633C690((unint64_t)v72, 0, 0, 1, 0, 0, 1, 0, (uint64_t)v684, *(int32x2_t *)v80.f32, 0, 1);
    uint64_t v82 = v684[0];
    uint64_t v83 = v684[1];
    uint64_t v84 = v684[2];
    uint64_t v85 = v684[3];
    uint64_t v86 = v684[4];
    uint64_t v87 = v684[5];
    uint64_t v88 = v684[6];
    uint64_t v89 = v684[7];
    sub_1B69ACDFC((uint64_t)v684, (uint64_t)&v696, (unint64_t *)&qword_1EB97D810, type metadata accessor for simd_float4x4);
    if (v700)
    {
      float32x4_t v90 = (float32x4_t)xmmword_1B6E4F370;
      float32x4_t v91 = (float32x4_t)xmmword_1B6E4F2E0;
      float32x4_t v92 = (float32x4_t)xmmword_1B6E4F320;
      float32x4_t v93 = (float32x4_t)xmmword_1B6E4F300;
    }
    else
    {
      v93.i64[0] = v82;
      v93.i64[1] = v83;
      v92.i64[0] = v84;
      v92.i64[1] = v85;
      v91.i64[0] = v86;
      v91.i64[1] = v87;
      v90.i64[0] = v88;
      v90.i64[1] = v89;
    }
    uint64_t v99 = v621;
    uint64_t v98 = v623;
    uint64_t v7 = v624;
    float32x2_t v27 = v617;
    uint64_t v34 = v81;
    uint64_t v29 = v650.i64[0];
  }
  else
  {
    *(double *)v94.i64 = sub_1B6335378();
    float32x4_t v613 = v94;
    float32x4_t v615 = v95;
    float32x4_t v609 = v97;
    float32x4_t v611 = v96;
    sub_1B62AA520((uint64_t)v682, (uint64_t)&v696, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
    uint64_t v98 = v623;
    if (v700)
    {
      uint64_t v99 = v9;
      float32x4_t v93 = v613;
      float32x4_t v92 = v615;
      float32x4_t v90 = v609;
      float32x4_t v91 = v611;
    }
    else
    {
      float32x4_t v93 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v613, v696.f32[0]), v615, *(float32x2_t *)v696.f32, 1), v611, v696, 2), v609, v696, 3);
      float32x4_t v92 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v613, v697.f32[0]), v615, *(float32x2_t *)v697.f32, 1), v611, v697, 2), v609, v697, 3);
      float32x4_t v91 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v613, v698.f32[0]), v615, *(float32x2_t *)v698.f32, 1), v611, v698, 2), v609, v698, 3);
      float32x4_t v90 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v613, v699.f32[0]), v615, *(float32x2_t *)v699.f32, 1), v611, v699, 2), v609, v699, 3);
      uint64_t v99 = v9;
    }
  }
  int32x4_t v100 = (int32x4_t)vmulq_f32(v93, v93);
  float32x4_t v101 = vmulq_f32(v92, v92);
  int32x4_t v102 = (int32x4_t)vmulq_f32(v91, v91);
  int32x4_t v103 = vzip2q_s32(v100, v102);
  float32x4_t v104 = (float32x4_t)vzip1q_s32(vzip1q_s32(v100, v102), (int32x4_t)v101);
  float32x4_t v105 = (float32x4_t)vtrn2q_s32(v100, (int32x4_t)v101);
  v105.i32[2] = v102.i32[1];
  float32x4_t v106 = vaddq_f32((float32x4_t)vzip1q_s32(v103, vdupq_laneq_s32((int32x4_t)v101, 2)), vaddq_f32(v104, v105));
  v101.i64[0] = 0x80000000800000;
  v101.i64[1] = 0x80000000800000;
  int32x4_t v107 = vcgeq_f32(v101, v106);
  v106.i32[3] = 0;
  float32x4_t v108 = vrsqrteq_f32(v106);
  float32x4_t v109 = vmulq_f32(v108, vrsqrtsq_f32(v106, vmulq_f32(v108, v108)));
  int32x4_t v110 = v107;
  v110.i32[3] = 0;
  float32x4_t v111 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v110), (int8x16_t)v106, (int8x16_t)vmulq_f32(v109, vrsqrtsq_f32(v106, vmulq_f32(v109, v109))));
  float32x4_t v112 = vmulq_n_f32(v93, v111.f32[0]);
  float32x4_t v113 = vmulq_lane_f32(v92, *(float32x2_t *)v111.f32, 1);
  float32x4_t v114 = vmulq_laneq_f32(v91, v111, 2);
  int8x16_t v115 = (int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114);
  int8x16_t v116 = (int8x16_t)vuzp1q_s32((int32x4_t)v113, (int32x4_t)v113);
  int32x4_t v117 = (int32x4_t)v112;
  if (v107.i32[0])
  {
    int32x4_t v118 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v115, (int8x16_t)v114, 0xCuLL), vnegq_f32(v113)), v114, (float32x4_t)vextq_s8(v116, (int8x16_t)v113, 0xCuLL));
    int32x4_t v117 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v118, v118), (int8x16_t)v118, 0xCuLL);
  }
  int8x16_t v119 = (int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112);
  float32x4_t v120 = v113;
  if (v107.i32[1])
  {
    int32x4_t v121 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v119, (int8x16_t)v112, 0xCuLL), vnegq_f32(v114)), v112, (float32x4_t)vextq_s8(v115, (int8x16_t)v114, 0xCuLL));
    float32x4_t v120 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v121, v121), (int8x16_t)v121, 0xCuLL);
  }
  if (v107.i32[2])
  {
    int32x4_t v122 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v116, (int8x16_t)v113, 0xCuLL), vnegq_f32(v112)), v113, (float32x4_t)vextq_s8(v119, (int8x16_t)v112, 0xCuLL));
    float32x4_t v114 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v122, v122), (int8x16_t)v122, 0xCuLL);
  }
  float v123 = (float)(*(float *)v117.i32 + v120.f32[1]) + v114.f32[2];
  float32x4_t v614 = v93;
  float32x4_t v616 = v92;
  float32x4_t v610 = v90;
  float32x4_t v612 = v91;
  if (v123 > 0.0)
  {
    float32x4_t v124 = (float32x4_t)vzip2q_s32((int32x4_t)v120, vuzp1q_s32((int32x4_t)v120, (int32x4_t)v114));
    v124.i32[2] = v117.i32[1];
    float v125 = sqrtf(v123 + 1.0);
    float32x4_t v126 = (float32x4_t)vtrn2q_s32((int32x4_t)v114, vzip2q_s32((int32x4_t)v114, v117));
    v126.i32[2] = v120.i32[0];
    float32x4_t v127 = vsubq_f32(v124, v126);
    v124.f32[3] = v125;
    v126.f32[3] = v125;
    float32x4_t v128 = vmulq_f32(v124, v126);
    v127.i32[3] = v128.i32[3];
    float32x4_t v634 = v127;
LABEL_102:
    v128.f32[0] = 0.5 / v125;
    float32x4_t v630 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 0);
    goto LABEL_111;
  }
  if (*(float *)v117.i32 < v120.f32[1] || *(float *)v117.i32 < v114.f32[2])
  {
    if (v120.f32[1] <= v114.f32[2])
    {
      float v125 = sqrtf((float)((float)(v114.f32[2] + 1.0) - *(float *)v117.i32) - v120.f32[1]);
      *(float32x2_t *)v199.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v117, (int32x4_t)v120), *(float32x2_t *)v114.f32);
      float32x2_t v200 = (float32x2_t)__PAIR64__(v117.u32[1], LODWORD(v125));
      float32x2_t v201 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v120.f32, 0);
      *(float32x2_t *)v128.f32 = vsub_f32(*(float32x2_t *)v117.i8, v201);
      v201.f32[0] = v125;
      v200.i32[0] = vmul_f32(v200, v201).u32[0];
      v200.i32[1] = v128.i32[1];
      *(float32x2_t *)&v199.u32[2] = v200;
      float32x4_t v634 = v199;
      goto LABEL_102;
    }
    float v133 = sqrtf((float)((float)(v120.f32[1] + 1.0) - *(float *)v117.i32) - v114.f32[2]);
    *(int32x2_t *)v113.f32 = vdup_laneq_s32((int32x4_t)v120, 2);
    int8x16_t v130 = (int8x16_t)v113;
    *(float *)v130.i32 = v133;
    v130.i32[0] = vmul_f32(*(float32x2_t *)v130.i8, (float32x2_t)__PAIR64__(v114.u32[1], LODWORD(v133))).u32[0];
    v130.i32[1] = vadd_f32(*(float32x2_t *)&v113, *(float32x2_t *)&v114).i32[1];
    int8x16_t v131 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.i8, 1), v120);
    int32x2_t v139 = (int32x2_t)vsubq_f32(v114, (float32x4_t)vdupq_laneq_s32(v117, 2)).u64[0];
    int8x16_t v132 = vextq_s8(vextq_s8(v131, v131, 4uLL), v130, 0xCuLL);
    v132.i32[3] = v139.i32[0];
    float32x4_t v630 = (float32x4_t)v132;
  }
  else
  {
    float v133 = sqrtf((float)((float)(*(float *)v117.i32 + 1.0) - v120.f32[1]) - v114.f32[2]);
    float32x2_t v134 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v120.f32, 0);
    float32x2_t v135 = vadd_f32(*(float32x2_t *)v117.i8, v134);
    v134.f32[0] = v133;
    v136.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v117.u32[1], LODWORD(v133)), v134).u32[0];
    v136.i32[1] = v135.i32[1];
    float32x2_t v137 = (float32x2_t)vzip2q_s32(v117, (int32x4_t)v120).u64[0];
    LODWORD(v138) = vadd_f32(v137, *(float32x2_t *)v114.f32).u32[0];
    int32x2_t v139 = (int32x2_t)vsub_f32(v137, *(float32x2_t *)v114.f32);
    HIDWORD(v138) = v139.i32[1];
    v136.i64[1] = v138;
    float32x4_t v630 = v136;
  }
  *(float *)v139.i32 = 0.5 / v133;
  float32x4_t v634 = (float32x4_t)vdupq_lane_s32(v139, 0);
LABEL_111:
  sub_1B67599F4(v29 + 48, (uint64_t)v716);
  sub_1B67599F4((uint64_t)v716, (uint64_t)&v717);
  if (v718 < 2u)
  {
    uint64_t v142 = v34 - v7;
    if (v34 != v7)
    {
      uint64_t v143 = (simd_float4 *)&v98[2 * v7];
      do
      {
        *v143++ = v627;
        --v142;
      }
      while (v142);
    }
    goto LABEL_145;
  }
  if (v717 == 0) {
    goto LABEL_145;
  }
  if (!((unint64_t)v717 ^ 1 | *((void *)&v717 + 1)))
  {
    sub_1B62AA520((uint64_t)v683, (uint64_t)v694, &qword_1EB97F810, (uint64_t)&type metadata for LastFrameWorldTransform);
    if (v695) {
      goto LABEL_145;
    }
    float32x4_t v644 = (float32x4_t)v694[1];
    int8x16_t v650 = (int8x16_t)v694[0];
    float32x4_t v625 = (float32x4_t)v694[3];
    simd_float4 v627 = (simd_float4)v694[2];
    sub_1B62AA520((uint64_t)v682, (uint64_t)&v689, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
    if (v693) {
      goto LABEL_145;
    }
    uint64_t v146 = v34 - v7;
    if (v34 == v7) {
      goto LABEL_145;
    }
    float32x4_t v148 = v690;
    float32x4_t v147 = v691;
    float32x4_t v149 = v689;
    int32x4_t v150 = (int32x4_t)vmulq_f32(v149, v149);
    float32x4_t v151 = vmulq_f32(v148, v148);
    int32x4_t v152 = (int32x4_t)vmulq_f32(v147, v147);
    int32x4_t v153 = vzip2q_s32(v150, v152);
    float32x4_t v154 = (float32x4_t)vzip1q_s32(vzip1q_s32(v150, v152), (int32x4_t)v151);
    float32x4_t v155 = (float32x4_t)vtrn2q_s32(v150, (int32x4_t)v151);
    v155.i32[2] = v152.i32[1];
    float32x4_t v156 = vaddq_f32((float32x4_t)vzip1q_s32(v153, vdupq_laneq_s32((int32x4_t)v151, 2)), vaddq_f32(v154, v155));
    v151.i64[0] = 0x80000000800000;
    v151.i64[1] = 0x80000000800000;
    int32x4_t v157 = vcgeq_f32(v151, v156);
    v156.i32[3] = 0;
    float32x4_t v158 = vrsqrteq_f32(v156);
    float32x4_t v159 = vmulq_f32(v158, vrsqrtsq_f32(v156, vmulq_f32(v158, v158)));
    int32x4_t v160 = v157;
    v160.i32[3] = 0;
    float32x4_t v161 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v160), (int8x16_t)v156, (int8x16_t)vmulq_f32(v159, vrsqrtsq_f32(v156, vmulq_f32(v159, v159))));
    float32x4_t v162 = vmulq_n_f32(v689, v161.f32[0]);
    float32x4_t v163 = vmulq_lane_f32(v690, *(float32x2_t *)v161.f32, 1);
    float32x4_t v164 = vmulq_laneq_f32(v691, v161, 2);
    int32x4_t v165 = vuzp1q_s32((int32x4_t)v164, (int32x4_t)v164);
    int8x16_t v166 = (int8x16_t)vuzp1q_s32((int32x4_t)v163, (int32x4_t)v163);
    int32x4_t v167 = (int32x4_t)v162;
    if (v157.i32[0])
    {
      int32x4_t v168 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v165, (int8x16_t)v164, 0xCuLL), vnegq_f32(v163)), v164, (float32x4_t)vextq_s8(v166, (int8x16_t)v163, 0xCuLL));
      int32x4_t v167 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v168, v168), (int8x16_t)v168, 0xCuLL);
    }
    int32x4_t v169 = vuzp1q_s32((int32x4_t)v162, (int32x4_t)v162);
    float32x4_t v170 = v163;
    if (v157.i32[1])
    {
      float32x4_t v144 = vnegq_f32(v164);
      int32x4_t v165 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v162, 0xCuLL), v144), v162, (float32x4_t)vextq_s8((int8x16_t)v165, (int8x16_t)v164, 0xCuLL));
      float32x4_t v170 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v165, v165), (int8x16_t)v165, 0xCuLL);
    }
    if (v157.i32[2])
    {
      int32x4_t v157 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v166, (int8x16_t)v163, 0xCuLL), vnegq_f32(v162)), v163, (float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v162, 0xCuLL));
      float32x4_t v164 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v157, v157), (int8x16_t)v157, 0xCuLL);
    }
    float v171 = (float)(*(float *)v167.i32 + v170.f32[1]) + v164.f32[2];
    if (v171 > 0.0)
    {
      float32x4_t v172 = (float32x4_t)vzip2q_s32((int32x4_t)v170, vuzp1q_s32((int32x4_t)v170, (int32x4_t)v164));
      v172.i32[2] = v167.i32[1];
      float v173 = sqrtf(v171 + 1.0);
      float32x4_t v174 = (float32x4_t)vtrn2q_s32((int32x4_t)v164, vzip2q_s32((int32x4_t)v164, v167));
      v174.i32[2] = v170.i32[0];
      float32x4_t v176 = vsubq_f32(v172, v174);
      v172.f32[3] = v173;
      v174.f32[3] = v173;
      float32x4_t v175 = vmulq_f32(v172, v174);
      v176.i32[3] = v175.i32[3];
LABEL_129:
      v175.f32[0] = 0.5 / v173;
      float32x4_t v177 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v175.f32, 0);
      goto LABEL_143;
    }
    if (*(float *)v167.i32 < v170.f32[1] || *(float *)v167.i32 < v164.f32[2])
    {
      if (v170.f32[1] <= v164.f32[2])
      {
        float v173 = sqrtf((float)((float)(v164.f32[2] + 1.0) - *(float *)v167.i32) - v170.f32[1]);
        *(float32x2_t *)v176.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v167, (int32x4_t)v170), *(float32x2_t *)v164.f32);
        float32x2_t v600 = (float32x2_t)__PAIR64__(v167.u32[1], LODWORD(v173));
        float32x2_t v601 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v170.f32, 0);
        *(float32x2_t *)v175.f32 = vsub_f32(*(float32x2_t *)v167.i8, v601);
        v601.f32[0] = v173;
        v601.i32[0] = vmul_f32(v600, v601).u32[0];
        v601.i32[1] = v175.i32[1];
        *(float32x2_t *)&v176.u32[2] = v601;
        goto LABEL_129;
      }
      float v205 = sqrtf((float)((float)(v170.f32[1] + 1.0) - *(float *)v167.i32) - v164.f32[2]);
      *(int32x2_t *)v157.i8 = vdup_laneq_s32((int32x4_t)v170, 2);
      int8x16_t v203 = (int8x16_t)v157;
      *(float *)v203.i32 = v205;
      v203.i32[0] = vmul_f32(*(float32x2_t *)v203.i8, (float32x2_t)__PAIR64__(v164.u32[1], LODWORD(v205))).u32[0];
      v203.i32[1] = vadd_f32(*(float32x2_t *)&v157, *(float32x2_t *)&v164).i32[1];
      int8x16_t v204 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.i8, 1), v170);
      int32x2_t v210 = (int32x2_t)vsubq_f32(v164, (float32x4_t)vdupq_laneq_s32(v167, 2)).u64[0];
      float32x4_t v177 = (float32x4_t)vextq_s8(vextq_s8(v204, v204, 4uLL), v203, 0xCuLL);
      v177.i32[3] = v210.i32[0];
    }
    else
    {
      float v205 = sqrtf((float)((float)(*(float *)v167.i32 + 1.0) - v170.f32[1]) - v164.f32[2]);
      float32x2_t v206 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v170.f32, 0);
      float32x2_t v207 = vadd_f32(*(float32x2_t *)v167.i8, v206);
      v206.f32[0] = v205;
      v177.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v167.u32[1], LODWORD(v205)), v206).u32[0];
      v177.i32[1] = v207.i32[1];
      float32x2_t v208 = (float32x2_t)vzip2q_s32(v167, (int32x4_t)v170).u64[0];
      LODWORD(v209) = vadd_f32(v208, *(float32x2_t *)v164.f32).u32[0];
      int32x2_t v210 = (int32x2_t)vsub_f32(v208, *(float32x2_t *)v164.f32);
      HIDWORD(v209) = v210.i32[1];
      v177.i64[1] = v209;
    }
    *(float *)v210.i32 = 0.5 / v205;
    float32x4_t v176 = (float32x4_t)vdupq_lane_s32(v210, 0);
LABEL_143:
    float32x4_t v211 = v692;
    float32x4_t v212 = vmulq_f32(v176, v177);
    float32x4_t v213 = vmulq_f32(v212, (float32x4_t)xmmword_1B6E4F550);
    int8x16_t v214 = (int8x16_t)vmulq_f32(v212, v212);
    *(float32x2_t *)v214.i8 = vadd_f32(*(float32x2_t *)v214.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL));
    v214.i32[0] = vadd_f32(*(float32x2_t *)v214.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v214.i8, 1)).u32[0];
    float32x2_t v215 = vrecpe_f32((float32x2_t)v214.u32[0]);
    float32x2_t v216 = vmul_f32(v215, vrecps_f32((float32x2_t)v214.u32[0], v215));
    float32x4_t v217 = vmulq_n_f32(v213, vmul_f32(v216, vrecps_f32((float32x2_t)v214.u32[0], v216)).f32[0]);
    float32x4_t v218 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v217, (int32x4_t)v217), (int8x16_t)v217, 0xCuLL);
    float32x4_t v219 = vnegq_f32(v217);
    int v220 = (float32x4_t *)&v98[2 * v7];
    uint64_t v221 = (float32x4_t *)&v99[2 * v7];
    do
    {
      float32x4_t v222 = *v221++;
      float32x4_t v223 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v625, (float32x4_t)v627, v222, 2), v644, *(float32x2_t *)v222.f32, 1), (float32x4_t)v650, v222.f32[0]);
      v223.i32[3] = v145;
      float32x4_t v224 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v211, v147, v222, 2), v148, *(float32x2_t *)v222.f32, 1), v149, v222.f32[0]);
      v224.i32[3] = v144.i32[3];
      float32x4_t v144 = vsubq_f32(v224, v223);
      float32x4_t v225 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v144, (int32x4_t)v144), (int8x16_t)v144, 0xCuLL), v219), v144, v218);
      int32x4_t v226 = (int32x4_t)vaddq_f32(v225, v225);
      float32x4_t v227 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v226, v226), (int8x16_t)v226, 0xCuLL);
      __int32 v228 = v169.i32[3];
      int32x4_t v169 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v227, (int32x4_t)v227), (int8x16_t)v227, 0xCuLL), v219), v227, v218);
      float32x4_t v229 = vaddq_f32(vaddq_f32(v144, vmulq_laneq_f32(v227, v217, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v169, v169), (int8x16_t)v169, 0xCuLL));
      v229.i32[3] = v165.i32[3];
      __int32 v145 = v223.i32[3];
      v144.i32[3] = v224.i32[3];
      v169.i32[3] = v228;
      *v220++ = v229;
      --v146;
    }
    while (v146);
    goto LABEL_145;
  }
  uint64_t v178 = v34 - v7;
  if (v34 != v7)
  {
    uint64_t v179 = *(void *)(a3 + 24);
    uint64_t v180 = *(void *)(a3 + 32);
    uint64_t v181 = (float32x4_t *)&v98[2 * v7];
    v182.i64[0] = 0xBF000000BF000000;
    v182.i64[1] = 0xBF000000BF000000;
    uint64_t v184 = *(void *)(a3 + 8);
    uint64_t v183 = *(void *)(a3 + 16);
    do
    {
      uint64_t v185 = v184 ^ v179;
      uint64_t v186 = v183 ^ v180;
      uint64_t v187 = v185 ^ v183;
      uint64_t v188 = v184 ^ v186;
      uint64_t v189 = v185 ^ (v183 << 17) ^ v188;
      uint64_t v190 = v189 ^ v187;
      uint64_t v191 = __ROR8__(v186, 19);
      uint64_t v192 = v187 ^ v191 ^ v188;
      v141.f32[0] = (float)((9 * ((((unint64_t)(5 * v183) >> 32) >> 25) | (640 * v183))) & 0xFFFFFF)
                  * 0.000000059605;
      v141.f32[1] = (float)((9 * ((((unint64_t)(5 * v187) >> 32) >> 25) | (640 * v187))) & 0xFFFFFF)
                  * 0.000000059605;
      v141.f32[2] = (float)((9
                           * ((((5 * (v189 ^ (unint64_t)v187)) >> 32) >> 25) | (640 * (v189 ^ v187)))) & 0xFFFFFF)
                  * 0.000000059605;
      float32x4_t v193 = vaddq_f32(v141, v182);
      int32x4_t v194 = (int32x4_t)vmulq_f32(v193, v193);
      uint64_t v195 = v189 ^ (v187 << 17) ^ v192;
      uint64_t v196 = __ROR8__(v187 ^ v191, 19);
      v194.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v194, 2), vadd_f32(*(float32x2_t *)v194.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v194.i8, 1))).u32[0];
      uint64_t v183 = v195 ^ v190;
      uint64_t v184 = v190 ^ v196 ^ v192;
      float32x2_t v197 = vrsqrte_f32((float32x2_t)v194.u32[0]);
      float32x2_t v198 = vmul_f32(v197, vrsqrts_f32((float32x2_t)v194.u32[0], vmul_f32(v197, v197)));
      uint64_t v179 = v195 ^ (v190 << 17);
      float32x4_t v141 = vmulq_n_f32(v193, vmul_f32(v198, vrsqrts_f32((float32x2_t)v194.u32[0], vmul_f32(v198, v198))).f32[0]);
      uint64_t v180 = __ROR8__(v190 ^ v196, 19);
      v141.i32[3] = v140;
      *v181++ = v141;
      --v178;
    }
    while (v178);
    *(void *)(a3 + 8) = v184;
    *(void *)(a3 + 16) = v183;
    *(void *)(a3 + 24) = v179;
    *(void *)(a3 + 32) = v180;
  }
LABEL_145:
  uint64_t v230 = sub_1B6345A6C();
  if ((v231 & 1) == 0)
  {
    uint64_t v232 = v34 - v624;
    if (v34 != v624)
    {
      char v233 = (float32x2_t *)&v98[2 * v624];
      uint64_t v234 = (float32x2_t *)&v621[2 * v624];
      uint64_t v235 = v230 + 16 * v624;
      do
      {
        v235 += 16;
        sub_1B6E32178();
        float32x4_t v236 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v654, COERCE_FLOAT(*(_OWORD *)v234->f32)), v655, *v234, 1), v656, *(float32x4_t *)v234->f32, 2);
        v236.i32[3] = v644.i32[3];
        *(float32x4_t *)v234->f32 = v236;
        v234 += 2;
        float32x4_t v237 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v654, COERCE_FLOAT(*(_OWORD *)v233->f32)), v655, *v233, 1), v656, *(float32x4_t *)v233->f32, 2);
        v237.i32[3] = v650.i32[3];
        *(float32x4_t *)v233->f32 = v237;
        v233 += 2;
        int8x16_t v650 = (int8x16_t)v237;
        --v232;
      }
      while (v232);
    }
  }
  float32x4_t v626 = vmulq_f32(v634, v630);
  sub_1B62AA520(v29 + 80, (uint64_t)v715, &qword_1EB97DE80, (uint64_t)&type metadata for EmitterShape.Direction);
  sub_1B62AA520((uint64_t)v715, (uint64_t)v723, &qword_1EB97DE80, (uint64_t)&type metadata for EmitterShape.Direction);
  if (v723[16] != 255)
  {
    sub_1B67599F4((uint64_t)v723, (uint64_t)v724);
    uint64_t v241 = sub_1B6345A6C();
    if ((v242 & 1) == 0)
    {
      uint64_t v243 = v34 - v624;
      if (v34 != v624)
      {
        _S8 = v626.i32[3];
        float32x4_t v645 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v626, 3);
        float32x4_t v631 = vnegq_f32(v626);
        float32x4_t v634 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v626, (int32x4_t)v626), (int8x16_t)v626, 0xCuLL);
        unsigned int v245 = (float32x4_t *)(v241 + 16 * v624);
        char v246 = (float32x4_t *)&v623[2 * v624];
        __asm { FMOV            V0.4S, #1.0 }
        int8x16_t v602 = _Q0;
        do
        {
          sub_1B67599F4((uint64_t)v724, (uint64_t)&v725);
          if (v726 < 2u)
          {
            float32x4_t v251 = v637;
          }
          else
          {
            if (v725 == 0)
            {
              if (v618 && ((1 << SLOBYTE(v606)) & 0x15) != 0)
              {
                float32x4_t v278 = vmulq_f32(*v246, *v246);
                v278.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v278, 2), vaddq_f32(v278, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v278.f32, 1))).u64[0];
                float32x4_t v279 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v278.f32, 0);
                v279.i32[3] = 0;
                float32x4_t v280 = vrsqrteq_f32(v279);
                float32x4_t v281 = vmulq_f32(v280, vrsqrtsq_f32(v279, vmulq_f32(v280, v280)));
                int8x16_t v282 = (int8x16_t)vmulq_f32(v281, vrsqrtsq_f32(v279, vmulq_f32(v281, v281)));
                int32x4_t v283 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v278.f32[0] != 0.0)), 0x1FuLL));
                v283.i32[3] = 0;
                int8x16_t v284 = v602;
                float32x4_t v290 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v283), v282, v602);
                float32x4_t v285 = vmulq_f32(*v246, v290);
                v284.i32[0] = v285.i32[2];
                v253.i32[0] = 1.0;
                v288.i64[0] = 0x8000000080000000;
                v288.i64[1] = 0x8000000080000000;
                float v286 = *(float *)vbslq_s8(v288, v253, v284).i32;
                *(float *)v288.i32 = v285.f32[1] / (float)(fabsf(v285.f32[2]) + 1.0);
                float v287 = vmuls_lane_f32(*(float *)v288.i32, *(float32x2_t *)v285.f32, 1);
                *(float *)v288.i32 = -(float)(v285.f32[0] * *(float *)v288.i32);
                float v289 = v285.f32[2] + (float)(v286 * v287);
                v290.f32[0] = v286 * *(float *)v288.i32;
                float v291 = 1.0 - v287;
                float v292 = vmuls_lane_f32(-v286, *(float32x2_t *)v285.f32, 1);
                float v293 = v285.f32[2] + (float)(v289 + v291);
                if (v293 > 0.0)
                {
                  float32x2_t v294 = (float32x2_t)vrev64_s32(*(int32x2_t *)v285.f32);
                  *(int32x2_t *)v298.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v285.f32, *(float32x2_t *)v285.f32), 0);
                  v298.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v294.u32[1], LODWORD(v292)), v294).u32[0];
                  float32x2_t v295 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v293 + 1.0)), v290.u32[0]);
                  float32x2_t v296 = vmul_f32(v295, v295);
                  v295.i32[0] = v288.i32[0];
                  unsigned __int32 v297 = vsub_f32(*(float32x2_t *)v290.f32, v295).u32[0];
                  v288.i32[1] = v296.i32[1];
                  v298.i64[1] = v288.i64[0];
                  *(float *)v288.i32 = 0.5 / v295.f32[1];
                  goto LABEL_164;
                }
                if (v289 >= v291 && v289 >= v285.f32[2])
                {
                  float v360 = sqrtf((float)((float)(v289 + 1.0) - v291) - v285.f32[2]);
                  v299.f32[0] = v360 * v360;
                  v299.f32[1] = *(float *)v288.i32 + v290.f32[0];
                  int32x2_t v361 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v292), v285.u32[0]), *(float32x2_t *)v285.f32);
                  goto LABEL_190;
                }
                if (v291 <= v285.f32[2])
                {
                  float v364 = sqrtf((float)((float)(v285.f32[2] + 1.0) - v289) - v291);
                  v285.i32[0] = vsubq_f32(v285, v285).u32[0];
                  v298.f32[1] = v285.f32[1] + v292;
                  v298.f32[2] = v364 * v364;
                  v298.f32[3] = v290.f32[0] - *(float *)v288.i32;
                  *(float *)v288.i32 = 0.5 / v364;
LABEL_164:
                  float32x4_t v299 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v288.i8, 0);
                }
                else
                {
                  float v360 = sqrtf((float)((float)(v291 + 1.0) - v289) - v285.f32[2]);
                  v299.f32[0] = *(float *)v288.i32 + v290.f32[0];
                  float32x2_t v354 = (float32x2_t)vrev64_s32(*(int32x2_t *)v285.f32);
                  v299.f32[1] = v360 * v360;
                  int32x2_t v361 = (int32x2_t)vadd_f32(v354, (float32x2_t)__PAIR64__(v354.u32[1], LODWORD(v292)));
LABEL_190:
                  *(int32x2_t *)&v299.u32[2] = v361;
                  *(float *)v361.i32 = 0.5 / v360;
                  float32x4_t v298 = (float32x4_t)vdupq_lane_s32(v361, 0);
                }
                _Q0 = (simd_float4)vmulq_f32(v298, v299);
                int32x4_t v362 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL), v631), (float32x4_t)_Q0, v634);
                float32x4_t v251 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v626, (float32x4_t)_Q0, 3), v645, (float32x4_t)_Q0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v362, v362), (int8x16_t)v362, 0xCuLL));
                _Q1 = (int32x4_t)vmulq_f32(v626, (float32x4_t)_Q0);
                _Q3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.i8, 1);
                _Q4 = (int8x16_t)vdupq_laneq_s32(_Q1, 2);
                __asm { FMLA            S1, S8, V0.S[3] }
                v251.i32[3] = _Q1.i32[0];
                goto LABEL_154;
              }
              v252.i32[0] = 0;
              float32x4_t v300 = *v246;
              float32x4_t v301 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v300, (int32x4_t)v300), *(int8x16_t *)v246, 0xCuLL);
              int32x4_t v302 = (int32x4_t)vmlaq_f32(vmulq_f32(v301, (float32x4_t)xmmword_1B6E99E00), (float32x4_t)xmmword_1B6E4F340, *v246);
              _Q0 = (simd_float4)vextq_s8((int8x16_t)vuzp1q_s32(v302, v302), (int8x16_t)v302, 0xCuLL);
              float32x4_t v303 = vabsq_f32((float32x4_t)_Q0);
              _Q0.i32[3] = v607;
              v304.i64[0] = 0x3400000034000000;
              v304.i64[1] = 0x3400000034000000;
              int32x4_t v305 = vcgeq_f32(v304, v303);
              v305.i32[3] = v305.i32[2];
              v305.i32[0] = vminvq_u32((uint32x4_t)v305);
              int8x16_t v306 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v252, v305), 0);
              int8x16_t v307 = (int8x16_t)xmmword_1B6E4F300;
              v307.i32[3] = v650.i32[3];
              float32x4_t v308 = (float32x4_t)vbslq_s8(v306, v307, (int8x16_t)_Q0);
              int32x4_t v309 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v308, (int32x4_t)v308), (int8x16_t)v308, 0xCuLL), vnegq_f32(*v246)), v308, v301);
              float32x4_t v310 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v309, v309), (int8x16_t)v309, 0xCuLL);
              float32x4_t v311 = v310;
              v311.i32[3] = v608;
              int32x4_t v312 = (int32x4_t)vmulq_f32(v308, v308);
              int32x4_t v313 = (int32x4_t)vmulq_f32(v311, v311);
              int32x4_t v314 = (int32x4_t)vmulq_f32(v300, v300);
              int32x4_t v315 = vzip2q_s32(v312, v314);
              float32x4_t v316 = (float32x4_t)vzip1q_s32(vzip1q_s32(v312, v314), v313);
              float32x4_t v317 = (float32x4_t)vtrn2q_s32(v312, v313);
              v317.i32[2] = v314.i32[1];
              float32x4_t v318 = vaddq_f32((float32x4_t)vzip1q_s32(v315, vdupq_laneq_s32(v313, 2)), vaddq_f32(v316, v317));
              v317.i64[0] = 0x80000000800000;
              v317.i64[1] = 0x80000000800000;
              int32x4_t v319 = vcgeq_f32(v317, v318);
              v318.i32[3] = 0;
              float32x4_t v320 = vrsqrteq_f32(v318);
              float32x4_t v321 = vmulq_f32(v320, vrsqrtsq_f32(v318, vmulq_f32(v320, v320)));
              int32x4_t v322 = v319;
              v322.i32[3] = 0;
              float32x4_t v323 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v322), (int8x16_t)v318, (int8x16_t)vmulq_f32(v321, vrsqrtsq_f32(v318, vmulq_f32(v321, v321))));
              float32x4_t v324 = vmulq_n_f32(v308, v323.f32[0]);
              float32x4_t v325 = vmulq_lane_f32(v310, *(float32x2_t *)v323.f32, 1);
              float32x4_t v326 = vmulq_laneq_f32(*v246, v323, 2);
              int8x16_t v327 = (int8x16_t)vuzp1q_s32((int32x4_t)v326, (int32x4_t)v326);
              int8x16_t v328 = (int8x16_t)vuzp1q_s32((int32x4_t)v325, (int32x4_t)v325);
              int32x4_t v329 = (int32x4_t)v324;
              if (v319.i32[0])
              {
                int32x4_t v330 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v327, (int8x16_t)v326, 0xCuLL), vnegq_f32(v325)), v326, (float32x4_t)vextq_s8(v328, (int8x16_t)v325, 0xCuLL));
                int32x4_t v329 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v330, v330), (int8x16_t)v330, 0xCuLL);
              }
              int8x16_t v331 = (int8x16_t)vuzp1q_s32((int32x4_t)v324, (int32x4_t)v324);
              float32x4_t v332 = v325;
              if (v319.i32[1])
              {
                int32x4_t v333 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v331, (int8x16_t)v324, 0xCuLL), vnegq_f32(v326)), v324, (float32x4_t)vextq_s8(v327, (int8x16_t)v326, 0xCuLL));
                float32x4_t v332 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v333, v333), (int8x16_t)v333, 0xCuLL);
              }
              if (v319.i32[2])
              {
                int32x4_t v334 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v328, (int8x16_t)v325, 0xCuLL), vnegq_f32(v324)), v325, (float32x4_t)vextq_s8(v331, (int8x16_t)v324, 0xCuLL));
                float32x4_t v326 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v334, v334), (int8x16_t)v334, 0xCuLL);
              }
              float v335 = (float)(*(float *)v329.i32 + v332.f32[1]) + v326.f32[2];
              if (v335 > 0.0)
              {
                float v336 = sqrtf(v335 + 1.0);
                float32x4_t v337 = (float32x4_t)vzip2q_s32((int32x4_t)v332, vuzp1q_s32((int32x4_t)v332, (int32x4_t)v326));
                v337.i32[2] = v329.i32[1];
                float32x4_t v338 = (float32x4_t)vtrn2q_s32((int32x4_t)v326, vzip2q_s32((int32x4_t)v326, v329));
                v338.i32[2] = v332.i32[0];
                float32x4_t v340 = vsubq_f32(v337, v338);
                v337.f32[3] = v336;
                v338.f32[3] = v336;
                float32x4_t v339 = vmulq_f32(v337, v338);
                v340.i32[3] = v339.i32[3];
                goto LABEL_188;
              }
              if (*(float *)v329.i32 < v332.f32[1] || *(float *)v329.i32 < v326.f32[2])
              {
                if (v332.f32[1] <= v326.f32[2])
                {
                  float v336 = sqrtf((float)((float)(v326.f32[2] + 1.0) - *(float *)v329.i32) - v332.f32[1]);
                  float32x2_t v355 = (float32x2_t)vzip2q_s32(v329, (int32x4_t)v332).u64[0];
                  float32x2_t v356 = (float32x2_t)__PAIR64__(v329.u32[1], LODWORD(v336));
                  float32x2_t v357 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v332.f32, 0);
                  *(float32x2_t *)v339.f32 = vsub_f32(*(float32x2_t *)v329.i8, v357);
                  v357.f32[0] = v336;
                  v357.i32[0] = vmul_f32(v356, v357).u32[0];
                  v357.i32[1] = v339.i32[1];
                  *(float32x2_t *)v340.f32 = vadd_f32(v355, *(float32x2_t *)v326.f32);
                  *(float32x2_t *)&v340.u32[2] = v357;
LABEL_188:
                  v339.f32[0] = 0.5 / v336;
                  float32x4_t v352 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v339.f32, 0);
                }
                else
                {
                  float v342 = sqrtf((float)((float)(v332.f32[1] + 1.0) - *(float *)v329.i32) - v326.f32[2]);
                  int8x16_t v343 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v329.i8, 1), v332);
                  *(int32x2_t *)v332.f32 = vdup_laneq_s32((int32x4_t)v332, 2);
                  float32x2_t v344 = vadd_f32(*(float32x2_t *)v332.f32, *(float32x2_t *)v326.f32);
                  v332.f32[0] = v342;
                  v332.i32[0] = vmul_f32(*(float32x2_t *)v332.f32, (float32x2_t)__PAIR64__(v326.u32[1], LODWORD(v342))).u32[0];
                  v332.i32[1] = v344.i32[1];
                  int32x2_t v345 = (int32x2_t)vsubq_f32(v326, (float32x4_t)vdupq_laneq_s32(v329, 2)).u64[0];
                  float32x4_t v352 = (float32x4_t)vextq_s8(vextq_s8(v343, v343, 4uLL), (int8x16_t)v332, 0xCuLL);
                  v352.i32[3] = v345.i32[0];
                  *(float *)v345.i32 = 0.5 / v342;
                  float32x4_t v340 = (float32x4_t)vdupq_lane_s32(v345, 0);
                }
              }
              else
              {
                float v346 = sqrtf((float)((float)(*(float *)v329.i32 + 1.0) - v332.f32[1]) - v326.f32[2]);
                float32x2_t v347 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v332.f32, 0);
                float32x2_t v348 = vadd_f32(*(float32x2_t *)v329.i8, v347);
                v347.f32[0] = v346;
                v352.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v329.u32[1], LODWORD(v346)), v347).u32[0];
                v352.i32[1] = v348.i32[1];
                float32x2_t v349 = (float32x2_t)vzip2q_s32(v329, (int32x4_t)v332).u64[0];
                LODWORD(v350) = vadd_f32(v349, *(float32x2_t *)v326.f32).u32[0];
                int32x2_t v351 = (int32x2_t)vsub_f32(v349, *(float32x2_t *)v326.f32);
                HIDWORD(v350) = v351.i32[1];
                v352.i64[1] = v350;
                *(float *)v351.i32 = 0.5 / v346;
                float32x4_t v340 = (float32x4_t)vdupq_lane_s32(v351, 0);
              }
              int8x16_t v650 = vbslq_s8(v306, v307, v650);
              _Q3 = vmulq_f32(v340, v352);
              int32x4_t v358 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), (int8x16_t)_Q3, 0xCuLL), v631), _Q3, v634);
              float32x4_t v251 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v626, _Q3, 3), v645, _Q3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v358, v358), (int8x16_t)v358, 0xCuLL));
              float32x4_t v359 = vmulq_f32(v626, _Q3);
              _Q4 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v359, 2), vaddq_f32(v359, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v359.f32, 1)));
              __asm { FMLA            S4, S8, V3.S[3] }
              v251.i32[3] = _Q4.i32[0];
              goto LABEL_154;
            }
            if (!((unint64_t)v725 ^ 1 | *((void *)&v725 + 1))) {
              goto LABEL_155;
            }
            uint64_t v255 = *(void *)(a3 + 8);
            uint64_t v254 = *(void *)(a3 + 16);
            uint64_t v256 = *(void *)(a3 + 24) ^ v255;
            uint64_t v257 = *(void *)(a3 + 32) ^ v254;
            uint64_t v258 = v256 ^ v254;
            uint64_t v259 = v257 ^ v255;
            _Q0.f32[0] = (float)((9 * ((((unint64_t)(5 * v254) >> 32) >> 25) | (640 * v254))) & 0xFFFFFF)
                       * 0.000000059605;
            uint64_t v260 = v259 ^ v256 ^ (v254 << 17);
            uint64_t v261 = __ROR8__(v257, 19);
            uint64_t v262 = v260 ^ v258;
            uint64_t v263 = v258 ^ v261 ^ v259;
            uint64_t v264 = v260 ^ (v258 << 17) ^ v263;
            uint64_t v265 = __ROR8__(v258 ^ v261, 19);
            *(void *)(a3 + 8) = v262 ^ v265 ^ v263;
            *(void *)(a3 + 16) = v264 ^ v262;
            *(void *)(a3 + 24) = v264 ^ (v262 << 17);
            *(void *)(a3 + 32) = __ROR8__(v262 ^ v265, 19);
            _Q0.f32[1] = (float)((9 * ((((unint64_t)(5 * v258) >> 32) >> 25) | (640 * v258))) & 0xFFFFFF)
                       * 0.000000059605;
            _Q0.f32[2] = (float)((9 * ((((unint64_t)(5 * v262) >> 32) >> 25) | (640 * v262))) & 0xFFFFFF)
                       * 0.000000059605;
            v266.i64[0] = 0x3F0000003F000000;
            v266.i64[1] = 0x3F0000003F000000;
            simd_float4 v267 = (simd_float4)vmulq_f32(vmulq_f32((float32x4_t)_Q0, (float32x4_t)vdupq_n_s32(0x40C90FDAu)), v266);
            v267.i32[3] = 0;
            simd_float4 xa = v267;
            simd_float4 v627 = _simd_cos_f4(v267);
            _Q0 = _simd_sin_f4(xa);
            _Q7 = v627;
            float v269 = vmuls_lane_f32(v627.f32[1], (float32x4_t)v627, 2);
            float v270 = vmuls_lane_f32(_Q0.f32[1], (float32x4_t)_Q0, 2);
            *(float *)v271.i32 = vmlas_n_f32(-(float)(v627.f32[0] * v270), v269, _Q0.f32[0]);
            _S4 = vmuls_lane_f32(v627.f32[0], *(float32x2_t *)_Q0.f32, 1);
            __asm { FMLA            S5, S4, V7.S[2] }
            _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
            __asm { FMLA            S6, S4, V0.S[2] }
            _Q0.f32[0] = vmlas_n_f32(v270 * _Q0.f32[0], v269, v627.f32[0]);
            v271.i32[1] = _S5;
            v271.i32[2] = _S6;
            int32x4_t v276 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v271, v271), (int8x16_t)v271, 0xCuLL), v631), (float32x4_t)v271, v634);
            _Q4 = (int8x16_t)vuzp1q_s32(v276, v276);
            float32x4_t v251 = vaddq_f32(vmlaq_f32(vmulq_n_f32(v626, _Q0.f32[0]), v645, (float32x4_t)v271), (float32x4_t)vextq_s8(_Q4, (int8x16_t)v276, 0xCuLL));
            float32x4_t v277 = vmulq_f32(v626, (float32x4_t)v271);
            _Q3 = vaddq_f32(v277, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v277.f32, 1));
            v251.f32[3] = -(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v277, 2), _Q3).f32[0]
                                 - (float)(v626.f32[3] * _Q0.f32[0]));
          }
LABEL_154:
          *unsigned int v245 = v251;
LABEL_155:
          ++v245;
          ++v246;
          --v243;
        }
        while (v243);
      }
    }
  }
  _Q0.i32[0] = *(_DWORD *)(v29 + 144);
  float v365 = *(float *)(v29 + 148);
  v367 = v623;
  uint64_t v366 = v624;
  if (_Q0.f32[0] != 0.0 || v365 != 0.0)
  {
    if (_Q0.f32[0] == v365)
    {
      uint64_t v368 = v34 - v624;
      if (v34 != v624)
      {
        float32x4_t v369 = *(float32x4_t *)(v29 + 128);
        float32x4_t v370 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v369, (int32x4_t)v369), (int8x16_t)v369, 0xCuLL);
        float32x4_t v371 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
        v372 = (float32x4_t *)&v623[2 * v624];
        do
        {
          int32x4_t v373 = (int32x4_t)vmlaq_f32(vmulq_f32(v370, vnegq_f32(*v372)), v369, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v372, *(int32x4_t *)v372), *(int8x16_t *)v372, 0xCuLL));
          float32x4_t v374 = vmlaq_f32(*v372, v371, vsubq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v373, v373), (int8x16_t)v373, 0xCuLL), *v372));
          v374.i32[3] = _Q3.i32[3];
          *v372++ = v374;
          --v368;
        }
        while (v368);
      }
    }
    else
    {
      uint64_t v375 = v34 - v624;
      if (v34 != v624)
      {
        uint64_t v376 = *(void *)(a3 + 24);
        uint64_t v377 = *(void *)(a3 + 32);
        uint64_t v378 = *(void *)(a3 + 8);
        uint64_t v379 = *(void *)(a3 + 16);
        float32x4_t v380 = *(float32x4_t *)(v29 + 128);
        float v381 = v365 - _Q0.f32[0];
        float32x4_t v382 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v380, (int32x4_t)v380), (int8x16_t)v380, 0xCuLL);
        v383 = (float32x4_t *)&v623[2 * v624];
        do
        {
          int32x4_t v384 = (int32x4_t)vmlaq_f32(vmulq_f32(v382, vnegq_f32(*v383)), v380, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v383, *(int32x4_t *)v383), *(int8x16_t *)v383, 0xCuLL));
          int v385 = 9 * ((((unint64_t)(5 * v379) >> 32) >> 25) | (640 * v379));
          uint64_t v386 = v378 ^ v376;
          uint64_t v387 = v379 ^ v377;
          v376 ^= v378 ^ (v379 << 17);
          v379 ^= v386;
          uint64_t v377 = __ROR8__(v387, 19);
          float32x4_t v388 = vmlaq_n_f32(*v383, vsubq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v384, v384), (int8x16_t)v384, 0xCuLL), *v383), _Q0.f32[0] + (float)(v381 * (float)((float)(*(void *)&v385 & 0xFFFFFFLL) * 0.000000059605)));
          v388.i32[3] = _Q4.i32[3];
          v378 ^= v387;
          *v383++ = v388;
          --v375;
        }
        while (v375);
        *(void *)(a3 + 8) = v378;
        *(void *)(a3 + 16) = v379;
        *(void *)(a3 + 24) = v376;
        *(void *)(a3 + 32) = v377;
      }
    }
  }
  float v390 = *(float *)(v29 + 112);
  float v389 = *(float *)(v29 + 116);
  if (v390 == 0.0 && v389 == 0.0)
  {
    float v391 = *(float *)(v29 + 104);
    float v392 = *(float *)(v29 + 108);
    if (v391 == v392)
    {
      uint64_t v393 = v34 - v624;
      if (v34 != v624)
      {
        v394 = (float32x2_t *)&v623[2 * v624];
        do
        {
          *(float32x2_t *)&long long v395 = vmul_n_f32(*v394, v391);
          *((float *)&v395 + 2) = v391 * v394[1].f32[0];
          HIDWORD(v395) = 0;
          *(_OWORD *)v394->f32 = v395;
          v394 += 2;
          --v393;
        }
        while (v393);
      }
    }
    else
    {
      uint64_t v428 = v34 - v624;
      if (v34 != v624)
      {
        uint64_t v429 = *(void *)(a3 + 24);
        uint64_t v430 = *(void *)(a3 + 32);
        float v431 = v392 - v391;
        v432 = (float32x2_t *)&v623[2 * v624];
        uint64_t v433 = *(void *)(a3 + 8);
        uint64_t v434 = *(void *)(a3 + 16);
        do
        {
          int v435 = 9 * ((((unint64_t)(5 * v434) >> 32) >> 25) | (640 * v434));
          uint64_t v436 = v433 ^ v429;
          uint64_t v437 = v434 ^ v430;
          v429 ^= v433 ^ (v434 << 17);
          v434 ^= v436;
          uint64_t v430 = __ROR8__(v437, 19);
          float v438 = v391 + (float)(v431 * (float)((float)(*(void *)&v435 & 0xFFFFFFLL) * 0.000000059605));
          *(float32x2_t *)&long long v439 = vmul_n_f32(*v432, v438);
          *((void *)&v439 + 1) = COERCE_UNSIGNED_INT(v432[1].f32[0] * v438);
          v433 ^= v437;
          *(_OWORD *)v432->f32 = v439;
          v432 += 2;
          --v428;
        }
        while (v428);
        *(void *)(a3 + 8) = v433;
        *(void *)(a3 + 16) = v434;
        *(void *)(a3 + 24) = v429;
        *(void *)(a3 + 32) = v430;
      }
    }
  }
  else
  {
    float v396 = cosf(fminf(fmaxf(v389, 0.0), 3.1416));
    uint64_t v397 = v34 - v624;
    if (v34 != v624)
    {
      uint64_t x = v34;
      float v398 = 1.0 - v396;
      float v399 = cosf(fminf(fmaxf(v390, 0.0), 3.1416));
      uint64_t v404 = *(void *)(a3 + 24);
      uint64_t v405 = *(void *)(a3 + 32);
      uint64_t v406 = *(void *)(a3 + 8);
      uint64_t v407 = *(void *)(a3 + 16);
      v408.i32[0] = *(_DWORD *)(v29 + 104);
      float v409 = *(float *)(v29 + 108);
      float v410 = (float)(1.0 - v399) - v398;
      int8x16_t v632 = v408;
      float v411 = v409 - *(float *)v408.i32;
      v412 = (float32x2_t *)&v623[2 * v624];
      do
      {
        uint64_t v417 = v406 ^ v404 ^ v407;
        uint64_t v418 = v406 ^ v407 ^ v405;
        float v419 = (float)((9 * ((((unint64_t)(5 * v407) >> 32) >> 25) | (640 * v407))) & 0xFFFFFF)
             * 0.000000059605;
        uint64_t v420 = v406 ^ v404 ^ (v407 << 17) ^ v418;
        uint64_t v421 = __ROR8__(v407 ^ v405, 19);
        uint64_t v407 = v420 ^ v417;
        uint64_t v406 = v417 ^ v421 ^ v418;
        uint64_t v404 = v420 ^ (v417 << 17);
        uint64_t v405 = __ROR8__(v417 ^ v421, 19);
        v402.i32[0] = 1.0;
        float v422 = 1.0 - (float)(v398 + (float)(v410 * v419));
        float v423 = sqrtf(1.0 - (float)(v422 * v422));
        *(float *)v400.i32 = COERCE_FLOAT(*(void *)&v412[1]);
        v424.i64[0] = 0x8000000080000000;
        v424.i64[1] = 0x8000000080000000;
        v424.i32[0] = vbslq_s8(v424, v402, v400).i32[0];
        v401.f32[0] = COERCE_FLOAT(HIDWORD(*(unint64_t *)v412)) / (float)(fabsf(*(float *)v400.i32) + 1.0);
        float v425 = vmuls_lane_f32(v401.f32[0], *v412, 1);
        v401.f32[0] = -(float)(COERCE_FLOAT(*(_OWORD *)v412->f32) * v401.f32[0]);
        v403.f32[0] = *(float *)v400.i32 + (float)(*(float *)v424.i32 * v425);
        v403.f32[1] = *(float *)v424.i32 * v401.f32[0];
        v403.f32[2] = -COERCE_FLOAT(*(_OWORD *)v412->f32);
        v401.f32[1] = 1.0 - v425;
        v401.i32[2] = vmuls_lane_f32(-*(float *)v424.i32, *v412, 1);
        float32x4_t v646 = v401;
        float32x4_t v651 = v403;
        float32x4_t v638 = vmulq_n_f32(*(float32x4_t *)v412->f32, v422);
        __float2 v426 = __sincosf_stret((float)((float)((9 * ((((unint64_t)(5 * v417) >> 32) >> 25) | (640 * v417))) & 0xFFFFFF)* 0.000000059605)* 6.2832);
        float32x4_t v427 = vmlaq_n_f32(vmlaq_n_f32(v638, v651, v423 * v426.__cosval), v646, v423 * v426.__sinval);
        int8x16_t v400 = v632;
        if (*(float *)v632.i32 == v409)
        {
          float32x4_t v416 = vmulq_n_f32(v427, *(float *)v632.i32);
          v416.i32[3] = v634.i32[3];
        }
        else
        {
          int v413 = 9 * ((((unint64_t)(5 * v407) >> 32) >> 25) | (640 * v407));
          uint64_t v414 = v404 ^ v406;
          uint64_t v415 = v405 ^ v407;
          v404 ^= v406 ^ (v407 << 17);
          v407 ^= v414;
          v406 ^= v415;
          uint64_t v405 = __ROR8__(v415, 19);
          float32x4_t v416 = vmulq_n_f32(v427, *(float *)v632.i32 + (float)(v411 * (float)((float)(*(void *)&v413 & 0xFFFFFFLL) * 0.000000059605)));
          v416.i32[3] = v627.i32[3];
        }
        *(float32x4_t *)v412->f32 = v416;
        v412 += 2;
        --v397;
      }
      while (v397);
      *(void *)(a3 + 8) = v406;
      *(void *)(a3 + 16) = v407;
      *(void *)(a3 + 24) = v404;
      *(void *)(a3 + 32) = v405;
      v367 = v623;
      uint64_t v366 = v624;
      float32x2_t v27 = v617;
      uint64_t v34 = x;
    }
  }
  sub_1B62AA520((uint64_t)v715, (uint64_t)v719, &qword_1EB97DE80, (uint64_t)&type metadata for EmitterShape.Direction);
  if (v719[16] != 255)
  {
    sub_1B67599F4((uint64_t)v719, (uint64_t)v720);
    sub_1B67599F4((uint64_t)v720, (uint64_t)v721);
    if (v722 >= 2u && !(v721[0] ^ 1 | v721[1]))
    {
      uint64_t v440 = sub_1B6345A6C();
      if ((v442 & 1) == 0)
      {
        uint64_t v443 = v34 - v366;
        if (v34 != v366)
        {
          _S0 = v626.i32[3];
          float32x4_t v445 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v626, 3);
          float32x4_t v446 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v626, (int32x4_t)v626), (int8x16_t)v626, 0xCuLL);
          float32x4_t v447 = vnegq_f32(v626);
          v448 = (float32x4_t *)(v440 + 16 * v366);
          v449 = (float32x4_t *)&v367[2 * v366];
          __asm { FMOV            V4.4S, #1.0 }
          v441.i32[0] = 1.0;
          v451.i64[0] = 0x8000000080000000;
          v451.i64[1] = 0x8000000080000000;
          do
          {
            float32x4_t v457 = *v449;
            float32x4_t v462 = vmulq_f32(v457, v457);
            v462.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v462, 2), vaddq_f32(v462, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v462.f32, 1))).u64[0];
            float32x4_t v463 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v462.f32, 0);
            v463.i32[3] = 0;
            float32x4_t v464 = vrsqrteq_f32(v463);
            float32x4_t v465 = vmulq_f32(v464, vrsqrtsq_f32(v463, vmulq_f32(v464, v464)));
            int32x4_t v466 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v462.f32[0] != 0.0)), 0x1FuLL));
            v466.i32[3] = 0;
            float32x4_t v471 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v466), (int8x16_t)vmulq_f32(v465, vrsqrtsq_f32(v463, vmulq_f32(v465, v465))), _Q4);
            float32x4_t v467 = vmulq_f32(*v449, v471);
            v465.i32[0] = v467.i32[2];
            float v468 = *(float *)vbslq_s8(v451, v441, (int8x16_t)v465).i32;
            v457.f32[0] = v467.f32[1] / (float)(fabsf(v467.f32[2]) + 1.0);
            float v469 = vmuls_lane_f32(v457.f32[0], *(float32x2_t *)v467.f32, 1);
            v457.f32[0] = -(float)(v467.f32[0] * v457.f32[0]);
            float v470 = v467.f32[2] + (float)(v468 * v469);
            v471.f32[0] = v468 * v457.f32[0];
            float v472 = 1.0 - v469;
            float v473 = vmuls_lane_f32(-v468, *(float32x2_t *)v467.f32, 1);
            float v474 = v467.f32[2] + (float)(v470 + v472);
            if (v474 > 0.0)
            {
              float32x2_t v452 = (float32x2_t)vrev64_s32(*(int32x2_t *)v467.f32);
              *(int32x2_t *)v456.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v467.f32, *(float32x2_t *)v467.f32), 0);
              v456.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v452.u32[1], LODWORD(v473)), v452).u32[0];
              float32x2_t v453 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v474 + 1.0)), v471.u32[0]);
              float32x2_t v454 = vmul_f32(v453, v453);
              v453.i32[0] = v457.i32[0];
              unsigned __int32 v455 = vsub_f32(*(float32x2_t *)v471.f32, v453).u32[0];
              v457.i32[1] = v454.i32[1];
              v456.i64[1] = v457.i64[0];
              v457.f32[0] = 0.5 / v453.f32[1];
            }
            else
            {
              if (v470 >= v472 && v470 >= v467.f32[2])
              {
                float v477 = sqrtf((float)((float)(v470 + 1.0) - v472) - v467.f32[2]);
                v458.f32[0] = v477 * v477;
                v458.f32[1] = v457.f32[0] + v471.f32[0];
                int32x2_t v478 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v473), v467.u32[0]), *(float32x2_t *)v467.f32);
LABEL_239:
                *(int32x2_t *)&v458.u32[2] = v478;
                *(float *)v478.i32 = 0.5 / v477;
                float32x4_t v456 = (float32x4_t)vdupq_lane_s32(v478, 0);
                goto LABEL_230;
              }
              if (v472 > v467.f32[2])
              {
                float v477 = sqrtf((float)((float)(v472 + 1.0) - v470) - v467.f32[2]);
                v458.f32[0] = v457.f32[0] + v471.f32[0];
                float32x2_t v476 = (float32x2_t)vrev64_s32(*(int32x2_t *)v467.f32);
                v458.f32[1] = v477 * v477;
                int32x2_t v478 = (int32x2_t)vadd_f32(v476, (float32x2_t)__PAIR64__(v476.u32[1], LODWORD(v473)));
                goto LABEL_239;
              }
              float v479 = sqrtf((float)((float)(v467.f32[2] + 1.0) - v470) - v472);
              v456.i32[0] = vsubq_f32(v467, v467).u32[0];
              v456.f32[1] = v467.f32[1] + v473;
              v456.f32[2] = v479 * v479;
              v456.f32[3] = v471.f32[0] - v457.f32[0];
              v457.f32[0] = 0.5 / v479;
            }
            float32x4_t v458 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v457.f32, 0);
LABEL_230:
            _Q16 = vmulq_f32(v456, v458);
            _Q18 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q16, (int32x4_t)_Q16), (int8x16_t)_Q16, 0xCuLL), v447), _Q16, v446);
            float32x4_t v461 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v626, _Q16, 3), v445, _Q16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q18, _Q18), (int8x16_t)_Q18, 0xCuLL));
            __asm { FMLA            S18, S0, V16.S[3] }
            v461.i32[3] = _Q18.i32[0];
            *v448++ = v461;
            ++v449;
            --v443;
          }
          while (v443);
        }
      }
    }
  }
  float v480 = *(float *)(a3 + 96);
  sub_1B62F46E8();
  float v482 = v481;
  uint64_t v483 = sub_1B6642ACC(v27[1], (uint64_t)v27);
  uint64_t v484 = sub_1B67A8284();
  char v486 = v485;
  sub_1B62AA520((uint64_t)v683, (uint64_t)v687, &qword_1EB97F810, (uint64_t)&type metadata for LastFrameWorldTransform);
  if ((v688 & 1) != 0
    || v480 <= v482
    || (float32x4_t v635 = v687[0], v639 = v687[1], v647 = v687[2], v652 = v687[3], (sub_1B6A81544() & 1) != 0))
  {
    uint64_t v489 = v34 - v366;
    if (v34 != v366)
    {
      float32x4_t v491 = vmulq_f32(v626, (float32x4_t)xmmword_1B6E4F550);
      int32x4_t v492 = (int32x4_t)vnegq_f32(v491);
      int8x16_t v493 = (int8x16_t)vtrn2q_s32((int32x4_t)v491, vtrn1q_s32((int32x4_t)v491, v492));
      float32x4_t v494 = (float32x4_t)vextq_s8(v493, v493, 8uLL);
      float32x4_t v495 = (float32x4_t)vextq_s8((int8x16_t)v491, (int8x16_t)v492, 8uLL);
      float32x4_t v496 = (float32x4_t)vrev64q_s32((int32x4_t)v491);
      v496.i32[0] = v492.i32[1];
      v496.i32[3] = v492.i32[2];
      float32x4_t v497 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v626.f32, 0);
      float32x4_t v498 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v626, 2);
      v499 = (float32x4_t *)(v484 + 16 * v366);
      v500 = (float32x2_t *)&v367[2 * v366];
      v501 = (float32x4_t *)(v483 + 16 * v366);
      v502 = (float32x4_t *)&v621[2 * v366];
      do
      {
        __int32 v503 = v487.i32[3];
        float32x4_t v487 = vaddq_f32(*v501, vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v610, v612, *v502, 2), v616, *(float32x2_t *)v502->f32, 1), v614, COERCE_FLOAT(*v502)));
        v487.i32[3] = v503;
        float32x4_t v504 = v487;
        v504.i32[3] = 1.0;
        float32x4_t *v501 = v504;
        if ((v486 & 1) == 0)
        {
          float32x4_t v505 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v495, *v500, 1), v494, COERCE_FLOAT(*(_OWORD *)v500->f32)), v496, *(float32x4_t *)v500->f32, 2);
          int32x4_t v506 = (int32x4_t)vnegq_f32(v505);
          int8x16_t v507 = (int8x16_t)vtrn2q_s32((int32x4_t)v505, vtrn1q_s32((int32x4_t)v505, v506));
          float32x4_t v508 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v505, (int8x16_t)v506, 8uLL), *(float32x2_t *)v626.f32, 1), (float32x4_t)vextq_s8(v507, v507, 8uLL), v497);
          float32x4_t v509 = (float32x4_t)vrev64q_s32((int32x4_t)v505);
          v509.i32[0] = v506.i32[1];
          v509.i32[3] = v506.i32[2];
          float32x4_t v510 = vaddq_f32(*v499, vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v505, v626, 3), v509, v498), v508));
          v510.i32[3] = 0;
          float32x4_t *v499 = v510;
        }
        ++v499;
        v500 += 2;
        ++v501;
        ++v502;
        --v489;
      }
      while (v489);
    }
  }
  else
  {
    if (v604)
    {
      uint64_t v653 = v29;
      uint64_t v511 = v34;
      sub_1B633C690(v603, 0, 0, 1, 0, 0, 1, 0, (uint64_t)v685, v488, 0, 1);
      uint64_t v512 = v685[0];
      uint64_t v513 = v685[1];
      uint64_t v514 = v685[2];
      uint64_t v515 = v685[3];
      uint64_t v516 = v685[4];
      uint64_t v640 = v685[5];
      uint64_t v636 = v685[6];
      uint64_t v648 = v685[7];
      sub_1B69ACDFC((uint64_t)v685, (uint64_t)v686, (unint64_t *)&qword_1EB97D810, type metadata accessor for simd_float4x4);
      if (v686[64])
      {
        float32x4_t v522 = (float32x4_t)xmmword_1B6E4F370;
        float32x4_t v523 = (float32x4_t)xmmword_1B6E4F2E0;
        float32x4_t v524 = (float32x4_t)xmmword_1B6E4F320;
        float32x4_t v525 = (float32x4_t)xmmword_1B6E4F300;
      }
      else
      {
        v525.i64[0] = v512;
        v525.i64[1] = v513;
        v524.i64[0] = v514;
        v524.i64[1] = v515;
        v523.i64[0] = v516;
        v523.i64[1] = v640;
        v522.i64[0] = v636;
        v522.i64[1] = v648;
      }
      v367 = v623;
      uint64_t v366 = v624;
      float32x2_t v27 = v617;
      uint64_t v34 = v511;
      uint64_t v29 = v653;
    }
    else
    {
      *(double *)v526.i64 = sub_1B6335378();
      float32x4_t v525 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v526, v635.f32[0]), v527, *(float32x2_t *)v635.f32, 1), v528, v635, 2), v529, v635, 3);
      float32x4_t v524 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v526, v639.f32[0]), v527, *(float32x2_t *)v639.f32, 1), v528, v639, 2), v529, v639, 3);
      float32x4_t v523 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v526, v647.f32[0]), v527, *(float32x2_t *)v647.f32, 1), v528, v647, 2), v529, v647, 3);
      float32x4_t v522 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v526, v652.f32[0]), v527, *(float32x2_t *)v652.f32, 1), v528, v652, 2), v529, v652, 3);
    }
    if (*(unsigned char *)(v29 + 97))
    {
      if (*(unsigned char *)(v29 + 97) == 1)
      {
        uint64_t v530 = v34 - v366;
        if (v34 != v366)
        {
          uint64_t v531 = *(void *)(a3 + 24);
          uint64_t v532 = *(void *)(a3 + 32);
          uint64_t v534 = *(void *)(a3 + 8);
          uint64_t v533 = *(void *)(a3 + 16);
          float32x4_t v535 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v626, (int32x4_t)v626), (int8x16_t)v626, 0xCuLL);
          float32x4_t v536 = vnegq_f32(v626);
          v537 = (float32x4_t *)(v484 + 16 * v366);
          v538 = (int32x4_t *)&v367[2 * v366];
          v539 = (float32x4_t *)(v483 + 16 * v366);
          v540 = (float32x4_t *)&v621[2 * v366];
          do
          {
            __int32 v544 = v520.i32[3];
            v520.f32[0] = (float)((9 * ((((unint64_t)(5 * v533) >> 32) >> 25) | (640 * v533))) & 0xFFFFFF)
                        * 0.000000059605;
            float32x4_t v545 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v522, v523, *v540, 2), v524, *(float32x2_t *)v540->f32, 1), v525, COERCE_FLOAT(*v540));
            float32x4_t v546 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v610, v612, *v540, 2), v616, *(float32x2_t *)v540->f32, 1), v614, COERCE_FLOAT(*v540)), v545);
            float v547 = vmuls_lane_f32(v520.f32[0], v546, 2);
            *(float32x2_t *)v520.f32 = vadd_f32(*(float32x2_t *)v545.f32, vmul_n_f32(*(float32x2_t *)v546.f32, v520.f32[0]));
            v520.f32[2] = v545.f32[2] + v547;
            float32x4_t v520 = vaddq_f32(*v539, v520);
            v520.i32[3] = v544;
            float32x4_t v548 = v520;
            v548.i32[3] = 1.0;
            float32x4_t *v539 = v548;
            if ((v486 & 1) == 0)
            {
              float32x4_t v549 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v538, *v538), *(int8x16_t *)v538, 0xCuLL), v536), *(float32x4_t *)v538, v535);
              int32x4_t v550 = (int32x4_t)vaddq_f32(v549, v549);
              float32x4_t v551 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v550, v550), (int8x16_t)v550, 0xCuLL);
              int v552 = v518;
              int32x4_t v553 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v551, (int32x4_t)v551), (int8x16_t)v551, 0xCuLL), v536), v551, v535);
              float32x4_t v554 = vaddq_f32(vaddq_f32(*(float32x4_t *)v538, vmulq_laneq_f32(v551, v626, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v553, v553), (int8x16_t)v553, 0xCuLL));
              v554.i32[3] = 0;
              float32x4_t *v537 = v554;
              int v518 = v552;
            }
            uint64_t v541 = v533 << 17;
            uint64_t v542 = v534 ^ v531;
            uint64_t v543 = v533 ^ v532;
            v533 ^= v542;
            v534 ^= v543;
            uint64_t v531 = v542 ^ v541;
            uint64_t v532 = __ROR8__(v543, 19);
            ++v537;
            ++v538;
            ++v539;
            ++v540;
            --v530;
          }
          while (v530);
          *(void *)(a3 + 8) = v534;
          *(void *)(a3 + 16) = v533;
          *(void *)(a3 + 24) = v531;
          *(void *)(a3 + 32) = v532;
        }
      }
      else
      {
        uint64_t v571 = v27[5];
        if (v571) {
          float v572 = 1.0 / (float)v571;
        }
        else {
          float v572 = 1.0;
        }
        uint64_t v573 = v34 - v366;
        if (v34 != v366)
        {
          float v574 = v572 * (float)v27[3];
          float32x4_t v575 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v626, (int32x4_t)v626), (int8x16_t)v626, 0xCuLL);
          float32x4_t v576 = vnegq_f32(v626);
          v577 = (float32x4_t *)(v484 + 16 * v366);
          v578 = (int32x4_t *)&v367[2 * v366];
          v579 = (float32x4_t *)(v483 + 16 * v366);
          v580 = (float32x4_t *)&v621[2 * v366];
          do
          {
            __int32 v581 = v521.i32[3];
            float32x4_t v582 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v522, v523, *v580, 2), v524, *(float32x2_t *)v580->f32, 1), v525, COERCE_FLOAT(*v580));
            float32x4_t v583 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v610, v612, *v580, 2), v616, *(float32x2_t *)v580->f32, 1), v614, COERCE_FLOAT(*v580)), v582);
            float v584 = vmuls_lane_f32(v574, v583, 2);
            *(float32x2_t *)v583.f32 = vadd_f32(*(float32x2_t *)v582.f32, vmul_n_f32(*(float32x2_t *)v583.f32, v574));
            v583.f32[2] = v582.f32[2] + v584;
            float32x4_t v521 = vaddq_f32(*v579, v583);
            v521.i32[3] = v581;
            float32x4_t v585 = v521;
            v585.i32[3] = 1.0;
            float32x4_t *v579 = v585;
            if ((v486 & 1) == 0)
            {
              float32x4_t v586 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v578, *v578), *(int8x16_t *)v578, 0xCuLL), v576), *(float32x4_t *)v578, v575);
              int32x4_t v587 = (int32x4_t)vaddq_f32(v586, v586);
              float32x4_t v588 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v587, v587), (int8x16_t)v587, 0xCuLL);
              __int32 v589 = v520.i32[3];
              int32x4_t v590 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v588, (int32x4_t)v588), (int8x16_t)v588, 0xCuLL), v576), v588, v575);
              float32x4_t v520 = vaddq_f32(vaddq_f32(*(float32x4_t *)v578, vmulq_laneq_f32(v588, v626, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v590, v590), (int8x16_t)v590, 0xCuLL));
              v520.i32[3] = 0;
              float32x4_t *v577 = v520;
              v520.i32[3] = v589;
            }
            ++v577;
            ++v578;
            float v574 = v572 + v574;
            ++v579;
            ++v580;
            --v573;
          }
          while (v573);
        }
      }
    }
    else
    {
      uint64_t v555 = v34 - v366;
      if (v34 != v366)
      {
        float32x4_t v556 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v626, (int32x4_t)v626), (int8x16_t)v626, 0xCuLL);
        float32x4_t v557 = vnegq_f32(v626);
        v558 = (float32x4_t *)(v484 + 16 * v366);
        v559 = (int32x4_t *)&v367[2 * v366];
        v560 = (float32x4_t *)(v483 + 16 * v366);
        v561 = (float32x4_t *)&v621[2 * v366];
        do
        {
          __int32 v562 = v523.i32[3];
          float32x4_t v523 = vaddq_f32(*v560, vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v610, v612, *v561, 2), v616, *(float32x2_t *)v561->f32, 1), v614, COERCE_FLOAT(*v561)));
          v523.i32[3] = v562;
          float32x4_t v563 = v523;
          v563.i32[3] = 1.0;
          float32x4_t *v560 = v563;
          if ((v486 & 1) == 0)
          {
            float32x4_t v564 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v559, *v559), *(int8x16_t *)v559, 0xCuLL), v557), *(float32x4_t *)v559, v556);
            int32x4_t v565 = (int32x4_t)vaddq_f32(v564, v564);
            float32x4_t v566 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v565, v565), (int8x16_t)v565, 0xCuLL);
            float32x4_t v567 = vmulq_laneq_f32(v566, v626, 3);
            v567.i32[3] = v519;
            int32x4_t v568 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v566, (int32x4_t)v566), (int8x16_t)v566, 0xCuLL), v557), v566, v556);
            int v569 = v517;
            float32x4_t v570 = vaddq_f32(*v558, vaddq_f32(vaddq_f32(*(float32x4_t *)v559, v567), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v568, v568), (int8x16_t)v568, 0xCuLL)));
            v570.i32[3] = 0;
            __int32 v519 = v567.i32[3];
            float32x4_t *v558 = v570;
            int v517 = v569;
          }
          ++v558;
          ++v559;
          ++v560;
          ++v561;
          --v555;
        }
        while (v555);
      }
    }
  }
LABEL_245:
  ecs_stack_allocator_pop_snapshot(v605);
  return swift_release();
}

uint64_t type metadata accessor for EmitterShape.GPUSystem()
{
  return self;
}

const char *sub_1B69AB2F0()
{
  return "EmitterShape.GPU";
}

uint64_t sub_1B69AB304()
{
  return type metadata accessor for EmitterShape.GPUSystem();
}

void sub_1B69AB324()
{
  qword_1E9E494C8 = (uint64_t)&unk_1F0FA03A8;
}

uint64_t sub_1B69AB338(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1B6640A4C(a2, 0);
  uint64_t v5 = sub_1B6640A4C(a2, 0);
  uint64_t v6 = sub_1B6640960(0, a2);
  unint64_t v30 = a2;
  if (a2)
  {
    if (qword_1E9DCC528 != -1) {
      swift_once();
    }
    uint64_t v7 = qword_1E9E494C8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = (uint64_t)sub_1B6C1683C(v4);
    }
    uint64_t v8 = 0;
    do
    {
      *(float *)(v4 + 4 * v8 + 32) = 1.0 / (float)*(uint64_t *)(v7 + 32 + 8 * v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = (uint64_t)sub_1B6C1683C(v5);
      }
      *(_DWORD *)(v5 + 4 * v8 + 32) = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = (uint64_t)sub_1B6C166A8(v6);
      }
      *(void *)(v6 + 8 * v8++ + 32) = a1;
    }
    while (v30 != v8);
  }
  unint64_t v9 = *(void *)(v6 + 16);
  if (v9)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = (uint64_t)sub_1B6C1683C(v4);
    }
    uint64_t v10 = v4 + 32;
    while (v9 >= 4)
    {
      uint64_t v11 = v9 & 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v13 = (int64x2_t *)(v6 + 48);
      int64x2_t v14 = 0uLL;
      uint64_t v15 = v9 & 0x7FFFFFFFFFFFFFFCLL;
      int64x2_t v16 = 0uLL;
      do
      {
        int64x2_t v14 = vaddq_s64(v13[-1], v14);
        int64x2_t v16 = vaddq_s64(*v13, v16);
        v13 += 2;
        v15 -= 4;
      }
      while (v15);
      uint64_t v12 = vaddvq_s64(vaddq_s64(v16, v14));
      if (v9 != v11) {
        goto LABEL_22;
      }
LABEL_24:
      if (v12 > 0)
      {
        if (v30)
        {
          if (qword_1E9DCC528 != -1) {
            swift_once();
          }
          uint64_t v20 = 0;
          uint64_t v21 = qword_1E9E494C8 + 32;
          do
          {
            uint64_t v22 = v6 + 8 * v20;
            uint64_t v23 = *(void *)(v21 + 8 * v20);
            uint64_t v24 = *(void *)(v22 + 32);
            float v25 = *(float *)(v5 + 4 * v20 + 32);
            float v26 = *(float *)(v10 + 4 * v20);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v5 = (uint64_t)sub_1B6C1683C(v5);
            }
            *(float *)(v5 + 4 * v20 + 32) = v25 + (float)(v26 * (float)(v24 % v23));
            *(float *)(v10 + 4 * v20) = *(float *)(v10 + 4 * v20) / (float)*(uint64_t *)(v21 + 8 * v20);
            uint64_t v27 = *(void *)(v22 + 32);
            uint64_t v28 = *(void *)(v21 + 8 * v20);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v6 = (uint64_t)sub_1B6C166A8(v6);
            }
            *(void *)(v6 + 8 * v20++ + 32) = v27 / v28;
          }
          while (v30 != v20);
        }
        unint64_t v9 = *(void *)(v6 + 16);
        if (v9) {
          continue;
        }
      }
      goto LABEL_35;
    }
    uint64_t v11 = 0;
    uint64_t v12 = 0;
LABEL_22:
    unint64_t v17 = v9 - v11;
    float32x4_t v18 = (uint64_t *)(v6 + 8 * v11 + 32);
    do
    {
      uint64_t v19 = *v18++;
      v12 += v19;
      --v17;
    }
    while (v17);
    goto LABEL_24;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

void *sub_1B69AB65C()
{
  double result = sub_1B67F47C0(MEMORY[0x1E4FBC860]);
  qword_1E9E494D0 = (uint64_t)result;
  return result;
}

void *sub_1B69AB684()
{
  double result = sub_1B67F47F0(MEMORY[0x1E4FBC860]);
  qword_1E9E494D8 = (uint64_t)result;
  return result;
}

BOOL sub_1B69AB6AC(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
  {
    switch((int)a1)
    {
      case 1:
        if ((a2 & 0x100000000) == 0 || a2 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if ((a2 & 0x100000000) == 0 || a2 != 2) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if ((a2 & 0x100000000) == 0 || a2 != 3) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if ((a2 & 0x100000000) == 0 || a2 != 4) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 5:
        if ((a2 & 0x100000000) == 0 || a2 <= 4) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if ((a2 & 0x100000000) == 0 || a2) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (a2 & 0x100000000) == 0 && *(float *)&a1 == *(float *)&a2;
  }
  return result;
}

BOOL sub_1B69AB784(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a3)
  {
    if (!a6)
    {
      uint64_t v10 = 0;
      *(void *)&long long v11 = a1;
      *((void *)&v11 + 1) = a2;
      *(void *)&long long v12 = a4;
      *((void *)&v12 + 1) = a5;
      while (1)
      {
        long long v17 = v11;
        float v15 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
        long long v18 = v12;
        float v16 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
        BOOL v13 = v15 == v16;
        if (v10 == 2) {
          break;
        }
        while (1)
        {
          ++v10;
          if (v13) {
            break;
          }
          if (v10 == 2) {
            return 0;
          }
          BOOL v13 = 0;
        }
      }
      return v15 == v16;
    }
    return 0;
  }
  if (a3 == 1)
  {
    if (a6 == 1)
    {
      uint64_t v6 = 0;
      *(void *)&long long v7 = a1;
      *((void *)&v7 + 1) = a2;
      *(void *)&long long v8 = a4;
      *((void *)&v8 + 1) = a5;
      while (1)
      {
        long long v19 = v7;
        float v15 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
        long long v20 = v8;
        float v16 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
        BOOL v9 = v15 == v16;
        if (v6 == 2) {
          break;
        }
        while (1)
        {
          ++v6;
          if (v9) {
            break;
          }
          if (v6 == 2) {
            return 0;
          }
          BOOL v9 = 0;
        }
      }
      return v15 == v16;
    }
    return 0;
  }
  if (!(a1 | a2)) {
    return a6 == 2 && !(a5 | a4);
  }
  if (a1 ^ 1 | a2)
  {
    if (a6 != 2 || a4 != 2) {
      return 0;
    }
  }
  else if (a6 != 2 || a4 != 1)
  {
    return 0;
  }
  return !a5;
}

BOOL sub_1B69AB904(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1) {
        return a1 == a4;
      }
      return 0;
    }
    if (a6 == 2 && !(a5 | a4)) {
      return 1;
    }
  }
  else if (!a6)
  {
    uint64_t v7 = 0;
    *(void *)&long long v8 = a1;
    *((void *)&v8 + 1) = a2;
    *(void *)&long long v9 = a4;
    *((void *)&v9 + 1) = a5;
    while (1)
    {
      long long v13 = v8;
      int v11 = *(_DWORD *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      long long v14 = v9;
      int v12 = *(_DWORD *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      BOOL v10 = v11 == v12;
      if (v7 == 2) {
        break;
      }
      while (1)
      {
        ++v7;
        if (v10) {
          break;
        }
        if (v7 == 2) {
          return 0;
        }
        BOOL v10 = 0;
      }
    }
    if (v11 == v12) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1B69AB9DC@<X0>(unint64_t a1@<X0>, int8x8_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int8x8_t v13 = (int8x8_t)a1;
  uint64_t v15 = a10;
  uint64_t v16 = a11;
  if (a1 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = a1;
  }
  switch(a4)
  {
    case 1:
      if (a3)
      {
        uint64_t v18 = a1;
        if (a3 != 1) {
          uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v23.i64[0] = a1;
        v23.i64[1] = a2.u32[0];
        int32x4_t v24 = (int32x4_t)vmaxq_u32(v23, (uint32x4_t)xmmword_1B6E78280);
        uint64_t v18 = vmulq_laneq_s32(vmulq_lane_s32(v24, *(int32x2_t *)v24.i8, 1), v24, 2).u32[0];
      }
      uint64_t v25 = -a5 % v18;
      break;
    case 2:
      if (a3)
      {
        if (a3 == 1)
        {
          if (((a5 / a1) & 1) == 0) {
            goto LABEL_24;
          }
        }
        else if (((a5 / 0x7FFFFFFFFFFFFFFFLL) & 1) == 0)
        {
          goto LABEL_24;
        }
      }
      else
      {
        v26.i64[0] = a1;
        v26.i64[1] = a2.u32[0];
        int32x4_t v27 = (int32x4_t)vmaxq_u32(v26, (uint32x4_t)xmmword_1B6E78280);
        if (((a5 / vmulq_laneq_s32(vmulq_lane_s32(v27, *(int32x2_t *)v27.i8, 1), v27, 2).u32[0]) & 1) == 0) {
          goto LABEL_24;
        }
      }
      if (a3)
      {
        uint64_t v28 = a1;
        if (a3 != 1) {
          uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v34.i64[0] = a1;
        v34.i64[1] = a2.u32[0];
        int32x4_t v35 = (int32x4_t)vmaxq_u32(v34, (uint32x4_t)xmmword_1B6E78280);
        uint64_t v28 = vmulq_laneq_s32(vmulq_lane_s32(v35, *(int32x2_t *)v35.i8, 1), v35, 2).u32[0];
      }
      uint64_t v25 = ~(a5 % v28);
      break;
    case 3:
      if (a3)
      {
        int8x8_t v19 = a2;
        uint64_t v20 = a10;
        char v21 = a3;
        uint64_t v22 = a8;
        if (a3 == 1) {
          a1 = a1;
        }
        else {
          a1 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      else
      {
        uint64_t v20 = a10;
        char v21 = a3;
        uint64_t v22 = a8;
        v32.i64[0] = a1;
        int8x8_t v19 = a2;
        v32.i64[1] = a2.u32[0];
        int32x4_t v33 = (int32x4_t)vmaxq_u32(v32, (uint32x4_t)xmmword_1B6E78280);
        a1 = vmulq_laneq_s32(vmulq_lane_s32(v33, *(int32x2_t *)v33.i8, 1), v33, 2).u32[0];
      }
      uint64_t v25 = sub_1B68E0DD8(a1);
      a8 = v22;
      a3 = v21;
      uint64_t v15 = v20;
      a2 = v19;
      break;
    default:
LABEL_24:
      if (a3)
      {
        uint64_t v29 = a1;
        if (a3 != 1) {
          uint64_t v29 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v30.i64[0] = a1;
        v30.i64[1] = a2.u32[0];
        int32x4_t v31 = (int32x4_t)vmaxq_u32(v30, (uint32x4_t)xmmword_1B6E78280);
        uint64_t v29 = vmulq_laneq_s32(vmulq_lane_s32(v31, *(int32x2_t *)v31.i8, 1), v31, 2).u32[0];
      }
      uint64_t v25 = a5 % v29;
      break;
  }
  if (a3 == 1) {
    uint64_t v36 = v17;
  }
  else {
    uint64_t v36 = 0;
  }
  if (!a3)
  {
    float32x2_t v47 = vcvt_f32_u32((uint32x2_t)vext_s8(v13, a2, 4uLL));
    v48.f32[0] = (float)v13.u32[0];
    v48.i32[1] = v47.i32[0];
    v48.i64[1] = v47.u32[1];
    float32x4_t v49 = vmaxnmq_f32(v48, (float32x4_t)xmmword_1B6E4F540);
    __asm
    {
      FMOV            V0.4S, #1.0
      FMOV            V3.4S, #-1.0
    }
    float32x4_t v56 = vaddq_f32(v49, _Q3);
    v56.i32[3] = 0;
    float32x4_t v46 = vdivq_f32(_Q0, v49);
    float32x4_t v37 = vdivq_f32(v49, vmaxnmq_f32(v56, (float32x4_t)xmmword_1B6E4F540));
    uint64_t result = MEMORY[0x1E4FBC860];
LABEL_43:
    uint64_t v44 = result;
    goto LABEL_44;
  }
  float32x4_t v37 = 0uLL;
  if (a3 != 1)
  {
    uint64_t result = MEMORY[0x1E4FBC860];
    float32x4_t v46 = 0uLL;
    goto LABEL_43;
  }
  uint64_t v38 = a8;
  char v39 = a3;
  uint64_t v40 = v15;
  int8x8_t v41 = v13;
  int8x8_t v42 = a2;
  uint64_t v43 = v25;
  uint64_t v44 = sub_1B69A33B4(v36);
  uint64_t result = sub_1B69A34FC(v36);
  float32x4_t v37 = 0uLL;
  uint64_t v25 = v43;
  a2 = v42;
  int8x8_t v13 = v41;
  uint64_t v15 = v40;
  a3 = v39;
  a8 = v38;
  uint64_t v16 = a11;
  float32x4_t v46 = 0uLL;
LABEL_44:
  *(int8x8_t *)a9 = v13;
  *(int8x8_t *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 17) = a4;
  *(float32x4_t *)(a9 + 32) = v46;
  *(float32x4_t *)(a9 + 48) = v37;
  *(void *)(a9 + 64) = v25;
  *(void *)(a9 + 72) = v36;
  *(void *)(a9 + 80) = a6;
  *(void *)(a9 + 88) = a7;
  *(void *)(a9 + 96) = a8;
  *(void *)(a9 + 104) = v15;
  *(void *)(a9 + 112) = v16;
  *(void *)(a9 + 120) = a12;
  *(void *)(a9 + 128) = v44;
  *(void *)(a9 + 136) = result;
  return result;
}

uint64_t sub_1B69ABD50()
{
  unint64_t v0 = sub_1B6E337B8();
  swift_bridgeObjectRelease();
  if (v0 >= 0x13) {
    return 19;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B69ABDA4(void *a1)
{
  uint64_t v295 = *MEMORY[0x1E4F143B8];
  long long v212 = *((_OWORD *)a1 + 1);
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[6];
  swift_retain();
  uint64_t v202 = v3;
  uint64_t v197 = sub_1B6BFA930(v3, v2);
  uint64_t v195 = v4;
  float v6 = v5;
  char v178 = v7;
  int8x16_t v203 = (void **)a1;
  sub_1B6A81254();
  float v9 = v8;
  swift_retain();
  sub_1B62E9D50(*((void **)&v212 + 1), (uint64_t)v252);
  uint64_t v10 = v252[0];
  uint64_t v11 = v252[1];
  uint64_t v12 = v252[2];
  uint64_t v13 = v252[3];
  uint64_t v14 = v252[4];
  uint64_t v15 = v252[5];
  uint64_t v16 = v252[6];
  uint64_t v17 = v252[7];
  swift_release();
  sub_1B62AA520((uint64_t)v252, (uint64_t)v257, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
  if (v257[64])
  {
    float32x4_t v206 = (float32x4_t)xmmword_1B6E4F370;
    float32x4_t v207 = (float32x4_t)xmmword_1B6E4F2E0;
    float32x4_t v208 = (float32x4_t)xmmword_1B6E4F320;
    float32x4_t v209 = (float32x4_t)xmmword_1B6E4F300;
  }
  else
  {
    v18.i64[0] = v10;
    v18.i64[1] = v11;
    float32x4_t v209 = v18;
    v18.i64[0] = v12;
    v18.i64[1] = v13;
    float32x4_t v208 = v18;
    v18.i64[0] = v14;
    v18.i64[1] = v15;
    float32x4_t v207 = v18;
    v18.i64[0] = v16;
    v18.i64[1] = v17;
    float32x4_t v206 = v18;
  }
  swift_retain();
  unint64_t v19 = *((void *)&v212 + 1);
  BOOL v20 = sub_1B62EC0CC((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F510, *((uint64_t *)&v212 + 1));
  swift_release();
  long long v21 = (__int128)v209;
  long long v22 = (__int128)v208;
  long long v23 = (__int128)v207;
  long long v24 = (__int128)v206;
  BOOL v193 = v20;
  if (v6 > v9)
  {
    long long v21 = (__int128)v209;
    long long v22 = (__int128)v208;
    long long v23 = (__int128)v207;
    long long v24 = (__int128)v206;
    if (v20)
    {
      swift_retain();
      sub_1B6372CD8(*((void **)&v212 + 1), (uint64_t)v253);
      uint64_t v25 = v253[0];
      uint64_t v26 = v253[1];
      uint64_t v27 = v253[2];
      uint64_t v28 = v253[3];
      uint64_t v29 = v253[4];
      uint64_t v30 = v253[5];
      uint64_t v31 = v253[6];
      uint64_t v32 = v253[7];
      swift_release();
      sub_1B62AA520((uint64_t)v253, (uint64_t)v256, &qword_1EB97F810, (uint64_t)&type metadata for LastFrameWorldTransform);
      if (v256[64])
      {
        long long v24 = xmmword_1B6E4F370;
        long long v23 = xmmword_1B6E4F2E0;
        long long v22 = xmmword_1B6E4F320;
        long long v21 = xmmword_1B6E4F300;
      }
      else
      {
        *(void *)&long long v21 = v25;
        *((void *)&v21 + 1) = v26;
        *(void *)&long long v22 = v27;
        *((void *)&v22 + 1) = v28;
        *(void *)&long long v23 = v29;
        *((void *)&v23 + 1) = v30;
        *(void *)&long long v24 = v31;
        *((void *)&v24 + 1) = v32;
      }
      unint64_t v19 = *((void *)&v212 + 1);
    }
  }
  long long v189 = v24;
  long long v190 = v23;
  long long v191 = v22;
  long long v192 = v21;
  swift_retain();
  sub_1B62EF0E0(v19, (uint64_t)v213);
  swift_release();
  sub_1B62AA520((uint64_t)v213, (uint64_t)v250, (unint64_t *)&unk_1EB97DE90, (uint64_t)&type metadata for EmitterShape);
  sub_1B62AA520((uint64_t)v250, (uint64_t)v251, (unint64_t *)&unk_1EB97DE90, (uint64_t)&type metadata for EmitterShape);
  if (sub_1B62EF358((uint64_t)v251) == 1)
  {
    char v33 = 0;
    float v34 = 0.0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    char v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    char v43 = 1;
    long long v44 = xmmword_1B6E4F320;
    long long v45 = 0uLL;
    __asm { FMOV            V4.4S, #1.0 }
    unsigned int v50 = -1;
    float v51 = 1.0;
    float v52 = 0.5;
    int v53 = 255;
    int v54 = 2;
    int v55 = 0;
    int v56 = 1050253722;
    __int16 v57 = -13107;
    int v58 = 1045220557;
    uint64_t v59 = 1086918618;
    int v60 = 1086918618;
    char v61 = 1;
    int v62 = 0;
    int v63 = 2;
    int v64 = 0;
    char v65 = 2;
    int v66 = 0;
    char v67 = 2;
  }
  else
  {
    sub_1B62AA520((uint64_t)v250, (uint64_t)&v258, (unint64_t *)&unk_1EB97DE90, (uint64_t)&type metadata for EmitterShape);
    float v34 = v258;
    char v43 = v259;
    __int16 v210 = v260;
    char v211 = v261;
    int v55 = v262;
    int v60 = v263;
    uint64_t v35 = v264;
    uint64_t v36 = v265;
    int v54 = v266;
    char v37 = v267;
    char v61 = v268;
    v249[0] = *(void *)v269;
    uint64_t v38 = v270;
    *(void *)((char *)v249 + 5) = *(void *)&v269[5];
    uint64_t v39 = v271;
    int v63 = v272;
    uint64_t v40 = v274;
    *(void *)((char *)v248 + 7) = *(void *)&v273[7];
    v248[0] = *(void *)v273;
    uint64_t v41 = v275;
    int v53 = v276;
    char v65 = v277;
    __int16 v57 = v278;
    int v62 = v279;
    float v52 = v280;
    float v51 = v281;
    int v58 = v282;
    uint64_t v59 = v284;
    long long v44 = v285;
    int v56 = v283;
    int v64 = v286;
    int v66 = v287;
    unsigned int v50 = v288;
    uint64_t v42 = v289;
    char v67 = v290;
    v247[0] = *(void *)v291;
    *(void *)((char *)v247 + 7) = *(void *)&v291[7];
    _Q4 = v292;
    long long v45 = v293;
    char v33 = v294;
  }
  float v258 = v34;
  char v259 = v43;
  __int16 v260 = v210;
  char v261 = v211;
  int v188 = v55;
  int v262 = v55;
  int v263 = v60;
  uint64_t v204 = v35;
  uint64_t v264 = v35;
  uint64_t v265 = v36;
  unsigned int v170 = v36;
  unsigned __int8 v266 = v54;
  char v267 = v37;
  char v184 = v61;
  char v268 = v61;
  *(void *)float v269 = v249[0];
  *(void *)&v269[5] = *(void *)((char *)v249 + 5);
  uint64_t v270 = v38;
  uint64_t v167 = v40;
  uint64_t v168 = v38;
  uint64_t v271 = v39;
  int v201 = v63;
  unsigned __int8 v272 = v63;
  *(void *)unint64_t v273 = v248[0];
  *(void *)&v273[7] = *(void *)((char *)v248 + 7);
  uint64_t v274 = v40;
  uint64_t v275 = v41;
  int v199 = v53;
  unsigned __int8 v276 = v53;
  char v169 = v65;
  char v277 = v65;
  __int16 v278 = v57;
  int v279 = v62;
  float v280 = v52;
  float v281 = v51;
  int v282 = v58;
  uint64_t v284 = v59;
  long long v186 = v45;
  long long v187 = v44;
  long long v285 = v44;
  int v283 = v56;
  int v286 = v64;
  int v287 = v66;
  unsigned int v288 = v50;
  unsigned int v289 = v42;
  char v290 = v67;
  *(void *)float v291 = v247[0];
  *(void *)&v291[7] = *(void *)((char *)v247 + 7);
  long long v185 = _Q4;
  long long v292 = _Q4;
  long long v293 = v45;
  char v183 = v33;
  char v294 = v33;
  *(double *)&long long v68 = sub_1B69A817C(v209, v208, v207);
  long long v182 = v68;
  *(double *)&long long v69 = sub_1B69A82F8(v209, v208, v207);
  long long v181 = v69;
  int v205 = v54;
  float v200 = v34;
  if (v178)
  {
    unsigned int v174 = v50;
    uint64_t v176 = v42;
    char v179 = v43;
    sub_1B633C690(v19, 0, 0, 1, 0, 0, 1, 0, (uint64_t)v254, *(int32x2_t *)&v69, 0, 1);
    uint64_t v70 = v254[0];
    uint64_t v71 = v254[1];
    uint64_t v72 = v254[2];
    uint64_t v73 = v254[3];
    uint64_t v74 = v254[4];
    uint64_t v75 = v254[5];
    uint64_t v76 = v254[6];
    uint64_t v77 = v254[7];
    sub_1B69ACDFC((uint64_t)v254, (uint64_t)v255, (unint64_t *)&qword_1EB97D810, type metadata accessor for simd_float4x4);
    if (v255[64])
    {
      float32x4_t v173 = (float32x4_t)xmmword_1B6E4F370;
      float32x4_t v78 = &unk_1B6E4F000;
      float32x4_t v79 = (float32x4_t)xmmword_1B6E4F2E0;
      float32x4_t v80 = &unk_1B6E4F000;
      float32x4_t v81 = (float32x4_t)xmmword_1B6E4F320;
      uint64_t v82 = &unk_1B6E4F000;
      float32x4_t v83 = (float32x4_t)xmmword_1B6E4F300;
      int v54 = v205;
      float v34 = v200;
      char v43 = v179;
    }
    else
    {
      v83.i64[0] = v70;
      v83.i64[1] = v71;
      v81.i64[0] = v72;
      v81.i64[1] = v73;
      v79.i64[0] = v74;
      v79.i64[1] = v75;
      v88.i64[0] = v76;
      v88.i64[1] = v77;
      float32x4_t v173 = v88;
      int v54 = v205;
      float v34 = v200;
      char v43 = v179;
      float32x4_t v78 = &unk_1B6E4F000;
      float32x4_t v80 = &unk_1B6E4F000;
      uint64_t v82 = &unk_1B6E4F000;
    }
    uint64_t v42 = v176;
    unsigned int v50 = v174;
  }
  else
  {
    *(double *)v84.i64 = sub_1B6335378();
    float32x4_t v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, v209.f32[0]), v85, *(float32x2_t *)v209.f32, 1), v86, v209, 2), v87, v209, 3);
    float32x4_t v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, v208.f32[0]), v85, *(float32x2_t *)v208.f32, 1), v86, v208, 2), v87, v208, 3);
    float32x4_t v79 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, v207.f32[0]), v85, *(float32x2_t *)v207.f32, 1), v86, v207, 2), v87, v207, 3);
    float32x4_t v173 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, v206.f32[0]), v85, *(float32x2_t *)v206.f32, 1), v86, v206, 2), v87, v206, 3);
    float32x4_t v78 = (_OWORD *)&unk_1B6E4F000;
    float32x4_t v80 = (_OWORD *)&unk_1B6E4F000;
    uint64_t v82 = (_OWORD *)&unk_1B6E4F000;
  }
  int32x4_t v89 = (int32x4_t)vmulq_f32(v83, v83);
  float32x4_t v90 = vmulq_f32(v81, v81);
  int32x4_t v91 = (int32x4_t)vmulq_f32(v79, v79);
  int32x4_t v92 = vzip2q_s32(v89, v91);
  float32x4_t v93 = (float32x4_t)vzip1q_s32(vzip1q_s32(v89, v91), (int32x4_t)v90);
  float32x4_t v94 = (float32x4_t)vtrn2q_s32(v89, (int32x4_t)v90);
  v94.i32[2] = v91.i32[1];
  float32x4_t v95 = vaddq_f32((float32x4_t)vzip1q_s32(v92, vdupq_laneq_s32((int32x4_t)v90, 2)), vaddq_f32(v93, v94));
  v90.i64[0] = 0x80000000800000;
  v90.i64[1] = 0x80000000800000;
  int32x4_t v96 = vcgeq_f32(v90, v95);
  v95.i32[3] = 0;
  float32x4_t v97 = vrsqrteq_f32(v95);
  float32x4_t v98 = vmulq_f32(v97, vrsqrtsq_f32(v95, vmulq_f32(v97, v97)));
  int32x4_t v99 = v96;
  v99.i32[3] = 0;
  float32x4_t v100 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v99), (int8x16_t)v95, (int8x16_t)vmulq_f32(v98, vrsqrtsq_f32(v95, vmulq_f32(v98, v98))));
  float32x4_t v177 = v81;
  float32x4_t v180 = v83;
  float32x4_t v101 = vmulq_n_f32(v83, v100.f32[0]);
  float32x4_t v102 = vmulq_lane_f32(v81, *(float32x2_t *)v100.f32, 1);
  float32x4_t v175 = v79;
  float32x4_t v103 = vmulq_laneq_f32(v79, v100, 2);
  int8x16_t v104 = (int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103);
  int8x16_t v105 = (int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102);
  int32x4_t v106 = (int32x4_t)v101;
  if (v96.i32[0])
  {
    int8x16_t v107 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v104, (int8x16_t)v103, 0xCuLL), vnegq_f32(v102)), v103, (float32x4_t)vextq_s8(v105, (int8x16_t)v102, 0xCuLL));
    int32x4_t v106 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), v107, 0xCuLL);
  }
  int8x16_t v108 = (int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101);
  float32x4_t v109 = v102;
  if (v96.i32[1])
  {
    int8x16_t v110 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v108, (int8x16_t)v101, 0xCuLL), vnegq_f32(v103)), v101, (float32x4_t)vextq_s8(v104, (int8x16_t)v103, 0xCuLL));
    float32x4_t v109 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), v110, 0xCuLL);
  }
  if (v96.i32[2])
  {
    int8x16_t v111 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v105, (int8x16_t)v102, 0xCuLL), vnegq_f32(v101)), v102, (float32x4_t)vextq_s8(v108, (int8x16_t)v101, 0xCuLL));
    float32x4_t v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v111, (int32x4_t)v111), v111, 0xCuLL);
  }
  float v112 = (float)(*(float *)v106.i32 + v109.f32[1]) + v103.f32[2];
  if (v112 <= 0.0)
  {
    if (*(float *)v106.i32 < v109.f32[1] || *(float *)v106.i32 < v103.f32[2])
    {
      if (v109.f32[1] <= v103.f32[2])
      {
        float v114 = sqrtf((float)((float)(v103.f32[2] + 1.0) - *(float *)v106.i32) - v109.f32[1]);
        *(float32x2_t *)v129.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v106, (int32x4_t)v109), *(float32x2_t *)v103.f32);
        float32x2_t v130 = (float32x2_t)__PAIR64__(v106.u32[1], LODWORD(v114));
        float32x2_t v131 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.f32, 0);
        *(float32x2_t *)v117.f32 = vsub_f32(*(float32x2_t *)v106.i8, v131);
        v131.f32[0] = v114;
        v130.i32[0] = vmul_f32(v130, v131).u32[0];
        v130.i32[1] = v117.i32[1];
        *(float32x2_t *)&v129.u32[2] = v130;
        float32x4_t v172 = v129;
        goto LABEL_36;
      }
      float v122 = sqrtf((float)((float)(v109.f32[1] + 1.0) - *(float *)v106.i32) - v103.f32[2]);
      *(int32x2_t *)v102.f32 = vdup_laneq_s32((int32x4_t)v109, 2);
      int8x16_t v119 = (int8x16_t)v102;
      *(float *)v119.i32 = v122;
      v119.i32[0] = vmul_f32(*(float32x2_t *)v119.i8, (float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v122))).u32[0];
      v119.i32[1] = vadd_f32(*(float32x2_t *)&v102, *(float32x2_t *)&v103).i32[1];
      int8x16_t v120 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.i8, 1), v109);
      int32x2_t v128 = (int32x2_t)vsubq_f32(v103, (float32x4_t)vdupq_laneq_s32(v106, 2)).u64[0];
      int8x16_t v121 = vextq_s8(vextq_s8(v120, v120, 4uLL), v119, 0xCuLL);
      v121.i32[3] = v128.i32[0];
      float32x4_t v171 = (float32x4_t)v121;
    }
    else
    {
      float v122 = sqrtf((float)((float)(*(float *)v106.i32 + 1.0) - v109.f32[1]) - v103.f32[2]);
      float32x2_t v123 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.f32, 0);
      float32x2_t v124 = vadd_f32(*(float32x2_t *)v106.i8, v123);
      v123.f32[0] = v122;
      v125.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v106.u32[1], LODWORD(v122)), v123).u32[0];
      v125.i32[1] = v124.i32[1];
      float32x2_t v126 = (float32x2_t)vzip2q_s32(v106, (int32x4_t)v109).u64[0];
      LODWORD(v127) = vadd_f32(v126, *(float32x2_t *)v103.f32).u32[0];
      int32x2_t v128 = (int32x2_t)vsub_f32(v126, *(float32x2_t *)v103.f32);
      HIDWORD(v127) = v128.i32[1];
      v125.i64[1] = v127;
      float32x4_t v171 = v125;
    }
    *(float *)v128.i32 = 0.5 / v122;
    float32x4_t v172 = (float32x4_t)vdupq_lane_s32(v128, 0);
    goto LABEL_37;
  }
  float32x4_t v113 = (float32x4_t)vzip2q_s32((int32x4_t)v109, vuzp1q_s32((int32x4_t)v109, (int32x4_t)v103));
  v113.i32[2] = v106.i32[1];
  float v114 = sqrtf(v112 + 1.0);
  float32x4_t v115 = (float32x4_t)vtrn2q_s32((int32x4_t)v103, vzip2q_s32((int32x4_t)v103, v106));
  v115.i32[2] = v109.i32[0];
  float32x4_t v116 = vsubq_f32(v113, v115);
  v113.f32[3] = v114;
  v115.f32[3] = v114;
  float32x4_t v117 = vmulq_f32(v113, v115);
  v116.i32[3] = v117.i32[3];
  float32x4_t v172 = v116;
LABEL_36:
  v117.f32[0] = 0.5 / v114;
  float32x4_t v171 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.f32, 0);
LABEL_37:
  unint64_t v132 = v50 | (unint64_t)(v42 << 32);
  unint64_t v133 = sub_1B695E910(v132);
  long long v134 = 0uLL;
  uint32x4_t v135 = 0uLL;
  if (!v54)
  {
    v136.i64[0] = v204;
    v136.i64[1] = v170;
    uint32x4_t v135 = vmaxq_u32(v136, (uint32x4_t)xmmword_1B6E78280);
  }
  if (v133 == 5)
  {
    LODWORD(v137) = 0;
  }
  else
  {
    unint64_t v137 = HIDWORD(v133);
    long long v134 = xmmword_1B6E51B70;
    switch((char)v133)
    {
      case 1:
        long long v134 = v80[50];
        break;
      case 2:
        long long v134 = v78[46];
        break;
      case 3:
        long long v134 = xmmword_1B6E4F370;
        break;
      case 4:
        break;
      default:
        long long v134 = v82[48];
        break;
    }
  }
  char v138 = v43;
  if (v43) {
    float v139 = 0.0;
  }
  else {
    float v139 = v34;
  }
  if (v54 == 1)
  {
    if (v204 <= 1) {
      int v54 = 1;
    }
    else {
      int v54 = v204;
    }
    uint64_t v140 = (v197 - v195) % v204;
    BOOL v141 = v193;
  }
  else
  {
    uint64_t v140 = v197 - v195;
    BOOL v141 = v193;
    if (v54)
    {
      int v54 = 0;
    }
    else
    {
      v142.i64[0] = v204;
      v142.i64[1] = v170;
      int32x4_t v143 = (int32x4_t)vmaxq_u32(v142, (uint32x4_t)xmmword_1B6E78280);
      v140 %= (uint64_t)vmulq_laneq_s32(vmulq_lane_s32(v143, *(int32x2_t *)v143.i8, 1), v143, 2).u32[0];
    }
  }
  float32x4_t v144 = vmulq_f32(v172, v171);
  if (v141)
  {
    uint32x4_t v196 = v135;
    long long v198 = v134;
    float32x4_t v194 = v144;
    char v145 = sub_1B6A81544();
    float32x4_t v144 = v194;
    uint32x4_t v135 = v196;
    long long v134 = v198;
    int v146 = v169;
    if (v145) {
      int v146 = 0;
    }
  }
  else
  {
    int v146 = 0;
  }
  *(float32x2_t *)&long long v147 = vcvt_f32_u32(*(uint32x2_t *)v135.i8);
  *((float *)&v147 + 2) = (float)v135.u32[2];
  HIDWORD(v147) = 0;
  v213[0] = v147;
  v213[1] = v182;
  v213[2] = v181;
  int v214 = v188;
  int v215 = v60;
  float v216 = v52;
  float v217 = v51;
  int v218 = v58;
  int v219 = v56;
  long long v220 = v187;
  int v221 = v64;
  int v222 = v66;
  long long v223 = v185;
  long long v224 = v186;
  float32x4_t v225 = v209;
  float32x4_t v226 = v208;
  float32x4_t v227 = v207;
  float32x4_t v228 = v206;
  long long v229 = v192;
  long long v230 = v191;
  long long v231 = v190;
  long long v232 = v189;
  float32x4_t v233 = v144;
  float32x4_t v234 = v180;
  float32x4_t v235 = v177;
  float32x4_t v236 = v175;
  float32x4_t v237 = v173;
  long long v238 = v134;
  int v239 = v137;
  float v240 = v139;
  int v241 = v54;
  int v242 = v140;
  int v243 = v146;
  char v244 = v184 & 1;
  char v245 = v183 & 1;
  BOOL v246 = v141;
  float32x4_t v148 = *v203;
  if (*v203)
  {
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for emitter_shape_uniforms(0);
    sub_1B6B594A8((uint64_t)v213, 1, ObjectType, v150, v151, v152, v153, v154);
    char v155 = v205;
    char v156 = v138;
    if (v205 == 1)
    {
      if ((v204 & 0xFFFFFFFE) != 0) {
        uint64_t v157 = v204;
      }
      else {
        uint64_t v157 = 1;
      }
      swift_unknownObjectRetain();
      uint64_t v158 = sub_1B69A34FC(v157);
      objc_msgSend(v148, sel_setBytes_length_atIndex_, v158 + 32, 16 * *(void *)(v158 + 16), 6);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v159 = sub_1B62EBE70(v132, v213);
    objc_msgSend(v148, sel_setTexture_atIndex_, v159, 0);
  }
  else
  {
    uint64_t v159 = sub_1B62EBE70(v132, v213);
    char v155 = v205;
    char v156 = v138;
  }
  sub_1B62AA5A0(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
  uint64_t v160 = swift_allocObject();
  uint64_t v161 = v160;
  *(_OWORD *)(v160 + 16) = xmmword_1B6E76900;
  if (v156) {
    uint64_t v162 = qword_1B6E9A598[SLODWORD(v200)];
  }
  else {
    uint64_t v162 = 5;
  }
  *(_OWORD *)(v160 + 32) = xmmword_1B6E99E10;
  *(unsigned char *)(v160 + 48) = 0;
  *(void *)(v160 + 64) = v162;
  *(_OWORD *)(v160 + 72) = 0u;
  *(_OWORD *)(v160 + 88) = 0u;
  *(_OWORD *)(v160 + 104) = 0u;
  *(void *)(v160 + 120) = 0;
  uint64_t v163 = qword_1B6E9A5C8[v155];
  *(unsigned char *)(v160 + 128) = 14;
  *(_OWORD *)(v160 + 144) = xmmword_1B6E99E20;
  *(unsigned char *)(v160 + 160) = 0;
  *(void *)(v160 + 176) = v163;
  *(_OWORD *)(v160 + 184) = 0u;
  *(_OWORD *)(v160 + 200) = 0u;
  *(_OWORD *)(v160 + 216) = 0u;
  *(void *)(v160 + 232) = 0;
  *(unsigned char *)(v160 + 240) = 14;
  if (v199 > 1)
  {
    if (v199 == 255) {
      uint64_t v164 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v164 = v167 + 2;
    }
  }
  else
  {
    uint64_t v164 = v199 != 0;
  }
  *(_OWORD *)(v160 + 256) = xmmword_1B6E99E30;
  *(unsigned char *)(v160 + 272) = 0;
  *(void *)(v160 + 288) = v164;
  *(void *)(v160 + 344) = 0;
  *(_OWORD *)(v160 + 296) = 0u;
  *(_OWORD *)(v160 + 312) = 0u;
  *(_OWORD *)(v160 + 328) = 0u;
  *(unsigned char *)(v160 + 352) = 14;
  if (v201)
  {
    if (v201 == 1) {
      uint64_t v165 = 1;
    }
    else {
      uint64_t v165 = v168 + 2;
    }
  }
  else
  {
    uint64_t v165 = 0;
  }
  *(_OWORD *)(v160 + 368) = xmmword_1B6E99E40;
  *(unsigned char *)(v160 + 384) = 0;
  *(void *)(v160 + 400) = v165;
  *(void *)(v160 + 456) = 0;
  *(_OWORD *)(v160 + 408) = 0uLL;
  *(_OWORD *)(v160 + 424) = 0uLL;
  *(_OWORD *)(v160 + 440) = 0uLL;
  *(unsigned char *)(v160 + 464) = 14;
  *(_OWORD *)(v160 + 480) = xmmword_1B6E99E50;
  *(unsigned char *)(v160 + 496) = 0;
  *(void *)(v160 + 512) = v159 != 0;
  *(void *)(v160 + 568) = 0;
  *(_OWORD *)(v160 + 520) = 0uLL;
  *(_OWORD *)(v160 + 536) = 0uLL;
  *(_OWORD *)(v160 + 552) = 0uLL;
  *(unsigned char *)(v160 + 576) = 13;
  swift_retain();
  sub_1B6786A24((uint64_t)v203);
  sub_1B6BFF388(v202, v2, v148 == 0, v161, (uint64_t)v203, 0x5F72657474696D65, 0xED00006570616873, 0);
  sub_1B6786A7C((uint64_t)v203);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B69ACCF4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62AA450(255, (unint64_t *)&unk_1EB980EC0, (uint64_t (*)(void))sub_1B675900C, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC2A8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B69ACDA8()
{
  unint64_t result = qword_1E9DD33F0;
  if (!qword_1E9DD33F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD33F0);
  }
  return result;
}

uint64_t sub_1B69ACDFC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_1B62F6ED4(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B69ACE68()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

double sub_1B69ACE78(__n128 a1)
{
  return sub_1B69A2DC8(a1, *(float *)(v1 + 16), *(float *)(v1 + 20));
}

uint64_t sub_1B69ACE80()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

double sub_1B69ACE90(float32x4_t a1)
{
  return sub_1B69A2EB8(a1, *(float *)(v1 + 16), *(float *)(v1 + 20));
}

uint64_t sub_1B69ACE98(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B69ACECC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

double sub_1B69ACEDC(double _D0)
{
  _S3 = -2.0;
  __asm { FMLA            S5, S3, V0.S[1] }
  __int32 v13 = LODWORD(_S5);
  float v8 = sqrtf(1.0 - (float)(_S5 * _S5));
  __float2 v9 = __sincosf_stret(vmlas_n_f32(*(float *)(v1 + 16), *(float *)(v1 + 20) - *(float *)(v1 + 16), *(float *)&_D0));
  v10.f32[0] = v8 * v9.__cosval;
  v10.i32[1] = v13;
  v10.f32[2] = v8 * v9.__sinval;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  *(void *)&double result = vmulq_f32(v10, v11).u64[0];
  return result;
}

uint64_t sub_1B69ACF4C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

double sub_1B69ACF5C(double a1)
{
  float v2 = vmlas_n_f32(*(float *)(v1 + 16), *(float *)(v1 + 20) - *(float *)(v1 + 16), *(float *)&a1);
  __float2 v3 = __sincosf_stret((float)(1.0 - *((float *)&a1 + 1)) * 3.1416);
  float v4 = fmaxf(v3.__sinval, 0.0000001);
  __float2 v5 = __sincosf_stret(v2);
  v6.f32[0] = v4 * v5.__cosval;
  v6.i32[1] = LODWORD(v3.__cosval);
  v6.f32[2] = v4 * v5.__sinval;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  *(void *)&double result = vmulq_f32(v6, v7).u64[0];
  return result;
}

ValueMetadata *type metadata accessor for EmitterShape.Direction()
{
  return &type metadata for EmitterShape.Direction;
}

ValueMetadata *type metadata accessor for EmissionOrder()
{
  return &type metadata for EmissionOrder;
}

ValueMetadata *type metadata accessor for ShapeDistribution()
{
  return &type metadata for ShapeDistribution;
}

uint64_t getEnumTagSinglePayload for EmitterShape(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 209)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 34);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EmitterShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 208) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 209) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 209) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 34) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmitterShape()
{
  return &type metadata for EmitterShape;
}

ValueMetadata *type metadata accessor for EmitterShape.Shape()
{
  return &type metadata for EmitterShape.Shape;
}

ValueMetadata *type metadata accessor for MotionDistribution()
{
  return &type metadata for MotionDistribution;
}

uint64_t sub_1B69AD168()
{
  return sub_1B69AD198(&qword_1E9DD33F8, &qword_1E9DD3400, (uint64_t)&type metadata for MotionDistribution);
}

uint64_t sub_1B69AD198(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62AA5A0(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B69AD200()
{
  unint64_t result = qword_1E9DD3408;
  if (!qword_1E9DD3408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3408);
  }
  return result;
}

uint64_t sub_1B69AD254()
{
  return sub_1B69AD198(&qword_1E9DD3410, &qword_1E9DD3418, (uint64_t)&type metadata for EmitterShape.Shape);
}

uint64_t sub_1B69AD284()
{
  return sub_1B69AD198(&qword_1E9DD3420, &qword_1E9DD3428, (uint64_t)&type metadata for ShapeDistribution);
}

uint64_t sub_1B69AD2B4()
{
  return sub_1B69AD198(&qword_1E9DD3430, &qword_1E9DD3438, (uint64_t)&type metadata for EmissionOrder);
}

unint64_t sub_1B69AD2E8()
{
  unint64_t result = qword_1E9DD3440;
  if (!qword_1E9DD3440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3440);
  }
  return result;
}

uint64_t sub_1B69AD33C()
{
  return sub_1B69AD198(&qword_1E9DD3448, &qword_1E9DD3450, (uint64_t)&type metadata for EmitterShape.Direction);
}

uint64_t getEnumTagSinglePayload for EmitterShape.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x13;
  int v8 = v6 - 19;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for EmitterShape.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *unint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69AD4C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EmitterShape.CodingKeys()
{
  return &type metadata for EmitterShape.CodingKeys;
}

unint64_t sub_1B69AD504()
{
  unint64_t result = qword_1E9DD3468;
  if (!qword_1E9DD3468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3468);
  }
  return result;
}

double sub_1B69AD560@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1B6E98660;
  *(void *)(a1 + 16) = 0xFF00000000;
  return result;
}

float sub_1B69AD578@<S0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B698B528(0, (unint64_t *)&unk_1E9DD6DA0, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  float32x4_t v10 = (char *)&v13 - v9;
  long long v13 = xmmword_1B6E98660;
  uint64_t v14 = 0xFF00000000;
  sub_1B689291C(a1, 0);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    float result = *(float *)&v14;
    int v12 = HIDWORD(v14);
    *(_OWORD *)a2 = v13;
    *(float *)(a2 + 16) = result;
    *(_DWORD *)(a2 + 20) = v12;
  }
  return result;
}

uint64_t sub_1B69AD6C0(void *a1)
{
  sub_1B698B528(0, &qword_1E9DD1BC0, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  long long v11 = *v1;
  uint64_t v12 = *((void *)v1 + 2);
  uint64_t result = sub_1B6891EB8(a1, (uint64_t)&v11 - v8);
  if (!v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

double sub_1B69AD7D4()
{
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1EB997A18;
  int v4 = 0;
  char v5 = 2;
  uint64_t v6 = 0;
  char v7 = 2;
  uint64_t v8 = 0;
  swift_retain();
  sub_1B67A7318((uint64_t)v1);
  swift_release();
  double result = *(double *)v1;
  xmmword_1E9E494E0 = v1[0];
  *(_OWORD *)algn_1E9E494F0 = v1[1];
  qword_1E9E49500 = v2;
  return result;
}

uint64_t *sub_1B69AD880(uint64_t a1, uint64_t a2)
{
  float v5 = *(float *)(v2 + 160);
  if (qword_1E9DCC540 != -1) {
    swift_once();
  }
  v54[0] = xmmword_1E9E494E0;
  v54[1] = *(_OWORD *)algn_1E9E494F0;
  uint64_t v55 = qword_1E9E49500;
  uint64_t v6 = a2 & 0xFFFFFFFFFFLL;
  sub_1B62C9DA8(a1, (uint64_t)v54, a2 & 0xFFFFFFFFFFLL, v40);
  double result = (uint64_t *)sub_1B62CA210((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v41[0])
  {
    long long v48 = v41[0];
    long long v49 = v41[1];
    uint64_t v50 = v42;
    if (v47 >= 1)
    {
      uint64_t v33 = v44;
      if (v44)
      {
        uint64_t v31 = v43;
        uint64_t v8 = v46[4];
        int i = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v39 = v46;
        uint64_t v28 = v46 + 8;
        uint64_t v29 = (uint64_t)(v46 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v10 = 0;
        int v30 = i;
        uint64_t v32 = v8;
        uint64_t v27 = v2;
        do
        {
          long long v11 = (unsigned int *)(v31 + 48 * v10);
          uint64_t v35 = *v11;
          uint64_t v12 = *((void *)v11 + 3);
          uint64_t v14 = *((void *)v11 + 4);
          uint64_t v13 = *((void *)v11 + 5);
          uint64_t v36 = (uint64_t *)*((void *)v11 + 2);
          uint64_t v37 = v10;
          uint64_t v34 = v11[1];
          if (i)
          {
            uint64_t v15 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v8);
          sub_1B62CA210(v29, (uint64_t)v53, &qword_1EB97DE20);
          uint64_t v16 = v39[4];
          uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v13 + 40) + 16) + 32) + 16) + 1;
          uint64_t v18 = v13;
          swift_retain();
          v39[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v39[7] = v17;
          v28[1] = 0;
          v28[2] = 0;
          *uint64_t v28 = 0;
          swift_release();
          unint64_t v19 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1F0F92BD0, v36, v12, v14, (uint64_t)v39);
          BOOL v20 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v36, v12, v14, (uint64_t)v39);
          uint64_t v38 = v18;
          uint64_t v21 = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v36, v12, v14, (uint64_t)v39);
          uint64_t v22 = v21;
          if (v36)
          {
            for (int i = v30; v14; --v14)
            {
              sub_1B69AF18C(v19, v20, v22, v27, v6, a1, v5);
              v22 += 64;
              v20 += 4;
              v19 += 3;
            }
          }
          else
          {
            int i = v30;
            if (v35 != v34)
            {
              uint64_t v23 = v34 - v35;
              uint64_t v24 = v21 + (v35 << 6);
              uint64_t v25 = &v20[4 * v35];
              uint64_t v26 = &v19[3 * v35];
              do
              {
                sub_1B69AF18C(v26, v25, v24, v27, v6, a1, v5);
                v24 += 64;
                v25 += 4;
                v26 += 3;
                --v23;
              }
              while (v23);
            }
          }
          v51[0] = v48;
          v51[1] = v49;
          uint64_t v52 = v50;
          sub_1B6345178(v39, (unsigned __int16 **)v51, (uint64_t)v53);
          sub_1B634507C((char *)v38);
          uint64_t v8 = v32;
          ecs_stack_allocator_pop_snapshot(v32);
          if (i)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 376));
          }
          swift_release();
          uint64_t v10 = v37 + 1;
        }
        while (v37 + 1 != v33);
        sub_1B632F170(v40);
      }
    }
    return sub_1B632F170(v40);
  }
  return result;
}

uint64_t sub_1B69ADCE8(long long *a1, long long *a2, uint64_t a3, uint64_t a4, unint64_t a5, float a6)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (uint64_t *)*((void *)a1 + 11);
  uint64_t v10 = *((void *)a1 + 12);
  uint64_t v11 = *((void *)a1 + 13);
  uint64_t v12 = *((void *)a1 + 1);
  uint64_t v13 = *((void *)a1 + 2);
  uint64_t v100 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v9, v10, v11, v13);
  uint64_t v14 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v9, v10, v11, v13);
  uint64_t v90 = sub_1B67A819C();
  char v98 = v15;
  uint64_t v95 = sub_1B63459F8();
  char v17 = v16;
  long long v106 = *a2;
  long long v110 = *(_OWORD *)(a3 + 112);
  long long v18 = a1[3];
  long long v116 = a1[2];
  long long v19 = *a1;
  long long v115 = a1[1];
  long long v114 = v19;
  long long v120 = a1[6];
  long long v20 = a1[4];
  long long v119 = a1[5];
  long long v118 = v20;
  int8x16_t v108 = &type metadata for CollisionProperties;
  float32x4_t v109 = &off_1F0F7C560;
  uint64_t v107 = *((void *)a2 + 2);
  uint64_t v21 = *(void *)(a4 + 16);
  long long v117 = v18;
  uint64_t v23 = *((void *)a1 + 6);
  uint64_t v22 = *((void *)a1 + 7);
  uint64_t v24 = *(void *)(v13 + 32);
  swift_retain();
  int8x16_t v121 = ecs_stack_allocator_allocate(v24, 8 * (v22 - v23), 8);
  uint64_t v122 = v22 - v23;
  uint64_t v123 = 0;
  sub_1B62C1550((uint64_t)&v106, (uint64_t)v111);
  float v112 = a6;
  v111[5] = v21;
  sub_1B6345398(*(void *)(v12 + 40), (uint64_t)&type metadata for Anchored, &v105);
  char v113 = v105;
  swift_retain();
  uint64_t v25 = ecs_stack_allocator_allocate(v24, 80 * (v22 - v23), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v106);
  uint64_t v30 = v100;
  float v31 = a6;
  float32x2_t v124 = v25;
  uint64_t v125 = v22 - v23;
  uint64_t v126 = 0;
  if (v22 != v23)
  {
    float v33 = *(float *)(a4 + 80) * 0.5;
    float32x4_t v34 = *(float32x4_t *)a3;
    float32x4_t v35 = *(float32x4_t *)(a3 + 16);
    float32x4_t v36 = *(float32x4_t *)(a3 + 32);
    float32x4_t v37 = *(float32x4_t *)(a3 + 48);
    float v38 = *(float *)(a3 + 128);
    float v39 = *(float *)(a3 + 132);
    uint64_t v40 = 16 * v23;
    v27.i32[0] = 1.0;
    float32x4_t v93 = v35;
    float32x4_t v94 = *(float32x4_t *)a3;
    float32x4_t v91 = v37;
    float32x4_t v92 = v36;
    do
    {
      if (v17)
      {
        __asm { FMOV            V2.4S, #1.0 }
        HIDWORD(_Q2) = HIDWORD(v28);
        long long v28 = _Q2;
      }
      else
      {
        _Q2 = *(_OWORD *)(v95 + 16 * v23);
      }
      float v52 = v33 * fmaxf(fmaxf(*(float *)&_Q2, *((float *)&_Q2 + 2)), *((float *)&_Q2 + 1));
      float32x4_t v53 = vmulq_n_f32(*(float32x4_t *)(v14 + 16 * v23), v31);
      float32x4_t v54 = *(float32x4_t *)(v30 + 16 * v23);
      float32x4_t v55 = vsubq_f32(v54, v53);
      float32x4_t v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v55.f32[0]), v35, *(float32x2_t *)v55.f32, 1), v36, v55, 2), v37, v55, 3);
      float32x4_t v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v53.f32[0]), v35, *(float32x2_t *)v53.f32, 1), v36, v53, 2), v37, v53, 3);
      float v58 = v38 + v52;
      float32x4_t v59 = vmulq_f32(v57, v57);
      float32x4_t v60 = vmulq_f32(v57, v56);
      v60.f32[0] = vaddq_f32(v60, (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2)).f32[0];
      float v61 = v60.f32[0] + v60.f32[0];
      float32x4_t v62 = vmulq_f32(v56, v56);
      float v63 = (float)((float)((float)(v59.f32[0] + v59.f32[2]) * -4.0)
                  * (float)(vaddq_f32(v62, (float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2)).f32[0] - (float)(v58 * v58)))
          + (float)(v61 * v61);
      if (v63 >= 0.0)
      {
        float v64 = fmaxf(v59.f32[0] + v59.f32[2], 0.00000011921);
        float v65 = (float)((float)-v61 - sqrtf(v63)) / (float)(v64 + v64);
        if (v65 <= *(float *)v27.i32)
        {
          float v66 = v39 + v52;
          float v67 = fminf(v52, fminf(v58, v39 + v52));
          float v68 = fabsf(COERCE_FLOAT(vmlaq_n_f32(v56, v57, v65).i32[1]));
          float v69 = v66 - v67;
          if (v68 <= (float)(v66 - v67)) {
            goto LABEL_27;
          }
          if (v68 >= v66)
          {
            v54.i32[0] = v57.i32[1];
            v85.i64[0] = 0x8000000080000000;
            v85.i64[1] = 0x8000000080000000;
            LODWORD(v86) = vbslq_s8(v85, v27, (int8x16_t)v54).u32[0];
            if (v57.f32[1] == 0.0) {
              float v86 = 0.0;
            }
            float v65 = (float)-(float)(v56.f32[1] + (float)(v86 * v66)) / v57.f32[1];
            if (v65 > *(float *)v27.i32) {
              goto LABEL_6;
            }
            float32x4_t v87 = vmlaq_n_f32(v56, v57, v65);
            float32x4_t v88 = vmulq_f32(v87, v87);
            float v89 = vaddq_f32(v88, (float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2)).f32[0];
            if (v89 > (float)(v58 * v58)) {
              goto LABEL_6;
            }
            if (v89 <= (float)((float)(v58 - v67) * (float)(v58 - v67))) {
              goto LABEL_27;
            }
          }
          float v70 = v59.f32[2] + vaddv_f32(*(float32x2_t *)v59.f32);
          if (v70 >= 0.00000011921)
          {
            float v71 = v58 - v67;
            float32x4_t v72 = v56;
            v72.i32[1] = 0;
            int8x16_t v77 = (int8x16_t)vmulq_f32(v72, v72);
            v77.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v77, 2), vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1))).u32[0];
            float32x2_t v73 = vrsqrte_f32((float32x2_t)v77.u32[0]);
            float32x2_t v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v77.u32[0], vmul_f32(v73, v73)));
            *(float32x2_t *)v77.i8 = vmul_f32(v74, vrsqrts_f32((float32x2_t)v77.u32[0], vmul_f32(v74, v74)));
            v75.i32[0] = 0;
            v75.i64[1] = 0;
            v75.f32[1] = v69;
            float32x4_t v76 = vmulq_n_f32(v72, *(float *)v77.i32);
            v77.i32[0] = v57.i32[1];
            v78.i64[0] = 0x8000000080000000;
            v78.i64[1] = 0x8000000080000000;
            LODWORD(v79) = vbslq_s8(v78, v27, v77).u32[0];
            *(float *)v77.i32 = v57.f32[1] == 0.0 ? 0.0 : v79;
            float32x4_t v80 = vsubq_f32(v56, vmlaq_n_f32(vmulq_f32(v75, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.i8, 0))), v76, v71));
            float32x4_t v81 = vmulq_f32(v57, v80);
            LODWORD(v82) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).u32[0];
            float32x4_t v83 = vmulq_f32(v80, v80);
            float v84 = vmlas_n_f32(-(float)(v70* (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0]- (float)(v67 * v67))), v82, v82);
            if (v84 >= 0.0)
            {
              float v65 = (float)((float)-sqrtf(v84) - v82) / v70;
              if (v65 >= 0.0 && v65 <= *(float *)v27.i32)
              {
LABEL_27:
                if (v65 > 0.0)
                {
                  long long v103 = v28;
                  if (v98)
                  {
                    uint64_t v42 = 0;
                    uint64_t v43 = 0;
                  }
                  else
                  {
                    uint64_t v41 = (uint64_t *)(v90 + 16 * v23);
                    uint64_t v42 = *v41;
                    uint64_t v43 = v41[1];
                  }
                  float32x4_t v44 = vaddq_f32(v55, vmulq_n_f32(v53, v65));
                  float32x4_t v45 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a3 + 64), (float32x4_t)0), (float32x4_t)0, *(float32x4_t *)(a3 + 80)), (float32x4_t)0, *(float32x4_t *)(a3 + 96));
                  v45.i32[3] = v26;
                  v44.i32[3] = v29;
                  __int32 v99 = v26;
                  __int32 v101 = v29;
                  uint64_t v46 = v30;
                  sub_1B6C323C0(v23, (float32x4_t *)(v30 + v40), (float32x4_t *)(v14 + v40), v42, v43, v98 & 1, v44, v45, v65);
                  uint64_t v30 = v46;
                  __int32 v26 = v99;
                  __int32 v29 = v101;
                  long long v28 = v103;
                  float v31 = a6;
                  float32x4_t v35 = v93;
                  float32x4_t v34 = v94;
                  float32x4_t v37 = v91;
                  float32x4_t v36 = v92;
                  v27.i32[0] = 1.0;
                }
              }
            }
          }
        }
      }
LABEL_6:
      ++v23;
      v40 += 16;
    }
    while (v22 != v23);
  }
  sub_1B69AE264((uint64_t)&v110, a5 | ((HIDWORD(a5) & 1) << 32));
  return sub_1B6894710((uint64_t)&v110);
}

uint64_t sub_1B69AE264(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_1B6894764(a1, (uint64_t)v9);
  if (v9[28])
  {
    MEMORY[0x1F4188790](v3, v9[7]);
    v8[2] = v9;
    sub_1B6B2150C(0, v4, 1, a2 | ((HIDWORD(a2) & 1) << 32), v5, (void (*)(void *))sub_1B68947C0, (uint64_t)v8, v6);
    ecs_stack_allocator_deallocate(*(void **)(v9[11] + 32), v9[26], 80 * v9[27]);
  }
  sub_1B6C33184(v9);
  return sub_1B6894710((uint64_t)v9);
}

__n128 sub_1B69AE340@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>, float32x4_t a7@<Q4>, float32x4_t a8@<Q5>, float32x4_t a9@<Q6>, float32x4_t a10@<Q7>)
{
  sub_1B633C598(a1, (uint64_t)v80);
  uint64_t v13 = v80[0];
  uint64_t v12 = v80[1];
  uint64_t v15 = v80[2];
  uint64_t v14 = v80[3];
  uint64_t v17 = v80[4];
  uint64_t v16 = v80[5];
  uint64_t v19 = v80[6];
  uint64_t v18 = v80[7];
  sub_1B633C598(a1, (uint64_t)v81);
  if (v81[64])
  {
    float32x4_t v20 = a3;
    float32x4_t v21 = a4;
    float32x4_t v22 = a3;
    float32x4_t v23 = a4;
    float32x4_t v24 = a5;
    float32x4_t v25 = a6;
    float32x4_t v26 = a5;
    float32x4_t v27 = a6;
  }
  else
  {
    v22.i64[0] = v13;
    v22.i64[1] = v12;
    v23.i64[0] = v15;
    v23.i64[1] = v14;
    v26.i64[0] = v17;
    v26.i64[1] = v16;
    v27.i64[0] = v19;
    v27.i64[1] = v18;
    float32x4_t v24 = a5;
    float32x4_t v25 = a6;
    float32x4_t v20 = a3;
    float32x4_t v21 = a4;
  }
  float32x4_t v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v20.f32[0]), a8, *(float32x2_t *)v20.f32, 1), a9, v20, 2), a10, v20, 3);
  float32x4_t v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v21.f32[0]), a8, *(float32x2_t *)v21.f32, 1), a9, v21, 2), a10, v21, 3);
  float32x4_t v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v24.f32[0]), a8, *(float32x2_t *)v24.f32, 1), a9, v24, 2), a10, v24, 3);
  float32x4_t v31 = vmulq_f32(v28, v28);
  float32x4_t v32 = vmulq_f32(v29, v29);
  float32x4_t v33 = vmulq_f32(v30, v30);
  float32x4_t v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2);
  float32x4_t v35 = (float32x4_t)vtrn2q_s32((int32x4_t)v31, (int32x4_t)v32);
  v35.i32[2] = v33.i32[1];
  float32x4_t v36 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v31, (int32x4_t)v33), (int32x4_t)v34), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v31, (int32x4_t)v33), (int32x4_t)v32), v35));
  v37.i64[0] = 0x80000000800000;
  v37.i64[1] = 0x80000000800000;
  int32x4_t v38 = vcgeq_f32(v37, v36);
  v36.i32[3] = 0;
  float32x4_t v39 = vrsqrteq_f32(v36);
  float32x4_t v40 = vmulq_f32(v39, vrsqrtsq_f32(v36, vmulq_f32(v39, v39)));
  int32x4_t v41 = v38;
  v41.i32[3] = 0;
  float32x4_t v42 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v41), (int8x16_t)v36, (int8x16_t)vmulq_f32(v40, vrsqrtsq_f32(v36, vmulq_f32(v40, v40))));
  float32x4_t v43 = vmulq_n_f32(v28, v42.f32[0]);
  float32x4_t v44 = vmulq_lane_f32(v29, *(float32x2_t *)v42.f32, 1);
  float32x4_t v45 = vmulq_laneq_f32(v30, v42, 2);
  int8x16_t v46 = (int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45);
  int8x16_t v47 = (int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44);
  int8x16_t v48 = (int8x16_t)v43;
  if (v38.i32[0])
  {
    int8x16_t v49 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v46, (int8x16_t)v45, 0xCuLL), vnegq_f32(v44)), v45, (float32x4_t)vextq_s8(v47, (int8x16_t)v44, 0xCuLL));
    int8x16_t v48 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
  }
  int8x16_t v74 = v48;
  int8x16_t v50 = (int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43);
  int8x16_t v51 = (int8x16_t)v44;
  if (v38.i32[1])
  {
    int8x16_t v52 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v50, (int8x16_t)v43, 0xCuLL), vnegq_f32(v45)), v43, (float32x4_t)vextq_s8(v46, (int8x16_t)v45, 0xCuLL));
    int8x16_t v51 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), v52, 0xCuLL);
  }
  int8x16_t v72 = v51;
  if (v38.i32[2])
  {
    int8x16_t v53 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v47, (int8x16_t)v44, 0xCuLL), vnegq_f32(v43)), v44, (float32x4_t)vextq_s8(v50, (int8x16_t)v43, 0xCuLL));
    float32x4_t v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), v53, 0xCuLL);
  }
  float32x4_t v70 = v45;
  float32x4_t v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v27.f32[0]), a8, *(float32x2_t *)v27.f32, 1), a9, v27, 2), a10, v27, 3);
  float32x4_t v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v26.f32[0]), a8, *(float32x2_t *)v26.f32, 1), a9, v26, 2), a10, v26, 3);
  float32x4_t v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v23.f32[0]), a8, *(float32x2_t *)v23.f32, 1), a9, v23, 2), a10, v23, 3);
  float32x4_t v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v22.f32[0]), a8, *(float32x2_t *)v22.f32, 1), a9, v22, 2), a10, v22, 3);
  v82.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v25.f32[0]), a8, *(float32x2_t *)v25.f32, 1), a9, v25, 2), a10, v25, 3);
  float v58 = sqrtf(vaddq_f32(v34, vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]) * 0.5;
  float v59 = fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]))* 0.5;
  int32x2_t v60 = (int32x2_t)vadd_f32(*(float32x2_t *)v31.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL));
  float32x4_t v79 = vsubq_f32(vaddq_f32((float32x4_t)v82.columns[3], vmlaq_f32(vmlaq_f32(vmulq_f32(v28, (float32x4_t)0), (float32x4_t)0, v29), (float32x4_t)0, v30)), vaddq_f32(v54, vmlaq_f32(vmlaq_f32(vmulq_f32(v57, (float32x4_t)0), (float32x4_t)0, v56), (float32x4_t)0, v55)));
  v60.i32[0] = vadd_f32((float32x2_t)v60, (float32x2_t)vdup_lane_s32(v60, 1)).u32[0];
  *(float32x2_t *)v57.f32 = vrsqrte_f32((float32x2_t)v60.u32[0]);
  *(float32x2_t *)v57.f32 = vmul_f32(*(float32x2_t *)v57.f32, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32)));
  int32x2_t v61 = (int32x2_t)vadd_f32(*(float32x2_t *)v32.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL));
  v61.i32[0] = vadd_f32((float32x2_t)v61, (float32x2_t)vdup_lane_s32(v61, 1)).u32[0];
  v82.columns[0] = (simd_float4)vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v57.f32, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32))).f32[0]);
  float32x2_t v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
  float32x2_t v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
  int32x2_t v64 = (int32x2_t)vadd_f32(*(float32x2_t *)v33.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL));
  v82.columns[1] = (simd_float4)vmulq_n_f32(v29, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
  v64.i32[0] = vadd_f32((float32x2_t)v64, (float32x2_t)vdup_lane_s32(v64, 1)).u32[0];
  float32x2_t v65 = vrsqrte_f32((float32x2_t)v64.u32[0]);
  float32x2_t v66 = vmul_f32(v65, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v65, v65)));
  v82.columns[2] = (simd_float4)vmulq_n_f32(v30, vmul_f32(v66, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v66, v66))).f32[0]);
  *(simd_float4x4 *)a2 = __invert_f4(v82);
  *(int8x16_t *)(a2 + 64) = v74;
  *(int8x16_t *)(a2 + 80) = v72;
  __n128 result = (__n128)v79;
  *(float32x4_t *)(a2 + 96) = v70;
  *(float32x4_t *)(a2 + 112) = v79;
  *(float *)(a2 + 128) = v59;
  *(float *)(a2 + 132) = v58;
  return result;
}

uint64_t *sub_1B69AE6D4(int a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  if (qword_1E9DCC540 != -1) {
    swift_once();
  }
  v189[0] = xmmword_1E9E494E0;
  v189[1] = *(_OWORD *)algn_1E9E494F0;
  uint64_t v190 = qword_1E9E49500;
  long long v14 = *(_OWORD *)(a3 + 96);
  v178[2] = *(_OWORD *)(a3 + 80);
  v178[3] = v14;
  long long v15 = *(_OWORD *)(a3 + 128);
  v178[4] = *(_OWORD *)(a3 + 112);
  v178[5] = v15;
  long long v16 = *(_OWORD *)(a3 + 32);
  long long v176 = *(_OWORD *)(a3 + 16);
  long long v177 = v16;
  long long v17 = *(_OWORD *)(a3 + 64);
  v178[0] = *(_OWORD *)(a3 + 48);
  v178[1] = v17;
  sub_1B62EA708((uint64_t)v178 + 8, (uint64_t)v179);
  sub_1B62EA708((uint64_t)v179, (uint64_t)&v191);
  if (v192) {
    uint64_t v18 = 0x200000000;
  }
  else {
    uint64_t v18 = v191;
  }
  sub_1B62C9DA8(a2, (uint64_t)v189, v18, v159);
  __n128 result = (uint64_t *)sub_1B62CA210((uint64_t)v159, (uint64_t)v164, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v164[0])
  {
    long long v171 = v164[0];
    long long v172 = v164[1];
    uint64_t v173 = v165;
    if (v170 >= 1)
    {
      uint64_t v124 = v167;
      if (v167)
      {
        uint64_t v123 = v166;
        int v128 = *(unsigned __int8 *)(v168 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v127 = v169[4];
        float32x4_t v129 = v169;
        int8x16_t v121 = v169 + 8;
        uint64_t v122 = (uint64_t)(v169 + 6);
        float v20 = a7 * 0.5;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v21 = 0;
        do
        {
          float32x4_t v22 = (unsigned int *)(v123 + 48 * v21);
          uint64_t v23 = *v22;
          uint64_t v131 = v22[1];
          uint64_t v24 = *((void *)v22 + 5);
          uint64_t v132 = *((void *)v22 + 4);
          uint64_t v130 = v24;
          uint64_t v125 = v21;
          uint64_t v126 = (uint64_t *)*((void *)v22 + 2);
          uint64_t v140 = *((void *)v22 + 3);
          if (v128)
          {
            float32x4_t v25 = *(os_unfair_lock_s **)(v24 + 376);
            swift_retain();
            float32x4_t v26 = v25;
            uint64_t v24 = v130;
            os_unfair_lock_lock(v26);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v130 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v127);
          sub_1B62CA210(v122, (uint64_t)v180, &qword_1EB97DE20);
          uint64_t v27 = v129[4];
          uint64_t v28 = *(void *)(*(void *)(*(void *)(*(void *)(v24 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v129[6] = ecs_stack_allocator_allocate(v27, 48 * v28, 8);
          v129[7] = v28;
          v121[1] = 0;
          _OWORD v121[2] = 0;
          *int8x16_t v121 = 0;
          swift_release();
          uint64_t v29 = v132;
          uint64_t v144 = sub_1B62C9024((uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1F0F92BD0, v126, v140, v132, (uint64_t)v129);
          uint64_t v142 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v126, v140, v132, (uint64_t)v129);
          uint64_t v141 = sub_1B62C9024((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1F0F8F498, v126, v140, v132, (uint64_t)v129);
          if (v126)
          {
            if (v132)
            {
              for (uint64_t i = 0; i != v29; ++i)
              {
                uint64_t v31 = v144 + 24 * i;
                if ((*(_DWORD *)(v31 + 20) & a1) != 0)
                {
                  float v33 = *(float *)(v31 + 4);
                  float v32 = *(float *)(v31 + 8);
                  float32x4_t v34 = (float32x4_t *)(v142 + (i << 6));
                  float v35 = *(float *)(v31 + 12);
                  uint64_t v36 = v141 + (i << 6);
                  float32x4_t v37 = *v34;
                  float32x4_t v38 = v34[1];
                  float32x4_t v39 = v34[2];
                  float32x4_t v40 = v34[3];
                  long long v41 = *(_OWORD *)v36;
                  long long v42 = *(_OWORD *)(v36 + 16);
                  long long v43 = *(_OWORD *)(v36 + 32);
                  uint64_t v46 = v36 + 48;
                  uint64_t v44 = *(void *)(v36 + 48);
                  uint64_t v45 = *(void *)(v46 + 8);
                  v181[0] = v41;
                  v181[1] = v42;
                  v181[2] = v43;
                  uint64_t v182 = v44;
                  uint64_t v183 = v45;
                  char v184 = 0;
                  sub_1B69AE340((uint64_t)v181, (uint64_t)v160, v37, v38, v39, v40, a8, a9, a10, a11);
                  uint64_t v47 = v176;
                  float v48 = *(float *)(v176 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                  uint64_t v49 = SLODWORD(v178[0]);
                  uint64_t v50 = DWORD1(v178[0]);
                  swift_retain();
                  if (v49 == -1 && !v50) {
                    goto LABEL_57;
                  }
                  uint64_t v51 = v49;
                  if ((v49 & 0x80000000) != 0) {
                    goto LABEL_57;
                  }
                  int8x16_t v52 = (uint64_t *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                  if (*(void *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v49) {
                    goto LABEL_57;
                  }
                  uint64_t v53 = *v52;
                  uint64_t v54 = *v52 + 12 * (int)v49;
                  int v55 = *(__int16 *)(v54 + 4);
                  if (v50 != -1 && *(_DWORD *)(v54 + 8) != v50) {
                    goto LABEL_57;
                  }
                  uint64_t v56 = *(void *)(*(void *)(v47 + 136) + 8 * *(int *)(v53 + 12 * (int)v49) + 32);
                  uint64_t v57 = *(void *)(v56 + 48);
                  uint64_t v58 = *(void *)(v57 + 16);
                  if (!v58) {
                    goto LABEL_57;
                  }
                  float v59 = fminf(fmaxf(v33 + a4, 0.0), 1.0);
                  float v60 = fminf(fmaxf(v32 + a5, 0.0), 1.0);
                  float v61 = 1.0 - fminf(fmaxf(v35 + a6, 0.0), 1.0);
                  float32x2_t v62 = (void *)(v57 + 56);
                  while ((ValueMetadata *)*(v62 - 3) != &type metadata for EmitterDescription)
                  {
                    v62 += 5;
                    if (!--v58) {
                      goto LABEL_57;
                    }
                  }
                  float v63 = *(float *)(*(void *)(v56 + 128) + *v62 + 88 * v55 + 52);
                  swift_release();
                  float32x4_t v64 = *v34;
                  float32x4_t v65 = v34[1];
                  float32x4_t v66 = v34[2];
                  float32x4_t v67 = v34[3];
                  *(float *)&uint64_t v145 = v48 * v63;
                  *((float *)&v145 + 1) = v60;
                  *(float *)&unint64_t v146 = v61;
                  long long v147 = v160[0];
                  long long v148 = v160[1];
                  long long v149 = v160[2];
                  long long v150 = v160[3];
                  float32x4_t v151 = v64;
                  float32x4_t v152 = v65;
                  float32x4_t v153 = v66;
                  float32x4_t v154 = v67;
                  long long v155 = v160[7];
                  uint64_t v156 = v161;
                  float v157 = v59;
                  float v158 = v20;
                  uint64_t v68 = *(void *)a3;
                  if (*(void *)a3)
                  {
                    uint64_t ObjectType = swift_getObjectType();
                    type metadata accessor for particle_cylinder_collider_uniforms(0);
                    sub_1B6B594A8((uint64_t)&v145, 1, ObjectType, v70, v71, v72, v73, v74);
                  }
                  swift_retain();
                  sub_1B6786A24(a3);
                  char v75 = sub_1B6BFF2C8(v51 | (v50 << 32), v47, v68 == 0, 0, a3, 0xD00000000000001ALL, 0x80000001B6F40710, 0);
                  sub_1B6786A7C(a3);
                  if ((v75 & 1) == 0) {
                    goto LABEL_57;
                  }
                  swift_release();
                  uint64_t v29 = v132;
                }
              }
            }
          }
          else if (v23 != v131)
          {
            do
            {
              uint64_t v76 = v144 + 24 * v23;
              if ((*(_DWORD *)(v76 + 20) & a1) != 0)
              {
                float v78 = *(float *)(v76 + 4);
                float v77 = *(float *)(v76 + 8);
                float32x4_t v79 = (float32x4_t *)(v142 + (v23 << 6));
                float v80 = *(float *)(v76 + 12);
                uint64_t v81 = v141 + (v23 << 6);
                float32x4_t v82 = *v79;
                float32x4_t v83 = v79[1];
                float32x4_t v84 = v79[2];
                float32x4_t v85 = v79[3];
                long long v86 = *(_OWORD *)v81;
                long long v87 = *(_OWORD *)(v81 + 16);
                long long v88 = *(_OWORD *)(v81 + 32);
                uint64_t v91 = v81 + 48;
                uint64_t v89 = *(void *)(v81 + 48);
                uint64_t v90 = *(void *)(v91 + 8);
                v185[0] = v86;
                v185[1] = v87;
                v185[2] = v88;
                uint64_t v186 = v89;
                uint64_t v187 = v90;
                char v188 = 0;
                sub_1B69AE340((uint64_t)v185, (uint64_t)v162, v82, v83, v84, v85, a8, a9, a10, a11);
                uint64_t v92 = v176;
                float v93 = *(float *)(v176 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                uint64_t v94 = SLODWORD(v178[0]);
                uint64_t v95 = DWORD1(v178[0]);
                swift_retain();
                if (v94 == -1 && !v95) {
                  goto LABEL_61;
                }
                uint64_t v96 = v94;
                if ((v94 & 0x80000000) != 0) {
                  goto LABEL_61;
                }
                float32x4_t v97 = (uint64_t *)(v92 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                if (*(void *)(v92 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v94) {
                  goto LABEL_61;
                }
                uint64_t v98 = *v97;
                uint64_t v99 = *v97 + 12 * (int)v94;
                int v100 = *(__int16 *)(v99 + 4);
                if (v95 != -1 && *(_DWORD *)(v99 + 8) != v95) {
                  goto LABEL_61;
                }
                uint64_t v101 = *(void *)(*(void *)(v92 + 136) + 8 * *(int *)(v98 + 12 * (int)v94) + 32);
                uint64_t v102 = *(void *)(v101 + 48);
                uint64_t v103 = *(void *)(v102 + 16);
                if (!v103) {
                  goto LABEL_61;
                }
                float v104 = fminf(fmaxf(v78 + a4, 0.0), 1.0);
                float v105 = fminf(fmaxf(v77 + a5, 0.0), 1.0);
                float v106 = 1.0 - fminf(fmaxf(v80 + a6, 0.0), 1.0);
                uint64_t v107 = (void *)(v102 + 56);
                while ((ValueMetadata *)*(v107 - 3) != &type metadata for EmitterDescription)
                {
                  v107 += 5;
                  if (!--v103) {
                    goto LABEL_57;
                  }
                }
                float v108 = *(float *)(*(void *)(v101 + 128) + *v107 + 88 * v100 + 52);
                swift_release();
                float32x4_t v109 = *v79;
                float32x4_t v110 = v79[1];
                float32x4_t v111 = v79[2];
                float32x4_t v112 = v79[3];
                *(float *)&uint64_t v145 = v93 * v108;
                *((float *)&v145 + 1) = v105;
                *(float *)&unint64_t v146 = v106;
                long long v147 = v162[0];
                long long v148 = v162[1];
                long long v149 = v162[2];
                long long v150 = v162[3];
                float32x4_t v151 = v109;
                float32x4_t v152 = v110;
                float32x4_t v153 = v111;
                float32x4_t v154 = v112;
                long long v155 = v162[7];
                uint64_t v156 = v163;
                float v157 = v104;
                float v158 = v20;
                uint64_t v113 = *(void *)a3;
                if (*(void *)a3)
                {
                  uint64_t v114 = swift_getObjectType();
                  type metadata accessor for particle_cylinder_collider_uniforms(0);
                  sub_1B6B594A8((uint64_t)&v145, 1, v114, v115, v116, v117, v118, v119);
                }
                swift_retain();
                sub_1B6786A24(a3);
                char v120 = sub_1B6BFF2C8(v96 | (v95 << 32), v92, v113 == 0, 0, a3, 0xD00000000000001ALL, 0x80000001B6F40710, 0);
                sub_1B6786A7C(a3);
                if ((v120 & 1) == 0)
                {
LABEL_61:
                  while (1)
                  {
LABEL_57:
                    uint64_t v145 = 0;
                    unint64_t v146 = 0xE000000000000000;
                    sub_1B6E328C8();
                    sub_1B6E31948();
                    sub_1B681F698();
                    sub_1B6E31948();
                    swift_bridgeObjectRelease();
                    sub_1B6E31948();
                    sub_1B6E31948();
                    sub_1B6E31948();
                    sub_1B6E32BE8();
                    __break(1u);
                  }
                }
                swift_release();
              }
              ++v23;
            }
            while (v23 != v131);
          }
          v174[0] = v171;
          v174[1] = v172;
          uint64_t v175 = v173;
          sub_1B6345178(v129, (unsigned __int16 **)v174, (uint64_t)v180);
          sub_1B634507C((char *)v130);
          ecs_stack_allocator_pop_snapshot(v127);
          if (v128)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v130 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v130 + 376));
          }
          swift_release();
          uint64_t v21 = v125 + 1;
        }
        while (v125 + 1 != v124);
        sub_1B632F170(v159);
      }
    }
    return sub_1B632F170(v159);
  }
  return result;
}

float32x2_t *sub_1B69AF18C(float32x2_t *result, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int v7 = *(_DWORD *)(a4 + 84) & result[2].i32[1];
  if (v7)
  {
    uint64_t v11 = a5;
    if ((a5 & 0xFE00000000) != 0) {
      uint64_t v11 = 0;
    }
    uint64_t v85 = v11;
    float v12 = result[2].f32[0];
    float v13 = *(float *)(a4 + 80);
    float v14 = result[1].f32[0];
    float v15 = *(float *)(a4 + 72);
    __asm { FMOV            V7.2S, #1.0 }
    float v20 = fminf(fmaxf(result[1].f32[1] + *(float *)(a4 + 76), 0.0), 1.0);
    *(float32x2_t *)&long long v119 = vminnm_f32(vmaxnm_f32(vadd_f32(*result, *(float32x2_t *)(a4 + 64)), 0), _D7);
    DWORD2(v119) = fminf(fmaxf(v14 + v15, 0.0), 1.0);
    *((float *)&v119 + 3) = 1.0 - v20;
    float v120 = v12 + v13;
    int v121 = v7;
    float32x4_t v21 = *a2;
    float32x4_t v22 = a2[1];
    float32x4_t v23 = a2[2];
    float32x4_t v24 = a2[3];
    long long v25 = *(_OWORD *)(a3 + 16);
    long long v26 = *(_OWORD *)(a3 + 32);
    uint64_t v28 = *(void *)(a3 + 48);
    uint64_t v27 = *(void *)(a3 + 56);
    v124[0] = *(_OWORD *)a3;
    v124[1] = v25;
    v124[2] = v26;
    uint64_t v125 = v28;
    uint64_t v126 = v27;
    char v127 = 0;
    BOOL v29 = _ZF || (a5 & 0xFE00000000) != 0;
    BOOL v84 = v29;
    sub_1B69AE340((uint64_t)v124, (uint64_t)v99, v21, v22, v23, v24, *(float32x4_t *)(a4 + 96), *(float32x4_t *)(a4 + 112), *(float32x4_t *)(a4 + 128), *(float32x4_t *)(a4 + 144));
    v122[0] = *(_OWORD *)(a4 + 24);
    v122[1] = *(_OWORD *)(a4 + 40);
    uint64_t v123 = *(void *)(a4 + 56);
    sub_1B62C9DA8(a6, (uint64_t)v122, 0x200000000, v100);
    __n128 result = (float32x2_t *)sub_1B62CA210((uint64_t)v100, (uint64_t)v101, (unint64_t *)&qword_1EB97DC50);
    uint64_t v95 = (unsigned __int16 *)v101[0];
    if (v101[0])
    {
      uint64_t v83 = v105;
      if (v105 >= 1)
      {
        uint64_t v82 = v102;
        if (v102)
        {
          uint64_t v30 = 0;
          uint64_t v80 = v101[5];
          uint64_t v31 = v104[4];
          int v93 = *(unsigned __int8 *)(v103 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          float v78 = v104 + 8;
          uint64_t v79 = v103;
          uint64_t v77 = v31;
          uint64_t v94 = v101[0] + 41;
          uint64_t v81 = a4;
          uint64_t v98 = v104;
          do
          {
            float v32 = (unsigned int *)(v80 + 48 * v30);
            uint64_t v33 = *v32;
            uint64_t v34 = v32[1];
            uint64_t v35 = v32[2];
            uint64_t v36 = *((void *)v32 + 2);
            uint64_t v37 = *((void *)v32 + 4);
            uint64_t v38 = *((void *)v32 + 5);
            uint64_t v89 = v30;
            uint64_t v96 = *((void *)v32 + 3);
            if (v93)
            {
              float32x4_t v39 = *(os_unfair_lock_s **)(v38 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v39);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v38 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v31);
            float32x4_t v40 = v98;
            uint64_t v87 = v98[7];
            uint64_t v88 = v98[6];
            uint64_t v91 = v98[9];
            uint64_t v92 = v98[8];
            uint64_t v90 = v98[10];
            uint64_t v41 = v98[4];
            uint64_t v42 = *(void *)(*(void *)(*(void *)(*(void *)(v38 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v98[6] = ecs_stack_allocator_allocate(v41, 48 * v42, 8);
            v98[7] = v42;
            v78[1] = 0;
            v78[2] = 0;
            *float v78 = 0;
            swift_release();
            *(void *)&long long v106 = v79;
            *((void *)&v106 + 1) = v38;
            uint64_t v86 = v38;
            uint64_t v107 = v98;
            uint64_t v108 = v35;
            uint64_t v109 = (v34 - v33 + v35);
            uint64_t v110 = v83;
            uint64_t v111 = v33;
            uint64_t v112 = v34;
            uint64_t v113 = 0;
            uint64_t v114 = 0;
            char v115 = 1;
            uint64_t v116 = v36;
            uint64_t v117 = v96;
            uint64_t v118 = v37;
            sub_1B69ADCE8(&v106, &v119, (uint64_t)v99, v81, v85 | ((unint64_t)v84 << 32), a7);
            unint64_t v43 = v98[6];
            uint64_t v97 = v98[8];
            if (!v97)
            {
              uint64_t v70 = v98[7];
              uint64_t v71 = (void *)v98[4];
              uint64_t v73 = v88;
              uint64_t v72 = v89;
              uint64_t v31 = v77;
              uint64_t v76 = v86;
              uint64_t v74 = v87;
              goto LABEL_53;
            }
            for (uint64_t i = 0; i != v97; ++i)
            {
              unint64_t v46 = v43;
              uint64_t v47 = (uint64_t *)(v43 + 48 * i);
              uint64_t v48 = *v47;
              uint64_t v49 = (void (*)(uint64_t))v47[4];
              uint64_t v50 = v40[9];
              if (v50) {
                _ZF = v48 == v50;
              }
              else {
                _ZF = 0;
              }
              if (_ZF || !v95[11]) {
                goto LABEL_17;
              }
              unint64_t v52 = v95[9];
              uint64_t v53 = (void *)(v94 + v95[8]);
              uint64_t v54 = v47[2];
              int v55 = v53;
              unint64_t v56 = v52 >> 4;
              uint64_t v57 = v94;
              if (v52 >= 0x10)
              {
                while (*v55 != v48)
                {
                  ++v57;
                  v55 += 2;
                  if (!--v56) {
                    goto LABEL_32;
                  }
                }
                unsigned int v58 = *(unsigned __int8 *)(v57 + v95[10]);
                BOOL v59 = v58 > 5;
                int v60 = (1 << v58) & 0x23;
                if (v59 || v60 == 0)
                {
LABEL_17:
                  uint64_t v45 = swift_retain();
                  v49(v45);
                  swift_release();
                  goto LABEL_18;
                }
              }
LABEL_32:
              if (swift_conformsToProtocol2()) {
                uint64_t v62 = v54;
              }
              else {
                uint64_t v62 = 0;
              }
              if (v62)
              {
                if (v52 < 0x10) {
                  goto LABEL_17;
                }
                float v63 = v53;
                unint64_t v64 = v52 >> 4;
                uint64_t v65 = v94;
                while (*v63 != v62)
                {
                  ++v65;
                  v63 += 2;
                  if (!--v64) {
                    goto LABEL_45;
                  }
                }
                unsigned int v66 = *(unsigned __int8 *)(v65 + v95[10]);
                BOOL v59 = v66 > 5;
                int v67 = (1 << v66) & 0x23;
                if (v59 || v67 == 0) {
                  goto LABEL_17;
                }
LABEL_45:
                uint64_t v69 = 16 * (v52 >> 4);
                while (*v53 != v62)
                {
                  v53 += 2;
                  v69 -= 16;
                  if (!v69) {
                    goto LABEL_17;
                  }
                }
              }
LABEL_18:
              float32x4_t v40 = v98;
              unint64_t v43 = v46;
            }
            uint64_t v70 = v98[7];
            unint64_t v43 = v98[6];
            uint64_t v71 = (void *)v98[4];
            uint64_t v73 = v88;
            uint64_t v72 = v89;
            uint64_t v74 = v87;
            if ((uint64_t)v98[8] >= 1)
            {
              unint64_t v75 = v98[6];
              swift_arrayDestroy();
              unint64_t v43 = v75;
            }
            uint64_t v31 = v77;
            uint64_t v76 = v86;
LABEL_53:
            ecs_stack_allocator_deallocate(v71, v43, 48 * v70);
            v40[6] = v73;
            v40[7] = v74;
            uint64_t v40[8] = v92;
            v40[9] = v91;
            v40[10] = v90;
            sub_1B634507C((char *)v76);
            ecs_stack_allocator_pop_snapshot(v31);
            if (v93)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v76 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v76 + 376));
            }
            swift_release();
            uint64_t v30 = v72 + 1;
          }
          while (v30 != v82);
        }
      }
      return (float32x2_t *)sub_1B632F170(v100);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleCylinderCollider()
{
  return &type metadata for ParticleCylinderCollider;
}

unsigned char *storeEnumTagSinglePayload for AnyType.WorldReferenceKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69AF82CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyType.WorldReferenceKind()
{
  return &type metadata for AnyType.WorldReferenceKind;
}

unsigned char *storeEnumTagSinglePayload for AnyType.AssetReferenceKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69AF930);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyType.AssetReferenceKind()
{
  return &type metadata for AnyType.AssetReferenceKind;
}

unint64_t *initializeBufferWithCopyOfBuffer for AnyType(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1B67C52A4(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for AnyType(unint64_t *a1)
{
  return sub_1B678FC34(*a1);
}

unint64_t *assignWithCopy for AnyType(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1B67C52A4(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1B678FC34(v4);
  return a1;
}

unint64_t *assignWithTake for AnyType(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1B678FC34(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x78 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 120);
  }
  unsigned int v3 = ((*(void *)a1 >> 60) & 0x8F | (16 * (*(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x77) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnyType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x77)
  {
    *(void *)__n128 result = a2 - 120;
    if (a3 >= 0x78) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x78) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B69AFAB4(void *a1)
{
  uint64_t v1 = *a1 >> 60;
  if (v1 <= 7) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 8;
  }
}

unint64_t *sub_1B69AFAD0(unint64_t *result, uint64_t a2)
{
  if (a2 < 8)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 60;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 8);
    unint64_t v3 = 0x8000000000000000;
  }
  *__n128 result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for AnyType()
{
  return &type metadata for AnyType;
}

void sub_1B69AFB0C(unint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unint64_t v6 = a1 >> 60;
  if (a1 >> 60 != 8)
  {
LABEL_4:
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1B6E8F480;
    char v9 = sub_1B69B18E4(v8 | 0x1000000000000000, a1);
    swift_release();
    if (v9)
    {
      *(float *)v10.i32 = a3;
      int32x2_t v69 = v10;
      sub_1B6395AF8(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
      *(void *)(a2 + 24) = v11;
      *(int32x2_t *)a2 = vdup_lane_s32(v69, 0);
      return;
    }
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1B6E8DAE0;
    char v13 = sub_1B69B18E4(v12 | 0x1000000000000000, a1);
    swift_release();
    if (v13)
    {
      *(float *)v14.i32 = a3;
      int32x2_t v70 = v14;
      sub_1B6395AF8(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
      *(void *)(a2 + 24) = v15;
      uint64_t v16 = swift_allocObject();
      *(void *)a2 = v16;
      int32x4_t v17 = vdupq_lane_s32(v70, 0);
LABEL_8:
      v17.i32[3] = 0;
      *(int32x4_t *)(v16 + 16) = v17;
      return;
    }
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1B6E8DAD0;
    char v19 = sub_1B69B18E4(v18 | 0x1000000000000000, a1);
    swift_release();
    if (v19)
    {
      *(float *)v20.i32 = a3;
      int32x2_t v71 = v20;
      sub_1B6395AF8(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
      *(void *)(a2 + 24) = v21;
      float32x4_t v22 = (int32x4_t *)swift_allocObject();
      *(void *)a2 = v22;
      v22[1] = vdupq_lane_s32(v71, 0);
      return;
    }
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = 2;
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1B6E8F480;
    *(void *)(v26 + 24) = v27 | 0x1000000000000000;
    char v28 = sub_1B69B18E4(v26 | 0x1000000000000000, a1);
    swift_release();
    if (v28)
    {
      type metadata accessor for simd_float2x2(0);
      *(void *)(a2 + 24) = v29;
      *(void *)a2 = 1065353216;
      *(void *)(a2 + 8) = 0x3F80000000000000;
      return;
    }
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = 3;
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1B6E8DAE0;
    *(void *)(v30 + 24) = v31 | 0x1000000000000000;
    char v32 = sub_1B69B18E4(v30 | 0x1000000000000000, a1);
    swift_release();
    if (v32)
    {
      type metadata accessor for simd_float3x3(0);
      *(void *)(a2 + 24) = v33;
      uint64_t v34 = (_OWORD *)swift_allocObject();
      *(void *)a2 = v34;
      v34[1] = xmmword_1B6E4F300;
      v34[2] = xmmword_1B6E4F320;
      v34[3] = xmmword_1B6E4F2E0;
      return;
    }
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = 4;
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1B6E8DAD0;
    *(void *)(v35 + 24) = v36 | 0x1000000000000000;
    char v37 = sub_1B69B18E4(v35 | 0x1000000000000000, a1);
    swift_release();
    if (v37)
    {
      type metadata accessor for simd_float4x4(0);
      *(void *)(a2 + 24) = v38;
      float32x4_t v39 = (_OWORD *)swift_allocObject();
      *(void *)a2 = v39;
      v39[1] = xmmword_1B6E4F300;
      v39[2] = xmmword_1B6E4F320;
      v39[3] = xmmword_1B6E4F2E0;
      v39[4] = xmmword_1B6E4F370;
      return;
    }
    if (a1 != 0x8000000000000058 || v6 != 8)
    {
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_1B6E9A690;
      char v41 = sub_1B69B18E4(v40 | 0x1000000000000000, a1);
      swift_release();
      if (v41)
      {
        sub_1B6395AF8(0, (unint64_t *)&unk_1EB980EC0, (uint64_t (*)(void))sub_1B675900C, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC2A8]);
        *(void *)(a2 + 24) = v42;
        uint64_t v16 = swift_allocObject();
        *(void *)a2 = v16;
        int32x4_t v17 = vdupq_n_s32(a3);
        goto LABEL_8;
      }
      if (v6 != 8) {
        goto LABEL_31;
      }
      if (a1 == 0x8000000000000028)
      {
        type metadata accessor for simd_quatf(0);
        *(void *)(a2 + 24) = v51;
        uint64_t v52 = swift_allocObject();
        *(void *)a2 = v52;
        *(_OWORD *)(v52 + 16) = xmmword_1B6E4F370;
        return;
      }
      if (a1 != 0x8000000000000060)
      {
LABEL_31:
        uint64_t v43 = swift_allocObject();
        *(void *)(v43 + 16) = 0x8000000000000040;
        char v44 = sub_1B69B18E4(v43 | 0x2000000000000000, a1);
        swift_release();
        if (v44)
        {
          sub_1B69B3564(0, (unint64_t *)&unk_1EB980430, MEMORY[0x1E4FBC1C8], MEMORY[0x1E4FBC1E0], MEMORY[0x1E4FBB6A0]);
          *(void *)(a2 + 24) = v45;
          *(void *)a2 = (uint64_t)a3;
          *(void *)(a2 + 8) = (uint64_t)a3;
        }
        else
        {
          uint64_t v46 = swift_allocObject();
          *(void *)(v46 + 16) = 0x8000000000000050;
          char v47 = sub_1B69B18E4(v46 | 0x2000000000000000, a1);
          uint64_t v48 = (CFX::RG::ResourceIdentifier *)swift_release();
          if (v47)
          {
            float v49 = a3;
            sub_1B69B3564(0, (unint64_t *)&qword_1EB980410, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBB498], MEMORY[0x1E4FBB6A0]);
            *(void *)(a2 + 24) = v50;
            *(float *)a2 = v49;
            *(float *)(a2 + 4) = v49;
          }
          else if (v6)
          {
            if (v6 != 4)
            {
              if (v6 == 8)
              {
                *((void *)&v53 + 1) = a1;
                *(void *)&long long v53 = a1 + 0x7FFFFFFFFFFFFF98;
                switch((unint64_t)(v53 >> 3))
                {
                  case 0uLL:
                    *(void *)(a2 + 24) = MEMORY[0x1E4FBB1A0];
                    *(void *)a2 = 0;
                    *(void *)(a2 + 8) = 0xE000000000000000;
                    return;
                  case 1uLL:
                    sub_1B629CD98();
                    uint64_t v57 = (_OWORD *)swift_allocObject();
                    __asm { FMOV            V1.4S, #1.0 }
                    v57[1] = xmmword_1B6E76B30;
                    v57[2] = _Q1;
                    v57[3] = xmmword_1B6E4F370;
                    *(void *)(a2 + 24) = &type metadata for ColorRamp;
                    *(void *)a2 = v57;
                    *(void *)(a2 + 8) = &unk_1F0FA83D8;
                    *(unsigned char *)(a2 + 16) = 1;
                    return;
                  case 2uLL:
                  case 4uLL:
                    goto LABEL_40;
                  case 3uLL:
                    float v63 = sub_1B6D3EC54(MEMORY[0x1E4FBC860]);
                    uint64_t v65 = v64;
                    sub_1B69B3564(0, (unint64_t *)&qword_1EB97FDA0, MEMORY[0x1E4FBB470], (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Curve);
                    *(void *)(a2 + 24) = v66;
                    uint64_t v67 = swift_allocObject();
                    *(void *)a2 = v67;
                    *(void *)(v67 + 16) = v63;
                    *(void *)(v67 + 24) = v65;
                    *(void *)(v67 + 32) = 0;
                    *(unsigned char *)(v67 + 40) = 1;
                    return;
                  case 9uLL:
                    *(void *)(a2 + 24) = MEMORY[0x1E4FBC538];
                    *(void *)a2 = 0;
                    return;
                  case 0xAuLL:
                    uint64_t v68 = RGResourceIdentifierFinalColor(v48);
                    *(void *)(a2 + 24) = MEMORY[0x1E4FBC538];
                    *(void *)a2 = v68;
                    return;
                  default:
                    break;
                }
              }
              v72[0] = 0;
              v72[1] = 0xE000000000000000;
              sub_1B6E328C8();
              sub_1B6E31948();
              unint64_t v74 = a1;
              sub_1B6E32B18();
              sub_1B6E32BE8();
              __break(1u);
              JUMPOUT(0x1B69B0484);
            }
LABEL_40:
            *(void *)(a2 + 24) = &type metadata for Entity;
            *(void *)a2 = 0xFFFFFFFFLL;
          }
          else
          {
            unint64_t v54 = *(void *)(a1 + 16);
            sub_1B67C52A4(v54);
            sub_1B69AFB0C(v72, v54, a3);
            uint64_t v55 = v73;
            unint64_t v56 = sub_1B62C14BC(v72, v73);
            sub_1B69B2F28((uint64_t)v56, v55, (uint64_t *)a2);
            sub_1B678FC34(v54);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v72);
          }
        }
        return;
      }
    }
    *(void *)(a2 + 24) = MEMORY[0x1E4FBB3D0];
    *(double *)a2 = a3;
    return;
  }
  *((void *)&v7 + 1) = a1;
  *(void *)&long long v7 = a1 + 0x7FFFFFFFFFFFFFF0;
  switch((unint64_t)(v7 >> 3))
  {
    case 0uLL:
      *(void *)(a2 + 24) = MEMORY[0x1E4FBB390];
      *(unsigned char *)a2 = a3 != 0.0;
      return;
    case 4uLL:
      int v23 = (int)a3;
      uint64_t v24 = MEMORY[0x1E4FBC150];
      goto LABEL_13;
    case 5uLL:
      int v23 = a3;
      uint64_t v24 = MEMORY[0x1E4FBC4C0];
LABEL_13:
      *(void *)(a2 + 24) = v24;
      *(_DWORD *)a2 = v23;
      break;
    case 6uLL:
      *(void *)(a2 + 24) = MEMORY[0x1E4FBC1C8];
      *(void *)a2 = (uint64_t)a3;
      break;
    case 8uLL:
      float v25 = a3;
      *(void *)(a2 + 24) = MEMORY[0x1E4FBB470];
      *(float *)a2 = v25;
      break;
    default:
      goto LABEL_4;
  }
}

uint64_t sub_1B69B04D4(char a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 60;
  if (a1)
  {
    if (a2 >> 60 == 8)
    {
      switch(a2)
      {
        case 0x8000000000000018:
          return 0x7620646165726874;
        case 0x8000000000000048:
          return 1718378856;
        case 0x8000000000000080:
          goto LABEL_55;
      }
    }
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1B6E9A6A0;
    char v11 = sub_1B69B18E4(v10 | 0x1000000000000000, a2);
    swift_release();
    if (v11)
    {
      return 0x32666C6168;
    }
    else
    {
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_1B6E9A6B0;
      char v13 = sub_1B69B18E4(v12 | 0x1000000000000000, a2);
      swift_release();
      if (v13)
      {
        return 0x33666C6168;
      }
      else
      {
        uint64_t v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = xmmword_1B6E9A6C0;
        char v15 = sub_1B69B18E4(v14 | 0x1000000000000000, a2);
        swift_release();
        if (v15)
        {
          return 0x34666C6168;
        }
        else if (v3 == 6)
        {
          uint64_t v5 = 0x706D61735F786676;
          int v26 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          if (v26 && v26 != 2 && v26 != 1)
          {
            while (1)
            {
LABEL_56:
              sub_1B6E328C8();
              sub_1B6E31948();
              sub_1B6E32B18();
LABEL_55:
              sub_1B6E32BE8();
              __break(1u);
            }
          }
        }
        else if (v3 == 3)
        {
          unint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          sub_1B67C52A4(v18);
          sub_1B6E328C8();
          swift_bridgeObjectRelease();
          uint64_t v19 = 1;
LABEL_26:
          sub_1B69B04D4(v19, v18);
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          sub_1B6E31948();
          sub_1B6E33098();
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          sub_1B6E31948();
          sub_1B678FC34(v18);
          return 0xD000000000000011;
        }
        else
        {
          return sub_1B69B04D4(0, a2);
        }
      }
    }
  }
  else if (a2 >> 60 == 8)
  {
    *((void *)&v4 + 1) = a2;
    *(void *)&long long v4 = a2 + 0x7FFFFFFFFFFFFFF0;
    uint64_t v5 = 0x2A64696F76;
    switch((unint64_t)(v4 >> 3))
    {
      case 0uLL:
        uint64_t v5 = 1819242338;
        break;
      case 1uLL:
        return v5;
      case 4uLL:
        uint64_t v5 = 0x745F3233746E69;
        break;
      case 5uLL:
        uint64_t v5 = 0x745F3233746E6975;
        break;
      case 6uLL:
        uint64_t v5 = 0x745F3436746E69;
        break;
      case 8uLL:
        uint64_t v5 = 0x74616F6C66;
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1B6E8F480;
    char v7 = sub_1B69B18E4(v6 | 0x1000000000000000, a2);
    swift_release();
    if (v7)
    {
      return 0x3274616F6C66;
    }
    else
    {
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1B6E8DAE0;
      char v9 = sub_1B69B18E4(v8 | 0x1000000000000000, a2);
      swift_release();
      if (v9)
      {
        return 0x3374616F6C66;
      }
      else
      {
        uint64_t v5 = 0x3474616F6C66;
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_1B6E8DAD0;
        char v17 = sub_1B69B18E4(v16 | 0x1000000000000000, a2);
        swift_release();
        if ((v17 & 1) == 0)
        {
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = 2;
          uint64_t v21 = swift_allocObject();
          *(_OWORD *)(v21 + 16) = xmmword_1B6E8F480;
          *(void *)(v20 + 24) = v21 | 0x1000000000000000;
          char v22 = sub_1B69B18E4(v20 | 0x1000000000000000, a2);
          swift_release();
          if (v22)
          {
            return 0x32783274616F6C66;
          }
          else
          {
            uint64_t v23 = swift_allocObject();
            *(void *)(v23 + 16) = 3;
            uint64_t v24 = swift_allocObject();
            *(_OWORD *)(v24 + 16) = xmmword_1B6E8DAE0;
            *(void *)(v23 + 24) = v24 | 0x1000000000000000;
            char v25 = sub_1B69B18E4(v23 | 0x1000000000000000, a2);
            swift_release();
            if (v25)
            {
              return 0x33783374616F6C66;
            }
            else
            {
              uint64_t v27 = swift_allocObject();
              *(void *)(v27 + 16) = 4;
              uint64_t v28 = swift_allocObject();
              *(_OWORD *)(v28 + 16) = xmmword_1B6E8DAD0;
              *(void *)(v27 + 24) = v28 | 0x1000000000000000;
              char v29 = sub_1B69B18E4(v27 | 0x1000000000000000, a2);
              swift_release();
              if (v29)
              {
                return 0x34783474616F6C66;
              }
              else
              {
                uint64_t v31 = swift_allocObject();
                *(_OWORD *)(v31 + 16) = xmmword_1B6E9A690;
                char v32 = sub_1B69B18E4(v31 | 0x1000000000000000, a2);
                swift_release();
                if (v32)
                {
                  return 0x33746E6975;
                }
                else
                {
                  uint64_t v33 = swift_allocObject();
                  *(void *)(v33 + 16) = 0x8000000000000040;
                  char v34 = sub_1B69B18E4(v33 | 0x2000000000000000, a2);
                  swift_release();
                  if (v34)
                  {
                    return 0x5F746E695F786676;
                  }
                  else
                  {
                    uint64_t v35 = swift_allocObject();
                    *(void *)(v35 + 16) = 0x8000000000000050;
                    char v36 = sub_1B69B18E4(v35 | 0x2000000000000000, a2);
                    swift_release();
                    if ((v36 & 1) == 0)
                    {
                      uint64_t v5 = 0x2A64696F76;
                      switch((int)v3)
                      {
                        case 0:
                          goto LABEL_55;
                        case 3:
                          unint64_t v18 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
                          sub_1B67C52A4(v18);
                          sub_1B6E328C8();
                          swift_bridgeObjectRelease();
                          uint64_t v19 = 0;
                          goto LABEL_26;
                        case 6:
                          return v5;
                        case 8:
                          *((void *)&v37 + 1) = a2;
                          *(void *)&long long v37 = a2 + 0x7FFFFFFFFFFFFFD8;
                          uint64_t v5 = 0x3474616F6C66;
                          switch((unint64_t)(v37 >> 3))
                          {
                            case 0uLL:
                              return v5;
                            case 6uLL:
                              goto LABEL_55;
                            case 7uLL:
                              sub_1B6E328C8();
                              sub_1B6E32B18();
                              sub_1B6E31948();
                              goto LABEL_55;
                            case 9uLL:
                            case 0xAuLL:
                            case 0xBuLL:
                            case 0xCuLL:
                            case 0xDuLL:
                              return 0x2A64696F76;
                            case 0x13uLL:
                              return 0xD000000000000013;
                            default:
                              goto LABEL_56;
                          }
                        default:
                          goto LABEL_56;
                      }
                    }
                    return 0x616F6C665F786676;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_1B69B0F8C(unint64_t a1)
{
  unint64_t v2 = a1 >> 60;
  if (a1 >> 60 == 8)
  {
    *((void *)&v3 + 1) = a1;
    *(void *)&long long v3 = a1 + 0x7FFFFFFFFFFFFFF0;
    uint64_t result = 0x7265746E696F70;
    switch((unint64_t)(v3 >> 3))
    {
      case 0uLL:
        uint64_t result = 1819242338;
        break;
      case 1uLL:
        return result;
      case 4uLL:
        uint64_t result = 0x3233746E69;
        break;
      case 5uLL:
        uint64_t result = 0x3233746E6975;
        break;
      case 6uLL:
        uint64_t result = 0x3436746E69;
        break;
      case 7uLL:
        uint64_t result = 1718378856;
        break;
      case 8uLL:
        uint64_t result = 0x74616F6C66;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1B6E8F480;
    char v6 = sub_1B69B18E4(v5 | 0x1000000000000000, a1);
    swift_release();
    if (v6)
    {
      return 0x3274616F6C66;
    }
    else
    {
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1B6E8DAE0;
      char v8 = sub_1B69B18E4(v7 | 0x1000000000000000, a1);
      swift_release();
      if (v8)
      {
        return 0x3374616F6C66;
      }
      else
      {
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = xmmword_1B6E8DAD0;
        char v10 = sub_1B69B18E4(v9 | 0x1000000000000000, a1);
        swift_release();
        if (v10)
        {
          return 0x3474616F6C66;
        }
        else
        {
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = 2;
          uint64_t v12 = swift_allocObject();
          *(_OWORD *)(v12 + 16) = xmmword_1B6E8F480;
          *(void *)(v11 + 24) = v12 | 0x1000000000000000;
          char v13 = sub_1B69B18E4(v11 | 0x1000000000000000, a1);
          swift_release();
          if (v13)
          {
            return 0x32783274616F6C66;
          }
          else
          {
            uint64_t v14 = swift_allocObject();
            *(void *)(v14 + 16) = 3;
            uint64_t v15 = swift_allocObject();
            *(_OWORD *)(v15 + 16) = xmmword_1B6E8DAE0;
            *(void *)(v14 + 24) = v15 | 0x1000000000000000;
            char v16 = sub_1B69B18E4(v14 | 0x1000000000000000, a1);
            swift_release();
            if (v16)
            {
              return 0x33783374616F6C66;
            }
            else
            {
              uint64_t v17 = swift_allocObject();
              *(void *)(v17 + 16) = 4;
              uint64_t v18 = swift_allocObject();
              *(_OWORD *)(v18 + 16) = xmmword_1B6E8DAD0;
              *(void *)(v17 + 24) = v18 | 0x1000000000000000;
              char v19 = sub_1B69B18E4(v17 | 0x1000000000000000, a1);
              swift_release();
              if (v19)
              {
                return 0x34783474616F6C66;
              }
              else if (a1 == 0x8000000000000058 && v2 == 8)
              {
                return 0x656C62756F64;
              }
              else
              {
                uint64_t v20 = swift_allocObject();
                *(_OWORD *)(v20 + 16) = xmmword_1B6E9A690;
                char v21 = sub_1B69B18E4(v20 | 0x1000000000000000, a1);
                swift_release();
                if (v21)
                {
                  return 0x33746E6975;
                }
                else if (a1 == 0x8000000000000028 && v2 == 8)
                {
                  return 0x696E726574617571;
                }
                else
                {
                  uint64_t v22 = swift_allocObject();
                  *(void *)(v22 + 16) = 0x8000000000000040;
                  char v23 = sub_1B69B18E4(v22 | 0x2000000000000000, a1);
                  swift_release();
                  if (v23)
                  {
                    return 0x65676E6152746E69;
                  }
                  else
                  {
                    uint64_t v24 = swift_allocObject();
                    *(void *)(v24 + 16) = 0x8000000000000050;
                    char v25 = sub_1B69B18E4(v24 | 0x2000000000000000, a1);
                    swift_release();
                    if (v25)
                    {
                      return 0x6E615274616F6C66;
                    }
                    else
                    {
                      uint64_t result = 0x72656C706D6173;
                      switch((int)v2)
                      {
                        case 0:
                          unint64_t v26 = *(void *)(a1 + 16);
                          sub_1B67C52A4(v26);
                          uint64_t v29 = sub_1B69B0F8C(v26);
                          goto LABEL_37;
                        case 1:
                        case 2:
                          goto LABEL_65;
                        case 3:
                          unint64_t v26 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
                          sub_1B67C52A4(v26);
                          uint64_t v29 = sub_1B69B0F8C(v26);
                          sub_1B6E31948();
                          sub_1B6E33098();
                          sub_1B6E31948();
                          swift_bridgeObjectRelease();
LABEL_37:
                          sub_1B6E31948();
                          sub_1B678FC34(v26);
                          uint64_t result = v29;
                          break;
                        case 4:
                          uint64_t result = 0x65727574786574;
                          switch(*(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10))
                          {
                            case 1:
                              uint64_t result = 0x53657475706D6F63;
                              break;
                            case 2:
                              uint64_t result = 0x61547265646E6572;
                              break;
                            case 3:
                              uint64_t result = 0x746E656D67617266;
                              break;
                            default:
                              return result;
                          }
                          break;
                        case 5:
                          if (*(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10)) {
                            uint64_t result = 0x6174736554746968;
                          }
                          else {
                            uint64_t result = 0x56664F746E696F70;
                          }
                          break;
                        case 6:
                          return result;
                        case 7:
                          uint64_t v27 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
                          swift_bridgeObjectRetain();
                          uint64_t result = v27;
                          break;
                        case 8:
                          uint64_t result = 63;
                          switch(__ROR8__(a1, 3) ^ 0x1000000000000000)
                          {
                            case 0:
                              return 1701736302;
                            case 1:
                              return 2003790950;
                            case 4:
                              return 1836412517;
                            case 0xCLL:
                              return result;
                            case 0xDLL:
                              return 0x676E69727473;
                            case 0xELL:
                              return 0x6D6152726F6C6F63;
                            case 0xFLL:
                              return 0xD000000000000010;
                            case 0x10:
                              return 0x6576727563;
                            case 0x11:
                              uint64_t v28 = 0x546576727563;
                              return v28 & 0xFFFFFFFFFFFFLL | 0x7865000000000000;
                            case 0x12:
                              return 0x6574617473;
                            case 0x13:
                            case 0x17:
                              return 0xD000000000000011;
                            case 0x14:
                              uint64_t v28 = 0x546C6174656DLL;
                              return v28 & 0xFFFFFFFFFFFFLL | 0x7865000000000000;
                            case 0x15:
                              return 0x6675426C6174656DLL;
                            case 0x16:
                              return 0x756F724765646F6ELL;
                            case 0x18:
                              return 0xD000000000000017;
                            default:
                              goto LABEL_64;
                          }
                        default:
LABEL_64:
                          sub_1B6E334A8();
                          __break(1u);
LABEL_65:
                          sub_1B6E32BE8();
                          __break(1u);
                          JUMPOUT(0x1B69B1828);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B69B18E4(unint64_t a1, unint64_t a2)
{
  switch(a1 >> 60)
  {
    case 1uLL:
      if (a2 >> 60 == 1) {
        goto LABEL_9;
      }
      goto LABEL_56;
    case 2uLL:
      if (a2 >> 60 != 2) {
        goto LABEL_56;
      }
      unint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      goto LABEL_11;
    case 3uLL:
      if (a2 >> 60 != 3) {
        goto LABEL_56;
      }
LABEL_9:
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10) != *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10)) {
        goto LABEL_56;
      }
      unint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      unint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      goto LABEL_11;
    case 4uLL:
      if (a2 >> 60 != 4) {
        goto LABEL_56;
      }
      goto LABEL_17;
    case 5uLL:
      if (a2 >> 60 != 5) {
        goto LABEL_56;
      }
      char v6 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10) ^ *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10) ^ 1;
      goto LABEL_57;
    case 6uLL:
      if (a2 >> 60 != 6) {
        goto LABEL_56;
      }
LABEL_17:
      char v6 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10) == *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL)
                                                                                         + 0x10);
      goto LABEL_57;
    case 7uLL:
      if (a2 >> 60 != 7
        || *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10) != *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL)
                                                                                         + 0x10))
      {
        goto LABEL_56;
      }
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) == *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18)
        && *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x20) == *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20))
      {
LABEL_55:
        char v6 = 1;
        goto LABEL_57;
      }
      uint64_t result = sub_1B6E334B8();
      break;
    case 8uLL:
      switch(__ROR8__(a1, 3) ^ 0x1000000000000000)
      {
        case 1:
          unint64_t v8 = 0x8000000000000008;
          break;
        case 2:
          unint64_t v8 = 0x8000000000000010;
          break;
        case 3:
          unint64_t v8 = 0x8000000000000018;
          break;
        case 4:
          unint64_t v8 = 0x8000000000000020;
          break;
        case 5:
          unint64_t v8 = 0x8000000000000028;
          break;
        case 6:
          unint64_t v8 = 0x8000000000000030;
          break;
        case 7:
          unint64_t v8 = 0x8000000000000038;
          break;
        case 8:
          unint64_t v8 = 0x8000000000000040;
          break;
        case 9:
          unint64_t v8 = 0x8000000000000048;
          break;
        case 0xALL:
          unint64_t v8 = 0x8000000000000050;
          break;
        case 0xBLL:
          uint64_t v9 = 80;
          goto LABEL_52;
        case 0xCLL:
          unint64_t v8 = 0x8000000000000060;
          break;
        case 0xDLL:
          unint64_t v8 = 0x8000000000000068;
          break;
        case 0xELL:
          unint64_t v8 = 0x8000000000000070;
          break;
        case 0xFLL:
          unint64_t v8 = 0x8000000000000078;
          break;
        case 0x10:
          unint64_t v8 = 0x8000000000000080;
          break;
        case 0x11:
          unint64_t v8 = 0x8000000000000088;
          break;
        case 0x12:
          unint64_t v8 = 0x8000000000000090;
          break;
        case 0x13:
          uint64_t v9 = 144;
          goto LABEL_52;
        case 0x14:
          unint64_t v8 = 0x80000000000000A0;
          break;
        case 0x15:
          uint64_t v9 = 160;
          goto LABEL_52;
        case 0x16:
          unint64_t v8 = 0x80000000000000B0;
          break;
        case 0x17:
          uint64_t v9 = 176;
LABEL_52:
          unint64_t v8 = v9 | 0x8000000000000008;
          break;
        case 0x18:
          unint64_t v8 = 0x80000000000000C0;
          break;
        default:
          unint64_t v8 = 0x8000000000000000;
          break;
      }
      if (a2 == v8) {
        goto LABEL_55;
      }
      goto LABEL_56;
    default:
      if (a2 >> 60)
      {
LABEL_56:
        char v6 = 0;
LABEL_57:
        uint64_t result = v6 & 1;
      }
      else
      {
        unint64_t v2 = *(void *)(a1 + 16);
        unint64_t v3 = *(void *)(a2 + 16);
LABEL_11:
        sub_1B67C52A4(v2);
        sub_1B67C52A4(v3);
        char v4 = sub_1B69B18E4(v2, v3);
        sub_1B678FC34(v3);
        sub_1B678FC34(v2);
        uint64_t result = v4 & 1;
      }
      break;
  }
  return result;
}

unint64_t sub_1B69B1CC4(uint64_t a1)
{
  uint64_t v2 = 0x8000000000000018;
  if (!swift_dynamicCastMetatype())
  {
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000010;
    }
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000040;
    }
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000030;
    }
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000040;
    }
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000038;
    }
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000058;
    }
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000050;
    }
    sub_1B6395AF8(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v4 = swift_allocObject();
      long long v5 = xmmword_1B6E8F480;
LABEL_22:
      *(_OWORD *)(v4 + 16) = v5;
      return v4 | 0x1000000000000000;
    }
    sub_1B6395AF8(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v4 = swift_allocObject();
      long long v5 = xmmword_1B6E8DAE0;
      goto LABEL_22;
    }
    sub_1B6395AF8(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v4 = swift_allocObject();
      long long v5 = xmmword_1B6E8DAD0;
      goto LABEL_22;
    }
    type metadata accessor for simd_float2x2(0);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = 2;
      uint64_t v7 = swift_allocObject();
      long long v8 = xmmword_1B6E8F480;
LABEL_29:
      *(_OWORD *)(v7 + 16) = v8;
      *(void *)(v6 + 24) = v7 | 0x1000000000000000;
      return v6 | 0x1000000000000000;
    }
    type metadata accessor for simd_float3x3(0);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = 3;
      uint64_t v7 = swift_allocObject();
      long long v8 = xmmword_1B6E8DAE0;
      goto LABEL_29;
    }
    type metadata accessor for simd_float4x4(0);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = 4;
      uint64_t v7 = swift_allocObject();
      long long v8 = xmmword_1B6E8DAD0;
      goto LABEL_29;
    }
    type metadata accessor for simd_quatf(0);
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000028;
    }
    sub_1B69B3564(0, (unint64_t *)&qword_1EB980420, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    if (swift_dynamicCastMetatype()
      || (sub_1B69B3564(0, (unint64_t *)&unk_1EB980430, MEMORY[0x1E4FBC1C8], MEMORY[0x1E4FBC1E0], MEMORY[0x1E4FBB6A0]), swift_dynamicCastMetatype()))
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = 0x8000000000000040;
      return v9 | 0x2000000000000000;
    }
    sub_1B69B3564(0, (unint64_t *)&qword_1EB980410, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBB498], MEMORY[0x1E4FBB6A0]);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = 0x8000000000000050;
      return v10 | 0x2000000000000000;
    }
    sub_1B6395AF8(0, (unint64_t *)&unk_1EB980EC0, (uint64_t (*)(void))sub_1B675900C, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC2A8]);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v4 = swift_allocObject();
      long long v5 = xmmword_1B6E9A690;
      goto LABEL_22;
    }
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000070;
    }
    sub_1B69B3564(0, (unint64_t *)&qword_1EB97FDA0, MEMORY[0x1E4FBB470], (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Curve);
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000080;
    }
    type metadata accessor for TextureDescriptor(0);
    if (swift_dynamicCastMetatype()) {
      return 0x8000000000000098;
    }
    uint64_t v11 = swift_conformsToProtocol2();
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v11) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v13)
    {
      uint64_t v14 = (*(uint64_t (**)(void))(v12 + 8))();
      uint64_t v15 = sub_1B69B1CC4(v14);
      if ((~v15 & 0xF000000000000007) != 0)
      {
        uint64_t v17 = v15;
        uint64_t v2 = swift_allocObject();
        *(void *)(v2 + 16) = v17;
        return v2;
      }
      return 0xF000000000000007;
    }
    type metadata accessor for __vfx_sampler1d(0);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v16 = swift_allocObject();
      *(unsigned char *)(v16 + 16) = 0;
      return v16 | 0x6000000000000000;
    }
    type metadata accessor for __vfx_sampler2d(0);
    if (swift_dynamicCastMetatype())
    {
      uint64_t v18 = swift_allocObject();
      char v19 = 1;
    }
    else
    {
      type metadata accessor for __vfx_sampler3d(0);
      if (!swift_dynamicCastMetatype())
      {
        if (swift_dynamicCastMetatype()) {
          return 0x8000000000000068;
        }
        if (swift_conformsToProtocol2()) {
          uint64_t v20 = a1;
        }
        else {
          uint64_t v20 = 0;
        }
        if (v20) {
          return 0x8000000000000020;
        }
        if (swift_dynamicCastMetatype()) {
          return v2;
        }
        sub_1B69B35B4();
        if (swift_dynamicCastMetatype()) {
          return 0x8000000000000090;
        }
        return 0xF000000000000007;
      }
      uint64_t v18 = swift_allocObject();
      char v19 = 2;
    }
    *(unsigned char *)(v18 + 16) = v19;
    return v18 | 0x6000000000000000;
  }
  return v2;
}

uint64_t sub_1B69B23C4(unint64_t a1, unint64_t a2)
{
  if (sub_1B69B18E4(a2, a1))
  {
    char v4 = 1;
  }
  else if (a2 >> 60)
  {
    char v4 = 0;
  }
  else
  {
    unint64_t v5 = *(void *)(a2 + 16);
    sub_1B67C52A4(v5);
    if (sub_1B69B18E4(a1, 0x8000000000000000)) {
      char v4 = 1;
    }
    else {
      char v4 = sub_1B69B23C4(a1, v5);
    }
    sub_1B678FC34(v5);
  }
  return v4 & 1;
}

uint64_t sub_1B69B2450()
{
  return sub_1B6E31BD8();
}

uint64_t sub_1B69B24B0()
{
  return sub_1B6E31B38();
}

uint64_t sub_1B69B2500()
{
  return sub_1B6E31BD8();
}

uint64_t sub_1B69B2560()
{
  return sub_1B6E31B38();
}

uint64_t sub_1B69B25B0(char a1, unint64_t a2)
{
  int v3 = a1 & 1;
  if (a2 >> 60 == 1 && (*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) >> 60 != 1 ? (BOOL v4 = v3 == 0) : (BOOL v4 = 0), v4))
  {
    sub_1B69B04D4(0, a2);
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    return 0x5F656B616DLL;
  }
  else
  {
    unint64_t v5 = 0xD000000000000012;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = 0x8000000000000050;
    char v7 = sub_1B69B18E4(v6 | 0x2000000000000000, a2);
    swift_release();
    if (v7)
    {
      return 0xD000000000000014;
    }
    else
    {
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = 0x8000000000000040;
      char v9 = sub_1B69B18E4(v8 | 0x2000000000000000, a2);
      swift_release();
      if ((v9 & 1) == 0) {
        return sub_1B69B04D4(v3, a2);
      }
    }
  }
  return v5;
}

unint64_t sub_1B69B2708(uint64_t a1)
{
  unint64_t result = sub_1B69B1CC4(a1);
  if ((~result & 0xF000000000000007) == 0)
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    unint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

void sub_1B69B27D0(unint64_t a1)
{
  unint64_t v2 = a1 >> 60;
  if (a1 >> 60 == 8)
  {
    *((void *)&v3 + 1) = a1;
    *(void *)&long long v3 = a1 + 0x7FFFFFFFFFFFFFF0;
    switch((unint64_t)(v3 >> 3))
    {
      case 0uLL:
      case 1uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        return;
      default:
        goto LABEL_3;
    }
    return;
  }
LABEL_3:
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E9A6A0;
  char v5 = sub_1B69B18E4(v4 | 0x1000000000000000, a1);
  swift_release();
  if (v5) {
    return;
  }
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E9A6B0;
  char v7 = sub_1B69B18E4(v6 | 0x1000000000000000, a1);
  swift_release();
  if (v7) {
    return;
  }
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E9A6C0;
  char v9 = sub_1B69B18E4(v8 | 0x1000000000000000, a1);
  swift_release();
  if ((v9 & 1) != 0 || a1 == 0x8000000000000050 && v2 == 8) {
    return;
  }
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B6E8F480;
  char v11 = sub_1B69B18E4(v10 | 0x1000000000000000, a1);
  swift_release();
  if (v11)
  {
    uint64_t v12 = &qword_1EB980E90;
    uint64_t v13 = MEMORY[0x1E4FBB470];
    uint64_t v14 = sub_1B6645830;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
LABEL_15:
    sub_1B6395AF8(0, v12, (uint64_t (*)(void))v14, v13, v15);
    return;
  }
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B6E8DAE0;
  char v17 = sub_1B69B18E4(v16 | 0x1000000000000000, a1);
  swift_release();
  if (v17)
  {
    uint64_t v12 = (unint64_t *)&qword_1EB980EB0;
    uint64_t v13 = MEMORY[0x1E4FBB470];
    uint64_t v18 = sub_1B6645830;
LABEL_12:
    uint64_t v14 = v18;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    goto LABEL_15;
  }
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E8DAD0;
  char v20 = sub_1B69B18E4(v19 | 0x1000000000000000, a1);
  swift_release();
  if (v20)
  {
    uint64_t v12 = (unint64_t *)&qword_1EB980EF0;
    uint64_t v13 = MEMORY[0x1E4FBB470];
    uint64_t v14 = sub_1B6645830;
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
    goto LABEL_15;
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 2;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1B6E8F480;
  *(void *)(v21 + 24) = v22 | 0x1000000000000000;
  char v23 = sub_1B69B18E4(v21 | 0x1000000000000000, a1);
  swift_release();
  if (v23)
  {
    type metadata accessor for simd_float2x2(0);
    return;
  }
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = 3;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v24 + 24) = v25 | 0x1000000000000000;
  char v26 = sub_1B69B18E4(v24 | 0x1000000000000000, a1);
  swift_release();
  if (v26)
  {
    type metadata accessor for simd_float3x3(0);
    return;
  }
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = 4;
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1B6E8DAD0;
  *(void *)(v27 + 24) = v28 | 0x1000000000000000;
  char v29 = sub_1B69B18E4(v27 | 0x1000000000000000, a1);
  swift_release();
  if (v29)
  {
    type metadata accessor for simd_float4x4(0);
    return;
  }
  if (a1 != 0x8000000000000058 || v2 != 8)
  {
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1B6E9A690;
    char v31 = sub_1B69B18E4(v30 | 0x1000000000000000, a1);
    swift_release();
    if (v31)
    {
      uint64_t v12 = (unint64_t *)&unk_1EB980EC0;
      uint64_t v13 = MEMORY[0x1E4FBC4C0];
      uint64_t v18 = sub_1B675900C;
      goto LABEL_12;
    }
    if (v2 == 8)
    {
      *((void *)&v32 + 1) = a1;
      *(void *)&long long v32 = a1 + 0x7FFFFFFFFFFFFFD8;
      switch((unint64_t)(v32 >> 3))
      {
        case 0uLL:
          type metadata accessor for simd_quatf(0);
          break;
        case 7uLL:
        case 8uLL:
        case 9uLL:
        case 0xAuLL:
        case 0xCuLL:
          return;
        case 0xBuLL:
          uint64_t v35 = &qword_1EB97FDA0;
          uint64_t v36 = MEMORY[0x1E4FBB470];
          long long v37 = &off_1F0FAB230;
          uint64_t v40 = type metadata accessor for Curve;
          goto LABEL_35;
        default:
          goto LABEL_30;
      }
    }
    else
    {
LABEL_30:
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = 0x8000000000000040;
      char v34 = sub_1B69B18E4(v33 | 0x2000000000000000, a1);
      swift_release();
      if (v34)
      {
        uint64_t v35 = (uint64_t *)&unk_1EB980430;
        uint64_t v36 = MEMORY[0x1E4FBC1C8];
        long long v37 = (_UNKNOWN **)MEMORY[0x1E4FBC1E0];
      }
      else
      {
        uint64_t v38 = swift_allocObject();
        *(void *)(v38 + 16) = 0x8000000000000050;
        char v39 = sub_1B69B18E4(v38 | 0x2000000000000000, a1);
        swift_release();
        if ((v39 & 1) == 0)
        {
          if (v2 == 8)
          {
            *((void *)&v41 + 1) = a1;
            *(void *)&long long v41 = a1 + 0x7FFFFFFFFFFFFF70;
            switch((unint64_t)(v41 >> 3))
            {
              case 0uLL:
                sub_1B69B3920();
                break;
              case 1uLL:
                type metadata accessor for TextureDescriptor(0);
                break;
              case 6uLL:
                type metadata accessor for pbr_lighting_parameters(0);
                break;
              default:
                return;
            }
          }
          return;
        }
        uint64_t v35 = &qword_1EB980410;
        uint64_t v36 = MEMORY[0x1E4FBB470];
        long long v37 = (_UNKNOWN **)MEMORY[0x1E4FBB498];
      }
      uint64_t v40 = (uint64_t (*)())MEMORY[0x1E4FBB6A0];
LABEL_35:
      sub_1B69B3564(0, (unint64_t *)v35, v36, (uint64_t)v37, (uint64_t (*)(void, uint64_t, uint64_t))v40);
    }
  }
}

uint64_t sub_1B69B2F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = sub_1B6E324B8();
  uint64_t v6 = sub_1B62C12C4(a3);
  uint64_t v9 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v6, a1, a2);
  char v7 = *(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56);

  return v7(v6, 0, 1, a2);
}

unint64_t sub_1B69B2FF4(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 60)
  {
    case 1uLL:
      unint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      goto LABEL_7;
    case 2uLL:
      unint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      goto LABEL_5;
    case 3uLL:
      unint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
LABEL_7:
      sub_1B6E33928();
      sub_1B6E33928();
      sub_1B67C52A4(v4);
      sub_1B69B2FF4(a1, v4);
      unint64_t v5 = v4;
      goto LABEL_8;
    case 4uLL:
    case 5uLL:
    case 6uLL:
      sub_1B6E33928();
      return sub_1B6E33938();
    case 7uLL:
      sub_1B6E33928();
      sub_1B6E33938();
      return sub_1B6E318B8();
    case 8uLL:
      return sub_1B6E33928();
    default:
      unint64_t v3 = *(void *)(a2 + 16);
LABEL_5:
      sub_1B6E33928();
      sub_1B67C52A4(v3);
      sub_1B69B2FF4(a1, v3);
      unint64_t v5 = v3;
LABEL_8:
      return sub_1B678FC34(v5);
  }
}

uint64_t sub_1B69B32D4()
{
  unint64_t v1 = *v0;
  sub_1B6E33918();
  sub_1B69B2FF4((uint64_t)v3, v1);
  return sub_1B6E33988();
}

unint64_t sub_1B69B331C(uint64_t a1)
{
  return sub_1B69B2FF4(a1, *v1);
}

uint64_t sub_1B69B3324()
{
  unint64_t v1 = *v0;
  sub_1B6E33918();
  sub_1B69B2FF4((uint64_t)v3, v1);
  return sub_1B6E33988();
}

uint64_t sub_1B69B3368(unint64_t *a1, unint64_t *a2)
{
  return sub_1B69B18E4(*a1, *a2);
}

unint64_t sub_1B69B3378()
{
  unint64_t result = qword_1E9DD3470;
  if (!qword_1E9DD3470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3470);
  }
  return result;
}

unint64_t sub_1B69B33D0()
{
  unint64_t result = qword_1E9DD3478;
  if (!qword_1E9DD3478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3478);
  }
  return result;
}

unint64_t sub_1B69B3428()
{
  unint64_t result = qword_1E9DD3480;
  if (!qword_1E9DD3480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3480);
  }
  return result;
}

uint64_t sub_1B69B347C()
{
  sub_1B678FC34(*(void *)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B69B34B4()
{
  sub_1B678FC34(*(void *)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B69B34EC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t sub_1B69B3534()
{
  return MEMORY[0x1F4186498](v0, 32, 15);
}

uint64_t sub_1B69B3544()
{
  return MEMORY[0x1F4186498](v0, 80, 15);
}

uint64_t sub_1B69B3554()
{
  return MEMORY[0x1F4186498](v0, 64, 15);
}

void sub_1B69B3564(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_1B69B35B4()
{
  unint64_t result = qword_1E9DD3488;
  if (!qword_1E9DD3488)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9DD3488);
  }
  return result;
}

uint64_t sub_1B69B35F4()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B69B3604()
{
  sub_1B666BDC4();
  sub_1B666BE18();
  if (sub_1B6E31618())
  {
    char v0 = sub_1B6E31618();
    swift_bridgeObjectRelease();
    if (v0) {
      return 4;
    }
    else {
      return 0;
    }
  }
  else if (sub_1B6E31618())
  {
    char v2 = sub_1B6E31618();
    swift_bridgeObjectRelease();
    if (v2) {
      return 5;
    }
    else {
      return 1;
    }
  }
  else if (sub_1B6E31618())
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (sub_1B6E31618())
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v3 = sub_1B6E31618();
    swift_bridgeObjectRelease();
    if (v3) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

unint64_t sub_1B69B3878()
{
  unint64_t result = qword_1E9DD3490;
  if (!qword_1E9DD3490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3490);
  }
  return result;
}

unint64_t sub_1B69B38CC()
{
  unint64_t result = qword_1E9DD3498;
  if (!qword_1E9DD3498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3498);
  }
  return result;
}

void sub_1B69B3920()
{
  if (!qword_1E9DD34A0)
  {
    sub_1B69B35B4();
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD34A0);
    }
  }
}

uint64_t sub_1B69B397C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B69C3290(0, &qword_1E9DD34D8, (uint64_t (*)(void))sub_1B69C2F7C, (uint64_t)&type metadata for ParticleFlockingAlignOrientation.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v13 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C2F7C();
  sub_1B6E33A88();
  LOBYTE(v13) = *(unsigned char *)v3;
  char v14 = 0;
  sub_1B66C58CC();
  sub_1B6E32FA8();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_1B6E32F78();
    LOBYTE(v13) = *(unsigned char *)(v3 + 8);
    char v14 = 2;
    sub_1B6E32FA8();
    long long v13 = *(_OWORD *)(v3 + 16);
    char v14 = 3;
    char v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B69C2FD0((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v11);
    sub_1B6E32FA8();
    LOBYTE(v13) = 4;
    sub_1B6E32F58();
    LOBYTE(v13) = 5;
    sub_1B6E32F78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B69B3C68(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB920C(*a1, *a2);
}

uint64_t sub_1B69B3C74()
{
  return sub_1B6BCFC3C();
}

uint64_t sub_1B69B3C7C()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69B3D8C()
{
  return sub_1B69EA6F4();
}

uint64_t sub_1B69B3D94@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69028FC();
  *a1 = result;
  return result;
}

void sub_1B69B3DCC(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE90000000000006ELL;
  uint64_t v3 = 0x6F69746365726964;
  switch(*v1)
  {
    case 1:
      unint64_t v4 = 0xEC0000007269446CLL;
      goto LABEL_8;
    case 2:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x726F746365567075;
      goto LABEL_4;
    case 3:
      *(void *)a1 = 0x7441746E696F70;
      *(void *)(a1 + 8) = 0xE700000000000000;
      return;
    case 4:
      strcpy((char *)a1, "reduceFlipping");
      *(unsigned char *)(a1 + 15) = -18;
      return;
    case 5:
      unint64_t v4 = 0xEE0063655670556CLL;
LABEL_8:
      *(void *)a1 = 0x6556746F5278616DLL;
      *(void *)(a1 + 8) = v4;
      return;
    default:
LABEL_4:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      return;
  }
}

uint64_t sub_1B69B3EB8()
{
  uint64_t result = 0x6F69746365726964;
  switch(*v0)
  {
    case 1:
    case 5:
      uint64_t result = 0x6556746F5278616DLL;
      break;
    case 2:
      uint64_t result = 0x726F746365567075;
      break;
    case 3:
      uint64_t result = 0x7441746E696F70;
      break;
    case 4:
      uint64_t result = 0x6C46656375646572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69B3F94@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69028FC();
  *a1 = result;
  return result;
}

uint64_t sub_1B69B3FC4(uint64_t a1)
{
  unint64_t v2 = sub_1B69C2F7C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69B4000(uint64_t a1)
{
  unint64_t v2 = sub_1B69C2F7C();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B69B403C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B69BC9B4(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B69B4080(void *a1)
{
  return sub_1B69B397C(a1);
}

uint64_t sub_1B69B4098()
{
  return type metadata accessor for ParticleFlockingAlignOrientationSystem();
}

double sub_1B69B40B8@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 1124532224;
  *(unsigned char *)(a1 + 8) = 1;
  double result = 0.0078125;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F320;
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 1124532224;
  return result;
}

void sub_1B69B40E4(void *a1, char a2, float a3, int32x4_t a4, float a5, int32x4_t a6, int32x4_t a7)
{
  char v11 = (uint64_t *)a1[11];
  uint64_t v12 = a1[12];
  uint64_t v13 = a1[13];
  uint64_t v14 = a1[2];
  uint64_t v15 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v11, v12, v13, v14);
  uint64_t v16 = sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, v11, v12, v13, v14);
  float32x2_t v22 = *(float32x2_t *)a6.i8;
  uint64_t v23 = a1[6];
  uint64_t v24 = a1[7];
  uint64_t v25 = v24 - v23;
  if (v24 != v23)
  {
    float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.i8, 0);
    float32x4_t v27 = (float32x4_t)vdupq_laneq_s32(a4, 2);
    float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
    float32x4_t v29 = (float32x4_t)vdupq_laneq_s32(a6, 2);
    float32x4_t v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a7, a7), (int8x16_t)a7, 0xCuLL);
    float32x4_t v31 = vnegq_f32((float32x4_t)a7);
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (float32x4_t *)(v15 + v32);
    char v34 = (float32x4_t *)(v16 + v32);
    float32x4_t v35 = (float32x4_t)xmmword_1B6E4F550;
    float32x4_t v137 = v27;
    float32x4_t v138 = v26;
    float32x4_t v135 = v29;
    float32x4_t v136 = v28;
    float32x4_t v133 = v31;
    float32x4_t v134 = v30;
    while (1)
    {
      float32x4_t v38 = *v34;
      if (a3 <= 0.0) {
        goto LABEL_21;
      }
      float32x4_t v39 = *v33;
      float32x4_t v40 = vmulq_f32(v39, v39);
      int32x2_t v41 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u64[0];
      *(float *)v41.i32 = sqrtf(*(float *)v41.i32);
      if (*(float *)v41.i32 <= 0.00000011921) {
        goto LABEL_21;
      }
      float32x4_t v42 = vmulq_f32(v38, v35);
      int8x16_t v43 = (int8x16_t)vnegq_f32(v42);
      int8x16_t v44 = (int8x16_t)vtrn2q_s32((int32x4_t)v42, vtrn1q_s32((int32x4_t)v42, (int32x4_t)v43));
      float32x4_t v45 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v42, v43, 8uLL), *(float32x2_t *)a4.i8, 1), (float32x4_t)vextq_s8(v44, v44, 8uLL), v26);
      float32x4_t v46 = (float32x4_t)vrev64q_s32((int32x4_t)v42);
      v46.i32[0] = v43.i32[1];
      v46.i32[3] = v43.i32[2];
      float32x4_t v47 = vmlaq_f32(v45, v46, v27);
      int8x16_t v48 = (int8x16_t)vnegq_f32(v47);
      int8x16_t v49 = (int8x16_t)vtrn2q_s32((int32x4_t)v47, vtrn1q_s32((int32x4_t)v47, (int32x4_t)v48));
      float32x4_t v50 = (float32x4_t)vrev64q_s32((int32x4_t)v47);
      v50.i32[0] = v48.i32[1];
      v50.i32[3] = v48.i32[2];
      float32x4_t v51 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v47, v38, 3), v50, v38, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v47, v48, 8uLL), *(float32x2_t *)v38.f32, 1), (float32x4_t)vextq_s8(v49, v49, 8uLL), v38.f32[0]));
      float32x4_t v52 = v51;
      v52.i32[3] = v19.i32[3];
      float32x4_t v53 = vdivq_f32(v39, (float32x4_t)vdupq_lane_s32(v41, 0));
      float32x4_t v54 = v53;
      v54.i32[3] = v18.i32[3];
      float32x4_t v55 = vmulq_f32(v52, v54);
      float v56 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0];
      float v57 = 0.0;
      if (v56 <= 1.0)
      {
        if (v56 >= -1.0)
        {
          float32x4_t v153 = *v34;
          float32x4_t v156 = v17;
          float32x4_t v145 = v21;
          float32x4_t v148 = v20;
          float32x4_t v139 = v54;
          float32x4_t v142 = v52;
          float32x4_t v129 = v51;
          float32x4_t v126 = v53;
          float v57 = acosf(v56);
          float32x4_t v53 = v126;
          float32x4_t v51 = v129;
          float32x4_t v54 = v139;
          float32x4_t v52 = v142;
          float32x4_t v21 = v145;
          float32x4_t v20 = v148;
          float32x4_t v38 = v153;
          float32x4_t v17 = v156;
          float32x4_t v35 = (float32x4_t)xmmword_1B6E4F550;
          float32x4_t v31 = v133;
          float32x4_t v30 = v134;
          float32x4_t v29 = v135;
          float32x4_t v28 = v136;
          float32x4_t v27 = v137;
          float32x4_t v26 = v138;
          float32x2_t v22 = *(float32x2_t *)a6.i8;
        }
        else
        {
          float v57 = 3.1416;
        }
      }
      float32x4_t v58 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL), vnegq_f32(v51)), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL));
      float32x4_t v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL);
      int8x16_t v60 = (int8x16_t)vabsq_f32(v59);
      if (*(float *)v60.i32 > 0.00000011921
        || (v60.i32[0] = vextq_s8(v60, v60, 8uLL).u32[0],
            *(int32x2_t *)v60.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v60.i8),
            (v60.i8[4] & 1) == 0)
        || (__int8 v61 = v60.i8[0], v62 = 0uLL, (v61 & 1) == 0))
      {
        int32x4_t v63 = (int32x4_t)vmulq_f32(v58, v58);
        v63.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), *(float32x2_t *)v63.i8)).u32[0];
        float32x2_t v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
        float32x2_t v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
        int8x16_t v62 = (int8x16_t)vmulq_n_f32(v59, vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).f32[0]);
        v62.i32[3] = v151;
      }
      if (v57 < 0.001) {
        break;
      }
      if ((v62.i32[0] & 0x7FFFFFFF) == 0)
      {
        v66.i32[0] = vextq_s8(v62, v62, 8uLL).u32[0] & 0x7FFFFFFF;
        v66.i32[1] = v62.i32[1] & 0x7FFFFFFF;
        int32x2_t v67 = vceqz_s32(v66);
        if (v67.i8[4] & 1) != 0 && (v67.i8[0]) {
          break;
        }
      }
      if (v57 >= a3) {
        float v57 = a3;
      }
      float32x4_t v155 = v38;
      float32x4_t v158 = v17;
      float32x4_t v147 = v21;
      float32x4_t v150 = v20;
      float32x4_t v141 = v54;
      float32x4_t v144 = v52;
      float32x4_t v131 = (float32x4_t)v62;
      __float2 v104 = __sincosf_stret(v57 * 0.5);
      float32x4_t v21 = v147;
      float32x4_t v20 = v150;
      float32x4_t v17 = v158;
      float32x4_t v35 = (float32x4_t)xmmword_1B6E4F550;
      float32x4_t v31 = v133;
      float32x4_t v30 = v134;
      float32x4_t v29 = v135;
      float32x4_t v28 = v136;
      float32x4_t v27 = v137;
      float32x4_t v26 = v138;
      float32x4_t v18 = v141;
      float32x2_t v22 = *(float32x2_t *)a6.i8;
      float32x4_t v105 = vmulq_n_f32(v131, v104.__sinval);
      int8x16_t v106 = (int8x16_t)vnegq_f32(v155);
      int8x16_t v107 = (int8x16_t)vtrn2q_s32((int32x4_t)v155, vtrn1q_s32((int32x4_t)v155, (int32x4_t)v106));
      float32x4_t v108 = (float32x4_t)vrev64q_s32((int32x4_t)v155);
      v108.i32[0] = v106.i32[1];
      v108.i32[3] = v106.i32[2];
      float32x4_t v38 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v155, v104.__cosval), v108, v105, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v155, v106, 8uLL), *(float32x2_t *)v105.f32, 1), (float32x4_t)vextq_s8(v107, v107, 8uLL), v105.f32[0]));
      float32x4_t v19 = v144;
      if (a5 > 0.0)
      {
LABEL_22:
        float32x4_t v68 = vmulq_f32(v38, v35);
        int8x16_t v69 = (int8x16_t)vnegq_f32(v68);
        int8x16_t v70 = (int8x16_t)vtrn2q_s32((int32x4_t)v68, vtrn1q_s32((int32x4_t)v68, (int32x4_t)v69));
        float32x4_t v71 = (float32x4_t)vextq_s8(v70, v70, 8uLL);
        float32x4_t v72 = (float32x4_t)vextq_s8((int8x16_t)v68, v69, 8uLL);
        float32x4_t v73 = (float32x4_t)vrev64q_s32((int32x4_t)v68);
        v73.i32[0] = v69.i32[1];
        v73.i32[3] = v69.i32[2];
        float32x4_t v74 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v72, *(float32x2_t *)a4.i8, 1), v71, v26), v73, v27);
        int8x16_t v75 = (int8x16_t)vnegq_f32(v74);
        int8x16_t v76 = (int8x16_t)vtrn2q_s32((int32x4_t)v74, vtrn1q_s32((int32x4_t)v74, (int32x4_t)v75));
        float32x4_t v77 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v74, v75, 8uLL), *(float32x2_t *)v38.f32, 1), (float32x4_t)vextq_s8(v76, v76, 8uLL), v38.f32[0]);
        float32x4_t v78 = (float32x4_t)vrev64q_s32((int32x4_t)v74);
        v78.i32[0] = v75.i32[1];
        v78.i32[3] = v75.i32[2];
        float32x4_t v79 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v74, v38, 3), v78, v38, 2), v77);
        float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
        int8x16_t v81 = (int8x16_t)vmlaq_f32(vmulq_f32(v80, v31), v79, v30);
        float32x4_t v82 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), v81, 0xCuLL);
        float32x4_t v83 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL), vnegq_f32(v79)), v82, v80);
        float32x4_t v84 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL);
        int8x16_t v85 = (int8x16_t)vabsq_f32(v84);
        if (*(float *)v85.i32 > 0.00000011921
          || (v85.i32[0] = vextq_s8(v85, v85, 8uLL).u32[0],
              *(int32x2_t *)v85.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v85.i8),
              (v85.i8[4] & 1) == 0)
          || (float32x4_t v86 = 0uLL, (v85.i8[0] & 1) == 0))
        {
          int32x4_t v87 = (int32x4_t)vmulq_f32(v83, v83);
          v87.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v87, 2), *(float32x2_t *)v87.i8)).u32[0];
          float32x2_t v88 = vrsqrte_f32((float32x2_t)v87.u32[0]);
          float32x2_t v89 = vmul_f32(v88, vrsqrts_f32((float32x2_t)v87.u32[0], vmul_f32(v88, v88)));
          float32x4_t v86 = vmulq_n_f32(v84, vmul_f32(v89, vrsqrts_f32((float32x2_t)v87.u32[0], vmul_f32(v89, v89))).f32[0]);
          v86.i32[3] = v17.i32[3];
          float32x4_t v17 = v86;
        }
        float32x4_t v37 = v79;
        v37.i32[3] = v21.i32[3];
        float32x4_t v90 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v72, v22, 1), v71, v28), v73, v29);
        int8x16_t v91 = (int8x16_t)vnegq_f32(v90);
        int8x16_t v92 = (int8x16_t)vtrn2q_s32((int32x4_t)v90, vtrn1q_s32((int32x4_t)v90, (int32x4_t)v91));
        float32x4_t v93 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v90, v91, 8uLL), *(float32x2_t *)v38.f32, 1), (float32x4_t)vextq_s8(v92, v92, 8uLL), v38.f32[0]);
        float32x4_t v94 = (float32x4_t)vrev64q_s32((int32x4_t)v90);
        v94.i32[0] = v91.i32[1];
        v94.i32[3] = v91.i32[2];
        float32x4_t v95 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v90, v38, 3), v94, v38, 2), v93);
        float32x4_t v36 = v95;
        v36.i32[3] = v20.i32[3];
        if ((v86.i32[0] & 0x7FFFFFFF) == 0)
        {
          v96.i32[0] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u32[0] & 0x7FFFFFFF;
          v96.i32[1] = v86.i32[1] & 0x7FFFFFFF;
          int32x2_t v97 = vceqz_s32(v96);
          if (v97.i8[4] & 1) != 0 && (v97.i8[0]) {
            goto LABEL_5;
          }
        }
        float v98 = 1.0;
        if (a2)
        {
          float32x4_t v99 = vmulq_f32(v37, (float32x4_t)a7);
          float v100 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).f32[0]);
          if (v100 >= 0.9) {
            goto LABEL_5;
          }
          if (v100 > 0.1)
          {
            float v98 = (float)((float)(v100 + -0.1) / -0.8) + 1.0;
            if (v98 <= 0.0) {
              goto LABEL_5;
            }
          }
        }
        float32x4_t v101 = vmulq_f32(v36, v86);
        float v102 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 2), vaddq_f32(v101, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v101.f32, 1))).f32[0];
        if (v102 > 1.0) {
          goto LABEL_5;
        }
        float32x4_t v154 = v38;
        float32x4_t v157 = v17;
        float32x4_t v143 = v19;
        float32x4_t v146 = v18;
        float32x4_t v149 = v37;
        float32x4_t v130 = v79;
        float32x4_t v140 = v36;
        if (v102 < -1.0)
        {
          float v103 = 3.1416;
          goto LABEL_42;
        }
        float32x4_t v125 = v95;
        float32x4_t v127 = v86;
        float v103 = acosf(v102);
        float32x4_t v95 = v125;
        float32x4_t v86 = v127;
        float32x4_t v37 = v149;
        if (v103 >= 0.001)
        {
LABEL_42:
          float32x4_t v109 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL), vnegq_f32(v95)), v86, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL));
          float32x4_t v110 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109), (int8x16_t)v109, 0xCuLL);
          int32x4_t v111 = (int32x4_t)vmulq_f32(v109, v109);
          v111.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v111, 2), *(float32x2_t *)v111.i8)).u32[0];
          float32x2_t v112 = vrsqrte_f32((float32x2_t)v111.u32[0]);
          float32x2_t v113 = vmul_f32(v112, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v112, v112)));
          float32x4_t v114 = vmulq_n_f32(v110, vmul_f32(v113, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v113, v113))).f32[0]);
          v114.i32[3] = v128;
          float32x4_t v115 = vmulq_f32(v37, v114);
          LODWORD(v116) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 2), vaddq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1))).u32[0];
          if (v103 >= a5) {
            float v103 = a5;
          }
          float v117 = v98 * v103;
          float v118 = -(float)(v98 * v103);
          if (v116 >= 0.0) {
            float v118 = v117;
          }
          __float2 v119 = __sincosf_stret(v118 * 0.5);
          float32x4_t v120 = vmulq_n_f32(v130, v119.__sinval);
          float32x2_t v22 = *(float32x2_t *)a6.i8;
          int8x16_t v121 = (int8x16_t)vnegq_f32(v154);
          int8x16_t v122 = (int8x16_t)vtrn2q_s32((int32x4_t)v154, vtrn1q_s32((int32x4_t)v154, (int32x4_t)v121));
          float32x4_t v123 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v154, v121, 8uLL), *(float32x2_t *)v120.f32, 1), (float32x4_t)vextq_s8(v122, v122, 8uLL), v120.f32[0]);
          float32x4_t v124 = (float32x4_t)vrev64q_s32((int32x4_t)v154);
          v124.i32[0] = v121.i32[1];
          v124.i32[3] = v121.i32[2];
          float32x4_t v37 = v149;
          float32x4_t v38 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v154, v119.__cosval), v124, v120, 2), v123);
        }
        else
        {
          float32x2_t v22 = *(float32x2_t *)a6.i8;
          float32x4_t v38 = v154;
        }
        float32x4_t v27 = v137;
        float32x4_t v26 = v138;
        float32x4_t v29 = v135;
        float32x4_t v28 = v136;
        float32x4_t v31 = v133;
        float32x4_t v30 = v134;
        float32x4_t v35 = (float32x4_t)xmmword_1B6E4F550;
        float32x4_t v17 = v157;
        float32x4_t v19 = v143;
        float32x4_t v18 = v146;
        float32x4_t v36 = v140;
        goto LABEL_5;
      }
LABEL_4:
      float32x4_t v36 = v20;
      float32x4_t v37 = v21;
LABEL_5:
      *v34++ = v38;
      ++v33;
      float32x4_t v20 = v36;
      float32x4_t v21 = v37;
      if (!--v25) {
        return;
      }
    }
    float32x4_t v19 = v52;
    float32x4_t v18 = v54;
LABEL_21:
    if (a5 > 0.0) {
      goto LABEL_22;
    }
    goto LABEL_4;
  }
}

uint64_t type metadata accessor for ParticleFlockingAlignOrientationSystem()
{
  return self;
}

const char *sub_1B69B4878()
{
  return "ParticleFlockingAlignOrientation";
}

uint64_t sub_1B69B488C(void *a1, double a2, __n128 a3)
{
  __n128 v13 = a3;
  sub_1B69C3290(0, &qword_1E9DD34F0, (uint64_t (*)(void))sub_1B69C3034, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v13 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C3034();
  sub_1B6E33A88();
  v14.n128_u8[0] = 0;
  sub_1B6E32F78();
  if (!v3)
  {
    __n128 v14 = v13;
    char v15 = 1;
    char v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B69C2FD0((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v11);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B69B4AAC(char *a1, char *a2)
{
  return sub_1B6BB960C(*a1, *a2);
}

uint64_t sub_1B69B4AB8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69B4B48()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69B4BC4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69B4C50@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1B69B4CB0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x636E65756C666E69;
  if (*v1) {
    uint64_t v2 = 0x726F4E656E616C70;
  }
  unint64_t v3 = 0xE900000000000065;
  if (*v1) {
    unint64_t v3 = 0xEB000000006C616DLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B69B4CFC()
{
  if (*v0) {
    return 0x726F4E656E616C70;
  }
  else {
    return 0x636E65756C666E69;
  }
}

uint64_t sub_1B69B4D44@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1B69B4DA8(uint64_t a1)
{
  unint64_t v2 = sub_1B69C3034();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69B4DE4(uint64_t a1)
{
  unint64_t v2 = sub_1B69C3034();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B69B4E20(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_1B69BD4D4(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_OWORD *)(a2 + 16) = v5;
  }
}

uint64_t sub_1B69B4E50(void *a1, double a2)
{
  LODWORD(a2) = v2->n128_u32[0];
  return sub_1B69B488C(a1, a2, v2[1]);
}

uint64_t sub_1B69B4E70()
{
  return type metadata accessor for ParticleFlockingAlignVelocityOnPlaneSystem();
}

double sub_1B69B4E90@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1048576000;
  double result = 0.0078125;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F320;
  return result;
}

uint64_t type metadata accessor for ParticleFlockingAlignVelocityOnPlaneSystem()
{
  return self;
}

const char *sub_1B69B4ED0()
{
  return "ParticleFlockingAlignVelocityOnPlane";
}

uint64_t sub_1B69B4EE4(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB9064(*a1, *a2);
}

uint64_t sub_1B69B4EF0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69B4FD8()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69B50A8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69B518C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

void sub_1B69B51C4(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEF7373656E6B6369;
  uint64_t v3 = 0x6854726564726F62;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x3172656E726F63;
      goto LABEL_3;
    case 2:
      *a1 = 0x3272656E726F63;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x61657241776F6873;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B69B526C()
{
  uint64_t result = 0x6854726564726F62;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x3172656E726F63;
      break;
    case 2:
      uint64_t result = 0x3272656E726F63;
      break;
    case 3:
      uint64_t result = 0x61657241776F6873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69B5308@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

uint64_t sub_1B69B5338(uint64_t a1)
{
  unint64_t v2 = sub_1B69C3088();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69B5374(uint64_t a1)
{
  unint64_t v2 = sub_1B69C3088();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B69B53B0(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1B69B5400(void *a1, double a2)
{
  LODWORD(a2) = v2->n128_u32[0];
  return sub_1B69B5988(a1, v2[3].n128_u8[0], &qword_1E9DD3508, (uint64_t (*)(void))sub_1B69C3088, (uint64_t)&type metadata for ParticleFlockingConstrainToArea.CodingKeys, (void (*)(void))sub_1B69C3088, a2, v2[1], v2[2]);
}

uint64_t sub_1B69B545C()
{
  return type metadata accessor for ParticleFlockingConstrainToAreaSystem();
}

double sub_1B69B547C@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0x40000000;
  double result = -524288.378;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E9A960;
  *(_OWORD *)(a1 + 32) = xmmword_1B6E9A970;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

void sub_1B69B54A0(void *a1, float32x4_t a2, float32x4_t a3, float a4, float32x4_t a5, float a6, float a7, float a8, float a9)
{
  __n128 v14 = (uint64_t *)a1[11];
  uint64_t v15 = a1[12];
  uint64_t v16 = a1[13];
  uint64_t v17 = a1[2];
  uint64_t v18 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v14, v15, v16, v17);
  uint64_t v19 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v14, v15, v16, v17);
  float32x4_t v27 = a2;
  float32x4_t v26 = a3;
  uint64_t v28 = a1[6];
  uint64_t v29 = a1[7];
  uint64_t v30 = v29 - v28;
  if (v29 != v28)
  {
    float32x4_t v31 = 0uLL;
    uint64_t v32 = 16 * v28;
    uint64_t v33 = (float32x4_t *)(v19 + v32);
    char v34 = (float32x4_t *)(v18 + v32);
    float v35 = 1.0;
    while (1)
    {
      __int32 v37 = v25.i32[3];
      float32x4_t v25 = *v34;
      float32x4_t v38 = *v33;
      v25.i32[3] = v37;
      float32x4_t v39 = vsubq_f32(vabdq_f32(*v34, v27), v26);
      v39.i32[3] = 0;
      float32x4_t v40 = vmaxnmq_f32(v39, v31);
      float32x4_t v41 = vmulq_f32(v40, v40);
      float v42 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]);
      float32x4_t v43 = vmulq_f32(v38, v38);
      int32x2_t v44 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).u64[0];
      *(float *)v44.i32 = sqrtf(*(float *)v44.i32);
      if (v42 <= 0.00000011921 || *(float *)v44.i32 <= 0.00000011921)
      {
        float32x4_t v46 = v24;
        float32x4_t v36 = v20;
        float32x4_t v47 = v23;
LABEL_11:
        float32x4_t v48 = v22;
        float32x4_t v49 = v21;
        goto LABEL_5;
      }
      float32x4_t v50 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(v44, 0));
      float32x4_t v46 = v50;
      v46.i32[3] = v24.i32[3];
      float32x4_t v51 = vsubq_f32(a5, v25);
      float32x4_t v52 = vmulq_f32(v51, v51);
      float32x4_t v53 = vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1));
      int32x2_t v54 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), v53).u64[0];
      *(float *)v54.i32 = sqrtf(*(float *)v54.i32);
      if (*(float *)v54.i32 <= 0.00000011921) {
        break;
      }
      *(float32x2_t *)v53.f32 = vsub_f32(0, *(float32x2_t *)v51.f32);
      v53.f32[2] = 0.0 - v51.f32[2];
      float32x4_t v47 = vdivq_f32(v53, (float32x4_t)vdupq_lane_s32(v54, 0));
      v47.i32[3] = v23.i32[3];
      float32x4_t v55 = vmulq_f32(v46, v47);
      float32x4_t v56 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1)));
      if (fabsf(v56.f32[0]) <= 0.00000011921)
      {
        float32x4_t v36 = v20;
        goto LABEL_11;
      }
      float32x4_t v57 = vmulq_f32(v47, a5);
      float32x4_t v58 = vmulq_f32(v25, v47);
      float v59 = vdivq_f32(vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1)))), v56).f32[0];
      if (v59 <= 0.0) {
        goto LABEL_18;
      }
      float32x4_t v48 = vmulq_n_f32(v50, v59);
      float32x4_t v49 = vaddq_f32(v25, v48);
      v48.i32[3] = v22.i32[3];
      v49.i32[3] = v21.i32[3];
      float32x4_t v60 = vsubq_f32(v49, a5);
      float32x4_t v61 = vmulq_f32(v60, v60);
      int32x2_t v62 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).u64[0];
      if (*(float *)v62.i32 <= a6)
      {
        float32x4_t v63 = v49;
      }
      else
      {
        *(float *)v62.i32 = sqrtf(*(float *)v62.i32);
        float32x4_t v63 = vaddq_f32(vdivq_f32(vmulq_n_f32(v60, a7), (float32x4_t)vdupq_lane_s32(v62, 0)), a5);
        v63.i32[3] = v91;
      }
LABEL_19:
      float32x4_t v64 = vsubq_f32(v63, v25);
      float32x4_t v65 = vmulq_f32(v64, v64);
      int32x2_t v66 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).u64[0];
      *(float *)v66.i32 = sqrtf(*(float *)v66.i32);
      if (*(float *)v66.i32 <= 0.00000011921)
      {
        float32x4_t v36 = v20;
      }
      else
      {
        float32x4_t v36 = vdivq_f32(v64, (float32x4_t)vdupq_lane_s32(v66, 0));
        v36.i32[3] = v20.i32[3];
        float32x4_t v67 = vmulq_f32(v46, v36);
        float v68 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).f32[0];
        if (v68 <= v35)
        {
          float32x4_t v99 = v46;
          __int32 v100 = v25.i32[3];
          float32x4_t v97 = v48;
          float32x4_t v98 = v47;
          float32x4_t v95 = v36;
          float32x4_t v96 = v49;
          float32x4_t v101 = *v33;
          if (v68 < -1.0)
          {
            float v69 = 3.1416;
            goto LABEL_25;
          }
          float32x4_t v92 = v64;
          float v69 = acosf(v68);
          float32x4_t v64 = v92;
          float32x4_t v38 = v101;
          if (v69 >= 0.001)
          {
LABEL_25:
            float v70 = fminf(v42 * a4, 2.0);
            float32x4_t v71 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), (int8x16_t)v64, 0xCuLL), vnegq_f32(v38)), v64, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL));
            float32x4_t v72 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), (int8x16_t)v71, 0xCuLL);
            int32x4_t v73 = (int32x4_t)vmulq_f32(v71, v71);
            v73.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v73, 2), *(float32x2_t *)v73.i8)).u32[0];
            float32x2_t v74 = vrsqrte_f32((float32x2_t)v73.u32[0]);
            float32x2_t v75 = vmul_f32(v74, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v74, v74)));
            float32x4_t v93 = vmulq_n_f32(v72, vmul_f32(v75, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v75, v75))).f32[0]);
            if (v69 >= a9) {
              float v76 = a9;
            }
            else {
              float v76 = v69;
            }
            float v77 = (float)(v70 * a8) * v76;
            if (v69 >= v77) {
              float v69 = v77;
            }
            __float2 v78 = __sincosf_stret(v69 * 0.5);
            float32x4_t v79 = vmulq_n_f32(v93, v78.__sinval);
            float32x4_t v80 = v79;
            v80.i32[3] = LODWORD(v78.__cosval);
            float32x4_t v81 = vmulq_f32(v80, (float32x4_t)xmmword_1B6E4F550);
            int8x16_t v82 = (int8x16_t)vnegq_f32(v81);
            int8x16_t v83 = (int8x16_t)vtrn2q_s32((int32x4_t)v81, vtrn1q_s32((int32x4_t)v81, (int32x4_t)v82));
            float32x4_t v84 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v81, v82, 8uLL), *(float32x2_t *)v101.f32, 1), (float32x4_t)vextq_s8(v83, v83, 8uLL), v101.f32[0]);
            float32x4_t v85 = (float32x4_t)vrev64q_s32((int32x4_t)v81);
            v85.i32[0] = v82.i32[1];
            v85.i32[3] = v82.i32[2];
            float32x4_t v86 = vmlaq_laneq_f32(v84, v85, v101, 2);
            int8x16_t v87 = (int8x16_t)vnegq_f32(v86);
            int8x16_t v88 = (int8x16_t)vtrn2q_s32((int32x4_t)v86, vtrn1q_s32((int32x4_t)v86, (int32x4_t)v87));
            float32x4_t v89 = (float32x4_t)vrev64q_s32((int32x4_t)v86);
            v89.i32[0] = v87.i32[1];
            v89.i32[3] = v87.i32[2];
            float32x4_t v90 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v86, v80, 3), v89, v79, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v86, v87, 8uLL), *(float32x2_t *)v79.f32, 1), (float32x4_t)vextq_s8(v88, v88, 8uLL), v79.f32[0]));
            v90.i32[3] = 0;
            *uint64_t v33 = v90;
          }
          float32x4_t v27 = a2;
          float32x4_t v26 = a3;
          float32x4_t v31 = 0uLL;
          float v35 = 1.0;
          float32x4_t v46 = v99;
          v25.i32[3] = v100;
          float32x4_t v48 = v97;
          float32x4_t v47 = v98;
          float32x4_t v36 = v95;
          float32x4_t v49 = v96;
        }
      }
LABEL_5:
      ++v33;
      ++v34;
      float32x4_t v24 = v46;
      float32x4_t v20 = v36;
      float32x4_t v23 = v47;
      float32x4_t v22 = v48;
      float32x4_t v21 = v49;
      if (!--v30) {
        return;
      }
    }
    float32x4_t v47 = v23;
LABEL_18:
    float32x4_t v48 = v22;
    float32x4_t v49 = v21;
    float32x4_t v63 = a5;
    goto LABEL_19;
  }
}

uint64_t type metadata accessor for ParticleFlockingConstrainToAreaSystem()
{
  return self;
}

const char *sub_1B69B5974()
{
  return "ParticleFlockingConstrainToArea";
}

uint64_t sub_1B69B5988(void *a1, int a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5, void (*a6)(void), double a7, __n128 a8, __n128 a9)
{
  int v21 = a2;
  __n128 v20 = a9;
  __n128 v22 = a8;
  sub_1B69C3290(0, a3, a4, a5, MEMORY[0x1E4FBBDE0]);
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v15);
  uint64_t v17 = (char *)&v20 - v16;
  sub_1B62C14BC(a1, a1[3]);
  a6();
  sub_1B6E33A88();
  v24.n128_u8[0] = 0;
  sub_1B6E32F78();
  if (!v9)
  {
    __n128 v24 = v22;
    char v23 = 1;
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B69C2FD0((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v18);
    sub_1B6E32FA8();
    __n128 v24 = v20;
    char v23 = 2;
    sub_1B6E32FA8();
    v24.n128_u8[0] = 3;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t sub_1B69B5C14(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB945C(*a1, *a2);
}

uint64_t sub_1B69B5C20()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69B5D0C()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69B5DE0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69B5EC8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

void sub_1B69B5F00(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000065;
  uint64_t v3 = 0x636E65756C666E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEB00000000726574;
      uint64_t v3 = 0x6E6543656E616C70;
      goto LABEL_3;
    case 2:
      *a1 = 0x726F4E656E616C70;
      a1[1] = 0xEB000000006C616DLL;
      break;
    case 3:
      *a1 = 0x6E616C50776F6873;
      a1[1] = 0xE900000000000065;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B69B5FAC()
{
  uint64_t result = 0x636E65756C666E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6543656E616C70;
      break;
    case 2:
      uint64_t result = 0x726F4E656E616C70;
      break;
    case 3:
      uint64_t result = 0x6E616C50776F6873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69B604C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

uint64_t sub_1B69B607C(uint64_t a1)
{
  unint64_t v2 = sub_1B69C30DC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69B60B8(uint64_t a1)
{
  unint64_t v2 = sub_1B69C30DC();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B69B60F4(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1B69B6144(void *a1@<X0>, unint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, void (*a5)(void)@<X6>, uint64_t a6@<X8>)
{
  float v9 = sub_1B69BE710(a1, a2, a3, a4, a5);
  if (!v6)
  {
    *(float *)a6 = v9;
    *(_OWORD *)(a6 + 16) = v10;
    *(_OWORD *)(a6 + 32) = v11;
    *(unsigned char *)(a6 + 48) = v8 & 1;
  }
}

uint64_t sub_1B69B618C(void *a1, double a2)
{
  LODWORD(a2) = v2->n128_u32[0];
  return sub_1B69B5988(a1, v2[3].n128_u8[0], &qword_1E9DD3520, (uint64_t (*)(void))sub_1B69C30DC, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane.CodingKeys, (void (*)(void))sub_1B69C30DC, a2, v2[1], v2[2]);
}

uint64_t sub_1B69B61E8()
{
  return type metadata accessor for ParticleFlockingConstrainToPlaneSystem();
}

double sub_1B69B6208@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1088421888;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  double result = 0.0078125;
  *(_OWORD *)(a1 + 32) = xmmword_1B6E4F320;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

uint64_t type metadata accessor for ParticleFlockingConstrainToPlaneSystem()
{
  return self;
}

const char *sub_1B69B6254()
{
  return "ParticleFlockingConstrainToPlane";
}

unint64_t sub_1B69B6268(char a1)
{
  unint64_t result = 0x636E65756C666E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x737569646172;
      break;
    case 2:
      unint64_t result = 0x65636E6174736964;
      break;
    case 3:
      unint64_t result = 0x6C676E4177656976;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x6556746F5278616DLL;
      break;
    case 6:
      unint64_t result = 0x61657241776F6873;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B69B635C(char a1)
{
  unint64_t result = 0x636E65756C666E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x737569646172;
      break;
    case 2:
      unint64_t result = 0x65636E6174736964;
      break;
    case 3:
      unint64_t result = 0x6C676E4177656976;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x6556746F5278616DLL;
      break;
    case 6:
      unint64_t result = 0x61657241776F6873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69B6450(void *a1)
{
  sub_1B69C3290(0, &qword_1E9DD3538, (uint64_t (*)(void))sub_1B69C3130, (uint64_t)&type metadata for ParticleFlockingFlyTowardsArea.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  char v8 = (char *)&v10 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C3130();
  sub_1B6E33A88();
  char v17 = 0;
  sub_1B6E32F78();
  if (!v1)
  {
    char v16 = 1;
    sub_1B6E32F78();
    char v15 = 2;
    sub_1B6E32F78();
    char v14 = 3;
    sub_1B6E32F78();
    char v13 = 4;
    sub_1B6E32F78();
    char v12 = 5;
    sub_1B6E32F78();
    char v11 = 6;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B69B66AC(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB8D98(*a1, *a2);
}

uint64_t sub_1B69B66B8()
{
  return sub_1B69EA818();
}

uint64_t sub_1B69B66C4()
{
  return sub_1B69E9368();
}

uint64_t sub_1B69B66CC()
{
  return sub_1B69EA818();
}

uint64_t sub_1B69B66D4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69BC968();
  *a1 = result;
  return result;
}

unint64_t sub_1B69B6704@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B69B6268(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B69B6730()
{
  return sub_1B69B635C(*v0);
}

uint64_t sub_1B69B6738@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69BC968();
  *a1 = result;
  return result;
}

uint64_t sub_1B69B6760(uint64_t a1)
{
  unint64_t v2 = sub_1B69C3130();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69B679C(uint64_t a1)
{
  unint64_t v2 = sub_1B69C3130();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B69B67D8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B69BF5D4(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = *(_OWORD *)v5;
    double result = *(double *)&v5[9];
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v5[9];
  }
  return result;
}

uint64_t sub_1B69B681C(void *a1)
{
  return sub_1B69B6450(a1);
}

uint64_t sub_1B69B6834()
{
  return type metadata accessor for ParticleFlockingFlyTowardsAreaSystem();
}

double sub_1B69B6854@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B6E9A980;
  double result = 5.62950066e15;
  *(void *)(a1 + 16) = 0x4334000042F00000;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void sub_1B69B6878(void *a1, float32x4_t a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  char v23 = (uint64_t *)a1[11];
  uint64_t v24 = a1[12];
  uint64_t v25 = a1[13];
  uint64_t v26 = a1[2];
  uint64_t v27 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v23, v24, v25, v26);
  uint64_t v28 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v23, v24, v25, v26);
  uint64_t v35 = a1[6];
  uint64_t v36 = a1[7];
  uint64_t v37 = v36 - v35;
  if (v36 != v35)
  {
    v30.f32[0] = a10;
    v29.f32[0] = a12;
    uint64_t v38 = 16 * v35;
    float32x4_t v39 = (float32x4_t *)(v28 + v38);
    float32x4_t v40 = (float32x4_t *)(v27 + v38);
    float v41 = -1.0;
    do
    {
      __int32 v47 = v34.i32[3];
      float32x4_t v34 = *v40;
      v34.i32[3] = v47;
      float32x4_t v48 = *v39;
      float32x4_t v49 = vmulq_f32(v48, v48);
      int32x2_t v50 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).u64[0];
      *(float *)v50.i32 = sqrtf(*(float *)v50.i32);
      if (*(float *)v50.i32 <= 0.00000011921)
      {
        float32x4_t v42 = v33;
        float32x4_t v43 = v29;
        float32x4_t v44 = v32;
      }
      else
      {
        float32x4_t v51 = vdivq_f32(v48, (float32x4_t)vdupq_lane_s32(v50, 0));
        float32x4_t v42 = v51;
        v42.i32[3] = v33.i32[3];
        float32x4_t v52 = vsubq_f32(a2, v34);
        float32x4_t v53 = vmulq_f32(v52, v52);
        float32x4_t v54 = vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1));
        int32x2_t v55 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), v54).u64[0];
        *(float *)v55.i32 = sqrtf(*(float *)v55.i32);
        if (*(float *)v55.i32 <= 0.00000011921)
        {
          float32x4_t v44 = v32;
          goto LABEL_14;
        }
        *(float32x2_t *)v54.f32 = vsub_f32(0, *(float32x2_t *)v52.f32);
        v54.f32[2] = 0.0 - v52.f32[2];
        float32x4_t v44 = vdivq_f32(v54, (float32x4_t)vdupq_lane_s32(v55, 0));
        v44.i32[3] = v32.i32[3];
        float32x4_t v56 = vmulq_f32(v42, v44);
        float32x4_t v57 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1)));
        if (fabsf(v57.f32[0]) > 0.00000011921)
        {
          float32x4_t v58 = vmulq_f32(v44, a2);
          float32x4_t v59 = vmulq_f32(v34, v44);
          float v60 = vdivq_f32(vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1)))), v57).f32[0];
          if (v60 > 0.0)
          {
            float32x4_t v45 = vmulq_n_f32(v51, v60);
            float32x4_t v46 = vaddq_f32(v34, v45);
            v45.i32[3] = v31.i32[3];
            v46.i32[3] = v30.i32[3];
            float32x4_t v61 = vsubq_f32(v46, a2);
            float32x4_t v62 = vmulq_f32(v61, v61);
            int32x2_t v63 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).u64[0];
            if (*(float *)v63.i32 <= a3)
            {
              float32x4_t v64 = v46;
            }
            else
            {
              *(float *)v63.i32 = sqrtf(*(float *)v63.i32);
              float32x4_t v64 = vaddq_f32(vdivq_f32(vmulq_n_f32(v61, a4), (float32x4_t)vdupq_lane_s32(v63, 0)), a2);
              v64.i32[3] = v98;
            }
            goto LABEL_15;
          }
LABEL_14:
          float32x4_t v45 = v31;
          float32x4_t v46 = v30;
          float32x4_t v64 = a2;
LABEL_15:
          float32x4_t v65 = vsubq_f32(v64, v34);
          float32x4_t v66 = vmulq_f32(v65, v65);
          int32x2_t v67 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).u64[0];
          *(float *)v67.i32 = sqrtf(*(float *)v67.i32);
          BOOL v68 = *(float *)v67.i32 > 0.00000011921 && *(float *)v67.i32 < a5;
          float v69 = 1.0 - (float)(*(float *)v67.i32 * a6);
          if (v68 && v69 > 0.00000011921)
          {
            float32x4_t v43 = vdivq_f32(v65, (float32x4_t)vdupq_lane_s32(v67, 0));
            v43.i32[3] = v29.i32[3];
            float32x4_t v71 = vmulq_f32(v42, v43);
            float v72 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0];
            if (v72 <= 1.0)
            {
              if (v72 >= v41)
              {
                float32x4_t v109 = v42;
                __int32 v111 = v34.i32[3];
                float32x4_t v105 = v45;
                float32x4_t v107 = v44;
                float32x4_t v101 = *v39;
                float32x4_t v103 = v46;
                float32x4_t v99 = v43;
                float32x4_t v96 = v65;
                float v73 = acosf(v72);
                float32x4_t v65 = v96;
                float32x4_t v43 = v99;
                float32x4_t v48 = v101;
                float32x4_t v46 = v103;
                float32x4_t v45 = v105;
                float32x4_t v44 = v107;
                float32x4_t v42 = v109;
                v34.i32[3] = v111;
                float v41 = -1.0;
              }
              else
              {
                float v73 = 3.1416;
              }
              if (v73 >= 0.001 && v73 < a7)
              {
                float v74 = 1.0;
                if (v73 <= a8 || (float v74 = (float)(a7 - v73) * a9, v74 > 0.00000011921))
                {
                  float v75 = (float)((float)(a10 * a11) * v69) * v74;
                  if (v75 > 0.001)
                  {
                    float32x4_t v106 = v45;
                    float32x4_t v76 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), (int8x16_t)v65, 0xCuLL), vnegq_f32(v48)), v65, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL));
                    float32x4_t v77 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL);
                    int32x4_t v78 = (int32x4_t)vmulq_f32(v76, v76);
                    v78.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v78, 2), *(float32x2_t *)v78.i8)).u32[0];
                    float32x2_t v79 = vrsqrte_f32((float32x2_t)v78.u32[0]);
                    float32x2_t v80 = vmul_f32(v79, vrsqrts_f32((float32x2_t)v78.u32[0], vmul_f32(v79, v79)));
                    float32x4_t v97 = vmulq_n_f32(v77, vmul_f32(v80, vrsqrts_f32((float32x2_t)v78.u32[0], vmul_f32(v80, v80))).f32[0]);
                    float v81 = a12;
                    if (v73 < a12) {
                      float v81 = v73;
                    }
                    float v82 = v81 * v75;
                    if (v73 >= v82) {
                      float v73 = v82;
                    }
                    float32x4_t v110 = v42;
                    __int32 v112 = v34.i32[3];
                    float32x4_t v108 = v44;
                    float32x4_t v102 = v48;
                    float32x4_t v104 = v46;
                    float32x4_t v100 = v43;
                    __float2 v83 = __sincosf_stret(v73 * 0.5);
                    float32x4_t v43 = v100;
                    float32x4_t v44 = v108;
                    float32x4_t v42 = v110;
                    v34.i32[3] = v112;
                    float v41 = -1.0;
                    float32x4_t v84 = vmulq_n_f32(v97, v83.__sinval);
                    float32x4_t v85 = v84;
                    v85.i32[3] = LODWORD(v83.__cosval);
                    float32x4_t v86 = vmulq_f32(v85, (float32x4_t)xmmword_1B6E4F550);
                    int8x16_t v87 = (int8x16_t)vnegq_f32(v86);
                    int8x16_t v88 = (int8x16_t)vtrn2q_s32((int32x4_t)v86, vtrn1q_s32((int32x4_t)v86, (int32x4_t)v87));
                    float32x4_t v89 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v86, v87, 8uLL), *(float32x2_t *)v102.f32, 1), (float32x4_t)vextq_s8(v88, v88, 8uLL), v102.f32[0]);
                    float32x4_t v90 = (float32x4_t)vrev64q_s32((int32x4_t)v86);
                    v90.i32[0] = v87.i32[1];
                    v90.i32[3] = v87.i32[2];
                    float32x4_t v91 = vmlaq_laneq_f32(v89, v90, v102, 2);
                    int8x16_t v92 = (int8x16_t)vnegq_f32(v91);
                    int8x16_t v93 = (int8x16_t)vtrn2q_s32((int32x4_t)v91, vtrn1q_s32((int32x4_t)v91, (int32x4_t)v92));
                    float32x4_t v94 = (float32x4_t)vrev64q_s32((int32x4_t)v91);
                    v94.i32[0] = v92.i32[1];
                    v94.i32[3] = v92.i32[2];
                    float32x4_t v95 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v91, v85, 3), v94, v84, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v91, v92, 8uLL), *(float32x2_t *)v84.f32, 1), (float32x4_t)vextq_s8(v93, v93, 8uLL), v84.f32[0]));
                    float32x4_t v46 = v104;
                    float32x4_t v45 = v106;
                    v95.i32[3] = 0;
                    *float32x4_t v39 = v95;
                  }
                }
              }
            }
          }
          else
          {
            float32x4_t v43 = v29;
          }
          goto LABEL_6;
        }
        float32x4_t v43 = v29;
      }
      float32x4_t v45 = v31;
      float32x4_t v46 = v30;
LABEL_6:
      ++v39;
      ++v40;
      float32x4_t v33 = v42;
      float32x4_t v29 = v43;
      float32x4_t v32 = v44;
      float32x4_t v31 = v45;
      float32x4_t v30 = v46;
      --v37;
    }
    while (v37);
  }
}

uint64_t type metadata accessor for ParticleFlockingFlyTowardsAreaSystem()
{
  return self;
}

const char *sub_1B69B6D98()
{
  return "ParticleFlockingFlyTowardsArea";
}

uint64_t sub_1B69B6DAC()
{
  *(unsigned char *)uint64_t v0 = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_DWORD *)(v0 + 72) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  uint64_t v1 = (uint64_t *)(v0 + 8);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = *v1;
  if (isUniquelyReferenced_nonNull_native) {
    return sub_1B68EA974(0, *(void *)(v3 + 16));
  }
  *uint64_t v1 = (uint64_t)sub_1B6785AE0(0, *(void *)(v3 + 24) >> 1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69B6E34()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleFlockingSolverData()
{
  return self;
}

void sub_1B69B6E98(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  sub_1B69BD454(a1, (uint64_t)v319, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  uint64_t v275 = (unsigned __int16 *)v319[0];
  uint64_t v276 = v319[1];
  uint64_t v277 = v319[2];
  char v278 = v320;
  uint64_t v279 = v321;
  uint64_t v283 = v322;
  uint64_t v284 = v324;
  uint64_t v263 = v323;
  uint64_t v264 = v325;
  uint64_t v10 = v326;
  uint64_t v260 = v327;
  uint64_t v262 = v328;
  sub_1B69BD454(a1, (uint64_t)v336, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v336[0]) {
    uint64_t v11 = v336[10];
  }
  else {
    uint64_t v11 = 0;
  }
  char v259 = (BOOL *)(v4 + 32);
  sub_1B69B6DAC();
  char v12 = (uint64_t *)(v4 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(v4 + 16);
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_1B68EAA84(0, *(void *)(v14 + 16));
  }
  else
  {
    *char v12 = (uint64_t)sub_1B6785B78(0, *(void *)(v14 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  if (v11 > *(void *)(*v12 + 24) >> 1) {
    sub_1B69DE2AC(4 * v11 / 3);
  }
  uint64_t v280 = v5;
  if (v11 >= 1)
  {
    sub_1B69BD454(a1, (uint64_t)v329, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (*(void *)&v329[0])
    {
      unsigned int v289 = v10;
      v15.i32[0] = 0;
      v16.i32[0] = a4 & 1;
      int8x16_t v17 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v16, v15), 0);
      v18.i64[0] = a2;
      v18.i64[1] = a3;
      __asm { FMOV            V2.4S, #1.0 }
      int8x16_t v266 = _Q2;
      int8x16_t v23 = vbslq_s8(v17, v18, _Q2);
      v23.i32[3] = 0;
      float32x4_t v258 = (float32x4_t)v23;
      if (v335 >= 1 && (uint64_t v273 = v332) != 0)
      {
        uint64_t v24 = 0;
        uint64_t v290 = 0;
        uint64_t v25 = v334[4];
        int v26 = *(unsigned __int8 *)(v333 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v337[0] = v329[0];
        v337[1] = v329[1];
        uint64_t v265 = v334 + 13;
        long long v285 = v334;
        float v269 = v334 + 8;
        uint64_t v270 = (uint64_t)(v334 + 6);
        uint64_t v268 = v331;
        uint64_t v338 = v330;
        __asm { FMOV            V8.2S, #1.0 }
        int v271 = v26;
        uint64_t v272 = v25;
        do
        {
          uint64_t v281 = v24;
          uint64_t v28 = (unsigned int *)(v268 + 48 * v24);
          uint64_t v29 = *v28;
          uint64_t v291 = v28[1];
          uint64_t v292 = v28[2];
          uint64_t v30 = *((void *)v28 + 2);
          uint64_t v31 = *((void *)v28 + 5);
          uint64_t v295 = *((void *)v28 + 4);
          if (v26)
          {
            float32x4_t v32 = *(os_unfair_lock_s **)(v31 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v32);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v31 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v25);
          sub_1B69BD454(v270, (uint64_t)v398, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v33 = v285[4];
          uint64_t v34 = *(void *)(*(void *)(*(void *)(*(void *)(v31 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v285[6] = ecs_stack_allocator_allocate(v33, 48 * v34, 8);
          v285[7] = v34;
          v269[1] = 0;
          v269[2] = 0;
          *float v269 = 0;
          swift_release();
          if (v30)
          {
            if (v295)
            {
              uint64_t v35 = (void *)*v12;
              char v36 = swift_isUniquelyReferenced_nonNull_native();
              *char v12 = (uint64_t)v35;
              if ((v36 & 1) == 0) {
                uint64_t v35 = sub_1B68C5ABC(0, v35[2] + 1, 1, v35);
              }
              uint64_t v37 = 0;
              int8x16_t v38 = v266;
              v38.i32[3] = v267;
              uint64_t v399 = 0;
              long long v400 = 0u;
              long long v401 = 0u;
              long long v402 = xmmword_1B6E4F370;
              int8x16_t v403 = v38;
              uint64_t v404 = _D8;
              int v405 = 0;
              uint64_t v406 = -1;
              *char v12 = (uint64_t)v35;
              int v40 = HIDWORD(v308);
              int v39 = v313.i32[3];
              do
              {
                int v312 = v40;
                int v318 = v39;
                uint64_t v49 = *(void *)(v30 + 8 * v37);
                int32x2_t v50 = (void *)*v12;
                char v51 = swift_isUniquelyReferenced_nonNull_native();
                *char v12 = (uint64_t)v50;
                if ((v51 & 1) == 0)
                {
                  int32x2_t v50 = sub_1B68C5ABC(0, v50[2] + 1, 1, v50);
                  *char v12 = (uint64_t)v50;
                }
                unint64_t v53 = v50[2];
                unint64_t v52 = v50[3];
                if (v53 >= v52 >> 1) {
                  *char v12 = (uint64_t)sub_1B68C5ABC(v52 > 1, v53 + 1, 1, v50);
                }
                sub_1B69FFE68(v53, (uint64_t)&v399);
                nullsub_1(v54);
                uint64_t v55 = *(void *)(v31 + 48);
                uint64_t v56 = *(void *)(v55 + 16);
                if (v56)
                {
                  float32x4_t v57 = (void *)(v55 + 56);
                  float32x4_t v58 = v57;
                  uint64_t v59 = v56;
                  while ((ValueMetadata *)*(v58 - 3) != &type metadata for Position)
                  {
                    v58 += 5;
                    if (!--v59)
                    {
                      float32x4_t v42 = 0;
                      goto LABEL_35;
                    }
                  }
                  float32x4_t v42 = (float32x4_t *)(*(void *)(v31 + 128) + *v58 + 16 * v49);
LABEL_35:
                  while ((ValueMetadata *)*(v57 - 3) != &type metadata for Velocity)
                  {
                    v57 += 5;
                    if (!--v56)
                    {
                      float v41 = 0;
                      goto LABEL_24;
                    }
                  }
                  float v41 = (long long *)(*(void *)(v31 + 128) + *v57 + 16 * v49);
                }
                else
                {
                  float v41 = 0;
                  float32x4_t v42 = 0;
                }
LABEL_24:
                uint64_t v43 = sub_1B6C16600();
                uint64_t v44 = 112 * (v37 + v292);
                *(void *)(*v12 + v44 + 32) = v42;
                nullsub_1(v43);
                float32x4_t v45 = *v42;
                v45.i32[3] = v318;
                float32x4_t v313 = v45;
                uint64_t v46 = sub_1B6C16600();
                *(float32x4_t *)(*v12 + v44 + 48) = v313;
                nullsub_1(v46);
                long long v47 = *v41;
                HIDWORD(v47) = v312;
                long long v308 = v47;
                uint64_t v48 = sub_1B6C16600();
                *(_OWORD *)(*v12 + v44 + 64) = v308;
                nullsub_1(v48);
                int v40 = HIDWORD(v308);
                int v39 = v313.i32[3];
                ++v37;
              }
              while (v37 != v295);
            }
          }
          else if (v29 != v291)
          {
            float v60 = (void *)*v12;
            char v61 = swift_isUniquelyReferenced_nonNull_native();
            *char v12 = (uint64_t)v60;
            if ((v61 & 1) == 0) {
              float v60 = sub_1B68C5ABC(0, v60[2] + 1, 1, v60);
            }
            int8x16_t v62 = v266;
            v62.i32[3] = v261;
            uint64_t v63 = v292 - v29;
            uint64_t v407 = 0;
            long long v408 = 0u;
            long long v409 = 0u;
            long long v410 = xmmword_1B6E4F370;
            int8x16_t v411 = v62;
            uint64_t v412 = _D8;
            int v413 = 0;
            uint64_t v414 = -1;
            *char v12 = (uint64_t)v60;
            int v65 = HIDWORD(v298);
            int v64 = HIDWORD(v303);
            do
            {
              int v302 = v65;
              int v307 = v64;
              sub_1B69FFC4C();
              uint64_t v75 = *(void *)(*v12 + 16);
              sub_1B69FFD50(v75);
              sub_1B69FFE68(v75, (uint64_t)&v407);
              nullsub_1(v76);
              uint64_t v77 = *(void *)(v31 + 48);
              uint64_t v78 = *(void *)(v77 + 16);
              if (v78)
              {
                float32x2_t v79 = (void *)(v77 + 56);
                float32x2_t v80 = v79;
                uint64_t v81 = v78;
                while ((ValueMetadata *)*(v80 - 3) != &type metadata for Position)
                {
                  v80 += 5;
                  if (!--v81)
                  {
                    int32x2_t v67 = 0;
                    goto LABEL_52;
                  }
                }
                int32x2_t v67 = (long long *)(*(void *)(v31 + 128) + *v80 + 16 * v29);
LABEL_52:
                while ((ValueMetadata *)*(v79 - 3) != &type metadata for Velocity)
                {
                  v79 += 5;
                  if (!--v78)
                  {
                    float32x4_t v66 = 0;
                    goto LABEL_45;
                  }
                }
                float32x4_t v66 = (long long *)(*(void *)(v31 + 128) + *v79 + 16 * v29);
              }
              else
              {
                float32x4_t v66 = 0;
                int32x2_t v67 = 0;
              }
LABEL_45:
              uint64_t v68 = v29 + 1;
              uint64_t v69 = sub_1B6C16600();
              uint64_t v70 = 112 * (v63 + v29);
              *(void *)(*v12 + v70 + 32) = v67;
              nullsub_1(v69);
              long long v71 = *v67;
              HIDWORD(v71) = v307;
              long long v303 = v71;
              uint64_t v72 = sub_1B6C16600();
              *(_OWORD *)(*v12 + v70 + 48) = v303;
              nullsub_1(v72);
              long long v73 = *v66;
              HIDWORD(v73) = v302;
              long long v298 = v73;
              uint64_t v74 = sub_1B6C16600();
              *(_OWORD *)(*v12 + v70 + 64) = v298;
              nullsub_1(v74);
              int v65 = HIDWORD(v298);
              int v64 = HIDWORD(v303);
              uint64_t v29 = v68;
            }
            while (v68 != v291);
          }
          sub_1B6345178(v285, (unsigned __int16 **)v337, (uint64_t)v398);
          uint64_t v25 = v272;
          if (*(void *)(v285[13] + 16))
          {
            uint64_t v82 = swift_bridgeObjectRetain();
            sub_1B639147C(v82, v31);
            swift_bridgeObjectRelease();
            char v83 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v84 = v285[13];
            if (v83)
            {
              sub_1B6399BB8(0, *(void *)(v84 + 16));
            }
            else
            {
              float32x4_t v85 = (void *)MEMORY[0x1E4FBC860];
              if (*(void *)(v84 + 24) >= 2uLL)
              {
                sub_1B62F7BE4(0, (unint64_t *)&qword_1EB980C00, (void (*)(uint64_t))sub_1B63B29DC);
                float32x4_t v85 = (void *)swift_allocObject();
                size_t v86 = j__malloc_size(v85);
                v85[2] = 0;
                v85[3] = 2 * ((uint64_t)(v86 - 32) / 72);
              }
              *uint64_t v265 = v85;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v285[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              int8x16_t v87 = *(char **)(v31 + 232);
              int8x16_t v88 = *(char **)(v31 + 256);
              if (v87 == v88)
              {
                float32x4_t v89 = *(char **)(v31 + 240);
              }
              else
              {
                sub_1B666018C(v88, v87);
                int8x16_t v88 = *(char **)(v31 + 232);
                float32x4_t v89 = *(char **)(v31 + 240);
                if (v89 == v88)
                {
                  float32x4_t v89 = 0;
                  int8x16_t v88 = 0;
                  *(void *)(v31 + 232) = 0;
                  *(void *)(v31 + 240) = 0;
                }
              }
              *(void *)(v31 + 248) = v89;
              *(void *)(v31 + 256) = v88;
            }
          }
          ecs_stack_allocator_pop_snapshot(v272);
          int v26 = v271;
          if (v271)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 376));
          }
          swift_release();
          uint64_t v24 = v281 + 1;
        }
        while (v281 + 1 != v273);
      }
      else
      {
        uint64_t v290 = 0;
      }
      float32x4_t v310 = vmaxnmq_f32(v258, (float32x4_t)xmmword_1B6E9A990);
      int v385 = v275;
      int v386 = v276;
      char v387 = BYTE4(v276);
      uint64_t v388 = v277;
      char v389 = v278;
      uint64_t v390 = v279;
      uint64_t v391 = v283;
      uint64_t v392 = v263;
      uint64_t v393 = v284;
      uint64_t v394 = v264;
      long long v395 = v10;
      uint64_t v396 = v260;
      uint64_t v397 = v262;
      if (sub_1B6845CF8((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, 0) && v260 >= 1)
      {
        uint64_t v124 = v284;
        if (v284)
        {
          uint64_t v125 = 0;
          int v126 = *(unsigned __int8 *)(v264 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          uint64_t v127 = v10[4];
          uint64_t v378 = v275;
          int v379 = v276;
          char v380 = BYTE4(v276);
          uint64_t v381 = v277;
          char v382 = v278;
          uint64_t v383 = v279;
          int v293 = v126;
          uint64_t v286 = v127;
          do
          {
            __int32 v128 = (unsigned int *)(v283 + 48 * v125);
            uint64_t v129 = *v128;
            uint64_t v296 = v128[1];
            uint64_t v299 = v128[2];
            uint64_t v130 = *((void *)v128 + 2);
            uint64_t v131 = *((void *)v128 + 4);
            uint64_t v132 = *((void *)v128 + 5);
            uint64_t v304 = v125;
            if (v126)
            {
              float32x4_t v133 = *(os_unfair_lock_s **)(v132 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v133);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v132 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v127);
            sub_1B69BD454((uint64_t)(v289 + 6), (uint64_t)v384, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
            uint64_t v134 = v289[4];
            uint64_t v135 = *(void *)(*(void *)(*(void *)(*(void *)(v132 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v289[6] = ecs_stack_allocator_allocate(v134, 48 * v135, 8);
            v289[7] = v135;
            v289[9] = 0;
            v289[10] = 0;
            v289[8] = 0;
            swift_release();
            if (v130)
            {
              if (v131)
              {
                float32x4_t v136 = (void *)*v12;
                char v137 = swift_isUniquelyReferenced_nonNull_native();
                *char v12 = (uint64_t)v136;
                if ((v137 & 1) == 0) {
                  float32x4_t v136 = sub_1B6C1692C(v136);
                }
                uint64_t v138 = 0;
                *char v12 = (uint64_t)v136;
                do
                {
                  uint64_t v141 = *(void *)(v132 + 48);
                  uint64_t v142 = v141 + 32;
                  if (*(ValueMetadata **)(v141 + 32) == &type metadata for Orientation)
                  {
                    uint64_t v139 = 0;
                  }
                  else
                  {
                    uint64_t v139 = 0;
                    uint64_t v143 = *(void *)(v141 + 16);
                    uint64_t v144 = v141 + 72;
                    uint64_t v145 = v143 - 1;
                    do
                    {
                      float32x4_t v146 = *(ValueMetadata **)(v144 + v139);
                      v139 += 40;
                      --v145;
                    }
                    while (v146 != &type metadata for Orientation);
                  }
                  float32x4_t v313 = *(float32x4_t *)(*(void *)(v132 + 128)
                                        + *(void *)(v142 + v139 + 24)
                                        + 16 * *(void *)(v130 + 8 * v138));
                  uint64_t v140 = sub_1B6C16600();
                  *(float32x4_t *)(*v12 + 112 * (v138 + v299) + 80) = v313;
                  nullsub_1(v140);
                  ++v138;
                }
                while (v138 != v131);
              }
            }
            else if (v129 != v296)
            {
              float32x4_t v155 = (void *)*v12;
              uint64_t v156 = swift_isUniquelyReferenced_nonNull_native();
              *char v12 = (uint64_t)v155;
              if ((v156 & 1) == 0)
              {
                uint64_t v156 = (uint64_t)sub_1B6C1692C(v155);
                float32x4_t v155 = (void *)v156;
              }
              uint64_t v157 = v299 - v129;
              *char v12 = (uint64_t)v155;
              nullsub_1(v156);
              uint64_t v158 = sub_1B6C16600();
              nullsub_1(v158);
              do
              {
                uint64_t v161 = *(void *)(v132 + 48);
                uint64_t v162 = v161 + 32;
                if (*(ValueMetadata **)(v161 + 32) == &type metadata for Orientation)
                {
                  uint64_t v159 = 0;
                }
                else
                {
                  uint64_t v159 = 0;
                  uint64_t v163 = *(void *)(v161 + 16);
                  uint64_t v164 = v161 + 72;
                  uint64_t v165 = v163 - 1;
                  do
                  {
                    uint64_t v166 = *(ValueMetadata **)(v164 + v159);
                    v159 += 40;
                    --v165;
                  }
                  while (v166 != &type metadata for Orientation);
                }
                float32x4_t v313 = *(float32x4_t *)(*(void *)(v132 + 128) + *(void *)(v162 + v159 + 24) + 16 * v129);
                uint64_t v160 = sub_1B6C16600();
                *(float32x4_t *)(*v12 + 112 * (v157 + v129) + 80) = v313;
                nullsub_1(v160);
                ++v129;
              }
              while (v129 != v296);
            }
            uint64_t v10 = v289;
            sub_1B6345178(v289, &v378, (uint64_t)v384);
            if (*(void *)(v289[13] + 16))
            {
              uint64_t v147 = swift_bridgeObjectRetain();
              sub_1B639147C(v147, v132);
              swift_bridgeObjectRelease();
              char v148 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v149 = v289[13];
              if (v148)
              {
                sub_1B6399BB8(0, *(void *)(v149 + 16));
              }
              else
              {
                float32x4_t v150 = (void *)MEMORY[0x1E4FBC860];
                if (*(void *)(v149 + 24) >= 2uLL)
                {
                  sub_1B62F7BE4(0, (unint64_t *)&qword_1EB980C00, (void (*)(uint64_t))sub_1B63B29DC);
                  float32x4_t v150 = (void *)swift_allocObject();
                  size_t v151 = j__malloc_size(v150);
                  v150[2] = 0;
                  v150[3] = 2 * ((uint64_t)(v151 - 32) / 72);
                }
                v289[13] = v150;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v289[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                float32x4_t v152 = *(char **)(v132 + 232);
                float32x4_t v153 = *(char **)(v132 + 256);
                if (v152 == v153)
                {
                  float32x4_t v154 = *(char **)(v132 + 240);
                }
                else
                {
                  sub_1B666018C(v153, v152);
                  float32x4_t v153 = *(char **)(v132 + 232);
                  float32x4_t v154 = *(char **)(v132 + 240);
                  if (v154 == v153)
                  {
                    float32x4_t v154 = 0;
                    float32x4_t v153 = 0;
                    *(void *)(v132 + 232) = 0;
                    *(void *)(v132 + 240) = 0;
                  }
                }
                *(void *)(v132 + 248) = v154;
                *(void *)(v132 + 256) = v153;
              }
            }
            uint64_t v127 = v286;
            ecs_stack_allocator_pop_snapshot(v286);
            int v126 = v293;
            if (v293)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v132 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v132 + 376));
            }
            swift_release();
            uint64_t v125 = v304 + 1;
            uint64_t v124 = v284;
          }
          while (v304 + 1 != v284);
        }
      }
      else
      {
        uint64_t v124 = v284;
      }
      float v365 = v275;
      int v366 = v276;
      char v367 = BYTE4(v276);
      uint64_t v368 = v277;
      char v369 = v278;
      uint64_t v370 = v279;
      uint64_t v371 = v283;
      uint64_t v372 = v263;
      uint64_t v373 = v124;
      uint64_t v374 = v264;
      uint64_t v375 = v10;
      uint64_t v376 = v260;
      uint64_t v377 = v262;
      if (sub_1B6845CF8((uint64_t)&type metadata for Scale1, (uint64_t)&off_1F0FA0DD0, 0))
      {
        uint64_t v5 = v280;
        if (v260 >= 1 && v284)
        {
          uint64_t v167 = 0;
          int v300 = *(unsigned __int8 *)(v264 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          uint64_t v287 = (uint64_t)(v10 + 6);
          int v282 = v10 + 8;
          uint64_t v168 = v10[4];
          uint64_t v274 = v168;
          do
          {
            uint64_t v297 = v167;
            char v169 = (unsigned int *)(v283 + 48 * v167);
            uint64_t v170 = *v169;
            uint64_t v305 = v169[1];
            uint64_t v171 = v169[2];
            long long v172 = (uint64_t *)*((void *)v169 + 2);
            uint64_t v173 = *((void *)v169 + 4);
            uint64_t v174 = *((void *)v169 + 5);
            if (v300)
            {
              uint64_t v175 = *(os_unfair_lock_s **)(v174 + 376);
              swift_retain();
              os_unfair_lock_lock(v175);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v174 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v168);
            sub_1B69BD454(v287, (uint64_t)&v351, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
            uint64_t v294 = v289[4];
            uint64_t v176 = *(void *)(*(void *)(*(void *)(*(void *)(v174 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v289[6] = ecs_stack_allocator_allocate(v294, 48 * v176, 8);
            v289[7] = v176;
            v282[1] = 0;
            v282[2] = 0;
            *int v282 = 0;
            swift_release();
            if (v172)
            {
              for (; v173; --v173)
              {
                uint64_t v177 = *v172++;
                sub_1B69C0154(v310, v174, v171++, v177, v280);
              }
              char v178 = v289;
              float32x4_t v179 = v313;
            }
            else
            {
              float32x4_t v179 = v313;
              if (v170 == v305)
              {
                char v178 = v289;
              }
              else
              {
                uint64_t v180 = v171 - v170;
                __int32 v181 = v313.i32[3];
                char v178 = v289;
                do
                {
                  uint64_t v194 = *(void *)(v174 + 48);
                  uint64_t v195 = v194 + 32;
                  if (*(ValueMetadata **)(v194 + 32) == &type metadata for Scale1)
                  {
                    uint64_t v182 = 0;
                  }
                  else
                  {
                    uint64_t v182 = 0;
                    uint64_t v196 = *(void *)(v194 + 16);
                    uint64_t v197 = v194 + 72;
                    uint64_t v198 = v196 - 1;
                    do
                    {
                      int v199 = *(ValueMetadata **)(v197 + v182);
                      v182 += 40;
                      --v198;
                    }
                    while (v199 != &type metadata for Scale1);
                  }
                  uint64_t v183 = v170 + 1;
                  uint64_t v184 = v170 + v180;
                  float v185 = *(float *)(*(void *)(v174 + 128) + *(void *)(v195 + v182 + 24) + 4 * v170);
                  float v186 = 0.000001;
                  if (v185 <= 0.000001) {
                    float v185 = 0.000001;
                  }
                  float32x4_t v187 = vmulq_n_f32(v310, v185);
                  v187.i32[3] = v181;
                  float32x4_t v315 = v187;
                  uint64_t v188 = sub_1B6C16600();
                  uint64_t v189 = 112 * v184;
                  *(float32x4_t *)(*v12 + 112 * v184 + 96) = v315;
                  nullsub_1(v188);
                  if ((float)((float)(*(float *)(*v12 + v189 + 104)
                                     + (float)(*(float *)(*v12 + v189 + 96) + *(float *)(*v12 + v189 + 100)))
                             * 0.33333) > 0.000001)
                    float v190 = (float)(*(float *)(*v12 + v189 + 104)
                                 + (float)(*(float *)(*v12 + v189 + 96) + *(float *)(*v12 + v189 + 100)))
                         * 0.33333;
                  else {
                    float v190 = 0.000001;
                  }
                  if ((float)((float)(v190 * (float)(v190 * v190)) * 0.5236) > 0.000001) {
                    float v186 = (float)(v190 * (float)(v190 * v190)) * 0.5236;
                  }
                  uint64_t v191 = sub_1B6C16600();
                  *(float *)(*v12 + v189 + 112) = v190;
                  nullsub_1(v191);
                  char v192 = sub_1B6B1B9A8();
                  *(float *)(v193 + 84) = v186;
                  ((void (*)(unsigned __int16 **, void))v192)(&v352, 0);
                  float32x4_t v179 = v315;
                  __int32 v181 = v315.i32[3];
                  ++v170;
                }
                while (v183 != v305);
              }
            }
            float32x4_t v313 = v179;
            int32x2_t v345 = v275;
            int v346 = v276;
            char v347 = BYTE4(v276);
            uint64_t v348 = v277;
            char v349 = v278;
            uint64_t v350 = v279;
            sub_1B6345178(v178, &v345, (uint64_t)&v351);
            sub_1B634507C((char *)v174);
            uint64_t v168 = v274;
            ecs_stack_allocator_pop_snapshot(v274);
            if (v300)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v174 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v174 + 376));
            }
            swift_release();
            uint64_t v167 = v297 + 1;
            uint64_t v5 = v280;
          }
          while (v297 + 1 != v284);
        }
      }
      else
      {
        float32x4_t v352 = v275;
        int v353 = v276;
        char v354 = BYTE4(v276);
        uint64_t v355 = v277;
        char v356 = v278;
        uint64_t v357 = v279;
        uint64_t v358 = v283;
        uint64_t v359 = v263;
        uint64_t v360 = v284;
        uint64_t v361 = v264;
        int32x4_t v362 = v10;
        uint64_t v363 = v260;
        uint64_t v364 = v262;
        uint64_t v5 = v280;
        if (sub_1B6845CF8((uint64_t)&type metadata for Scale3, (uint64_t)&off_1F0FA10A0, 0) && v260 >= 1 && v284)
        {
          uint64_t v209 = 0;
          uint64_t v210 = v10[4];
          int i = *(unsigned __int8 *)(v264 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          int v288 = i;
          uint64_t v301 = v210;
          do
          {
            uint64_t v317 = v209;
            long long v212 = (unsigned int *)(v283 + 48 * v209);
            uint64_t v213 = *v212;
            uint64_t v214 = v212[2];
            int v215 = (uint64_t *)*((void *)v212 + 2);
            uint64_t v216 = *((void *)v212 + 4);
            uint64_t v217 = *((void *)v212 + 5);
            uint64_t v306 = v212[1];
            if (i)
            {
              int v218 = *(os_unfair_lock_s **)(v217 + 376);
              swift_retain();
              os_unfair_lock_lock(v218);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v217 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v210);
            sub_1B69BD454((uint64_t)(v10 + 6), (uint64_t)&v345, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
            uint64_t v219 = v289[4];
            uint64_t v220 = *(void *)(*(void *)(*(void *)(*(void *)(v217 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v289[6] = ecs_stack_allocator_allocate(v219, 48 * v220, 8);
            v289[7] = v220;
            v10[9] = 0;
            v10[10] = 0;
            v10[8] = 0;
            swift_release();
            if (v215)
            {
              uint64_t v5 = v280;
              uint64_t v221 = v290;
              for (int i = v288; v216; --v216)
              {
                uint64_t v222 = *v215++;
                sub_1B69C0264(v310, v217, v214++, v222, v280);
              }
            }
            else
            {
              uint64_t v5 = v280;
              uint64_t v221 = v290;
              int i = v288;
              if (v213 != v306)
              {
                do
                  sub_1B69C0264(v310, v217, v214++, v213++, v280);
                while (v306 != v213);
              }
            }
            float32x4_t v339 = v275;
            int v340 = v276;
            char v341 = BYTE4(v276);
            uint64_t v342 = v277;
            char v343 = v278;
            uint64_t v344 = v279;
            sub_1B6345178(v289, &v339, (uint64_t)&v345);
            uint64_t v290 = v221;
            sub_1B634507C((char *)v217);
            uint64_t v210 = v301;
            ecs_stack_allocator_pop_snapshot(v301);
            if (i)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v217 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v217 + 376));
            }
            swift_release();
            uint64_t v209 = v317 + 1;
          }
          while (v317 + 1 != v284);
        }
      }
    }
  }
  uint64_t v90 = *v12;
  uint64_t v91 = *(void *)(*v12 + 16);
  if (v91)
  {
    float32x4_t v92 = (float32x4_t)xmmword_1B6E725A0;
    float32x4_t v93 = (float32x4_t)xmmword_1B6E51230;
    *(_OWORD *)(v5 + 112) = xmmword_1B6E725A0;
    *(_OWORD *)(v5 + 128) = xmmword_1B6E51230;
    float32x4_t v94 = (float32x4_t *)(v90 + 48);
    uint64_t v95 = v91;
    do
    {
      __int32 v96 = v92.i32[3];
      float32x4_t v97 = *v94;
      v92.i32[3] = 0;
      v97.i32[3] = 0;
      __int32 v98 = v93.i32[3];
      float32x4_t v99 = vminnmq_f32(v92, v97);
      float32x4_t v92 = v99;
      v92.i32[3] = v96;
      *(float32x4_t *)(v5 + 112) = v92;
      float32x4_t v100 = *v94;
      v94 += 7;
      float32x4_t v101 = v100;
      v93.i32[3] = 0;
      v101.i32[3] = 0;
      float32x4_t v102 = vmaxnmq_f32(v93, v101);
      float32x4_t v93 = v102;
      v93.i32[3] = v98;
      *(float32x4_t *)(v5 + 128) = v93;
      --v95;
    }
    while (v95);
    __n128 v103 = (__n128)vsubq_f32(v93, v92);
    float32x4_t v314 = v102;
    if (v103.n128_f32[0] <= v103.n128_f32[1])
    {
      float v105 = v103.n128_f32[0];
    }
    else
    {
      if ((v103.n128_u32[1] & 0x7FFFFF) != 0) {
        float v104 = v103.n128_f32[0];
      }
      else {
        float v104 = v103.n128_f32[1];
      }
      if ((~v103.n128_u32[1] & 0x7F800000) != 0) {
        float v105 = v103.n128_f32[1];
      }
      else {
        float v105 = v104;
      }
    }
    float32x4_t v309 = v99;
    if (v105 > v103.n128_f32[2])
    {
      if ((v103.n128_u32[2] & 0x7FFFFF) != 0) {
        float v106 = v105;
      }
      else {
        float v106 = v103.n128_f32[2];
      }
      if ((~v103.n128_u32[2] & 0x7F800000) != 0) {
        float v105 = v103.n128_f32[2];
      }
      else {
        float v105 = v106;
      }
    }
    *char v259 = v105 >= 0.0;
    float v107 = sub_1B681B434(v103);
    if (v105 < 0.0)
    {
      *char v259 = 0;
    }
    else
    {
      *char v259 = v107 > 0.001;
      if (v107 > 0.001)
      {
        v108.i32[3] = v309.i32[3];
        *(float32x2_t *)v109.f32 = vadd_f32(*(float32x2_t *)v309.f32, (float32x2_t)vdup_n_s32(0xBA83126F));
        v109.f32[2] = v309.f32[2] + -0.001;
        v109.i32[3] = 0;
        *(float32x2_t *)v108.f32 = vadd_f32(*(float32x2_t *)v314.f32, (float32x2_t)vdup_n_s32(0x3A83126Fu));
        v108.f32[2] = v314.f32[2] + 0.001;
        float32x4_t v110 = vsubq_f32(v108, v109);
        v111.i64[0] = 0x3F0000003F000000;
        v111.i64[1] = 0x3F0000003F000000;
        float32x4_t v112 = vaddq_f32(v109, vmulq_f32(v110, v111));
        while (1)
        {
          float v113 = v110.f32[0];
          if (v110.f32[0] > v110.f32[1])
          {
            float v113 = v110.f32[1];
            if ((~v110.i32[1] & 0x7F800000) == 0)
            {
              if ((v110.i32[1] & 0x7FFFFF) != 0) {
                float v113 = v110.f32[0];
              }
              else {
                float v113 = v110.f32[1];
              }
            }
          }
          if ((v110.i32[2] & 0x7FFFFF) != 0) {
            float v114 = v113;
          }
          else {
            float v114 = v110.f32[2];
          }
          if ((~v110.i32[2] & 0x7F800000) != 0) {
            float v114 = v110.f32[2];
          }
          if (v113 > v110.f32[2]) {
            float v113 = v114;
          }
          float v115 = v110.f32[0];
          if (v110.f32[1] >= v110.f32[0])
          {
            float v115 = (v110.i32[1] & 0x7FFFFF) != 0 ? v110.f32[0] : v110.f32[1];
            if ((~v110.i32[1] & 0x7F800000) != 0) {
              float v115 = v110.f32[1];
            }
          }
          if (v110.f32[2] >= v115)
          {
            if ((v110.i32[2] & 0x7FFFFF) == 0) {
              float v115 = v110.f32[2];
            }
            if ((~v110.i32[2] & 0x7F800000) != 0) {
              float v115 = v110.f32[2];
            }
          }
          if (v113 >= (float)(v115 * 0.01)) {
            break;
          }
          if (v110.f32[1] > v110.f32[2]) {
            float v116 = v110.f32[1];
          }
          else {
            float v116 = v110.f32[2];
          }
          BOOL v117 = v110.f32[0] > v110.f32[2] || v110.f32[0] > v110.f32[1];
          int8x16_t v118 = (int8x16_t)v110;
          if (v117) {
            unsigned int v119 = 0;
          }
          else {
            unsigned int v119 = -1;
          }
          *(float *)v118.i32 = v116 * 0.01;
          int8x16_t v120 = vbslq_s8((int8x16_t)vdupq_n_s32(v119), v118, (int8x16_t)v110);
          float v121 = *(float *)&v120.i32[2];
          if (*(float *)&v120.i32[1] > *(float *)v120.i32 || *(float *)&v120.i32[1] > *(float *)&v120.i32[2])
          {
            float32x4_t v110 = (float32x4_t)v120;
          }
          else
          {
            if (*(float *)v120.i32 > *(float *)&v120.i32[2]) {
              float v121 = *(float *)v120.i32;
            }
            float32_t v123 = v121 * 0.01;
            float32x4_t v110 = (float32x4_t)v120;
            v110.f32[1] = v123;
          }
          if (v110.f32[2] <= *(float *)v120.i32 && v110.f32[2] <= v110.f32[1])
          {
            if (*(float *)v120.i32 <= v110.f32[1]) {
              *(float *)v120.i32 = v110.f32[1];
            }
            v110.f32[2] = *(float *)v120.i32 * 0.01;
          }
        }
        v200.i64[0] = 0x3F0000003F000000;
        v200.i64[1] = 0x3F0000003F000000;
        float32x4_t v201 = vmulq_f32(v110, v200);
        float32x4_t v202 = vsubq_f32(v112, v201);
        __n128 v203 = (__n128)vsubq_f32(vaddq_f32(v112, v201), v202);
        float v204 = v203.n128_f32[1];
        float v205 = v203.n128_f32[2];
        float v206 = vmuls_lane_f32(vmuls_lane_f32(v203.n128_f32[0], (float32x2_t)v203.n128_u64[0], 1), (float32x4_t)v203, 2);
        float32x4_t v311 = (float32x4_t)v203;
        float32x4_t v316 = v202;
        float v207 = sub_1B681B434(v203);
        if ((unint64_t)v91 < 0x41) {
          float v208 = v207 * 0.25;
        }
        else {
          float v208 = powf(v206 / (float)v91, 0.333);
        }
        float v223 = powf((float)*(uint64_t *)(v5 + 48), 0.333);
        float v224 = powf(v223 + -1.0, 3.0);
        float v225 = powf(v206 / v224, 0.333) * 1.0001;
        if (v225 > v208) {
          float v208 = v225;
        }
        *(float *)(v5 + 104) = v208;
        v226.i32[3] = v311.i32[3];
        uint64_t v227 = (uint64_t)(float)(v311.f32[0] / v208);
        uint64_t v228 = (uint64_t)(float)(v204 / v208);
        *(void *)(v5 + 56) = v227 + 1;
        *(void *)(v5 + 64) = v228 + 1;
        uint64_t v229 = (uint64_t)(float)(v205 / v208);
        *(void *)(v5 + 72) = v229 + 1;
        *(void *)(v5 + 80) = v227;
        *(void *)(v5 + 88) = v228;
        *(void *)(v5 + 96) = v229;
        v230.i64[0] = 0x3F0000003F000000;
        v230.i64[1] = 0x3F0000003F000000;
        v226.f32[0] = (float)(v227 + 1);
        v226.f32[1] = (float)(v228 + 1);
        float32x4_t v231 = vaddq_f32(v316, vmulq_f32(v311, v230));
        v226.f32[2] = (float)(v229 + 1);
        float32x4_t v232 = vmulq_n_f32(v226, v208 * 0.5);
        *(float32x4_t *)(v5 + 112) = vsubq_f32(v231, v232);
        *(float32x4_t *)(v5 + 128) = vaddq_f32(v231, v232);
        uint64_t v233 = (v227 + 1) * (v228 + 1);
        uint64_t v234 = v233 * (v229 + 1);
        if (v234)
        {
          uint64_t v235 = sub_1B69FFC34();
          nullsub_1(v235);
          uint64_t v236 = sub_1B69FFC34();
          nullsub_1(v236);
          uint64_t v237 = sub_1B69FFC34();
          nullsub_1(v237);
          uint64_t v238 = sub_1B69FFC34();
          nullsub_1(v238);
          uint64_t v239 = sub_1B69FFC34();
          nullsub_1(v239);
          do
          {
            sub_1B69FFC34();
            uint64_t v240 = *(void *)(*(void *)(v5 + 40) + 16);
            sub_1B69FFD38(v240);
            uint64_t v241 = sub_1B69FFDB4(v240, -1, -1);
            nullsub_1(v241);
            --v234;
          }
          while (v234);
          float v208 = *(float *)(v5 + 104);
          uint64_t v233 = *(void *)(v5 + 64) * *(void *)(v5 + 56);
        }
        uint64_t v242 = sub_1B6355ED4(*v12);
        if (v242)
        {
          uint64_t v243 = v242;
          uint64_t v244 = 0;
          char v245 = (void *)(v5 + 40);
          uint64_t v246 = 48;
          float v247 = 1.0 / v208;
          do
          {
            float32x4_t v250 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(*(void *)(v5 + 16) + v246), *(float32x4_t *)(v5 + 112)), v247);
            if (((~v250.i32[0] & 0x7F800000) != 0 || (v250.i32[0] & 0x7FFFFF) == 0)
              && ((~v250.i32[1] & 0x7F800000) != 0 || (v250.i32[1] & 0x7FFFFF) == 0)
              && ((~v250.i32[2] & 0x7F800000) != 0 || (v250.i32[2] & 0x7FFFFF) == 0))
            {
              uint64_t v254 = v5;
              uint64_t v255 = (uint64_t)v250.f32[0] + v233 * (uint64_t)v250.f32[2] + *(void *)(v5 + 56) * (uint64_t)v250.f32[1];
              uint64_t v256 = *(void *)(v254 + 40) + 32;
              if ((*(void *)(v256 + 16 * v255) & 0x8000000000000000) != 0)
              {
                uint64_t v248 = sub_1B6C16618();
                *(void *)(*v245 + 16 * v255 + 32) = v244;
              }
              else
              {
                uint64_t v257 = *(void *)(v256 + 16 * v255 + 8);
                uint64_t v248 = sub_1B6C16600();
                *(void *)(*v12 + 112 * v257 + 128) = v244;
              }
              nullsub_1(v248);
              uint64_t v249 = sub_1B6C16618();
              *(void *)(*v245 + 16 * v255 + 40) = v244;
              nullsub_1(v249);
              uint64_t v5 = v280;
              float v247 = 1.0 / v208;
            }
            ++v244;
            v246 += 112;
          }
          while (v243 != v244);
        }
      }
    }
  }
}

uint64_t sub_1B69B899C(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v12 = a5;
  uint64_t v13 = a4;
  float v14 = a2.n128_f32[0];
  a2.n128_f32[0] = 1.0 / *(float *)(a4 + 104);
  uint64_t v15 = *(void *)(a4 + 64) * *(void *)(a4 + 56);
  uint64_t v16 = (uint64_t)(float)(a2.n128_f32[0] * (float)(a5->f32[1] - *(float *)(a4 + 116)));
  uint64_t v17 = (uint64_t)(float)(a2.n128_f32[0] * (float)(a5->f32[2] - *(float *)(a4 + 120)));
  uint64_t v101 = (uint64_t)(float)(a2.n128_f32[0] * (float)(a5->f32[0] - *(float *)(a4 + 112)));
  a2.n128_f32[0] = v14 * v14;
  sub_1B69C0378(v101, v16, v17, v15, a4, a1, a5, a6, a2, a8, a9);
  uint64_t v19 = a8;
  uint64_t v20 = a9;
  uint64_t v95 = 112 * a9 - 112;
  uint64_t v21 = v17 + 1;
  uint64_t v97 = v17;
  uint64_t v98 = v16;
  uint64_t v104 = v16 + 1;
  float v22 = 0.0;
  uint64_t v23 = 1;
  uint64_t v102 = v17;
  uint64_t v134 = a9;
  uint64_t v122 = a6;
  uint64_t v130 = v13;
  float v106 = v12;
  uint64_t v135 = a8;
  while (1)
  {
    uint64_t v105 = v23;
    uint64_t v125 = v98 - v23;
    uint64_t v123 = v23 + v98;
    uint64_t v24 = *(void *)(v13 + 88);
    uint64_t v25 = *(void *)(v13 + 96);
    if (v23 + v98 < v24) {
      uint64_t v24 = v23 + v98;
    }
    uint64_t v126 = v24;
    uint64_t v26 = v97 - v23;
    uint64_t v131 = v97 - v23;
    uint64_t v27 = v26 & ~(v26 >> 63);
    uint64_t v28 = v23 + v97;
    uint64_t v111 = v23 + v97;
    uint64_t v112 = (v98 - v23) & ~((v98 - v23) >> 63);
    if (v23 + v97 >= v25) {
      uint64_t v28 = *(void *)(v13 + 96);
    }
    uint64_t v116 = v28;
    uint64_t v119 = v26 & ~(v26 >> 63);
    uint64_t v29 = v101 - v23;
    uint64_t v103 = v21;
    uint64_t v113 = v101 - v23;
    uint64_t v99 = *(void *)(v13 + 96);
    if (v101 - v23 >= 0)
    {
      if (v25 >= v21) {
        uint64_t v30 = v21;
      }
      else {
        uint64_t v30 = *(void *)(v13 + 96);
      }
      uint64_t v107 = v30;
      uint64_t v31 = (v98 - v23) & ~((v98 - v23) >> 63);
      do
      {
        uint64_t v34 = v31;
        v18.n128_f32[0] = v14 * v14;
        sub_1B69C0378(v29, v31, v27, v15, v130, a1, v12, v122, v18, v19, v20);
        if (v27 == v116)
        {
          uint64_t v32 = v113;
          uint64_t v33 = v34;
        }
        else
        {
          uint64_t v32 = v113;
          do
          {
            ++v27;
            v18.n128_f32[0] = v14 * v14;
            sub_1B69C0378(v113, v34, v27, v15, v130, a1, v12, v122, v18, v135, v134);
            uint64_t v33 = v34;
          }
          while (v107 != v27);
        }
        uint64_t v31 = v33 + 1;
        uint64_t v20 = v134;
        uint64_t v19 = v135;
        uint64_t v29 = v32;
        uint64_t v27 = v119;
      }
      while (v33 != v126);
    }
    uint64_t result = v105 + v101;
    uint64_t v13 = v130;
    if (v105 + v101 >= *(void *)(v130 + 56))
    {
      BOOL v42 = v29 >= 0;
      uint64_t v43 = v29 + 1;
      uint64_t v44 = v122;
      if (v29 + 1 >= 0)
      {
        uint64_t v45 = a1;
        uint64_t v46 = v131;
LABEL_32:
        int v47 = 0;
        uint64_t v48 = v43;
        goto LABEL_35;
      }
      uint64_t v48 = 0;
      int v47 = 1;
      uint64_t v45 = a1;
      uint64_t v46 = v131;
    }
    else
    {
      uint64_t v36 = v103;
      if (v99 < v103) {
        uint64_t v36 = v99;
      }
      uint64_t v108 = v36;
      uint64_t v37 = v112;
      do
      {
        uint64_t v39 = result;
        uint64_t v40 = v37;
        uint64_t v41 = v119;
        v18.n128_f32[0] = v14 * v14;
        sub_1B69C0378(result, v37, v119, v15, v13, a1, v12, v122, v18, v19, v134);
        if (v119 == v116)
        {
          uint64_t v38 = v40;
        }
        else
        {
          do
          {
            ++v41;
            v18.n128_f32[0] = v14 * v14;
            sub_1B69C0378(v39, v40, v41, v15, v130, a1, v12, v122, v18, v135, v134);
            uint64_t v38 = v40;
          }
          while (v108 != v41);
        }
        uint64_t v37 = v38 + 1;
        uint64_t v19 = v135;
        uint64_t v13 = v130;
        uint64_t result = v39;
      }
      while (v38 != v126);
      BOOL v42 = 1;
      uint64_t v43 = v113 + 1;
      uint64_t v46 = v131;
      if (v113 + 1 >= 0)
      {
        uint64_t v20 = v134;
        uint64_t v44 = v122;
        uint64_t v45 = a1;
        goto LABEL_32;
      }
      uint64_t v48 = 0;
      int v47 = 1;
      uint64_t v20 = v134;
      uint64_t v44 = v122;
      uint64_t v45 = a1;
    }
LABEL_35:
    if (result - 1 >= *(void *)(v13 + 80)) {
      uint64_t v49 = *(void *)(v13 + 80);
    }
    else {
      uint64_t v49 = result - 1;
    }
    if (v49 < v48) {
      goto LABEL_39;
    }
    uint64_t v51 = *(void *)(v13 + 88);
    uint64_t v52 = v123;
    if (v123 >= v51) {
      uint64_t v52 = *(void *)(v13 + 88);
    }
    uint64_t v114 = v52;
    uint64_t v117 = v49;
    uint64_t v120 = v43;
    if ((v46 & 0x8000000000000000) == 0)
    {
      int v100 = v47;
      uint64_t v109 = result - 1;
      uint64_t v96 = v48;
      if (v51 >= v104) {
        uint64_t v53 = v104;
      }
      else {
        uint64_t v53 = *(void *)(v13 + 88);
      }
      uint64_t v54 = v48;
      uint64_t v127 = v53;
      do
      {
        uint64_t v60 = v19;
        v18.n128_f32[0] = v14 * v14;
        uint64_t result = sub_1B69C0378(v54, v112, v46, v15, v13, v45, v12, v44, v18, v19, v134);
        if (v112 == v114)
        {
          uint64_t v55 = v12;
          uint64_t v56 = v44;
          uint64_t v57 = v15;
          uint64_t v58 = v45;
          uint64_t v46 = v131;
        }
        else
        {
          uint64_t v58 = v45;
          uint64_t v61 = v112;
          uint64_t v55 = v12;
          uint64_t v56 = v44;
          uint64_t v57 = v15;
          do
          {
            ++v61;
            v18.n128_f32[0] = v14 * v14;
            uint64_t result = sub_1B69C0378(v54, v61, v131, v15, v13, v58, v55, v56, v18, v60, v134);
            uint64_t v46 = v131;
          }
          while (v127 != v61);
        }
        uint64_t v43 = v120;
        BOOL v59 = v54++ == v117;
        uint64_t v19 = v60;
        uint64_t v45 = v58;
        uint64_t v15 = v57;
        uint64_t v44 = v56;
        char v12 = v55;
      }
      while (!v59);
      uint64_t v62 = v112;
      if (v111 < *(void *)(v13 + 72))
      {
        uint64_t v20 = v134;
        uint64_t v48 = v96;
LABEL_60:
        if (v51 >= v104) {
          uint64_t v63 = v104;
        }
        else {
          uint64_t v63 = v51;
        }
        uint64_t v128 = v63;
        do
        {
          uint64_t v69 = v48;
          uint64_t v70 = v19;
          v18.n128_f32[0] = v14 * v14;
          uint64_t result = sub_1B69C0378(v48, v62, v111, v15, v13, a1, v12, v44, v18, v19, v20);
          if (v62 == v114)
          {
            uint64_t v20 = v134;
            uint64_t v64 = v13;
            uint64_t v65 = v44;
            uint64_t v66 = v15;
            int32x2_t v67 = v12;
            uint64_t v68 = v69;
          }
          else
          {
            uint64_t v20 = v134;
            uint64_t v64 = v13;
            uint64_t v65 = v44;
            uint64_t v66 = v15;
            int32x2_t v67 = v12;
            do
            {
              ++v62;
              v18.n128_f32[0] = v14 * v14;
              uint64_t result = sub_1B69C0378(v69, v62, v111, v66, v64, a1, v12, v44, v18, v70, v20);
              uint64_t v68 = v69;
              uint64_t v20 = v134;
            }
            while (v128 != v62);
          }
          uint64_t v48 = v68 + 1;
          uint64_t v43 = v120;
          uint64_t v44 = v65;
          uint64_t v13 = v64;
          char v12 = v67;
          uint64_t v19 = v70;
          uint64_t v15 = v66;
          uint64_t v62 = v112;
        }
        while (v68 != v117);
        uint64_t v71 = *(void *)(v64 + 80);
        if (v100)
        {
          uint64_t v50 = v109;
          uint64_t v46 = v131;
          uint64_t v45 = a1;
          if (v109 >= v71) {
            goto LABEL_76;
          }
          goto LABEL_72;
        }
        uint64_t v50 = v109;
        uint64_t v46 = v131;
        uint64_t v45 = a1;
        if (v109 >= v71) {
          goto LABEL_82;
        }
LABEL_79:
        if (v50 < v43) {
          goto LABEL_88;
        }
        BOOL v42 = 1;
        goto LABEL_84;
      }
      uint64_t v71 = *(void *)(v13 + 80);
      uint64_t v20 = v134;
      if (v100)
      {
        uint64_t v50 = v109;
        if (v109 < v71)
        {
LABEL_72:
          if (v50 < 0) {
            goto LABEL_88;
          }
          uint64_t v43 = 0;
          BOOL v42 = 1;
          goto LABEL_84;
        }
LABEL_76:
        if (v71 < 0) {
          goto LABEL_88;
        }
        uint64_t v43 = 0;
      }
      else
      {
        uint64_t v50 = v109;
        if (v109 < v71) {
          goto LABEL_79;
        }
LABEL_82:
        if (v71 < v43) {
          goto LABEL_88;
        }
      }
      BOOL v42 = 1;
      uint64_t v50 = v71;
      goto LABEL_84;
    }
    if (v111 < *(void *)(v13 + 72))
    {
      int v100 = v47;
      uint64_t v109 = result - 1;
      uint64_t v62 = v112;
      goto LABEL_60;
    }
LABEL_39:
    if (v47) {
      uint64_t v43 = 0;
    }
    if (v49 < v43) {
      goto LABEL_87;
    }
    uint64_t v50 = v49;
LABEL_84:
    uint64_t v72 = (v46 + 1) & ~((v46 + 1) >> 63);
    uint64_t v73 = *(void *)(v13 + 96);
    uint64_t v74 = v111 - 1;
    if (v111 - 1 >= v73) {
      uint64_t v74 = *(void *)(v13 + 96);
    }
    uint64_t v129 = v74;
    if (v74 >= v72)
    {
      uint64_t v75 = v125;
      uint64_t v110 = v50;
      uint64_t v118 = (v46 + 1) & ~((v46 + 1) >> 63);
      if ((v125 & 0x8000000000000000) == 0)
      {
        uint64_t v115 = *(void *)(v13 + 96);
        if (v73 >= v102) {
          uint64_t v76 = v102;
        }
        else {
          uint64_t v76 = *(void *)(v13 + 96);
        }
        uint64_t v77 = v43;
        uint64_t v121 = v43;
        uint64_t v132 = v76;
        do
        {
          uint64_t v83 = v19;
          v18.n128_f32[0] = v14 * v14;
          uint64_t result = sub_1B69C0378(v77, v75, v72, v15, v13, v45, v12, v44, v18, v19, v134);
          if (v72 == v129)
          {
            uint64_t v78 = v12;
            uint64_t v79 = v44;
            uint64_t v80 = v15;
            uint64_t v81 = v83;
            uint64_t v82 = v45;
            uint64_t v75 = v125;
          }
          else
          {
            uint64_t v84 = v45;
            uint64_t v85 = v72;
            uint64_t v78 = v12;
            uint64_t v79 = v44;
            uint64_t v80 = v15;
            uint64_t v81 = v83;
            uint64_t v82 = v84;
            uint64_t v75 = v125;
            do
            {
              ++v85;
              v18.n128_f32[0] = v14 * v14;
              uint64_t result = sub_1B69C0378(v77, v75, v85, v15, v13, v82, v78, v79, v18, v81, v134);
              uint64_t v75 = v125;
            }
            while (v132 != v85);
          }
          BOOL v59 = v77++ == v110;
          uint64_t v19 = v81;
          uint64_t v45 = v82;
          uint64_t v15 = v80;
          uint64_t v44 = v79;
          char v12 = v78;
          uint64_t v72 = v118;
          uint64_t v43 = v121;
        }
        while (!v59);
        uint64_t v86 = v123;
        uint64_t v20 = v134;
        uint64_t v73 = v115;
        if (v123 >= *(void *)(v13 + 64)) {
          goto LABEL_88;
        }
LABEL_107:
        if (v73 >= v102) {
          uint64_t v73 = v102;
        }
        uint64_t v133 = v73;
        do
        {
          uint64_t v91 = v20;
          uint64_t v92 = v43;
          uint64_t v93 = v19;
          v18.n128_f32[0] = v14 * v14;
          uint64_t result = sub_1B69C0378(v43, v86, v72, v15, v13, a1, v106, v44, v18, v19, v20);
          if (v72 == v129)
          {
            uint64_t v86 = v123;
            uint64_t v20 = v91;
            uint64_t v87 = v13;
            uint64_t v88 = v44;
            uint64_t v89 = v92;
            uint64_t v90 = v15;
          }
          else
          {
            uint64_t v94 = v72;
            uint64_t v20 = v91;
            uint64_t v87 = v13;
            uint64_t v88 = v44;
            uint64_t v86 = v123;
            uint64_t v90 = v15;
            do
            {
              ++v94;
              v18.n128_f32[0] = v14 * v14;
              uint64_t result = sub_1B69C0378(v92, v86, v94, v15, v87, a1, v106, v44, v18, v93, v20);
              uint64_t v89 = v92;
              uint64_t v20 = v91;
              uint64_t v86 = v123;
            }
            while (v133 != v94);
          }
          uint64_t v43 = v89 + 1;
          uint64_t v44 = v88;
          uint64_t v13 = v87;
          uint64_t v19 = v93;
          uint64_t v15 = v90;
          uint64_t v72 = v118;
        }
        while (v89 != v110);
        goto LABEL_88;
      }
      uint64_t v86 = v123;
      if (v123 < *(void *)(v13 + 64)) {
        goto LABEL_107;
      }
    }
LABEL_87:
    if (!v42) {
      return result;
    }
LABEL_88:
    float v22 = v22 + *(float *)(v13 + 104);
    if (v22 >= v14) {
      return result;
    }
    char v12 = v106;
    if (*(void *)(*(void *)v19 + 16) == v20) {
      break;
    }
LABEL_3:
    uint64_t v23 = v105 + 1;
    uint64_t v21 = v103 + 1;
    ++v104;
    ++v102;
  }
  if (!v20)
  {
    v18.n128_u32[1] = 0;
    if (v22 >= 0.0) {
      return result;
    }
    goto LABEL_3;
  }
  if (*(float *)(*(void *)v19 + v95 + 120) > v22) {
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_1B69B937C(uint64_t a1, char a2, char a3, int a4)
{
  uint64_t v5 = v4;
  swift_retain();
  sub_1B636E62C();
  unsigned __int8 v11 = v10;
  int v12 = v10;
  uint64_t result = swift_release();
  if (v12 != 2)
  {
    int v111 = a4;
    uint64_t v15 = *(void *)(*(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(void *)thread_worker_index(&thread_worker_index, v14)
                    + 8);
    sub_1B62F7BE4(0, (unint64_t *)&qword_1EB980BA0, (void (*)(uint64_t))sub_1B663C11C);
    uint64_t inited = swift_initStackObject();
    uint64_t v17 = inited;
    long long v112 = xmmword_1B6E77050;
    *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
    __n128 v18 = &type metadata for DebugInfoA;
    if ((v11 & 1) == 0) {
      __n128 v18 = &type metadata for DebugInfoB;
    }
    *(void *)(inited + 32) = v18;
    unint64_t v119 = inited + 32;
    uint64_t v19 = &off_1F0F520A8;
    if ((v11 & 1) == 0) {
      uint64_t v19 = &off_1F0F52198;
    }
    *(void *)(inited + 40) = v19;
    if (v5[2].i8[0] == 1)
    {
      uint64_t v20 = sub_1B67487EC((float32x4_t)xmmword_1B6E9A9A0);
      int v124 = v20;
      if (a2)
      {
        int v23 = sub_1B67487EC((float32x4_t)xmmword_1B6E9A9B0);
        float32x4_t v24 = v5[7];
        float32x4_t v25 = v5[8];
        v24.i32[3] = 1.0;
        v25.i32[3] = 1.0;
        v26.i64[0] = 0x3F0000003F000000;
        v26.i64[1] = 0x3F0000003F000000;
        float32x4_t v27 = vmulq_f32(vaddq_f32(v24, v25), v26);
        float32x4_t v28 = vmulq_f32(vsubq_f32(v25, v24), v26);
        v25.f32[0] = v5[6].f32[2] * 0.1;
        float32x4_t v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
        v29.i32[3] = 0;
        v136[0] = v27;
        v136[1] = vaddq_f32(v28, v29);
        memset(&v136[2], 0, 64);
        char v137 = 6;
        v134[0].i8[0] = 1;
        uint64_t v20 = sub_1B6D7E4E0(v17, 0x100000000uLL, v15, (long long *)v136, v23);
      }
      if (a3)
      {
        uint64_t v113 = v5[4].i64[1];
        if (v113)
        {
          uint64_t v30 = 0;
          uint64_t v114 = 0;
          float32x4_t v31 = v5[7];
          uint64_t v122 = v135;
          uint64_t v123 = v5;
          uint64_t v120 = v17 + 32;
          uint64_t v121 = v17;
          uint64_t v118 = (long long *)(v17 + 64);
          while (1)
          {
            v31.i32[1] = v5[7].i32[1];
            uint64_t v115 = v5[4].i64[0];
            if (v115) {
              break;
            }
            v22.i32[0] = v5[6].i32[2];
LABEL_13:
            v31.f32[2] = v31.f32[2] + *(float *)v22.i32;
            if (++v114 == v113) {
              goto LABEL_52;
            }
          }
          uint64_t v32 = 0;
          while (1)
          {
            v31.i32[0] = v5[7].i32[0];
            uint64_t v33 = v5[3].i64[1];
            if (v33) {
              break;
            }
            v22.i32[0] = v5[6].i32[2];
LABEL_17:
            ++v32;
            v31.f32[1] = v31.f32[1] + *(float *)v22.i32;
            if (v32 == v115) {
              goto LABEL_13;
            }
          }
          uint64_t v34 = 0;
          uint64_t v116 = v30 + v33;
          uint64_t v117 = v32;
          v22.i32[0] = v5[6].i32[2];
          uint64_t v125 = v33;
          while (1)
          {
            if ((*(void *)(v5[2].i64[1] + 16 * v30 + 32) & 0x8000000000000000) != 0) {
              goto LABEL_23;
            }
            float32x4_t v39 = vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(v22, 0));
            float32x4_t v130 = v31;
            float32x4_t v40 = v31;
            v40.i32[3] = 1.0;
            v39.i32[3] = 1.0;
            v41.i64[0] = 0x3F0000003F000000;
            v41.i64[1] = 0x3F0000003F000000;
            v134[0] = vmulq_f32(vaddq_f32(v40, v39), v41);
            v134[1] = vmulq_f32(vsubq_f32(v39, v40), v41);
            BOOL v42 = v122;
            *uint64_t v122 = 0u;
            v42[1] = 0u;
            v42[2] = 0u;
            v42[3] = 0u;
            v135[64] = 6;
            MEMORY[0x1F4188790](v20, v21);
            *(void *)&v110[-16] = v134;
            *(_DWORD *)&v110[-8] = v124;
            uint64_t v43 = *(void *)(v15 + 32);
            ecs_stack_allocator_push_snapshot(v43);
            uint64_t v44 = ecs_stack_allocator_allocate(v43, 16 * *(void *)(v17 + 16) + 32, 8);
            uint64_t v45 = v44;
            *uint64_t v44 = &type metadata for DebugInfoWireframePrimitive;
            v44[1] = &off_1F0F974E8;
            v44[2] = &type metadata for DebugInfoColor;
            v44[3] = &off_1F0F63878;
            unint64_t v46 = *(void *)(v17 + 16);
            uint64_t v128 = v110;
            uint64_t v129 = v30;
            uint64_t v127 = &v110[-32];
            if (!v46)
            {
              uint64_t v48 = 2;
              goto LABEL_34;
            }
            if (v46 < 4 || (unint64_t)(v44 + 4) < v120 + 16 * v46 && v119 < (unint64_t)&v44[2 * v46 + 4]) {
              break;
            }
            uint64_t v47 = v46 & 0x7FFFFFFFFFFFFFFCLL;
            uint64_t v48 = v46 & 0x7FFFFFFFFFFFFFFCLL | 2;
            uint64_t v66 = v44 + 8;
            uint64_t v67 = v46 & 0x7FFFFFFFFFFFFFFCLL;
            uint64_t v68 = v118;
            do
            {
              long long v70 = *(v68 - 2);
              long long v69 = *(v68 - 1);
              long long v72 = *v68;
              long long v71 = v68[1];
              v68 += 4;
              *(v66 - 2) = v70;
              *(v66 - 1) = v69;
              *uint64_t v66 = v72;
              v66[1] = v71;
              v66 += 4;
              v67 -= 4;
            }
            while (v67);
            if (v46 != v47) {
              goto LABEL_30;
            }
LABEL_34:
            uint64_t v52 = v15;
            uint64_t v53 = *(void *)(v15 + 16);
            uint64_t v126 = v53 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
            uint64_t v54 = *(os_unfair_lock_s **)(v53 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
            swift_retain();
            os_unfair_lock_lock(v54);
            uint64_t v55 = 0;
            uint64_t v56 = v45;
            uint64_t v57 = v48;
            do
            {
              ++v56;
              v55 ^= sub_1B6E31F28();
              --v57;
            }
            while (v57);
            uint64_t v58 = *(void **)(v53 + 72);
            uint64_t v59 = v58[2];
            if (!v59)
            {
LABEL_20:
              uint64_t v15 = v52;
              uint64_t v17 = v121;
              goto LABEL_21;
            }
            uint64_t v60 = v58[4];
            if (*(void *)(v60 + 144) == v55)
            {
              uint64_t v15 = v52;
              uint64_t v17 = v121;
            }
            else
            {
              uint64_t v64 = v59 - 1;
              if (!v64) {
                goto LABEL_20;
              }
              uint64_t v65 = v58 + 5;
              uint64_t v15 = v52;
              uint64_t v17 = v121;
              while (1)
              {
                uint64_t v60 = *v65;
                if (*(void *)(*v65 + 144) == v55) {
                  break;
                }
                ++v65;
                if (!--v64) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v61 = *(void *)(v60 + 16);
            if (*(void *)(v61 + 16))
            {
              unint64_t v62 = sub_1B62C1A30(0);
              if (v63)
              {
                int v36 = *(_DWORD *)(*(void *)(v61 + 56) + 4 * v62);
                goto LABEL_22;
              }
            }
LABEL_21:
            uint64_t v35 = sub_1B6A00108(v45, v48);
            int v36 = sub_1B637C7BC(v55, 0, v35, MEMORY[0x1E4FBC860]);
            swift_release();
LABEL_22:
            uint64_t v37 = *(void *)(*(void *)(v53 + 80) + 8 * v36 + 32);
            uint64_t v38 = *(os_unfair_lock_s **)(v126 + 24);
            swift_retain();
            os_unfair_lock_unlock(v38);
            swift_release();
            LOBYTE(v132) = 1;
            sub_1B6B27900(v37, 1, 1, 0x100000000uLL, v15, (uint64_t)sub_1B69C29B4, (uint64_t)v127);
            swift_release();
            uint64_t v20 = ecs_stack_allocator_pop_snapshot(*(void *)(v15 + 32));
            uint64_t v30 = v129;
            uint64_t v5 = v123;
            v22.i32[0] = v123[6].i32[2];
            float32x4_t v31 = v130;
            uint64_t v33 = v125;
LABEL_23:
            ++v34;
            ++v30;
            v31.f32[0] = v31.f32[0] + *(float *)v22.i32;
            if (v34 == v33)
            {
              uint64_t v30 = v116;
              uint64_t v32 = v117;
              goto LABEL_17;
            }
          }
          uint64_t v47 = 0;
          uint64_t v48 = 2;
LABEL_30:
          unint64_t v49 = v46 - v47;
          uint64_t v50 = (long long *)(v120 + 16 * v47);
          do
          {
            long long v51 = *v50++;
            *(_OWORD *)&v44[2 * v48++] = v51;
            --v49;
          }
          while (v49);
          goto LABEL_34;
        }
      }
    }
LABEL_52:
    uint64_t result = swift_bridgeObjectRelease();
    if (v111)
    {
      uint64_t v73 = MEMORY[0x1E4FBB1A0];
      if (v5[2].i8[0] == 1)
      {
        uint64_t v74 = v5[1].i64[0];
        uint64_t v75 = *(void *)(v74 + 16);
        if (v75)
        {
          uint64_t v76 = 0;
          uint64_t v77 = (long long *)(v74 + 48);
          do
          {
            long long v78 = *v77;
            int v79 = *v77;
            int v80 = ~v79 & 0x7F800000;
            int v81 = v79 & 0x7FFFFF;
            if (v80) {
              BOOL v82 = 1;
            }
            else {
              BOOL v82 = v81 == 0;
            }
            if (!v82
              || ((~DWORD1(v78) & 0x7F800000) == 0 ? (BOOL v83 = (DWORD1(v78) & 0x7FFFFF) == 0) : (BOOL v83 = 1),
                  !v83 || ((~DWORD2(v78) & 0x7F800000) == 0 ? (BOOL v84 = (DWORD2(v78) & 0x7FFFFF) == 0) : (BOOL v84 = 1), !v84)))
            {
              ++v76;
            }
            v77 += 7;
            --v75;
          }
          while (v75);
          if (v76 < 1)
          {
            uint64_t v128 = 0;
          }
          else
          {
            unint64_t v132 = 0;
            unint64_t v133 = 0xE000000000000000;
            sub_1B6E328C8();
            swift_bridgeObjectRelease();
            unint64_t v132 = 0xD00000000000001DLL;
            unint64_t v133 = 0x80000001B6F40B90;
            v131.i64[0] = v76;
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            uint64_t v128 = (unsigned char *)v132;
          }
        }
        else
        {
          uint64_t v128 = 0;
        }
        sub_1B67A36D0();
        uint64_t v87 = swift_allocObject();
        *(_OWORD *)(v87 + 16) = v112;
        uint64_t v88 = MEMORY[0x1E4FBB4D0];
        float v89 = (float)*(uint64_t *)(v5[1].i64[0] + 16) / (float)*(uint64_t *)(v5[2].i64[1] + 16);
        *(void *)(v87 + 56) = MEMORY[0x1E4FBB470];
        *(void *)(v87 + 64) = v88;
        *(float *)(v87 + 32) = v89;
        uint64_t v90 = sub_1B6E317D8();
        uint64_t v129 = v91;
        v130.i64[0] = v90;
        sub_1B69C29D4(0, &qword_1EB980E00, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
        uint64_t v92 = swift_allocObject();
        *(_OWORD *)(v92 + 16) = v112;
        *(void *)(v92 + 56) = v73;
        *(void *)(v92 + 32) = 0xD000000000000018;
        *(void *)(v92 + 40) = 0x80000001B6F40AB0;
        sub_1B6E338E8();
        swift_bridgeObjectRelease();
        uint64_t v93 = swift_allocObject();
        *(_OWORD *)(v93 + 16) = v112;
        unint64_t v132 = 0;
        unint64_t v133 = 0xE000000000000000;
        sub_1B6E328C8();
        sub_1B6E31948();
        v131.i64[0] = v5[3].i64[1];
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        v131.i64[0] = v5[4].i64[0];
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        v131.i64[0] = v5[4].i64[1];
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        v131.i64[0] = *(void *)(v5[2].i64[1] + 16);
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        unint64_t v94 = v132;
        unint64_t v95 = v133;
        *(void *)(v93 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v93 + 32) = v94;
        *(void *)(v93 + 40) = v95;
        sub_1B6E338E8();
        swift_bridgeObjectRelease();
        uint64_t v96 = swift_allocObject();
        *(_OWORD *)(v96 + 16) = v112;
        unint64_t v132 = 0;
        unint64_t v133 = 0xE000000000000000;
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        unint64_t v132 = 0xD00000000000001CLL;
        unint64_t v133 = 0x80000001B6F40AF0;
        v131.i64[0] = *(void *)(v5[1].i64[0] + 16);
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        unint64_t v97 = v132;
        unint64_t v98 = v133;
        *(void *)(v96 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v96 + 32) = v97;
        *(void *)(v96 + 40) = v98;
        sub_1B6E338E8();
        swift_bridgeObjectRelease();
        uint64_t v99 = swift_allocObject();
        *(_OWORD *)(v99 + 16) = v112;
        unint64_t v132 = 0;
        unint64_t v133 = 0xE000000000000000;
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        unint64_t v132 = 0xD00000000000001CLL;
        unint64_t v133 = 0x80000001B6F40B10;
        float32x4_t v131 = vsubq_f32(v5[8], v5[7]);
        int v100 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
        sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
        sub_1B69C2FD0(&qword_1E9DCFE28, (unint64_t *)&qword_1EB980EB0, v100);
        sub_1B6E33808();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        unint64_t v101 = v132;
        unint64_t v102 = v133;
        *(void *)(v99 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v99 + 32) = v101;
        *(void *)(v99 + 40) = v102;
        sub_1B6E338E8();
        swift_bridgeObjectRelease();
        uint64_t v103 = swift_allocObject();
        *(_OWORD *)(v103 + 16) = v112;
        unint64_t v132 = 0;
        unint64_t v133 = 0xE000000000000000;
        sub_1B6E328C8();
        sub_1B6E31948();
        sub_1B6E31EA8();
        unint64_t v104 = v132;
        unint64_t v105 = v133;
        *(void *)(v103 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v103 + 32) = v104;
        *(void *)(v103 + 40) = v105;
        sub_1B6E338E8();
        swift_bridgeObjectRelease();
        uint64_t v106 = swift_allocObject();
        *(_OWORD *)(v106 + 16) = v112;
        unint64_t v132 = 0;
        unint64_t v133 = 0xE000000000000000;
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        unint64_t v132 = 0xD00000000000001CLL;
        unint64_t v133 = 0x80000001B6F40B50;
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        uint64_t v73 = MEMORY[0x1E4FBB1A0];
        sub_1B6E31948();
        unint64_t v107 = v132;
        unint64_t v108 = v133;
        *(void *)(v106 + 56) = v73;
        *(void *)(v106 + 32) = v107;
        *(void *)(v106 + 40) = v108;
        sub_1B6E338E8();
        swift_bridgeObjectRelease();
        unint64_t v86 = 0xEC0000007D205D47;
        unint64_t v85 = 0x4E494B434F4C465BLL;
      }
      else
      {
        sub_1B69C29D4(0, &qword_1EB980E00, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
        unint64_t v85 = 0xD000000000000032;
        unint64_t v86 = 0x80000001B6F40A70;
      }
      uint64_t v109 = swift_allocObject();
      *(_OWORD *)(v109 + 16) = v112;
      *(void *)(v109 + 56) = v73;
      *(void *)(v109 + 32) = v85;
      *(void *)(v109 + 40) = v86;
      sub_1B6E338E8();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t sub_1B69BA148(char a1)
{
  unint64_t result = 0x636E65756C666E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7473694477656976;
      break;
    case 2:
      unint64_t result = 0x6C676E4177656976;
      break;
    case 3:
    case 4:
    case 6:
    case 11:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x65646F4D657A6973;
      break;
    case 7:
      unint64_t result = 0x756C6F56646E696DLL;
      break;
    case 8:
      unint64_t result = 0x4464657269736564;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 12:
      unint64_t result = 0xD000000000000011;
      break;
    case 13:
      unint64_t result = 0xD000000000000012;
      break;
    case 14:
      unint64_t result = 0x64697247776F6873;
      break;
    case 15:
      unint64_t result = 0x6C6C6543776F6873;
      break;
    case 16:
      unint64_t result = 0x6F666E49676F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B69BA350(char a1)
{
  unint64_t result = 0x636E65756C666E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7473694477656976;
      break;
    case 2:
      unint64_t result = 0x6C676E4177656976;
      break;
    case 3:
    case 4:
    case 6:
    case 11:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x65646F4D657A6973;
      break;
    case 7:
      unint64_t result = 0x756C6F56646E696DLL;
      break;
    case 8:
      unint64_t result = 0x4464657269736564;
      break;
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 12:
      unint64_t result = 0xD000000000000011;
      break;
    case 13:
      unint64_t result = 0xD000000000000012;
      break;
    case 14:
      unint64_t result = 0x64697247776F6873;
      break;
    case 15:
      unint64_t result = 0x6C6C6543776F6873;
      break;
    case 16:
      unint64_t result = 0x6F666E49676F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69BA558(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1B69BA350(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1B69BA350(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B69BA5E4()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B69BA148(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B69BA648()
{
  sub_1B69BA148(*v0);
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69BA69C()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B69BA148(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B69BA6FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69BC914();
  *a1 = result;
  return result;
}

unint64_t sub_1B69BA72C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B69BA148(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B69BA758()
{
  return sub_1B69BA350(*v0);
}

uint64_t sub_1B69BA760@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69BC914();
  *a1 = result;
  return result;
}

uint64_t sub_1B69BA788(uint64_t a1)
{
  unint64_t v2 = sub_1B69C3184();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69BA7C4(uint64_t a1)
{
  unint64_t v2 = sub_1B69C3184();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69BA800(void *a1)
{
  uint64_t v3 = v1;
  sub_1B69C3290(0, &qword_1E9DD3550, (uint64_t (*)(void))sub_1B69C3184, (uint64_t)&type metadata for ParticleFlockingSolver.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unsigned __int8 v10 = &v13[-v9];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C3184();
  sub_1B6E33A88();
  v13[0] = 0;
  sub_1B6E32F78();
  if (!v2)
  {
    v13[0] = 1;
    sub_1B6E32F78();
    v13[0] = 2;
    sub_1B6E32F78();
    v13[0] = 3;
    sub_1B6E32F78();
    v13[0] = 4;
    sub_1B6E32F88();
    v13[0] = *(unsigned char *)(v3 + 32);
    char v15 = 5;
    sub_1B66C57F8();
    sub_1B6E32FA8();
    sub_1B69C31D8(v3 + 48, (uint64_t)v14);
    sub_1B69C31D8((uint64_t)v14, (uint64_t)v13);
    char v15 = 6;
    unsigned __int8 v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B69C2FD0((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v11);
    sub_1B6E32F38();
    v13[0] = 7;
    sub_1B6E32F78();
    v13[0] = 8;
    sub_1B6E32F78();
    v13[0] = 9;
    sub_1B6E32F78();
    v13[0] = 10;
    sub_1B6E32F78();
    v13[0] = 11;
    sub_1B6E32F78();
    v13[0] = 12;
    sub_1B6E32F78();
    v13[0] = 13;
    sub_1B6E32F78();
    v13[0] = 14;
    sub_1B6E32F58();
    v13[0] = 15;
    sub_1B6E32F58();
    v13[0] = 16;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
}

__n128 sub_1B69BAC9C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B69C08DC(a1, v7);
  if (!v2)
  {
    long long v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_DWORD *)(a2 + 95) = *(_DWORD *)((char *)v8 + 15);
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B69BACF0(void *a1)
{
  return sub_1B69BA800(a1);
}

uint64_t sub_1B69BAD3C()
{
  return type metadata accessor for ParticleFlockingSolverSystem();
}

double sub_1B69BAD5C@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1B6E86160;
  *(void *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 32) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  *(_OWORD *)(a1 + 68) = xmmword_1B6E86170;
  double result = 4294968350.0;
  *(void *)(a1 + 84) = 0x41F0000041A00000;
  *(_DWORD *)(a1 + 92) = 1065353216;
  *(_WORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 98) = 0;
  return result;
}

uint64_t sub_1B69BADBC(void *a1, uint64_t a2, uint64_t a3, char a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, float a17, float a18, float a19, float a20,float a21)
{
  float v33 = a20;
  uint64_t v34 = a1[1];
  uint64_t v178 = sub_1B6642ACC(v34, (uint64_t)a1);
  uint64_t v35 = sub_1B6642C74(v34, (uint64_t)a1);
  uint64_t v194 = sub_1B67A853C();
  char v202 = v36;
  uint64_t v231 = 0;
  long long v232 = 0u;
  long long v233 = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  long long v234 = xmmword_1B6E4F370;
  long long v235 = _Q1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v236 = _D0;
  int v237 = 0;
  uint64_t v238 = -1;
  uint64_t v230 = sub_1B6641198((uint64_t)&v231, a2);
  uint64_t v45 = a1[6];
  uint64_t v201 = a1[7];
  if (v45 != v201)
  {
    uint64_t v46 = LODWORD(a9) & 0x7FFFFFFF;
    float v222 = a8;
    float v47 = a8 * 0.5;
    uint64_t v48 = v178;
    uint64_t v185 = v35;
    char v175 = a4;
    float v179 = a9;
    float v184 = v47;
    do
    {
      __int32 v213 = v228.i32[3];
      float32x4_t v49 = *(float32x4_t *)(v35 + 16 * v45);
      float32x4_t v50 = v49;
      v50.i32[3] = v44;
      float32x4_t v51 = vmulq_f32(v49, v49);
      int32x2_t v52 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).u64[0];
      *(float *)v52.i32 = sqrtf(*(float *)v52.i32);
      float32x4_t v217 = v42;
      float32x4_t v218 = v41;
      float32x4_t v216 = v43;
      float32x4_t v221 = v50;
      float32x4_t v204 = v49;
      if (*(float *)v52.i32 <= 0.000001)
      {
        float32x4_t v226 = v50;
      }
      else
      {
        float32x4_t v53 = vdivq_f32(v49, (float32x4_t)vdupq_lane_s32(v52, 0));
        v53.i32[3] = v200;
        float32x4_t v226 = v53;
      }
      uint64_t v54 = v46;
      uint64_t v55 = (float32x4_t *)(v48 + 16 * v45);
      float32x4_t v229 = *v55;
      uint64_t v56 = (float32x4_t *)v230;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        int64_t v57 = v56[1].i64[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v56 = (float32x4_t *)sub_1B68C5ABC(0, v57, 1, v56);
        }
        float v60 = v222;
        float v61 = 0.5;
        float v62 = 1.0;
        float32x4_t v63 = v223;
        if (v57)
        {
          uint64_t v64 = v56[1].i64[0] - v57;
          if (v64 < 0)
          {
            uint64_t result = sub_1B6E32C88();
            __break(1u);
            return result;
          }
          memmove(&v56[2], &v56[7 * v57 + 2], 112 * v64);
          v56[1].i64[0] = v64;
          float v60 = v222;
          float v61 = 0.5;
          float v62 = 1.0;
          float32x4_t v63 = v223;
        }
        uint64_t v230 = (uint64_t)v56;
      }
      else
      {
        uint64_t v65 = (float32x4_t *)MEMORY[0x1E4FBC860];
        if (v56[1].i64[1] >= 2uLL)
        {
          sub_1B69C29D4(0, (unint64_t *)&unk_1E9DCFD00, (uint64_t)&type metadata for FlockingParticle, MEMORY[0x1E4FBBE00]);
          uint64_t v65 = (float32x4_t *)swift_allocObject();
          size_t v66 = j__malloc_size(v65);
          v65[1].i64[0] = 0;
          v65[1].i64[1] = 2 * ((uint64_t)(v66 - 32) / 112);
        }
        uint64_t v230 = (uint64_t)v65;
        swift_bridgeObjectRelease();
        uint64_t v56 = v65;
        float v60 = v222;
        float v61 = 0.5;
        float v62 = 1.0;
        float32x4_t v63 = v223;
      }
      uint64_t v46 = v54;
      if (*(unsigned char *)(a3 + 32) == 1)
      {
        float32x4_t v67 = *v55;
        int v68 = (int)*v55;
        if (((~v68 & 0x7F800000) != 0 || (v68 & 0x7FFFFF) == 0)
          && ((~v67.i32[1] & 0x7F800000) != 0 || (v67.i32[1] & 0x7FFFFF) == 0)
          && ((~v67.i32[2] & 0x7F800000) != 0 || (v67.i32[2] & 0x7FFFFF) == 0))
        {
          uint64_t v71 = *(void *)(a3 + 16);
          uint64_t v72 = *(void *)(v71 + 16);
          uint64_t v73 = *(void *)(a3 + 40);
          uint64_t v74 = *(void *)(v73 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v75 = v74;
          uint64_t v35 = v185;
          v76.n128_f32[0] = a5;
          sub_1B69B899C(v73 + 32, v76, v75, a3, v55, v71 + 32, v72, (uint64_t)&v230, a2);
          uint64_t v48 = v178;
          uint64_t v46 = v54;
          swift_bridgeObjectRelease();
          a4 = v175;
          swift_bridgeObjectRelease();
          float32x4_t v63 = v223;
          float v62 = 1.0;
          float v61 = 0.5;
          float v60 = v222;
          uint64_t v56 = (float32x4_t *)v230;
        }
      }
      float32x4_t v77 = v229;
      v77.i32[3] = v213;
      float32x4_t v228 = v77;
      unint64_t v78 = v56[1].u64[0];
      if (v78 < 2)
      {
        float v153 = 0.0;
        float32x4_t v42 = v217;
        float32x4_t v41 = v218;
        float32x4_t v43 = v216;
        __int32 v44 = v221.i32[3];
        if ((v202 & 1) == 0) {
          goto LABEL_3;
        }
        goto LABEL_4;
      }
      v79.i32[3] = v199;
      if (a6 <= 0.0)
      {
        float32x4_t v42 = v217;
        float32x4_t v41 = v218;
        float32x4_t v43 = v216;
        __int32 v44 = v221.i32[3];
        if (v33 > 0.0) {
          goto LABEL_128;
        }
        goto LABEL_129;
      }
      float v80 = v56[7].f32[1];
      unint64_t v81 = v78 - 1;
      BOOL v82 = &v56[14].f32[2];
      float32x4_t v83 = 0uLL;
      float v84 = 0.0;
      LODWORD(v58) = 1.0;
      float32x4_t v85 = v228;
      float32x4_t v86 = v221;
      do
      {
        float32x4_t v87 = v63;
        *(float *)&long long v59 = *v82;
        if (*v82 <= 0.000001)
        {
LABEL_35:
          float32x4_t v63 = v87;
          goto LABEL_36;
        }
        float32x4_t v88 = *(float32x4_t *)(v82 - 18);
        float32x4_t v89 = v56[3];
        float v90 = *(v82 - 1);
        if (*(float *)&v59 < 0.000001)
        {
          float v91 = 0.0;
          goto LABEL_52;
        }
        float v92 = v56[7].f32[0];
        float v93 = *(v82 - 2);
        if (a4 == 1) {
          goto LABEL_48;
        }
        float v91 = *v82;
        if (!a4) {
          goto LABEL_52;
        }
        float32x4_t v94 = v56[5];
        float32x4_t v95 = v56[6];
        int8x16_t v96 = *(int8x16_t *)(v82 - 6);
        LODWORD(v97) = HIDWORD(v56[6].i64[0]);
        LODWORD(v98) = v56[6].i64[1];
        if (v95.f32[0] == v97 && v97 == v98)
        {
          long long v100 = *(_OWORD *)(v82 - 6);
          LODWORD(v100) = vextq_s8(v96, v96, 8uLL).u32[0];
          int32x2_t v101 = vceq_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v96.i8), *(float32x2_t *)&v100);
          if (v101.i32[1] & v101.i32[0])
          {
LABEL_48:
            float v102 = (float)(*(float *)&v59 - v92) - v93;
            goto LABEL_49;
          }
        }
        if (a4 == 2)
        {
          if ((LODWORD(v97) & 0x7FFFFF) != 0) {
            LODWORD(v112) = v56[6];
          }
          else {
            LODWORD(v112) = HIDWORD(v56[6].i64[0]);
          }
          if ((~LODWORD(v97) & 0x7F800000) != 0) {
            LODWORD(v112) = HIDWORD(v56[6].i64[0]);
          }
          if (v97 >= v95.f32[0]) {
            float v113 = v112;
          }
          else {
            LODWORD(v113) = v56[6];
          }
          if ((LODWORD(v98) & 0x7FFFFF) != 0) {
            float v114 = v113;
          }
          else {
            LODWORD(v114) = v56[6].i64[1];
          }
          if ((~LODWORD(v98) & 0x7F800000) != 0) {
            LODWORD(v114) = v56[6].i64[1];
          }
          float v115 = v98 >= v113 ? v114 : v113;
          LODWORD(v116) = HIDWORD(*((void *)v82 - 3));
          if (*(float *)&v96.i32[1] >= *(float *)v96.i32)
          {
            if ((v96.i32[1] & 0x7FFFFF) != 0) {
              LODWORD(v117) = *(_OWORD *)(v82 - 6);
            }
            else {
              LODWORD(v117) = HIDWORD(*((void *)v82 - 3));
            }
            if ((~v96.i32[1] & 0x7F800000) == 0) {
              float v116 = v117;
            }
          }
          else
          {
            LODWORD(v116) = *(_OWORD *)(v82 - 6);
          }
          if (*(float *)&v96.i32[2] >= v116)
          {
            if ((v96.i32[2] & 0x7FFFFF) == 0) {
              LODWORD(v116) = *((void *)v82 - 2);
            }
            if ((~v96.i32[2] & 0x7F800000) != 0) {
              LODWORD(v116) = *((void *)v82 - 2);
            }
          }
          if ((float)(v115 + v116) <= *(float *)&v59)
          {
            float v91 = (float)(*(float *)&v59 - v92) - v93;
            goto LABEL_52;
          }
        }
        float32x4_t v190 = *(float32x4_t *)(v82 - 6);
        float32x4_t v192 = *(float32x4_t *)(v82 - 10);
        long long v196 = v59;
        float32x4_t v197 = v87;
        float32x4_t v206 = v86;
        float32x4_t v208 = v85;
        long long v210 = v58;
        float32x4_t v212 = v83;
        v240.columns[3] = (simd_float4)v56[3];
        v240.columns[3].f32[3] = v62;
        float32x4_t v118 = vabsq_f32(v95);
        v118.i32[3] = 0;
        v119.i64[0] = 0x8000000080000000;
        v119.i64[1] = 0x8000000080000000;
        float32x4_t v120 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v118, (float32x4_t)xmmword_1B6E4FCD0) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v95, v119));
        float32x4_t v121 = vmulq_f32(v94, v94);
        float32x4_t v122 = vmulq_laneq_f32(v94, v94, 3);
        float v123 = vmulq_lane_f32(v94, *(float32x2_t *)v94.f32, 1).f32[0];
        float32x4_t v124 = vaddq_f32(v120, v120);
        float32_t v125 = (float)(v61 - v121.f32[1]) - v121.f32[2];
        v121.f32[0] = v61 - v121.f32[0];
        float32x2_t v126 = vmul_laneq_f32(*(float32x2_t *)v94.f32, v94, 2);
        v127.i32[3] = 0;
        v127.f32[0] = v125;
        v127.f32[1] = v123 + v122.f32[2];
        v127.f32[2] = v126.f32[0] - v122.f32[1];
        v240.columns[0] = (simd_float4)vmulq_n_f32(v127, v124.f32[0]);
        v128.i32[3] = 0;
        v128.f32[0] = v123 - v122.f32[2];
        v128.f32[1] = v121.f32[0] - v121.f32[2];
        v128.f32[2] = v126.f32[1] + v122.f32[0];
        v240.columns[1] = (simd_float4)vmulq_lane_f32(v128, *(float32x2_t *)v124.f32, 1);
        *(int32x2_t *)v122.f32 = vrev64_s32(*(int32x2_t *)v122.f32);
        v129.i32[0] = vadd_f32(v126, *(float32x2_t *)v122.f32).u32[0];
        v129.i32[1] = vsub_f32(v126, *(float32x2_t *)&v122).i32[1];
        v129.f32[2] = v121.f32[0] - v121.f32[1];
        v129.i32[3] = 0;
        v240.columns[2] = (simd_float4)vmulq_laneq_f32(v129, v124, 2);
        float32x4_t v187 = (float32x4_t)v240.columns[1];
        float32x4_t v188 = (float32x4_t)v240.columns[0];
        float32x4_t v186 = (float32x4_t)v240.columns[2];
        float32x4_t v225 = *(float32x4_t *)(v82 - 18);
        float32x4_t v195 = v56[3];
        simd_float4x4 v241 = __invert_f4(v240);
        float32x4_t v88 = v225;
        float v62 = 1.0;
        float32x4_t v130 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v241.columns[3], (float32x4_t)v241.columns[2], v225, 2), (float32x4_t)v241.columns[1], *(float32x2_t *)v225.f32, 1), (float32x4_t)v241.columns[0], v225.f32[0]);
        v241.columns[0] = (simd_float4)vmulq_f32(v130, v130);
        float v131 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v241.columns[0], 2), vaddq_f32((float32x4_t)v241.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v241.columns[0].f32, 1))).f32[0];
        if (v131 <= 1.0)
        {
          float v91 = 0.0;
          float v60 = v222;
          float v61 = 0.5;
          long long v58 = v210;
          float32x4_t v83 = v212;
          float32x4_t v86 = v206;
          float32x4_t v85 = v208;
          long long v59 = v196;
          float32x4_t v87 = v197;
          float32x4_t v89 = v195;
          goto LABEL_52;
        }
        float v182 = v131;
        float32x4_t v183 = v130;
        float32x4_t v132 = vabsq_f32(v190);
        v132.i32[3] = 0;
        v133.i64[0] = 0x8000000080000000;
        v133.i64[1] = 0x8000000080000000;
        float32x4_t v134 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v132, (float32x4_t)xmmword_1B6E4FCD0) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v190, v133));
        float32x4_t v135 = v192;
        float32x4_t v136 = vmulq_f32(v135, v135);
        float32x4_t v137 = vmulq_laneq_f32(v135, v135, 3);
        float v138 = vmulq_lane_f32(v135, *(float32x2_t *)v135.f32, 1).f32[0];
        float32x4_t v139 = vaddq_f32(v134, v134);
        float v140 = v136.f32[1];
        float v141 = 0.5 - v136.f32[0];
        float32x2_t v142 = vmul_laneq_f32(*(float32x2_t *)v135.f32, v135, 2);
        v135.i32[3] = 0;
        v135.f32[0] = (float)(0.5 - v136.f32[1]) - v136.f32[2];
        v135.f32[1] = v138 + v137.f32[2];
        v135.f32[2] = v142.f32[0] - v137.f32[1];
        v242.columns[0] = (simd_float4)vmulq_n_f32(v135, v139.f32[0]);
        v143.i32[3] = 0;
        v143.f32[0] = v138 - v137.f32[2];
        v143.f32[1] = (float)(0.5 - v136.f32[0]) - v136.f32[2];
        v143.f32[2] = v142.f32[1] + v137.f32[0];
        v242.columns[1] = (simd_float4)vmulq_lane_f32(v143, *(float32x2_t *)v139.f32, 1);
        *(int32x2_t *)v137.f32 = vrev64_s32(*(int32x2_t *)v137.f32);
        v144.i32[0] = vadd_f32(v142, *(float32x2_t *)v137.f32).u32[0];
        v144.i32[1] = vsub_f32(v142, *(float32x2_t *)&v137).i32[1];
        v144.f32[2] = v141 - v140;
        v144.i32[3] = 0;
        v242.columns[2] = (simd_float4)vmulq_laneq_f32(v144, v139, 2);
        v242.columns[3] = (simd_float4)v225;
        v242.columns[3].i32[3] = 1.0;
        float32x4_t v191 = (float32x4_t)v242.columns[1];
        float32x4_t v193 = (float32x4_t)v242.columns[0];
        float32x4_t v189 = (float32x4_t)v242.columns[2];
        simd_float4x4 v243 = __invert_f4(v242);
        float32x4_t v88 = v225;
        float v62 = 1.0;
        float32x4_t v89 = v195;
        long long v59 = v196;
        float32x4_t v145 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v243.columns[3], (float32x4_t)v243.columns[2], v195, 2), (float32x4_t)v243.columns[1], *(float32x2_t *)v195.f32, 1), (float32x4_t)v243.columns[0], v195.f32[0]);
        v243.columns[0] = (simd_float4)vmulq_f32(v145, v145);
        float v146 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v243.columns[0], 2), vaddq_f32((float32x4_t)v243.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v243.columns[0].f32, 1))).f32[0];
        float v91 = 0.0;
        float v60 = v222;
        float v61 = 0.5;
        long long v58 = v210;
        float32x4_t v83 = v212;
        float32x4_t v86 = v206;
        float32x4_t v85 = v208;
        float32x4_t v87 = v197;
        if (v146 > 1.0)
        {
          float v147 = sqrtf(v182);
          float32x4_t v148 = vsubq_f32(v195, vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v195, v186, v183.f32[2] / v147), v187, v183.f32[1] / v147), v188, v183.f32[0] / v147));
          float32x4_t v149 = vmulq_f32(v148, v148);
          float v150 = sqrtf(v146);
          float32x4_t v151 = vsubq_f32(v225, vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v225, v189, v145.f32[2] / v150), v191, v145.f32[1] / v150), v193, v145.f32[0] / v150));
          float32x4_t v152 = vmulq_f32(v151, v151);
          float v102 = (float)(*(float *)&v196
                       - sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 2), vaddq_f32(v149, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1))).f32[0]))- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 2), vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1))).f32[0]);
LABEL_49:
          if (v102 < 0.0) {
            float v91 = 0.0;
          }
          else {
            float v91 = v102;
          }
        }
LABEL_52:
        float32x4_t v79 = vsubq_f32(v88, v89);
        float v103 = (float)((float)(v62 - (float)(v80 / (float)(v80 + v90))) * a7) + v60;
        if (v46 && v91 < a10)
        {
          float v104 = (float)((float)(v91 * a13) * (float)(v91 * a13))
               + (float)((float)(v62 - (float)((float)(v91 * a13) * (float)(v91 * a13))) * 10.0);
          if (v91 > a11) {
            float v104 = (float)((float)(a10 - v91) * a12) * (float)((float)(a10 - v91) * a12);
          }
          if (v103 < v62) {
            float v104 = v103 * v104;
          }
          float v105 = 1.0;
          if (v104 < 1.0) {
            float v105 = v104;
          }
          if (v84 <= v105) {
            float v84 = v105;
          }
          float32x4_t v83 = vsubq_f32(v83, vdivq_f32(vmulq_n_f32(v79, v104), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v59, 0)));
          v83.i32[3] = v227;
        }
        if (v84 >= v62 || v91 <= a10) {
          goto LABEL_35;
        }
        float32x4_t v63 = vdivq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v59, 0));
        v63.i32[3] = v87.i32[3];
        float32x4_t v106 = vmulq_f32(v226, v63);
        float32x4_t v79 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1)));
        if (v79.f32[0] > v62)
        {
          if (a14 <= 0.0) {
            goto LABEL_36;
          }
          float v107 = 1.0;
          v79.i32[0] = 0;
          if (a15 >= 0.0) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
        if (v79.f32[0] < -1.0)
        {
          if (a14 <= 3.1416) {
            goto LABEL_36;
          }
          float v107 = 1.0;
          v79.i32[0] = 1078530010;
          if (a15 >= 3.1416) {
            goto LABEL_69;
          }
LABEL_68:
          float v107 = (float)(a14 - v79.f32[0]) * a16;
          goto LABEL_69;
        }
        float32x4_t v205 = v86;
        float32x4_t v207 = v85;
        long long v209 = v58;
        float32x4_t v211 = v83;
        float32x4_t v224 = v63;
        v79.f32[0] = acosf(v79.f32[0]);
        if (v79.f32[0] >= a14)
        {
          float v60 = v222;
          float v61 = 0.5;
          float v62 = 1.0;
          float32x4_t v63 = v224;
          long long v58 = v209;
          float32x4_t v83 = v211;
          float32x4_t v86 = v205;
          float32x4_t v85 = v207;
          goto LABEL_36;
        }
        float v107 = 1.0;
        float v60 = v222;
        float v61 = 0.5;
        float v62 = 1.0;
        float32x4_t v63 = v224;
        long long v58 = v209;
        float32x4_t v83 = v211;
        float32x4_t v86 = v205;
        float32x4_t v85 = v207;
        if (v79.f32[0] > a15) {
          goto LABEL_68;
        }
LABEL_69:
        float v108 = (float)(v91 - a10) / (float)(a5 - a10);
        _NF = v108 < v61;
        float v109 = sqrtf(v108 + v108);
        float v110 = (float)((float)(v62 - v108) + (float)(v62 - v108)) * (float)((float)(v62 - v108) + (float)(v62 - v108));
        if (_NF) {
          float v110 = v109;
        }
        float v111 = v110 * (float)((float)(v107 * (float)(fminf(v103, v62) * v107)) * v110);
        float32x4_t v86 = vaddq_f32(v86, vmulq_n_f32(*(float32x4_t *)(v82 - 14), v111));
        v86.i32[3] = v214;
        float32x4_t v85 = vaddq_f32(v85, vmulq_n_f32(*(float32x4_t *)(v82 - 18), v111));
        v85.i32[3] = v215;
        *(float *)&long long v58 = *(float *)&v58 + v111;
LABEL_36:
        v82 += 28;
        --v81;
      }
      while (v81);
      float32x4_t v223 = v63;
      if (*(float *)&v58 <= v62)
      {
        __int32 v44 = v221.i32[3];
        float32x4_t v158 = v221;
        float v33 = a20;
        uint64_t v35 = v185;
        float32x4_t v42 = v217;
        float32x4_t v41 = v218;
        float32x4_t v43 = v216;
        float32x4_t v156 = v204;
        if (v84 > 0.0) {
          goto LABEL_126;
        }
      }
      else
      {
        *(int32x2_t *)v79.f32 = vdup_lane_s32(*(int32x2_t *)&v58, 0);
        *(float32x2_t *)v154.f32 = vdiv_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v79.f32);
        v154.f32[2] = v86.f32[2] / *(float *)&v58;
        v154.i32[3] = 0;
        float v155 = (float)(v62 - v84) * a17;
        float v33 = a20;
        uint64_t v35 = v185;
        float32x4_t v42 = v217;
        float32x4_t v41 = v218;
        float32x4_t v43 = v216;
        __int32 v44 = v221.i32[3];
        float32x4_t v156 = v204;
        if (v155 >= v62)
        {
          float32x4_t v157 = vmulq_n_f32(v154, v155);
          v157.i32[3] = v176;
        }
        else
        {
          float32x4_t v157 = vaddq_f32(vmulq_n_f32(v204, v62 - v155), vmulq_n_f32(v154, v155));
          v157.i32[3] = v177;
        }
        *(float32x2_t *)v79.f32 = vdiv_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v79.f32);
        v79.f32[2] = v85.f32[2] / *(float *)&v58;
        float32x4_t v158 = vaddq_f32(vmulq_n_f32(vsubq_f32(v79, v228), (float)(v62 - v84) * a18), v157);
        v158.i32[3] = v181;
        if (v84 > 0.0)
        {
LABEL_126:
          float32x4_t v158 = vaddq_f32(vmulq_n_f32(v83, v84 * v179), v158);
          v158.i32[3] = v180;
        }
      }
      float v47 = v184;
      float32x4_t v159 = vaddq_f32(vmulq_n_f32(v156, a19), vmulq_n_f32(v158, a6));
      v159.i32[3] = 0;
      *(float32x4_t *)(v35 + 16 * v45) = v159;
      if (v33 > 0.0)
      {
LABEL_128:
        uint64_t v160 = v56[1].i64[0] - 1;
        if (v56[1].i64[0] != 1)
        {
          float v164 = v56[7].f32[1];
          float v165 = v56[7].f32[0] * a21;
          float32x4_t v166 = v56[3];
          uint64_t v167 = &v56[14].f32[2];
          do
          {
            float v168 = v165 + (float)(*(v167 - 2) * a21);
            float v169 = *v167;
            _NF = *v167 >= 0.000001 && v169 < v168;
            if (_NF)
            {
              float32x4_t v171 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 - 18), v166), (float)((float)((float)(v168 - v169) / v169) * v33)* (float)(v47 + (float)((float)(v62 - (float)(v164 / (float)(v164 + *(v167 - 1)))) * a7)));
              float32x4_t v172 = *v55;
              float32x4_t v173 = vsubq_f32(*v55, v171);
              v172.i32[3] = v43.i32[3];
              v171.i32[3] = v42.i32[3];
              v173.i32[3] = v41.i32[3];
              float32x4_t v41 = v173;
              v173.f32[3] = v62;
              *uint64_t v55 = v173;
              float32x4_t v43 = v172;
              float32x4_t v42 = v171;
            }
            v167 += 28;
            --v160;
          }
          while (v160);
        }
      }
LABEL_129:
      if ((v202 & 1) == 0)
      {
        float v153 = 0.0;
        uint64_t v161 = v56[1].i64[0] - 1;
        if (v56[1].i64[0] != 1)
        {
          uint64_t v162 = &v56[14].f32[2];
          do
          {
            float v163 = *v162;
            v162 += 28;
            float v153 = v153 + (float)(v62 - (float)(v163 / a5));
            --v161;
          }
          while (v161);
        }
LABEL_3:
        *(float *)(v194 + 4 * v45) = v153;
      }
LABEL_4:
      ++v45;
    }
    while (v45 != v201);
  }

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ParticleFlockingSolverSystem()
{
  return self;
}

const char *sub_1B69BBC0C()
{
  return "ParticleFlockingSolver";
}

unint64_t sub_1B69BBC20(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x676E697369757263;
      break;
    case 2:
      unint64_t result = 0x657053706D616C63;
      break;
    case 3:
      unint64_t result = 0x7244656C706D6973;
      break;
    case 4:
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B69BBD08(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x676E697369757263;
      break;
    case 2:
      unint64_t result = 0x657053706D616C63;
      break;
    case 3:
      unint64_t result = 0x7244656C706D6973;
      break;
    case 4:
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69BBDF0(void *a1)
{
  uint64_t v3 = v1;
  sub_1B69C3290(0, &qword_1E9DD3568, (uint64_t (*)(void))sub_1B69C323C, (uint64_t)&type metadata for ParticleFlockingSpeedControl.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unsigned __int8 v10 = (char *)v13 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C323C();
  sub_1B6E33A88();
  char v20 = 0;
  sub_1B6E32F78();
  if (!v2)
  {
    char v19 = 1;
    sub_1B6E32F78();
    v13[1] = *(void *)(v3 + 8);
    char v18 = 2;
    unsigned __int8 v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
    sub_1B69C3290(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
    sub_1B69C2FD0((unint64_t *)&qword_1EB97D1B8, &qword_1EB980E90, v11);
    sub_1B6E32FA8();
    char v17 = 3;
    sub_1B6E32F78();
    char v16 = 4;
    sub_1B6E32F78();
    char v15 = *(unsigned char *)(v3 + 24);
    char v14 = 5;
    sub_1B66C58CC();
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B69BC0C4(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB8890(*a1, *a2);
}

uint64_t sub_1B69BC0D0()
{
  return sub_1B6BCFB0C();
}

uint64_t sub_1B69BC0D8()
{
  return sub_1B69E9490();
}

uint64_t sub_1B69BC0E0()
{
  return sub_1B69EAA7C();
}

uint64_t sub_1B69BC0E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69028FC();
  *a1 = result;
  return result;
}

unint64_t sub_1B69BC120@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B69BBC20(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B69BC14C()
{
  return sub_1B69BBD08(*v0);
}

uint64_t sub_1B69BC154@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69028FC();
  *a1 = result;
  return result;
}

uint64_t sub_1B69BC184(uint64_t a1)
{
  unint64_t v2 = sub_1B69C323C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69BC1C0(uint64_t a1)
{
  unint64_t v2 = sub_1B69C323C();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B69BC1FC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B69C1FB4(a1, v5);
  if (!v2)
  {
    *a2 = v5[0];
    double result = *(double *)((char *)v5 + 9);
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)((char *)v5 + 9);
  }
  return result;
}

uint64_t sub_1B69BC240(void *a1)
{
  return sub_1B69BBDF0(a1);
}

uint64_t sub_1B69BC258()
{
  return type metadata accessor for ParticleFlockingSpeedControlSystem();
}

double sub_1B69BC278@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x412000003E99999ALL;
  *(void *)(a1 + 8) = 0x41A0000000000000;
  double result = 5.2386907e-11;
  *(void *)(a1 + 16) = 0x3DCCCCCD3D4CCCCDLL;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

unint64_t sub_1B69BC2A0(void *a1, float a2, int32x4_t a3, float a4, float a5, float a6, float a7, float a8)
{
  char v15 = (uint64_t *)a1[11];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[13];
  uint64_t v18 = a1[1];
  uint64_t v19 = a1[2];
  uint64_t v20 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v15, v16, v17, v19);
  unint64_t result = sub_1B6345398(*(void *)(v18 + 40), (uint64_t)&type metadata for Orientation, &v59);
  if (v59 != 1)
  {
    uint64_t v47 = a1[6];
    uint64_t v48 = a1[7] - v47;
    if (!v48) {
      return result;
    }
    for (int i = (float32x4_t *)(v20 + 16 * v47); ; ++i)
    {
      float32x4_t v50 = *i;
      float32x4_t v51 = vmulq_f32(v50, v50);
      float32x4_t v52 = vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1));
      v52.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), v52).f32[0]);
      if (v52.f32[0] > 0.00000011921 && v52.f32[0] >= a2) {
        break;
      }
      if (a2 > 0.00000011921)
      {
        float32x4_t v54 = (float32x4_t)a3;
        float v55 = a2 * 1.05;
        if (v52.f32[0] > 0.001)
        {
          *(float32x2_t *)v54.f32 = vdiv_f32(*(float32x2_t *)v50.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0));
          v54.f32[2] = v50.f32[2] / v52.f32[0];
          v54.i32[3] = 0;
          float v55 = a2 * 1.05;
        }
        goto LABEL_35;
      }
LABEL_26:
      if (!--v48) {
        return result;
      }
    }
    *(float32x2_t *)v54.f32 = vdiv_f32(*(float32x2_t *)v50.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0));
    v54.f32[2] = v50.f32[2] / v52.f32[0];
    v54.i32[3] = 0;
    float v55 = v52.f32[0];
LABEL_35:
    if (v55 > 0.00000011921)
    {
      float v56 = (float)((float)(v55 * a4) + a5) * a6;
      if (v56 >= a8) {
        float v56 = a8;
      }
      if (v56 < a7) {
        float v56 = a7;
      }
      float32x4_t v57 = vmulq_n_f32(v54, v56);
      v57.i32[3] = 0;
      *int i = v57;
    }
    goto LABEL_26;
  }
  unint64_t result = sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, v15, v16, v17, v19);
  uint64_t v23 = a1[6];
  uint64_t v24 = a1[7] - v23;
  if (v24)
  {
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 0);
    float32x4_t v26 = (float32x4_t)vdupq_laneq_s32(a3, 2);
    uint64_t v27 = 16 * v23;
    float32x4_t v28 = (float32x4_t *)(result + 16 * v23);
    float32x4_t v29 = (float32x4_t *)(v20 + v27);
    do
    {
      float32x4_t v32 = *v29;
      float32x4_t v33 = vmulq_f32(v32, v32);
      int32x2_t v34 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).u64[0];
      *(float *)v34.i32 = sqrtf(*(float *)v34.i32);
      if (*(float *)v34.i32 <= 0.00000011921 || *(float *)v34.i32 < a2)
      {
        if (a2 > 0.00000011921)
        {
          if (*(float *)v34.i32 <= 0.001)
          {
            float32x4_t v37 = vmulq_f32(*v28, (float32x4_t)xmmword_1B6E4F550);
            int8x16_t v38 = (int8x16_t)vnegq_f32(v37);
            int8x16_t v39 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, (int32x4_t)v38));
            float32x4_t v40 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, v38, 8uLL), *(float32x2_t *)a3.i8, 1), (float32x4_t)vextq_s8(v39, v39, 8uLL), v25);
            float32x4_t v41 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
            v41.i32[0] = v38.i32[1];
            v41.i32[3] = v38.i32[2];
            float32x4_t v42 = vmlaq_f32(v40, v41, v26);
            int8x16_t v43 = (int8x16_t)vnegq_f32(v42);
            int8x16_t v44 = (int8x16_t)vtrn2q_s32((int32x4_t)v42, vtrn1q_s32((int32x4_t)v42, (int32x4_t)v43));
            float32x4_t v45 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v42, v43, 8uLL), *(float32x2_t *)v28->f32, 1), (float32x4_t)vextq_s8(v44, v44, 8uLL), COERCE_FLOAT(*v28));
            float32x4_t v46 = (float32x4_t)vrev64q_s32((int32x4_t)v42);
            v46.i32[0] = v43.i32[1];
            v46.i32[3] = v43.i32[2];
            float32x4_t v36 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v42, *v28, 3), v46, *v28, 2), v45);
            v36.i32[3] = v22;
          }
          else
          {
            *(float32x2_t *)v36.f32 = vdiv_f32(*(float32x2_t *)v32.f32, (float32x2_t)vdup_lane_s32(v34, 0));
            v36.f32[2] = v32.f32[2] / *(float *)v34.i32;
            v36.i32[3] = 0;
          }
          *(float *)v34.i32 = a2 * 1.05;
          if ((float)(a2 * 1.05) > 0.00000011921)
          {
LABEL_4:
            float v30 = (float)((float)(*(float *)v34.i32 * a4) + a5) * a6;
            if (v30 >= a8) {
              float v30 = a8;
            }
            if (v30 < a7) {
              float v30 = a7;
            }
            float32x4_t v31 = vmulq_n_f32(v36, v30);
            v31.i32[3] = 0;
            *float32x4_t v29 = v31;
          }
        }
      }
      else
      {
        *(float32x2_t *)v36.f32 = vdiv_f32(*(float32x2_t *)v32.f32, (float32x2_t)vdup_lane_s32(v34, 0));
        v36.f32[2] = v32.f32[2] / *(float *)v34.i32;
        v36.i32[3] = 0;
        if (*(float *)v34.i32 > 0.00000011921) {
          goto LABEL_4;
        }
      }
      ++v28;
      ++v29;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t type metadata accessor for ParticleFlockingSpeedControlSystem()
{
  return self;
}

uint64_t initializeWithCopy for ParticleFlockingSolverData.Grid(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleFlockingSolverData.Grid(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for ParticleFlockingSolverData.Grid(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleFlockingSolverData.Grid(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingSolverData.Grid(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSolverData.Grid()
{
  return &type metadata for ParticleFlockingSolverData.Grid;
}

__n128 initializeWithCopy for FlockingParticle(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for WorldCounters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WorldCounters(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 104) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FlockingParticle()
{
  return &type metadata for FlockingParticle;
}

const char *sub_1B69BC900()
{
  return "ParticleFlockingSpeedControl";
}

uint64_t sub_1B69BC914()
{
  unint64_t v0 = sub_1B6E337B8();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11) {
    return 17;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B69BC968()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 7) {
    return 7;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B69BC9B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B69C3290(0, &qword_1E9DD34C8, (uint64_t (*)(void))sub_1B69C2F7C, (uint64_t)&type metadata for ParticleFlockingAlignOrientation.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v24 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v21 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C2F7C();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v6;
  char v27 = 0;
  sub_1B66C5878();
  uint64_t v11 = v24;
  sub_1B6E32DF8();
  int v12 = v25;
  LOBYTE(v25) = 1;
  sub_1B6E32DC8();
  int v14 = v13;
  char v27 = 2;
  sub_1B6E32DF8();
  int v26 = v12;
  uint64_t v23 = a1;
  int v15 = v25;
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  char v27 = 3;
  sub_1B69C2FD0((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v16);
  sub_1B6E32DF8();
  int v22 = v15;
  long long v21 = v25;
  LOBYTE(v25) = 4;
  LOBYTE(v16) = sub_1B6E32DA8();
  LOBYTE(v25) = 5;
  sub_1B6E32DC8();
  uint64_t v17 = (uint64_t)v23;
  int v19 = v18;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v11);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v17);
  *(unsigned char *)a2 = v26;
  *(_DWORD *)(a2 + 4) = v14;
  *(unsigned char *)(a2 + 8) = v22;
  *(_OWORD *)(a2 + 16) = v21;
  *(unsigned char *)(a2 + 32) = v16 & 1;
  *(_DWORD *)(a2 + 36) = v19;
  return result;
}

void *sub_1B69BCD6C(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  swift_retain_n();
  sub_1B695F80C(v2, (uint64_t)&v93);
  uint64_t v5 = v93;
  char v4 = v94;
  uint64_t v7 = v95;
  uint64_t v6 = v96;
  uint64_t v8 = v97;
  swift_release();
  sub_1B69BD454((uint64_t)&v93, (uint64_t)v106, &qword_1E9DD34A8, (uint64_t)&type metadata for ParticleFlockingAlignOrientation);
  if (v106[32] == 2)
  {
    LOBYTE(v5) = 0;
    float32x4_t v91 = (float32x4_t)xmmword_1B6E4F320;
    char v4 = 1;
    float v9 = 135.0;
    char v77 = 1;
    float v10 = 135.0;
  }
  else
  {
    float v9 = *((float *)&v5 + 1);
    v11.i64[0] = v7;
    v11.i64[1] = v6;
    float32x4_t v91 = v11;
    char v77 = v8 & 1;
    float v10 = *((float *)&v8 + 1);
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  long long v109 = *(_OWORD *)(a1 + 88);
  long long v110 = v12;
  uint64_t v111 = *(void *)(a1 + 120);
  sub_1B663E658((uint64_t)v98);
  sub_1B62F46E8();
  float v14 = v13;
  *(double *)v15.i64 = sub_1B6B353EC(v5);
  int32x4_t v80 = v15;
  float v16 = v14 * 3.1416;
  float v17 = v9 * (float)(v14 * 3.1416);
  *(double *)v18.i64 = sub_1B6B353EC(v4);
  int32x4_t v79 = v18;
  int8x16_t v19 = (int8x16_t)vabsq_f32(v91);
  if (*(float *)v19.i32 > 0.00000011921
    || (v19.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0],
        *(int32x2_t *)v19.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v19.i8),
        (v19.i8[4] & 1) == 0)
    || (__int8 v20 = v19.i8[0], v21 = 0uLL, (v20 & 1) == 0))
  {
    int32x4_t v22 = (int32x4_t)vmulq_f32(v91, v91);
    v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
    float32x2_t v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
    float32x2_t v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
    __n128 v21 = (__n128)vmulq_n_f32(v91, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  }
  float v25 = v17 / 180.0;
  int32x4_t v78 = (int32x4_t)v21;
  float v26 = 0.0;
  if (!sub_1B684B9D0(v21)) {
    float v26 = (float)(v10 * v16) / 180.0;
  }
  if ((v25 > 0.0 || v26 > 0.0)
    && (v107[0] = v98[0],
        v107[1] = v98[1],
        uint64_t v108 = v99,
        sub_1B62C9DA8(v3, (uint64_t)v107, 0x200000000, v100),
        sub_1B69BD454((uint64_t)v100, (uint64_t)v101, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult), (float v92 = (unsigned __int16 *)v101[0]) != 0))
  {
    uint64_t v76 = v105;
    if (v105 > 0)
    {
      uint64_t v75 = v102;
      if (v102)
      {
        uint64_t v74 = v101[5];
        char v27 = v104;
        uint64_t v28 = v104[4];
        char v89 = *(unsigned char *)(v103 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v72 = v104 + 8;
        uint64_t v73 = v103;
        uint64_t v90 = v101[0] + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v29 = 0;
        uint64_t v71 = v28;
        while (1)
        {
          float v30 = (unsigned int *)(v74 + 48 * v29);
          uint64_t v31 = *v30;
          uint64_t v32 = v30[1];
          uint64_t v33 = v30[2];
          uint64_t v85 = v29;
          uint64_t v86 = *((void *)v30 + 2);
          uint64_t v34 = *((void *)v30 + 3);
          uint64_t v35 = *((void *)v30 + 4);
          uint64_t v36 = *((void *)v30 + 5);
          if (v89)
          {
            float32x4_t v37 = *(os_unfair_lock_s **)(v36 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v37);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v36 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v28);
          uint64_t v83 = v27[7];
          uint64_t v84 = v27[6];
          uint64_t v81 = v27[9];
          uint64_t v82 = v27[8];
          uint64_t v87 = v27[10];
          uint64_t v38 = v27[4];
          uint64_t v39 = *(void *)(*(void *)(*(void *)(*(void *)(v36 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v27[6] = ecs_stack_allocator_allocate(v38, 48 * v39, 8);
          v27[7] = v39;
          v72[1] = 0;
          v72[2] = 0;
          *uint64_t v72 = 0;
          swift_release();
          v112[0] = v73;
          v112[1] = v36;
          uint64_t v88 = v36;
          v112[2] = v27;
          v112[3] = v33;
          v112[4] = (v32 - v31 + v33);
          v112[5] = v76;
          v112[6] = v31;
          v112[7] = v32;
          v112[8] = 0;
          v112[9] = 0;
          char v113 = 1;
          uint64_t v114 = v86;
          uint64_t v115 = v34;
          uint64_t v116 = v35;
          sub_1B69B40E4(v112, v77, v25, v80, v26, v79, v78);
          unint64_t v40 = v27[6];
          uint64_t v41 = v27[8];
          if (!v41)
          {
            uint64_t v67 = v27[7];
            int v68 = (void *)v27[4];
            uint64_t v28 = v71;
            uint64_t v69 = v85;
            goto LABEL_57;
          }
          for (uint64_t i = 0; i != v41; ++i)
          {
            int8x16_t v44 = (uint64_t *)(v40 + 48 * i);
            uint64_t v45 = *v44;
            float32x4_t v46 = (void (*)(uint64_t))v44[4];
            uint64_t v47 = v27[9];
            if (v47) {
              BOOL v48 = v45 == v47;
            }
            else {
              BOOL v48 = 0;
            }
            if (v48 || !v92[11]) {
              goto LABEL_22;
            }
            unint64_t v49 = v92[9];
            float32x4_t v50 = (void *)(v90 + v92[8]);
            uint64_t v51 = v44[2];
            float32x4_t v52 = v50;
            unint64_t v53 = v49 >> 4;
            uint64_t v54 = v90;
            if (v49 >= 0x10)
            {
              while (*v52 != v45)
              {
                ++v54;
                v52 += 2;
                if (!--v53) {
                  goto LABEL_37;
                }
              }
              unsigned int v55 = *(unsigned __int8 *)(v54 + v92[10]);
              BOOL v56 = v55 > 5;
              int v57 = (1 << v55) & 0x23;
              if (v56 || v57 == 0)
              {
LABEL_22:
                uint64_t v43 = swift_retain();
                v46(v43);
                swift_release();
                continue;
              }
            }
LABEL_37:
            if (swift_conformsToProtocol2()) {
              uint64_t v59 = v51;
            }
            else {
              uint64_t v59 = 0;
            }
            if (v59)
            {
              if (v49 < 0x10) {
                goto LABEL_22;
              }
              float v60 = v50;
              unint64_t v61 = v49 >> 4;
              uint64_t v62 = v90;
              while (*v60 != v59)
              {
                ++v62;
                v60 += 2;
                if (!--v61) {
                  goto LABEL_50;
                }
              }
              unsigned int v63 = *(unsigned __int8 *)(v62 + v92[10]);
              BOOL v56 = v63 > 5;
              int v64 = (1 << v63) & 0x23;
              if (v56 || v64 == 0) {
                goto LABEL_22;
              }
LABEL_50:
              uint64_t v66 = 16 * (v49 >> 4);
              while (*v50 != v59)
              {
                v50 += 2;
                v66 -= 16;
                if (!v66) {
                  goto LABEL_22;
                }
              }
            }
          }
          uint64_t v67 = v27[7];
          unint64_t v40 = v27[6];
          int v68 = (void *)v27[4];
          uint64_t v28 = v71;
          uint64_t v69 = v85;
          if ((uint64_t)v27[8] >= 1) {
            swift_arrayDestroy();
          }
LABEL_57:
          ecs_stack_allocator_deallocate(v68, v40, 48 * v67);
          v27[6] = v84;
          v27[7] = v83;
          v27[8] = v82;
          v27[9] = v81;
          v27[10] = v87;
          sub_1B634507C((char *)v88);
          ecs_stack_allocator_pop_snapshot(v28);
          if (v89)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v88 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v88 + 376));
          }
          swift_release();
          uint64_t v29 = v69 + 1;
          if (v29 == v75) {
            goto LABEL_61;
          }
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_61:
    sub_1B62CA064((uint64_t)v98);
    swift_release();
    sub_1B632F1C4(v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    return sub_1B632F1C4(v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  else
  {
    sub_1B62CA064((uint64_t)v98);
    return (void *)swift_release();
  }
}

uint64_t sub_1B69BD454(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  sub_1B69C29D4(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

float sub_1B69BD4D4(void *a1)
{
  sub_1B69C3290(0, &qword_1E9DD34E0, (uint64_t (*)(void))sub_1B69C3034, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  float v9 = (char *)&v13 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C3034();
  sub_1B6E33A48();
  if (!v1)
  {
    LOBYTE(v15) = 0;
    sub_1B6E32DC8();
    float v2 = v10;
    float32x4_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    char v14 = 1;
    sub_1B69C2FD0((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v11);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    long long v13 = v15;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

void *sub_1B69BD740(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v5 = *(int *)(a1 + 8);
  swift_retain_n();
  BOOL v6 = v5 == -1 && v4 == 0;
  if (v6
    || (v5 & 0x80000000) != 0
    || *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v5
    || (uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 != -1)
    && *(_DWORD *)(v7 + 12 * (int)v5 + 8) != v4)
  {
    swift_release();
LABEL_10:
    float32x4_t v97 = (float32x4_t)xmmword_1B6E4F320;
    float v8 = 0.25;
    goto LABEL_11;
  }
  sub_1B69660D8(*(void *)(*(void *)(v3 + 136) + 8 * *(int *)(v7 + 12 * (int)v5) + 32), *(_DWORD *)(v7 + 12 * (int)v5), *(_WORD *)(v7 + 12 * (int)v5 + 4), 32, v3, (uint64_t)v99);
  float v76 = *(float *)v99;
  uint64_t v78 = v99[2];
  uint64_t v77 = v99[3];
  swift_release();
  sub_1B69BD454((uint64_t)v99, (uint64_t)v110, &qword_1E9DD34B0, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane);
  if (v110[32]) {
    goto LABEL_10;
  }
  float v8 = v76;
  if (v76 <= 0.0) {
    return (void *)swift_release();
  }
  v79.i64[0] = v78;
  v79.i64[1] = v77;
  float32x4_t v97 = v79;
LABEL_11:
  long long v9 = *(_OWORD *)(a1 + 104);
  long long v115 = *(_OWORD *)(a1 + 88);
  long long v116 = v9;
  uint64_t v117 = *(void *)(a1 + 120);
  sub_1B67CF480((uint64_t)v100);
  sub_1B62F46E8();
  float v11 = v10;
  int8x16_t v12 = (int8x16_t)vabsq_f32(v97);
  if (*(float *)v12.i32 > 0.00000011921
    || (v12.i32[0] = vextq_s8(v12, v12, 8uLL).u32[0],
        *(int32x2_t *)v12.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v12.i8),
        (v12.i8[4] & 1) == 0)
    || (float32x4_t v13 = 0uLL, (v12.i8[0] & 1) == 0))
  {
    int32x4_t v14 = (int32x4_t)vmulq_f32(v97, v97);
    v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
    float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
    float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
    float32x4_t v13 = vmulq_n_f32(v97, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  }
  int8x16_t v17 = (int8x16_t)vabsq_f32(v13);
  if (*(float *)v17.i32 <= 0.00000011921)
  {
    v17.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
    *(int32x2_t *)v17.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v17.i8);
    if (v17.i8[4] & 1) != 0 && (v17.i8[0]) {
      goto LABEL_45;
    }
  }
  float32x4_t v90 = v13;
  v113[0] = v100[0];
  v113[1] = v100[1];
  uint64_t v114 = v101;
  sub_1B62C9DA8(v3, (uint64_t)v113, 0x200000000, v102);
  sub_1B69BD454((uint64_t)v102, (uint64_t)v103, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v103[0])
  {
LABEL_45:
    sub_1B62CA064((uint64_t)v100);
    return (void *)swift_release();
  }
  if (v109 > 0)
  {
    uint64_t v84 = v106;
    if (v106)
    {
      int32x4_t v18 = v108;
      uint64_t v87 = v108[4];
      char v19 = *(unsigned char *)(v107 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v111[0] = v103[0];
      v111[1] = v103[1];
      uint64_t v112 = v104;
      uint64_t v81 = (uint64_t)(v108 + 6);
      uint64_t v82 = v105;
      int32x4_t v80 = v108 + 8;
      float32x4_t v88 = vnegq_f32(v90);
      int8x16_t v89 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL);
      float v20 = v8 * v11;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v21 = 0;
      char v83 = v19;
      while (1)
      {
        uint64_t v93 = v2;
        uint64_t v86 = v21;
        int32x4_t v22 = (unsigned int *)(v82 + 48 * v21);
        uint64_t v23 = *v22;
        uint64_t v24 = v22[1];
        float v25 = (uint64_t *)*((void *)v22 + 2);
        uint64_t v26 = *((void *)v22 + 3);
        uint64_t v28 = *((void *)v22 + 4);
        uint64_t v27 = *((void *)v22 + 5);
        if (v19)
        {
          uint64_t v29 = *(os_unfair_lock_s **)(v27 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v29);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v87);
        sub_1B69BD454(v81, (uint64_t)v118, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
        uint64_t v30 = v18[4];
        uint64_t v31 = *(void *)(*(void *)(*(void *)(*(void *)(v27 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v18[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
        v18[7] = v31;
        v80[1] = 0;
        v80[2] = 0;
        *int32x4_t v80 = 0;
        swift_release();
        uint64_t v32 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v25, v26, v28, (uint64_t)v18);
        if (v23 != v24) {
          break;
        }
        uint64_t v2 = v93;
        char v19 = v83;
        float32x4_t v33 = v95;
        float32x4_t v34 = v97;
LABEL_28:
        float32x4_t v95 = v33;
        float32x4_t v97 = v34;
        sub_1B6345178(v18, (unsigned __int16 **)v111, (uint64_t)v118);
        sub_1B634507C((char *)v27);
        ecs_stack_allocator_pop_snapshot(v87);
        if (v19)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 376));
        }
        swift_release();
        uint64_t v21 = v86 + 1;
        if (v86 + 1 == v84) {
          goto LABEL_48;
        }
      }
      uint64_t v35 = v24 - v23;
      float32x4_t v36 = v95;
      float32x4_t v37 = v97;
      uint64_t v38 = (float32x4_t *)(v32 + 16 * v23);
      float32x4_t v40 = (float32x4_t)v89;
      float32x4_t v39 = v90;
      uint64_t v2 = v93;
      char v19 = v83;
      float32x4_t v41 = v88;
      while (1)
      {
        float32x4_t v42 = *v38;
        float32x4_t v43 = vmulq_f32(v42, v42);
        int32x2_t v44 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).u64[0];
        *(float *)v44.i32 = sqrtf(*(float *)v44.i32);
        if (*(float *)v44.i32 <= 0.000001) {
          goto LABEL_31;
        }
        float32x4_t v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), (int8x16_t)v42, 0xCuLL);
        int8x16_t v46 = (int8x16_t)vmlaq_f32(vmulq_f32(v45, v41), v42, v40);
        float32x4_t v47 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), v46, 0xCuLL);
        float32x4_t v48 = vmlaq_f32(vmulq_f32(v40, vnegq_f32(v47)), v39, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL));
        float32x4_t v49 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL);
        int8x16_t v50 = (int8x16_t)vabsq_f32(v49);
        if (*(float *)v50.i32 > 0.00000011921) {
          goto LABEL_37;
        }
        v50.i32[0] = vextq_s8(v50, v50, 8uLL).u32[0];
        *(int32x2_t *)v50.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v50.i8);
        if (v50.i8[4] & 1) != 0 && (v50.i8[0])
        {
LABEL_31:
          float32x4_t v34 = v37;
          float32x4_t v33 = v36;
        }
        else
        {
LABEL_37:
          int32x4_t v51 = (int32x4_t)vmulq_f32(v48, v48);
          v51.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), *(float32x2_t *)v51.i8)).u32[0];
          float32x2_t v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
          float32x2_t v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
          float32x4_t v34 = vmulq_n_f32(v49, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
          v34.i32[3] = v37.i32[3];
          float32x4_t v33 = vdivq_f32(v42, (float32x4_t)vdupq_lane_s32(v44, 0));
          v33.i32[3] = v36.i32[3];
          float32x4_t v54 = vmulq_f32(v33, v34);
          float v55 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).f32[0];
          if (v55 <= 1.0)
          {
            float32x4_t v96 = v33;
            float32x4_t v98 = v34;
            float32x4_t v94 = *v38;
            if (v55 < -1.0)
            {
              float v56 = 3.1416;
              goto LABEL_41;
            }
            float32x4_t v91 = v45;
            float32x4_t v85 = v49;
            float v56 = acosf(v55);
            float32x4_t v49 = v85;
            float32x4_t v45 = v91;
            float32x4_t v42 = v94;
            if (v56 > 0.001)
            {
LABEL_41:
              if ((float)(v20 * v56) < v56) {
                float v56 = v20 * v56;
              }
              float32x4_t v57 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v42)), v49, v45);
              float32x4_t v58 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL);
              int32x4_t v59 = (int32x4_t)vmulq_f32(v57, v57);
              v59.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v59, 2), *(float32x2_t *)v59.i8)).u32[0];
              float32x2_t v60 = vrsqrte_f32((float32x2_t)v59.u32[0]);
              float32x2_t v61 = vmul_f32(v60, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v60, v60)));
              float32x4_t v92 = vmulq_n_f32(v58, vmul_f32(v61, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v61, v61))).f32[0]);
              __float2 v62 = __sincosf_stret(v56 * 0.5);
              float32x4_t v63 = vmulq_n_f32(v92, v62.__sinval);
              float32x4_t v64 = v63;
              v64.i32[3] = LODWORD(v62.__cosval);
              float32x4_t v65 = vmulq_f32(v64, (float32x4_t)xmmword_1B6E4F550);
              int8x16_t v66 = (int8x16_t)vnegq_f32(v65);
              int8x16_t v67 = (int8x16_t)vtrn2q_s32((int32x4_t)v65, vtrn1q_s32((int32x4_t)v65, (int32x4_t)v66));
              float32x4_t v68 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v65, v66, 8uLL), *(float32x2_t *)v94.f32, 1), (float32x4_t)vextq_s8(v67, v67, 8uLL), v94.f32[0]);
              float32x4_t v69 = (float32x4_t)vrev64q_s32((int32x4_t)v65);
              v69.i32[0] = v66.i32[1];
              v69.i32[3] = v66.i32[2];
              float32x4_t v70 = vmlaq_laneq_f32(v68, v69, v94, 2);
              int8x16_t v71 = (int8x16_t)vnegq_f32(v70);
              int8x16_t v72 = (int8x16_t)vtrn2q_s32((int32x4_t)v70, vtrn1q_s32((int32x4_t)v70, (int32x4_t)v71));
              float32x4_t v73 = (float32x4_t)vrev64q_s32((int32x4_t)v70);
              v73.i32[0] = v71.i32[1];
              v73.i32[3] = v71.i32[2];
              float32x4_t v74 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v70, v64, 3), v73, v63, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v70, v71, 8uLL), *(float32x2_t *)v63.f32, 1), (float32x4_t)vextq_s8(v72, v72, 8uLL), v63.f32[0]));
              v74.i32[3] = 0;
              *uint64_t v38 = v74;
            }
            float32x4_t v40 = (float32x4_t)v89;
            float32x4_t v39 = v90;
            float32x4_t v41 = v88;
            float32x4_t v33 = v96;
            float32x4_t v34 = v98;
          }
        }
        ++v38;
        float32x4_t v37 = v34;
        float32x4_t v36 = v33;
        if (!--v35) {
          goto LABEL_28;
        }
      }
    }
  }
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_48:
  sub_1B62CA064((uint64_t)v100);
  swift_release();
  sub_1B632F1C4(v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  return sub_1B632F1C4(v102, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
}

void *sub_1B69BDED8(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  swift_retain_n();
  sub_1B695F8E8(v2, (uint64_t)v116);
  float v4 = *(float *)v116;
  uint64_t v6 = v116[2];
  uint64_t v5 = v116[3];
  uint64_t v8 = v116[4];
  uint64_t v7 = v116[5];
  uint64_t v88 = v3;
  swift_release();
  sub_1B69BD454((uint64_t)v116, (uint64_t)v127, &qword_1E9DD34B8, (uint64_t)&type metadata for ParticleFlockingConstrainToArea);
  if (v127[48] == 2)
  {
    long long v108 = xmmword_1B6E9A970;
    long long v114 = xmmword_1B6E9A960;
    float v9 = 2.0;
  }
  else
  {
    float v9 = v4;
    *(void *)&long long v10 = v6;
    *((void *)&v10 + 1) = v5;
    long long v114 = v10;
    *(void *)&long long v10 = v8;
    *((void *)&v10 + 1) = v7;
    long long v108 = v10;
  }
  sub_1B62E9D50(v2, (uint64_t)v117);
  uint64_t v12 = v117[0];
  uint64_t v11 = v117[1];
  uint64_t v14 = v117[2];
  uint64_t v13 = v117[3];
  uint64_t v16 = v117[4];
  uint64_t v15 = v117[5];
  uint64_t v18 = v117[6];
  uint64_t v17 = v117[7];
  sub_1B69BD454((uint64_t)v117, (uint64_t)v126, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
  if (v126[64])
  {
    float32x4_t v111 = (float32x4_t)xmmword_1B6E4F370;
    float32x4_t v102 = (float32x4_t)xmmword_1B6E4F2E0;
    float32x4_t v104 = (float32x4_t)xmmword_1B6E4F320;
    float32x4_t v106 = (float32x4_t)xmmword_1B6E4F300;
  }
  else
  {
    v19.i64[0] = v12;
    v19.i64[1] = v11;
    float32x4_t v106 = v19;
    v19.i64[0] = v14;
    v19.i64[1] = v13;
    float32x4_t v104 = v19;
    v19.i64[0] = v16;
    v19.i64[1] = v15;
    float32x4_t v102 = v19;
    v19.i64[0] = v18;
    v19.i64[1] = v17;
    float32x4_t v111 = v19;
  }
  long long v20 = *(_OWORD *)(a1 + 104);
  long long v130 = *(_OWORD *)(a1 + 88);
  long long v131 = v20;
  uint64_t v132 = *(void *)(a1 + 120);
  sub_1B663C898((uint64_t)v118);
  sub_1B62F46E8();
  float v22 = v21;
  float32x4_t v23 = (float32x4_t)v114;
  v23.i32[3] = 0;
  float32x4_t v24 = (float32x4_t)v108;
  v24.i32[3] = 0;
  float32x4_t v25 = vminnmq_f32(v23, v24);
  float32x4_t v26 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v111, v102, v25, 2), v104, *(float32x2_t *)v25.f32, 1), v106, v25.f32[0]);
  float32x4_t v27 = vmaxnmq_f32(v23, v24);
  float32x4_t v28 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v111, v102, v27, 2), v104, *(float32x2_t *)v27.f32, 1), v106, v27.f32[0]);
  float32x4_t v29 = vsubq_f32(v28, v26);
  float v30 = v29.f32[1];
  if (v29.f32[0] <= v29.f32[1])
  {
    float v30 = v29.f32[0];
  }
  else
  {
    if ((v29.i32[1] & 0x7FFFFF) != 0) {
      float v31 = v29.f32[0];
    }
    else {
      float v31 = v29.f32[1];
    }
    if ((~v29.i32[1] & 0x7F800000) == 0) {
      float v30 = v31;
    }
  }
  if (v30 > v29.f32[2])
  {
    if ((v29.i32[2] & 0x7FFFFF) == 0) {
      float v30 = v29.f32[2];
    }
    if ((~v29.i32[2] & 0x7F800000) != 0) {
      float v30 = v29.f32[2];
    }
  }
  float v32 = v30 * 0.25;
  if (v32 >= v9) {
    float v33 = v9;
  }
  else {
    float v33 = v32;
  }
  uint64_t v34 = 0;
  float v35 = 1.0;
  if (v33 >= 0.0)
  {
    uint64_t v34 = LODWORD(v33) | 0x3400000000000000;
    if (v33 > 0.00000011921) {
      float v35 = 1.0 / v33;
    }
  }
  v26.i32[3] = 1.0;
  v28.i32[3] = 1.0;
  v36.i64[0] = 0x3F0000003F000000;
  v36.i64[1] = 0x3F0000003F000000;
  *(float *)&uint64_t v34 = -*(float *)&v34;
  float32x4_t v37 = (float32x4_t)vdupq_lane_s32((int32x2_t)v34, 0);
  v37.i32[3] = 0;
  float32x4_t v38 = vaddq_f32(vmulq_f32(vsubq_f32(v28, v26), v36), v37);
  if (v38.f32[0] <= v38.f32[1])
  {
    float v40 = v38.f32[0];
  }
  else
  {
    if ((v38.i32[1] & 0x7FFFFF) != 0) {
      float v39 = v38.f32[0];
    }
    else {
      float v39 = v38.f32[1];
    }
    if ((~v38.i32[1] & 0x7F800000) != 0) {
      float v40 = v38.f32[1];
    }
    else {
      float v40 = v39;
    }
  }
  if (v40 > v38.f32[2])
  {
    if ((v38.i32[2] & 0x7FFFFF) != 0) {
      float v41 = v40;
    }
    else {
      float v41 = v38.f32[2];
    }
    if ((~v38.i32[2] & 0x7F800000) != 0) {
      float v40 = v38.f32[2];
    }
    else {
      float v40 = v41;
    }
  }
  if (v40 < 0.001) {
    goto LABEL_89;
  }
  float32x4_t v109 = v26;
  float32x4_t v112 = v28;
  float32x4_t v96 = v38;
  v128[0] = v118[0];
  v128[1] = v118[1];
  uint64_t v129 = v119;
  sub_1B62C9DA8(v88, (uint64_t)v128, 0x200000000, v120);
  sub_1B69BD454((uint64_t)v120, (uint64_t)v121, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  long long v115 = (unsigned __int16 *)v121[0];
  if (!v121[0])
  {
LABEL_89:
    sub_1B62CA064((uint64_t)v118);
    return (void *)swift_release();
  }
  uint64_t v95 = v125;
  if (v125 <= 0 || (uint64_t v94 = v122) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B62CA064((uint64_t)v118);
    goto LABEL_92;
  }
  v42.i64[0] = 0x3F0000003F000000;
  v42.i64[1] = 0x3F0000003F000000;
  float32x4_t v93 = vmulq_f32(vaddq_f32(v109, v112), v42);
  uint64_t v92 = v121[5];
  float32x4_t v43 = v124;
  uint64_t v44 = v124[4];
  char v110 = *(unsigned char *)(v123 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  float32x4_t v90 = v124 + 8;
  uint64_t v91 = v123;
  uint64_t v113 = v121[0] + 41;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v45 = 0;
  uint64_t v89 = v44;
  while (2)
  {
    int8x16_t v46 = (unsigned int *)(v92 + 48 * v45);
    uint64_t v47 = *v46;
    uint64_t v48 = v46[1];
    uint64_t v49 = v46[2];
    uint64_t v101 = v45;
    uint64_t v103 = *((void *)v46 + 2);
    uint64_t v50 = *((void *)v46 + 3);
    uint64_t v51 = *((void *)v46 + 4);
    uint64_t v52 = *((void *)v46 + 5);
    if (v110)
    {
      float32x2_t v53 = *(os_unfair_lock_s **)(v52 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v53);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v52 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v44);
    uint64_t v98 = v43[7];
    uint64_t v99 = v43[6];
    uint64_t v97 = v43[8];
    uint64_t v100 = v43[9];
    uint64_t v105 = v43[10];
    uint64_t v54 = v43[4];
    uint64_t v55 = *(void *)(*(void *)(*(void *)(*(void *)(v52 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v43[6] = ecs_stack_allocator_allocate(v54, 48 * v55, 8);
    _OWORD v43[7] = v55;
    v90[1] = 0;
    v90[2] = 0;
    *float32x4_t v90 = 0;
    swift_release();
    v133[0] = v91;
    v133[1] = v52;
    uint64_t v107 = v52;
    v133[2] = v43;
    v133[3] = v49;
    v133[4] = (v48 - v47 + v49);
    v133[5] = v95;
    v133[6] = v47;
    v133[7] = v48;
    v133[8] = 0;
    v133[9] = 0;
    char v134 = 1;
    uint64_t v135 = v103;
    uint64_t v136 = v50;
    uint64_t v137 = v51;
    sub_1B69B54A0(v133, v93, v96, v35, v93, v40 * v40, v40, v22, 1.5708);
    unint64_t v56 = v43[6];
    uint64_t v57 = v43[8];
    if (!v57)
    {
      uint64_t v83 = v43[7];
      uint64_t v84 = (void *)v43[4];
      uint64_t v44 = v89;
      uint64_t v86 = v100;
      uint64_t v85 = v101;
      goto LABEL_87;
    }
    for (uint64_t i = 0; i != v57; ++i)
    {
      float32x2_t v60 = (uint64_t *)(v56 + 48 * i);
      uint64_t v61 = *v60;
      __float2 v62 = (void (*)(uint64_t))v60[4];
      uint64_t v63 = v43[9];
      if (v63) {
        BOOL v64 = v61 == v63;
      }
      else {
        BOOL v64 = 0;
      }
      if (v64 || !v115[11]) {
        goto LABEL_52;
      }
      unint64_t v65 = v115[9];
      int8x16_t v66 = (void *)(v113 + v115[8]);
      uint64_t v67 = v60[2];
      float32x4_t v68 = v66;
      unint64_t v69 = v65 >> 4;
      uint64_t v70 = v113;
      if (v65 >= 0x10)
      {
        while (*v68 != v61)
        {
          ++v70;
          v68 += 2;
          if (!--v69) {
            goto LABEL_67;
          }
        }
        unsigned int v71 = *(unsigned __int8 *)(v70 + v115[10]);
        BOOL v72 = v71 > 5;
        int v73 = (1 << v71) & 0x23;
        if (v72 || v73 == 0)
        {
LABEL_52:
          uint64_t v59 = swift_retain();
          v62(v59);
          swift_release();
          continue;
        }
      }
LABEL_67:
      if (swift_conformsToProtocol2()) {
        uint64_t v75 = v67;
      }
      else {
        uint64_t v75 = 0;
      }
      if (v75)
      {
        if (v65 < 0x10) {
          goto LABEL_52;
        }
        float v76 = v66;
        unint64_t v77 = v65 >> 4;
        uint64_t v78 = v113;
        while (*v76 != v75)
        {
          ++v78;
          v76 += 2;
          if (!--v77) {
            goto LABEL_80;
          }
        }
        unsigned int v79 = *(unsigned __int8 *)(v78 + v115[10]);
        BOOL v72 = v79 > 5;
        int v80 = (1 << v79) & 0x23;
        if (v72 || v80 == 0) {
          goto LABEL_52;
        }
LABEL_80:
        uint64_t v82 = 16 * (v65 >> 4);
        while (*v66 != v75)
        {
          v66 += 2;
          v82 -= 16;
          if (!v82) {
            goto LABEL_52;
          }
        }
      }
    }
    uint64_t v83 = v43[7];
    unint64_t v56 = v43[6];
    uint64_t v84 = (void *)v43[4];
    uint64_t v44 = v89;
    uint64_t v86 = v100;
    uint64_t v85 = v101;
    if ((uint64_t)v43[8] >= 1) {
      swift_arrayDestroy();
    }
LABEL_87:
    ecs_stack_allocator_deallocate(v84, v56, 48 * v83);
    v43[6] = v99;
    _OWORD v43[7] = v98;
    v43[8] = v97;
    v43[9] = v86;
    v43[10] = v105;
    sub_1B634507C((char *)v107);
    ecs_stack_allocator_pop_snapshot(v44);
    if (v110)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v107 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v107 + 376));
    }
    swift_release();
    uint64_t v45 = v85 + 1;
    if (v45 != v94) {
      continue;
    }
    break;
  }
  sub_1B62CA064((uint64_t)v118);
LABEL_92:
  swift_release();
  sub_1B632F1C4(v120, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  return sub_1B632F1C4(v120, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
}

float sub_1B69BE710(void *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, void (*a5)(void))
{
  sub_1B69C3290(0, a2, a3, a4, MEMORY[0x1E4FBBDC0]);
  uint64_t v20 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)v19 - v12;
  sub_1B62C14BC(a1, a1[3]);
  a5();
  sub_1B6E33A48();
  if (!v5)
  {
    uint64_t v14 = v10;
    LOBYTE(v22) = 0;
    uint64_t v15 = v20;
    sub_1B6E32DC8();
    float v6 = v16;
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    char v21 = 1;
    sub_1B69C2FD0((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v17);
    sub_1B6E32DF8();
    v19[1] = v22;
    char v21 = 2;
    sub_1B6E32DF8();
    v19[0] = v22;
    LOBYTE(v22) = 3;
    sub_1B6E32DA8();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v15);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v6;
}

void *sub_1B69BE9D4(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  swift_retain_n();
  sub_1B695F900(v2, (uint64_t)v177);
  float v4 = *(float *)v177;
  uint64_t v6 = v177[2];
  uint64_t v5 = v177[3];
  uint64_t v8 = v177[4];
  uint64_t v7 = v177[5];
  char v9 = v178;
  swift_release();
  sub_1B69BD454((uint64_t)v177, (uint64_t)v189, &qword_1E9DD34C0, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane);
  float32x4_t v10 = (float32x4_t)xmmword_1B6E4F320;
  if (v189[48] == 2)
  {
    int v11 = 1;
    float32x4_t v12 = 0uLL;
    float v13 = 7.0;
    float32x4_t v14 = (float32x4_t)xmmword_1B6E4F320;
  }
  else
  {
    float v13 = v4;
    v12.i64[0] = v6;
    v12.i64[1] = v5;
    v14.i64[0] = v8;
    v14.i64[1] = v7;
    int v11 = v9 & 1;
  }
  int8x16_t v15 = (int8x16_t)vabsq_f32(v14);
  uint64_t v16 = v3;
  if (*(float *)v15.i32 > 0.00000011921
    || (v15.i32[0] = vextq_s8(v15, v15, 8uLL).u32[0],
        *(int32x2_t *)v15.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v15.i8),
        (v15.i8[4] & 1) == 0)
    || (v15.i8[0] & 1) == 0)
  {
    int32x4_t v17 = (int32x4_t)vmulq_f32(v14, v14);
    v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
    float32x2_t v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
    float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
    float32x4_t v10 = vmulq_n_f32(v14, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
  }
  float32x4_t v151 = v10;
  float32x4_t v162 = v12;
  if (v11)
  {
    uint64_t v20 = sub_1B6C184A0();
    if (v20)
    {
      uint64_t v23 = v20;
      uint64_t v24 = v21;
      float32x4_t v25 = vmulq_f32(v151, v151);
      v25.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u64[0];
      float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
      v26.i32[3] = 0;
      float32x4_t v27 = vrsqrteq_f32(v26);
      float32x4_t v28 = vmulq_f32(v27, vrsqrtsq_f32(v26, vmulq_f32(v27, v27)));
      float32x4_t v29 = vmulq_f32(v28, v28);
      int8x16_t v30 = (int8x16_t)vmulq_f32(v28, vrsqrtsq_f32(v26, v29));
      int32x4_t v31 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v25.f32[0] != 0.0)), 0x1FuLL));
      v31.i32[3] = 0;
      __asm { FMOV            V2.4S, #1.0 }
      float32x4_t v35 = vmulq_f32(v151, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v31), v30, _Q2));
      v29.i32[0] = v35.i32[2];
      v22.i32[0] = 1.0;
      v38.i64[0] = 0x8000000080000000;
      v38.i64[1] = 0x8000000080000000;
      float v36 = *(float *)vbslq_s8(v38, v22, (int8x16_t)v29).i32;
      *(float *)v38.i32 = v35.f32[1] / (float)(fabsf(v35.f32[2]) + 1.0);
      float v37 = vmuls_lane_f32(*(float *)v38.i32, *(float32x2_t *)v35.f32, 1);
      *(float *)v38.i32 = -(float)(v35.f32[0] * *(float *)v38.i32);
      float v39 = v35.f32[2] + (float)(v36 * v37);
      *(float *)_Q2.i32 = v36 * *(float *)v38.i32;
      float v41 = 1.0 - v37;
      float v42 = vmuls_lane_f32(-v36, *(float32x2_t *)v35.f32, 1);
      float v43 = v35.f32[2] + (float)(v39 + v41);
      if (v43 <= 0.0)
      {
        if (v39 < v41 || v39 < v35.f32[2])
        {
          __n128 v50 = (__n128)v162;
          if (v41 <= v35.f32[2])
          {
            float v57 = sqrtf((float)((float)(v35.f32[2] + 1.0) - v39) - v41);
            v35.i32[0] = vsubq_f32(v35, v35).u32[0];
            v48.f32[1] = v35.f32[1] + v42;
            v48.f32[2] = v57 * v57;
            v48.f32[3] = *(float *)_Q2.i32 - *(float *)v38.i32;
            *(float *)v38.i32 = 0.5 / v57;
            float32x4_t v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 0);
          }
          else
          {
            float v52 = sqrtf((float)((float)(v41 + 1.0) - v39) - v35.f32[2]);
            v49.f32[0] = *(float *)v38.i32 + *(float *)_Q2.i32;
            float32x2_t v53 = (float32x2_t)vrev64_s32(*(int32x2_t *)v35.f32);
            int32x2_t v54 = (int32x2_t)vadd_f32(v53, (float32x2_t)__PAIR64__(v53.u32[1], LODWORD(v42)));
            v49.f32[1] = v52 * v52;
            *(int32x2_t *)&v49.u32[2] = v54;
            *(float *)v54.i32 = 0.5 / v52;
            float32x4_t v48 = (float32x4_t)vdupq_lane_s32(v54, 0);
          }
        }
        else
        {
          float v55 = sqrtf((float)((float)(v39 + 1.0) - v41) - v35.f32[2]);
          v49.f32[0] = v55 * v55;
          int32x2_t v56 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v42), v35.u32[0]), *(float32x2_t *)v35.f32);
          v49.f32[1] = *(float *)v38.i32 + *(float *)_Q2.i32;
          *(int32x2_t *)&v49.u32[2] = v56;
          *(float *)v56.i32 = 0.5 / v55;
          float32x4_t v48 = (float32x4_t)vdupq_lane_s32(v56, 0);
          __n128 v50 = (__n128)v162;
        }
      }
      else
      {
        float32x2_t v44 = (float32x2_t)vrev64_s32(*(int32x2_t *)v35.f32);
        *(int32x2_t *)v48.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), 0);
        v48.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v44.u32[1], LODWORD(v42)), v44).u32[0];
        float32x2_t v45 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v43 + 1.0)), _Q2.u32[0]);
        float32x2_t v46 = vmul_f32(v45, v45);
        v45.i32[0] = v38.i32[0];
        v47.i32[0] = vsub_f32(*(float32x2_t *)_Q2.i8, v45).u32[0];
        v47.i32[1] = v46.i32[1];
        *(int32x2_t *)&v48.u32[2] = v47;
        *(float *)v47.i32 = 0.5 / v45.f32[1];
        float32x4_t v49 = (float32x4_t)vdupq_lane_s32(v47, 0);
        __n128 v50 = (__n128)v162;
      }
      float32x4_t v58 = vmulq_f32(v48, v49);
      v50.n128_u32[3] = 1.0;
      __n128 v59 = v50;
      float32x4_t v163 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)xmmword_1B6E862B0, *(float32x2_t *)v58.f32, 1), (float32x4_t)xmmword_1B6E862C0, v58.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B6E862D0, v58, 3), (float32x4_t)xmmword_1B6E862E0, v58, 2));
      float32x4_t v60 = vmulq_f32(v163, v163);
      float32x4_t v61 = vmulq_laneq_f32(v163, v163, 3);
      float v62 = vmulq_lane_f32(v163, *(float32x2_t *)v163.f32, 1).f32[0];
      float32x2_t v63 = vmul_laneq_f32(*(float32x2_t *)v163.f32, v163, 2);
      v64.i32[3] = 0;
      v64.f32[0] = (float)(0.5 - v60.f32[1]) - v60.f32[2];
      v64.f32[1] = v62 + v61.f32[2];
      v64.f32[2] = v63.f32[0] - v61.f32[1];
      v65.i32[3] = 0;
      v65.f32[0] = v62 - v61.f32[2];
      v65.f32[1] = (float)(0.5 - v60.f32[0]) - v60.f32[2];
      v65.f32[2] = v63.f32[1] + v61.f32[0];
      __n128 v174 = (__n128)vaddq_f32(v65, v65);
      float32x2_t v66 = (float32x2_t)vrev64_s32(*(int32x2_t *)v61.f32);
      v67.i32[0] = vadd_f32(v63, v66).u32[0];
      v67.i32[1] = vsub_f32(v63, v66).i32[1];
      v67.f32[2] = (float)(0.5 - v60.f32[0]) - v60.f32[1];
      v67.i32[3] = 0;
      __n128 v168 = (__n128)vaddq_f32(v64, v64);
      __n128 v171 = (__n128)vaddq_f32(v67, v67);
      __n128 v159 = v59;
      __n128 v185 = v59;
      memset(v198, 0, sizeof(v198));
      char v199 = 12;
      LOBYTE(v200[0]) = 1;
      sub_1B6D7DFAC(v21, 0x100000000uLL, v20, v198, v168, v174, v171, v59);
      int v68 = sub_1B67487EC((float32x4_t)xmmword_1B6E9A9C0);
      v200[0] = xmmword_1B6E8B620;
      memset(&v200[1], 0, 80);
      char v201 = 3;
      LOBYTE(v181[0]) = 1;
      sub_1B6D7E238(v24, 0x100000000uLL, v23, v200, v68, v168, v174, v171, v159);
      float32x4_t v69 = vmulq_f32((float32x4_t)v168, (float32x4_t)v168);
      LODWORD(v70) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).u32[0];
      v69.f32[0] = sqrtf(v70);
      float32x4_t v71 = vmulq_f32((float32x4_t)v171, (float32x4_t)v171);
      v71.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).u32[0];
      float32x2_t v72 = vrsqrte_f32((float32x2_t)LODWORD(v70));
      float32x2_t v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)LODWORD(v70), vmul_f32(v72, v72)));
      float32x4_t v74 = vmulq_n_f32((float32x4_t)v168, vmul_f32(v73, vrsqrts_f32((float32x2_t)LODWORD(v70), vmul_f32(v73, v73))).f32[0]);
      v74.i32[3] = v168.n128_i32[3];
      int32x4_t v75 = (int32x4_t)vmulq_f32((float32x4_t)v174, (float32x4_t)v174);
      v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
      float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
      float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
      float32x4_t v78 = vmulq_n_f32((float32x4_t)v174, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
      v78.i32[3] = v174.n128_i32[3];
      __n128 v182 = (__n128)v74;
      __n128 v183 = (__n128)v78;
      *(float32x2_t *)v74.f32 = vrsqrte_f32((float32x2_t)v71.u32[0]);
      *(float32x2_t *)v74.f32 = vmul_f32(*(float32x2_t *)v74.f32, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32)));
      float32x4_t v79 = vmulq_n_f32((float32x4_t)v171, vmul_f32(*(float32x2_t *)v74.f32, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32))).f32[0]);
      v79.i32[3] = v171.n128_i32[3];
      v69.i32[1] = 1036831949;
      __n128 v184 = (__n128)v79;
      v69.i64[1] = COERCE_UNSIGNED_INT(sqrtf(v71.f32[0]));
      sub_1B688ABDC(vmaxnmq_f32(v69, (float32x4_t)xmmword_1B6E4FCD0));
      float32x4_t v81 = vmulq_f32(v163, (float32x4_t)xmmword_1B6E4F550);
      int8x16_t v82 = (int8x16_t)vnegq_f32(v81);
      int8x16_t v83 = (int8x16_t)vtrn2q_s32((int32x4_t)v81, vtrn1q_s32((int32x4_t)v81, (int32x4_t)v82));
      float32x4_t v84 = (float32x4_t)vextq_s8(v83, v83, 8uLL);
      float32x4_t v85 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v81, v82, 8uLL), (float32x4_t)0);
      __asm { FMOV            V4.4S, #5.0 }
      float32x4_t v87 = (float32x4_t)vrev64q_s32((int32x4_t)v81);
      v87.i32[0] = v82.i32[1];
      v87.i32[3] = v82.i32[2];
      float32x4_t v88 = vmlaq_f32(vmlaq_f32(v85, _Q4, v84), (float32x4_t)0, v87);
      v89.i32[3] = 0;
      int8x16_t v90 = (int8x16_t)vnegq_f32(v88);
      int8x16_t v91 = (int8x16_t)vtrn2q_s32((int32x4_t)v88, vtrn1q_s32((int32x4_t)v88, (int32x4_t)v90));
      float32x4_t v92 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v88, v90, 8uLL), *(float32x2_t *)v163.f32, 1), (float32x4_t)vextq_s8(v91, v91, 8uLL), v163.f32[0]);
      float32x4_t v93 = (float32x4_t)vrev64q_s32((int32x4_t)v88);
      v93.i32[0] = v90.i32[1];
      v93.i32[3] = v90.i32[2];
      float32x4_t v94 = vmlaq_laneq_f32(vmulq_laneq_f32(v88, v163, 3), v93, v163, 2);
      __int32 v95 = v163.i32[3];
      float32x4_t v96 = vaddq_f32(v94, v92);
      float32x4_t v97 = vmlaq_f32(vmlaq_f32(v85, (float32x4_t)0, v84), _Q4, v87);
      int8x16_t v98 = (int8x16_t)vnegq_f32(v97);
      int8x16_t v99 = (int8x16_t)vtrn2q_s32((int32x4_t)v97, vtrn1q_s32((int32x4_t)v97, (int32x4_t)v98));
      float32x4_t v100 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v97, v98, 8uLL), *(float32x2_t *)v163.f32, 1), (float32x4_t)vextq_s8(v99, v99, 8uLL), v163.f32[0]);
      float32x4_t v101 = (float32x4_t)vrev64q_s32((int32x4_t)v97);
      v101.i32[0] = v98.i32[1];
      v101.i32[3] = v98.i32[2];
      float32x4_t v102 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v97, v163, 3), v101, v163, 2), v100);
      __n128 v103 = v182;
      __n128 v104 = v183;
      __n128 v105 = v184;
      unsigned __int32 v106 = v185.n128_u32[3];
      uint64_t v107 = -5;
      __n128 v157 = v182;
      float32x4_t v160 = v96;
      __n128 v155 = v183;
      float32x4_t v152 = v102;
      __n128 v153 = v184;
      do
      {
        __int32 v108 = v89.i32[3];
        float32x4_t v89 = vmulq_n_f32(v152, (float)v107);
        v89.i32[3] = v108;
        uint64_t v109 = -5;
        __int32 v110 = v95;
        __int32 v111 = v92.i32[3];
        int v112 = v80;
        float32x4_t v164 = v89;
        do
        {
          __int32 v173 = v110;
          __int32 v176 = v111;
          __n128 v113 = (__n128)vaddq_f32(v89, vaddq_f32(v162, vmulq_n_f32(v96, (float)v109)));
          v113.n128_u32[3] = v106;
          unsigned __int32 v167 = v106;
          int v170 = v112;
          LOBYTE(v181[0]) = 1;
          sub_1B6D7DFAC(v24, 0x100000000uLL, v23, v198, v103, v104, v105, v113);
          int v112 = v170;
          __int32 v110 = v173;
          __int32 v111 = v176;
          float32x4_t v89 = v164;
          unsigned __int32 v106 = v167;
          __n128 v105 = v153;
          __n128 v104 = v155;
          __n128 v103 = v157;
          float32x4_t v96 = v160;
          ++v109;
        }
        while (v109 != 6);
        int v80 = v170;
        v92.i32[3] = v176;
        __int32 v95 = v173;
      }
      while (v107++ != 5);
      sub_1B69BF5C4(v23);
    }
    uint64_t v16 = v3;
  }
  long long v114 = *(_OWORD *)(a1 + 104);
  long long v194 = *(_OWORD *)(a1 + 88);
  long long v195 = v114;
  uint64_t v196 = *(void *)(a1 + 120);
  sub_1B67CE420((uint64_t)v179);
  sub_1B62F46E8();
  float v116 = fminf(v13 * v115, 1.0);
  if (v116 < 0.0) {
    float v116 = 0.0;
  }
  float v166 = v116;
  if (v116 > 0.0
    && (v192[0] = v179[0],
        v192[1] = v179[1],
        uint64_t v193 = v180,
        sub_1B62C9DA8(v16, (uint64_t)v192, 0x200000000, v181),
        sub_1B69BD454((uint64_t)v181, (uint64_t)&v182, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult), v182.n128_u64[0]))
  {
    if (v188 > 0 && (unint64_t v165 = v185.n128_u64[1]) != 0)
    {
      uint64_t v117 = v187;
      uint64_t v175 = v187[4];
      char v118 = *(unsigned char *)(v186 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v190[0] = v182;
      v190[1] = v183;
      unint64_t v161 = v184.n128_u64[1];
      unint64_t v191 = v184.n128_u64[0];
      uint64_t v158 = (uint64_t)(v187 + 6);
      float32x4_t v156 = v187 + 8;
      float32x4_t v146 = vmulq_n_f32(v151, v166);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v119 = 0;
      char v154 = v118;
      do
      {
        float32x4_t v120 = (unsigned int *)(v161 + 48 * v119);
        uint64_t v121 = *v120;
        uint64_t v123 = (uint64_t *)*((void *)v120 + 2);
        uint64_t v122 = *((void *)v120 + 3);
        uint64_t v124 = *((void *)v120 + 5);
        uint64_t v169 = v120[1];
        uint64_t v172 = *((void *)v120 + 4);
        if (v118)
        {
          uint64_t v125 = *(os_unfair_lock_s **)(v124 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v125);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v124 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v175);
        sub_1B69BD454(v158, (uint64_t)v197, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
        uint64_t v126 = v117[4];
        uint64_t v127 = *(void *)(*(void *)(*(void *)(*(void *)(v124 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v117[6] = ecs_stack_allocator_allocate(v126, 48 * v127, 8);
        v117[7] = v127;
        v156[1] = 0;
        v156[2] = 0;
        *float32x4_t v156 = 0;
        swift_release();
        uint64_t v128 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v123, v122, v172, (uint64_t)v117);
        if (v166 == 1.0)
        {
          if (v121 != v169)
          {
            uint64_t v129 = v169 - v121;
            long long v130 = (float32x4_t *)(v128 + 16 * v121);
            v131.i32[3] = v150;
            v132.i32[3] = v149;
            do
            {
              __int32 v133 = v131.i32[3];
              __int32 v134 = v132.i32[3];
              float32x4_t v131 = vsubq_f32(*v130, v162);
              v131.i32[3] = v133;
              float32x4_t v135 = vmulq_f32(v151, v131);
              float32x4_t v132 = vsubq_f32(*v130, vmulq_n_f32(v151, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0]));
              v132.i32[3] = v134;
              float32x4_t v136 = v132;
              v136.i32[3] = 1.0;
              *v130++ = v136;
              --v129;
            }
            while (v129);
            __int32 v149 = v134;
            __int32 v150 = v133;
          }
        }
        else if (v121 != v169)
        {
          uint64_t v137 = v169 - v121;
          float v138 = (float32x4_t *)(v128 + 16 * v121);
          v139.i32[3] = v148;
          v140.i32[3] = v147;
          do
          {
            __int32 v141 = v139.i32[3];
            __int32 v142 = v140.i32[3];
            float32x4_t v139 = vsubq_f32(*v138, v162);
            v139.i32[3] = v141;
            float32x4_t v143 = vmulq_f32(v151, v139);
            float32x4_t v140 = vsubq_f32(*v138, vmulq_n_f32(v146, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2), vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1))).f32[0]));
            v140.i32[3] = v142;
            float32x4_t v144 = v140;
            v144.i32[3] = 1.0;
            *v138++ = v144;
            --v137;
          }
          while (v137);
          __int32 v147 = v142;
          __int32 v148 = v141;
        }
        char v118 = v154;
        sub_1B6345178(v117, (unsigned __int16 **)v190, (uint64_t)v197);
        sub_1B634507C((char *)v124);
        ecs_stack_allocator_pop_snapshot(v175);
        if (v154)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v124 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v124 + 376));
        }
        swift_release();
        ++v119;
      }
      while (v119 != v165);
      sub_1B62CA064((uint64_t)v179);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1B62CA064((uint64_t)v179);
    }
    swift_release();
    sub_1B632F1C4(v181, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    return sub_1B632F1C4(v181, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  else
  {
    sub_1B62CA064((uint64_t)v179);
    return (void *)swift_release();
  }
}

uint64_t sub_1B69BF5C4(uint64_t result)
{
  if (result) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B69BF5D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  sub_1B69C3290(0, &qword_1E9DD3528, (uint64_t (*)(void))sub_1B69C3130, (uint64_t)&type metadata for ParticleFlockingFlyTowardsArea.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  char v9 = (char *)&v25 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C3130();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v26;
  char v33 = 0;
  sub_1B6E32DC8();
  int v12 = v11;
  char v32 = 1;
  sub_1B6E32DC8();
  int v14 = v13;
  char v31 = 2;
  sub_1B6E32DC8();
  int v16 = v15;
  char v30 = 3;
  sub_1B6E32DC8();
  int v18 = v17;
  char v29 = 4;
  sub_1B6E32DC8();
  int v20 = v19;
  char v28 = 5;
  sub_1B6E32DC8();
  int v22 = v21;
  char v27 = 6;
  char v23 = sub_1B6E32DA8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)uint64_t v10 = v12;
  *(_DWORD *)(v10 + 4) = v14;
  *(_DWORD *)(v10 + 8) = v16;
  *(_DWORD *)(v10 + 12) = v18;
  *(_DWORD *)(v10 + 16) = v20;
  *(_DWORD *)(v10 + 20) = v22;
  *(unsigned char *)(v10 + 24) = v23 & 1;
  return result;
}

void *sub_1B69BF8A8(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  swift_retain();
  uint64_t v3 = *(void **)(a1 + 8);
  swift_retain();
  sub_1B695FA08((uint64_t)v3, &v127);
  swift_release();
  if (v129 == 2)
  {
    float32x2_t v110 = (float32x2_t)0x4387000042F00000;
    int v4 = 1;
    float v5 = 5.0;
    float v6 = 1.0;
    float v7 = 180.0;
    float v8 = 60.0;
  }
  else
  {
    float v5 = v127.n128_f32[1];
    float v6 = v127.n128_f32[0];
    float v8 = v127.n128_f32[2];
    float32x2_t v110 = (float32x2_t)__PAIR64__(v127.n128_u32[3], v128);
    int v4 = v129 & 1;
    float v7 = *((float *)&v128 + 1);
  }
  uint64_t v108 = v2;
  sub_1B62E9D50(v3, (uint64_t)v112);
  uint64_t v10 = v112[0];
  uint64_t v9 = v112[1];
  uint64_t v12 = v112[2];
  uint64_t v11 = v112[3];
  uint64_t v14 = v112[4];
  uint64_t v13 = v112[5];
  unint64_t v16 = v112[6];
  unint64_t v15 = v112[7];
  sub_1B69BD454((uint64_t)v112, (uint64_t)v121, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
  if (v121[64])
  {
    __n128 v104 = (__n128)xmmword_1B6E4F370;
    float32x4_t v17 = (float32x4_t)xmmword_1B6E4F2E0;
    float32x4_t v18 = (float32x4_t)xmmword_1B6E4F320;
    float32x4_t v19 = (float32x4_t)xmmword_1B6E4F300;
  }
  else
  {
    v19.i64[0] = v10;
    v19.i64[1] = v9;
    v18.i64[0] = v12;
    v18.i64[1] = v11;
    v17.i64[0] = v14;
    v17.i64[1] = v13;
    v20.n128_u64[0] = v16;
    v20.n128_u64[1] = v15;
    __n128 v104 = v20;
  }
  __n128 v100 = (__n128)v17;
  __n128 v102 = (__n128)v18;
  __n128 v105 = (__n128)v19;
  float32x4_t v21 = vmulq_f32(v19, v19);
  *(float *)&unsigned int v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
  float32x4_t v23 = vmulq_f32(v18, v18);
  *(float *)&unsigned int v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
  __n128 v25 = (__n128)vmulq_f32(v17, v17);
  *(float *)&unsigned int v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32((float32x4_t)v25, (float32x4_t)vdupq_lane_s32((int32x2_t)v25.n128_u64[0], 1))).f32[0]);
  v25.n128_u64[0] = __PAIR64__(v24, v22);
  v25.n128_u64[1] = v26;
  float v109 = v5 * sub_1B681B434(v25);
  if (v4)
  {
    uint64_t v27 = sub_1B6C184A0();
    if (v27)
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      memset(v142, 0, sizeof(v142));
      char v143 = 12;
      v127.n128_u8[0] = 1;
      sub_1B6D7DFAC(v28, 0x100000000uLL, v27, v142, v105, v102, v100, v104);
      long long v31 = (__int128)v104;
      *((float *)&v31 + 3) = v109;
      long long v106 = v31;
      int v32 = sub_1B67487EC((float32x4_t)xmmword_1B6E9A9D0);
      v140[0] = v106;
      memset(&v140[1], 0, 80);
      char v141 = 3;
      v127.n128_u8[0] = 1;
      sub_1B6D7E4E0(v30, 0x100000000uLL, v29, v140, v32);
      sub_1B69BF5C4(v29);
    }
  }
  long long v33 = *(_OWORD *)(a1 + 104);
  long long v124 = *(_OWORD *)(a1 + 88);
  long long v125 = v33;
  uint64_t v126 = *(void *)(a1 + 120);
  sub_1B663C898((uint64_t)v113);
  sub_1B62F46E8();
  float v35 = v34;
  if (v8 <= 0.0) {
    float v36 = 1.0;
  }
  else {
    float v36 = 1.0 / v8;
  }
  float32x2_t v37 = vdiv_f32(vmul_f32(vminnm_f32(vmaxnm_f32(v110, 0), (float32x2_t)0x43B4000043340000), (float32x2_t)vdup_n_s32(0x40490FDAu)), (float32x2_t)vdup_n_s32(0x43340000u));
  float v38 = v37.f32[1];
  if (v37.f32[0] >= v37.f32[1]) {
    v37.f32[0] = v37.f32[1];
  }
  float v39 = v37.f32[1] - v37.f32[0];
  float v40 = 0.0;
  if ((float)(v37.f32[1] - v37.f32[0]) < v37.f32[1]) {
    float v40 = 1.0 / (float)(v37.f32[1] - v39);
  }
  if (v7 < 0.0) {
    float v41 = 0.0;
  }
  else {
    float v41 = (float)(v7 * 3.1416) / 180.0;
  }
  if (v6 > 0.0
    && v109 > 0.0
    && v8 > 0.0
    && v37.f32[1] > 0.0
    && v41 > 0.0
    && (v122[0] = v113[0],
        v122[1] = v113[1],
        uint64_t v123 = v114,
        sub_1B62C9DA8(v108, (uint64_t)v122, 0x200000000, v115),
        sub_1B69BD454((uint64_t)v115, (uint64_t)v116, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult), v116[0]))
  {
    uint64_t v92 = v120;
    if (v120 > 0)
    {
      uint64_t v91 = v117;
      if (v117)
      {
        uint64_t v90 = v116[5];
        float v42 = v119;
        uint64_t v103 = v119[4];
        char v43 = *(unsigned char *)(v118 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        float32x4_t v88 = v119 + 8;
        unint64_t v89 = v118;
        __int32 v111 = (unsigned __int16 *)v116[0];
        uint64_t v107 = v116[0] + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v44 = 0;
        char v87 = v43;
        while (1)
        {
          float32x2_t v46 = (unsigned int *)(v90 + 48 * v44);
          uint64_t v47 = *v46;
          uint64_t v48 = v46[1];
          uint64_t v49 = v46[2];
          uint64_t v96 = v44;
          uint64_t v97 = *((void *)v46 + 2);
          uint64_t v50 = *((void *)v46 + 3);
          uint64_t v51 = *((void *)v46 + 4);
          unint64_t v52 = *((void *)v46 + 5);
          if (v43)
          {
            float32x2_t v53 = *(os_unfair_lock_s **)(v52 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v53);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v52 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v103);
          uint64_t v93 = v42[7];
          uint64_t v94 = v42[6];
          uint64_t v95 = v42[8];
          uint64_t v98 = v42[10];
          uint64_t v99 = v42[9];
          uint64_t v54 = v42[4];
          uint64_t v55 = *(void *)(*(void *)(*(void *)(*(void *)(v52 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v42[6] = ecs_stack_allocator_allocate(v54, 48 * v55, 8);
          v42[7] = v55;
          v88[1] = 0;
          v88[2] = 0;
          *float32x4_t v88 = 0;
          swift_release();
          v127.n128_u64[0] = v89;
          unint64_t v101 = v52;
          v127.n128_u64[1] = v52;
          uint64_t v128 = v42;
          uint64_t v129 = v49;
          uint64_t v130 = (v48 - v47 + v49);
          uint64_t v131 = v92;
          uint64_t v132 = v47;
          uint64_t v133 = v48;
          uint64_t v134 = 0;
          uint64_t v135 = 0;
          char v136 = 1;
          uint64_t v137 = v97;
          uint64_t v138 = v50;
          uint64_t v139 = v51;
          sub_1B69B6878(&v127, (float32x4_t)v104, v109 * v109, v109, v8, v36, v38, v39, v40, v35, v6, v41);
          unint64_t v56 = v42[6];
          uint64_t v57 = v42[8];
          if (!v57)
          {
            uint64_t v83 = v42[7];
            float32x4_t v84 = (void *)v42[4];
            char v43 = v87;
            uint64_t v86 = v95;
            uint64_t v85 = v96;
            goto LABEL_71;
          }
          for (uint64_t i = 0; i != v57; ++i)
          {
            float32x4_t v60 = (uint64_t *)(v56 + 48 * i);
            uint64_t v61 = *v60;
            float v62 = (void (*)(uint64_t))v60[4];
            uint64_t v63 = v42[9];
            if (v63) {
              BOOL v64 = v61 == v63;
            }
            else {
              BOOL v64 = 0;
            }
            if (v64 || !v111[11]) {
              goto LABEL_36;
            }
            unint64_t v65 = v111[9];
            float32x2_t v66 = (void *)(v107 + v111[8]);
            uint64_t v67 = v60[2];
            int v68 = v66;
            unint64_t v69 = v65 >> 4;
            uint64_t v70 = v107;
            if (v65 >= 0x10)
            {
              while (*v68 != v61)
              {
                ++v70;
                v68 += 2;
                if (!--v69) {
                  goto LABEL_51;
                }
              }
              unsigned int v71 = *(unsigned __int8 *)(v70 + v111[10]);
              BOOL v72 = v71 > 5;
              int v73 = (1 << v71) & 0x23;
              if (v72 || v73 == 0)
              {
LABEL_36:
                uint64_t v59 = swift_retain();
                v62(v59);
                swift_release();
                continue;
              }
            }
LABEL_51:
            if (swift_conformsToProtocol2()) {
              uint64_t v75 = v67;
            }
            else {
              uint64_t v75 = 0;
            }
            if (v75)
            {
              if (v65 < 0x10) {
                goto LABEL_36;
              }
              float32x2_t v76 = v66;
              unint64_t v77 = v65 >> 4;
              uint64_t v78 = v107;
              while (*v76 != v75)
              {
                ++v78;
                v76 += 2;
                if (!--v77) {
                  goto LABEL_64;
                }
              }
              unsigned int v79 = *(unsigned __int8 *)(v78 + v111[10]);
              BOOL v72 = v79 > 5;
              int v80 = (1 << v79) & 0x23;
              if (v72 || v80 == 0) {
                goto LABEL_36;
              }
LABEL_64:
              uint64_t v82 = 16 * (v65 >> 4);
              while (*v66 != v75)
              {
                v66 += 2;
                v82 -= 16;
                if (!v82) {
                  goto LABEL_36;
                }
              }
            }
          }
          uint64_t v83 = v42[7];
          unint64_t v56 = v42[6];
          float32x4_t v84 = (void *)v42[4];
          char v43 = v87;
          uint64_t v86 = v95;
          uint64_t v85 = v96;
          if ((uint64_t)v42[8] >= 1) {
            swift_arrayDestroy();
          }
LABEL_71:
          ecs_stack_allocator_deallocate(v84, v56, 48 * v83);
          v42[6] = v94;
          v42[7] = v93;
          void v42[8] = v86;
          v42[9] = v99;
          v42[10] = v98;
          sub_1B634507C((char *)v101);
          ecs_stack_allocator_pop_snapshot(v103);
          if (v43)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v101 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v101 + 376));
          }
          swift_release();
          uint64_t v44 = v85 + 1;
          if (v44 == v91) {
            goto LABEL_75;
          }
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_75:
    sub_1B62CA064((uint64_t)v113);
    swift_release();
    sub_1B632F1C4(v115, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    return sub_1B632F1C4(v115, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  else
  {
    sub_1B62CA064((uint64_t)v113);
    return (void *)swift_release();
  }
}

uint64_t sub_1B69C0154(float32x4_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v7 = *(float *)(sub_1B62C91B8((uint64_t)&type metadata for Scale1) + 4 * a4);
  float v8 = *(void **)(a5 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a5 + 16) = v8;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B6C1692C(v8);
    float v8 = (void *)result;
  }
  float v10 = 0.000001;
  if (v7 > 0.000001) {
    float v11 = v7;
  }
  else {
    float v11 = 0.000001;
  }
  float32x4_t v12 = vmulq_n_f32(a1, v11);
  uint64_t v13 = (float32x4_t *)&v8[14 * a3];
  v13[6] = v12;
  float v14 = 0.33333
      * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
  if (v14 <= 0.000001) {
    float v14 = 0.000001;
  }
  if ((float)((float)(v14 * (float)(v14 * v14)) * 0.5236) > 0.000001) {
    float v10 = (float)(v14 * (float)(v14 * v14)) * 0.5236;
  }
  v13[7].f32[0] = v14;
  v13[7].f32[1] = v10;
  *(void *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_1B69C0264(float32x4_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float32x4_t v14 = *(float32x4_t *)(sub_1B62C91B8((uint64_t)&type metadata for Scale3) + 16 * a4);
  float v7 = *(void **)(a5 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a5 + 16) = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B6C1692C(v7);
    float v7 = (void *)result;
  }
  float32x4_t v9 = vmulq_f32(v14, a1);
  v9.i32[3] = 0;
  float32x4_t v10 = vmaxnmq_f32(v9, (float32x4_t)xmmword_1B6E9A990);
  float v11 = (float32x4_t *)&v7[14 * a3];
  v11[6] = v10;
  float v12 = 0.33333
      * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  float v13 = 0.000001;
  if (v12 <= 0.000001) {
    float v12 = 0.000001;
  }
  if ((float)((float)(v12 * (float)(v12 * v12)) * 0.5236) > 0.000001) {
    float v13 = (float)(v12 * (float)(v12 * v12)) * 0.5236;
  }
  v11[7].f32[0] = v12;
  v11[7].f32[1] = v13;
  *(void *)(a5 + 16) = v7;
  return result;
}

uint64_t sub_1B69C0378(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7, uint64_t a8, __n128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = *(void *)(a6 + 16 * (result + a4 * a3 + *(void *)(a5 + 56) * a2));
  if ((v11 & 0x8000000000000000) == 0)
  {
    float v12 = a9.n128_f32[0];
    do
    {
      uint64_t v18 = a8 + 112 * v11;
      float32x4_t v19 = *(float32x4_t **)v18;
      if (*(void *)v18) {
        BOOL v20 = v19 == a7;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        unint64_t v15 = *(void **)a10;
        unint64_t v29 = *(void *)(*(void *)a10 + 16);
        __n128 v83 = a9;
        if (v29 == a11)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)a10 = v15;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            unint64_t v15 = sub_1B6C1692C(v15);
          }
          unint64_t v29 = v15[2] - 1;
          void v15[2] = v29;
          float32x4_t v19 = *(float32x4_t **)v18;
        }
        long long v75 = *(_OWORD *)(v18 + 32);
        long long v79 = *(_OWORD *)(v18 + 16);
        long long v67 = *(_OWORD *)(v18 + 64);
        long long v71 = *(_OWORD *)(v18 + 48);
        uint64_t v31 = *(void *)(v18 + 80);
        uint64_t v32 = *(void *)(v18 + 96);
        int v33 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)a10 = v15;
        if (!v33 || v29 >= v15[3] >> 1)
        {
          unint64_t v15 = sub_1B68C5ABC(v33, v29 + 1, 1, v15);
          *(void *)a10 = v15;
        }
        uint64_t v16 = v15[2];
        uint64_t result = (uint64_t)memmove(v15 + 18, v15 + 4, 112 * v16);
        void v15[2] = v16 + 1;
        void v15[4] = v19;
        *((_OWORD *)v15 + 3) = v79;
        *((_OWORD *)v15 + 4) = v75;
        *((_OWORD *)v15 + 5) = v71;
        *((_OWORD *)v15 + 6) = v67;
        v15[14] = v31;
        v15[16] = v32;
        *((_DWORD *)v15 + 30) = 0;
      }
      else
      {
        float32x4_t v17 = *a7;
        v17.i32[3] = a9.n128_i32[3];
        float32x4_t v21 = vsubq_f32(v17, *(float32x4_t *)(v18 + 16));
        float32x4_t v22 = vmulq_f32(v21, v21);
        float v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
        if (v23 >= v12) {
          goto LABEL_6;
        }
        unint64_t v15 = *(void **)a10;
        uint64_t v24 = *(void *)(*(void *)a10 + 16);
        float v25 = sqrtf(v23);
        if (v24)
        {
          uint64_t v26 = 112 * v24 - 112;
          if (*(float *)((char *)v15 + v26 + 120) <= v25)
          {
            if (v24 >= a11) {
              goto LABEL_6;
            }
            long long v81 = *(_OWORD *)(v18 + 16);
            __n128 v83 = (__n128)v17;
            long long v73 = *(_OWORD *)(v18 + 48);
            long long v77 = *(_OWORD *)(v18 + 32);
            long long v69 = *(_OWORD *)(v18 + 64);
            uint64_t v40 = *(void *)(v18 + 80);
            uint64_t v65 = *(void *)(v18 + 96);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            *(void *)a10 = v15;
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1B68C5ABC(0, v24 + 1, 1, v15);
              unint64_t v15 = (void *)result;
              *(void *)a10 = result;
            }
            unint64_t v42 = v15[2];
            unint64_t v41 = v15[3];
            unint64_t v43 = v42 + 1;
            if (v42 >= v41 >> 1)
            {
              uint64_t result = (uint64_t)sub_1B68C5ABC(v41 > 1, v42 + 1, 1, v15);
              unint64_t v15 = (void *)result;
            }
            void v15[2] = v43;
            uint64_t v44 = (uint64_t)&v15[14 * v42 + 4];
            *(void *)uint64_t v44 = v19;
            *(_OWORD *)(v44 + 16) = v81;
            *(_OWORD *)(v44 + 32) = v77;
            *(_OWORD *)(v44 + 48) = v73;
            *(_OWORD *)(v44 + 64) = v69;
            *(void *)(v44 + 80) = v40;
            *(void *)(v44 + 96) = v65;
            *(float *)&v15[14 * v43 + 1] = v25;
          }
          else
          {
            __n128 v83 = (__n128)v17;
            if (v24 == a11)
            {
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              *(void *)a10 = v15;
              if ((result & 1) == 0)
              {
                uint64_t result = (uint64_t)sub_1B6C1692C(v15);
                unint64_t v15 = (void *)result;
              }
              float32x4_t v17 = (float32x4_t)v83;
              *(float *)((char *)v15 + v26 + 120) = v25 + 999.99;
              *(void *)a10 = v15;
              uint64_t v24 = v15[2];
              if (!v24) {
                goto LABEL_6;
              }
            }
            uint64_t v27 = 0;
            uint64_t v28 = 15;
            while (v25 >= *(float *)&v15[v28])
            {
              ++v27;
              v28 += 14;
              if (v24 == v27) {
                goto LABEL_6;
              }
            }
            if (v24 == a11)
            {
              char v45 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)a10 = v15;
              if ((v45 & 1) == 0) {
                unint64_t v15 = sub_1B6C1692C(v15);
              }
              --v15[2];
              *(void *)a10 = v15;
              uint64_t v24 = v15[2];
            }
            long long v47 = *(_OWORD *)(v18 + 16);
            long long v46 = *(_OWORD *)(v18 + 32);
            long long v49 = *(_OWORD *)(v18 + 48);
            long long v48 = *(_OWORD *)(v18 + 64);
            int v51 = *(_DWORD *)(v18 + 80);
            int v50 = *(_DWORD *)(v18 + 84);
            int v52 = *(_DWORD *)(v18 + 88);
            uint64_t v53 = *(void *)(v18 + 96);
            if (v24 == v27)
            {
              uint64_t v64 = *(void *)(v18 + 96);
              float32x2_t v66 = *(float32x4_t **)v18;
              long long v70 = *(_OWORD *)(v18 + 16);
              long long v74 = *(_OWORD *)(v18 + 32);
              long long v78 = *(_OWORD *)(v18 + 48);
              long long v82 = *(_OWORD *)(v18 + 64);
              char v54 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)a10 = v15;
              if ((v54 & 1) == 0)
              {
                unint64_t v15 = sub_1B68C5ABC(0, v27 + 1, 1, v15);
                *(void *)a10 = v15;
              }
              unint64_t v56 = v15[2];
              unint64_t v55 = v15[3];
              long long v58 = v78;
              long long v57 = v82;
              long long v60 = v70;
              long long v59 = v74;
              uint64_t v61 = v66;
              if (v56 >= v55 >> 1)
              {
                uint64_t v63 = sub_1B68C5ABC(v55 > 1, v56 + 1, 1, v15);
                uint64_t v61 = v66;
                long long v60 = v70;
                long long v59 = v74;
                long long v58 = v78;
                long long v57 = v82;
                unint64_t v15 = v63;
              }
              void v15[2] = v56 + 1;
              float v62 = &v15[14 * v56];
              v62[4] = v61;
              *((_OWORD *)v62 + 3) = v60;
              *((_OWORD *)v62 + 4) = v59;
              *((_OWORD *)v62 + 5) = v58;
              *((_OWORD *)v62 + 6) = v57;
              *((_DWORD *)v62 + 28) = v51;
              *((_DWORD *)v62 + 29) = v50;
              *((_DWORD *)v62 + 30) = v52;
              v62[16] = v64;
              *(void *)a10 = v15;
            }
            else
            {
              float32x4_t v84 = *(float32x4_t **)v18;
              long long v85 = v47;
              long long v86 = v46;
              long long v87 = v49;
              long long v88 = v48;
              int v89 = v51;
              int v90 = v50;
              int v91 = v52;
              uint64_t v92 = v53;
              sub_1B68E8C7C(v27, v27, (uint64_t)&v84);
              unint64_t v15 = *(void **)a10;
            }
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            *(void *)a10 = v15;
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1B6C1692C(v15);
              unint64_t v15 = (void *)result;
            }
            *(float *)&v15[v28] = v25;
          }
        }
        else
        {
          long long v80 = *(_OWORD *)(v18 + 16);
          __n128 v83 = (__n128)v17;
          long long v72 = *(_OWORD *)(v18 + 48);
          long long v76 = *(_OWORD *)(v18 + 32);
          long long v68 = *(_OWORD *)(v18 + 64);
          uint64_t v34 = *(void *)(v18 + 80);
          int v35 = *(_DWORD *)(v18 + 88);
          uint64_t v36 = *(void *)(v18 + 96);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)a10 = v15;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1B68C5ABC(0, 1, 1, v15);
            unint64_t v15 = (void *)result;
            *(void *)a10 = result;
          }
          unint64_t v38 = v15[2];
          unint64_t v37 = v15[3];
          if (v38 >= v37 >> 1)
          {
            uint64_t result = (uint64_t)sub_1B68C5ABC(v37 > 1, v38 + 1, 1, v15);
            unint64_t v15 = (void *)result;
          }
          void v15[2] = v38 + 1;
          float v39 = &v15[14 * v38];
          v39[4] = v19;
          *((_OWORD *)v39 + 3) = v80;
          *((_OWORD *)v39 + 4) = v76;
          *((_OWORD *)v39 + 5) = v72;
          *((_OWORD *)v39 + 6) = v68;
          v39[14] = v34;
          *((_DWORD *)v39 + 30) = v35;
          v39[16] = v36;
          *((float *)v15 + 30) = v25;
        }
      }
      float32x4_t v17 = (float32x4_t)v83;
      *(void *)a10 = v15;
LABEL_6:
      uint64_t v11 = *(void *)(v18 + 96);
      a9 = (__n128)v17;
    }
    while ((v11 & 0x8000000000000000) == 0);
  }
  return result;
}

uint64_t sub_1B69C08DC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_1B69C3290(0, &qword_1E9DD3540, (uint64_t (*)(void))sub_1B69C3184, (uint64_t)&type metadata for ParticleFlockingSolver.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  float32x4_t v10 = (char *)&v43 - v9;
  char v55 = 1;
  __int16 v54 = 0;
  uint64_t v11 = a1[3];
  unint64_t v56 = a1;
  sub_1B62C14BC(a1, v11);
  sub_1B69C3184();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v56);
  }
  uint64_t v12 = v7;
  long long v47 = a2;
  LOBYTE(v49) = 0;
  sub_1B6E32DC8();
  int v14 = v13;
  LOBYTE(v49) = 1;
  sub_1B6E32DC8();
  int v16 = v15;
  LOBYTE(v49) = 2;
  sub_1B6E32DC8();
  int v19 = v18;
  LOBYTE(v49) = 3;
  sub_1B6E32DC8();
  int v21 = v20;
  LOBYTE(v49) = 4;
  uint64_t v22 = sub_1B6E32DD8();
  char v52 = 5;
  sub_1B66C57A4();
  sub_1B6E32DF8();
  uint64_t v46 = v22;
  char v23 = v49;
  char v55 = 1;
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B69C3290(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  char v52 = 6;
  sub_1B69C2FD0((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v24);
  sub_1B6E32D78();
  if (v51)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = v50;
    uint64_t v25 = v49;
    char v55 = 0;
  }
  LOBYTE(v49) = 7;
  sub_1B6E32DC8();
  int v28 = v27;
  LOBYTE(v49) = 8;
  sub_1B6E32DC8();
  int v30 = v29;
  LOBYTE(v49) = 9;
  sub_1B6E32DC8();
  int v32 = v31;
  LOBYTE(v49) = 10;
  sub_1B6E32DC8();
  int v34 = v33;
  LOBYTE(v49) = 11;
  sub_1B6E32DC8();
  int v45 = v35;
  LOBYTE(v49) = 12;
  sub_1B6E32DC8();
  int v44 = v36;
  LOBYTE(v49) = 13;
  sub_1B6E32DC8();
  HIDWORD(v43) = v37;
  LOBYTE(v49) = 14;
  HIBYTE(v54) = sub_1B6E32DA8() & 1;
  LOBYTE(v49) = 15;
  LOBYTE(v54) = sub_1B6E32DA8() & 1;
  char v52 = 16;
  char v38 = sub_1B6E32DA8();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v6);
  char v39 = HIBYTE(v54);
  char v40 = v54;
  char v48 = v55;
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v56);
  unint64_t v41 = v47;
  *long long v47 = 0;
  *((_DWORD *)v41 + 2) = v14;
  *((_DWORD *)v41 + 3) = v16;
  *((_DWORD *)v41 + 4) = v19;
  *((_DWORD *)v41 + 5) = v21;
  v41[3] = v46;
  *((unsigned char *)v41 + 32) = v23;
  *(void *)((char *)v41 + 33) = v53[0];
  v41[5] = *(void *)((char *)v53 + 7);
  v41[6] = v25;
  v41[7] = v26;
  *((unsigned char *)v41 + 64) = v48;
  *(_WORD *)((char *)v41 + 65) = v49;
  *((unsigned char *)v41 + 67) = BYTE2(v49);
  *((_DWORD *)v41 + 17) = v28;
  *((_DWORD *)v41 + 18) = v30;
  *((_DWORD *)v41 + 19) = v32;
  *((_DWORD *)v41 + 20) = v34;
  int v42 = v44;
  *((_DWORD *)v41 + 21) = v45;
  *((_DWORD *)v41 + 22) = v42;
  *((_DWORD *)v41 + 23) = HIDWORD(v43);
  *((unsigned char *)v41 + 96) = v39;
  *((unsigned char *)v41 + 97) = v40;
  *((unsigned char *)v41 + 98) = v38 & 1;
  return result;
}

uint64_t sub_1B69C16F0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  swift_retain();
  sub_1B67D1F1C((uint64_t)&v138);
  uint64_t v3 = v138;
  if (!v138) {
    sub_1B6BF1364(*(void *)(a1 + 8), v2);
  }
  long long v4 = *(_OWORD *)(a1 + 104);
  long long v129 = *(_OWORD *)(a1 + 88);
  long long v130 = v4;
  uint64_t v131 = *(void *)(a1 + 120);
  sub_1B663C898((uint64_t)v111);
  v127[0] = v111[0];
  v127[1] = v111[1];
  uint64_t v128 = v112;
  sub_1B62C9DA8(v2, (uint64_t)v127, 0x200000000, v113);
  sub_1B69BD454((uint64_t)v113, (uint64_t)&v114, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  uint64_t v5 = v114;
  if (v114)
  {
    if (v3)
    {
      uint64_t v6 = v123;
      uint64_t v7 = v124;
      unint64_t v8 = v115 | ((unint64_t)v116 << 32);
      uint64_t v9 = v126;
      uint64_t v10 = v125;
      uint64_t v11 = v121;
      uint64_t v12 = v122;
      uint64_t v13 = v119;
      uint64_t v14 = v120;
      uint64_t v15 = v118;
      uint64_t v16 = v117;
      goto LABEL_8;
    }
LABEL_86:
    sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
LABEL_87:
    sub_1B62CA064((uint64_t)v111);
    goto LABEL_88;
  }
  if (!v3) {
    goto LABEL_86;
  }
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v10 = 0;
  unint64_t v8 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
LABEL_8:
  v137[0] = v114;
  v137[1] = v8;
  v137[2] = v16;
  v137[3] = v15;
  v137[4] = v13;
  uint64_t v96 = v14;
  uint64_t v97 = v6;
  v137[5] = v14;
  v137[6] = v11;
  v137[7] = v12;
  v137[8] = v6;
  v137[9] = v7;
  uint64_t v98 = v10;
  void v137[10] = v10;
  v137[11] = v9;
  uint64_t v17 = v144;
  uint64_t v18 = v145;
  char v19 = v146;
  sub_1B62CA090((uint64_t)&v138);
  sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
  sub_1B69B6E98((uint64_t)v137, v17, v18, v19);
  sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  sub_1B69B937C(v2, v154, v155, v156);
  sub_1B62CA064((uint64_t)&v138);
  sub_1B62CA090((uint64_t)&v138);
  sub_1B62F46E8();
  if (v139 < 0.0) {
    float v21 = 0.0;
  }
  else {
    float v21 = v139;
  }
  float v22 = 1.0 - v21;
  if ((float)(1.0 - v21) < 0.0) {
    float v22 = 0.0;
  }
  float v95 = v22;
  float32x2_t v23 = vdiv_f32(vmul_f32(vminnm_f32(vmaxnm_f32(v141, 0), (float32x2_t)0x4334000043B40000), (float32x2_t)vdup_n_s32(0x40490FDAu)), (float32x2_t)vdup_n_s32(0x43340000u));
  float v24 = v23.f32[1];
  if (v23.f32[1] >= v23.f32[0]) {
    float v24 = v23.f32[0];
  }
  float v25 = v23.f32[0] - v24;
  float v99 = v23.f32[0];
  float v26 = 0.0;
  if ((float)(v23.f32[0] - v24) < v23.f32[0]) {
    float v26 = 1.0 / (float)(v23.f32[0] - v25);
  }
  float v27 = v140;
  uint64_t v28 = v142;
  if (v142 >= 16) {
    uint64_t v28 = 16;
  }
  if (v28 <= 2) {
    uint64_t v28 = 2;
  }
  uint64_t v94 = v28;
  char v93 = v143;
  float v29 = fminf(v147, 1.0);
  if (v29 < 0.0) {
    float v30 = 0.0;
  }
  else {
    float v30 = v29;
  }
  float v31 = fminf(v20 * fabsf(v149), 1.0);
  if (v31 < 0.0) {
    float v32 = 0.0;
  }
  else {
    float v32 = v31;
  }
  float v33 = fminf(v20 * v150, 1.0);
  if (v33 < 0.0) {
    float v33 = 0.0;
  }
  float v91 = v33;
  float v92 = v32;
  float v34 = fminf(v20 * v151, 1.0);
  if (v34 < 0.0) {
    float v35 = 0.0;
  }
  else {
    float v35 = v34;
  }
  float v36 = fminf(v20 * v152, 1.0);
  if (v36 < 0.0) {
    float v37 = 0.0;
  }
  else {
    float v37 = v36;
  }
  float v38 = v153;
  if (v21 <= 0.0 && v37 <= 0.0 || v140 <= 0.0)
  {
    sub_1B62CA064((uint64_t)v111);
    swift_release();
    sub_1B62CA064((uint64_t)&v138);
    sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    return sub_1B62CA064((uint64_t)&v138);
  }
  if (!v5)
  {
    sub_1B62CA064((uint64_t)&v138);
    goto LABEL_87;
  }
  if (v98 <= 0 || !v12)
  {
    sub_1B62CA064((uint64_t)v111);
    goto LABEL_93;
  }
  uint64_t v90 = v3;
  float v39 = fmaxf(v148, 0.001);
  float v87 = 1.0 / (float)(v39 * 0.2);
  float v88 = v39 * 0.2;
  float v89 = v39;
  uint64_t v108 = v7[4];
  char v40 = *(unsigned char *)(v97 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  float v86 = 1.0 / (float)(v39 - (float)(v39 * 0.2));
  sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
  sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
  uint64_t v41 = 0;
  float v109 = (char *)v5 + 41;
  float32x2_t v110 = v5;
  char v84 = v40;
  uint64_t v85 = v12;
  while (2)
  {
    int v42 = (unsigned int *)(v96 + 48 * v41);
    uint64_t v43 = *v42;
    uint64_t v44 = v42[1];
    uint64_t v45 = v42[2];
    uint64_t v102 = v41;
    uint64_t v103 = *((void *)v42 + 2);
    uint64_t v46 = *((void *)v42 + 3);
    uint64_t v47 = *((void *)v42 + 4);
    uint64_t v48 = *((void *)v42 + 5);
    if (v40)
    {
      uint64_t v49 = *(os_unfair_lock_s **)(v48 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v49);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v48 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v108);
    uint64_t v100 = v7[6];
    uint64_t v106 = v7[8];
    uint64_t v107 = v7[7];
    uint64_t v104 = v7[10];
    uint64_t v105 = v7[9];
    uint64_t v50 = v7[4];
    uint64_t v51 = *(void *)(*(void *)(*(void *)(*(void *)(v48 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    _OWORD v7[6] = ecs_stack_allocator_allocate(v50, 48 * v51, 8);
    v7[7] = v51;
    v7[9] = 0;
    v7[10] = 0;
    v7[8] = 0;
    swift_release();
    v132[0] = v97;
    uint64_t v101 = v48;
    v132[1] = v48;
    _OWORD v132[2] = v7;
    v132[3] = v45;
    v132[4] = (v44 - v43 + v45);
    v132[5] = v98;
    v132[6] = v43;
    v132[7] = v44;
    v132[8] = 0;
    v132[9] = 0;
    char v133 = 1;
    uint64_t v134 = v103;
    uint64_t v135 = v46;
    uint64_t v136 = v47;
    sub_1B69BADBC(v132, v94, v90, v93, v27, v21, v30, 1.0 - v30, v92, v89, v88, v86, v87, v99, v25, v26, v91, v35, v95,
      v37,
      v38);
    unint64_t v52 = v7[6];
    uint64_t v53 = v7[8];
    if (!v53)
    {
      uint64_t v79 = v7[7];
      long long v80 = (void *)v7[4];
      uint64_t v81 = v85;
      char v40 = v84;
      uint64_t v82 = v102;
      goto LABEL_83;
    }
    for (uint64_t i = 0; i != v53; ++i)
    {
      unint64_t v56 = (uint64_t *)(v52 + 48 * i);
      uint64_t v57 = *v56;
      long long v58 = (void (*)(uint64_t))v56[4];
      uint64_t v59 = v7[9];
      if (v59) {
        BOOL v60 = v57 == v59;
      }
      else {
        BOOL v60 = 0;
      }
      if (v60 || !v110[11]) {
        goto LABEL_48;
      }
      unint64_t v61 = v110[9];
      float v62 = &v109[v110[8]];
      uint64_t v63 = v56[2];
      uint64_t v64 = v62;
      unint64_t v65 = v61 >> 4;
      float32x2_t v66 = v109;
      if (v61 >= 0x10)
      {
        while (*(void *)v64 != v57)
        {
          ++v66;
          v64 += 16;
          if (!--v65) {
            goto LABEL_63;
          }
        }
        unsigned int v67 = v66[v110[10]];
        BOOL v68 = v67 > 5;
        int v69 = (1 << v67) & 0x23;
        if (v68 || v69 == 0)
        {
LABEL_48:
          uint64_t v55 = swift_retain();
          v58(v55);
          swift_release();
          continue;
        }
      }
LABEL_63:
      if (swift_conformsToProtocol2()) {
        uint64_t v71 = v63;
      }
      else {
        uint64_t v71 = 0;
      }
      if (v71)
      {
        if (v61 < 0x10) {
          goto LABEL_48;
        }
        long long v72 = v62;
        unint64_t v73 = v61 >> 4;
        long long v74 = v109;
        while (*(void *)v72 != v71)
        {
          ++v74;
          v72 += 16;
          if (!--v73) {
            goto LABEL_76;
          }
        }
        unsigned int v75 = v74[v110[10]];
        BOOL v68 = v75 > 5;
        int v76 = (1 << v75) & 0x23;
        if (v68 || v76 == 0) {
          goto LABEL_48;
        }
LABEL_76:
        uint64_t v78 = 16 * (v61 >> 4);
        while (*(void *)v62 != v71)
        {
          v62 += 16;
          v78 -= 16;
          if (!v78) {
            goto LABEL_48;
          }
        }
      }
    }
    uint64_t v79 = v7[7];
    unint64_t v52 = v7[6];
    long long v80 = (void *)v7[4];
    uint64_t v81 = v85;
    char v40 = v84;
    uint64_t v82 = v102;
    if ((uint64_t)v7[8] >= 1) {
      swift_arrayDestroy();
    }
LABEL_83:
    ecs_stack_allocator_deallocate(v80, v52, 48 * v79);
    _OWORD v7[6] = v100;
    v7[7] = v107;
    v7[8] = v106;
    v7[9] = v105;
    v7[10] = v104;
    sub_1B634507C((char *)v101);
    ecs_stack_allocator_pop_snapshot(v108);
    if (v40)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v101 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v101 + 376));
    }
    swift_release();
    uint64_t v41 = v82 + 1;
    if (v41 != v81) {
      continue;
    }
    break;
  }
  sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  sub_1B62CA064((uint64_t)v111);
  sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
LABEL_93:
  sub_1B632F1C4(v113, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  sub_1B62CA064((uint64_t)&v138);
LABEL_88:
  swift_release();
  return sub_1B62CA064((uint64_t)&v138);
}

uint64_t sub_1B69C1FB4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  float32x2_t v23 = a2;
  sub_1B69C3290(0, &qword_1E9DD3558, (uint64_t (*)(void))sub_1B69C323C, (uint64_t)&type metadata for ParticleFlockingSpeedControl.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v23 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C323C();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  char v31 = 0;
  sub_1B6E32DC8();
  int v11 = v10;
  char v30 = 1;
  sub_1B6E32DC8();
  int v13 = v12;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
  sub_1B69C3290(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
  char v28 = 2;
  sub_1B69C2FD0((unint64_t *)&qword_1EB97D1D0, &qword_1EB980E90, v14);
  sub_1B6E32DF8();
  uint64_t v15 = v29;
  char v27 = 3;
  sub_1B6E32DC8();
  int v17 = v16;
  char v26 = 4;
  sub_1B6E32DC8();
  int v19 = v18;
  char v24 = 5;
  sub_1B66C5878();
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  char v20 = v25;
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  float v22 = v23;
  *float32x2_t v23 = v11;
  v22[1] = v13;
  *((void *)v22 + 1) = v15;
  _OWORD v22[4] = v17;
  v22[5] = v19;
  *((unsigned char *)v22 + 24) = v20;
  return result;
}

void *sub_1B69C22F8(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  swift_retain_n();
  uint64_t v4 = sub_1B695FAD0(v2);
  double v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9;
  int v11 = v9;
  swift_release();
  double v12 = 134217728.0;
  if (v11 == 6) {
    float v13 = 0.3;
  }
  else {
    float v13 = *(float *)&v4;
  }
  if (v11 == 6) {
    float v14 = 10.0;
  }
  else {
    float v14 = *((float *)&v4 + 1);
  }
  if (v11 != 6) {
    double v12 = v6;
  }
  double v81 = v12;
  if (v11 == 6) {
    float v15 = 0.05;
  }
  else {
    float v15 = *(float *)&v8;
  }
  if (v11 == 6) {
    float v16 = 0.1;
  }
  else {
    float v16 = *((float *)&v8 + 1);
  }
  if (v11 == 6) {
    char v17 = 0;
  }
  else {
    char v17 = v10;
  }
  long long v18 = *(_OWORD *)(a1 + 104);
  long long v103 = *(_OWORD *)(a1 + 88);
  long long v104 = v18;
  uint64_t v105 = *(void *)(a1 + 120);
  sub_1B67CF480((uint64_t)v93);
  sub_1B62F46E8();
  float v20 = *(float *)&v81;
  float v21 = 0.0;
  if ((float)(v13 * v19) >= 0.0) {
    float v21 = v13 * v19;
  }
  if ((float)(v13 * v19) >= 1.0) {
    float v22 = 1.0;
  }
  else {
    float v22 = v21;
  }
  float v23 = *(float *)&v81;
  if (*(float *)&v81 > *((float *)&v81 + 1))
  {
    float v23 = *((float *)&v81 + 1);
    if ((~HIDWORD(v81) & 0x7F800000) == 0)
    {
      if ((HIDWORD(v81) & 0x7FFFFF) != 0) {
        float v23 = *(float *)&v81;
      }
      else {
        float v23 = *((float *)&v81 + 1);
      }
    }
  }
  if (*((float *)&v81 + 1) >= *(float *)&v81)
  {
    if ((~HIDWORD(v81) & 0x7F800000) != 0)
    {
      LODWORD(v81) = HIDWORD(v81);
    }
    else
    {
      if ((HIDWORD(v81) & 0x7FFFFF) == 0) {
        float v20 = *((float *)&v81 + 1);
      }
      *(float *)&double v81 = v20;
    }
  }
  float v24 = v15 * v19;
  float v25 = 1.0 - v24;
  if (v24 < 0.0) {
    float v25 = 1.0;
  }
  if (v24 >= 1.0) {
    float v26 = 0.0;
  }
  else {
    float v26 = v25;
  }
  *(double *)v27.i64 = sub_1B6B353EC(v17);
  int32x4_t v80 = v27;
  v101[0] = v93[0];
  v101[1] = v93[1];
  uint64_t v102 = v94;
  sub_1B62C9DA8(v3, (uint64_t)v101, 0x200000000, v95);
  sub_1B69BD454((uint64_t)v95, (uint64_t)v96, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  float v92 = (unsigned __int16 *)v96[0];
  if (!v96[0])
  {
    sub_1B62CA064((uint64_t)v93);
    return (void *)swift_release();
  }
  uint64_t v79 = v100;
  if (v100 <= 0 || (uint64_t v78 = v97) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B62CA064((uint64_t)v93);
    goto LABEL_89;
  }
  float v28 = v14 * v22;
  uint64_t v77 = v96[5];
  uint64_t v29 = v99;
  uint64_t v30 = v99[4];
  char v90 = *(unsigned char *)(v98 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  unsigned int v75 = v99 + 8;
  uint64_t v76 = v98;
  uint64_t v91 = v96[0] + 41;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v31 = 0;
  uint64_t v74 = v30;
  while (2)
  {
    float v32 = (unsigned int *)(v77 + 48 * v31);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    uint64_t v35 = v32[2];
    uint64_t v86 = v31;
    uint64_t v87 = *((void *)v32 + 2);
    uint64_t v36 = *((void *)v32 + 3);
    uint64_t v37 = *((void *)v32 + 4);
    uint64_t v38 = *((void *)v32 + 5);
    if (v90)
    {
      float v39 = *(os_unfair_lock_s **)(v38 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v39);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v38 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v30);
    uint64_t v83 = v29[7];
    uint64_t v84 = v29[6];
    uint64_t v82 = v29[8];
    uint64_t v85 = v29[9];
    uint64_t v88 = v29[10];
    uint64_t v40 = v29[4];
    uint64_t v41 = *(void *)(*(void *)(*(void *)(*(void *)(v38 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v29[6] = ecs_stack_allocator_allocate(v40, 48 * v41, 8);
    v29[7] = v41;
    v75[1] = 0;
    v75[2] = 0;
    *unsigned int v75 = 0;
    swift_release();
    v106[0] = v76;
    v106[1] = v38;
    uint64_t v89 = v38;
    v106[2] = v29;
    v106[3] = v35;
    v106[4] = (v34 - v33 + v35);
    v106[5] = v79;
    v106[6] = v33;
    v106[7] = v34;
    v106[8] = 0;
    v106[9] = 0;
    char v107 = 1;
    uint64_t v108 = v87;
    uint64_t v109 = v36;
    uint64_t v110 = v37;
    sub_1B69BC2A0(v106, v16, v80, 1.0 - v22, v28, v26, v23, *(float *)&v81);
    unint64_t v42 = v29[6];
    uint64_t v43 = v29[8];
    if (!v43)
    {
      uint64_t v69 = v29[7];
      long long v70 = (void *)v29[4];
      uint64_t v30 = v74;
      uint64_t v72 = v85;
      uint64_t v71 = v86;
      goto LABEL_84;
    }
    for (uint64_t i = 0; i != v43; ++i)
    {
      uint64_t v46 = (uint64_t *)(v42 + 48 * i);
      uint64_t v47 = *v46;
      uint64_t v48 = (void (*)(uint64_t))v46[4];
      uint64_t v49 = v29[9];
      if (v49) {
        BOOL v50 = v47 == v49;
      }
      else {
        BOOL v50 = 0;
      }
      if (v50 || !v92[11]) {
        goto LABEL_49;
      }
      unint64_t v51 = v92[9];
      unint64_t v52 = (void *)(v91 + v92[8]);
      uint64_t v53 = v46[2];
      __int16 v54 = v52;
      unint64_t v55 = v51 >> 4;
      uint64_t v56 = v91;
      if (v51 >= 0x10)
      {
        while (*v54 != v47)
        {
          ++v56;
          v54 += 2;
          if (!--v55) {
            goto LABEL_64;
          }
        }
        unsigned int v57 = *(unsigned __int8 *)(v56 + v92[10]);
        BOOL v58 = v57 > 5;
        int v59 = (1 << v57) & 0x23;
        if (v58 || v59 == 0)
        {
LABEL_49:
          uint64_t v45 = swift_retain();
          v48(v45);
          swift_release();
          continue;
        }
      }
LABEL_64:
      if (swift_conformsToProtocol2()) {
        uint64_t v61 = v53;
      }
      else {
        uint64_t v61 = 0;
      }
      if (v61)
      {
        if (v51 < 0x10) {
          goto LABEL_49;
        }
        float v62 = v52;
        unint64_t v63 = v51 >> 4;
        uint64_t v64 = v91;
        while (*v62 != v61)
        {
          ++v64;
          v62 += 2;
          if (!--v63) {
            goto LABEL_77;
          }
        }
        unsigned int v65 = *(unsigned __int8 *)(v64 + v92[10]);
        BOOL v58 = v65 > 5;
        int v66 = (1 << v65) & 0x23;
        if (v58 || v66 == 0) {
          goto LABEL_49;
        }
LABEL_77:
        uint64_t v68 = 16 * (v51 >> 4);
        while (*v52 != v61)
        {
          v52 += 2;
          v68 -= 16;
          if (!v68) {
            goto LABEL_49;
          }
        }
      }
    }
    uint64_t v69 = v29[7];
    unint64_t v42 = v29[6];
    long long v70 = (void *)v29[4];
    uint64_t v30 = v74;
    uint64_t v72 = v85;
    uint64_t v71 = v86;
    if ((uint64_t)v29[8] >= 1) {
      swift_arrayDestroy();
    }
LABEL_84:
    ecs_stack_allocator_deallocate(v70, v42, 48 * v69);
    v29[6] = v84;
    v29[7] = v83;
    uint64_t v29[8] = v82;
    v29[9] = v72;
    v29[10] = v88;
    sub_1B634507C((char *)v89);
    ecs_stack_allocator_pop_snapshot(v30);
    if (v90)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v89 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v89 + 376));
    }
    swift_release();
    uint64_t v31 = v71 + 1;
    if (v31 != v78) {
      continue;
    }
    break;
  }
  sub_1B62CA064((uint64_t)v93);
LABEL_89:
  swift_release();
  sub_1B632F1C4(v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  return sub_1B632F1C4(v95, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
}

double sub_1B69C29B4(uint64_t a1, _DWORD *a2)
{
  return sub_1B6C192C0(a1, a2, *(long long **)(v2 + 16), *(_DWORD *)(v2 + 24));
}

void sub_1B69C29D4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for ParticleFlockingAlignOrientation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingAlignOrientation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingAlignOrientation()
{
  return &type metadata for ParticleFlockingAlignOrientation;
}

ValueMetadata *type metadata accessor for ParticleFlockingAlignVelocityOnPlane()
{
  return &type metadata for ParticleFlockingAlignVelocityOnPlane;
}

__n128 initializeWithCopy for ParticleFlockingConstrainToArea(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingConstrainToArea()
{
  return &type metadata for ParticleFlockingConstrainToArea;
}

uint64_t getEnumTagSinglePayload for ParticleNoise(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleNoise(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingConstrainToPlane()
{
  return &type metadata for ParticleFlockingConstrainToPlane;
}

ValueMetadata *type metadata accessor for ParticleFlockingFlyTowardsArea()
{
  return &type metadata for ParticleFlockingFlyTowardsArea;
}

uint64_t initializeWithCopy for ParticleFlockingSolver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ParticleFlockingSolver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  return a1;
}

__n128 initializeWithTake for ParticleFlockingSolver(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 95) = *(_DWORD *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ParticleFlockingSolver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleFlockingSolver(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 99)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingSolver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 98) = 0;
    *(_WORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 99) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 99) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSolver()
{
  return &type metadata for ParticleFlockingSolver;
}

uint64_t getEnumTagSinglePayload for ParticleFlockingSpeedControl(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 6;
  int v5 = v3 - 6;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingSpeedControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 5;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSpeedControl()
{
  return &type metadata for ParticleFlockingSpeedControl;
}

ValueMetadata *type metadata accessor for ParticleFlockingSolverData.Cell()
{
  return &type metadata for ParticleFlockingSolverData.Cell;
}

unint64_t sub_1B69C2F7C()
{
  unint64_t result = qword_1E9DD34D0;
  if (!qword_1E9DD34D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD34D0);
  }
  return result;
}

uint64_t sub_1B69C2FD0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B69C3290(255, a2, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B69C3034()
{
  unint64_t result = qword_1E9DD34E8;
  if (!qword_1E9DD34E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD34E8);
  }
  return result;
}

unint64_t sub_1B69C3088()
{
  unint64_t result = qword_1E9DD3500;
  if (!qword_1E9DD3500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3500);
  }
  return result;
}

unint64_t sub_1B69C30DC()
{
  unint64_t result = qword_1E9DD3518;
  if (!qword_1E9DD3518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3518);
  }
  return result;
}

unint64_t sub_1B69C3130()
{
  unint64_t result = qword_1E9DD3530;
  if (!qword_1E9DD3530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3530);
  }
  return result;
}

unint64_t sub_1B69C3184()
{
  unint64_t result = qword_1E9DD3548;
  if (!qword_1E9DD3548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3548);
  }
  return result;
}

uint64_t sub_1B69C31D8(uint64_t a1, uint64_t a2)
{
  sub_1B67659A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B69C323C()
{
  unint64_t result = qword_1E9DD3560;
  if (!qword_1E9DD3560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3560);
  }
  return result;
}

void sub_1B69C3290(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ParticleFlockingSpeedControl.CodingKeys()
{
  return &type metadata for ParticleFlockingSpeedControl.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ParticleFlockingSolver.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69C33D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSolver.CodingKeys()
{
  return &type metadata for ParticleFlockingSolver.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ParticleFlockingFlyTowardsArea.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69C34DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingFlyTowardsArea.CodingKeys()
{
  return &type metadata for ParticleFlockingFlyTowardsArea.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleFlockingConstrainToPlane.CodingKeys()
{
  return &type metadata for ParticleFlockingConstrainToPlane.CodingKeys;
}

unsigned char *_s3VFX32ParticleFlockingConstrainToPlaneV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69C35F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingConstrainToArea.CodingKeys()
{
  return &type metadata for ParticleFlockingConstrainToArea.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ParticleFlockingAlignVelocityOnPlane.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69C36F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingAlignVelocityOnPlane.CodingKeys()
{
  return &type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys;
}

unsigned char *_s3VFX28ParticleFlockingSpeedControlV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69C37FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingAlignOrientation.CodingKeys()
{
  return &type metadata for ParticleFlockingAlignOrientation.CodingKeys;
}

unint64_t sub_1B69C3838()
{
  unint64_t result = qword_1E9DD3570;
  if (!qword_1E9DD3570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3570);
  }
  return result;
}

unint64_t sub_1B69C3890()
{
  unint64_t result = qword_1E9DD3578;
  if (!qword_1E9DD3578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3578);
  }
  return result;
}

unint64_t sub_1B69C38E8()
{
  unint64_t result = qword_1E9DD3580;
  if (!qword_1E9DD3580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3580);
  }
  return result;
}

unint64_t sub_1B69C3940()
{
  unint64_t result = qword_1E9DD3588;
  if (!qword_1E9DD3588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3588);
  }
  return result;
}

unint64_t sub_1B69C3998()
{
  unint64_t result = qword_1E9DD3590;
  if (!qword_1E9DD3590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3590);
  }
  return result;
}

unint64_t sub_1B69C39F0()
{
  unint64_t result = qword_1E9DD3598;
  if (!qword_1E9DD3598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3598);
  }
  return result;
}

unint64_t sub_1B69C3A48()
{
  unint64_t result = qword_1E9DD35A0;
  if (!qword_1E9DD35A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35A0);
  }
  return result;
}

unint64_t sub_1B69C3AA0()
{
  unint64_t result = qword_1E9DD35A8;
  if (!qword_1E9DD35A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35A8);
  }
  return result;
}

unint64_t sub_1B69C3AF8()
{
  unint64_t result = qword_1E9DD35B0;
  if (!qword_1E9DD35B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35B0);
  }
  return result;
}

unint64_t sub_1B69C3B50()
{
  unint64_t result = qword_1E9DD35B8;
  if (!qword_1E9DD35B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35B8);
  }
  return result;
}

unint64_t sub_1B69C3BA8()
{
  unint64_t result = qword_1E9DD35C0;
  if (!qword_1E9DD35C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35C0);
  }
  return result;
}

unint64_t sub_1B69C3C00()
{
  unint64_t result = qword_1E9DD35C8;
  if (!qword_1E9DD35C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35C8);
  }
  return result;
}

unint64_t sub_1B69C3C58()
{
  unint64_t result = qword_1E9DD35D0;
  if (!qword_1E9DD35D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35D0);
  }
  return result;
}

unint64_t sub_1B69C3CB0()
{
  unint64_t result = qword_1E9DD35D8;
  if (!qword_1E9DD35D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35D8);
  }
  return result;
}

unint64_t sub_1B69C3D08()
{
  unint64_t result = qword_1E9DD35E0;
  if (!qword_1E9DD35E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35E0);
  }
  return result;
}

unint64_t sub_1B69C3D60()
{
  unint64_t result = qword_1E9DD35E8;
  if (!qword_1E9DD35E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35E8);
  }
  return result;
}

unint64_t sub_1B69C3DB8()
{
  unint64_t result = qword_1E9DD35F0;
  if (!qword_1E9DD35F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35F0);
  }
  return result;
}

unint64_t sub_1B69C3E10()
{
  unint64_t result = qword_1E9DD35F8;
  if (!qword_1E9DD35F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD35F8);
  }
  return result;
}

unint64_t sub_1B69C3E68()
{
  unint64_t result = qword_1E9DD3600;
  if (!qword_1E9DD3600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3600);
  }
  return result;
}

unint64_t sub_1B69C3EC0()
{
  unint64_t result = qword_1E9DD3608;
  if (!qword_1E9DD3608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3608);
  }
  return result;
}

unint64_t sub_1B69C3F18()
{
  unint64_t result = qword_1E9DD3610;
  if (!qword_1E9DD3610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3610);
  }
  return result;
}

uint64_t sub_1B69C3F6C(float a1, float a2)
{
  return sub_1B62FAE50((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float, float))sub_1B6C08E08, a1, a2);
}

uint64_t sub_1B69C3F84(void *a1, float a2, float a3)
{
  sub_1B69C4698(0, &qword_1E9DD3618, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C4644();
  sub_1B6E33A88();
  float v14 = a2;
  float v15 = a3;
  sub_1B62AA858();
  sub_1B62AA5EC(qword_1E9DD02C8);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B69C4110(uint64_t a1)
{
  unint64_t v2 = sub_1B69C4644();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69C414C(uint64_t a1)
{
  unint64_t v2 = sub_1B69C4644();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B69C4188(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_1B69C4474(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B69C41B4(void *a1)
{
  return sub_1B69C3F84(a1, *v1, v1[1]);
}

uint64_t sub_1B69C41D0()
{
  return type metadata accessor for ParticleTextureFrameInit.System();
}

double sub_1B69C41F0()
{
  sub_1B62D2B64();
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B6E77050;
  *(void *)(v0 + 32) = &type metadata for ParticleTextureFrame;
  *(void *)(v0 + 40) = &off_1F0F82BB8;
  return result;
}

uint64_t type metadata accessor for ParticleTextureFrameInit.System()
{
  return self;
}

uint64_t sub_1B69C425C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  swift_retain();
  uint64_t v2 = sub_1B695F250(v1);
  char v4 = v3;
  swift_release();
  float v6 = *((float *)&v2 + 1);
  float v5 = *(float *)&v2;
  if (v4)
  {
    float v5 = 0.0;
    float v6 = 0.0;
  }
  return sub_1B62FAE50((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float, float))sub_1B6C08DD8, v5, v6);
}

const char *sub_1B69C42E0()
{
  return "SetTextureFrame.CPU";
}

uint64_t type metadata accessor for ParticleTextureFrameInit.GPUSystem()
{
  return self;
}

const char *sub_1B69C431C()
{
  return "SetTextureFrame.GPU";
}

uint64_t sub_1B69C4330()
{
  return type metadata accessor for ParticleTextureFrameInit.GPUSystem();
}

uint64_t sub_1B69C4350(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  swift_retain();
  uint64_t v5 = sub_1B695F250(v3);
  char v7 = v6;
  swift_release();
  float v9 = *((float *)&v5 + 1);
  float v8 = *(float *)&v5;
  if (v7)
  {
    float v8 = 0.0;
    float v9 = 0.0;
  }
  *(float *)long long v18 = v8;
  *(float *)&v18[1] = v9;
  uint64_t v10 = *a1;
  if (*a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_texture_frame_uniforms(0);
    sub_1B6B594A8((uint64_t)v18, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B6786A24((uint64_t)a1);
  sub_1B6BFF388(v4, v2, v10 == 0, 0, (uint64_t)a1, 0xD00000000000001ALL, 0x80000001B6F40C30, 0);
  sub_1B6786A7C((uint64_t)a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for ParticleTextureFrameInit()
{
  return &type metadata for ParticleTextureFrameInit;
}

float sub_1B69C4474(void *a1)
{
  sub_1B69C4698(0, &qword_1EB980A50, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  float v9 = (char *)v11 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69C4644();
  sub_1B6E33A48();
  if (!v1)
  {
    sub_1B62AA858();
    sub_1B62AA5EC((unint64_t *)&qword_1EB980418);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    float v2 = *(float *)&v11[2];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B69C4644()
{
  unint64_t result = qword_1EB97F958;
  if (!qword_1EB97F958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F958);
  }
  return result;
}

void sub_1B69C4698(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B69C4644();
    unint64_t v7 = a3(a1, &type metadata for ParticleTextureFrameInit.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ParticleTextureFrameInit.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B69C4798);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleTextureFrameInit.CodingKeys()
{
  return &type metadata for ParticleTextureFrameInit.CodingKeys;
}

unint64_t sub_1B69C47D4()
{
  unint64_t result = qword_1E9DD3620;
  if (!qword_1E9DD3620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3620);
  }
  return result;
}

unint64_t sub_1B69C482C()
{
  unint64_t result = qword_1EB97F968;
  if (!qword_1EB97F968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F968);
  }
  return result;
}

unint64_t sub_1B69C4884()
{
  unint64_t result = qword_1EB97F960;
  if (!qword_1EB97F960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F960);
  }
  return result;
}

void sub_1B69C48D8()
{
}

uint64_t sub_1B69C497C()
{
  return type metadata accessor for ECSNode(0);
}

uint64_t type metadata accessor for ECSNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3628);
}

uint64_t sub_1B69C49A8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t sub_1B69C49CC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t sub_1B69C49F0(char a1)
{
  return (*(uint64_t (**)(void))(*(void *)v1 + 256))(a1 & 1);
}

uint64_t sub_1B69C4A20()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t sub_1B69C4A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_1B63BDDE0(0, (unint64_t *)&qword_1EB97D9C0, MEMORY[0x1E4F27990]);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(uint64_t **)(v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
  uint64_t v15 = swift_conformsToProtocol2();
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    char v17 = v14;
  }
  else {
    char v17 = 0;
  }
  if (v17)
  {
    uint64_t v18 = *v17;
    uint64_t v31 = v4;
    uint64_t v19 = v18;
    swift_retain();
    uint64_t v20 = sub_1B682A12C(1);
    uint64_t v30 = a4;
    uint64_t v21 = v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8))(a2, a3, v19, v16);
    uint64_t v22 = *(void *)(v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
    uint64_t v23 = v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    uint64_t v24 = sub_1B6E31118();
    uint64_t v25 = *(void *)(v24 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v12, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v12, 0, 1, v24);
    uint64_t v26 = *(void *)(v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
    unint64_t v27 = *(void *)(v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
    type metadata accessor for AuthoringNode();
    swift_allocObject();
    swift_bridgeObjectRetain();
    sub_1B6751DC0(v26, v27);
    uint64_t v13 = sub_1B6CE3580(v21, v22, (uint64_t)v12, v26, v27);
    swift_release();
    a4 = v30;
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = swift_retain();
  }
  *a4 = v13;
  return result;
}

uint64_t sub_1B69C4CF4()
{
  return 1701669204;
}

double sub_1B69C4D04@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0FA7940, a1);
}

unint64_t sub_1B69C4D14(char a1)
{
  if (a1) {
    return 0xD000000000000014;
  }
  else {
    return 0xD00000000000002DLL;
  }
}

uint64_t sub_1B69C4D50()
{
  return type metadata accessor for TimeNode(0);
}

uint64_t type metadata accessor for TimeNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3638);
}

uint64_t sub_1B69C4D7C()
{
  return 0x6D695461746C6544;
}

double sub_1B69C4D98@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0F5E730, a1);
}

unint64_t sub_1B69C4DA8(char a1)
{
  if (a1) {
    return 0xD000000000000012;
  }
  else {
    return 0xD00000000000002CLL;
  }
}

uint64_t sub_1B69C4DE4()
{
  return type metadata accessor for DeltaTimeNode(0);
}

uint64_t type metadata accessor for DeltaTimeNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3648);
}

uint64_t sub_1B69C4E0C()
{
  return 0x4674737269467349;
}

double sub_1B69C4E2C@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0F6C8A0, a1);
}

unint64_t sub_1B69C4E3C(char a1)
{
  if (a1) {
    return 0xD00000000000001CLL;
  }
  else {
    return 0xD000000000000030;
  }
}

uint64_t sub_1B69C4E78()
{
  return type metadata accessor for IsFirstFrameNode(0);
}

uint64_t type metadata accessor for IsFirstFrameNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3658);
}

uint64_t sub_1B69C4EA0@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1B69CBD44(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B69C4ECC()
{
  return sub_1B6E31BD8();
}

uint64_t sub_1B69C4F2C()
{
  return sub_1B6E31B38();
}

void sub_1B69C4F7C(void *a1@<X8>)
{
  *a1 = &unk_1F0FA79F8;
}

uint64_t sub_1B69C4F8C()
{
  uint64_t result = 1852399981;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E77617073;
      break;
    case 2:
      uint64_t result = 0x696C616974696E69;
      break;
    case 3:
    case 5:
      uint64_t result = 0x656C636974726170;
      break;
    case 4:
      uint64_t result = 0x657461647075;
      break;
    case 6:
      uint64_t result = 0x7265646E6572;
      break;
    case 7:
      uint64_t result = 0x72656767697274;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B69C5080()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 32);
  if (swift_conformsToProtocol2()) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2) {
    return 0x8000000000000020;
  }
  unint64_t result = sub_1B69B1CC4(v1);
  if ((~result & 0xF000000000000007) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E33B48();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    unint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

void *sub_1B69C5194(void *a1)
{
  uint64_t v2 = swift_allocObject();
  int v3 = (char *)a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
  uint64_t v5 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 8);
  uint64_t v4 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 16);
  uint64_t v6 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 40);
  char v7 = *((unsigned char *)a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 48);
  __int16 v8 = *(_WORD *)((char *)a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 50);
  uint64_t v9 = v2 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
  *(void *)uint64_t v9 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath);
  *(void *)(v9 + 8) = v5;
  *(void *)(v9 + 16) = v4;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(v3 + 24);
  *(void *)(v9 + 40) = v6;
  *(unsigned char *)(v9 + 48) = v7;
  *(_WORD *)(v9 + 50) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B69C522C()
{
  uint64_t v1 = sub_1B681F698();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B6E32738();
  sub_1B6E33B48();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_release();
  swift_bridgeObjectRelease_n();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B69C5328()
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v0 = sub_1B6E32738();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = swift_conformsToProtocol2();
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v1) {
    uint64_t v3 = v0;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3) {
    return (*(uint64_t (**)(void))(v2 + 16))();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B6E32738();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B67FACD4();
  return sub_1B6E31818();
}

uint64_t sub_1B69C5468()
{
  return 0;
}

uint64_t sub_1B69C55CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
  uint64_t result = *(void *)(v3 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath);
  sub_1B6B1BF68(result, 0, ObjectType, a2);
  *(void *)(v3 + v6) = result;
  return result;
}

uint64_t sub_1B69C5624()
{
  sub_1B69CC0B0(0, &qword_1EB980BA8, (uint64_t)&type metadata for ScriptParameter, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B6E77050;
  uint64_t v2 = v0 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 8);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 16);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 40);
  char v6 = *(unsigned char *)(v0 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 48);
  __int16 v7 = *(_WORD *)(v0 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 50);
  type metadata accessor for SetECSValueNode(0);
  if (swift_dynamicCastClass()) {
    char v8 = 2;
  }
  else {
    char v8 = 1;
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = *(void *)v2;
  *(void *)(v9 + 24) = v4;
  *(void *)(v9 + 32) = v3;
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(v2 + 24);
  *(void *)(v9 + 56) = v5;
  *(unsigned char *)(v9 + 64) = v6;
  *(_WORD *)(v9 + 66) = v7;
  *(void *)(v1 + 32) = v9 | 0x3000000000000000;
  *(unsigned char *)(v1 + 40) = v8;
  *(void *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 56) = 1;
  swift_bridgeObjectRetain();
  swift_retain();
  return v1;
}

uint64_t sub_1B69C5750(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A28();
  if (!v2)
  {
    sub_1B62C14BC(v12, v12[3]);
    sub_1B69CC208();
    sub_1B6E33518();
    uint64_t v4 = v1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
    *(void *)uint64_t v4 = v5;
    *(void *)(v4 + 8) = v6;
    *(_OWORD *)(v4 + 16) = v7;
    *(void *)(v4 + 32) = v8;
    *(void *)(v4 + 40) = v9;
    *(unsigned char *)(v4 + 48) = v10;
    *(_WORD *)(v4 + 50) = v11;
    swift_release();
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
  }
  return result;
}

void sub_1B69C5854()
{
}

uint64_t sub_1B69C5884()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69C58C8()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69C5998()
{
  return type metadata accessor for _ECSValueNode(0);
}

uint64_t type metadata accessor for _ECSValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3668);
}

uint64_t sub_1B69C59C0()
{
  return sub_1B69C8F1C();
}

uint64_t sub_1B69C59CC(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v2, v3);
  sub_1B69CB74C();
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B69C5AAC(void *a1)
{
  return sub_1B69C5750(a1);
}

uint64_t sub_1B69C5AC4@<X0>(uint64_t *a1@<X8>)
{
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E76B30;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x8000000000000008;
  *(void *)(v3 + 32) = v4 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1B69C5080();
  *(void *)(v3 + 40) = v5 | 0x6000000000000000;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E77050;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0x8000000000000008;
  *(void *)(v6 + 32) = v7 | 0x6000000000000000;
  sub_1B69CC054(0, (unint64_t *)&qword_1E9DD1D40, (unint64_t *)&qword_1EB980110, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E76B30;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 16);
  *(void *)(v8 + 48) = *(void *)(v1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 8);
  *(void *)(v8 + 56) = v9;
  *a1 = v3;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1F0F6A218;
  a1[3] = v8;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  a1[4] = MEMORY[0x1E4FBC860];
  a1[5] = v10;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B69C5C70()
{
  return sub_1B6C7E550();
}

uint64_t sub_1B69C5C84()
{
  return type metadata accessor for SetECSValueNode(0);
}

uint64_t type metadata accessor for SetECSValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3678);
}

uint64_t sub_1B69C5CB0()
{
  return type metadata accessor for InspectorSetECSValueNode(0);
}

uint64_t type metadata accessor for InspectorSetECSValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3688);
}

double sub_1B69C5CD8@<D0>(uint64_t a1@<X8>)
{
  sub_1B69CC0B0(0, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType, MEMORY[0x1E4FBBE00]);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  *(void *)(inited + 32) = sub_1B69C5080();
  sub_1B682AF48(inited, v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_1B69CC054(0, (unint64_t *)&qword_1E9DD1D40, (unint64_t *)&qword_1EB980110, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E77050;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 16);
  *(void *)(v4 + 32) = *(void *)(v1 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath + 8);
  *(void *)(v4 + 40) = v5;
  uint64_t v6 = v11;
  uint64_t v12 = v10;
  swift_bridgeObjectRetain();
  sub_1B62D8C3C((uint64_t)&v12);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v6;
  return result;
}

uint64_t sub_1B69C5E0C(char a1)
{
  return sub_1B698F298(0, 0, a1 & 1);
}

uint64_t sub_1B69C5E1C()
{
  return type metadata accessor for GetECSValueNode(0);
}

uint64_t type metadata accessor for GetECSValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3698);
}

uint64_t sub_1B69C5E44()
{
  return swift_updateClassMetadata2();
}

void *sub_1B69C5E7C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = (char *)a1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath;
  uint64_t v4 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 8);
  uint64_t v5 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 32);
  char v6 = *((unsigned char *)a1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 40);
  __int16 v7 = *(_WORD *)((char *)a1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 42);
  uint64_t v8 = v2 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath;
  *(void *)uint64_t v8 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath);
  *(void *)(v8 + 8) = v4;
  *(_OWORD *)(v8 + 16) = *((_OWORD *)v3 + 1);
  *(void *)(v8 + 32) = v5;
  *(unsigned char *)(v8 + 40) = v6;
  *(_WORD *)(v8 + 42) = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B69C5F0C()
{
  sub_1B69CC0B0(0, &qword_1EB980BA8, (uint64_t)&type metadata for ScriptParameter, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B6E77050;
  uint64_t v2 = (char *)v0 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath;
  uint64_t v4 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath);
  uint64_t v3 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 8);
  uint64_t v5 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 32);
  char v6 = *((unsigned char *)v0 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 40);
  __int16 v7 = *(_WORD *)((char *)v0 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 42);
  if (*v0 == _TtC3VFX20SetParticleValueNode) {
    char v8 = 2;
  }
  else {
    char v8 = 1;
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = *((_OWORD *)v2 + 1);
  *(void *)(v9 + 48) = v5;
  *(unsigned char *)(v9 + 56) = v6;
  *(_WORD *)(v9 + 58) = v7;
  *(unsigned char *)(v9 + 60) = 5;
  *(void *)(v1 + 32) = v9 | 0x9000000000000000;
  *(unsigned char *)(v1 + 40) = v8;
  *(void *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 56) = 1;
  swift_bridgeObjectRetain();
  swift_retain();
  return v1;
}

void sub_1B69C6054()
{
}

uint64_t sub_1B69C6084()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69C60C8()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69C6198()
{
  return type metadata accessor for _ParticleValueNode(0);
}

uint64_t type metadata accessor for _ParticleValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD36A8);
}

uint64_t sub_1B69C61C0()
{
  return sub_1B69C8F1C();
}

uint64_t sub_1B69C61CC(void *a1)
{
  return sub_1B6C0C6E4();
}

uint64_t sub_1B69C6270(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B690601C();
  uint64_t result = sub_1B6C0C780();
  if (!v2)
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath;
    *(void *)uint64_t v4 = v5;
    *(_OWORD *)(v4 + 8) = v6;
    *(void *)(v4 + 24) = v7;
    *(void *)(v4 + 32) = v8;
    *(unsigned char *)(v4 + 40) = v9;
    *(_WORD *)(v4 + 42) = v10;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B69C6338()
{
  return sub_1B69C64DC(0x6974726150746553);
}

uint64_t sub_1B69C634C@<X0>(uint64_t *a1@<X8>)
{
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E76B30;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x8000000000000008;
  *(void *)(v3 + 32) = v4 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1B69B2708(*(void *)(v1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 24));
  *(void *)(v3 + 40) = v5 | 0x6000000000000000;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000008;
  *(void *)(v6 + 32) = result | 0x6000000000000000;
  *a1 = v3;
  a1[1] = v6;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  a1[2] = (uint64_t)&unk_1F0F83E50;
  a1[3] = v8;
  a1[4] = v8;
  a1[5] = v8;
  return result;
}

uint64_t sub_1B69C648C()
{
  return sub_1B6C7E868();
}

uint64_t sub_1B69C649C()
{
  return type metadata accessor for SetParticleValueNode(0);
}

uint64_t type metadata accessor for SetParticleValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD36B8);
}

uint64_t sub_1B69C64C8()
{
  return sub_1B69C64DC(0x6974726150746547);
}

uint64_t sub_1B69C64DC(uint64_t a1)
{
  uint64_t v1 = sub_1B6E32738();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t))(result + 16))(v1, result);
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1B69C65A8@<D0>(_OWORD *a1@<X8>)
{
  sub_1B69CC0B0(0, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType, MEMORY[0x1E4FBBE00]);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  *(void *)(inited + 32) = sub_1B69B2708(*(void *)(v1 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath + 24));
  sub_1B682AF48(inited, v6);
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v4 = v6[1];
  *a1 = v6[0];
  a1[1] = v4;
  double result = *(double *)&v7;
  a1[2] = v7;
  return result;
}

uint64_t sub_1B69C6670()
{
  return type metadata accessor for GetParticleValueNode(0);
}

uint64_t type metadata accessor for GetParticleValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD36C8);
}

uint64_t sub_1B69C6698()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69C66D0@<X0>(uint64_t *a1@<X8>)
{
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000008;
  *(void *)(v2 + 32) = result | 0x6000000000000000;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1F0FA2DC0;
  a1[3] = v4;
  a1[4] = v4;
  a1[5] = v4;
  return result;
}

uint64_t sub_1B69C677C()
{
  return type metadata accessor for _OnNode(0);
}

uint64_t type metadata accessor for _OnNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD36D8);
}

uint64_t sub_1B69C67A4()
{
  return 0x6574616470556E4FLL;
}

uint64_t sub_1B69C67BC()
{
  return type metadata accessor for OnUpdateNode(0);
}

uint64_t type metadata accessor for OnUpdateNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD36E8);
}

uint64_t sub_1B69C67E4()
{
  return 0x4674737269466E4FLL;
}

uint64_t sub_1B69C6804()
{
  return type metadata accessor for OnFirstFrameNode(0);
}

uint64_t type metadata accessor for OnFirstFrameNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD36F8);
}

uint64_t sub_1B69C682C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69C6864()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX19OnParticleStageNode_stage);
  if (v1 == 3) {
    return 0x6369747261506E4FLL;
  }
  if (v1 == 5) {
    return 0xD000000000000010;
  }
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

void *sub_1B69C6928(void *a1)
{
  *(unsigned char *)(swift_allocObject() + OBJC_IVAR____TtC3VFX19OnParticleStageNode_stage) = *((unsigned char *)a1
                                                                                      + OBJC_IVAR____TtC3VFX19OnParticleStageNode_stage);
  return sub_1B682A2AC(a1);
}

void sub_1B69C6974()
{
}

uint64_t sub_1B69C69A4()
{
  return type metadata accessor for OnParticleStageNode(0);
}

uint64_t type metadata accessor for OnParticleStageNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3708);
}

uint64_t sub_1B69C69CC()
{
  return sub_1B69C8F1C();
}

uint64_t sub_1B69C69D8(void *a1)
{
  return sub_1B6C0C6E4();
}

uint64_t sub_1B69C6A50(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69CB7A0();
  uint64_t result = sub_1B6C0C780();
  if (!v2) {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX19OnParticleStageNode_stage) = v4;
  }
  return result;
}

unint64_t sub_1B69C6AD4()
{
  sub_1B63BDDE0(0, (unint64_t *)&qword_1EB97D9D0, MEMORY[0x1E4F27A78]);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = &v14[-v2];
  unint64_t v4 = sub_1B6E31798();
  unint64_t v6 = v5;
  unint64_t v15 = v4;
  unint64_t v16 = v5;
  strcpy(v14, "VFXTriggerType");
  v14[15] = -18;
  uint64_t v7 = sub_1B6E31128();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  sub_1B633AF88();
  unint64_t v8 = sub_1B6E32658();
  unint64_t v10 = v9;
  char v12 = v11;
  sub_1B6816864((uint64_t)v3);
  if ((v12 & 1) == 0)
  {
    unint64_t v4 = sub_1B69CB890(v8, v10, 28239, 0xE200000000000000, v4, v6);
    swift_bridgeObjectRelease();
  }
  return v4;
}

void *sub_1B69C6C6C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void **)((char *)a1 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType);
  *(void *)(v2 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = v3;
  id v4 = v3;
  return sub_1B682A2AC(a1);
}

void *sub_1B69C6CBC()
{
  uint64_t v1 = v0[4];
  sub_1B68289A0(v0[3]);
  uint64_t v2 = swift_bridgeObjectRelease();
  (*(void (**)(void *__return_ptr, uint64_t))(*v0 + 152))(v21, v2);
  uint64_t v3 = v22;
  uint64_t v28 = v21[0];
  v29[0] = v22;
  swift_bridgeObjectRetain();
  sub_1B62D8C3C((uint64_t)&v28);
  uint64_t v27 = v21[1];
  sub_1B62D8C3C((uint64_t)&v27);
  uint64_t v26 = v21[2];
  sub_1B62D8C3C((uint64_t)&v26);
  uint64_t v25 = v21[3];
  sub_1B62D8C3C((uint64_t)&v25);
  sub_1B62D8C3C((uint64_t)v29);
  uint64_t v24 = v23;
  sub_1B62D8C3C((uint64_t)&v24);
  unint64_t v4 = *(void *)(v1 + 16);
  if (v4 != *(void *)(v3 + 16)) {
    goto LABEL_18;
  }
  if (v4 >= 2)
  {
    uint64_t v7 = 0;
    unint64_t v20 = v4 - 1;
    unint64_t v8 = (unint64_t *)(v3 + 56);
    uint64_t v9 = v1 + 40;
    unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v10 = *(void *)(v9 + 8 * v7);
      unint64_t v11 = *v8;
      if (*v8)
      {
        uint64_t v12 = *(v8 - 1);
        sub_1B67C52A4(*(void *)(v9 + 8 * v7));
        unint64_t v13 = v11;
      }
      else
      {
        sub_1B67C52A4(v10);
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        uint64_t v12 = 0x6D61726170;
        unint64_t v13 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      sub_1B69B27D0(v10);
      if (!v14)
      {
        sub_1B6E328C8();
        sub_1B6E31948();
        sub_1B6E32B18();
        while (1)
        {
          sub_1B6E32BE8();
          __break(1u);
LABEL_18:
          sub_1B6E328C8();
          swift_bridgeObjectRelease();
          sub_1B6E33098();
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          sub_1B6E31948();
          sub_1B6E33098();
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          sub_1B6E31948();
        }
      }
      uint64_t v15 = sub_1B665CC74();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v12;
      *(void *)(v16 + 24) = v13;
      *(void *)(v16 + 32) = v15;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v5 = sub_1B68C0FD8(0, v5[2] + 1, 1, v5);
      }
      unint64_t v18 = v5[2];
      unint64_t v17 = v5[3];
      if (v18 >= v17 >> 1) {
        unint64_t v5 = sub_1B68C0FD8(v17 > 1, v18 + 1, 1, v5);
      }
      _OWORD v5[2] = v18 + 1;
      uint64_t v19 = &v5[4 * v18];
      _OWORD v19[4] = v16 | 0xE000000000000000;
      *((unsigned char *)v19 + 40) = 1;
      v19[6] = 0;
      *((unsigned char *)v19 + 56) = 1;
      swift_release();
      sub_1B678FC34(v10);
      ++v7;
      v8 += 2;
    }
    while (v20 != v7);
  }
  else
  {
    unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  sub_1B62D8C3C((uint64_t)v29);
  return v5;
}

uint64_t sub_1B69C70E4(char a1)
{
  char v1 = a1 & 1;
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_1B6D49408(v2, v1);
  swift_release();
  return v3;
}

uint64_t sub_1B69C7134(uint64_t a1)
{
  unint64_t v32 = *(void *)(*(void *)(a1 + 32) + 16);
  if (v32 >= 2)
  {
    char v1 = (void *)MEMORY[0x1E4FBC860];
    for (uint64_t i = 1; i != v32; uint64_t i = v21 + 2)
    {
      sub_1B6E328C8();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      sub_1B6E33098();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      uint64_t v21 = i - 1;
      sub_1B6E33098();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      sub_1B69CC0B0(0, &qword_1E9DD1DE0, (uint64_t)&type metadata for CodeEmitter.Code, MEMORY[0x1E4FBBE00]);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_1B6E77050;
      *(void *)(v22 + 32) = 0;
      unint64_t v23 = v22 + 32;
      *(void *)(v22 + 40) = 0xE000000000000000;
      sub_1B69CC054(0, (unint64_t *)&qword_1E9DD1DD0, &qword_1E9DD01A0, (uint64_t)&type metadata for CodeEmitter.Code, MEMORY[0x1E4FBB320]);
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
      *(void *)(inited + 32) = v22;
      uint64_t v25 = *(void *)(v22 + 16);
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_1B68C3500(0, v25, 1, MEMORY[0x1E4FBC860]);
      uint64_t v27 = v26;
      if (*(void *)(v22 + 16))
      {
        unint64_t v28 = (unint64_t)&v26[4 * v26[2] + 4];
        if (v23 < v28 + 32 * v25 && v28 < v23 + 32 * v25)
        {
          swift_release();
          goto LABEL_45;
        }
        swift_arrayInitWithCopy();
        if (v25) {
          v27[2] += v25;
        }
      }
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      sub_1B69CC0B0(0, &qword_1E9DD01A0, (uint64_t)&type metadata for CodeEmitter.Code, MEMORY[0x1E4FBB320]);
      swift_arrayDestroy();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v1 = sub_1B68C3618(0, v1[2] + 1, 1, v1);
      }
      unint64_t v31 = v1[2];
      unint64_t v30 = v1[3];
      unint64_t v2 = v31 + 1;
      if (v31 >= v30 >> 1) {
        char v1 = sub_1B68C3618(v30 > 1, v31 + 1, 1, v1);
      }
      _OWORD v1[2] = v2;
      v1[v31 + 4] = v27;
    }
  }
  else
  {
    char v1 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v2 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    if (!v2) {
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v5 = v1[v4 + 4];
    uint64_t v6 = *(void *)(v5 + 16);
    uint64_t v7 = v3[2];
    uint64_t v8 = v7 + v6;
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v8 <= v3[3] >> 1)
    {
      if (!*(void *)(v5 + 16)) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v7 <= v8) {
        uint64_t v10 = v7 + v6;
      }
      else {
        uint64_t v10 = v7;
      }
      uint64_t v3 = sub_1B68C3500(isUniquelyReferenced_nonNull_native, v10, 1, v3);
      if (!*(void *)(v5 + 16)) {
        goto LABEL_4;
      }
    }
    unint64_t v11 = (unint64_t)&v3[4 * v3[2] + 4];
    if (v5 + 32 < v11 + 32 * v6 && v11 < v5 + 32 + 32 * v6) {
      goto LABEL_45;
    }
    swift_arrayInitWithCopy();
    if (v6) {
      v3[2] += v6;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    ++v4;
  }
  while (v2 != v4);
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  sub_1B69CC054(0, (unint64_t *)&qword_1E9DD1DD0, &qword_1E9DD01A0, (uint64_t)&type metadata for CodeEmitter.Code, MEMORY[0x1E4FBB320]);
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B6E77050;
  *(void *)(v13 + 32) = v3;
  uint64_t v14 = v3[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1B68C3500(0, v14, 1, MEMORY[0x1E4FBC860]);
  uint64_t v16 = v15;
  if (!v3[2]) {
    goto LABEL_29;
  }
  unint64_t v17 = (unint64_t)&v15[4 * v15[2] + 4];
  if ((unint64_t)(v3 + 4) >= v17 + 32 * v14 || v17 >= (unint64_t)&v3[4 * v14 + 4])
  {
    swift_arrayInitWithCopy();
    if (v14) {
      v16[2] += v14;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B69CC0B0(0, &qword_1E9DD01A0, (uint64_t)&type metadata for CodeEmitter.Code, MEMORY[0x1E4FBB320]);
    swift_arrayDestroy();
    return (uint64_t)v16;
  }
LABEL_45:
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B69C770C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69C7764()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B69C7780()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69C77D4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B69C7828(void *a1@<X8>)
{
  *a1 = 0x707954746E657665;
  a1[1] = 0xE900000000000065;
}

uint64_t sub_1B69C7848()
{
  return 0x707954746E657665;
}

uint64_t sub_1B69C7864@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B69C78BC(uint64_t a1)
{
  unint64_t v2 = sub_1B69CC134();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69C78F8(uint64_t a1)
{
  unint64_t v2 = sub_1B69CC134();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69C7934(void *a1)
{
  uint64_t v2 = v1;
  sub_1B69CC654(0, &qword_1E9DD3888, (uint64_t (*)(void))sub_1B69CC134, (uint64_t)&type metadata for OnTriggerNode.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v11 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69CC134();
  sub_1B6E33A88();
  v11[1] = *(void *)(v2 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType);
  type metadata accessor for VFXTriggerType(0);
  sub_1B69CB848(&qword_1E9DD3890, type metadata accessor for VFXTriggerType);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_1B69C7AF0(void *a1)
{
  uint64_t v3 = v1;
  sub_1B69CC654(0, &qword_1E9DD3878, (uint64_t (*)(void))sub_1B69CC134, (uint64_t)&type metadata for OnTriggerNode.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69CC134();
  sub_1B6E33A48();
  if (!v2)
  {
    type metadata accessor for VFXTriggerType(0);
    sub_1B69CB848(&qword_1E9DD24F0, type metadata accessor for VFXTriggerType);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    unint64_t v11 = *(void **)(v3 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType);
    *(void *)(v3 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = v12[1];
  }
}

void sub_1B69C7CE4()
{
}

void sub_1B69C7D14()
{
}

uint64_t sub_1B69C7D24()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1B69C7DE8()
{
  return type metadata accessor for OnTriggerNode(0);
}

uint64_t type metadata accessor for OnTriggerNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3718);
}

uint64_t sub_1B69C7E10()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69C7E54(void *a1)
{
  return sub_1B69C7934(a1);
}

void sub_1B69C7E6C(void *a1)
{
}

uint64_t sub_1B69C7E84@<X0>(uint64_t *a1@<X8>)
{
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x8000000000000008;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = 1;
  *(void *)(v5 + 16) = v6 | 0x5000000000000000;
  *(void *)(v4 + 16) = v5;
  *(void *)(v2 + 40) = v4 | 0x6000000000000000;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B6E85730;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0x8000000000000008;
  *(void *)(v7 + 32) = v8 | 0x6000000000000000;
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B6E8F480;
  *(void *)(v9 + 16) = v10 | 0x1000000000000000;
  *(void *)(v7 + 40) = v9 | 0x6000000000000000;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B6E8F480;
  *(void *)(v11 + 16) = v12 | 0x1000000000000000;
  *(void *)(v7 + 48) = v11 | 0x6000000000000000;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000050;
  *(void *)(v7 + 56) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v7;
  a1[2] = (uint64_t)&unk_1F0F78608;
  a1[3] = (uint64_t)&unk_1F0F78568;
  uint64_t v14 = MEMORY[0x1E4FBC860];
  a1[4] = (uint64_t)&unk_1F0F785A8;
  a1[5] = v14;
  return result;
}

uint64_t sub_1B69C80B0()
{
  return type metadata accessor for OnMouseTriggerNode(0);
}

uint64_t type metadata accessor for OnMouseTriggerNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3728);
}

uint64_t sub_1B69C80D8@<X0>(uint64_t *a1@<X8>)
{
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x8000000000000008;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E76B30;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0x8000000000000008;
  *(void *)(v4 + 32) = v5 | 0x6000000000000000;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000030;
  *(void *)(v4 + 40) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  a1[2] = (uint64_t)&unk_1F0F6CC68;
  a1[3] = v7;
  a1[4] = (uint64_t)&unk_1F0F6CC28;
  a1[5] = v7;
  return result;
}

uint64_t sub_1B69C8200()
{
  return type metadata accessor for OnKeyTriggerNode(0);
}

uint64_t type metadata accessor for OnKeyTriggerNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3738);
}

uint64_t sub_1B69C8228@<X0>(uint64_t *a1@<X8>)
{
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x8000000000000008;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x8000000000000030;
  *(void *)(v2 + 40) = v4 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000008;
  *(void *)(v5 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v5;
  a1[2] = (uint64_t)&unk_1F0F721A8;
  a1[3] = (uint64_t)&unk_1F0F72138;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  a1[4] = (uint64_t)&unk_1F0F72178;
  a1[5] = v7;
  return result;
}

uint64_t sub_1B69C8358()
{
  return type metadata accessor for OnTickTriggerNode(0);
}

uint64_t type metadata accessor for OnTickTriggerNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3748);
}

uint64_t sub_1B69C8380()
{
  return 6778700;
}

uint64_t sub_1B69C8390@<X0>(uint64_t *a1@<X8>)
{
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  *(void *)(v2 + 32) = v3 | 0x4000000000000000;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(v4 + 32) = result | 0x4000000000000000;
  *a1 = v2;
  a1[1] = v4;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  a1[2] = (uint64_t)&unk_1F0FA9A28;
  a1[3] = v6;
  a1[4] = v6;
  a1[5] = v6;
  return result;
}

uint64_t sub_1B69C8488()
{
  uint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v1 + 32);
  sub_1B68289A0(v1);
  sub_1B67C52A4(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6E328C8();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6C2F4C4(v2);
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B678FC34(v2);
  return 0;
}

void *sub_1B69C85D0()
{
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = (void *)((char *)v0 + OBJC_IVAR____TtC3VFX23LogDebugPassthroughNode_message);
  *uint64_t v1 = 0x65756C6156796DLL;
  v1[1] = 0xE700000000000000;
  v0[2] = MEMORY[0x1E4FBC860];
  v0[3] = 0;
  v0[4] = 0;
  sub_1B6E31108();
  return v0;
}

void *sub_1B69C864C(void *a1)
{
  unint64_t v2 = (void *)(swift_allocObject() + OBJC_IVAR____TtC3VFX23LogDebugPassthroughNode_message);
  *unint64_t v2 = 0x65756C6156796DLL;
  v2[1] = 0xE700000000000000;
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B69C86AC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69C86C0()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69C8788()
{
  return type metadata accessor for LogDebugPassthroughNode(0);
}

uint64_t type metadata accessor for LogDebugPassthroughNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3758);
}

uint64_t sub_1B69C87B0()
{
  return sub_1B69C8F1C();
}

uint64_t sub_1B69C87BC(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v2, v3);
  swift_bridgeObjectRetain();
  sub_1B6E33578();
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B69C8878(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A28();
  if (!v2)
  {
    sub_1B62C14BC(v7, v7[3]);
    uint64_t v4 = sub_1B6E334C8();
    uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX23LogDebugPassthroughNode_message);
    *uint64_t v5 = v4;
    v5[1] = v6;
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  }
  return result;
}

uint64_t sub_1B69C8934@<X0>(uint64_t *a1@<X8>)
{
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x8000000000000008;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  *(void *)(v2 + 40) = 0x8000000000000000;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000008;
  *(void *)(v4 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  a1[2] = (uint64_t)&unk_1F0F5A910;
  a1[3] = v6;
  a1[4] = v6;
  a1[5] = v6;
  return result;
}

uint64_t sub_1B69C8A38()
{
  uint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v1 + 40);
  sub_1B68289A0(v1);
  sub_1B67C52A4(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6E328C8();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6C2F4C4(v2);
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B678FC34(v2);
  return 0;
}

uint64_t sub_1B69C8B80()
{
  return type metadata accessor for LogDebugNode(0);
}

uint64_t type metadata accessor for LogDebugNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3768);
}

uint64_t sub_1B69C8BA8(uint64_t a1)
{
  unint64_t v2 = sub_1B69CC6BC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69C8BE4(uint64_t a1)
{
  unint64_t v2 = sub_1B69CC6BC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69C8C20(void *a1)
{
  sub_1B69CC654(0, &qword_1E9DD38D0, (uint64_t (*)(void))sub_1B69CC6BC, (uint64_t)&type metadata for GraphSideStorage.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69CC6BC();
  sub_1B6E33A88();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void *sub_1B69C8D60()
{
  uint64_t v0 = (void *)swift_allocObject();
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = 0xFFFFFFFFLL;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B6E31108();
  return v0;
}

void *sub_1B69C8DC8(void *a1)
{
  *(void *)(swift_allocObject() + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = *(void *)((char *)a1
                                                                                             + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity);
  return sub_1B682A2AC(a1);
}

unint64_t sub_1B69C8E14(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2);
  uint64_t v6 = v2 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity;
  if (v5)
  {
    LODWORD(v7) = 0;
    unint64_t result = 0xFFFFFFFFLL;
  }
  else
  {
    unint64_t result = *(void *)v6;
    sub_1B6B1BF68(*(void *)v6, 0, ObjectType, a2);
    unint64_t v7 = HIDWORD(result);
  }
  *(_DWORD *)uint64_t v6 = result;
  *(_DWORD *)(v6 + 4) = v7;
  return result;
}

void sub_1B69C8E9C()
{
}

uint64_t sub_1B69C8EE8()
{
  return type metadata accessor for ECSStorageNode(0);
}

uint64_t type metadata accessor for ECSStorageNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3778);
}

uint64_t sub_1B69C8F10()
{
  return sub_1B69C8F1C();
}

uint64_t sub_1B69C8F1C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69C8F58()
{
  return 0x7865546576727543;
}

double sub_1B69C8F78@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0F6B8B0, a1);
}

uint64_t sub_1B69C8F88()
{
  uint64_t v0 = swift_allocObject();
  sub_1B69C8FC0();
  return v0;
}

void *sub_1B69C8FC0()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC3VFX16CurveTextureNode_curve;
  swift_retain();
  *(void *)uint64_t v1 = sub_1B6D3EC54((uint64_t)&unk_1F0F6B8F0);
  *((void *)v1 + 1) = v2;
  *((void *)v1 + 2) = 0;
  v1[24] = 1;
  swift_release();
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = 0xFFFFFFFFLL;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v3;
  sub_1B6E31108();
  return v0;
}

void *sub_1B69C904C(void *a1)
{
  return sub_1B69C9088(a1);
}

void *sub_1B69C9088(void *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC3VFX16CurveTextureNode_curve;
  swift_retain();
  *(void *)uint64_t v3 = sub_1B6D3EC54((uint64_t)&unk_1F0F6B880);
  *(void *)(v3 + 8) = v4;
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 1;
  uint64_t v5 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX16CurveTextureNode_curve + 8);
  uint64_t v6 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX16CurveTextureNode_curve + 16);
  char v7 = *((unsigned char *)a1 + OBJC_IVAR____TtC3VFX16CurveTextureNode_curve + 24);
  *(void *)uint64_t v3 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX16CurveTextureNode_curve);
  *(void *)(v3 + 8) = v5;
  *(void *)(v3 + 16) = v6;
  *(unsigned char *)(v3 + 24) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = OBJC_IVAR____TtC3VFX14ECSStorageNode_entity;
  *(void *)(v1 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = 0xFFFFFFFFLL;
  *(void *)(v1 + v8) = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity);

  return sub_1B682A2AC(a1);
}

uint64_t sub_1B69C9178()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69C91C8()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69C92AC()
{
  return type metadata accessor for CurveTextureNode(0);
}

uint64_t type metadata accessor for CurveTextureNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3788);
}

uint64_t sub_1B69C92D4()
{
  return sub_1B69C9804();
}

uint64_t sub_1B69C92E0(void *a1)
{
  return sub_1B6C0C6E4();
}

uint64_t sub_1B69C93AC(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B665D590();
  sub_1B69CB848((unint64_t *)&qword_1EB97FD90, (void (*)(uint64_t))sub_1B665D590);
  uint64_t result = sub_1B6C0C780();
  if (!v2)
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC3VFX16CurveTextureNode_curve;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v6;
    *(unsigned char *)(v4 + 24) = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1B69C94A8()
{
  return 0xD000000000000010;
}

double sub_1B69C94C4@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0F7FD98, a1);
}

void *sub_1B69C94D4()
{
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp;
  sub_1B629CD98();
  uint64_t v2 = (_OWORD *)swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  v2[1] = xmmword_1B6E76B30;
  v2[2] = _Q1;
  v2[3] = xmmword_1B6E4F370;
  *(void *)uint64_t v1 = v2;
  *((void *)v1 + 1) = &unk_1F0FA83D8;
  v1[16] = 1;
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = 0xFFFFFFFFLL;
  v0[2] = MEMORY[0x1E4FBC860];
  v0[3] = 0;
  v0[4] = 0;
  sub_1B6E31108();
  return v0;
}

void *sub_1B69C958C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp;
  uint64_t v4 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp + 8);
  char v5 = *((unsigned char *)a1 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp + 16);
  *(void *)uint64_t v3 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp);
  *(void *)(v3 + 8) = v4;
  *(unsigned char *)(v3 + 16) = v5;
  *(void *)(v2 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = *(void *)((char *)a1
                                                                            + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B69C960C()
{
  sub_1B69CC0B0(0, &qword_1EB980BA8, (uint64_t)&type metadata for ScriptParameter, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B6E77050;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = *(void *)(v0 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity);
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 16908288;
  *(void *)(v1 + 32) = v2 | 0x7000000000000000;
  *(unsigned char *)(v1 + 40) = 1;
  *(void *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 56) = 1;
  return v1;
}

uint64_t sub_1B69C96BC()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69C9700()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69C97D0()
{
  return type metadata accessor for ColorRampTextureNode(0);
}

uint64_t type metadata accessor for ColorRampTextureNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3798);
}

uint64_t sub_1B69C97F8()
{
  return sub_1B69C9804();
}

uint64_t sub_1B69C9804()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69C9840(void *a1)
{
  return sub_1B6C0C6E4();
}

uint64_t sub_1B69C98CC(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B639D880();
  uint64_t result = sub_1B6C0C780();
  if (!v2)
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp;
    *(_OWORD *)uint64_t v4 = v5;
    *(unsigned char *)(v4 + 16) = v6;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double sub_1B69C997C@<D0>(_OWORD *a1@<X8>)
{
  switch(*(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind))
  {
    case 1:
      sub_1B69CC0B0(0, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType, MEMORY[0x1E4FBBE00]);
      unint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
      uint64_t v4 = swift_allocObject();
      char v5 = 1;
      goto LABEL_6;
    case 2:
      sub_1B69CC0B0(0, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType, MEMORY[0x1E4FBBE00]);
      unint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
      uint64_t v4 = swift_allocObject();
      char v5 = 2;
      goto LABEL_6;
    case 3:
      sub_1B69CC0B0(0, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType, MEMORY[0x1E4FBBE00]);
      unint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
      uint64_t v4 = swift_allocObject();
      char v5 = 3;
LABEL_6:
      *(unsigned char *)(v4 + 16) = v5;
      break;
    default:
      sub_1B69CC0B0(0, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType, MEMORY[0x1E4FBBE00]);
      unint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
      uint64_t v4 = swift_allocObject();
      *(unsigned char *)(v4 + 16) = 0;
      break;
  }
  *(void *)(inited + 32) = v4 | 0x4000000000000000;
  sub_1B682AF48(inited, v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  double result = *(double *)v9;
  long long v7 = v9[1];
  long long v8 = v9[2];
  *a1 = v9[0];
  a1[1] = v7;
  a1[2] = v8;
  return result;
}

uint64_t sub_1B69C9BB8()
{
  return 0x7341797469746E45;
}

void *sub_1B69C9BD8(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind) = *((unsigned char *)a1
                                                                + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind);
  *(void *)(v2 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity) = *(void *)((char *)a1
                                                                             + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity);
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B69C9C34()
{
  return 0x3A797469746E65;
}

uint64_t sub_1B69C9C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = OBJC_IVAR____TtC3VFX15EntityAssetNode_entity;
  uint64_t result = *(void *)(v3 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity);
  sub_1B6B1BF68(result, 0, ObjectType, a2);
  *(void *)(v3 + v6) = result;
  return result;
}

uint64_t sub_1B69C9CF0()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind)) {
    return 0;
  }
  else {
    return 3;
  }
}

uint64_t sub_1B69C9D0C(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  LOBYTE(v6) = *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind);
  sub_1B62C550C((uint64_t)v4, v5);
  sub_1B69CBF7C();
  sub_1B6E332B8();
  if (!v2)
  {
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity);
    sub_1B62C550C((uint64_t)v4, v5);
    sub_1B6657A10();
    sub_1B6E332B8();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B69C9E10(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A18();
  if (!v2)
  {
    sub_1B62C550C((uint64_t)v4, v5);
    sub_1B69CBF28();
    sub_1B6E33168();
    *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind) = v6;
    sub_1B62C550C((uint64_t)v4, v5);
    sub_1B62B1EA8();
    sub_1B6E33168();
    *(void *)(v1 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity) = v6;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
  }
  return result;
}

void sub_1B69C9F2C()
{
}

uint64_t sub_1B69C9F5C()
{
  return type metadata accessor for EntityAssetNode(0);
}

uint64_t type metadata accessor for EntityAssetNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD37A8);
}

uint64_t sub_1B69C9F84()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69C9FD0(void *a1)
{
  return sub_1B69C9D0C(a1);
}

uint64_t sub_1B69C9FE8(void *a1)
{
  return sub_1B69C9E10(a1);
}

unint64_t sub_1B69CA000()
{
  return 0xD000000000000013;
}

uint64_t sub_1B69CA01C()
{
  return type metadata accessor for ImplicitEntityAssetNode(0);
}

uint64_t type metadata accessor for ImplicitEntityAssetNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD37B8);
}

uint64_t sub_1B69CA044()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69CA07C()
{
  strcpy((char *)v1, "ImportError: ");
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  return v1[0];
}

uint64_t sub_1B69CA100@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_1B6640874(0x8000000000000000, *(void *)(v1 + OBJC_IVAR____TtC3VFX15ImportErrorNode_inputCount));
  uint64_t result = sub_1B6E31C98();
  *(void *)(result + 16) = 1;
  *(void *)(result + 32) = 0x8000000000000000;
  *a1 = v3;
  a1[1] = result;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  a1[2] = (uint64_t)&unk_1F0F68948;
  a1[3] = v5;
  a1[4] = v5;
  a1[5] = v5;
  return result;
}

void *sub_1B69CA17C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = OBJC_IVAR____TtC3VFX15ImportErrorNode_message;
  uint64_t v4 = (void *)(v2 + OBJC_IVAR____TtC3VFX15ImportErrorNode_message);
  uint64_t v5 = OBJC_IVAR____TtC3VFX15ImportErrorNode_inputCount;
  uint64_t v6 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX15ImportErrorNode_name + 8);
  long long v7 = (void *)(v2 + OBJC_IVAR____TtC3VFX15ImportErrorNode_name);
  *long long v7 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX15ImportErrorNode_name);
  v7[1] = v6;
  long long v8 = (void *)((char *)a1 + v3);
  uint64_t v9 = v8[1];
  *uint64_t v4 = *v8;
  v4[1] = v9;
  *(void *)(v2 + v5) = *(void *)((char *)a1 + v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B69CA20C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX15ImportErrorNode_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B69CA248(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB0D14(*a1, *a2);
}

uint64_t sub_1B69CA254()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69CA2F4()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69CA380()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69CA41C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69CBB78();
  *a1 = result;
  return result;
}

void sub_1B69CA44C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xEA0000000000746ELL;
  uint64_t v5 = 0x756F437475706E69;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6567617373656DLL;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701667182;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B69CA4A8()
{
  uint64_t v1 = 0x756F437475706E69;
  if (*v0 != 1) {
    uint64_t v1 = 0x6567617373656DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182;
  }
}

uint64_t sub_1B69CA500@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69CBB78();
  *a1 = result;
  return result;
}

uint64_t sub_1B69CA528(uint64_t a1)
{
  unint64_t v2 = sub_1B69CBE40();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69CA564(uint64_t a1)
{
  unint64_t v2 = sub_1B69CBE40();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69CA5A0(void *a1)
{
  uint64_t v3 = v1;
  sub_1B69CC654(0, &qword_1E9DD3860, (uint64_t (*)(void))sub_1B69CBE40, (uint64_t)&type metadata for ImportErrorNode.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69CBE40();
  sub_1B6E33A88();
  LOBYTE(v12) = 0;
  swift_bridgeObjectRetain();
  sub_1B6E32F48();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    LOBYTE(v12) = 1;
    sub_1B6E32F88();
    long long v12 = *(_OWORD *)(v3 + OBJC_IVAR____TtC3VFX15ImportErrorNode_message);
    char v13 = 2;
    sub_1B69CC0B0(0, (unint64_t *)&qword_1EB980110, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    sub_1B69CBE94(&qword_1E9DD2750);
    sub_1B6E32FA8();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1B69CA820(void *a1)
{
  uint64_t v3 = v1;
  sub_1B69CC654(0, &qword_1E9DD3850, (uint64_t (*)(void))sub_1B69CBE40, (uint64_t)&type metadata for ImportErrorNode.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v15 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69CBE40();
  uint64_t result = sub_1B6E33A48();
  if (!v2)
  {
    LOBYTE(v15) = 0;
    uint64_t v12 = sub_1B6E32D98();
    char v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC3VFX15ImportErrorNode_name);
    uint64_t *v13 = v12;
    v13[1] = v14;
    swift_bridgeObjectRelease();
    LOBYTE(v15) = 1;
    *(void *)(v3 + OBJC_IVAR____TtC3VFX15ImportErrorNode_inputCount) = sub_1B6E32DD8();
    sub_1B69CC0B0(0, (unint64_t *)&qword_1EB980110, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    char v16 = 2;
    sub_1B69CBE94(&qword_1EB980118);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(_OWORD *)(v3 + OBJC_IVAR____TtC3VFX15ImportErrorNode_message) = v15;
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B69CAAAC()
{
}

uint64_t sub_1B69CAADC()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69CAB24()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69CAC00()
{
  return type metadata accessor for ImportErrorNode(0);
}

uint64_t type metadata accessor for ImportErrorNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD37C8);
}

uint64_t sub_1B69CAC28()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69CAC84(void *a1)
{
  return sub_1B69CA5A0(a1);
}

uint64_t sub_1B69CAC9C(void *a1)
{
  return sub_1B69CA820(a1);
}

uint64_t sub_1B69CACB4()
{
  return 0x6574617453;
}

double sub_1B69CACC8@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B69CACD8((unint64_t)&unk_1F0FA9EA8, a1);
}

double sub_1B69CACD8@<D0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B682AF48(a1, v5);
  swift_arrayDestroy();
  long long v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

void *sub_1B69CAD30()
{
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = (uint64_t)v0 + OBJC_IVAR____TtC3VFX9StateNode_stateRef;
  swift_unknownObjectWeakInit();
  v4[1] = 0;
  swift_unknownObjectWeakAssign();
  _OWORD v4[2] = 0x3E6C6C756E3CLL;
  v4[3] = 0xE600000000000000;
  sub_1B6649008((uint64_t)v4, v1);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v2;
  sub_1B6E31108();
  return v0;
}

void *sub_1B69CADDC(void *a1)
{
  uint64_t v2 = swift_allocObject() + OBJC_IVAR____TtC3VFX9StateNode_stateRef;
  swift_unknownObjectWeakInit();
  v4[1] = 0;
  swift_unknownObjectWeakAssign();
  _OWORD v4[2] = 0x3E6C6C756E3CLL;
  v4[3] = 0xE600000000000000;
  sub_1B6649008((uint64_t)v4, v2);
  sub_1B69CBDE4((uint64_t)a1 + OBJC_IVAR____TtC3VFX9StateNode_stateRef, v2);
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B69CAE84()
{
  return sub_1B66490B8(v0 + OBJC_IVAR____TtC3VFX9StateNode_stateRef);
}

uint64_t sub_1B69CAE94()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1B66490B8(v0 + OBJC_IVAR____TtC3VFX9StateNode_stateRef);

  return swift_deallocClassInstance();
}

uint64_t sub_1B69CAF58()
{
  return type metadata accessor for StateNode(0);
}

uint64_t type metadata accessor for StateNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD37D8);
}

uint64_t sub_1B69CAF80()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B69CAFC8(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B664D9F0(v1 + OBJC_IVAR____TtC3VFX9StateNode_stateRef, (uint64_t)v3);
  sub_1B6649174();
  sub_1B6C0C6E4();
  return sub_1B66490B8((uint64_t)v3);
}

uint64_t sub_1B69CB05C(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6648FB4();
  uint64_t result = sub_1B6C0C780();
  if (!v2) {
    return sub_1B69CBCE8((uint64_t)&v4, v1 + OBJC_IVAR____TtC3VFX9StateNode_stateRef);
  }
  return result;
}

uint64_t sub_1B69CB0F4(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = v2 + OBJC_IVAR____TtC3VFX9StateNode_stateRef;
  sub_1B664D9F0(v2 + OBJC_IVAR____TtC3VFX9StateNode_stateRef, (uint64_t)v7);
  sub_1B6B1BF04((uint64_t)v7, ObjectType, a2, (uint64_t)v8);
  sub_1B66490B8((uint64_t)v7);
  return sub_1B69CBCE8((uint64_t)v8, v5);
}

uint64_t sub_1B69CB17C()
{
  return 0x746963696C706D49;
}

uint64_t sub_1B69CB1A0()
{
  return type metadata accessor for ImplicitStateNode(0);
}

uint64_t type metadata accessor for ImplicitStateNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD37E8);
}

uint64_t sub_1B69CB1C8()
{
  return 0x6574617453746553;
}

uint64_t sub_1B69CB1E0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B69CB27C(0x8000000000000090, (uint64_t)&unk_1F0F5BE20, (uint64_t)&unk_1F0F5BDD0, a1, 0.1);
}

uint64_t sub_1B69CB208()
{
  return type metadata accessor for SetStateNode(0);
}

uint64_t type metadata accessor for SetStateNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD37F8);
}

unint64_t sub_1B69CB230()
{
  return 0xD000000000000036;
}

uint64_t sub_1B69CB24C()
{
  return 1801677140;
}

uint64_t sub_1B69CB25C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B69CB27C(0x8000000000000030, (uint64_t)&unk_1F0FA78E0, (uint64_t)&unk_1F0FA7890, a1, 0.0);
}

uint64_t sub_1B69CB27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBE00];
  sub_1B69CC0B0(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B6E77D10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0x8000000000000008;
  *(void *)(v11 + 32) = v12 | 0x6000000000000000;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v11 + 40) = v13 | 0x6000000000000000;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0x8000000000000050;
  *(void *)(v11 + 48) = v14 | 0x6000000000000000;
  sub_1B69CC0B0(0, &qword_1E9DD1998, (uint64_t)&type metadata for AnyValue, v10);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = MEMORY[0x1E4FBB550];
  *(void *)(v15 + 64) = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v15 + 16) = xmmword_1B6E77D10;
  *(_OWORD *)(v15 + 32) = xmmword_1B6E8DB00;
  *(void *)(v15 + 104) = v16;
  *(_OWORD *)(v15 + 72) = xmmword_1B6E8DAF0;
  v22[3] = MEMORY[0x1E4FBB470];
  *(float *)uint64_t v22 = a5;
  sub_1B62C14BC(v22, MEMORY[0x1E4FBB470]);
  uint64_t DynamicType = swift_getDynamicType();
  unint64_t v18 = sub_1B69B1CC4(DynamicType);
  if ((~v18 & 0xF000000000000007) != 0)
  {
    unint64_t v19 = v18;
    sub_1B62CAAD8((uint64_t)v22, v15 + 120);
    *(void *)(v15 + 112) = v19;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1B6E77050;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0x8000000000000008;
    *(void *)(v20 + 32) = result | 0x6000000000000000;
    *a4 = v11;
    a4[1] = v20;
    a4[2] = a2;
    a4[3] = a3;
    a4[4] = MEMORY[0x1E4FBC860];
    a4[5] = v15;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69CB52C()
{
  return type metadata accessor for TickNode(0);
}

uint64_t type metadata accessor for TickNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD3808);
}

unsigned char *storeEnumTagSinglePayload for VFXStage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69CB620);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXStage()
{
  return &type metadata for VFXStage;
}

unint64_t sub_1B69CB65C()
{
  unint64_t result = qword_1E9DD3818;
  if (!qword_1E9DD3818)
  {
    sub_1B69CC0B0(255, &qword_1E9DD3820, (uint64_t)&type metadata for VFXStage, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3818);
  }
  return result;
}

unint64_t sub_1B69CB6DC()
{
  unint64_t result = qword_1E9DD3828;
  if (!qword_1E9DD3828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3828);
  }
  return result;
}

unint64_t sub_1B69CB730()
{
  return 0xD000000000000029;
}

unint64_t sub_1B69CB74C()
{
  unint64_t result = qword_1E9DD3830;
  if (!qword_1E9DD3830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3830);
  }
  return result;
}

unint64_t sub_1B69CB7A0()
{
  unint64_t result = qword_1E9DD3838;
  if (!qword_1E9DD3838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3838);
  }
  return result;
}

unint64_t sub_1B69CB7F4()
{
  unint64_t result = qword_1E9DD3840;
  if (!qword_1E9DD3840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3840);
  }
  return result;
}

uint64_t sub_1B69CB848(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B69CB890(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain();
  sub_1B6E32598();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 0x1000000000000000) != 0) {
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  sub_1B6E32598();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if ((v14 & 0x1000000000000000) != 0) {
    goto LABEL_28;
  }
  uint64_t v15 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v15) = 1;
  }
  uint64_t v16 = 4 << v15;
  unint64_t v17 = a1;
  if ((a1 & 0xC) == 4 << v15)
  {
    unint64_t v17 = sub_1B6A034EC(a1, a5, a6);
    unint64_t v18 = a5 & 0x800000000000000;
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v18 = a5 & 0x800000000000000;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_7:
      unint64_t v19 = v17 >> 16;
      uint64_t v20 = 7;
      goto LABEL_8;
    }
  }
  unint64_t v19 = sub_1B6E319C8();
  if (v18) {
    uint64_t v20 = 7;
  }
  else {
    uint64_t v20 = 11;
  }
LABEL_8:
  uint64_t v21 = HIBYTE(a6) & 0xF;
  unint64_t v22 = a2;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v21 = a5;
  }
  uint64_t v23 = 4 << (v18 >> 59);
  unint64_t v24 = v20 | (v21 << 16);
  if ((a6 & 0x1000000000000000) == 0) {
    uint64_t v23 = 8;
  }
  if ((a2 & 0xC) == v23) {
    unint64_t v22 = sub_1B6A034EC(a2, a5, a6);
  }
  if ((v20 & 0xC) == v16)
  {
    unint64_t v24 = sub_1B6A034EC(v24, a5, a6);
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_16;
    }
LABEL_22:
    uint64_t v25 = sub_1B6E319C8();
    goto LABEL_23;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_22;
  }
LABEL_16:
  uint64_t v25 = (v24 >> 16) - (v22 >> 16);
LABEL_23:
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v26 = sub_1B6E31998();
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v26 = HIBYTE(a4) & 0xF;
  }
  else
  {
    uint64_t v26 = a3 & 0xFFFFFFFFFFFFLL;
  }
  MEMORY[0x1BA9B34F0](v25 + v19 + v26);
LABEL_28:
  sub_1B6E31A78();
  sub_1B678C2E8();
  sub_1B6E31928();
  swift_bridgeObjectRelease();
  sub_1B6E31928();
  sub_1B6E31A78();
  sub_1B6E31928();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B69CBB78()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

unint64_t sub_1B69CBBC4()
{
  uint64_t v5 = 0;
  unint64_t v6 = 0xE000000000000000;
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  unint64_t v7 = 0xD00000000000002DLL;
  unint64_t v8 = 0x80000001B6F410C0;
  sub_1B664D9F0(v0 + OBJC_IVAR____TtC3VFX9StateNode_stateRef, (uint64_t)&v5);
  uint64_t v1 = MEMORY[0x1BA9B8670](&v5);
  sub_1B66490B8((uint64_t)&v5);
  if (v1)
  {
    self;
    uint64_t v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      id v3 = objc_msgSend(v2, sel_identifier, v5, v6);
      swift_unknownObjectRelease();
      sub_1B6E31798();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  return v7;
}

uint64_t sub_1B69CBCE8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B69CBD44(uint64_t result)
{
  if ((result & 0xF8) != 0) {
    return 8;
  }
  else {
    return result;
  }
}

unint64_t sub_1B69CBD58()
{
  unint64_t result = qword_1E9DD3848;
  if (!qword_1E9DD3848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3848);
  }
  return result;
}

uint64_t sub_1B69CBDAC()
{
  sub_1B678FC34(*(void *)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B69CBDE4(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1B69CBE40()
{
  unint64_t result = qword_1E9DD3858;
  if (!qword_1E9DD3858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3858);
  }
  return result;
}

uint64_t sub_1B69CBE94(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B69CC0B0(255, (unint64_t *)&qword_1EB980110, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B69CBF18()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

unint64_t sub_1B69CBF28()
{
  unint64_t result = qword_1E9DD3868;
  if (!qword_1E9DD3868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3868);
  }
  return result;
}

unint64_t sub_1B69CBF7C()
{
  unint64_t result = qword_1E9DD3870;
  if (!qword_1E9DD3870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3870);
  }
  return result;
}

uint64_t sub_1B69CBFD0()
{
  sub_1B6654718(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return MEMORY[0x1F4186498](v0, 36, 7);
}

uint64_t sub_1B69CC00C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B69CC01C()
{
  sub_1B678FC34(*(void *)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1B69CC054(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  if (!*a2)
  {
    sub_1B69CC0B0(255, a3, a4, a5);
    unint64_t v6 = sub_1B6E330A8();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1B69CC0B0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1B69CC0FC()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

unint64_t sub_1B69CC134()
{
  unint64_t result = qword_1E9DD3880;
  if (!qword_1E9DD3880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3880);
  }
  return result;
}

uint64_t sub_1B69CC188()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 61, 7);
}

uint64_t sub_1B69CC1C8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 68, 7);
}

unint64_t sub_1B69CC208()
{
  unint64_t result = qword_1E9DD3898;
  if (!qword_1E9DD3898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3898);
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphSideStorage()
{
  return &type metadata for GraphSideStorage;
}

unsigned char *storeEnumTagSinglePayload for OnTriggerNode.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B69CC308);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnTriggerNode.CodingKeys()
{
  return &type metadata for OnTriggerNode.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ImportErrorNode.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69CC40CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImportErrorNode.CodingKeys()
{
  return &type metadata for ImportErrorNode.CodingKeys;
}

unint64_t sub_1B69CC448()
{
  unint64_t result = qword_1E9DD38A0;
  if (!qword_1E9DD38A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38A0);
  }
  return result;
}

unint64_t sub_1B69CC4A0()
{
  unint64_t result = qword_1E9DD38A8;
  if (!qword_1E9DD38A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38A8);
  }
  return result;
}

unint64_t sub_1B69CC4F8()
{
  unint64_t result = qword_1E9DD38B0;
  if (!qword_1E9DD38B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38B0);
  }
  return result;
}

unint64_t sub_1B69CC550()
{
  unint64_t result = qword_1E9DD38B8;
  if (!qword_1E9DD38B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38B8);
  }
  return result;
}

unint64_t sub_1B69CC5A8()
{
  unint64_t result = qword_1E9DD38C0;
  if (!qword_1E9DD38C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38C0);
  }
  return result;
}

unint64_t sub_1B69CC600()
{
  unint64_t result = qword_1E9DD38C8;
  if (!qword_1E9DD38C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38C8);
  }
  return result;
}

void sub_1B69CC654(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1B69CC6BC()
{
  unint64_t result = qword_1E9DD38D8;
  if (!qword_1E9DD38D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphSideStorage.CodingKeys()
{
  return &type metadata for GraphSideStorage.CodingKeys;
}

unint64_t sub_1B69CC724()
{
  unint64_t result = qword_1E9DD38E0;
  if (!qword_1E9DD38E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38E0);
  }
  return result;
}

unint64_t sub_1B69CC77C()
{
  unint64_t result = qword_1E9DD38E8;
  if (!qword_1E9DD38E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD38E8);
  }
  return result;
}

uint64_t *sub_1B69CC7D4(uint64_t a1, uint64_t a2)
{
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v77 = qword_1EB997A18;
  int v78 = 0;
  char v79 = 2;
  uint64_t v80 = 0;
  char v81 = 2;
  uint64_t v82 = 0;
  swift_retain();
  sub_1B639F020((uint64_t)v49);
  swift_release();
  v64[0] = v49[0];
  v64[1] = v49[1];
  uint64_t v65 = v50;
  sub_1B62C9DA8(a1, (uint64_t)v64, 0x200000000, v51);
  sub_1B62CA210((uint64_t)v51, (uint64_t)v52, (unint64_t *)&qword_1EB97DC50);
  if (!*(void *)&v52[0]) {
    return (uint64_t *)sub_1B62CA064((uint64_t)v49);
  }
  long long v59 = v52[0];
  long long v60 = v52[1];
  uint64_t v61 = v53;
  if (v58 <= 0 || (uint64_t v40 = v55) == 0)
  {
    sub_1B62CA064((uint64_t)v49);
    return sub_1B632F170(v51);
  }
  uint64_t v45 = a1;
  uint64_t v39 = v54;
  int v3 = v57;
  uint64_t v46 = v56;
  uint64_t v4 = v57[4];
  int v44 = *(unsigned __int8 *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  uint64_t v37 = (uint64_t)(v57 + 6);
  sub_1B69D0E68(v51);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v38 = v4;
  while (1)
  {
    uint64_t v48 = v6;
    uint64_t v7 = (unsigned int *)(v39 + 48 * v5);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[2];
    unint64_t v10 = (uint64_t *)*((void *)v7 + 2);
    uint64_t v12 = *((void *)v7 + 4);
    uint64_t v11 = *((void *)v7 + 5);
    uint64_t v43 = v5;
    uint64_t v41 = v7[1];
    uint64_t v42 = *((void *)v7 + 3);
    if (v44)
    {
      uint64_t v13 = *(os_unfair_lock_s **)(v11 + 376);
      swift_retain();
      os_unfair_lock_lock(v13);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v4);
    sub_1B62CA210(v37, (uint64_t)v66, &qword_1EB97DE20);
    uint64_t v14 = v3[4];
    uint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)(v11 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v3[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
    v3[7] = v15;
    v3[9] = 0;
    v3[10] = 0;
    v3[8] = 0;
    swift_release();
    sub_1B62C9024((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BBC0, v10, v42, v12, (uint64_t)v3);
    sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v10, v42, v12, (uint64_t)v3);
    sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v10, v42, v12, (uint64_t)v3);
    sub_1B62C9024((uint64_t)&type metadata for Shadow, (uint64_t)&off_1F0FA18B0, v10, v42, v12, (uint64_t)v3);
    if (v10)
    {
      uint64_t v16 = v46;
      if (v12)
      {
        while (1)
        {
          uint64_t v18 = *v10++;
          uint64_t v17 = v18;
          uint64_t v67 = v16;
          uint64_t v68 = v11;
          uint64_t v69 = v3;
          uint64_t v70 = v9;
          uint64_t v71 = v18;
          if (v9 <= 7)
          {
            char v19 = *(unsigned char *)(v11 + 184);
            uint64_t v20 = swift_retain();
            if (v19) {
              goto LABEL_39;
            }
            int v21 = *(_DWORD *)(*(void *)(v11 + 168) + 4 * v17);
            int v22 = *(_DWORD *)(*(void *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v21 + 8);
            uint64_t v23 = swift_release();
            if (v21 == a2 && v22 == HIDWORD(a2))
            {
              MEMORY[0x1F4188790](v23, v24);
              uint64_t v26 = *(void **)(v45 + 176);
              swift_retain();
              sub_1B636E6E4((uint64_t)&type metadata for LightsUniforms, (uint64_t)&off_1F0F643E8, v26, sub_1B69D0EBC);
              uint64_t v16 = v46;
              swift_release();
            }
          }
          ++v9;
          if (!--v12) {
            goto LABEL_24;
          }
        }
      }
      goto LABEL_24;
    }
    uint64_t v27 = v46;
    if (v8 != v41) {
      break;
    }
LABEL_24:
    v62[0] = v59;
    v62[1] = v60;
    uint64_t v63 = v61;
    uint64_t v6 = v48;
    sub_1B6345178(v3, (unsigned __int16 **)v62, (uint64_t)v66);
    sub_1B634507C((char *)v11);
    uint64_t v4 = v38;
    ecs_stack_allocator_pop_snapshot(v38);
    if (v44)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 376));
    }
    swift_release();
    uint64_t v5 = v43 + 1;
    if (v43 + 1 == v40)
    {
      sub_1B632F170(v51);
      sub_1B62CA064((uint64_t)v49);
      sub_1B632F170(v51);
      return sub_1B632F170(v51);
    }
  }
  while (1)
  {
    uint64_t v72 = v27;
    uint64_t v73 = v11;
    uint64_t v74 = v3;
    uint64_t v75 = v9;
    uint64_t v76 = v8;
    if (v9 > 7) {
      goto LABEL_26;
    }
    char v28 = *(unsigned char *)(v11 + 184);
    uint64_t v29 = swift_retain();
    if (v28) {
      break;
    }
    int v30 = *(_DWORD *)(*(void *)(v11 + 168) + 4 * v8);
    int v31 = *(_DWORD *)(*(void *)(v29 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v30 + 8);
    uint64_t v32 = swift_release();
    if (v30 == a2 && v31 == HIDWORD(a2))
    {
      MEMORY[0x1F4188790](v32, v33);
      uint64_t v35 = *(void **)(v45 + 176);
      swift_retain();
      sub_1B636E6E4((uint64_t)&type metadata for LightsUniforms, (uint64_t)&off_1F0F643E8, v35, sub_1B69D0EBC);
      uint64_t v27 = v46;
      swift_release();
    }
LABEL_26:
    ++v8;
    ++v9;
    if (v41 == v8) {
      goto LABEL_24;
    }
  }
LABEL_39:
  unint64_t result = (uint64_t *)sub_1B6E32BE8();
  __break(1u);
  return result;
}

double sub_1B69CCE78@<D0>(_OWORD *a1@<X8>)
{
  double result = 524288.135;
  *a1 = xmmword_1B6E9C760;
  return result;
}

uint64_t sub_1B69CCE88(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB147C(*a1, *a2);
}

uint64_t sub_1B69CCE94()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69CCF70()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69CD034()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69CD10C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

void sub_1B69CD144(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000079;
  uint64_t v3 = 0x7469736E65746E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC00000073756964;
      uint64_t v3 = 0x6152776F64616873;
      goto LABEL_3;
    case 2:
      *a1 = 0x7261654E7ALL;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 1918977658;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B69CD1E0()
{
  uint64_t result = 0x7469736E65746E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6152776F64616873;
      break;
    case 2:
      uint64_t result = 0x7261654E7ALL;
      break;
    case 3:
      uint64_t result = 1918977658;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69CD270@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

uint64_t sub_1B69CD2A0(uint64_t a1)
{
  unint64_t v2 = sub_1B69D04E4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69CD2DC(uint64_t a1)
{
  unint64_t v2 = sub_1B69D04E4();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69CD318@<X0>(_DWORD *a1@<X8>)
{
  return sub_1B69CD8A0((uint64_t (*)(void))sub_1B69D0244, a1);
}

uint64_t sub_1B69CD344(void *a1)
{
  return sub_1B69CD68C(a1, &qword_1E9DD38F0, (uint64_t (*)(void))sub_1B69D04E4, (uint64_t)&type metadata for DirectionalLight.CodingKeys, (void (*)(void))sub_1B69D04E4);
}

double sub_1B69CD39C@<D0>(_OWORD *a1@<X8>)
{
  double result = 524288.138;
  *a1 = xmmword_1B6E9C770;
  return result;
}

uint64_t sub_1B69CD3AC(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BAD2D4(*a1, *a2);
}

uint64_t sub_1B69CD3B8()
{
  return sub_1B6BCEC44();
}

uint64_t sub_1B69CD3C0()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69CD480()
{
  return sub_1B69EC388();
}

uint64_t sub_1B69CD488@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

void sub_1B69CD4C0(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000079;
  unint64_t v3 = 0x7469736E65746E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x80000001B6F2E000;
      unint64_t v3 = 0xD000000000000011;
      goto LABEL_3;
    case 2:
      *a1 = 0x7261654E7ALL;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 1918977658;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t sub_1B69CD558()
{
  unint64_t result = 0x7469736E65746E69;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x7261654E7ALL;
      break;
    case 3:
      unint64_t result = 1918977658;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69CD5E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B680E5A8();
  *a1 = result;
  return result;
}

uint64_t sub_1B69CD614(uint64_t a1)
{
  unint64_t v2 = sub_1B69D07BC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69CD650(uint64_t a1)
{
  unint64_t v2 = sub_1B69D07BC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69CD68C(void *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, void (*a5)(void))
{
  sub_1B69D1B6C(0, a2, a3, a4, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v15 - v12;
  sub_1B62C14BC(a1, a1[3]);
  a5();
  sub_1B6E33A88();
  char v19 = 0;
  sub_1B6E32F78();
  if (!v5)
  {
    char v18 = 1;
    sub_1B6E32F78();
    char v17 = 2;
    sub_1B6E32F78();
    char v16 = 3;
    sub_1B6E32F78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1B69CD874@<X0>(_DWORD *a1@<X8>)
{
  return sub_1B69CD8A0((uint64_t (*)(void))sub_1B69D0538, a1);
}

uint64_t sub_1B69CD8A0@<X0>(uint64_t (*a1)(void)@<X3>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_1B69CD8D4(void *a1)
{
  return sub_1B69CD68C(a1, &qword_1E9DD38F8, (uint64_t (*)(void))sub_1B69D07BC, (uint64_t)&type metadata for PointLight.CodingKeys, (void (*)(void))sub_1B69D07BC);
}

uint64_t sub_1B69CD92C()
{
  return 0x7469736E65746E69;
}

uint64_t sub_1B69CD948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B69CD9EC(uint64_t a1)
{
  unint64_t v2 = sub_1B69D0E14();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69CDA28(uint64_t a1)
{
  unint64_t v2 = sub_1B69D0E14();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69CDA64@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v15 = a2;
  sub_1B69D1B6C(0, &qword_1EB9808A8, (uint64_t (*)(void))sub_1B69D0E14, (uint64_t)&type metadata for AmbientLight.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D0E14();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v15;
  sub_1B6E32DC8();
  int v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *uint64_t v10 = v12;
  return result;
}

uint64_t sub_1B69CDC1C(void *a1)
{
  sub_1B69D1B6C(0, &qword_1E9DD3918, (uint64_t (*)(void))sub_1B69D0E14, (uint64_t)&type metadata for AmbientLight.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D0E14();
  sub_1B6E33A88();
  sub_1B6E32F78();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1B69CDD88(_DWORD *a1@<X8>)
{
  *a1 = 1045220557;
}

double sub_1B69CDD98@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B6E9C780;
  double result = 524288.117;
  *(void *)(a1 + 16) = 0x412000003C23D70ALL;
  return result;
}

uint64_t sub_1B69CDDB4(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BBABEC(*a1, *a2);
}

uint64_t sub_1B69CDDC0()
{
  return sub_1B6BCFE90();
}

uint64_t sub_1B69CDDC8()
{
  return sub_1B69E9108();
}

uint64_t sub_1B69CDDD0()
{
  return sub_1B69EA4C8();
}

uint64_t sub_1B69CDDD8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69D01F8();
  *a1 = result;
  return result;
}

void sub_1B69CDE08(void *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000079;
  unint64_t v3 = 0x7469736E65746E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x80000001B6F2E000;
      unint64_t v3 = 0xD000000000000011;
      goto LABEL_3;
    case 2:
      unsigned int v4 = 1702131055;
      goto LABEL_6;
    case 3:
      unsigned int v4 = 1701736041;
LABEL_6:
      *a1 = v4 | 0x676E417200000000;
      a1[1] = 0xEA0000000000656CLL;
      break;
    case 4:
      *a1 = 0x7261654E7ALL;
      a1[1] = 0xE500000000000000;
      break;
    case 5:
      *a1 = 1918977658;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B69CDED4()
{
  uint64_t result = 0x7469736E65746E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0xD000000000000011;
      break;
    case 2:
      unsigned int v2 = 1702131055;
      goto LABEL_5;
    case 3:
      unsigned int v2 = 1701736041;
LABEL_5:
      uint64_t result = v2 | 0x676E417200000000;
      break;
    case 4:
      uint64_t result = 0x7261654E7ALL;
      break;
    case 5:
      uint64_t result = 1918977658;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69CDF90@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69D01F8();
  *a1 = result;
  return result;
}

uint64_t sub_1B69CDFB8(uint64_t a1)
{
  unint64_t v2 = sub_1B69D0B28();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69CDFF4(uint64_t a1)
{
  unint64_t v2 = sub_1B69D0B28();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69CE030(void *a1)
{
  sub_1B69D1B6C(0, &qword_1E9DD3910, (uint64_t (*)(void))sub_1B69D0B28, (uint64_t)&type metadata for SpotLight.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v10 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D0B28();
  sub_1B6E33A88();
  char v16 = 0;
  sub_1B6E32F78();
  if (!v1)
  {
    char v15 = 1;
    sub_1B6E32F78();
    char v14 = 2;
    sub_1B6E32F78();
    char v13 = 3;
    sub_1B6E32F78();
    char v12 = 4;
    sub_1B6E32F78();
    char v11 = 5;
    sub_1B6E32F78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

double sub_1B69CE264@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B69D0810(a1, (float *)&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B69CE2A8(void *a1)
{
  return sub_1B69CE030(a1);
}

uint64_t sub_1B69CE2C0(void *a1, double a2, double a3)
{
  sub_1B69D1B6C(0, &qword_1E9DD3960, (uint64_t (*)(void))sub_1B69D1B18, (uint64_t)&type metadata for RectAreaLight.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  char v11 = (char *)v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D1B18();
  sub_1B6E33A88();
  char v16 = 0;
  sub_1B6E32F78();
  if (!v3)
  {
    *(double *)&v13[1] = a3;
    char v15 = 1;
    sub_1B69D1B6C(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
    sub_1B69D1BD4((unint64_t *)&qword_1EB97D1B8);
    sub_1B6E32FA8();
    char v14 = 2;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B69CE500(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BAF984(*a1, *a2);
}

uint64_t sub_1B69CE50C()
{
  unint64_t v1 = 0x73746E65747865;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7469736E65746E69;
  }
}

uint64_t sub_1B69CE570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B69D0098(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B69CE598(uint64_t a1)
{
  unint64_t v2 = sub_1B69D1B18();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69CE5D4(uint64_t a1)
{
  unint64_t v2 = sub_1B69D1B18();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B69CE610(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v5 = sub_1B69D1894(a1);
  if (!v2)
  {
    *(float *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 16) = v4 & 1;
  }
}

uint64_t sub_1B69CE648(void *a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)v2;
  return sub_1B69CE2C0(a1, a2, *(double *)(v2 + 8));
}

double sub_1B69CE66C@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1143652352;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

void *sub_1B69CE688@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float32x4_t *a4@<X3>, uint64_t a5@<X8>, float a6@<S0>, float a7@<S1>, float a8@<S2>, float a9@<S3>, float32x4_t a10@<Q4>, float32x4_t a11@<Q5>, float32x4_t a12@<Q6>, float32x4_t a13@<Q7>, float32x4_t a14, float32x4_t a15, float32x4_t a16, float32x4_t a17, float32x4_t a18, float32x4_t a19)
{
  uint64_t v331 = *MEMORY[0x1E4F143B8];
  sub_1B6333B58(1, 1, 1.5708, 1.0, a8, a9, 0, 0, 1);
  long long v312 = v26;
  long long v313 = v25;
  long long v310 = v28;
  long long v311 = v27;
  float32x4_t v322 = vsubq_f32(a13, a15);
  float32x4_t v319 = vmulq_n_f32(a14, a6 * 0.00011651);
  bzero(v327, 0x224uLL);
  memset(v330, 0, 21);
  float32x4_t v325 = v319;
  float32x4_t v326 = v322;
  float v29 = 1.0 / (float)(a7 * a7);
  float v329 = v29;
  if (!a2)
  {
    char v59 = 0;
    int v60 = 0;
    int v61 = 0;
    long long v315 = 0u;
    long long v318 = 0u;
    long long v305 = 0u;
    long long v308 = 0u;
    long long v300 = 0u;
    long long v302 = 0u;
    long long v312 = 0u;
    long long v313 = 0u;
    long long v310 = 0u;
    long long v311 = 0u;
    long long v298 = 0u;
    goto LABEL_72;
  }
  sub_1B62F93A4(0, (unint64_t *)&unk_1E9DCFCF0, (uint64_t (*)(uint64_t))type metadata accessor for simd_quatf, MEMORY[0x1E4FBBE00]);
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v30;
  *(_OWORD *)(v30 + 16) = xmmword_1B6E89D00;
  float32x4_t v32 = vrsqrteq_f32((float32x4_t)xmmword_1B6E4F540);
  float32x4_t v33 = vmulq_f32(v32, vrsqrtsq_f32((float32x4_t)xmmword_1B6E4F540, vmulq_f32(v32, v32)));
  float32x4_t v34 = vmulq_f32(v33, vrsqrtsq_f32((float32x4_t)xmmword_1B6E4F540, vmulq_f32(v33, v33)));
  float32x4_t v35 = vmulq_f32(v34, (float32x4_t)xmmword_1B6E4F310);
  float32x4_t v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL);
  float32x4_t v37 = vmlaq_f32(vmulq_f32(v36, (float32x4_t)xmmword_1B6E4F4D0), (float32x4_t)xmmword_1B6E4F2E0, v35);
  float32x4_t v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL);
  float32x4_t v39 = vmulq_f32(v37, v37);
  v39.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), v39)).u64[0];
  float32x4_t v40 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0);
  v40.i32[3] = 0;
  float32x4_t v41 = vrsqrteq_f32(v40);
  float32x4_t v42 = vmulq_f32(v41, vrsqrtsq_f32(v40, vmulq_f32(v41, v41)));
  int32x4_t v43 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v39.f32[0] != 0.0)), 0x1FuLL));
  v43.i32[3] = 0;
  float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vmulq_f32(vmulq_f32(v42, vrsqrtsq_f32(v40, vmulq_f32(v42, v42))), v38), vextq_s8(vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL), (int8x16_t)v35, 8uLL));
  float32x4_t v45 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), vnegq_f32(v35)), v44, v36);
  float32x4_t v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
  int32x4_t v47 = (int32x4_t)vmulq_f32(v45, v45);
  v47.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), *(float32x2_t *)v47.i8)).u32[0];
  float32x2_t v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
  float32x2_t v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
  int32x4_t v50 = (int32x4_t)vmulq_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]);
  float v51 = v35.f32[2] + (float)(v44.f32[0] + *(float *)&v50.i32[1]);
  if (v51 > 0.0)
  {
    float32x4_t v52 = (float32x4_t)vzip2q_s32(v50, vuzp1q_s32(v50, (int32x4_t)v35));
    v52.i32[2] = v44.i32[1];
    float32x4_t v53 = (float32x4_t)vuzp2q_s32((int32x4_t)v35, vzip1q_s32((int32x4_t)v35, v50));
    v53.i32[1] = v44.i32[2];
    float32x4_t v55 = vsubq_f32(v52, v53);
    v52.i32[3] = sqrtf(v51 + 1.0);
    v53.i32[3] = v52.i32[3];
    float32x4_t v54 = vmulq_f32(v52, v53);
    v55.i32[3] = v54.i32[3];
    v54.f32[0] = 0.5 / v52.f32[3];
    float32x4_t v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
    float32x4_t v58 = a10;
    float32x4_t v57 = a11;
    goto LABEL_12;
  }
  float32x4_t v58 = a10;
  float32x4_t v57 = a11;
  if (v44.f32[0] >= v35.f32[2] && v44.f32[0] >= *(float *)&v50.i32[1])
  {
    float v62 = sqrtf((float)((float)(v44.f32[0] + 1.0) - *(float *)&v50.i32[1]) - v35.f32[2]);
    float32x2_t v63 = (float32x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
    float32x2_t v64 = (float32x2_t)__PAIR64__(v35.u32[1], v63.u32[0]);
    float32x2_t v65 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 0);
    float32x2_t v66 = (float32x2_t)__PAIR64__(v65.u32[1], LODWORD(v62));
    float32x2_t v67 = vadd_f32(*(float32x2_t *)v44.f32, v65);
    v56.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v44.u32[1], LODWORD(v62)), v66).u32[0];
    v56.i32[1] = v67.i32[1];
    v35.i32[1] = v50.i32[2];
    LODWORD(v68) = vadd_f32(*(float32x2_t *)v35.f32, v63).u32[0];
    *(float32x2_t *)v35.f32 = vsub_f32(*(float32x2_t *)v35.f32, v64);
    HIDWORD(v68) = v35.i32[1];
    v56.i64[1] = v68;
LABEL_10:
    v35.f32[0] = 0.5 / v62;
    float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0);
    goto LABEL_12;
  }
  if (*(float *)&v50.i32[1] > v35.f32[2])
  {
    float v62 = sqrtf((float)((float)(*(float *)&v50.i32[1] + 1.0) - v44.f32[0]) - v35.f32[2]);
    int8x16_t v69 = (int8x16_t)v35;
    *(float *)v69.i32 = v62;
    float32x2_t v70 = (float32x2_t)vdup_laneq_s32(v50, 2);
    *(float *)v50.i32 = v44.f32[1] + *(float *)v50.i32;
    float32x2_t v71 = vadd_f32(*(float32x2_t *)v35.f32, v70);
    v70.f32[0] = v62;
    v69.i32[0] = vmul_f32(*(float32x2_t *)v69.i8, v70).u32[0];
    v69.i32[1] = v71.i32[1];
    float32_t v72 = v35.f32[0] - v44.f32[2];
    float32x4_t v56 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL), v69, 0xCuLL);
    v56.f32[3] = v72;
    goto LABEL_10;
  }
  v73.i32[0] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
  v73.i32[1] = v50.i32[2];
  *(float32x2_t *)v35.f32 = vadd_f32(*(float32x2_t *)v35.f32, v73);
  float32x2_t v74 = (float32x2_t)__PAIR64__(v44.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v35.f32[2] + 1.0) - v44.f32[0]) - *(float *)&v50.i32[1])));
  float32x2_t v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 0);
  int32x2_t v76 = (int32x2_t)vsub_f32(*(float32x2_t *)v44.f32, v75);
  v75.i32[0] = v74.i32[0];
  v75.i32[0] = vmul_f32(v74, v75).u32[0];
  v75.i32[1] = v76.i32[1];
  *(float32x2_t *)&v55.u32[2] = v75;
  *(float *)v76.i32 = 0.5 / v74.f32[0];
  float32x4_t v56 = (float32x4_t)vdupq_lane_s32(v76, 0);
LABEL_12:
  *(float32x4_t *)(v30 + 32) = vmulq_f32(v55, v56);
  float32x4_t v77 = vmulq_f32(v34, (float32x4_t)xmmword_1B6E4F300);
  float32x4_t v78 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), (int8x16_t)v77, 0xCuLL);
  float32x4_t v79 = vmlaq_f32(vmulq_f32(v78, (float32x4_t)xmmword_1B6E4F4D0), (float32x4_t)xmmword_1B6E4F2E0, v77);
  float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
  float32x4_t v81 = vmulq_f32(v79, v79);
  v81.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), v81)).u64[0];
  float32x4_t v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 0);
  v82.i32[3] = 0;
  float32x4_t v83 = vrsqrteq_f32(v82);
  float32x4_t v84 = vmulq_f32(v83, vrsqrtsq_f32(v82, vmulq_f32(v83, v83)));
  int32x4_t v85 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v81.f32[0] != 0.0)), 0x1FuLL));
  v85.i32[3] = 0;
  float32x4_t v86 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v85), (int8x16_t)vmulq_f32(v80, vmulq_f32(v84, vrsqrtsq_f32(v82, vmulq_f32(v84, v84)))), vextq_s8(vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL), (int8x16_t)v77, 8uLL));
  float32x4_t v87 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL), vnegq_f32(v77)), v86, v78);
  float32x4_t v88 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL);
  int32x4_t v89 = (int32x4_t)vmulq_f32(v87, v87);
  v89.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v89, 2), *(float32x2_t *)v89.i8)).u32[0];
  float32x2_t v90 = vrsqrte_f32((float32x2_t)v89.u32[0]);
  float32x2_t v91 = vmul_f32(v90, vrsqrts_f32((float32x2_t)v89.u32[0], vmul_f32(v90, v90)));
  int32x4_t v92 = (int32x4_t)vmulq_n_f32(v88, vmul_f32(v91, vrsqrts_f32((float32x2_t)v89.u32[0], vmul_f32(v91, v91))).f32[0]);
  float v93 = v77.f32[2] + (float)(v86.f32[0] + *(float *)&v92.i32[1]);
  if (v93 > 0.0)
  {
    float32x4_t v94 = (float32x4_t)vzip2q_s32(v92, vuzp1q_s32(v92, (int32x4_t)v77));
    v94.i32[2] = v86.i32[1];
    float v95 = sqrtf(v93 + 1.0);
    float32x4_t v96 = (float32x4_t)vuzp2q_s32((int32x4_t)v77, vzip1q_s32((int32x4_t)v77, v92));
    v96.i32[1] = v86.i32[2];
    float32x4_t v98 = vsubq_f32(v94, v96);
    v94.f32[3] = v95;
    v96.f32[3] = v95;
    float32x4_t v97 = vmulq_f32(v94, v96);
    v98.i32[3] = v97.i32[3];
LABEL_14:
    v97.f32[0] = 0.5 / v95;
    float32x4_t v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 0);
    goto LABEL_21;
  }
  if (v86.f32[0] < v77.f32[2] || v86.f32[0] < *(float *)&v92.i32[1])
  {
    if (*(float *)&v92.i32[1] <= v77.f32[2])
    {
      float v95 = sqrtf((float)((float)(v77.f32[2] + 1.0) - v86.f32[0]) - *(float *)&v92.i32[1]);
      v279.i32[0] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u32[0];
      v279.i32[1] = v92.i32[2];
      *(float32x2_t *)v98.f32 = vadd_f32(*(float32x2_t *)v77.f32, v279);
      float32x2_t v280 = (float32x2_t)__PAIR64__(v86.u32[1], LODWORD(v95));
      float32x2_t v281 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92.i8, 0);
      *(float32x2_t *)v97.f32 = vsub_f32(*(float32x2_t *)v86.f32, v281);
      v281.f32[0] = v95;
      v281.i32[0] = vmul_f32(v280, v281).u32[0];
      v281.i32[1] = v97.i32[1];
      *(float32x2_t *)&v98.u32[2] = v281;
      goto LABEL_14;
    }
    float v100 = sqrtf((float)((float)(*(float *)&v92.i32[1] + 1.0) - v86.f32[0]) - v77.f32[2]);
    int8x16_t v105 = (int8x16_t)v77;
    *(float *)v105.i32 = v100;
    float32x2_t v106 = (float32x2_t)vdup_laneq_s32(v92, 2);
    *(float *)v92.i32 = v86.f32[1] + *(float *)v92.i32;
    float32x2_t v107 = vadd_f32(*(float32x2_t *)v77.f32, v106);
    v106.f32[0] = v100;
    v105.i32[0] = vmul_f32(*(float32x2_t *)v105.i8, v106).u32[0];
    v105.i32[1] = v107.i32[1];
    float32x4_t v99 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v105, 0xCuLL);
    v99.f32[3] = v77.f32[0] - v86.f32[2];
  }
  else
  {
    float v100 = sqrtf((float)((float)(v86.f32[0] + 1.0) - *(float *)&v92.i32[1]) - v77.f32[2]);
    float32x2_t v101 = (float32x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
    float32x2_t v102 = (float32x2_t)__PAIR64__(v77.u32[1], v101.u32[0]);
    float32x2_t v103 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92.i8, 0);
    v99.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v86.u32[1], LODWORD(v100)), (float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v100))).u32[0];
    v99.i32[1] = vadd_f32(*(float32x2_t *)&v86, v103).i32[1];
    v77.i32[1] = v92.i32[2];
    LODWORD(v104) = vadd_f32(*(float32x2_t *)v77.f32, v101).u32[0];
    *(float32x2_t *)v77.f32 = vsub_f32(*(float32x2_t *)v77.f32, v102);
    HIDWORD(v104) = v77.i32[1];
    v99.i64[1] = v104;
  }
  v77.f32[0] = 0.5 / v100;
  float32x4_t v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 0);
LABEL_21:
  *(float32x4_t *)(v30 + 48) = vmulq_f32(v98, v99);
  float32x4_t v108 = vmulq_f32(v34, (float32x4_t)xmmword_1B6E4F330);
  float32x4_t v109 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), (int8x16_t)v108, 0xCuLL);
  float32x4_t v110 = vmlaq_f32(vmulq_f32(v109, (float32x4_t)xmmword_1B6E4F4F0), (float32x4_t)xmmword_1B6E4F300, v108);
  float32x4_t v111 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL);
  float32x4_t v112 = vmulq_f32(v110, v110);
  v112.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), v112)).u64[0];
  float32x4_t v113 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 0);
  v113.i32[3] = 0;
  float32x4_t v114 = vrsqrteq_f32(v113);
  float32x4_t v115 = vmulq_f32(v114, vrsqrtsq_f32(v113, vmulq_f32(v114, v114)));
  int32x4_t v116 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v112.f32[0] != 0.0)), 0x1FuLL));
  v116.i32[3] = 0;
  float32x4_t v117 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v116), (int8x16_t)vmulq_f32(v111, vmulq_f32(v115, vrsqrtsq_f32(v113, vmulq_f32(v115, v115)))), vextq_s8(vextq_s8((int8x16_t)v108, (int8x16_t)v108, 0xCuLL), (int8x16_t)v108, 8uLL));
  float32x4_t v118 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), (int8x16_t)v117, 0xCuLL), vnegq_f32(v108)), v117, v109);
  float32x4_t v119 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL);
  int32x4_t v120 = (int32x4_t)vmulq_f32(v118, v118);
  v120.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v120.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v120, 2), *(float32x2_t *)v120.i8)).u32[0];
  float32x2_t v121 = vrsqrte_f32((float32x2_t)v120.u32[0]);
  float32x2_t v122 = vmul_f32(v121, vrsqrts_f32((float32x2_t)v120.u32[0], vmul_f32(v121, v121)));
  int32x4_t v123 = (int32x4_t)vmulq_n_f32(v119, vmul_f32(v122, vrsqrts_f32((float32x2_t)v120.u32[0], vmul_f32(v122, v122))).f32[0]);
  float v124 = v108.f32[2] + (float)(v117.f32[0] + *(float *)&v123.i32[1]);
  if (v124 > 0.0)
  {
    float32x4_t v125 = (float32x4_t)vzip2q_s32(v123, vuzp1q_s32(v123, (int32x4_t)v108));
    v125.i32[2] = v117.i32[1];
    float32x4_t v126 = (float32x4_t)vuzp2q_s32((int32x4_t)v108, vzip1q_s32((int32x4_t)v108, v123));
    v126.i32[1] = v117.i32[2];
    float32x4_t v127 = vsubq_f32(v125, v126);
    v125.i32[3] = sqrtf(v124 + 1.0);
    v126.i32[3] = v125.i32[3];
    float32x4_t v117 = vmulq_f32(v125, v126);
    v127.i32[3] = v117.i32[3];
    v117.f32[0] = 0.5 / v125.f32[3];
LABEL_23:
    float32x4_t v128 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.f32, 0);
    goto LABEL_30;
  }
  if (v117.f32[0] < v108.f32[2] || v117.f32[0] < *(float *)&v123.i32[1])
  {
    if (*(float *)&v123.i32[1] <= v108.f32[2])
    {
      v282.i32[0] = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u32[0];
      v282.i32[1] = v123.i32[2];
      *(float32x2_t *)v127.f32 = vadd_f32(*(float32x2_t *)v108.f32, v282);
      float32x2_t v283 = (float32x2_t)__PAIR64__(v117.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v108.f32[2] + 1.0) - v117.f32[0]) - *(float *)&v123.i32[1])));
      float32x2_t v284 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.i8, 0);
      *(float32x2_t *)v117.f32 = vsub_f32(*(float32x2_t *)v117.f32, v284);
      v284.i32[0] = v283.i32[0];
      v284.i32[0] = vmul_f32(v283, v284).u32[0];
      v284.i32[1] = v117.i32[1];
      *(float32x2_t *)&v127.u32[2] = v284;
      v117.f32[0] = 0.5 / v283.f32[0];
      goto LABEL_23;
    }
    float v129 = sqrtf((float)((float)(*(float *)&v123.i32[1] + 1.0) - v117.f32[0]) - v108.f32[2]);
    int8x16_t v136 = (int8x16_t)v108;
    *(float *)v136.i32 = v129;
    float32x2_t v137 = (float32x2_t)vdup_laneq_s32(v123, 2);
    *(float *)v123.i32 = v117.f32[1] + *(float *)v123.i32;
    float32x2_t v138 = vadd_f32(*(float32x2_t *)v108.f32, v137);
    v137.f32[0] = v129;
    v136.i32[0] = vmul_f32(*(float32x2_t *)v136.i8, v137).u32[0];
    v136.i32[1] = v138.i32[1];
    float32_t v139 = v108.f32[0] - v117.f32[2];
    float32x4_t v128 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v123, (int8x16_t)v123, 4uLL), v136, 0xCuLL);
    v128.f32[3] = v139;
  }
  else
  {
    float v129 = sqrtf((float)((float)(v117.f32[0] + 1.0) - *(float *)&v123.i32[1]) - v108.f32[2]);
    float32x2_t v130 = (float32x2_t)vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u64[0];
    float32x2_t v131 = (float32x2_t)__PAIR64__(v108.u32[1], v130.u32[0]);
    float32x2_t v132 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.i8, 0);
    float32x2_t v133 = (float32x2_t)__PAIR64__(v132.u32[1], LODWORD(v129));
    float32x2_t v134 = vadd_f32(*(float32x2_t *)v117.f32, v132);
    v128.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v117.u32[1], LODWORD(v129)), v133).u32[0];
    v128.i32[1] = v134.i32[1];
    v108.i32[1] = v123.i32[2];
    LODWORD(v135) = vadd_f32(*(float32x2_t *)v108.f32, v130).u32[0];
    *(float32x2_t *)v108.f32 = vsub_f32(*(float32x2_t *)v108.f32, v131);
    HIDWORD(v135) = v108.i32[1];
    v128.i64[1] = v135;
  }
  v108.f32[0] = 0.5 / v129;
  float32x4_t v127 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 0);
LABEL_30:
  float32x4_t v140 = vmulq_n_f32(a16, v58.f32[0]);
  float32x4_t v141 = vmulq_n_f32(a16, v57.f32[0]);
  float32x4_t v142 = vmulq_n_f32(a16, a12.f32[0]);
  float32x4_t v143 = vmulq_n_f32(a16, a13.f32[0]);
  *(float32x4_t *)(v30 + 64) = vmulq_f32(v127, v128);
  float32x4_t v144 = vmulq_f32(v34, (float32x4_t)xmmword_1B6E4F320);
  float32x4_t v145 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v144, (int32x4_t)v144), (int8x16_t)v144, 0xCuLL);
  float32x4_t v146 = vmlaq_f32(vmulq_f32(v145, (float32x4_t)xmmword_1B6E9C790), (float32x4_t)xmmword_1B6E4F310, v144);
  float32x4_t v147 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v146, (int32x4_t)v146), (int8x16_t)v146, 0xCuLL);
  float32x4_t v148 = vmulq_f32(v146, v146);
  v148.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v148, 2), v148)).u64[0];
  float32x4_t v149 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 0);
  v149.i32[3] = 0;
  float32x4_t v150 = vrsqrteq_f32(v149);
  float32x4_t v151 = vmulq_f32(v150, vrsqrtsq_f32(v149, vmulq_f32(v150, v150)));
  int32x4_t v152 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v148.f32[0] != 0.0)), 0x1FuLL));
  v152.i32[3] = 0;
  float32x4_t v153 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v152), (int8x16_t)vmulq_f32(v147, vmulq_f32(v151, vrsqrtsq_f32(v149, vmulq_f32(v151, v151)))), vextq_s8(vextq_s8((int8x16_t)v144, (int8x16_t)v144, 0xCuLL), (int8x16_t)v144, 8uLL));
  float32x4_t v154 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v153, (int32x4_t)v153), (int8x16_t)v153, 0xCuLL), vnegq_f32(v144)), v153, v145);
  float32x4_t v155 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v154, (int32x4_t)v154), (int8x16_t)v154, 0xCuLL);
  int32x4_t v156 = (int32x4_t)vmulq_f32(v154, v154);
  v156.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v156.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v156, 2), *(float32x2_t *)v156.i8)).u32[0];
  float32x2_t v157 = vrsqrte_f32((float32x2_t)v156.u32[0]);
  float32x2_t v158 = vmul_f32(v157, vrsqrts_f32((float32x2_t)v156.u32[0], vmul_f32(v157, v157)));
  int32x4_t v159 = (int32x4_t)vmulq_n_f32(v155, vmul_f32(v158, vrsqrts_f32((float32x2_t)v156.u32[0], vmul_f32(v158, v158))).f32[0]);
  float v160 = v144.f32[2] + (float)(v153.f32[0] + *(float *)&v159.i32[1]);
  if (v160 > 0.0)
  {
    float32x4_t v161 = (float32x4_t)vzip2q_s32(v159, vuzp1q_s32(v159, (int32x4_t)v144));
    v161.i32[2] = v153.i32[1];
    float32x4_t v162 = (float32x4_t)vuzp2q_s32((int32x4_t)v144, vzip1q_s32((int32x4_t)v144, v159));
    v162.i32[1] = v153.i32[2];
    float32x4_t v163 = vsubq_f32(v161, v162);
    v161.i32[3] = sqrtf(v160 + 1.0);
    v162.i32[3] = v161.i32[3];
    float32x4_t v153 = vmulq_f32(v161, v162);
    v163.i32[3] = v153.i32[3];
    v153.f32[0] = 0.5 / v161.f32[3];
LABEL_32:
    float32x4_t v164 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v153.f32, 0);
    goto LABEL_39;
  }
  if (v153.f32[0] < v144.f32[2] || v153.f32[0] < *(float *)&v159.i32[1])
  {
    if (*(float *)&v159.i32[1] <= v144.f32[2])
    {
      v285.i32[0] = vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u32[0];
      v285.i32[1] = v159.i32[2];
      *(float32x2_t *)v163.f32 = vadd_f32(*(float32x2_t *)v144.f32, v285);
      float32x2_t v286 = (float32x2_t)__PAIR64__(v153.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v144.f32[2] + 1.0) - v153.f32[0]) - *(float *)&v159.i32[1])));
      float32x2_t v287 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v159.i8, 0);
      *(float32x2_t *)v153.f32 = vsub_f32(*(float32x2_t *)v153.f32, v287);
      v287.i32[0] = v286.i32[0];
      v287.i32[0] = vmul_f32(v286, v287).u32[0];
      v287.i32[1] = v153.i32[1];
      *(float32x2_t *)&v163.u32[2] = v287;
      v153.f32[0] = 0.5 / v286.f32[0];
      goto LABEL_32;
    }
    float v165 = sqrtf((float)((float)(*(float *)&v159.i32[1] + 1.0) - v153.f32[0]) - v144.f32[2]);
    int8x16_t v172 = (int8x16_t)v144;
    *(float *)v172.i32 = v165;
    float32x2_t v173 = (float32x2_t)vdup_laneq_s32(v159, 2);
    *(float *)v159.i32 = v153.f32[1] + *(float *)v159.i32;
    float32x2_t v174 = vadd_f32(*(float32x2_t *)v144.f32, v173);
    v173.f32[0] = v165;
    v172.i32[0] = vmul_f32(*(float32x2_t *)v172.i8, v173).u32[0];
    v172.i32[1] = v174.i32[1];
    float32_t v175 = v144.f32[0] - v153.f32[2];
    float32x4_t v164 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v159, (int8x16_t)v159, 4uLL), v172, 0xCuLL);
    v164.f32[3] = v175;
  }
  else
  {
    float v165 = sqrtf((float)((float)(v153.f32[0] + 1.0) - *(float *)&v159.i32[1]) - v144.f32[2]);
    float32x2_t v166 = (float32x2_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u64[0];
    float32x2_t v167 = (float32x2_t)__PAIR64__(v144.u32[1], v166.u32[0]);
    float32x2_t v168 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v159.i8, 0);
    float32x2_t v169 = (float32x2_t)__PAIR64__(v168.u32[1], LODWORD(v165));
    float32x2_t v170 = vadd_f32(*(float32x2_t *)v153.f32, v168);
    v164.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v153.u32[1], LODWORD(v165)), v169).u32[0];
    v164.i32[1] = v170.i32[1];
    v144.i32[1] = v159.i32[2];
    LODWORD(v171) = vadd_f32(*(float32x2_t *)v144.f32, v166).u32[0];
    *(float32x2_t *)v144.f32 = vsub_f32(*(float32x2_t *)v144.f32, v167);
    HIDWORD(v171) = v144.i32[1];
    v164.i64[1] = v171;
  }
  v144.f32[0] = 0.5 / v165;
  float32x4_t v163 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 0);
LABEL_39:
  float32x4_t v176 = vmlaq_lane_f32(v140, a17, *(float32x2_t *)v58.f32, 1);
  float32x4_t v177 = vmlaq_lane_f32(v141, a17, *(float32x2_t *)v57.f32, 1);
  float32x4_t v178 = vmlaq_lane_f32(v142, a17, *(float32x2_t *)a12.f32, 1);
  float32x4_t v179 = vmlaq_lane_f32(v143, a17, *(float32x2_t *)a13.f32, 1);
  *(float32x4_t *)(v30 + 80) = vmulq_f32(v163, v164);
  float32x4_t v180 = vmulq_f32(v34, (float32x4_t)xmmword_1B6E4F340);
  float32x4_t v181 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v180, (int32x4_t)v180), (int8x16_t)v180, 0xCuLL);
  float32x4_t v182 = vmlaq_f32(vmulq_f32(v181, (float32x4_t)xmmword_1B6E4F4D0), (float32x4_t)xmmword_1B6E4F2E0, v180);
  float32x4_t v183 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v182, (int32x4_t)v182), (int8x16_t)v182, 0xCuLL);
  float32x4_t v184 = vmulq_f32(v182, v182);
  v184.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v184.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v184, 2), v184)).u64[0];
  float32x4_t v185 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v184.f32, 0);
  v185.i32[3] = 0;
  float32x4_t v186 = vrsqrteq_f32(v185);
  float32x4_t v187 = vmulq_f32(v186, vrsqrtsq_f32(v185, vmulq_f32(v186, v186)));
  int32x4_t v188 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v184.f32[0] != 0.0)), 0x1FuLL));
  v188.i32[3] = 0;
  float32x4_t v189 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v188), (int8x16_t)vmulq_f32(v183, vmulq_f32(v187, vrsqrtsq_f32(v185, vmulq_f32(v187, v187)))), vextq_s8(vextq_s8((int8x16_t)v180, (int8x16_t)v180, 0xCuLL), (int8x16_t)v180, 8uLL));
  float32x4_t v190 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v189, (int32x4_t)v189), (int8x16_t)v189, 0xCuLL), vnegq_f32(v180)), v189, v181);
  float32x4_t v191 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v190, (int32x4_t)v190), (int8x16_t)v190, 0xCuLL);
  int32x4_t v192 = (int32x4_t)vmulq_f32(v190, v190);
  v192.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v192.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v192, 2), *(float32x2_t *)v192.i8)).u32[0];
  float32x2_t v193 = vrsqrte_f32((float32x2_t)v192.u32[0]);
  float32x2_t v194 = vmul_f32(v193, vrsqrts_f32((float32x2_t)v192.u32[0], vmul_f32(v193, v193)));
  int32x4_t v195 = (int32x4_t)vmulq_n_f32(v191, vmul_f32(v194, vrsqrts_f32((float32x2_t)v192.u32[0], vmul_f32(v194, v194))).f32[0]);
  float v196 = v180.f32[2] + (float)(v189.f32[0] + *(float *)&v195.i32[1]);
  if (v196 > 0.0)
  {
    float32x4_t v197 = (float32x4_t)vzip2q_s32(v195, vuzp1q_s32(v195, (int32x4_t)v180));
    v197.i32[2] = v189.i32[1];
    float32x4_t v198 = (float32x4_t)vuzp2q_s32((int32x4_t)v180, vzip1q_s32((int32x4_t)v180, v195));
    v198.i32[1] = v189.i32[2];
    float32x4_t v199 = vsubq_f32(v197, v198);
    v197.i32[3] = sqrtf(v196 + 1.0);
    v198.i32[3] = v197.i32[3];
    float32x4_t v180 = vmulq_f32(v197, v198);
    v199.i32[3] = v180.i32[3];
    v180.f32[0] = 0.5 / v197.f32[3];
LABEL_41:
    float32x4_t v200 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v180.f32, 0);
    goto LABEL_48;
  }
  if (v189.f32[0] < v180.f32[2] || v189.f32[0] < *(float *)&v195.i32[1])
  {
    if (*(float *)&v195.i32[1] <= v180.f32[2])
    {
      v288.i32[0] = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u32[0];
      v288.i32[1] = v195.i32[2];
      *(float32x2_t *)v199.f32 = vadd_f32(*(float32x2_t *)v180.f32, v288);
      float32x2_t v289 = (float32x2_t)__PAIR64__(v189.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v180.f32[2] + 1.0) - v189.f32[0]) - *(float *)&v195.i32[1])));
      float32x2_t v290 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v195.i8, 0);
      float32x2_t v291 = vsub_f32(*(float32x2_t *)v189.f32, v290);
      v290.i32[0] = v289.i32[0];
      v290.i32[0] = vmul_f32(v289, v290).u32[0];
      v180.i32[1] = v291.i32[1];
      v199.i64[1] = v180.i64[0];
      v180.f32[0] = 0.5 / v289.f32[0];
      goto LABEL_41;
    }
    float v201 = sqrtf((float)((float)(*(float *)&v195.i32[1] + 1.0) - v189.f32[0]) - v180.f32[2]);
    int8x16_t v208 = (int8x16_t)v180;
    *(float *)v208.i32 = v201;
    float32x2_t v209 = (float32x2_t)vdup_laneq_s32(v195, 2);
    *(float *)v195.i32 = v189.f32[1] + *(float *)v195.i32;
    float32x2_t v210 = vadd_f32(*(float32x2_t *)v180.f32, v209);
    v209.f32[0] = v201;
    v208.i32[0] = vmul_f32(*(float32x2_t *)v208.i8, v209).u32[0];
    v208.i32[1] = v210.i32[1];
    float32_t v211 = v180.f32[0] - v189.f32[2];
    float32x4_t v200 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v195, (int8x16_t)v195, 4uLL), v208, 0xCuLL);
    v200.f32[3] = v211;
  }
  else
  {
    float v201 = sqrtf((float)((float)(v189.f32[0] + 1.0) - *(float *)&v195.i32[1]) - v180.f32[2]);
    float32x2_t v202 = (float32x2_t)vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u64[0];
    float32x2_t v203 = (float32x2_t)__PAIR64__(v180.u32[1], v202.u32[0]);
    float32x2_t v204 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v195.i8, 0);
    float32x2_t v205 = (float32x2_t)__PAIR64__(v204.u32[1], LODWORD(v201));
    float32x2_t v206 = vadd_f32(*(float32x2_t *)v189.f32, v204);
    v200.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v189.u32[1], LODWORD(v201)), v205).u32[0];
    v200.i32[1] = v206.i32[1];
    v180.i32[1] = v195.i32[2];
    LODWORD(v207) = vadd_f32(*(float32x2_t *)v180.f32, v202).u32[0];
    *(float32x2_t *)v180.f32 = vsub_f32(*(float32x2_t *)v180.f32, v203);
    HIDWORD(v207) = v180.i32[1];
    v200.i64[1] = v207;
  }
  v180.f32[0] = 0.5 / v201;
  float32x4_t v199 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v180.f32, 0);
LABEL_48:
  float32x4_t v212 = vmlaq_laneq_f32(v176, a18, v58, 2);
  float32x4_t v213 = vmlaq_laneq_f32(v177, a18, v57, 2);
  float32x4_t v214 = vmlaq_laneq_f32(v178, a18, a12, 2);
  float32x4_t v215 = vmlaq_laneq_f32(v179, a18, a13, 2);
  *(float32x4_t *)(v30 + 96) = vmulq_f32(v199, v200);
  float32x4_t v216 = vmulq_f32(v34, (float32x4_t)xmmword_1B6E4F2E0);
  float32x4_t v217 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v216, (int32x4_t)v216), (int8x16_t)v216, 0xCuLL);
  float32x4_t v218 = vmlaq_f32(vmulq_f32(v217, (float32x4_t)xmmword_1B6E4F4D0), (float32x4_t)xmmword_1B6E4F2E0, v216);
  float32x4_t v219 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v218, (int32x4_t)v218), (int8x16_t)v218, 0xCuLL);
  float32x4_t v220 = vmulq_f32(v218, v218);
  v220.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v220.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v220, 2), v220)).u64[0];
  float32x4_t v221 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v220.f32, 0);
  v221.i32[3] = 0;
  float32x4_t v222 = vrsqrteq_f32(v221);
  float32x4_t v223 = vmulq_f32(v222, vrsqrtsq_f32(v221, vmulq_f32(v222, v222)));
  int32x4_t v224 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v220.f32[0] != 0.0)), 0x1FuLL));
  v224.i32[3] = 0;
  float32x4_t v225 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v224), (int8x16_t)vmulq_f32(v219, vmulq_f32(v223, vrsqrtsq_f32(v221, vmulq_f32(v223, v223)))), vextq_s8(vextq_s8((int8x16_t)v216, (int8x16_t)v216, 0xCuLL), (int8x16_t)v216, 8uLL));
  float32x4_t v226 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v225, (int32x4_t)v225), (int8x16_t)v225, 0xCuLL), vnegq_f32(v216)), v225, v217);
  float32x4_t v227 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v226, (int32x4_t)v226), (int8x16_t)v226, 0xCuLL);
  int32x4_t v228 = (int32x4_t)vmulq_f32(v226, v226);
  v228.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v228, 2), *(float32x2_t *)v228.i8)).u32[0];
  float32x2_t v229 = vrsqrte_f32((float32x2_t)v228.u32[0]);
  float32x2_t v230 = vmul_f32(v229, vrsqrts_f32((float32x2_t)v228.u32[0], vmul_f32(v229, v229)));
  int32x4_t v231 = (int32x4_t)vmulq_n_f32(v227, vmul_f32(v230, vrsqrts_f32((float32x2_t)v228.u32[0], vmul_f32(v230, v230))).f32[0]);
  float v232 = v216.f32[2] + (float)(v225.f32[0] + *(float *)&v231.i32[1]);
  int v296 = a1;
  if (v232 <= 0.0)
  {
    if (v225.f32[0] < v216.f32[2] || v225.f32[0] < *(float *)&v231.i32[1])
    {
      if (*(float *)&v231.i32[1] <= v216.f32[2])
      {
        float v234 = sqrtf((float)((float)(v216.f32[2] + 1.0) - v225.f32[0]) - *(float *)&v231.i32[1]);
        v292.i32[0] = vextq_s8((int8x16_t)v225, (int8x16_t)v225, 8uLL).u32[0];
        v292.i32[1] = v231.i32[2];
        *(float32x2_t *)v237.f32 = vadd_f32(*(float32x2_t *)v216.f32, v292);
        float32x2_t v293 = (float32x2_t)__PAIR64__(v225.u32[1], LODWORD(v234));
        float32x2_t v294 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.i8, 0);
        *(float32x2_t *)v236.f32 = vsub_f32(*(float32x2_t *)v225.f32, v294);
        v294.f32[0] = v234;
        v294.i32[0] = vmul_f32(v293, v294).u32[0];
        v294.i32[1] = v236.i32[1];
        *(float32x2_t *)&v237.u32[2] = v294;
        goto LABEL_50;
      }
      float v239 = sqrtf((float)((float)(*(float *)&v231.i32[1] + 1.0) - v225.f32[0]) - v216.f32[2]);
      int8x16_t v246 = (int8x16_t)v216;
      *(float *)v246.i32 = v239;
      float32x2_t v247 = (float32x2_t)vdup_laneq_s32(v231, 2);
      *(float *)v231.i32 = v225.f32[1] + *(float *)v231.i32;
      float32x2_t v248 = vadd_f32(*(float32x2_t *)v216.f32, v247);
      v247.f32[0] = v239;
      v246.i32[0] = vmul_f32(*(float32x2_t *)v246.i8, v247).u32[0];
      v246.i32[1] = v248.i32[1];
      float32_t v249 = v216.f32[0] - v225.f32[2];
      float32x4_t v238 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v231, (int8x16_t)v231, 4uLL), v246, 0xCuLL);
      v238.f32[3] = v249;
    }
    else
    {
      float v239 = sqrtf((float)((float)(v225.f32[0] + 1.0) - *(float *)&v231.i32[1]) - v216.f32[2]);
      float32x2_t v240 = (float32x2_t)vextq_s8((int8x16_t)v225, (int8x16_t)v225, 8uLL).u64[0];
      float32x2_t v241 = (float32x2_t)__PAIR64__(v216.u32[1], v240.u32[0]);
      float32x2_t v242 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.i8, 0);
      float32x2_t v243 = (float32x2_t)__PAIR64__(v242.u32[1], LODWORD(v239));
      float32x2_t v244 = vadd_f32(*(float32x2_t *)v225.f32, v242);
      v238.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v225.u32[1], LODWORD(v239)), v243).u32[0];
      v238.i32[1] = v244.i32[1];
      v216.i32[1] = v231.i32[2];
      LODWORD(v245) = vadd_f32(*(float32x2_t *)v216.f32, v240).u32[0];
      *(float32x2_t *)v216.f32 = vsub_f32(*(float32x2_t *)v216.f32, v241);
      HIDWORD(v245) = v216.i32[1];
      v238.i64[1] = v245;
    }
    v216.f32[0] = 0.5 / v239;
    float32x4_t v237 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v216.f32, 0);
    goto LABEL_57;
  }
  float32x4_t v233 = (float32x4_t)vzip2q_s32(v231, vuzp1q_s32(v231, (int32x4_t)v216));
  v233.i32[2] = v225.i32[1];
  float v234 = sqrtf(v232 + 1.0);
  float32x4_t v235 = (float32x4_t)vuzp2q_s32((int32x4_t)v216, vzip1q_s32((int32x4_t)v216, v231));
  v235.i32[1] = v225.i32[2];
  float32x4_t v237 = vsubq_f32(v233, v235);
  v233.f32[3] = v234;
  v235.f32[3] = v234;
  float32x4_t v236 = vmulq_f32(v233, v235);
  v237.i32[3] = v236.i32[3];
LABEL_50:
  v236.f32[0] = 0.5 / v234;
  float32x4_t v238 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v236.f32, 0);
LABEL_57:
  uint64_t v295 = a5;
  float32x4_t v320 = vmlaq_laneq_f32(v213, a19, v57, 3);
  float32x4_t v323 = vmlaq_laneq_f32(v212, a19, v58, 3);
  float32x4_t v303 = vmlaq_laneq_f32(v215, a19, a13, 3);
  float32x4_t v306 = vmlaq_laneq_f32(v214, a19, a12, 3);
  *(float32x4_t *)(v30 + 112) = vmulq_f32(v237, v238);
  float32x4_t v250 = &v327[48];
  for (uint64_t i = 32; i != 128; i += 16)
  {
    *(double *)v252.i64 = sub_1B69D0C3C(*(float32x4_t *)(v31 + i));
    v332.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v323, v252.f32[0]), v320, *(float32x2_t *)v252.f32, 1), v306, v252, 2), v303, v252, 3);
    v332.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v323, v253.f32[0]), v320, *(float32x2_t *)v253.f32, 1), v306, v253, 2), v303, v253, 3);
    v332.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v323, v254.f32[0]), v320, *(float32x2_t *)v254.f32, 1), v306, v254, 2), v303, v254, 3);
    v332.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v323, v255.f32[0]), v320, *(float32x2_t *)v255.f32, 1), v306, v255, 2), v303, v255, 3);
    *(simd_float4x4 *)(v250 - 48) = __invert_f4(v332);
    v250 += 64;
  }
  uint64_t v256 = 0;
  float32x4_t v257 = a13;
  v257.i32[3] = 1.0;
  simd_float4 v316 = (simd_float4)v257;
  unint64_t v309 = __PAIR64__(LODWORD(a9), LODWORD(a8));
  uint64_t v258 = a2 + 32;
  BOOL v259 = *(float *)(a2 + 44) == 1.0 && *(float *)(a2 + 40) == 1.0;
  do
  {
    float32x4_t v321 = *(float32x4_t *)(v31 + v256 * 16 + 32);
    float32x4_t v324 = a4[1];
    uint64_t v260 = *(char **)(a3 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a3 + 16) = v260;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v260 = sub_1B68C5AE4(0, *((void *)v260 + 2) + 1, 1, v260);
      *(void *)(a3 + 16) = v260;
    }
    unint64_t v263 = *((void *)v260 + 2);
    unint64_t v262 = *((void *)v260 + 3);
    if (v263 >= v262 >> 1) {
      uint64_t v260 = sub_1B68C5AE4(v262 > 1, v263 + 1, 1, v260);
    }
    float32x4_t v264 = v321;
    float32x4_t v265 = vmulq_f32(v264, v264);
    float32x4_t v266 = vmulq_laneq_f32(v264, v264, 3);
    float v267 = vmulq_lane_f32(v264, *(float32x2_t *)v264.f32, 1).f32[0];
    float v268 = v265.f32[1];
    float v269 = 0.5 - v265.f32[0];
    float32_t v270 = (float)(0.5 - v265.f32[0]) - v265.f32[2];
    *(float32x2_t *)v264.f32 = vmul_laneq_f32(*(float32x2_t *)v264.f32, v264, 2);
    v271.i32[3] = 0;
    v271.f32[0] = (float)(0.5 - v265.f32[1]) - v265.f32[2];
    v271.f32[1] = v267 + v266.f32[2];
    v271.f32[2] = v264.f32[0] - v266.f32[1];
    v333.columns[0] = (simd_float4)vaddq_f32(v271, v271);
    v272.i32[3] = 0;
    v272.f32[0] = v267 - v266.f32[2];
    v272.f32[1] = v270;
    v272.f32[2] = v264.f32[1] + v266.f32[0];
    v333.columns[1] = (simd_float4)vaddq_f32(v272, v272);
    *(int32x2_t *)v266.f32 = vrev64_s32(*(int32x2_t *)v266.f32);
    v273.i32[0] = vadd_f32(*(float32x2_t *)v264.f32, *(float32x2_t *)v266.f32).u32[0];
    v273.i32[1] = vsub_f32(*(float32x2_t *)&v264, *(float32x2_t *)&v266).i32[1];
    v273.f32[2] = v269 - v268;
    v273.i32[3] = 0;
    v333.columns[2] = (simd_float4)vaddq_f32(v273, v273);
    v333.columns[3] = v316;
    simd_float4x4 v334 = __invert_f4(v333);
    *((void *)v260 + 2) = v263 + 1;
    uint64_t v274 = &v260[160 * v263];
    *(simd_float4x4 *)(v274 + 32) = v334;
    *((_OWORD *)v274 + 6) = v313;
    *((_OWORD *)v274 + 7) = v312;
    *((_OWORD *)v274 + 8) = v311;
    *((_OWORD *)v274 + 9) = v310;
    *((void *)v274 + 20) = v309;
    *((float32x4_t *)v274 + 11) = v324;
    *(void *)(a3 + 16) = v260;
    if (v259)
    {
      float32x4_t v275 = a4[1];
      v328[v256] = v275;
      float v276 = vaddq_f32(v275, (float32x4_t)vdupq_laneq_s32((int32x4_t)v275, 2)).f32[0];
      a4[1].f32[0] = v276;
      if (v276 >= 1.0)
      {
        v277.i64[1] = v275.i64[1];
        v277.i32[0] = 0;
        v277.i32[1] = vaddq_f32(v275, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v275, 3)).i32[1];
        a4[1] = v277;
      }
    }
    else
    {
      v328[v256] = *(_OWORD *)(v258 + v256 * 16);
    }
    ++v256;
  }
  while (v256 != 6);
  swift_setDeallocating();
  swift_deallocClassInstance();
  float32x4_t v319 = v325;
  float32x4_t v322 = v326;
  long long v300 = v328[0];
  long long v302 = v328[1];
  long long v305 = v328[2];
  long long v308 = v328[3];
  long long v315 = v328[4];
  long long v318 = v328[5];
  float v29 = v329;
  long long v298 = v330[0];
  int v61 = v330[1];
  char v59 = BYTE4(v330[1]);
  a5 = v295;
  int v60 = v296;
LABEL_72:
  double result = memcpy((void *)(a5 + 32), v327, 0x180uLL);
  *(float32x4_t *)a5 = v319;
  *(float32x4_t *)(a5 + 16) = v322;
  *(_OWORD *)(a5 + 416) = v313;
  *(_OWORD *)(a5 + 432) = v312;
  *(_OWORD *)(a5 + 448) = v311;
  *(_OWORD *)(a5 + 464) = v310;
  *(_OWORD *)(a5 + 480) = v300;
  *(_OWORD *)(a5 + 496) = v302;
  *(_OWORD *)(a5 + 512) = v305;
  *(_OWORD *)(a5 + 528) = v308;
  *(_OWORD *)(a5 + 544) = v315;
  *(_OWORD *)(a5 + 560) = v318;
  *(_DWORD *)(a5 + 576) = v60;
  *(float *)(a5 + 580) = v29;
  *(_OWORD *)(a5 + 592) = v298;
  *(_DWORD *)(a5 + 608) = v61;
  *(unsigned char *)(a5 + 612) = v59;
  return result;
}

float sub_1B69CFAD0@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, simd_float4 a7@<Q0>, simd_float4 a8@<Q1>, simd_float4 a9@<Q2>, float32x4_t a10@<Q3>, float32x4_t a11@<Q4>, float32x4_t a12@<Q5>, float32x4_t a13@<Q6>, float32x4_t a14@<Q7>, float32x4_t a15, float32x4_t a16)
{
  simd_float4 v57 = a8;
  a8.i64[0] = *(void *)a1;
  a8.i32[2] = *(_DWORD *)(a1 + 8);
  float32x4_t v61 = (float32x4_t)a8;
  long long v53 = 0u;
  float v50 = a8.f32[2];
  uint64_t v42 = *(void *)(a1 + 16);
  sub_1B6333B58(1, 1, a8.f32[2], 1.0, *(float *)&v42, *((float *)&v42 + 1), 0, 0, 1);
  float v22 = *(float *)(a1 + 12);
  float32x4_t v64 = v24;
  float32x4_t v65 = v23;
  float32x4_t v62 = v26;
  float32x4_t v63 = v25;
  if (a3)
  {
    long long v54 = *(_OWORD *)(a5 + 16);
    long long v27 = *(char **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      long long v27 = sub_1B68C5AE4(0, *((void *)v27 + 2) + 1, 1, v27);
      *(void *)(a4 + 16) = v27;
    }
    unint64_t v30 = *((void *)v27 + 2);
    unint64_t v29 = *((void *)v27 + 3);
    v31.columns[3] = (simd_float4)a10;
    v31.columns[1] = v57;
    v31.columns[2] = a9;
    v31.columns[0] = a7;
    if (v30 >= v29 >> 1)
    {
      float32x4_t v41 = sub_1B68C5AE4(v29 > 1, v30 + 1, 1, v27);
      v31.columns[0] = a7;
      v31.columns[1] = v57;
      v31.columns[2] = a9;
      v31.columns[3] = (simd_float4)a10;
      long long v27 = v41;
    }
    simd_float4x4 v67 = __invert_f4(v31);
    *((void *)v27 + 2) = v30 + 1;
    float32x4_t v32 = &v27[160 * v30];
    *(simd_float4x4 *)(v32 + 32) = v67;
    float32x4_t v33 = (float32x4_t)v57;
    float32x4_t v34 = (float32x4_t)a9;
    *((float32x4_t *)v32 + 6) = v65;
    *((float32x4_t *)v32 + 7) = v64;
    *((float32x4_t *)v32 + 8) = v63;
    *((float32x4_t *)v32 + 9) = v62;
    *((void *)v32 + 20) = v42;
    float32x4_t v35 = (float32x4_t)a7;
    *((_OWORD *)v32 + 11) = v54;
    *(void *)(a4 + 16) = v27;
    long long v53 = *(_OWORD *)(a3 + 32);
  }
  else
  {
    a2 = 0;
    float32x4_t v33 = (float32x4_t)v57;
    float32x4_t v34 = (float32x4_t)a9;
    float32x4_t v35 = (float32x4_t)a7;
  }
  v68.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v35.f32[0]), a14, *(float32x2_t *)v35.f32, 1), a15, v35, 2), a16, v35, 3);
  v68.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v33.f32[0]), a14, *(float32x2_t *)v33.f32, 1), a15, v33, 2), a16, v33, 3);
  v68.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, v34.f32[0]), a14, *(float32x2_t *)v34.f32, 1), a15, v34, 2), a16, v34, 3);
  v68.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a13, a10.f32[0]), a14, *(float32x2_t *)a10.f32, 1), a15, a10, 2), a16, a10, 3);
  simd_float4x4 v69 = __invert_f4(v68);
  simd_float4 v56 = v69.columns[0];
  float32x4_t v60 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v65, v69.columns[0].f32[0]), v64, *(float32x2_t *)v69.columns[0].f32, 1), v63, (float32x4_t)v69.columns[0], 2), v62, (float32x4_t)v69.columns[0], 3);
  float32x4_t v58 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v65, v69.columns[1].f32[0]), v64, *(float32x2_t *)v69.columns[1].f32, 1), v63, (float32x4_t)v69.columns[1], 2), v62, (float32x4_t)v69.columns[1], 3);
  simd_float4 v43 = v69.columns[3];
  simd_float4 v44 = v69.columns[2];
  simd_float4 v47 = v69.columns[1];
  float32x4_t v49 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v65, v69.columns[2].f32[0]), v64, *(float32x2_t *)v69.columns[2].f32, 1), v63, (float32x4_t)v69.columns[2], 2), v62, (float32x4_t)v69.columns[2], 3);
  float32x4_t v45 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v65, v69.columns[3].f32[0]), v64, *(float32x2_t *)v69.columns[3].f32, 1), v63, (float32x4_t)v69.columns[3], 2), v62, (float32x4_t)v69.columns[3], 3);
  float v36 = 1.0 / COERCE_FLOAT(vmulq_f32(v61, v61).i32[1]);
  float v37 = cosf(v22 * 0.5);
  float v38 = cosf(v50 * 0.5);
  *(float32x4_t *)a6 = vdivq_f32(vmulq_f32(vmulq_n_f32(a11, v61.f32[0]), (float32x4_t)vdupq_n_s32(0x3ABFE803u)), (float32x4_t)vdupq_n_s32(0x40490FDAu));
  *(float32x4_t *)(a6 + 16) = vsubq_f32(a10, a12);
  *(simd_float4 *)(a6 + 32) = v56;
  *(simd_float4 *)(a6 + 48) = v47;
  *(simd_float4 *)(a6 + 64) = v44;
  *(simd_float4 *)(a6 + 80) = v43;
  *(float32x4_t *)(a6 + 96) = v65;
  *(float32x4_t *)(a6 + 112) = v64;
  float v39 = 8388600.0;
  *(float32x4_t *)(a6 + 128) = v63;
  *(float32x4_t *)(a6 + 144) = v62;
  *(float32x4_t *)(a6 + 160) = v60;
  *(float32x4_t *)(a6 + 176) = v58;
  if ((float)(v37 - v38) >= 0.00000011921) {
    float v39 = 1.0 / (float)(v37 - v38);
  }
  *(float32x4_t *)(a6 + 192) = v49;
  *(float32x4_t *)(a6 + 208) = v45;
  *(_OWORD *)(a6 + 224) = v53;
  float result = -(float)(v38 * v39);
  *(_DWORD *)(a6 + 240) = a2;
  *(float *)(a6 + 244) = v36;
  *(float *)(a6 + 248) = v39;
  *(float *)(a6 + 252) = result;
  *(void *)(a6 + 256) = 0;
  *(void *)(a6 + 264) = 0;
  *(void *)(a6 + 269) = 0;
  return result;
}

uint64_t sub_1B69CFE3C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1B69CFE8C()
{
  sub_1B69CFE3C();

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for AmbientLight()
{
  return &type metadata for AmbientLight;
}

ValueMetadata *type metadata accessor for SpotLight()
{
  return &type metadata for SpotLight;
}

ValueMetadata *type metadata accessor for PointLight()
{
  return &type metadata for PointLight;
}

ValueMetadata *type metadata accessor for DirectionalLight()
{
  return &type metadata for DirectionalLight;
}

void sub_1B69CFF00(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  char v11 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    if (objc_msgSend(v11, sel_storageMode) != (id)2)
    {
      char v15 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v16 = v11;
      char v17 = *(void **)(a2 + 176);
      swift_retain();
      sub_1B6B3AD4C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1F0F851A8, v17);
      long long v21 = v18;
      swift_release();
      *(float32x2_t *)v19.f32 = vsub_f32(0, *(float32x2_t *)&v21);
      v19.f32[2] = 0.0 - *((float *)&v21 + 2);
      v19.i32[3] = 1.0;
      v30.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, a4.f32[0]), (float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)a4.f32, 1), (float32x4_t)xmmword_1B6E4F2E0, a4, 2), v19, a4, 3);
      v30.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, a5.f32[0]), (float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)a5.f32, 1), (float32x4_t)xmmword_1B6E4F2E0, a5, 2), v19, a5, 3);
      v30.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, a6.f32[0]), (float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)a6.f32, 1), (float32x4_t)xmmword_1B6E4F2E0, a6, 2), v19, a6, 3);
      v30.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, a7.f32[0]), (float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)a7.f32, 1), (float32x4_t)xmmword_1B6E4F2E0, a7, 2), v19, a7, 3);
      uint64_t v20 = &v15[256 * *(void *)(a3 + 24) + v14];
      *(simd_float4x4 *)(v20 + 2144) = __invert_f4(v30);
      *((__n128 *)v20 + 138) = a8;
      *((__n128 *)v20 + 139) = a9;
      *((__n128 *)v20 + 140) = a10;
      *((__n128 *)v20 + 141) = a11;
    }
  }
}

uint64_t sub_1B69D0098(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746E65747865 && a2 == 0xE700000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B6F415E0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B69D01F8()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

float sub_1B69D0244(void *a1)
{
  sub_1B69D1B6C(0, &qword_1EB980940, (uint64_t (*)(void))sub_1B69D04E4, (uint64_t)&type metadata for DirectionalLight.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v14 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D04E4();
  sub_1B6E33A48();
  if (!v1)
  {
    char v18 = 0;
    uint64_t v10 = sub_1B6E32D58();
    if ((v10 & 0x100000000) != 0) {
      float v2 = 2145.7;
    }
    else {
      float v2 = *(float *)&v10;
    }
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    sub_1B62C14BC(a1, v11);
    if (sub_1B62B8F14(1047, v11, v12))
    {
      char v15 = 1;
      sub_1B6E32DC8();
    }
    char v17 = 2;
    sub_1B6E32D58();
    char v16 = 3;
    sub_1B6E32D58();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B69D04E4()
{
  unint64_t result = qword_1EB97EC08;
  if (!qword_1EB97EC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EC08);
  }
  return result;
}

float sub_1B69D0538(void *a1)
{
  sub_1B69D1B6C(0, &qword_1EB980880, (uint64_t (*)(void))sub_1B69D07BC, (uint64_t)&type metadata for PointLight.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D07BC();
  sub_1B6E33A48();
  if (!v1)
  {
    char v16 = 0;
    uint64_t v10 = sub_1B6E32D58();
    if ((v10 & 0x100000000) != 0) {
      float v2 = 2145.7;
    }
    else {
      float v2 = *(float *)&v10;
    }
    char v15 = 1;
    sub_1B6E32D58();
    char v14 = 2;
    sub_1B6E32D58();
    char v13 = 3;
    sub_1B6E32D58();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B69D07BC()
{
  unint64_t result = qword_1EB97DA58;
  if (!qword_1EB97DA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DA58);
  }
  return result;
}

uint64_t sub_1B69D0810@<X0>(void *a1@<X0>, float *a2@<X8>)
{
  float32x4_t v25 = a2;
  sub_1B69D1B6C(0, &qword_1E9DD3900, (uint64_t (*)(void))sub_1B69D0B28, (uint64_t)&type metadata for SpotLight.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v24 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D0B28();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v25;
  char v31 = 0;
  uint64_t v11 = sub_1B6E32D58();
  if ((v11 & 0x100000000) != 0) {
    float v12 = 2145.7;
  }
  else {
    float v12 = *(float *)&v11;
  }
  char v30 = 1;
  uint64_t v13 = sub_1B6E32D58();
  if ((v13 & 0x100000000) != 0) {
    float v14 = 10.0;
  }
  else {
    float v14 = *(float *)&v13;
  }
  char v29 = 2;
  uint64_t v15 = sub_1B6E32D58();
  if ((v15 & 0x100000000) != 0) {
    float v16 = 1.0472;
  }
  else {
    float v16 = *(float *)&v15;
  }
  char v28 = 3;
  uint64_t v17 = sub_1B6E32D58();
  if ((v17 & 0x100000000) != 0) {
    float v18 = 0.7854;
  }
  else {
    float v18 = *(float *)&v17;
  }
  char v27 = 4;
  uint64_t v19 = sub_1B6E32D58();
  char v26 = 5;
  uint64_t v21 = sub_1B6E32D58();
  if ((v19 & 0x100000000) != 0) {
    float v22 = 0.01;
  }
  else {
    float v22 = *(float *)&v19;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if ((v21 & 0x100000000) != 0) {
    float v23 = 10.0;
  }
  else {
    float v23 = *(float *)&v21;
  }
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *uint64_t v10 = v12;
  v10[1] = v14;
  _OWORD v10[2] = v16;
  v10[3] = v18;
  v10[4] = v22;
  void v10[5] = v23;
  return result;
}

unint64_t sub_1B69D0B28()
{
  unint64_t result = qword_1E9DD3908;
  if (!qword_1E9DD3908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3908);
  }
  return result;
}

uint64_t sub_1B69D0B7C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B69D0BB4()
{
  return MEMORY[0x1F4186498](v0, 32, 15);
}

void sub_1B69D0BC4()
{
  if (!qword_1EB97E0D0)
  {
    unint64_t Result2 = type metadata accessor for QueryResult2();
    if (!v1) {
      atomic_store(Result2, (unint64_t *)&qword_1EB97E0D0);
    }
  }
}

double sub_1B69D0C3C(float32x4_t _Q0)
{
  _S3 = _Q0.u32[1];
  _S5 = _Q0.u32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = _Q0.u32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  float v10 = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[2], _Q0, 3), _Q0.f32[1], _Q0.f32[0]);
  LODWORD(v11) = _S1;
  *((float *)&v11 + 1) = v10 + v10;
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  return v11;
}

void sub_1B69D0D08(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t Result4 = type metadata accessor for QueryResult4();
    if (!v4) {
      atomic_store(Result4, a2);
    }
  }
}

void sub_1B69D0D98(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t Result3 = type metadata accessor for QueryResult3();
    if (!v4) {
      atomic_store(Result3, a2);
    }
  }
}

unint64_t sub_1B69D0E14()
{
  unint64_t result = qword_1EB97DDD0;
  if (!qword_1EB97DDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DDD0);
  }
  return result;
}

uint64_t *sub_1B69D0E68(uint64_t *a1)
{
  return a1;
}

void sub_1B69D0EBC(uint64_t a1)
{
}

void sub_1B69D0ED4(uint64_t a1)
{
  sub_1B69CFF00(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(float32x4_t *)(v1 + 32), *(float32x4_t *)(v1 + 48), *(float32x4_t *)(v1 + 64), *(float32x4_t *)(v1 + 80), *(__n128 *)(v1 + 96), *(__n128 *)(v1 + 112), *(__n128 *)(v1 + 128), *(__n128 *)(v1 + 144));
}

uint64_t getEnumTagSinglePayload for ShaderArgument.TextureDesc(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderArgument.TextureDesc(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RectAreaLight()
{
  return &type metadata for RectAreaLight;
}

unsigned char *storeEnumTagSinglePayload for AmbientLight.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B69D1044);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AmbientLight.CodingKeys()
{
  return &type metadata for AmbientLight.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SpotLight.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69D1148);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotLight.CodingKeys()
{
  return &type metadata for SpotLight.CodingKeys;
}

ValueMetadata *type metadata accessor for PointLight.CodingKeys()
{
  return &type metadata for PointLight.CodingKeys;
}

unsigned char *_s3VFX10PointLightV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69D1260);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DirectionalLight.CodingKeys()
{
  return &type metadata for DirectionalLight.CodingKeys;
}

uint64_t assignWithCopy for LightsUniforms(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  return a1;
}

uint64_t assignWithTake for LightsUniforms(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  return a1;
}

uint64_t getEnumTagSinglePayload for LightsUniforms(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 51)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LightsUniforms(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 50) = 0;
    *(_WORD *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 51) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 51) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LightsUniforms()
{
  return &type metadata for LightsUniforms;
}

unint64_t sub_1B69D1478()
{
  unint64_t result = qword_1E9DD3920;
  if (!qword_1E9DD3920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3920);
  }
  return result;
}

unint64_t sub_1B69D14D0()
{
  unint64_t result = qword_1E9DD3928;
  if (!qword_1E9DD3928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3928);
  }
  return result;
}

unint64_t sub_1B69D1528()
{
  unint64_t result = qword_1E9DD3930;
  if (!qword_1E9DD3930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3930);
  }
  return result;
}

unint64_t sub_1B69D1580()
{
  unint64_t result = qword_1E9DD3938;
  if (!qword_1E9DD3938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3938);
  }
  return result;
}

unint64_t sub_1B69D15D8()
{
  unint64_t result = qword_1EB97DDE0;
  if (!qword_1EB97DDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DDE0);
  }
  return result;
}

unint64_t sub_1B69D1630()
{
  unint64_t result = qword_1EB97DDD8;
  if (!qword_1EB97DDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DDD8);
  }
  return result;
}

unint64_t sub_1B69D1688()
{
  unint64_t result = qword_1E9DD3940;
  if (!qword_1E9DD3940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3940);
  }
  return result;
}

unint64_t sub_1B69D16E0()
{
  unint64_t result = qword_1E9DD3948;
  if (!qword_1E9DD3948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3948);
  }
  return result;
}

unint64_t sub_1B69D1738()
{
  unint64_t result = qword_1EB97DA68;
  if (!qword_1EB97DA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DA68);
  }
  return result;
}

unint64_t sub_1B69D1790()
{
  unint64_t result = qword_1EB97DA60;
  if (!qword_1EB97DA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DA60);
  }
  return result;
}

unint64_t sub_1B69D17E8()
{
  unint64_t result = qword_1EB97EC18;
  if (!qword_1EB97EC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EC18);
  }
  return result;
}

unint64_t sub_1B69D1840()
{
  unint64_t result = qword_1EB97EC10;
  if (!qword_1EB97EC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EC10);
  }
  return result;
}

float sub_1B69D1894(void *a1)
{
  sub_1B69D1B6C(0, &qword_1E9DD3950, (uint64_t (*)(void))sub_1B69D1B18, (uint64_t)&type metadata for RectAreaLight.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = &v12[-v8];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D1B18();
  sub_1B6E33A48();
  if (!v1)
  {
    v12[47] = 0;
    sub_1B6E32DC8();
    float v2 = v10;
    sub_1B69D1B6C(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
    v12[46] = 1;
    sub_1B69D1BD4((unint64_t *)&qword_1EB97D1D0);
    sub_1B6E32DF8();
    v12[45] = 2;
    sub_1B6E32DA8();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B69D1B18()
{
  unint64_t result = qword_1E9DD3958;
  if (!qword_1E9DD3958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3958);
  }
  return result;
}

void sub_1B69D1B6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_1B69D1BD4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B69D1B6C(255, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RectAreaLight.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69D1D1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RectAreaLight.CodingKeys()
{
  return &type metadata for RectAreaLight.CodingKeys;
}

unint64_t sub_1B69D1D58()
{
  unint64_t result = qword_1E9DD3968;
  if (!qword_1E9DD3968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3968);
  }
  return result;
}

unint64_t sub_1B69D1DB0()
{
  unint64_t result = qword_1E9DD3970;
  if (!qword_1E9DD3970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3970);
  }
  return result;
}

unint64_t sub_1B69D1E08()
{
  unint64_t result = qword_1E9DD3978;
  if (!qword_1E9DD3978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3978);
  }
  return result;
}

uint64_t sub_1B69D1E5C()
{
  return type metadata accessor for ParticleNoiseSystem();
}

void sub_1B69D1E7C(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1036831949;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 1042536202;
  *(unsigned char *)(a1 + 36) = 0;
  *(void *)(a1 + 40) = 3;
  *(unsigned char *)(a1 + 48) = 0;
}

uint64_t sub_1B69D1EAC(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BAF780(*a1, *a2);
}

uint64_t sub_1B69D1EB8()
{
  return sub_1B6BCF220();
}

uint64_t sub_1B69D1EC0()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69D1FB8()
{
  return sub_1B69EBC18();
}

uint64_t sub_1B69D1FC0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69D51EC();
  *a1 = result;
  return result;
}

void sub_1B69D1FF0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE500000000000000;
  uint64_t v3 = 0x656C616373;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1935763810;
      goto LABEL_3;
    case 2:
      *a1 = 0x7469736E65746E69;
      a1[1] = 0xE900000000000079;
      break;
    case 3:
      *a1 = 0x6573696F6ELL;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 0x657A6974726F6D61;
      a1[1] = 0xE900000000000064;
      break;
    case 5:
      *a1 = 0x6F69736E656D6964;
      a1[1] = 0xEA0000000000736ELL;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1B69D20C8()
{
  uint64_t result = 0x656C616373;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1935763810;
      break;
    case 2:
      uint64_t result = 0x7469736E65746E69;
      break;
    case 3:
      uint64_t result = 0x6573696F6ELL;
      break;
    case 4:
      uint64_t result = 0x657A6974726F6D61;
      break;
    case 5:
      uint64_t result = 0x6F69736E656D6964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B69D218C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B69D51EC();
  *a1 = result;
  return result;
}

uint64_t sub_1B69D21B4(uint64_t a1)
{
  unint64_t v2 = sub_1B69D5B84();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B69D21F0(uint64_t a1)
{
  unint64_t v2 = sub_1B69D5B84();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B69D222C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B69D5BD8(0, &qword_1E9DD3988, (uint64_t (*)(void))sub_1B69D5B84, (uint64_t)&type metadata for ParticleNoise.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D5B84();
  sub_1B6E33A88();
  LOBYTE(v12) = 0;
  sub_1B6E32F78();
  if (!v2)
  {
    long long v12 = *(_OWORD *)(v3 + 16);
    char v13 = 1;
    sub_1B69D5BD8(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B62AF118((unint64_t *)&qword_1EB97D1D8);
    sub_1B6E32FA8();
    LOBYTE(v12) = 2;
    sub_1B6E32F78();
    LOBYTE(v12) = *(unsigned char *)(v3 + 36);
    char v13 = 3;
    sub_1B66C59A0();
    sub_1B6E32FA8();
    LOBYTE(v12) = 4;
    sub_1B6E32F58();
    LOBYTE(v12) = 5;
    sub_1B6E32F88();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B69D24F0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B69D57BC(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(unsigned char *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1B69D253C(void *a1)
{
  return sub_1B69D222C(a1);
}

uint64_t type metadata accessor for ParticleNoise.GPUSystem()
{
  return self;
}

const char *sub_1B69D257C()
{
  return "ParticleNoise.GPU";
}

uint64_t sub_1B69D2590()
{
  return type metadata accessor for ParticleNoise.GPUSystem();
}

__n128 sub_1B69D25B0@<Q0>(__n128 *a1@<X8>)
{
  result.n128_u64[0] = 0xFFFFFFFFLL;
  result.n128_u64[1] = 0xFFFFFFFFLL;
  *a1 = result;
  a1[1] = result;
  a1[2] = result;
  return result;
}

uint64_t sub_1B69D25C0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69D2620()
{
  return sub_1B6E33928();
}

uint64_t sub_1B69D2660()
{
  return sub_1B6E33988();
}

BOOL sub_1B69D26BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

uint64_t sub_1B69D26E8@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = a2;
  unint64_t v7 = 0x80000001B6F41750;
  unint64_t v8 = 0x80000001B6F41710;
  if (a3 == 2) {
    unint64_t v8 = 0x80000001B6F41730;
  }
  if (a3 != 1) {
    unint64_t v7 = v8;
  }
  uint64_t v9 = 0x62665F44316E6567;
  uint64_t v10 = 0x62665F44336E6567;
  if (a3 == 2) {
    uint64_t v10 = 0x62665F44326E6567;
  }
  if (a3 != 1) {
    uint64_t v9 = v10;
  }
  if (a2 == 1) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = 0xD000000000000010;
  }
  if (a2 == 1) {
    unint64_t v12 = 0xEF6573696F6E5F6DLL;
  }
  else {
    unint64_t v12 = v7;
  }
  sub_1B6E33998();
  swift_bridgeObjectRetain();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v67 = v49;
  long long v68 = v50;
  uint64_t v69 = v51;
  long long v65 = v47;
  long long v66 = v48;
  uint64_t v13 = sub_1B6E33978();
  v64[0] = v11;
  v64[1] = v12;
  _OWORD v64[2] = 0;
  v64[3] = 0;
  void v64[4] = MEMORY[0x1E4FBC860];
  v64[5] = 0;
  v64[6] = v13;
  id v14 = sub_1B679C370((uint64_t)v64, 0, 0);
  float v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  float32x4_t v45 = v14;
  if (!v14) {
    goto LABEL_38;
  }
  uint64_t v17 = 7;
  if (a3 == 2) {
    uint64_t v17 = 2;
  }
  uint64_t v18 = a3 == 1 ? 0 : v17;
  double Default = RGTextureDescriptorMakeDefault((uint64_t)&v47);
  char v20 = BYTE10(v47);
  long long v21 = v50;
  uint64_t v22 = v51;
  LODWORD(Default) = DWORD2(v51);
  int16x8_t v44 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&Default);
  if (v6 == 1)
  {
    unint64_t v23 = 0xEF6573696F6E5F6DLL;
    if (a3 == 1) {
      unsigned int v24 = 829318503;
    }
    else {
      unsigned int v24 = a3 == 2 ? 846095719 : 862872935;
    }
    unint64_t v26 = v24 | 0x62665F4400000000;
  }
  else
  {
    if (a3 == 1) {
      float32x4_t v25 = "gen2D_curl_noise";
    }
    else {
      float32x4_t v25 = a3 == 2 ? "gen3D_curl_noise" : "ShaderTexture : texture type ";
    }
    unint64_t v23 = (unint64_t)v25 | 0x8000000000000000;
    unint64_t v26 = 0xD000000000000010;
  }
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35330]), sel_init);
  *(void *)&long long v47 = 0x1004000400040;
  WORD4(v47) = 257;
  BYTE10(v47) = v20;
  *(void *)&long long v48 = 125;
  *((void *)&v48 + 1) = v18;
  long long v49 = xmmword_1B6E9D130;
  long long v50 = v21;
  *(void *)&long long v51 = v22;
  DWORD2(v51) = vmovn_s16(v44).u32[0];
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v47, v27);
  char v28 = sub_1B639E4E4(v27, v26, v23);
  swift_bridgeObjectRelease();

  if (v28)
  {
    id v29 = objc_msgSend(*(id *)(a1 + 312), sel_commandBuffer);
    if (v29)
    {
      sub_1B6E328F8();
      char v30 = (void *)sub_1B6E31768();
      swift_bridgeObjectRelease();
      objc_msgSend(v29, sel_setLabel_, v30);

      sub_1B637AE10(v29);
    }
    swift_unknownObjectRetain();
    char v31 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, v29);
    float32x4_t v32 = (void *)sub_1B6E31768();
    objc_msgSend(v31, sel_pushDebugGroup_, v32);

    sub_1B69D2C90(v31, v28, v45);
    objc_msgSend(v31, sel_endEncoding);
    objc_msgSend(v31, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    RGTextureDescriptor.init()((uint64_t)&v56);
    *(void *)&long long v48 = 0;
    long long v47 = 0uLL;
    BYTE8(v48) = 0;
    *(void *)&long long v49 = v56;
    WORD4(v49) = v57;
    BYTE10(v49) = v58;
    long long v50 = v59;
    long long v51 = v60;
    long long v52 = v61;
    uint64_t v53 = v62;
    int v54 = v63;
    uint64_t v55 = MEMORY[0x1E4FBC860];
    swift_unknownObjectRetain();
    sub_1B6D01A34(a1, v28, (uint64_t)&v47, v29, 0, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v29, sel_commit);
    objc_msgSend(v29, sel_waitUntilCompleted);
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v34 = v48;
    __int16 v35 = WORD4(v49);
    char v36 = BYTE10(v49);
    uint64_t v37 = v53;
    uint64_t v38 = v55;
    uint64_t v39 = v49;
    long long v40 = v50;
    long long v41 = v51;
    long long v42 = v52;
    int v43 = v54;
    *(_OWORD *)a4 = v47;
    *(void *)(a4 + 16) = v34;
    *(unsigned char *)(a4 + 24) = 1;
    *(void *)(a4 + 32) = v39;
    *(_WORD *)(a4 + 40) = v35;
    *(unsigned char *)(a4 + 42) = v36;
    *(_OWORD *)(a4 + 48) = v40;
    *(_OWORD *)(a4 + 64) = v41;
    *(_OWORD *)(a4 + 80) = v42;
    *(void *)(a4 + 96) = v37;
    *(_DWORD *)(a4 + 104) = v43;
    *(void *)(a4 + 112) = v38;
    *(void *)(a4 + 120) = v28;
  }
  else
  {
LABEL_38:
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69D2C90(void *a1, void *a2, void *a3)
{
  swift_getObjectType();
  objc_msgSend(a1, sel_setTexture_atIndex_, a2, 0);
  id v6 = objc_msgSend(a2, sel_textureType);
  if (v6 == (id)7) {
    return sub_1B6B59694(a3, (uint64_t)a2, 0);
  }
  if (v6 == (id)2) {
    return sub_1B6B595FC(a3, (uint64_t)a2, 0);
  }
  if (!v6) {
    return sub_1B6B59598(a3, (uint64_t)a2, 0);
  }
  sub_1B69D5C40(0, &qword_1EB980E00, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E77050;
  sub_1B6E328C8();
  sub_1B6E31948();
  objc_msgSend(a2, sel_textureType);
  type metadata accessor for MTLTextureType(0);
  sub_1B6E32B18();
  sub_1B6E31948();
  *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0xE000000000000000;
  sub_1B6E338E8();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1B69D2E78(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v433 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v3 = (void *)a1[1];
  swift_retain_n();
  unint64_t v344 = (unint64_t)v3;
  sub_1B695E808(v3, (uint64_t)v401);
  unsigned int v5 = v401[0];
  uint64_t v6 = v401[2];
  uint64_t v7 = v401[3];
  unint64_t v8 = v401[4];
  uint64_t v9 = v401[5];
  char v10 = v402;
  swift_release();
  sub_1B62CA47C((uint64_t)v401, (uint64_t)v425, &qword_1E9DD3990, (uint64_t)&type metadata for ParticleNoise);
  if (v425[48] == 2)
  {
    sub_1B62F46E8();
    unsigned __int8 v365 = 0;
    LOBYTE(v11) = 0;
    v12.i32[0] = 1036831949;
    LODWORD(v14) = vdup_lane_s32(v12, 0).u32[0];
    *((float *)&v14 + 1) = v13 * 0.16;
    float32x4_t v331 = 0u;
    uint64_t v353 = 3;
    goto LABEL_3;
  }
  if (*(float *)&v8 == 0.0) {
    return (uint64_t *)swift_release();
  }
  uint64_t v353 = v9;
  sub_1B62F46E8();
  unsigned __int8 v365 = v10 & 1;
  float v37 = 1.0;
  if (v10) {
    float v37 = 4.0;
  }
  float v38 = v37 * (float)(v36 * *(float *)&v8);
  if (BYTE4(v8) == 2)
  {
    float v354 = v38;
    uint64_t v341 = 0;
    long long v39 = *(_OWORD *)(v2 + 32);
    long long v411 = *(_OWORD *)(v2 + 16);
    long long v412 = v39;
    uint64_t v413 = *(void *)(v2 + 48);
    sub_1B62C9DA8(v4, (uint64_t)&v411, 0x200000000, &v419);
    sub_1B62CA47C((uint64_t)&v419, (uint64_t)&v391, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (!(void)v391) {
      return (uint64_t *)swift_release();
    }
    if ((uint64_t)v397 <= 0)
    {
      swift_release();
    }
    else
    {
      uint64_t v332 = *((void *)&v395 + 1);
      if (*((void *)&v395 + 1))
      {
        long long v40 = (void *)*((void *)&v396 + 1);
        uint64_t v41 = *(void *)(*((void *)&v396 + 1) + 32);
        char v42 = *(unsigned char *)(v396 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v405[0] = v391;
        v405[1] = v392;
        uint64_t v311 = v394;
        uint64_t v406 = v393;
        int v296 = (void *)(*((void *)&v396 + 1) + 64);
        uint64_t v304 = *((void *)&v396 + 1) + 48;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v43 = 0;
        __asm { FMOV            V0.4S, #-1.0 }
        float32x4_t v345 = _Q0;
        char v314 = v42;
        uint64_t v323 = v41;
        while (1)
        {
          long long v49 = (unsigned int *)(v311 + 48 * v43);
          uint64_t v50 = *v49;
          uint64_t v379 = v49[1];
          long long v52 = (uint64_t *)*((void *)v49 + 2);
          uint64_t v51 = *((void *)v49 + 3);
          uint64_t v54 = *((void *)v49 + 4);
          uint64_t v53 = *((void *)v49 + 5);
          if (v42)
          {
            uint64_t v55 = *(os_unfair_lock_s **)(v53 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v55);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v53 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v41);
          sub_1B62CA47C(v304, (uint64_t)&v407, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v56 = v40[4];
          uint64_t v57 = *(void *)(*(void *)(*(void *)(*(void *)(v53 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v40[6] = ecs_stack_allocator_allocate(v56, 48 * v57, 8);
          v40[7] = v57;
          v296[1] = 0;
          v296[2] = 0;
          *int v296 = 0;
          swift_release();
          uint64_t v58 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v52, v51, v54, (uint64_t)v40);
          long long v59 = (float32x4_t *)v58;
          if (v52)
          {
            char v42 = v314;
            if (v54)
            {
              uint64_t v41 = v323;
              int v61 = v287;
              int v60 = v294;
              v62.i32[3] = v286;
              do
              {
                int v376 = v60;
                __int32 v381 = v62.i32[3];
                int v372 = v61;
                double v366 = drand48();
                double v63 = drand48();
                v64.f64[0] = v366;
                v64.f64[1] = v63;
                *(float32x2_t *)v65.f32 = vcvt_f32_f64(v64);
                float32x4_t v367 = v65;
                float32_t v66 = drand48();
                float32x4_t v67 = v367;
                v67.f32[2] = v66;
                float32x4_t v62 = vaddq_f32(*v59, vmulq_n_f32(vaddq_f32(vaddq_f32(v67, v67), v345), v354));
                int v61 = v372;
                int v60 = v376;
                v62.i32[3] = v381;
                float32x4_t v68 = v62;
                v68.i32[3] = 0;
                *v59++ = v68;
                --v54;
              }
              while (v54);
              __int32 v286 = v381;
              int v287 = v372;
              int v294 = v376;
              uint64_t v69 = v341;
              goto LABEL_32;
            }
          }
          else
          {
            char v42 = v314;
            if (v50 != v379)
            {
              uint64_t v70 = v379 - v50;
              float32x2_t v71 = (float32x4_t *)(v58 + 16 * v50);
              uint64_t v69 = v341;
              int v73 = v271.i32[3];
              int v72 = v279;
              v74.i32[3] = v267.i32[3];
              do
              {
                int v377 = v72;
                __int32 v382 = v74.i32[3];
                int v373 = v73;
                double v368 = drand48();
                double v75 = drand48();
                v76.f64[0] = v368;
                v76.f64[1] = v75;
                *(float32x2_t *)v77.f32 = vcvt_f32_f64(v76);
                float32x4_t v369 = v77;
                float32_t v78 = drand48();
                float32x4_t v79 = v369;
                v79.f32[2] = v78;
                float32x4_t v74 = vaddq_f32(*v71, vmulq_n_f32(vaddq_f32(vaddq_f32(v79, v79), v345), v354));
                int v73 = v373;
                int v72 = v377;
                v74.i32[3] = v382;
                float32x4_t v80 = v74;
                v80.i32[3] = 0;
                *v71++ = v80;
                --v70;
              }
              while (v70);
              v267.i32[3] = v382;
              v271.i32[3] = v373;
              int v279 = v377;
              goto LABEL_31;
            }
          }
          uint64_t v69 = v341;
LABEL_31:
          uint64_t v41 = v323;
LABEL_32:
          sub_1B6345178(v40, (unsigned __int16 **)v405, (uint64_t)&v407);
          uint64_t v341 = v69;
          sub_1B634507C((char *)v53);
          ecs_stack_allocator_pop_snapshot(v41);
          if (v42)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v53 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v53 + 376));
          }
          swift_release();
          if (++v43 == v332) {
            goto LABEL_38;
          }
        }
      }
      swift_retain();
      swift_retain();
      swift_retain();
LABEL_38:
      swift_release();
      sub_1B632F170((uint64_t *)&v419);
    }
    return sub_1B632F170((uint64_t *)&v419);
  }
  unint64_t v11 = HIDWORD(v8);
  v81.i64[0] = v6;
  v81.i64[1] = v7;
  float32x4_t v331 = v81;
  unint64_t v14 = __PAIR64__(LODWORD(v38), v5);
LABEL_3:
  uint64_t v15 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v15) {
    return (uint64_t *)swift_release();
  }
  uint64_t v322 = v2;
  uint64_t v340 = 0;
  uint64_t v16 = *(void *)(v15 + 240);
  int32x2_t v374 = (int32x2_t)v14;
  swift_retain();
  swift_retain();
  sub_1B6BCB1C0(v11, v353, v16, v15, v11, v353, (uint64_t)&v391);
  long long v17 = v391;
  uint64_t v18 = v392;
  char v19 = BYTE8(v392);
  __int16 v20 = v394;
  uint64_t v312 = v4;
  char v21 = BYTE2(v394);
  long long v370 = v395;
  long long v313 = v396;
  long long v303 = v397;
  uint64_t v295 = v398;
  uint64_t v22 = v400;
  uint64_t v23 = v393;
  int v24 = v399;
  swift_release();
  swift_release();
  long long v391 = v17;
  *(void *)&long long v392 = v18;
  BYTE8(v392) = v19;
  uint64_t v393 = v23;
  LOWORD(v394) = v20;
  BYTE2(v394) = v21;
  long long v395 = v370;
  long long v396 = v313;
  long long v397 = v303;
  uint64_t v398 = v295;
  int v399 = v24;
  uint64_t v400 = v22;
  swift_unknownObjectRelease();
  int32x4_t v25 = vdupq_lane_s32(v374, 1);
  int32x4_t v26 = vdupq_lane_s32(v374, 0);
  v26.i32[3] = 1.0;
  float32x4_t v375 = (float32x4_t)v26;
  int32x4_t v378 = v25;
  float32x4_t v27 = v331;
  v27.i32[3] = 0;
  float32x4_t v371 = v27;
  uint64_t v28 = *(void *)(v312 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
  int32x2_t v29 = (int32x2_t)sub_1B6360920(v344);
  if (v32) {
    goto LABEL_44;
  }
  uint64_t v33 = 0;
  *(int32x2_t *)&long long v31 = v29;
  *((void *)&v31 + 1) = v30;
  while (1)
  {
    long long v383 = v31;
    float v82 = *(float *)((unint64_t)&v383 & 0xFFFFFFFFFFFFFFF3 | (4 * (v33 & 3)));
    long long v384 = xmmword_1B6E4F370;
    float v83 = *(float *)((unint64_t)&v384 & 0xFFFFFFFFFFFFFFF3 | (4 * (v33 & 3)));
    BOOL v34 = v82 == v83;
    if (v33 == 3) {
      break;
    }
    while (1)
    {
      ++v33;
      if (v34) {
        break;
      }
      if (v33 == 3) {
        goto LABEL_48;
      }
      BOOL v34 = 0;
    }
  }
  if (v82 == v83)
  {
LABEL_44:
    sub_1B633CD1C(v344, *(int32x2_t *)&v31);
    if ((v86 & 1) == 0)
    {
      v87.i64[0] = v84;
      v87.i64[1] = v85;
      float32x4_t v88 = vmulq_f32(v375, v87);
      v88.i32[3] = 1.0;
      float32x4_t v375 = v88;
    }
    uint64_t v89 = v322;
    uint64_t v90 = sub_1B695DAE8(v344);
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v340 = 0;
    if ((v100 & 1) == 0)
    {
      v101.i64[0] = v90;
      v101.i64[1] = v91;
      float32x4_t v102 = vaddq_f32(v331, v101);
      v102.i32[3] = 0;
      float32x4_t v371 = v102;
    }
    char v103 = 1;
  }
  else
  {
LABEL_48:
    sub_1B633C690(v344, 0, 0, 1, *(void *)&v29, v30, 0, 0, (uint64_t)v403, v29, 0, 1);
    uint64_t v92 = v403[0];
    uint64_t v93 = v403[1];
    uint64_t v94 = v403[2];
    uint64_t v95 = v403[3];
    uint64_t v96 = v403[4];
    uint64_t v97 = v403[5];
    uint64_t v98 = v403[6];
    uint64_t v99 = v403[7];
    char v103 = v404;
    uint64_t v89 = v322;
  }
  float32x4_t v104 = (float32x4_t)v378;
  v104.i32[3] = 0;
  float32x4_t v380 = v104;
  uint64_t v105 = v28 & 3;
  uint64_t v324 = v96;
  uint64_t v346 = v93;
  uint64_t v333 = v94;
  uint64_t v315 = v92;
  if (v353 == 2)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B6AFEFC8((uint64_t)&v391, 2, 1, (uint64_t)v405);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1B62D037C((uint64_t)v405, (uint64_t)&v407, (unint64_t *)&qword_1E9DD6DC0, type metadata accessor for __vfx_sampler2d);
    if (*((void *)&v409 + 1) == 1) {
      goto LABEL_99;
    }
    long long v385 = v407;
    long long v386 = v408;
    long long v387 = v409;
    *(void *)&long long v388 = v410;
    if ((v103 & 1) == 0)
    {
      long long v203 = *(_OWORD *)(v89 + 72);
      long long v430 = *(_OWORD *)(v89 + 56);
      long long v431 = v203;
      uint64_t v432 = *(void *)(v89 + 88);
      sub_1B62C9DA8(v312, (uint64_t)&v430, 0x200000000, &v411);
      sub_1B62CA47C((uint64_t)&v411, (uint64_t)&v419, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
      if ((void)v419)
      {
        if ((uint64_t)v424 > 0)
        {
          uint64_t v284 = *((void *)&v422 + 1);
          if (*((void *)&v422 + 1))
          {
            v204.i64[0] = v315;
            v204.i64[1] = v346;
            float32x4_t v361 = v204;
            v204.i64[0] = v333;
            v204.i64[1] = v95;
            float32x4_t v351 = v204;
            v204.i64[0] = v324;
            v204.i64[1] = v97;
            float32x4_t v338 = v204;
            v204.i64[0] = v98;
            v204.i64[1] = v99;
            float32x4_t v329 = v204;
            uint64_t v205 = *(void *)(*((void *)&v423 + 1) + 32);
            char v206 = *(unsigned char *)(v423 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            long long v426 = v419;
            long long v427 = v420;
            uint64_t v428 = v421;
            uint64_t v265 = *((void *)&v423 + 1) + 48;
            uint64_t v269 = *((void *)&v421 + 1);
            float32x4_t v320 = (void *)*((void *)&v423 + 1);
            unint64_t v262 = (void *)(*((void *)&v423 + 1) + 64);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v207 = 0;
            char v273 = v206;
            uint64_t v277 = v205;
            do
            {
              uint64_t v309 = v207;
              int8x16_t v208 = (unsigned int *)(v269 + 48 * v207);
              uint64_t v301 = *v208;
              unsigned int v209 = v208[2];
              uint64_t v292 = v208[1];
              float32x2_t v210 = (uint64_t *)*((void *)v208 + 2);
              uint64_t v211 = *((void *)v208 + 3);
              uint64_t v213 = *((void *)v208 + 4);
              uint64_t v212 = *((void *)v208 + 5);
              if (v206)
              {
                float32x4_t v214 = *(os_unfair_lock_s **)(v212 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v214);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v212 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v205);
              sub_1B62CA47C(v265, (uint64_t)v429, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
              uint64_t v215 = v320[4];
              uint64_t v216 = *(void *)(*(void *)(*(void *)(*(void *)(v212 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v320[6] = ecs_stack_allocator_allocate(v215, 48 * v216, 8);
              v320[7] = v216;
              v262[1] = 0;
              v262[2] = 0;
              void *v262 = 0;
              swift_release();
              float32x4_t v217 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v210, v211, v213, (uint64_t)v320);
              uint64_t v218 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v210, v211, v213, (uint64_t)v320);
              float32x4_t v219 = (float32x4_t *)v218;
              if (v210)
              {
                for (uint64_t i = v340; v213; --v213)
                {
                  if ((v365 & ((v209 & 3) != v105)) == 0)
                  {
                    float32x4_t v221 = vmlaq_f32(v371, v375, *v217);
                    *(double *)v222.i64 = (*((double (**)(long long *, float32x4_t))&v387 + 1))(&v385, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v361, v221.f32[0]), v351, *(float32x2_t *)v221.f32, 1), v338, v221, 2), v329, v221, 3));
                    *float32x4_t v219 = vmlaq_f32(*v219, v380, v222);
                  }
                  LOBYTE(v209) = v209 + 1;
                  ++v219;
                  ++v217;
                }
              }
              else
              {
                uint64_t i = v340;
                if (v301 != v292)
                {
                  uint64_t v223 = v292 - v301;
                  int32x4_t v224 = (float32x4_t *)(v218 + 16 * v301);
                  float32x4_t v225 = &v217[v301];
                  do
                  {
                    if ((v365 & ((v209 & 3) != v105)) == 0)
                    {
                      float32x4_t v226 = vmlaq_f32(v371, v375, *v225);
                      *(double *)v227.i64 = (*((double (**)(long long *, float32x4_t))&v387 + 1))(&v385, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v361, v226.f32[0]), v351, *(float32x2_t *)v226.f32, 1), v338, v226, 2), v329, v226, 3));
                      *int32x4_t v224 = vmlaq_f32(*v224, v380, v227);
                    }
                    LOBYTE(v209) = v209 + 1;
                    ++v224;
                    ++v225;
                    --v223;
                  }
                  while (v223);
                }
              }
              sub_1B6345178(v320, (unsigned __int16 **)&v426, (uint64_t)v429);
              uint64_t v340 = i;
              sub_1B634507C((char *)v212);
              uint64_t v205 = v277;
              ecs_stack_allocator_pop_snapshot(v277);
              char v206 = v273;
              if (v273)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v212 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v212 + 376));
              }
              swift_release();
              uint64_t v207 = v309 + 1;
            }
            while (v309 + 1 != v284);
            goto LABEL_195;
          }
          goto LABEL_194;
        }
        goto LABEL_193;
      }
      goto LABEL_99;
    }
    long long v129 = *(_OWORD *)(v89 + 72);
    long long v430 = *(_OWORD *)(v89 + 56);
    long long v431 = v129;
    uint64_t v432 = *(void *)(v89 + 88);
    sub_1B62C9DA8(v312, (uint64_t)&v430, 0x200000000, &v411);
    sub_1B62CA47C((uint64_t)&v411, (uint64_t)&v419, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (!(void)v419) {
      goto LABEL_99;
    }
    if ((uint64_t)v424 > 0)
    {
      uint64_t v317 = *((void *)&v422 + 1);
      if (*((void *)&v422 + 1))
      {
        float32x2_t v130 = (void *)*((void *)&v423 + 1);
        uint64_t v131 = *(void *)(*((void *)&v423 + 1) + 32);
        char v356 = *(unsigned char *)(v423 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        long long v426 = v419;
        long long v427 = v420;
        uint64_t v298 = *((void *)&v421 + 1);
        uint64_t v428 = v421;
        uint64_t v289 = *((void *)&v423 + 1) + 48;
        float32x2_t v281 = (void *)(*((void *)&v423 + 1) + 64);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v306 = v131;
        do
        {
          uint64_t v343 = v133;
          uint64_t v348 = v132;
          float32x2_t v134 = (unsigned int *)(v298 + 48 * v132);
          uint64_t v335 = *v134;
          unsigned int v135 = v134[2];
          uint64_t v326 = v134[1];
          int8x16_t v136 = (uint64_t *)*((void *)v134 + 2);
          uint64_t v137 = *((void *)v134 + 3);
          uint64_t v139 = *((void *)v134 + 4);
          uint64_t v138 = *((void *)v134 + 5);
          if (v356)
          {
            float32x4_t v140 = *(os_unfair_lock_s **)(v138 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v140);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v138 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v131);
          sub_1B62CA47C(v289, (uint64_t)v429, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v141 = v130[4];
          uint64_t v142 = (uint64_t)v130;
          uint64_t v143 = *(void *)(*(void *)(*(void *)(*(void *)(v138 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          *(void *)(v142 + 48) = ecs_stack_allocator_allocate(v141, 48 * v143, 8);
          *(void *)(v142 + 56) = v143;
          float32x2_t v130 = (void *)v142;
          v281[1] = 0;
          _OWORD v281[2] = 0;
          *float32x2_t v281 = 0;
          swift_release();
          float32x4_t v144 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v136, v137, v139, v142);
          uint64_t v145 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v136, v137, v139, v142);
          float32x4_t v146 = (float32x4_t *)v145;
          if (v136)
          {
            for (; v139; --v139)
            {
              if ((v365 & ((v135 & 3) != v105)) == 0)
              {
                *(double *)v147.i64 = (*((double (**)(long long *, float32x4_t))&v387 + 1))(&v385, vmlaq_f32(v371, v375, *v144));
                *float32x4_t v146 = vmlaq_f32(*v146, v380, v147);
              }
              LOBYTE(v135) = v135 + 1;
              ++v146;
              ++v144;
            }
          }
          else if (v335 != v326)
          {
            uint64_t v148 = v326 - v335;
            float32x4_t v149 = (float32x4_t *)(v145 + 16 * v335);
            float32x4_t v150 = &v144[v335];
            do
            {
              if ((v365 & ((v135 & 3) != v105)) == 0)
              {
                *(double *)v151.i64 = (*((double (**)(long long *, float32x4_t))&v387 + 1))(&v385, vmlaq_f32(v371, v375, *v150));
                *float32x4_t v149 = vmlaq_f32(*v149, v380, v151);
              }
              LOBYTE(v135) = v135 + 1;
              ++v149;
              ++v150;
              --v148;
            }
            while (v148);
          }
          uint64_t v133 = v343;
          sub_1B6345178(v130, (unsigned __int16 **)&v426, (uint64_t)v429);
          sub_1B634507C((char *)v138);
          uint64_t v131 = v306;
          ecs_stack_allocator_pop_snapshot(v306);
          if (v356)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v138 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v138 + 376));
          }
          swift_release();
          uint64_t v132 = v348 + 1;
        }
        while (v348 + 1 != v317);
        goto LABEL_195;
      }
      goto LABEL_194;
    }
LABEL_193:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v258 = (uint64_t *)&v411;
LABEL_201:
    sub_1B632F170(v258);
    return (uint64_t *)swift_release();
  }
  if (v353 == 1)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B6AFF0F4((uint64_t)&v391, 2, 1, (uint64_t)v429);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1B62D037C((uint64_t)v429, (uint64_t)&v430, &qword_1EB9811E0, type metadata accessor for __vfx_sampler1d);
    if (*((void *)&v431 + 1) == 1) {
      goto LABEL_99;
    }
    long long v426 = v430;
    long long v427 = v431;
    uint64_t v428 = v432;
    if (v103)
    {
      long long v106 = *(_OWORD *)(v89 + 72);
      long long v407 = *(_OWORD *)(v89 + 56);
      long long v408 = v106;
      *(void *)&long long v409 = *(void *)(v89 + 88);
      sub_1B62C9DA8(v312, (uint64_t)&v407, 0x200000000, &v411);
      sub_1B62CA47C((uint64_t)&v411, (uint64_t)&v419, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
      if ((void)v419)
      {
        if ((uint64_t)v424 > 0)
        {
          uint64_t v316 = *((void *)&v422 + 1);
          if (*((void *)&v422 + 1))
          {
            float32x2_t v107 = (void *)*((void *)&v423 + 1);
            uint64_t v108 = *(void *)(*((void *)&v423 + 1) + 32);
            char v355 = *(unsigned char *)(v423 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            long long v385 = v419;
            long long v386 = v420;
            uint64_t v297 = *((void *)&v421 + 1);
            *(void *)&long long v387 = v421;
            uint64_t v288 = *((void *)&v423 + 1) + 48;
            float32x2_t v280 = (void *)(*((void *)&v423 + 1) + 64);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v305 = v108;
            do
            {
              uint64_t v342 = v110;
              uint64_t v347 = v109;
              float32x4_t v111 = (unsigned int *)(v297 + 48 * v109);
              uint64_t v334 = *v111;
              unsigned int v112 = v111[2];
              uint64_t v325 = v111[1];
              float32x4_t v113 = (uint64_t *)*((void *)v111 + 2);
              uint64_t v114 = *((void *)v111 + 3);
              uint64_t v116 = *((void *)v111 + 4);
              uint64_t v115 = *((void *)v111 + 5);
              if (v355)
              {
                float32x4_t v117 = *(os_unfair_lock_s **)(v115 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v117);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v115 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v108);
              sub_1B62CA47C(v288, (uint64_t)v405, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
              uint64_t v118 = v107[4];
              uint64_t v119 = (uint64_t)v107;
              uint64_t v120 = *(void *)(*(void *)(*(void *)(*(void *)(v115 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              *(void *)(v119 + 48) = ecs_stack_allocator_allocate(v118, 48 * v120, 8);
              *(void *)(v119 + 56) = v120;
              float32x2_t v107 = (void *)v119;
              v280[1] = 0;
              _OWORD v280[2] = 0;
              *float32x2_t v280 = 0;
              swift_release();
              float32x2_t v121 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v113, v114, v116, v119);
              uint64_t v122 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v113, v114, v116, v119);
              int32x4_t v123 = (float32x4_t *)v122;
              if (v113)
              {
                for (; v116; --v116)
                {
                  if ((v365 & ((v112 & 3) != v105)) == 0)
                  {
                    *(double *)v124.i64 = (*((double (**)(long long *, float32x4_t))&v427 + 1))(&v426, vmlaq_f32(v371, v375, *v121));
                    *int32x4_t v123 = vmlaq_f32(*v123, v380, v124);
                  }
                  LOBYTE(v112) = v112 + 1;
                  ++v123;
                  ++v121;
                }
              }
              else if (v334 != v325)
              {
                uint64_t v125 = v325 - v334;
                float32x4_t v126 = (float32x4_t *)(v122 + 16 * v334);
                float32x4_t v127 = &v121[v334];
                do
                {
                  if ((v365 & ((v112 & 3) != v105)) == 0)
                  {
                    *(double *)v128.i64 = (*((double (**)(long long *, float32x4_t))&v427 + 1))(&v426, vmlaq_f32(v371, v375, *v127));
                    float32x4_t *v126 = vmlaq_f32(*v126, v380, v128);
                  }
                  LOBYTE(v112) = v112 + 1;
                  ++v126;
                  ++v127;
                  --v125;
                }
                while (v125);
              }
              uint64_t v110 = v342;
              sub_1B6345178(v107, (unsigned __int16 **)&v385, (uint64_t)v405);
              sub_1B634507C((char *)v115);
              uint64_t v108 = v305;
              ecs_stack_allocator_pop_snapshot(v305);
              if (v355)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v115 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v115 + 376));
              }
              swift_release();
              uint64_t v109 = v347 + 1;
            }
            while (v347 + 1 != v316);
            goto LABEL_195;
          }
LABEL_194:
          swift_retain();
          swift_retain();
          swift_retain();
LABEL_195:
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          sub_1B632F170((uint64_t *)&v411);
          sub_1B632F170((uint64_t *)&v411);
          return (uint64_t *)swift_release();
        }
        goto LABEL_193;
      }
LABEL_99:
      swift_release();
      swift_bridgeObjectRelease();
      return (uint64_t *)swift_unknownObjectRelease();
    }
    long long v178 = *(_OWORD *)(v89 + 72);
    long long v407 = *(_OWORD *)(v89 + 56);
    long long v408 = v178;
    *(void *)&long long v409 = *(void *)(v89 + 88);
    sub_1B62C9DA8(v312, (uint64_t)&v407, 0x200000000, &v411);
    sub_1B62CA47C((uint64_t)&v411, (uint64_t)&v419, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (!(void)v419) {
      goto LABEL_99;
    }
    if ((uint64_t)v424 > 0)
    {
      uint64_t v283 = *((void *)&v422 + 1);
      if (*((void *)&v422 + 1))
      {
        v179.i64[0] = v315;
        v179.i64[1] = v346;
        float32x4_t v360 = v179;
        v179.i64[0] = v333;
        v179.i64[1] = v95;
        float32x4_t v350 = v179;
        v179.i64[0] = v324;
        v179.i64[1] = v97;
        float32x4_t v337 = v179;
        v179.i64[0] = v98;
        v179.i64[1] = v99;
        float32x4_t v328 = v179;
        uint64_t v180 = *(void *)(*((void *)&v423 + 1) + 32);
        char v181 = *(unsigned char *)(v423 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        long long v385 = v419;
        long long v386 = v420;
        *(void *)&long long v387 = v421;
        uint64_t v264 = *((void *)&v423 + 1) + 48;
        uint64_t v268 = *((void *)&v421 + 1);
        float32x4_t v319 = (void *)*((void *)&v423 + 1);
        __int32 v261 = (void *)(*((void *)&v423 + 1) + 64);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v182 = 0;
        char v272 = v181;
        uint64_t v276 = v180;
        do
        {
          uint64_t v308 = v182;
          float32x4_t v183 = (unsigned int *)(v268 + 48 * v182);
          uint64_t v300 = *v183;
          unsigned int v184 = v183[2];
          uint64_t v291 = v183[1];
          float32x4_t v185 = (uint64_t *)*((void *)v183 + 2);
          uint64_t v186 = *((void *)v183 + 3);
          uint64_t v188 = *((void *)v183 + 4);
          uint64_t v187 = *((void *)v183 + 5);
          if (v181)
          {
            float32x4_t v189 = *(os_unfair_lock_s **)(v187 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v189);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v187 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v180);
          sub_1B62CA47C(v264, (uint64_t)v405, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v190 = v319[4];
          uint64_t v191 = *(void *)(*(void *)(*(void *)(*(void *)(v187 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v319[6] = ecs_stack_allocator_allocate(v190, 48 * v191, 8);
          v319[7] = v191;
          v261[1] = 0;
          _OWORD v261[2] = 0;
          void *v261 = 0;
          swift_release();
          int32x4_t v192 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v185, v186, v188, (uint64_t)v319);
          uint64_t v193 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v185, v186, v188, (uint64_t)v319);
          float32x2_t v194 = (float32x4_t *)v193;
          if (v185)
          {
            for (uint64_t j = v340; v188; --v188)
            {
              if ((v365 & ((v184 & 3) != v105)) == 0)
              {
                float32x4_t v196 = vmlaq_f32(v371, v375, *v192);
                *(double *)v197.i64 = (*((double (**)(long long *, float32x4_t))&v427 + 1))(&v426, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v360, v196.f32[0]), v350, *(float32x2_t *)v196.f32, 1), v337, v196, 2), v328, v196, 3));
                *float32x2_t v194 = vmlaq_f32(*v194, v380, v197);
              }
              LOBYTE(v184) = v184 + 1;
              ++v194;
              ++v192;
            }
          }
          else
          {
            uint64_t j = v340;
            if (v300 != v291)
            {
              uint64_t v198 = v291 - v300;
              float32x4_t v199 = (float32x4_t *)(v193 + 16 * v300);
              float32x4_t v200 = &v192[v300];
              do
              {
                if ((v365 & ((v184 & 3) != v105)) == 0)
                {
                  float32x4_t v201 = vmlaq_f32(v371, v375, *v200);
                  *(double *)v202.i64 = (*((double (**)(long long *, float32x4_t))&v427 + 1))(&v426, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v360, v201.f32[0]), v350, *(float32x2_t *)v201.f32, 1), v337, v201, 2), v328, v201, 3));
                  float32x4_t *v199 = vmlaq_f32(*v199, v380, v202);
                }
                LOBYTE(v184) = v184 + 1;
                ++v199;
                ++v200;
                --v198;
              }
              while (v198);
            }
          }
          sub_1B6345178(v319, (unsigned __int16 **)&v385, (uint64_t)v405);
          uint64_t v340 = j;
          sub_1B634507C((char *)v187);
          uint64_t v180 = v276;
          ecs_stack_allocator_pop_snapshot(v276);
          char v181 = v272;
          if (v272)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v187 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v187 + 376));
          }
          swift_release();
          uint64_t v182 = v308 + 1;
        }
        while (v308 + 1 != v283);
        goto LABEL_195;
      }
      goto LABEL_194;
    }
    goto LABEL_193;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6AFF208((uint64_t)&v391, 2, 1, (uint64_t)v405);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1B62D037C((uint64_t)v405, (uint64_t)&v419, &qword_1E9DD00B8, type metadata accessor for __vfx_sampler3d);
  if (*((void *)&v423 + 1) == 1) {
    goto LABEL_99;
  }
  long long v387 = v421;
  long long v388 = v422;
  long long v389 = v423;
  long long v390 = v424;
  long long v385 = v419;
  long long v386 = v420;
  if (v103)
  {
    long long v152 = *(_OWORD *)(v89 + 72);
    long long v430 = *(_OWORD *)(v89 + 56);
    long long v431 = v152;
    uint64_t v432 = *(void *)(v89 + 88);
    sub_1B62C9DA8(v312, (uint64_t)&v430, 0x200000000, &v407);
    sub_1B62CA47C((uint64_t)&v407, (uint64_t)&v411, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (!(void)v411) {
      goto LABEL_99;
    }
    if (v418 <= 0)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v307 = v415;
      if (v415)
      {
        uint64_t v153 = v417[4];
        char v336 = *(unsigned char *)(v416 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        long long v426 = v411;
        long long v427 = v412;
        uint64_t v290 = v414;
        uint64_t v428 = v413;
        uint64_t v282 = (uint64_t)(v417 + 6);
        char v349 = v417;
        float32x4_t v275 = v417 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v154 = 0;
        uint64_t v299 = v153;
        while (1)
        {
          uint64_t v327 = v154;
          float32x4_t v155 = (unsigned int *)(v290 + 48 * v154);
          uint64_t v357 = *v155;
          unsigned int v156 = v155[2];
          uint64_t v318 = v155[1];
          float32x2_t v157 = (uint64_t *)*((void *)v155 + 2);
          uint64_t v158 = *((void *)v155 + 3);
          uint64_t v160 = *((void *)v155 + 4);
          uint64_t v159 = *((void *)v155 + 5);
          if (v336)
          {
            float32x4_t v161 = *(os_unfair_lock_s **)(v159 + 376);
            swift_retain();
            os_unfair_lock_lock(v161);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v159 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v153);
          sub_1B62CA47C(v282, (uint64_t)v429, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v162 = v349[4];
          uint64_t v163 = *(void *)(*(void *)(*(void *)(*(void *)(v159 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v349[6] = ecs_stack_allocator_allocate(v162, 48 * v163, 8);
          v349[7] = v163;
          v275[1] = 0;
          v275[2] = 0;
          *float32x4_t v275 = 0;
          swift_release();
          float32x4_t v164 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v157, v158, v160, (uint64_t)v349);
          uint64_t v165 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v157, v158, v160, (uint64_t)v349);
          float32x2_t v166 = (float32x4_t *)v165;
          if (v157)
          {
            uint64_t v167 = v340;
            float32x4_t v168 = v271;
            if (v160)
            {
              uint64_t v169 = v327;
              do
              {
                if ((v365 & ((v156 & 3) != v105)) == 0)
                {
                  float32x4_t v170 = vmlaq_f32(v371, v375, *v164);
                  v170.i32[3] = v168.i32[3];
                  float32x4_t v358 = v170;
                  *(double *)v171.i64 = (*((double (**)(long long *))&v389 + 1))(&v385);
                  *float32x2_t v166 = vmlaq_f32(*v166, v380, v171);
                  float32x4_t v168 = v358;
                }
                LOBYTE(v156) = v156 + 1;
                ++v166;
                ++v164;
                --v160;
              }
              while (v160);
              float32x4_t v271 = v168;
              goto LABEL_123;
            }
          }
          else
          {
            uint64_t v167 = v340;
            if (v357 != v318)
            {
              uint64_t v172 = v318 - v357;
              float32x2_t v173 = (float32x4_t *)(v165 + 16 * v357);
              float32x2_t v174 = &v164[v357];
              float32x4_t v175 = v267;
              do
              {
                if ((v365 & ((v156 & 3) != v105)) == 0)
                {
                  float32x4_t v176 = vmlaq_f32(v371, v375, *v174);
                  v176.i32[3] = v175.i32[3];
                  float32x4_t v359 = v176;
                  *(double *)v177.i64 = (*((double (**)(long long *))&v389 + 1))(&v385);
                  float32x4_t *v173 = vmlaq_f32(*v173, v380, v177);
                  float32x4_t v175 = v359;
                }
                LOBYTE(v156) = v156 + 1;
                ++v173;
                ++v174;
                --v172;
              }
              while (v172);
              float32x4_t v267 = v175;
            }
          }
          uint64_t v169 = v327;
LABEL_123:
          sub_1B6345178(v349, (unsigned __int16 **)&v426, (uint64_t)v429);
          sub_1B634507C((char *)v159);
          uint64_t v153 = v299;
          ecs_stack_allocator_pop_snapshot(v299);
          if (v336)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v159 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v159 + 376));
          }
          uint64_t v340 = v167;
          swift_release();
          uint64_t v154 = v169 + 1;
          if (v154 == v307) {
            goto LABEL_199;
          }
        }
      }
      swift_retain();
      swift_retain();
      swift_retain();
LABEL_199:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1B632F170((uint64_t *)&v407);
    }
    uint64_t v258 = (uint64_t *)&v407;
    goto LABEL_201;
  }
  long long v228 = *(_OWORD *)(v89 + 72);
  long long v430 = *(_OWORD *)(v89 + 56);
  long long v431 = v228;
  uint64_t v432 = *(void *)(v89 + 88);
  sub_1B62C9DA8(v312, (uint64_t)&v430, 0x200000000, &v407);
  sub_1B62CA47C((uint64_t)&v407, (uint64_t)&v411, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!(void)v411) {
    goto LABEL_99;
  }
  if (v418 <= 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v285 = v415;
    if (v415)
    {
      v229.i64[0] = v315;
      v229.i64[1] = v346;
      float32x4_t v352 = v229;
      v229.i64[0] = v333;
      v229.i64[1] = v95;
      float32x4_t v339 = v229;
      v229.i64[0] = v324;
      v229.i64[1] = v97;
      float32x4_t v330 = v229;
      v229.i64[0] = v98;
      v229.i64[1] = v99;
      float32x4_t v321 = v229;
      uint64_t v230 = v417[4];
      char v231 = *(unsigned char *)(v416 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      long long v426 = v411;
      long long v427 = v412;
      uint64_t v274 = v414;
      uint64_t v428 = v413;
      long long v310 = v417;
      float32x4_t v266 = v417 + 8;
      uint64_t v270 = (uint64_t)(v417 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v232 = 0;
      char v278 = v231;
      uint64_t v263 = v230;
      while (1)
      {
        uint64_t v302 = v232;
        float32x4_t v233 = (unsigned int *)(v274 + 48 * v232);
        uint64_t v362 = *v233;
        unsigned int v234 = v233[2];
        uint64_t v293 = v233[1];
        float32x4_t v235 = (uint64_t *)*((void *)v233 + 2);
        uint64_t v236 = *((void *)v233 + 3);
        uint64_t v238 = *((void *)v233 + 4);
        uint64_t v237 = *((void *)v233 + 5);
        if (v231)
        {
          float v239 = *(os_unfair_lock_s **)(v237 + 376);
          swift_retain();
          os_unfair_lock_lock(v239);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v237 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v230);
        sub_1B62CA47C(v270, (uint64_t)v429, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
        uint64_t v240 = v310[4];
        uint64_t v241 = *(void *)(*(void *)(*(void *)(*(void *)(v237 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v310[6] = ecs_stack_allocator_allocate(v240, 48 * v241, 8);
        v310[7] = v241;
        v266[1] = 0;
        v266[2] = 0;
        *float32x4_t v266 = 0;
        swift_release();
        float32x2_t v242 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v235, v236, v238, (uint64_t)v310);
        uint64_t v243 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v235, v236, v238, (uint64_t)v310);
        float32x2_t v244 = (float32x4_t *)v243;
        if (v235)
        {
          uint64_t v245 = v340;
          __n128 v246 = v260;
          if (v238)
          {
            uint64_t v247 = v302;
            do
            {
              if ((v365 & ((v234 & 3) != v105)) == 0)
              {
                float32x4_t v248 = vmlaq_f32(v371, v375, *v242);
                __n128 v249 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v352, v248.f32[0]), v339, *(float32x2_t *)v248.f32, 1), v330, v248, 2), v321, v248, 3);
                v249.n128_u32[3] = v246.n128_u32[3];
                __n128 v363 = v249;
                *(double *)v250.i64 = (*((double (**)(long long *, __n128))&v389 + 1))(&v385, v249);
                *float32x2_t v244 = vmlaq_f32(*v244, v380, v250);
                __n128 v246 = v363;
              }
              LOBYTE(v234) = v234 + 1;
              ++v244;
              ++v242;
              --v238;
            }
            while (v238);
            __n128 v260 = v246;
            uint64_t v230 = v263;
            goto LABEL_190;
          }
        }
        else
        {
          uint64_t v245 = v340;
          if (v362 != v293)
          {
            uint64_t v251 = v293 - v362;
            float32x4_t v252 = (float32x4_t *)(v243 + 16 * v362);
            float32x4_t v253 = &v242[v362];
            uint64_t v230 = v263;
            __n128 v254 = v259;
            do
            {
              if ((v365 & ((v234 & 3) != v105)) == 0)
              {
                float32x4_t v255 = vmlaq_f32(v371, v375, *v253);
                __n128 v256 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v352, v255.f32[0]), v339, *(float32x2_t *)v255.f32, 1), v330, v255, 2), v321, v255, 3);
                v256.n128_u32[3] = v254.n128_u32[3];
                __n128 v364 = v256;
                *(double *)v257.i64 = (*((double (**)(long long *, __n128))&v389 + 1))(&v385, v256);
                float32x4_t *v252 = vmlaq_f32(*v252, v380, v257);
                __n128 v254 = v364;
              }
              LOBYTE(v234) = v234 + 1;
              ++v252;
              ++v253;
              --v251;
            }
            while (v251);
            __n128 v259 = v254;
            goto LABEL_189;
          }
        }
        uint64_t v230 = v263;
LABEL_189:
        uint64_t v247 = v302;
LABEL_190:
        sub_1B6345178(v310, (unsigned __int16 **)&v426, (uint64_t)v429);
        uint64_t v340 = v245;
        sub_1B634507C((char *)v237);
        ecs_stack_allocator_pop_snapshot(v230);
        char v231 = v278;
        if (v278)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v237 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v237 + 376));
        }
        swift_release();
        uint64_t v232 = v247 + 1;
        if (v232 == v285) {
          goto LABEL_203;
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_203:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1B632F170((uint64_t *)&v407);
    swift_release();
  }
  return sub_1B632F170((uint64_t *)&v407);
}

uint64_t type metadata accessor for ParticleNoiseSystem()
{
  return self;
}

uint64_t getEnumTagSinglePayload for NoiseParameters(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[16]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NoiseParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NoiseParameters()
{
  return &type metadata for NoiseParameters;
}

unint64_t sub_1B69D50DC()
{
  unint64_t result = qword_1E9DD3980;
  if (!qword_1E9DD3980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3980);
  }
  return result;
}

uint64_t sub_1B69D5130(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  long long v3 = *(_OWORD *)(a1 + 104);
  long long v11 = *(_OWORD *)(a1 + 88);
  long long v12 = v3;
  uint64_t v13 = *(void *)(a1 + 120);
  sub_1B67CF480((uint64_t)v7);
  long long v4 = v7[1];
  *(_OWORD *)(v2 + 16) = v7[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(void *)(v2 + 48) = v8;
  sub_1B663C898((uint64_t)v9);
  sub_1B62F648C(a1);
  long long v5 = v9[1];
  *(_OWORD *)(v2 + 56) = v9[0];
  *(_OWORD *)(v2 + 72) = v5;
  *(void *)(v2 + 88) = v10;
  return v2;
}

const char *sub_1B69D51D8()
{
  return "ParticleNoise";
}

uint64_t sub_1B69D51EC()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B69D5238(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned int *)(a1 + 28);
  uint64_t v3 = *(int *)(a1 + 24);
  uint64_t v47 = *(unsigned int *)(a1 + 48);
  uint64_t v46 = *(unsigned int *)(a1 + 52);
  swift_retain_n();
  BOOL v4 = v3 == -1 && v2 == 0;
  if (v4
    || (v3 & 0x80000000) != 0
    || *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v3
    || ((uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v2 != -1)
      ? (BOOL v6 = *(_DWORD *)(v5 + 12 * (int)v3 + 8) == v2)
      : (BOOL v6 = 1),
        !v6))
  {
    swift_release();
LABEL_15:
    int v49 = 1036831949;
    LOBYTE(v50) = 0;
    *(void *)&long long v12 = 0;
    long long v48 = 0u;
    float v13 = 0.16;
    uint64_t v45 = 3;
    goto LABEL_16;
  }
  sub_1B6965760(*(void *)(*(void *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)v3) + 32), *(_DWORD *)(v5 + 12 * (int)v3), *(_WORD *)(v5 + 12 * (int)v3 + 4), 64, v1, (uint64_t)v59);
  int v7 = v59[0];
  uint64_t v8 = v59[2];
  uint64_t v9 = v59[3];
  unint64_t v11 = v59[4];
  uint64_t v10 = v59[5];
  swift_release();
  sub_1B62CA47C((uint64_t)v59, (uint64_t)v63, &qword_1E9DD3990, (uint64_t)&type metadata for ParticleNoise);
  if (v63[48] == 2) {
    goto LABEL_15;
  }
  float v13 = *(float *)&v11;
  if (*(float *)&v11 == 0.0) {
    return swift_release();
  }
  uint64_t v45 = v10;
  *(void *)&long long v12 = v8;
  *((void *)&v12 + 1) = v9;
  long long v48 = v12;
  int v49 = v7;
  unint64_t v50 = HIDWORD(v11);
LABEL_16:
  uint64_t v14 = v1;
  sub_1B633C690(v3 | (unint64_t)(v2 << 32), 0, 0, 1, 0, 0, 1, 0, (uint64_t)v60, *(int32x2_t *)&v12, 0, 1);
  uint64_t v15 = v60[0];
  uint64_t v16 = v60[1];
  uint64_t v18 = v60[2];
  uint64_t v17 = v60[3];
  uint64_t v19 = v60[4];
  uint64_t v20 = v60[5];
  uint64_t v22 = v60[6];
  uint64_t v21 = v60[7];
  int v44 = v61;
  sub_1B6A81254();
  float v24 = v13 * v23;
  sub_1B62D037C((uint64_t)v60, (uint64_t)v62, (unint64_t *)&qword_1EB97D810, type metadata accessor for simd_float4x4);
  if (v62[64])
  {
    long long v25 = xmmword_1B6E4F370;
    long long v26 = xmmword_1B6E4F2E0;
    long long v27 = xmmword_1B6E4F320;
    long long v28 = xmmword_1B6E4F300;
  }
  else
  {
    *(void *)&long long v28 = v15;
    *((void *)&v28 + 1) = v16;
    *(void *)&long long v27 = v18;
    *((void *)&v27 + 1) = v17;
    *(void *)&long long v26 = v19;
    *((void *)&v26 + 1) = v20;
    *(void *)&long long v25 = v22;
    *((void *)&v25 + 1) = v21;
  }
  v52[0] = v24;
  LODWORD(v52[1]) = v49;
  long long v53 = v48;
  long long v54 = v28;
  long long v55 = v27;
  long long v56 = v26;
  long long v57 = v25;
  int32x2_t v29 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for particle_noise_uniforms(0);
    sub_1B6B594A8((uint64_t)v52, 1, ObjectType, v31, v32, v33, v34, v35);
  }
  if (v50 == 2)
  {
    swift_retain();
    sub_1B6786A24(a1);
    sub_1B6BFF388(v47 | (v46 << 32), v14, v29 == 0, 0, a1, 0xD000000000000014, 0x80000001B6F417D0, 0);
    sub_1B6786A7C(a1);
    return swift_release_n();
  }
  uint64_t v37 = *(void *)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v37) {
    return swift_release();
  }
  uint64_t v38 = *(void *)(v37 + 240);
  swift_retain();
  swift_retain();
  sub_1B6BCB1C0(v50, v45, v38, v37, v50, v45, (uint64_t)v52);
  uint64_t v39 = v58;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  if (v29) {
    objc_msgSend(v29, sel_setTexture_atIndex_, v39, 0);
  }
  if (v45 == 1)
  {
    long long v40 = "particle_noise_1d";
  }
  else if (v45 == 2)
  {
    long long v40 = "particle_noise_2d";
  }
  else
  {
    long long v40 = "particle_noise_3d";
  }
  unint64_t v41 = (unint64_t)(v40 - 32) | 0x8000000000000000;
  char v42 = v29 == 0;
  sub_1B69D5C40(0, (unint64_t *)&qword_1EB985580, (uint64_t)&type metadata for FunctionConstant, MEMORY[0x1E4FBBE00]);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1B6E77050;
  *(_OWORD *)(v43 + 32) = xmmword_1B6E9D140;
  *(unsigned char *)(v43 + 48) = 0;
  *(void *)(v43 + 64) = v44 ^ 1u;
  *(_OWORD *)(v43 + 72) = 0u;
  *(_OWORD *)(v43 + 88) = 0u;
  *(_OWORD *)(v43 + 104) = 0u;
  *(void *)(v43 + 120) = 0;
  *(unsigned char *)(v43 + 128) = 13;
  swift_retain();
  sub_1B6786A24(a1);
  swift_bridgeObjectRetain();
  sub_1B6BFF388(v47 | (v46 << 32), v14, v42, v43, a1, 0xD000000000000011, v41, 0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1B6786A7C(a1);
  swift_unknownObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69D57BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  sub_1B69D5BD8(0, &qword_1EB9808C8, (uint64_t (*)(void))sub_1B69D5B84, (uint64_t)&type metadata for ParticleNoise.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v25 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B69D5B84();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = v6;
  uint64_t v11 = v26;
  LOBYTE(v27) = 0;
  sub_1B6E32DC8();
  int v13 = v12;
  LOBYTE(v27) = 2;
  sub_1B6E32DC8();
  int v15 = v14;
  char v30 = 3;
  sub_1B66C594C();
  sub_1B6E32DF8();
  char v16 = v27;
  sub_1B69D5BD8(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  char v30 = 1;
  sub_1B62AF118((unint64_t *)&qword_1EB97D1F0);
  sub_1B6E32D78();
  long long v17 = 0uLL;
  if ((v28 & 1) == 0) {
    long long v17 = v27;
  }
  long long v25 = v17;
  LOBYTE(v27) = 4;
  int v18 = sub_1B6E32D38();
  int v29 = v18;
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  sub_1B62C14BC(a1, v20);
  if (sub_1B62B8F14(1100, v20, v21))
  {
    LOBYTE(v27) = 5;
    uint64_t v22 = sub_1B6E32DD8();
    uint64_t v23 = v11;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
    uint64_t v22 = 3;
    uint64_t v23 = v11;
  }
  char v24 = v29 & 1;
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)uint64_t v23 = v13;
  *(_OWORD *)(v23 + 16) = v25;
  *(_DWORD *)(v23 + 32) = v15;
  *(unsigned char *)(v23 + 36) = v16;
  *(void *)(v23 + 40) = v22;
  *(unsigned char *)(v23 + 48) = v24;
  return result;
}

unint64_t sub_1B69D5B84()
{
  unint64_t result = qword_1EB97E6A0;
  if (!qword_1EB97E6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E6A0);
  }
  return result;
}

void sub_1B69D5BD8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_1B69D5C40(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for NoiseGlobalTexture()
{
  return &type metadata for NoiseGlobalTexture;
}

unsigned char *storeEnumTagSinglePayload for ParticleNoise.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69D5D68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleNoise.CodingKeys()
{
  return &type metadata for ParticleNoise.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleNoise()
{
  return &type metadata for ParticleNoise;
}

unint64_t sub_1B69D5DB4()
{
  unint64_t result = qword_1E9DD3998;
  if (!qword_1E9DD3998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3998);
  }
  return result;
}

unint64_t sub_1B69D5E0C()
{
  unint64_t result = qword_1EB97E6B0;
  if (!qword_1EB97E6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E6B0);
  }
  return result;
}

unint64_t sub_1B69D5E64()
{
  unint64_t result = qword_1EB97E6A8;
  if (!qword_1EB97E6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E6A8);
  }
  return result;
}

uint64_t sub_1B69D5EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v14)
  {
    int v15 = *(_opaque_pthread_t **)(v14 + 144);
    swift_unknownObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain_n();
    swift_retain();
    char v16 = pthread_self();
    if (pthread_equal(v15, v16))
    {
      sub_1B63BADF0();
      sub_1B6A64960(a3, a4, a5, a6);
      sub_1B69E21FC(a1);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_8:
      swift_release();
      goto LABEL_9;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1B6A8CDBC(v14, a2, a3, a4, a5, a6);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v17 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    int v18 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_unknownObjectRetain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    objc_msgSend(v18, sel_lock);
    if (!*(void *)(a1 + v13))
    {
      sub_1B63BADF0();
      sub_1B6A64960(a3, a4, a5, a6);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v17), sel_unlock);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_1B69D5EB8(a1, a2, a3, a4, a5, a6, a7);
    objc_msgSend(*(id *)(a1 + v17), sel_unlock);
    swift_bridgeObjectRelease();
    swift_release();
  }
LABEL_9:
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_unknownObjectRelease_n();
  return swift_unknownObjectRelease_n();
}

void sub_1B69D6180(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    id v9 = a3;
    swift_retain();
    unint64_t v10 = pthread_self();
    if (pthread_equal(v8, v10))
    {
      sub_1B63BADF0();
      sub_1B6637650(a2);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v14 = v9;
      sub_1B6A8CED8(v7, a2, v14);
    }
    swift_release();
  }
  else
  {
    uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    int v12 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v13 = a3;
    objc_msgSend(v12, sel_lock);
    if (*(void *)(a1 + v6))
    {
      id v13 = v13;
      sub_1B69D6180(a1, a2, v13);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6637650(a2);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v11), sel_unlock);
  }
}

void sub_1B69D6318(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v8)
  {
    id v9 = *(_opaque_pthread_t **)(v8 + 144);
    id v10 = a3;
    id v11 = a4;
    int v12 = (char *)v10;
    id v13 = v11;
    swift_retain();
    id v14 = pthread_self();
    if (pthread_equal(v9, v14))
    {
      sub_1B63BADF0();
      sub_1B6637E38(a2, v12, (uint64_t)v13);
      sub_1B69E21FC(a1);
    }
    else
    {
      uint64_t v22 = v12;
      id v23 = v13;
      sub_1B6A8CFC8(v8, a2, v22, v23);
    }
    swift_release();
  }
  else
  {
    uint64_t v24 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    int v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v16 = a3;
    id v17 = a4;
    id v18 = v16;
    id v19 = v17;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v7))
    {
      id v20 = v18;
      id v21 = v19;
      sub_1B69D6318(a1, a2, v20, v21);
      objc_msgSend(*(id *)(a1 + v24), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6637E38(a2, (char *)v18, (uint64_t)v19);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v24), sel_unlock);
    }
  }
}

void sub_1B69D653C(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v12)
  {
    int v15 = *(_opaque_pthread_t **)(v12 + 144);
    id v16 = a3;
    swift_retain();
    id v17 = pthread_self();
    if (pthread_equal(v15, v17))
    {
      sub_1B63BADF0();
      sub_1B66384C8(a2, (uint64_t)v16, a4 & 1, a5, a7);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v21 = v16;
      sub_1B6A8D0C4(v12, a2, v21, a4 & 1, a5, a7);
    }
    swift_release();
  }
  else
  {
    uint64_t v22 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v18 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v19 = a3;
    objc_msgSend(v18, sel_lock);
    if (*(void *)(a1 + v11))
    {
      id v20 = v19;
      sub_1B69D653C(a1, a2, v20, a4 & 1, a5, a6, a7);
      objc_msgSend(*(id *)(a1 + v22), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B66384C8(a2, (uint64_t)v19, a4 & 1, a5, a7);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v22), sel_unlock);
    }
  }
}

void sub_1B69D6758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v10)
  {
    uint64_t v11 = *(_opaque_pthread_t **)(v10 + 144);
    id v12 = a5;
    swift_retain();
    id v13 = pthread_self();
    if (pthread_equal(v11, v13))
    {
      sub_1B63BADF0();
      sub_1B663877C(a2, a3, a4, (uint64_t)v12);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v12 = v12;
      sub_1B6A8D1F0(v10, a2, a3, a4, v12);
    }

    swift_release();
  }
  else
  {
    uint64_t v17 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v14 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v15 = a5;
    objc_msgSend(v14, sel_lock);
    if (*(void *)(a1 + v9))
    {
      id v16 = v15;
      sub_1B69D6758(a1, a2, a3, a4, v16);
      objc_msgSend(*(id *)(a1 + v17), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B663877C(a2, a3, a4, (uint64_t)v15);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v17), sel_unlock);
    }
  }
}

void sub_1B69D693C(uint64_t a1, void *a2)
{
}

uint64_t sub_1B69D6990(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v9)
  {
    uint64_t v10 = *(_opaque_pthread_t **)(v9 + 144);
    swift_retain_n();
    id v11 = a3;
    swift_retain_n();
    id v12 = v11;
    swift_retain();
    id v13 = pthread_self();
    if (pthread_equal(v10, v13))
    {
      sub_1B63BADF0();
      sub_1B6961468(a2, (uint64_t)v12, a4);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      id v17 = v12;
      swift_retain();
      sub_1B6A8D324(v9, a2, v17, a4);
    }
    swift_release();
  }
  else
  {
    uint64_t v19 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v14 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    id v15 = a3;
    swift_retain_n();
    id v16 = v15;
    objc_msgSend(v14, sel_lock);
    if (*(void *)(a1 + v8))
    {
      swift_retain();
      id v16 = v16;
      swift_retain();
      sub_1B69D6990(a1, a2, v16, a4);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6961468(a2, (uint64_t)v16, a4);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v19), sel_unlock);
  }
  swift_release();

  swift_release_n();
  return swift_release_n();
}

void sub_1B69D6BB8(uint64_t a1, void *a2, double a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    id v9 = a2;
    swift_retain();
    uint64_t v10 = pthread_self();
    if (pthread_equal(v8, v10))
    {
      sub_1B63BADF0();
      sub_1B69DEEC4(0, 1, a3);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v14 = v9;
      sub_1B6A8D42C(v7, v14, a3);
    }
    swift_release();
  }
  else
  {
    uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v12 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v13 = a2;
    objc_msgSend(v12, sel_lock);
    if (*(void *)(a1 + v6))
    {
      id v13 = v13;
      sub_1B69D6BB8(a1, v13, a3);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B69DEEC4(0, 1, a3);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v11), sel_unlock);
  }
}

void sub_1B69D6D60(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    id v7 = a2;
    swift_retain();
    uint64_t v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      sub_1B6A98A14(0x200000000);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v12 = v7;
      sub_1B6A8D520(v5, v12);
    }
    swift_release();
  }
  else
  {
    uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v11 = a2;
    objc_msgSend(v10, sel_lock);
    if (*(void *)(a1 + v4))
    {
      id v11 = v11;
      sub_1B69D6D60(a1, v11);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6A98A14(0x200000000);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v9), sel_unlock);
  }
}

void sub_1B69D6EE4(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    id v7 = a2;
    swift_retain();
    uint64_t v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      sub_1B68831E4();
      sub_1B6A99274();
      if (*(unsigned char *)(*(void *)&v7[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions]
                    + OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate) == 1)
      {
        v7[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 1;
        sub_1B6A99714();
      }
      sub_1B69E21FC(a1);
    }
    else
    {
      id v12 = v7;
      sub_1B6A8D600(v5, v12);
    }
    swift_release();
  }
  else
  {
    uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v11 = a2;
    objc_msgSend(v10, sel_lock);
    if (*(void *)(a1 + v4))
    {
      id v11 = v11;
      sub_1B69D6EE4(a1, v11);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B68831E4();
      sub_1B6A99274();
      if (*(unsigned char *)(*(void *)&v11[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions]
                    + OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate) == 1)
      {
        v11[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 1;
        sub_1B6A99714();
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v9), sel_unlock);
  }
}

void sub_1B69D70F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  id v7 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v7)
  {
    uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v12 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    objc_msgSend(v12, sel_lock);
    if (*(void *)(a1 + v6))
    {
      swift_retain();
      sub_1B69D70F0(a1, a2);
    }
    else
    {
      sub_1B63BADF0();
      id v7 = (void *)MEMORY[0x1BA9B6EE0]();
      sub_1B6A9A6A4(a2);
      if (v3) {
        goto LABEL_14;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v11), sel_unlock);
    swift_release_n();
    goto LABEL_12;
  }
  uint64_t v8 = (_opaque_pthread_t *)v7[18];
  swift_retain_n();
  swift_retain();
  uint64_t v9 = pthread_self();
  if (!pthread_equal(v8, v9))
  {
    swift_retain();
    sub_1B6A8D724((uint64_t)v7, a2);
    goto LABEL_8;
  }
  sub_1B63BADF0();
  uint64_t v10 = (void *)MEMORY[0x1BA9B6EE0]();
  sub_1B6A9A6A4(a2);
  if (!v2)
  {
    sub_1B69E21FC(a1);
LABEL_8:
    swift_release_n();
    swift_release();
LABEL_12:
    swift_release();
    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_1B69D72A8(uint64_t a1, void *a2)
{
}

uint64_t sub_1B69D72FC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = a2;
  _OWORD v8[3] = a3;
  v8[4] = a4;
  uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  swift_retain();
  swift_retain();
  if (v10)
  {
    uint64_t v11 = *(_opaque_pthread_t **)(v10 + 144);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    id v12 = pthread_self();
    if (pthread_equal(v11, v12))
    {
      sub_1B63BADF0();
      sub_1B68845AC(a2, a3, a4);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      swift_retain();
      sub_1B6A8D854(v10, a2, a3, a4);
    }
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v13 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v14 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    swift_retain_n();
    objc_msgSend(v14, sel_lock);
    if (*(void *)(a1 + v9))
    {
      swift_retain();
      swift_retain();
      sub_1B69D72FC(a1, a2, a3, a4);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B68845AC(a2, a3, a4);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v13), sel_unlock);
    swift_release();
  }
  swift_release();
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_1B69D750C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v12)
  {
    uint64_t v13 = *(_opaque_pthread_t **)(v12 + 144);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    id v14 = pthread_self();
    if (pthread_equal(v13, v14))
    {
      sub_1B63BADF0();
      uint64_t v15 = sub_1B6C0A538(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
      if ((v16 & 1) == 0)
      {
        uint64_t v17 = v15;
        if (a6) {
          sub_1B62E280C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1F0F516E0, v15, 0);
        }
        else {
          sub_1B62E364C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1F0F516E0, v15);
        }
        sub_1B69E0450(v17, a6 & 1);
      }
      sub_1B69E21FC(a1);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_18:
      swift_release();
      goto LABEL_19;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B6A8D984(v12, a2, a3, a4, a5 & 0xFFFFFFFFFFLL, a6 & 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v18 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v19 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    objc_msgSend(v19, sel_lock);
    if (!*(void *)(a1 + v11))
    {
      sub_1B63BADF0();
      uint64_t v20 = sub_1B6C0A538(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
      if ((v21 & 1) == 0)
      {
        uint64_t v22 = v20;
        if (a6) {
          sub_1B62E280C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1F0F516E0, v20, 0);
        }
        else {
          sub_1B62E364C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1F0F516E0, v20);
        }
        sub_1B69E0450(v22, a6 & 1);
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v18), sel_unlock);
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B69D750C(a1, a2, a3, a4, a5 & 0xFFFFFFFFFFLL, a6 & 1);
    objc_msgSend(*(id *)(a1 + v18), sel_unlock);
    swift_bridgeObjectRelease();
    swift_release();
  }
LABEL_19:
  swift_bridgeObjectRelease_n();
  return swift_release_n();
}

void sub_1B69D7818(uint64_t a1, id *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v8)
  {
    uint64_t v9 = *(_opaque_pthread_t **)(v8 + 144);
    id v10 = a3;
    swift_retain();
    uint64_t v11 = pthread_self();
    if (pthread_equal(v9, v11))
    {
      sub_1B63BADF0();
      sub_1B688649C(a2, v10, a4);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v15 = v10;
      sub_1B6A8DAD0(v8, a2, v15, a4);
    }
    swift_release();
  }
  else
  {
    uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v14 = a3;
    objc_msgSend(v13, sel_lock);
    if (*(void *)(a1 + v7))
    {
      id v14 = v14;
      sub_1B69D7818(a1, a2, v14, a4);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B688649C(a2, v14, a4);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v12), sel_unlock);
  }
}

void sub_1B69D79C8(uint64_t a1, void *a2, void *a3, id *a4)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v8)
  {
    uint64_t v9 = *(_opaque_pthread_t **)(v8 + 144);
    id v10 = a2;
    id v11 = a3;
    id v12 = v10;
    uint64_t v13 = (char *)v11;
    swift_retain();
    id v14 = pthread_self();
    if (pthread_equal(v9, v14))
    {
      sub_1B63BADF0();
      sub_1B688664C((uint64_t)v12, v13, a4);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v22 = v12;
      id v23 = v13;
      sub_1B6A8DBC8(v8, v22, v23, a4);
    }
    swift_release();
  }
  else
  {
    uint64_t v24 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v16 = a2;
    id v17 = a3;
    id v18 = v16;
    id v19 = v17;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v7))
    {
      id v20 = v18;
      id v21 = v19;
      sub_1B69D79C8(a1, v20, v21, a4);
      objc_msgSend(*(id *)(a1 + v24), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B688664C((uint64_t)v18, (char *)v19, a4);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v24), sel_unlock);
    }
  }
}

void sub_1B69D7BEC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  int v29 = a3;
  if (v6)
  {
    uint64_t v7 = *(_opaque_pthread_t **)(v6 + 144);
    id v8 = a2;
    id v9 = a3;
    id v10 = (char *)v8;
    id v11 = (char *)v9;
    swift_retain();
    id v12 = pthread_self();
    if (pthread_equal(v7, v12))
    {
      sub_1B63BADF0();
      sub_1B67CAB18(*(unsigned int *)&v11[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)v11[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] << 32), 0, 1);
      uint64_t v13 = (uint64_t *)&v10[OBJC_IVAR____TtC3VFX8VFXScene_effects];
      id v14 = v11;
      uint64_t v15 = sub_1B69E3138(v13, (uint64_t)v14);

      if ((unint64_t)*v13 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_1B6E32C18();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      sub_1B68E9B58(v15, v16);
      sub_1B69E21FC(a1);
    }
    else
    {
      uint64_t v24 = v10;
      long long v25 = v11;
      sub_1B6A8DCC4(v6, v24, v25);
    }
    swift_release();
  }
  else
  {
    uint64_t v17 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v18 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v19 = a2;
    id v20 = a3;
    id v21 = (char *)v19;
    id v22 = (char *)v20;
    objc_msgSend(v18, sel_lock);
    if (*(void *)(a1 + v5))
    {
      id v21 = v21;
      id v23 = v22;
      sub_1B69D7BEC(a1, v21, v23);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B67CAB18(*(unsigned int *)&v22[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)v22[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] << 32), 0, 1);
      uint64_t v26 = (uint64_t *)&v21[OBJC_IVAR____TtC3VFX8VFXScene_effects];
      id v23 = v22;
      uint64_t v27 = sub_1B69E3138(v26, (uint64_t)v23);

      if ((unint64_t)*v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = sub_1B6E32C18();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = *(void *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      sub_1B68E9B58(v27, v28);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v17), sel_unlock, v29);
  }
}

void sub_1B69D7F28(uint64_t a1, void *a2)
{
}

void sub_1B69D7F7C(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v11)
  {
    id v12 = *(_opaque_pthread_t **)(v11 + 144);
    id v13 = a3;
    swift_bridgeObjectRetain_n();
    id v14 = v13;
    swift_retain();
    uint64_t v15 = pthread_self();
    if (pthread_equal(v12, v15))
    {
      sub_1B63BADF0();
      *a2 = sub_1B6C10DBC(a4, a5);
      sub_1B69E21FC(a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v20 = v14;
      swift_bridgeObjectRetain();
      sub_1B6A8DE98(v11, a2, v20, a4, a5);
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  else
  {
    uint64_t v16 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v18 = a3;
    swift_bridgeObjectRetain_n();
    id v19 = v18;
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v10))
    {
      id v19 = v19;
      swift_bridgeObjectRetain();
      sub_1B69D7F7C(a1, a2, v19, a4, a5);
    }
    else
    {
      sub_1B63BADF0();
      *a2 = sub_1B6C10DBC(a4, a5);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v16), sel_unlock);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease_n();
}

void sub_1B69D81BC(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v9)
  {
    uint64_t v10 = *(_opaque_pthread_t **)(v9 + 144);
    id v11 = a2;
    swift_retain_n();
    id v12 = v11;
    swift_retain();
    id v13 = pthread_self();
    if (pthread_equal(v10, v13))
    {
      sub_1B63BADF0();
      sub_1B696088C((uint64_t)v12, a3, a4 & 1);
      sub_1B69E21FC(a1);
      swift_release();
    }
    else
    {
      id v19 = v12;
      swift_retain();
      sub_1B6A8DF9C(v9, v19, a3, a4 & 1);
      swift_release();
    }
    swift_release();
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v16 = a2;
    swift_retain_n();
    id v17 = v16;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v8))
    {
      id v18 = v17;
      swift_retain();
      sub_1B69D81BC(a1, v18, a3, a4 & 1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
      swift_release();
    }
    else
    {
      sub_1B63BADF0();
      sub_1B696088C((uint64_t)v17, a3, a4 & 1);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
      swift_release();
    }
    uint64_t v6 = a2;
  }
  swift_release_n();
}

uint64_t sub_1B69D83DC(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v11)
  {
    id v12 = *(_opaque_pthread_t **)(v11 + 144);
    swift_retain_n();
    id v13 = a4;
    swift_retain_n();
    uint64_t v14 = (char *)v13;
    swift_retain();
    uint64_t v15 = pthread_self();
    if (pthread_equal(v12, v15))
    {
      sub_1B63BADF0();
      *a2 = sub_1B6B1BFA4(*(void *)&v14[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity], a5, 1, **(void **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues));
      sub_1B69E21FC(a1);

      swift_release();
LABEL_8:
      swift_release();
      goto LABEL_9;
    }
    swift_retain();
    id v21 = v14;
    swift_retain();
    sub_1B6A8E09C(v11, a2, a3, v21, a5);

    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v16 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    id v18 = a4;
    swift_retain_n();
    id v19 = (char *)v18;
    objc_msgSend(v17, sel_lock);
    if (!*(void *)(a1 + v10))
    {
      sub_1B63BADF0();
      *a2 = sub_1B6B1BFA4(*(void *)&v19[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity], a5, 1, **(void **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues));
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v16), sel_unlock);

      goto LABEL_8;
    }
    swift_retain();
    id v20 = v19;
    swift_retain();
    sub_1B69D83DC(a1, a2, a3, v20, a5);
    objc_msgSend(*(id *)(a1 + v16), sel_unlock);

    swift_release();
  }
LABEL_9:

  swift_release_n();
  return swift_release_n();
}

void sub_1B69D8660(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v9)
  {
    uint64_t v10 = *(_opaque_pthread_t **)(v9 + 144);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = a2;
    id v12 = a2;
    swift_retain();
    id v13 = v12;
    uint64_t v14 = pthread_self();
    if (pthread_equal(v10, v14))
    {
      sub_1B63BADF0();
      sub_1B69626E8((uint64_t)v13, a3, a4);
      sub_1B69E21FC(a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v18 = v13;
      swift_bridgeObjectRetain();
      sub_1B6A8E1BC(v9, v18, a3, a4);
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  else
  {
    uint64_t v19 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_bridgeObjectRetain_n();
    id v20 = a2;
    id v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v8))
    {
      id v17 = v16;
      swift_bridgeObjectRetain();
      sub_1B69D8660(a1, v17, a3, a4);
      objc_msgSend(*(id *)(a1 + v19), sel_unlock);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B63BADF0();
      sub_1B69626E8((uint64_t)v16, a3, a4);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v19), sel_unlock);
      swift_bridgeObjectRelease();
    }
    uint64_t v11 = v20;
  }
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1B69D8898(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v12)
  {
    id v13 = *(_opaque_pthread_t **)(v12 + 144);
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v14 = pthread_self();
    if (pthread_equal(v13, v14))
    {
      sub_1B63BADF0();
      if (a2 != -1 || v10)
      {
        uint64_t v20 = swift_retain();
        MEMORY[0x1F4188790](v20, v21);
        sub_1B636C318(0, (void (*)(unsigned char *))sub_1B69E90D4);
        swift_release();
      }
      sub_1B69E21FC(a1);
      swift_bridgeObjectRelease_n();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    id v17 = *(pthread_mutex_t **)(v12 + 64);
    swift_bridgeObjectRetain();
    pthread_mutex_lock(v17);
    id v18 = runtime_thread_is_locked;
    is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
    ++*is_locked;
    if (swift_weakLoadStrong())
    {
      sub_1B63BADF0();
      swift_release();
    }
    if (a2 != -1 || v10)
    {
      uint64_t v22 = swift_retain();
      MEMORY[0x1F4188790](v22, v23);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B69E90D4);
      swift_release();
    }
    if (swift_weakLoadStrong())
    {
      sub_1B69E090C();
      swift_release();
    }
    uint64_t v24 = (_DWORD *)v18(&runtime_thread_is_locked);
    --*v24;
    pthread_mutex_unlock(*(pthread_mutex_t **)(v12 + 64));
    swift_release();
  }
  else
  {
    uint64_t v27 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_bridgeObjectRetain_n();
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v11))
    {
      swift_bridgeObjectRetain();
      sub_1B69D8898(a1, a2, a3, a4, a5);
      if (v28)
      {
        objc_msgSend(*(id *)(a1 + v27), sel_unlock);
        return swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      sub_1B63BADF0();
      if (a2 != -1 || v10)
      {
        uint64_t v25 = swift_retain();
        MEMORY[0x1F4188790](v25, v26);
        sub_1B636C318(0, (void (*)(unsigned char *))sub_1B69E8FD0);
        swift_release();
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v27), sel_unlock);
  }
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

void sub_1B69D8C5C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    id v9 = a2;
    swift_retain_n();
    id v10 = v9;
    swift_retain();
    uint64_t v11 = pthread_self();
    if (pthread_equal(v8, v11))
    {
      sub_1B63BADF0();
      sub_1B6962CEC((uint64_t)v10, a3);
      sub_1B69E21FC(a1);
      swift_release();
    }
    else
    {
      id v16 = v10;
      swift_retain();
      sub_1B6A8E1FC(v7, v16, a3);
      swift_release();
    }
    swift_release();
  }
  else
  {
    uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v13 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v14 = a2;
    swift_retain_n();
    id v15 = v14;
    objc_msgSend(v13, sel_lock);
    if (*(void *)(a1 + v6))
    {
      id v15 = v15;
      swift_retain();
      sub_1B69D8C5C(a1, v15, a3);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6962CEC((uint64_t)v15, a3);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v12), sel_unlock);
    swift_release();
  }
  swift_release_n();
}

uint64_t sub_1B69D8E40(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    swift_retain_n();
    swift_retain();
    id v9 = pthread_self();
    if (pthread_equal(v8, v9))
    {
      sub_1B63BADF0();
      a2();
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      sub_1B6A8E23C(v7, (void (*)(uint64_t))a2);
    }
    swift_release_n();
    swift_release();
  }
  else
  {
    uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    objc_msgSend(v11, sel_lock);
    if (*(void *)(a1 + v6))
    {
      swift_retain();
      sub_1B69D8E40(a1, a2, a3);
    }
    else
    {
      sub_1B63BADF0();
      a2();
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v10), sel_unlock);
    swift_release_n();
  }
  return swift_release();
}

void sub_1B69D8FBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, id *a5)
{
  uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v10)
  {
    uint64_t v11 = *(_opaque_pthread_t **)(v10 + 144);
    id v12 = a2;
    swift_bridgeObjectRetain_n();
    id v13 = v12;
    swift_retain();
    id v14 = pthread_self();
    if (pthread_equal(v11, v14))
    {
      sub_1B63BADF0();
      sub_1B69F1D60((uint64_t)v13, a3, a4, a5);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v13 = v13;
      swift_bridgeObjectRetain();
      sub_1B6A8E318(v10, v13, a3, a4, a5);
    }
    swift_bridgeObjectRelease();

    swift_release();
  }
  else
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v17 = a2;
    swift_bridgeObjectRetain_n();
    id v18 = v17;
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v9))
    {
      id v19 = v18;
      swift_bridgeObjectRetain();
      sub_1B69D8FBC(a1, v19, a3, a4, a5);
    }
    else
    {
      id v19 = v18;
      sub_1B63BADF0();
      sub_1B69F1D60((uint64_t)v18, a3, a4, a5);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v15), sel_unlock);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease_n();
}

void sub_1B69D91EC(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v12)
  {
    uint64_t v18 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v19 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v20 = a2;
    objc_msgSend(v19, sel_lock);
    if (*(void *)(a1 + v11))
    {
      uint64_t v20 = v20;
      sub_1B69D91EC(a1, v20, a3, a4, a5);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v22 = *(void *)&v20[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
      id v17 = (void *)MEMORY[0x1BA9B6EE0]();
      sub_1B6A9A564(v22, a3, a5, a4);
      if (v5) {
        goto LABEL_13;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v18), sel_unlock);

    goto LABEL_12;
  }
  id v13 = *(_opaque_pthread_t **)(v12 + 144);
  id v14 = a2;
  swift_retain();
  uint64_t v15 = pthread_self();
  if (!pthread_equal(v13, v15))
  {
    uint64_t v21 = v14;
    sub_1B6A8E42C(v12, v21, a3, a4, a5);

    goto LABEL_8;
  }
  sub_1B63BADF0();
  uint64_t v16 = *(void *)&v14[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  id v17 = (void *)MEMORY[0x1BA9B6EE0]();
  sub_1B6A9A564(v16, a3, a5, a4);
  if (!v5)
  {
    sub_1B69E21FC(a1);

LABEL_8:
    swift_release();
LABEL_12:

    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1B69D93F8(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v11)
  {
    uint64_t v12 = *(_opaque_pthread_t **)(v11 + 144);
    swift_retain_n();
    id v13 = a3;
    swift_retain();
    id v14 = pthread_self();
    if (pthread_equal(v12, v14))
    {
      sub_1B63BADF0();
      sub_1B6B66F8C(a2, (uint64_t)v13, a4);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      id v13 = v13;
      sub_1B6A8E55C(v11, a2, v13, a4);
    }

    swift_release();
  }
  else
  {
    uint64_t v19 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    id v16 = a3;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v10))
    {
      swift_retain();
      id v17 = v16;
      sub_1B69D93F8(a1, a2, v17, a4, a5);
      objc_msgSend(*(id *)(a1 + v19), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B66F8C(a2, (uint64_t)v16, a4);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v19), sel_unlock);
    }
  }
  swift_release();

  return swift_release_n();
}

void sub_1B69D961C(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    uint64_t v7 = a2;
    swift_retain();
    uint64_t v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      uint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC3VFX8VFXScene_entityManager]
         + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
      uint64_t v10 = type metadata accessor for ScriptingConfiguration();
      ++*(void *)(v9 + *(int *)(v10 + 36));
      sub_1B69E21FC(a1);
    }
    else
    {
      id v14 = v7;
      sub_1B6A8E670(v5, v14);
    }
    swift_release();
  }
  else
  {
    uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v12 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v13 = a2;
    objc_msgSend(v12, sel_lock);
    if (*(void *)(a1 + v4))
    {
      id v13 = v13;
      sub_1B69D961C(a1, v13);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v15 = *(void *)&v13[OBJC_IVAR____TtC3VFX8VFXScene_entityManager]
          + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
      uint64_t v16 = type metadata accessor for ScriptingConfiguration();
      ++*(void *)(v15 + *(int *)(v16 + 36));
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v11), sel_unlock);
  }
}

void sub_1B69D97D0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v8)
  {
    uint64_t v9 = *(_opaque_pthread_t **)(v8 + 144);
    swift_unknownObjectRetain_n();
    id v10 = a2;
    swift_retain();
    uint64_t v11 = (char *)v10;
    uint64_t v12 = pthread_self();
    if (pthread_equal(v9, v12))
    {
      sub_1B63BADF0();
      uint64_t Strong = swift_weakLoadStrong();
      if (!Strong)
      {
        uint64_t Strong = *(void *)&v11[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
        if (Strong)
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          uint64_t Strong = swift_allocObject();
          sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }
      uint64_t v24 = v11;
      swift_unknownObjectRetain();
      sub_1B6A61614(0, Strong, a3, v24);
      swift_release();
      sub_1B69E21FC(a1);
      swift_unknownObjectRelease();

      swift_release();
    }
    else
    {
      uint64_t v18 = *(pthread_mutex_t **)(v8 + 64);
      uint64_t v19 = v11;
      swift_unknownObjectRetain();
      pthread_mutex_lock(v18);
      uint64_t v20 = runtime_thread_is_locked;
      is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
      ++*is_locked;
      if (swift_weakLoadStrong())
      {
        sub_1B63BADF0();
        swift_release();
      }
      uint64_t v22 = swift_weakLoadStrong();
      if (!v22)
      {
        uint64_t v22 = *(void *)&v19[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
        if (v22)
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          uint64_t v22 = swift_allocObject();
          sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }
      uint64_t v25 = v19;
      swift_unknownObjectRetain();
      sub_1B6A61614(0, v22, a3, v25);
      swift_release();
      if (swift_weakLoadStrong())
      {
        sub_1B69E090C();
        swift_release();
      }
      uint64_t v26 = (_DWORD *)v20(&runtime_thread_is_locked);
      --*v26;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 64));
      swift_release();
      swift_unknownObjectRelease_n();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_unknownObjectRetain_n();
    uint64_t v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v7))
    {
      id v17 = v16;
      swift_unknownObjectRetain();
      sub_1B69D97D0(a1, v17, a3);
      if (v3)
      {
        objc_msgSend(*(id *)(a1 + v14), sel_unlock);
        swift_unknownObjectRelease_n();

        return;
      }
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
      swift_unknownObjectRelease();
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v23 = swift_weakLoadStrong();
      if (!v23)
      {
        uint64_t v23 = *(void *)&v16[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
        if (v23)
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          uint64_t v23 = swift_allocObject();
          sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }
      uint64_t v27 = v16;
      swift_unknownObjectRetain();
      sub_1B6A61614(0, v23, a3, v27);
      swift_release();
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
      swift_unknownObjectRelease();
    }
  }
  swift_unknownObjectRelease_n();
}

void sub_1B69D9C54(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v8)
  {
    uint64_t v9 = *(_opaque_pthread_t **)(v8 + 144);
    id v10 = a3;
    id v11 = a2;
    id v12 = v10;
    swift_retain();
    id v13 = (char *)v11;
    uint64_t v14 = pthread_self();
    if (pthread_equal(v9, v14))
    {
      sub_1B63BADF0();
      uint64_t Strong = swift_weakLoadStrong();
      if (!Strong)
      {
        uint64_t Strong = *(void *)&v13[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
        if (Strong)
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          uint64_t Strong = swift_allocObject();
          sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }
      uint64_t v31 = v13;
      id v32 = v12;
      sub_1B6A61780(0, Strong, a3, v31);
      swift_release();
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      uint64_t v24 = *(pthread_mutex_t **)(v8 + 64);
      uint64_t v25 = v13;
      id v26 = v12;
      pthread_mutex_lock(v24);
      uint64_t v27 = runtime_thread_is_locked;
      is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
      ++*is_locked;
      if (swift_weakLoadStrong())
      {
        sub_1B63BADF0();
        swift_release();
      }
      uint64_t v29 = swift_weakLoadStrong();
      if (!v29)
      {
        uint64_t v29 = *(void *)&v25[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
        if (v29)
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          uint64_t v29 = swift_allocObject();
          sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }
      uint64_t v33 = v25;
      id v34 = v26;
      sub_1B6A61780(0, v29, a3, v33);
      swift_release();
      if (swift_weakLoadStrong())
      {
        sub_1B69E090C();
        swift_release();
      }
      uint64_t v35 = (_DWORD *)v27(&runtime_thread_is_locked);
      --*v35;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 64));
      swift_release();
    }
  }
  else
  {
    uint64_t v16 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v18 = a3;
    id v19 = a2;
    id v20 = v18;
    uint64_t v21 = (char *)v19;
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v7))
    {
      uint64_t v22 = v21;
      id v23 = v20;
      sub_1B69D9C54(a1, v22, a3);
      if (v3)
      {
        objc_msgSend(*(id *)(a1 + v16), sel_unlock);

        return;
      }
      objc_msgSend(*(id *)(a1 + v16), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v30 = swift_weakLoadStrong();
      if (!v30)
      {
        uint64_t v30 = *(void *)&v21[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
        if (v30)
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          uint64_t v30 = swift_allocObject();
          sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }
      float v36 = v21;
      id v37 = v20;
      sub_1B6A61780(0, v30, a3, v36);
      swift_release();
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v16), sel_unlock);
    }
  }
}

void sub_1B69DA0DC(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    id v9 = a2;
    swift_retain();
    id v10 = pthread_self();
    if (pthread_equal(v8, v10))
    {
      sub_1B63BADF0();
      sub_1B69F8348((uint64_t)v9, a3 & 1);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v14 = v9;
      sub_1B6A8E770(v7, v14, a3 & 1);
    }
    swift_release();
  }
  else
  {
    uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v12 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v13 = a2;
    objc_msgSend(v12, sel_lock);
    if (*(void *)(a1 + v6))
    {
      id v13 = v13;
      sub_1B69DA0DC(a1, v13, a3 & 1);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B69F8348((uint64_t)v13, a3 & 1);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v11), sel_unlock);
  }
}

void sub_1B69DA274(uint64_t a1, void *a2)
{
}

void sub_1B69DA2C8(uint64_t a1, void *a2)
{
}

void sub_1B69DA31C(uint64_t a1, void *a2)
{
}

void sub_1B69DA370(uint64_t a1, void *a2)
{
}

void sub_1B69DA3C4(uint64_t a1, void *a2, void (*a3)(uint64_t, id), void (*a4)(id), void (*a5)(uint64_t, id))
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v8)
  {
    id v10 = *(_opaque_pthread_t **)(v8 + 144);
    id v11 = a2;
    swift_retain();
    id v12 = pthread_self();
    if (pthread_equal(v10, v12))
    {
      sub_1B63BADF0();
      a4(v11);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v17 = v11;
      a3(v8, v17);
    }
    swift_release();
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v7))
    {
      id v16 = v16;
      a5(a1, v16);
    }
    else
    {
      sub_1B63BADF0();
      a4(v16);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v14), sel_unlock);
  }
}

uint64_t sub_1B69DA568(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v13)
  {
    uint64_t v15 = *(_opaque_pthread_t **)(v13 + 144);
    id v16 = a2;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    id v17 = v16;
    swift_retain();
    id v18 = pthread_self();
    if (pthread_equal(v15, v18))
    {
      sub_1B63BADF0();
      sub_1B6A77370((uint64_t)v17, a3, a4, a5, a6, a7, a8, a9);
      sub_1B69E21FC(a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v22 = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B6A8EA00(v13, v22, a3, a4, a5, a6, a7, a8, a9);
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  else
  {
    uint64_t v24 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v19 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v20 = a2;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    id v21 = v20;
    objc_msgSend(v19, sel_lock);
    if (*(void *)(a1 + v12))
    {
      id v21 = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B69DA568(a1, v21, a3, a4, a5, a6, a7, a8, a9);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6A77370((uint64_t)v21, a3, a4, a5, a6, a7, a8, a9);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v24), sel_unlock);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease_n();

  swift_release_n();
  return swift_bridgeObjectRelease_n();
}

void sub_1B69DA81C(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v6)
  {
    uint64_t v13 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v15 = a2;
    objc_msgSend(v14, sel_lock);
    if (*(void *)(a1 + v5))
    {
      uint64_t v15 = v15;
      sub_1B69DA81C(a1, v15);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v17 = *(void *)(*(void *)&v15[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      uint64_t v18 = swift_retain();
      uint64_t v8 = (char *)MEMORY[0x1BA9B6EE0](v18);
      sub_1B6377B14(v17);
      if (v2) {
        goto LABEL_14;
      }
      swift_release();
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v13), sel_unlock);

    goto LABEL_12;
  }
  uint64_t v7 = *(_opaque_pthread_t **)(v6 + 144);
  uint64_t v8 = a2;
  swift_retain();
  id v9 = pthread_self();
  if (!pthread_equal(v7, v9))
  {
    id v16 = v8;
    sub_1B6A8EB44(v6, v16);

    goto LABEL_8;
  }
  sub_1B63BADF0();
  uint64_t v10 = *(void *)(*(void *)&v8[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  uint64_t v11 = swift_retain();
  uint64_t v12 = (void *)MEMORY[0x1BA9B6EE0](v11);
  sub_1B6377B14(v10);
  if (!v2)
  {
    swift_release();
    sub_1B69E21FC(a1);

LABEL_8:
    swift_release();
LABEL_12:

    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_1B69DAA28(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    id v9 = a2;
    swift_unknownObjectRetain_n();
    id v10 = v9;
    swift_retain();
    uint64_t v11 = pthread_self();
    if (pthread_equal(v8, v11))
    {
      sub_1B63BADF0();
      sub_1B6A77CA4((uint64_t)v10, a3);
      sub_1B69E21FC(a1);
      swift_unknownObjectRelease();
    }
    else
    {
      id v16 = v10;
      swift_unknownObjectRetain();
      sub_1B6A8EC6C(v7, v16, a3);
      swift_unknownObjectRelease();
    }
    swift_release();
  }
  else
  {
    uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v14 = a2;
    swift_unknownObjectRetain_n();
    id v15 = v14;
    objc_msgSend(v13, sel_lock);
    if (*(void *)(a1 + v6))
    {
      id v15 = v15;
      swift_unknownObjectRetain();
      sub_1B69DAA28(a1, v15, a3);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6A77CA4((uint64_t)v15, a3);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v12), sel_unlock);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease_n();
}

void sub_1B69DAC0C(uint64_t a1, void *a2, double a3)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v8)
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v17 = a2;
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v7))
    {
      uint64_t v17 = v17;
      sub_1B69DAC0C(a1, v17, a3);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v19 = *(void *)(*(void *)&v17[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      uint64_t v20 = swift_retain();
      id v10 = (char *)MEMORY[0x1BA9B6EE0](v20);
      sub_1B6377B14(v19);
      if (v3) {
        goto LABEL_14;
      }
      swift_release();
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v15), sel_unlock);

    goto LABEL_12;
  }
  id v9 = *(_opaque_pthread_t **)(v8 + 144);
  id v10 = a2;
  swift_retain();
  uint64_t v11 = pthread_self();
  if (!pthread_equal(v9, v11))
  {
    uint64_t v18 = v10;
    sub_1B6A8EB44(v8, v18);

    goto LABEL_8;
  }
  sub_1B63BADF0();
  uint64_t v12 = *(void *)(*(void *)&v10[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  uint64_t v13 = swift_retain();
  id v14 = (void *)MEMORY[0x1BA9B6EE0](v13);
  sub_1B6377B14(v12);
  if (!v3)
  {
    swift_release();
    sub_1B69E21FC(a1);

LABEL_8:
    swift_release();
LABEL_12:

    return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
}

void sub_1B69DAE2C(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v9)
  {
    id v10 = *(_opaque_pthread_t **)(v9 + 144);
    id v11 = a2;
    swift_unknownObjectRetain_n();
    id v12 = v11;
    swift_retain();
    uint64_t v13 = pthread_self();
    if (pthread_equal(v10, v13))
    {
      sub_1B63BADF0();
      sub_1B6A77CA4((uint64_t)v12, a3);
      sub_1B69E21FC(a1);
      swift_unknownObjectRelease();
    }
    else
    {
      id v18 = v12;
      swift_unknownObjectRetain();
      sub_1B6A8EDB8(v9, v18, a3);
      swift_unknownObjectRelease();
    }
    swift_release();
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v16 = a2;
    swift_unknownObjectRetain_n();
    id v17 = v16;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v8))
    {
      id v17 = v17;
      swift_unknownObjectRetain();
      sub_1B69DAE2C(a1, v17, a3, a4);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6A77CA4((uint64_t)v17, a3);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease_n();
}

void sub_1B69DB02C(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    uint64_t v7 = a2;
    swift_retain();
    uint64_t v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      uint64_t v9 = *(void *)(*(void *)&v7[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      MEMORY[0x1F4188790](v10, v11);
      id v12 = *(void **)(v9 + 176);
      swift_retain();
      swift_retain();
      sub_1B636E6E4((uint64_t)&type metadata for WorldFromScene, (uint64_t)&off_1F0F675A0, v12, (void (*)(uint64_t))sub_1B69E90F0);
      swift_release();
      swift_release();
      sub_1B69E21FC(a1);
    }
    else
    {
      id v16 = v7;
      sub_1B6A8EEC0(v5, v16);
    }
    swift_release();
  }
  else
  {
    uint64_t v13 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v15 = a2;
    objc_msgSend(v14, sel_lock);
    if (*(void *)(a1 + v4))
    {
      uint64_t v15 = v15;
      sub_1B69DB02C(a1, v15);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v17 = *(void *)(*(void *)&v15[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      MEMORY[0x1F4188790](v18, v19);
      uint64_t v20 = *(void **)(v17 + 176);
      swift_retain();
      swift_retain();
      sub_1B636E6E4((uint64_t)&type metadata for WorldFromScene, (uint64_t)&off_1F0F675A0, v20, (void (*)(uint64_t))sub_1B69E8EA8);
      swift_release();
      swift_release();
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v13), sel_unlock);
  }
}

void sub_1B69DB2DC(uint64_t a1, void *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, __n128 a6)
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v9)
  {
    uint64_t v10 = *(_opaque_pthread_t **)(v9 + 144);
    uint64_t v11 = a2;
    swift_retain();
    id v12 = pthread_self();
    if (pthread_equal(v10, v12))
    {
      sub_1B63BADF0();
      float32x4_t v13 = vmulq_f32(a3, a3);
      float v14 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
      float32x4_t v15 = vmulq_f32(a4, a4);
      float32x4_t v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2);
      *(float *)v17.i32 = sqrtf(vaddq_f32(v16, vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]);
      float32x4_t v18 = vmulq_f32(a5, a5);
      LODWORD(v19) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).u32[0];
      v20.n128_u32[3] = 0;
      int32x4_t v21 = vzip2q_s32((int32x4_t)v13, (int32x4_t)v18);
      float32x4_t v22 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v13, (int32x4_t)v18), (int32x4_t)v15);
      float32x4_t v23 = (float32x4_t)vtrn2q_s32((int32x4_t)v13, (int32x4_t)v15);
      v23.i32[2] = v18.i32[1];
      float32x4_t v24 = vaddq_f32((float32x4_t)vzip1q_s32(v21, (int32x4_t)v16), vaddq_f32(v22, v23));
      v15.i64[0] = 0x80000000800000;
      v15.i64[1] = 0x80000000800000;
      int32x4_t v25 = vcgeq_f32(v15, v24);
      v24.i32[3] = 0;
      float32x4_t v26 = vrsqrteq_f32(v24);
      float32x4_t v27 = vmulq_f32(v26, vrsqrtsq_f32(v24, vmulq_f32(v26, v26)));
      int32x4_t v28 = v25;
      v28.i32[3] = 0;
      float32x4_t v29 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v28), (int8x16_t)v24, (int8x16_t)vmulq_f32(v27, vrsqrtsq_f32(v24, vmulq_f32(v27, v27))));
      float32x4_t v30 = vmulq_n_f32(a3, v29.f32[0]);
      float32x4_t v31 = vmulq_lane_f32(a4, *(float32x2_t *)v29.f32, 1);
      float32x4_t v32 = vmulq_laneq_f32(a5, v29, 2);
      int8x16_t v33 = (int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32);
      int8x16_t v34 = (int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31);
      int32x4_t v35 = (int32x4_t)v30;
      if (v25.i32[0])
      {
        int8x16_t v36 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v33, (int8x16_t)v32, 0xCuLL), vnegq_f32(v31)), v32, (float32x4_t)vextq_s8(v34, (int8x16_t)v31, 0xCuLL));
        int32x4_t v35 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), v36, 0xCuLL);
      }
      v20.n128_f32[0] = v14;
      int8x16_t v37 = (int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30);
      float32x4_t v38 = v31;
      float v39 = sqrtf(v19);
      if (v25.i32[1])
      {
        int8x16_t v40 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v37, (int8x16_t)v30, 0xCuLL), vnegq_f32(v32)), v30, (float32x4_t)vextq_s8(v33, (int8x16_t)v32, 0xCuLL));
        float32x4_t v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), v40, 0xCuLL);
      }
      v20.n128_u32[1] = v17.i32[0];
      if (v25.i32[2])
      {
        int8x16_t v17 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v34, (int8x16_t)v31, 0xCuLL), vnegq_f32(v30)), v31, (float32x4_t)vextq_s8(v37, (int8x16_t)v30, 0xCuLL));
        float32x4_t v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
      }
      v20.n128_f32[2] = v39;
      float v41 = (float)(*(float *)v35.i32 + v38.f32[1]) + v32.f32[2];
      if (v41 <= 0.0)
      {
        if (*(float *)v35.i32 < v38.f32[1] || *(float *)v35.i32 < v32.f32[2])
        {
          __n128 v48 = a6;
          if (v38.f32[1] <= v32.f32[2])
          {
            *(float32x2_t *)v46.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v35, (int32x4_t)v38), *(float32x2_t *)v32.f32);
            float32x2_t v105 = (float32x2_t)__PAIR64__(v35.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v32.f32[2] + 1.0) - *(float *)v35.i32) - v38.f32[1])));
            float32x2_t v106 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
            int32x2_t v107 = (int32x2_t)vsub_f32(*(float32x2_t *)v35.i8, v106);
            v106.i32[0] = v105.i32[0];
            v106.i32[0] = vmul_f32(v105, v106).u32[0];
            v106.i32[1] = v107.i32[1];
            *(float32x2_t *)&v46.u32[2] = v106;
            *(float *)v107.i32 = 0.5 / v105.f32[0];
            float32x4_t v47 = (float32x4_t)vdupq_lane_s32(v107, 0);
          }
          else
          {
            float v54 = sqrtf((float)((float)(v38.f32[1] + 1.0) - *(float *)v35.i32) - v32.f32[2]);
            *(int32x2_t *)v17.i8 = vdup_laneq_s32((int32x4_t)v38, 2);
            int8x16_t v55 = v17;
            *(float *)v55.i32 = v54;
            v55.i32[0] = vmul_f32(*(float32x2_t *)v55.i8, (float32x2_t)__PAIR64__(v32.u32[1], LODWORD(v54))).u32[0];
            v55.i32[1] = vadd_f32(*(float32x2_t *)&v17, *(float32x2_t *)&v32).i32[1];
            int8x16_t v56 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1), v38);
            int32x2_t v57 = (int32x2_t)vsubq_f32(v32, (float32x4_t)vdupq_laneq_s32(v35, 2)).u64[0];
            float32x4_t v47 = (float32x4_t)vextq_s8(vextq_s8(v56, v56, 4uLL), v55, 0xCuLL);
            v47.i32[3] = v57.i32[0];
            *(float *)v57.i32 = 0.5 / v54;
            float32x4_t v46 = (float32x4_t)vdupq_lane_s32(v57, 0);
          }
        }
        else
        {
          float v94 = sqrtf((float)((float)(*(float *)v35.i32 + 1.0) - v38.f32[1]) - v32.f32[2]);
          float32x2_t v95 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
          float32x2_t v96 = vadd_f32(*(float32x2_t *)v35.i8, v95);
          v95.f32[0] = v94;
          v47.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v35.u32[1], LODWORD(v94)), v95).u32[0];
          v47.i32[1] = v96.i32[1];
          float32x2_t v97 = (float32x2_t)vzip2q_s32(v35, (int32x4_t)v38).u64[0];
          LODWORD(v98) = vadd_f32(v97, *(float32x2_t *)v32.f32).u32[0];
          int32x2_t v99 = (int32x2_t)vsub_f32(v97, *(float32x2_t *)v32.f32);
          HIDWORD(v98) = v99.i32[1];
          v47.i64[1] = v98;
          *(float *)v99.i32 = 0.5 / v94;
          float32x4_t v46 = (float32x4_t)vdupq_lane_s32(v99, 0);
          __n128 v48 = a6;
        }
      }
      else
      {
        float32x4_t v42 = (float32x4_t)vzip2q_s32((int32x4_t)v38, vuzp1q_s32((int32x4_t)v38, (int32x4_t)v32));
        v42.i32[2] = v35.i32[1];
        float v43 = sqrtf(v41 + 1.0);
        float32x4_t v44 = (float32x4_t)vtrn2q_s32((int32x4_t)v32, vzip2q_s32((int32x4_t)v32, v35));
        v44.i32[2] = v38.i32[0];
        float32x4_t v46 = vsubq_f32(v42, v44);
        v42.f32[3] = v43;
        v44.f32[3] = v43;
        float32x4_t v45 = vmulq_f32(v42, v44);
        v46.i32[3] = v45.i32[3];
        v45.f32[0] = 0.5 / v43;
        float32x4_t v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0);
        __n128 v48 = a6;
      }
      sub_1B6A78230(*(void *)&v11[OBJC_IVAR___VFXREScene_rootEntity], v11[OBJC_IVAR___VFXREScene_rootEntity + 8], v20, (__n128)vmulq_f32(v46, v47), v48);
      sub_1B69E21FC(a1);
    }
    else
    {
      long long v52 = v11;
      sub_1B6A8F044(v9, v52, a3, a4, a5, a6);
    }
    swift_release();
  }
  else
  {
    uint64_t v49 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    unint64_t v50 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v51 = a2;
    objc_msgSend(v50, sel_lock);
    if (*(void *)(a1 + v8))
    {
      uint64_t v51 = v51;
      sub_1B69DB2DC(a1, v51, (__n128)a3, (__n128)a4, (__n128)a5, a6);
    }
    else
    {
      sub_1B63BADF0();
      float32x4_t v58 = vmulq_f32(a3, a3);
      float v59 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]);
      float32x4_t v60 = vmulq_f32(a4, a4);
      float32x4_t v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2);
      *(float *)v62.i32 = sqrtf(vaddq_f32(v61, vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0]);
      float32x4_t v63 = vmulq_f32(a5, a5);
      LODWORD(v64) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).u32[0];
      v65.n128_u32[3] = 0;
      int32x4_t v66 = vzip2q_s32((int32x4_t)v58, (int32x4_t)v63);
      float32x4_t v67 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v58, (int32x4_t)v63), (int32x4_t)v60);
      float32x4_t v68 = (float32x4_t)vtrn2q_s32((int32x4_t)v58, (int32x4_t)v60);
      v68.i32[2] = v63.i32[1];
      float32x4_t v69 = vaddq_f32((float32x4_t)vzip1q_s32(v66, (int32x4_t)v61), vaddq_f32(v67, v68));
      v60.i64[0] = 0x80000000800000;
      v60.i64[1] = 0x80000000800000;
      int32x4_t v70 = vcgeq_f32(v60, v69);
      v69.i32[3] = 0;
      float32x4_t v71 = vrsqrteq_f32(v69);
      float32x4_t v72 = vmulq_f32(v71, vrsqrtsq_f32(v69, vmulq_f32(v71, v71)));
      int32x4_t v73 = v70;
      v73.i32[3] = 0;
      float32x4_t v74 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v73), (int8x16_t)v69, (int8x16_t)vmulq_f32(v72, vrsqrtsq_f32(v69, vmulq_f32(v72, v72))));
      float32x4_t v75 = vmulq_n_f32(a3, v74.f32[0]);
      float32x4_t v76 = vmulq_lane_f32(a4, *(float32x2_t *)v74.f32, 1);
      float32x4_t v77 = vmulq_laneq_f32(a5, v74, 2);
      int8x16_t v78 = (int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77);
      int8x16_t v79 = (int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76);
      int32x4_t v80 = (int32x4_t)v75;
      if (v70.i32[0])
      {
        int8x16_t v81 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v78, (int8x16_t)v77, 0xCuLL), vnegq_f32(v76)), v77, (float32x4_t)vextq_s8(v79, (int8x16_t)v76, 0xCuLL));
        int32x4_t v80 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), v81, 0xCuLL);
      }
      v65.n128_f32[0] = v59;
      int8x16_t v82 = (int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75);
      float32x4_t v83 = v76;
      float v84 = sqrtf(v64);
      if (v70.i32[1])
      {
        int8x16_t v85 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v82, (int8x16_t)v75, 0xCuLL), vnegq_f32(v77)), v75, (float32x4_t)vextq_s8(v78, (int8x16_t)v77, 0xCuLL));
        float32x4_t v83 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), v85, 0xCuLL);
      }
      v65.n128_u32[1] = v62.i32[0];
      if (v70.i32[2])
      {
        int8x16_t v62 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v79, (int8x16_t)v76, 0xCuLL), vnegq_f32(v75)), v76, (float32x4_t)vextq_s8(v82, (int8x16_t)v75, 0xCuLL));
        float32x4_t v77 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), v62, 0xCuLL);
      }
      v65.n128_f32[2] = v84;
      float v86 = (float)(*(float *)v80.i32 + v83.f32[1]) + v77.f32[2];
      if (v86 <= 0.0)
      {
        if (*(float *)v80.i32 < v83.f32[1] || *(float *)v80.i32 < v77.f32[2])
        {
          __n128 v93 = a6;
          if (v83.f32[1] <= v77.f32[2])
          {
            *(float32x2_t *)v91.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v80, (int32x4_t)v83), *(float32x2_t *)v77.f32);
            float32x2_t v114 = (float32x2_t)__PAIR64__(v80.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v77.f32[2] + 1.0) - *(float *)v80.i32) - v83.f32[1])));
            float32x2_t v115 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.f32, 0);
            int32x2_t v116 = (int32x2_t)vsub_f32(*(float32x2_t *)v80.i8, v115);
            v115.i32[0] = v114.i32[0];
            v115.i32[0] = vmul_f32(v114, v115).u32[0];
            v115.i32[1] = v116.i32[1];
            *(float32x2_t *)&v91.u32[2] = v115;
            *(float *)v116.i32 = 0.5 / v114.f32[0];
            float32x4_t v92 = (float32x4_t)vdupq_lane_s32(v116, 0);
          }
          else
          {
            float v101 = sqrtf((float)((float)(v83.f32[1] + 1.0) - *(float *)v80.i32) - v77.f32[2]);
            *(int32x2_t *)v62.i8 = vdup_laneq_s32((int32x4_t)v83, 2);
            int8x16_t v102 = v62;
            *(float *)v102.i32 = v101;
            v102.i32[0] = vmul_f32(*(float32x2_t *)v102.i8, (float32x2_t)__PAIR64__(v77.u32[1], LODWORD(v101))).u32[0];
            v102.i32[1] = vadd_f32(*(float32x2_t *)&v62, *(float32x2_t *)&v77).i32[1];
            int8x16_t v103 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.i8, 1), v83);
            int32x2_t v104 = (int32x2_t)vsubq_f32(v77, (float32x4_t)vdupq_laneq_s32(v80, 2)).u64[0];
            float32x4_t v92 = (float32x4_t)vextq_s8(vextq_s8(v103, v103, 4uLL), v102, 0xCuLL);
            v92.i32[3] = v104.i32[0];
            *(float *)v104.i32 = 0.5 / v101;
            float32x4_t v91 = (float32x4_t)vdupq_lane_s32(v104, 0);
          }
        }
        else
        {
          float v108 = sqrtf((float)((float)(*(float *)v80.i32 + 1.0) - v83.f32[1]) - v77.f32[2]);
          float32x2_t v109 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.f32, 0);
          float32x2_t v110 = vadd_f32(*(float32x2_t *)v80.i8, v109);
          v109.f32[0] = v108;
          v92.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v80.u32[1], LODWORD(v108)), v109).u32[0];
          v92.i32[1] = v110.i32[1];
          float32x2_t v111 = (float32x2_t)vzip2q_s32(v80, (int32x4_t)v83).u64[0];
          LODWORD(v112) = vadd_f32(v111, *(float32x2_t *)v77.f32).u32[0];
          int32x2_t v113 = (int32x2_t)vsub_f32(v111, *(float32x2_t *)v77.f32);
          HIDWORD(v112) = v113.i32[1];
          v92.i64[1] = v112;
          *(float *)v113.i32 = 0.5 / v108;
          float32x4_t v91 = (float32x4_t)vdupq_lane_s32(v113, 0);
          __n128 v93 = a6;
        }
      }
      else
      {
        float32x4_t v87 = (float32x4_t)vzip2q_s32((int32x4_t)v83, vuzp1q_s32((int32x4_t)v83, (int32x4_t)v77));
        v87.i32[2] = v80.i32[1];
        float v88 = sqrtf(v86 + 1.0);
        float32x4_t v89 = (float32x4_t)vtrn2q_s32((int32x4_t)v77, vzip2q_s32((int32x4_t)v77, v80));
        v89.i32[2] = v83.i32[0];
        float32x4_t v91 = vsubq_f32(v87, v89);
        v87.f32[3] = v88;
        v89.f32[3] = v88;
        float32x4_t v90 = vmulq_f32(v87, v89);
        v91.i32[3] = v90.i32[3];
        v90.f32[0] = 0.5 / v88;
        float32x4_t v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 0);
        __n128 v93 = a6;
      }
      sub_1B6A78230(*(void *)&v51[OBJC_IVAR___VFXREScene_rootEntity], v51[OBJC_IVAR___VFXREScene_rootEntity + 8], v65, (__n128)vmulq_f32(v91, v92), v93);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v49), sel_unlock, *(_OWORD *)&a6);
  }
}

void sub_1B69DBA18(uint64_t a1, void *a2, unint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t v13 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v14)
  {
    float32x4_t v15 = *(_opaque_pthread_t **)(v14 + 144);
    id v16 = a2;
    swift_retain();
    int8x16_t v17 = pthread_self();
    if (pthread_equal(v15, v17))
    {
      sub_1B63BADF0();
      sub_1B6A78B50((uint64_t)v16, a3, a4, a5, a6, a7, a8, a9, a10);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v21 = v16;
      sub_1B6A8F3FC(v14, v21, a3, a4, a5, a6, a7, a8, a9, a10);
    }
    swift_release();
  }
  else
  {
    uint64_t v18 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    float v19 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v20 = a2;
    objc_msgSend(v19, sel_lock);
    if (*(void *)(a1 + v13))
    {
      id v20 = v20;
      sub_1B69DBA18(a1, v20, a3, a4, a5, a6, a7, a8, a9, a10);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6A78B50((uint64_t)v20, a3, a4, a5, a6, a7, a8, a9, a10);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v18), sel_unlock, *(_OWORD *)&a4, *(_OWORD *)&a5, *(_OWORD *)&a6, *(_OWORD *)&a7, *(_OWORD *)&a8, *(_OWORD *)&a9, *(_OWORD *)&a10);
  }
}

void sub_1B69DBC00(uint64_t a1, void *a2, __n128 a3)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    uint64_t v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(void *)(*(void *)&v8[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      MEMORY[0x1F4188790](v11, v12);
      uint64_t v13 = *(void **)(v10 + 176);
      swift_retain();
      swift_retain();
      sub_1B636E6E4((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1F0F851A8, v13, (void (*)(uint64_t))sub_1B69E8E5C);
      swift_release();
      swift_release();
      sub_1B69E21FC(a1);
    }
    else
    {
      int8x16_t v17 = v8;
      sub_1B6A8F514(v6, v17);
    }
    swift_release();
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    float32x4_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      id v16 = v16;
      sub_1B69DBC00(a1, v16, a3);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v18 = *(void *)(*(void *)&v16[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      MEMORY[0x1F4188790](v19, v20);
      id v21 = *(void **)(v18 + 176);
      swift_retain();
      swift_retain();
      sub_1B636E6E4((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1F0F851A8, v21, (void (*)(uint64_t))sub_1B69E8E5C);
      swift_release();
      swift_release();
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v14), sel_unlock, a3.n128_u64[0]);
  }
}

uint64_t sub_1B69DBED8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    swift_retain_n();
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v8, v9))
    {
      sub_1B63BADF0();
      sub_1B69E1754(a2, a3);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      sub_1B6A8F6AC(v7, a2, a3);
    }
    swift_release_n();
    swift_release();
  }
  else
  {
    uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    objc_msgSend(v11, sel_lock);
    if (*(void *)(a1 + v6))
    {
      swift_retain();
      sub_1B69DBED8(a1, a2, a3);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B69E1754(a2, a3);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v10), sel_unlock);
    swift_release_n();
  }
  return swift_release();
}

void sub_1B69DC06C(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    uint64_t v7 = a2;
    swift_retain();
    uint64_t v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      sub_1B639D66C();
      if (v7[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4]) {
        unint64_t v9 = 0x200000000;
      }
      else {
        unint64_t v9 = *(unsigned int *)&v7[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)(*(_DWORD *)&v7[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] == 0) << 33);
      }
      sub_1B6A98A14(v9);
      swift_release();
      sub_1B69E21FC(a1);
    }
    else
    {
      uint64_t v13 = v7;
      sub_1B6A8F7A0(v5, v13);
    }
    swift_release();
  }
  else
  {
    uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v12 = a2;
    objc_msgSend(v11, sel_lock);
    if (*(void *)(a1 + v4))
    {
      uint64_t v12 = v12;
      sub_1B69DC06C(a1, v12);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B639D66C();
      if (v12[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4]) {
        unint64_t v14 = 0x200000000;
      }
      else {
        unint64_t v14 = *(unsigned int *)&v12[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)(*(_DWORD *)&v12[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] == 0) << 33);
      }
      sub_1B6A98A14(v14);
      swift_release();
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v10), sel_unlock);
  }
}

uint64_t sub_1B69DC250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v12)
  {
    id v16 = *(_opaque_pthread_t **)(v12 + 144);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    int8x16_t v17 = pthread_self();
    if (pthread_equal(v16, v17))
    {
      sub_1B63BADF0();
      sub_1B6B63C00(a2, a3, a4, a5, a6, a7, a8);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B6A8F8B0(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v18 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v19 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    objc_msgSend(v19, sel_lock);
    if (*(void *)(a1 + v11))
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B69DC250(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B63C00(a2, a3, a4, a5, a6, a7, a8);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v18), sel_unlock);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  return swift_release_n();
}

uint64_t sub_1B69DC480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), uint64_t a9)
{
  uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v13)
  {
    id v16 = *(_opaque_pthread_t **)(v13 + 144);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    int8x16_t v17 = pthread_self();
    if (pthread_equal(v16, v17))
    {
      sub_1B63BADF0();
      sub_1B6B63D3C(a2, a3, a4, a5, a6, a7, a8, a9);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B6A8F9DC(v13, a2, a3, a4, a5, a6, a7, a8, a9);
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v20 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v21 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    objc_msgSend(v21, sel_lock);
    if (*(void *)(a1 + v12))
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B69DC480(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B63D3C(a2, a3, a4, a5, a6, a7, a8, a9);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v20), sel_unlock);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  return swift_release_n();
}

void sub_1B69DC6D0(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v9)
  {
    uint64_t v10 = *(_opaque_pthread_t **)(v9 + 144);
    swift_unknownObjectRetain_n();
    id v11 = a2;
    swift_retain();
    id v12 = v11;
    uint64_t v13 = pthread_self();
    if (pthread_equal(v10, v13))
    {
      sub_1B63BADF0();
      sub_1B6B5F4D0((uint64_t)v12, a3, a4);
      sub_1B69E21FC(a1);
      swift_unknownObjectRelease();
    }
    else
    {
      id v17 = v12;
      swift_unknownObjectRetain();
      sub_1B6A8FB0C(v9, v17, a3, a4);
      swift_unknownObjectRelease();
    }
    swift_release();
  }
  else
  {
    uint64_t v18 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    unint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_unknownObjectRetain_n();
    id v15 = a2;
    objc_msgSend(v14, sel_lock);
    if (*(void *)(a1 + v8))
    {
      id v16 = v15;
      swift_unknownObjectRetain();
      sub_1B69DC6D0(a1, v16, a3, a4);
      objc_msgSend(*(id *)(a1 + v18), sel_unlock);
      swift_unknownObjectRelease();
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B5F4D0((uint64_t)v15, a3, a4);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v18), sel_unlock);
      swift_unknownObjectRelease();
    }
  }
  swift_unknownObjectRelease_n();
}

void sub_1B69DC8FC(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    uint64_t v9 = a2;
    swift_retain();
    uint64_t v10 = pthread_self();
    if (pthread_equal(v8, v10))
    {
      sub_1B63BADF0();
      unint64_t v11 = sub_1B6B5BB30();
      if (v12)
      {
        sub_1B6D14B94((a3 & 1) == 0, v11, v12);
      }
      else
      {
        char v17 = a3 & 1;
        v9[OBJC_IVAR____TtC3VFX9VFXEffect__enabled] = v17;
        if (v9[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] != 1)
        {
          unint64_t v18 = *(unsigned int *)&v9[OBJC_IVAR____TtC3VFX9VFXEffect_effectID];
          sub_1B639D66C();
          uint64_t v19 = swift_retain();
          sub_1B69DCB84(v19, v17, v19, v18);
          swift_release();
        }
      }
      sub_1B69E21FC(a1);
    }
    else
    {
      id v16 = v9;
      sub_1B6A8FC68(v7, v16, a3 & 1);
    }
    swift_release();
  }
  else
  {
    uint64_t v13 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    unint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v15 = a2;
    objc_msgSend(v14, sel_lock);
    if (*(void *)(a1 + v6))
    {
      id v15 = v15;
      sub_1B69DC8FC(a1, v15, a3 & 1);
    }
    else
    {
      sub_1B63BADF0();
      unint64_t v20 = sub_1B6B5BB30();
      if (v21)
      {
        sub_1B6D14B94((a3 & 1) == 0, v20, v21);
      }
      else
      {
        char v22 = a3 & 1;
        v15[OBJC_IVAR____TtC3VFX9VFXEffect__enabled] = v22;
        if (v15[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] != 1)
        {
          unint64_t v23 = *(unsigned int *)&v15[OBJC_IVAR____TtC3VFX9VFXEffect_effectID];
          sub_1B639D66C();
          uint64_t v24 = swift_retain();
          sub_1B69DCB84(v24, v22, v24, v23);
          swift_release();
        }
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v13), sel_unlock);
  }
}

uint64_t sub_1B69DCB84(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v9)
  {
    uint64_t v10 = *(_opaque_pthread_t **)(v9 + 144);
    swift_retain_n();
    swift_retain();
    unint64_t v11 = pthread_self();
    if (pthread_equal(v10, v11))
    {
      sub_1B63BADF0();
      sub_1B6B63E74(a2 & 1, a3, a4);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      sub_1B6A8FDCC(v9, a2 & 1, a3, a4);
    }
    swift_release_n();
    swift_release();
  }
  else
  {
    uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    objc_msgSend(v13, sel_lock);
    if (*(void *)(a1 + v8))
    {
      swift_retain();
      sub_1B69DCB84(a1, a2 & 1, a3, a4);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B63E74(a2 & 1, a3, a4);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v12), sel_unlock);
    swift_release_n();
  }
  return swift_release();
}

void sub_1B69DCD2C(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    uint64_t v7 = a2;
    swift_retain();
    uint64_t v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      sub_1B639D66C();
      sub_1B67CA2E4(*(unsigned int *)&v7[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)v7[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] << 32), *(void *)&v7[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity], v7[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity + 8], v7[OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned]);
      swift_release();
      sub_1B69E21FC(a1);
    }
    else
    {
      uint64_t v12 = v7;
      sub_1B6A8FEC8(v5, v12);
    }
    swift_release();
  }
  else
  {
    uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    unint64_t v11 = a2;
    objc_msgSend(v10, sel_lock);
    if (*(void *)(a1 + v4))
    {
      unint64_t v11 = v11;
      sub_1B69DCD2C(a1, v11);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B639D66C();
      sub_1B67CA2E4(*(unsigned int *)&v11[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)v11[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] << 32), *(void *)&v11[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity], v11[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity + 8], v11[OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned]);
      swift_release();
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v9), sel_unlock);
  }
}

uint64_t sub_1B69DCF48(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v10)
  {
    unint64_t v11 = *(_opaque_pthread_t **)(v10 + 144);
    id v12 = a2;
    id v13 = a3;
    swift_retain_n();
    swift_unknownObjectRetain_n();
    id v14 = v12;
    id v15 = v13;
    swift_retain();
    id v16 = pthread_self();
    if (pthread_equal(v11, v16))
    {
      sub_1B63BADF0();
      sub_1B6CC9870((uint64_t)v14, (uint64_t)v15, a4, a5);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v23 = v14;
      id v24 = v15;
      swift_retain();
      swift_unknownObjectRetain();
      sub_1B6A8FFF0(v10, v23, v24, a4, a5);
    }
    swift_release();
  }
  else
  {
    uint64_t v26 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    char v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v18 = a2;
    id v19 = a3;
    swift_retain_n();
    swift_unknownObjectRetain_n();
    id v20 = v18;
    id v21 = v19;
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v9))
    {
      id v20 = v20;
      id v22 = v21;
      swift_retain();
      swift_unknownObjectRetain();
      sub_1B69DCF48(a1, v20, v22, a4, a5);
      objc_msgSend(*(id *)(a1 + v26), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6CC9870((uint64_t)v20, (uint64_t)v21, a4, a5);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v26), sel_unlock);
    }
  }

  swift_unknownObjectRelease_n();
  return swift_release_n();
}

void sub_1B69DD1E4(uint64_t a1, void *a2)
{
}

void sub_1B69DD238(uint64_t a1, void *a2, void (*a3)(uint64_t, id), void (*a4)(void), void (*a5)(uint64_t, id))
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v8)
  {
    uint64_t v10 = *(_opaque_pthread_t **)(v8 + 144);
    unint64_t v11 = a2;
    id v12 = a2;
    swift_retain();
    id v13 = pthread_self();
    if (pthread_equal(v10, v13))
    {
      sub_1B63BADF0();
      a4();
      sub_1B69E21FC(a1);
    }
    else
    {
      id v19 = v12;
      a3(v8, v19);
    }
    swift_release();
  }
  else
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v17 = a2;
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v7))
    {
      id v18 = v17;
      a5(a1, v18);
      objc_msgSend(*(id *)(a1 + v15), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      a4();
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v15), sel_unlock);
    }
    unint64_t v11 = a2;
  }
}

uint64_t sub_1B69DD3FC(uint64_t a1, void *a2, void *a3, void *a4, double a5)
{
  uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v10)
  {
    unint64_t v11 = *(_opaque_pthread_t **)(v10 + 144);
    id v12 = a2;
    id v13 = a3;
    swift_unknownObjectRetain_n();
    id v14 = v12;
    id v15 = v13;
    swift_retain();
    id v16 = pthread_self();
    if (pthread_equal(v11, v16))
    {
      sub_1B63BADF0();
      sub_1B6CCA278((uint64_t)v14, (uint64_t)v15, a4, a5);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v26 = v14;
      id v27 = v15;
      swift_unknownObjectRetain();
      sub_1B6A90228(v10, v26, v27, a4, a5);
    }
    swift_release();
  }
  else
  {
    uint64_t v29 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v18 = a2;
    id v19 = a3;
    id v20 = v18;
    id v21 = v19;
    swift_unknownObjectRetain_n();
    id v22 = v20;
    id v23 = v21;
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v9))
    {
      id v24 = v22;
      id v25 = v23;
      swift_unknownObjectRetain();
      sub_1B69DD3FC(a1, v24, v25, a4, a5);
      objc_msgSend(*(id *)(a1 + v29), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6CCA278((uint64_t)v22, (uint64_t)v23, a4, a5);
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v29), sel_unlock);
    }
  }

  return swift_unknownObjectRelease_n();
}

void sub_1B69DD674(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    uint64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    id v9 = a3;
    swift_retain();
    uint64_t v10 = pthread_self();
    if (pthread_equal(v8, v10))
    {
      sub_1B63BADF0();
      sub_1B6D62284(a2 & 1, (uint64_t)v9);
      sub_1B69E21FC(a1);
    }
    else
    {
      id v14 = v9;
      sub_1B6A9033C(v7, a2 & 1, v14);
    }
    swift_release();
  }
  else
  {
    uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v12 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v13 = a3;
    objc_msgSend(v12, sel_lock);
    if (*(void *)(a1 + v6))
    {
      id v13 = v13;
      sub_1B69DD674(a1, a2 & 1, v13);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6D62284(a2 & 1, (uint64_t)v13);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v11), sel_unlock);
  }
}

uint64_t sub_1B69DD80C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v13)
  {
    id v14 = *(_opaque_pthread_t **)(v13 + 144);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    id v15 = pthread_self();
    if (pthread_equal(v14, v15))
    {
      sub_1B63BADF0();
      sub_1B6659358(a3, a4, a6);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      swift_retain();
      sub_1B6A9042C(v13, a3, a4, a6);
    }
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v16 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    swift_retain_n();
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v12))
    {
      swift_retain();
      swift_retain();
      sub_1B69DD80C(a1, a2, a3, a4, a5);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6659358(a3, a4, a6);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v16), sel_unlock);
    swift_release();
  }
  swift_release();
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_1B69DDA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v15 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v15)
  {
    uint64_t v16 = *(_opaque_pthread_t **)(v15 + 144);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    id v17 = pthread_self();
    if (pthread_equal(v16, v17))
    {
      sub_1B63BADF0();
      uint64_t v18 = sub_1B6C0A538(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
      if (v19)
      {
        *(_OWORD *)a8 = 0u;
        *(_OWORD *)(a8 + 16) = 0u;
      }
      else
      {
        uint64_t v20 = v18;
        swift_bridgeObjectRetain();
        sub_1B6BF96F4(v20, a2, a6, a7, v29);
        sub_1B6B630D4((uint64_t)v29, (void *)a8);
        sub_1B62B32CC((uint64_t)v29);
      }
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6A90544(v15, a2, a3, a4, a5 & 0xFFFFFFFFFFLL, a6, a7, a8);
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v21 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v22 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    objc_msgSend(v22, sel_lock);
    if (*(void *)(a1 + v14))
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B69DDA0C(a1, a2, a3, a4, a5 & 0xFFFFFFFFFFLL, a6, a7);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v23 = sub_1B6C0A538(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
      if (v24)
      {
        *(_OWORD *)a8 = 0u;
        *(_OWORD *)(a8 + 16) = 0u;
      }
      else
      {
        uint64_t v25 = v23;
        swift_bridgeObjectRetain();
        sub_1B6BF96F4(v25, a2, a6, a7, v29);
        sub_1B6B630D4((uint64_t)v29, (void *)a8);
        sub_1B62B32CC((uint64_t)v29);
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v21), sel_unlock, a6);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_bridgeObjectRelease_n();
}

void sub_1B69DDD00(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v11)
  {
    uint64_t v12 = *(_opaque_pthread_t **)(v11 + 144);
    id v13 = a2;
    swift_bridgeObjectRetain_n();
    id v14 = v13;
    swift_retain();
    uint64_t v15 = pthread_self();
    if (pthread_equal(v12, v15))
    {
      sub_1B63BADF0();
      sub_1B688576C((uint64_t)v14, a3, a4, a5, v16);
      sub_1B69E21FC(a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v20 = v14;
      swift_bridgeObjectRetain();
      sub_1B6A906BC(v11, v20, a3, a4, a5);
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  else
  {
    uint64_t v22 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v18 = a2;
    swift_bridgeObjectRetain_n();
    id v19 = v18;
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v10))
    {
      id v19 = v19;
      swift_bridgeObjectRetain();
      sub_1B69DDD00(a1, v19, a3, a4);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B688576C((uint64_t)v19, a3, a4, a5, v21);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v22), sel_unlock);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1B69DDF00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v13)
  {
    id v14 = *(_opaque_pthread_t **)(v13 + 144);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    uint64_t v15 = pthread_self();
    if (pthread_equal(v14, v15))
    {
      sub_1B63BADF0();
      sub_1B6B63A78(a2, a3, a4, a5, a6);
      sub_1B69E21FC(a1);
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B6A907BC(v13, a2, a3, a4, a5, a6);
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v16 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v12))
    {
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B69DDF00(a1, a2, a3, a4, a5);
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B63A78(a2, a3, a4, a5, a6);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v16), sel_unlock);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  return swift_release_n();
}

uint64_t sub_1B69DE104(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = sub_1B69E5ABC(a1, a2, a3);

  return v4;
}

uint64_t sub_1B69DE144(uint64_t result)
{
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v2 + 12 * (int)result + 8) == HIDWORD(result))
    {
      uint64_t v3 = (int *)(v2 + 12 * (int)result);
      uint64_t v4 = *((__int16 *)v3 + 2);
      uint64_t v5 = *(void *)(*(void *)(v1 + 136) + 8 * *v3 + 32);
      if (*(void *)(v5 + 232) <= v4 && *(void *)(v5 + 240) > v4)
      {
        uint64_t v7 = **(void **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        uint64_t v8 = *(os_unfair_lock_s **)(v5 + 344);
        swift_retain();
        os_unfair_lock_lock(v8);
        ecs_stack_allocator_push_snapshot(*(void *)(v7 + 32));
        if (*(void *)(v5 + 256) > v4 || *(void *)(v5 + 232) <= v4)
        {
          uint64_t v11 = 0;
          memset(v10, 0, sizeof(v10));
          char v12 = 5;
          swift_retain();
          sub_1B63B2A48(v7 + 104, (uint64_t)v10, v4, 0, v5, v7);
          sub_1B6391400((uint64_t)v10);
        }
        else
        {
          swift_retain();
        }
        sub_1B634507C((char *)v5);
        swift_release();
        ecs_stack_allocator_pop_snapshot(*(void *)(v7 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B69DE2AC(uint64_t a1)
{
  return sub_1B62E2AB4(a1, (uint64_t (*)(void))sub_1B68C5ABC);
}

uint64_t sub_1B69DE2C4(uint64_t a1)
{
  return a1 >> 48;
}

uint64_t sub_1B69DE2CC(uint64_t (*a1)(long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = MEMORY[0x1E4FBC860];
  uint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v8 = a3 + 32;
    uint64_t v9 = MEMORY[0x1E4FBC860];
    do
    {
      sub_1B62C1550(v8, (uint64_t)v15);
      uint64_t v4 = a2;
      char v10 = a1(v15);
      if (v3)
      {
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
        swift_release();
        swift_bridgeObjectRelease();
        return v4;
      }
      if (v10)
      {
        sub_1B62C15C4(v15, (uint64_t)v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1B6C3C4D0(0, *(void *)(v9 + 16) + 1, 1);
        }
        uint64_t v9 = v16;
        unint64_t v12 = *(void *)(v16 + 16);
        unint64_t v11 = *(void *)(v16 + 24);
        if (v12 >= v11 >> 1)
        {
          sub_1B6C3C4D0(v11 > 1, v12 + 1, 1);
          uint64_t v9 = v16;
        }
        *(void *)(v9 + 16) = v12 + 1;
        sub_1B62C15C4(v14, v9 + 40 * v12 + 32);
      }
      else
      {
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
      }
      v8 += 40;
      --v5;
    }
    while (v5);
    uint64_t v4 = v16;
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B69DE438(unint64_t a1)
{
  unint64_t v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF) {
    return 1;
  }
  uint64_t result = 1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == v3) {
      return *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32) + 120);
    }
  }
  return result;
}

unint64_t sub_1B69DE4C4(uint64_t a1)
{
  if (a1 == 0xFFFFFFFFLL)
  {
LABEL_2:
    uint64_t v2 = 0;
    unsigned __int8 v3 = 1;
    return v2 | ((unint64_t)v3 << 32);
  }
  uint64_t v2 = 0;
  unsigned __int8 v3 = 1;
  if (a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      uint64_t v6 = *(void *)(*(void *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32);
      uint64_t v2 = *(unsigned int *)(v6 + 28);
      unsigned __int8 v3 = *(unsigned char *)(v6 + 32);
      return v2 | ((unint64_t)v3 << 32);
    }
    goto LABEL_2;
  }
  return v2 | ((unint64_t)v3 << 32);
}

uint64_t sub_1B69DE568(unint64_t a1)
{
  unint64_t v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF) {
    return 0;
  }
  uint64_t result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == v3) {
      return *(void *)(v5 + 12 * (int)a1);
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1B69DE61C(unint64_t a1)
{
  unint64_t v3 = HIDWORD(a1);
  if ((sub_1B631EA84(a1) & 1) == 0)
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    return 0xD000000000000010;
  }
  int v23 = v3;
  char v24 = (void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  uint64_t v4 = *(void *)(*(void *)(v1 + 80)
                 + 8
                 * *(__int16 *)(*(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)a1 + 6)
                 + 32);
  swift_retain();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E328C8();
  sub_1B6E31948();
  sub_1B681F698();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B69DE4C4(a1);
  sub_1B6E32B18();
  sub_1B6E31948();
  sub_1B62EB864(a1);
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B69DE438(a1);
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B62EC0CC((uint64_t)&type metadata for Tombstone, (uint64_t)&off_1F0FAA160, a1);
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  type metadata accessor for EntityClass();
  sub_1B6E32B18();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  uint64_t v5 = *(void *)(*(void *)(v4 + 16) + 32);
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6) {
    goto LABEL_27;
  }
  uint64_t v7 = v5 + 32;
  BOOL v9 = a1 == -1 && v23 == 0;
  swift_retain();
  uint64_t v10 = 0;
  do
  {
    uint64_t v12 = *(void *)(v7 + 16 * v10);
    if (v9)
    {
LABEL_10:
      uint64_t v11 = 0;
      goto LABEL_11;
    }
    uint64_t v11 = 0;
    if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001 && (int)a1 < v24[1])
    {
      uint64_t v13 = *v24 + 12 * (int)a1;
      uint64_t v14 = *(__int16 *)(v13 + 4);
      if (v23 != -1 && *(_DWORD *)(v13 + 8) != v23) {
        goto LABEL_10;
      }
      uint64_t v15 = *(void *)(*(void *)(v1 + 136) + 8 * *(int *)(*v24 + 12 * (int)a1) + 32);
      uint64_t v16 = *(void *)(v15 + 48);
      uint64_t v17 = *(void *)(v16 + 16);
      if (!v17) {
        goto LABEL_10;
      }
      uint64_t v18 = v16 + 56;
      while (*(void *)(v18 - 24) != v12)
      {
        v18 += 40;
        if (!--v17) {
          goto LABEL_10;
        }
      }
      uint64_t v21 = v18 - 8;
      uint64_t v20 = *(void *)(v18 - 8);
      uint64_t v19 = *(void *)(v21 + 8);
      if (v20 <= 1) {
        uint64_t v20 = 1;
      }
      uint64_t v11 = *(void *)(v15 + 128) + v19 + v20 * v14;
    }
LABEL_11:
    ++v10;
    sub_1B6B3EA94(v11, 0, v12);
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
  }
  while (v10 != v6);
  swift_release();
LABEL_27:
  swift_release();
  return 0;
}

uint64_t sub_1B69DEB88(uint64_t result, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v3;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v6 + 12 * (int)result + 8) == HIDWORD(result))
    {
      uint64_t v7 = (int *)(v6 + 12 * (int)result);
      uint64_t v8 = *((__int16 *)v7 + 2);
      uint64_t v9 = *(void *)(*(void *)(v2 + 136) + 8 * *v7 + 32);
      if (*(void *)(v9 + 232) <= v8 && *(void *)(v9 + 240) > v8)
      {
        uint64_t v11 = **(void **)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        uint64_t v12 = *(os_unfair_lock_s **)(v9 + 344);
        swift_retain();
        os_unfair_lock_lock(v12);
        ecs_stack_allocator_push_snapshot(*(void *)(v11 + 32));
        swift_retain();
        a2(v11, v9, v8);
        swift_release();
        if (!v4) {
          ecs_stack_allocator_pop_snapshot(*(void *)(v11 + 32));
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

void sub_1B69DECC8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
  {
    swift_retain();
    sub_1B6A8CC84(a1, a2);
  }
  else
  {
    char v5 = *(unsigned char *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated);
    id v6 = *(id *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated + 8);
    objc_msgSend(v6, sel_lock);
    objc_msgSend(v6, sel_unlock);

    if (v5) {
      return;
    }
    uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_asyncQueue);
    uint64_t v8 = (void *)swift_allocObject();
    _OWORD v8[2] = v2;
    _OWORD v8[3] = a1;
    v8[4] = a2;
    id v9 = v7;
    swift_retain();
    swift_retain();
    sub_1B6AB324C((uint64_t)sub_1B69E8F7C, (uint64_t)v8);
  }

  swift_release();
}

id sub_1B69DEDF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v2)
  {
    swift_retain();
    os_unfair_recursive_lock_lock_with_options();
    if ((*(unsigned char *)(v2 + 120) & 1) == 0)
    {
      *(unsigned char *)(v2 + 120) = 1;
      os_unfair_recursive_lock_unlock();
      sub_1B6378988();
      os_unfair_recursive_lock_lock_with_options();
    }
    os_unfair_recursive_lock_unlock();
    swift_release();
  }
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated);
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated + 8);
  objc_msgSend(v4, sel_lock);
  *uint64_t v3 = 1;

  return objc_msgSend(v4, sel_unlock);
}

uint64_t sub_1B69DEEC4(uint64_t a1, char a2, double a3)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_currentState;
  int v8 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_currentState);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_currentState) = 1;
  if (v8 != 1)
  {
    id v9 = *(void (**)(uint64_t))(v3 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
    if (v9)
    {
      swift_retain();
      v9(v3);
      sub_1B62C6A50((uint64_t)v9);
    }
  }
  uint64_t v10 = v3 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  char v11 = *(unsigned char *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 80);
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 88);
  char v13 = *(unsigned char *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 96);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 80) = 1;
  if (a2) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = a1;
  }
  *(void *)(v10 + 88) = v14;
  *(unsigned char *)(v10 + 96) = 1;
  sub_1B6378470(a3);
  swift_retain();
  sub_1B6379B0C(3);
  uint64_t result = swift_release();
  *(unsigned char *)(v10 + 80) = v11;
  *(void *)(v10 + 88) = v12;
  *(unsigned char *)(v10 + 96) = v13;
  int v16 = *(unsigned __int8 *)(v3 + v7);
  *(unsigned char *)(v3 + v7) = 4;
  if (v16 != 4)
  {
    uint64_t v17 = *(void (**)(uint64_t))(v3 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
    if (v17)
    {
      swift_retain();
      v17(v3);
      return sub_1B62C6A50((uint64_t)v17);
    }
  }
  return result;
}

uint64_t sub_1B69DF04C(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = *(void *)(*(void *)v1 + 16);
    if (v2 >= result) {
      uint64_t v3 = result;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v2) {
      uint64_t v4 = result;
    }
    else {
      uint64_t v4 = 0;
    }
    if (result <= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = v3;
    }
    return sub_1B68E9030(0, v5);
  }
  return result;
}

unint64_t sub_1B69DF07C(unint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v4 = result;
  if (result != 0xFFFFFFFF && (uint64_t)(result << 32) >= (uint64_t)0xFFFFFFFF00000001)
  {
    uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    int v6 = result;
    if ((int)result < *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
      && (HIDWORD(result) == -1 || *(_DWORD *)(*v5 + 12 * (int)result + 8) == HIDWORD(result)))
    {
      if (sub_1B631EA84(result))
      {
        if (*(void *)(*(void *)(a2 + 24) + 16))
        {
          uint64_t result = sub_1B62BE38C(v4);
          if (v7) {
            return result;
          }
          uint64_t v8 = a2;
        }
        else
        {
          uint64_t v8 = a2;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v47[0] = *(void *)(v8 + 24);
        *(void *)(v8 + 24) = 0x8000000000000000;
        sub_1B67E739C(0xFFFFFFFFLL, v4, isUniquelyReferenced_nonNull_native);
        *(void *)(v8 + 24) = v47[0];
        swift_bridgeObjectRelease();
        type metadata accessor for CollectReferencesContext();
        uint64_t v12 = swift_allocObject();
        uint64_t v13 = MEMORY[0x1E4FBC860];
        *(void *)(v12 + 16) = 1;
        *(void *)(v12 + 24) = v13;
        uint64_t v14 = sub_1B6BFADC0(v4);
        uint64_t v44 = *(void *)(v14 + 16);
        if (v44)
        {
          uint64_t v15 = 0;
          uint64_t v43 = v14 + 32;
          do
          {
            long long v30 = *(_OWORD *)(v43 + 16 * v15);
            float32x4_t v31 = (int *)(*v5 + 12 * v6);
            uint64_t v32 = *(void *)(*(void *)(v3 + 136) + 8 * *v31 + 32);
            uint64_t v33 = *(void *)(v32 + 48);
            uint64_t v34 = v33 + 32;
            uint64_t v35 = *(void *)(v43 + 16 * v15);
            if (*(void *)(v33 + 32) == v35)
            {
              uint64_t v16 = 0;
            }
            else
            {
              uint64_t v16 = 0;
              uint64_t v36 = *(void *)(v33 + 16);
              uint64_t v37 = v33 + 72;
              uint64_t v38 = v36 - 1;
              do
              {
                uint64_t v39 = *(void *)(v37 + v16);
                v16 += 40;
                --v38;
              }
              while (v39 != v35);
            }
            ++v15;
            uint64_t v17 = *((__int16 *)v31 + 2);
            uint64_t v18 = *((void *)&v30 + 1);
            uint64_t v21 = (uint64_t *)(v34 + v16 + 16);
            uint64_t v19 = *v21;
            uint64_t v20 = v21[1];
            if (*v21 <= 1) {
              uint64_t v19 = 1;
            }
            uint64_t v22 = *(void *)(v32 + 128) + v20 + v19 * v17;
            *(_OWORD *)&v46[3] = v30;
            int v23 = sub_1B62C12C4(v46);
            uint64_t v24 = *(void *)(v18 + 8);
            sub_1B62C5E18(v22, v35, (uint64_t)v23);
            sub_1B62C15C4((long long *)v46, (uint64_t)v47);
            uint64_t v25 = v48;
            uint64_t v26 = v49;
            sub_1B62C550C((uint64_t)v47, v48);
            id v27 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v24 + 96);
            uint64_t v28 = *(void *)(v26 + 8);
            uint64_t v29 = swift_retain();
            v27(v29, &off_1F0F91E68, v25, v28);
            swift_release();
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v47);
          }
          while (v15 != v44);
        }
        swift_bridgeObjectRelease();
        uint64_t v40 = *(void *)(v12 + 24);
        uint64_t v41 = *(void *)(v40 + 16);
        if (v41)
        {
          swift_bridgeObjectRetain();
          uint64_t v42 = v40 + 36;
          do
          {
            sub_1B69DF07C(*(void *)(v42 - 4), a2);
            v42 += 8;
            --v41;
          }
          while (v41);
          swift_release();
          return swift_bridgeObjectRelease();
        }
        else
        {
          return swift_release();
        }
      }
      else
      {
        uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
        swift_retain();
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        v47[1] = 0x80000001B6F41C90;
        sub_1B681F698();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        uint64_t v10 = sub_1B6E32148();
        v47[0] = 0;
        (*(void (**)(uint64_t, void *, unint64_t, unint64_t))(*(void *)v9 + 88))(v10, v47, 0xD00000000000002FLL, 0x80000001B6F41C90);
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1B69DF420(uint64_t a1, uint64_t a2)
{
  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    return sub_1B68E6AE4(*(_DWORD *)(v3 + 12 * (int)a1), *(__int16 *)(v3 + 12 * (int)a1 + 4), *(__int16 *)(v3 + 12 * (int)a1 + 6), a2);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B69DF49C()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69DF4D4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  sub_1B6299DB4(&qword_1E9DD39A8, (void (*)(uint64_t))type metadata accessor for RuntimeThread);
  return v1;
}

BOOL sub_1B69DF53C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 6) == *(unsigned __int16 *)(a2 + 6)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t sub_1B69DF580(char a1)
{
  uint64_t v2 = v1;
  sub_1B69DF694(a1);
  unint64_t v4 = (uint64_t *)(v1 + 72);
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v4;
    if (isUniquelyReferenced_nonNull_native)
    {
      sub_1B69E2380(0, *(void *)(v6 + 16));
      goto LABEL_7;
    }
    *unint64_t v4 = sub_1B63577E0(0, *(void *)(v6 + 24) >> 1);
  }
  else
  {
    *unint64_t v4 = MEMORY[0x1E4FBC860];
  }
  swift_release();
LABEL_7:
  uint64_t v7 = *(void *)(v2 + 80);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_retain();
    swift_retain();
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)(v7 + 8 * i + 32)) {
        swift_release();
      }
    }
    swift_release();
    swift_release();
  }
  return sub_1B69DF874(a1 & 1, (uint64_t (*)(void))sub_1B6C3C414, sub_1B69E8D24);
}

uint64_t sub_1B69DF694(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 136);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_retain();
    swift_retain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = v4 + 8 * i;
      uint64_t v8 = *(void **)(v7 + 32);
      if (v8)
      {
        vfx_swift_deimmortalize(*(void *)(v7 + 32));
        vfx_swift_release_dealloc(v8);
      }
    }
    swift_release();
    swift_release();
  }
  sub_1B69DF874(a1 & 1, (uint64_t (*)(void))sub_1B6C3C3D8, sub_1B69E8DC0);
  uint64_t v9 = (uint64_t *)(v1 + 96);
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v9;
    if (isUniquelyReferenced_nonNull_native)
    {
      sub_1B68E8F08(0, *(void *)(v12 + 16));
      goto LABEL_13;
    }
    *uint64_t v9 = (uint64_t)sub_1B6785748(0, *(void *)(v12 + 24) >> 1);
  }
  else
  {
    *uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v15 = *(void *)(v2 + 152);
  uint64_t v13 = (char **)(v2 + 152);
  uint64_t v14 = (char *)v15;
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v17 = 32;
    do
    {
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      _opaque_pthread_t *v13 = v14;
      if ((v18 & 1) == 0)
      {
        uint64_t v14 = sub_1B6C16680((uint64_t)v14);
        _opaque_pthread_t *v13 = v14;
      }
      vfx_deallocate_memory_entry((uint64_t)&v14[v17]);
      uint64_t v14 = *v13;
      v17 += 24;
      --v16;
    }
    while (v16);
  }
  if (a1)
  {
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v13;
    if (v19) {
      return sub_1B68E9030(0, *((void *)v20 + 2));
    }
    _opaque_pthread_t *v13 = (char *)sub_1B6785694(0, *((void *)v20 + 3) >> 1);
  }
  else
  {
    _opaque_pthread_t *v13 = v10;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69DF874(char a1, uint64_t (*a2)(void), void (*a3)(void))
{
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v3;
    if (isUniquelyReferenced_nonNull_native)
    {
      sub_1B69E24AC(0, *(void *)(v7 + 16), a2);
    }
    else
    {
      if (*(void *)(v7 + 24) >= 2uLL)
      {
        a3(0);
        uint64_t v9 = (void *)swift_allocObject();
        int64_t v10 = j__malloc_size(v9);
        uint64_t v11 = v10 - 32;
        if (v10 < 32) {
          uint64_t v11 = v10 - 25;
        }
        _OWORD v9[2] = 0;
        _OWORD v9[3] = 2 * (v11 >> 3);
      }
      else
      {
        uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
      }
      *uint64_t v3 = (uint64_t)v9;
      swift_release();
    }
    uint64_t v12 = v3 + 1;
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v12;
    if (v13) {
      return sub_1B69E2278(0, *(void *)(v14 + 16));
    }
    if (*(void *)(v14 + 24) >= 2uLL)
    {
      sub_1B631424C(0, (unint64_t *)&unk_1EB980D80, MEMORY[0x1E4FBC150], MEMORY[0x1E4FBBE00]);
      uint64_t v16 = (void *)swift_allocObject();
      int64_t v17 = j__malloc_size(v16);
      uint64_t v18 = v17 - 32;
      if (v17 < 32) {
        uint64_t v18 = v17 - 29;
      }
      _OWORD v16[2] = 0;
      v16[3] = 2 * (v18 >> 2);
    }
    else
    {
      uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    }
    *uint64_t v12 = (uint64_t)v16;
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    *uint64_t v3 = MEMORY[0x1E4FBC860];
    swift_release();
    v3[1] = v8;
  }

  return swift_release();
}

uint64_t sub_1B69DFA08()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v2)
  {
    *(unsigned char *)(v2 + 120) = 1;
    uint64_t v3 = *(void *)(v2 + 16);
    uint64_t v4 = *(void **)(v3 + 16);
    swift_retain();
    objc_msgSend(v4, sel_lock);
    *(unsigned char *)(v3 + 24) = 1;
    objc_msgSend(*(id *)(v3 + 16), sel_signal);
    objc_msgSend(*(id *)(v3 + 16), sel_unlock);
    swift_release();
  }
  if (qword_1EB97D5F0 != -1) {
    swift_once();
  }
  objc_msgSend((id)qword_1EB997960, sel_lock);
  if (qword_1EB97E3F8 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_1EB997A98;
  uint64_t v23 = qword_1EB997A98;
  uint64_t v6 = *(void *)(qword_1EB997A98 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v7 = 0;
    uint64_t v8 = 5;
    while (1)
    {
      sub_1B637FED4(v5 + v8 * 8 - 8, (uint64_t)v22, (uint64_t (*)(void))sub_1B629A550);
      uint64_t Strong = swift_weakLoadStrong();
      swift_release();
      sub_1B62E2DE0((uint64_t)v22, (uint64_t (*)(void))sub_1B629A550);
      if (!Strong) {
        break;
      }
      ++v7;
      ++v8;
      if (v6 == v7)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = *(void *)(v5 + 16);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v7 + 1;
    uint64_t v6 = v7;
    if (*(void *)(v5 + 16) - 1 != v7)
    {
      do
      {
        sub_1B637FED4(v5 + v8 * 8, (uint64_t)v22, (uint64_t (*)(void))sub_1B629A550);
        uint64_t v19 = swift_weakLoadStrong();
        swift_release();
        sub_1B62E2DE0((uint64_t)v22, (uint64_t (*)(void))sub_1B629A550);
        if (v19)
        {
          if (v10 != v6)
          {
            uint64_t v20 = (void *)v23;
            sub_1B637FED4(v23 + 8 * v6 + 32, (uint64_t)v22, (uint64_t (*)(void))sub_1B629A550);
            sub_1B637FED4((uint64_t)&v20[v8], (uint64_t)v21, (uint64_t (*)(void))sub_1B629A550);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v20 = sub_1B6C166BC((unint64_t)v20);
              uint64_t v23 = (uint64_t)v20;
            }
            sub_1B69E8CC0((uint64_t)v21, (uint64_t)&v20[v6 + 4]);
            sub_1B69E8CC0((uint64_t)v22, v23 + v8 * 8);
          }
          ++v6;
        }
        ++v10;
        uint64_t v5 = v23;
        ++v8;
      }
      while (v10 != *(void *)(v23 + 16));
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
  }
LABEL_14:
  sub_1B68E8DC4(v6, v10);
  qword_1EB997A98 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  objc_msgSend((id)qword_1EB997960, sel_unlock);
  sub_1B69DF580(0);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (v11) {
    MEMORY[0x1BA9B84C0](v11, -1, -1);
  }
  uint64_t v12 = (void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  if (v13)
  {
    uint64_t v14 = v12[1];
    if (v14)
    {
      uint64_t v15 = 8 * v14;
      do
      {
        v13 += 8;
        swift_release();
        v15 -= 8;
      }
      while (v15);
    }
  }
  swift_bridgeObjectRelease();
  if (*v12) {
    MEMORY[0x1BA9B84C0](*v12, -1, -1);
  }
  MEMORY[0x1BA9B84C0](*(void *)(v1 + 128), -1, -1);
  MEMORY[0x1BA9B84C0](*(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24), -1, -1);
  MEMORY[0x1BA9B84C0](*(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock + 24), -1, -1);
  MEMORY[0x1BA9B84C0](*(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_backgroundingSignalLock + 24), -1, -1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B677E124(v1 + 56);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v16 = v1 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID;
  uint64_t v17 = sub_1B6E31288();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  sub_1B62C6A50(*(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1B62E2DE0(v1 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig, (uint64_t (*)(void))type metadata accessor for ScriptingConfiguration);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B69DFFC4()
{
  sub_1B69DFA08();

  return swift_deallocClassInstance();
}

uint64_t sub_1B69E001C(char a1)
{
  uint64_t v2 = v1;
  if (*(void *)((char *)v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters)) {
    vfx_counters.add(_:_:)(*(_DWORD *)((char *)v1 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 36), 1);
  }
  sub_1B6B65E48();
  *(void *)((char *)v1 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount) = 0;
  if (a1)
  {
    sub_1B69DF580(1);
    ++*(_DWORD *)((char *)v1 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
    sub_1B63BA93C(0);
    *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex) = 0;
    if (*(void *)(v1[26] + 16))
    {
      swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = v1[26];
      v1[26] = 0x8000000000000000;
      sub_1B69E8F10();
      sub_1B6E32B78();
      v1[26] = v17;
      swift_bridgeObjectRelease();
    }
  }
  if ((a1 & 8) != 0)
  {
    if (v1[8])
    {
      swift_retain();
      uint64_t v4 = sub_1B6654C8C();
      type metadata accessor for SceneComponentStorage();
      swift_allocObject();
      uint64_t v5 = sub_1B6B39FF4((uint64_t)v4);
      swift_release();
      v2[22] = v5;
    }
    else
    {
      type metadata accessor for SceneComponentStorage();
      swift_allocObject();
      v1[22] = sub_1B63B0308();
    }
    swift_release();
  }
  if ((a1 & 2) != 0)
  {
    type metadata accessor for WorkerComponentStorage();
    uint64_t v6 = (void *)swift_allocObject();
    sub_1B62CEB80(MEMORY[0x1E4FBC860], 0, 256, 0, (uint64_t)(v6 + 2));
    v6[11] = 0;
    uint64_t v7 = swift_slowAlloc();
    v6[12] = v7;
    v6[13] = v7 + 4096;
    v6[14] = 4096;
    v2[21] = v6;
    swift_release();
  }
  if (qword_1EB97D7D0 != -1) {
    swift_once();
  }
  type metadata accessor for Scheduler();
  swift_allocObject();
  uint64_t v8 = sub_1B629A1D0();
  uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_scheduler;
  *(void *)((char *)v2 + OBJC_IVAR____TtC3VFX13EntityManager_scheduler) = v8;
  swift_release();
  *(void *)(*(void *)((char *)v2 + v9) + 24) = v2;
  uint64_t v10 = *(void *)((char *)v2 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(v10 + 48) = sub_1B629A0AC(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  *(void *)(v10 + 56) = sub_1B6299EF8(v11);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v13 = *(uint64_t **)((char *)v2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  if (v13)
  {
    uint64_t v14 = *(void *)((char *)v2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues + 8);
    if (v14)
    {
      uint64_t v15 = 8 * v14;
      do
      {
        uint64_t v16 = *v13;
        uint64_t result = *(void *)(*v13 + 88);
        if (*(void *)(result + 16))
        {
          swift_isUniquelyReferenced_nonNull_native();
          uint64_t v18 = *(void *)(v16 + 88);
          *(void *)(v16 + 88) = 0x8000000000000000;
          sub_1B6377948();
          sub_1B6E327E8();
          *(void *)(v16 + 88) = v18;
          uint64_t result = swift_bridgeObjectRelease();
        }
        ++v13;
        v15 -= 8;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t sub_1B69E0338(uint64_t result, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v6 + 12 * (int)result + 8) == HIDWORD(result))
    {
      uint64_t v7 = *(__int16 *)(v6 + 12 * (int)result + 4);
      swift_retain();
      sub_1B6B1BBCC(a2 & 1, v7, 0);
      swift_release();
      return sub_1B6C9CCF8(v5);
    }
  }
  return result;
}

uint64_t sub_1B69E0450(uint64_t result, char a2)
{
  uint64_t v4 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v5 + 12 * (int)result + 8) == HIDWORD(result))
    {
      uint64_t v6 = *(void *)(*(void *)(v2 + 136) + 8 * *(int *)(v5 + 12 * (int)result) + 32);
      uint64_t v7 = *(os_unfair_lock_s **)(v6 + 344);
      swift_retain();
      os_unfair_lock_lock(v7);
      sub_1B69E0338(v4, a2 & 1);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 344));
      return swift_release();
    }
  }
  return result;
}

BOOL sub_1B69E0544(void *a1, void *a2)
{
  sub_1B62C14BC(a2, a2[3]);
  uint64_t DynamicType = swift_getDynamicType();
  sub_1B62C14BC(a1, a1[3]);
  return DynamicType != swift_getDynamicType();
}

unint64_t sub_1B69E05B8(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(void *)(*(void *)result + 184);
  if (*(void *)(v5 + 16))
  {
    uint64_t result = sub_1B62C1A30(a2);
    if ((v8 & 1) != 0 && *(void *)(*(void *)(v5 + 56) + 8 * result) == a3)
    {
      uint64_t v9 = *(void *)(v4 + 16);
      unint64_t v10 = sub_1B62C1A30(*(void *)(v4 + 192));
      char v12 = v11;
      swift_retain();
      if (v12)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v9 + 16);
        *(void *)(v9 + 16) = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1B6AD49D8();
        }
        sub_1B6ACA64C(v10, v14);
        *(void *)(v9 + 16) = v14;
        swift_bridgeObjectRelease();
      }
      uint64_t v15 = *(unsigned int *)(v4 + 204);
      swift_retain();
      sub_1B68E9A78(v15, (uint64_t)a4, a4);
      swift_release();
      swift_release();
      uint64_t v16 = a4[10];
      char v17 = swift_isUniquelyReferenced_nonNull_native();
      a4[10] = v16;
      if ((v17 & 1) == 0) {
        uint64_t v16 = sub_1B6D671E0(v16);
      }
      *(void *)(v16 + 8 * (int)v15 + 32) = 0;
      uint64_t v18 = a4 + 11;
      uint64_t v19 = a4[11];
      a4[10] = v16;
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      a4[11] = v19;
      if ((v20 & 1) == 0)
      {
        sub_1B6397798(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = *v18;
      }
      unint64_t v21 = *(void *)(v19 + 16);
      unint64_t v22 = *(void *)(v19 + 24);
      unint64_t v23 = v21 + 1;
      if (v21 >= v22 >> 1)
      {
        unint64_t v24 = *(void *)(v19 + 16);
        sub_1B6397798(v22 > 1, v21 + 1, 1);
        unint64_t v21 = v24;
        uint64_t v19 = *v18;
      }
      *(void *)(v19 + 16) = v23;
      *(_DWORD *)(v19 + 4 * v21 + 32) = v15;
      a4[11] = v19;
      sub_1B6381C7C((uint64_t)a4, v15);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B69E07A0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  ++*(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
  uint64_t v2 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
  unsigned int v3 = *(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
  if (v3 != -1)
  {
LABEL_12:
    unint64_t v10 = (_DWORD *)(*(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v3);
    *(_DWORD *)(v0 + v2) = *v10;
    uint64_t v11 = v10[2];
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 24));
    return v3 | (unint64_t)(v11 << 32);
  }
  uint64_t v4 = (char **)(v0 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  uint64_t v6 = *(char **)(v0 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
  uint64_t v7 = 2 * *(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
  *(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v7;
  char v8 = (char *)swift_slowAlloc();
  *uint64_t v4 = v8;
  v4[1] = (char *)v7;
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (v8 != v6 || v8 >= &v6[12 * v5]) {
      memmove(v8, v6, 12 * v5);
    }
    if (v6) {
      MEMORY[0x1BA9B84C0](v6, -1, -1);
    }
    sub_1B63BA93C(v5);
    unsigned int v3 = *(_DWORD *)(v0 + v2);
    goto LABEL_12;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

void sub_1B69E090C()
{
  if (*(void *)(v0 + 216) == 1) {
    sub_1B6313670(1);
  }
  uint64_t v1 = *(uint64_t **)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues + 8);
    if (v2)
    {
      uint64_t v3 = 8 * v2;
      do
      {
        uint64_t v4 = *v1++;
        ecs_stack_allocator_pop_snapshot(*(void *)(v4 + 32));
        v3 -= 8;
      }
      while (v3);
    }
  }
  --*(void *)(v0 + 216);
}

uint64_t sub_1B69E0984(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = a2;
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_activeStatesPerEffects;
  if (*(void *)(*(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_activeStatesPerEffects) + 16))
  {
    uint64_t result = sub_1B62C5AB0(a2);
    unsigned int v3 = a2;
    if (v8) {
      return result;
    }
  }
  unsigned int v55 = v3;
  sub_1B62C9DA8(v2, a1, 0x200000000, v72);
  sub_1B62D7B10((uint64_t)v72, (uint64_t)v73, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  uint64_t v56 = v5;
  uint64_t v57 = v2;
  if (!*(void *)&v73[0])
  {
    char v12 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_56;
  }
  long long v80 = v73[0];
  long long v81 = v73[1];
  uint64_t v82 = v74;
  if (v79 < 1 || (uint64_t v63 = v76) == 0)
  {
    char v12 = (void *)MEMORY[0x1E4FBC868];
LABEL_54:
    sub_1B632F170(v72);
LABEL_56:
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v71 = *(void *)(v57 + v56);
    *(void *)(v57 + v56) = 0x8000000000000000;
    sub_1B67E865C((uint64_t)v12, v55, isUniquelyReferenced_nonNull_native);
    *(void *)(v57 + v56) = v71;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v62 = v75;
  uint64_t v66 = v78[4];
  float32x4_t v67 = v78;
  int v11 = *(unsigned __int8 *)(v77 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  float32x4_t v58 = v78 + 13;
  float v59 = v78 + 8;
  uint64_t v60 = (uint64_t)(v78 + 6);
  char v12 = (void *)MEMORY[0x1E4FBC868];
  int v61 = v11;
  while (1)
  {
    uint64_t v64 = v10;
    uint64_t v65 = v9;
    uint64_t v13 = (unsigned int *)(v62 + 48 * v9);
    uint64_t v14 = *v13;
    uint64_t v69 = v13[1];
    uint64_t v15 = (uint64_t *)*((void *)v13 + 2);
    uint64_t v16 = *((void *)v13 + 4);
    uint64_t v17 = *((void *)v13 + 5);
    if (v11)
    {
      uint64_t v18 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v66);
    sub_1B62D7B10(v60, (uint64_t)v85, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
    uint64_t v19 = v67[4];
    uint64_t v20 = *(void *)(*(void *)(*(void *)(*(void *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v67[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v67[7] = v20;
    v59[1] = 0;
    v59[2] = 0;
    *float v59 = 0;
    swift_release();
    uint64_t v68 = v17;
    if (v15)
    {
      if (!v16) {
        goto LABEL_27;
      }
      while (1)
      {
        uint64_t v23 = *v15++;
        uint64_t v22 = v23;
        uint64_t v24 = swift_retain();
        if (*(unsigned char *)(v17 + 184)) {
          goto LABEL_58;
        }
        uint64_t v25 = *(unsigned int *)(*(void *)(v17 + 168) + 4 * v22);
        uint64_t v26 = *(unsigned int *)(*(void *)(v24 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v25 + 8);
        swift_release();
        char v70 = *(unsigned char *)(v17 + 120);
        char v27 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v29 = sub_1B62BE38C(v25 | (v26 << 32));
        char v30 = v28;
        uint64_t v31 = v12[2] + ((v28 & 1) == 0);
        if (v12[3] >= v31)
        {
          if (v27)
          {
            if (v28) {
              goto LABEL_23;
            }
          }
          else
          {
            sub_1B6AD4D34();
            if (v30) {
              goto LABEL_23;
            }
          }
        }
        else
        {
          sub_1B6AC45F4(v31, v27);
          uint64_t v32 = sub_1B62BE38C(v25 | (v26 << 32));
          if ((v30 & 1) != (v33 & 1)) {
            goto LABEL_59;
          }
          unint64_t v29 = v32;
          if (v30)
          {
LABEL_23:
            *(unsigned char *)(v12[7] + v29) = v70;
            goto LABEL_15;
          }
        }
        v12[(v29 >> 6) + 8] |= 1 << v29;
        unint64_t v21 = (_DWORD *)(v12[6] + 8 * v29);
        *unint64_t v21 = v25;
        v21[1] = v26;
        *(unsigned char *)(v12[7] + v29) = v70;
        ++v12[2];
LABEL_15:
        swift_bridgeObjectRelease();
        --v16;
        uint64_t v17 = v68;
        if (!v16) {
          goto LABEL_27;
        }
      }
    }
    if (v14 != v69) {
      break;
    }
LABEL_27:
    v83[0] = v80;
    v83[1] = v81;
    uint64_t v84 = v82;
    uint64_t v10 = v64;
    sub_1B6345178(v67, (unsigned __int16 **)v83, (uint64_t)v85);
    if (*(void *)(v67[13] + 16))
    {
      uint64_t v34 = swift_bridgeObjectRetain();
      sub_1B639147C(v34, v17);
      swift_bridgeObjectRelease();
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v36 = v67[13];
      if (v35)
      {
        sub_1B6399BB8(0, *(void *)(v36 + 16));
      }
      else
      {
        uint64_t v49 = (void *)MEMORY[0x1E4FBC860];
        if (*(void *)(v36 + 24) >= 2uLL)
        {
          sub_1B62C609C(0, (unint64_t *)&qword_1EB980C00, (uint64_t (*)(uint64_t))sub_1B63B29DC, MEMORY[0x1E4FBBE00]);
          uint64_t v49 = (void *)swift_allocObject();
          size_t v50 = j__malloc_size(v49);
          _OWORD v49[2] = 0;
          v49[3] = 2 * ((uint64_t)(v50 - 32) / 72);
        }
        *float32x4_t v58 = v49;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v67[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        uint64_t v51 = *(char **)(v17 + 232);
        long long v52 = *(char **)(v17 + 256);
        if (v51 == v52)
        {
          long long v53 = *(char **)(v17 + 240);
        }
        else
        {
          sub_1B666018C(v52, v51);
          long long v52 = *(char **)(v17 + 232);
          long long v53 = *(char **)(v17 + 240);
          if (v53 == v52)
          {
            long long v53 = 0;
            long long v52 = 0;
            *(void *)(v17 + 232) = 0;
            *(void *)(v17 + 240) = 0;
          }
        }
        *(void *)(v17 + 248) = v53;
        *(void *)(v17 + 256) = v52;
      }
    }
    ecs_stack_allocator_pop_snapshot(v66);
    int v11 = v61;
    if (v61)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
    }
    swift_release();
    uint64_t v9 = v65 + 1;
    if (v65 + 1 == v63) {
      goto LABEL_54;
    }
  }
  while (1)
  {
    uint64_t v38 = swift_retain();
    if (*(unsigned char *)(v17 + 184)) {
      break;
    }
    uint64_t v39 = *(unsigned int *)(*(void *)(v17 + 168) + 4 * v14);
    uint64_t v40 = *(unsigned int *)(*(void *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v39 + 8);
    swift_release();
    char v41 = *(unsigned char *)(v17 + 120);
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v44 = sub_1B62BE38C(v39 | (v40 << 32));
    char v45 = v43;
    uint64_t v46 = v12[2] + ((v43 & 1) == 0);
    if (v12[3] >= v46)
    {
      if (v42)
      {
        if (v43) {
          goto LABEL_39;
        }
      }
      else
      {
        sub_1B6AD4D34();
        if (v45) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      sub_1B6AC45F4(v46, v42);
      uint64_t v47 = sub_1B62BE38C(v39 | (v40 << 32));
      if ((v45 & 1) != (v48 & 1)) {
        goto LABEL_59;
      }
      unint64_t v44 = v47;
      if (v45)
      {
LABEL_39:
        *(unsigned char *)(v12[7] + v44) = v41;
        goto LABEL_31;
      }
    }
    v12[(v44 >> 6) + 8] |= 1 << v44;
    uint64_t v37 = (_DWORD *)(v12[6] + 8 * v44);
    *uint64_t v37 = v39;
    v37[1] = v40;
    *(unsigned char *)(v12[7] + v44) = v41;
    ++v12[2];
LABEL_31:
    ++v14;
    swift_bridgeObjectRelease();
    uint64_t v17 = v68;
    if (v69 == v14) {
      goto LABEL_27;
    }
  }
LABEL_58:
  sub_1B6E32BE8();
  __break(1u);
LABEL_59:
  uint64_t result = sub_1B6E33838();
  __break(1u);
  return result;
}

unint64_t sub_1B69E1088(unint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC3VFX13EntityManager_activeStatesPerEffects;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_activeStatesPerEffects);
  if (!*(void *)(v4 + 16)) {
    return result;
  }
  unsigned int v5 = result;
  uint64_t result = sub_1B62C5AB0(result);
  if ((v6 & 1) == 0) {
    return result;
  }
  unsigned int v52 = v5;
  uint64_t v53 = v3;
  uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * result);
  uint64_t v8 = v7 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v7 + 64);
  char v12 = (void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  int64_t v13 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v14 = v12;
  uint64_t v15 = 0;
  uint64_t v54 = v2;
  unsigned int v55 = v14;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      goto LABEL_22;
    }
    uint64_t v18 = v15 + 1;
    if (v15 + 1 >= v13) {
      goto LABEL_48;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    if (!v19)
    {
      uint64_t v18 = v15 + 2;
      if (v15 + 2 >= v13) {
        goto LABEL_48;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v18);
      if (!v19)
      {
        uint64_t v18 = v15 + 3;
        if (v15 + 3 >= v13) {
          goto LABEL_48;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v18);
        if (!v19)
        {
          uint64_t v18 = v15 + 4;
          if (v15 + 4 >= v13) {
            goto LABEL_48;
          }
          unint64_t v19 = *(void *)(v8 + 8 * v18);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v18 << 6);
    uint64_t v15 = v18;
LABEL_22:
    uint64_t v20 = (int *)(*(void *)(v7 + 48) + 8 * v17);
    int v21 = v20[1];
    uint64_t v22 = *v20;
    int v23 = *(unsigned __int8 *)(*(void *)(v7 + 56) + v17);
    if (__PAIR64__(v21, v22) != 0xFFFFFFFF && (v22 & 0x80000000) == 0 && v14[1] > v22)
    {
      uint64_t v24 = *v14;
      if (v21 == -1 || *(_DWORD *)(v24 + 12 * (int)v22 + 8) == v21)
      {
        uint64_t v25 = *(void *)(*(void *)(v2 + 136) + 8 * *(int *)(v24 + 12 * (int)v22) + 32);
        uint64_t v26 = *(os_unfair_lock_s **)(v25 + 344);
        swift_retain();
        os_unfair_lock_lock(v26);
        char v28 = v55;
        if (v55[1] > v22
          && ((uint64_t v29 = *v55 + 12 * (int)v22, v21 != -1) ? (v30 = *(_DWORD *)(v29 + 8) == v21) : (v30 = 1), v30))
        {
          uint64_t v31 = *(void *)(*(void *)(v54 + 136) + 8 * *(int *)(*v55 + 12 * (int)v22) + 32);
          if (v23 != *(unsigned __int8 *)(v31 + 120))
          {
            if ((uint64_t)(*(void *)(v31 + 240) - *(void *)(v31 + 232)) < 2)
            {
              uint64_t v33 = *(void *)(v31 + 16);
              unsigned int v47 = *(_DWORD *)(v31 + 188);
              uint64_t v48 = *(int *)(v31 + 24);
              uint64_t v50 = *(void *)(*(void *)(v54 + 136) + 8 * *(int *)(*v55 + 12 * (int)v22) + 32);
              uint64_t v34 = *(os_unfair_lock_s **)(v33 + 128);
              swift_retain();
              swift_retain();
              os_unfair_lock_lock(v34);
              char v35 = *(void **)(v33 + 96);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v33 + 96) = v35;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                *(void *)(v33 + 96) = sub_1B6C16694(v35);
              }
              sub_1B68E6D60(v47, v23);
              if (*(unsigned char *)(*(void *)(*(void *)(v33 + 80) + 8 * v48 + 32) + 200) == 1) {
                *(unsigned char *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
              }
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v33 + 128));
              swift_release();
              *(unsigned char *)(v50 + 120) = v23;
            }
            else
            {
              uint64_t v51 = *(__int16 *)(v29 + 4);
              signed int v49 = *(_DWORD *)(v31 + 24);
              uint64_t v46 = *(unsigned int *)(v31 + 28);
              unsigned __int8 v32 = *(unsigned char *)(v31 + 32);
              swift_retain();
              sub_1B6BF2E48(v51, v49, v23, v46 | ((unint64_t)v32 << 32), 0, 0, 0, 0);
            }
            swift_release();
            char v28 = v55;
          }
          uint64_t v8 = v7 + 64;
          if (v28[1] > v22 && (v21 == -1 || *(_DWORD *)(*v28 + 12 * (int)v22 + 8) == v21))
          {
            thread_worker_index(&thread_worker_index, v27);
            uint64_t v39 = v37[24];
            if (v39)
            {
              uint64_t v40 = v37[26];
              uint64_t v41 = 8 * (v38 >> 6);
              *(void *)(v39 + v41) |= 1 << v38;
              *(void *)(v40 + v41) &= ~(1 << v38);
            }
            sub_1B635AD78(v37[5], (uint64_t)v37, v38);
          }
        }
        else
        {
          uint64_t v8 = v7 + 64;
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
        swift_release();
        uint64_t v2 = v54;
        uint64_t v14 = v55;
      }
    }
  }
  while (v13 - 5 != v15)
  {
    unint64_t v19 = *(void *)(v7 + 104 + 8 * v15++);
    if (v19)
    {
      uint64_t v18 = v15 + 4;
      goto LABEL_21;
    }
  }
LABEL_48:
  swift_release();
  uint64_t result = sub_1B62C5AB0(v52);
  if (v42)
  {
    unint64_t v43 = result;
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = *(void *)(v2 + v53);
    *(void *)(v2 + v53) = 0x8000000000000000;
    if ((v44 & 1) == 0) {
      sub_1B6AD4B78();
    }
    sub_1B6396C38(v43, v45);
    *(void *)(v2 + v53) = v45;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B69E157C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity;
    swift_retain();
    swift_retain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v5 = *(void *)(v1 + 8 * i + 32);
      if (v5) {
        vfx_attribute_memory(v5 + 144, *(_DWORD *)(v0 + v3));
      }
    }
    swift_release();
    swift_release();
  }
  char v6 = *(char **)(v0 + 152);
  uint64_t v7 = *((void *)v6 + 2);
  if (v7)
  {
    uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_peerTaskIdentity;
    uint64_t v9 = 32;
    do
    {
      task_t v10 = *(_DWORD *)(v0 + v8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 152) = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        char v6 = sub_1B6C16680((uint64_t)v6);
        *(void *)(v0 + 152) = v6;
      }
      vfx_attribute_memory((uint64_t)&v6[v9], v10);
      char v6 = *(char **)(v0 + 152);
      v9 += 24;
      --v7;
    }
    while (v7);
  }
}

uint64_t sub_1B69E1678(uint64_t a1, uint64_t a2)
{
  swift_retain();
  if (vfx_counters_is_null(a2)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a2;
  }
  sub_1B63B8F08(v4, (uint64_t)&v14);
  uint64_t v5 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  long long v6 = v15;
  *(_OWORD *)uint64_t v5 = v14;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 96) = v20;
  long long v7 = v19;
  *(_OWORD *)(v5 + 64) = v18;
  *(_OWORD *)(v5 + 80) = v7;
  long long v8 = v17;
  *(_OWORD *)(v5 + 32) = v16;
  *(_OWORD *)(v5 + 48) = v8;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v9)
  {
    long long v10 = v16;
    *(_OWORD *)(v9 + 88) = v17;
    long long v11 = v19;
    *(_OWORD *)(v9 + 104) = v18;
    *(_OWORD *)(v9 + 120) = v11;
    *(void *)(v9 + 136) = v20;
    long long v12 = v15;
    *(_OWORD *)(v9 + 40) = v14;
    *(_OWORD *)(v9 + 56) = v12;
    *(_OWORD *)(v9 + 72) = v10;
  }

  return swift_release();
}

uint64_t sub_1B69E1754(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v69 = v2;
  uint64_t v63 = *(void *)(v3 + 16);
  if (!v63)
  {
    uint64_t v5 = 0;
    goto LABEL_35;
  }
  uint64_t v62 = v3 + 32;
  swift_retain();
  swift_retain();
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    uint64_t v8 = *(void *)(v62 + 8 * v4);
    if (v8)
    {
      uint64_t v66 = v4;
      uint64_t v67 = v5;
      uint64_t v9 = *(void *)(*(void *)(v2 + 96) + 40 * *(int *)(v8 + 204) + 32);
      uint64_t v10 = *(void *)(v9 + 16);
      uint64_t v65 = *(void *)(v8 + 72);
      if (!v10)
      {
        uint64_t v64 = 0;
        unint64_t v14 = MEMORY[0x1E4FBC860];
        goto LABEL_19;
      }
      uint64_t v11 = *(void *)(v2 + 136) + 32;
      if (v10 == 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v12 = v10 & 0x7FFFFFFFFFFFFFFELL;
        long long v17 = (int *)(v9 + 36);
        uint64_t v18 = v10 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v19 = *(void *)(v11 + 8 * *(v17 - 1));
          uint64_t v20 = *(void *)(v11 + 8 * *v17);
          v15 += *(void *)(v19 + 240) - *(void *)(v19 + 232);
          v16 += *(void *)(v20 + 240) - *(void *)(v20 + 232);
          v17 += 2;
          v18 -= 2;
        }
        while (v18);
        uint64_t v13 = v16 + v15;
        if (v10 == v12) {
          goto LABEL_16;
        }
      }
      uint64_t v21 = v10 - v12;
      uint64_t v22 = (int *)(v9 + 4 * v12 + 32);
      do
      {
        uint64_t v23 = *v22++;
        v13 += *(void *)(*(void *)(v11 + 8 * v23) + 240) - *(void *)(*(void *)(v11 + 8 * v23) + 232);
        --v21;
      }
      while (v21);
LABEL_16:
      uint64_t v24 = *(void *)(v8 + 48);
      v70[0] = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      sub_1B6E32A48();
      uint64_t v25 = 0;
      do
      {
        uint64_t v26 = v25 + 1;
        swift_retain();
        sub_1B6E32A08();
        sub_1B6E32A68();
        sub_1B6E32A78();
        sub_1B6E32A28();
        uint64_t v25 = v26;
      }
      while (v10 != v26);
      uint64_t v64 = v24 * v13;
      unint64_t v14 = v70[0];
      swift_bridgeObjectRelease();
LABEL_19:
      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_1B6E32C18();
        if (v27)
        {
LABEL_21:
          uint64_t v28 = 0;
          uint64_t v68 = 0;
          do
          {
            if ((v14 & 0xC000000000000001) != 0) {
              uint64_t v29 = MEMORY[0x1BA9B4580](v28, v14);
            }
            else {
              uint64_t v29 = swift_retain();
            }
            uint64_t v30 = v28 + 1;
            uint64_t v31 = *(void *)(v29 + 232);
            uint64_t v32 = *(void *)(v29 + 240);
            swift_release();
            if (v32 == v31)
            {
              ++v28;
              BOOL v33 = v27 == v30;
            }
            else
            {
              ++v68;
              BOOL v33 = v27 - 1 == v28++;
            }
            uint64_t v2 = v69;
          }
          while (!v33);
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v27 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v27) {
          goto LABEL_21;
        }
      }
      uint64_t v68 = 0;
LABEL_4:
      uint64_t v5 = v67 + 1;
      swift_bridgeObjectRelease_n();
      uint64_t v6 = a2[1] + v64;
      *a2 += v65 * v10;
      a2[1] = v6;
      uint64_t v7 = a2[3] + v68;
      a2[2] += v10;
      a2[3] = v7;
      uint64_t v4 = v66;
    }
    ++v4;
  }
  while (v4 != v63);
  swift_release();
  swift_release();
LABEL_35:
  uint64_t v34 = OBJC_IVAR____TtC3VFX13EntityManager_logger;
  uint64_t v35 = *(void *)(v69 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  v70[1] = 0x80000001B6F41D00;
  uint64_t v71 = v5;
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v36 = sub_1B6E32168();
  v70[0] = 0;
  (*(void (**)(uint64_t, void *, unint64_t, unint64_t))(*(void *)v35 + 88))(v36, v70, 0xD000000000000014, 0x80000001B6F41D00);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(v69 + v34);
  strcpy((char *)v70, "Chunk size: ");
  BYTE5(v70[1]) = 0;
  HIWORD(v70[1]) = -5120;
  uint64_t v38 = *a2;
  id v39 = objc_allocWithZone(MEMORY[0x1E4F28B68]);
  swift_retain();
  id v40 = objc_msgSend(v39, sel_init);
  objc_msgSend(v40, sel_setCountStyle_, 3);
  id v41 = objc_msgSend(v40, sel_stringFromByteCount_, v38);
  sub_1B6E31798();

  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v42 = v70[0];
  uint64_t v43 = v70[1];
  uint64_t v44 = sub_1B6E32168();
  v70[0] = 0;
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v37 + 88))(v44, v70, v42, v43);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(v69 + v34);
  strcpy((char *)v70, "Chunk count: ");
  HIWORD(v70[1]) = -4864;
  uint64_t v71 = a2[2];
  swift_retain();
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v46 = v70[0];
  uint64_t v47 = v70[1];
  uint64_t v48 = sub_1B6E32168();
  v70[0] = 0;
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v45 + 88))(v48, v70, v46, v47);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(v69 + v34);
  v70[0] = 0;
  v70[1] = 0xE000000000000000;
  swift_retain();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  v70[0] = 0xD000000000000012;
  v70[1] = 0x80000001B6F41D20;
  uint64_t v50 = a2[1];
  id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B68]), sel_init);
  objc_msgSend(v51, sel_setCountStyle_, 3);
  id v52 = objc_msgSend(v51, sel_stringFromByteCount_, v50);
  sub_1B6E31798();

  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v53 = v70[0];
  uint64_t v54 = v70[1];
  uint64_t v55 = sub_1B6E32168();
  v70[0] = 0;
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v49 + 88))(v55, v70, v53, v54);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v56 = *(void *)(v69 + v34);
  v70[0] = 0;
  v70[1] = 0xE000000000000000;
  swift_retain();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  v70[0] = 0xD000000000000013;
  v70[1] = 0x80000001B6F41D40;
  uint64_t v71 = a2[3];
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v57 = v70[0];
  uint64_t v58 = v70[1];
  uint64_t v59 = sub_1B6E32168();
  v70[0] = 0;
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v56 + 88))(v59, v70, v57, v58);
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1B69E1EE0(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_1B69E1EF0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69E1F38()
{
  return sub_1B6E33968();
}

uint64_t sub_1B69E1F64()
{
  return sub_1B6E33988();
}

void sub_1B69E1FA8(uint64_t a1, int8x16_t *a2, uint64_t a3, unint64_t a4)
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 128));
  if (a3 + 63 <= 127) {
    unint64_t v9 = 1;
  }
  else {
    unint64_t v9 = (a3 + 63) >> 6;
  }
  if (v9 < 4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
LABEL_9:
    unint64_t v16 = v9 - v11;
    long long v17 = (int8x8_t *)a2 + v11;
    do
    {
      int8x8_t v18 = *v17++;
      uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
      v19.i16[0] = vaddlv_u8(v19);
      v10 += v19.u32[0];
      --v16;
    }
    while (v16);
    goto LABEL_11;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v12 = a2 + 1;
  int64x2_t v13 = 0uLL;
  unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v15 = 0uLL;
  do
  {
    int64x2_t v13 = (int64x2_t)vpadalq_u32((uint64x2_t)v13, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v12[-1]))));
    int64x2_t v15 = (int64x2_t)vpadalq_u32((uint64x2_t)v15, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v12))));
    v12 += 2;
    v14 -= 4;
  }
  while (v14);
  uint64_t v10 = vaddvq_s64(vaddq_s64(v15, v13));
  if (v9 != v11) {
    goto LABEL_9;
  }
LABEL_11:
  if (v10)
  {
    uint64_t v20 = *(void *)(a1 + 240) - *(void *)(a1 + 232);
    int v21 = *(_DWORD *)(a1 + 188);
    uint64_t v22 = *(void **)(v4 + 96);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v4 + 96) = v22;
    if (v20 == v10)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        *(void *)(v4 + 96) = sub_1B6C16694(v22);
      }
      int v24 = v21;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
    }
    else
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        *(void *)(v4 + 96) = sub_1B6C16694(v22);
      }
      int v24 = v21;
      uint64_t v25 = (uint64_t)a2;
      uint64_t v26 = a3;
    }
    sub_1B68E6B68(v24, v25, v26, a4);
  }
  uint64_t v27 = *(os_unfair_lock_s **)(v4 + 128);

  os_unfair_lock_unlock(v27);
}

id sub_1B69E2150(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock), sel_lock);
  if (*(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
  {
    sub_1B69DECC8(a2, a3);
  }
  else
  {
    sub_1B63BADF0();
    a2();
    sub_1B69E21FC(a1);
  }
  uint64_t v7 = *(void **)(a1 + v6);

  return objc_msgSend(v7, sel_unlock);
}

void sub_1B69E21FC(uint64_t a1)
{
  if (*(void *)(a1 + 216) == 1) {
    sub_1B6313670(1);
  }
  uint64_t v2 = *(uint64_t **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues + 8);
    if (v3)
    {
      uint64_t v4 = 8 * v3;
      do
      {
        uint64_t v5 = *v2++;
        ecs_stack_allocator_pop_snapshot(*(void *)(v5 + 32));
        v4 -= 8;
      }
      while (v4);
    }
  }
  --*(void *)(a1 + 216);
}

uint64_t sub_1B69E2278(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  int64_t v6 = *(void *)(*v2 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  int64_t v8 = v6 + a1 - a2;
  if (result && v8 <= *(void *)(v5 + 24) >> 1)
  {
    if (a1 == a2) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v6 <= v8) {
      int64_t v9 = v6 + a1 - a2;
    }
    else {
      int64_t v9 = v6;
    }
    uint64_t result = sub_1B6397798(result, v9, 1);
    uint64_t v5 = *v2;
    if (a1 == a2) {
      goto LABEL_11;
    }
  }
  uint64_t v10 = *(void *)(v5 + 16) - a2;
  if (v10 >= 0)
  {
    uint64_t result = (uint64_t)memmove((void *)(v5 + 32 + 4 * a1), (const void *)(v5 + 32 + 4 * a2), 4 * v10);
    *(void *)(v5 + 16) += a1 - a2;
LABEL_11:
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B69E2380(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  if (!isUniquelyReferenced_nonNull_native || v6 - (a2 - a1) > *(void *)(v5 + 24) >> 1)
  {
    MEMORY[0x1BA9B46C0]();
    uint64_t v5 = *v2;
  }
  type metadata accessor for EntityFamily();
  swift_arrayDestroy();
  if (a2 != a1)
  {
    uint64_t v8 = *(void *)(v5 + 16) - a2;
    if (v8 < 0)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memmove((void *)(v5 + 32 + 8 * a1), (const void *)(v5 + 32 + 8 * a2), 8 * v8);
    *(void *)(v5 + 16) -= a2 - a1;
  }

  return sub_1B6E32A28();
}

uint64_t sub_1B69E24AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v7;
  if (result && v8 + a1 - a2 <= *(void *)(v7 + 24) >> 1)
  {
    if (a1 == a2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t result = a3();
    uint64_t v7 = *v3;
    if (a1 == a2)
    {
LABEL_8:
      *uint64_t v3 = v7;
      return result;
    }
  }
  uint64_t v10 = *(void *)(v7 + 16) - a2;
  if (v10 >= 0)
  {
    uint64_t result = (uint64_t)memmove((void *)(v7 + 32 + 8 * a1), (const void *)(v7 + 32 + 8 * a2), 8 * v10);
    *(void *)(v7 + 16) += a1 - a2;
    goto LABEL_8;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B69E25C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  int64_t v6 = *(void *)(*v2 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  int64_t v8 = v6 + a1 - a2;
  if (result && v8 <= *(void *)(v5 + 24) >> 1)
  {
    if (a1 == a2) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v6 <= v8) {
      int64_t v9 = v6 + a1 - a2;
    }
    else {
      int64_t v9 = v6;
    }
    uint64_t result = sub_1B63977D8(result, v9, 1);
    uint64_t v5 = *v2;
    if (a1 == a2) {
      goto LABEL_11;
    }
  }
  uint64_t v10 = *(void *)(v5 + 16) - a2;
  if (v10 >= 0)
  {
    uint64_t result = (uint64_t)memmove((void *)(v5 + 32 + 16 * a1), (const void *)(v5 + 32 + 16 * a2), 16 * v10);
    *(void *)(v5 + 16) += a1 - a2;
LABEL_11:
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

void sub_1B69E26CC(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v7)
  {
    int64_t v8 = *(_opaque_pthread_t **)(v7 + 144);
    id v9 = a3;
    swift_retain();
    uint64_t v10 = pthread_self();
    if (pthread_equal(v8, v10))
    {
      sub_1B63BADF0();
      sub_1B6637420(a2, &v18);
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      id v15 = v9;
      uint64_t v16 = sub_1B6A91140(v7, a2, (uint64_t)v15);
      swift_release();

      if (!v3) {
        unint64_t v18 = v16;
      }
    }
  }
  else
  {
    uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v12 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v13 = a3;
    objc_msgSend(v12, sel_lock);
    if (*(void *)(a1 + v6))
    {
      id v13 = v13;
      uint64_t v14 = sub_1B69E26CC(a1, a2, v13);
      if (v3)
      {
      }
      else
      {
        unint64_t v17 = v14;

        unint64_t v18 = v17;
      }
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6637420(a2, &v18);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v11), sel_unlock);
  }
}

void sub_1B69E28BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v8)
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v17 = a2;
    id v18 = a3;
    id v19 = v17;
    id v20 = v18;
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v7))
    {
      id v19 = v19;
      id v20 = v20;
      uint64_t v21 = sub_1B69E28BC(a1, v19, v20);
      if (v3)
      {

LABEL_13:
        objc_msgSend(*(id *)(a1 + v15), sel_unlock);

        goto LABEL_14;
      }
      unint64_t v25 = v21;

      unint64_t v26 = v25;
    }
    else
    {
      sub_1B63BADF0();
      sub_1B66388CC((uint64_t)v19, v20, &v26);
      if (v3)
      {
        sub_1B69E21FC(a1);
        goto LABEL_13;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v15), sel_unlock);

    return;
  }
  id v9 = *(_opaque_pthread_t **)(v8 + 144);
  id v10 = a2;
  id v11 = a3;
  id v12 = v10;
  id v13 = v11;
  swift_retain();
  uint64_t v14 = pthread_self();
  if (pthread_equal(v9, v14))
  {
    sub_1B63BADF0();
    sub_1B66388CC((uint64_t)v12, v13, &v26);
    if (!v3)
    {
      sub_1B69E21FC(a1);

      swift_release();
      return;
    }
    sub_1B69E21FC(a1);

    swift_release();
    goto LABEL_14;
  }
  id v22 = v12;
  id v23 = v13;
  uint64_t v24 = sub_1B6A9116C(v8, (uint64_t)v22, (uint64_t)v23);
  swift_release();

  if (v3)
  {

LABEL_14:
    return;
  }

  unint64_t v26 = v24;
}

void *sub_1B69E2B30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v10)
  {
    uint64_t v16 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    id v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v18 = a2;
    swift_bridgeObjectRetain_n();
    id v19 = (char *)v18;
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v9))
    {
      id v19 = v19;
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_1B69E2B30(a1, v19, a3, a4);
      if (v4)
      {

        swift_bridgeObjectRelease();
        objc_msgSend(*(id *)(a1 + v16), sel_unlock);
        swift_bridgeObjectRelease();

        goto LABEL_23;
      }
      id v17 = (void *)v20;

      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B63BADF0();
      sub_1B639D66C();
      if (v19[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4]) {
        unint64_t v23 = 0x200000000;
      }
      else {
        unint64_t v23 = *(unsigned int *)&v19[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)(*(_DWORD *)&v19[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] == 0) << 33);
      }
      uint64_t v24 = sub_1B677E954(a3, a4, v23);
      swift_release();
      if (v24 == 0xFFFFFFFFLL) {
        id v17 = 0;
      }
      else {
        id v17 = (void *)v24;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v16), sel_unlock);
    swift_bridgeObjectRelease();

    goto LABEL_23;
  }
  id v11 = *(_opaque_pthread_t **)(v10 + 144);
  id v12 = a2;
  swift_bridgeObjectRetain_n();
  id v13 = v12;
  swift_retain();
  uint64_t v14 = pthread_self();
  if (pthread_equal(v11, v14))
  {
    sub_1B63BADF0();
    sub_1B639D66C();
    if (v13[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4]) {
      unint64_t v15 = 0x200000000;
    }
    else {
      unint64_t v15 = *(unsigned int *)&v13[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] | ((unint64_t)(*(_DWORD *)&v13[OBJC_IVAR____TtC3VFX9VFXEffect_effectID] == 0) << 33);
    }
    uint64_t v22 = sub_1B677E954(a3, a4, v15);
    swift_release();
    if (v22 == 0xFFFFFFFFLL) {
      id v17 = 0;
    }
    else {
      id v17 = (void *)v22;
    }
    sub_1B69E21FC(a1);
    swift_bridgeObjectRelease();

    swift_release();
  }
  else
  {
    uint64_t v21 = v13;
    swift_bridgeObjectRetain();
    id v17 = (void *)sub_1B6A912C8(v10, (uint64_t)v21, a3, a4);
    swift_release();

    swift_bridgeObjectRelease_n();
  }
LABEL_23:
  swift_bridgeObjectRelease();

  return v17;
}

uint64_t sub_1B69E2E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a3 + 16);
    if (!v7) {
      return v6;
    }
    goto LABEL_5;
  }
  uint64_t v4 = a2;
  uint64_t v6 = 0;
  do
  {
    a1 += 16;
    v6 ^= sub_1B6E31F28();
    --v4;
  }
  while (v4);
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
LABEL_5:
    uint64_t v8 = a3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v9 = a3 + 32;
    uint64_t v10 = v7;
    do
    {
      sub_1B62C1550(v9, (uint64_t)v15);
      sub_1B62C14BC(v15, v16);
      swift_getDynamicType();
      v6 ^= sub_1B6E31F28();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
      v9 += 40;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    do
    {
      sub_1B62C1550(v8, (uint64_t)v15);
      uint64_t v12 = v16;
      uint64_t v13 = v17;
      sub_1B62C14BC(v15, v16);
      v11 ^= (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
      v8 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  return v6;
}

void sub_1B69E2F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  uint64_t v6 = (void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  uint64_t v7 = v6[1];
  if (v7)
  {
    uint64_t v8 = 0;
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v10 = *v6 + v8;
      if ((*(__int16 *)(v10 + 6) & 0x80000000) == 0) {
        sub_1B69DF07C(i | ((unint64_t)*(unsigned int *)(v10 + 8) << 32), a3);
      }
      v8 += 12;
    }
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 24));
}

uint64_t sub_1B69E3010(unint64_t a1, uint64_t a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1B6E32C18();
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
LABEL_3:
  uint64_t v5 = 0;
  uint64_t v6 = (int *)(a2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
  while (1)
  {
    uint64_t v7 = (a1 & 0xC000000000000001) != 0
       ? (unsigned char *)MEMORY[0x1BA9B4580](v5, a1)
       : *(id *)(a1 + 8 * v5 + 32);
    int v8 = (v7[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4] & 1) != 0
       ? 0
       : *(_DWORD *)&v7[OBJC_IVAR____TtC3VFX9VFXEffect_effectID];
    int v9 = *v6;
    int v10 = *((unsigned __int8 *)v6 + 4);

    int v11 = v10 ? 0 : v9;
    if (v8 == v11) {
      break;
    }
    if (v4 == ++v5) {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_1B69E3138(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_1B69E3010(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  uint64_t v9 = *a1;
  unint64_t v10 = (unint64_t)*a1 >> 62;
  if ((v8 & 1) == 0)
  {
    if (v10)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_1B6E32C18();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v6 + 1 != v11)
    {
      uint64_t v12 = a2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID;
      for (uint64_t i = v6 + 5; ; ++i)
      {
        if ((*a1 & 0xC000000000000001) != 0) {
          uint64_t v14 = (unsigned char *)MEMORY[0x1BA9B4580](i - 4);
        }
        else {
          uint64_t v14 = *(id *)(*a1 + 8 * i);
        }
        if (v14[OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4]) {
          int v15 = 0;
        }
        else {
          int v15 = *(_DWORD *)&v14[OBJC_IVAR____TtC3VFX9VFXEffect_effectID];
        }
        int v16 = *(_DWORD *)v12;
        int v17 = *(unsigned __int8 *)(v12 + 4);

        if (v17) {
          int v18 = 0;
        }
        else {
          int v18 = v16;
        }
        if (v15 == v18) {
          goto LABEL_30;
        }
        if (i - 4 != v6) {
          break;
        }
LABEL_29:
        ++v6;
LABEL_30:
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v27 = sub_1B6E32C18();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v27 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v28 = i - 3;
        if (v28 == v27) {
          return v6;
        }
      }
      uint64_t v19 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v20 = (id)MEMORY[0x1BA9B4580](v6, *a1);
        uint64_t v19 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v21 = (id)MEMORY[0x1BA9B4580](i - 4, v19);
          uint64_t v19 = *a1;
LABEL_20:
          int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v19;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v19 < 0 || (v19 & 0x4000000000000000) != 0)
          {
            uint64_t v19 = sub_1B6C167C0(v19);
            *a1 = v19;
          }
          unint64_t v23 = *(void **)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
          *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v21;

          sub_1B6E31C48();
          uint64_t v24 = *a1;
          int v25 = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v24;
          if (!v25 || v24 < 0 || (v24 & 0x4000000000000000) != 0)
          {
            uint64_t v24 = sub_1B6C167C0(v24);
            *a1 = v24;
          }
          unint64_t v26 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * i);
          *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v20;

          sub_1B6E31C48();
          goto LABEL_29;
        }
      }
      else
      {
        id v20 = *(id *)(v19 + 8 * v6 + 32);
      }
      id v21 = *(id *)(v19 + 8 * i);
      goto LABEL_20;
    }
    return v6;
  }
  if (!v10) {
    return *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = sub_1B6E32C18();
  swift_bridgeObjectRelease();
  return v30;
}

uint64_t sub_1B69E33FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  int64_t v6 = *(void *)(*v2 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  int64_t v8 = v6 - (a2 - a1);
  if (!isUniquelyReferenced_nonNull_native || v8 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v8) {
      int64_t v9 = v6 - (a2 - a1);
    }
    else {
      int64_t v9 = v6;
    }
    sub_1B6C3D68C(isUniquelyReferenced_nonNull_native, v9, 1);
    uint64_t v5 = *v2;
  }
  uint64_t result = swift_arrayDestroy();
  if (a2 == a1) {
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(v5 + 16) - a2;
  if (v11 >= 0)
  {
    uint64_t result = (uint64_t)memmove((void *)(v5 + 32 + 104 * a1), (const void *)(v5 + 32 + 104 * a2), 104 * v11);
    *(void *)(v5 + 16) -= a2 - a1;
LABEL_10:
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

BOOL sub_1B69E3520(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v8)
  {
    uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    objc_msgSend(v13, sel_lock);
    if (*(void *)(a1 + v7))
    {
      swift_retain();
      char v14 = sub_1B69E3520(a1, a2);
      if (v4)
      {
        swift_release();
        objc_msgSend(*(id *)(a1 + v12), sel_unlock);
        swift_release_n();
        return v3;
      }
      char v17 = v14;
      swift_release();
      uint64_t v3 = v17 & 1;
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
      uint64_t v3 = v16 == 0;
      if (v16)
      {
        swift_retain();
        sub_1B67FF5E4();
        swift_release();
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v12), sel_unlock);
    swift_release_n();
    return v3;
  }
  int64_t v9 = *(_opaque_pthread_t **)(v8 + 144);
  swift_retain_n();
  swift_retain();
  unint64_t v10 = pthread_self();
  if (pthread_equal(v9, v10))
  {
    sub_1B63BADF0();
    uint64_t v11 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    uint64_t v3 = v11 == 0;
    if (v11)
    {
      swift_retain();
      sub_1B67FF5E4();
      swift_release();
    }
    sub_1B69E21FC(a1);
    swift_release_n();
    swift_release();
  }
  else
  {
    swift_retain();
    BOOL v15 = sub_1B6A91400(v8, a2);
    swift_release();
    swift_release_n();
    if (!v2) {
      return v15;
    }
  }
  return v3;
}

uint64_t sub_1B69E3718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v12)
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain();
    sub_1B62CA090(a3);
    swift_retain();
    sub_1B62CA090(a3);
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v11))
    {
      swift_retain();
      sub_1B62CA090(a3);
      uint64_t v17 = sub_1B69E3718(a1, a2, a3, a4 & 0xFFFFFFFFFFLL, a5);
      if (v5)
      {
        sub_1B62CA064(a3);
        swift_release();
LABEL_13:
        objc_msgSend(*(id *)(a1 + v15), sel_unlock);
        goto LABEL_14;
      }
      uint64_t v20 = v17;
      sub_1B62CA064(a3);
      swift_release();
      uint64_t v21 = v20;
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B6156C(a2, a3, a4 & 0xFFFFFFFFFFLL, a5, &v21);
      if (v5)
      {
        sub_1B69E21FC(a1);
        goto LABEL_13;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v15), sel_unlock);
    goto LABEL_19;
  }
  uint64_t v13 = *(_opaque_pthread_t **)(v12 + 144);
  swift_retain();
  sub_1B62CA090(a3);
  swift_retain();
  sub_1B62CA090(a3);
  swift_retain();
  char v14 = pthread_self();
  if (!pthread_equal(v13, v14))
  {
    swift_retain();
    sub_1B62CA090(a3);
    uint64_t v18 = sub_1B6A914FC(v12, a2, a3, a4 & 0xFFFFFFFFFFLL, a5);
    sub_1B62CA064(a3);
    swift_release();
    swift_release_n();
    sub_1B62CA064(a3);
    if (!v5)
    {
      swift_release();
      sub_1B62CA064(a3);
      uint64_t v21 = v18;
      return v18;
    }
    goto LABEL_15;
  }
  sub_1B63BADF0();
  sub_1B6B6156C(a2, a3, a4 & 0xFFFFFFFFFFLL, a5, &v21);
  if (v5)
  {
    sub_1B69E21FC(a1);
    swift_release();
LABEL_14:
    swift_release();
    sub_1B62CA064(a3);
LABEL_15:
    swift_release();
    return sub_1B62CA064(a3);
  }
  sub_1B69E21FC(a1);
  swift_release();
LABEL_19:
  swift_release();
  sub_1B62CA064(a3);
  swift_release();
  sub_1B62CA064(a3);
  return v21;
}

uint64_t sub_1B69E39D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v12)
  {
    uint64_t v18 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v11))
    {
      swift_retain();
      swift_bridgeObjectRetain();
      char v19 = sub_1B69E39D8(a1, a2, a3, a4, a5 & 0xFFFFFFFFFFLL);
      if (v5)
      {
        swift_release();
        swift_bridgeObjectRelease();
        objc_msgSend(*(id *)(a1 + v18), sel_unlock);
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_18;
      }
      LOBYTE(v17) = v19;
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B63BADF0();
      unint64_t v20 = sub_1B6C0A538(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
      if (v21) {
        LOBYTE(v17) = 0;
      }
      else {
        LOBYTE(v17) = sub_1B69DE438(v20);
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v18), sel_unlock);
    swift_bridgeObjectRelease();
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  uint64_t v13 = *(_opaque_pthread_t **)(v12 + 144);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  char v14 = pthread_self();
  if (pthread_equal(v13, v14))
  {
    sub_1B63BADF0();
    unint64_t v15 = sub_1B6C0A538(a3, a4, a5 & 0xFFFFFFFFFFLL, 1);
    if (v16) {
      LOBYTE(v17) = 0;
    }
    else {
      LOBYTE(v17) = sub_1B69DE438(v15);
    }
    sub_1B69E21FC(a1);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_17;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v17) = sub_1B6A91638(v12, a2, a3, a4, a5 & 0xFFFFFFFFFFLL);
  swift_release();
  swift_release_n();
  swift_bridgeObjectRelease_n();
LABEL_18:
  swift_bridgeObjectRelease();
  swift_release();
  return v17 & 1;
}

uint64_t sub_1B69E3C74(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v5)
  {
    uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v12 = a2;
    objc_msgSend(v11, sel_lock);
    if (*(void *)(a1 + v4))
    {
      uint64_t v12 = v12;
      char v13 = sub_1B69E3C74(a1, v12);
      if (v2)
      {

        objc_msgSend(*(id *)(a1 + v10), sel_unlock);
        return v11 & 1;
      }
      LOBYTE(v11) = v13;
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v15 = *(void *)&v12[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
      if (!swift_weakLoadStrong())
      {
        if (*(void *)&v12[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager])
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          swift_allocObject();
          sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }
      swift_release();
      swift_retain();
      BOOL v17 = sub_1B62EC0CC((uint64_t)&type metadata for Hidden, (uint64_t)&off_1F0F9FDE0, v15);
      swift_release();
      LOBYTE(v11) = !v17;
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v10), sel_unlock);

    return v11 & 1;
  }
  int64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
  uint64_t v7 = a2;
  swift_retain();
  uint64_t v8 = pthread_self();
  if (pthread_equal(v6, v8))
  {
    sub_1B63BADF0();
    uint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
    if (!swift_weakLoadStrong())
    {
      if (*(void *)&v7[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager])
      {
        swift_retain();
      }
      else
      {
        type metadata accessor for EntityManager();
        swift_allocObject();
        sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
      }
    }
    swift_release();
    swift_retain();
    BOOL v16 = sub_1B62EC0CC((uint64_t)&type metadata for Hidden, (uint64_t)&off_1F0F9FDE0, v9);
    swift_release();
    LOBYTE(v11) = !v16;
    sub_1B69E21FC(a1);

    swift_release();
  }
  else
  {
    char v14 = v7;
    LOBYTE(v11) = sub_1B6A91744(v5, (uint64_t)v14);
    swift_release();
  }
  return v11 & 1;
}

uint64_t sub_1B69E3F68(uint64_t a1, void *a2)
{
  return sub_1B69E4740(a1, a2, (uint64_t (*)(uint64_t, id))sub_1B6A918CC, (void (*)(uint64_t *__return_ptr, id))sub_1B69F8814, (uint64_t (*)(uint64_t, id))sub_1B69E3F68) & 1;
}

uint64_t sub_1B69E3FC0(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v5)
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    char v13 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v15 = a2;
    objc_msgSend(v13, sel_lock);
    if (*(void *)(a1 + v4))
    {
      id v15 = v15;
      char v16 = sub_1B69E3FC0(a1, v15);
      if (v2)
      {

        objc_msgSend(*(id *)(a1 + v14), sel_unlock);
        return v13 & 1;
      }
      LOBYTE(v13) = v16;
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v18 = sub_1B6B5BB30();
      if (v19)
      {
        uint64_t v20 = v18;
        swift_retain();
        BOOL v21 = sub_1B62EC0CC((uint64_t)&type metadata for Hidden, (uint64_t)&off_1F0F9FDE0, v20);
        swift_release();
        LOBYTE(v13) = !v21;
      }
      else
      {
        LOBYTE(v13) = *((unsigned char *)v15 + OBJC_IVAR____TtC3VFX9VFXEffect__enabled);
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v14), sel_unlock);

    return v13 & 1;
  }
  int64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
  uint64_t v7 = a2;
  swift_retain();
  uint64_t v8 = pthread_self();
  if (pthread_equal(v6, v8))
  {
    sub_1B63BADF0();
    uint64_t v9 = sub_1B6B5BB30();
    if (v10)
    {
      uint64_t v11 = v9;
      swift_retain();
      BOOL v12 = sub_1B62EC0CC((uint64_t)&type metadata for Hidden, (uint64_t)&off_1F0F9FDE0, v11);
      swift_release();
      LOBYTE(v13) = !v12;
    }
    else
    {
      LOBYTE(v13) = v7[OBJC_IVAR____TtC3VFX9VFXEffect__enabled];
    }
    sub_1B69E21FC(a1);

    swift_release();
  }
  else
  {
    BOOL v17 = v7;
    LOBYTE(v13) = sub_1B6A918FC(v5, (uint64_t)v17);
    swift_release();
  }
  return v13 & 1;
}

uint64_t sub_1B69E41EC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v8)
  {
    uint64_t v18 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v19 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v20 = a2;
    id v21 = a3;
    id v22 = v20;
    unint64_t v23 = (char *)v21;
    objc_msgSend(v19, sel_lock);
    if (*(void *)(a1 + v7))
    {
      id v22 = v22;
      unint64_t v23 = v23;
      char v24 = sub_1B69E41EC(a1, v22, v23);
      if (v3)
      {

        objc_msgSend(*(id *)(a1 + v18), sel_unlock);
        goto LABEL_21;
      }
      LOBYTE(v19) = v24;

LABEL_20:
      objc_msgSend(*(id *)(a1 + v18), sel_unlock);

      goto LABEL_21;
    }
    sub_1B63BADF0();
    uint64_t v27 = *(void *)&v23[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_effect];
    if (v27)
    {
      uint64_t v28 = (unsigned int *)(v27 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
      if (*((unsigned char *)v28 + 4) != 1)
      {
        uint64_t v27 = *v28;
        unint64_t v29 = (unint64_t)(v27 == 0) << 33;
        goto LABEL_19;
      }
      uint64_t v27 = 0;
    }
    unint64_t v29 = 0x200000000;
LABEL_19:
    LOBYTE(v19) = sub_1B6A9A2C0(v29 | v27);
    sub_1B69E21FC(a1);
    goto LABEL_20;
  }
  uint64_t v9 = *(_opaque_pthread_t **)(v8 + 144);
  id v10 = a2;
  id v11 = a3;
  id v12 = v10;
  char v13 = (char *)v11;
  swift_retain();
  uint64_t v14 = pthread_self();
  if (pthread_equal(v9, v14))
  {
    sub_1B63BADF0();
    uint64_t v15 = *(void *)&v13[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_effect];
    if (v15)
    {
      char v16 = (unsigned int *)(v15 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
      if (*((unsigned char *)v16 + 4) != 1)
      {
        uint64_t v15 = *v16;
        unint64_t v17 = (unint64_t)(v15 == 0) << 33;
        goto LABEL_16;
      }
      uint64_t v15 = 0;
    }
    unint64_t v17 = 0x200000000;
LABEL_16:
    LOBYTE(v19) = sub_1B6A9A2C0(v17 | v15);
    sub_1B69E21FC(a1);

    swift_release();
    goto LABEL_21;
  }
  id v25 = v12;
  unint64_t v26 = v13;
  LOBYTE(v19) = sub_1B6A91A1C(v8, (uint64_t)v25, (uint64_t)v26);
  swift_release();

LABEL_21:
  return v19 & 1;
}

uint64_t sub_1B69E44AC(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v5)
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    char v13 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v15 = a2;
    objc_msgSend(v13, sel_lock);
    if (*(void *)(a1 + v4))
    {
      uint64_t v15 = v15;
      char v16 = sub_1B69E44AC(a1, v15);
      if (v2)
      {

        objc_msgSend(*(id *)(a1 + v14), sel_unlock);
        return v13 & 1;
      }
      LOBYTE(v13) = v16;
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v18 = *(unsigned int *)&v15[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v19 = *(unsigned int *)&v15[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      if (v18 == -1 && v19 == 0)
      {
        LOBYTE(v13) = 0;
      }
      else
      {
        uint64_t v21 = v18 | (v19 << 32);
        swift_retain();
        LOBYTE(v13) = sub_1B62EC0CC((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1F0F78798, v21);
        swift_release();
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v14), sel_unlock);

    return v13 & 1;
  }
  int64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
  uint64_t v7 = a2;
  swift_retain();
  uint64_t v8 = pthread_self();
  if (pthread_equal(v6, v8))
  {
    sub_1B63BADF0();
    uint64_t v9 = *(unsigned int *)&v7[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
    uint64_t v10 = *(unsigned int *)&v7[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
    if (v9 == -1 && v10 == 0)
    {
      LOBYTE(v13) = 0;
    }
    else
    {
      uint64_t v12 = v9 | (v10 << 32);
      swift_retain();
      LOBYTE(v13) = sub_1B62EC0CC((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1F0F78798, v12);
      swift_release();
    }
    sub_1B69E21FC(a1);

    swift_release();
  }
  else
  {
    unint64_t v17 = v7;
    LOBYTE(v13) = sub_1B6A91B50(v5, (uint64_t)v17);
    swift_release();
  }
  return v13 & 1;
}

uint64_t sub_1B69E46E8(uint64_t a1, void *a2)
{
  return sub_1B69E4740(a1, a2, (uint64_t (*)(uint64_t, id))sub_1B6A91C74, (void (*)(uint64_t *__return_ptr, id))sub_1B6D6506C, (uint64_t (*)(uint64_t, id))sub_1B69E46E8) & 1;
}

uint64_t sub_1B69E4740(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, id), void (*a4)(uint64_t *__return_ptr, id), uint64_t (*a5)(uint64_t, id))
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v9)
  {
    uint64_t v16 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    unint64_t v17 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v18 = a2;
    objc_msgSend(v17, sel_lock);
    if (*(void *)(a1 + v8))
    {
      id v18 = v18;
      char v19 = a5(a1, v18);
      if (v5)
      {

LABEL_13:
        objc_msgSend(*(id *)(a1 + v16), sel_unlock);

        return v14 & 1;
      }
      char v23 = v19;

      LOBYTE(v24) = v23 & 1;
    }
    else
    {
      sub_1B63BADF0();
      a4(&v24, v18);
      if (v5)
      {
        sub_1B69E21FC(a1);
        goto LABEL_13;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v16), sel_unlock);

    char v14 = v24;
    return v14 & 1;
  }
  id v11 = *(_opaque_pthread_t **)(v9 + 144);
  id v12 = a2;
  swift_retain();
  char v13 = pthread_self();
  if (pthread_equal(v11, v13))
  {
    sub_1B63BADF0();
    a4(&v24, v12);
    sub_1B69E21FC(a1);

    swift_release();
    if (!v5) {
      char v14 = v24;
    }
  }
  else
  {
    id v20 = v12;
    char v21 = a3(v9, v20);
    swift_release();

    if (!v5)
    {
      LOBYTE(v24) = v21 & 1;
      char v14 = v21 & 1;
    }
  }
  return v14 & 1;
}

uint64_t sub_1B69E494C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v13)
  {
    char v14 = *(_opaque_pthread_t **)(v13 + 144);
    swift_retain_n();
    id v15 = a3;
    swift_retain_n();
    id v16 = v15;
    swift_retain();
    unint64_t v17 = pthread_self();
    if (pthread_equal(v14, v17))
    {
      sub_1B63BADF0();
      id v18 = v16;
      swift_retain();
      sub_1B6A6AD80(0, a2, v18, a4, a5 & 1);
      a5 = v19;
      swift_release();
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      unint64_t v26 = *(pthread_mutex_t **)(v13 + 64);
      swift_retain();
      id v27 = v16;
      swift_retain();
      pthread_mutex_lock(v26);
      uint64_t v28 = runtime_thread_is_locked;
      is_locked = (_DWORD *)runtime_thread_is_locked(&runtime_thread_is_locked);
      ++*is_locked;
      if (swift_weakLoadStrong())
      {
        sub_1B63BADF0();
        swift_release();
      }
      id v30 = v27;
      swift_retain();
      sub_1B6A6AD80(0, a2, v30, a4, a5 & 1);
      a5 = v31;
      swift_release();
      if (swift_weakLoadStrong())
      {
        sub_1B69E090C();
        swift_release();
      }
      uint64_t v32 = (_DWORD *)v28(&runtime_thread_is_locked);
      --*v32;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 64));
      swift_release();
      swift_release_n();
    }
    goto LABEL_15;
  }
  uint64_t v20 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
  char v21 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
  swift_retain_n();
  id v22 = a3;
  swift_retain_n();
  id v23 = v22;
  objc_msgSend(v21, sel_lock);
  if (!*(void *)(a1 + v12))
  {
    sub_1B63BADF0();
    id v24 = v23;
    swift_retain();
    sub_1B6A6AD80(0, a2, v24, a4, a5 & 1);
    a5 = v33;
    swift_release();
    sub_1B69E21FC(a1);
LABEL_14:
    objc_msgSend(*(id *)(a1 + v20), sel_unlock);

LABEL_15:
    swift_release();

    swift_release();
    swift_release_n();
    return a5;
  }
  swift_retain();
  id v24 = v23;
  swift_retain();
  uint64_t v25 = sub_1B69E494C(a1, a2, v24, a4, a5 & 1);
  if (!v6)
  {
    a5 = v25;
    swift_release();

    swift_release();
    goto LABEL_14;
  }
  swift_release();

  swift_release();
  objc_msgSend(*(id *)(a1 + v20), sel_unlock);
  swift_release_n();

  swift_release_n();
  return a5;
}

uint64_t (*sub_1B69E4CC8(uint64_t a1, void *a2))()
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    uint64_t v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(void **)(*(void *)&v8[OBJC_IVAR____TtC3VFX8VFXScene_entityManager]
                       + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
      id v11 = (uint64_t (*)())nullsub_1;
      if (v10)
      {
        swift_retain();
        swift_retain();
        uint64_t v12 = sub_1B637A5C0();
        uint64_t v14 = v13;
        swift_release();
        swift_retain();
        id v15 = sub_1B637A5C0();
        uint64_t v17 = v16;
        swift_release();
        swift_release();
        uint64_t v10 = (void *)swift_allocObject();
        _OWORD v10[2] = v12;
        v10[3] = v14;
        v10[4] = v15;
        void v10[5] = v17;
        id v11 = sub_1B69E90C4;
      }
      id v18 = v11;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = v10;
      sub_1B69E21FC(a1);

      swift_release();
      return sub_1B69E90EC;
    }
    uint64_t v25 = v8;
    uint64_t v3 = sub_1B6A91DD0(v6, (uint64_t)v25);
    swift_release();
  }
  else
  {
    uint64_t v20 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    char v21 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v22 = a2;
    objc_msgSend(v21, sel_lock);
    if (!*(void *)(a1 + v5))
    {
      sub_1B63BADF0();
      unint64_t v26 = *(void **)(*(void *)&v22[OBJC_IVAR____TtC3VFX8VFXScene_entityManager]
                       + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
      id v27 = (uint64_t (*)())nullsub_1;
      if (v26)
      {
        swift_retain();
        swift_retain();
        uint64_t v36 = sub_1B637A5C0();
        uint64_t v29 = v28;
        swift_release();
        swift_retain();
        id v30 = sub_1B637A5C0();
        uint64_t v32 = v31;
        swift_release();
        swift_release();
        unint64_t v26 = (void *)swift_allocObject();
        v26[2] = v36;
        v26[3] = v29;
        v26[4] = v30;
        v26[5] = v32;
        id v27 = sub_1B69E90C4;
      }
      uint64_t v33 = v27;
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = v26;
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v20), sel_unlock);

      return sub_1B69E90EC;
    }
    id v23 = v22;
    uint64_t v24 = sub_1B69E4CC8(a1, v23);
    if (!v2) {
      uint64_t v3 = (uint64_t (*)())v24;
    }

    objc_msgSend(*(id *)(a1 + v20), sel_unlock);
  }
  return v3;
}

uint64_t (*sub_1B69E5050(uint64_t a1, void *a2))()
{
  uint64_t v4 = (uint64_t (*)())OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    uint64_t v7 = a2;
    swift_retain();
    uint64_t v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      uint64_t v9 = *(void **)(*(void *)(*(void *)&v7[OBJC_IVAR___VFXREScene_scene]
                                  + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                      + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
      uint64_t v10 = (uint64_t (*)())nullsub_1;
      if (v9)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v34 = sub_1B637A5C0();
        uint64_t v12 = v11;
        swift_release();
        swift_retain();
        uint64_t v13 = sub_1B637A5C0();
        uint64_t v15 = v14;
        swift_release();
        swift_release();
        uint64_t v9 = (void *)swift_allocObject();
        _OWORD v9[2] = v34;
        _OWORD v9[3] = v12;
        v9[4] = v13;
        v9[5] = v15;
        swift_release();
        uint64_t v10 = sub_1B69E90C4;
      }
      uint64_t v16 = v10;
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = v9;
      sub_1B69E21FC(a1);

      swift_release();
      return sub_1B69E90EC;
    }
    uint64_t v24 = v7;
    uint64_t v4 = sub_1B6A91FB4(v5, (uint64_t)v24);
    swift_release();
  }
  else
  {
    uint64_t v19 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v20 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    char v21 = a2;
    objc_msgSend(v20, sel_lock);
    if (!*(void *)((char *)v4 + a1))
    {
      sub_1B63BADF0();
      uint64_t v25 = *(void **)(*(void *)(*(void *)&v21[OBJC_IVAR___VFXREScene_scene]
                                   + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                       + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
      unint64_t v26 = (uint64_t (*)())nullsub_1;
      if (v25)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v36 = sub_1B637A5C0();
        uint64_t v35 = v27;
        swift_release();
        swift_retain();
        uint64_t v28 = sub_1B637A5C0();
        uint64_t v30 = v29;
        swift_release();
        swift_release();
        uint64_t v25 = (void *)swift_allocObject();
        uint64_t v25[2] = v36;
        v25[3] = v35;
        v25[4] = v28;
        v25[5] = v30;
        swift_release();
        unint64_t v26 = sub_1B69E8F00;
      }
      uint64_t v31 = v26;
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = v25;
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v19), sel_unlock);

      return sub_1B6377A84;
    }
    id v22 = v21;
    uint64_t v23 = sub_1B69E5050(a1, v22);
    if (!v2) {
      uint64_t v4 = (uint64_t (*)())v23;
    }

    objc_msgSend(*(id *)(a1 + v19), sel_unlock);
  }
  return v4;
}

void sub_1B69E5428(uint64_t a1, void *a2)
{
  sub_1B69E54D0(a1, a2, (uint64_t (*)(uint64_t, id))sub_1B6A921C4, (void (*)(uint64_t *__return_ptr, id))sub_1B69F857C, (uint64_t (*)(uint64_t, id))sub_1B69E5428);
}

void sub_1B69E547C(uint64_t a1, void *a2)
{
  sub_1B69E54D0(a1, a2, (uint64_t (*)(uint64_t, id))sub_1B6A921F0, (void (*)(uint64_t *__return_ptr, id))sub_1B6D61F60, (uint64_t (*)(uint64_t, id))sub_1B69E547C);
}

void sub_1B69E54D0(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, id), void (*a4)(uint64_t *__return_ptr, id), uint64_t (*a5)(uint64_t, id))
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v9)
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v17 = a2;
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v8))
    {
      id v17 = v17;
      uint64_t v18 = a5(a1, v17);
      if (v5)
      {

LABEL_11:
        objc_msgSend(*(id *)(a1 + v15), sel_unlock);

        return;
      }
      uint64_t v24 = v18;
      uint64_t v25 = v19;

      uint64_t v26 = v24;
      uint64_t v27 = v25;
    }
    else
    {
      sub_1B63BADF0();
      a4(&v26, v17);
      if (v5)
      {
        sub_1B69E21FC(a1);
        goto LABEL_11;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v15), sel_unlock, v26, v27);

    return;
  }
  uint64_t v11 = *(_opaque_pthread_t **)(v9 + 144);
  id v12 = a2;
  swift_retain();
  uint64_t v13 = pthread_self();
  if (pthread_equal(v11, v13))
  {
    sub_1B63BADF0();
    a4(&v26, v12);
    sub_1B69E21FC(a1);

    swift_release();
  }
  else
  {
    id v20 = v12;
    uint64_t v21 = a3(v9, v20);
    uint64_t v23 = v22;
    swift_release();

    if (!v5)
    {
      uint64_t v26 = v21;
      uint64_t v27 = v23;
    }
  }
}

uint64_t sub_1B69E56D0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v8)
  {
    uint64_t v9 = *(_opaque_pthread_t **)(v8 + 144);
    id v10 = a2;
    id v11 = a3;
    swift_retain_n();
    id v12 = v10;
    uint64_t v13 = v11;
    swift_retain();
    uint64_t v14 = pthread_self();
    if (pthread_equal(v9, v14))
    {
      sub_1B63BADF0();
      char v15 = v13[OBJC_IVAR___VFXREScene_isPrepared];
      uint64_t v16 = swift_retain();
      uint64_t v17 = sub_1B6914964(v16, v15 ^ 1u, v15);
      swift_release();
      swift_retain();
      uint64_t v18 = sub_1B6852104();
      swift_release();
      if (v18)
      {
        *(unsigned char *)(v18 + 16) = 1;
        swift_release();
      }
      swift_retain();
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      id v27 = v12;
      uint64_t v28 = v13;
      swift_retain();
      uint64_t v17 = sub_1B6A92344(v8, (uint64_t)v27, (uint64_t)v28);
      swift_release();

      swift_release();
    }
  }
  else
  {
    uint64_t v17 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v19 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v20 = a2;
    id v21 = a3;
    swift_retain_n();
    id v22 = v20;
    id v23 = v21;
    objc_msgSend(v19, sel_lock);
    uint64_t v33 = v17;
    if (*(void *)(a1 + v7))
    {
      id v24 = v22;
      id v25 = v23;
      swift_retain();
      uint64_t v26 = sub_1B69E56D0(a1, v24, v25, a4);
      if (!v36) {
        uint64_t v17 = v26;
      }

      swift_release();
      objc_msgSend(*(id *)(a1 + v33), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      char v29 = *((unsigned char *)v23 + OBJC_IVAR___VFXREScene_isPrepared);
      uint64_t v30 = swift_retain();
      uint64_t v17 = sub_1B6914964(v30, v29 ^ 1u, v29);
      swift_release();
      swift_retain();
      uint64_t v31 = sub_1B6852104();
      swift_release();
      if (v31)
      {
        *(unsigned char *)(v31 + 16) = 1;
        swift_release();
      }
      swift_retain();
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v33), sel_unlock);
    }
  }

  swift_release_n();
  return v17;
}

uint64_t sub_1B69E5ABC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v6)
  {
    uint64_t v12 = a3;
    uint64_t v13 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    char v15 = a2;
    objc_msgSend(v14, sel_lock);
    if (*(void *)(a1 + v5))
    {
      char v15 = v15;
      uint64_t v16 = sub_1B69DE104(a1, v15, v12);
      if (v3)
      {
        objc_msgSend(*(id *)(a1 + v13), sel_unlock);

        return v12;
      }
      uint64_t v12 = v16;
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v18 = *(void *)(*(void *)&v15[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      uint64_t v19 = qword_1E9DCC560;
      swift_retain();
      if (v19 != -1) {
        swift_once();
      }
      v27[0] = xmmword_1E9DD4660;
      v27[1] = *(_OWORD *)algn_1E9DD4670;
      uint64_t v28 = qword_1E9DD4680;
      sub_1B62C9DA8(v18, (uint64_t)v27, 0x200000000, v22);
      sub_1B62D7B10((uint64_t)v22, (uint64_t)v24, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
      if (v24[0])
      {
        uint64_t v12 = v24[10];
        swift_release();
        sub_1B632F170(v22);
      }
      else
      {
        swift_release();
        uint64_t v12 = 0;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v13), sel_unlock);

    return v12;
  }
  uint64_t v7 = *(_opaque_pthread_t **)(v6 + 144);
  uint64_t v8 = a2;
  swift_retain();
  uint64_t v9 = pthread_self();
  if (pthread_equal(v7, v9))
  {
    sub_1B63BADF0();
    uint64_t v10 = *(void *)(*(void *)&v8[OBJC_IVAR___VFXREScene_scene] + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
    uint64_t v11 = qword_1E9DCC560;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    v25[0] = xmmword_1E9DD4660;
    v25[1] = *(_OWORD *)algn_1E9DD4670;
    uint64_t v26 = qword_1E9DD4680;
    sub_1B62C9DA8(v10, (uint64_t)v25, 0x200000000, v21);
    sub_1B62D7B10((uint64_t)v21, (uint64_t)v23, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (v23[0])
    {
      uint64_t v12 = v23[10];
      swift_release();
      sub_1B632F170(v21);
    }
    else
    {
      swift_release();
      uint64_t v12 = 0;
    }
    sub_1B69E21FC(a1);

    swift_release();
  }
  else
  {
    uint64_t v17 = v8;
    uint64_t v12 = sub_1B6A924C8(v6, (uint64_t)v17);
    swift_release();
  }
  return v12;
}

void sub_1B69E5DF8(uint64_t a1, void *a2)
{
  uint64_t v3 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v4)
  {
    uint64_t v5 = *(_opaque_pthread_t **)(v4 + 144);
    uint64_t v6 = a2;
    swift_retain();
    uint64_t v7 = pthread_self();
    if (pthread_equal(v5, v7))
    {
      sub_1B63BADF0();
      id v8 = *(id *)&v6[OBJC_IVAR___VFXREScene_scene];
      uint64_t v9 = swift_retain();
      sub_1B6B39F10(v9, (uint64_t)&v17);
      swift_release();
      sub_1B62D7B10((uint64_t)&v17, (uint64_t)v19, &qword_1E9DCE168, (uint64_t)&type metadata for AABB);

      sub_1B69E21FC(a1);
      swift_release();
    }
    else
    {
      uint64_t v14 = v6;
      sub_1B6A9267C(v4, (uint64_t)v14);
      swift_release();
    }
  }
  else
  {
    uint64_t v10 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v11 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    uint64_t v12 = a2;
    objc_msgSend(v11, sel_lock);
    if (*(void *)(a1 + v3))
    {
      uint64_t v13 = v12;
      sub_1B69E5DF8(a1, v13);

      objc_msgSend(*(id *)(a1 + v10), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      id v15 = *(id *)&v12[OBJC_IVAR___VFXREScene_scene];
      uint64_t v16 = swift_retain();
      sub_1B6B39F10(v16, (uint64_t)&v18);
      swift_release();
      sub_1B62D7B10((uint64_t)&v18, (uint64_t)v20, &qword_1E9DCE168, (uint64_t)&type metadata for AABB);

      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v10), sel_unlock);
    }
  }
}

uint64_t sub_1B69E6148(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v13)
  {
    uint64_t v26 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v18 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v19 = a2;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v20 = v19;
    objc_msgSend(v18, sel_lock);
    if (*(void *)(a1 + v12))
    {
      id v20 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_1B69E6148(a1, v20, a3, a4, a5, a6);
      if (v6)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_13:
        objc_msgSend(*(id *)(a1 + v26), sel_unlock);
        swift_bridgeObjectRelease();

        goto LABEL_14;
      }
      uint64_t v24 = v21;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = v24;
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B5D6C0((uint64_t)v20, a3, a4, a5, a6, &v28);
      if (v6)
      {
        sub_1B69E21FC(a1);
        goto LABEL_13;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v26), sel_unlock);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    goto LABEL_19;
  }
  uint64_t v14 = *(_opaque_pthread_t **)(v13 + 144);
  id v15 = a2;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v16 = v15;
  swift_retain();
  uint64_t v17 = pthread_self();
  if (!pthread_equal(v14, v17))
  {
    id v22 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_1B6A92824(v13, (uint64_t)v22, a3, a4, a5, a6);
    swift_release();

    if (v6)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v28 = v23;
LABEL_19:
    a4 = v28;
    swift_bridgeObjectRelease();
    return a4;
  }
  sub_1B63BADF0();
  sub_1B6B5D6C0((uint64_t)v16, a3, a4, a5, a6, &v28);
  if (!v6)
  {
    sub_1B69E21FC(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    swift_release();
    goto LABEL_19;
  }
  sub_1B69E21FC(a1);
  swift_bridgeObjectRelease();

  swift_release();
LABEL_14:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t sub_1B69E6494(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  uint64_t v11 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v12)
  {
    uint64_t v17 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v18 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v19 = a2;
    swift_bridgeObjectRetain_n();
    id v20 = v19;
    objc_msgSend(v18, sel_lock);
    if (*(void *)(a1 + v11))
    {
      id v20 = v20;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_1B69E6494(a1, v20, a3, a4, a5);
      if (v5)
      {

        swift_bridgeObjectRelease();
        objc_msgSend(*(id *)(a1 + v17), sel_unlock);
        swift_bridgeObjectRelease();

        uint64_t v9 = a2;
        goto LABEL_11;
      }
      a4 = v21;

      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B63BADF0();
      sub_1B639D66C();
      a4 = sub_1B6B64914(a3, 0, 0, a4, a5);
      swift_release();
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v17), sel_unlock);
    swift_bridgeObjectRelease();

    uint64_t v9 = a2;
    goto LABEL_11;
  }
  uint64_t v13 = *(_opaque_pthread_t **)(v12 + 144);
  id v14 = a2;
  swift_bridgeObjectRetain_n();
  id v15 = v14;
  swift_retain();
  id v16 = pthread_self();
  if (pthread_equal(v13, v16))
  {
    sub_1B63BADF0();
    sub_1B639D66C();
    a4 = sub_1B6B64914(a3, 0, 0, a4, a5);
    swift_release();
    sub_1B69E21FC(a1);
    swift_bridgeObjectRelease();

    swift_release();
  }
  else
  {
    id v22 = v15;
    swift_bridgeObjectRetain();
    a4 = sub_1B6A9297C(v12, (uint64_t)v22, a3, a4, a5);
    swift_release();

    swift_bridgeObjectRelease_n();
  }
LABEL_11:
  swift_bridgeObjectRelease();

  return a4;
}

void sub_1B69E6724(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    id v7 = a2;
    swift_retain();
    id v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      sub_1B6B5FD80((uint64_t)v7, &v16);
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      id v13 = v7;
      uint64_t v14 = sub_1B6A92A88(v5, (uint64_t)v13);
      swift_release();

      if (!v2) {
        uint64_t v16 = v14;
      }
    }
  }
  else
  {
    uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v11 = a2;
    objc_msgSend(v10, sel_lock);
    if (*(void *)(a1 + v4))
    {
      id v11 = v11;
      uint64_t v12 = sub_1B69E6724(a1, v11);
      if (v2)
      {
      }
      else
      {
        uint64_t v15 = v12;

        uint64_t v16 = v15;
      }
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B5FD80((uint64_t)v11, &v16);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v9), sel_unlock);
  }
}

void sub_1B69E6900(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v10)
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v17 = a2;
    swift_bridgeObjectRetain_n();
    id v18 = v17;
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v9))
    {
      id v18 = v18;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1B69E6900(a1, v18, a3, a4);
      if (v4)
      {

        swift_bridgeObjectRelease();
LABEL_13:
        objc_msgSend(*(id *)(a1 + v15), sel_unlock);
        swift_bridgeObjectRelease();

        goto LABEL_14;
      }
      uint64_t v22 = v19;

      swift_bridgeObjectRelease();
      uint64_t v23 = v22;
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6B606C8((uint64_t)v18, a3, a4, &v23);
      if (v4)
      {
        sub_1B69E21FC(a1);
        goto LABEL_13;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v15), sel_unlock);
    swift_bridgeObjectRelease_n();

    return;
  }
  id v11 = *(_opaque_pthread_t **)(v10 + 144);
  id v12 = a2;
  swift_bridgeObjectRetain_n();
  id v13 = v12;
  swift_retain();
  uint64_t v14 = pthread_self();
  if (pthread_equal(v11, v14))
  {
    sub_1B63BADF0();
    sub_1B6B606C8((uint64_t)v13, a3, a4, &v23);
    if (!v4)
    {
      sub_1B69E21FC(a1);
      swift_bridgeObjectRelease_n();

      swift_release();
      return;
    }
    sub_1B69E21FC(a1);
    swift_bridgeObjectRelease();

    swift_release();
    goto LABEL_14;
  }
  id v20 = v13;
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_1B6A92BA0(v10, (uint64_t)v20, a3, a4);
  swift_release();

  if (v4)
  {
    swift_bridgeObjectRelease_n();
LABEL_14:
    swift_bridgeObjectRelease();

    return;
  }

  swift_bridgeObjectRelease_n();
  uint64_t v23 = v21;
}

void sub_1B69E6BA0(uint64_t a1, void *a2)
{
  sub_1B69E6C9C(a1, a2, (double (*)(uint64_t, id))sub_1B6A92CD0, (void (*)(long long *__return_ptr, id))sub_1B6D62938, (void (*)(uint64_t, id))sub_1B69E6BA0);
}

void sub_1B69E6BF4(uint64_t a1, void *a2)
{
  sub_1B69E6C9C(a1, a2, (double (*)(uint64_t, id))sub_1B6A92CFC, (void (*)(long long *__return_ptr, id))sub_1B6D63030, (void (*)(uint64_t, id))sub_1B69E6BF4);
}

void sub_1B69E6C48(uint64_t a1, void *a2)
{
  sub_1B69E6C9C(a1, a2, (double (*)(uint64_t, id))sub_1B6A92D28, (void (*)(long long *__return_ptr, id))sub_1B6D64578, (void (*)(uint64_t, id))sub_1B69E6C48);
}

void sub_1B69E6C9C(uint64_t a1, void *a2, double (*a3)(uint64_t, id), void (*a4)(long long *__return_ptr, id), void (*a5)(uint64_t, id))
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v9)
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v17 = a2;
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v8))
    {
      id v17 = v17;
      a5(a1, v17);
      if (v5)
      {

LABEL_11:
        objc_msgSend(*(id *)(a1 + v15), sel_unlock);

        return;
      }
      long long v27 = v18;
      long long v29 = v19;
      long long v31 = v20;
      long long v33 = v21;

      long long v35 = v27;
      long long v36 = v29;
      long long v37 = v31;
      long long v38 = v33;
    }
    else
    {
      sub_1B63BADF0();
      a4(&v35, v17);
      if (v5)
      {
        sub_1B69E21FC(a1);
        goto LABEL_11;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v15), sel_unlock, v27, v29, v31, v33);

    return;
  }
  id v11 = *(_opaque_pthread_t **)(v9 + 144);
  id v12 = a2;
  swift_retain();
  id v13 = pthread_self();
  if (pthread_equal(v11, v13))
  {
    sub_1B63BADF0();
    a4(&v35, v12);
    sub_1B69E21FC(a1);

    swift_release();
  }
  else
  {
    id v22 = v12;
    *(double *)&long long v23 = a3(v9, v22);
    long long v32 = v24;
    long long v34 = v23;
    long long v28 = v26;
    long long v30 = v25;
    swift_release();

    if (!v5)
    {
      long long v35 = v34;
      long long v36 = v32;
      long long v37 = v30;
      long long v38 = v28;
    }
  }
}

void sub_1B69E6EC8(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v5)
  {
    uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v11 = a2;
    objc_msgSend(v10, sel_lock);
    if (*(void *)(a1 + v4))
    {
      id v11 = v11;
      sub_1B69E6EC8(a1, v11);
      if (v2)
      {

LABEL_11:
        objc_msgSend(*(id *)(a1 + v9), sel_unlock);

        return;
      }
      long long v15 = v12;

      long long v17 = v15;
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6D63550((uint64_t)v11, &v17);
      if (v2)
      {
        sub_1B69E21FC(a1);
        goto LABEL_11;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v9), sel_unlock, v15);

    return;
  }
  uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
  id v7 = a2;
  swift_retain();
  uint64_t v8 = pthread_self();
  if (pthread_equal(v6, v8))
  {
    sub_1B63BADF0();
    sub_1B6D63550((uint64_t)v7, &v17);
    sub_1B69E21FC(a1);

    swift_release();
  }
  else
  {
    id v13 = v7;
    *(double *)&long long v14 = sub_1B6A92E80(v5, (uint64_t)v13);
    long long v16 = v14;
    swift_release();

    if (!v2) {
      long long v17 = v16;
    }
  }
}

void sub_1B69E70A8(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (!v5)
  {
    uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v11 = a2;
    objc_msgSend(v10, sel_lock);
    if (*(void *)(a1 + v4))
    {
      id v11 = v11;
      sub_1B69E70A8(a1, v11);
      if (v2)
      {

LABEL_11:
        objc_msgSend(*(id *)(a1 + v9), sel_unlock);

        return;
      }
      long long v15 = v12;

      long long v17 = v15;
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6D63CE4((uint64_t)v11, &v17);
      if (v2)
      {
        sub_1B69E21FC(a1);
        goto LABEL_11;
      }
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v9), sel_unlock, v15);

    return;
  }
  uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
  id v7 = a2;
  swift_retain();
  uint64_t v8 = pthread_self();
  if (pthread_equal(v6, v8))
  {
    sub_1B63BADF0();
    sub_1B6D63CE4((uint64_t)v7, &v17);
    sub_1B69E21FC(a1);

    swift_release();
  }
  else
  {
    id v13 = v7;
    *(double *)&long long v14 = sub_1B6A92FA0(v5, (uint64_t)v13);
    long long v16 = v14;
    swift_release();

    if (!v2) {
      long long v17 = v16;
    }
  }
}

float sub_1B69E7288(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    id v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v11 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v10 != -1 || v11 != 0)
      {
        uint64_t v13 = v10 | (v11 << 32);
        swift_retain();
        sub_1B695EBC4(v13, v25);
        swift_release();
        if (v26 != 2) {
          float v3 = (float)(*(float *)v25 * 180.0) / 3.1416;
        }
      }
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      long long v19 = v8;
      float v3 = sub_1B6A930C0(v6, (uint64_t)v19);
      swift_release();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    long long v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    long long v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      long long v17 = v16;
      sub_1B69E7288(a1, v17);
      if (!v2) {
        float v3 = v18;
      }

      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v20 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v21 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v20 != -1 || v21 != 0)
      {
        uint64_t v23 = v20 | (v21 << 32);
        swift_retain();
        sub_1B695EBC4(v23, v25);
        swift_release();
        if (v26 != 2) {
          float v3 = (float)(*(float *)v25 * 180.0) / 3.1416;
        }
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
  }
  return v3;
}

float sub_1B69E7514(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    id v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v11 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v10 != -1 || v11 != 0)
      {
        uint64_t v13 = v10 | (v11 << 32);
        swift_retain();
        sub_1B695EBC4(v13, v25);
        swift_release();
        if (v26 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = *((float *)v25 + 1);
        }
      }
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      long long v19 = v8;
      float v3 = sub_1B6A9320C(v6, (uint64_t)v19);
      swift_release();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    long long v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    long long v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      long long v17 = v16;
      sub_1B69E7514(a1, v17);
      if (!v2) {
        float v3 = v18;
      }

      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v20 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v21 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v20 != -1 || v21 != 0)
      {
        uint64_t v23 = v20 | (v21 << 32);
        swift_retain();
        sub_1B695EBC4(v23, v25);
        swift_release();
        if (v26 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = *((float *)v25 + 1);
        }
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
  }
  return v3;
}

float sub_1B69E7770(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    id v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v11 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v10 != -1 || v11 != 0)
      {
        uint64_t v13 = v10 | (v11 << 32);
        swift_retain();
        sub_1B695EBC4(v13, v25);
        swift_release();
        if (v26 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = *((float *)v25 + 2);
        }
      }
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      long long v19 = v8;
      float v3 = sub_1B6A93348(v6, (uint64_t)v19);
      swift_release();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    long long v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    long long v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      long long v17 = v16;
      sub_1B69E7770(a1, v17);
      if (!v2) {
        float v3 = v18;
      }

      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v20 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v21 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v20 != -1 || v21 != 0)
      {
        uint64_t v23 = v20 | (v21 << 32);
        swift_retain();
        sub_1B695EBC4(v23, v25);
        swift_release();
        if (v26 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = *((float *)v25 + 2);
        }
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
  }
  return v3;
}

float sub_1B69E79CC(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    id v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v11 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v10 != -1 || v11 != 0)
      {
        uint64_t v13 = v10 | (v11 << 32);
        swift_retain();
        sub_1B695EBC4(v13, v25);
        swift_release();
        if (v26 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = *((float *)v25 + 3);
        }
      }
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      long long v19 = v8;
      float v3 = sub_1B6A93484(v6, (uint64_t)v19);
      swift_release();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    long long v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    long long v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      long long v17 = v16;
      sub_1B69E79CC(a1, v17);
      if (!v2) {
        float v3 = v18;
      }

      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v20 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v21 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v20 != -1 || v21 != 0)
      {
        uint64_t v23 = v20 | (v21 << 32);
        swift_retain();
        sub_1B695EBC4(v23, v25);
        swift_release();
        if (v26 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = *((float *)v25 + 3);
        }
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
  }
  return v3;
}

float sub_1B69E7C28(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    id v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v11 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v10 != -1 || v11 != 0)
      {
        uint64_t v13 = v10 | (v11 << 32);
        swift_retain();
        sub_1B695EBC4(v13, &v25);
        swift_release();
        if (v27 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = v26;
        }
      }
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      long long v19 = v8;
      float v3 = sub_1B6A935C0(v6, (uint64_t)v19);
      swift_release();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    long long v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    long long v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      long long v17 = v16;
      sub_1B69E7C28(a1, v17);
      if (!v2) {
        float v3 = v18;
      }

      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v20 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v21 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v20 != -1 || v21 != 0)
      {
        uint64_t v23 = v20 | (v21 << 32);
        swift_retain();
        sub_1B695EBC4(v23, &v25);
        swift_release();
        if (v27 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = v26;
        }
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
  }
  return v3;
}

float sub_1B69E7E84(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    id v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v11 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v10 != -1 || v11 != 0)
      {
        uint64_t v13 = v10 | (v11 << 32);
        swift_retain();
        sub_1B695EBC4(v13, &v25);
        swift_release();
        if (v27 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = v26;
        }
      }
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      long long v19 = v8;
      float v3 = sub_1B6A936FC(v6, (uint64_t)v19);
      swift_release();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    long long v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    long long v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      long long v17 = v16;
      sub_1B69E7E84(a1, v17);
      if (!v2) {
        float v3 = v18;
      }

      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v20 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v21 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v20 != -1 || v21 != 0)
      {
        uint64_t v23 = v20 | (v21 << 32);
        swift_retain();
        sub_1B695EBC4(v23, &v25);
        swift_release();
        if (v27 == 2) {
          float v3 = 0.0;
        }
        else {
          float v3 = v26;
        }
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
  }
  return v3;
}

float sub_1B69E80E0(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    id v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v11 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v10 != -1 || v11 != 0)
      {
        uint64_t v13 = v10 | (v11 << 32);
        swift_retain();
        sub_1B695EBC4(v13, &v25);
        swift_release();
        if (v27 != 2) {
          float v3 = *((float *)&v25 + 3) / v26;
        }
      }
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      long long v19 = v8;
      float v3 = sub_1B6A93838(v6, (uint64_t)v19);
      swift_release();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    long long v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    long long v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      long long v17 = v16;
      sub_1B69E80E0(a1, v17);
      if (!v2) {
        float v3 = v18;
      }

      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v20 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v21 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      float v3 = 0.0;
      if (v20 != -1 || v21 != 0)
      {
        uint64_t v23 = v20 | (v21 << 32);
        swift_retain();
        sub_1B695EBC4(v23, &v25);
        swift_release();
        if (v27 != 2) {
          float v3 = *((float *)&v25 + 3) / v26;
        }
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
  }
  return v3;
}

void sub_1B69E833C(uint64_t a1, void *a2)
{
  sub_1B69E8438(a1, a2, (float (*)(uint64_t, id))sub_1B6A9396C, (void (*)(uint64_t *__return_ptr, id))sub_1B6D64A90, (void (*)(uint64_t, id))sub_1B69E833C);
}

void sub_1B69E8390(uint64_t a1, void *a2)
{
  sub_1B69E8438(a1, a2, (float (*)(uint64_t, id))sub_1B6A93998, (void (*)(uint64_t *__return_ptr, id))sub_1B6D64BC8, (void (*)(uint64_t, id))sub_1B69E8390);
}

void sub_1B69E83E4(uint64_t a1, void *a2)
{
  sub_1B69E8438(a1, a2, (float (*)(uint64_t, id))sub_1B6A939C4, (void (*)(uint64_t *__return_ptr, id))sub_1B6D64E20, (void (*)(uint64_t, id))sub_1B69E83E4);
}

void sub_1B69E8438(uint64_t a1, void *a2, float (*a3)(uint64_t, id), void (*a4)(uint64_t *__return_ptr, id), void (*a5)(uint64_t, id))
{
  uint64_t v8 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v9)
  {
    uint64_t v11 = *(_opaque_pthread_t **)(v9 + 144);
    id v12 = a2;
    swift_retain();
    uint64_t v13 = pthread_self();
    if (pthread_equal(v11, v13))
    {
      sub_1B63BADF0();
      a4(&v22, v12);
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      id v19 = v12;
      float v20 = a3(v9, v19);
      swift_release();

      if (!v5) {
        *(float *)&uint64_t v22 = v20;
      }
    }
  }
  else
  {
    uint64_t v15 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    long long v16 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v17 = a2;
    objc_msgSend(v16, sel_lock);
    if (*(void *)(a1 + v8))
    {
      id v17 = v17;
      a5(a1, v17);
      if (v5)
      {
      }
      else
      {
        int v21 = v18;

        LODWORD(v22) = v21;
      }
    }
    else
    {
      sub_1B63BADF0();
      a4(&v22, v17);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v15), sel_unlock);
  }
}

double sub_1B69E8634(uint64_t a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v6)
  {
    id v7 = *(_opaque_pthread_t **)(v6 + 144);
    uint64_t v8 = a2;
    swift_retain();
    uint64_t v9 = pthread_self();
    if (pthread_equal(v7, v9))
    {
      sub_1B63BADF0();
      uint64_t v10 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v11 = *(unsigned int *)&v8[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      int8x8_t v3 = 0;
      if (v10 != -1 || v11 != 0)
      {
        uint64_t v13 = v10 | (v11 << 32);
        swift_retain();
        sub_1B695EBC4(v13, v25);
        swift_release();
        int8x8_t v3 = vbic_s8(v27, (int8x8_t)vceqd_s64(v26, 2));
      }
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      id v19 = v8;
      int8x8_t v3 = sub_1B6A93B18(v6, (uint64_t)v19);
      swift_release();
    }
  }
  else
  {
    uint64_t v14 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    long long v16 = a2;
    objc_msgSend(v15, sel_lock);
    if (*(void *)(a1 + v5))
    {
      id v17 = v16;
      sub_1B69E8634(a1, v17);
      if (!v2) {
        int8x8_t v3 = v18;
      }

      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
    else
    {
      sub_1B63BADF0();
      uint64_t v20 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
      uint64_t v21 = *(unsigned int *)&v16[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4];
      int8x8_t v3 = 0;
      if (v20 != -1 || v21 != 0)
      {
        uint64_t v23 = v20 | (v21 << 32);
        swift_retain();
        sub_1B695EBC4(v23, v25);
        swift_release();
        int8x8_t v3 = vbic_s8(v27, (int8x8_t)vceqd_s64(v26, 2));
      }
      sub_1B69E21FC(a1);
      objc_msgSend(*(id *)(a1 + v14), sel_unlock);
    }
  }
  return *(double *)&v3;
}

void sub_1B69E88A0(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
  if (v5)
  {
    uint64_t v6 = *(_opaque_pthread_t **)(v5 + 144);
    id v7 = a2;
    swift_retain();
    uint64_t v8 = pthread_self();
    if (pthread_equal(v6, v8))
    {
      sub_1B63BADF0();
      sub_1B6D65278(v7, &v16);
      sub_1B69E21FC(a1);

      swift_release();
    }
    else
    {
      uint64_t v13 = v7;
      char v14 = sub_1B6A93C5C(v5, v13);
      swift_release();

      if (!v2) {
        char v16 = v14;
      }
    }
  }
  else
  {
    uint64_t v9 = OBJC_IVAR____TtC3VFX13EntityManager_syncLock;
    uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_syncLock);
    id v11 = a2;
    objc_msgSend(v10, sel_lock);
    if (*(void *)(a1 + v4))
    {
      id v11 = v11;
      char v12 = sub_1B69E88A0(a1, v11);
      if (v2)
      {
      }
      else
      {
        char v15 = v12;

        char v16 = v15;
      }
    }
    else
    {
      sub_1B63BADF0();
      sub_1B6D65278((char *)v11, &v16);
      sub_1B69E21FC(a1);
    }
    objc_msgSend(*(id *)(a1 + v9), sel_unlock);
  }
}

uint64_t type metadata accessor for EntityManagerActor()
{
  return self;
}

uint64_t sub_1B69E8AA0()
{
  return type metadata accessor for EntityManager();
}

unsigned char *storeEnumTagSinglePayload for EntityManager.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B69E8B74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityManager.State()
{
  return &type metadata for EntityManager.State;
}

ValueMetadata *type metadata accessor for EntityManager.ActiveState()
{
  return &type metadata for EntityManager.ActiveState;
}

ValueMetadata *type metadata accessor for EntityManager.EntityEntry()
{
  return &type metadata for EntityManager.EntityEntry;
}

unint64_t sub_1B69E8BD0()
{
  unint64_t result = qword_1E9DD39A0;
  if (!qword_1E9DD39A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD39A0);
  }
  return result;
}

BOOL sub_1B69E8C24(void *a1)
{
  return sub_1B69E0544(a1, *(void **)(v1 + 16));
}

void sub_1B69E8C44()
{
  if (!qword_1E9DD39B0)
  {
    sub_1B631424C(255, &qword_1EB97D878, (uint64_t)&type metadata for ChunksStorage.FilteredChunk, MEMORY[0x1E4FBBB30]);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD39B0);
    }
  }
}

uint64_t sub_1B69E8CC0(uint64_t a1, uint64_t a2)
{
  sub_1B629A550(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1B69E8D24(uint64_t a1)
{
}

void sub_1B69E8D58(uint64_t a1)
{
}

void sub_1B69E8D8C(uint64_t a1)
{
}

void sub_1B69E8DC0(uint64_t a1)
{
}

void sub_1B69E8DF4(uint64_t a1)
{
}

void sub_1B69E8E28(uint64_t a1)
{
}

uint64_t sub_1B69E8E5C(uint64_t a1)
{
  return sub_1B69E8E74(a1);
}

uint64_t sub_1B69E8E74(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 25)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return sub_1B6A4E6A4(a1, v2 | *(unsigned __int8 *)(v1 + 24), *(float *)(v1 + 16), *(float *)(v1 + 20));
}

double sub_1B69E8EA8(uint64_t a1)
{
  *(void *)&double result = sub_1B6A789F4(a1, *(void *)(v1 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_1B69E8EC4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B69E8F00()
{
  return sub_1B6C9CCB4(*(uint64_t (**)(void))(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

void sub_1B69E8F10()
{
  if (!qword_1E9DD39B8)
  {
    unint64_t v0 = sub_1B6E32B88();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD39B8);
    }
  }
}

id sub_1B69E8F7C()
{
  return sub_1B69E2150(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1B69E8F90()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void *sub_1B69E8FD0(void *a1)
{
  return sub_1B6B648EC(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

ValueMetadata *type metadata accessor for GroupSet()
{
  return &type metadata for GroupSet;
}

unint64_t sub_1B69E9008()
{
  unint64_t result = qword_1E9DD39C0;
  if (!qword_1E9DD39C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD39C0);
  }
  return result;
}

unint64_t sub_1B69E9060()
{
  unint64_t result = qword_1E9DD39C8;
  if (!qword_1E9DD39C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD39C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSet.Iterator()
{
  return &type metadata for GroupSet.Iterator;
}

void *sub_1B69E90D4(void *a1)
{
  return sub_1B69E8FD0(a1);
}

double sub_1B69E90F0(uint64_t a1)
{
  return sub_1B69E8EA8(a1);
}

uint64_t sub_1B69E9108()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E91FC()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9368()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9490()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E95AC()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E96C0()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E979C()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9914()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9A38()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9B74()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9CB0()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9DB4()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9F24()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69E9FF4()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69EA160()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69EA2CC()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69EA360()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B69EA4C8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EA5CC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EA6F4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EA818()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EA950()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EAA7C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EABA8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EACCC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EAD64()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EAE54()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EAF88()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB088()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB198()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB2E4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB3CC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB518()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB62C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB6B0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB79C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB87C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EB9F8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EBADC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EBC18()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EBD28()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EBE00()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EBEF4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EBFCC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EC050()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EC0F8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EC210()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EC388()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EC45C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B69EC5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C69A0);
}

uint64_t sub_1B69EC5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C6A94);
}

uint64_t sub_1B69EC614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C6B88);
}

uint64_t sub_1B69EC65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C6C7C);
}

uint64_t sub_1B69EC69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EEA6C(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD740);
}

uint64_t sub_1B69EC6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EEA6C(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD7B8);
}

uint64_t sub_1B69EC72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD830);
}

uint64_t sub_1B69EC770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD8A8);
}

uint64_t sub_1B69EC7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE408(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD920);
}

uint64_t sub_1B69EC7FC(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = sub_1B6ADD998(*(void *)(*(void *)(v2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 24, a2), !v3)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EC9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE014(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADDC48);
}

uint64_t sub_1B69EC9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE014(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD3CC);
}

uint64_t sub_1B69ECA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8AB8);
}

uint64_t sub_1B69ECA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8AFC);
}

uint64_t sub_1B69ECAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C7814);
}

uint64_t sub_1B69ECB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C7438);
}

uint64_t sub_1B69ECB4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE014(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD4BC);
}

uint64_t sub_1B69ECB90(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = sub_1B6ADD650(*(void *)(*(void *)(v2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 656, a2), !v3)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69ECD40(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = sub_1B6ADE108(*(void *)(*(void *)(v2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 144, a2), !v3)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69ECEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE5FC(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE1F8);
}

uint64_t sub_1B69ECF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE014(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE270);
}

uint64_t sub_1B69ECF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD444);
}

uint64_t sub_1B69ECFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE4EC);
}

uint64_t sub_1B69ECFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8CD8);
}

uint64_t sub_1B69ED034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE56C);
}

uint64_t sub_1B69ED078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8E70);
}

uint64_t sub_1B69ED0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE78C);
}

uint64_t sub_1B69ED100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8EC4);
}

uint64_t sub_1B69ED144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE80C);
}

uint64_t sub_1B69ED188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8F18);
}

uint64_t sub_1B69ED1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE88C);
}

uint64_t sub_1B69ED210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8F6C);
}

uint64_t sub_1B69ED254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE90C);
}

uint64_t sub_1B69ED298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8FC0);
}

uint64_t sub_1B69ED2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADE98C);
}

uint64_t sub_1B69ED320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C8C84);
}

uint64_t sub_1B69ED364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADEA0C);
}

uint64_t sub_1B69ED3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED3EC(a1, a2, a3, (uint64_t (*)(void))sub_1B66C9014);
}

uint64_t sub_1B69ED3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (!v4 && (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69ED518(uint64_t a1, void (*a2)(long long *), uint64_t a3)
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = sub_1B6ADEA8C(*(void *)(*(void *)(v3 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 16, a2, a3, v3, a1), !v4)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69ED6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE210(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADEBA0);
}

uint64_t sub_1B69ED70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69ED748(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADECA8);
}

uint64_t sub_1B69ED748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = a4(*(void *)(*(void *)(v4 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v6 + 12 * (int)a1 + 4), 16, a2, a3), !v5)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69ED8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE834(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADED20);
}

uint64_t sub_1B69ED938(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = sub_1B6ADED98(*(void *)(*(void *)(v2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 80, a2), !v3)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EDADC(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = sub_1B6ADEE10(*(void *)(*(void *)(v2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 48, a2), !v3)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EDC80(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v4 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = sub_1B6ADEE88(*(void *)(*(void *)(v2 + 136) + 8 * *(int *)(v4 + 12 * (int)a1) + 32), *(_WORD *)(v4 + 12 * (int)a1 + 4), 20, a2), !v3)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EDE24(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = sub_1B6ADEF00(*(void *)(*(void *)(v3 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_WORD *)(v5 + 12 * (int)a1 + 4), 32, a2, a3, v3, a1), !v4)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EDFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE014(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADF064);
}

uint64_t sub_1B69EE014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = a4(*(void *)(*(void *)(v4 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v6 + 12 * (int)a1 + 4), 8, a2, a3), !v5)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EE1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE210(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADD534);
}

uint64_t sub_1B69EE210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = a4(*(void *)(*(void *)(v4 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v6 + 12 * (int)a1 + 4), 8, a2, a3), !v5)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EE3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE408(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADF27C);
}

uint64_t sub_1B69EE408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = a4(*(void *)(*(void *)(v4 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v6 + 12 * (int)a1 + 4), 4, a2, a3), !v5)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EE5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE5FC(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADF44C);
}

uint64_t sub_1B69EE5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = a4(*(void *)(*(void *)(v4 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v6 + 12 * (int)a1 + 4), 32, a2, a3), !v5)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EE7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE834(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADF4C4);
}

uint64_t sub_1B69EE7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EE834(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADF53C);
}

uint64_t sub_1B69EE834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = a4(*(void *)(*(void *)(v4 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v6 + 12 * (int)a1 + 4), 40, a2, a3), !v5)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EE9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EEA6C(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADF5B4);
}

uint64_t sub_1B69EEA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B69EEA6C(a1, a2, a3, (uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))sub_1B6ADF62C);
}

uint64_t sub_1B69EEA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, uint64_t, uint64_t, uint64_t))
{
  if (a1 == 0xFFFFFFFFLL
    || a1 << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)a1 >= *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) != -1)
    && *(_DWORD *)(v6 + 12 * (int)a1 + 8) != HIDWORD(a1)
    || (uint64_t result = a4(*(void *)(*(void *)(v4 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32), *(unsigned __int16 *)(v6 + 12 * (int)a1 + 4), 64, a2, a3), !v5)&& (result & 1) == 0)
  {
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B681F698();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B69EEC1C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v30 = MEMORY[0x1E4FBC860];
    sub_1B6C3D72C(0, v1, 0);
    uint64_t v2 = v30;
    unint64_t v4 = sub_1B6860A50(a1);
    uint64_t v5 = 0;
    uint64_t v22 = a1 + 64;
    do
    {
      uint64_t v6 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v4);
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8 * v4);
      uint64_t v24 = 0;
      swift_unknownObjectWeakInit();
      uint64_t v24 = 0;
      swift_unknownObjectWeakAssign();
      uint64_t v25 = v7;
      unint64_t v26 = v8;
      sub_1B6649008((uint64_t)v23, (uint64_t)v27);
      swift_bridgeObjectRetain_n();
      swift_unknownObjectRetain();
      swift_getObjectType();
      uint64_t v10 = swift_conformsToProtocol2();
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      if (v10) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 0;
      }
      sub_1B664D9F0((uint64_t)v27, (uint64_t)v28);
      uint64_t v24 = 0;
      swift_unknownObjectWeakInit();
      if (v12)
      {
        uint64_t v24 = v11;
        swift_unknownObjectWeakAssign();
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(ObjectType, v11);
        unint64_t v26 = v14;
      }
      else
      {
        uint64_t v24 = 0;
        swift_unknownObjectWeakAssign();
        uint64_t v25 = 0x3E6C6C756E3CLL;
        unint64_t v26 = 0xE600000000000000;
      }
      sub_1B6649008((uint64_t)v23, (uint64_t)&v29);
      sub_1B66490B8((uint64_t)v27);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v30 = v2;
      unint64_t v16 = *(void *)(v2 + 16);
      unint64_t v15 = *(void *)(v2 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B6C3D72C(v15 > 1, v16 + 1, 1);
        uint64_t v2 = v30;
      }
      *(void *)(v2 + 16) = v16 + 1;
      sub_1B6A029E8((uint64_t)v28, v2 + (v16 << 6) + 32, (uint64_t (*)(void))sub_1B6A02984);
      unint64_t v17 = v4 >> 6;
      if ((*(void *)(v22 + 8 * (v4 >> 6)) & (-2 << v4)) != 0)
      {
        unint64_t v4 = __clz(__rbit64(*(void *)(v22 + 8 * (v4 >> 6)) & (-2 << v4))) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
        unint64_t v18 = v17 + 1;
        unint64_t v19 = (v4 + 63) >> 6;
        if (v17 + 1 < v19)
        {
          unint64_t v20 = *(void *)(v22 + 8 * v18);
          if (!v20)
          {
            unint64_t v18 = v17 + 2;
            if (v17 + 2 >= v19) {
              goto LABEL_4;
            }
            unint64_t v20 = *(void *)(v22 + 8 * v18);
            if (!v20)
            {
              while (v19 - 3 != v17)
              {
                unint64_t v20 = *(void *)(a1 + 88 + 8 * v17++);
                if (v20)
                {
                  unint64_t v18 = v17 + 2;
                  goto LABEL_19;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_19:
          unint64_t v4 = __clz(__rbit64(v20)) + (v18 << 6);
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v1);
  }
  return v2;
}

uint64_t sub_1B69EEF08(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    BOOL v7 = a3[4] == a1 && a3[5] == a2;
    if (v7 || (sub_1B6E334B8() & 1) != 0) {
      return 1;
    }
    uint64_t v9 = v3 - 1;
    if (v9)
    {
      for (uint64_t i = a3 + 7; ; i += 2)
      {
        BOOL v11 = *(i - 1) == a1 && *i == a2;
        if (v11 || (sub_1B6E334B8() & 1) != 0) {
          break;
        }
        uint64_t result = 0;
        if (!--v9) {
          return result;
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1B69EEFB4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void **)(a2 + 8 * v5 + 32);
    swift_retain();
    uint64_t v7 = sub_1B6E32738();
    uint64_t result = swift_conformsToProtocol2();
    if (!result) {
      break;
    }
    uint64_t v9 = sub_1B6E32738();
    uint64_t result = swift_conformsToProtocol2();
    if (!result) {
      goto LABEL_19;
    }
    if (v7 == v9 && v6[5] == a1[5])
    {
      if (v6[2] == a1[2] && v6[3] == a1[3])
      {
        swift_bridgeObjectRelease();
        swift_release();
        return 1;
      }
      char v11 = sub_1B6E334B8();
      swift_release();
      if (v11)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    else
    {
      swift_release();
    }
    if (v2 == ++v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1B69EF148(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1B6E32C18();
    if (!v3) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_12;
    }
  }
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    id v5 = (id)MEMORY[0x1BA9B4580](0, a2);
  }
  else {
    id v5 = *(id *)(a2 + 32);
  }
  uint64_t v6 = v5;
  type metadata accessor for VFXEntityObject();
  char v7 = sub_1B6E32358();

  if (v7)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return 1;
  }
  uint64_t v9 = v3 - 1;
  if (v3 != 1)
  {
    if (v4)
    {
      uint64_t v10 = 1;
      while (1)
      {
        MEMORY[0x1BA9B4580](v10, a2);
        char v11 = sub_1B6E32358();
        swift_unknownObjectRelease();
        if (v11) {
          break;
        }
        if (v3 == ++v10) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      while (1)
      {
        id v12 = *(id *)(a2 + 8 * v4 + 40);
        char v13 = sub_1B6E32358();

        if (v13) {
          break;
        }
        if (v9 == ++v4) {
          goto LABEL_12;
        }
      }
    }
    goto LABEL_6;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B69EF2A4(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (2)
  {
    unint64_t v6 = 0xE400000000000000;
    unint64_t v7 = 1701667182;
    switch(*(unsigned char *)(a2 + v5 + 32))
    {
      case 1:
        unint64_t v6 = 0xE500000000000000;
        unint64_t v7 = 0x6C6562616CLL;
        break;
      case 2:
        unint64_t v8 = "includeFunctions";
        goto LABEL_11;
      case 3:
        unint64_t v7 = 0xD000000000000011;
        uint64_t v9 = "useNamedSignature";
        goto LABEL_36;
      case 4:
        unint64_t v7 = 0x54636972656E6567;
        unint64_t v6 = 0xEC00000073657079;
        break;
      case 5:
        unint64_t v7 = 0xD000000000000018;
        uint64_t v9 = "previousInParameterNames";
        goto LABEL_36;
      case 6:
        unint64_t v8 = "inParameterNames";
        goto LABEL_11;
      case 7:
        unint64_t v8 = "inParameterTypes";
LABEL_11:
        unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
        unint64_t v7 = 0xD000000000000010;
        break;
      case 8:
        unint64_t v7 = 0xD000000000000018;
        uint64_t v9 = "inParameterDefaultValues";
        goto LABEL_36;
      case 9:
        unint64_t v7 = 0xD000000000000011;
        uint64_t v9 = "outParameterNames";
        goto LABEL_36;
      case 0xA:
        unint64_t v7 = 0xD000000000000011;
        uint64_t v9 = "outParameterTypes";
        goto LABEL_36;
      case 0xB:
        unint64_t v7 = 1701080931;
        break;
      case 0xC:
        unint64_t v7 = 0x70795465756C6176;
        unint64_t v6 = 0xE900000000000065;
        break;
      case 0xD:
        unint64_t v7 = 0xD000000000000012;
        uint64_t v9 = "defaultInParameter";
        goto LABEL_36;
      case 0xE:
        unint64_t v6 = 0xEA00000000006465;
        goto LABEL_20;
      case 0xF:
        unint64_t v6 = 0xEF6F666E496E6F69;
LABEL_20:
        unint64_t v7 = 0x7461636572706564;
        break;
      case 0x10:
        unint64_t v7 = 0xD000000000000012;
        uint64_t v9 = "toolCreateFunction";
        goto LABEL_36;
      case 0x11:
        unint64_t v6 = 0xE800000000000000;
        unint64_t v7 = 0x65756C6156736168;
        break;
      case 0x12:
        unint64_t v7 = 0x656D617261506E69;
        unint64_t v6 = 0xEC00000073726574;
        break;
      case 0x13:
        unint64_t v7 = 0x6D6172615074756FLL;
        unint64_t v6 = 0xED00007372657465;
        break;
      case 0x14:
        unint64_t v7 = 0xD00000000000001CLL;
        uint64_t v9 = "showInParameterDefaultValues";
        goto LABEL_36;
      case 0x15:
        unint64_t v7 = 0xD000000000000015;
        uint64_t v9 = "mandatoryInParameters";
        goto LABEL_36;
      case 0x16:
        unint64_t v6 = 0xE600000000000000;
        unint64_t v7 = 0x6E6564646968;
        break;
      case 0x17:
        unint64_t v6 = 0xE700000000000000;
        unint64_t v7 = 0x7069746C6F6F74;
        break;
      case 0x18:
        unint64_t v7 = 0x4370756E61656C63;
        unint64_t v6 = 0xEB0000000065646FLL;
        break;
      case 0x19:
        unint64_t v6 = 0xE800000000000000;
        unint64_t v7 = 0x7473655470696B73;
        break;
      case 0x1A:
        unint64_t v7 = 0x65706544656D6974;
        unint64_t v6 = 0xED0000746E65646ELL;
        break;
      case 0x1B:
        unint64_t v7 = 0xD000000000000013;
        uint64_t v9 = "useDynamicBranching";
        goto LABEL_36;
      case 0x1C:
        unint64_t v7 = 0x6574726F70707573;
        unint64_t v6 = 0xEB00000000794264;
        break;
      case 0x1D:
        unint64_t v7 = 0x61656C6261736964;
        unint64_t v6 = 0xEB00000000656C62;
        break;
      case 0x1E:
        unint64_t v7 = 0xD000000000000012;
        uint64_t v9 = "embeddedParameters";
LABEL_36:
        unint64_t v6 = (unint64_t)(v9 - 32) | 0x8000000000000000;
        break;
      case 0x1F:
        unint64_t v7 = 0x53746C7561666564;
        unint64_t v6 = 0xEE0074657070696ELL;
        break;
      default:
        break;
    }
    unint64_t v10 = 0xE400000000000000;
    unint64_t v11 = 1701667182;
    switch(a1)
    {
      case 1:
        unint64_t v10 = 0xE500000000000000;
        if (v7 == 0x6C6562616CLL) {
          goto LABEL_89;
        }
        goto LABEL_90;
      case 2:
        id v12 = "includeFunctions";
        goto LABEL_47;
      case 3:
        unint64_t v11 = 0xD000000000000011;
        char v13 = "useNamedSignature";
        goto LABEL_87;
      case 4:
        uint64_t v14 = 0x54636972656E6567;
        uint64_t v15 = 1936027769;
        goto LABEL_65;
      case 5:
        unint64_t v11 = 0xD000000000000018;
        char v13 = "previousInParameterNames";
        goto LABEL_87;
      case 6:
        id v12 = "inParameterNames";
        goto LABEL_47;
      case 7:
        id v12 = "inParameterTypes";
LABEL_47:
        unint64_t v10 = (unint64_t)(v12 - 32) | 0x8000000000000000;
        if (v7 != 0xD000000000000010) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 8:
        unint64_t v11 = 0xD000000000000018;
        char v13 = "inParameterDefaultValues";
        goto LABEL_87;
      case 9:
        unint64_t v11 = 0xD000000000000011;
        char v13 = "outParameterNames";
        goto LABEL_87;
      case 10:
        unint64_t v11 = 0xD000000000000011;
        char v13 = "outParameterTypes";
        goto LABEL_87;
      case 11:
        if (v7 != 1701080931) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 12:
        unint64_t v10 = 0xE900000000000065;
        if (v7 != 0x70795465756C6176) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 13:
        unint64_t v11 = 0xD000000000000012;
        char v13 = "defaultInParameter";
        goto LABEL_87;
      case 14:
        unint64_t v10 = 0xEA00000000006465;
        goto LABEL_59;
      case 15:
        unint64_t v10 = 0xEF6F666E496E6F69;
LABEL_59:
        if (v7 != 0x7461636572706564) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 16:
        unint64_t v11 = 0xD000000000000012;
        char v13 = "toolCreateFunction";
        goto LABEL_87;
      case 17:
        unint64_t v10 = 0xE800000000000000;
        if (v7 != 0x65756C6156736168) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 18:
        uint64_t v14 = 0x656D617261506E69;
        uint64_t v15 = 1936876916;
LABEL_65:
        unint64_t v10 = v15 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
        if (v7 != v14) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 19:
        uint64_t v16 = 0x6D6172615074756FLL;
        uint64_t v17 = 0x7372657465;
        goto LABEL_78;
      case 20:
        unint64_t v11 = 0xD00000000000001CLL;
        char v13 = "showInParameterDefaultValues";
        goto LABEL_87;
      case 21:
        unint64_t v11 = 0xD000000000000015;
        char v13 = "mandatoryInParameters";
        goto LABEL_87;
      case 22:
        unint64_t v10 = 0xE600000000000000;
        if (v7 != 0x6E6564646968) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 23:
        unint64_t v10 = 0xE700000000000000;
        if (v7 != 0x7069746C6F6F74) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 24:
        uint64_t v18 = 0x4370756E61656C63;
        uint64_t v19 = 6644847;
        goto LABEL_82;
      case 25:
        unint64_t v10 = 0xE800000000000000;
        if (v7 != 0x7473655470696B73) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 26:
        uint64_t v16 = 0x65706544656D6974;
        uint64_t v17 = 0x746E65646ELL;
LABEL_78:
        unint64_t v10 = v17 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        if (v7 != v16) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 27:
        unint64_t v11 = 0xD000000000000013;
        char v13 = "useDynamicBranching";
        goto LABEL_87;
      case 28:
        uint64_t v18 = 0x6574726F70707573;
        uint64_t v19 = 7946852;
LABEL_82:
        unint64_t v10 = v19 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        if (v7 != v18) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 29:
        unint64_t v10 = 0xEB00000000656C62;
        if (v7 != 0x61656C6261736964) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 30:
        unint64_t v11 = 0xD000000000000012;
        char v13 = "embeddedParameters";
LABEL_87:
        unint64_t v10 = (unint64_t)(v13 - 32) | 0x8000000000000000;
        goto LABEL_88;
      case 31:
        unint64_t v10 = 0xEE0074657070696ELL;
        if (v7 != 0x53746C7561666564) {
          goto LABEL_90;
        }
        goto LABEL_89;
      default:
LABEL_88:
        if (v7 != v11) {
          goto LABEL_90;
        }
LABEL_89:
        if (v6 == v10)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return 1;
        }
LABEL_90:
        char v20 = sub_1B6E334B8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          if (v2 == ++v5)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_1B69EFABC(uint64_t a1, double a2)
{
  uint64_t v3 = *(void (**)(uint64_t, double))(a1 + 32);
  uint64_t v4 = swift_retain();
  v3(v4, a2);

  return swift_release();
}

uint64_t sub_1B69EFB10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (sub_1B6E334B8() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = sub_1B6E334B8();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

unint64_t sub_1B69EFBF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (sub_1B6E31A48() != a1 || v9 != a2)
  {
    char v10 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = sub_1B6E318D8();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B69EFCE8(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3)
  {
    return 0;
  }
  else
  {
    uint64_t v4 = a2;
    if (*(unsigned __int8 *)(a4 + a2) == a1)
    {
      return a2;
    }
    else
    {
      while (a3 - 1 != v4)
      {
        int v6 = *(unsigned __int8 *)(a4 + 1 + v4++);
        if (v6 == a1) {
          return v4;
        }
      }
      return 0;
    }
  }
}

uint64_t sub_1B69EFD50(uint64_t a1, unint64_t a2)
{
  if (!(a2 >> 62))
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1B6E32C18();
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0) {
    id v4 = (id)MEMORY[0x1BA9B4580](0, a2);
  }
  else {
    id v4 = *(id *)(a2 + 32);
  }
  uint64_t v5 = v4;
  type metadata accessor for VFXEntityObject();
  char v6 = sub_1B6E32358();

  if (v6) {
    return 0;
  }
  uint64_t v8 = 0;
  while (v3 - 1 != v8)
  {
    uint64_t v7 = v8 + 1;
    if ((a2 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x1BA9B4580](v8 + 1, a2);
    }
    else {
      id v9 = *(id *)(a2 + 8 * v8 + 40);
    }
    char v10 = v9;
    char v11 = sub_1B6E32358();

    uint64_t v8 = v7;
    if (v11) {
      return v7;
    }
  }
  return 0;
}

uint64_t sub_1B69EFE98(unsigned __int8 a1, unint64_t a2, unint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v3 = a1;
  unint64_t v4 = a3 >> 62;
  uint64_t v7 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a2;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  unint64_t v23 = a3 >> 40;
  uint64_t v24 = (uint64_t)a2 >> 32;
  unint64_t v21 = a3 >> 24;
  unint64_t v22 = HIDWORD(a3);
  unint64_t v19 = a3 >> 8;
  unint64_t v20 = a3 >> 16;
  unint64_t v17 = HIWORD(a2);
  unint64_t v18 = HIBYTE(a2);
  unint64_t v15 = HIDWORD(a2);
  unint64_t v16 = a2 >> 40;
  unint64_t v13 = a2 >> 16;
  unint64_t v14 = a2 >> 24;
  unint64_t v12 = a2 >> 8;
  while (2)
  {
    uint64_t v8 = BYTE6(a3);
    switch((int)v4)
    {
      case 0:
        goto LABEL_8;
      case 1:
        uint64_t v8 = v24;
        goto LABEL_8;
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
LABEL_8:
        if (v7 != v8)
        {
          if (v4)
          {
            uint64_t v9 = sub_1B6E30B98();
            char v10 = (unsigned char *)(v9 - sub_1B6E30BC8());
          }
          else
          {
            v25[0] = a2;
            v25[1] = v12;
            _OWORD v25[2] = v13;
            v25[3] = v14;
            v25[4] = v15;
            v25[5] = v16;
            v25[6] = v17;
            v25[7] = v18;
            v25[8] = a3;
            v25[9] = v19;
            v25[10] = v20;
            v25[11] = v21;
            v25[12] = v22;
            v25[13] = v23;
            char v10 = v25;
          }
          if (v10[v7] == v3) {
            return v7;
          }
          ++v7;
          continue;
        }
        return 0;
      case 3:
        return 0;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t sub_1B69F00BC(uint64_t a1)
{
  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = sub_1B6315450((uint64_t)v3);
  }
  uint64_t v4 = *((void *)v3 + 2) - 1;
  uint64_t v5 = v4 - a1;
  if (v4 - a1 < 0)
  {
    uint64_t result = sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    char v6 = &v3[4 * a1];
    uint64_t v7 = *((unsigned int *)v6 + 8);
    memmove(v6 + 32, v6 + 36, 4 * v5);
    *((void *)v3 + 2) = v4;
    *int64_t v1 = v3;
    return v7;
  }
  return result;
}

uint64_t sub_1B69F0184(uint64_t a1)
{
  return sub_1B69F0270(a1, (uint64_t (*)(uint64_t))sub_1B6C167C0);
}

uint64_t sub_1B69F019C(uint64_t a1)
{
  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = sub_1B6C16800(v3);
  }
  uint64_t v4 = v3[2] - 1;
  uint64_t v5 = v4 - a1;
  if (v4 - a1 < 0)
  {
    uint64_t result = sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    char v6 = &v3[2 * a1];
    uint64_t v7 = v6[4];
    memmove(v6 + 4, v6 + 6, 16 * v5);
    v3[2] = v4;
    *int64_t v1 = v3;
    return v7;
  }
  return result;
}

uint64_t sub_1B69F0270(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    uint64_t v5 = a2(v5);
    *uint64_t v2 = v5;
  }
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v7 + 16) - 1;
  uint64_t v9 = v8 - a1;
  if (v8 - a1 < 0)
  {
    uint64_t result = sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    uint64_t v10 = v7 + 8 * a1;
    uint64_t v11 = *(void *)(v10 + 32);
    memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * v9);
    *(void *)(v7 + 16) = v8;
    sub_1B6E31C48();
    return v11;
  }
  return result;
}

uint64_t sub_1B69F0350(uint64_t a1)
{
  int v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = sub_1B6C16770((uint64_t)v3);
  }
  uint64_t v4 = *((void *)v3 + 2) - 1;
  uint64_t v5 = v4 - a1;
  if (v4 - a1 < 0)
  {
    uint64_t result = sub_1B6E32C88();
    __break(1u);
  }
  else
  {
    char v6 = &v3[8 * a1];
    uint64_t v7 = *((void *)v6 + 4);
    memmove(v6 + 32, v6 + 40, 8 * v5);
    *((void *)v3 + 2) = v4;
    *int64_t v1 = v3;
    return v7;
  }
  return result;
}

uint64_t *sub_1B69F0418(uint64_t *result)
{
  uint64_t v1 = (uint64_t)result;
  if (result != (uint64_t *)0xFFFFFFFFLL)
  {
    sub_1B6965F70(v7);
    sub_1B6A00E34((uint64_t)v7, (uint64_t)v6, &qword_1EB97E8F0, (uint64_t)&type metadata for EmitterRuntime);
    char v5 = 0;
    uint64_t v2 = swift_unownedRetainStrong();
    MEMORY[0x1F4188790](v2, v3);
    sub_1B66C6F78(v1, (void (*)(uint64_t))sub_1B6A02830);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    sub_1B6A00E34((uint64_t)v6, (uint64_t)v4, &qword_1EB97E8F0, (uint64_t)&type metadata for EmitterRuntime);
    return sub_1B62EDED8(v4);
  }
  return result;
}

uint64_t sub_1B69F0688(uint64_t (*a1)(void))
{
  return a1();
}

double sub_1B69F06B0()
{
  sub_1B62F7C38(0, (unint64_t *)&qword_1EB980BA0, (unint64_t *)&qword_1EB97EB00, (unint64_t *)&qword_1EB97EAE0);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 24;
  *(_OWORD *)(v0 + 16) = xmmword_1B6E9D8A0;
  *(void *)(v0 + 32) = &type metadata for NodeTransformController;
  *(void *)(v0 + 40) = &off_1F0F8FA38;
  *(void *)(v0 + 48) = &type metadata for NodeVisibilityController;
  *(void *)(v0 + 56) = &off_1F0F92320;
  *(void *)(v0 + 64) = &type metadata for LightController;
  *(void *)(v0 + 72) = &off_1F0F68C70;
  *(void *)(v0 + 80) = &type metadata for CameraController;
  *(void *)(v0 + 88) = &off_1F0F6B000;
  *(void *)(v0 + 96) = &type metadata for ParametricModelController;
  *(void *)(v0 + 104) = &off_1F0F94618;
  *(void *)(v0 + 112) = &type metadata for PhysicsBodyController;
  *(void *)(v0 + 120) = &off_1F0F8A5E0;
  *(void *)(v0 + 128) = &type metadata for ForceFieldsController;
  *(void *)(v0 + 136) = &off_1F0F84FD0;
  *(void *)(v0 + 144) = &type metadata for MorpherController;
  *(void *)(v0 + 152) = &off_1F0F71F30;
  *(void *)(v0 + 160) = &type metadata for MaterialController;
  *(void *)(v0 + 168) = &off_1F0F76D40;
  *(void *)(v0 + 176) = &type metadata for ModelController;
  *(void *)(v0 + 184) = &off_1F0F69040;
  *(void *)(v0 + 192) = &type metadata for WorldBackgroundController;
  *(void *)(v0 + 200) = &off_1F0F95E18;
  *(void *)(v0 + 208) = &type metadata for WorldIBLController;
  *(void *)(v0 + 216) = &off_1F0F7BAE0;
  *(void *)(v0 + 224) = &type metadata for WorldPhysicsController;
  *(void *)(v0 + 232) = &off_1F0F8EA48;
  *(void *)(v0 + 240) = &type metadata for WorldFogController;
  *(void *)(v0 + 248) = &off_1F0F7B900;
  *(void *)(v0 + 256) = &type metadata for CameraEffectMotionBlurController;
  *(void *)(v0 + 264) = &off_1F0F9B208;
  *(void *)(v0 + 272) = &type metadata for CameraEffectDepthOfFieldController;
  *(void *)(v0 + 280) = &off_1F0F9C118;
  *(void *)(v0 + 288) = &type metadata for CameraEffectGrainController;
  *(void *)(v0 + 296) = &off_1F0F97360;
  *(void *)(v0 + 304) = &type metadata for CameraEffectExposureController;
  *(void *)(v0 + 312) = &off_1F0F99DF0;
  *(void *)(v0 + 320) = &type metadata for CameraEffectToneMappingController;
  *(void *)(v0 + 328) = &off_1F0F9BCB8;
  *(void *)(v0 + 336) = &type metadata for CameraEffectBloomController;
  *(void *)(v0 + 344) = &off_1F0F97178;
  *(void *)(v0 + 352) = &type metadata for CameraEffectDoughnutBokehController;
  *(void *)(v0 + 360) = &off_1F0F9C4B8;
  *(void *)(v0 + 368) = &type metadata for CameraEffectChromaticTransformController;
  *(void *)(v0 + 376) = &off_1F0F9DC90;
  *(void *)(v0 + 384) = &type metadata for CameraEffectLensBlurController;
  *(void *)(v0 + 392) = &off_1F0F99FD8;
  *(void *)(v0 + 400) = &type metadata for CameraEffectSSAOController;
  *(void *)(v0 + 408) = &off_1F0F96080;
  return result;
}

Swift::Void __swiftcall VFX2Initialize()()
{
  sub_1B69F06B0();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(v0 + 32);
    if (qword_1EB97D5D0 != -1) {
      swift_once();
    }
    uint64_t v3 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v4 = *v2;
      v2 += 2;
      swift_retain();
      sub_1B6654DA4(v4, v3);
      swift_release();
      --v1;
    }
    while (v1);
  }

  swift_bridgeObjectRelease();
}

id sub_1B69F09B0(void *a1)
{
  id result = objc_msgSend(a1, sel_asset);
  if (result)
  {
    self;
    uint64_t v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      id v3 = objc_msgSend(v2, sel_authoringGraph);
      sub_1B6E32718();
      swift_unknownObjectRelease();
      type metadata accessor for AuthoringGraph();
      if (swift_dynamicCast())
      {
        unint64_t v4 = MEMORY[0x1E4FBC860];
        v6[0] = sub_1B68C967C(MEMORY[0x1E4FBC860]);
        v6[1] = v5;
        sub_1B68B96F0((uint64_t)sub_1B6CC6E5C, 0, 1, 0x1000000000000000uLL, 0, v4, (uint64_t)v6);
        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return (id)swift_bridgeObjectRelease();
      }
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    return (id)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B69F0B28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_1B69F0B50(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VFXWorld.migrateCoreEntityManager(info:)(NSMutableDictionary info)
{
  uint64_t v3 = v2;
  uint64_t v5 = (char *)objc_msgSend(v1, sel_scene);
  uint64_t v6 = *(void *)&v5[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  swift_retain();

  *(void *)&v13[0] = 0x696C616974696E69;
  *((void *)&v13[0] + 1) = 0xEB0000000072657ALL;
  id v7 = [(objc_class *)info.super.super.isa __swift_objectForKeyedSubscript:sub_1B6E337F8()];
  swift_unknownObjectRelease();
  sub_1B6E32718();
  swift_unknownObjectRelease();
  sub_1B62B57A8(v12, v13);
  sub_1B69FA53C();
  swift_dynamicCast();
  uint64_t v8 = v11;
  *(void *)&v13[0] = 0xD000000000000014;
  *((void *)&v13[0] + 1) = 0x80000001B6F41DB0;
  id v9 = [(objc_class *)info.super.super.isa __swift_objectForKeyedSubscript:sub_1B6E337F8()];
  swift_unknownObjectRelease();
  sub_1B6E32718();
  swift_unknownObjectRelease();
  sub_1B62B57A8(v12, v13);
  swift_dynamicCast();
  char v10 = (char)v11;
  *(void *)&v13[0] = v6;
  LOBYTE(v11) = 1;
  *(void *)&v12[0] = 0;
  v8(v13, &v11, v12);
  if (!v3 && (v10 & 1) != 0)
  {
    *(void *)&v13[0] = v6;
    LOBYTE(v11) = 2;
    *(void *)&v12[0] = 0;
    v8(v13, &v11, v12);
  }
  swift_release();
  swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VFXWorld.initializeCoreEntityManager(info:)(NSMutableDictionary info)
{
  uint64_t v2 = v1;
  unint64_t v4 = (char *)objc_msgSend(v1, sel_presentationScene);
  uint64_t v5 = *(void *)&v4[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  swift_retain();

  *(void *)&v31[0] = 0x69706D6F63657270;
  *((void *)&v31[0] + 1) = 0xEB0000000064656CLL;
  id v6 = [(objc_class *)info.super.super.isa __swift_objectForKeyedSubscript:sub_1B6E337F8()];
  swift_unknownObjectRelease();
  if (v6)
  {
    sub_1B6E32718();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v31, 0, sizeof(v31));
  }
  sub_1B6A00E34((uint64_t)v31, (uint64_t)&v25, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8);
  if (v27)
  {
    sub_1B63989B8(0, (unint64_t *)&qword_1E9DD0780);
    if (swift_dynamicCast())
    {
      id v7 = v30[0];
      unsigned __int8 v8 = objc_msgSend(v30[0], sel_BOOLValue);

      char v9 = v8 ^ 1;
      goto LABEL_9;
    }
  }
  else
  {
    sub_1B62B32CC((uint64_t)&v25);
  }
  char v9 = 1;
LABEL_9:
  *(void *)&long long v25 = 0xD000000000000014;
  *((void *)&v25 + 1) = 0x80000001B6F41DB0;
  id v10 = [(objc_class *)info.super.super.isa __swift_objectForKeyedSubscript:sub_1B6E337F8()];
  swift_unknownObjectRelease();
  sub_1B6E32718();
  swift_unknownObjectRelease();
  sub_1B62B57A8(v31, &v25);
  swift_dynamicCast();
  int v11 = LOBYTE(v30[0]);
  *(void *)&long long v25 = 0x696C616974696E69;
  *((void *)&v25 + 1) = 0xEB0000000072657ALL;
  id v12 = [(objc_class *)info.super.super.isa __swift_objectForKeyedSubscript:sub_1B6E337F8()];
  swift_unknownObjectRelease();
  sub_1B6E32718();
  swift_unknownObjectRelease();
  sub_1B62B57A8(v31, &v25);
  sub_1B69FA53C();
  swift_dynamicCast();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = *(_OWORD *)v30;
  uint64_t v14 = v5 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
  *(unsigned char *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig + 2) = v9;
  *(void *)(v14 + *(int *)(type metadata accessor for ScriptingConfiguration() + 32)) = 0;
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  unint64_t v16 = (char *)objc_msgSend(v2, sel_remapTable);
  if (v16)
  {
    unint64_t v17 = v16;
    uint64_t v18 = *(void *)&v16[OBJC_IVAR___VFXBidirectionalRemapTable_remapTable];
    swift_retain();

    unint64_t v19 = *(void **)(v18 + 16);
    objc_msgSend(v19, sel_lock);
    *(void *)(v15 + 16) = *(void *)(v18 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_unlock);
    swift_release();
  }
  if (v11) {
    char v20 = 4;
  }
  else {
    char v20 = 6;
  }
  unint64_t v21 = self;
  id v22 = objc_msgSend(v2, sel_worldRef);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_1B69FA678;
  *(void *)(v23 + 24) = v13;
  *(void *)(v23 + 32) = v5;
  *(unsigned char *)(v23 + 40) = v20;
  *(void *)(v23 + 48) = v15;
  long long v28 = sub_1B69FA740;
  uint64_t v29 = v23;
  *(void *)&long long v25 = MEMORY[0x1E4F143A8];
  *((void *)&v25 + 1) = 1107296256;
  uint64_t v26 = sub_1B69EFABC;
  int8x8_t v27 = &unk_1F0FBA108;
  uint64_t v24 = _Block_copy(&v25);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v21, sel_postCommandWithContext_object_applyBlock_, v22, 0, v24);
  swift_release();
  swift_release();
  _Block_release(v24);
  swift_release();
}

uint64_t sub_1B69F1360(void (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 16);
  swift_bridgeObjectRetain();
  a1(a3, a4, v8);

  return swift_bridgeObjectRelease();
}

uint64_t VFXScene.load(url:loadingForAuthoring:infoOut:presentationScene:)(unint64_t a1, int a2, void *a3)
{
  return sub_1B6A00588(a1, a2, a3);
}

char *sub_1B69F1734(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC3VFX8VFXScene_entityObjects);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1B6E32C18();
    if (v4) {
      goto LABEL_3;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_38;
  }
LABEL_3:
  uint64_t v5 = 0;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v6 = (char *)MEMORY[0x1BA9B4580](v5, v3);
    }
    else {
      id v6 = (char *)*(id *)(v3 + 32 + 8 * v5);
    }
    id v7 = v6;
    int v8 = *(_DWORD *)&v6[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4];
    uint64_t v9 = *(int *)&v6[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
    uint64_t Strong = swift_weakLoadStrong();
    if (!Strong)
    {
      uint64_t Strong = *(void *)&v7[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
      if (Strong)
      {
        swift_retain();
      }
      else
      {
        type metadata accessor for EntityManager();
        swift_allocObject();
        uint64_t Strong = sub_1B6299098(0x746C7561666544, 0xE700000000000000, 1, 0);
      }
    }
    swift_release();
    swift_retain();
    BOOL v11 = v9 == -1 && v8 == 0;
    if (v11
      || (v9 & 0x80000000) != 0
      || *(void *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v9
      || ((uint64_t v12 = *(void *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager__entries), v13 = v12 + 12 * (int)v9,
                                                                                     v8 != -1)
        ? (BOOL v14 = *(_DWORD *)(v13 + 8) == v8)
        : (BOOL v14 = 1),
          !v14
       || (uint64_t v15 = *(void *)(*(void *)(Strong + 136) + 8 * *(int *)(v12 + 12 * (int)v9) + 32),
           uint64_t v16 = *(void *)(v15 + 48),
           (uint64_t v17 = *(void *)(v16 + 16)) == 0)))
    {
LABEL_26:

      swift_release();
      goto LABEL_27;
    }
    uint64_t v18 = *(__int16 *)(v13 + 4);
    unint64_t v19 = (void *)(v16 + 56);
    while ((ValueMetadata *)*(v19 - 3) != &type metadata for VFXTag)
    {
      v19 += 5;
      if (!--v17) {
        goto LABEL_26;
      }
    }
    char v20 = (uint64_t *)(*(void *)(v15 + 128) + *v19 + 16 * v18);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    swift_bridgeObjectRetain();
    swift_release();
    if (v22 == a1 && v21 == a2) {
      break;
    }
    char v24 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_36;
    }

LABEL_27:
    if (++v5 == v4) {
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRelease();
LABEL_36:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t VFXScene.addEntityObject(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (unint64_t *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityObjects);
  unint64_t v5 = *v4;
  swift_bridgeObjectRetain();
  char v6 = sub_1B69EF148((uint64_t)a1, v5);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    a1;
    MEMORY[0x1BA9B3870]();
    if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1B6E31C78();
    }
    sub_1B6E31CC8();
    sub_1B6E31C48();
    return sub_1B6961E18(*(void *)(v2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager));
  }
  return result;
}

id VFXScene.removeEntityObject(_:)(void *a1)
{
  unint64_t v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityObjects);
  unint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  char v5 = sub_1B69EF148((uint64_t)a1, v4);
  id result = (id)swift_bridgeObjectRelease();
  if (v5)
  {
    unint64_t v7 = *v3;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_1B69EFD50((uint64_t)a1, v7);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {

    }
    return objc_msgSend(a1, sel_removeFromScene);
  }
  return result;
}

char *VFXScene.fetchEntityObject(withTag:)(uint64_t a1, uint64_t a2)
{
  id result = sub_1B69F1734(a1, a2);
  if (!result)
  {
    id v8 = 0;
    uint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
    unint64_t v7 = v2;
    swift_bridgeObjectRetain();
    sub_1B69D8FBC(v6, v7, a1, a2, &v8);
    return (char *)v8;
  }
  return result;
}

void sub_1B69F1D60(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  unint64_t v6 = sub_1B6C10DBC(a2, a3);
  int v7 = v6;
  unint64_t v8 = HIDWORD(v6);
  if (v6 != -1 || HIDWORD(v6) != 0)
  {
    char v10 = (objc_class *)type metadata accessor for VFXEntityObject();
    BOOL v11 = objc_allocWithZone(v10);
    swift_weakInit();
    *(void *)&v11[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager] = 0;
    v11[OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned] = 0;
    uint64_t v12 = &v11[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
    *uint64_t v12 = v7;
    v12[1] = v8;
    swift_weakAssign();
    v17.receiver = v11;
    v17.super_class = v10;
    id v13 = objc_msgSendSuper2(&v17, sel_init);
    id v14 = *a4;
    *a4 = v13;

    if (*a4)
    {
      uint64_t v15 = (void *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_entityObjects);
      id v16 = *a4;
      MEMORY[0x1BA9B3870]();
      if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1B6E31C78();
      }
      sub_1B6E31CC8();
      sub_1B6E31C48();
    }
  }
}

Swift::Void __swiftcall VFXScene.resolveObjectReferencesWithRemapTable(world:objectsByIdentifier:)(VFXWorld *world, Swift::OpaquePointer objectsByIdentifier)
{
  uint64_t v3 = sub_1B69EEC1C((uint64_t)objectsByIdentifier._rawValue);
  if (*(void *)(v3 + 16))
  {
    sub_1B6A00BB4(0, (unint64_t *)&qword_1E9DD3A20, (uint64_t (*)(void))sub_1B6966C78, (uint64_t)&type metadata for VFXBridgeableReference, MEMORY[0x1E4FBBD58]);
    uint64_t v4 = sub_1B6E32C58();
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC868];
  }
  uint64_t v5 = v4;
  sub_1B6A00280(v3, 1, &v5);
  swift_bridgeObjectRelease();
  sub_1B6B72420(world, v5);
  swift_release();
}

uint64_t VFXScene.updateVFX2RenderOutput(pointOfView:commandBuffer:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MockRenderOutput();
  swift_allocObject();
  uint64_t v5 = sub_1B67FF310(71, 0, 1, 0, 0);
  *(void *)(v5 + 16) = *(void *)(a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  *(void *)(v5 + 128) = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(v2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v6)
  {
    int v7 = *(os_unfair_lock_s **)(v6 + 176);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v7);
    *(void *)(v6 + 216) = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    unint64_t v8 = *(void **)(v6 + 216);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 216) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v8 = sub_1B68C3A9C(0, v8[2] + 1, 1, v8);
      *(void *)(v6 + 216) = v8;
    }
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      unint64_t v8 = sub_1B68C3A9C(v10 > 1, v11 + 1, 1, v8);
      *(void *)(v6 + 216) = v8;
    }
    _OWORD v8[2] = v11 + 1;
    uint64_t v12 = &v8[2 * v11];
    void v12[4] = v5;
    v12[5] = &off_1F0F6CB58;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 176));
    swift_release();
    return swift_release_n();
  }
  else
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t VFXScene.remapEntityReferences(_:)(uint64_t a1)
{
  uint64_t v94 = sub_1B6E313D8();
  uint64_t v119 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94, v3);
  __n128 v93 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_1B6E31418();
  uint64_t v5 = *(void *)(v92 - 8);
  MEMORY[0x1F4188790](v92, v6);
  int32x2_t v99 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(*(void *)(a1 + OBJC_IVAR___VFXBidirectionalRemapTable_remapTable) + 24);
  type metadata accessor for RemapContext();
  uint64_t v9 = swift_allocObject();
  unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  *(void *)(v9 + 24) = sub_1B62FF544(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1B67DD1D8((uint64_t)v10);
  swift_bridgeObjectRelease();
  *(void *)(v9 + 24) = v8;
  *(void *)(v9 + 32) = v11;
  uint64_t v115 = v9;
  *(unsigned char *)(v9 + 16) = 1;
  uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  float32x2_t v105 = sub_1B633F784(0, *(void *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount) & ~(*(uint64_t *)(v12+ OBJC_IVAR____TtC3VFX13EntityManager_entityCount) >> 63), 0, v10);
  uint64_t v13 = v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  int32x2_t v107 = (void *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  uint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
  if (v14)
  {
    uint64_t v15 = 0;
    for (uint64_t i = 0; i != v14; ++i)
    {
      uint64_t v18 = *v107 + v15;
      if ((*(__int16 *)(v18 + 6) & 0x80000000) == 0)
      {
        int v19 = *(_DWORD *)(v18 + 8);
        char v20 = v105;
        unint64_t v22 = *((void *)v105 + 2);
        unint64_t v21 = *((void *)v105 + 3);
        if (v22 >= v21 >> 1) {
          char v20 = sub_1B633F784(v21 > 1, v22 + 1, 1, v105);
        }
        *((void *)v20 + 2) = v22 + 1;
        float32x2_t v105 = v20;
        objc_super v17 = &v20[8 * v22];
        *((_DWORD *)v17 + 8) = i;
        *((_DWORD *)v17 + 9) = v19;
      }
      v15 += 12;
    }
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 24));
  uint64_t v102 = *((void *)v105 + 2);
  if (v102)
  {
    uint64_t v23 = 0;
    uint64_t v100 = 0;
    uint64_t v120 = OBJC_IVAR____TtC3VFX13EntityManager_replicationStream;
    float v101 = v105 + 32;
    int32x2_t v116 = (char *)&v122 + 8;
    int32x2_t v113 = v133;
    float32x2_t v106 = &v123;
    float32x4_t v90 = (void (**)(char *, uint64_t))(v5 + 8);
    float32x4_t v91 = (void (**)(char *, uint64_t))(v119 + 8);
    do
    {
      char v24 = &v101[8 * v23];
      uint64_t v25 = *((unsigned int *)v24 + 1);
      uint64_t v26 = *(int *)v24;
      BOOL v27 = v26 == -1 && v25 == 0;
      int v28 = v27;
      LODWORD(v119) = v28;
      uint64_t v29 = MEMORY[0x1E4FBC860];
      uint64_t v114 = v26;
      uint64_t v112 = v25;
      if (!v27
        && (v26 & 0x80000000) == 0
        && v107[1] > v26
        && (v25 == -1 || *(_DWORD *)(*v107 + 12 * (int)v26 + 8) == v25))
      {
        uint64_t v29 = swift_retain();
        uint64_t v25 = v112;
        LODWORD(v26) = v114;
      }
      uint64_t v118 = *(void *)(v29 + 16);
      if (v118)
      {
        uint64_t v103 = v29;
        uint64_t v104 = v23;
        uint64_t v31 = 0;
        uint64_t v117 = v29 + 32;
        unint64_t v108 = v26 | (unint64_t)(v25 << 32);
        do
        {
          long long v32 = (uint64_t *)(v117 + 16 * v31);
          uint64_t v34 = *v32;
          uint64_t v33 = v32[1];
          uint64_t v35 = *(void *)(v12 + v120);
          if (v35)
          {
            char v36 = *(unsigned char *)(v35 + 80);
            MEMORY[0x1BA9B8670](v35 + 48);
            uint64_t v35 = *(void *)(v35 + 56);
          }
          else
          {
            char v36 = 0;
          }
          int32x4_t v123 = 0;
          swift_unknownObjectUnownedInit();
          *(void *)&long long v122 = v12;
          int32x4_t v123 = (void *)v35;
          swift_unknownObjectUnownedAssign();
          swift_unownedRetain();
          swift_unknownObjectRelease();
          LOBYTE(v124) = v36;
          sub_1B636C4E0((uint64_t)&v122, (uint64_t)v134);
          sub_1B6987D8C((uint64_t)v134, (uint64_t)&v132);
          if ((v119 & 1) == 0)
          {
            uint64_t v131 = 0;
            memset(v130, 0, sizeof(v130));
            char v129 = 0;
            uint64_t v37 = v132;
            uint64_t v38 = swift_unownedRetainStrong();
            MEMORY[0x1F4188790](v38, v39);
            id v40 = (void (**)(char *, uint64_t))v115;
            *(&v90 - 6) = (void (**)(char *, uint64_t))sub_1B6A00C20;
            *(&v90 - 5) = v40;
            *(&v90 - 4) = (void (**)(char *, uint64_t))&v129;
            *(&v90 - 3) = (void (**)(char *, uint64_t))&v132;
            *(&v90 - 2) = (void (**)(char *, uint64_t))v130;
            if (sub_1B62CD84C(v34) > 0 && (v114 & 0x80000000) == 0)
            {
              id v41 = (uint64_t *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
              if (*(void *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v114)
              {
                uint64_t v42 = *v41;
                uint64_t v43 = *v41 + 12 * (int)v114;
                uint64_t v44 = *(__int16 *)(v43 + 4);
                if (v112 == -1 || *(_DWORD *)(v43 + 8) == v112)
                {
                  uint64_t v45 = *(void *)(*(void *)(v37 + 136) + 8 * *(int *)(v42 + 12 * (int)v114) + 32);
                  uint64_t v46 = *(void *)(v45 + 48);
                  uint64_t v47 = *(void *)(v46 + 16);
                  if (v47)
                  {
                    uint64_t v48 = v46 + 56;
                    while (*(void *)(v48 - 24) != v34)
                    {
                      v48 += 40;
                      if (!--v47) {
                        goto LABEL_48;
                      }
                    }
                    uint64_t v51 = v48 - 8;
                    uint64_t v50 = *(void *)(v48 - 8);
                    uint64_t v49 = *(void *)(v51 + 8);
                    if (v50 <= 1) {
                      uint64_t v50 = 1;
                    }
                    uint64_t v52 = v100;
                    sub_1B6BFD360(v34, v33, v108, *(void *)(v45 + 128) + v49 + v50 * v44, (void (*)(uint64_t *))sub_1B6A00C80);
                    uint64_t v100 = v52;
                  }
                }
              }
            }
LABEL_48:
            swift_release();
            uint64_t v53 = v132;
            swift_unownedRetainStrong();
            swift_release();
            if (v129)
            {
              uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
              if (Strong)
              {
                uint64_t v55 = Strong;
                if ((*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v34, v33))
                {
                  uint64_t v56 = v55 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
                  uint64_t v57 = type metadata accessor for ScriptingConfiguration();
                  ++*(void *)(v56 + *(int *)(v57 + 36));
                }
                swift_unknownObjectRelease();
              }
              if (v133[16] == 1)
              {
                sub_1B6A00D8C((uint64_t)v130, (uint64_t)&v122);
                if (v124)
                {
                  sub_1B62C15C4(&v122, (uint64_t)v127);
                  swift_unownedRetainStrong();
                  uint64_t v58 = v128;
                  uint64_t v59 = sub_1B62C14BC(v127, v128);
                  sub_1B6A64824((uint64_t)v59, v108, 0, v58, (uint64_t)&v122);
                  uint64_t v60 = *(void *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
                  if (v60 && (*(unsigned char *)(v60 + 81) & 1) != 0 && *(void *)(v60 + 24) && swift_weakLoadStrong())
                  {
                    swift_retain();
                    swift_unknownObjectRetain();
                    swift_release();
                    sub_1B6873570((uint64_t)&v122, (uint64_t)v121);
                    int v61 = *(void **)(v60 + 16);
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    *(void *)(v60 + 16) = v61;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      int v61 = sub_1B68C0B2C(0, v61[2] + 1, 1, v61);
                      *(void *)(v60 + 16) = v61;
                    }
                    unint64_t v64 = v61[2];
                    unint64_t v63 = v61[3];
                    if (v64 >= v63 >> 1)
                    {
                      int v61 = sub_1B68C0B2C(v63 > 1, v64 + 1, 1, v61);
                      *(void *)(v60 + 16) = v61;
                    }
                    v61[2] = v64 + 1;
                    sub_1B68735CC((uint64_t)v121, (uint64_t)&v61[8 * v64 + 4]);
                    swift_release();
                    swift_unknownObjectRelease();
                  }
                  swift_release();
                  sub_1B67421B0((uint64_t)&v122);
                  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v127);
                }
                else
                {
                  sub_1B62C5E50((uint64_t)&v122, (unint64_t *)&qword_1EB97EAF0, (unint64_t *)&qword_1EB97EAE0);
                }
              }
            }
            sub_1B62C5E50((uint64_t)v130, (unint64_t *)&qword_1EB97EAF0, (unint64_t *)&qword_1EB97EAE0);
          }
          sub_1B636C450((uint64_t)&v132);
          sub_1B636C450((uint64_t)v134);
          if (v36)
          {
            uint64_t v65 = *(void **)(v12 + v120);
            if (v65)
            {
              if (*(void *)(v65[2] + 16))
              {
                uint64_t v66 = swift_weakLoadStrong();
                if (v66)
                {
                  uint64_t v67 = v66;
                  uint64_t v68 = v65[3];
                  if (v68)
                  {
                    uint64_t v69 = v65[4];
                    uint64_t v70 = MEMORY[0x1BA9B8670](v65 + 8);
                    uint64_t v71 = v65[9];
                    uint64_t v72 = v65[2];
                    v65[2] = MEMORY[0x1E4FBC860];
                    int32x4_t v73 = (void *)swift_allocObject();
                    _OWORD v73[2] = v67;
                    v73[3] = v72;
                    uint64_t v74 = v73;
                    void v73[4] = v68;
                    v73[5] = v69;
                    v73[6] = v70;
                    v73[7] = v71;
                    uint64_t v75 = self;
                    uint64_t v110 = v68;
                    uint64_t v76 = v67;
                    uint64_t v77 = (void *)v75;
                    swift_unknownObjectRetain_n();
                    swift_retain();
                    swift_retain();
                    uint64_t v111 = v70;
                    swift_unknownObjectRetain();
                    unsigned int v109 = objc_msgSend(v77, sel_immediateMode);
                    objc_msgSend(v77, sel_setImmediateMode_, 0);
                    if (v65[11] || *(unsigned char *)(v76 + 48) != 1)
                    {
                      int8x16_t v85 = (void *)v65[11];
                      uint64_t v86 = swift_allocObject();
                      *(void *)(v86 + 16) = sub_1B6A00CF4;
                      *(void *)(v86 + 24) = v74;
                      id v87 = v85;
                      uint64_t v125 = sub_1B6377A84;
                      uint64_t v126 = v86;
                      *(void *)&long long v122 = MEMORY[0x1E4F143A8];
                      *((void *)&v122 + 1) = 1107296256;
                      int32x4_t v123 = sub_1B69EFABC;
                      float32x4_t v124 = &unk_1F0FB7F80;
                      float v88 = _Block_copy(&v122);
                      swift_retain();
                      swift_release();
                      objc_msgSend(v77, sel_postCommandWithContext_object_applyBlock_, v87, 0, v88);
                      _Block_release(v88);
                    }
                    else
                    {
                      sub_1B63989B8(0, (unint64_t *)&qword_1EB97D1B0);
                      uint64_t v98 = sub_1B6E32238();
                      uint64_t v78 = swift_allocObject();
                      *(void *)(v78 + 16) = sub_1B6A00CF4;
                      *(void *)(v78 + 24) = v74;
                      uint64_t v125 = sub_1B6377A84;
                      uint64_t v126 = v78;
                      *(void *)&long long v122 = MEMORY[0x1E4F143A8];
                      *((void *)&v122 + 1) = 1107296256;
                      int32x4_t v123 = sub_1B639AA00;
                      float32x4_t v124 = &unk_1F0FB8138;
                      float32x2_t v97 = _Block_copy(&v122);
                      swift_retain();
                      swift_release();
                      uint64_t v79 = v99;
                      sub_1B6E313F8();
                      *(void *)&long long v122 = MEMORY[0x1E4FBC860];
                      uint64_t v95 = sub_1B6367240((unint64_t *)&qword_1EB97D188, MEMORY[0x1E4FBCB00]);
                      sub_1B629AC74(0, (unint64_t *)&qword_1EB9802E0, MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
                      sub_1B6A00D04();
                      float32x2_t v96 = v74;
                      long long v81 = v93;
                      uint64_t v80 = v94;
                      sub_1B6E327B8();
                      uint64_t v82 = v79;
                      uint64_t v84 = v97;
                      float32x4_t v83 = (void *)v98;
                      MEMORY[0x1BA9B3EB0](0, v82, v81, v97);
                      _Block_release(v84);

                      (*v91)(v81, v80);
                      (*v90)(v99, v92);
                    }
                    objc_msgSend(v77, sel_setImmediateMode_, v109, v90);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    swift_release();
                  }
                }
              }
            }
          }
          ++v31;
        }
        while (v31 != v118);
        swift_bridgeObjectRelease();
        uint64_t v23 = v104;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v23;
    }
    while (v23 != v102);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
}