BOOL operator==(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

{
  return *a1 == *a2;
}

BOOL operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (1)
  {
    v3 = (double *)(a2 + v2);
    if (*(double *)(a1 + v2) != *(double *)(a2 + v2)
      || *(double *)(a1 + v2 + 8) != v3[1]
      || *(double *)(a1 + v2 + 16) != v3[2]
      || *(double *)(a1 + v2 + 24) != v3[3])
    {
      break;
    }
    v2 += 32;
    if (v2 == 256)
    {
      if (*(double *)(a1 + 256) == *(double *)(a2 + 256)
        && *(_DWORD *)(a1 + 264) == *(_DWORD *)(a2 + 264)
        && *(unsigned __int8 *)(a1 + 268) == *(unsigned __int8 *)(a2 + 268)
        && *(unsigned __int8 *)(a1 + 269) == *(unsigned __int8 *)(a2 + 269)
        && *(unsigned __int8 *)(a1 + 270) == *(unsigned __int8 *)(a2 + 270)
        && *(unsigned __int8 *)(a1 + 271) == *(unsigned __int8 *)(a2 + 271)
        && *(unsigned __int8 *)(a1 + 272) == *(unsigned __int8 *)(a2 + 272)
        && *(unsigned __int8 *)(a1 + 273) == *(unsigned __int8 *)(a2 + 273)
        && *(unsigned __int8 *)(a1 + 274) == *(unsigned __int8 *)(a2 + 274)
        && *(unsigned __int8 *)(a1 + 275) == *(unsigned __int8 *)(a2 + 275)
        && *(unsigned __int8 *)(a1 + 276) == *(unsigned __int8 *)(a2 + 276)
        && *(unsigned __int8 *)(a1 + 277) == *(unsigned __int8 *)(a2 + 277)
        && *(unsigned __int8 *)(a1 + 278) == *(unsigned __int8 *)(a2 + 278))
      {
        return *(unsigned __int8 *)(a1 + 279) == *(unsigned __int8 *)(a2 + 279);
      }
      return 0;
    }
  }
  return 0;
}

uint64_t sub_1B6DABD0C(uint64_t result, unsigned char *a2)
{
  *(void *)result = &unk_1F0FB5270;
  char v2 = *a2;
  if (*a2)
  {
    v3 = a2 + 1;
    __int16 v4 = -25147;
    do
    {
      __int16 v4 = 403 * (v4 ^ v2);
      int v5 = *v3++;
      char v2 = v5;
    }
    while (v5);
  }
  else
  {
    __int16 v4 = -25147;
  }
  *(_WORD *)(result + 8) = v4;
  *(void *)(result + 16) = a2;
  return result;
}

void sub_1B6DABD6C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

void sub_1B6DABD78(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

uint64_t sub_1B6DABD84()
{
  return 0;
}

uint64_t sub_1B6DABD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a3;
  prof_beginFlame((uint64_t)"_sortSubgraphDependencies", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 79);
  unsigned __int8 v9 = 1;
  int v5 = *(unsigned int **)(a1 + 16);
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = &v10;
  v8[3] = &v9;
  CStackAllocatorPushFrame(v5);
  sub_1B6DB8620(v8);
  CStackAllocatorPopFrame((uint64_t)v5);
  uint64_t v6 = v9;
  prof_endFlame();
  return v6;
}

void sub_1B6DABE24(_Unwind_Exception *a1)
{
}

void CFX::RG::RenderGraphContext::~RenderGraphContext(CFX::RG::RenderGraphContext *this)
{
  uint64_t v2 = *((unsigned int *)this + 18);
  if (v2)
  {
    v3 = (int **)*((void *)this + 10);
    uint64_t v4 = 8 * v2;
    do
    {
      CScratchAllocatorDestroy(*v3++);
      v4 -= 8;
    }
    while (v4);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    uint64_t v6 = sub_1B6DB7718(v5);
    MEMORY[0x1BA9B6D80](v6, 0x1030C408C11463FLL);
  }
  v7 = (CFX::GPUResourceManager *)*((void *)this + 3);
  if (v7)
  {
    CFX::GPUResourceManager::~GPUResourceManager(v7);
    MEMORY[0x1BA9B6D80]();
  }
  CStackAllocatorDestroy(*((void *)this + 2));
  CScratchAllocatorDestroy(*(int **)this);
  if (*((_DWORD *)this + 51)) {
    free(*((void **)this + 26));
  }
  sub_1B6DB9114((uint64_t)this + 168);
  sub_1B6DB9064((uint64_t)this + 136);
  sub_1B6DB9064((uint64_t)this + 104);
  sub_1B6DB90A4((unsigned int *)this + 22);
  if (*((_DWORD *)this + 19)) {
    free(*((void **)this + 10));
  }
  sub_1B6DB9064((uint64_t)this + 40);
}

void sub_1B6DABF1C(_Unwind_Exception *a1)
{
  if (*(_DWORD *)(v1 + 204)) {
    free(*(void **)(v1 + 208));
  }
  sub_1B6DB9114(v1 + 168);
  sub_1B6DB9064(v1 + 136);
  sub_1B6DB9064(v1 + 104);
  sub_1B6DB90A4((unsigned int *)(v1 + 88));
  if (*(_DWORD *)(v1 + 76)) {
    free(*(void **)(v1 + 80));
  }
  sub_1B6DB9064(v1 + 40);
  _Unwind_Resume(a1);
}

void CFX::RG::RenderGraphContext::createPersistentRenderGraphBuilder(CFX::RG::RenderGraphContext *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4 = *((_DWORD *)this + 18);
  if (!v4) {
    CScratchAllocatorCreate();
  }
  v9[0] = *(void *)(*((void *)this + 10) + 8 * v4 - 8);
  uint64_t v5 = v9[0];
  v9[1] = 0;
  *((_DWORD *)this + 18) = v4 - 1;
  uint64_t v6 = sub_1B6DAC078(v5, 0, v9);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v6) ^ ((0x9DDFEA08EB382D69 * v6) >> 47));
  uint64_t v8 = v9[0];
  sub_1B6DAC0C0((uint64_t)this + 40, 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47)), &v8);
  *a2 = v6;
  operator new();
}

uint64_t sub_1B6DAC078(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v4 = sub_1B63C8330(v6, 0x148u, 8u);
  return CFX::RG::RenderGraphBuilder::RenderGraphBuilder(v4, *a3, a3[1]);
}

uint64_t sub_1B6DAC0C0(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 16);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 8 * v15) = *(void *)(*(void *)a1 + 8 * v21);
          *(void *)(v26 + 8 * v15) = *(void *)(v26 + 8 * v21);
          uint64_t v8 = *(void *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = *a3;
      *(void *)(*(void *)a1 + 8 * v21) = a2;
      uint64_t v28 = *(void *)(a1 + 16);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B6DB91C4(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v10) = *a3;
  return result;
}

void CFX::RG::RenderGraphContext::deletePersistantRenderGraph(CFX::RG::RenderGraphContext *this, CFX::RG::RenderGraphBuilder *a2)
{
  unint64_t v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
  unsigned int v5 = (*((_DWORD *)this + 17) - 1) & v4;
  unsigned int v6 = *(unsigned __int16 *)(*((void *)this + 7) + 2 * v5);
  if ((v6 & 2) == 0) {
    goto LABEL_3;
  }
  while (v4 != *(void *)(*((void *)this + 5) + 8 * v5))
  {
    do
    {
LABEL_3:
      v6 >>= 1;
      ++v5;
    }
    while ((v6 & 2) == 0);
  }
  uint64_t v14 = *(void *)(*((void *)this + 6) + 8 * v5);
  sub_1B6DAC424(v14, 0, a2);
  CScratchAllocatorReset(v14);
  sub_1B63D4868((uint64_t)this + 72, &v14);
  uint64_t v7 = (*((_DWORD *)this + 17) - 1) & v4;
  uint64_t v8 = *((void *)this + 7);
  unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
  if (v9 >= 2)
  {
    int v10 = 1;
    for (unsigned int i = *(unsigned __int16 *)(v8 + 2 * v7); ; i >>= 1)
    {
      if ((i & 2) != 0)
      {
        uint64_t v12 = (v7 + v10 - 1);
        if (v4 == *(void *)(*((void *)this + 5) + 8 * v12)) {
          break;
        }
      }
      ++v10;
      if (i <= 3) {
        return;
      }
    }
    *(_WORD *)(v8 + 2 * v7) = v9 ^ (1 << v10);
    *(_WORD *)(v8 + 2 * v12) ^= 1u;
    --*((_DWORD *)this + 16);
  }
}

void sub_1B6DAC424(int a1, void *a2, CFX::RG::RenderGraphBuilder *this)
{
  CFX::RG::RenderGraphBuilder::~RenderGraphBuilder(this);
  uint64_t v5 = v4;
  if (a2) {
    sub_1B63C89D4(a2, &v5);
  }
}

uint64_t CFX::RG::RenderGraphContext::nextFrame(CFX::RG::RenderGraphContext *this)
{
  CFX::CrossFrameResourceManager::nextFrame(*((CFX::CrossFrameResourceManager **)this + 4));
  CFX::GPUResourceManager::nextFrame(*((id **)this + 3));
  uint64_t v2 = *(CFX::CrossFrameResourceManager **)this;

  return CScratchAllocatorReset(v2);
}

uint64_t CFX::RG::RenderGraphContext::store(uint64_t a1, long long *a2)
{
  return *(void *)a2;
}

void sub_1B6DAC4D8(uint64_t a1, long long *a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B6DB92B8((unsigned int *)a1, 1, 0);
    unsigned int v4 = *(_DWORD *)a1;
  }
  long long v5 = *a2;
  *(_OWORD *)(*(void *)(a1 + 8) + 16 * v4) = *a2;
  if (*((void *)&v5 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
    unsigned int v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 + 1;
}

void *CFX::RG::RenderGraphContext::release@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 88);
  uint64_t v4 = a1 + 88;
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 + 8);
  if (v6)
  {
    uint64_t v8 = 16 * v5;
    unsigned int v9 = &v7[2 * v5];
    while (*v7 != a2)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        uint64_t v7 = v9;
        break;
      }
    }
  }
  uint64_t v10 = v7[1];
  *a3 = *v7;
  a3[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_1B6DAC59C(v4, v7);
}

void *sub_1B6DAC59C(uint64_t a1, void *__dst)
{
  if (*(_DWORD *)(a1 + 4))
  {
    uint64_t v4 = (std::__shared_weak_count *)__dst[1];
    if (v4) {
      sub_1B65F52C0(v4);
    }
  }
  unsigned int v5 = *(_DWORD *)a1 - 1;
  *(_DWORD *)a1 = v5;
  unsigned int v6 = (unsigned char *)(*(void *)(a1 + 8) + 16 * v5);
  if (v6 != (unsigned char *)__dst) {
    memmove(__dst, __dst + 2, v6 - (unsigned char *)__dst);
  }
  return __dst;
}

uint64_t CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(CFX::GPUResourceManager **this, const CFX::RG::Resource *a2)
{
  unint64_t v4 = CFX::GPUResourceManager::resourceHashOrRemapped(this[3], a2);
  unint64_t v5 = v4;
  unsigned int v6 = (*((_DWORD *)this + 33) - 1) & v4;
  unsigned int v7 = *((unsigned __int16 *)this[15] + v6);
  if (v7 < 2) {
    goto LABEL_5;
  }
  while ((v7 & 2) == 0 || v4 != *((void *)this[13] + v6))
  {
    ++v6;
    BOOL v8 = v7 >= 4;
    v7 >>= 1;
    if (!v8) {
      goto LABEL_5;
    }
  }
  uint64_t v12 = this[14];
  if (!v12)
  {
LABEL_5:
    CFX::RG::RenderGraphContext::resolveResourcesDescriptorIfNeeded(this, a2);
    unsigned int v6 = (*((_DWORD *)this + 33) - 1) & v5;
    unsigned int v9 = *((unsigned __int16 *)this[15] + v6);
    if (v9 < 2) {
      return 0;
    }
    while ((v9 & 2) == 0 || v5 != *((void *)this[13] + v6))
    {
      ++v6;
      BOOL v10 = v9 > 3;
      v9 >>= 1;
      if (!v10) {
        return 0;
      }
    }
    uint64_t v12 = this[14];
  }
  return (uint64_t)v12 + 80 * v6;
}

void CFX::RG::RenderGraphContext::resolveResourcesDescriptorIfNeeded(CFX::GPUResourceManager **this, const CFX::RG::Resource *a2)
{
  unsigned int v17 = a2;
  unint64_t v4 = CFX::GPUResourceManager::resourceHashOrRemapped(this[3], a2);
  uint64_t v5 = v4;
  unsigned int v6 = (*((_DWORD *)this + 33) - 1) & v4;
  unsigned int v7 = *((unsigned __int16 *)this[15] + v6);
  if (v7 < 2) {
    goto LABEL_5;
  }
  while ((v7 & 2) == 0 || v4 != *((void *)this[13] + v6))
  {
    ++v6;
    BOOL v8 = v7 >= 4;
    v7 >>= 1;
    if (!v8) {
      goto LABEL_5;
    }
  }
  if (!this[14])
  {
LABEL_5:
    unsigned int v9 = (long long *)CFX::RG::Resource::textureDesc(a2);
    long long v24 = v9[6];
    long long v25 = v9[7];
    long long v26 = v9[8];
    long long v27 = v9[9];
    long long v20 = v9[2];
    long long v21 = v9[3];
    long long v22 = v9[4];
    long long v23 = v9[5];
    long long v18 = *v9;
    long long v19 = v9[1];
    if (CFX::RG::RenderGraphContext::tryResolveTextureDescriptor((uint64_t)this, &v18, v16))
    {
      long long v21 = v16[3];
      long long v22 = v16[4];
      long long v19 = v16[1];
      long long v20 = v16[2];
      long long v18 = v16[0];
      sub_1B6DB93D0((uint64_t)(this + 13), v5, &v18);
      BOOL v10 = this[26];
      uint64_t v11 = *((unsigned int *)this + 50);
      if (v11)
      {
        uint64_t v12 = 8 * v11;
        unsigned int v13 = (const CFX::RG::Resource **)this[26];
        while (*v13 != a2)
        {
          ++v13;
          v12 -= 8;
          if (!v12)
          {
            unsigned int v13 = (const CFX::RG::Resource **)((char *)v10 + 8 * v11);
            break;
          }
        }
      }
      else
      {
        unsigned int v13 = (const CFX::RG::Resource **)this[26];
      }
      uint64_t v14 = ((char *)v13 - (char *)v10) >> 3;
      if (v14 != v11)
      {
        uint64_t v15 = (v11 - 1);
        *((_DWORD *)this + 50) = v15;
        if (v14 != v15) {
          memmove(v13, v13 + 1, (CFX::GPUResourceManager *)((char *)v10 + 8 * v15) - (CFX::GPUResourceManager *)v13);
        }
      }
    }
    else
    {
      sub_1B63D4868((uint64_t)(this + 25), &v17);
    }
  }
}

uint64_t CFX::RG::RenderGraphContext::updateResourceDescriptor(CFX::GPUResourceManager **this, const CFX::RG::Resource *a2)
{
  unint64_t v4 = CFX::GPUResourceManager::resourceHashOrRemapped(this[3], a2);
  uint64_t v5 = (long long *)CFX::RG::Resource::textureDesc(a2);
  long long v14 = v5[6];
  long long v15 = v5[7];
  long long v16 = v5[8];
  long long v17 = v5[9];
  long long v10 = v5[2];
  long long v11 = v5[3];
  long long v12 = v5[4];
  long long v13 = v5[5];
  long long v8 = *v5;
  long long v9 = v5[1];
  uint64_t result = CFX::RG::RenderGraphContext::tryResolveTextureDescriptor((uint64_t)this, &v8, v7);
  if (result)
  {
    long long v10 = v7[2];
    long long v11 = v7[3];
    long long v12 = v7[4];
    long long v8 = v7[0];
    long long v9 = v7[1];
    return sub_1B6DB93D0((uint64_t)(this + 13), v4, &v8);
  }
  return result;
}

uint64_t CFX::RG::RenderGraphContext::computeResourceDescriptor(uint64_t a1, CFX::RG::Resource *this, _OWORD *a3)
{
  uint64_t v5 = (long long *)CFX::RG::Resource::textureDesc(this);
  long long v6 = v5[7];
  v12[6] = v5[6];
  v12[7] = v6;
  long long v7 = v5[9];
  v12[8] = v5[8];
  v12[9] = v7;
  long long v8 = v5[3];
  v12[2] = v5[2];
  v12[3] = v8;
  long long v9 = v5[5];
  v12[4] = v5[4];
  v12[5] = v9;
  long long v10 = v5[1];
  v12[0] = *v5;
  v12[1] = v10;
  return CFX::RG::RenderGraphContext::tryResolveTextureDescriptor(a1, v12, a3);
}

void CFX::RG::RenderGraphContext::registerReferenceDescriptor(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  prof_beginFlame((uint64_t)"registerReferenceDescriptor", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 284);
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (a2 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 1)) >> 47) ^ 1);
  uint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  unsigned int v8 = (*(_DWORD *)(a1 + 164) - 1) & v7;
  unsigned int v9 = *(unsigned __int16 *)(*(void *)(a1 + 152) + 2 * v8);
  if (v9 < 2) {
    goto LABEL_5;
  }
  while ((v9 & 2) == 0 || v7 != *(void *)(*(void *)(a1 + 136) + 8 * v8))
  {
    ++v8;
    BOOL v10 = v9 >= 4;
    v9 >>= 1;
    if (!v10) {
      goto LABEL_5;
    }
  }
  uint64_t v23 = *(void *)(a1 + 144);
  if (v23)
  {
    if (!CFX::RG::TextureDescriptorReference::operator==((unsigned __int16 *)(v23 + 160 * v8), a3))
    {
      long long v24 = *((_OWORD *)a3 + 6);
      long long v25 = *((_OWORD *)a3 + 8);
      long long v26 = *((_OWORD *)a3 + 9);
      long long v40 = *((_OWORD *)a3 + 7);
      long long v41 = v25;
      long long v42 = v26;
      long long v27 = *((_OWORD *)a3 + 2);
      long long v28 = *((_OWORD *)a3 + 4);
      long long v29 = *((_OWORD *)a3 + 5);
      long long v36 = *((_OWORD *)a3 + 3);
      long long v37 = v28;
      long long v38 = v29;
      long long v39 = v24;
      long long v30 = *((_OWORD *)a3 + 1);
      long long v33 = *(_OWORD *)a3;
      long long v34 = v30;
      long long v35 = v27;
      sub_1B6DB96F4(a1 + 136, v7, &v33);
      memset(*(void **)(a1 + 104), 255, 8 * (*(_DWORD *)(a1 + 132) + 15));
      bzero(*(void **)(a1 + 120), 2 * (*(_DWORD *)(a1 + 132) + 15));
      *(_DWORD *)(a1 + 128) = 0;
    }
  }
  else
  {
LABEL_5:
    long long v11 = *((_OWORD *)a3 + 6);
    long long v12 = *((_OWORD *)a3 + 8);
    long long v13 = *((_OWORD *)a3 + 9);
    long long v40 = *((_OWORD *)a3 + 7);
    long long v41 = v12;
    long long v42 = v13;
    long long v14 = *((_OWORD *)a3 + 2);
    long long v15 = *((_OWORD *)a3 + 4);
    long long v16 = *((_OWORD *)a3 + 5);
    long long v36 = *((_OWORD *)a3 + 3);
    long long v37 = v15;
    long long v38 = v16;
    long long v39 = v11;
    long long v17 = *((_OWORD *)a3 + 1);
    long long v33 = *(_OWORD *)a3;
    long long v34 = v17;
    long long v35 = v14;
    sub_1B6DB96F4(a1 + 136, v7, &v33);
    *(void *)&long long v33 = *(void *)(a1 + 16);
    *((void *)&v33 + 1) = 0x2000000000;
    *(void *)&long long v34 = (char *)&v34 + 8;
    uint64_t v18 = *(unsigned int *)(a1 + 200);
    if (v18)
    {
      long long v19 = *(CFX::RG::Resource ***)(a1 + 208);
      uint64_t v20 = 8 * v18;
      do
      {
        v32 = *v19;
        long long v21 = (long long *)CFX::RG::Resource::textureDesc(v32);
        long long v49 = v21[6];
        long long v50 = v21[7];
        long long v51 = v21[8];
        long long v52 = v21[9];
        long long v45 = v21[2];
        long long v46 = v21[3];
        long long v47 = v21[4];
        long long v48 = v21[5];
        long long v43 = *v21;
        long long v44 = v21[1];
        if (CFX::RG::RenderGraphContext::tryResolveTextureDescriptor(a1, &v43, v31))
        {
          unint64_t v22 = CFX::GPUResourceManager::resourceHashOrRemapped(*(CFX::GPUResourceManager **)(a1 + 24), v32);
          long long v45 = v31[2];
          long long v46 = v31[3];
          long long v47 = v31[4];
          long long v43 = v31[0];
          long long v44 = v31[1];
          sub_1B6DB93D0(a1 + 104, v22, &v43);
        }
        else
        {
          sub_1B64EA528(&v33, &v32);
        }
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
    *(_DWORD *)(a1 + 200) = 0;
  }
  prof_endFlame();
}

void sub_1B6DACC94(_Unwind_Exception *a1)
{
}

unint64_t CFX::RG::ResourceIdentifier::hash(CFX::RG::ResourceIdentifier *this)
{
  unint64_t v1 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (*(void *)this ^ 1)) ^ ((0x9DDFEA08EB382D69 * (*(void *)this ^ 1)) >> 47) ^ 1);
  return 0x9DDFEA08EB382D69 * (v1 ^ (v1 >> 47));
}

BOOL CFX::RG::TextureDescriptorReference::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 2);
  if (*((unsigned char *)a1 + 2)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if ((*((unsigned char *)a1 + 2) != 0) != (v2 != 0)) {
      return 0;
    }
  }
  else if (*a1 != *a2)
  {
    return 0;
  }
  int v4 = *((unsigned __int8 *)a2 + 6);
  if (*((unsigned char *)a1 + 6)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*((unsigned char *)a1 + 6) != 0) != (v4 != 0)) {
      return 0;
    }
  }
  else if (a1[2] != a2[2])
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 10) && *((unsigned char *)a2 + 10))
  {
    if (a1[4] != a2[4]) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 10) != 0) != (*((unsigned char *)a2 + 10) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 14) && *((unsigned char *)a2 + 14))
  {
    if (a1[6] != a2[6]) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 14) != 0) != (*((unsigned char *)a2 + 14) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 17) && *((unsigned char *)a2 + 17))
  {
    if (*((unsigned __int8 *)a1 + 16) != *((unsigned __int8 *)a2 + 16)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 17) != 0) != (*((unsigned char *)a2 + 17) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 19) && *((unsigned char *)a2 + 19))
  {
    if (*((unsigned __int8 *)a1 + 18) != *((unsigned __int8 *)a2 + 18)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 19) != 0) != (*((unsigned char *)a2 + 19) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 21) && *((unsigned char *)a2 + 21))
  {
    if (*((unsigned __int8 *)a1 + 20) != *((unsigned __int8 *)a2 + 20)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 21) != 0) != (*((unsigned char *)a2 + 21) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 32) && *((unsigned char *)a2 + 32))
  {
    if (*((void *)a1 + 3) != *((void *)a2 + 3)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 32) != 0) != (*((unsigned char *)a2 + 32) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 48) && *((unsigned char *)a2 + 48))
  {
    if (*((void *)a1 + 5) != *((void *)a2 + 5)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 48) != 0) != (*((unsigned char *)a2 + 48) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 64) && *((unsigned char *)a2 + 64))
  {
    if (*((void *)a1 + 7) != *((void *)a2 + 7)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 64) != 0) != (*((unsigned char *)a2 + 64) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 80) && *((unsigned char *)a2 + 80))
  {
    if (*((void *)a1 + 9) != *((void *)a2 + 9)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 80) != 0) != (*((unsigned char *)a2 + 80) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 96) && *((unsigned char *)a2 + 96))
  {
    if (*((void *)a1 + 11) != *((void *)a2 + 11)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 96) != 0) != (*((unsigned char *)a2 + 96) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 112) && *((unsigned char *)a2 + 112))
  {
    if (*((void *)a1 + 13) != *((void *)a2 + 13)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 112) != 0) != (*((unsigned char *)a2 + 112) != 0))
  {
    return 0;
  }
  if (*((unsigned char *)a1 + 128) && *((unsigned char *)a2 + 128))
  {
    if (*((void *)a1 + 15) != *((void *)a2 + 15)) {
      return 0;
    }
  }
  else if ((*((unsigned char *)a1 + 128) != 0) != (*((unsigned char *)a2 + 128) != 0))
  {
    return 0;
  }
  BOOL result = sub_1B6DADF78((unsigned __int8 *)a1 + 136, (unsigned __int8 *)a2 + 136);
  if (!result) {
    return result;
  }
  if (*((float *)a1 + 36) == *((float *)a2 + 36)) {
    return *((void *)a1 + 19) == *((void *)a2 + 19);
  }
  return 0;
}

void CFX::RG::RenderGraphContext::clearResolvedDescriptors(void **this)
{
  *((_DWORD *)this + 32) = 0;
}

void CFX::RG::RenderGraphContext::clearReferenceDescriptors(void **this)
{
  memset(this[17], 255, 8 * (*((_DWORD *)this + 41) + 15));
  bzero(this[19], 2 * (*((_DWORD *)this + 41) + 15));
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 50) = 0;
  memset(this[13], 255, 8 * (*((_DWORD *)this + 33) + 15));
  bzero(this[15], 2 * (*((_DWORD *)this + 33) + 15));
  *((_DWORD *)this + 32) = 0;

  sub_1B6DAD18C((uint64_t)(this + 21));
}

void CFX::RG::RenderGraphContext::clearRegisteredResourceIdentifiers(CFX::RG::RenderGraphContext *this)
{
}

void sub_1B6DAD18C(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = 0;
}

void CFX::RG::RenderGraphContext::registerResourceIdentifier(uint64_t a1, uint64_t a2, const CFX::RG::Resource *a3)
{
  uint64_t v14 = a2;
  prof_beginFlame((uint64_t)"registerResourceIdentifier", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 328);
  if ((unsigned __int16)a2 != 6893
    && (unsigned __int16)a2 != 9273
    && WORD1(a2) != 6893
    && WORD1(a2) != 9273
    && HIDWORD(a2) != 6893
    && HIDWORD(a2) != 9273)
  {
    unint64_t v6 = CFX::GPUResourceManager::resourceHashOrRemapped(*(CFX::GPUResourceManager **)(a1 + 24), a3);
    uint64_t v7 = v6;
    unsigned int v8 = (*(_DWORD *)(a1 + 196) - 1) & v6;
    unsigned int v9 = *(unsigned __int16 *)(*(void *)(a1 + 184) + 2 * v8);
    if (v9 < 2) {
      goto LABEL_11;
    }
    while ((v9 & 2) == 0 || v6 != *(void *)(*(void *)(a1 + 168) + 8 * v8))
    {
      ++v8;
      BOOL v10 = v9 >= 4;
      v9 >>= 1;
      if (!v10) {
        goto LABEL_11;
      }
    }
    uint64_t v11 = *(void *)(a1 + 176);
    if (v11)
    {
      sub_1B6DAD3D4(v11 + 16 * v8, &v14);
    }
    else
    {
LABEL_11:
      uint64_t v12 = 0;
      long long v13 = &v14;
      sub_1B63D00C4((unsigned int *)&v12, 3, 1);
      sub_1B63D0190((uint64_t)&v12, &v14);
      sub_1B6DAD428(a1 + 168, v7, &v12);
      if (HIDWORD(v12)) {
        free(v13);
      }
    }
  }
  prof_endFlame();
}

void sub_1B6DAD358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
}

BOOL CFX::RG::ResourceIdentifier::isComplete(CFX::RG::ResourceIdentifier *this)
{
  int v1 = *(unsigned __int16 *)this;
  if (v1 == 6893 || v1 == 9273) {
    return 0;
  }
  int v3 = *((unsigned __int16 *)this + 1);
  if (v3 == 6893 || v3 == 9273) {
    return 0;
  }
  int v6 = *((_DWORD *)this + 1);
  return v6 != 6893 && v6 != 9273;
}

void sub_1B6DAD3D4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)a1;
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    BOOL v5 = *(void **)(a1 + 8);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        BOOL v5 = (void *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    BOOL v5 = *(void **)(a1 + 8);
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3) {
    sub_1B63D0190(a1, a2);
  }
}

uint64_t sub_1B6DAD428(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v5 = *(_DWORD *)(a1 + 28);
    uint64_t v6 = (v5 - 1) & a2;
    uint64_t v7 = *(void *)(a1 + 16);
    unsigned int v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v11 = v5 + 15;
    if (v11 >= (int)v6 + 496) {
      unsigned int v11 = v6 + 496;
    }
    if (v6 >= v11)
    {
      LODWORD(v13) = v6;
    }
    else
    {
      uint64_t v12 = (__int16 *)(v7 + 2 * v6);
      LODWORD(v13) = v6;
      while (1)
      {
        __int16 v14 = *v12++;
        if ((v14 & 1) == 0) {
          break;
        }
        LODWORD(v13) = v13 + 1;
        if (v11 == v13) {
          goto LABEL_34;
        }
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        uint64_t v24 = v13;
      }
      else
      {
        do
        {
          unsigned int v15 = v13;
          unsigned int v16 = v13 - 14;
          if (v13 < 0xF) {
            unsigned int v16 = 0;
          }
          unsigned int v17 = v16 - 1;
          if (v16 <= v13) {
            unsigned int v18 = v13;
          }
          else {
            unsigned int v18 = v16;
          }
          char v19 = 1;
          while (1)
          {
            uint64_t v13 = v17 + 1;
            if (v16 <= v13) {
              break;
            }
LABEL_26:
            ++v19;
            unsigned int v17 = v13;
            if (v13 == v18) {
              goto LABEL_33;
            }
          }
          int v20 = 1 << (v17 - v16 + 2);
          char v21 = v19;
          unsigned int v22 = v16;
          while (1)
          {
            uint64_t v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0) {
              break;
            }
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v13) {
              goto LABEL_26;
            }
          }
          if (v13 >= v15)
          {
LABEL_33:
            *(_WORD *)(v7 + 2 * v15) ^= 1u;
            goto LABEL_34;
          }
          uint64_t v24 = v13;
          uint64_t v25 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 8 * v15) = *(void *)(*(void *)a1 + 8 * v13);
          long long v26 = (void *)(v25 + 16 * v15);
          *long long v26 = 0;
          v26[1] = v26 + 2;
          sub_1B65F523C((uint64_t)v26, (void *)(v25 + 16 * v13));
          uint64_t v27 = *(void *)(a1 + 8);
          if (*(_DWORD *)(v27 + 16 * v13 + 4)) {
            free(*(void **)(v27 + 16 * v13 + 8));
          }
          uint64_t v7 = *(void *)(a1 + 16);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v15 - v23 + 1))) ^ (1 << v21);
        }
        while (v13 > (int)v6 + 14);
      }
      long long v29 = (void *)(*(void *)(a1 + 8) + 16 * v24);
      *long long v29 = 0;
      v29[1] = v29 + 2;
      sub_1B65F523C((uint64_t)v29, a3);
      *(void *)(*(void *)a1 + 8 * v24) = a2;
      uint64_t v30 = *(void *)(a1 + 16);
      *(_WORD *)(v30 + 2 * v24) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v30 + 2 * v6) |= 1 << (v13 - v6 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_34:
    sub_1B6DB9A48(a1);
  }
  unsigned int v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v9) != a2)
  {
    ++v9;
    BOOL v10 = v8 > 3;
    v8 >>= 1;
    if (!v10) {
      goto LABEL_6;
    }
  }
  sub_1B65F523C(*(void *)(a1 + 8) + 16 * v9, a3);
  return 0;
}

uint64_t sub_1B6DAD6A0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t *CFX::RG::RenderGraphContext::registeredIdentifiersForResource(CFX::GPUResourceManager **this, const CFX::RG::Resource *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48010, memory_order_acquire) & 1) == 0)
  {
    BOOL v10 = a2;
    int v9 = __cxa_guard_acquire(&qword_1E9E48010);
    a2 = v10;
    if (v9)
    {
      qword_1E9E48000 = 0;
      *(void *)algn_1E9E48008 = &qword_1E9E48010;
      __cxa_atexit((void (*)(void *))sub_1B6DAD6A0, &qword_1E9E48000, &dword_1B6287000);
      __cxa_guard_release(&qword_1E9E48010);
      a2 = v10;
    }
  }
  unint64_t v3 = CFX::GPUResourceManager::resourceHashOrRemapped(this[3], a2);
  unsigned int v4 = (*((_DWORD *)this + 49) - 1) & v3;
  unsigned int v5 = *((unsigned __int16 *)this[23] + v4);
  if (v5 < 2)
  {
LABEL_6:
    uint64_t v7 = 0;
  }
  else
  {
    while ((v5 & 2) == 0 || v3 != *((void *)this[21] + v4))
    {
      ++v4;
      BOOL v6 = v5 > 3;
      v5 >>= 1;
      if (!v6) {
        goto LABEL_6;
      }
    }
    uint64_t v7 = (uint64_t)this[22] + 16 * v4;
  }
  if (v7) {
    return (uint64_t *)v7;
  }
  else {
    return &qword_1E9E48000;
  }
}

uint64_t CFX::RG::RenderGraphContext::tryResolveTextureDescriptor(uint64_t a1, long long *a2, _OWORD *a3)
{
  long long v5 = a2[7];
  long long v51 = a2[6];
  long long v52 = v5;
  long long v6 = a2[9];
  long long v53 = a2[8];
  long long v54 = v6;
  long long v7 = a2[3];
  long long v47 = a2[2];
  long long v48 = v7;
  long long v8 = a2[5];
  long long v49 = a2[4];
  long long v50 = v8;
  long long v9 = a2[1];
  long long v45 = *a2;
  long long v46 = v9;
  uint64_t v41 = *(void *)(a1 + 16);
  long long v43 = &v44;
  uint64_t v10 = 24;
  uint64_t v42 = 0x800000000;
  do
  {
    CFX::RG::TextureDescriptorReference::TextureDescriptorReference((uint64_t)&v41 + v10);
    v10 += 160;
  }
  while (v10 != 1304);
  sub_1B6DADA14((uint64_t)&v41, (uint64_t)&v45);
  uint64_t v11 = *((void *)&v54 + 1);
  if (*((void *)&v54 + 1) == 0x1AED1AED1AEDLL)
  {
LABEL_4:
    RGTextureDescriptorMakeDefault((uint64_t)&v31);
    long long v12 = v34;
    a3[2] = v33;
    a3[3] = v12;
    a3[4] = v35;
    long long v13 = v32;
    *a3 = v31;
    a3[1] = v13;
    if (v42)
    {
      __int16 v14 = (long long *)&v43[20 * v42 - 20];
      int v15 = v42 - 1;
      do
      {
        long long v37 = v14[6];
        long long v38 = v14[7];
        long long v39 = v14[8];
        long long v40 = v14[9];
        long long v33 = v14[2];
        long long v34 = v14[3];
        long long v35 = v14[4];
        long long v36 = v14[5];
        long long v31 = *v14;
        long long v32 = v14[1];
        LODWORD(v42) = v15;
        CFX::RG::TextureDescriptorReference::partialResolveInto((uint64_t)&v31, (uint64_t)a3, *(float *)&v32);
        v14 -= 10;
        --v15;
      }
      while (v15 != -1);
    }
    return 1;
  }
  else
  {
    while (1)
    {
      unint64_t v17 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v11 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (v11 ^ 1)) >> 47) ^ 1);
      unint64_t v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
      unsigned int v19 = (*(_DWORD *)(a1 + 164) - 1) & v18;
      unsigned int v20 = *(unsigned __int16 *)(*(void *)(a1 + 152) + 2 * v19);
      if (v20 < 2) {
        return 0;
      }
      while ((v20 & 2) == 0 || v18 != *(void *)(*(void *)(a1 + 136) + 8 * v19))
      {
        ++v19;
        BOOL v21 = v20 >= 4;
        v20 >>= 1;
        if (!v21) {
          return 0;
        }
      }
      uint64_t v22 = *(void *)(a1 + 144);
      if (!v22) {
        return 0;
      }
      uint64_t v23 = (long long *)(v22 + 160 * v19);
      long long v24 = v23[1];
      long long v45 = *v23;
      long long v46 = v24;
      long long v25 = v23[2];
      long long v26 = v23[3];
      long long v27 = v23[5];
      long long v49 = v23[4];
      long long v50 = v27;
      long long v47 = v25;
      long long v48 = v26;
      long long v28 = v23[6];
      long long v29 = v23[7];
      long long v30 = v23[9];
      long long v53 = v23[8];
      long long v54 = v30;
      long long v51 = v28;
      long long v52 = v29;
      sub_1B6DADA14((uint64_t)&v41, (uint64_t)&v45);
      uint64_t v11 = *((void *)&v54 + 1);
      if (*((void *)&v54 + 1) == 0x1AED1AED1AEDLL) {
        goto LABEL_4;
      }
    }
  }
}

__n128 sub_1B6DADA14(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  long long v6 = *(char **)(a1 + 16);
  if (v4 + 1 > v5)
  {
    unsigned int v7 = ((double)(v5 + 1) * 1.5);
    Aligned = (char *)CStackAllocatorAllocateAligned(*(uint64_t **)a1, 160 * v7, 8, 2);
    memcpy(Aligned, v6, 160 * *(unsigned int *)(a1 + 8));
    *(void *)(a1 + 16) = Aligned;
    *(_DWORD *)(a1 + 12) = v7;
    long long v6 = Aligned;
    int v4 = *(_DWORD *)(a1 + 8);
  }
  long long v9 = &v6[160 * v4];
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v10;
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v9 + 5) = v13;
  *((_OWORD *)v9 + 2) = v11;
  *((_OWORD *)v9 + 3) = v12;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v15 = *(_OWORD *)(a2 + 112);
  long long v16 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v9 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v9 + 9) = v16;
  *((__n128 *)v9 + 6) = result;
  *((_OWORD *)v9 + 7) = v15;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t CFX::RG::TextureDescriptorReference::baseReference(CFX::RG::TextureDescriptorReference *this)
{
  return *((void *)this + 19);
}

BOOL CFX::RG::ResourceIdentifier::isNull(CFX::RG::ResourceIdentifier *this)
{
  return *(void *)this == 0x1AED1AED1AEDLL;
}

void CFX::RG::TextureDescriptorReference::partialResolveInto(uint64_t a1, uint64_t a2, float a3)
{
  if ((*(_DWORD *)a1 & 0xFF0000) != 0) {
    *(_WORD *)a2 = *(_DWORD *)a1;
  }
  int v4 = *(_DWORD *)(a1 + 4);
  if ((v4 & 0xFF0000) != 0) {
    *(_WORD *)(a2 + 2) = v4;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if ((v5 & 0xFF0000) != 0) {
    *(_WORD *)(a2 + 4) = v5;
  }
  int v6 = *(_DWORD *)(a1 + 12);
  if ((v6 & 0xFF0000) != 0) {
    *(_WORD *)(a2 + 6) = v6;
  }
  unsigned int v7 = *(unsigned __int16 *)(a1 + 16);
  if (v7 >= 0x100) {
    *(unsigned char *)(a2 + 8) = v7;
  }
  unsigned int v8 = *(unsigned __int16 *)(a1 + 18);
  if (v8 >= 0x100) {
    *(unsigned char *)(a2 + 9) = v8;
  }
  unsigned int v9 = *(unsigned __int16 *)(a1 + 20);
  if (v9 >= 0x100) {
    *(unsigned char *)(a2 + 10) = v9;
  }
  if (*(unsigned char *)(a1 + 32)) {
    *(void *)(a2 + 16) = *(void *)(a1 + 24);
  }
  if (*(unsigned char *)(a1 + 48)) {
    *(void *)(a2 + 24) = *(void *)(a1 + 40);
  }
  if (*(unsigned char *)(a1 + 64)) {
    *(void *)(a2 + 32) = *(void *)(a1 + 56);
  }
  if (*(unsigned char *)(a1 + 80)) {
    *(void *)(a2 + 40) = *(void *)(a1 + 72);
  }
  if (*(unsigned char *)(a1 + 96)) {
    *(void *)(a2 + 48) = *(void *)(a1 + 88);
  }
  if (*(unsigned char *)(a1 + 112)) {
    *(void *)(a2 + 56) = *(void *)(a1 + 104);
  }
  if (*(unsigned char *)(a1 + 128)) {
    *(void *)(a2 + 64) = *(void *)(a1 + 120);
  }
  if (*(unsigned char *)(a1 + 140)) {
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 136);
  }
  LOWORD(a3) = *(_WORD *)a2;
  float v10 = *(float *)(a1 + 144);
  float v11 = v10 * (float)LODWORD(a3);
  unsigned int v12 = (int)v11;
  if ((int)v11 <= 1) {
    unsigned int v12 = 1;
  }
  LOWORD(v11) = *(_WORD *)(a2 + 2);
  unsigned int v13 = (int)(float)(v10 * (float)LODWORD(v11));
  *(_WORD *)a2 = v12;
  if (v13 <= 1) {
    unsigned int v13 = 1;
  }
  *(_WORD *)(a2 + 2) = v13;
  unsigned int v14 = *(unsigned __int8 *)(a2 + 8);
  if (v14 >= 2)
  {
    unsigned __int8 v15 = vcvtms_s32_f32(log2f(fmaxf((float)v12, (float)v13))) + 1;
    if (v14 >= v15) {
      char v16 = v15;
    }
    else {
      char v16 = v14;
    }
    *(unsigned char *)(a2 + 8) = v16;
  }
  if (*(unsigned char *)(a2 + 9))
  {
    if (*(unsigned char *)(a2 + 9) == 1)
    {
      uint64_t v17 = *(void *)(a2 + 24);
      uint64_t v18 = 3;
      if (v17 != 8) {
        uint64_t v18 = *(void *)(a2 + 24);
      }
      BOOL v19 = v17 == 4;
      uint64_t v20 = 2;
      if (!v19) {
        uint64_t v20 = v18;
      }
      *(void *)(a2 + 24) = v20;
      *(unsigned char *)(a2 + 9) = 1;
    }
    else
    {
      uint64_t v21 = *(void *)(a2 + 24);
      uint64_t v22 = 8;
      if (v21 != 3) {
        uint64_t v22 = *(void *)(a2 + 24);
      }
      BOOL v19 = v21 == 2;
      uint64_t v23 = 4;
      if (!v19) {
        uint64_t v23 = v22;
      }
      *(void *)(a2 + 24) = v23;
    }
  }
}

void CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(CFX::GPUResourceManager **this, const CFX::RG::Resource **a2, const CFX::RG::Resource **a3)
{
  prof_beginFlame((uint64_t)"resolveResourcesDescriptorsIfNeeded", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 420);
  while (a2 != a3)
    CFX::RG::RenderGraphContext::resolveResourcesDescriptorIfNeeded(this, *a2++);

  prof_endFlame();
}

void sub_1B6DADD64(_Unwind_Exception *a1)
{
}

uint64_t CFX::RG::RenderGraphContext::setCurrentBuilder(uint64_t result, uint64_t a2)
{
  *(void *)(result + 216) = a2;
  return result;
}

uint64_t CFX::RG::RenderGraphContext::currentBuilder(CFX::RG::RenderGraphContext *this)
{
  return *((void *)this + 27);
}

uint64_t CFX::RG::RenderGraphContext::optimisationParameters(CFX::RG::RenderGraphContext *this)
{
  if (*((unsigned char *)this + 231)) {
    *((unsigned char *)this + 229) = 0;
  }
  return (uint64_t)this + 224;
}

{
  if (*((unsigned char *)this + 231)) {
    *((unsigned char *)this + 229) = 0;
  }
  return (uint64_t)this + 224;
}

uint64_t CFX::RG::ResourceIdentifier::null(CFX::RG::ResourceIdentifier *this)
{
  return 0x1AED1AED1AEDLL;
}

uint64_t CFX::RG::TextureDescriptorReference::TextureDescriptorReference(uint64_t result, uint64_t a2, float a3)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 4) = 0;
  *(unsigned char *)(result + 6) = 0;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 10) = 0;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 14) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(unsigned char *)(result + 112) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 0;
  *(unsigned char *)(result + 140) = 0;
  *(_WORD *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(float *)(result + 144) = a3;
  *(void *)(result + 152) = a2;
  return result;
}

uint64_t CFX::RG::TextureDescriptorReference::TextureDescriptorReference(uint64_t result, uint64_t a2)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 4) = 0;
  *(unsigned char *)(result + 6) = 0;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 10) = 0;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 14) = 0;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 72) = 0;
  *(unsigned char *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 104) = 0;
  *(unsigned char *)(result + 112) = 0;
  *(unsigned char *)(result + 120) = 0;
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 136) = 0;
  *(unsigned char *)(result + 140) = 0;
  *(_WORD *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 152) = 0x1AED1AED1AEDLL;
  *(_DWORD *)(result + 144) = 1065353216;
  *(_WORD *)__n128 result = *(_WORD *)a2;
  *(unsigned char *)(result + 2) = 1;
  *(_WORD *)(result + 4) = *(_WORD *)(a2 + 2);
  *(unsigned char *)(result + 6) = 1;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 4);
  *(unsigned char *)(result + 10) = 1;
  *(_WORD *)(result + 12) = *(_WORD *)(a2 + 6);
  *(unsigned char *)(result + 14) = 1;
  *(_WORD *)(result + 16) = *(unsigned __int8 *)(a2 + 8) | 0x100;
  *(_WORD *)(result + 18) = *(unsigned __int8 *)(a2 + 9) | 0x100;
  *(_WORD *)(result + 20) = *(unsigned __int8 *)(a2 + 10) | 0x100;
  *(void *)(result + 24) = *(void *)(a2 + 16);
  *(unsigned char *)(result + 32) = 1;
  *(void *)(result + 40) = *(void *)(a2 + 24);
  *(unsigned char *)(result + 48) = 1;
  *(void *)(result + 56) = *(void *)(a2 + 32);
  *(unsigned char *)(result + 64) = 1;
  *(void *)(result + 72) = *(void *)(a2 + 40);
  *(unsigned char *)(result + 80) = 1;
  *(void *)(result + 88) = *(void *)(a2 + 48);
  *(unsigned char *)(result + 96) = 1;
  *(void *)(result + 104) = *(void *)(a2 + 56);
  *(unsigned char *)(result + 112) = 1;
  *(void *)(result + 120) = *(void *)(a2 + 64);
  *(unsigned char *)(result + 128) = 1;
  int v2 = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(result + 140) = 1;
  *(_DWORD *)(result + 136) = v2;
  *(void *)(result + 152) = 0x1AED1AED1AEDLL;
  return result;
}

BOOL sub_1B6DADF78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[4]) {
    BOOL v2 = a2[4] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (a1[4] != 0) == (a2[4] != 0);
  }
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2]) {
    return a1[3] == a2[3];
  }
  return 0;
}

BOOL CFX::RG::ResourceIdentifier::operator==(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t CFX::RG::TextureDescriptorReference::finalColor@<X0>(uint64_t a1@<X8>)
{
  return CFX::RG::TextureDescriptorReference::TextureDescriptorReference(a1, 0xEF6F57C624392439, 1.0);
}

__n128 CFX::RG::TextureDescriptorReference::withWidth@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  long long v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  long long v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  long long v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  __n128 result = *(__n128 *)this;
  long long v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)a3 = a2;
  *(unsigned char *)(a3 + 2) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withHeight@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  long long v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  long long v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  long long v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  __n128 result = *(__n128 *)this;
  long long v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 4) = a2;
  *(unsigned char *)(a3 + 6) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withDepth@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  long long v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  long long v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  long long v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  __n128 result = *(__n128 *)this;
  long long v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 10) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withArraylength@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  long long v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  long long v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  long long v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  __n128 result = *(__n128 *)this;
  long long v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 12) = a2;
  *(unsigned char *)(a3 + 14) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withMipmaplevelcount@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, __int16 a2@<W1>, _OWORD *a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  a3[6] = *((_OWORD *)this + 6);
  a3[7] = v3;
  long long v4 = *((_OWORD *)this + 9);
  a3[8] = *((_OWORD *)this + 8);
  a3[9] = v4;
  long long v5 = *((_OWORD *)this + 3);
  a3[2] = *((_OWORD *)this + 2);
  a3[3] = v5;
  long long v6 = *((_OWORD *)this + 5);
  a3[4] = *((_OWORD *)this + 4);
  a3[5] = v6;
  __n128 result = *(__n128 *)this;
  long long v8 = *((_OWORD *)this + 1);
  *a3 = *(_OWORD *)this;
  a3[1] = v8;
  *((_WORD *)a3 + 8) = a2 | 0x100;
  return result;
}

_OWORD *CFX::RG::TextureDescriptorReference::withSampleCount@<X0>(_OWORD *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = this[7];
  *(_OWORD *)(a3 + 96) = this[6];
  *(_OWORD *)(a3 + 112) = v3;
  long long v4 = this[9];
  *(_OWORD *)(a3 + 128) = this[8];
  *(_OWORD *)(a3 + 144) = v4;
  long long v5 = this[3];
  *(_OWORD *)(a3 + 32) = this[2];
  *(_OWORD *)(a3 + 48) = v5;
  long long v6 = this[5];
  *(_OWORD *)(a3 + 64) = this[4];
  *(_OWORD *)(a3 + 80) = v6;
  long long v7 = this[1];
  *(_OWORD *)a3 = *this;
  *(_OWORD *)(a3 + 16) = v7;
  if (a2) {
    *(_WORD *)(a3 + 18) = a2 | 0x100;
  }
  return this;
}

__n128 CFX::RG::TextureDescriptorReference::withPixelFormat@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, MTLPixelFormat a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  long long v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  long long v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  long long v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  __n128 result = *(__n128 *)this;
  long long v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = a2;
  *(unsigned char *)(a3 + 32) = 1;
  return result;
}

_OWORD *CFX::RG::TextureDescriptorReference::withPixelFormatIf@<X0>(_OWORD *this@<X0>, MTLPixelFormat a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  long long v4 = this[7];
  *(_OWORD *)(a4 + 96) = this[6];
  *(_OWORD *)(a4 + 112) = v4;
  long long v5 = this[9];
  *(_OWORD *)(a4 + 128) = this[8];
  *(_OWORD *)(a4 + 144) = v5;
  long long v6 = this[3];
  *(_OWORD *)(a4 + 32) = this[2];
  *(_OWORD *)(a4 + 48) = v6;
  long long v7 = this[5];
  *(_OWORD *)(a4 + 64) = this[4];
  *(_OWORD *)(a4 + 80) = v7;
  long long v8 = this[1];
  *(_OWORD *)a4 = *this;
  *(_OWORD *)(a4 + 16) = v8;
  if (a3)
  {
    *(void *)(a4 + 24) = a2;
    *(unsigned char *)(a4 + 32) = 1;
  }
  return this;
}

__n128 CFX::RG::TextureDescriptorReference::withTextureType@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, MTLTextureType a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  long long v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  long long v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  long long v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  __n128 result = *(__n128 *)this;
  long long v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(void *)(a3 + 40) = a2;
  *(unsigned char *)(a3 + 48) = 1;
  return result;
}

__n128 CFX::RG::TextureDescriptorReference::withUsage@<Q0>(CFX::RG::TextureDescriptorReference *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a3 + 112) = v3;
  long long v4 = *((_OWORD *)this + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)this + 8);
  *(_OWORD *)(a3 + 144) = v4;
  long long v5 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v5;
  long long v6 = *((_OWORD *)this + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a3 + 80) = v6;
  __n128 result = *(__n128 *)this;
  long long v8 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v8;
  *(void *)(a3 + 72) = a2;
  *(unsigned char *)(a3 + 80) = 1;
  return result;
}

_OWORD *CFX::RG::TextureDescriptorReference::withSizeFactor@<X0>(_OWORD *this@<X0>, float a2@<S0>, float *a3@<X8>)
{
  long long v3 = this[7];
  *((_OWORD *)a3 + 6) = this[6];
  *((_OWORD *)a3 + 7) = v3;
  long long v4 = this[9];
  *((_OWORD *)a3 + 8) = this[8];
  *((_OWORD *)a3 + 9) = v4;
  long long v5 = this[3];
  *((_OWORD *)a3 + 2) = this[2];
  *((_OWORD *)a3 + 3) = v5;
  long long v6 = this[5];
  *((_OWORD *)a3 + 4) = this[4];
  *((_OWORD *)a3 + 5) = v6;
  long long v7 = this[1];
  *(_OWORD *)a3 = *this;
  *((_OWORD *)a3 + 1) = v7;
  a3[36] = a2;
  return this;
}

float CFX::RG::TextureDescriptorReference::applyingSizeFactor@<S0>(CFX::RG::TextureDescriptorReference *this@<X0>, float a2@<S0>, float *a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 7);
  *((_OWORD *)a3 + 6) = *((_OWORD *)this + 6);
  *((_OWORD *)a3 + 7) = v3;
  long long v4 = *((_OWORD *)this + 9);
  *((_OWORD *)a3 + 8) = *((_OWORD *)this + 8);
  *((_OWORD *)a3 + 9) = v4;
  long long v5 = *((_OWORD *)this + 3);
  *((_OWORD *)a3 + 2) = *((_OWORD *)this + 2);
  *((_OWORD *)a3 + 3) = v5;
  long long v6 = *((_OWORD *)this + 5);
  *((_OWORD *)a3 + 4) = *((_OWORD *)this + 4);
  *((_OWORD *)a3 + 5) = v6;
  long long v7 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *((_OWORD *)a3 + 1) = v7;
  float result = a3[36] * a2;
  a3[36] = result;
  return result;
}

uint64_t CFX::RG::ExternalResourceDesc::ExternalResourceDesc(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  id v7 = a5;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = _Block_copy(a4);
  long long v8 = _Block_copy(v7);

  *(void *)(a1 + 176) = v8;
  *(unsigned char *)(a1 + 184) = 0;
  return a1;
}

uint64_t CFX::RG::ExternalResourceDesc::ExternalResourceDesc(uint64_t a1, long long *a2, const void *a3, void *a4)
{
  *(unsigned char *)a1 = 1;
  long long v6 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v6;
  long long v7 = a2[2];
  long long v8 = a2[3];
  long long v9 = a2[4];
  *(_OWORD *)(a1 + 88) = a2[5];
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  long long v10 = a2[6];
  long long v11 = a2[7];
  long long v12 = a2[8];
  *(_OWORD *)(a1 + 152) = a2[9];
  *(_OWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 120) = v11;
  *(_OWORD *)(a1 + 104) = v10;
  id v13 = a4;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = _Block_copy(a3);
  unsigned int v14 = _Block_copy(v13);

  *(void *)(a1 + 176) = v14;
  *(unsigned char *)(a1 + 184) = 0;
  return a1;
}

uint64_t CFX::RG::ExternalResourceDesc::ExternalResourceDesc(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  long long v9 = a2[7];
  long long v10 = a2[8];
  long long v11 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = _Block_copy(*((const void **)a2 + 21));
  *(void *)(a1 + 176) = _Block_copy(*((const void **)a2 + 22));
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  return a1;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;

  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  long long v9 = a2[7];
  long long v10 = a2[8];
  long long v11 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = _Block_copy(*((const void **)a2 + 21));
  *(void *)(a1 + 176) = _Block_copy(*((const void **)a2 + 22));
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  return a1;
}

uint64_t CFX::RG::ExternalResourceDesc::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  long long v9 = a2[7];
  long long v10 = a2[8];
  long long v11 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  long long v12 = _Block_copy(*((const void **)a2 + 21));
  id v13 = *(void **)(a1 + 168);
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = v12;

  unsigned int v14 = _Block_copy(*((const void **)a2 + 22));
  unsigned __int8 v15 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v14;

  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  return a1;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  long long v9 = a2[7];
  long long v10 = a2[8];
  long long v11 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  long long v12 = *((void *)a2 + 21);
  *((void *)a2 + 21) = 0;
  id v13 = *(void **)(a1 + 168);
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = v12;

  unsigned int v14 = *((void *)a2 + 22);
  *((void *)a2 + 22) = 0;
  unsigned __int8 v15 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v14;

  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  return a1;
}

__n128 CFX::RG::ExternalResourceDesc::ExternalResourceDesc(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)((char *)a2 + 168);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *(__n128 *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = result;
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  return result;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  __n128 result;

  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)((char *)a2 + 168);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *(__n128 *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = result;
  *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
  return result;
}

void CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(id *this)
{
}

{
}

uint64_t CFX::RG::ExternalResourceDesc::kind(CFX::RG::ExternalResourceDesc *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t CFX::RG::ExternalResourceDesc::bufferDesc(CFX::RG::ExternalResourceDesc *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

uint64_t CFX::RG::ExternalResourceDesc::textureDesc(CFX::RG::ExternalResourceDesc *this)
{
  if (*(unsigned char *)this != 1) {
    abort();
  }
  return (uint64_t)this + 8;
}

{
  if (*(unsigned char *)this != 1) {
    abort();
  }
  return (uint64_t)this + 8;
}

id CFX::RG::ExternalResourceDesc::allocate(const void **this)
{
  int v1 = _Block_copy(this[21]);

  return v1;
}

id CFX::RG::ExternalResourceDesc::destroy(const void **this)
{
  int v1 = _Block_copy(this[22]);

  return v1;
}

BOOL CFX::RG::ExternalResourceDesc::validate(CFX::RG::ExternalResourceDesc *this)
{
  return *(unsigned char *)this || RGBufferDescriptorIsValid(*((void *)this + 1));
}

uint64_t CFX::RG::ExternalResourceDesc::requireLoad(CFX::RG::ExternalResourceDesc *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t CFX::RG::ExternalResourceDesc::setRequireLoad(uint64_t this, char a2)
{
  *(unsigned char *)(this + 184) = a2;
  return this;
}

void *CFX::RG::ResourceIdentifier::ResourceIdentifier(void *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

void *CFX::RG::ResourceIdentifier::ResourceIdentifier(void *this, uint64_t a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

CFX::RG::ResourceIdentifier *CFX::RG::ResourceIdentifier::ResourceIdentifier(CFX::RG::ResourceIdentifier *this, const char *__s)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int64_t v4 = strlen(__s);
  if (v4 >= 256
    || (int64_t v5 = v4, strcpy(__dst, __s), (v6 = strchr(__dst, 46)) == 0)
    || &__dst[v5] - v6 <= 0
    || (*long long v6 = 0, v7 = v6 + 1, (v8 = strchr(v6 + 1, 46)) == 0)
    || &__dst[v5] - v8 <= 0)
  {
    abort();
  }
  *long long v8 = 0;
  long long v9 = v8 + 1;
  if (!strcmp(v8 + 1, "Color"))
  {
    long long v11 = "Color0";
    long long v10 = v7;
  }
  else
  {
    long long v10 = v7;
    long long v11 = v9;
  }
  CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)&v13, __dst, v10, v11);
  *(void *)this = v13;
  return this;
}

CFX::RG::ResourceIdentifier *CFX::RG::ResourceIdentifier::ResourceIdentifier(CFX::RG::ResourceIdentifier *this, const char *a2, const char *a3, const char *a4)
{
  LODWORD(v8) = -2128831035;
  prof_beginFlame((uint64_t)"ResourceIdentifier", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 771);
  char v9 = *a2;
  if (*a2)
  {
    long long v10 = a2 + 1;
    unsigned __int16 v11 = -25147;
    do
    {
      unsigned __int16 v11 = 403 * (v11 ^ v9);
      int v12 = *(unsigned __int8 *)v10++;
      char v9 = v12;
    }
    while (v12);
    uint64_t v13 = v11;
  }
  else
  {
    uint64_t v13 = 40389;
  }
  char v14 = *a3;
  if (*a3)
  {
    uint64_t v15 = a3 + 1;
    int v16 = -2128831035;
    do
    {
      int v17 = v16 ^ v14;
      int v16 = 16777619 * v17;
      int v18 = *(unsigned __int8 *)v15++;
      char v14 = v18;
    }
    while (v18);
    uint64_t v19 = (26411008 * v17);
  }
  else
  {
    uint64_t v19 = 2646933504;
  }
  char v20 = *a4;
  if (*a4)
  {
    uint64_t v21 = a4 + 1;
    do
    {
      uint64_t v8 = 16777619 * (v8 ^ v20);
      int v22 = *(unsigned __int8 *)v21++;
      char v20 = v22;
    }
    while (v22);
    unint64_t v23 = v8 << 32;
  }
  else
  {
    unint64_t v23 = 0x811C9DC500000000;
  }
  *(void *)this = v23 | v19 | v13;
  prof_endFlame();
  return this;
}

BOOL CFX::RG::ResourceIdentifier::isFinal(CFX::RG::ResourceIdentifier *this)
{
  return *(void *)this == 0xEF6F57C624392439;
}

uint64_t CFX::RG::ResourceIdentifier::id(CFX::RG::ResourceIdentifier *this)
{
  return *(void *)this;
}

uint64_t CFX::RG::ResourceIdentifier::scope(CFX::RG::ResourceIdentifier *this)
{
  return *(unsigned __int16 *)this;
}

uint64_t CFX::RG::ResourceIdentifier::pass(CFX::RG::ResourceIdentifier *this)
{
  return *((unsigned __int16 *)this + 1);
}

uint64_t CFX::RG::ResourceIdentifier::resource(CFX::RG::ResourceIdentifier *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t CFX::RG::ResourceIdentifier::pathName@<X0>(CFX::RG::ResourceIdentifier *this@<X0>, void *a2@<X8>)
{
  sub_1B6DAEF34((uint64_t)&v22);
  uint64_t v4 = 0;
  int64_t v5 = (__int16 *)&qword_1B6ECFCF0;
  while (word_1B6ECFCE0[v4] != *(_WORD *)this)
  {
    if (++v4 == 8) {
      goto LABEL_6;
    }
  }
  int64_t v5 = &word_1B6ECFCE0[v4];
LABEL_6:
  if ((char *)v5 - (char *)word_1B6ECFCE0 == 16)
  {
    uint64_t v6 = v22;
    *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) |= 0x4000u;
    *(_DWORD *)((char *)v23 + *(void *)(v6 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v6 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v23 + *(void *)(v6 - 24)) |= 0x200u;
    long long v7 = (void *)std::ostream::operator<<();
    *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) &= ~0x4000u;
  }
  else
  {
    uint64_t v8 = *(char **)((char *)off_1E61464C8 + 4 * ((char *)v5 - (char *)word_1B6ECFCE0));
    size_t v9 = strlen(v8);
    sub_1B65A7F00(&v22, (uint64_t)v8, v9);
  }
  sub_1B65A7F00(&v22, (uint64_t)".", 1);
  int v10 = *((unsigned __int16 *)this + 1);
  if (v10 == 6893)
  {
    unsigned __int16 v11 = "Any";
    uint64_t v12 = 3;
  }
  else
  {
    if (v10 != 9273)
    {
      uint64_t v13 = v22;
      *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) |= 0x4000u;
      *(_DWORD *)((char *)v23 + *(void *)(v13 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v13 - 24)) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v23 + *(void *)(v13 - 24)) |= 0x200u;
      char v14 = (void *)std::ostream::operator<<();
      *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24) + 8) &= ~0x4000u;
      goto LABEL_15;
    }
    unsigned __int16 v11 = "Last";
    uint64_t v12 = 4;
  }
  sub_1B65A7F00(&v22, (uint64_t)v11, v12);
LABEL_15:
  sub_1B65A7F00(&v22, (uint64_t)".", 1);
  uint64_t v15 = 0;
  int v16 = word_1B6ECFCE0;
  while (dword_1B6ECFCC0[v15] != *((_DWORD *)this + 1))
  {
    if (++v15 == 8) {
      goto LABEL_20;
    }
  }
  int v16 = (__int16 *)&dword_1B6ECFCC0[v15];
LABEL_20:
  if ((char *)v16 - (char *)dword_1B6ECFCC0 == 32)
  {
    uint64_t v17 = v22;
    *(_DWORD *)((char *)v23 + *(void *)(v22 - 24)) |= 0x4000u;
    *(_DWORD *)((char *)v23 + *(void *)(v17 - 24)) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v17 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v23 + *(void *)(v17 - 24)) |= 0x200u;
    int v18 = (void *)std::ostream::operator<<();
    *(_DWORD *)((char *)v18 + *(void *)(*v18 - 24) + 8) &= ~0x4000u;
  }
  else
  {
    uint64_t v19 = *(char **)((char *)off_1E6146508 + 2 * ((char *)v16 - (char *)dword_1B6ECFCC0));
    size_t v20 = strlen(v19);
    sub_1B65A7F00(&v22, (uint64_t)v19, v20);
  }
  sub_1B65A8294((uint64_t)v23, a2);
  uint64_t v22 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v23[-1] + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v23[0] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9B6D30](&v25);
}

void sub_1B6DAEF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B6DAEF34(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  int64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B6DAF0A4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1BA9B6D30](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6DAF0CC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9B6D30](a1 + 112);
  return a1;
}

unint64_t CFX::RG::ResourceIdentifier::withLastScope(CFX::RG::ResourceIdentifier *this)
{
  return ((unint64_t)*((unsigned int *)this + 1) << 32) | ((unint64_t)*((unsigned __int16 *)this + 1) << 16) | 0x2439;
}

unint64_t CFX::RG::ResourceIdentifier::withLastPass(CFX::RG::ResourceIdentifier *this)
{
  return *(unsigned __int16 *)this | ((unint64_t)*((unsigned int *)this + 1) << 32) | 0x24390000;
}

BOOL CFX::RG::ResourceIdentifier::match(unsigned __int16 *a1, uint64_t a2)
{
  BOOL v2 = (unsigned __int16)a2 == 6893 || *a1 == (unsigned __int16)a2;
  if (WORD1(a2) == 6893)
  {
    BOOL v3 = 1;
    if (!v2) {
      return 0;
    }
  }
  else
  {
    BOOL v3 = a1[1] == WORD1(a2);
    if (!v2) {
      return 0;
    }
  }
  return *((_DWORD *)a1 + 1) == HIDWORD(a2) && v3;
}

uint64_t CFX::RG::ResourceReference::ResourceReference(uint64_t a1, uint64_t a2)
{
  return CFX::RG::TextureDescriptorReference::TextureDescriptorReference(a1, a2, 1.0);
}

{
  return CFX::RG::TextureDescriptorReference::TextureDescriptorReference(a1, a2, 1.0);
}

uint64_t CFX::RG::ResourceReference::reference(CFX::RG::ResourceReference *this)
{
  return *((void *)this + 19);
}

uint64_t CFX::RG::Resource::Resource(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)__n128 result = 0;
  *(unsigned char *)(result + 8) = 1;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 24) = a5;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  return result;
}

{
  *(void *)__n128 result = 0;
  *(unsigned char *)(result + 8) = 1;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 24) = a5;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  return result;
}

__n128 CFX::RG::Resource::Resource(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 3;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = a4;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  long long v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = *(__n128 *)(a3 + 96);
  long long v9 = *(_OWORD *)(a3 + 112);
  long long v10 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  __n128 result;
  long long v9;
  long long v10;

  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 3;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = a4;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  long long v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = *(__n128 *)(a3 + 96);
  long long v9 = *(_OWORD *)(a3 + 112);
  long long v10 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  __n128 result;
  long long v9;
  long long v10;

  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 4;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = a4;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  long long v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = *(__n128 *)(a3 + 96);
  long long v9 = *(_OWORD *)(a3 + 112);
  long long v10 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  __n128 result;
  long long v9;
  long long v10;

  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 4;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = a4;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  long long v7 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = *(__n128 *)(a3 + 96);
  long long v9 = *(_OWORD *)(a3 + 112);
  long long v10 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t CFX::RG::Resource::Resource(uint64_t a1, uint64_t a2, long long *a3, char a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 2;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = a4;
  long long v6 = *a3;
  long long v7 = a3[2];
  *(_OWORD *)(a1 + 48) = a3[1];
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  long long v8 = a3[3];
  long long v9 = a3[4];
  long long v10 = a3[6];
  *(_OWORD *)(a1 + 112) = a3[5];
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  long long v11 = a3[7];
  long long v12 = a3[8];
  long long v13 = a3[9];
  *(void *)(a1 + 192) = *((void *)a3 + 20);
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 144) = v11;
  *(void *)(a1 + 200) = _Block_copy(*((const void **)a3 + 21));
  *(void *)(a1 + 208) = _Block_copy(*((const void **)a3 + 22));
  *(unsigned char *)(a1 + 216) = *((unsigned char *)a3 + 184);
  return a1;
}

void CFX::RG::Resource::~Resource(CFX::RG::Resource *this)
{
  if (*((unsigned char *)this + 24) == 2)
  {
    uint64_t v2 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t, CFX::RG::Resource *))(v2 + 16))(v2, this);
    }
  }
  if (*((unsigned char *)this + 8) == 2)
  {
  }
}

void sub_1B6DAF4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::Resource::type(CFX::RG::Resource *this)
{
  return *((unsigned __int8 *)this + 8);
}

BOOL CFX::RG::Resource::isSameKind(CFX::RG::Resource *this, CFX::RG::Resource *a2)
{
  int v2 = *((unsigned __int8 *)this + 8);
  int v3 = *((unsigned __int8 *)a2 + 8);
  if (v2 == 2)
  {
    int v2 = *((unsigned __int8 *)this + 32);
    if (v3 == 2)
    {
      int v3 = *((unsigned __int8 *)a2 + 32);
      return v2 == v3;
    }
    BOOL v7 = v3 == 3;
    BOOL v6 = v3 == 1;
    if (v2 == 1) {
      return v7;
    }
  }
  else
  {
    if (v3 != 2) {
      return v2 == v3;
    }
    BOOL v4 = v2 == 3;
    char v5 = v2 == 1;
    if (*((unsigned char *)a2 + 32)) {
      char v5 = *((unsigned char *)a2 + 32);
    }
    if (*((unsigned char *)a2 + 32) == 1) {
      return v4;
    }
    else {
      return v5;
    }
  }
  return v6;
}

uint64_t CFX::RG::Resource::externalResourceDesc(CFX::RG::Resource *this)
{
  return (uint64_t)this + 32;
}

{
  return (uint64_t)this + 32;
}

uint64_t CFX::RG::Resource::name(CFX::RG::Resource *this)
{
  return *((void *)this + 2);
}

uint64_t CFX::RG::Resource::lifetime(CFX::RG::Resource *this)
{
  return *((unsigned __int8 *)this + 24);
}

BOOL CFX::RG::Resource::isManaged(CFX::RG::Resource *this)
{
  return *((unsigned char *)this + 24) == 2;
}

unint64_t CFX::RG::Resource::hash(CFX::RG::Resource *this)
{
  unint64_t v1 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)this) ^ ((0x9DDFEA08EB382D69 * (unint64_t)this) >> 47));
  return 0x9DDFEA08EB382D69 * (v1 ^ (v1 >> 47));
}

BOOL CFX::RG::Resource::validate(CFX::RG::Resource *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  if (v1 != 2)
  {
    if (v1 == 1) {
      return RGBufferDescriptorIsValid(*((void *)this + 4));
    }
    return 1;
  }
  if (*((unsigned char *)this + 32)) {
    return 1;
  }
  return RGBufferDescriptorIsValid(*((void *)this + 5));
}

BOOL CFX::RG::Resource::isBuffer(CFX::RG::Resource *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 1) {
    return 1;
  }
  if (v1 == 2) {
    return *((unsigned char *)this + 32) == 0;
  }
  return 0;
}

BOOL CFX::RG::Resource::isTexture(CFX::RG::Resource *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 3) {
    return 1;
  }
  if (v1 == 2) {
    return *((unsigned char *)this + 32) == 1;
  }
  return 0;
}

BOOL CFX::RG::Resource::isExternal(CFX::RG::Resource *this)
{
  return *((unsigned char *)this + 8) == 2;
}

BOOL CFX::RG::Resource::isHazardTracked(CFX::RG::Resource *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  switch(v1)
  {
    case 1:
      BOOL v4 = (char *)this + 32;
      break;
    case 3:
      goto LABEL_6;
    case 2:
      if (*((unsigned char *)this + 32))
      {
        if (*((unsigned char *)this + 32) == 1)
        {
LABEL_6:
          uint64_t v2 = CFX::RG::Resource::textureDesc(this);
          if (*(unsigned char *)(v2 + 128)) {
            BOOL v3 = *(void *)(v2 + 120) == 1;
          }
          else {
            BOOL v3 = 0;
          }
          return !v3;
        }
        goto LABEL_15;
      }
      BOOL v4 = (char *)this + 40;
      break;
    default:
LABEL_15:
      abort();
  }
  BOOL v3 = (*((void *)v4 + 1) & 0x300) == 256;
  return !v3;
}

uint64_t CFX::RG::Resource::bufferDesc(CFX::RG::Resource *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 2) {
    return (uint64_t)this + 40;
  }
  if (v1 != 1) {
    abort();
  }
  return (uint64_t)this + 32;
}

{
  int v1;

  int v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 2) {
    return (uint64_t)this + 40;
  }
  if (v1 != 1) {
    abort();
  }
  return (uint64_t)this + 32;
}

uint64_t CFX::RG::Resource::textureDesc(CFX::RG::Resource *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 4) {
    return (uint64_t)this + 32;
  }
  if (v1 == 2)
  {
    if (*((unsigned char *)this + 32) != 1) {
      abort();
    }
    return (uint64_t)this + 40;
  }
  else
  {
    return CFX::RG::Resource::textureDesc(this);
  }
}

{
  int v1;

  int v1 = *((unsigned __int8 *)this + 8);
  if (v1 != 2)
  {
    if (v1 == 3) {
      return (uint64_t)this + 32;
    }
LABEL_7:
    abort();
  }
  if (*((unsigned char *)this + 32) != 1) {
    goto LABEL_7;
  }
  return (uint64_t)this + 40;
}

BOOL CFX::RG::Resource::isReference(CFX::RG::Resource *this)
{
  return *((unsigned char *)this + 8) == 4;
}

uint64_t CFX::RG::Resource::reference(CFX::RG::Resource *this)
{
  if (*((unsigned char *)this + 8) != 4) {
    abort();
  }
  return *((void *)this + 23);
}

CFX::RG::Resource *CFX::RG::Resource::Resource(CFX::RG::Resource *this, const CFX::RG::Resource *a2)
{
  *(void *)this = 0;
  int v3 = *((unsigned __int8 *)a2 + 8);
  *((unsigned char *)this + 8) = v3;
  *((void *)this + 2) = *((void *)a2 + 2);
  *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
  switch(v3)
  {
    case 1:
      *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
      break;
    case 2:
      CFX::RG::ExternalResourceDesc::operator=((uint64_t)this + 32, (long long *)a2 + 2);
      break;
    case 3:
    case 4:
      long long v4 = *((_OWORD *)a2 + 3);
      *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)this + 3) = v4;
      long long v5 = *((_OWORD *)a2 + 4);
      long long v6 = *((_OWORD *)a2 + 5);
      long long v7 = *((_OWORD *)a2 + 7);
      *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)this + 7) = v7;
      *((_OWORD *)this + 4) = v5;
      *((_OWORD *)this + 5) = v6;
      long long v8 = *((_OWORD *)a2 + 8);
      long long v9 = *((_OWORD *)a2 + 9);
      long long v10 = *((_OWORD *)a2 + 11);
      *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)this + 11) = v10;
      *((_OWORD *)this + 8) = v8;
      *((_OWORD *)this + 9) = v9;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t CFX::RG::Pass::Pass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v9 = a2;
  *((void *)&v9 + 1) = a3;
  *(void *)a1 = &unk_1F0FB5100;
  *(_OWORD *)(a1 + 8) = v9;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  *(void *)(a1 + 64) = a3;
  *(void *)(a1 + 72) = 0x800000000;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 152) = a2;
  *(void *)(a1 + 160) = a3;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = 0x800000000;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 248) = a2;
  *(void *)(a1 + 256) = a3;
  *(void *)(a1 + 264) = 0x800000000;
  *(void *)(a1 + 272) = a1 + 280;
  *(unsigned char *)(a1 + 344) = 3;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 352) = sub_1B6DAFA08(a2, a3, &v9, a5);
  return a1;
}

void sub_1B6DAF9E4(_Unwind_Exception *a1)
{
  sub_1B6DB9B04(v3);
  sub_1B6DB9B04(v2);
  sub_1B6DB9B04(v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_1B6DAFA08(uint64_t a1, uint64_t a2, long long *a3, const void *a4)
{
  v10[0] = a1;
  v10[1] = a2;
  long long v6 = (_OWORD *)sub_1B63C8330(v10, 0x148u, 8u);
  long long v8 = *a3;
  memcpy(__dst, a4, sizeof(__dst));
  *long long v6 = v8;
  sub_1B6DB8578((uint64_t)v6, 32);
  memcpy(v6 + 3, __dst, 0x118uLL);
  return v6;
}

uint64_t CFX::RG::Pass::Pass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = &unk_1F0FB5100;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  *(void *)(a1 + 72) = 0x800000000;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 152) = a2;
  *(void *)(a1 + 160) = a3;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = 0x800000000;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 248) = a2;
  *(void *)(a1 + 256) = a3;
  *(void *)(a1 + 264) = 0x800000000;
  *(void *)(a1 + 272) = a1 + 280;
  *(unsigned char *)(a1 + 344) = a5;
  *(void *)(a1 + 352) = 0;
  CFX::RG::Pass::allocInitDependentParams((_OWORD *)a1);
  return a1;
}

void sub_1B6DAFB50(_Unwind_Exception *a1)
{
  sub_1B6DB9B04(v3);
  sub_1B6DB9B04(v2);
  sub_1B6DB9B04(v1);
  _Unwind_Resume(a1);
}

_OWORD *CFX::RG::Pass::allocInitDependentParams(_OWORD *this)
{
  if (*((unsigned char *)this + 344) == 3)
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    uint64_t v3 = *((void *)this + 1);
    uint64_t v4 = *((void *)v1 + 2);
    *(void *)&long long v9 = v3;
    *((void *)&v9 + 1) = v4;
    uint64_t v8 = 0;
    long long v7 = 0u;
    BYTE12(v7) = 1;
    BYTE14(v7) = 1;
    memset(v6, 0, sizeof(v6));
    do
    {
      long long v5 = &v6[v2];
      *long long v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
      v5[3] = 0x3FF0000000000000;
      v2 += 2;
    }
    while (v2 != 16);
    BYTE3(v8) = 1;
    BYTE5(v8) = 1;
    HIBYTE(v8) = 1;
    this = sub_1B6DAFA08(v3, v4, &v9, v6);
    *((void *)v1 + 44) = this;
  }
  return this;
}

void CFX::RG::Pass::~Pass(CFX::RG::Pass *this)
{
  *(void *)this = &unk_1F0FB5100;
  if (*((unsigned char *)this + 344) == 3) {
    sub_1B6DAFCF0(*((void *)this + 1), *((void **)this + 2), *((void **)this + 44));
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v2 = (void *)*((void *)this + 2);
    uint64_t v3 = *((void *)this + 3);
    if (v2) {
      sub_1B63C89D4(v2, &v3);
    }
  }
  sub_1B6DB9B04((uint64_t)this + 248);
  sub_1B6DB9B04((uint64_t)this + 152);
  sub_1B6DB9B04((uint64_t)this + 56);
}

{
  uint64_t vars8;

  CFX::RG::Pass::~Pass(this);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DAFCC8(_Unwind_Exception *a1)
{
  sub_1B6DB9B04(v1 + 248);
  sub_1B6DB9B04(v1 + 152);
  sub_1B6DB9B04(v1 + 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B6DAFCF0(uint64_t a1, void *a2, void *a3)
{
  __n128 result = sub_1B6DB9B5C(a3);
  long long v5 = result;
  if (a2) {
    return sub_1B63C89D4(a2, &v5);
  }
  return result;
}

uint64_t CFX::RG::Pass::triggerInit(CFX::RG::Pass *this, CFX::RG::RenderGraphContext *a2)
{
  if (*((unsigned char *)this + 33)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(CFX::RG::Pass *, CFX::RG::RenderGraphContext *))(*(void *)this + 16))(this, a2);
  *((unsigned char *)this + 33) = result;
  return result;
}

uint64_t *CFX::RG::Pass::readFrom(uint64_t *this, CFX::RG::Resource *a2)
{
  uint64_t v2 = a2;
  if (a2) {
    return sub_1B6DAFDF8(this + 7, &v2);
  }
  return this;
}

uint64_t *sub_1B6DAFDF8(uint64_t *result, void *a2)
{
  uint64_t v2 = result[3];
  uint64_t v3 = *((unsigned int *)result + 4);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    long long v5 = (void *)result[3];
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        long long v5 = (void *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    long long v5 = (void *)result[3];
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3) {
    return sub_1B63C88CC(result, a2);
  }
  return result;
}

uint64_t *CFX::RG::Pass::writeTo(uint64_t *this, CFX::RG::Resource *a2)
{
  long long v6 = a2;
  uint64_t v2 = this[22];
  uint64_t v3 = *((unsigned int *)this + 42);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    long long v5 = (CFX::RG::Resource **)this[22];
    while (*v5 != a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        long long v5 = (CFX::RG::Resource **)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    long long v5 = (CFX::RG::Resource **)this[22];
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3) {
    return sub_1B63C88CC(this + 19, &v6);
  }
  return this;
}

uint64_t CFX::RG::Pass::renderTo(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = result;
  uint64_t v13 = a2;
  uint64_t v7 = *(void *)(result + 176);
  uint64_t v8 = *(unsigned int *)(result + 168);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    long long v10 = *(void **)(result + 176);
    while (*v10 != a2)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
      {
        long long v10 = (void *)(v7 + 8 * v8);
        break;
      }
    }
  }
  else
  {
    long long v10 = *(void **)(result + 176);
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3)
  {
    sub_1B63C88CC((uint64_t *)(result + 152), &v13);
    uint64_t v11 = *(void *)(v6 + 352);
    unint64_t v12 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v13) ^ ((0x9DDFEA08EB382D69 * v13) >> 47));
    uint64_t v14 = a3;
    int v15 = a4;
    return sub_1B6DB824C(v11, 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47)), &v14);
  }
  return result;
}

uint64_t *CFX::RG::Pass::dependsOn(uint64_t *this, CFX::RG::Pass *a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    if (a2 != (CFX::RG::Pass *)this) {
      return sub_1B6DAFDF8(this + 31, &v2);
    }
  }
  return this;
}

unsigned int *CFX::RG::Pass::removeDependenciesOn(unsigned int *this, CFX::RG::Pass *a2)
{
  uint64_t v2 = *((void *)this + 34);
  uint64_t v3 = this[66];
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    long long v5 = (CFX::RG::Pass **)*((void *)this + 34);
    while (*v5 != a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        long long v5 = (CFX::RG::Pass **)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    long long v5 = (CFX::RG::Pass **)*((void *)this + 34);
  }
  uint64_t v6 = ((uint64_t)v5 - v2) >> 3;
  if (v6 != v3)
  {
    uint64_t v7 = (v3 - 1);
    this[66] = v7;
    if (v6 != v7) {
      return (unsigned int *)memmove(v5, v5 + 1, v2 + 8 * v7 - (void)v5);
    }
  }
  return this;
}

BOOL CFX::RG::Pass::isRenderTarget(CFX::RG::Pass *this, const CFX::RG::Resource *a2)
{
  return *((unsigned char *)this + 344) == 3 && sub_1B6DB0054(*((void *)this + 44), (uint64_t)a2);
}

BOOL sub_1B6DB0054(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  unsigned int v4 = (*(_DWORD *)(a1 + 44) - 1) & v3;
  unsigned int v5 = *(unsigned __int16 *)(*(void *)(a1 + 32) + 2 * v4);
  if (v5 < 2) {
    return 0;
  }
  while ((v5 & 2) == 0 || v3 != *(void *)(*(void *)(a1 + 16) + 8 * v4))
  {
    ++v4;
    BOOL v6 = v5 > 3;
    v5 >>= 1;
    if (!v6) {
      return 0;
    }
  }
  return *(void *)(a1 + 24) != 0;
}

uint64_t CFX::RG::Pass::renderTargetInfo(CFX::RG::Pass *this, CFX::RG::Resource *a2)
{
  if (*((unsigned char *)this + 344) == 3) {
    return sub_1B6DB00F0(*((void *)this + 44), (uint64_t)a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6DB00F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  unsigned int v4 = (*(_DWORD *)(a1 + 44) - 1) & v3;
  unsigned int v5 = *(unsigned __int16 *)(*(void *)(a1 + 32) + 2 * v4);
  if (v5 < 2) {
    return 0;
  }
  while ((v5 & 2) == 0 || v3 != *(void *)(*(void *)(a1 + 16) + 8 * v4))
  {
    ++v4;
    BOOL v6 = v5 > 3;
    v5 >>= 1;
    if (!v6) {
      return 0;
    }
  }
  return *(void *)(a1 + 24) + 12 * v4;
}

uint64_t CFX::RG::Pass::renderTargetInfo(CFX::RG::Pass *this, const CFX::RG::Resource *a2)
{
  if (*((unsigned char *)this + 344) == 3) {
    return sub_1B6DB00F0(*((void *)this + 44), (uint64_t)a2);
  }
  else {
    return 0;
  }
}

uint64_t CFX::RG::Pass::renderTargetAccess(CFX::RG::Pass *this, const CFX::RG::Resource *a2)
{
  if (*((unsigned char *)this + 344) == 3) {
    return sub_1B6DB01AC(*((void *)this + 44), (uint64_t)a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6DB01AC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  unsigned int v4 = (*(_DWORD *)(a1 + 44) - 1) & v3;
  unsigned int v5 = *(unsigned __int16 *)(*(void *)(a1 + 32) + 2 * v4);
  if (v5 < 2) {
    return 0;
  }
  while ((v5 & 2) == 0 || v3 != *(void *)(*(void *)(a1 + 16) + 8 * v4))
  {
    ++v4;
    BOOL v6 = v5 >= 4;
    v5 >>= 1;
    if (!v6) {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    return *(unsigned int *)(v8 + 12 * v4);
  }
  else {
    return 0;
  }
}

uint64_t CFX::RG::Pass::replaceReads(uint64_t a1, void *a2)
{
  return sub_1B6DB0240(a1 + 56, a2);
}

uint64_t sub_1B6DB0240(uint64_t a1, void *a2)
{
  if (a2 != (void *)a1)
  {
    if (*(_DWORD *)(a1 + 20) && *(void *)(a1 + 24) != a1 + 32)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      unsigned int v4 = *(void **)(a1 + 8);
      if (v4) {
        sub_1B63C89D4(v4, &v7);
      }
      *(void *)(a1 + 24) = a1 + 32;
    }
    *(void *)(a1 + 16) = a2[2];
    unsigned int v5 = (void *)a2[3];
    if (v5 == a2 + 4) {
      memcpy((void *)(a1 + 32), v5, 8 * *((unsigned int *)a2 + 4));
    }
    else {
      *(void *)(a1 + 24) = v5;
    }
    a2[2] = 0x800000000;
    a2[3] = a2 + 4;
  }
  return a1;
}

CFX::RG::Resource **CFX::RG::Pass::replaceResource(CFX::RG::Pass *this, CFX::RG::Resource *a2, CFX::RG::Resource *a3)
{
  int v18 = a2;
  uint64_t result = (CFX::RG::Resource **)*((void *)this + 10);
  uint64_t v6 = *((unsigned int *)this + 18);
  uint64_t v7 = result;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v7 = result;
    while (*v7 != a3)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        uint64_t v7 = &result[v6];
        break;
      }
    }
  }
  if (v6 != v7 - result)
  {
    uint64_t v9 = (CFX::RG::Resource **)sub_1B6DB0458(result, &result[v6], &v18);
    uint64_t result = (CFX::RG::Resource **)*((void *)this + 10);
    uint64_t v6 = *((unsigned int *)this + 18);
    if (v9 != &result[v6])
    {
      long long v10 = &result[v6];
      uint64_t v11 = v10 - 1;
      uint64_t v12 = 8 - (void)v10;
      do
      {
        uint64_t v6 = (v6 - 1);
        *((_DWORD *)this + 18) = v6;
        uint64_t v13 = &result[v6];
        if (v11 != v13)
        {
          memmove(v11, v11 + 1, (size_t)v13 + v12);
          uint64_t result = (CFX::RG::Resource **)*((void *)this + 10);
          uint64_t v6 = *((unsigned int *)this + 18);
        }
        --v11;
        v12 += 8;
      }
      while (v9 != &result[v6]);
    }
  }
  if (v6)
  {
    uint64_t v14 = 8 * v6;
    do
    {
      if (*result == v18) {
        *uint64_t result = a3;
      }
      ++result;
      v14 -= 8;
    }
    while (v14);
  }
  uint64_t v15 = *((unsigned int *)this + 42);
  if (v15)
  {
    int v16 = (CFX::RG::Resource **)*((void *)this + 22);
    uint64_t v17 = 8 * v15;
    do
    {
      if (*v16 == v18) {
        *int v16 = a3;
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  if (*((unsigned char *)this + 344) == 3) {
    return (CFX::RG::Resource **)sub_1B6DB04B4(*((void *)this + 44), (uint64_t)v18, (uint64_t)a3);
  }
  return result;
}

void *sub_1B6DB0458(void *result, void *a2, void *a3)
{
  if (result != a2)
  {
    while (*result != *a3)
    {
      if (++result == a2)
      {
        uint64_t result = a2;
        break;
      }
    }
  }
  if (result != a2)
  {
    for (unsigned int i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

uint64_t sub_1B6DB04B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
  uint64_t v5 = (*(_DWORD *)(result + 44) - 1) & v4;
  uint64_t v6 = *(void *)(result + 32);
  unsigned int v7 = *(unsigned __int16 *)(v6 + 2 * v5);
  if (v7 >= 2)
  {
    unsigned int v8 = *(unsigned __int16 *)(v6 + 2 * v5);
    unsigned int v9 = (*(_DWORD *)(result + 44) - 1) & v4;
    while (1)
    {
      if ((v8 & 2) != 0)
      {
        uint64_t v10 = *(void *)(result + 16);
        if (v4 == *(void *)(v10 + 8 * v9)) {
          break;
        }
      }
      ++v9;
      BOOL v11 = v8 >= 4;
      v8 >>= 1;
      if (!v11) {
        return result;
      }
    }
    uint64_t v12 = *(void *)(result + 24);
    if (v12)
    {
      uint64_t v13 = v12 + 12 * v9;
      uint64_t v19 = *(void *)v13;
      int v20 = *(_DWORD *)(v13 + 8);
      int v14 = 1;
      unsigned int v15 = *(unsigned __int16 *)(v6 + 2 * v5);
      while (1)
      {
        if ((v15 & 2) != 0)
        {
          uint64_t v16 = (v5 + v14 - 1);
          if (v4 == *(void *)(v10 + 8 * v16)) {
            break;
          }
        }
        ++v14;
        BOOL v17 = v15 > 3;
        v15 >>= 1;
        if (!v17) {
          goto LABEL_14;
        }
      }
      *(_WORD *)(v6 + 2 * v5) = v7 ^ (1 << v14);
      *(_WORD *)(v6 + 2 * v16) ^= 1u;
      --*(_DWORD *)(result + 40);
LABEL_14:
      unint64_t v18 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a3) ^ ((0x9DDFEA08EB382D69 * a3) >> 47));
      uint64_t v21 = v19;
      int v22 = v20;
      return sub_1B6DB824C(result, 0x9DDFEA08EB382D69 * (v18 ^ (v18 >> 47)), &v21);
    }
  }
  return result;
}

uint64_t *CFX::RG::Pass::setAllocatedName(uint64_t *this, const char *a2)
{
  unint64_t v3 = this;
  if (*((unsigned char *)this + 32))
  {
    this = (uint64_t *)this[2];
    uint64_t v4 = v3[3];
    if (this) {
      this = sub_1B63C89D4(this, &v4);
    }
  }
  v3[3] = (uint64_t)a2;
  *((unsigned char *)v3 + 32) = 1;
  return this;
}

unint64_t CFX::RG::Pass::hash(CFX::RG::Pass *this)
{
  uint64_t v1 = *((void *)this + 6);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v1 ^ ((0x9DDFEA08EB382D69 * (*((void *)this + 5) ^ v1)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                * (*((void *)this + 5) ^ v1)))) ^ ((0x9DDFEA08EB382D69 * (v1 ^ ((0x9DDFEA08EB382D69 * (*((void *)this + 5) ^ v1)) >> 47) ^ (0x9DDFEA08EB382D69 * (*((void *)this + 5) ^ v1)))) >> 47));
}

uint64_t CFX::RG::Pass::commonRenderParameters(CFX::RG::Pass *this)
{
  return *((void *)this + 44) + 48;
}

uint64_t CFX::RG::RenderGraphBuilder::RenderGraphBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a2;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = a1 + 48;
  *(void *)(a1 + 40) = a1 + 48;
  sub_1B63C8928(a1 + 16, 32, 1);
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  sub_1B63C8928(v6, 32, 1);
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  sub_1B63C8928(a1 + 80, 32, 1);
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = a3;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  sub_1B63C8928(a1 + 112, 32, 1);
  *(void *)(a1 + 144) = a2;
  *(void *)(a1 + 152) = a3;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = a1 + 176;
  sub_1B63C8928(a1 + 144, 32, 1);
  *(void *)(a1 + 176) = a2;
  *(void *)(a1 + 184) = a3;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  sub_1B63C8928(a1 + 176, 16, 1);
  *(void *)(a1 + 208) = a2;
  *(void *)(a1 + 216) = a3;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  sub_1B63C8928(a1 + 208, 16, 1);
  *(void *)(a1 + 240) = a2;
  *(void *)(a1 + 248) = a3;
  sub_1B6DB9BD0(a1 + 240, 32);
  *(void *)(a1 + 288) = a2;
  *(void *)(a1 + 296) = a3;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  sub_1B6DB9C78(a1 + 288, 32, 1);
  *(_WORD *)(a1 + 320) = 256;
  return a1;
}

void sub_1B6DB07F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1B6DB9B5C(v11);
  sub_1B65504F0(v16);
  sub_1B65504F0(v15);
  sub_1B65504F0(v14);
  sub_1B65504F0(v13);
  sub_1B65504F0(v12);
  sub_1B65504F0(a10);
  sub_1B65504F0(v10);
  _Unwind_Resume(a1);
}

void sub_1B6DB0860()
{
}

void sub_1B6DB0868()
{
}

void sub_1B6DB0870()
{
}

void CFX::RG::RenderGraphBuilder::~RenderGraphBuilder(CFX::RG::RenderGraphBuilder *this)
{
  if (*((unsigned char *)this + 321))
  {
    uint64_t v2 = *((unsigned int *)this + 40);
    if (v2)
    {
      unint64_t v3 = (uint64_t (****)(void))*((void *)this + 21);
      uint64_t v4 = 8 * v2;
      do
      {
        sub_1B6DB0A5C(*(void *)this, *((void **)this + 1), *v3++);
        v4 -= 8;
      }
      while (v4);
    }
    uint64_t v5 = *((unsigned int *)this + 8);
    if (v5)
    {
      uint64_t v6 = (CFX::RG::Resource **)*((void *)this + 5);
      uint64_t v7 = 8 * v5;
      do
      {
        sub_1B6DB0AC4(*(void *)this, *((void **)this + 1), *v6++);
        v7 -= 8;
      }
      while (v7);
    }
    uint64_t v8 = *((unsigned int *)this + 16);
    if (v8)
    {
      unsigned int v9 = (CFX::RG::Resource **)*((void *)this + 9);
      uint64_t v10 = 8 * v8;
      do
      {
        sub_1B6DB0AC4(*(void *)this, *((void **)this + 1), *v9++);
        v10 -= 8;
      }
      while (v10);
    }
    uint64_t v11 = *((unsigned int *)this + 24);
    if (v11)
    {
      uint64_t v12 = (CFX::RG::Resource **)*((void *)this + 13);
      uint64_t v13 = 8 * v11;
      do
      {
        sub_1B6DB0AC4(*(void *)this, *((void **)this + 1), *v12++);
        v13 -= 8;
      }
      while (v13);
    }
    uint64_t v14 = *((unsigned int *)this + 32);
    if (v14)
    {
      uint64_t v15 = (CFX::RG::Resource **)*((void *)this + 17);
      uint64_t v16 = 8 * v14;
      do
      {
        sub_1B6DB0AC4(*(void *)this, *((void **)this + 1), *v15++);
        v16 -= 8;
      }
      while (v16);
    }
  }
  uint64_t v17 = *((unsigned int *)this + 48);
  if (v17)
  {
    unint64_t v18 = (CFX::RG::RenderGraph **)*((void *)this + 25);
    uint64_t v19 = 8 * v17;
    do
    {
      if (!*((unsigned char *)*v18 + 272)) {
        sub_1B65F5414(*(void *)this, *((void **)this + 1), *v18);
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  sub_1B65504F0((uint64_t)this + 288);
  sub_1B6DB9B5C((void *)this + 30);
  sub_1B65504F0((uint64_t)this + 208);
  sub_1B65504F0((uint64_t)this + 176);
  sub_1B65504F0((uint64_t)this + 144);
  sub_1B65504F0((uint64_t)this + 112);
  sub_1B65504F0((uint64_t)this + 80);
  sub_1B65504F0((uint64_t)this + 48);
  sub_1B65504F0((uint64_t)this + 16);
}

void sub_1B6DB09F4(_Unwind_Exception *a1)
{
  sub_1B65504F0(v1 + 288);
  sub_1B6DB9B5C((void *)(v1 + 240));
  sub_1B65504F0(v1 + 208);
  sub_1B65504F0(v1 + 176);
  sub_1B65504F0(v1 + 144);
  sub_1B65504F0(v1 + 112);
  sub_1B65504F0(v1 + 80);
  sub_1B65504F0(v1 + 48);
  sub_1B65504F0(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B6DB0A5C(uint64_t a1, void *a2, uint64_t (***a3)(void))
{
  uint64_t result = (uint64_t *)(**a3)(a3);
  uint64_t v6 = a3;
  if (a2) {
    return sub_1B63C89D4(a2, &v6);
  }
  return result;
}

void sub_1B6DB0AC4(int a1, void *a2, CFX::RG::Resource *this)
{
  CFX::RG::Resource::~Resource(this);
  uint64_t v5 = v4;
  if (a2) {
    sub_1B63C89D4(a2, &v5);
  }
}

uint64_t CFX::RG::RenderGraphBuilder::validateMissingPublishedResources(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 128);
  if (!v2) {
    return 1;
  }
  uint64_t v5 = *(uint64_t **)(a1 + 136);
  uint64_t v6 = &v5[v2];
  uint64_t result = 1;
  while (1)
  {
    uint64_t v8 = *v5;
    if (*(unsigned char *)(*v5 + 8) != 4) {
      abort();
    }
    unint64_t v9 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (*(void *)(v8 + 184) ^ 1)) ^ ((0x9DDFEA08EB382D69 * (*(void *)(v8 + 184) ^ 1)) >> 47) ^ 1);
    unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
    unsigned int v11 = (*(_DWORD *)(a1 + 284) - 1) & v10;
    unsigned int v12 = *(unsigned __int16 *)(*(void *)(a1 + 272) + 2 * v11);
    if (v12 < 2) {
      break;
    }
    while ((v12 & 2) == 0 || v10 != *(void *)(*(void *)(a1 + 256) + 8 * v11))
    {
      ++v11;
      BOOL v13 = v12 >= 4;
      v12 >>= 1;
      if (!v13) {
        goto LABEL_12;
      }
    }
    if (!*(void *)(a1 + 264)) {
      break;
    }
    if (++v5 == v6) {
      return result;
    }
  }
LABEL_12:
  uint64_t v30 = 0;
  long long v31 = &v30;
  uint64_t v32 = 0x13812000000;
  long long v33 = sub_1B6DB0FF0;
  long long v34 = sub_1B6DB11B8;
  long long v35 = "";
  sub_1B6DAEF34((uint64_t)v36);
  uint64_t v14 = sub_1B65A7F00(v31 + 6, (uint64_t)"Missing published resource ", 27);
  if (*(unsigned char *)(v8 + 8) != 4) {
    abort();
  }
  uint64_t v15 = v14;
  uint64_t v27 = *(void *)(v8 + 184);
  CFX::RG::ResourceIdentifier::pathName((CFX::RG::ResourceIdentifier *)&v27, __p);
  if (v29 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  if (v29 >= 0) {
    uint64_t v17 = HIBYTE(v29);
  }
  else {
    uint64_t v17 = (uint64_t)__p[1];
  }
  unint64_t v18 = sub_1B65A7F00(v15, (uint64_t)v16, v17);
  uint64_t v19 = sub_1B65A7F00(v18, (uint64_t)" for reference resource ", 24);
  int v20 = *(const char **)(v8 + 16);
  size_t v21 = strlen(v20);
  int v22 = sub_1B65A7F00(v19, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  unint64_t v23 = std::locale::use_facet(&v39, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v39);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  char v24 = sub_1B65A7F00(v31 + 6, (uint64_t)"Available resources are:", 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  uint64_t v25 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1B6DB1380;
  v26[3] = &unk_1E6146550;
  v26[4] = &v30;
  sub_1B6DB12C8(a1 + 240, v26);
  sub_1B65A8294((uint64_t)(v31 + 7), __p);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v29;
  _Block_object_dispose(&v30, 8);
  v36[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v36 + *(void *)(v36[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v36[1] = MEMORY[0x1E4FBA470] + 16;
  if (v37 < 0) {
    operator delete((void *)v36[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9B6D30](&v38);
  return 0;
}

void sub_1B6DB0F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  _Block_object_dispose(&a22, 8);
  sub_1B6DAF0CC(v22);
  _Unwind_Resume(a1);
}

void *sub_1B6DB0FF0(uint64_t a1, uint64_t a2)
{
  return sub_1B6DB0FFC((void *)(a1 + 48), (void *)(a2 + 48));
}

void *sub_1B6DB0FFC(void *a1, void *a2)
{
  a1[14] = MEMORY[0x1E4FBA4A8] + 16;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *a1 = v4;
  *(void *)((char *)a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  uint64_t v6 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
  std::ios_base::move(v5, v6);
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = 0;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  *a1 = MEMORY[0x1E4FBA498] + 24;
  a1[14] = MEMORY[0x1E4FBA498] + 64;
  *(void *)((char *)a1 + *(void *)(*a1 - 24) + 40) = std::stringbuf::basic_stringbuf();
  return a1;
}

void sub_1B6DB1190(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1BA9B6D30](v1);
  _Unwind_Resume(a1);
}

void sub_1B6DB11B8(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1E4FBA418];
  uint64_t v2 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 48) = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 48 + *(void *)(v2 - 24)) = *(void *)(v1 + 24);
  *(void *)(a1 + 56) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();

  JUMPOUT(0x1BA9B6D30);
}

void sub_1B6DB12C8(uint64_t a1, void *a2)
{
  uint64_t v6 = a2;
  int v3 = *(_DWORD *)(a1 + 44);
  if (v3 != -15)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      if (*(_WORD *)(*(void *)(a1 + 32) + 2 * v5))
      {
        v6[2](v6, *(void *)(*(void *)(a1 + 16) + 8 * v5), *(void *)(a1 + 24) + v4);
        int v3 = *(_DWORD *)(a1 + 44);
      }
      ++v5;
      v4 += 24;
    }
    while (v5 < (v3 + 15));
  }
}

void sub_1B6DB136C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B6DB1380(uint64_t a1, int a2, CFX::RG::ResourceIdentifier *this)
{
  int v3 = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  CFX::RG::ResourceIdentifier::pathName(this, __p);
  if ((v9 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = sub_1B65A7F00(v3, (uint64_t)v4, v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  uint64_t v7 = std::locale::use_facet(&v10, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B6DB146C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::validateInitializedPasses(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 160);
  if (!v2) {
    return 1;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 168);
  uint64_t v5 = 8 * v2;
  while (1)
  {
    uint64_t v6 = *v4;
    if (!*(unsigned char *)(*v4 + 33)) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 1;
    }
  }
  sub_1B6DAEF34((uint64_t)&v13);
  uint64_t v8 = sub_1B65A7F00(&v13, (uint64_t)"Uninitialized pass ", 19);
  unsigned __int8 v9 = *(const char **)(v6 + 24);
  size_t v10 = strlen(v9);
  sub_1B65A7F00(v8, (uint64_t)v9, v10);
  sub_1B65A8294((uint64_t)v14, &v11);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v11;
  *(void *)(a2 + 16) = v12;
  uint64_t v13 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v14[-1] + *(void *)(v13 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[0] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9B6D30](&v16);
  return 0;
}

void sub_1B6DB1648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1B6DAF0CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::resolveReferences(CFX::RG::RenderGraphBuilder *this, CFX::GPUResourceManager **a2)
{
  prof_beginFlame((uint64_t)"resolveReferences", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1349);
  uint64_t v4 = *((unsigned int *)this + 32);
  if (v4)
  {
    uint64_t v5 = (CFX::RG::Resource **)*((void *)this + 17);
    uint64_t v6 = &v5[v4];
    long long v35 = v6;
    long long v36 = (CFX::RG::RenderGraphContext *)a2;
    do
    {
      uint64_t v7 = *v5;
      if (*((unsigned char *)*v5 + 8) != 4) {
        abort();
      }
      unint64_t v8 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (*((void *)v7 + 23) ^ 1)) ^ ((0x9DDFEA08EB382D69 * (*((void *)v7 + 23) ^ 1)) >> 47) ^ 1);
      unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      unsigned int v10 = (*((_DWORD *)this + 71) - 1) & v9;
      unsigned int v11 = *(unsigned __int16 *)(*((void *)this + 34) + 2 * v10);
      if (v11 >= 2)
      {
        while ((v11 & 2) == 0 || v9 != *(void *)(*((void *)this + 32) + 8 * v10))
        {
          ++v10;
          BOOL v12 = v11 >= 4;
          v11 >>= 1;
          if (!v12) {
            goto LABEL_34;
          }
        }
        uint64_t v38 = *((void *)this + 33);
        if (v38)
        {
          unsigned int v37 = v10;
          uint64_t v13 = *((unsigned int *)this + 40);
          if (v13)
          {
            uint64_t v14 = (uint64_t *)*((void *)this + 21);
            char v15 = &v14[v13];
            uint64_t v16 = (uint64_t *)(v38 + 24 * v37 + 16);
            do
            {
              uint64_t v17 = *v14;
              if (*v14 != *v16)
              {
                uint64_t v18 = *(unsigned int *)(v17 + 72);
                if (v18)
                {
                  uint64_t v19 = *(CFX::RG::Resource ***)(v17 + 80);
                  uint64_t v20 = 8 * v18;
                  do
                  {
                    if (*v19 == v7)
                    {
                      uint64_t v21 = *v16;
                      uint64_t v39 = v21;
                      if (v21 && v21 != v17) {
                        sub_1B6DAFDF8((uint64_t *)(v17 + 248), &v39);
                      }
                    }
                    ++v19;
                    v20 -= 8;
                  }
                  while (v20);
                }
                uint64_t v23 = *(unsigned int *)(v17 + 168);
                if (v23)
                {
                  char v24 = *(CFX::RG::Resource ***)(v17 + 176);
                  uint64_t v25 = 8 * v23;
                  do
                  {
                    if (*v24 == v7 && *(unsigned char *)(v17 + 344) == 3)
                    {
                      long long v26 = (unsigned char *)sub_1B6DB00F0(*(void *)(v17 + 352), (uint64_t)v7);
                      if (v26)
                      {
                        if (*v26)
                        {
                          uint64_t v27 = *v16;
                          uint64_t v39 = v27;
                          if (v27)
                          {
                            if (v27 != v17) {
                              sub_1B6DAFDF8((uint64_t *)(v17 + 248), &v39);
                            }
                          }
                        }
                      }
                    }
                    ++v24;
                    v25 -= 8;
                  }
                  while (v25);
                }
              }
              ++v14;
            }
            while (v14 != v15);
          }
          a2 = (CFX::GPUResourceManager **)v36;
          CFX::RG::RenderGraphBuilder::replaceResource(this, (CFX::GPUResourceManager **)v36, v7, *(CFX::RG::Resource **)(v38 + 24 * v37 + 8), 0);
          uint64_t v6 = v35;
        }
      }
LABEL_34:
      ++v5;
    }
    while (v5 != v6);
  }
  if (*((unsigned char *)this + 320))
  {
    unsigned int v28 = *((_DWORD *)this + 76);
    if (v28)
    {
      uint64_t v29 = (uint64_t *)*((void *)this + 39);
      uint64_t v30 = &v29[3 * v28];
      do
      {
        uint64_t v31 = *v29;
        uint64_t v32 = (CFX::RG::Resource *)v29[1];
        long long v33 = (unsigned __int16 *)CFX::RG::Resource::textureDesc(v32);
        CFX::RG::RenderGraphContext::registerReferenceDescriptor((uint64_t)a2, v31, v33);
        CFX::RG::RenderGraphContext::registerResourceIdentifier((uint64_t)a2, v31, v32);
        v29 += 3;
      }
      while (v29 != v30);
    }
    CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(a2, *((const CFX::RG::Resource ***)this + 13), (const CFX::RG::Resource **)(*((void *)this + 13) + 8 * *((unsigned int *)this + 24)));
    CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(a2, *((const CFX::RG::Resource ***)this + 9), (const CFX::RG::Resource **)(*((void *)this + 9) + 8 * *((unsigned int *)this + 16)));
    *((unsigned char *)this + 320) = 0;
  }
  prof_endFlame();
  return 1;
}

void sub_1B6DB1944(_Unwind_Exception *a1)
{
}

void CFX::RG::RenderGraphBuilder::replaceResource(CFX::RG::RenderGraphBuilder *this, CFX::GPUResourceManager **a2, CFX::RG::Resource *a3, CFX::RG::Resource *a4, char a5)
{
  uint64_t v10 = *((unsigned int *)this + 40);
  if (v10)
  {
    unsigned int v11 = (CFX::RG::Pass **)*((void *)this + 21);
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v11++;
      CFX::RG::Pass::replaceResource(v13, a3, a4);
      v12 -= 8;
    }
    while (v12);
  }
  CFX::GPUResourceManager::mapResource(a2[3], a3, a4);
  if (a5)
  {
    CFX::RG::RenderGraphBuilder::removeResource(this, a3);
  }
}

void CFX::RG::RenderGraphBuilder::initPassesAndResolveReferences(CFX::RG::RenderGraphBuilder *this, CFX::RG::RenderGraphContext *a2)
{
  prof_beginFlame((uint64_t)"initPassesAndResolveReferences", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1395);
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v13 = 0;
  uint64_t v14 = &v15;
  CFX::RG::RenderGraphBuilder::resolveReferences(this, (CFX::GPUResourceManager **)a2);
  uint64_t v4 = *((unsigned int *)this + 40);
  do
  {
    LODWORD(v13) = 0;
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = (void *)*((void *)this + 21);
    uint64_t v6 = 8 * v4;
    do
    {
      sub_1B64EA528(&v12, v5++);
      v6 -= 8;
    }
    while (v6);
    if (v13)
    {
      uint64_t v7 = v14;
      uint64_t v8 = 8 * v13;
      do
      {
        unint64_t v9 = (unsigned char *)*v7;
        if (!*(unsigned char *)(*v7 + 33))
        {
          int v10 = (*(uint64_t (**)(uint64_t, CFX::RG::RenderGraphContext *))(*(void *)v9 + 16))(*v7, a2);
          v9[33] = v10;
          if (v10) {
            CFX::RG::RenderGraphBuilder::resolveReferences(this, (CFX::GPUResourceManager **)a2);
          }
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
      uint64_t v11 = v13;
    }
    else
    {
LABEL_12:
      uint64_t v11 = 0;
    }
    uint64_t v4 = *((unsigned int *)this + 40);
  }
  while (v4 != v11);
  prof_endFlame();
}

void sub_1B6DB1B40(_Unwind_Exception *a1)
{
}

uint64_t CFX::RG::RenderGraphBuilder::build(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t a3)
{
  prof_beginFlame((uint64_t)"build", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1417);
  *((void *)a2 + 27) = a1;
  uint64_t v6 = (unsigned int *)*((void *)a2 + 2);
  long long v34 = v6;
  uint64_t v35 = 0;
  CStackAllocatorPushFrame(v6);
  CFX::RG::RenderGraphBuilder::initPassesAndResolveReferences((CFX::RG::RenderGraphBuilder *)a1, a2);
  if (CFX::RG::RenderGraphBuilder::validateMissingPublishedResources(a1, a3)
    && CFX::RG::RenderGraphBuilder::validateInitializedPasses(a1, a3))
  {
    long long v44 = *(_OWORD *)a1;
    sub_1B6DB9D2C((uint64_t)&v44, 32);
    CFX::RG::RenderGraphBuilder::initializeDependencies((long long *)a1, (uint64_t)&v44);
    CFX::RG::RenderGraphBuilder::computePredecessors(a1, (uint64_t)&v44, (uint64_t)v6);
    uint64_t v7 = *(unsigned int *)(a1 + 160);
    if (v7)
    {
      uint64_t v8 = *(uint64_t **)(a1 + 168);
      uint64_t v9 = 8 * v7;
      do
      {
        CFX::RG::RenderGraphBuilder::cleanupPredecessorsBasedOnExplicitDependencies((__n128 *)a1, *v8++, (uint64_t)&v44, (uint64_t *)v6);
        v9 -= 8;
      }
      while (v9);
    }
    if (CFX::RG::RenderGraphBuilder::tryResolveAmbiguousDependencies((__n128 *)a1, (uint64_t)&v44, &v34, a3))
    {
      long long v40 = *(_OWORD *)a1;
      sub_1B6DB9D2C((uint64_t)&v40, 32);
      CFX::RG::RenderGraphBuilder::initializeDependencies((long long *)a1, (uint64_t)&v40);
      CFX::RG::RenderGraphBuilder::computeSuccessors(a1, (uint64_t)&v44, (uint64_t)&v40);
      int v10 = *(_DWORD *)(a1 + 160);
      long long v37 = *(_OWORD *)a1;
      uint64_t v38 = 0;
      uint64_t v39 = &v40;
      if (v10) {
        sub_1B6DBA004((uint64_t)&v37, v10, 1);
      }
      CFX::RG::RenderGraphBuilder::computeStages((long long *)a1, (std::string *)a3, (uint64_t)&v37, (uint64_t)&v44, (uint64_t)&v40, (uint64_t *)v6);
      long long v36 = *(_OWORD *)a1;
      uint64_t v11 = sub_1B63C8330(&v36, 0x118u, 8u);
      CFX::RG::RenderGraph::RenderGraph(v11, *(void *)a1, *(void *)(a1 + 8));
      uint64_t v35 = v11;
      uint64_t v12 = *(unsigned int *)(a1 + 32);
      if (v12)
      {
        uint64_t v13 = *(void **)(a1 + 40);
        uint64_t v14 = 8 * v12;
        do
        {
          sub_1B63C88CC((uint64_t *)(v11 + 16), v13++);
          v14 -= 8;
        }
        while (v14);
      }
      uint64_t v15 = *(unsigned int *)(a1 + 64);
      if (v15)
      {
        uint64_t v16 = *(void **)(a1 + 72);
        uint64_t v17 = 8 * v15;
        do
        {
          sub_1B63C88CC((uint64_t *)(v11 + 48), v16++);
          v17 -= 8;
        }
        while (v17);
      }
      uint64_t v18 = *(unsigned int *)(a1 + 96);
      if (v18)
      {
        uint64_t v19 = *(void **)(a1 + 104);
        uint64_t v20 = 8 * v18;
        do
        {
          sub_1B63C88CC((uint64_t *)(v11 + 80), v19++);
          v20 -= 8;
        }
        while (v20);
      }
      uint64_t v21 = *(unsigned int *)(a1 + 160);
      if (v21)
      {
        uint64_t v22 = *(void **)(a1 + 168);
        uint64_t v23 = 8 * v21;
        do
        {
          sub_1B63C88CC((uint64_t *)(v11 + 112), v22++);
          v23 -= 8;
        }
        while (v23);
      }
      uint64_t v24 = *(void *)(v11 + 184);
      *(void *)(v11 + 184) = v47;
      uint64_t v47 = v24;
      uint64_t v25 = *(void *)(v11 + 176);
      *(void *)(v11 + 176) = v46;
      uint64_t v46 = v25;
      long long v26 = v45;
      long long v27 = *(_OWORD *)(v11 + 160);
      *(_OWORD *)(v11 + 144) = v44;
      *(_OWORD *)(v11 + 160) = v26;
      long long v45 = v27;
      *(void *)&long long v26 = *(void *)(v11 + 232);
      *(void *)(v11 + 232) = v43;
      uint64_t v43 = v26;
      uint64_t v28 = *(void *)(v11 + 224);
      *(void *)(v11 + 224) = v42;
      uint64_t v42 = v28;
      long long v29 = v41;
      long long v30 = *(_OWORD *)(v11 + 208);
      *(_OWORD *)(v11 + 192) = v40;
      *(_OWORD *)(v11 + 208) = v29;
      long long v41 = v30;
      sub_1B6DB9F00(v11 + 240, &v37);
      sub_1B63C88CC((uint64_t *)(a1 + 176), &v35);
      sub_1B6DB9E7C((uint64_t)&v37);
      sub_1B6DB9DD4((uint64_t)&v40);
    }
    sub_1B6DB9DD4((uint64_t)&v44);
  }
  CStackAllocatorPopFrame((uint64_t)v6);
  uint64_t v31 = *(unsigned __int8 *)(a3 + 23);
  if ((v31 & 0x80u) != 0) {
    uint64_t v31 = *(void *)(a3 + 8);
  }
  if (v31) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v35;
  }
  *((void *)a2 + 27) = 0;
  prof_endFlame();
  return v32;
}

void sub_1B6DB1E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_1B6DB9DD4((uint64_t)va);
  sub_1B6DB9DD4((uint64_t)va1);
  *(void *)(v9 + 216) = 0;
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::transferOwnershipTo(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + 272) = 1;
  *(unsigned char *)(result + 321) = 0;
  return result;
}

uint64_t *CFX::RG::RenderGraphBuilder::removePass(CFX::RG::RenderGraphBuilder *this, CFX::RG::Pass *a2, int a3)
{
  uint64_t v6 = (unsigned int **)*((void *)this + 21);
  uint64_t v7 = *((unsigned int *)this + 40);
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = 8 * v7;
  do
  {
    if (*v6 != (unsigned int *)a2) {
      CFX::RG::Pass::removeDependenciesOn(*v6, a2);
    }
    ++v6;
    v8 -= 8;
  }
  while (v8);
  uint64_t v6 = (unsigned int **)*((void *)this + 21);
  uint64_t v9 = *((unsigned int *)this + 40);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t result = (uint64_t *)&v6[v9];
    while (v6[v10] != (unsigned int *)a2)
    {
      if (v9 == ++v10) {
        goto LABEL_13;
      }
    }
    uint64_t result = (uint64_t *)&v6[v10];
LABEL_13:
    unsigned int v12 = v9 - 1;
  }
  else
  {
LABEL_11:
    uint64_t v9 = 0;
    unsigned int v12 = -1;
    uint64_t result = (uint64_t *)v6;
  }
  uint64_t v13 = ((char *)result - (char *)v6) >> 3;
  if (v13 != v9)
  {
    *((_DWORD *)this + 40) = v12;
    if (v13 != v12) {
      uint64_t result = (uint64_t *)memmove(result, result + 1, (char *)&v6[v12] - (char *)result);
    }
  }
  if (a3)
  {
    uint64_t v14 = *(void *)this;
    uint64_t v15 = (void *)*((void *)this + 1);
    return sub_1B6DB0A5C(v14, v15, (uint64_t (***)(void))a2);
  }
  return result;
}

void CFX::RG::RenderGraphBuilder::removeResource(CFX::RG::RenderGraphBuilder *this, CFX::RG::Resource *a2)
{
  prof_beginFlame((uint64_t)"removeResource", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1535);
  switch(*((unsigned char *)a2 + 8))
  {
    case 1:
      uint64_t v4 = *((void *)this + 5);
      uint64_t v5 = *((unsigned int *)this + 8);
      if (v5)
      {
        uint64_t v6 = 8 * v5;
        uint64_t v7 = (CFX::RG::Resource **)*((void *)this + 5);
        do
        {
          if (*v7 == a2) {
            goto LABEL_23;
          }
          ++v7;
          v6 -= 8;
        }
        while (v6);
        uint64_t v7 = (CFX::RG::Resource **)(v4 + 8 * v5);
      }
      else
      {
        uint64_t v7 = (CFX::RG::Resource **)*((void *)this + 5);
      }
LABEL_23:
      uint64_t v17 = ((uint64_t)v7 - v4) >> 3;
      uint64_t v18 = (v5 - 1);
      *((_DWORD *)this + 8) = v18;
      goto LABEL_30;
    case 2:
      uint64_t v4 = *((void *)this + 13);
      uint64_t v8 = *((unsigned int *)this + 24);
      if (v8)
      {
        uint64_t v9 = 8 * v8;
        uint64_t v10 = (CFX::RG::Resource **)*((void *)this + 13);
        do
        {
          if (*v10 == a2) {
            goto LABEL_25;
          }
          ++v10;
          v9 -= 8;
        }
        while (v9);
        uint64_t v10 = (CFX::RG::Resource **)(v4 + 8 * v8);
      }
      else
      {
        uint64_t v10 = (CFX::RG::Resource **)*((void *)this + 13);
      }
LABEL_25:
      uint64_t v17 = ((uint64_t)v10 - v4) >> 3;
      uint64_t v18 = (v8 - 1);
      *((_DWORD *)this + 24) = v18;
      goto LABEL_30;
    case 3:
      uint64_t v4 = *((void *)this + 9);
      uint64_t v11 = *((unsigned int *)this + 16);
      if (v11)
      {
        uint64_t v12 = 8 * v11;
        uint64_t v13 = (CFX::RG::Resource **)*((void *)this + 9);
        do
        {
          if (*v13 == a2) {
            goto LABEL_27;
          }
          ++v13;
          v12 -= 8;
        }
        while (v12);
        uint64_t v13 = (CFX::RG::Resource **)(v4 + 8 * v11);
      }
      else
      {
        uint64_t v13 = (CFX::RG::Resource **)*((void *)this + 9);
      }
LABEL_27:
      uint64_t v17 = ((uint64_t)v13 - v4) >> 3;
      uint64_t v18 = (v11 - 1);
      *((_DWORD *)this + 16) = v18;
      goto LABEL_30;
    case 4:
      uint64_t v4 = *((void *)this + 17);
      uint64_t v14 = *((unsigned int *)this + 32);
      if (v14)
      {
        uint64_t v15 = 8 * v14;
        uint64_t v16 = (CFX::RG::Resource **)*((void *)this + 17);
        do
        {
          if (*v16 == a2) {
            goto LABEL_29;
          }
          ++v16;
          v15 -= 8;
        }
        while (v15);
        uint64_t v16 = (CFX::RG::Resource **)(v4 + 8 * v14);
      }
      else
      {
        uint64_t v16 = (CFX::RG::Resource **)*((void *)this + 17);
      }
LABEL_29:
      uint64_t v17 = ((uint64_t)v16 - v4) >> 3;
      uint64_t v18 = (v14 - 1);
      *((_DWORD *)this + 32) = v18;
LABEL_30:
      if (v17 != v18) {
        memmove((void *)(v4 + 8 * v17), (const void *)(v4 + 8 * v17 + 8), 8 * v18 - 8 * v17);
      }
LABEL_32:
      sub_1B6DB0AC4(*(void *)this, *((void **)this + 1), a2);
      prof_endFlame();
      return;
    default:
      goto LABEL_32;
  }
}

void sub_1B6DB21F0(_Unwind_Exception *a1)
{
}

uint64_t CFX::RG::RenderGraphBuilder::findPublishedResource(uint64_t a1, uint64_t a2)
{
  prof_beginFlame((uint64_t)"findPublishedResource", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1566);
  unint64_t v4 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (a2 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 1)) >> 47) ^ 1);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  unsigned int v6 = (*(_DWORD *)(a1 + 284) - 1) & v5;
  unsigned int v7 = *(unsigned __int16 *)(*(void *)(a1 + 272) + 2 * v6);
  if (v7 < 2) {
    goto LABEL_5;
  }
  while ((v7 & 2) == 0 || v5 != *(void *)(*(void *)(a1 + 256) + 8 * v6))
  {
    ++v6;
    BOOL v8 = v7 >= 4;
    v7 >>= 1;
    if (!v8) {
      goto LABEL_5;
    }
  }
  uint64_t v11 = *(void *)(a1 + 264);
  if (v11) {
    uint64_t v9 = *(void *)(v11 + 24 * v6 + 16);
  }
  else {
LABEL_5:
  }
    uint64_t v9 = 0;
  prof_endFlame();
  return v9;
}

void CFX::RG::RenderGraphBuilder::searchPublishedResource(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  prof_beginFlame((uint64_t)"searchPublishedResource", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1581);
  *a4 = a3;
  a4[1] = 0;
  a4[2] = a4 + 3;
  unsigned int v8 = *(_DWORD *)(a1 + 304);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 312);
    uint64_t v10 = (char *)(v9 + 24 * v8);
    int v11 = (unsigned __int16)a2;
    int v12 = WORD1(a2);
    unint64_t v13 = HIDWORD(a2);
    uint64_t v14 = (int8x16_t *)(v9 + 8);
    do
    {
      uint64_t v15 = &v14[-1].i8[8];
      BOOL v17 = v12 == 6893 || v14[-1].u16[5] == v12;
      if ((v14[-1].u16[4] == v11 || v11 == 6893) && v17 && v14[-1].i32[3] == v13)
      {
        int8x16_t v21 = vextq_s8(*v14, *v14, 8uLL);
        sub_1B6DB23F0((uint64_t)a4, (__n128 *)&v21);
      }
      uint64_t v14 = (int8x16_t *)((char *)v14 + 24);
    }
    while (v15 + 24 != v10);
  }
  prof_endFlame();
}

void sub_1B6DB23E0(_Unwind_Exception *a1)
{
}

__n128 sub_1B6DB23F0(uint64_t a1, __n128 *a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  unsigned int v6 = *(__n128 **)(a1 + 16);
  if (v4 + 1 > v5)
  {
    unsigned int v7 = ((double)(v5 + 1) * 1.5);
    Aligned = (__n128 *)CStackAllocatorAllocateAligned(*(uint64_t **)a1, 16 * v7, 8, 2);
    memcpy(Aligned, v6, 16 * *(unsigned int *)(a1 + 8));
    *(void *)(a1 + 16) = Aligned;
    *(_DWORD *)(a1 + 12) = v7;
    unsigned int v6 = Aligned;
    int v4 = *(_DWORD *)(a1 + 8);
  }
  __n128 result = *a2;
  v6[v4] = *a2;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void CFX::RG::RenderGraphBuilder::publishResourceReference(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  prof_beginFlame((uint64_t)"publishResourceReference", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1600);
  *(void *)&long long v23 = a2;
  *((void *)&v23 + 1) = a3;
  uint64_t v24 = a4;
  *(void *)&long long v21 = a2 & 0xFFFFFFFF0000FFFFLL | 0x24390000;
  *((void *)&v21 + 1) = a3;
  uint64_t v22 = a4;
  *(void *)&long long v19 = a2 & 0xFFFFFFFF00000000 | 0x24392439;
  *((void *)&v19 + 1) = a3;
  uint64_t v20 = a4;
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (a2 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 1)) >> 47) ^ 1);
  long long v25 = v23;
  uint64_t v26 = a4;
  sub_1B6DBA19C(a1 + 240, 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)), &v25);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (a2 & 0xFFFFFFFF0000FFFFLL ^ 0x24390001)) ^ ((0x9DDFEA08EB382D69
                                                                            * (a2 & 0xFFFFFFFF0000FFFFLL ^ 0x24390001)) >> 47) ^ 1);
  long long v25 = v21;
  uint64_t v26 = a4;
  sub_1B6DBA19C(a1 + 240, 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47)), &v25);
  long long v25 = v19;
  uint64_t v26 = a4;
  sub_1B6DBA19C(a1 + 240, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69* (((0x9DDFEA08EB382D69 * (a2 & 0xFFFFFFFF00000000) + 0x62F4B8EC3B0DB2F8) | 1) ^ ((0x9DDFEA08EB382D69* (a2 & 0xFFFFFFFF00000000)+ 0x62F4B8EC3B0DB2F8) >> 47))) ^ ((0x9DDFEA08EB382D69 * (((0x9DDFEA08EB382D69 * (a2 & 0xFFFFFFFF00000000) + 0x62F4B8EC3B0DB2F8) | 1) ^ ((0x9DDFEA08EB382D69 * (a2 & 0xFFFFFFFF00000000) + 0x62F4B8EC3B0DB2F8) >> 47))) >> 47)), &v25);
  uint64_t v10 = *(unsigned int *)(a1 + 304);
  if (!v10)
  {
    char v12 = 0;
    char v13 = 0;
    goto LABEL_14;
  }
  char v11 = 0;
  char v12 = 0;
  char v13 = 0;
  uint64_t v14 = *(uint64_t **)(a1 + 312);
  uint64_t v15 = 24 * v10;
  do
  {
    uint64_t v16 = *v14;
    if (*v14 == a2)
    {
      char v11 = 1;
      BOOL v17 = &v23;
    }
    else if (v16 == (a2 & 0xFFFFFFFF0000FFFFLL | 0x24390000))
    {
      char v13 = 1;
      BOOL v17 = &v21;
    }
    else
    {
      if (v16 != (a2 & 0xFFFFFFFF00000000 | 0x24392439)) {
        goto LABEL_10;
      }
      char v12 = 1;
      BOOL v17 = &v19;
    }
    long long v18 = *v17;
    v14[2] = *((void *)v17 + 2);
    *(_OWORD *)uint64_t v14 = v18;
LABEL_10:
    v14 += 3;
    v15 -= 24;
  }
  while (v15);
  if ((v11 & 1) == 0) {
LABEL_14:
  }
    sub_1B6DB26E0(a1 + 288, (__n128 *)&v23);
  if ((v13 & 1) == 0) {
    sub_1B6DB26E0(a1 + 288, (__n128 *)&v21);
  }
  if ((v12 & 1) == 0) {
    sub_1B6DB26E0(a1 + 288, (__n128 *)&v19);
  }
  *(unsigned char *)(a1 + 320) = 1;
  prof_endFlame();
}

void sub_1B6DB26CC(_Unwind_Exception *a1)
{
}

__n128 sub_1B6DB26E0(uint64_t a1, __n128 *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 + 1 > *(_DWORD *)(a1 + 20))
  {
    sub_1B6DB9C78(a1, 1, 0);
    unsigned int v4 = *(_DWORD *)(a1 + 16);
  }
  unsigned int v5 = (__n128 *)(*(void *)(a1 + 24) + 24 * v4);
  __n128 result = *a2;
  v5[1].n128_u64[0] = a2[1].n128_u64[0];
  *unsigned int v5 = result;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

void CFX::RG::RenderGraphBuilder::aliasResourceReference(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t PublishedResource = CFX::RG::RenderGraphBuilder::findPublishedResource(a1, a2);
  if (PublishedResource && v6)
  {
    CFX::RG::RenderGraphBuilder::publishResourceReference(a1, a3, v6, PublishedResource);
  }
}

void CFX::RG::RenderGraphBuilder::computePredecessors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFX::RG::RenderGraphBuilder::collectResourcesWrite(a1, a3, (uint64_t)v46);
  uint64_t v5 = *(unsigned int *)(a1 + 160);
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)(a1 + 168);
    uint64_t v42 = &v6[v5];
    while (1)
    {
      uint64_t v43 = v6;
      uint64_t v7 = *v6;
      unint64_t v8 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v6) ^ ((0x9DDFEA08EB382D69 * *v6) >> 47));
      unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      uint64_t v10 = *(unsigned int *)(*v6 + 72);
      if (v10)
      {
        char v11 = *(uint64_t **)(v7 + 80);
        char v12 = &v11[v10];
        do
        {
          uint64_t v13 = *v11;
          unint64_t v14 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v11) ^ ((0x9DDFEA08EB382D69 * *v11) >> 47));
          unint64_t v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
          unsigned int v16 = (v50 - 1) & v15;
          unsigned int v17 = *(unsigned __int16 *)(v49 + 2 * v16);
          if (v17 >= 2)
          {
            while ((v17 & 2) == 0 || v15 != *(void *)(v47 + 8 * v16))
            {
              ++v16;
              BOOL v18 = v17 >= 4;
              v17 >>= 1;
              if (!v18) {
                goto LABEL_9;
              }
            }
            if (v48)
            {
              uint64_t v19 = v48 + 88 * v16;
              uint64_t v20 = *(unsigned int *)(v19 + 8);
              if (v20)
              {
                long long v21 = *(unint64_t **)(v19 + 16);
                uint64_t v22 = &v21[v20];
                do
                {
                  if (*v21 != v7)
                  {
                    v44.n128_u64[0] = *v21;
                    v44.n128_u8[8] = 1;
                    uint64_t v45 = v13;
                    unsigned int v23 = (*(_DWORD *)(a2 + 44) - 1) & v9;
                    unsigned int v24 = *(unsigned __int16 *)(*(void *)(a2 + 32) + 2 * v23);
                    if (v24 < 2)
                    {
LABEL_19:
                      uint64_t v26 = 0;
                    }
                    else
                    {
                      while ((v24 & 2) == 0 || v9 != *(void *)(*(void *)(a2 + 16) + 8 * v23))
                      {
                        ++v23;
                        BOOL v25 = v24 > 3;
                        v24 >>= 1;
                        if (!v25) {
                          goto LABEL_19;
                        }
                      }
                      uint64_t v26 = *(void *)(a2 + 24) + 224 * v23;
                    }
                    sub_1B6DB2C68(v26, &v44);
                  }
                  ++v21;
                }
                while (v21 != v22);
              }
            }
          }
LABEL_9:
          ++v11;
        }
        while (v11 != v12);
      }
      if (*(unsigned char *)(v7 + 344) == 3)
      {
        uint64_t v27 = *(unsigned int *)(v7 + 168);
        if (v27) {
          break;
        }
      }
LABEL_46:
      unint64_t v6 = v43 + 1;
      if (v43 + 1 == v42) {
        return;
      }
    }
    uint64_t v28 = *(uint64_t **)(v7 + 176);
    long long v29 = &v28[v27];
    while (1)
    {
      if (*(unsigned char *)(v7 + 344) == 3)
      {
        uint64_t v30 = *v28;
        if (sub_1B6DB01AC(*(void *)(v7 + 352), *v28))
        {
          unint64_t v31 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v30) ^ ((0x9DDFEA08EB382D69 * v30) >> 47));
          unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
          unsigned int v33 = (v50 - 1) & v32;
          for (unsigned int i = *(unsigned __int16 *)(v49 + 2 * v33); (i & 2) == 0; ++v33)
LABEL_31:
            i >>= 1;
          if (v32 != *(void *)(v47 + 8 * v33)) {
            goto LABEL_31;
          }
          uint64_t v35 = v48 + 88 * v33;
          uint64_t v36 = *(unsigned int *)(v35 + 8);
          if (v36)
          {
            long long v37 = *(unint64_t **)(v35 + 16);
            uint64_t v38 = &v37[v36];
            do
            {
              if (*v37 != v7)
              {
                v44.n128_u64[0] = *v37;
                v44.n128_u8[8] = 1;
                uint64_t v45 = v30;
                unsigned int v39 = (*(_DWORD *)(a2 + 44) - 1) & v9;
                unsigned int v40 = *(unsigned __int16 *)(*(void *)(a2 + 32) + 2 * v39);
                if (v40 < 2)
                {
LABEL_40:
                  uint64_t v41 = 0;
                }
                else
                {
                  while ((v40 & 2) == 0 || v9 != *(void *)(*(void *)(a2 + 16) + 8 * v39))
                  {
                    ++v39;
                    BOOL v25 = v40 > 3;
                    v40 >>= 1;
                    if (!v25) {
                      goto LABEL_40;
                    }
                  }
                  uint64_t v41 = *(void *)(a2 + 24) + 224 * v39;
                }
                sub_1B6DB2C68(v41, &v44);
              }
              ++v37;
            }
            while (v37 != v38);
          }
        }
      }
      if (++v28 == v29) {
        goto LABEL_46;
      }
    }
  }
}

void CFX::RG::RenderGraphBuilder::collectResourcesWrite(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  prof_beginFlame((uint64_t)"collectResourcesWrite", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2390);
  *(void *)a3 = a2;
  sub_1B6DBC33C(a3, 32);
  uint64_t v6 = *(unsigned int *)(a1 + 160);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(a1 + 168);
    unint64_t v8 = &v7[v6];
    do
    {
      uint64_t v9 = *v7;
      uint64_t v21 = v9;
      uint64_t v10 = *(unsigned int *)(v9 + 168);
      if (v10)
      {
        char v11 = *(void **)(v9 + 176);
        char v12 = &v11[v10];
        do
        {
          unint64_t v13 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v11) ^ ((0x9DDFEA08EB382D69 * *v11) >> 47));
          uint64_t v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
          unsigned int v15 = (*(_DWORD *)(a3 + 36) - 1) & v14;
          unsigned int v16 = *(unsigned __int16 *)(*(void *)(a3 + 24) + 2 * v15);
          if (v16 < 2) {
            goto LABEL_9;
          }
          while ((v16 & 2) == 0 || v14 != *(void *)(*(void *)(a3 + 8) + 8 * v15))
          {
            ++v15;
            BOOL v17 = v16 >= 4;
            v16 >>= 1;
            if (!v17) {
              goto LABEL_9;
            }
          }
          uint64_t v18 = *(void *)(a3 + 16);
          if (v18)
          {
            sub_1B64EA528((_DWORD *)(v18 + 88 * v15), &v21);
          }
          else
          {
LABEL_9:
            v19[0] = a2;
            v19[1] = 0x800000000;
            v19[2] = &v20;
            sub_1B64EA528(v19, &v21);
            sub_1B6DB6364(a3, v14, v19);
          }
          ++v11;
        }
        while (v11 != v12);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  prof_endFlame();
}

void sub_1B6DB2C50(_Unwind_Exception *a1)
{
}

double sub_1B6DB2C68(uint64_t a1, __n128 *a2)
{
  __n128 v5 = *a2;
  unint64_t v6 = a2[1].n128_u64[0];
  if (!sub_1B6DBA4C8(a1, (uint64_t)&v5)) {
    *(void *)&double result = sub_1B6DB26E0(a1, a2).n128_u64[0];
  }
  return result;
}

void CFX::RG::RenderGraphBuilder::computeStages(long long *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  prof_beginFlame((uint64_t)"computeStages", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1732);
  long long v108 = *a1;
  v109 = 0;
  v110 = (uint64_t *)v111;
  uint64_t v91 = a3;
  sub_1B6DB3684(a3, &v108);
  if (HIDWORD(v109))
  {
    v104 = v110;
    if (*((void *)&v108 + 1)) {
      sub_1B63C89D4(*((void **)&v108 + 1), &v104);
    }
  }
  __dst = a2;
  int v11 = *((_DWORD *)a1 + 40);
  v127 = a6;
  uint64_t v128 = 0;
  v129 = v130;
  if (v11)
  {
    Aligned = CStackAllocatorAllocateAligned(a6, (8 * v11), 8, 2);
    memcpy(Aligned, v130, 8 * v128);
    v129 = Aligned;
    HIDWORD(v128) = v11;
    uint64_t v13 = *((unsigned int *)a1 + 40);
    uint64_t v14 = *(void *)(v91 + 24);
    if (v13)
    {
      unsigned int v15 = (void *)*((void *)a1 + 21);
      unsigned int v16 = &v15[v13];
      do
      {
        unint64_t v17 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v15) ^ ((0x9DDFEA08EB382D69 * *v15) >> 47));
        unint64_t v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
        unsigned int v19 = (*(_DWORD *)(a4 + 44) - 1) & v18;
        for (unsigned int i = *(unsigned __int16 *)(*(void *)(a4 + 32) + 2 * v19); (i & 2) == 0; ++v19)
LABEL_9:
          i >>= 1;
        if (v18 != *(void *)(*(void *)(a4 + 16) + 8 * v19)) {
          goto LABEL_9;
        }
        if (!*(_DWORD *)(*(void *)(a4 + 24) + 224 * v19 + 16)) {
          sub_1B63C88CC((uint64_t *)v14, v15);
        }
        ++v15;
      }
      while (v15 != v16);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v91 + 24);
  }
  v121 = a6;
  sub_1B6DBA550((uint64_t)&v121, 32);
  v117 = a6;
  uint64_t v118 = 0x800000000;
  v119 = &v120;
  if (v14)
  {
    do
    {
      v113 = a6;
      uint64_t v114 = 0x800000000;
      v115 = &v116;
      if (v118)
      {
        long long v108 = *a1;
        v109 = 0;
        v110 = (uint64_t *)v111;
        sub_1B6DB3684(v91, &v108);
        if (HIDWORD(v109))
        {
          v104 = v110;
          if (*((void *)&v108 + 1)) {
            sub_1B63C89D4(*((void **)&v108 + 1), &v104);
          }
        }
        uint64_t v21 = *(void *)(v91 + 24) + 32 * *(unsigned int *)(v91 + 16) - 32;
        if (v118)
        {
          uint64_t v22 = v119;
          uint64_t v23 = 8 * v118;
          do
          {
            *(void *)&long long v108 = 0;
            *(void *)&long long v108 = *v22;
            sub_1B63C88CC((uint64_t *)v21, &v108);
            ++v22;
            v23 -= 8;
          }
          while (v23);
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v24 = *(unsigned int *)(v14 + 16);
      if (v24)
      {
        BOOL v25 = *(void **)(v14 + 24);
        uint64_t v26 = 8 * v24;
        do
        {
          *(void *)&long long v108 = 0;
          *(void *)&long long v108 = *v25;
          sub_1B64EA528(&v113, &v108);
          ++v25;
          v26 -= 8;
        }
        while (v26);
      }
      LODWORD(v118) = 0;
      if (v114)
      {
        uint64_t v27 = v115;
        v92 = &v115[v114];
        uint64_t v28 = a5;
        while (1)
        {
          uint64_t v112 = 0;
          uint64_t v29 = *v27;
          uint64_t v112 = v29;
          unint64_t v30 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v29) ^ ((0x9DDFEA08EB382D69 * v29) >> 47));
          uint64_t v31 = 0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47));
          unsigned int v32 = (v126 - 1) & v31;
          unsigned int v33 = *(unsigned __int16 *)(v124 + 2 * v32);
          if (v33 >= 2)
          {
            while ((v33 & 2) == 0 || v31 != *(void *)(v122 + 8 * v32))
            {
              ++v32;
              BOOL v34 = v33 >= 4;
              v33 >>= 1;
              if (!v34) {
                goto LABEL_37;
              }
            }
            if (v123) {
              break;
            }
          }
LABEL_37:
          sub_1B64EA528(&v127, &v112);
          LOBYTE(v108) = 1;
          sub_1B6DB3964((uint64_t)&v121, v31, &v108);
          unsigned int v35 = (*(_DWORD *)(v28 + 44) - 1) & v31;
          unsigned int v36 = *(unsigned __int16 *)(*(void *)(v28 + 32) + 2 * v35);
          if (v36 < 2)
          {
LABEL_41:
            uint64_t v38 = 0;
          }
          else
          {
            while ((v36 & 2) == 0 || v31 != *(void *)(*(void *)(v28 + 16) + 8 * v35))
            {
              ++v35;
              BOOL v37 = v36 > 3;
              v36 >>= 1;
              if (!v37) {
                goto LABEL_41;
              }
            }
            uint64_t v38 = *(void *)(v28 + 24) + 224 * v35;
          }
          uint64_t v39 = *(unsigned int *)(v38 + 16);
          if (v39)
          {
            if (!v21)
            {
              long long v108 = *a1;
              v109 = 0;
              v110 = (uint64_t *)v111;
              sub_1B6DB3684(v91, &v108);
              if (HIDWORD(v109))
              {
                v104 = v110;
                if (*((void *)&v108 + 1)) {
                  sub_1B63C89D4(*((void **)&v108 + 1), &v104);
                }
              }
              uint64_t v21 = *(void *)(v91 + 24) + 32 * *(unsigned int *)(v91 + 16) - 32;
              uint64_t v39 = *(unsigned int *)(v38 + 16);
            }
            *(void *)&long long v108 = a6;
            *((void *)&v108 + 1) = 0x1000000000;
            v109 = (__n128 *)&v110;
            v104 = a6;
            uint64_t v105 = 0x1000000000;
            v106 = (__n128 *)&v107;
            v100 = a6;
            uint64_t v101 = 0x1000000000;
            v102 = (__n128 *)&v103;
            if (v39)
            {
              unsigned int v40 = *(unint64_t **)(v38 + 24);
              uint64_t v41 = &v40[3 * v39];
              do
              {
                if (*((unsigned char *)v40 + 8) == 3)
                {
                  __n128 v97 = (__n128)*v40;
                  LOBYTE(v98) = 3;
                  sub_1B6DB3B88((uint64_t)&v100, &v97);
                }
                unint64_t v42 = *v40;
                uint64_t v43 = *(unsigned int *)(*v40 + 72);
                if (v43)
                {
                  __n128 v44 = *(void **)(v42 + 80);
                  unint64_t v45 = v40[2];
                  uint64_t v46 = 8 * v43;
                  while (v45 != *v44)
                  {
                    ++v44;
                    v46 -= 8;
                    if (!v46) {
                      goto LABEL_58;
                    }
                  }
                  v97.n128_u64[0] = *v40;
                  v97.n128_u64[1] = v45;
                  LOBYTE(v98) = 1;
                  sub_1B6DB3B88((uint64_t)&v108, &v97);
                  unint64_t v42 = *v40;
                }
LABEL_58:
                uint64_t v47 = *(unsigned int *)(v42 + 168);
                if (v47)
                {
                  uint64_t v48 = *(void **)(v42 + 176);
                  unint64_t v49 = v40[2];
                  uint64_t v50 = 8 * v47;
                  while (v49 != *v48)
                  {
                    ++v48;
                    v50 -= 8;
                    if (!v50) {
                      goto LABEL_64;
                    }
                  }
                  v97.n128_u64[0] = v42;
                  v97.n128_u64[1] = v49;
                  LOBYTE(v98) = 2;
                  sub_1B6DB3B88((uint64_t)&v104, &v97);
                }
LABEL_64:
                v40 += 3;
              }
              while (v40 != v41);
              long long v51 = v109;
              v97.n128_u64[0] = (unint64_t)a6;
              v97.n128_u64[1] = 0x1000000000;
              v98 = v99;
              if (DWORD2(v108))
              {
                uint64_t v52 = 24 * DWORD2(v108);
                do
                {
                  sub_1B6DB3B88((uint64_t)&v97, v51);
                  long long v51 = (__n128 *)((char *)v51 + 24);
                  v52 -= 24;
                }
                while (v52);
              }
            }
            else
            {
              v97.n128_u64[0] = (unint64_t)a6;
              v97.n128_u64[1] = 0x1000000000;
              v98 = v99;
            }
            if (v105)
            {
              long long v53 = v106;
              uint64_t v54 = 24 * v105;
              do
              {
                sub_1B6DB3B88((uint64_t)&v97, v53);
                long long v53 = (__n128 *)((char *)v53 + 24);
                v54 -= 24;
              }
              while (v54);
            }
            if (v101)
            {
              v55 = v102;
              uint64_t v56 = 24 * v101;
              do
              {
                sub_1B6DB3B88((uint64_t)&v97, v55);
                v55 = (__n128 *)((char *)v55 + 24);
                v56 -= 24;
              }
              while (v56);
            }
            v95[0] = a6;
            sub_1B66025E0((uint64_t)v95, 32);
            if (v97.n128_u32[2])
            {
              v57 = v98;
              v58 = &v98[24 * v97.n128_u32[2]];
              do
              {
                uint64_t v94 = 0;
                uint64_t v59 = *(void *)v57;
                uint64_t v94 = *(void *)v57;
                uint64_t v60 = *(void *)(v21 + 24);
                uint64_t v61 = *(unsigned int *)(v21 + 16);
                if (v61)
                {
                  uint64_t v62 = 8 * v61;
                  v63 = *(void **)(v21 + 24);
                  do
                  {
                    if (*v63 == v59) {
                      goto LABEL_84;
                    }
                    ++v63;
                    v62 -= 8;
                  }
                  while (v62);
                  v63 = (void *)(v60 + 8 * v61);
                }
                else
                {
                  v63 = *(void **)(v21 + 24);
                }
LABEL_84:
                if (v61 != ((uint64_t)v63 - v60) >> 3) {
                  goto LABEL_106;
                }
                unint64_t v64 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v59) ^ ((0x9DDFEA08EB382D69 * v59) >> 47));
                unint64_t v65 = 0x9DDFEA08EB382D69 * (v64 ^ (v64 >> 47));
                unsigned int v66 = (*(_DWORD *)(a4 + 44) - 1) & v65;
                for (unsigned int j = *(unsigned __int16 *)(*(void *)(a4 + 32) + 2 * v66); (j & 2) == 0; ++v66)
LABEL_87:
                  j >>= 1;
                if (v65 != *(void *)(*(void *)(a4 + 16) + 8 * v66)) {
                  goto LABEL_87;
                }
                uint64_t v68 = *(void *)(a4 + 24) + 224 * v66;
                unsigned int v69 = *(_DWORD *)(v68 + 16);
                if (v69)
                {
                  v70 = *(void **)(v68 + 24);
                  v71 = &v70[3 * v69];
                  int v72 = v126 - 1;
                  do
                  {
                    unint64_t v73 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v70) ^ ((0x9DDFEA08EB382D69 * *v70) >> 47));
                    unint64_t v74 = 0x9DDFEA08EB382D69 * (v73 ^ (v73 >> 47));
                    unsigned int v75 = v72 & v74;
                    unsigned int v76 = *(unsigned __int16 *)(v124 + 2 * (v72 & v74));
                    if (v76 < 2) {
                      goto LABEL_106;
                    }
                    while ((v76 & 2) == 0 || v74 != *(void *)(v122 + 8 * v75))
                    {
                      ++v75;
                      BOOL v34 = v76 >= 4;
                      v76 >>= 1;
                      if (!v34) {
                        goto LABEL_106;
                      }
                    }
                    if (!v123) {
                      goto LABEL_106;
                    }
                    v70 += 3;
                  }
                  while (v70 != v71);
                }
                int v77 = v57[16];
                if (v77 == 2)
                {
                  unint64_t v79 = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * *((void *)v57 + 1)) ^ ((0x9DDFEA08EB382D69 * *((void *)v57 + 1)) >> 47));
                  unint64_t v80 = 0x9DDFEA08EB382D69 * (v79 ^ (v79 >> 47));
                  unsigned int v81 = (v96 - 1) & v80;
                  unsigned int v82 = *(unsigned __int16 *)(v95[3] + 2 * v81);
                  if (v82 >= 2)
                  {
                    while ((v82 & 2) == 0 || v80 != *(void *)(v95[1] + 8 * v81))
                    {
                      ++v81;
                      BOOL v34 = v82 >= 4;
                      v82 >>= 1;
                      if (!v34) {
                        goto LABEL_105;
                      }
                    }
                    if (v95[2])
                    {
                      sub_1B64EA528(&v117, v57);
                      goto LABEL_106;
                    }
                  }
                }
                else if (v77 == 1)
                {
                  unint64_t v78 = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * *((void *)v57 + 1)) ^ ((0x9DDFEA08EB382D69 * *((void *)v57 + 1)) >> 47));
                  v130[0] = *((void *)v57 + 1);
                  sub_1B6DBA66C((uint64_t)v95, 0x9DDFEA08EB382D69 * (v78 ^ (v78 >> 47)), v130);
                }
LABEL_105:
                sub_1B63C88CC((uint64_t *)v21, &v94);
LABEL_106:
                v57 += 24;
              }
              while (v57 != v58);
            }
          }
          ++v27;
          uint64_t v28 = a5;
          if (v27 == v92) {
            goto LABEL_116;
          }
        }
        CFX::RG::RenderGraphBuilder::cycleErrorMessage(v29, (uint64_t)&v127, &v108);
        if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst->__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v108;
        __dst->__r_.__value_.__r.__words[2] = (std::string::size_type)v109;
      }
LABEL_116:
      uint64_t v14 = v21;
    }
    while (v21);
  }
  std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __dst->__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    if (v125 == *((_DWORD *)a1 + 40))
    {
      uint64_t v84 = *(unsigned int *)(v91 + 16);
      if (v84)
      {
        uint64_t v85 = 32 * v84;
        v86 = (uint64_t *)(*(void *)(v91 + 24) + 24);
        do
        {
          unint64_t v87 = *((unsigned int *)v86 - 2);
          unint64_t v88 = 126 - 2 * __clz(v87);
          if (v87) {
            uint64_t v89 = v88;
          }
          else {
            uint64_t v89 = 0;
          }
          sub_1B6DB776C(*v86, (uint64_t *)(*v86 + 8 * v87), v89, 1);
          v86 += 4;
          v85 -= 32;
        }
        while (v85);
      }
    }
    else
    {
      sub_1B65B8D78(__dst, "Some passes are not part of the graph", 0x25uLL);
    }
  }
  prof_endFlame();
}

void sub_1B6DB3604(_Unwind_Exception *a1)
{
}

uint64_t sub_1B6DB3684(uint64_t a1, void *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 + 1 > *(_DWORD *)(a1 + 20))
  {
    sub_1B6DBA004(a1, 1, 0);
    unsigned int v4 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v5 = *(void *)(a1 + 24) + 32 * v4;
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = v5 + 32;
  uint64_t result = sub_1B6DBA100(v5, a2);
  ++*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t CFX::RG::RenderGraphBuilder::cycleErrorMessage@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  sub_1B6DAEF34((uint64_t)&v18);
  unint64_t v6 = sub_1B65A7F00(&v18, (uint64_t)"Cycle detected on [", 19);
  size_t v7 = strlen(*(const char **)(a1 + 24));
  unint64_t v8 = sub_1B65A7F00(v6, *(void *)(a1 + 24), v7);
  sub_1B65A7F00(v8, (uint64_t)"] ", 2);
  int v9 = 0;
  uint64_t v10 = *(void *)(a2 + 16) + 8 * *(unsigned int *)(a2 + 8);
  while (v10 != *(void *)(a2 + 16))
  {
    int v11 = sub_1B65A7F00(&v18, (uint64_t)"<", 1);
    size_t v12 = strlen(*(const char **)(*(void *)(v10 - 8) + 24));
    uint64_t v13 = sub_1B65A7F00(v11, *(void *)(*(void *)(v10 - 8) + 24), v12);
    sub_1B65A7F00(v13, (uint64_t)"> ", 2);
    uint64_t v14 = v10 - 8;
    if (*(void *)(v10 - 8) == a1) {
      ++v9;
    }
    v10 -= 8;
    if (v9 == 2)
    {
      unsigned int v15 = sub_1B65A7F00(&v18, (uint64_t)"=>", 2);
      size_t v16 = strlen(*(const char **)(*(void *)v14 + 24));
      sub_1B65A7F00(v15, *(void *)(*(void *)v14 + 24), v16);
      break;
    }
  }
  sub_1B65A8294((uint64_t)v19, a3);
  uint64_t v18 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v19[-1] + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[0] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9B6D30](&v21);
}

void sub_1B6DB3948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B6DB3964(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      uint64_t v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v15) = *(void *)(*(void *)(a1 + 8) + 8 * v21);
          *(unsigned char *)(v26 + v15) = *(unsigned char *)(v26 + v21);
          uint64_t v8 = *(void *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(unsigned char *)(*(void *)(a1 + 16) + v21) = *a3;
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
      uint64_t v28 = *(void *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B6DBA5F8(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(a1 + 16) + v10) = *a3;
  return result;
}

__n128 sub_1B6DB3B88(uint64_t a1, __n128 *a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  int v6 = *(char **)(a1 + 16);
  if (v4 + 1 > v5)
  {
    unsigned int v7 = ((double)(v5 + 1) * 1.5);
    Aligned = (char *)CStackAllocatorAllocateAligned(*(uint64_t **)a1, 24 * v7, 8, 2);
    memcpy(Aligned, v6, 24 * *(unsigned int *)(a1 + 8));
    *(void *)(a1 + 16) = Aligned;
    *(_DWORD *)(a1 + 12) = v7;
    int v6 = Aligned;
    int v4 = *(_DWORD *)(a1 + 8);
  }
  unsigned int v9 = (__n128 *)&v6[24 * v4];
  __n128 result = *a2;
  v9[1].n128_u64[0] = a2[1].n128_u64[0];
  *unsigned int v9 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void CFX::RG::RenderGraphBuilder::cleanupPredecessorsBasedOnExplicitDependencies(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  prof_beginFlame((uint64_t)"cleanupPredecessorsBasedOnExplicitDependencies", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 1919);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  uint64_t v73 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unsigned int v8 = (*(_DWORD *)(a3 + 44) - 1) & v73;
  unsigned int v9 = *(unsigned __int16 *)(*(void *)(a3 + 32) + 2 * v8);
  if (v9 < 2)
  {
LABEL_5:
    uint64_t v11 = 0;
  }
  else
  {
    while ((v9 & 2) == 0 || v73 != *(void *)(*(void *)(a3 + 16) + 8 * v8))
    {
      ++v8;
      BOOL v10 = v9 > 3;
      v9 >>= 1;
      if (!v10) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = *(void *)(a3 + 24) + 224 * v8;
  }
  v95 = a4;
  uint64_t v96 = 0x800000000;
  __n128 v97 = &v98;
  uint64_t v12 = 3;
  do
  {
    unsigned int v13 = &(&v95)[v12];
    *unsigned int v13 = 0;
    *((unsigned char *)v13 + 8) = 0;
    v13[2] = 0;
    v12 += 3;
  }
  while (v13 + 3 != (uint64_t **)&v99);
  uint64_t v71 = a3;
  uint64_t v91 = a4;
  uint64_t v92 = 0x800000000;
  v93 = (__n128 *)&v94;
  uint64_t v14 = 3;
  do
  {
    unsigned int v15 = &(&v91)[v14];
    *unsigned int v15 = 0;
    *((unsigned char *)v15 + 8) = 0;
    v15[2] = 0;
    v14 += 3;
  }
  while (v15 + 3 != &v95);
  unsigned int v16 = *(_DWORD *)(v11 + 16);
  if (v16)
  {
    unsigned int v17 = *(__n128 **)(v11 + 24);
    unsigned int v18 = (__n128 *)((char *)v17 + 24 * v16);
    do
    {
      if (v17->n128_u8[8] == 1
        && *(unsigned char *)(v17->n128_u64[0] + 344) == 3
        && (sub_1B6DB01AC(*(void *)(v17->n128_u64[0] + 352), v17[1].n128_i64[0]) & 1) != 0)
      {
        uint64_t v19 = *(void *)(v17->n128_u64[0] + 272);
        uint64_t v20 = *(unsigned int *)(v17->n128_u64[0] + 264);
        if (v20)
        {
          uint64_t v21 = 8 * v20;
          int v22 = *(void **)(v17->n128_u64[0] + 272);
          while (*v22 != a2)
          {
            ++v22;
            v21 -= 8;
            if (!v21)
            {
              int v22 = (void *)(v19 + 8 * v20);
              break;
            }
          }
        }
        else
        {
          int v22 = *(void **)(v17->n128_u64[0] + 272);
        }
        if (v20 != ((uint64_t)v22 - v19) >> 3) {
          sub_1B6DB3B88((uint64_t)&v95, v17);
        }
      }
      unsigned int v17 = (__n128 *)((char *)v17 + 24);
    }
    while (v17 != v18);
  }
  v89[0] = a4;
  sub_1B66025E0((uint64_t)v89, 32);
  uint64_t v23 = *(unsigned int *)(v11 + 16);
  if (v23)
  {
    uint64_t v24 = 24 * v23;
    uint64_t v25 = *(void *)(v11 + 24) + 8;
    uint64_t v26 = (unsigned __int8 *)v25;
    do
    {
      int v27 = *v26;
      v26 += 24;
      if (v27 != 3)
      {
        unint64_t v28 = *(void *)(v25 - 8);
        unint64_t v29 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v28) ^ ((0x9DDFEA08EB382D69 * v28) >> 47));
        v78.n128_u64[0] = v28;
        sub_1B6DBA904((uint64_t)v89, 0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47)), &v78);
      }
      uint64_t v25 = (uint64_t)v26;
      v24 -= 24;
    }
    while (v24);
  }
  int v72 = a1;
  v85[0] = a4;
  sub_1B6DBAB9C((uint64_t)v85, 32);
  uint64_t v30 = *(unsigned int *)(a2 + 264);
  if (v30)
  {
    uint64_t v31 = *(unint64_t **)(a2 + 272);
    unint64_t v74 = &v31[v30];
    do
    {
      unsigned int v75 = v31;
      unint64_t v32 = *v31;
      uint64_t v33 = *(unsigned int *)(*v31 + 168);
      if (v33)
      {
        BOOL v34 = *(uint64_t **)(v32 + 176);
        unsigned int v76 = &v34[v33];
        do
        {
          unsigned int v35 = *(_DWORD *)(v11 + 16);
          if (v35)
          {
            uint64_t v36 = *v34;
            BOOL v37 = *(__n128 **)(v11 + 24);
            uint64_t v38 = (__n128 *)((char *)v37 + 24 * v35);
            unint64_t v39 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v34) ^ ((0x9DDFEA08EB382D69 * *v34) >> 47));
            uint64_t v40 = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
            do
            {
              if (v37->n128_u8[8] == 1 && v37[1].n128_u64[0] == v36 && v37->n128_u64[0] != v32)
              {
                if (v30 == 1)
                {
                  sub_1B6DB3B88((uint64_t)&v95, v37);
                }
                else
                {
                  unsigned int v41 = (v88 - 1) & v40;
                  unsigned int v42 = *(unsigned __int16 *)(v87 + 2 * v41);
                  if (v42 < 2) {
                    goto LABEL_46;
                  }
                  while ((v42 & 2) == 0 || v40 != *(void *)(v85[1] + 8 * v41))
                  {
                    ++v41;
                    BOOL v43 = v42 >= 4;
                    v42 >>= 1;
                    if (!v43) {
                      goto LABEL_46;
                    }
                  }
                  if (v86)
                  {
                    sub_1B6DB4424((_DWORD *)(v86 + 32 * v41 + 8), v37);
                  }
                  else
                  {
LABEL_46:
                    unint64_t v82 = (unint64_t)a4;
                    uint64_t v83 = 0;
                    uint64_t v84 = v85;
                    Aligned = CStackAllocatorAllocateAligned(a4, 0x40uLL, 8, 2);
                    memcpy(Aligned, v85, 8 * v83);
                    uint64_t v84 = Aligned;
                    HIDWORD(v83) = 8;
                    sub_1B64EA528(&v82, v37);
                    v78.n128_u64[0] = v37[1].n128_u64[0];
                    v78.n128_u64[1] = v82;
                    unint64_t v80 = v81;
                    uint64_t v79 = v83;
                    if (v84 == v85) {
                      memcpy(v81, v85, 8 * v83);
                    }
                    else {
                      unint64_t v80 = v84;
                    }
                    uint64_t v83 = 0;
                    uint64_t v84 = v85;
                    sub_1B6DB4478((uint64_t)v85, v40, &v78);
                  }
                }
              }
              BOOL v37 = (__n128 *)((char *)v37 + 24);
            }
            while (v37 != v38);
          }
          ++v34;
        }
        while (v34 != v76);
      }
      unint64_t v45 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v32) ^ ((0x9DDFEA08EB382D69 * v32) >> 47));
      unint64_t v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
      unsigned int v47 = (v90 - 1) & v46;
      unsigned int v48 = *(unsigned __int16 *)(v89[3] + 2 * v47);
      if (v48 < 2) {
        goto LABEL_57;
      }
      while ((v48 & 2) == 0 || v46 != *(void *)(v89[1] + 8 * v47))
      {
        ++v47;
        BOOL v43 = v48 >= 4;
        v48 >>= 1;
        if (!v43) {
          goto LABEL_57;
        }
      }
      if (!v89[2])
      {
LABEL_57:
        v78.n128_u64[0] = v32;
        v78.n128_u8[8] = 3;
        uint64_t v79 = 0;
        sub_1B6DB3B88((uint64_t)&v91, &v78);
      }
      uint64_t v31 = v75 + 1;
    }
    while (v75 + 1 != v74);
  }
  if (v88 != -15)
  {
    uint64_t v49 = 0;
    uint64_t v51 = v86;
    uint64_t v50 = v87;
    uint64_t v52 = (v88 + 15);
    do
    {
      if (*(_WORD *)(v50 + 2 * v49))
      {
        uint64_t v53 = v51 + 32 * v49;
        uint64_t v54 = *(unsigned int *)(v53 + 16);
        if (v54 == 1)
        {
          v78.n128_u64[0] = **(void **)(v53 + 24);
          v78.n128_u8[8] = 1;
          uint64_t v79 = *(void *)v53;
          sub_1B6DB3B88((uint64_t)&v95, &v78);
        }
        else
        {
          uint64_t v55 = *(unsigned int *)(v11 + 16);
          if (v55)
          {
            unsigned int v56 = 0;
            uint64_t v57 = 24 * v55;
            v58 = (uint64_t *)(*(void *)(v11 + 24) + 16);
            do
            {
              uint64_t v59 = *v58;
              v58 += 3;
              if (v59 == *(void *)v53) {
                ++v56;
              }
              v57 -= 24;
            }
            while (v57);
            if (v56 > v54 && v54)
            {
              uint64_t v60 = *(unint64_t **)(v51 + 32 * v49 + 24);
              uint64_t v61 = 8 * v54;
              do
              {
                v78.n128_u64[0] = *v60;
                v78.n128_u8[8] = 1;
                uint64_t v79 = *(void *)v53;
                sub_1B6DB3B88((uint64_t)&v95, &v78);
                ++v60;
                v61 -= 8;
              }
              while (v61);
            }
          }
        }
      }
      ++v49;
    }
    while (v49 != v52);
  }
  __n128 v78 = *v72;
  uint64_t v79 = 0x800000000;
  unint64_t v80 = v81;
  uint64_t v62 = 32;
  do
  {
    v63 = (char *)&v78 + v62;
    *(void *)v63 = 0;
    v63[8] = 0;
    *((void *)v63 + 2) = 0;
    v62 += 24;
  }
  while (v63 + 24 != (char *)&v82);
  unsigned int v64 = *(_DWORD *)(v11 + 16);
  if (v64)
  {
    unint64_t v65 = *(__n128 **)(v11 + 24);
    unsigned int v66 = (__n128 *)((char *)v65 + 24 * v64);
    do
    {
      if (v96)
      {
        uint64_t v67 = 24 * v96;
        uint64_t v68 = v97;
        while (*v68 != v65->n128_u64[0]
             || *((unsigned __int8 *)v68 + 8) != v65->n128_u8[8]
             || v68[2] != v65[1].n128_u64[0])
        {
          v68 += 3;
          v67 -= 24;
          if (!v67)
          {
            uint64_t v68 = &v97[3 * v96];
            break;
          }
        }
      }
      else
      {
        uint64_t v68 = v97;
      }
      if (0xAAAAAAAAAAAAAAABLL * (v68 - v97) == v96) {
        sub_1B6DB26E0((uint64_t)&v78, v65);
      }
      unint64_t v65 = (__n128 *)((char *)v65 + 24);
    }
    while (v65 != v66);
  }
  if (v92)
  {
    unsigned int v69 = v93;
    uint64_t v70 = 24 * v92;
    do
    {
      sub_1B6DB26E0((uint64_t)&v78, v69);
      unsigned int v69 = (__n128 *)((char *)v69 + 24);
      v70 -= 24;
    }
    while (v70);
  }
  sub_1B6DB4720(v71, v73, &v78);
  if (HIDWORD(v79))
  {
    if (v80 != v81)
    {
      unint64_t v82 = (unint64_t)v80;
      if (v78.n128_u64[1]) {
        sub_1B63C89D4((void *)v78.n128_u64[1], &v82);
      }
    }
  }
  prof_endFlame();
}

void sub_1B6DB43CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1B6DB9B04((uint64_t)va);
  prof_endFlame();
  _Unwind_Resume(a1);
}

_DWORD *sub_1B6DB4424(_DWORD *result, void *a2)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = result[2];
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    unsigned int v5 = (void *)*((void *)result + 2);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        unsigned int v5 = (void *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    unsigned int v5 = (void *)*((void *)result + 2);
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3) {
    return sub_1B64EA528(result, a2);
  }
  return result;
}

uint64_t sub_1B6DB4478(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v6 + 15;
    if (v12 >= (int)v7 + 496) {
      unsigned int v12 = v7 + 496;
    }
    if (v7 >= v12)
    {
      unsigned int v14 = v7;
    }
    else
    {
      unsigned int v13 = (__int16 *)(v8 + 2 * v7);
      unsigned int v14 = v7;
      while (1)
      {
        __int16 v15 = *v13++;
        if ((v15 & 1) == 0) {
          break;
        }
        if (v12 == ++v14) {
          goto LABEL_32;
        }
      }
    }
    if (v14 != v12)
    {
      *(_WORD *)(v8 + 2 * v14) |= 1u;
      if (v14 <= (int)v7 + 14)
      {
        uint64_t v29 = v14;
        LOBYTE(v20) = v14;
      }
      else
      {
        while (2)
        {
          unsigned int v16 = v14 - 14;
          if (v14 < 0xF) {
            unsigned int v16 = 0;
          }
          unsigned int v17 = v16 - 1;
          if (v16 <= v14) {
            unsigned int v18 = v14;
          }
          else {
            unsigned int v18 = v16;
          }
          char v19 = 1;
          while (1)
          {
            uint64_t v20 = v17 + 1;
            if (v16 <= v20) {
              break;
            }
LABEL_26:
            ++v19;
            unsigned int v17 = v20;
            if (v20 == v18) {
              goto LABEL_31;
            }
          }
          int v21 = 1 << (v17 - v16 + 2);
          char v22 = v19;
          unsigned int v23 = v16;
          while (1)
          {
            uint64_t v24 = v23;
            if (((unsigned __int16)v21 & *(_WORD *)(v8 + 2 * v23)) != 0) {
              break;
            }
            ++v23;
            LOWORD(v21) = (unsigned __int16)v21 >> 1;
            --v22;
            if ((int)v24 + 1 > v20) {
              goto LABEL_26;
            }
          }
          if (v20 >= v14)
          {
LABEL_31:
            *(_WORD *)(v8 + 2 * v14) ^= 1u;
            goto LABEL_32;
          }
          uint64_t v25 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v14) = *(void *)(*(void *)(a1 + 8) + 8 * v20);
          uint64_t v26 = (void *)(v25 + 32 * v14);
          uint64_t v27 = v25 + 32 * v20;
          *uint64_t v26 = *(void *)(v25 + 32 * v20);
          uint64_t v28 = *(void *)(v27 + 8);
          v26[2] = 0;
          v26[3] = v26 + 4;
          v26[1] = v28;
          sub_1B6DBAC44((uint64_t)(v26 + 1), (void *)(v27 + 8));
          uint64_t v8 = *(void *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v14 - v24 + 1))) ^ (1 << v22);
          unsigned int v14 = v20;
          uint64_t v29 = v20;
          if (v20 > (int)v7 + 14) {
            continue;
          }
          break;
        }
      }
      uint64_t v33 = (void *)(*(void *)(a1 + 16) + 32 * v29);
      *uint64_t v33 = *a3;
      v33[1] = a3[1];
      v33[2] = 0;
      ++v33;
      v33[2] = v33 + 3;
      uint64_t result = sub_1B6DBAC44((uint64_t)v33, a3 + 1);
      *(void *)(*(void *)(a1 + 8) + 8 * v29) = a2;
      uint64_t v34 = *(void *)(a1 + 24);
      *(_WORD *)(v34 + 2 * v29) |= 1u;
      *(_WORD *)(v34 + 2 * v7) |= 1 << (v20 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_32:
    sub_1B6DBACC0(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t v30 = (void *)(*(void *)(a1 + 16) + 32 * v10);
  *uint64_t v30 = *a3;
  uint64_t v31 = (uint64_t)(v30 + 1);

  return sub_1B6DBAC44(v31, a3 + 1);
}

uint64_t sub_1B6DB4720(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v5 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = (v5 - 1) & a2;
    uint64_t v7 = *(void *)(a1 + 32);
    unsigned int v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v11 = v5 + 15;
    if (v11 >= (int)v6 + 496) {
      unsigned int v11 = v6 + 496;
    }
    if (v6 >= v11)
    {
      unsigned int v13 = v6;
    }
    else
    {
      unsigned int v12 = (__int16 *)(v7 + 2 * v6);
      unsigned int v13 = v6;
      while (1)
      {
        __int16 v14 = *v12++;
        if ((v14 & 1) == 0) {
          break;
        }
        if (v11 == ++v13) {
          goto LABEL_34;
        }
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        uint64_t v24 = v13;
        LOBYTE(v19) = v13;
      }
      else
      {
        do
        {
          unsigned int v15 = v13 - 14;
          if (v13 < 0xF) {
            unsigned int v15 = 0;
          }
          unsigned int v16 = v15 - 1;
          if (v15 <= v13) {
            unsigned int v17 = v13;
          }
          else {
            unsigned int v17 = v15;
          }
          char v18 = 1;
          while (1)
          {
            uint64_t v19 = v16 + 1;
            if (v15 <= v19) {
              break;
            }
LABEL_26:
            ++v18;
            unsigned int v16 = v19;
            if (v19 == v17) {
              goto LABEL_33;
            }
          }
          int v20 = 1 << (v16 - v15 + 2);
          char v21 = v18;
          unsigned int v22 = v15;
          while (1)
          {
            uint64_t v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0) {
              break;
            }
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v19) {
              goto LABEL_26;
            }
          }
          if (v19 >= v13)
          {
LABEL_33:
            *(_WORD *)(v7 + 2 * v13) ^= 1u;
            goto LABEL_34;
          }
          uint64_t v24 = v19;
          uint64_t v25 = *(void *)(a1 + 24);
          *(void *)(*(void *)(a1 + 16) + 8 * v13) = *(void *)(*(void *)(a1 + 16) + 8 * v19);
          uint64_t v26 = v25 + 224 * v13;
          uint64_t v27 = (void *)(v25 + 224 * v19);
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
          *(void *)(v26 + 16) = 0x800000000;
          uint64_t v28 = v26 + 32;
          *(void *)(v26 + 24) = v26 + 32;
          do
          {
            *(void *)uint64_t v28 = 0;
            *(unsigned char *)(v28 + 8) = 0;
            *(void *)(v28 + 16) = 0;
            v28 += 24;
          }
          while (v28 != v26 + 224);
          sub_1B6DBAD34(v26, v27);
          sub_1B6DB9B04(*(void *)(a1 + 24) + 224 * v19);
          uint64_t v7 = *(void *)(a1 + 32);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v13 - v23 + 1))) ^ (1 << v21);
          unsigned int v13 = v19;
        }
        while (v19 > (int)v6 + 14);
      }
      uint64_t v30 = *(void *)(a1 + 24) + 224 * v24;
      *(_OWORD *)uint64_t v30 = *(_OWORD *)a3;
      *(void *)(v30 + 16) = 0x800000000;
      uint64_t v31 = v30 + 32;
      *(void *)(v30 + 24) = v30 + 32;
      do
      {
        *(void *)uint64_t v31 = 0;
        *(unsigned char *)(v31 + 8) = 0;
        *(void *)(v31 + 16) = 0;
        v31 += 24;
      }
      while (v31 != v30 + 224);
      sub_1B6DBAD34(v30, a3);
      *(void *)(*(void *)(a1 + 16) + 8 * v24) = a2;
      uint64_t v32 = *(void *)(a1 + 32);
      *(_WORD *)(v32 + 2 * v24) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v32 + 2 * v6) |= 1 << (v19 - v6 + 1);
      ++*(_DWORD *)(a1 + 40);
      return result;
    }
LABEL_34:
    sub_1B6DBADE8(a1);
  }
  unsigned int v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(void *)(*(void *)(a1 + 16) + 8 * v9) != a2)
  {
    ++v9;
    BOOL v10 = v8 > 3;
    v8 >>= 1;
    if (!v10) {
      goto LABEL_6;
    }
  }
  sub_1B6DBAD34(*(void *)(a1 + 24) + 224 * v9, a3);
  return 0;
}

uint64_t CFX::RG::RenderGraphBuilder::tryResolveAmbiguousDependencies(__n128 *a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  prof_beginFlame((uint64_t)"tryResolveAmbiguousDependencies", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2061);
  CStackAllocatorPushFrame(*a3);
  uint64_t v8 = a1[10].n128_u32[0];
  if (!v8) {
    goto LABEL_113;
  }
  uint64_t v110 = a4;
  uint64_t v106 = a1[10].n128_u64[1] + 8 * v8;
  unsigned int v9 = (char *)&v127;
  unint64_t v111 = *MEMORY[0x1E4FBA418];
  unint64_t v112 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  BOOL v10 = (void *)a1[10].n128_u64[1];
  v113 = a3;
  uint64_t v107 = a2;
  do
  {
    v109 = v10;
    uint64_t v116 = *v10;
    unint64_t v11 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v116) ^ ((0x9DDFEA08EB382D69 * v116) >> 47));
    unsigned int v12 = *a3;
    uint64_t v123 = *a3;
    unint64_t v13 = v11 ^ (v11 >> 47);
    uint64_t v124 = 0x800000000;
    int v125 = &v126;
    uint64_t v14 = 3;
    do
    {
      unsigned int v15 = &(&v123)[v14];
      *unsigned int v15 = 0;
      *((unsigned char *)v15 + 8) = 0;
      v15[2] = 0;
      v14 += 3;
    }
    while (v15 + 3 != (unsigned int **)v9);
    unint64_t v16 = 0x9DDFEA08EB382D69 * v13;
    unsigned int v17 = (*(_DWORD *)(a2 + 44) - 1) & (-348639895 * v13);
    unsigned int v18 = *(unsigned __int16 *)(*(void *)(a2 + 32) + 2 * v17);
    uint64_t v108 = v16;
    if (v18 < 2)
    {
LABEL_9:
      uint64_t v115 = 0;
    }
    else
    {
      while ((v18 & 2) == 0 || v16 != *(void *)(*(void *)(a2 + 16) + 8 * v17))
      {
        ++v17;
        BOOL v19 = v18 > 3;
        v18 >>= 1;
        if (!v19) {
          goto LABEL_9;
        }
      }
      uint64_t v115 = *(void *)(a2 + 24) + 224 * v17;
    }
    v119[0] = v12;
    sub_1B6DBAEBC((uint64_t)v119, 32);
    unsigned int v20 = *(_DWORD *)(v115 + 16);
    if (v20)
    {
      uint64_t v21 = *(void *)(v115 + 24);
      uint64_t v22 = v21 + 24 * v20;
      do
      {
        if (*(unsigned char *)(v21 + 8) == 1)
        {
          unint64_t v23 = *(void *)(v21 + 16);
          unint64_t v24 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v23) ^ ((0x9DDFEA08EB382D69 * v23) >> 47));
          uint64_t v25 = 0x9DDFEA08EB382D69 * (v24 ^ (v24 >> 47));
          v146.n128_u64[0] = *(void *)v21;
          v146.n128_u64[1] = v23;
          unsigned int v26 = (v122 - 1) & v25;
          unsigned int v27 = *(unsigned __int16 *)(v121 + 2 * v26);
          if (v27 < 2) {
            goto LABEL_17;
          }
          while ((v27 & 2) == 0 || v25 != *(void *)(v119[1] + 8 * v26))
          {
            ++v26;
            BOOL v28 = v27 >= 4;
            v27 >>= 1;
            if (!v28) {
              goto LABEL_17;
            }
          }
          if (v120)
          {
            sub_1B6DB23F0(v120 + 24 * v26, &v146);
          }
          else
          {
LABEL_17:
            __n128 v129 = (__n128)(unint64_t)*a3;
            uint64_t v130 = (uint64_t)&v131;
            sub_1B6DB23F0((uint64_t)&v129, &v146);
            sub_1B6DB56A0((uint64_t)v119, v25, &v129);
          }
        }
        v21 += 24;
      }
      while (v21 != v22);
    }
    int v29 = v122;
    if (v122 == -15) {
      goto LABEL_90;
    }
    int v114 = 0;
    unint64_t v30 = 0;
    do
    {
      if ((*(_WORD *)(v121 + 2 * v30) & 1) == 0) {
        goto LABEL_78;
      }
      int v118 = v29;
      uint64_t v31 = v120 + 24 * v30;
      unsigned int v34 = *(_DWORD *)(v31 + 8);
      uint64_t v33 = (unsigned int *)(v31 + 8);
      uint64_t v32 = v34;
      if (v34 < 2) {
        goto LABEL_77;
      }
      uint64_t v35 = v120 + 24 * v30;
      uint64_t v38 = *(void **)(v35 + 16);
      uint64_t v36 = (void **)(v35 + 16);
      BOOL v37 = v38;
      uint64_t v117 = v38[1];
      v151 = *a3;
      uint64_t v152 = 0;
      v153 = (unint64_t *)&v154;
      uint64_t v39 = 16 * v32;
      do
      {
        sub_1B64EA528(&v151, v37);
        v37 += 2;
        v39 -= 16;
      }
      while (v39);
      uint64_t v40 = v9;
      v146.n128_u64[0] = (unint64_t)*a3;
      sub_1B6DBB270((uint64_t)&v146, 32);
      v140 = *a3;
      sub_1B6DBA550((uint64_t)&v140, 32);
      v137 = *a3;
      uint64_t v138 = 0;
      v139 = &v140;
      if (!v152)
      {
LABEL_69:
        sub_1B6DAEF34((uint64_t)&v129);
        a3 = v113;
        int v77 = sub_1B65A7F00(&v129, (uint64_t)"Ambiguous dependency on pass [", 30);
        size_t v78 = strlen(*(const char **)(v116 + 24));
        uint64_t v79 = sub_1B65A7F00(v77, *(void *)(v116 + 24), v78);
        sub_1B65A7F00(v79, (uint64_t)"] reading resource written by multiple passes:\n", 47);
        uint64_t v80 = *v33;
        if (v80)
        {
          unsigned int v81 = *v36;
          uint64_t v82 = 16 * v80;
          do
          {
            uint64_t v83 = sub_1B65A7F00(&v129, (uint64_t)"\t<", 2);
            size_t v84 = strlen(*(const char **)(v81[1] + 16));
            uint64_t v85 = sub_1B65A7F00(v83, *(void *)(v81[1] + 16), v84);
            sub_1B65A7F00(v85, (uint64_t)"> written by [", 14);
            uint64_t v86 = (void *)std::ostream::operator<<();
            uint64_t v87 = sub_1B65A7F00(v86, (uint64_t)":", 1);
            size_t v88 = strlen(*(const char **)(*v81 + 24));
            uint64_t v89 = sub_1B65A7F00(v87, *(void *)(*v81 + 24), v88);
            sub_1B65A7F00(v89, (uint64_t)"]\n", 2);
            v81 += 2;
            v82 -= 16;
          }
          while (v82);
        }
        int v90 = sub_1B65A7F00(&v129, (uint64_t)"Must add explicit dependency on [", 33);
        size_t v91 = strlen(*(const char **)(v116 + 24));
        uint64_t v92 = sub_1B65A7F00(v90, *(void *)(v116 + 24), v91);
        sub_1B65A7F00(v92, (uint64_t)"]", 1);
        sub_1B65A8294((uint64_t)&v129.n128_i64[1], &v127);
        unsigned int v9 = v40;
        if (*(char *)(v110 + 23) < 0) {
          operator delete(*(void **)v110);
        }
        *(_OWORD *)uint64_t v110 = v127;
        *(void *)(v110 + 16) = v128;
        v129.n128_u64[0] = v111;
        *(unint64_t *)((char *)v129.n128_u64 + *(void *)(v111 - 24)) = v112;
        v129.n128_u64[1] = MEMORY[0x1E4FBA470] + 16;
        if (v134 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1BA9B6D30](&v135);
        int v114 = 1;
LABEL_77:
        int v29 = v118;
        goto LABEL_78;
      }
      unsigned int v41 = v153;
      unsigned int v42 = &v153[v152];
      while (1)
      {
        unint64_t v43 = *v41;
        unsigned int v44 = v150 + 15;
        memset((void *)v146.n128_u64[1], 255, 8 * (v150 + 15));
        bzero(v148, 2 * v44);
        int v149 = 0;
        LODWORD(v138) = 0;
        memset(v141, 255, 8 * (v145 + 15));
        bzero(v143, 2 * (v145 + 15));
        int v144 = 0;
        if (v152)
        {
          unint64_t v45 = v153;
          uint64_t v46 = 8 * v152;
          do
          {
            unint64_t v47 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v45) ^ ((0x9DDFEA08EB382D69 * *v45) >> 47));
            v129.n128_u8[0] = 0;
            sub_1B6DBB058((uint64_t)&v140, 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47)), &v129);
            ++v45;
            v46 -= 8;
          }
          while (v46);
        }
        v129.n128_u64[0] = v43;
        v129.n128_u32[2] = 0;
        sub_1B6DB23F0((uint64_t)&v137, &v129);
        unsigned int v48 = v138;
        if (!v138)
        {
          if (!v152) {
            goto LABEL_69;
          }
          goto LABEL_57;
        }
        do
        {
          uint64_t v49 = &v139[2 * v48];
          unint64_t v50 = (unint64_t)*(v49 - 2);
          unsigned int v52 = *((_DWORD *)v49 - 2);
          unsigned int v51 = *((_DWORD *)v49 - 1);
          LODWORD(v138) = v48 - 1;
          unint64_t v53 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v50) ^ ((0x9DDFEA08EB382D69 * v50) >> 47));
          uint64_t v54 = 0x9DDFEA08EB382D69 * (v53 ^ (v53 >> 47));
          unsigned int v55 = (v150 - 1) & v54;
          unsigned int v56 = v148[v55];
          if (v56 < 2) {
            goto LABEL_38;
          }
          while ((v56 & 2) == 0 || v54 != *(void *)(v146.n128_u64[1] + 8 * v55))
          {
            ++v55;
            BOOL v28 = v56 >= 4;
            v56 >>= 1;
            if (!v28) {
              goto LABEL_38;
            }
          }
          if (!v147 || v52 > DWORD2(v147[v55]))
          {
LABEL_38:
            v129.n128_u64[0] = v50;
            v129.n128_u64[1] = __PAIR64__(v51, v52);
            sub_1B6DBB38C((uint64_t)&v146, v54, &v129);
          }
          uint64_t v57 = *(unsigned int *)(v50 + 264);
          if (v57)
          {
            v58 = *(unint64_t **)(v50 + 272);
            uint64_t v59 = &v58[v57];
            unsigned __int32 v60 = v52 + 1;
            do
            {
              unint64_t v61 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v58) ^ ((0x9DDFEA08EB382D69 * *v58) >> 47));
              unint64_t v62 = 0x9DDFEA08EB382D69 * (v61 ^ (v61 >> 47));
              unsigned int v63 = (v145 - 1) & v62;
              unsigned int v64 = v143[v63];
              if (v64 >= 2)
              {
                while ((v64 & 2) == 0 || v62 != *((void *)v141 + v63))
                {
                  ++v63;
                  BOOL v28 = v64 >= 4;
                  v64 >>= 1;
                  if (!v28) {
                    goto LABEL_48;
                  }
                }
                if (v142)
                {
                  v129.n128_u64[0] = *v58;
                  v129.n128_u32[2] = v60;
                  sub_1B6DB23F0((uint64_t)&v137, &v129);
                }
              }
LABEL_48:
              ++v58;
            }
            while (v58 != v59);
          }
          unsigned int v48 = v138;
        }
        while (v138);
        if (v149 == v152) {
          break;
        }
LABEL_57:
        if (++v41 == v42) {
          goto LABEL_69;
        }
      }
      if (!v149) {
        goto LABEL_69;
      }
      a3 = v113;
      __n128 v129 = (__n128)(unint64_t)*v113;
      unint64_t v65 = &v131;
      uint64_t v130 = (uint64_t)&v131;
      unsigned int v66 = &v131;
      unsigned int v9 = v40;
      uint64_t v67 = v115;
      if (v150 == -15) {
        goto LABEL_80;
      }
      unsigned __int32 v68 = 0;
      uint64_t v70 = v147;
      unsigned int v69 = (__int16 *)v148;
      uint64_t v71 = (v150 + 15);
      do
      {
        __int16 v72 = *v69++;
        if (v72)
        {
          uint64_t v73 = (const void *)v130;
          if (v68 + 1 > v129.n128_u32[3])
          {
            unsigned int v74 = ((double)(v129.n128_u32[3] + 1) * 1.5);
            Aligned = CStackAllocatorAllocateAligned((uint64_t *)v129.n128_u64[0], 16 * v74, 8, 2);
            memcpy(Aligned, v73, 16 * v129.n128_u32[2]);
            uint64_t v130 = (uint64_t)Aligned;
            v129.n128_u32[3] = v74;
            uint64_t v73 = Aligned;
            unsigned __int32 v68 = v129.n128_u32[2];
            uint64_t v67 = v115;
          }
          *((_OWORD *)v73 + v68) = *v70;
          unsigned __int32 v68 = ++v129.n128_u32[2];
          unsigned int v9 = v40;
        }
        ++v70;
        --v71;
      }
      while (v71);
      unint64_t v65 = (void *)v130;
      unsigned int v66 = (void *)(v130 + 16 * v68);
      if (!v68) {
LABEL_80:
      }
        uint64_t v76 = 0;
      else {
        uint64_t v76 = 126 - 2 * __clz(v68);
      }
      sub_1B6DBB62C((unint64_t)v65, (unint64_t)v66, v76, 1);
      uint64_t v93 = *(unsigned int *)(v67 + 16);
      if (v93)
      {
        uint64_t v94 = *(void *)v130;
        v95 = *(__n128 **)(v115 + 24);
        uint64_t v96 = 24 * v93;
        do
        {
          if (v95->n128_u8[8] == 1 && v95[1].n128_u64[0] == v117 && v95->n128_u64[0] != v94) {
            sub_1B6DB3B88((uint64_t)&v123, v95);
          }
          v95 = (__n128 *)((char *)v95 + 24);
          v96 -= 24;
        }
        while (v96);
      }
      int v29 = v122;
LABEL_78:
      ++v30;
    }
    while (v30 < (v29 + 15));
    if (v114)
    {
      uint64_t v104 = 0;
      goto LABEL_115;
    }
LABEL_90:
    a2 = v107;
    if (v124)
    {
      __n128 v129 = *a1;
      uint64_t v130 = 0x800000000;
      v131 = v132;
      uint64_t v97 = 32;
      do
      {
        uint64_t v98 = (char *)&v129 + v97;
        *(void *)uint64_t v98 = 0;
        v98[8] = 0;
        *((void *)v98 + 2) = 0;
        v97 += 24;
      }
      while (v98 + 24 != (char *)&v136);
      unsigned int v99 = *(_DWORD *)(v115 + 16);
      if (v99)
      {
        v100 = *(__n128 **)(v115 + 24);
        uint64_t v101 = (__n128 *)((char *)v100 + 24 * v99);
        do
        {
          if (v124)
          {
            uint64_t v102 = 24 * v124;
            uint64_t v103 = v125;
            while (*v103 != v100->n128_u64[0]
                 || *((unsigned __int8 *)v103 + 8) != v100->n128_u8[8]
                 || v103[2] != v100[1].n128_u64[0])
            {
              v103 += 3;
              v102 -= 24;
              if (!v102)
              {
                uint64_t v103 = &v125[3 * v124];
                break;
              }
            }
          }
          else
          {
            uint64_t v103 = v125;
          }
          if (0xAAAAAAAAAAAAAAABLL * (v103 - v125) == v124) {
            sub_1B6DB26E0((uint64_t)&v129, v100);
          }
          v100 = (__n128 *)((char *)v100 + 24);
        }
        while (v100 != v101);
      }
      sub_1B6DB4720(v107, v108, &v129);
      if (HIDWORD(v130))
      {
        if (v131 != v132)
        {
          v146.n128_u64[0] = (unint64_t)v131;
          if (v129.n128_u64[1]) {
            sub_1B63C89D4((void *)v129.n128_u64[1], &v146);
          }
        }
      }
    }
    BOOL v10 = v109 + 1;
  }
  while (v109 + 1 != (void *)v106);
LABEL_113:
  uint64_t v104 = 1;
LABEL_115:
  CStackAllocatorPopFrame((uint64_t)*a3);
  prof_endFlame();
  return v104;
}

void sub_1B6DB5550(_Unwind_Exception *a1)
{
}

uint64_t sub_1B6DB56A0(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v5 = *(_DWORD *)(a1 + 36);
    uint64_t v6 = (v5 - 1) & a2;
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned int v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v11 = v5 + 15;
    if (v11 >= (int)v6 + 496) {
      unsigned int v11 = v6 + 496;
    }
    if (v6 >= v11)
    {
      unsigned int v13 = v6;
    }
    else
    {
      unsigned int v12 = (__int16 *)(v7 + 2 * v6);
      unsigned int v13 = v6;
      while (1)
      {
        __int16 v14 = *v12++;
        if ((v14 & 1) == 0) {
          break;
        }
        if (v11 == ++v13) {
          goto LABEL_32;
        }
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        uint64_t v19 = v13;
      }
      else
      {
        while (2)
        {
          unsigned int v15 = v13 - 14;
          if (v13 < 0xF) {
            unsigned int v15 = 0;
          }
          unsigned int v16 = v15 - 1;
          if (v15 <= v13) {
            unsigned int v17 = v13;
          }
          else {
            unsigned int v17 = v15;
          }
          char v18 = 1;
          while (1)
          {
            uint64_t v19 = v16 + 1;
            if (v15 <= v19) {
              break;
            }
LABEL_26:
            ++v18;
            unsigned int v16 = v19;
            if (v19 == v17) {
              goto LABEL_31;
            }
          }
          int v20 = 1 << (v16 - v15 + 2);
          char v21 = v18;
          unsigned int v22 = v15;
          while (1)
          {
            uint64_t v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0) {
              break;
            }
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v19) {
              goto LABEL_26;
            }
          }
          if (v19 >= v13)
          {
LABEL_31:
            *(_WORD *)(v7 + 2 * v13) ^= 1u;
            goto LABEL_32;
          }
          uint64_t v24 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v13) = *(void *)(*(void *)(a1 + 8) + 8 * v19);
          uint64_t v25 = (void *)(v24 + 24 * v13);
          unsigned int v26 = (void *)(v24 + 24 * v19);
          *uint64_t v25 = *v26;
          v25[1] = 0;
          v25[2] = v25 + 3;
          sub_1B6DBAF68((uint64_t)v25, v26);
          uint64_t v7 = *(void *)(a1 + 24);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v13 - v23 + 1))) ^ (1 << v21);
          unsigned int v13 = v19;
          if (v19 > (int)v6 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v13) = v19;
      }
      int v29 = (void *)(*(void *)(a1 + 16) + 24 * v19);
      *int v29 = *a3;
      v29[1] = 0;
      v29[2] = v29 + 3;
      uint64_t result = sub_1B6DBAF68((uint64_t)v29, a3);
      *(void *)(*(void *)(a1 + 8) + 8 * v19) = a2;
      uint64_t v30 = *(void *)(a1 + 24);
      *(_WORD *)(v30 + 2 * v19) |= 1u;
      *(_WORD *)(v30 + 2 * v6) |= 1 << (v13 - v6 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_32:
    sub_1B6DBAFE4(a1);
  }
  unsigned int v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v9) != a2)
  {
    ++v9;
    BOOL v10 = v8 > 3;
    v8 >>= 1;
    if (!v10) {
      goto LABEL_6;
    }
  }
  uint64_t v27 = *(void *)(a1 + 16) + 24 * v9;

  return sub_1B6DBAF68(v27, a3);
}

void CFX::RG::RenderGraphBuilder::computeSuccessors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  prof_beginFlame((uint64_t)"computeSuccessors", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2220);
  uint64_t v6 = *(unsigned int *)(a1 + 160);
  if (v6)
  {
    uint64_t v7 = *(unint64_t **)(a1 + 168);
    unsigned int v8 = &v7[v6];
    do
    {
      unint64_t v9 = *v7;
      unint64_t v10 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v7) ^ ((0x9DDFEA08EB382D69 * *v7) >> 47));
      unint64_t v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      unsigned int v12 = (*(_DWORD *)(a2 + 44) - 1) & v11;
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(a2 + 32) + 2 * v12);
      if (v13 >= 2)
      {
        while ((v13 & 2) == 0 || v11 != *(void *)(*(void *)(a2 + 16) + 8 * v12))
        {
          ++v12;
          BOOL v14 = v13 >= 4;
          v13 >>= 1;
          if (!v14) {
            goto LABEL_7;
          }
        }
        uint64_t v15 = *(void *)(a2 + 24);
        if (v15)
        {
          uint64_t v16 = v15 + 224 * v12;
          unsigned int v17 = *(_DWORD *)(v16 + 16);
          if (v17)
          {
            uint64_t v18 = *(void *)(v16 + 24);
            uint64_t v19 = v18 + 24 * v17;
            do
            {
              unint64_t v20 = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * *(void *)v18) ^ ((0x9DDFEA08EB382D69 * *(void *)v18) >> 47));
              unint64_t v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
              int v22 = *(unsigned __int8 *)(v18 + 8);
              if (v22 == 3)
              {
                uint64_t v23 = 0;
                v30.n128_u64[0] = v9;
                v30.n128_u8[8] = 3;
                uint64_t v31 = 0;
                unsigned int v24 = (*(_DWORD *)(a3 + 44) - 1) & v21;
                unsigned int v25 = *(unsigned __int16 *)(*(void *)(a3 + 32) + 2 * v24);
                if (v25 >= 2)
                {
                  while ((v25 & 2) == 0 || v21 != *(void *)(*(void *)(a3 + 16) + 8 * v24))
                  {
                    ++v24;
                    BOOL v26 = v25 > 3;
                    v25 >>= 1;
                    if (!v26)
                    {
                      uint64_t v23 = 0;
                      goto LABEL_19;
                    }
                  }
                  uint64_t v23 = *(void *)(a3 + 24) + 224 * v24;
                }
LABEL_19:
                sub_1B6DB26E0(v23, &v30);
                int v22 = *(unsigned __int8 *)(v18 + 8);
              }
              if (v22 == 1)
              {
                v30.n128_u64[0] = v9;
                v30.n128_u8[8] = 2;
                uint64_t v31 = *(void *)(v18 + 16);
                unsigned int v27 = (*(_DWORD *)(a3 + 44) - 1) & v21;
                unsigned int v28 = *(unsigned __int16 *)(*(void *)(a3 + 32) + 2 * v27);
                if (v28 < 2)
                {
LABEL_25:
                  uint64_t v29 = 0;
                }
                else
                {
                  while ((v28 & 2) == 0 || v21 != *(void *)(*(void *)(a3 + 16) + 8 * v27))
                  {
                    ++v27;
                    BOOL v26 = v28 > 3;
                    v28 >>= 1;
                    if (!v26) {
                      goto LABEL_25;
                    }
                  }
                  uint64_t v29 = *(void *)(a3 + 24) + 224 * v27;
                }
                sub_1B6DB26E0(v29, &v30);
              }
              v18 += 24;
            }
            while (v18 != v19);
          }
        }
      }
LABEL_7:
      ++v7;
    }
    while (v7 != v8);
  }
  prof_endFlame();
}

void sub_1B6DB5B8C(_Unwind_Exception *a1)
{
}

void CFX::RG::RenderGraphBuilder::dumpDependencies(uint64_t a1, uint64_t a2)
{
  puts("After cleanup");
  uint64_t v4 = *(unsigned int *)(a1 + 160);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 168);
    uint64_t v6 = v5 + 8 * v4;
    do
    {
      unint64_t v7 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * *(void *)v5) ^ ((0x9DDFEA08EB382D69 * *(void *)v5) >> 47));
      unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      unsigned int v9 = (*(_DWORD *)(a2 + 44) - 1) & v8;
      unsigned int v10 = *(unsigned __int16 *)(*(void *)(a2 + 32) + 2 * v9);
      if (v10 < 2)
      {
LABEL_7:
        uint64_t v12 = 0;
      }
      else
      {
        while ((v10 & 2) == 0 || v8 != *(void *)(*(void *)(a2 + 16) + 8 * v9))
        {
          ++v9;
          BOOL v11 = v10 > 3;
          v10 >>= 1;
          if (!v11) {
            goto LABEL_7;
          }
        }
        uint64_t v12 = *(void *)(a2 + 24) + 224 * v9;
      }
      printf("Pass [%s]\n", *(const char **)(*(void *)v5 + 24));
      uint64_t v13 = *(unsigned int *)(v12 + 16);
      if (v13)
      {
        uint64_t v14 = *(void *)(v12 + 24);
        uint64_t v15 = 24 * v13;
        do
        {
          sub_1B6DB5D18(v14, __p);
          if (v18 >= 0) {
            uint64_t v16 = __p;
          }
          else {
            uint64_t v16 = (void **)__p[0];
          }
          printf("-> %s", (const char *)v16);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
          v14 += 24;
          v15 -= 24;
        }
        while (v15);
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
}

uint64_t sub_1B6DB5D18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1B6DAEF34((uint64_t)&v20);
  unint64_t v4 = *(char *)(a1 + 8);
  if (v4 > 3) {
    uint64_t v5 = "Unknown";
  }
  else {
    uint64_t v5 = off_1E6146598[v4];
  }
  size_t v6 = strlen(v5);
  unint64_t v7 = sub_1B65A7F00(&v20, (uint64_t)v5, v6);
  sub_1B65A7F00(v7, (uint64_t)" ", 1);
  unint64_t v8 = sub_1B65A7F00(&v20, (uint64_t)"[", 1);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9) {
    unsigned int v10 = *(const char **)(v9 + 16);
  }
  else {
    unsigned int v10 = "";
  }
  size_t v11 = strlen(v10);
  uint64_t v12 = sub_1B65A7F00(v8, (uint64_t)v10, v11);
  sub_1B65A7F00(v12, (uint64_t)"] ", 2);
  uint64_t v13 = sub_1B65A7F00(&v20, (uint64_t)"from \"", 6);
  uint64_t v14 = *(const char **)(*(void *)a1 + 24);
  size_t v15 = strlen(v14);
  uint64_t v16 = sub_1B65A7F00(v13, (uint64_t)v14, v15);
  unsigned int v17 = sub_1B65A7F00(v16, (uint64_t)"\" pass", 6);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  char v18 = std::locale::use_facet(&v24, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v24);
  std::ostream::put();
  std::ostream::flush();
  sub_1B65A8294((uint64_t)v21, a2);
  uint64_t v20 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v21[-1] + *(void *)(v20 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[0] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9B6D30](&v23);
}

void sub_1B6DB5FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1B6DAF0CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphBuilder::validateResolve(uint64_t this, CFX::GPUResourceManager **a2)
{
  uint64_t v2 = *(unsigned int *)(this + 160);
  if (v2)
  {
    unint64_t v4 = *(uint64_t **)(this + 168);
    uint64_t v5 = &v4[v2];
    do
    {
      uint64_t v6 = *v4;
      if (*(unsigned char *)(*v4 + 344) == 3 && *(_DWORD *)(v6 + 168))
      {
        unint64_t v7 = 0;
        do
        {
          if (*(unsigned char *)(v6 + 344) == 3)
          {
            unint64_t v8 = *(const CFX::RG::Resource **)(*(void *)(v6 + 176) + 8 * v7);
            this = sub_1B6DB00F0(*(void *)(v6 + 352), (uint64_t)v8);
            if (this)
            {
              uint64_t v9 = this;
              if ((*(unsigned char *)this & 4) != 0)
              {
                this = CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(a2, v8);
                if (*(_DWORD *)(v6 + 168))
                {
                  unint64_t v10 = 0;
                  do
                  {
                    size_t v11 = *(const CFX::RG::Resource **)(*(void *)(v6 + 176) + 8 * v10);
                    if (v8 != v11 && *(unsigned char *)(v6 + 344) == 3)
                    {
                      this = sub_1B6DB00F0(*(void *)(v6 + 352), *(void *)(*(void *)(v6 + 176) + 8 * v10));
                      if (this)
                      {
                        if (*(unsigned __int8 *)(v9 + 4) == *(unsigned __int8 *)(this + 4)
                          && *(_DWORD *)(v9 + 8) == *(_DWORD *)(this + 8))
                        {
                          this = CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(a2, v11);
                        }
                      }
                    }
                    ++v10;
                  }
                  while (v10 < *(unsigned int *)(v6 + 168));
                }
              }
            }
          }
          ++v7;
        }
        while (v7 < *(unsigned int *)(v6 + 168));
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return this;
}

uint64_t *CFX::RG::RenderGraphBuilder::appendResource(uint64_t *this, CFX::RG::Resource *a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = this;
  switch(*((unsigned char *)a2 + 8))
  {
    case 1:
      uint64_t v3 = this + 2;
      goto LABEL_6;
    case 2:
      uint64_t v3 = this + 10;
      goto LABEL_6;
    case 3:
      uint64_t v3 = this + 6;
      goto LABEL_6;
    case 4:
      *((unsigned char *)this + 320) = 1;
      uint64_t v4 = *((void *)a2 + 23);
      sub_1B6DB61BC(this + 26, &v4);
      uint64_t v3 = v2 + 14;
LABEL_6:
      this = sub_1B63C88CC(v3, &v5);
      break;
    default:
      return this;
  }
  return this;
}

uint64_t *sub_1B6DB61BC(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  unsigned int v4 = *((_DWORD *)result + 4);
  if (v4 + 1 > *((_DWORD *)result + 5))
  {
    uint64_t result = sub_1B63C8928((uint64_t)result, 1, 0);
    unsigned int v4 = *((_DWORD *)v3 + 4);
  }
  *(void *)(v3[3] + 8 * v4) = *a2;
  ++*((_DWORD *)v3 + 4);
  return result;
}

void CFX::RG::RenderGraphBuilder::initializeDependencies(long long *a1, uint64_t a2)
{
  prof_beginFlame((uint64_t)"initializeDependencies", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2365);
  uint64_t v4 = *((unsigned int *)a1 + 40);
  if (v4)
  {
    uint64_t v5 = (void *)*((void *)a1 + 21);
    uint64_t v6 = &v5[v4];
    do
    {
      unint64_t v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v5) ^ ((0x9DDFEA08EB382D69 * *v5) >> 47));
      long long v11 = *a1;
      unint64_t v8 = v7 ^ (v7 >> 47);
      uint64_t v12 = 0x800000000;
      uint64_t v13 = v14;
      uint64_t v9 = 32;
      do
      {
        unint64_t v10 = (char *)&v11 + v9;
        *(void *)unint64_t v10 = 0;
        v10[8] = 0;
        *((void *)v10 + 2) = 0;
        v9 += 24;
      }
      while (v10 + 24 != (char *)&v15);
      sub_1B6DB4720(a2, 0x9DDFEA08EB382D69 * v8, &v11);
      if (HIDWORD(v12))
      {
        if (v13 != v14)
        {
          uint64_t v16 = v13;
          if (*((void *)&v11 + 1)) {
            sub_1B63C89D4(*((void **)&v11 + 1), &v16);
          }
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  prof_endFlame();
}

void sub_1B6DB634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B6DB6364(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v5 = *(_DWORD *)(a1 + 36);
    uint64_t v6 = (v5 - 1) & a2;
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned int v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v11 = v5 + 15;
    if (v11 >= (int)v6 + 496) {
      unsigned int v11 = v6 + 496;
    }
    if (v6 >= v11)
    {
      unsigned int v13 = v6;
    }
    else
    {
      uint64_t v12 = (__int16 *)(v7 + 2 * v6);
      unsigned int v13 = v6;
      while (1)
      {
        __int16 v14 = *v12++;
        if ((v14 & 1) == 0) {
          break;
        }
        if (v11 == ++v13) {
          goto LABEL_32;
        }
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        uint64_t v19 = v13;
      }
      else
      {
        while (2)
        {
          unsigned int v15 = v13 - 14;
          if (v13 < 0xF) {
            unsigned int v15 = 0;
          }
          unsigned int v16 = v15 - 1;
          if (v15 <= v13) {
            unsigned int v17 = v13;
          }
          else {
            unsigned int v17 = v15;
          }
          char v18 = 1;
          while (1)
          {
            uint64_t v19 = v16 + 1;
            if (v15 <= v19) {
              break;
            }
LABEL_26:
            ++v18;
            unsigned int v16 = v19;
            if (v19 == v17) {
              goto LABEL_31;
            }
          }
          int v20 = 1 << (v16 - v15 + 2);
          char v21 = v18;
          unsigned int v22 = v15;
          while (1)
          {
            uint64_t v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0) {
              break;
            }
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v19) {
              goto LABEL_26;
            }
          }
          if (v19 >= v13)
          {
LABEL_31:
            *(_WORD *)(v7 + 2 * v13) ^= 1u;
            goto LABEL_32;
          }
          uint64_t v24 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v13) = *(void *)(*(void *)(a1 + 8) + 8 * v19);
          unsigned int v25 = (void *)(v24 + 88 * v13);
          BOOL v26 = (void *)(v24 + 88 * v19);
          *unsigned int v25 = *v26;
          v25[1] = 0x800000000;
          v25[2] = v25 + 3;
          sub_1B6DBC3E8((uint64_t)v25, v26);
          uint64_t v7 = *(void *)(a1 + 24);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v13 - v23 + 1))) ^ (1 << v21);
          unsigned int v13 = v19;
          if (v19 > (int)v6 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v13) = v19;
      }
      unsigned int v28 = (void *)(*(void *)(a1 + 16) + 88 * v19);
      *unsigned int v28 = *a3;
      v28[1] = 0x800000000;
      v28[2] = v28 + 3;
      sub_1B6DBC3E8((uint64_t)v28, a3);
      *(void *)(*(void *)(a1 + 8) + 8 * v19) = a2;
      uint64_t v29 = *(void *)(a1 + 24);
      *(_WORD *)(v29 + 2 * v19) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v29 + 2 * v6) |= 1 << (v13 - v6 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_32:
    sub_1B6DBC47C(a1);
  }
  unsigned int v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v9) != a2)
  {
    ++v9;
    BOOL v10 = v8 > 3;
    v8 >>= 1;
    if (!v10) {
      goto LABEL_6;
    }
  }
  sub_1B6DBC3E8(*(void *)(a1 + 16) + 88 * v9, a3);
  return 0;
}

uint64_t CFX::RG::RenderGraph::RenderGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 56) = a3;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = a3;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = a2;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 152) = a3;
  sub_1B6DB9D2C(a1 + 144, 32);
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 200) = a3;
  sub_1B6DB9D2C(a1 + 192, 32);
  *(void *)(a1 + 240) = a2;
  *(void *)(a1 + 248) = a3;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = a1 + 272;
  *(unsigned char *)(a1 + 272) = 0;
  return a1;
}

void sub_1B6DB66CC(_Unwind_Exception *a1)
{
  sub_1B6DB9DD4(v5);
  sub_1B65504F0(v4);
  sub_1B65504F0(v3);
  sub_1B65504F0(v2);
  sub_1B65504F0(v1);
  _Unwind_Resume(a1);
}

void CFX::RG::RenderGraph::~RenderGraph(CFX::RG::RenderGraph *this)
{
  if (*((unsigned char *)this + 272))
  {
    uint64_t v2 = *((unsigned int *)this + 32);
    if (v2)
    {
      uint64_t v3 = (uint64_t (****)(void))*((void *)this + 17);
      uint64_t v4 = 8 * v2;
      do
      {
        sub_1B6DB0A5C(*(void *)this, *((void **)this + 1), *v3++);
        v4 -= 8;
      }
      while (v4);
    }
    uint64_t v5 = *((unsigned int *)this + 8);
    if (v5)
    {
      uint64_t v6 = (CFX::RG::Resource **)*((void *)this + 5);
      uint64_t v7 = 8 * v5;
      do
      {
        sub_1B6DB0AC4(*(void *)this, *((void **)this + 1), *v6++);
        v7 -= 8;
      }
      while (v7);
    }
    uint64_t v8 = *((unsigned int *)this + 16);
    if (v8)
    {
      unsigned int v9 = (CFX::RG::Resource **)*((void *)this + 9);
      uint64_t v10 = 8 * v8;
      do
      {
        sub_1B6DB0AC4(*(void *)this, *((void **)this + 1), *v9++);
        v10 -= 8;
      }
      while (v10);
    }
    uint64_t v11 = *((unsigned int *)this + 24);
    if (v11)
    {
      uint64_t v12 = (CFX::RG::Resource **)*((void *)this + 13);
      uint64_t v13 = 8 * v11;
      do
      {
        sub_1B6DB0AC4(*(void *)this, *((void **)this + 1), *v12++);
        v13 -= 8;
      }
      while (v13);
    }
  }
  sub_1B6DB9E7C((uint64_t)this + 240);
  sub_1B6DB9DD4((uint64_t)this + 192);
  sub_1B6DB9DD4((uint64_t)this + 144);
  sub_1B65504F0((uint64_t)this + 112);
  sub_1B65504F0((uint64_t)this + 80);
  sub_1B65504F0((uint64_t)this + 48);
  sub_1B65504F0((uint64_t)this + 16);
}

void sub_1B6DB6818(_Unwind_Exception *a1)
{
  sub_1B6DB9E7C(v1 + 240);
  sub_1B6DB9DD4(v1 + 192);
  sub_1B6DB9DD4(v1 + 144);
  sub_1B65504F0(v1 + 112);
  sub_1B65504F0(v1 + 80);
  sub_1B65504F0(v1 + 48);
  sub_1B65504F0(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraph::execute(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 256);
  if (v3)
  {
    uint64_t v6 = *(void *)(result + 264);
    uint64_t v7 = v6 + 32 * v3;
    do
    {
      uint64_t v8 = *(unsigned int *)(v6 + 16);
      if (v8)
      {
        unsigned int v9 = *(uint64_t **)(v6 + 24);
        uint64_t v10 = 8 * v8;
        do
        {
          uint64_t v11 = *v9;
          v12[0] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v11 + 24))(v11, a2, a3, v12);
          uint64_t result = sub_1B6DB81D0((uint64_t)v12);
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v6 += 32;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_1B6DB6924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CFX::RG::RenderGraph::log@<X0>(CFX::RG::RenderGraph *this@<X0>, void *a2@<X8>)
{
  sub_1B6DAEF34((uint64_t)&v68);
  unsigned int v64 = this;
  uint64_t v3 = *((unsigned int *)this + 64);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = *((void *)v64 + 33);
    uint64_t v59 = v5 + 32 * v3;
    do
    {
      sub_1B65A7F00(&v68, (uint64_t)"Stage [", 7);
      uint64_t v6 = (void *)std::ostream::operator<<();
      sub_1B65A7F00(v6, (uint64_t)"]\n", 2);
      int v60 = v4;
      uint64_t v61 = v5;
      uint64_t v7 = *(unsigned int *)(v5 + 16);
      if (v7)
      {
        uint64_t v8 = *(void **)(v5 + 24);
        unint64_t v62 = &v8[v7];
        do
        {
          uint64_t v9 = *v8;
          uint64_t v10 = sub_1B65A7F00(&v68, (uint64_t)"\t[", 2);
          size_t v11 = strlen(*(const char **)(v9 + 24));
          uint64_t v12 = sub_1B65A7F00(v10, *(void *)(v9 + 24), v11);
          uint64_t v13 = sub_1B65A7F00(v12, (uint64_t)"]", 1);
          __int16 v14 = sub_1B65A7F00(v13, (uint64_t)" : ", 3);
          unint64_t v15 = *(char *)(v9 + 344);
          unsigned int v16 = "Unknown";
          if (v15 <= 4) {
            unsigned int v16 = off_1E6146570[v15];
          }
          size_t v17 = strlen(v16);
          char v18 = sub_1B65A7F00(v14, (uint64_t)v16, v17);
          sub_1B65A7F00(v18, (uint64_t)"\n", 1);
          unsigned int v63 = v8;
          uint64_t v19 = *(unsigned int *)(v9 + 72);
          if (v19)
          {
            int v20 = *(uint64_t **)(v9 + 80);
            uint64_t v21 = 8 * v19;
            do
            {
              uint64_t v22 = *v20;
              uint64_t v23 = sub_1B65A7F00(&v68, (uint64_t)"\t\t reading \"", 12);
              size_t v24 = strlen(*(const char **)(v22 + 16));
              unsigned int v25 = sub_1B65A7F00(v23, *(void *)(v22 + 16), v24);
              sub_1B65A7F00(v25, (uint64_t)"\" <", 3);
              BOOL v26 = (void *)std::ostream::operator<<();
              sub_1B65A7F00(v26, (uint64_t)">\n", 2);
              ++v20;
              v21 -= 8;
            }
            while (v21);
          }
          uint64_t v27 = *(unsigned int *)(v9 + 168);
          if (v27)
          {
            unsigned int v28 = *(uint64_t **)(v9 + 176);
            uint64_t v29 = 8 * v27;
            do
            {
              uint64_t v30 = *v28;
              if (*(unsigned char *)(v9 + 344) == 3) {
                int v31 = sub_1B6DB01AC(*(void *)(v9 + 352), *v28);
              }
              else {
                int v31 = 0;
              }
              int v67 = v31;
              uint64_t v32 = sub_1B65A7F00(&v68, (uint64_t)"\t\t writing \"", 12);
              size_t v33 = strlen(*(const char **)(v30 + 16));
              unsigned int v34 = sub_1B65A7F00(v32, *(void *)(v30 + 16), v33);
              uint64_t v35 = sub_1B65A7F00(v34, (uint64_t)"\" ", 2);
              sub_1B6DB6F8C(&v67, __p);
              if ((v66 & 0x80u) == 0) {
                uint64_t v36 = __p;
              }
              else {
                uint64_t v36 = (void **)__p[0];
              }
              if ((v66 & 0x80u) == 0) {
                uint64_t v37 = v66;
              }
              else {
                uint64_t v37 = (uint64_t)__p[1];
              }
              uint64_t v38 = sub_1B65A7F00(v35, (uint64_t)v36, v37);
              sub_1B65A7F00(v38, (uint64_t)"<", 1);
              uint64_t v39 = (void *)std::ostream::operator<<();
              sub_1B65A7F00(v39, (uint64_t)">\n", 2);
              if ((char)v66 < 0) {
                operator delete(__p[0]);
              }
              ++v28;
              v29 -= 8;
            }
            while (v29);
          }
          if (*(_DWORD *)(CFX::RG::RenderGraph::successors(v64, (CFX::RG::Pass *)v9) + 16)) {
            sub_1B65A7F00(&v68, (uint64_t)"\t\t Successors dependencies:\n", 28);
          }
          uint64_t v40 = CFX::RG::RenderGraph::successors(v64, (CFX::RG::Pass *)v9);
          unsigned int v41 = *(_DWORD *)(v40 + 16);
          if (v41)
          {
            unsigned int v42 = *(uint64_t **)(v40 + 24);
            unint64_t v43 = &v42[3 * v41];
            do
            {
              uint64_t v44 = *v42;
              uint64_t v45 = *((char *)v42 + 8);
              uint64_t v46 = v42[2];
              unint64_t v47 = sub_1B65A7F00(&v68, (uint64_t)"\t\t\t ", 4);
              unsigned int v48 = *(const char **)(v44 + 24);
              size_t v49 = strlen(v48);
              unint64_t v50 = sub_1B65A7F00(v47, (uint64_t)v48, v49);
              unsigned int v51 = sub_1B65A7F00(v50, (uint64_t)" -> ", 4);
              unsigned int v52 = "Unknown";
              if (v45 <= 3) {
                unsigned int v52 = off_1E6146598[v45];
              }
              size_t v53 = strlen(v52);
              sub_1B65A7F00(v51, (uint64_t)v52, v53);
              if (v46)
              {
                uint64_t v54 = sub_1B65A7F00(&v68, (uint64_t)" [", 2);
                size_t v55 = strlen(*(const char **)(v46 + 16));
                unsigned int v56 = sub_1B65A7F00(v54, *(void *)(v46 + 16), v55);
                sub_1B65A7F00(v56, (uint64_t)"]", 1);
              }
              sub_1B65A7F00(&v68, (uint64_t)"\n", 1);
              v42 += 3;
            }
            while (v42 != v43);
          }
          uint64_t v8 = v63 + 1;
        }
        while (v63 + 1 != v62);
      }
      int v4 = v60 + 1;
      uint64_t v5 = v61 + 32;
    }
    while (v61 + 32 != v59);
  }
  sub_1B65A8294((uint64_t)v69, a2);
  uint64_t v68 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v69[-1] + *(void *)(v68 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v69[0] = MEMORY[0x1E4FBA470] + 16;
  if (v70 < 0) {
    operator delete((void *)v69[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1BA9B6D30](&v71);
}

void sub_1B6DB6E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a24 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a24 + *(void *)(a24 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a25 = MEMORY[0x1E4FBA470] + 16;
  if (a38 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1BA9B6D30](&a41);
  _Unwind_Resume(a1);
}

void *sub_1B6DB6F8C@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  if (*a1)
  {
    sub_1B6DAEF34((uint64_t)&v6);
    int v4 = *a1;
    if (*a1)
    {
      sub_1B65A7F00(&v6, (uint64_t)" Load", 5);
      int v4 = *a1;
    }
    if ((v4 & 2) != 0)
    {
      sub_1B65A7F00(&v6, (uint64_t)" Clear", 6);
      int v4 = *a1;
    }
    if ((v4 & 4) != 0) {
      sub_1B65A7F00(&v6, (uint64_t)" Resolve", 8);
    }
    sub_1B65A8294((uint64_t)v7, a2);
    uint64_t v6 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v7[0] = MEMORY[0x1E4FBA470] + 16;
    if (v8 < 0) {
      operator delete((void *)v7[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x1BA9B6D30](&v9);
  }
  else
  {
    return sub_1B65B8BB0(a2, "None");
  }
}

void sub_1B6DB7144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CFX::RG::RenderGraph::successors(CFX::RG::RenderGraph *this, CFX::RG::Pass *a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  unsigned int v4 = (*((_DWORD *)this + 59) - 1) & v3;
  unsigned int v5 = *(unsigned __int16 *)(*((void *)this + 28) + 2 * v4);
  if (v5 < 2) {
    return 0;
  }
  while ((v5 & 2) == 0 || v3 != *(void *)(*((void *)this + 26) + 8 * v4))
  {
    ++v4;
    BOOL v6 = v5 > 3;
    v5 >>= 1;
    if (!v6) {
      return 0;
    }
  }
  return *((void *)this + 27) + 224 * v4;
}

_DWORD *CFX::RG::RenderGraph::passesReadingResource@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = 0x800000000;
  *(void *)(a4 + 16) = a4 + 24;
  uint64_t v5 = result[32];
  if (v5)
  {
    uint64_t v7 = (uint64_t *)*((void *)result + 17);
    char v8 = &v7[v5];
    do
    {
      uint64_t v13 = *v7;
      uint64_t v9 = *(void *)(v13 + 80);
      uint64_t v10 = *(unsigned int *)(v13 + 72);
      if (v10)
      {
        uint64_t v11 = 8 * v10;
        uint64_t v12 = *(void **)(v13 + 80);
        while (*v12 != a2)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            uint64_t v12 = (void *)(v9 + 8 * v10);
            break;
          }
        }
      }
      else
      {
        uint64_t v12 = *(void **)(v13 + 80);
      }
      if (v10 != ((uint64_t)v12 - v9) >> 3) {
        uint64_t result = sub_1B64EA528((_DWORD *)a4, &v13);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

_DWORD *CFX::RG::RenderGraph::passesWritingResource@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = 0x800000000;
  *(void *)(a4 + 16) = a4 + 24;
  uint64_t v5 = result[32];
  if (v5)
  {
    uint64_t v7 = (uint64_t *)*((void *)result + 17);
    char v8 = &v7[v5];
    do
    {
      uint64_t v13 = *v7;
      uint64_t v9 = *(void *)(v13 + 176);
      uint64_t v10 = *(unsigned int *)(v13 + 168);
      if (v10)
      {
        uint64_t v11 = 8 * v10;
        uint64_t v12 = *(void **)(v13 + 176);
        while (*v12 != a2)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            uint64_t v12 = (void *)(v9 + 8 * v10);
            break;
          }
        }
      }
      else
      {
        uint64_t v12 = *(void **)(v13 + 176);
      }
      if (v10 != ((uint64_t)v12 - v9) >> 3) {
        uint64_t result = sub_1B64EA528((_DWORD *)a4, &v13);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

_DWORD *CFX::RG::RenderGraph::directSuccessorsReadingResource@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unsigned int v9 = (result[59] - 1) & v8;
  unsigned int v10 = *(unsigned __int16 *)(*((void *)result + 28) + 2 * v9);
  if ((v10 & 2) == 0) {
    goto LABEL_3;
  }
  while (v8 != *(void *)(*((void *)result + 26) + 8 * v9))
  {
    do
    {
LABEL_3:
      v10 >>= 1;
      ++v9;
    }
    while ((v10 & 2) == 0);
  }
  unsigned int v11 = v9;
  uint64_t v12 = *((void *)result + 27);
  *(void *)a5 = a4;
  *(void *)(a5 + 8) = 0x800000000;
  *(void *)(a5 + 16) = a5 + 24;
  uint64_t v13 = v12 + 224 * v11;
  uint64_t v14 = *(unsigned int *)(v13 + 16);
  if (v14)
  {
    unint64_t v15 = (void *)(*(void *)(v13 + 24) + 16);
    uint64_t v16 = 24 * v14;
    do
    {
      int v17 = *((unsigned __int8 *)v15 - 8);
      if (v17 != 3)
      {
        uint64_t v19 = *(v15 - 2);
        if (v17 == 2 && *v15 == a3) {
          uint64_t result = sub_1B6DB4424((_DWORD *)a5, &v19);
        }
      }
      v15 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

_DWORD *CFX::RG::RenderGraph::directPredecessorsWritingResource@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * a2) ^ ((0x9DDFEA08EB382D69 * a2) >> 47));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unsigned int v9 = (result[47] - 1) & v8;
  unsigned int v10 = *(unsigned __int16 *)(*((void *)result + 22) + 2 * v9);
  if ((v10 & 2) == 0) {
    goto LABEL_3;
  }
  while (v8 != *(void *)(*((void *)result + 20) + 8 * v9))
  {
    do
    {
LABEL_3:
      v10 >>= 1;
      ++v9;
    }
    while ((v10 & 2) == 0);
  }
  unsigned int v11 = v9;
  uint64_t v12 = *((void *)result + 21);
  *(void *)a5 = a4;
  *(void *)(a5 + 8) = 0x800000000;
  *(void *)(a5 + 16) = a5 + 24;
  uint64_t v13 = v12 + 224 * v11;
  uint64_t v14 = *(unsigned int *)(v13 + 16);
  if (v14)
  {
    unint64_t v15 = (void *)(*(void *)(v13 + 24) + 16);
    uint64_t v16 = 24 * v14;
    do
    {
      int v17 = *((unsigned __int8 *)v15 - 8);
      if (v17 != 3)
      {
        uint64_t v19 = *(v15 - 2);
        if (v17 == 1 && *v15 == a3) {
          uint64_t result = sub_1B6DB4424((_DWORD *)a5, &v19);
        }
      }
      v15 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

uint64_t CFX::RG::RenderGraph::predecessors(CFX::RG::RenderGraph *this, CFX::RG::Pass *a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
  unsigned int v4 = (*((_DWORD *)this + 47) - 1) & v3;
  unsigned int v5 = *(unsigned __int16 *)(*((void *)this + 22) + 2 * v4);
  if (v5 < 2) {
    return 0;
  }
  while ((v5 & 2) == 0 || v3 != *(void *)(*((void *)this + 20) + 8 * v4))
  {
    ++v4;
    BOOL v6 = v5 > 3;
    v5 >>= 1;
    if (!v6) {
      return 0;
    }
  }
  return *((void *)this + 21) + 224 * v4;
}

void CFX::RG::RenderGraph::resolveResourceDescriptors(const CFX::RG::Resource ***this, CFX::GPUResourceManager **a2)
{
  prof_beginFlame((uint64_t)"resolveResourceDescriptors", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm", 2558);
  CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(a2, this[13], &this[13][*((unsigned int *)this + 24)]);
  CFX::RG::RenderGraphContext::resolveResourcesDescriptorsIfNeeded(a2, this[9], &this[9][*((unsigned int *)this + 16)]);

  prof_endFlame();
}

void sub_1B6DB7674(_Unwind_Exception *a1)
{
}

uint64_t CFX::RG::RenderGraph::stageIndexForPass(CFX::RG::RenderGraph *this, const CFX::RG::Pass *a2)
{
  uint64_t v2 = *((unsigned int *)this + 64);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = *((void *)this + 33);
  uint64_t v6 = v5 + 32 * v2;
  while (1)
  {
    uint64_t v7 = *(void *)(v5 + 24);
    uint64_t v8 = *(unsigned int *)(v5 + 16);
    if (v8)
    {
      uint64_t v9 = 8 * v8;
      unsigned int v10 = *(const CFX::RG::Pass ***)(v5 + 24);
      while (*v10 != a2)
      {
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          unsigned int v10 = (const CFX::RG::Pass **)(v7 + 8 * v8);
          break;
        }
      }
    }
    else
    {
      unsigned int v10 = *(const CFX::RG::Pass ***)(v5 + 24);
    }
    if (v8 != ((uint64_t)v10 - v7) >> 3) {
      return result;
    }
    uint64_t result = (result + 1);
    v5 += 32;
    if (v5 == v6) {
      return 0xFFFFFFFFLL;
    }
  }
}

void sub_1B6DB7700()
{
}

uint64_t sub_1B6DB7718(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    sub_1B65F64D0(v2, *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 28) + 15);
    free(*(void **)(a1 + 8));
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1B6DB776C(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    unsigned int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*(unsigned __int8 *)(v40 + 344) < *(unsigned __int8 *)(*v10 + 344))
                {
                  *unsigned int v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                uint64_t result = (uint64_t)sub_1B6DB7EA4(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = (uint64_t)sub_1B6DB8138(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                unsigned int v42 = v10 + 1;
                unint64_t v43 = v10 + 2;
                uint64_t v44 = v10 + 3;
                uint64_t result = (uint64_t)sub_1B6DB8138(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = v10[3];
                if (*(unsigned __int8 *)(v45 + 344) < *(unsigned __int8 *)(v46 + 344))
                {
                  *uint64_t v44 = v45;
                  *(a2 - 1) = v46;
                  uint64_t v47 = *v44;
                  uint64_t v48 = *v43;
                  unsigned int v49 = *(unsigned __int8 *)(*v44 + 344);
                  if (v49 < *(unsigned __int8 *)(*v43 + 344))
                  {
                    *unint64_t v43 = v47;
                    *uint64_t v44 = v48;
                    uint64_t v50 = *v42;
                    if (v49 < *(unsigned __int8 *)(*v42 + 344))
                    {
                      v10[1] = v47;
                      void v10[2] = v50;
                      uint64_t v51 = *v10;
                      if (v49 < *(unsigned __int8 *)(*v10 + 344))
                      {
                        *unsigned int v10 = v47;
                        v10[1] = v51;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v52 = v10 + 1;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 0;
                unsigned int v56 = v10;
                do
                {
                  uint64_t v58 = *v56;
                  uint64_t v57 = v56[1];
                  unsigned int v56 = v52;
                  unsigned int v59 = *(unsigned __int8 *)(v57 + 344);
                  if (v59 < *(unsigned __int8 *)(v58 + 344))
                  {
                    uint64_t v60 = v55;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v60 + 8) = v58;
                      if (!v60) {
                        break;
                      }
                      uint64_t v58 = *(uint64_t *)((char *)v10 + v60 - 8);
                      v60 -= 8;
                      if (v59 >= *(unsigned __int8 *)(v58 + 344))
                      {
                        uint64_t v61 = (uint64_t *)((char *)v10 + v60 + 8);
                        goto LABEL_85;
                      }
                    }
                    uint64_t v61 = v10;
LABEL_85:
                    *uint64_t v61 = v57;
                  }
                  unsigned int v52 = v56 + 1;
                  v55 += 8;
                }
                while (v56 + 1 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                uint64_t v92 = *v9;
                uint64_t v91 = v9[1];
                uint64_t v9 = v52;
                unsigned int v93 = *(unsigned __int8 *)(v91 + 344);
                if (v93 < *(unsigned __int8 *)(v92 + 344))
                {
                  do
                  {
                    *unsigned int v52 = v92;
                    uint64_t v92 = *(v52 - 2);
                    --v52;
                  }
                  while (v93 < *(unsigned __int8 *)(v92 + 344));
                  *unsigned int v52 = v91;
                }
                unsigned int v52 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  unsigned __int8 v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < (uint64_t)v12)
                  {
                    uint64_t result = *(unsigned __int8 *)(v67 + 344);
                    if (result < *(unsigned __int8 *)(v66[1] + 344))
                    {
                      uint64_t v67 = v66[1];
                      ++v66;
                      uint64_t v65 = 2 * v64 + 2;
                    }
                  }
                  uint64_t v68 = &v10[v64];
                  uint64_t v69 = *v68;
                  unsigned int v70 = *(unsigned __int8 *)(*v68 + 344);
                  if (*(unsigned __int8 *)(v67 + 344) >= v70)
                  {
                    do
                    {
                      uint64_t v71 = v66;
                      *uint64_t v68 = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t result = (2 * v65) | 1;
                      unsigned __int8 v66 = &v10[result];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < (uint64_t)v12
                        && *(unsigned __int8 *)(v67 + 344) < *(unsigned __int8 *)(v66[1] + 344))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t result = v72;
                      }
                      uint64_t v68 = v71;
                      uint64_t v65 = result;
                    }
                    while (*(unsigned __int8 *)(v67 + 344) >= v70);
                    uint64_t *v71 = v69;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              uint64_t v73 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v74 = 0;
                uint64_t v75 = *v10;
                uint64_t v76 = v10;
                do
                {
                  int v77 = &v76[v74];
                  uint64_t v80 = v77[1];
                  size_t v78 = v77 + 1;
                  uint64_t v79 = v80;
                  uint64_t v81 = (2 * v74) | 1;
                  uint64_t v82 = 2 * v74 + 2;
                  if (v82 < v73)
                  {
                    uint64_t result = *(unsigned __int8 *)(v79 + 344);
                    if (result < *(unsigned __int8 *)(v78[1] + 344))
                    {
                      uint64_t v79 = v78[1];
                      ++v78;
                      uint64_t v81 = v82;
                    }
                  }
                  *uint64_t v76 = v79;
                  uint64_t v76 = v78;
                  uint64_t v74 = v81;
                }
                while (v81 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                if (v78 == --a2)
                {
                  *size_t v78 = v75;
                }
                else
                {
                  *size_t v78 = *a2;
                  *a2 = v75;
                  uint64_t v83 = (char *)v78 - (char *)v10 + 8;
                  if (v83 >= 9)
                  {
                    unint64_t v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
                    uint64_t v85 = &v10[v84];
                    uint64_t v86 = *v85;
                    uint64_t v87 = *v78;
                    unsigned int v88 = *(unsigned __int8 *)(*v78 + 344);
                    if (*(unsigned __int8 *)(*v85 + 344) < v88)
                    {
                      do
                      {
                        uint64_t v89 = v85;
                        *size_t v78 = v86;
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                        uint64_t v85 = &v10[v84];
                        uint64_t v86 = *v85;
                        size_t v78 = v89;
                      }
                      while (*(unsigned __int8 *)(*v85 + 344) < v88);
                      *uint64_t v89 = v87;
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1B6DB7EA4(v9, &v9[v12 >> 1], a2 - 1);
            sub_1B6DB7EA4(v9 + 1, v14 - 1, a2 - 2);
            sub_1B6DB7EA4(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = (uint64_t)sub_1B6DB7EA4(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *v14;
            uint64_t *v14 = v15;
          }
          else
          {
            uint64_t result = (uint64_t)sub_1B6DB7EA4(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(unsigned __int8 *)(v16 + 344);
          if (*(unsigned __int8 *)(*(v9 - 1) + 344) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(unsigned __int8 *)(*(a2 - 1) + 344))
          {
            uint64_t v32 = v9 + 1;
            do
            {
              unsigned int v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= *(unsigned __int8 *)(*v10 + 344));
          }
          else
          {
            unsigned int v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *(unsigned __int8 *)(v31 + 344));
          }
          size_t v33 = a2;
          if (v10 < a2)
          {
            size_t v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *(unsigned __int8 *)(v34 + 344));
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              *unsigned int v10 = v36;
              *size_t v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *(unsigned __int8 *)(v37 + 344));
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *(unsigned __int8 *)(v38 + 344));
            }
            while (v10 < v33);
          }
          uint64_t v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v39;
          }
          a4 = 0;
          *uint64_t v39 = v16;
        }
        unsigned int v17 = *(unsigned __int8 *)(v16 + 344);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(unsigned __int8 *)(v19 + 344) < v17);
        int v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(unsigned __int8 *)(v23 + 344) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(unsigned __int8 *)(v22 + 344) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          unsigned int v25 = &v9[v18];
          BOOL v26 = v21;
          do
          {
            *unsigned int v25 = v24;
            *BOOL v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              uint64_t v19 = v27;
            }
            while (*(unsigned __int8 *)(v27 + 344) < v17);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (*(unsigned __int8 *)(v28 + 344) >= v17);
          }
          while (v25 < v26);
          uint64_t v29 = v25 - 1;
        }
        if (v29 != v9) {
          *uint64_t v9 = *v29;
        }
        *uint64_t v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = sub_1B6DB776C(v9, v29, a3, a4 & 1);
        a4 = 0;
        unsigned int v10 = v29 + 1;
      }
      BOOL v30 = sub_1B6DB7F2C(v9, v29);
      unsigned int v10 = v29 + 1;
      uint64_t result = sub_1B6DB7F2C(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1B6DB7EA4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unsigned int v5 = *(unsigned __int8 *)(*a2 + 344);
  unsigned int v6 = *(unsigned __int8 *)(*result + 344);
  uint64_t v7 = *a3;
  unsigned int v8 = *(unsigned __int8 *)(*a3 + 344);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(unsigned __int8 *)(*a2 + 344) < *(unsigned __int8 *)(*result + 344))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*(unsigned __int8 *)(*a3 + 344) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1B6DB7F2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(unsigned __int8 *)(v6 + 344) < *(unsigned __int8 *)(*a1 + 344))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1B6DB7EA4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1B6DB8138(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      int v20 = a1 + 3;
      sub_1B6DB8138(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(unsigned __int8 *)(v21 + 344) < *(unsigned __int8 *)(v22 + 344))
      {
        *int v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unsigned int v25 = *(unsigned __int8 *)(*v20 + 344);
        if (v25 < *(unsigned __int8 *)(*v19 + 344))
        {
          *uint64_t v19 = v23;
          *int v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(unsigned __int8 *)(*v18 + 344))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(unsigned __int8 *)(*a1 + 344))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1B6DB7EA4(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(unsigned __int8 *)(*v9 + 344);
    if (v14 < *(unsigned __int8 *)(*v8 + 344))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(unsigned __int8 *)(v13 + 344))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unsigned int v17 = a1;
LABEL_13:
      *unsigned int v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1B6DB8138(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1B6DB7EA4(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(unsigned __int8 *)(*a4 + 344) < *(unsigned __int8 *)(*a3 + 344))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(unsigned __int8 *)(*a3 + 344) < *(unsigned __int8 *)(*a2 + 344))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(unsigned __int8 *)(*a2 + 344) < *(unsigned __int8 *)(*a1 + 344))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1B6DB81D0(uint64_t a1)
{
  switch(*(unsigned char *)a1)
  {
    case 1:

      goto LABEL_3;
    case 2:
    case 4:
      goto LABEL_4;
    case 3:
LABEL_3:

LABEL_4:
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t sub_1B6DB824C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 44);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      unsigned int v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 24);
          *(void *)(*(void *)(a1 + 16) + 8 * v15) = *(void *)(*(void *)(a1 + 16) + 8 * v21);
          uint64_t v27 = v26 + 12 * v15;
          uint64_t v28 = (uint64_t *)(v26 + 12 * v21);
          uint64_t v29 = *v28;
          *(_DWORD *)(v27 + 8) = *((_DWORD *)v28 + 2);
          *(void *)uint64_t v27 = v29;
          uint64_t v8 = *(void *)(a1 + 32);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      uint64_t v33 = *(void *)(a1 + 24) + 12 * v21;
      uint64_t v34 = *a3;
      *(_DWORD *)(v33 + 8) = *((_DWORD *)a3 + 2);
      *(void *)uint64_t v33 = v34;
      *(void *)(*(void *)(a1 + 16) + 8 * v21) = a2;
      uint64_t v35 = *(void *)(a1 + 32);
      *(_WORD *)(v35 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v35 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 40);
      return result;
    }
LABEL_33:
    sub_1B6DB84AC(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 16) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  uint64_t v31 = *(void *)(a1 + 24) + 12 * v10;
  uint64_t v32 = *a3;
  *(_DWORD *)(v31 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v31 = v32;
  return result;
}

uint64_t *sub_1B6DB84AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(_WORD **)(a1 + 24);
  uint64_t v4 = *(__int16 **)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 44);
  sub_1B6DB8578(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10) {
        sub_1B6DB824C(a1, *v8, v7);
      }
      ++v8;
      v7 += 6;
      --v6;
    }
    while (v6);
  }
  unsigned int v12 = v3;
  uint64_t result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    sub_1B63C89D4(result, &v12);
    uint64_t result = *(uint64_t **)(a1 + 8);
    unsigned int v12 = (__int16 *)v2;
    if (result)
    {
      sub_1B63C89D4(result, &v12);
      uint64_t result = *(uint64_t **)(a1 + 8);
      unsigned int v12 = v4;
      if (result) {
        return sub_1B63C89D4(result, &v12);
      }
    }
  }
  return result;
}

void sub_1B6DB8578(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  *(void *)(a1 + 32) = sub_1B63C8330((void *)a1, 2 * (a2 + 15), 4u);
  *(void *)(a1 + 16) = sub_1B63C8330((void *)a1, 8 * v3, 8u);
  *(void *)(a1 + 24) = sub_1B63C8330((void *)a1, 12 * v3, 4u);
  memset(*(void **)(a1 + 16), 255, 8 * v3);
  int v5 = *(void **)(a1 + 32);

  bzero(v5, v4);
}

void sub_1B6DB8620(void *a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = (unsigned int *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 16);
  uint64_t v66 = v4;
  uint64_t v67 = 0x1000000000;
  uint64_t v68 = &v69;
  uint64_t v62 = v4;
  uint64_t v63 = 0x1000000000;
  int64_t v64 = &v65;
  unsigned int v5 = *v3;
  if (*v3)
  {
    unsigned int v6 = 0;
    int v7 = -1;
    do
    {
      sub_1B64EA528(&v66, (void *)(*((void *)v3 + 1) + 8 * (v5 + v7)));
      ++v6;
      unsigned int v3 = (unsigned int *)a1[1];
      unsigned int v5 = *v3;
      --v7;
    }
    while (v6 < *v3);
    uint64_t v2 = *a1;
    uint64_t v4 = *(void *)(*a1 + 16);
    unsigned int v8 = v67;
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v59 = 0x1000000000;
  uint64_t v60 = &v61;
  uint64_t v55 = *(void *)(v2 + 16);
  uint64_t v56 = 0;
  uint64_t v57 = &v58;
  uint64_t v58 = v4;
  uint64_t v44 = *MEMORY[0x1E4FBA418];
  unsigned int v9 = *(void **)(MEMORY[0x1E4FBA418] + 24);
  while (1)
  {
    LODWORD(v63) = 0;
    if (!v8) {
      break;
    }
    unsigned int v10 = v8;
    do
    {
      uint64_t v47 = 0;
      uint64_t v47 = v68[v10 - 1];
      LODWORD(v67) = v10 - 1;
      (**(void (***)(uint64_t *__return_ptr))v47)(&v49);
      if (v49)
      {
        BOOL v11 = v50[0];
        while (1)
        {
          unsigned int v12 = (unint64_t *)v57;
          if (v56)
          {
            int v13 = (unsigned __int16)*v11;
            int v14 = HIWORD(*v11);
            uint64_t v15 = 8 * v56;
            unsigned int v12 = (unint64_t *)v57;
            while (1)
            {
              unint64_t v16 = *v12;
              if (v13 == 6893 || (unsigned __int16)*v12 == v13)
              {
                BOOL v18 = WORD1(v16) == v14 || v14 == 6893;
                unint64_t v19 = HIDWORD(v16);
                if (v18 && v19 == v11[1]) {
                  break;
                }
              }
              ++v12;
              v15 -= 8;
              if (!v15) {
                goto LABEL_34;
              }
            }
          }
          if (&v57[v56] == (uint64_t *)v12) {
            break;
          }
          v11 += 2;
          if (v11 == (_DWORD *)((char *)v50[0] + 8 * v49)) {
            goto LABEL_29;
          }
        }
LABEL_34:
        sub_1B64EA528(&v62, &v47);
      }
      else
      {
LABEL_29:
        (*(void (**)(void **__return_ptr))(*(void *)v47 + 8))(__p);
        if (LODWORD(__p[0]))
        {
          uint64_t v21 = (uint64_t *)__p[1];
          uint64_t v22 = 8 * LODWORD(__p[0]);
          do
          {
            uint64_t v54 = *v21;
            sub_1B6DB8CC0(&v55, &v54);
            LOWORD(v53) = v54;
            WORD1(v53) = 9273;
            HIDWORD(v53) = HIDWORD(v54);
            sub_1B6DB8CC0(&v55, &v53);
            LODWORD(v53) = 607724601;
            HIDWORD(v53) = HIDWORD(v54);
            sub_1B6DB8CC0(&v55, &v53);
            ++v21;
            v22 -= 8;
          }
          while (v22);
        }
        sub_1B64EA528(&v58, &v47);
        if (HIDWORD(__p[0])) {
          free(__p[1]);
        }
      }
      if (HIDWORD(v49)) {
        free(v50[0]);
      }
      unsigned int v10 = v67;
    }
    while (v67);
    int v23 = v63;
    if (v8 == v63) {
      break;
    }
    if (v63)
    {
      unsigned int v24 = 0;
      int v25 = -1;
      do
      {
        sub_1B64EA528(&v66, &v64[v23 + v25]);
        ++v24;
        int v23 = v63;
        --v25;
      }
      while (v24 < v63);
    }
    unsigned int v8 = v67;
    if (!v67)
    {
      uint64_t v26 = (_DWORD *)a1[1];
      *uint64_t v26 = 0;
      if (v59)
      {
        uint64_t v27 = v60;
        uint64_t v28 = 8 * v59;
        do
        {
          sub_1B63D4868((uint64_t)v26, v27++);
          v28 -= 8;
        }
        while (v28);
      }
      return;
    }
  }
  if (*(void *)a1[2])
  {
    sub_1B6DAEF34((uint64_t)&v49);
    unint64_t v43 = v9;
    sub_1B65A7F00(&v49, (uint64_t)"Unable to resolve graph subgraph:\n", 34);
    if (v63)
    {
      uint64_t v29 = v64;
      BOOL v30 = &v64[v63];
      do
      {
        uint64_t v31 = *v29;
        uint64_t v32 = sub_1B65A7F00(&v49, (uint64_t)"Can't resolve requirements for subgraph: ", 41);
        size_t v33 = strlen(*(const char **)(v31 + 16));
        uint64_t v34 = sub_1B65A7F00(v32, *(void *)(v31 + 16), v33);
        sub_1B65A7F00(v34, (uint64_t)"\n", 1);
        (**(void (***)(uint64_t *__return_ptr, uint64_t, void))v31)(&v47, v31, *a1);
        if (v47)
        {
          uint64_t v35 = (uint64_t *)v48;
          uint64_t v36 = 8 * v47;
          do
          {
            uint64_t v54 = *v35;
            uint64_t v37 = sub_1B65A7F00(&v49, (uint64_t)"\t", 1);
            CFX::RG::ResourceIdentifier::pathName((CFX::RG::ResourceIdentifier *)&v54, __p);
            if (v46 >= 0) {
              uint64_t v38 = __p;
            }
            else {
              uint64_t v38 = (void **)__p[0];
            }
            if (v46 >= 0) {
              uint64_t v39 = HIBYTE(v46);
            }
            else {
              uint64_t v39 = (uint64_t)__p[1];
            }
            uint64_t v40 = sub_1B65A7F00(v37, (uint64_t)v38, v39);
            sub_1B65A7F00(v40, (uint64_t)"\n", 1);
            if (SHIBYTE(v46) < 0) {
              operator delete(__p[0]);
            }
            ++v35;
            v36 -= 8;
          }
          while (v36);
        }
        if (HIDWORD(v47)) {
          free(v48);
        }
        ++v29;
      }
      while (v29 != v30);
    }
    sub_1B65A8294((uint64_t)v50, __p);
    uint64_t v41 = *(void *)a1[2];
    if (*(char *)(v41 + 23) < 0) {
      operator delete(*(void **)v41);
    }
    long long v42 = *(_OWORD *)__p;
    *(void *)(v41 + 16) = v46;
    *(_OWORD *)uint64_t v41 = v42;
    uint64_t v49 = v44;
    *(void **)((char *)&v50[-1] + *(void *)(v44 - 24)) = v43;
    v50[0] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v51 < 0) {
      operator delete(v50[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1BA9B6D30](&v52);
  }
  *(unsigned char *)a1[3] = 0;
}

void sub_1B6DB8C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, void *a16, int a17, __int16 a18, char a19, char a20,int a21,int a22,void *a23,char a24,int a25,void *a26)
{
}

_DWORD *sub_1B6DB8CC0(_DWORD *result, void *a2)
{
  uint64_t v2 = *((void *)result + 2);
  uint64_t v3 = result[2];
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    unsigned int v5 = (void *)*((void *)result + 2);
    while (*v5 != *a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        unsigned int v5 = (void *)(v2 + 8 * v3);
        break;
      }
    }
  }
  else
  {
    unsigned int v5 = (void *)*((void *)result + 2);
  }
  if (v3 == ((uint64_t)v5 - v2) >> 3) {
    return sub_1B6DB8D14(result, a2);
  }
  return result;
}

_DWORD *sub_1B6DB8D14(_DWORD *result, void *a2)
{
  uint64_t v3 = result;
  unsigned int v4 = result[2];
  unsigned int v5 = result[3];
  unsigned int v6 = (const void *)*((void *)result + 2);
  if (v4 + 1 > v5)
  {
    unsigned int v7 = ((double)(v5 + 1) * 1.5);
    Aligned = CStackAllocatorAllocateAligned(*(uint64_t **)result, 8 * v7, 8, 2);
    uint64_t result = memcpy(Aligned, v6, 8 * v3[2]);
    *((void *)v3 + 2) = Aligned;
    v3[3] = v7;
    unsigned int v6 = Aligned;
    unsigned int v4 = v3[2];
  }
  *((void *)v6 + v4) = *a2;
  ++v3[2];
  return result;
}

void sub_1B6DB8DBC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  unsigned int v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(void *)(a1 + 16) = v5;
  unsigned int v6 = malloc_type_malloc((8 * v3) & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v6, 255, (8 * v3) & 0xFFFFFFF8);
  *(void *)a1 = v6;
  unsigned int v7 = malloc_type_malloc(80 * v3, 0xD5346062uLL);
  memset(v7, 255, 80 * v3);
  *(void *)(a1 + 8) = v7;
  memset(*(void **)a1, 255, 8 * v3);
  unsigned int v8 = *(void **)(a1 + 16);

  bzero(v8, v4);
}

void sub_1B6DB8EA0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  unsigned int v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(void *)(a1 + 16) = v5;
  unsigned int v6 = malloc_type_malloc((8 * v3) & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v6, 255, (8 * v3) & 0xFFFFFFF8);
  *(void *)a1 = v6;
  unsigned int v7 = malloc_type_malloc(160 * v3, 0xD5346062uLL);
  memset(v7, 255, 160 * v3);
  *(void *)(a1 + 8) = v7;
  memset(*(void **)a1, 255, 8 * v3);
  unsigned int v8 = *(void **)(a1 + 16);

  bzero(v8, v4);
}

void sub_1B6DB8F84(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  unsigned int v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(void *)(a1 + 16) = v5;
  unsigned int v6 = malloc_type_malloc((8 * v3) & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v6, 255, (8 * v3) & 0xFFFFFFF8);
  *(void *)a1 = v6;
  unsigned int v7 = malloc_type_malloc(16 * v3, 0xD5346062uLL);
  memset(v7, 255, 16 * v3);
  *(void *)(a1 + 8) = v7;
  memset(*(void **)a1, 255, 8 * v3);
  unsigned int v8 = *(void **)(a1 + 16);

  bzero(v8, v4);
}

uint64_t sub_1B6DB9064(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2) {
    free(v2);
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

unsigned int *sub_1B6DB90A4(unsigned int *a1)
{
  if (a1[1])
  {
    unint64_t v2 = *a1;
    if (v2)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 8;
      do
      {
        unsigned int v5 = *(std::__shared_weak_count **)(*((void *)a1 + 1) + v4);
        if (v5)
        {
          sub_1B65F52C0(v5);
          unint64_t v2 = *a1;
        }
        ++v3;
        v4 += 16;
      }
      while (v3 < v2);
    }
    free(*((void **)a1 + 1));
  }
  return a1;
}

uint64_t sub_1B6DB9114(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    sub_1B6DB9168(v2, *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 28) + 15);
    free(*(void **)(a1 + 8));
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

void sub_1B6DB9168(uint64_t a1, __int16 *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = a3;
    unsigned int v5 = (void **)(a1 + 8);
    do
    {
      __int16 v6 = *a2++;
      if (v6)
      {
        if (*((_DWORD *)v5 - 1)) {
          free(*v5);
        }
      }
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

void sub_1B6DB91C4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B63F72E4(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    unsigned int v7 = v3;
    unsigned int v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10) {
        sub_1B6DAC0C0(a1, *v8, v7);
      }
      ++v8;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

void sub_1B6DB9274(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DB92AC(uint64_t a1)
{
}

void sub_1B6DB92B8(unsigned int *a1, int a2, int a3)
{
  uint64_t v4 = (unsigned int *)*((void *)a1 + 1);
  int v5 = a1 + 4;
  double v6 = 1.5;
  if (a3) {
    double v6 = 1.0;
  }
  unsigned int v7 = (v6 * (double)(a1[1] + a2));
  unsigned int v8 = (char *)malloc_type_malloc(16 * v7, 0xD5346062uLL);
  memset(v8, 255, 16 * v7);
  if (*a1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *((void *)a1 + 1) + v9;
      *(_OWORD *)&v8[v9] = *(_OWORD *)v11;
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      if (v4 != v5)
      {
        unsigned int v12 = *(std::__shared_weak_count **)(*((void *)a1 + 1) + v9 + 8);
        if (v12) {
          sub_1B65F52C0(v12);
        }
      }
      ++v10;
      v9 += 16;
    }
    while (v10 < *a1);
  }
  *((void *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v5)
  {
    free(v4);
  }
}

uint64_t sub_1B6DB93D0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 16);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      int v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 8 * v15) = *(void *)(*(void *)a1 + 8 * v21);
          uint64_t v27 = (_OWORD *)(v26 + 80 * v15);
          uint64_t v28 = (_OWORD *)(v26 + 80 * v21);
          long long v29 = v28[1];
          long long v30 = v28[2];
          long long v31 = v28[4];
          v27[3] = v28[3];
          v27[4] = v31;
          v27[1] = v29;
          v27[2] = v30;
          *uint64_t v27 = *v28;
          uint64_t v8 = *(void *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      uint64_t v37 = (_OWORD *)(*(void *)(a1 + 8) + 80 * v21);
      *uint64_t v37 = *a3;
      long long v38 = a3[1];
      long long v39 = a3[2];
      long long v40 = a3[4];
      v37[3] = a3[3];
      v37[4] = v40;
      v37[1] = v38;
      v37[2] = v39;
      *(void *)(*(void *)a1 + 8 * v21) = a2;
      uint64_t v41 = *(void *)(a1 + 16);
      *(_WORD *)(v41 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v41 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B6DB9648(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  size_t v33 = (_OWORD *)(*(void *)(a1 + 8) + 80 * v10);
  *size_t v33 = *a3;
  long long v34 = a3[1];
  long long v35 = a3[2];
  long long v36 = a3[4];
  v33[3] = a3[3];
  v33[4] = v36;
  v33[1] = v34;
  v33[2] = v35;
  return result;
}

void sub_1B6DB9648(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B6DB8DBC(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10) {
        sub_1B6DB93D0(a1, *v8, v7);
      }
      ++v8;
      v7 += 80;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

uint64_t sub_1B6DB96F4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 16);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      int v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 8 * v15) = *(void *)(*(void *)a1 + 8 * v21);
          uint64_t v27 = (_OWORD *)(v26 + 160 * v15);
          uint64_t v28 = (_OWORD *)(v26 + 160 * v21);
          long long v29 = v28[5];
          long long v31 = v28[2];
          long long v30 = v28[3];
          v27[4] = v28[4];
          v27[5] = v29;
          v27[2] = v31;
          v27[3] = v30;
          long long v32 = v28[6];
          long long v33 = v28[7];
          long long v34 = v28[9];
          v27[8] = v28[8];
          v27[9] = v34;
          v27[6] = v32;
          v27[7] = v33;
          long long v35 = v28[1];
          *uint64_t v27 = *v28;
          v27[1] = v35;
          uint64_t v8 = *(void *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      uint64_t v45 = (_OWORD *)(*(void *)(a1 + 8) + 160 * v21);
      long long v46 = a3[1];
      *uint64_t v45 = *a3;
      v45[1] = v46;
      long long v47 = a3[2];
      long long v48 = a3[3];
      long long v49 = a3[5];
      v45[4] = a3[4];
      v45[5] = v49;
      v45[2] = v47;
      v45[3] = v48;
      long long v50 = a3[6];
      long long v51 = a3[7];
      long long v52 = a3[9];
      v45[8] = a3[8];
      v45[9] = v52;
      v45[6] = v50;
      v45[7] = v51;
      *(void *)(*(void *)a1 + 8 * v21) = a2;
      uint64_t v53 = *(void *)(a1 + 16);
      *(_WORD *)(v53 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v53 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B6DB999C(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  uint64_t v37 = (_OWORD *)(*(void *)(a1 + 8) + 160 * v10);
  long long v38 = a3[1];
  *uint64_t v37 = *a3;
  v37[1] = v38;
  long long v39 = a3[2];
  long long v40 = a3[3];
  long long v41 = a3[5];
  v37[4] = a3[4];
  v37[5] = v41;
  v37[2] = v39;
  v37[3] = v40;
  long long v42 = a3[6];
  long long v43 = a3[7];
  long long v44 = a3[9];
  v37[8] = a3[8];
  v37[9] = v44;
  v37[6] = v42;
  v37[7] = v43;
  return result;
}

void sub_1B6DB999C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B6DB8EA0(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10) {
        sub_1B6DB96F4(a1, *v8, v7);
      }
      ++v8;
      v7 += 160;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

void sub_1B6DB9A48(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B6DB8F84(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10)
      {
        sub_1B6DAD428(a1, *v8, v7);
        if (*((_DWORD *)v7 + 1)) {
          free(v7[1]);
        }
      }
      ++v8;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

uint64_t sub_1B6DB9B04(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20))
  {
    if (*(void *)(a1 + 24) != a1 + 32)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      uint64_t v2 = *(void **)(a1 + 8);
      if (v2) {
        sub_1B63C89D4(v2, &v4);
      }
    }
  }
  return a1;
}

void *sub_1B6DB9B5C(void *a1)
{
  if (a1[3])
  {
    uint64_t v6 = a1[3];
    uint64_t v2 = (void *)a1[1];
    if (v2) {
      sub_1B63C89D4(v2, &v6);
    }
  }
  unint64_t v3 = (void *)a1[1];
  uint64_t v6 = a1[2];
  if (v3)
  {
    sub_1B63C89D4(v3, &v6);
    uint64_t v4 = (void *)a1[1];
    uint64_t v6 = a1[4];
    if (v4) {
      sub_1B63C89D4(v4, &v6);
    }
  }
  return a1;
}

void sub_1B6DB9BD0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  *(void *)(a1 + 32) = sub_1B63C8330((void *)a1, 2 * (a2 + 15), 4u);
  *(void *)(a1 + 16) = sub_1B63C8330((void *)a1, 8 * v3, 8u);
  *(void *)(a1 + 24) = sub_1B63C8330((void *)a1, 24 * v3, 8u);
  memset(*(void **)(a1 + 16), 255, 8 * v3);
  int v5 = *(void **)(a1 + 32);

  bzero(v5, v4);
}

uint64_t *sub_1B6DB9C78(uint64_t a1, int a2, int a3)
{
  size_t v4 = *(const void **)(a1 + 24);
  double v5 = 1.5;
  if (a3) {
    double v5 = 1.0;
  }
  uint64_t v6 = (const void *)(a1 + 32);
  unsigned int v7 = (v5 * (double)(*(_DWORD *)(a1 + 20) + a2));
  uint64_t v8 = (void *)sub_1B63C8330((void *)a1, 24 * v7, 8u);
  uint64_t result = (uint64_t *)memcpy(v8, v4, 24 * *(unsigned int *)(a1 + 16));
  *(void *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 20) = v7;
  if (v4 != v6)
  {
    __int16 v10 = v4;
    uint64_t result = *(uint64_t **)(a1 + 8);
    if (result) {
      return sub_1B63C89D4(result, &v10);
    }
  }
  return result;
}

void sub_1B6DB9D2C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  *(void *)(a1 + 32) = sub_1B63C8330((void *)a1, 2 * (a2 + 15), 4u);
  *(void *)(a1 + 16) = sub_1B63C8330((void *)a1, 8 * v3, 8u);
  *(void *)(a1 + 24) = sub_1B63C8330((void *)a1, 224 * v3, 8u);
  memset(*(void **)(a1 + 16), 255, 8 * v3);
  double v5 = *(void **)(a1 + 32);

  bzero(v5, v4);
}

uint64_t sub_1B6DB9DD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 44);
    uint64_t v4 = (v3 + 15);
    if (v3 != -15)
    {
      double v5 = *(__int16 **)(a1 + 32);
      do
      {
        __int16 v6 = *v5++;
        if (v6) {
          uint64_t v2 = sub_1B6DB9B04(v2);
        }
        v2 += 224;
        --v4;
      }
      while (v4);
      uint64_t v2 = *(void *)(a1 + 24);
    }
    uint64_t v11 = v2;
    unsigned int v7 = *(void **)(a1 + 8);
    if (v7) {
      sub_1B63C89D4(v7, &v11);
    }
  }
  uint64_t v8 = *(void **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_1B63C89D4(v8, &v11);
    unsigned int v9 = *(void **)(a1 + 8);
    uint64_t v11 = *(void *)(a1 + 32);
    if (v9) {
      sub_1B63C89D4(v9, &v11);
    }
  }
  return a1;
}

uint64_t sub_1B6DB9E7C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20))
  {
    if (*(_DWORD *)(a1 + 16))
    {
      uint64_t v2 = 0;
      unint64_t v3 = 0;
      do
      {
        sub_1B65504F0(*(void *)(a1 + 24) + v2);
        ++v3;
        v2 += 32;
      }
      while (v3 < *(unsigned int *)(a1 + 16));
    }
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v4) {
      sub_1B63C89D4(v4, &v6);
    }
  }
  return a1;
}

uint64_t sub_1B6DB9F00(uint64_t a1, void *a2)
{
  if (a2 != (void *)a1)
  {
    if (*(_DWORD *)(a1 + 20))
    {
      if (*(_DWORD *)(a1 + 16))
      {
        uint64_t v4 = 0;
        unint64_t v5 = 0;
        do
        {
          sub_1B65504F0(*(void *)(a1 + 24) + v4);
          ++v5;
          v4 += 32;
        }
        while (v5 < *(unsigned int *)(a1 + 16));
      }
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v6 = *(void **)(a1 + 8);
      if (v6) {
        sub_1B63C89D4(v6, &v13);
      }
      *(void *)(a1 + 24) = a1 + 32;
    }
    uint64_t v7 = a2[2];
    *(void *)(a1 + 16) = v7;
    uint64_t v8 = (void *)a2[3];
    if (v8 == a2 + 4)
    {
      if (v7)
      {
        unint64_t v9 = 0;
        uint64_t v10 = a1 + 32;
        do
        {
          *(_OWORD *)uint64_t v10 = *(_OWORD *)v8;
          uint64_t v11 = v10 + 32;
          *(void *)(v10 + 16) = 0;
          *(void *)(v10 + 24) = v10 + 32;
          sub_1B6DBA100(v10, v8);
          ++v9;
          v8 += 4;
          uint64_t v10 = v11;
        }
        while (v9 < *(unsigned int *)(a1 + 16));
      }
    }
    else
    {
      *(void *)(a1 + 24) = v8;
    }
    a2[2] = 0;
    a2[3] = a2 + 4;
  }
  return a1;
}

uint64_t *sub_1B6DBA004(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = a1 + 32;
  double v6 = 1.5;
  if (a3) {
    double v6 = 1.0;
  }
  unsigned int v7 = (v6 * (double)(*(_DWORD *)(a1 + 20) + a2));
  uint64_t result = (uint64_t *)sub_1B63C8330((void *)a1, 32 * v7, 8u);
  unint64_t v9 = result;
  if (*(_DWORD *)(a1 + 16))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      unsigned int v12 = &v9[v10];
      uint64_t v13 = (void *)(*(void *)(a1 + 24) + v10 * 8);
      *(_OWORD *)unsigned int v12 = *(_OWORD *)v13;
      v12[2] = 0;
      v12[3] = (uint64_t)&v9[v10 + 4];
      uint64_t result = (uint64_t *)sub_1B6DBA100((uint64_t)&v9[v10], v13);
      if (v4 != v5) {
        uint64_t result = (uint64_t *)sub_1B65504F0(*(void *)(a1 + 24) + v10 * 8);
      }
      ++v11;
      v10 += 4;
    }
    while (v11 < *(unsigned int *)(a1 + 16));
  }
  *(void *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 20) = v7;
  if (v4 != v5)
  {
    uint64_t v14 = v4;
    uint64_t result = *(uint64_t **)(a1 + 8);
    if (result) {
      return sub_1B63C89D4(result, &v14);
    }
  }
  return result;
}

uint64_t sub_1B6DBA100(uint64_t a1, void *a2)
{
  if (a2 != (void *)a1)
  {
    if (*(_DWORD *)(a1 + 20))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v4) {
        sub_1B63C89D4(v4, &v7);
      }
      *(void *)(a1 + 24) = a1 + 32;
    }
    *(void *)(a1 + 16) = a2[2];
    uint64_t v5 = (void *)a2[3];
    if (v5 == a2 + 4) {
      memcpy((void *)(a1 + 32), v5, 8 * *((unsigned int *)a2 + 4));
    }
    else {
      *(void *)(a1 + 24) = v5;
    }
    a2[2] = 0;
    a2[3] = a2 + 4;
  }
  return a1;
}

uint64_t sub_1B6DBA19C(uint64_t a1, uint64_t a2, long long *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 44);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      uint64_t v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 24);
          *(void *)(*(void *)(a1 + 16) + 8 * v15) = *(void *)(*(void *)(a1 + 16) + 8 * v21);
          uint64_t v27 = v26 + 24 * v15;
          uint64_t v28 = (long long *)(v26 + 24 * v21);
          long long v29 = *v28;
          *(void *)(v27 + 16) = *((void *)v28 + 2);
          *(_OWORD *)uint64_t v27 = v29;
          uint64_t v8 = *(void *)(a1 + 32);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      uint64_t v33 = *(void *)(a1 + 24) + 24 * v21;
      long long v34 = *a3;
      *(void *)(v33 + 16) = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v33 = v34;
      *(void *)(*(void *)(a1 + 16) + 8 * v21) = a2;
      uint64_t v35 = *(void *)(a1 + 32);
      *(_WORD *)(v35 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v35 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 40);
      return result;
    }
LABEL_33:
    sub_1B6DBA3FC(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 16) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  uint64_t v31 = *(void *)(a1 + 24) + 24 * v10;
  long long v32 = *a3;
  *(void *)(v31 + 16) = *((void *)a3 + 2);
  *(_OWORD *)uint64_t v31 = v32;
  return result;
}

uint64_t *sub_1B6DBA3FC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  unint64_t v3 = *(_WORD **)(a1 + 24);
  uint64_t v4 = *(__int16 **)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 44);
  sub_1B6DB9BD0(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10) {
        sub_1B6DBA19C(a1, *v8, v7);
      }
      ++v8;
      v7 += 12;
      --v6;
    }
    while (v6);
  }
  unsigned int v12 = v3;
  uint64_t result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    sub_1B63C89D4(result, &v12);
    uint64_t result = *(uint64_t **)(a1 + 8);
    unsigned int v12 = (__int16 *)v2;
    if (result)
    {
      sub_1B63C89D4(result, &v12);
      uint64_t result = *(uint64_t **)(a1 + 8);
      unsigned int v12 = v4;
      if (result) {
        return sub_1B63C89D4(result, &v12);
      }
    }
  }
  return result;
}

BOOL sub_1B6DBA4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = *(void *)(a1 + 24);
    while (*(void *)v5 != *(void *)a2
         || *(unsigned __int8 *)(v5 + 8) != *(unsigned __int8 *)(a2 + 8)
         || *(void *)(v5 + 16) != *(void *)(a2 + 16))
    {
      v5 += 24;
      v4 -= 24;
      if (!v4)
      {
        uint64_t v5 = v2 + 24 * v3;
        return 0xAAAAAAAAAAAAAAABLL * ((v5 - v2) >> 3) != v3;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v5 - v2) >> 3) != v3;
}

void sub_1B6DBA550(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  size_t v3 = (a2 + 15);
  *(void *)(a1 + 24) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (2 * v3) & 0xFFFFFFFE, 4, 2);
  *(void *)(a1 + 8) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(void *)(a1 + 16) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, v3, 1, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  uint64_t v4 = *(void **)(a1 + 24);

  bzero(v4, 2 * v3);
}

void sub_1B6DBA5F8(uint64_t a1)
{
  size_t v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B6DBA550(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DB3964(a1, *v3, v2);
      }
      ++v3;
      ++v2;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_1B6DBA66C(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      uint64_t v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v15) = *(void *)(*(void *)(a1 + 8) + 8 * v21);
          *(void *)(v26 + 8 * v15) = *(void *)(v26 + 8 * v21);
          uint64_t v8 = *(void *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(void *)(*(void *)(a1 + 16) + 8 * v21) = *a3;
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
      uint64_t v28 = *(void *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B6DBA890(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

void sub_1B6DBA890(uint64_t a1)
{
  size_t v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B66025E0(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DBA66C(a1, *v3, v2);
      }
      ++v3;
      v2 += 8;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_1B6DBA904(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      uint64_t v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v15) = *(void *)(*(void *)(a1 + 8) + 8 * v21);
          *(void *)(v26 + 8 * v15) = *(void *)(v26 + 8 * v21);
          uint64_t v8 = *(void *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(void *)(*(void *)(a1 + 16) + 8 * v21) = *a3;
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
      uint64_t v28 = *(void *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B6DBAB28(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

void sub_1B6DBAB28(uint64_t a1)
{
  size_t v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B66025E0(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DBA904(a1, *v3, v2);
      }
      ++v3;
      v2 += 8;
      --v6;
    }
    while (v6);
  }
}

void sub_1B6DBAB9C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  *(void *)(a1 + 24) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (2 * (a2 + 15)), 4, 2);
  *(void *)(a1 + 8) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(void *)(a1 + 16) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, 32 * v3, 8, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  int v5 = *(void **)(a1 + 24);

  bzero(v5, v4);
}

uint64_t sub_1B6DBAC44(uint64_t a1, void *a2)
{
  if (a2 != (void *)a1)
  {
    if (*(_DWORD *)(a1 + 12)) {
      *(void *)(a1 + 16) = a1 + 24;
    }
    *(void *)(a1 + 8) = a2[1];
    size_t v4 = (void *)a2[2];
    if (v4 == a2 + 3) {
      memcpy((void *)(a1 + 24), v4, 8 * *((unsigned int *)a2 + 2));
    }
    else {
      *(void *)(a1 + 16) = v4;
    }
    a2[1] = 0;
    a2[2] = a2 + 3;
  }
  return a1;
}

void sub_1B6DBACC0(uint64_t a1)
{
  unsigned int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B6DBAB9C(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DB4478(a1, *v3, v2);
      }
      ++v3;
      v2 += 32;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_1B6DBAD34(uint64_t a1, void *a2)
{
  if (a2 != (void *)a1)
  {
    if (*(_DWORD *)(a1 + 20) && *(void *)(a1 + 24) != a1 + 32)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      size_t v4 = *(void **)(a1 + 8);
      if (v4) {
        sub_1B63C89D4(v4, &v7);
      }
      *(void *)(a1 + 24) = a1 + 32;
    }
    *(void *)(a1 + 16) = a2[2];
    int v5 = (void *)a2[3];
    if (v5 == a2 + 4) {
      memcpy((void *)(a1 + 32), v5, 24 * *((unsigned int *)a2 + 4));
    }
    else {
      *(void *)(a1 + 24) = v5;
    }
    a2[2] = 0x800000000;
    a2[3] = a2 + 4;
  }
  return a1;
}

uint64_t *sub_1B6DBADE8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  size_t v4 = *(__int16 **)(a1 + 32);
  int v5 = *(_DWORD *)(a1 + 44);
  sub_1B6DB9D2C(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10)
      {
        sub_1B6DB4720(a1, *v8, v7);
        sub_1B6DB9B04(v7);
      }
      ++v8;
      v7 += 224;
      --v6;
    }
    while (v6);
  }
  unsigned int v12 = (_WORD *)v3;
  uint64_t result = *(uint64_t **)(a1 + 8);
  if (result)
  {
    sub_1B63C89D4(result, &v12);
    uint64_t result = *(uint64_t **)(a1 + 8);
    unsigned int v12 = v2;
    if (result)
    {
      sub_1B63C89D4(result, &v12);
      uint64_t result = *(uint64_t **)(a1 + 8);
      unsigned int v12 = v4;
      if (result) {
        return sub_1B63C89D4(result, &v12);
      }
    }
  }
  return result;
}

void sub_1B6DBAEBC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  *(void *)(a1 + 24) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (2 * (a2 + 15)), 4, 2);
  *(void *)(a1 + 8) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(void *)(a1 + 16) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, 24 * v3, 8, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  int v5 = *(void **)(a1 + 24);

  bzero(v5, v4);
}

uint64_t sub_1B6DBAF68(uint64_t a1, void *a2)
{
  if (a2 != (void *)a1)
  {
    if (*(_DWORD *)(a1 + 12)) {
      *(void *)(a1 + 16) = a1 + 24;
    }
    *(void *)(a1 + 8) = a2[1];
    size_t v4 = (void *)a2[2];
    if (v4 == a2 + 3) {
      memcpy((void *)(a1 + 24), v4, 16 * *((unsigned int *)a2 + 2));
    }
    else {
      *(void *)(a1 + 16) = v4;
    }
    a2[1] = 0;
    a2[2] = a2 + 3;
  }
  return a1;
}

void sub_1B6DBAFE4(uint64_t a1)
{
  unsigned int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B6DBAEBC(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DB56A0(a1, *v3, v2);
      }
      ++v3;
      v2 += 24;
      --v6;
    }
    while (v6);
  }
}

uint64_t sub_1B6DBB058(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      uint64_t v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      __int16 v17 = *(_WORD *)(v8 + 2 * v15) | 1;
      *(_WORD *)(v8 + 2 * v15) = v17;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v31 = v15;
        uint64_t v28 = *(void *)(a1 + 8);
        uint64_t v29 = *(void *)(a1 + 16);
        LOBYTE(v22) = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v18 = v15 - 14;
          }
          else {
            unsigned int v18 = 0;
          }
          unsigned int v19 = v18 - 1;
          if (v18 <= v15) {
            unsigned int v20 = v15;
          }
          else {
            unsigned int v20 = v18;
          }
          char v21 = 1;
          while (1)
          {
            uint64_t v22 = v19 + 1;
            if (v18 <= v22) {
              break;
            }
LABEL_27:
            ++v21;
            unsigned int v19 = v22;
            if (v22 == v20) {
              goto LABEL_32;
            }
          }
          int v23 = 1 << (v19 - v18 + 2);
          char v24 = v21;
          unsigned int v25 = v18;
          while (1)
          {
            uint64_t v26 = v25;
            int v27 = *(unsigned __int16 *)(v8 + 2 * v25);
            if ((v23 & v27) != 0) {
              break;
            }
            unsigned int v25 = v26 + 1;
            int v23 = (unsigned __int16)v23 >> 1;
            --v24;
            if ((int)v26 + 1 > v22) {
              goto LABEL_27;
            }
          }
          if (v22 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v28 = *(void *)(a1 + 8);
          uint64_t v29 = *(void *)(a1 + 16);
          *(void *)(v28 + 8 * v15) = *(void *)(v28 + 8 * v22);
          *(unsigned char *)(v29 + v15) = *(unsigned char *)(v29 + v22);
          *(_WORD *)(v8 + 2 * v26) = (v27 | (1 << (v15 - v26 + 1))) ^ (1 << v24);
          unsigned int v15 = v22;
          if (v22 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        __int16 v17 = *(_WORD *)(v8 + 2 * v22) | 1;
        uint64_t v31 = v22;
      }
      *(unsigned char *)(v29 + v31) = *a3;
      *(void *)(v28 + 8 * v31) = a2;
      *(_WORD *)(v8 + 2 * v31) = v17;
      uint64_t result = 1;
      *(_WORD *)(v8 + 2 * v7) |= 1 << (v22 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B6DBB318(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(*(void *)(a1 + 16) + v10) = *a3;
  return result;
}

void sub_1B6DBB270(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  *(void *)(a1 + 24) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (2 * (a2 + 15)), 4, 2);
  *(void *)(a1 + 8) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(void *)(a1 + 16) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, 16 * v3, 8, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  int v5 = *(void **)(a1 + 24);

  bzero(v5, v4);
}

void sub_1B6DBB318(uint64_t a1)
{
  unsigned int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B6DBA550(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DBB058(a1, *v3, v2);
      }
      ++v3;
      ++v2;
      --v6;
    }
    while (v6);
  }
}

__n128 sub_1B6DBB38C(uint64_t a1, uint64_t a2, __n128 *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      uint64_t v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v15) = *(void *)(*(void *)(a1 + 8) + 8 * v21);
          *(_OWORD *)(v26 + 16 * v15) = *(_OWORD *)(v26 + 16 * v21);
          uint64_t v8 = *(void *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      __n128 result = *a3;
      *(__n128 *)(*(void *)(a1 + 16) + 16 * v21) = *a3;
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
      uint64_t v30 = *(void *)(a1 + 24);
      *(_WORD *)(v30 + 2 * v21) |= 1u;
      *(_WORD *)(v30 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B6DBB5B8(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  unint64_t v28 = a3->n128_u64[0];
  uint64_t v29 = *(void *)(a1 + 16) + 16 * v10;
  *(_DWORD *)(v29 + 8) = a3->n128_u32[2];
  *(void *)uint64_t v29 = v28;
  return result;
}

void sub_1B6DBB5B8(uint64_t a1)
{
  unsigned int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B6DBB270(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DBB38C(a1, *v3, v2);
      }
      ++v3;
      v2 += 16;
      --v6;
    }
    while (v6);
  }
}

void sub_1B6DBB62C(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = (uint64_t)(a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v10 + 8))
                {
                  long long v101 = *(_OWORD *)v10;
                  uint64_t v44 = *(void *)(a2 - 16);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 8);
                  *(void *)unint64_t v10 = v44;
                  *(_DWORD *)(a2 - 8) = DWORD2(v101);
                  *(void *)(a2 - 16) = v101;
                }
                break;
              case 3uLL:
                sub_1B6DBBE94((long long *)v10, (long long *)(v10 + 16), a2 - 16);
                break;
              case 4uLL:
                sub_1B6DBC254(v10, v10 + 16, (__n128 *)(v10 + 32), a2 - 16);
                break;
              case 5uLL:
                uint64_t v45 = (long long *)(v10 + 16);
                long long v46 = (long long *)(v10 + 32);
                long long v47 = (long long *)(v10 + 48);
                sub_1B6DBC254(v10, v10 + 16, (__n128 *)(v10 + 32), v10 + 48);
                if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v10 + 56))
                {
                  long long v102 = *v47;
                  uint64_t v48 = *(void *)(a2 - 16);
                  *(_DWORD *)(v10 + 56) = *(_DWORD *)(a2 - 8);
                  *(void *)long long v47 = v48;
                  *(_DWORD *)(a2 - 8) = DWORD2(v102);
                  *(void *)(a2 - 16) = v102;
                  if (*(_DWORD *)(v10 + 56) < *(_DWORD *)(v10 + 40))
                  {
                    long long v103 = *v46;
                    *(void *)long long v46 = *(void *)v47;
                    *(_DWORD *)(v10 + 40) = *(_DWORD *)(v10 + 56);
                    *(void *)long long v47 = v103;
                    *(_DWORD *)(v10 + 56) = DWORD2(v103);
                    if (*(_DWORD *)(v10 + 40) < *(_DWORD *)(v10 + 24))
                    {
                      long long v104 = *v45;
                      *(void *)uint64_t v45 = *(void *)v46;
                      *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 40);
                      *(void *)long long v46 = v104;
                      *(_DWORD *)(v10 + 40) = DWORD2(v104);
                      if (*(_DWORD *)(v10 + 24) < *(_DWORD *)(v10 + 8))
                      {
                        long long v105 = *(_OWORD *)v10;
                        *(void *)unint64_t v10 = *(void *)v45;
                        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 24);
                        *(void *)uint64_t v45 = v105;
                        *(_DWORD *)(v10 + 24) = DWORD2(v105);
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            unint64_t v49 = v10 + 16;
            BOOL v51 = v10 == a2 || v49 == a2;
            if (a4)
            {
              if (!v51)
              {
                uint64_t v52 = 0;
                unint64_t v53 = v10;
                do
                {
                  unsigned int v54 = *(_DWORD *)(v53 + 24);
                  unsigned int v55 = *(_DWORD *)(v53 + 8);
                  unint64_t v53 = v49;
                  if (v54 < v55)
                  {
                    uint64_t v56 = *(void *)v49;
                    uint64_t v57 = v52;
                    while (1)
                    {
                      uint64_t v58 = v10 + v57;
                      *(void *)(v58 + 16) = *(void *)(v10 + v57);
                      *(_DWORD *)(v58 + 24) = *(_DWORD *)(v10 + v57 + 8);
                      if (!v57) {
                        break;
                      }
                      v57 -= 16;
                      if (v54 >= *(_DWORD *)(v58 - 8))
                      {
                        uint64_t v59 = v10 + v57 + 16;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v59 = v10;
LABEL_84:
                    *(void *)uint64_t v59 = v56;
                    *(_DWORD *)(v59 + 8) = v54;
                  }
                  unint64_t v49 = v53 + 16;
                  v52 += 16;
                }
                while (v53 + 16 != a2);
              }
            }
            else if (!v51)
            {
              do
              {
                unsigned int v93 = *(_DWORD *)(a1 + 24);
                unsigned int v94 = *(_DWORD *)(a1 + 8);
                a1 = v49;
                if (v93 < v94)
                {
                  uint64_t v95 = *(void *)v49;
                  do
                  {
                    unint64_t v96 = v49;
                    uint64_t v97 = *(void *)(v49 - 16);
                    v49 -= 16;
                    *(void *)unint64_t v96 = v97;
                    *(_DWORD *)(v96 + 8) = *(_DWORD *)(v96 - 8);
                  }
                  while (v93 < *(_DWORD *)(v96 - 24));
                  *(void *)unint64_t v49 = v95;
                  *(_DWORD *)(v49 + 8) = v93;
                }
                unint64_t v49 = a1 + 16;
              }
              while (a1 + 16 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v60 = (v12 - 2) >> 1;
              int64_t v61 = v60;
              do
              {
                int64_t v62 = v61;
                if (v60 >= v61)
                {
                  uint64_t v63 = (2 * v61) | 1;
                  unint64_t v64 = v10 + 16 * v63;
                  if (2 * v62 + 2 < (uint64_t)v12)
                  {
                    unsigned int v65 = *(_DWORD *)(v64 + 8);
                    unsigned int v66 = *(_DWORD *)(v64 + 24);
                    v64 += 16 * (v65 < v66);
                    if (v65 < v66) {
                      uint64_t v63 = 2 * v62 + 2;
                    }
                  }
                  unsigned int v67 = *(_DWORD *)(v10 + 16 * v62 + 8);
                  if (*(_DWORD *)(v64 + 8) >= v67)
                  {
                    unint64_t v68 = v10 + 16 * v62;
                    uint64_t v69 = *(void *)v68;
                    do
                    {
                      unint64_t v70 = v68;
                      unint64_t v68 = v64;
                      uint64_t v71 = *(void *)v64;
                      *(_DWORD *)(v70 + 8) = *(_DWORD *)(v68 + 8);
                      *(void *)unint64_t v70 = v71;
                      if (v60 < v63) {
                        break;
                      }
                      uint64_t v72 = (2 * v63) | 1;
                      unint64_t v64 = v10 + 16 * v72;
                      uint64_t v73 = 2 * v63 + 2;
                      if (v73 < (uint64_t)v12)
                      {
                        unsigned int v74 = *(_DWORD *)(v64 + 8);
                        unsigned int v75 = *(_DWORD *)(v64 + 24);
                        v64 += 16 * (v74 < v75);
                        if (v74 < v75) {
                          uint64_t v72 = v73;
                        }
                      }
                      uint64_t v63 = v72;
                    }
                    while (*(_DWORD *)(v64 + 8) >= v67);
                    *(void *)unint64_t v68 = v69;
                    *(_DWORD *)(v68 + 8) = v67;
                  }
                }
                int64_t v61 = v62 - 1;
              }
              while (v62);
              uint64_t v76 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v77 = 0;
                long long v106 = *(_OWORD *)v10;
                unint64_t v78 = v10;
                do
                {
                  unint64_t v79 = v78 + 16 * (v77 + 1);
                  uint64_t v80 = (2 * v77) | 1;
                  uint64_t v81 = 2 * v77 + 2;
                  if (v81 < v76)
                  {
                    unsigned int v82 = *(_DWORD *)(v79 + 8);
                    unsigned int v83 = *(_DWORD *)(v79 + 24);
                    v79 += 16 * (v82 < v83);
                    if (v82 < v83) {
                      uint64_t v80 = v81;
                    }
                  }
                  uint64_t v84 = *(void *)v79;
                  *(_DWORD *)(v78 + 8) = *(_DWORD *)(v79 + 8);
                  *(void *)unint64_t v78 = v84;
                  unint64_t v78 = v79;
                  uint64_t v77 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
                a2 -= 16;
                if (v79 == a2)
                {
                  *(_DWORD *)(v79 + 8) = DWORD2(v106);
                  *(void *)unint64_t v79 = v106;
                }
                else
                {
                  uint64_t v85 = *(void *)a2;
                  *(_DWORD *)(v79 + 8) = *(_DWORD *)(a2 + 8);
                  *(void *)unint64_t v79 = v85;
                  *(_DWORD *)(a2 + 8) = DWORD2(v106);
                  *(void *)a2 = v106;
                  uint64_t v86 = v79 - v10 + 16;
                  if (v86 >= 17)
                  {
                    unint64_t v87 = (((unint64_t)v86 >> 4) - 2) >> 1;
                    unsigned int v88 = *(_DWORD *)(v79 + 8);
                    if (*(_DWORD *)(v10 + 16 * v87 + 8) < v88)
                    {
                      uint64_t v89 = *(void *)v79;
                      do
                      {
                        unint64_t v90 = v79;
                        unint64_t v79 = v10 + 16 * v87;
                        uint64_t v91 = *(void *)v79;
                        *(_DWORD *)(v90 + 8) = *(_DWORD *)(v79 + 8);
                        *(void *)unint64_t v90 = v91;
                        if (!v87) {
                          break;
                        }
                        unint64_t v87 = (v87 - 1) >> 1;
                      }
                      while (*(_DWORD *)(v10 + 16 * v87 + 8) < v88);
                      *(void *)unint64_t v79 = v89;
                      *(_DWORD *)(v79 + 8) = v88;
                    }
                  }
                }
              }
              while (v76-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 16 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1B6DBBE94((long long *)a1, (long long *)(a1 + 16 * (v12 >> 1)), a2 - 16);
            sub_1B6DBBE94((long long *)(a1 + 16), (long long *)(v14 - 16), a2 - 32);
            sub_1B6DBBE94((long long *)(a1 + 32), (long long *)(a1 + 16 + 16 * v13), a2 - 48);
            sub_1B6DBBE94((long long *)(v14 - 16), (long long *)v14, a1 + 16 + 16 * v13);
            long long v98 = *(_OWORD *)a1;
            uint64_t v15 = *(void *)v14;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v14 + 8);
            *(void *)a1 = v15;
            *(_DWORD *)(v14 + 8) = DWORD2(v98);
            *(void *)unint64_t v14 = v98;
          }
          else
          {
            sub_1B6DBBE94((long long *)(a1 + 16 * (v12 >> 1)), (long long *)a1, a2 - 16);
          }
          --a3;
          if (a4) {
            break;
          }
          unsigned int v16 = *(_DWORD *)(a1 + 8);
          if (*(_DWORD *)(a1 - 8) < v16) {
            goto LABEL_12;
          }
          if (v16 >= *(_DWORD *)(a2 - 8))
          {
            unint64_t v34 = a1 + 16;
            do
            {
              unint64_t v10 = v34;
              if (v34 >= a2) {
                break;
              }
              unsigned int v35 = *(_DWORD *)(v34 + 8);
              v34 += 16;
            }
            while (v16 >= v35);
          }
          else
          {
            unint64_t v32 = a1;
            do
            {
              unint64_t v10 = v32 + 16;
              unsigned int v33 = *(_DWORD *)(v32 + 24);
              v32 += 16;
            }
            while (v16 >= v33);
          }
          unint64_t v36 = a2;
          if (v10 < a2)
          {
            unint64_t v37 = a2;
            do
            {
              unint64_t v36 = v37 - 16;
              unsigned int v38 = *(_DWORD *)(v37 - 8);
              v37 -= 16;
            }
            while (v16 < v38);
          }
          uint64_t v39 = *(void *)a1;
          while (v10 < v36)
          {
            long long v100 = *(_OWORD *)v10;
            uint64_t v40 = *(void *)v36;
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v36 + 8);
            *(void *)unint64_t v10 = v40;
            *(_DWORD *)(v36 + 8) = DWORD2(v100);
            *(void *)unint64_t v36 = v100;
            do
            {
              unsigned int v41 = *(_DWORD *)(v10 + 24);
              v10 += 16;
            }
            while (v16 >= v41);
            do
            {
              unsigned int v42 = *(_DWORD *)(v36 - 8);
              v36 -= 16;
            }
            while (v16 < v42);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1)
          {
            uint64_t v43 = *(void *)(v10 - 16);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 - 8);
            *(void *)a1 = v43;
          }
          a4 = 0;
          *(void *)(v10 - 16) = v39;
          *(_DWORD *)(v10 - 8) = v16;
        }
        unsigned int v16 = *(_DWORD *)(a1 + 8);
LABEL_12:
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)a1;
        do
        {
          unsigned int v19 = *(_DWORD *)(a1 + v17 + 24);
          v17 += 16;
        }
        while (v19 < v16);
        unint64_t v20 = a1 + v17;
        unint64_t v21 = a2;
        if (v17 == 16)
        {
          unint64_t v24 = a2;
          while (v20 < v24)
          {
            unint64_t v22 = v24 - 16;
            unsigned int v25 = *(_DWORD *)(v24 - 8);
            v24 -= 16;
            if (v25 < v16) {
              goto LABEL_22;
            }
          }
          unint64_t v22 = v24;
        }
        else
        {
          do
          {
            unint64_t v22 = v21 - 16;
            unsigned int v23 = *(_DWORD *)(v21 - 8);
            v21 -= 16;
          }
          while (v23 >= v16);
        }
LABEL_22:
        unint64_t v10 = v20;
        if (v20 < v22)
        {
          unint64_t v26 = v22;
          do
          {
            long long v99 = *(_OWORD *)v10;
            uint64_t v27 = *(void *)v26;
            *(_DWORD *)(v10 + 8) = *(_DWORD *)(v26 + 8);
            *(void *)unint64_t v10 = v27;
            *(_DWORD *)(v26 + 8) = DWORD2(v99);
            *(void *)unint64_t v26 = v99;
            do
            {
              unsigned int v28 = *(_DWORD *)(v10 + 24);
              v10 += 16;
            }
            while (v28 < v16);
            do
            {
              unsigned int v29 = *(_DWORD *)(v26 - 8);
              v26 -= 16;
            }
            while (v29 >= v16);
          }
          while (v10 < v26);
        }
        if (v10 - 16 != a1)
        {
          uint64_t v30 = *(void *)(v10 - 16);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 - 8);
          *(void *)a1 = v30;
        }
        *(void *)(v10 - 16) = v18;
        *(_DWORD *)(v10 - 8) = v16;
        if (v20 >= v22) {
          break;
        }
LABEL_33:
        sub_1B6DBB62C(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1B6DBBFA4(a1, v10 - 16);
      if (sub_1B6DBBFA4(v10, a2)) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 16;
    if (!v31) {
      continue;
    }
    break;
  }
}

long long *sub_1B6DBBE94(long long *result, long long *a2, uint64_t a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  unsigned int v4 = *(_DWORD *)(a3 + 8);
  if (v3 >= *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      long long v11 = *a2;
      int v6 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v6;
      *(void *)a3 = v11;
      *(_DWORD *)(a3 + 8) = DWORD2(v11);
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        long long v12 = *result;
        int v7 = *((_DWORD *)a2 + 2);
        *(void *)__n128 result = *(void *)a2;
        *((_DWORD *)result + 2) = v7;
        *(void *)a2 = v12;
        *((_DWORD *)a2 + 2) = DWORD2(v12);
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v13 = *result;
      int v8 = *((_DWORD *)a2 + 2);
      *(void *)__n128 result = *(void *)a2;
      *((_DWORD *)result + 2) = v8;
      *(void *)a2 = v13;
      *((_DWORD *)a2 + 2) = DWORD2(v13);
      if (*(_DWORD *)(a3 + 8) >= *((_DWORD *)a2 + 2)) {
        return result;
      }
      long long v10 = *a2;
      int v9 = *(_DWORD *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v9;
    }
    else
    {
      long long v10 = *result;
      int v5 = *(_DWORD *)(a3 + 8);
      *(void *)__n128 result = *(void *)a3;
      *((_DWORD *)result + 2) = v5;
    }
    *(void *)a3 = v10;
    *(_DWORD *)(a3 + 8) = DWORD2(v10);
  }
  return result;
}

BOOL sub_1B6DBBFA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 8))
      {
        long long v20 = *(_OWORD *)a1;
        int v6 = *(_DWORD *)(a2 - 8);
        *(void *)a1 = *(void *)(a2 - 16);
        *(_DWORD *)(a1 + 8) = v6;
        *(void *)(a2 - 16) = v20;
        *(_DWORD *)(a2 - 8) = DWORD2(v20);
      }
      return result;
    case 3:
      sub_1B6DBBE94((long long *)a1, (long long *)(a1 + 16), a2 - 16);
      return 1;
    case 4:
      sub_1B6DBC254(a1, a1 + 16, (__n128 *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      unsigned int v16 = (long long *)(a1 + 16);
      uint64_t v17 = (long long *)(a1 + 32);
      uint64_t v18 = (long long *)(a1 + 48);
      sub_1B6DBC254(a1, a1 + 16, (__n128 *)(a1 + 32), a1 + 48);
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 56))
      {
        long long v21 = *v18;
        int v19 = *(_DWORD *)(a2 - 8);
        *(void *)uint64_t v18 = *(void *)(a2 - 16);
        *(_DWORD *)(a1 + 56) = v19;
        *(void *)(a2 - 16) = v21;
        *(_DWORD *)(a2 - 8) = DWORD2(v21);
        if (*(_DWORD *)(a1 + 56) < *(_DWORD *)(a1 + 40))
        {
          long long v22 = *v17;
          *(void *)uint64_t v17 = *(void *)v18;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 56);
          *(void *)uint64_t v18 = v22;
          *(_DWORD *)(a1 + 56) = DWORD2(v22);
          if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 24))
          {
            long long v23 = *v16;
            *(void *)unsigned int v16 = *(void *)v17;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
            *(void *)uint64_t v17 = v23;
            *(_DWORD *)(a1 + 40) = DWORD2(v23);
            if (*(_DWORD *)(a1 + 24) < *(_DWORD *)(a1 + 8))
            {
              long long v24 = *(_OWORD *)a1;
              *(void *)a1 = *(void *)v16;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
              *(void *)unsigned int v16 = v24;
              *(_DWORD *)(a1 + 24) = DWORD2(v24);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 32;
      sub_1B6DBBE94((long long *)a1, (long long *)(a1 + 16), a1 + 32);
      uint64_t v8 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(v8 + 8);
    if (v11 < *(_DWORD *)(v7 + 8))
    {
      uint64_t v12 = *(void *)v8;
      uint64_t v13 = v9;
      while (1)
      {
        uint64_t v14 = a1 + v13;
        *(void *)(v14 + 48) = *(void *)(a1 + v13 + 32);
        *(_DWORD *)(v14 + 56) = *(_DWORD *)(a1 + v13 + 40);
        if (v13 == -32) {
          break;
        }
        v13 -= 16;
        if (v11 >= *(_DWORD *)(v14 + 24))
        {
          uint64_t v15 = a1 + v13 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v15 = a1;
LABEL_13:
      *(void *)uint64_t v15 = v12;
      *(_DWORD *)(v15 + 8) = v11;
      if (++v10 == 8) {
        return v8 + 16 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2) {
      return 1;
    }
  }
}

__n128 sub_1B6DBC254(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4)
{
  sub_1B6DBBE94((long long *)a1, (long long *)a2, (uint64_t)a3);
  if (*(_DWORD *)(a4 + 8) < a3->n128_u32[2])
  {
    __n128 result = *a3;
    __n128 v12 = *a3;
    unsigned __int32 v9 = *(_DWORD *)(a4 + 8);
    a3->n128_u64[0] = *(void *)a4;
    a3->n128_u32[2] = v9;
    *(void *)a4 = v12.n128_u64[0];
    *(_DWORD *)(a4 + 8) = v12.n128_u32[2];
    if (a3->n128_u32[2] < *(_DWORD *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)a2;
      unsigned __int32 v10 = a3->n128_u32[2];
      *(void *)a2 = a3->n128_u64[0];
      *(_DWORD *)(a2 + 8) = v10;
      a3->n128_u64[0] = v13;
      a3->n128_u32[2] = DWORD2(v13);
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        __n128 result = *(__n128 *)a1;
        long long v14 = *(_OWORD *)a1;
        int v11 = *(_DWORD *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = v11;
        *(void *)a2 = v14;
        *(_DWORD *)(a2 + 8) = DWORD2(v14);
      }
    }
  }
  return result;
}

void sub_1B6DBC33C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  *(void *)(a1 + 24) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (2 * (a2 + 15)), 4, 2);
  *(void *)(a1 + 8) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (8 * v3) & 0xFFFFFFF8, 8, 2);
  *(void *)(a1 + 16) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, 88 * v3, 8, 2);
  memset(*(void **)(a1 + 8), 255, 8 * v3);
  int v5 = *(void **)(a1 + 24);

  bzero(v5, v4);
}

uint64_t sub_1B6DBC3E8(uint64_t a1, void *a2)
{
  if (a2 != (void *)a1)
  {
    if (*(_DWORD *)(a1 + 12) && *(void *)(a1 + 16) != a1 + 24) {
      *(void *)(a1 + 16) = a1 + 24;
    }
    *(void *)(a1 + 8) = a2[1];
    size_t v4 = (void *)a2[2];
    if (v4 == a2 + 3) {
      memcpy((void *)(a1 + 24), v4, 8 * *((unsigned int *)a2 + 2));
    }
    else {
      *(void *)(a1 + 16) = v4;
    }
    a2[1] = 0x800000000;
    a2[2] = a2 + 3;
  }
  return a1;
}

void sub_1B6DBC47C(uint64_t a1)
{
  unsigned int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B6DBC33C(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DB6364(a1, *v3, v2);
      }
      ++v3;
      v2 += 88;
      --v6;
    }
    while (v6);
  }
}

void CFX::GPUResourceManager::~GPUResourceManager(CFX::GPUResourceManager *this)
{
  sub_1B6DB9064((uint64_t)this + 288);
  sub_1B6DB9064((uint64_t)this + 248);
  CFX::BufferPool::~BufferPool((CFX::GPUResourceManager *)((char *)this + 208));
  CFX::BufferPool::~BufferPool((CFX::GPUResourceManager *)((char *)this + 168));
  sub_1B6DC7544((uint64_t)this + 128);
  sub_1B6DBD624((uint64_t)this + 96);
  sub_1B6DBD624((uint64_t)this + 64);
  sub_1B6DBD5A8((uint64_t)this + 32);

  sub_1B6DBD5A8((uint64_t)this);
}

void CFX::GPUResourceManager::clear(void **this)
{
  *((_DWORD *)this + 78) = 0;
}

void sub_1B6DBC5D4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  uint64_t v3 = (v2 + 15);
  if (v2 == -15)
  {
    size_t v7 = 0;
  }
  else
  {
    size_t v4 = *(id **)(a1 + 8);
    int v5 = *(__int16 **)(a1 + 16);
    do
    {
      __int16 v6 = *v5++;
      if (v6) {

      }
      ++v4;
      --v3;
    }
    while (v3);
    size_t v7 = 8 * (*(_DWORD *)(a1 + 28) + 15);
  }
  memset(*(void **)a1, 255, v7);
  bzero(*(void **)(a1 + 16), 2 * (*(_DWORD *)(a1 + 28) + 15));
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_1B6DBC660(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  uint64_t v3 = (v2 + 15);
  if (v2 == -15)
  {
    size_t v7 = 0;
  }
  else
  {
    size_t v4 = *(id **)(a1 + 8);
    int v5 = *(__int16 **)(a1 + 16);
    do
    {
      __int16 v6 = *v5++;
      if (v6) {

      }
      v4 += 3;
      --v3;
    }
    while (v3);
    size_t v7 = 8 * (*(_DWORD *)(a1 + 28) + 15);
  }
  memset(*(void **)a1, 255, v7);
  bzero(*(void **)(a1 + 16), 2 * (*(_DWORD *)(a1 + 28) + 15));
  *(_DWORD *)(a1 + 24) = 0;
}

void CFX::GPUResourceManager::nextFrame(id *this)
{
  sub_1B6DBC5D4((uint64_t)this);
  sub_1B6DBC660((uint64_t)(this + 8));
  sub_1B6DC7AAC(this + 16);
  CFX::BufferPool::nextFrame((CFX::BufferPool *)(this + 26), v2, v3, v4);
  CFX::BufferPool::nextFrame((CFX::BufferPool *)(this + 21), v5, v6, v7);
  memset(this[36], 255, 8 * (*((_DWORD *)this + 79) + 15));
  bzero(this[38], 2 * (*((_DWORD *)this + 79) + 15));
  *((_DWORD *)this + 78) = 0;
}

void CFX::GPUResourceManager::clearFrameTexturePool(CFX::GPUResourceManager *this)
{
}

void CFX::GPUResourceManager::clearResourcesMapping(void **this)
{
  *((_DWORD *)this + 68) = 0;
}

BOOL CFX::GPUResourceManager::isAllocated(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2)
{
  int v4 = CFX::RG::Resource::type(a2);
  if (v4 != 3)
  {
    if (v4 != 2)
    {
      if (v4 != 1) {
        return 0;
      }
      goto LABEL_8;
    }
    int v5 = (CFX::RG::ExternalResourceDesc *)CFX::RG::Resource::externalResourceDesc(a2);
    if (!CFX::RG::ExternalResourceDesc::kind(v5))
    {
LABEL_8:
      CFX::GPUResourceManager::getBuffer(this, a2, v9);
      BOOL v7 = v9[0] != 0;

      return v7;
    }
    if (CFX::RG::ExternalResourceDesc::kind(v5) != 1) {
      return 0;
    }
  }
  uint64_t v6 = CFX::GPUResourceManager::getTexture(this, a2);
  BOOL v7 = v6 != 0;

  return v7;
}

__n128 CFX::GPUResourceManager::getBuffer@<Q0>(CFX::GPUResourceManager *this@<X0>, const CFX::RG::Resource *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = CFX::GPUResourceManager::remappedResource(this, a2);
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)v6) ^ ((0x9DDFEA08EB382D69 * (unint64_t)v6) >> 47));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  int v9 = CFX::RG::Resource::lifetime(a2);
  if (v9 == 2)
  {
    unsigned int v11 = (*((_DWORD *)this + 31) - 1) & v8;
    unsigned int v14 = *(unsigned __int16 *)(*((void *)this + 14) + 2 * v11);
    if (v14 < 2) {
      goto LABEL_12;
    }
    while ((v14 & 2) == 0 || v8 != *(void *)(*((void *)this + 12) + 8 * v11))
    {
      ++v11;
      BOOL v13 = v14 >= 4;
      v14 >>= 1;
      if (!v13) {
        goto LABEL_12;
      }
    }
    uint64_t v15 = *((void *)this + 13);
    if (!v15) {
      goto LABEL_12;
    }
  }
  else
  {
    if (v9 != 1) {
      goto LABEL_12;
    }
    unsigned int v11 = (*((_DWORD *)this + 23) - 1) & v8;
    unsigned int v12 = *(unsigned __int16 *)(*((void *)this + 10) + 2 * v11);
    if (v12 < 2) {
      goto LABEL_12;
    }
    while ((v12 & 2) == 0 || v8 != *(void *)(*((void *)this + 8) + 8 * v11))
    {
      ++v11;
      BOOL v13 = v12 >= 4;
      v12 >>= 1;
      if (!v13) {
        goto LABEL_12;
      }
    }
    uint64_t v15 = *((void *)this + 9);
    if (!v15)
    {
LABEL_12:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return result;
    }
  }
  uint64_t v16 = v15 + 24 * v11;
  *a3 = *(id *)v16;
  __n128 result = *(__n128 *)(v16 + 8);
  *(__n128 *)(a3 + 1) = result;
  return result;
}

id CFX::GPUResourceManager::getTexture(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2)
{
  uint64_t v3 = CFX::GPUResourceManager::remappedResource(this, a2);
  unint64_t v4 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)v3) ^ ((0x9DDFEA08EB382D69 * (unint64_t)v3) >> 47));
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  int v6 = CFX::RG::Resource::lifetime(v3);
  if (v6 == 2)
  {
    unsigned int v7 = (*((_DWORD *)this + 15) - 1) & v5;
    unsigned int v10 = *(unsigned __int16 *)(*((void *)this + 6) + 2 * v7);
    if (v10 < 2) {
      goto LABEL_12;
    }
    while ((v10 & 2) == 0 || v5 != *(void *)(*((void *)this + 4) + 8 * v7))
    {
      ++v7;
      BOOL v9 = v10 >= 4;
      v10 >>= 1;
      if (!v9) {
        goto LABEL_12;
      }
    }
    uint64_t v14 = *((void *)this + 5);
    if (!v14) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
  if (v6 == 1)
  {
    unsigned int v7 = (*((_DWORD *)this + 7) - 1) & v5;
    unsigned int v8 = *(unsigned __int16 *)(*((void *)this + 2) + 2 * v7);
    if (v8 < 2) {
      goto LABEL_12;
    }
    while ((v8 & 2) == 0 || v5 != *(void *)(*(void *)this + 8 * v7))
    {
      ++v7;
      BOOL v9 = v8 >= 4;
      v8 >>= 1;
      if (!v9) {
        goto LABEL_12;
      }
    }
    uint64_t v14 = *((void *)this + 1);
    if (!v14)
    {
LABEL_12:
      unsigned int v11 = 0;
LABEL_13:
      id v12 = v11;
      goto LABEL_15;
    }
LABEL_21:
    unsigned int v11 = *(void **)(v14 + 8 * v7);
    goto LABEL_13;
  }
  id v12 = 0;
LABEL_15:

  return v12;
}

unint64_t CFX::GPUResourceManager::resourceHashOrRemapped(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2)
{
  int v2 = CFX::GPUResourceManager::remappedResource(this, a2);
  unint64_t v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)v2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)v2) >> 47));
  return 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
}

void CFX::GPUResourceManager::allocate(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2, const CFX::RG::RenderGraphContext *a3)
{
  prof_beginFlame((uint64_t)"allocate", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/GPUResourceManager.mm", 114);
  int v6 = CFX::RG::Resource::lifetime(a2);
  int v7 = CFX::RG::Resource::type(a2);
  int v8 = v7;
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  uint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  if (v6 == 2)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1B6DBD078;
    aBlock[3] = &unk_1E61465B8;
    aBlock[4] = this;
    uint64_t v14 = _Block_copy(aBlock);
    uint64_t v15 = *(void **)a2;
    *(void *)a2 = v14;

    switch(v8)
    {
      case 3:
        uint64_t v28 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a3, a2);
        (*(void (**)(void, uint64_t))(**((void **)this + 35) + 16))(*((void *)this + 35), v28);
        unsigned int v29 = (char *)this + 32;
        id v51 = (id)objc_claimAutoreleasedReturnValue();
        id v22 = v51;
        sub_1B6DBD9FC((uint64_t)v29, v10, (uint64_t *)&v51);
        break;
      case 2:
        uint64_t v30 = (const void **)CFX::RG::Resource::externalResourceDesc(a2);
        if (!CFX::RG::ExternalResourceDesc::kind((CFX::RG::ExternalResourceDesc *)v30))
        {
          CFX::RG::ExternalResourceDesc::allocate(v30);
          unsigned int v41 = (void (**)(void))objc_claimAutoreleasedReturnValue();
          unsigned int v42 = v41[2]();

          id v43 = v42;
          uint64_t v47 = objc_msgSend_length(v43, v44, v45, v46);
          uint64_t v48 = (char *)this + 96;
          id v51 = v43;
          *(void *)&long long v52 = 0;
          *((void *)&v52 + 1) = v47;
          id v22 = v43;
          sub_1B6DBD6A0((uint64_t)v48, v10, (uint64_t *)&v51);
LABEL_26:

          goto LABEL_27;
        }
        if (CFX::RG::ExternalResourceDesc::kind((CFX::RG::ExternalResourceDesc *)v30) != 1) {
          goto LABEL_28;
        }
        CFX::RG::ExternalResourceDesc::allocate(v30);
        BOOL v31 = (void (**)(void))objc_claimAutoreleasedReturnValue();
        unint64_t v32 = v31[2]();

        unsigned int v33 = (char *)this + 32;
        id v51 = v32;
        id v22 = v32;
        sub_1B6DBD9FC((uint64_t)v33, v10, (uint64_t *)&v51);
        break;
      case 1:
        *(_OWORD *)long long v50 = *(_OWORD *)CFX::RG::Resource::bufferDesc(a2);
        (*(void (**)(void, unsigned char *))(**((void **)this + 35) + 24))(*((void *)this + 35), v50);
        id v16 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v20 = objc_msgSend_length(v16, v17, v18, v19);
        long long v21 = (char *)this + 96;
        id v51 = v16;
        *(void *)&long long v52 = 0;
        *((void *)&v52 + 1) = v20;
        id v22 = v16;
        sub_1B6DBD6A0((uint64_t)v21, v10, (uint64_t *)&v51);
        goto LABEL_26;
      default:
        goto LABEL_28;
    }

LABEL_27:
    goto LABEL_28;
  }
  if (v6 != 1) {
    goto LABEL_28;
  }
  switch(v7)
  {
    case 3:
      long long v23 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a3, a2);
      sub_1B6DC7570((uint64_t)this + 128, v23);
      id v51 = (id)objc_claimAutoreleasedReturnValue();
      id v24 = v51;
      sub_1B6DBD9FC((uint64_t)this, v10, (uint64_t *)&v51);
      goto LABEL_18;
    case 2:
      unsigned int v25 = (CFX::RG::ExternalResourceDesc *)CFX::RG::Resource::externalResourceDesc(a2);
      if (CFX::RG::ExternalResourceDesc::kind(v25))
      {
        if (CFX::RG::ExternalResourceDesc::kind(v25) != 1) {
          break;
        }
        CFX::RG::ExternalResourceDesc::allocate((const void **)v25);
        unint64_t v26 = (void (**)(void))objc_claimAutoreleasedReturnValue();
        uint64_t v27 = v26[2]();

        id v51 = v27;
        id v24 = v27;
        sub_1B6DBD9FC((uint64_t)this, v10, (uint64_t *)&v51);
LABEL_18:

        break;
      }
      CFX::RG::ExternalResourceDesc::allocate((const void **)v25);
      unint64_t v34 = (void (**)(void))objc_claimAutoreleasedReturnValue();
      unsigned int v35 = v34[2]();

      id v36 = v35;
      uint64_t v40 = (char *)this + 64;
      id v51 = v36;
      *(void *)&long long v52 = 0;
      *((void *)&v52 + 1) = objc_msgSend_length(v36, v37, v38, v39);
      id v22 = v36;
      sub_1B6DBD6A0((uint64_t)v40, v10, (uint64_t *)&v51);
      goto LABEL_26;
    case 1:
      unsigned int v11 = (uint64_t *)CFX::RG::Resource::bufferDesc(a2);
      uint64_t v12 = *v11;
      if ((v11[1] & 0xF0) != 0) {
        BOOL v13 = (char *)this + 168;
      }
      else {
        BOOL v13 = (char *)this + 208;
      }
      CFX::BufferPool::allocate(v13, v12, v50);
      id v51 = *(id *)v50;
      long long v52 = *(_OWORD *)&v50[8];
      sub_1B6DBD6A0((uint64_t)this + 64, v10, (uint64_t *)&v51);

      break;
  }
LABEL_28:
  prof_endFlame();
}

void sub_1B6DBCF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::GPUResourceManager::bufferPoolForResourceOptions(CFX::GPUResourceManager *this, char a2)
{
  if ((a2 & 0xF0) != 0) {
    return (uint64_t)this + 168;
  }
  else {
    return (uint64_t)this + 208;
  }
}

void sub_1B6DBD078(uint64_t a1, const CFX::RG::Resource *a2)
{
}

void CFX::GPUResourceManager::free(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2)
{
  int v4 = CFX::RG::Resource::lifetime(a2);
  int v5 = CFX::RG::Resource::type(a2);
  if (v4 == 2)
  {
    unint64_t v9 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (void)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
    unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
    if (v5 == 3)
    {
      uint64_t v18 = (*((_DWORD *)this + 15) - 1) & v10;
      uint64_t v19 = *((void *)this + 6);
      unsigned int v20 = *(unsigned __int16 *)(v19 + 2 * v18);
      if (v20 >= 2)
      {
        int v21 = 1;
        for (unsigned int i = *(unsigned __int16 *)(v19 + 2 * v18); ; i >>= 1)
        {
          if ((i & 2) != 0)
          {
            uint64_t v23 = (v18 + v21 - 1);
            if (v10 == *(void *)(*((void *)this + 4) + 8 * v23)) {
              break;
            }
          }
          ++v21;
          if (i <= 3) {
            return;
          }
        }
        *(_WORD *)(v19 + 2 * v18) = v20 ^ (1 << v21);
        *(_WORD *)(v19 + 2 * v23) ^= 1u;

        --*((_DWORD *)this + 14);
      }
    }
    else if (v5 == 1)
    {
      uint64_t v11 = (*((_DWORD *)this + 31) - 1) & v10;
      uint64_t v12 = *((void *)this + 14);
      unsigned int v13 = *(unsigned __int16 *)(v12 + 2 * v11);
      if (v13 >= 2)
      {
        int v14 = 1;
        for (unsigned int j = *(unsigned __int16 *)(v12 + 2 * v11); ; j >>= 1)
        {
          if ((j & 2) != 0)
          {
            uint64_t v16 = (v11 + v14 - 1);
            if (v10 == *(void *)(*((void *)this + 12) + 8 * v16)) {
              break;
            }
          }
          ++v14;
          if (j < 4) {
            return;
          }
        }
        *(_WORD *)(v12 + 2 * v11) = v13 ^ (1 << v14);
        *(_WORD *)(v12 + 2 * v16) ^= 1u;

        --*((_DWORD *)this + 30);
      }
    }
  }
  else if (v4 == 1)
  {
    if (v5 == 3)
    {
      CFX::GPUResourceManager::getTexture(this, a2);
      id v25 = (id)objc_claimAutoreleasedReturnValue();
      sub_1B6DC794C((uint64_t)this + 128, v25);
    }
    else if (v5 == 1)
    {
      uint64_t v6 = *(void *)(CFX::RG::Resource::bufferDesc(a2) + 8);
      CFX::GPUResourceManager::getBuffer(this, a2, &v28);
      if ((v6 & 0xF0) != 0) {
        int v7 = (unsigned int *)((char *)this + 168);
      }
      else {
        int v7 = (unsigned int *)((char *)this + 208);
      }
      id v26 = v28;
      long long v27 = v29;
      id v8 = v28;
      CFX::BufferPool::free(v7, &v26);
    }
  }
}

void sub_1B6DBD2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CFX::GPUResourceManager::mapResource(CFX::GPUResourceManager *this, CFX::RG::Resource *a2, CFX::RG::Resource *a3)
{
  unint64_t v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  int v5 = a3;
  return sub_1B6DBDD0C((uint64_t)this + 248, 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47)), &v5);
}

CFX::RG::Resource *CFX::GPUResourceManager::remappedResource(CFX::GPUResourceManager *this, CFX::RG::Resource *a2)
{
  int v2 = *((_DWORD *)this + 69) - 1;
  uint64_t v3 = *((void *)this + 33);
  unint64_t v4 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (void)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  unsigned int v6 = v2 & v5;
  unsigned int v7 = *(unsigned __int16 *)(v3 + 2 * (v2 & v5));
  if (v7 >= 2)
  {
    do
    {
      while ((v7 & 2) == 0 || v5 != *(void *)(*((void *)this + 31) + 8 * v6))
      {
        ++v6;
        BOOL v9 = v7 >= 4;
        v7 >>= 1;
        if (!v9) {
          return a2;
        }
      }
      uint64_t v10 = *((void *)this + 32);
      if (!v10) {
        break;
      }
      a2 = *(CFX::RG::Resource **)(v10 + 8 * v6);
      unint64_t v11 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (void)a2) ^ ((0x9DDFEA08EB382D69 * (unint64_t)a2) >> 47));
      unint64_t v5 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
      unsigned int v6 = v2 & v5;
      unsigned int v7 = *(unsigned __int16 *)(v3 + 2 * (v2 & v5));
    }
    while (v7 > 1);
  }
  return a2;
}

uint64_t CFX::GPUResourceManager::registerNamedFrameResource(CFX::GPUResourceManager *this, const CFX::RG::Resource *a2, unsigned int a3)
{
  unint64_t v4 = a2;
  return sub_1B6DBDFDC((uint64_t)this + 288, a3, &v4);
}

id CFX::GPUResourceManager::getRegisteredFrameTextureNamed(CFX::GPUResourceManager *this, int a2)
{
  unsigned int v2 = (*((_DWORD *)this + 79) - 1) & a2;
  unsigned int v3 = *(unsigned __int16 *)(*((void *)this + 38) + 2 * v2);
  if (v3 < 2) {
    goto LABEL_5;
  }
  while ((v3 & 2) == 0 || *(void *)(*((void *)this + 36) + 8 * v2) != a2)
  {
    ++v2;
    BOOL v4 = v3 >= 4;
    v3 >>= 1;
    if (!v4) {
      goto LABEL_5;
    }
  }
  uint64_t v7 = *((void *)this + 37);
  if (v7)
  {
    unint64_t v5 = CFX::GPUResourceManager::getTexture(this, *(const CFX::RG::Resource **)(v7 + 8 * v2));
  }
  else
  {
LABEL_5:
    unint64_t v5 = 0;
  }

  return v5;
}

uint64_t CFX::GPUResourceManager::allocator(CFX::GPUResourceManager *this)
{
  return *((void *)this + 35);
}

void sub_1B6DBD4C4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  unint64_t v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(void *)(a1 + 16) = v5;
  unsigned int v6 = malloc_type_malloc((8 * v3) & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v6, 255, (8 * v3) & 0xFFFFFFF8);
  *(void *)a1 = v6;
  uint64_t v7 = malloc_type_malloc(24 * v3, 0xD5346062uLL);
  memset(v7, 255, 24 * v3);
  *(void *)(a1 + 8) = v7;
  memset(*(void **)a1, 255, 8 * v3);
  id v8 = *(void **)(a1 + 16);

  bzero(v8, v4);
}

uint64_t sub_1B6DBD5A8(uint64_t a1)
{
  unsigned int v2 = *(id **)(a1 + 8);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 28);
    uint64_t v4 = (v3 + 15);
    if (v3 != -15)
    {
      unint64_t v5 = *(__int16 **)(a1 + 16);
      do
      {
        __int16 v6 = *v5++;
        if (v6) {

        }
        ++v2;
        --v4;
      }
      while (v4);
      unsigned int v2 = *(id **)(a1 + 8);
    }
    free(v2);
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1B6DBD624(uint64_t a1)
{
  unsigned int v2 = *(id **)(a1 + 8);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 28);
    uint64_t v4 = (v3 + 15);
    if (v3 != -15)
    {
      unint64_t v5 = *(__int16 **)(a1 + 16);
      do
      {
        __int16 v6 = *v5++;
        if (v6) {

        }
        v2 += 3;
        --v4;
      }
      while (v4);
      unsigned int v2 = *(id **)(a1 + 8);
    }
    free(v2);
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1B6DBD6A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  while (1)
  {
    int v5 = *(_DWORD *)(a1 + 28);
    uint64_t v6 = (v5 - 1) & a2;
    uint64_t v7 = *(void *)(a1 + 16);
    unsigned int v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    if (v8 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v11 = v5 + 15;
    if (v11 >= (int)v6 + 496) {
      unsigned int v11 = v6 + 496;
    }
    if (v6 >= v11)
    {
      unsigned int v13 = v6;
    }
    else
    {
      uint64_t v12 = (__int16 *)(v7 + 2 * v6);
      unsigned int v13 = v6;
      while (1)
      {
        __int16 v14 = *v12++;
        if ((v14 & 1) == 0) {
          break;
        }
        if (v11 == ++v13) {
          goto LABEL_32;
        }
      }
    }
    if (v13 != v11)
    {
      *(_WORD *)(v7 + 2 * v13) |= 1u;
      if (v13 <= (int)v6 + 14)
      {
        uint64_t v19 = v13;
      }
      else
      {
        while (2)
        {
          unsigned int v15 = v13 - 14;
          if (v13 < 0xF) {
            unsigned int v15 = 0;
          }
          unsigned int v16 = v15 - 1;
          if (v15 <= v13) {
            unsigned int v17 = v13;
          }
          else {
            unsigned int v17 = v15;
          }
          char v18 = 1;
          while (1)
          {
            uint64_t v19 = v16 + 1;
            if (v15 <= v19) {
              break;
            }
LABEL_26:
            ++v18;
            unsigned int v16 = v19;
            if (v19 == v17) {
              goto LABEL_31;
            }
          }
          int v20 = 1 << (v16 - v15 + 2);
          char v21 = v18;
          unsigned int v22 = v15;
          while (1)
          {
            uint64_t v23 = v22;
            if (((unsigned __int16)v20 & *(_WORD *)(v7 + 2 * v22)) != 0) {
              break;
            }
            ++v22;
            LOWORD(v20) = (unsigned __int16)v20 >> 1;
            --v21;
            if ((int)v23 + 1 > v19) {
              goto LABEL_26;
            }
          }
          if (v19 >= v13)
          {
LABEL_31:
            *(_WORD *)(v7 + 2 * v13) ^= 1u;
            goto LABEL_32;
          }
          uint64_t v24 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 8 * v13) = *(void *)(*(void *)a1 + 8 * v19);
          uint64_t v25 = v24 + 24 * v13;
          id v26 = (uint64_t *)(v24 + 24 * v19);
          uint64_t v27 = *v26;
          *id v26 = 0;
          *(void *)uint64_t v25 = v27;
          *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 1);

          uint64_t v7 = *(void *)(a1 + 16);
          *(_WORD *)(v7 + 2 * v23) = (*(_WORD *)(v7 + 2 * v23) | (1 << (v13 - v23 + 1))) ^ (1 << v21);
          unsigned int v13 = v19;
          if (v19 > (int)v6 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v13) = v19;
      }
      uint64_t v32 = *(void *)(a1 + 8) + 24 * v19;
      uint64_t v33 = *a3;
      *a3 = 0;
      *(void *)uint64_t v32 = v33;
      *(_OWORD *)(v32 + 8) = *(_OWORD *)(a3 + 1);
      *(void *)(*(void *)a1 + 8 * v19) = a2;
      uint64_t v34 = *(void *)(a1 + 16);
      *(_WORD *)(v34 + 2 * v19) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v34 + 2 * v6) |= 1 << (v13 - v6 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_32:
    sub_1B6DBD948(a1);
  }
  unsigned int v9 = (v5 - 1) & a2;
  while ((v8 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v9) != a2)
  {
    ++v9;
    BOOL v10 = v8 > 3;
    v8 >>= 1;
    if (!v10) {
      goto LABEL_6;
    }
  }
  uint64_t v28 = *(void *)(a1 + 8) + 24 * v9;
  uint64_t v29 = *a3;
  *a3 = 0;
  uint64_t v30 = *(void **)v28;
  *(void *)uint64_t v28 = v29;

  uint64_t result = 0;
  *(_OWORD *)(v28 + 8) = *(_OWORD *)(a3 + 1);
  return result;
}

void sub_1B6DBD948(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  int v3 = *(id **)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B6DBD4C4(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    unsigned int v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10)
      {
        sub_1B6DBD6A0(a1, *v8, v7);
      }
      ++v8;
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

uint64_t sub_1B6DBD9FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 16);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v6 + 15;
    if (v12 >= (int)v7 + 496) {
      unsigned int v12 = v7 + 496;
    }
    if (v7 >= v12)
    {
      unsigned int v14 = v7;
    }
    else
    {
      unsigned int v13 = (__int16 *)(v8 + 2 * v7);
      unsigned int v14 = v7;
      while (1)
      {
        __int16 v15 = *v13++;
        if ((v15 & 1) == 0) {
          break;
        }
        if (v12 == ++v14) {
          goto LABEL_32;
        }
      }
    }
    if (v14 != v12)
    {
      *(_WORD *)(v8 + 2 * v14) |= 1u;
      if (v14 <= (int)v7 + 14)
      {
        uint64_t v20 = v14;
      }
      else
      {
        while (2)
        {
          unsigned int v16 = v14 - 14;
          if (v14 < 0xF) {
            unsigned int v16 = 0;
          }
          unsigned int v17 = v16 - 1;
          if (v16 <= v14) {
            unsigned int v18 = v14;
          }
          else {
            unsigned int v18 = v16;
          }
          char v19 = 1;
          while (1)
          {
            uint64_t v20 = v17 + 1;
            if (v16 <= v20) {
              break;
            }
LABEL_26:
            ++v19;
            unsigned int v17 = v20;
            if (v20 == v18) {
              goto LABEL_31;
            }
          }
          int v21 = 1 << (v17 - v16 + 2);
          char v22 = v19;
          unsigned int v23 = v16;
          while (1)
          {
            uint64_t v24 = v23;
            if (((unsigned __int16)v21 & *(_WORD *)(v8 + 2 * v23)) != 0) {
              break;
            }
            ++v23;
            LOWORD(v21) = (unsigned __int16)v21 >> 1;
            --v22;
            if ((int)v24 + 1 > v20) {
              goto LABEL_26;
            }
          }
          if (v20 >= v14)
          {
LABEL_31:
            *(_WORD *)(v8 + 2 * v14) ^= 1u;
            goto LABEL_32;
          }
          uint64_t v25 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 8 * v14) = *(void *)(*(void *)a1 + 8 * v20);
          uint64_t v26 = *(void *)(v25 + 8 * v20);
          *(void *)(v25 + 8 * v20) = 0;
          *(void *)(v25 + 8 * v14) = v26;

          uint64_t v8 = *(void *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v14 - v24 + 1))) ^ (1 << v22);
          unsigned int v14 = v20;
          if (v20 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v14) = v20;
      }
      uint64_t v32 = *(void *)(a1 + 8);
      uint64_t v33 = *a3;
      *a3 = 0;
      *(void *)(v32 + 8 * v20) = v33;
      *(void *)(*(void *)a1 + 8 * v20) = a2;
      uint64_t v34 = *(void *)(a1 + 16);
      *(_WORD *)(v34 + 2 * v20) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v34 + 2 * v7) |= 1 << (v14 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_32:
    sub_1B6DBDC58(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t v27 = v10;
  uint64_t v28 = *a3;
  *a3 = 0;
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = *(void **)(v29 + 8 * v10);
  *(void *)(v29 + 8 * v27) = v28;

  return 0;
}

void sub_1B6DBDC58(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  int v3 = *(id **)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B63F72E4(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10)
      {
        sub_1B6DBD9FC(a1, *v8, v7);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

uint64_t sub_1B6DBDD0C(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 16);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      unsigned int v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 8 * v15) = *(void *)(*(void *)a1 + 8 * v21);
          *(void *)(v26 + 8 * v15) = *(void *)(v26 + 8 * v21);
          uint64_t v8 = *(void *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = *a3;
      *(void *)(*(void *)a1 + 8 * v21) = a2;
      uint64_t v28 = *(void *)(a1 + 16);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B6DBDF30(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v10) = *a3;
  return result;
}

void sub_1B6DBDF30(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  int v3 = *(char **)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B63F72E4(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10) {
        sub_1B6DBDD0C(a1, *v8, v7);
      }
      ++v8;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

uint64_t sub_1B6DBDFDC(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 16);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      unsigned int v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 8 * v15) = *(void *)(*(void *)a1 + 8 * v21);
          *(void *)(v26 + 8 * v15) = *(void *)(v26 + 8 * v21);
          uint64_t v8 = *(void *)(a1 + 16);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = *a3;
      *(void *)(*(void *)a1 + 8 * v21) = a2;
      uint64_t v28 = *(void *)(a1 + 16);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B6DBE200(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v10) = *a3;
  return result;
}

void sub_1B6DBE200(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  int v3 = *(char **)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B63F72E4(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    unsigned int v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10) {
        sub_1B6DBDFDC(a1, *v8, v7);
      }
      ++v8;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

BOOL VFXMTLTextureTypeIsArray(uint64_t a1)
{
  return a1 == 6 || (a1 & 0xFFFFFFFFFFFFFFFDLL) == 1;
}

uint64_t VFXMTLTextureTypeGetArrayElementType(uint64_t a1)
{
  uint64_t v1 = 5;
  uint64_t v2 = 2;
  if (a1 != 3) {
    uint64_t v2 = a1;
  }
  if (a1 != 6) {
    uint64_t v1 = v2;
  }
  if (a1 == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

BOOL VFXMTLTextureTypeIsCube(uint64_t a1)
{
  return (unint64_t)(a1 - 5) < 2;
}

uint64_t VFXMTLTexturePixelFormatIsDepth(uint64_t a1)
{
  return ((unint64_t)(a1 - 250) < 0xB) & (0x405u >> (a1 + 6));
}

uint64_t VFXMTLPixelFormatSRGBVariant(uint64_t result)
{
  if (result <= 499)
  {
    if (result <= 79)
    {
      switch(result)
      {
        case 10:
          return 11;
        case 30:
          return 31;
        case 70:
          return 71;
      }
    }
    else if (result > 179)
    {
      if (result == 180)
      {
        return 181;
      }
      else if (result == 182)
      {
        return 183;
      }
    }
    else if (result == 80)
    {
      return 81;
    }
    else if (result == 178)
    {
      return 179;
    }
  }
  else if (result > 549)
  {
    switch(result)
    {
      case 550:
        return 551;
      case 552:
        return 553;
      case 554:
        return 555;
    }
  }
  else
  {
    switch(result)
    {
      case 500:
        uint64_t result = 520;
        break;
      case 501:
        uint64_t result = 521;
        break;
      case 502:
        uint64_t result = 522;
        break;
      case 503:
        uint64_t result = 523;
        break;
      case 504:
        uint64_t result = 524;
        break;
      case 505:
        uint64_t result = 525;
        break;
      case 506:
        uint64_t result = 526;
        break;
      case 507:
        uint64_t result = 527;
        break;
      case 508:
        uint64_t result = 528;
        break;
      case 509:
        uint64_t result = 529;
        break;
      case 510:
        uint64_t result = 530;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t VFXMTLPixelFormatNonSRGBVariant(uint64_t result)
{
  if (result > 180)
  {
    if (result <= 550)
    {
      if (result == 181)
      {
        return 180;
      }
      else if (result == 183)
      {
        return 182;
      }
    }
    else
    {
      switch(result)
      {
        case 551:
          return 550;
        case 553:
          return 552;
        case 555:
          return 554;
      }
    }
  }
  else if (result <= 70)
  {
    if (result == 11)
    {
      return 10;
    }
    else if (result == 31)
    {
      return 30;
    }
  }
  else
  {
    switch(result)
    {
      case 71:
        return 70;
      case 81:
        return 80;
      case 179:
        return 178;
    }
  }
  return result;
}

void RGContextCreate()
{
}

void sub_1B6DBE590(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x10B0C4051C744FALL);
  _Unwind_Resume(a1);
}

CFX::RG::RenderGraphContext *RGContextDestroy(CFX::RG::RenderGraphContext *result)
{
  if (result)
  {
    CFX::RG::RenderGraphContext::~RenderGraphContext(result);
    JUMPOUT(0x1BA9B6D80);
  }
  return result;
}

uint64_t RGContextGetCrossFrameResourceManager(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t RGContextGetGPUResourceManager(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t RGContextGetStackAllocator(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t RGContextGetPerFrameAllocator(uint64_t a1)
{
  return *(void *)a1;
}

void RGContextCreatePersistentRenderGraph(CFX::RG::RenderGraphContext *a1)
{
  CFX::RG::RenderGraphContext::createPersistentRenderGraphBuilder(a1, &v1);
}

void sub_1B6DBE664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1B65F52C0(a10);
  }
  _Unwind_Resume(exception_object);
}

void RGContextReleasePersistentRenderGraph(uint64_t a1, uint64_t a2)
{
  CFX::RG::RenderGraphContext::release(a1, a2, &v2);
  if (v3) {
    sub_1B65F52C0(v3);
  }
}

uint64_t RGContextTryResolveTextureDescriptor@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t result = CFX::RG::RenderGraphContext::tryResolveTextureDescriptor(a1, a2, a4);
  *a3 = result;
  return result;
}

BOOL RGBuilderIsNull(uint64_t a1)
{
  return a1 == 0;
}

uint64_t RGBuilderGetAllocator(uint64_t a1)
{
  return *(void *)a1;
}

CFX::RG::Resource *RGBuilderCreateTexture(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v6, a3);
  return sub_1B63CFDE4(a1, a2, v6);
}

CFX::RG::Resource *RGBuilderCreateTexture(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  long long v3 = a3[1];
  v11[0] = *a3;
  v11[1] = v3;
  long long v4 = a3[2];
  long long v5 = a3[3];
  long long v6 = a3[5];
  v11[4] = a3[4];
  v11[5] = v6;
  v11[2] = v4;
  v11[3] = v5;
  long long v7 = a3[6];
  long long v8 = a3[7];
  long long v9 = a3[9];
  v11[8] = a3[8];
  v11[9] = v9;
  v11[6] = v7;
  v11[7] = v8;
  return sub_1B63CFDE4(a1, a2, v11);
}

CFX::RG::Resource *RGBuilderCreateCopy(uint64_t *a1, uint64_t a2, uint64_t a3, CFX::RG::Pass *a4, _OWORD *a5)
{
  long long v9 = a5[1];
  v22[0] = *a5;
  v22[1] = v9;
  long long v10 = a5[2];
  long long v11 = a5[3];
  long long v12 = a5[5];
  v22[4] = a5[4];
  v22[5] = v12;
  v22[2] = v10;
  v22[3] = v11;
  long long v13 = a5[6];
  long long v14 = a5[7];
  long long v15 = a5[9];
  v22[8] = a5[8];
  v22[9] = v15;
  v22[6] = v13;
  v22[7] = v14;
  __int16 v16 = sub_1B63CFDE4(a1, a2, v22);
  *(void *)&long long v19 = a3;
  DWORD2(v19) = 0;
  char v20 = v16;
  uint64_t v21 = 0x100000000;
  CopyPass = (uint64_t *)CFX::RG::makeCopyPass(a1, a2, &v19);
  if (a4) {
    CFX::RG::Pass::dependsOn(CopyPass, a4);
  }
  return v16;
}

CFX::RG::RenderGraphBuilder *RGBuilderCreateCopyIfNeeded(CFX::RG *a1, uint64_t a2, CFX::RG::RenderGraphBuilder *a3, CFX::RG::Resource *a4, uint64_t a5)
{
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v10, a5);
  return CFX::RG::copyIfNeeded_r(a1, a3, a4, (CFX::RG::Pass *)v10, 0, v8);
}

CFX::RG::RenderGraphBuilder *RGBuilderCreateCopyIfNeeded(CFX::RG *a1, int a2, CFX::RG::RenderGraphBuilder *a3, CFX::RG::Resource *a4, CFX::RG::Pass *a5, const char *a6)
{
  return CFX::RG::copyIfNeeded_r(a1, a3, a4, a5, 0, a6);
}

CFX::RG::Resource *RGBuilderCreateReference(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  long long v3 = a3[1];
  v11[0] = *a3;
  v11[1] = v3;
  long long v4 = a3[2];
  long long v5 = a3[3];
  long long v6 = a3[5];
  v11[4] = a3[4];
  v11[5] = v6;
  v11[2] = v4;
  v11[3] = v5;
  long long v7 = a3[6];
  long long v8 = a3[7];
  long long v9 = a3[9];
  v11[8] = a3[8];
  v11[9] = v9;
  v11[6] = v7;
  v11[7] = v8;
  return sub_1B63CFDE4(a1, a2, v11);
}

CFX::RG::Resource *RGBuilderCreateExternalBuffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11 = a5;
  id v12 = a6;
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v15, a3, a4, v11, v12);
  long long v13 = sub_1B63FB710(a1, a2, v15);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc((id *)v15);

  return v13;
}

void sub_1B6DBE9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a9);

  _Unwind_Resume(a1);
}

CFX::RG::Resource *RGBuilderCreateExternalTexture(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a5;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v13, a3);
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v14, v13, v9, v10);
  id v11 = sub_1B63FB710(a1, a2, (long long *)v14);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v14);

  return v11;
}

void sub_1B6DBEA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a29);

  _Unwind_Resume(a1);
}

uint64_t sub_1B6DBEA84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v13 = a2;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  char v10 = a5;
  id v9 = a6;
  uint64_t v7 = sub_1B6DBEB00(a1, &v13, &v10, &v12, &v11, &v9);

  return v7;
}

void sub_1B6DBEAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B6DBEB00(uint64_t *a1, uint64_t *a2, char *a3, uint64_t *a4, uint64_t *a5, void **a6)
{
  uint64_t v10 = a1[1];
  v12[0] = *a1;
  v12[1] = v10;
  v12[0] = (uint64_t)sub_1B6DBFD94(v12[0], v10, v12, a2, a3, a4, a5, a6);
  sub_1B63C88CC(a1 + 18, v12);
  return v12[0];
}

uint64_t RGBuilderCreateRenderPass(uint64_t *a1, const char *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = strlen(a2);
  if (a2)
  {
    unint64_t v7 = 0xC6A4A7935BD1E995 * v6;
    if (v6 >= 8)
    {
      uint64_t v10 = v6 >> 3;
      long long v8 = (unsigned __int8 *)&a2[8 * v10];
      uint64_t v11 = 8 * v10;
      uint64_t v12 = a2;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 += 8;
        unint64_t v7 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))) ^ v7);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      long long v8 = (unsigned __int8 *)a2;
    }
    switch(v6 & 7)
    {
      case 1u:
        goto LABEL_14;
      case 2u:
        goto LABEL_13;
      case 3u:
        goto LABEL_12;
      case 4u:
        goto LABEL_11;
      case 5u:
        goto LABEL_10;
      case 6u:
        goto LABEL_9;
      case 7u:
        v7 ^= (unint64_t)v8[6] << 48;
LABEL_9:
        v7 ^= (unint64_t)v8[5] << 40;
LABEL_10:
        v7 ^= (unint64_t)v8[4] << 32;
LABEL_11:
        v7 ^= (unint64_t)v8[3] << 24;
LABEL_12:
        v7 ^= (unint64_t)v8[2] << 16;
LABEL_13:
        v7 ^= (unint64_t)v8[1] << 8;
LABEL_14:
        unint64_t v7 = 0xC6A4A7935BD1E995 * (v7 ^ *v8);
        break;
      default:
        break;
    }
    unint64_t v9 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v14 = sub_1B6DBEA84(a1, (uint64_t)a2, v9, 0, 3, v5);

  return v14;
}

void sub_1B6DBECA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RGBuilderCreateComputePass(uint64_t *a1, const char *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = strlen(a2);
  if (a2)
  {
    unint64_t v7 = 0xC6A4A7935BD1E995 * v6;
    if (v6 >= 8)
    {
      uint64_t v10 = v6 >> 3;
      long long v8 = (unsigned __int8 *)&a2[8 * v10];
      uint64_t v11 = 8 * v10;
      uint64_t v12 = a2;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 += 8;
        unint64_t v7 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))) ^ v7);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      long long v8 = (unsigned __int8 *)a2;
    }
    switch(v6 & 7)
    {
      case 1u:
        goto LABEL_14;
      case 2u:
        goto LABEL_13;
      case 3u:
        goto LABEL_12;
      case 4u:
        goto LABEL_11;
      case 5u:
        goto LABEL_10;
      case 6u:
        goto LABEL_9;
      case 7u:
        v7 ^= (unint64_t)v8[6] << 48;
LABEL_9:
        v7 ^= (unint64_t)v8[5] << 40;
LABEL_10:
        v7 ^= (unint64_t)v8[4] << 32;
LABEL_11:
        v7 ^= (unint64_t)v8[3] << 24;
LABEL_12:
        v7 ^= (unint64_t)v8[2] << 16;
LABEL_13:
        v7 ^= (unint64_t)v8[1] << 8;
LABEL_14:
        unint64_t v7 = 0xC6A4A7935BD1E995 * (v7 ^ *v8);
        break;
      default:
        break;
    }
    unint64_t v9 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v14 = sub_1B6DBEA84(a1, (uint64_t)a2, v9, 0, 4, v5);

  return v14;
}

void sub_1B6DBEE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RGBuilderCreateBlitPass(uint64_t *a1, const char *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = strlen(a2);
  if (a2)
  {
    unint64_t v7 = 0xC6A4A7935BD1E995 * v6;
    if (v6 >= 8)
    {
      uint64_t v10 = v6 >> 3;
      long long v8 = (unsigned __int8 *)&a2[8 * v10];
      uint64_t v11 = 8 * v10;
      uint64_t v12 = a2;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 += 8;
        unint64_t v7 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))) ^ v7);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      long long v8 = (unsigned __int8 *)a2;
    }
    switch(v6 & 7)
    {
      case 1u:
        goto LABEL_14;
      case 2u:
        goto LABEL_13;
      case 3u:
        goto LABEL_12;
      case 4u:
        goto LABEL_11;
      case 5u:
        goto LABEL_10;
      case 6u:
        goto LABEL_9;
      case 7u:
        v7 ^= (unint64_t)v8[6] << 48;
LABEL_9:
        v7 ^= (unint64_t)v8[5] << 40;
LABEL_10:
        v7 ^= (unint64_t)v8[4] << 32;
LABEL_11:
        v7 ^= (unint64_t)v8[3] << 24;
LABEL_12:
        v7 ^= (unint64_t)v8[2] << 16;
LABEL_13:
        v7 ^= (unint64_t)v8[1] << 8;
LABEL_14:
        unint64_t v7 = 0xC6A4A7935BD1E995 * (v7 ^ *v8);
        break;
      default:
        break;
    }
    unint64_t v9 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v14 = sub_1B6DBEA84(a1, (uint64_t)a2, v9, 0, 2, v5);

  return v14;
}

void sub_1B6DBEF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RGBuilderCreateCustomPass(uint64_t *a1, const char *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = strlen(a2);
  if (a2)
  {
    unint64_t v7 = 0xC6A4A7935BD1E995 * v6;
    if (v6 >= 8)
    {
      uint64_t v10 = v6 >> 3;
      long long v8 = (unsigned __int8 *)&a2[8 * v10];
      uint64_t v11 = 8 * v10;
      uint64_t v12 = a2;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 += 8;
        unint64_t v7 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))) ^ v7);
        v11 -= 8;
      }
      while (v11);
    }
    else
    {
      long long v8 = (unsigned __int8 *)a2;
    }
    switch(v6 & 7)
    {
      case 1u:
        goto LABEL_14;
      case 2u:
        goto LABEL_13;
      case 3u:
        goto LABEL_12;
      case 4u:
        goto LABEL_11;
      case 5u:
        goto LABEL_10;
      case 6u:
        goto LABEL_9;
      case 7u:
        v7 ^= (unint64_t)v8[6] << 48;
LABEL_9:
        v7 ^= (unint64_t)v8[5] << 40;
LABEL_10:
        v7 ^= (unint64_t)v8[4] << 32;
LABEL_11:
        v7 ^= (unint64_t)v8[3] << 24;
LABEL_12:
        v7 ^= (unint64_t)v8[2] << 16;
LABEL_13:
        v7 ^= (unint64_t)v8[1] << 8;
LABEL_14:
        unint64_t v7 = 0xC6A4A7935BD1E995 * (v7 ^ *v8);
        break;
      default:
        break;
    }
    unint64_t v9 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v14 = sub_1B6DBEA84(a1, (uint64_t)a2, v9, 0, 1, v5);

  return v14;
}

void sub_1B6DBF0D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RGResourceIdentifierFinalColor(CFX::RG::ResourceIdentifier *a1)
{
  uint64_t v2 = CFX::RG::ResourceIdentifier::finalColor(a1);
  return CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v2);
}

uint64_t RGResourceIdentifierMake(NSString *a1)
{
  uint64_t v1 = a1;
  id v5 = (const char *)objc_msgSend_UTF8String(v1, v2, v3, v4);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)v8, v5);
  uint64_t v6 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)v8);

  return v6;
}

void sub_1B6DBF188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t RGResourceIdentifierMake(char *a1)
{
  CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)v2, a1);
  return CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)v2);
}

BOOL RGResourceIdentifierMatch(uint64_t a1, uint64_t a2)
{
  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v5, a1);
  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v4, a2);
  return CFX::RG::ResourceIdentifier::match((unsigned __int16 *)&v5, v4);
}

id RGResourceIdentifierGetPath(uint64_t a1)
{
  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v8, a1);
  uint64_t v1 = NSString;
  CFX::RG::ResourceIdentifier::pathName((CFX::RG::ResourceIdentifier *)&v8, __p);
  if (v7 >= 0) {
    objc_msgSend_stringWithUTF8String_(v1, v2, (uint64_t)__p, v3);
  }
  else {
  uint64_t v4 = objc_msgSend_stringWithUTF8String_(v1, v2, (uint64_t)__p[0], v3);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_1B6DBF2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RGNullTextureReferenceDescriptor()
{
  return 0;
}

void RGTextureReferenceCreate(void)
{
}

void sub_1B6DBF304(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x1000C404CD035F9);
  _Unwind_Resume(a1);
}

void RGTextureReferenceDescriptorCreate()
{
}

void sub_1B6DBF370(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x1000C404CD035F9);
  _Unwind_Resume(a1);
}

void RGTextureReferenceDescriptorCreate(const char *a1, float a2)
{
}

void sub_1B6DBF404(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x1000C404CD035F9);
  _Unwind_Resume(a1);
}

void RGTextureReferenceDescriptorCreate(uint64_t a1, float a2)
{
  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v2, a1);
  operator new();
}

void sub_1B6DBF490(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x1000C404CD035F9);
  _Unwind_Resume(a1);
}

uint64_t RGTextureReferenceDescriptorDestroy(uint64_t result)
{
  if (result) {
    JUMPOUT(0x1BA9B6D80);
  }
  return result;
}

float RGTextureReferenceDescriptorGetSizeFactor(uint64_t a1)
{
  return *(float *)(a1 + 144);
}

uint64_t RGTextureReferenceDescriptorSetSizeFactor(uint64_t result, float a2)
{
  *(float *)(result + 144) = a2;
  return result;
}

uint64_t RGTextureReferenceDescriptorGetWidth(uint64_t result)
{
  if (!*(unsigned char *)(result + 2)) {
    return 0;
  }
  return result;
}

uint64_t RGTextureReferenceDescriptorSetWidth(uint64_t result, __int16 a2)
{
  *(_WORD *)uint64_t result = a2;
  *(unsigned char *)(result + 2) = 1;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearWidth(uint64_t result)
{
  if (*(unsigned char *)(result + 2)) {
    *(unsigned char *)(result + 2) = 0;
  }
  return result;
}

uint64_t RGTextureReferenceDescriptorGetHeight(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 6)) {
    return a1 + 4;
  }
  else {
    return 0;
  }
}

uint64_t RGTextureReferenceDescriptorSetHeight(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 4) = a2;
  *(unsigned char *)(result + 6) = 1;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearHeight(uint64_t result)
{
  if (*(unsigned char *)(result + 6)) {
    *(unsigned char *)(result + 6) = 0;
  }
  return result;
}

uint64_t RGTextureReferenceDescriptorGetDepth(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t RGTextureReferenceDescriptorSetDepth(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 8) = a2;
  *(unsigned char *)(result + 10) = 1;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearDepth(uint64_t result)
{
  if (*(unsigned char *)(result + 10)) {
    *(unsigned char *)(result + 10) = 0;
  }
  return result;
}

uint64_t RGTextureReferenceDescriptorGetSampleCount(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 19)) {
    return a1 + 18;
  }
  else {
    return 0;
  }
}

uint64_t RGTextureReferenceDescriptorSetSampleCount(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = a2 | 0x100;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearSampleCount(uint64_t result)
{
  if (*(unsigned char *)(result + 19)) {
    *(unsigned char *)(result + 19) = 0;
  }
  return result;
}

uint64_t RGTextureReferenceDescriptorGetPixelFormat(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t RGTextureReferenceDescriptorSetPixelFormat(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = 1;
  return result;
}

uint64_t RGTextureReferenceDescriptorClearPixelFormat(uint64_t result)
{
  if (*(unsigned char *)(result + 32)) {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

uint64_t RGResourceGetBufferDesc(CFX::RG::Resource *a1)
{
  return *(void *)CFX::RG::Resource::bufferDesc(a1);
}

uint64_t RGNullResource()
{
  return 0;
}

BOOL RGResourceIsNull(uint64_t a1)
{
  return a1 == 0;
}

uint64_t RGNullPass()
{
  return 0;
}

uint64_t RGPassName(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t RGPassClassIdentifier(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t RGPassInstanceIdentifier(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t RGPassGetKind(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 344);
}

uint64_t RGPassRendersTo(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  return CFX::RG::Pass::renderTo(a1, a2, a3 | (unint64_t)(a4 << 32), a5);
}

uint64_t RGPassGetFirstOutput(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 168)) {
    return **(void **)(a1 + 176);
  }
  else {
    return 0;
  }
}

uint64_t RGPassGetOutputAtIndex(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 176) + 8 * a2);
}

CFX::RG::Resource *RGPassGetOutputNamed(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 168);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(CFX::RG::Resource ***)(a1 + 176);
  uint64_t v5 = 8 * v2;
  while (1)
  {
    uint64_t v6 = *v4;
    char v7 = (const char *)CFX::RG::Resource::name(*v4);
    if (!strcmp(v7, a2)) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return v6;
}

uint64_t RGPassGetOutputCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t RGPassGetFirstInput(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 72)) {
    return **(void **)(a1 + 80);
  }
  else {
    return 0;
  }
}

uint64_t RGPassGetInputAtIndex(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 80) + 8 * a2);
}

CFX::RG::Resource *RGPassGetInputNamed(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(CFX::RG::Resource ***)(a1 + 80);
  uint64_t v5 = 8 * v2;
  while (1)
  {
    uint64_t v6 = *v4;
    char v7 = (const char *)CFX::RG::Resource::name(*v4);
    if (!strcmp(v7, a2)) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return v6;
}

uint64_t RGPassGetInputCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t RGCrossFrameResourceGetUnusedFrameCount(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t RGCrossFrameResourceGetData(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

void RGCrossFrameResourceManagerCreate(CFX::CrossFrameResourceManager *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id aBlock = a5;
  uint64_t v8 = sub_1B6DBF838(a1, a2);
  *(void *)(v8 + 24) = a3;
  unint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = *(void **)(v8 + 16);
  *(void *)(v8 + 16) = v9;
}

void sub_1B6DBF824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B6DBF838(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

void RGGPUResourceManagerGetBuffer(CFX::GPUResourceManager *a1, const CFX::RG::Resource *a2, void *a3, id *a4, id *a5)
{
  CFX::GPUResourceManager::getBuffer(a1, a2, v9);
  *a3 = v9[0];
  *a4 = v9[2];
  id v8 = v9[0];
  *a5 = v9[1];
}

uint64_t RGGPUResourceManagerGetDevice(CFX::GPUResourceManager *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)CFX::GPUResourceManager::allocator(a1) + 40);

  return v1();
}

id RGArgumentsGetBlitEncoder(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id RGArgumentsGetComputeEncoder(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id RGArgumentsGetRenderEncoder(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

id RGArgumentsGetRenderPassDescriptor(uint64_t a1)
{
  return *(id *)(a1 + 16);
}

uint64_t RGBufferDescriptorMakeDefault()
{
  return 0;
}

BOOL RGBufferDescriptorIsValid(uint64_t a1)
{
  return a1 != 0;
}

double RGTextureDescriptorMake1D@<D0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 4) = 65537;
  *(_WORD *)(a3 + 8) = 257;
  *(unsigned char *)(a3 + 10) = 1;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 84148994;
  *(_WORD *)a3 = a1;
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = xmmword_1B6E95940;
  *(void *)(a3 + 16) = a2;
  return result;
}

double RGTextureDescriptorMake2D@<D0>(__int16 a1@<W0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)(a4 + 72) = 0;
  *(_DWORD *)(a4 + 4) = 65537;
  *(_WORD *)(a4 + 8) = 257;
  *(unsigned char *)(a4 + 10) = 1;
  *(int64x2_t *)(a4 + 24) = vdupq_n_s64(2uLL);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_DWORD *)(a4 + 72) = 84148994;
  *(_WORD *)a4 = a1;
  *(_WORD *)(a4 + 2) = a2;
  *(void *)(a4 + 16) = a3;
  return result;
}

uint64_t RGTextureDescriptorMake2DMultisampledIfNeeded@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(void *)(a5 + 72) = 0;
  *(_DWORD *)(a5 + 4) = 65537;
  *(unsigned char *)(a5 + 8) = 1;
  *(unsigned char *)(a5 + 10) = 1;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_DWORD *)(a5 + 72) = 84148994;
  *(_WORD *)a5 = result;
  *(_WORD *)(a5 + 2) = a2;
  uint64_t v5 = 4;
  if (a4 <= 1) {
    uint64_t v5 = 2;
  }
  *(void *)(a5 + 24) = v5;
  *(void *)(a5 + 32) = 2;
  *(void *)(a5 + 16) = a3;
  *(unsigned char *)(a5 + 9) = a4;
  return result;
}

double RGTextureDescriptorMake3D@<D0>(__int16 a1@<W0>, __int16 a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 8) = 0u;
  *(void *)(a5 + 72) = 0;
  *(_WORD *)(a5 + 6) = 1;
  *(_WORD *)(a5 + 8) = 257;
  *(unsigned char *)(a5 + 10) = 1;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_DWORD *)(a5 + 72) = 84148994;
  *(_WORD *)a5 = a1;
  *(_WORD *)(a5 + 2) = a2;
  *(_WORD *)(a5 + 4) = a3;
  *(void *)&double result = 7;
  *(_OWORD *)(a5 + 24) = xmmword_1B6ECFD00;
  *(void *)(a5 + 16) = a4;
  return result;
}

double RGTextureDescriptorMakeCube@<D0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 4) = 65537;
  *(_WORD *)(a3 + 8) = 257;
  *(unsigned char *)(a3 + 10) = 1;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 84148994;
  *(_WORD *)a3 = a1;
  *(_WORD *)(a3 + 2) = a1;
  *(void *)&double result = 5;
  *(_OWORD *)(a3 + 24) = xmmword_1B6ECFD10;
  *(void *)(a3 + 16) = a2;
  return result;
}

BOOL RGTextureDescriptorIsValid(uint64_t a1)
{
  return *(_WORD *)a1 && *(_WORD *)(a1 + 2) && *(_WORD *)(a1 + 4) && *(void *)(a1 + 16) != 0;
}

uint64_t RGTextureDescriptorByDiscardingMultisampling@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(result + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(result + 32);
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(result + 64);
  *(unsigned char *)(a2 + 9) = 1;
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = 3;
  if (v4 != 8) {
    uint64_t v5 = *(void *)(result + 24);
  }
  BOOL v6 = v4 == 4;
  uint64_t v7 = 2;
  if (!v6) {
    uint64_t v7 = v5;
  }
  *(void *)(a2 + 24) = v7;
  return result;
}

uint64_t RGTextureDescriptorByPromotingToMultisampledIfNeeded@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 < 2 || ((v3 = *(void *)(result + 24), v3 != 8) ? (BOOL v4 = v3 == 4) : (BOOL v4 = 1), v4))
  {
    long long v5 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 48) = v5;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(result + 64);
    long long v6 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v6;
  }
  else
  {
    long long v7 = *(_OWORD *)(result + 16);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    long long v8 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(result + 64);
    uint64_t v9 = 8;
    if (v3 != 3) {
      uint64_t v9 = v3;
    }
    *(unsigned char *)(a3 + 9) = a2;
    BOOL v4 = v3 == 2;
    uint64_t v10 = 4;
    if (!v4) {
      uint64_t v10 = v9;
    }
    *(void *)(a3 + 24) = v10;
  }
  return result;
}

void RGTextureDescriptorFromMTLTextureDescriptor(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  id v49 = v3;
  *(_WORD *)a2 = objc_msgSend_width(v3, v4, v5, v6);
  *(_WORD *)(a2 + 2) = objc_msgSend_height(v49, v7, v8, v9);
  *(_WORD *)(a2 + 4) = objc_msgSend_depth(v49, v10, v11, v12);
  *(_WORD *)(a2 + 6) = objc_msgSend_arrayLength(v49, v13, v14, v15);
  *(unsigned char *)(a2 + 8) = objc_msgSend_mipmapLevelCount(v49, v16, v17, v18);
  *(unsigned char *)(a2 + 9) = objc_msgSend_sampleCount(v49, v19, v20, v21);
  *(unsigned char *)(a2 + 10) = objc_msgSend_allowGPUOptimizedContents(v49, v22, v23, v24);
  *(void *)(a2 + 16) = objc_msgSend_pixelFormat(v49, v25, v26, v27);
  *(void *)(a2 + 24) = objc_msgSend_textureType(v49, v28, v29, v30);
  *(void *)(a2 + 32) = objc_msgSend_storageMode(v49, v31, v32, v33);
  *(void *)(a2 + 40) = objc_msgSend_usage(v49, v34, v35, v36);
  *(void *)(a2 + 48) = objc_msgSend_cpuCacheMode(v49, v37, v38, v39);
  *(void *)(a2 + 56) = objc_msgSend_compressionType(v49, v40, v41, v42);
  *(void *)(a2 + 64) = objc_msgSend_hazardTrackingMode(v49, v43, v44, v45);
  *(_DWORD *)(a2 + 72) = objc_msgSend_swizzle(v49, v46, v47, v48);
}

void sub_1B6DBFD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t RGTextureDescriptorComputeMaxMipLevelCount(unsigned __int16 *a1)
{
  unsigned int v1 = *a1;
  if (v1 <= a1[1]) {
    unsigned int v1 = a1[1];
  }
  return (vcvtms_s32_f32(log2f((float)v1)) + 1);
}

void *sub_1B6DBFD94(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char *a5, uint64_t *a6, uint64_t *a7, void **a8)
{
  v16[0] = a1;
  v16[1] = a2;
  uint64_t v14 = (void *)sub_1B63C8330(v16, 0x170u, 8u);
  return sub_1B6DBFE14(v14, *a3, a3[1], *a4, *a5, *a6, *a7, *a8);
}

void *sub_1B6DBFE14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v15 = a8;
  CFX::RG::Pass::Pass((uint64_t)a1, a2, a3, a4, a5, a6, a7);
  *a1 = &unk_1F0FB0380;
  a1[45] = 0;
  __int16 v16 = _Block_copy(v15);
  uint64_t v17 = (void *)a1[45];
  a1[45] = v16;

  return a1;
}

void sub_1B6DBFEC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B6DBFED8(id *a1)
{
  CFX::RG::Pass::~Pass((CFX::RG::Pass *)a1);
}

void sub_1B6DBFF14(id *a1)
{
  CFX::RG::Pass::~Pass((CFX::RG::Pass *)a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DBFF64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 360) + 16))();
}

void sub_1B6DBFF8C(uint64_t a1)
{
  sub_1B6DBFFC4(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DBFFC4(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2038;
  (*(void (**)(void))(*(void *)(a1 + 16) + 16))();

  return a1;
}

void sub_1B6DC0020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CFX::RG::RenderGraphProvider::addSubgraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_1B63D4868(a1 + 8, &v2);
}

unint64_t CFX::RG::RenderGraphProvider::hash(CFX::RG::RenderGraphProvider *this, CFX::RG::RenderGraphContext *a2)
{
  prof_beginFlame((uint64_t)"hash", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm", 47);
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)*((void *)this + 2);
    uint64_t v7 = 8 * v4;
    do
    {
      uint64_t v8 = *v6;
      uint64_t v12 = 0;
      uint64_t v13 = &v14;
      uint64_t v9 = (*(uint64_t (**)(uint64_t, CFX::RG::RenderGraphContext *, uint64_t *))(*(void *)v8 + 16))(v8, a2, &v12);
      if (HIDWORD(v12)) {
        free(v13);
      }
      unint64_t v5 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v5 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v5)))) >> 47));
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    unint64_t v5 = 0;
  }
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v5 ^ ((0x9DDFEA08EB382D69 * (*((void *)this + 6) ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * (*((void *)this + 6) ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (*((void *)this + 6) ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (*((void *)this + 6) ^ v5)))) >> 47));
  prof_endFlame();
  return v10;
}

void sub_1B6DC01F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, void *a11)
{
  if (a10) {
    free(a11);
  }
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RenderGraphProvider::showImGui(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(this + 16);
    uint64_t v3 = 8 * v1;
    do
    {
      uint64_t v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

BOOL sub_1B6DC026C(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48020, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_1E9E48020);
    a1 = v4;
    if (v3)
    {
      byte_1E9E48018 = 1;
      __cxa_guard_release(&qword_1E9E48020);
      a1 = v4;
    }
  }
  if (*(unsigned char *)(a1 + 344) != 3) {
    return 0;
  }
  uint64_t v1 = 0x63F02EA9DD53FF01;
  if (!byte_1E9E48018) {
    uint64_t v1 = 0;
  }
  return *(void *)(a1 + 40) == v1;
}

CFX::RG *CFX::RG::RenderGraphProvider::encodeIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  prof_beginFlame((uint64_t)"encodeIfNeeded", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm", 71);
  if (*(unsigned char *)(a1 + 40))
  {
    CFX::RG::RenderGraphContext::setCurrentBuilder(a2, a3);
    uint64_t v53 = a4;
    unsigned int v54 = *(unsigned int **)(a2 + 16);
    uint64_t v57 = (CFX::RG::RenderGraphContext *)a2;
    CStackAllocatorPushFrame(v54);
    uint64_t v72 = *(void *)(a2 + 16);
    uint64_t v73 = 0x1000000000;
    unsigned int v74 = &v75;
    uint64_t v67 = v72;
    sub_1B6DBB270((uint64_t)&v67, 32);
    uint64_t v63 = *(void *)(a2 + 16);
    uint64_t v64 = 0x1000000000;
    unsigned int v65 = v66;
    memset(v66, 0, sizeof(v66));
    v61[0] = v63;
    sub_1B66025E0((uint64_t)v61, 32);
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    if (v8)
    {
      uint64_t v9 = *(uint64_t **)(a1 + 16);
      unsigned int v55 = &v9[v8];
      do
      {
        uint64_t v56 = v9;
        uint64_t v10 = *v9;
        prof_beginFlame(*(void *)(*v9 + 16), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm", 103);
        v76.n128_u64[0] = 0;
        v76.n128_u64[1] = (unint64_t)&v77;
        (*(void (**)(uint64_t, CFX::RG::RenderGraphContext *, uint64_t, __n128 *))(*(void *)v10 + 24))(v10, v57, a3, &v76);
        if (v76.n128_u32[1]) {
          free((void *)v76.n128_u64[1]);
        }
        prof_endFlame();
        uint64_t v11 = *(unsigned int *)(a3 + 160);
        if (v11)
        {
          uint64_t v12 = *(unint64_t **)(a3 + 168);
          uint64_t v13 = &v12[v11];
          do
          {
            unint64_t v59 = 0;
            unint64_t v14 = *v12;
            unint64_t v59 = v14;
            unint64_t v15 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v14) ^ ((0x9DDFEA08EB382D69 * v14) >> 47));
            uint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
            unsigned int v17 = (v62 - 1) & v16;
            unsigned int v18 = *(unsigned __int16 *)(v61[3] + 2 * v17);
            if (v18 < 2) {
              goto LABEL_12;
            }
            while ((v18 & 2) == 0 || v16 != *(void *)(v61[1] + 8 * v17))
            {
              ++v17;
              BOOL v19 = v18 >= 4;
              v18 >>= 1;
              if (!v19) {
                goto LABEL_12;
              }
            }
            if (!v61[2])
            {
LABEL_12:
              v76.n128_u64[0] = v14;
              sub_1B6DBA904((uint64_t)v61, v16, &v76);
              sub_1B64EA528(&v72, &v59);
            }
            ++v12;
          }
          while (v12 != v13);
        }
        CFX::RG::RenderGraphBuilder::initPassesAndResolveReferences((CFX::RG::RenderGraphBuilder *)a3, v57);
        if (v73)
        {
          uint64_t v20 = v74;
          uint64_t v21 = &v74[v73];
          do
          {
            uint64_t v22 = *v20;
            if (sub_1B6DC026C(*v20) && v64)
            {
              uint64_t v23 = 16 * v64;
              uint64_t v24 = (CFX::RG::Resource **)v65 + 1;
              do
              {
                CFX::RG::Pass::readFrom((uint64_t *)v22, *v24);
                CFX::RG::Pass::dependsOn((uint64_t *)v22, *(v24 - 1));
                v24 += 2;
                v23 -= 16;
              }
              while (v23);
            }
            uint64_t v25 = *(unsigned int *)(v22 + 72);
            if (v25)
            {
              uint64_t v26 = *(void **)(v22 + 80);
              uint64_t v27 = &v26[v25];
              do
              {
                unint64_t v28 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v26) ^ ((0x9DDFEA08EB382D69 * *v26) >> 47));
                unint64_t v29 = 0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47));
                unsigned int v30 = (v71 - 1) & v29;
                unsigned int v31 = *(unsigned __int16 *)(v70 + 2 * v30);
                if (v31 >= 2)
                {
                  while ((v31 & 2) == 0 || v29 != *(void *)(v68 + 8 * v30))
                  {
                    ++v30;
                    BOOL v19 = v31 >= 4;
                    v31 >>= 1;
                    if (!v19) {
                      goto LABEL_29;
                    }
                  }
                  if (v69)
                  {
                    uint64_t v32 = *(CFX::RG::Pass **)(v69 + 16 * v30);
                    if ((CFX::RG::Pass *)v22 != v32) {
                      CFX::RG::Pass::dependsOn((uint64_t *)v22, v32);
                    }
                  }
                }
LABEL_29:
                ++v26;
              }
              while (v26 != v27);
            }
            uint64_t v33 = *(unsigned int *)(v22 + 168);
            if (v33)
            {
              uint64_t v34 = *(CFX::RG::Resource ***)(v22 + 176);
              uint64_t v35 = &v34[v33];
              do
              {
                unint64_t v36 = 0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * (void)*v34) ^ ((0x9DDFEA08EB382D69 * (unint64_t)*v34) >> 47));
                unint64_t v37 = 0x9DDFEA08EB382D69 * (v36 ^ (v36 >> 47));
                unsigned int v38 = (v71 - 1) & v37;
                unsigned int v39 = *(unsigned __int16 *)(v70 + 2 * v38);
                if (v39 >= 2)
                {
                  while ((v39 & 2) == 0 || v37 != *(void *)(v68 + 8 * v38))
                  {
                    ++v38;
                    BOOL v19 = v39 >= 4;
                    v39 >>= 1;
                    if (!v19) {
                      goto LABEL_40;
                    }
                  }
                  uint64_t v40 = v69;
                  if (v69)
                  {
                    uint64_t v41 = (unsigned char *)CFX::RG::Pass::renderTargetInfo((CFX::RG::Pass *)v22, *v34);
                    if (v41)
                    {
                      if (*v41)
                      {
                        uint64_t v42 = *(CFX::RG::Pass **)(v40 + 16 * v38);
                        if ((CFX::RG::Pass *)v22 != v42) {
                          CFX::RG::Pass::dependsOn((uint64_t *)v22, v42);
                        }
                      }
                    }
                  }
                }
LABEL_40:
                ++v34;
              }
              while (v34 != v35);
            }
            ++v20;
          }
          while (v20 != v21);
        }
        LODWORD(v73) = 0;
        (*(void (**)(unint64_t *__return_ptr, uint64_t, CFX::RG::RenderGraphContext *))(*(void *)v10 + 8))(&v59, v10, v57);
        if (v59)
        {
          id v43 = (uint64_t *)v60;
          uint64_t v44 = 8 * v59;
          do
          {
            uint64_t PublishedResource = (CFX::RG *)CFX::RG::RenderGraphBuilder::findPublishedResource(a3, *v43);
            v58.n128_u64[0] = (unint64_t)PublishedResource;
            v58.n128_u64[1] = (unint64_t)v46;
            if (PublishedResource)
            {
              if (CFX::RG::isPublishResourcePass(PublishedResource, v46))
              {
                sub_1B6DB23F0((uint64_t)&v63, &v58);
              }
              else
              {
                unint64_t v47 = 0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * v58.n128_u64[1]) ^ ((0x9DDFEA08EB382D69 * v58.n128_u64[1]) >> 47));
                __n128 v76 = v58;
                sub_1B6DC091C((uint64_t)&v67, 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47)), &v76);
              }
            }
            ++v43;
            v44 -= 8;
          }
          while (v44);
        }
        if (HIDWORD(v59)) {
          free(v60);
        }
        uint64_t v9 = v56 + 1;
      }
      while (v56 + 1 != v55);
    }
    CStackAllocatorPopFrame((uint64_t)v54);
    uint64_t v48 = (CFX::RG *)CFX::RG::RenderGraphBuilder::build(a3, v57, v53);
    if (v48)
    {
      id v49 = (unsigned int *)*((void *)v57 + 2);
      CStackAllocatorPushFrame(v49);
      uint64_t v48 = CFX::RG::OptimiseRenderGraph(v48, (CFX::RG::RenderGraph *)a3, v57, v50);
      CStackAllocatorPopFrame((uint64_t)v49);
      if (v48) {
        CFX::RG::FreezeRenderGraph((CFX::RG *)a3, v48, v51);
      }
    }
    CFX::RG::RenderGraphContext::setCurrentBuilder((uint64_t)v57, 0);
  }
  else
  {
    uint64_t v48 = 0;
  }
  prof_endFlame();
  return v48;
}

void sub_1B6DC08A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, void *a19)
{
}

uint64_t sub_1B6DC091C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      unint64_t v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v15) = *(void *)(*(void *)(a1 + 8) + 8 * v21);
          *(_OWORD *)(v26 + 16 * v15) = *(_OWORD *)(v26 + 16 * v21);
          uint64_t v8 = *(void *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_OWORD *)(*(void *)(a1 + 16) + 16 * v21) = *a3;
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
      uint64_t v28 = *(void *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B6DC0B40(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(_OWORD *)(*(void *)(a1 + 16) + 16 * v10) = *a3;
  return result;
}

void sub_1B6DC0B40(uint64_t a1)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B6DBB270(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DC091C(a1, *v3, v2);
      }
      ++v3;
      v2 += 16;
      --v6;
    }
    while (v6);
  }
}

uint64_t RGMTLComputeCommandEncoderDispatchOnGrid2D(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = a4;
  unint64_t v8 = objc_msgSend_threadExecutionWidth(a2, (const char *)a2, a3, a4);
  unint64_t v15 = objc_msgSend_maxTotalThreadsPerThreadgroup(a2, v9, v10, v11);
  if (v4
    && (__int16 v16 = objc_msgSend_device(a2, v12, v13, v14),
        objc_msgSend_supportsFamily_(v16, v17, 3003, v18)))
  {
    long long v28 = *(_OWORD *)a3;
    uint64_t v29 = *(void *)(a3 + 16);
    v27[0] = v8;
    v27[1] = v15 / v8;
    v27[2] = 1;
    return objc_msgSend_dispatchThreads_threadsPerThreadgroup_(a1, v12, (uint64_t)&v28, (uint64_t)v27);
  }
  else
  {
    unint64_t v20 = *(void *)(a3 + 8);
    if (v8 >= *(void *)a3) {
      unint64_t v21 = *(void *)a3;
    }
    else {
      unint64_t v21 = v8;
    }
    if (v8 >= v20) {
      unint64_t v22 = *(void *)(a3 + 8);
    }
    else {
      unint64_t v22 = v8;
    }
    do
    {
      unint64_t v23 = v22;
      unint64_t v24 = v22 * v21;
      v22 >>= 1;
    }
    while (v24 > v15);
    v26[0] = (*(void *)a3 + v21 - 1) / v21;
    v26[1] = (v20 + v23 - 1) / v23;
    v26[2] = 1;
    v25[0] = v21;
    v25[1] = v23;
    v25[2] = 1;
    return objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(a1, v12, (uint64_t)v26, (uint64_t)v25);
  }
}

CFX::RG *CFX::RG::OptimiseRenderGraph(CFX::RG *this, CFX::RG::RenderGraph *a2, CFX::RG::RenderGraphBuilder *a3, CFX::RG::RenderGraphContext *a4)
{
  uint64_t v6 = this;
  uint64_t v13 = this;
  prof_beginFlame((uint64_t)"_OptimiseRenderGraph", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 768);
  if (!*(unsigned char *)CFX::RG::RenderGraphContext::optimisationParameters(a3))
  {
    unsigned int v12 = (unsigned int *)*((void *)a3 + 2);
    CStackAllocatorPushFrame(v12);
    int v7 = 0;
    do
    {
      if (*(unsigned char *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 2))
      {
        prof_beginFlame((uint64_t)"Merge render passes", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 782);
        int v8 = sub_1B6DC1EE8((uint64_t)v13, a2, (uint64_t *)a3, v7 != 0);
        if (v8)
        {
          do
          {
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v15 = 0;
            unsigned int v9 = (CFX::RG *)CFX::RG::RenderGraphBuilder::build((uint64_t)a2, a3, (uint64_t)__p);
            if (!v9) {
              abort();
            }
            if (SHIBYTE(v15) < 0) {
              operator delete(__p[0]);
            }
          }
          while ((sub_1B6DC1EE8((uint64_t)v9, a2, (uint64_t *)a3, v7 != 0) & 1) != 0);
          uint64_t v13 = v9;
        }
        prof_endFlame();
      }
      else
      {
        int v8 = 0;
      }
      if (*(unsigned char *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 3))
      {
        prof_beginFlame((uint64_t)"Merge compute passes", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 787);
        v8 |= sub_1B6DC25A0((uint64_t *)&v13, (uint64_t)a2, a3, (uint64_t (*)(uint64_t))sub_1B6DC2664);
        prof_endFlame();
      }
      if (*(unsigned char *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 1))
      {
        prof_beginFlame((uint64_t)"Remove copy passes", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 792);
        v8 |= sub_1B6DC25A0((uint64_t *)&v13, (uint64_t)a2, a3, (uint64_t (*)(uint64_t))sub_1B6DC28D4);
        prof_endFlame();
      }
      if (*(unsigned char *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 4))
      {
        prof_beginFlame((uint64_t)"Merge blit passes", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 797);
        char v10 = v8 | sub_1B6DC25A0((uint64_t *)&v13, (uint64_t)a2, a3, (uint64_t (*)(uint64_t))sub_1B6DC318C);
        prof_endFlame();
        if ((v10 & 1) == 0) {
          break;
        }
      }
      else if (!v8)
      {
        break;
      }
      ++v7;
    }
    while (*(unsigned char *)(CFX::RG::RenderGraphContext::optimisationParameters(a3) + 8));
    CStackAllocatorPopFrame((uint64_t)v12);
    uint64_t v6 = v13;
  }
  prof_endFlame();
  return v6;
}

void sub_1B6DC1940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void CFX::RG::AllocateResources(CFX::RG *this, CFX::RG::RenderGraph *a2, CFX::RG::RenderGraphContext *a3)
{
  prof_beginFlame((uint64_t)"_AllocateResources", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 911);
  uint64_t v6 = (unsigned int *)*((void *)a2 + 2);
  int v5 = (CFX::GPUResourceManager *)*((void *)a2 + 3);
  id v49 = a2;
  long long v50 = v6;
  CStackAllocatorPushFrame(v6);
  uint64_t v57 = v6;
  sub_1B6DBB270((uint64_t)&v57, 32);
  uint64_t v7 = *((unsigned int *)this + 64);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 33);
    uint64_t v45 = v8 + 32 * v7;
    uint64_t v47 = (uint64_t)v6;
    do
    {
      uint64_t v53 = v6;
      uint64_t v54 = 0x1000000000;
      unsigned int v55 = (CFX::RG::Resource **)&v56;
      uint64_t v9 = *(unsigned int *)(v8 + 16);
      if (v9)
      {
        uint64_t v46 = v8;
        char v10 = *(uint64_t **)(v8 + 24);
        uint64_t v48 = &v10[v9];
        do
        {
          uint64_t v11 = *v10;
          uint64_t v12 = *(unsigned int *)(*v10 + 168);
          if (v12)
          {
            uint64_t v13 = *(CFX::RG::Resource ***)(v11 + 176);
            uint64_t v14 = &v13[v12];
            do
            {
              long long v52 = 0;
              long long v52 = *v13;
              if (CFX::RG::Resource::type(v52) != 2)
              {
                uint64_t v15 = v52;
                char v16 = CFX::RG::Pass::renderTargetAccess((CFX::RG::Pass *)v11, v52);
                BOOL isManaged = CFX::RG::Resource::isManaged(v52);
                BOOL v18 = isManaged;
                unint64_t v19 = 0x9DDFEA08EB382D69
                    * ((0x9DDFEA08EB382D69 * (void)v15) ^ ((0x9DDFEA08EB382D69 * (unint64_t)v15) >> 47));
                uint64_t v20 = 0x9DDFEA08EB382D69 * (v19 ^ (v19 >> 47));
                if (v16)
                {
                  if (!isManaged)
                  {
                    int v22 = sub_1B6DC3C64(this, v11, (uint64_t)v52, (uint64_t *)&v50);
                    if (v22 >= 1)
                    {
                      unsigned int v23 = (v61 - 1) & v20;
                      unsigned int v24 = *(unsigned __int16 *)(v60 + 2 * v23);
                      if (v24 < 2)
                      {
LABEL_20:
                        uint64_t v26 = 0;
                      }
                      else
                      {
                        while ((v24 & 2) == 0 || v20 != *(void *)(v58 + 8 * v23))
                        {
                          ++v23;
                          BOOL v25 = v24 > 3;
                          v24 >>= 1;
                          if (!v25) {
                            goto LABEL_20;
                          }
                        }
                        uint64_t v26 = v59 + 16 * v23;
                      }
                      int v27 = *(_DWORD *)(v26 + 8);
                      if (v27 != 0x7FFFFFFF) {
                        *(_DWORD *)(v26 + 8) = v27 + v22;
                      }
                    }
                    sub_1B6DC3CE8(&v53, (uint64_t)&v57, v52);
                  }
                }
                else
                {
                  BOOL isAllocated = CFX::GPUResourceManager::isAllocated(v5, v52);
                  if (v18)
                  {
                    if (!isAllocated) {
                      sub_1B6DC3E54((uint64_t)v49, this, (CFX::RG::Pass *)v11, v52);
                    }
                  }
                  else if (isAllocated)
                  {
                    unsigned int v28 = (v61 - 1) & v20;
                    unsigned int v29 = *(unsigned __int16 *)(v60 + 2 * v28);
                    if (v29 >= 2)
                    {
                      while ((v29 & 2) == 0 || v20 != *(void *)(v58 + 8 * v28))
                      {
                        ++v28;
                        BOOL v30 = v29 >= 4;
                        v29 >>= 1;
                        if (!v30) {
                          goto LABEL_8;
                        }
                      }
                      uint64_t v33 = v59;
                      if (v59)
                      {
                        CFX::RG::RenderGraph::directSuccessorsReadingResource(this, v11, (uint64_t)v52, v47, (uint64_t)v51);
                        uint64_t v34 = v33 + 16 * v28;
                        int v37 = *(_DWORD *)(v34 + 8);
                        uint64_t v35 = (_DWORD *)(v34 + 8);
                        int v36 = v37;
                        if (v37 != 0x7FFFFFFF) {
                          *uint64_t v35 = v36 + v51[0].n128_u32[2];
                        }
                      }
                    }
                  }
                  else
                  {
                    sub_1B6DC3E54((uint64_t)v49, this, (CFX::RG::Pass *)v11, v52);
                    int v31 = sub_1B6DC3C64(this, v11, (uint64_t)v52, (uint64_t *)&v50);
                    if (v31 < 1)
                    {
                      sub_1B64EA528(&v53, &v52);
                    }
                    else
                    {
                      v51[0].n128_u64[0] = (unint64_t)v52;
                      if (CFX::RG::Resource::isManaged(v52)) {
                        unsigned __int32 v32 = 0x7FFFFFFF;
                      }
                      else {
                        unsigned __int32 v32 = v31;
                      }
                      v51[0].n128_u32[2] = v32;
                      sub_1B6DC4110((uint64_t)&v57, v20, v51);
                    }
                  }
                }
              }
LABEL_8:
              ++v13;
            }
            while (v13 != v14);
          }
          uint64_t v38 = *(unsigned int *)(v11 + 72);
          if (v38)
          {
            unsigned int v39 = *(CFX::RG::Resource ***)(v11 + 80);
            uint64_t v40 = 8 * v38;
            do
            {
              uint64_t v41 = *v39;
              if (CFX::RG::Resource::type(*v39) != 2) {
                sub_1B6DC3CE8(&v53, (uint64_t)&v57, v41);
              }
              ++v39;
              v40 -= 8;
            }
            while (v40);
          }
          ++v10;
        }
        while (v10 != v48);
        uint64_t v8 = v46;
        uint64_t v6 = (unsigned int *)v47;
        if (v54)
        {
          uint64_t v42 = v55;
          uint64_t v43 = 8 * v54;
          do
          {
            uint64_t v44 = *v42;
            if (!CFX::RG::Resource::isManaged(*v42)) {
              CFX::GPUResourceManager::free(v5, v44);
            }
            ++v42;
            v43 -= 8;
          }
          while (v43);
        }
      }
      v8 += 32;
    }
    while (v8 != v45);
  }
  CStackAllocatorPopFrame((uint64_t)v6);
  prof_endFlame();
}

void sub_1B6DC1D70(_Unwind_Exception *a1)
{
}

uint64_t CFX::RG::DeduceStoreAction(_DWORD *a1, CFX::RG::Pass *this, CFX::RG::Resource *a3, unsigned int *a4, unint64_t a5)
{
  unint64_t v9 = HIBYTE(a5);
  uint64_t v10 = CFX::RG::Pass::renderTargetInfo(this, a3);
  CStackAllocatorPushFrame(a4);
  if ((*(unsigned char *)v10 & 4) != 0 || !*((_DWORD *)this + 42)) {
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *(CFX::RG::Resource **)(*((void *)this + 22) + 8 * v11);
    uint64_t v13 = CFX::RG::Pass::renderTargetInfo(this, v12);
    if (v13)
    {
      if (*(unsigned __int8 *)(v10 + 4) == *(unsigned __int8 *)(v13 + 4)
        && *(_DWORD *)(v10 + 8) == *(_DWORD *)(v13 + 8)
        && (*(unsigned char *)v13 & 4) != 0)
      {
        break;
      }
    }
    if (++v11 >= (unint64_t)*((unsigned int *)this + 42)) {
      goto LABEL_9;
    }
  }
  if (v12)
  {
    CFX::RG::RenderGraph::directSuccessorsReadingResource(a1, (uint64_t)this, (uint64_t)a3, (uint64_t)a4, (uint64_t)v21);
    if (CFX::RG::Resource::type(a3) != 2 && (v9 | v22) == 0) {
      uint64_t v18 = 2;
    }
    else {
      uint64_t v18 = 3;
    }
  }
  else
  {
LABEL_9:
    CFX::RG::RenderGraph::directSuccessorsReadingResource(a1, (uint64_t)this, (uint64_t)a3, (uint64_t)a4, (uint64_t)v21);
    int v14 = v22;
    int v15 = CFX::RG::Resource::type(a3);
    BOOL isManaged = CFX::RG::Resource::isManaged(a3);
    if (v9 | v14) {
      BOOL v17 = 1;
    }
    else {
      BOOL v17 = v15 == 2;
    }
    uint64_t v18 = v17 || isManaged;
  }
  CStackAllocatorPopFrame((uint64_t)a4);
  return v18;
}

uint64_t sub_1B6DC1EE8(uint64_t a1, CFX::RG::RenderGraphBuilder *a2, uint64_t *a3, char a4)
{
  uint64_t v83 = 0x800000000;
  uint64_t v84 = v85;
  sub_1B63FB6A8((uint64_t)&v83, 8u);
  uint64_t v6 = *(unsigned int *)(a1 + 256);
  if (!v6)
  {
LABEL_85:
    uint64_t v56 = 0;
    goto LABEL_87;
  }
  uint64_t v58 = *(void *)(a1 + 264) + 32 * v6;
  uint64_t v7 = *(void *)(a1 + 264);
  uint64_t v71 = a1;
  while (1)
  {
    uint64_t v59 = v7;
    uint64_t v8 = *(unsigned int *)(v7 + 16);
    if (v8) {
      break;
    }
LABEL_84:
    uint64_t v7 = v59 + 32;
    if (v59 + 32 == v58) {
      goto LABEL_85;
    }
  }
  unint64_t v9 = *(CFX::RG ***)(v59 + 24);
  uint64_t v10 = &v9[v8];
  int v62 = v10;
  while (1)
  {
    unsigned int v82 = 0;
    unsigned int v82 = *v9;
    if (*((unsigned char *)v82 + 344) == 3 && ((a4 & 1) != 0 || !CFX::RG::isCopyPass(v82, v5))) {
      break;
    }
LABEL_83:
    if (++v9 == v10) {
      goto LABEL_84;
    }
  }
  long long v79 = *(_OWORD *)a1;
  uint64_t v80 = 0;
  uint64_t v81 = &v82;
  sub_1B63C8928((uint64_t)&v79, 8, 1);
  uint64_t v64 = v9;
  sub_1B63C88CC((uint64_t *)&v79, &v82);
  char v11 = 0;
  do
  {
    for (uint64_t i = 0; i != 64; i += 8)
      *(void *)&v84[i] = 0;
    uint64_t v13 = v82;
    if (*((_DWORD *)v82 + 42))
    {
      unint64_t v14 = 0;
      int v15 = 0;
      char v16 = 0;
      int v17 = 0;
      do
      {
        uint64_t v18 = *(const CFX::RG::Resource **)(*((void *)v13 + 22) + 8 * v14);
        uint64_t v19 = CFX::RG::Pass::renderTargetInfo(v13, v18);
        if (v19)
        {
          ++v17;
          int v20 = *(unsigned __int8 *)(v19 + 4);
          switch(v20)
          {
            case 3:
              char v16 = v18;
              break;
            case 2:
              int v15 = v18;
              break;
            case 1:
              *(void *)&v84[8 * *(unsigned int *)(v19 + 8)] = v18;
              break;
          }
        }
        ++v14;
        uint64_t v13 = v82;
      }
      while (v14 < *((unsigned int *)v82 + 42));
    }
    else
    {
      int v17 = 0;
      char v16 = 0;
      int v15 = 0;
    }
    long long v75 = *(_OWORD *)a1;
    uint64_t v76 = 0x800000000;
    uint64_t v77 = (CFX::RG::Pass *)v78;
    uint64_t v21 = CFX::RG::RenderGraph::successors((CFX::RG::RenderGraph *)a1, v13);
    uint64_t v22 = *(unsigned int *)(v21 + 16);
    if (v22)
    {
      uint64_t v23 = *(void *)(v21 + 24);
      uint64_t v24 = 24 * v22;
      while (1)
      {
        uint64_t v25 = *(void *)(v23 + 16);
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v23;
        uint64_t v74 = v25;
        if (LOBYTE(v73[1]) != 3) {
          sub_1B6DAFDF8((uint64_t *)&v75, v73);
        }
        int v26 = v76;
        if (v76 >= 2) {
          break;
        }
        v23 += 24;
        v24 -= 24;
        if (!v24) {
          goto LABEL_31;
        }
      }
LABEL_61:
      int v49 = 6;
      goto LABEL_64;
    }
    int v26 = v76;
LABEL_31:
    if (v26 != 1) {
      goto LABEL_61;
    }
    v73[0] = 0;
    uint64_t v27 = *(void *)v77;
    v73[0] = (CFX::RG::Pass *)v27;
    if (*(unsigned char *)(v27 + 344) != 3) {
      goto LABEL_62;
    }
    uint64_t v28 = *(void *)(v27 + 40);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48030, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1E9E48030))
    {
      byte_1E9E48028 = 1;
      __cxa_guard_release(&qword_1E9E48030);
    }
    uint64_t v29 = 0x646F94B6FAFEAA7CLL;
    if (!byte_1E9E48028) {
      uint64_t v29 = 0;
    }
    if (v28 == v29) {
      goto LABEL_62;
    }
    uint64_t v30 = CFX::RG::RenderGraph::predecessors((CFX::RG::RenderGraph *)a1, v73[0]);
    uint64_t v31 = *(unsigned int *)(v30 + 16);
    if (v31)
    {
      uint64_t v32 = *(void *)(v30 + 24);
      uint64_t v33 = 24 * v31;
      uint64_t v34 = (CFX::RG **)(v32 + 8);
      while (*(unsigned char *)v34 == 3 || *(v34 - 1) == v82)
      {
        v34 += 3;
        v33 -= 24;
        if (!v33) {
          goto LABEL_42;
        }
      }
LABEL_62:
      int v49 = 6;
      goto LABEL_63;
    }
LABEL_42:
    uint64_t v35 = (unsigned __int8 *)(*(uint64_t (**)(CFX::RG *))(*(void *)v82 + 32))(v82);
    uint64_t v36 = (*(uint64_t (**)(CFX::RG::Pass *))(*(void *)v73[0] + 32))(v73[0]);
    if (v35[268] != *(unsigned __int8 *)(v36 + 268)) {
      goto LABEL_62;
    }
    uint64_t v37 = *((unsigned int *)v73[0] + 42);
    if (v37)
    {
      int v38 = 0;
      unsigned int v39 = (const CFX::RG::Resource **)*((void *)v73[0] + 22);
      uint64_t v69 = (__int32 *)(v36 + 274);
      uint64_t v70 = (__int32 *)(v35 + 274);
      uint64_t v67 = (_DWORD *)(v36 + 264);
      uint64_t v68 = v35 + 264;
      uint64_t v72 = v36;
      unsigned int v65 = (double *)(v36 + 256);
      unsigned int v66 = (double *)(v35 + 256);
      uint64_t v40 = 8 * v37;
      while (1)
      {
        uint64_t v41 = *v39;
        uint64_t v42 = CFX::RG::Pass::renderTargetInfo(v73[0], *v39);
        uint64_t v45 = v42;
        if (v42)
        {
          int v46 = v38;
          char v11 = 0;
          v43.i32[0] = *v70;
          v44.i32[0] = *v69;
          if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16((int16x4_t)vmvn_s8((int8x8_t)vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v43), (int16x4_t)*(_OWORD *)&vmovl_u8(v44))), 0xFuLL))) & 1) != 0|| v35[278] != *(unsigned __int8 *)(v72 + 278))
          {
            int v49 = 0;
            goto LABEL_63;
          }
          uint64_t v47 = v35;
          int v48 = v35[279];
          int v49 = 0;
          if (v48 != *(unsigned __int8 *)(v72 + 279)) {
            goto LABEL_63;
          }
          int v38 = v46 + 1;
          int v50 = *(unsigned __int8 *)(v42 + 4);
          if (v50 == 3)
          {
            BOOL v51 = operator==(v68, v67);
            uint64_t v35 = v47;
            BOOL v52 = v16 == v41;
          }
          else
          {
            uint64_t v35 = v47;
            if (v50 == 2)
            {
              BOOL v51 = operator==(v66, v65);
              BOOL v52 = v15 == v41;
            }
            else
            {
              if (v50 != 1) {
                goto LABEL_59;
              }
              BOOL v51 = operator==((double *)&v47[32 * *(unsigned int *)(v42 + 8)], (double *)(v72 + 32 * *(unsigned int *)(v42 + 8)));
              BOOL v52 = v41 == *(const CFX::RG::Resource **)&v84[8 * *(unsigned int *)(v45 + 8)];
            }
          }
          if (!v52 || !v51) {
            goto LABEL_73;
          }
        }
LABEL_59:
        ++v39;
        v40 -= 8;
        if (!v40) {
          goto LABEL_71;
        }
      }
    }
    int v38 = 0;
LABEL_71:
    if (v17 == v38)
    {
      sub_1B6DAFDF8((uint64_t *)&v79, v73);
      int v49 = 0;
      unsigned int v82 = v73[0];
      char v11 = 1;
    }
    else
    {
LABEL_73:
      char v11 = 0;
      int v49 = 0;
    }
LABEL_63:
    a1 = v71;
LABEL_64:
    if (HIDWORD(v76))
    {
      if (v77 != (CFX::RG::Pass *)v78)
      {
        v73[0] = v77;
        if (*((void *)&v75 + 1)) {
          sub_1B63C89D4(*((void **)&v75 + 1), v73);
        }
      }
    }
    char v54 = (v49 == 0) & v11;
    char v11 = 1;
  }
  while ((v54 & 1) != 0);
  unsigned int v55 = v80;
  unint64_t v9 = v64;
  if (v80 >= 2) {
    sub_1B6DC33FC(a1, a2, a3, (uint64_t)&v79, 3u);
  }
  uint64_t v10 = v62;
  if (HIDWORD(v80))
  {
    *(void *)&long long v75 = v81;
    if (*((void *)&v79 + 1)) {
      sub_1B63C89D4(*((void **)&v79 + 1), &v75);
    }
  }
  if (v55 <= 1) {
    goto LABEL_83;
  }
  uint64_t v56 = 1;
LABEL_87:
  if (HIDWORD(v83) && v84 != v85) {
    free(v84);
  }
  return v56;
}

void sub_1B6DC24E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,int a34,uint64_t a35)
{
  if (*(_DWORD *)(v35 - 180))
  {
    uint64_t v37 = *(void **)(v35 - 176);
    if (v37 != a9) {
      free(v37);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6DC25A0(uint64_t *a1, uint64_t a2, CFX::RG::RenderGraphContext *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8 = a4(*a1);
  if (v8)
  {
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v12 = 0;
      uint64_t v9 = CFX::RG::RenderGraphBuilder::build(a2, a3, (uint64_t)__p);
      *a1 = v9;
      if (!v9) {
        abort();
      }
      if (SHIBYTE(v12) < 0)
      {
        operator delete(__p[0]);
        uint64_t v9 = *a1;
      }
    }
    while ((((uint64_t (*)(uint64_t, uint64_t, CFX::RG::RenderGraphContext *))a4)(v9, a2, a3) & 1) != 0);
  }
  return v8;
}

void sub_1B6DC2644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6DC2664(uint64_t a1, CFX::RG::RenderGraphBuilder *a2, uint64_t *a3)
{
  long long v23 = *(_OWORD *)a1;
  uint64_t v24 = 0;
  uint64_t v25 = &v26;
  sub_1B63C8928((uint64_t)&v23, 8, 1);
  v20[0] = a3[2];
  sub_1B6DBA550((uint64_t)v20, 32);
  v17[0] = a3[2];
  sub_1B6DBA550((uint64_t)v17, 32);
  uint64_t v6 = *(unsigned int *)(a1 + 256);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 264);
    uint64_t v8 = v7 + 32 * v6;
    while (1)
    {
      uint64_t v9 = *(unsigned int *)(v7 + 16);
      if (v9) {
        break;
      }
LABEL_17:
      v7 += 32;
      if (v7 == v8) {
        goto LABEL_18;
      }
    }
    uint64_t v10 = *(uint64_t **)(v7 + 24);
    uint64_t v11 = 8 * v9;
    while (1)
    {
      uint64_t v16 = 0;
      uint64_t v12 = *v10;
      uint64_t v16 = v12;
      if (*(unsigned char *)(v12 + 344) == 4)
      {
        if (sub_1B6DC3BD8(v12))
        {
          uint64_t v13 = v16;
          if (!sub_1B6DC39E4(v16, (uint64_t)v17))
          {
            sub_1B6DC3B04(v13, (uint64_t)v20);
            sub_1B63C88CC((uint64_t *)&v23, &v16);
            goto LABEL_16;
          }
        }
        if (v24 > 1) {
          goto LABEL_19;
        }
      }
      else
      {
        if (!sub_1B6DC39E4(v12, (uint64_t)v20))
        {
          if (v24) {
            sub_1B6DC3B04(v12, (uint64_t)v17);
          }
          goto LABEL_16;
        }
        if (v24 >= 2) {
          goto LABEL_19;
        }
      }
      LODWORD(v24) = 0;
      memset((void *)v20[1], 255, 8 * (v22 + 15));
      bzero((void *)v20[3], 2 * (v22 + 15));
      int v21 = 0;
      memset((void *)v17[1], 255, 8 * (v19 + 15));
      bzero((void *)v17[3], 2 * (v19 + 15));
      int v18 = 0;
LABEL_16:
      ++v10;
      v11 -= 8;
      if (!v11) {
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v24 < 2)
  {
    uint64_t v14 = 0;
  }
  else
  {
LABEL_19:
    sub_1B6DC33FC(a1, a2, a3, (uint64_t)&v23, 4u);
    uint64_t v14 = 1;
  }
  if (HIDWORD(v24))
  {
    v20[0] = v25;
    if (*((void *)&v23 + 1)) {
      sub_1B63C89D4(*((void **)&v23 + 1), v20);
    }
  }
  return v14;
}

void sub_1B6DC2898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,int a24,uint64_t a25)
{
  if (a24)
  {
    a16 = a25;
    if (a22) {
      sub_1B63C89D4(a22, &a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6DC28D4(CFX::RG::RenderGraph *a1, CFX::RG::RenderGraphBuilder *a2, uint64_t a3)
{
  int v3 = (CFX::GPUResourceManager **)a3;
  uint64_t v6 = *(unsigned int **)(a3 + 16);
  CStackAllocatorPushFrame(v6);
  uint64_t v91 = (uint64_t)v6;
  CStackAllocatorPopFrame((uint64_t)v6);
  uint64_t v7 = *((unsigned int *)a1 + 32);
  if (!v7) {
    return 0;
  }
  uint64_t v86 = a2;
  unint64_t v87 = 0;
  uint64_t v8 = (CFX::RG::Resource ***)*((void *)a1 + 17);
  uint64_t v95 = &v8[v7];
  while (1)
  {
    uint64_t v9 = *v8;
    uint64_t v10 = (*v8)[5];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48030, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1E9E48030))
    {
      byte_1E9E48028 = 1;
      __cxa_guard_release(&qword_1E9E48030);
    }
    uint64_t v11 = 0x646F94B6FAFEAA7CLL;
    if (!byte_1E9E48028) {
      uint64_t v11 = 0;
    }
    if (v10 != (CFX::RG::Resource *)v11) {
      goto LABEL_99;
    }
    uint64_t v12 = CFX::GPUResourceManager::remappedResource(v3[3], v9[46]);
    uint64_t v13 = CFX::GPUResourceManager::remappedResource(v3[3], v9[48]);
    uint64_t v14 = CFX::RG::RenderGraph::predecessors(a1, (CFX::RG::Pass *)v9);
    uint64_t v15 = *(unsigned int *)(v14 + 16);
    if (!v15) {
      goto LABEL_99;
    }
    uint64_t v16 = (CFX::RG::Resource **)(*(void *)(v14 + 24) + 16);
    uint64_t v17 = 24 * v15;
    while (*v16 != v12)
    {
      v16 += 3;
      v17 -= 24;
      if (!v17) {
        goto LABEL_99;
      }
    }
    int v18 = *(v16 - 2);
    if (!v18 || !CFX::RG::Resource::isTexture(v12) || !CFX::RG::Resource::isTexture(v13)) {
      goto LABEL_99;
    }
    uint64_t v19 = CFX::RG::RenderGraph::successors(a1, (CFX::RG::Pass *)v9);
    uint64_t v20 = *(unsigned int *)(v19 + 16);
    if (v20)
    {
      int v21 = (CFX::RG::Resource ***)(*(void *)(v19 + 24) + 8);
      uint64_t v22 = 24 * v20;
      while (*(unsigned char *)v21 == 3 || *(v21 - 1) == v9)
      {
        v21 += 3;
        v22 -= 24;
        if (!v22) {
          goto LABEL_20;
        }
      }
      int v85 = 0;
    }
    else
    {
LABEL_20:
      int v85 = 1;
    }
    unint64_t v90 = (CFX::RG::RenderGraphContext *)v3;
    unsigned int v88 = v13;
    uint64_t v92 = (uint64_t)v9;
    unsigned int v89 = CFX::RG::RenderGraph::stageIndexForPass(a1, (const CFX::RG::Pass *)v9);
    uint64_t v23 = CFX::RG::RenderGraph::successors(a1, v18);
    unsigned int v24 = *(_DWORD *)(v23 + 16);
    if (v24)
    {
      uint64_t v25 = *(void *)(v23 + 24);
      uint64_t v93 = v25 + 24 * v24;
      unsigned int v94 = v8;
      unsigned int v26 = -1;
      do
      {
        if (*(unsigned char *)(v25 + 8) != 3)
        {
          uint64_t v27 = *(const CFX::RG::Pass **)v25;
          if (*(void *)v25 != v92)
          {
            uint64_t v28 = *((unsigned int *)v27 + 42);
            if (v28)
            {
              uint64_t v29 = (CFX::RG::Resource **)*((void *)v27 + 22);
              uint64_t v30 = &v29[v28];
              do
              {
                if (*v29 == v12)
                {
                  uint64_t v31 = a1;
                  uint64_t v32 = *(const CFX::RG::Pass **)v25;
                  if (*(unsigned char *)(*(void *)v25 + 344) == 3
                    && (uint64_t v33 = (unsigned char *)CFX::RG::Pass::renderTargetInfo(*(CFX::RG::Pass **)v25, v12)) != 0
                    && (uint64_t v34 = v33, (*v33 & 1) != 0)
                    && (uint64_t v35 = *((unsigned int *)v32 + 42), v35))
                  {
                    uint64_t v36 = (CFX::RG::Resource **)*((void *)v32 + 22);
                    uint64_t v37 = 8 * v35;
                    while (1)
                    {
                      uint64_t v38 = CFX::RG::Pass::renderTargetInfo(v32, *v36);
                      if (v38)
                      {
                        if ((*(unsigned char *)v38 & 4) != 0 && *(_DWORD *)(v38 + 8) == *((_DWORD *)v34 + 2)) {
                          break;
                        }
                      }
                      ++v36;
                      v37 -= 8;
                      if (!v37) {
                        goto LABEL_38;
                      }
                    }
                    a1 = v31;
                  }
                  else
                  {
LABEL_38:
                    a1 = v31;
                    unsigned int v39 = CFX::RG::RenderGraph::stageIndexForPass(v31, *(const CFX::RG::Pass **)v25);
                    if (v39 < v26) {
                      unsigned int v26 = v39;
                    }
                  }
                }
                ++v29;
              }
              while (v29 != v30);
            }
          }
        }
        v25 += 24;
        uint64_t v8 = v94;
      }
      while (v25 != v93);
    }
    else
    {
      unsigned int v26 = -1;
    }
    if (v26 <= v89) {
      goto LABEL_98;
    }
    uint64_t v40 = v88;
    CFX::RG::RenderGraph::passesWritingResource(a1, (uint64_t)v88, v91, (uint64_t)&v99);
    if (v100 != 1)
    {
      CFX::RG::RenderGraph::passesReadingResource(a1, (uint64_t)v88, v91, (uint64_t)v96);
      unsigned int v41 = 0;
      if (v97)
      {
        uint64_t v42 = v98;
        uint64_t v43 = 8 * v97;
        do
        {
          if (*v42 != (const CFX::RG::Pass *)v92)
          {
            unsigned int v44 = CFX::RG::RenderGraph::stageIndexForPass(a1, *v42);
            if (v41 <= v44) {
              unsigned int v41 = v44;
            }
          }
          ++v42;
          v43 -= 8;
        }
        while (v43);
      }
      if (v100)
      {
        uint64_t v45 = v101;
        uint64_t v46 = 8 * v100;
        unsigned int v47 = -1;
        do
        {
          if (*v45 != (const CFX::RG::Pass *)v92)
          {
            unsigned int v48 = CFX::RG::RenderGraph::stageIndexForPass(a1, *v45);
            if (v48 < v47) {
              unsigned int v47 = v48;
            }
          }
          ++v45;
          v46 -= 8;
        }
        while (v46);
      }
      else
      {
        unsigned int v47 = -1;
      }
      uint64_t v40 = v88;
      if (v41 >= v47) {
        goto LABEL_98;
      }
    }
    int v49 = (int16x4_t *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v90, v12);
    int v50 = (int16x4_t *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v90, v40);
    BOOL v51 = v50;
    uint8x8_t v52 = (uint8x8_t)*v49;
    v52.i32[0] = v50[9].i32[0];
    v53.i32[0] = v49[9].i32[0];
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v53), (int16x4_t)*(_OWORD *)&vmovl_u8(v52)), (int8x8_t)vceq_s16(*v49, *v50)), 0xFuLL))) & 1) == 0|| v49[1].u8[0] != v50[1].u8[0]|| v49[1].u8[2] != v50[1].u8[2]|| *(void *)&v49[2] != *(void *)&v50[2]|| *(void *)&v49[4] != *(void *)&v50[4]|| *(void *)&v49[6] != *(void *)&v50[6]|| *(void *)&v49[7] != *(void *)&v50[7]|| *(void *)&v49[8] != *(void *)&v50[8]|| CFX::RG::Resource::isManaged(v12))
    {
      goto LABEL_98;
    }
    if (v49[1].u8[1] > v51[1].u8[1]) {
      break;
    }
    uint64_t v54 = v92;
    if (*(void *)&v49[2] == *(void *)&v51[2]) {
      goto LABEL_75;
    }
LABEL_98:
    int v3 = (CFX::GPUResourceManager **)v90;
LABEL_99:
    if (++v8 == v95) {
      return 0;
    }
  }
  uint64_t v54 = v92;
  CFX::RG::RenderGraph::directPredecessorsWritingResource(a1, v92, (uint64_t)v12, v91, (uint64_t)v96);
  unint64_t v87 = *v98;
LABEL_75:
  if (!v87)
  {
    uint64_t v55 = *(void *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v90, v40) + 40);
    if ((v55 & 2) == 0)
    {
      CFX::RG::RenderGraph::passesWritingResource(a1, (uint64_t)v12, v91, (uint64_t)v96);
      if (v97)
      {
        uint64_t v56 = v98;
        uint64_t v57 = 8 * v97;
        while (1)
        {
          uint64_t v58 = *v56;
          if (*v56 != (CFX::RG::Pass *)v54 && (*((unsigned char *)v58 + 344) != 3 || !CFX::RG::Pass::isRenderTarget(v58, v12))) {
            break;
          }
          ++v56;
          v57 -= 8;
          if (!v57) {
            goto LABEL_88;
          }
        }
        if (CFX::RG::Resource::isExternal(v88)) {
          goto LABEL_97;
        }
        uint64_t v59 = CFX::RG::Resource::textureDesc(v88);
        *(void *)(v59 + 72) = v55 | 2;
        *(unsigned char *)(v59 + 80) = 1;
        CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)v90, v88);
      }
    }
LABEL_88:
    if ((v55 == 0) | v55 & 1
      || (CFX::RG::RenderGraph::passesReadingResource(a1, (uint64_t)v12, v91, (uint64_t)v96), !v97))
    {
LABEL_96:
      BOOL isExternal = CFX::RG::Resource::isExternal(v12);
      uint64_t v40 = v88;
      if ((isExternal & (v85 ^ 1) & 1) == 0)
      {
        if (v54) {
          char v71 = isExternal;
        }
        else {
          char v71 = 1;
        }
        if (v71) {
          return 0;
        }
        uint64_t v73 = v86;
        uint64_t v74 = (CFX::GPUResourceManager **)v90;
        long long v75 = v12;
        goto LABEL_122;
      }
      goto LABEL_97;
    }
    uint64_t v60 = v98;
    uint64_t v61 = 8 * v97;
    while (*v60 == (CFX::RG::Pass *)v54)
    {
      ++v60;
      v61 -= 8;
      if (!v61) {
        goto LABEL_96;
      }
    }
    if (!CFX::RG::Resource::isExternal(v88))
    {
      uint64_t v62 = CFX::RG::Resource::textureDesc(v88);
      *(void *)(v62 + 72) = v55 | 1;
      *(unsigned char *)(v62 + 80) = 1;
      CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)v90, v88);
      goto LABEL_96;
    }
LABEL_97:
    unint64_t v87 = 0;
    goto LABEL_98;
  }
  if (*((unsigned char *)v87 + 344) != 3) {
    goto LABEL_98;
  }
  if (!v54) {
    return 0;
  }
  uint64_t v64 = CFX::RG::Pass::renderTargetInfo(v87, v12);
  int v65 = *(_DWORD *)(v64 + 8);
  uint64_t v66 = *(unsigned __int8 *)(v64 + 4);
  if (*((_DWORD *)v87 + 42))
  {
    uint64_t v67 = 0;
    while (1)
    {
      uint64_t v68 = *((void *)v87 + 22);
      uint64_t v69 = *(CFX::RG::Resource **)(v68 + 8 * v67);
      if (v69 != v12)
      {
        uint64_t v70 = CFX::RG::Pass::renderTargetInfo(v87, *(CFX::RG::Resource **)(v68 + 8 * v67));
        if (v70)
        {
          if (*(_DWORD *)(v70 + 8) == v65 && *(unsigned __int8 *)(v70 + 4) == v66 && (*(unsigned char *)v70 & 4) != 0) {
            break;
          }
        }
      }
      if (++v67 >= (unint64_t)*((unsigned int *)v87 + 42)) {
        goto LABEL_112;
      }
    }
    uint64_t v73 = v86;
    uint64_t v74 = (CFX::GPUResourceManager **)v90;
    long long v75 = v69;
LABEL_122:
    CFX::RG::RenderGraphBuilder::replaceResource(v73, v74, v75, v40, 1);
    goto LABEL_123;
  }
LABEL_112:
  if (!v85 || CFX::RG::Resource::isExternal(v40) || CFX::RG::Resource::isManaged(v40)) {
    CFX::RG::Pass::renderTo((uint64_t)v87, (uint64_t)v40, (v66 << 32) | 4, v65);
  }
LABEL_123:
  uint64_t v99 = v91;
  uint64_t v100 = 0x800000000;
  long long v101 = (const CFX::RG::Pass **)&v102;
  CFX::RG::RenderGraph::directPredecessorsWritingResource(a1, v54, (uint64_t)v12, v91, (uint64_t)v96);
  if (v97)
  {
    uint64_t v76 = v98;
    uint64_t v77 = 8 * v97;
    do
    {
      sub_1B6DB4424(&v99, v76++);
      v77 -= 8;
    }
    while (v77);
  }
  uint64_t v78 = *(unsigned int *)(v54 + 264);
  if (v78)
  {
    long long v79 = *(void **)(v54 + 272);
    uint64_t v80 = 8 * v78;
    do
    {
      sub_1B6DB4424(&v99, v79++);
      v80 -= 8;
    }
    while (v80);
  }
  CFX::RG::RenderGraph::directSuccessorsReadingResource(a1, v54, (uint64_t)v40, v91, (uint64_t)v96);
  if (v97)
  {
    uint64_t v81 = (uint64_t **)v98;
    unsigned int v82 = (uint64_t **)&v98[v97];
    do
    {
      if (v100)
      {
        uint64_t v83 = v101;
        uint64_t v84 = 8 * v100;
        do
        {
          CFX::RG::Pass::dependsOn(*v81, *v83++);
          v84 -= 8;
        }
        while (v84);
      }
      ++v81;
    }
    while (v81 != v82);
  }
  CFX::RG::RenderGraphBuilder::removePass(v86, (CFX::RG::Pass *)v54, 1);
  return 1;
}

uint64_t sub_1B6DC318C(uint64_t a1, CFX::RG::RenderGraphBuilder *a2, uint64_t *a3)
{
  long long v23 = *(_OWORD *)a1;
  uint64_t v24 = 0;
  uint64_t v25 = &v26;
  sub_1B63C8928((uint64_t)&v23, 8, 1);
  v20[0] = a3[2];
  sub_1B6DBA550((uint64_t)v20, 32);
  v17[0] = a3[2];
  sub_1B6DBA550((uint64_t)v17, 32);
  uint64_t v6 = *(unsigned int *)(a1 + 256);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 264);
    uint64_t v8 = v7 + 32 * v6;
    while (1)
    {
      uint64_t v9 = *(unsigned int *)(v7 + 16);
      if (v9) {
        break;
      }
LABEL_17:
      v7 += 32;
      if (v7 == v8) {
        goto LABEL_18;
      }
    }
    uint64_t v10 = *(uint64_t **)(v7 + 24);
    uint64_t v11 = 8 * v9;
    while (1)
    {
      uint64_t v16 = 0;
      uint64_t v12 = *v10;
      uint64_t v16 = v12;
      if (*(unsigned char *)(v12 + 344) == 2)
      {
        if (sub_1B6DC3BD8(v12))
        {
          uint64_t v13 = v16;
          if (!sub_1B6DC39E4(v16, (uint64_t)v17))
          {
            sub_1B6DC3B04(v13, (uint64_t)v20);
            sub_1B63C88CC((uint64_t *)&v23, &v16);
            goto LABEL_16;
          }
        }
        if (v24 > 1) {
          goto LABEL_19;
        }
      }
      else
      {
        if (!sub_1B6DC39E4(v12, (uint64_t)v20))
        {
          if (v24) {
            sub_1B6DC3B04(v12, (uint64_t)v17);
          }
          goto LABEL_16;
        }
        if (v24 >= 2) {
          goto LABEL_19;
        }
      }
      LODWORD(v24) = 0;
      memset((void *)v20[1], 255, 8 * (v22 + 15));
      bzero((void *)v20[3], 2 * (v22 + 15));
      int v21 = 0;
      memset((void *)v17[1], 255, 8 * (v19 + 15));
      bzero((void *)v17[3], 2 * (v19 + 15));
      int v18 = 0;
LABEL_16:
      ++v10;
      v11 -= 8;
      if (!v11) {
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v24 < 2)
  {
    uint64_t v14 = 0;
  }
  else
  {
LABEL_19:
    sub_1B6DC33FC(a1, a2, a3, (uint64_t)&v23, 2u);
    uint64_t v14 = 1;
  }
  if (HIDWORD(v24))
  {
    v20[0] = v25;
    if (*((void *)&v23 + 1)) {
      sub_1B63C89D4(*((void **)&v23 + 1), v20);
    }
  }
  return v14;
}

void sub_1B6DC33C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,int a23,int a24,uint64_t a25)
{
  if (a24)
  {
    a16 = a25;
    if (a22) {
      sub_1B63C89D4(a22, &a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6DC33FC(uint64_t a1, CFX::RG::RenderGraphBuilder *this, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  v77[0] = a5;
  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v72 = *(uint64_t ***)a1;
  uint64_t v73 = v9;
  uint64_t v74 = 0x800000000;
  long long v75 = (uint64_t **)v76;
  uint64_t v67 = v72;
  uint64_t v68 = v9;
  uint64_t v69 = 0x800000000;
  uint64_t v70 = (CFX::RG::Pass **)v71;
  unint64_t v66 = 0;
  uint64_t v10 = *(unsigned int *)(a4 + 16);
  if (v10)
  {
    uint64_t v11 = *(uint64_t **)(a4 + 24);
    uint64_t v12 = &v11[v10];
    do
    {
      uint64_t v13 = *v11;
      unint64_t v14 = 0x9DDFEA08EB382D69 * (*(void *)(*v11 + 48) ^ v66);
      unint64_t v66 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v66 ^ (v14 >> 47) ^ v14)) ^ ((0x9DDFEA08EB382D69 * (v66 ^ (v14 >> 47) ^ v14)) >> 47));
      uint64_t v15 = *(unsigned int *)(a1 + 128);
      if (v15)
      {
        uint64_t v16 = *(uint64_t **)(a1 + 136);
        uint64_t v17 = &v16[v15];
        do
        {
          *(void *)&long long v62 = 0;
          uint64_t v18 = *v16;
          *(void *)&long long v62 = v18;
          uint64_t v19 = *(void *)(v18 + 272);
          uint64_t v20 = *(unsigned int *)(v18 + 264);
          if (v20)
          {
            uint64_t v21 = 8 * v20;
            int v22 = *(void **)(v18 + 272);
            while (*v22 != v13)
            {
              ++v22;
              v21 -= 8;
              if (!v21)
              {
                int v22 = (void *)(v19 + 8 * v20);
                break;
              }
            }
          }
          else
          {
            int v22 = *(void **)(v18 + 272);
          }
          if (v20 != ((uint64_t)v22 - v19) >> 3)
          {
            uint64_t v23 = *(void *)(a4 + 24);
            uint64_t v24 = *(unsigned int *)(a4 + 16);
            if (v24)
            {
              uint64_t v25 = 8 * v24;
              uint64_t v26 = *(void **)(a4 + 24);
              while (*v26 != v18)
              {
                ++v26;
                v25 -= 8;
                if (!v25)
                {
                  uint64_t v26 = (void *)(v23 + 8 * v24);
                  break;
                }
              }
            }
            else
            {
              uint64_t v26 = *(void **)(a4 + 24);
            }
            if (v24 == ((uint64_t)v26 - v23) >> 3) {
              sub_1B6DAFDF8((uint64_t *)&v72, &v62);
            }
          }
          ++v16;
        }
        while (v16 != v17);
      }
      uint64_t v27 = *(unsigned int *)(v13 + 264);
      if (v27)
      {
        uint64_t v28 = *(void **)(v13 + 272);
        uint64_t v29 = 8 * v27;
        do
        {
          *(void *)&long long v62 = 0;
          *(void *)&long long v62 = *v28;
          sub_1B6DAFDF8((uint64_t *)&v67, &v62);
          ++v28;
          v29 -= 8;
        }
        while (v29);
      }
      CFX::RG::RenderGraphBuilder::removePass(this, (CFX::RG::Pass *)v13, 0);
      ++v11;
    }
    while (v11 != v12);
  }
  *(void *)&long long v62 = a3[2];
  uint64_t result = sub_1B6DC390C((uint64_t *)this, &v62, a4, &v66, v77);
  uint64_t v31 = result;
  if (v74)
  {
    uint64_t v32 = v75;
    uint64_t v33 = 8 * v74;
    do
    {
      uint64_t result = (uint64_t)CFX::RG::Pass::dependsOn(*v32++, (CFX::RG::Pass *)v31);
      v33 -= 8;
    }
    while (v33);
  }
  if (v69)
  {
    uint64_t v34 = v70;
    uint64_t v35 = 8 * v69;
    do
    {
      uint64_t result = (uint64_t)CFX::RG::Pass::dependsOn((uint64_t *)v31, *v34++);
      v35 -= 8;
    }
    while (v35);
  }
  BOOL v36 = v77[0] == 2 || v77[0] == 4;
  if (!v36) {
    goto LABEL_75;
  }
  long long v62 = *(_OWORD *)this;
  uint64_t v63 = 0x800000000;
  uint64_t v64 = v65;
  uint64_t v37 = *(unsigned int *)(v31 + 72);
  if (!v37) {
    goto LABEL_71;
  }
  uint64_t v38 = *(CFX::RG::Resource ***)(v31 + 80);
  unsigned int v39 = &v38[v37];
  do
  {
    uint64_t v61 = *v38;
    CFX::RG::RenderGraph::passesReadingResource((_DWORD *)a1, (uint64_t)v61, a3[2], (uint64_t)&v58);
    CFX::RG::RenderGraph::passesWritingResource((_DWORD *)a1, (uint64_t)v61, a3[2], (uint64_t)v55);
    if (v59)
    {
      uint64_t v40 = v60;
      uint64_t v41 = *(void *)(v31 + 384);
      uint64_t v42 = *(unsigned int *)(v31 + 376);
      do
      {
        if (v42)
        {
          uint64_t v43 = 8 * v42;
          unsigned int v44 = *(void **)(v31 + 384);
          while (*v44 != *v40)
          {
            ++v44;
            v43 -= 8;
            if (!v43)
            {
              unsigned int v44 = (void *)(v41 + 8 * v42);
              break;
            }
          }
        }
        else
        {
          unsigned int v44 = *(void **)(v31 + 384);
        }
        uint64_t v45 = ((uint64_t)v44 - v41) >> 3;
        BOOL v36 = v45 == v42;
        BOOL v46 = v45 != v42;
        ++v40;
      }
      while (!v36 && v40 != &v60[v59]);
    }
    else
    {
      BOOL v46 = 1;
    }
    if (v56)
    {
      unsigned int v48 = v57;
      uint64_t v49 = *(void *)(v31 + 384);
      uint64_t v50 = *(unsigned int *)(v31 + 376);
      while (1)
      {
        if (v50)
        {
          uint64_t v51 = 8 * v50;
          uint8x8_t v52 = *(void **)(v31 + 384);
          while (*v52 != *v48)
          {
            ++v52;
            v51 -= 8;
            if (!v51)
            {
              uint8x8_t v52 = (void *)(v49 + 8 * v50);
              break;
            }
          }
        }
        else
        {
          uint8x8_t v52 = *(void **)(v31 + 384);
        }
        if (v50 == ((uint64_t)v52 - v49) >> 3) {
          break;
        }
        if (++v48 == &v57[v56]) {
          goto LABEL_63;
        }
      }
LABEL_67:
      uint64_t result = (uint64_t)sub_1B63C88CC((uint64_t *)&v62, &v61);
      goto LABEL_68;
    }
LABEL_63:
    if (!v46) {
      goto LABEL_67;
    }
    uint64_t result = CFX::RG::Resource::isTexture(v61);
    if (result)
    {
      uint64_t result = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a3, v61);
      uint64_t v53 = *(void *)(result + 40);
      if ((v53 & 1) == 0)
      {
        uint64_t v54 = CFX::RG::Resource::textureDesc(v61);
        *(void *)(v54 + 72) = v53 | 1;
        *(unsigned char *)(v54 + 80) = 1;
        uint64_t result = CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)a3, v61);
      }
    }
LABEL_68:
    ++v38;
  }
  while (v38 != v39);
  if (v63 != *(_DWORD *)(v31 + 72)) {
    uint64_t result = CFX::RG::Pass::replaceReads(v31, &v62);
  }
LABEL_71:
  if (HIDWORD(v63))
  {
    if (v64 != v65)
    {
      uint64_t v58 = v64;
      uint64_t result = *((void *)&v62 + 1);
      if (*((void *)&v62 + 1)) {
        uint64_t result = (uint64_t)sub_1B63C89D4(*((void **)&v62 + 1), &v58);
      }
    }
  }
LABEL_75:
  if (HIDWORD(v69))
  {
    if (v70 != (CFX::RG::Pass **)v71)
    {
      *(void *)&long long v62 = v70;
      uint64_t result = (uint64_t)v68;
      if (v68) {
        uint64_t result = (uint64_t)sub_1B63C89D4(v68, &v62);
      }
    }
  }
  if (HIDWORD(v74) && v75 != (uint64_t **)v76)
  {
    uint64_t v67 = v75;
    uint64_t result = (uint64_t)v73;
    if (v73) {
      return (uint64_t)sub_1B63C89D4(v73, &v67);
    }
  }
  return result;
}

void sub_1B6DC38B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_1B6DB9B04((uint64_t)&a35);
  sub_1B6DB9B04((uint64_t)&a49);
  sub_1B6DB9B04(v49 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6DC390C(uint64_t *a1, void *a2, uint64_t a3, void *a4, unsigned __int8 *a5)
{
  uint64_t v8 = a1[1];
  v10[0] = *a1;
  v10[1] = v8;
  v10[0] = sub_1B6DC396C(v10[0], v8, v10, a2, a3, a4, a5);
  sub_1B63C88CC(a1 + 18, v10);
  return v10[0];
}

uint64_t sub_1B6DC396C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, unsigned __int8 *a7)
{
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v12 = sub_1B63C8330(v14, 0x188u, 8u);
  return CFX::RG::AggregatePass::AggregatePass(v12, *a3, a3[1], *a4, a5, *a6, *a7);
}

uint64_t sub_1B6DC39E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  if (v2)
  {
    int v3 = *(void **)(a1 + 80);
    int v4 = &v3[v2];
    int v5 = *(_DWORD *)(a2 + 36) - 1;
    while (1)
    {
      unint64_t v6 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v3) ^ ((0x9DDFEA08EB382D69 * *v3) >> 47));
      unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      unsigned int v8 = v5 & v7;
      unsigned int v9 = *(unsigned __int16 *)(*(void *)(a2 + 24) + 2 * (v5 & v7));
      if (v9 >= 2)
      {
        while ((v9 & 2) == 0 || v7 != *(void *)(*(void *)(a2 + 8) + 8 * v8))
        {
          ++v8;
          BOOL v10 = v9 >= 4;
          v9 >>= 1;
          if (!v10) {
            goto LABEL_9;
          }
        }
        if (*(void *)(a2 + 16)) {
          break;
        }
      }
LABEL_9:
      if (++v3 == v4) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t v11 = *(unsigned int *)(a1 + 168);
    if (!v11) {
      return 0;
    }
    uint64_t v12 = *(void **)(a1 + 176);
    uint64_t v13 = &v12[v11];
    int v14 = *(_DWORD *)(a2 + 36) - 1;
    while (1)
    {
      unint64_t v15 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * *v12) ^ ((0x9DDFEA08EB382D69 * *v12) >> 47));
      unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      unsigned int v17 = v14 & v16;
      unsigned int v18 = *(unsigned __int16 *)(*(void *)(a2 + 24) + 2 * (v14 & v16));
      if (v18 >= 2)
      {
        while ((v18 & 2) == 0 || v16 != *(void *)(*(void *)(a2 + 8) + 8 * v17))
        {
          ++v17;
          BOOL v10 = v18 >= 4;
          v18 >>= 1;
          if (!v10) {
            goto LABEL_18;
          }
        }
        if (*(void *)(a2 + 16)) {
          break;
        }
      }
LABEL_18:
      if (++v12 == v13) {
        return 0;
      }
    }
  }
  return 1;
}

uint64_t sub_1B6DC3B04(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 72);
  if (v4)
  {
    int v5 = *(uint64_t **)(result + 80);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      unint64_t v8 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v7) ^ ((0x9DDFEA08EB382D69 * v7) >> 47));
      char v15 = 1;
      uint64_t result = sub_1B6DB3964(a2, 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47)), &v15);
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v9 = *(unsigned int *)(v3 + 168);
  if (v9)
  {
    BOOL v10 = *(uint64_t **)(v3 + 176);
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v10++;
      unint64_t v13 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v12) ^ ((0x9DDFEA08EB382D69 * v12) >> 47));
      char v14 = 1;
      uint64_t result = sub_1B6DB3964(a2, 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47)), &v14);
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1B6DC3BD8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(CFX::RG::Resource ***)(a1 + 80);
    uint64_t v4 = 8 * v2;
    while (CFX::RG::Resource::isHazardTracked(*v3))
    {
      ++v3;
      v4 -= 8;
      if (!v4) {
        goto LABEL_5;
      }
    }
    return 0;
  }
  else
  {
LABEL_5:
    uint64_t v5 = *(unsigned int *)(a1 + 168);
    if (v5)
    {
      uint64_t v6 = *(CFX::RG::Resource ***)(a1 + 176);
      uint64_t v7 = 8 * v5 - 8;
      do
      {
        unint64_t v8 = *v6++;
        BOOL result = CFX::RG::Resource::isHazardTracked(v8);
        BOOL v10 = !result || v7 == 0;
        v7 -= 8;
      }
      while (!v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1B6DC3C64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  CFX::RG::RenderGraph::directSuccessorsReadingResource(a1, a2, a3, *a4, (uint64_t)v11);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(unsigned int *)(a2 + 72);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    uint64_t v9 = *(void **)(a2 + 80);
    while (*v9 != a3)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        uint64_t v9 = (void *)(v6 + 8 * v7);
        break;
      }
    }
  }
  else
  {
    uint64_t v9 = *(void **)(a2 + 80);
  }
  if (v7 == ((uint64_t)v9 - v6) >> 3) {
    return v12;
  }
  else {
    return v12 + 1;
  }
}

uint64_t sub_1B6DC3CE8(_DWORD *a1, uint64_t a2, CFX::RG::Resource *this)
{
  uint64_t v21 = this;
  uint64_t result = CFX::RG::Resource::isManaged(this);
  if ((result & 1) == 0)
  {
    unint64_t v7 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (void)this) ^ ((0x9DDFEA08EB382D69 * (unint64_t)this) >> 47));
    unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
    unsigned int v9 = (*(_DWORD *)(a2 + 36) - 1) & v8;
    unsigned int v10 = *(unsigned __int16 *)(*(void *)(a2 + 24) + 2 * v9);
    if (v10 < 2)
    {
LABEL_6:
      uint64_t v12 = 0;
    }
    else
    {
      while ((v10 & 2) == 0 || v8 != *(void *)(*(void *)(a2 + 8) + 8 * v9))
      {
        ++v9;
        BOOL v11 = v10 > 3;
        v10 >>= 1;
        if (!v11) {
          goto LABEL_6;
        }
      }
      uint64_t v12 = *(void *)(a2 + 16) + 16 * v9;
    }
    int v13 = *(_DWORD *)(v12 + 8);
    if (v13 != 0x7FFFFFFF)
    {
      int v14 = v13 - 1;
      *(_DWORD *)(v12 + 8) = v14;
      if (!v14)
      {
        uint64_t result = (uint64_t)sub_1B64EA528(a1, &v21);
        uint64_t v15 = (*(_DWORD *)(a2 + 36) - 1) & v8;
        uint64_t v16 = *(void *)(a2 + 24);
        unsigned int v17 = *(unsigned __int16 *)(v16 + 2 * v15);
        if (v17 >= 2)
        {
          int v18 = 1;
          for (unsigned int i = *(unsigned __int16 *)(v16 + 2 * v15); ; i >>= 1)
          {
            if ((i & 2) != 0)
            {
              uint64_t v20 = (v15 + v18 - 1);
              if (v8 == *(void *)(*(void *)(a2 + 8) + 8 * v20)) {
                break;
              }
            }
            ++v18;
            BOOL v11 = i > 3;
            if (!v11) {
              return result;
            }
          }
          *(_WORD *)(v16 + 2 * v15) = v17 ^ (1 << v18);
          *(_WORD *)(v16 + 2 * v20) ^= 1u;
          --*(_DWORD *)(a2 + 32);
        }
      }
    }
  }
  return result;
}

void sub_1B6DC3E54(uint64_t a1, _DWORD *a2, CFX::RG::Pass *a3, const CFX::RG::Resource *a4)
{
  if (*(unsigned char *)(CFX::RG::RenderGraphContext::optimisationParameters((CFX::RG::RenderGraphContext *)a1) + 6))
  {
    prof_beginFlame((uint64_t)"_DeduceResourcesUsage", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm", 854);
    if (CFX::RG::Resource::isTexture(a4))
    {
      unint64_t v8 = *(unsigned int **)(a1 + 16);
      CStackAllocatorPushFrame(v8);
      CFX::RG::RenderGraph::passesWritingResource(a2, (uint64_t)a4, (uint64_t)v8, (uint64_t)v24);
      if (v25)
      {
        char v9 = 0;
        char v10 = 0;
        BOOL v11 = v26;
        uint64_t v12 = 8 * v25;
        while (1)
        {
          BOOL isRenderTarget = CFX::RG::Pass::isRenderTarget(*v11, a4);
          v9 |= !isRenderTarget;
          v10 |= isRenderTarget;
          if (v9 & 1) != 0 && (v10) {
            break;
          }
          ++v11;
          v12 -= 8;
          if (!v12) {
            goto LABEL_11;
          }
        }
        char v10 = 1;
        char v9 = 1;
      }
      else
      {
        char v10 = 0;
        char v9 = 0;
      }
LABEL_11:
      CFX::RG::RenderGraph::passesReadingResource(a2, (uint64_t)a4, (uint64_t)v8, (uint64_t)v23);
      int v14 = v23[2];
      uint64_t v15 = *(void *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a1, a4)
                      + 40);
      uint64_t v16 = v15 | (v14 != 0);
      if (v9) {
        v16 |= 2uLL;
      }
      if (v10) {
        uint64_t v17 = v16 | 4;
      }
      else {
        uint64_t v17 = v16;
      }
      if (v15 != v17)
      {
        uint64_t v18 = CFX::RG::Resource::textureDesc(a4);
        *(void *)(v18 + 72) = v17;
        *(unsigned char *)(v18 + 80) = 1;
        CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)a1, a4);
      }
      CStackAllocatorPopFrame((uint64_t)v8);
    }
    prof_endFlame();
  }
  if (*(unsigned char *)(CFX::RG::RenderGraphContext::optimisationParameters((CFX::RG::RenderGraphContext *)a1) + 5))
  {
    if (*((unsigned char *)a3 + 344) == 3)
    {
      uint64_t v19 = CFX::GPUResourceManager::allocator(*(CFX::GPUResourceManager **)(a1 + 24));
      if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 48))(v19))
      {
        if (!CFX::RG::Resource::isManaged(a4)
          && *(void *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a1, a4)
                       + 32) == 2
          && CFX::RG::Pass::isRenderTarget(a3, a4))
        {
          uint64_t v20 = *(unsigned int **)(a1 + 16);
          CStackAllocatorPushFrame(v20);
          CFX::RG::RenderGraph::directSuccessorsReadingResource(a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)v20, (uint64_t)v24);
          if (!v25 && (*(unsigned char *)CFX::RG::Pass::renderTargetInfo(a3, a4) & 4) == 0)
          {
            unint64_t v21 = *(void *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a1, a4)+ 24);
            if (v21 <= 8 && ((1 << v21) & 0x11C) != 0)
            {
              uint64_t v22 = CFX::RG::Resource::textureDesc(a4);
              *(void *)(v22 + 56) = 3;
              *(unsigned char *)(v22 + 64) = 1;
              CFX::RG::RenderGraphContext::updateResourceDescriptor((CFX::GPUResourceManager **)a1, a4);
            }
          }
          CStackAllocatorPopFrame((uint64_t)v20);
        }
      }
    }
  }
  CFX::GPUResourceManager::allocate(*(CFX::GPUResourceManager **)(a1 + 24), a4, (const CFX::RG::RenderGraphContext *)a1);
}

void sub_1B6DC40F8(_Unwind_Exception *a1)
{
}

__n128 sub_1B6DC4110(uint64_t a1, uint64_t a2, __n128 *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      int v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v15) = *(void *)(*(void *)(a1 + 8) + 8 * v21);
          *(_OWORD *)(v26 + 16 * v15) = *(_OWORD *)(v26 + 16 * v21);
          uint64_t v8 = *(void *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      __n128 result = *a3;
      *(__n128 *)(*(void *)(a1 + 16) + 16 * v21) = *a3;
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
      uint64_t v30 = *(void *)(a1 + 24);
      *(_WORD *)(v30 + 2 * v21) |= 1u;
      *(_WORD *)(v30 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B6DC433C(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  unint64_t v28 = a3->n128_u64[0];
  uint64_t v29 = *(void *)(a1 + 16) + 16 * v10;
  *(_DWORD *)(v29 + 8) = a3->n128_u32[2];
  *(void *)uint64_t v29 = v28;
  return result;
}

void sub_1B6DC433C(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B6DBB270(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B6DC4110(a1, *v3, v2);
      }
      ++v3;
      v2 += 16;
      --v6;
    }
    while (v6);
  }
}

unint64_t CFX::ConstantBufferAlignSize(CFX *this)
{
  return ((unint64_t)this + 15) & 0xFFFFFFFFFFFFFFF0;
}

id *CFX::BufferPool::Frame::prepareForReuse(id *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = *(unsigned int *)this;
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v3 = 40 * v2;
  uint64_t v4 = (char *)this[1] + 16;
  do
  {
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4 += 5;
    v3 -= 40;
  }
  while (v3);
  int v5 = *(_DWORD *)this;
  if (!*(_DWORD *)this) {
    goto LABEL_11;
  }
  uint64_t v6 = (char *)this[1];
  uint64_t v7 = (uint64_t)v6;
  do
  {
    if (*(_DWORD *)(v7 + 32) < 0xAu)
    {
      v7 += 40;
    }
    else
    {
      this = sub_1B6DC4458(v1, (id *)v7);
      uint64_t v7 = (uint64_t)this;
      uint64_t v6 = *(char **)(v1 + 8);
      int v5 = *(_DWORD *)v1;
    }
  }
  while ((char *)v7 != &v6[40 * v5]);
  if (!v5) {
LABEL_11:
  }
    uint64_t v6 = 0;
  *(void *)(v1 + 24) = v6;
  *(_DWORD *)(v1 + 16) = 0;
  return this;
}

id *sub_1B6DC4458(uint64_t a1, id *__dst)
{
  if (*(_DWORD *)(a1 + 4)) {

  }
  unsigned int v4 = *(_DWORD *)a1 - 1;
  *(_DWORD *)a1 = v4;
  int v5 = (id *)(*(void *)(a1 + 8) + 40 * v4);
  if (v5 != __dst) {
    memmove(__dst, __dst + 5, (char *)v5 - (char *)__dst);
  }
  return __dst;
}

void sub_1B6DC44BC(unsigned int *a1, unsigned int a2)
{
  unsigned int v2 = *a1;
  if (*a1 != a2)
  {
    if (v2 <= a2)
    {
      unsigned int v7 = a1[1];
      int v8 = a2 - v7;
      if (a2 > v7)
      {
        sub_1B6DC4A40(a1, v8, 0);
        unsigned int v2 = *a1;
      }
      if (v2 < a2)
      {
        uint64_t v9 = 40 * v2;
        unint64_t v10 = a2 - (unint64_t)v2;
        do
        {
          uint64_t v11 = *((void *)a1 + 1) + v9;
          *(_OWORD *)(v11 + 16) = 0uLL;
          *(_OWORD *)uint64_t v11 = 0uLL;
          *(void *)(v11 + 8) = v11 + 16;
          *(void *)(v11 + 24) = 0;
          *(void *)(v11 + 32) = 0;
          v9 += 40;
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      unint64_t v5 = a2;
      uint64_t v6 = 40 * a2;
      do
      {
        sub_1B6DC49D4((unsigned int *)(*((void *)a1 + 1) + v6));
        ++v5;
        v6 += 40;
      }
      while (v5 < *a1);
    }
    *a1 = a2;
  }
}

void CFX::BufferPool::~BufferPool(CFX::BufferPool *this)
{
}

{
  sub_1B6DC4968((unsigned int *)this + 2);
}

uint64_t CFX::BufferPool::resourceOptions(CFX::BufferPool *this)
{
  return 16 * *((void *)this + 4);
}

int32x2_t CFX::BufferPool::allocate@<D0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v5 = (unsigned int *)(a1[2] + 40 * *(unsigned int *)a1);
  uint64_t v6 = (int32x2_t **)(v5 + 6);
  unsigned int v7 = v5 + 4;
  unint64_t v8 = 0x40000;
  if (v4 > 0x40000) {
    unint64_t v8 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  unint64_t v9 = ((v8 - 1) & 0xFFFFFFFFFFFC0000) + 0x40000;
  while (1)
  {
    unint64_t v10 = *v6;
    if (*v6)
    {
      if (*(void *)&v10[2] + v4 <= *(void *)&v10[1]) {
        break;
      }
    }
    unsigned int v11 = *v7;
    if (*v7 >= *v5)
    {
      unint64_t v12 = (*((void *)v5 + 4) + 15) & 0xFFFFFFFFFFFFFFF0;
      if (!v12) {
        unint64_t v12 = v9;
      }
      uint64_t v13 = a1[3];
      uint64_t v14 = 16 * a1[4];
      v26[0] = v12;
      v26[1] = v14;
      (*(void (**)(uint64_t, void *))(*(void *)v13 + 24))(v13, v26);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      v24[0] = v15;
      v24[1] = (id)objc_msgSend_length(v15, v16, v17, v18);
      v24[2] = 0;
      v24[3] = 0;
      int v25 = 0;
      sub_1B6DC47B0((uint64_t)v5, (uint64_t *)v24);
      *uint64_t v6 = (int32x2_t *)(*((void *)v5 + 1) + 40 * *v5 - 40);

      unsigned int v11 = *v7;
    }
    else
    {
      *uint64_t v6 = (int32x2_t *)(*((void *)v5 + 1) + 40 * v11);
    }
    unsigned int *v7 = v11 + 1;
  }
  id v19 = *(id *)v10;
  char v20 = *v6;
  int32x2_t v21 = (*v6)[2];
  *a3 = v19;
  a3[1] = v21;
  a3[2] = v4;
  v20[2] = (int32x2_t)(*(void *)&v21 + v4);
  int32x2_t result = vadd_s32(v20[3], (int32x2_t)0x100000001);
  v20[3] = result;
  return result;
}

void sub_1B6DC4794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__n128 sub_1B6DC47B0(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B6DC4C54((unsigned int *)a1, 1, 0);
    unsigned int v4 = *(_DWORD *)a1;
  }
  uint64_t v5 = *(void *)(a1 + 8) + 40 * v4;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)uint64_t v5 = v6;
  __n128 result = *(__n128 *)(a2 + 1);
  *(_OWORD *)(v5 + 20) = *(_OWORD *)((char *)a2 + 20);
  *(__n128 *)(v5 + 8) = result;
  ++*(_DWORD *)a1;
  return result;
}

void CFX::BufferPool::free(unsigned int *a1, id *a2)
{
  unsigned int v2 = (unsigned int *)(*((void *)a1 + 2) + 40 * *a1);
  uint64_t v3 = *v2;
  id v4 = *a2;
  if (v3)
  {
    uint64_t v5 = (id *)(*((void *)v2 + 1) + 24);
    uint64_t v6 = 40 * v3;
    while (*(v5 - 3) != v4)
    {
      v5 += 5;
      v6 -= 40;
      if (!v6) {
        goto LABEL_5;
      }
    }
    --*(_DWORD *)v5;
  }
  else
  {
LABEL_5:
  }
}

uint64_t CFX::BufferPool::frameCountWithoutReuse(CFX::BufferPool *this)
{
  return *((char *)this + 8);
}

id *CFX::BufferPool::nextFrame(CFX::BufferPool *this, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = *(_DWORD *)this;
  uint64_t v6 = *((void *)this + 2);
  unsigned int v7 = (unsigned int *)(v6 + 40 * *(unsigned int *)this);
  if (*v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *((void *)v7 + 1);
    unint64_t v10 = (int *)(v9 + 40 * *v7);
    unsigned int v11 = (int *)(v9 + 32);
    do
    {
      unint64_t v12 = v11 - 8;
      uint64_t v13 = objc_msgSend_length(*((void **)v11 - 4), a2, a3, a4);
      if (*(v11 - 1)) {
        int v14 = 0;
      }
      else {
        int v14 = *v11 + 1;
      }
      v8 += v13;
      *unsigned int v11 = v14;
      v11 += 10;
    }
    while (v12 + 10 != v10);
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v15 = 0x40000;
  if (v8 > 0x40000) {
    uint64_t v15 = v8;
  }
  *(void *)(v6 + 40 * v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = v15;
  __n128 result = CFX::BufferPool::Frame::prepareForReuse((id *)(v6 + 40 * v5));
  *(_DWORD *)this = (*(_DWORD *)this + 1) % *((_DWORD *)this + 2);
  return result;
}

unsigned int *sub_1B6DC4968(unsigned int *a1)
{
  if (a1[1])
  {
    if (*a1)
    {
      uint64_t v2 = 0;
      unint64_t v3 = 0;
      do
      {
        sub_1B6DC49D4((unsigned int *)(*((void *)a1 + 1) + v2));
        ++v3;
        v2 += 40;
      }
      while (v3 < *a1);
    }
    free(*((void **)a1 + 1));
  }
  return a1;
}

unsigned int *sub_1B6DC49D4(unsigned int *a1)
{
  if (a1[1])
  {
    if (*a1)
    {
      uint64_t v2 = 0;
      unint64_t v3 = 0;
      do
      {

        ++v3;
        v2 += 40;
      }
      while (v3 < *a1);
    }
    free(*((void **)a1 + 1));
  }
  return a1;
}

void sub_1B6DC4A40(unsigned int *a1, int a2, int a3)
{
  id v4 = (unsigned int *)*((void *)a1 + 1);
  double v5 = 1.5;
  if (a3) {
    double v5 = 1.0;
  }
  uint64_t v6 = a1 + 4;
  unsigned int v7 = (v5 * (double)(a1[1] + a2));
  unint64_t v8 = (char *)malloc_type_malloc(40 * v7, 0xD5346062uLL);
  memset(v8, 255, 40 * v7);
  if (*a1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      unsigned int v11 = &v8[v9];
      uint64_t v12 = *((void *)a1 + 1) + v9;
      *(void *)unsigned int v11 = 0;
      *((void *)v11 + 1) = &v8[v9 + 16];
      sub_1B6DC4B7C((unsigned int *)&v8[v9], (unsigned int *)v12);
      uint64_t v13 = *(void *)(v12 + 32);
      *((_OWORD *)v11 + 1) = *(_OWORD *)(v12 + 16);
      *((void *)v11 + 4) = v13;
      if (v4 != v6) {
        sub_1B6DC49D4((unsigned int *)(*((void *)a1 + 1) + v9));
      }
      ++v10;
      v9 += 40;
    }
    while (v10 < *a1);
  }
  *((void *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v6)
  {
    free(v4);
  }
}

unsigned int *sub_1B6DC4B7C(unsigned int *a1, unsigned int *a2)
{
  if (a2 != a1)
  {
    if (a1[1])
    {
      if (*a1)
      {
        uint64_t v4 = 0;
        unint64_t v5 = 0;
        do
        {

          ++v5;
          v4 += 40;
        }
        while (v5 < *a1);
      }
      free(*((void **)a1 + 1));
      *((void *)a1 + 1) = a1 + 4;
    }
    uint64_t v6 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unsigned int v7 = (unsigned int *)*((void *)a2 + 1);
    if (v7 == a2 + 4)
    {
      uint64_t v8 = v6;
      if (v6)
      {
        uint64_t v9 = a1 + 6;
        do
        {
          uint64_t v10 = *(void *)v7;
          *(void *)unsigned int v7 = 0;
          *((void *)v9 - 1) = v10;
          long long v11 = *(_OWORD *)(v7 + 2);
          *(_OWORD *)((char *)v9 + 1sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v7 + 5);
          *uint64_t v9 = v11;
          uint64_t v9 = (_OWORD *)((char *)v9 + 40);
          v7 += 10;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      *((void *)a1 + 1) = v7;
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = a2 + 4;
  }
  return a1;
}

void sub_1B6DC4C54(unsigned int *a1, int a2, int a3)
{
  uint64_t v4 = (unsigned int *)*((void *)a1 + 1);
  double v5 = 1.5;
  if (a3) {
    double v5 = 1.0;
  }
  uint64_t v6 = a1 + 4;
  unsigned int v7 = (v5 * (double)(a1[1] + a2));
  uint64_t v8 = (char *)malloc_type_malloc(40 * v7, 0xD5346062uLL);
  memset(v8, 255, 40 * v7);
  if (*a1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      long long v11 = &v8[v9];
      uint64_t v12 = (uint64_t *)(*((void *)a1 + 1) + v9);
      uint64_t v13 = *v12;
      *uint64_t v12 = 0;
      *(void *)long long v11 = v13;
      long long v14 = *(_OWORD *)(v12 + 1);
      *(_OWORD *)(v11 + 20) = *(_OWORD *)((char *)v12 + 20);
      *(_OWORD *)(v11 + 8) = v14;
      if (v4 != v6) {

      }
      ++v10;
      v9 += 40;
    }
    while (v10 < *a1);
  }
  *((void *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v6)
  {
    free(v4);
  }
}

uint64_t CFX::CrossFrameResourceManager::get(CFX::CrossFrameResourceManager *this, uint64_t a2)
{
  unsigned int v2 = (*((_DWORD *)this + 7) - 1) & a2;
  unsigned int v3 = *(unsigned __int16 *)(*((void *)this + 2) + 2 * v2);
  if (v3 < 2) {
    return 0;
  }
  while ((v3 & 2) == 0 || *(void *)(*(void *)this + 8 * v2) != a2)
  {
    ++v2;
    BOOL v4 = v3 >= 4;
    v3 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  uint64_t v6 = *((void *)this + 1);
  if (!v6) {
    return 0;
  }
  uint64_t result = *(void *)(v6 + 8 * v2);
  *(unsigned char *)(result + 8) = 0;
  return result;
}

uint64_t CFX::CrossFrameResourceManager::set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  sub_1B6DC4E5C(a1, a2, &v4);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B6DC4E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1B6DC5398(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6DC4E5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 16);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v6 + 15;
    if (v12 >= (int)v7 + 496) {
      unsigned int v12 = v7 + 496;
    }
    if (v7 >= v12)
    {
      LODWORD(v14) = v7;
    }
    else
    {
      uint64_t v13 = (__int16 *)(v8 + 2 * v7);
      LODWORD(v14) = v7;
      while (1)
      {
        __int16 v15 = *v13++;
        if ((v15 & 1) == 0) {
          break;
        }
        LODWORD(v14) = v14 + 1;
        if (v12 == v14) {
          goto LABEL_34;
        }
      }
    }
    if (v14 != v12)
    {
      *(_WORD *)(v8 + 2 * v14) |= 1u;
      if (v14 <= (int)v7 + 14)
      {
        uint64_t v32 = v14;
LABEL_37:
        uint64_t v33 = *(void *)(a1 + 8);
        uint64_t v34 = *a3;
        *a3 = 0;
        *(void *)(v33 + 8 * v3sub_1B6DC4968((unsigned int *)this + 2) = v34;
        *(void *)(*(void *)a1 + 8 * v3sub_1B6DC4968((unsigned int *)this + 2) = a2;
        uint64_t v35 = *(void *)(a1 + 16);
        *(_WORD *)(v35 + 2 * v32) |= 1u;
        uint64_t result = 1;
        *(_WORD *)(v35 + 2 * v7) |= 1 << (v14 - v7 + 1);
        ++*(_DWORD *)(a1 + 24);
        return result;
      }
      while (1)
      {
        unsigned int v16 = v14;
        unsigned int v17 = v14 - 14;
        if (v14 < 0xF) {
          unsigned int v17 = 0;
        }
        unsigned int v18 = v17 - 1;
        int v19 = v17 <= v14 ? v14 : v17;
        char v20 = 1;
        while (1)
        {
          uint64_t v14 = v18 + 1;
          if (v17 <= v14) {
            break;
          }
LABEL_26:
          ++v20;
          unsigned int v18 = v14;
          if (v14 == v19) {
            goto LABEL_33;
          }
        }
        int v21 = 1 << (v18 - v17 + 2);
        char v22 = v20;
        unsigned int v23 = v17;
        while (1)
        {
          uint64_t v24 = v23;
          if (((unsigned __int16)v21 & *(_WORD *)(v8 + 2 * v23)) != 0) {
            break;
          }
          ++v23;
          LOWORD(v21) = (unsigned __int16)v21 >> 1;
          --v22;
          if ((int)v24 + 1 > v14) {
            goto LABEL_26;
          }
        }
        if (v14 >= v16) {
          break;
        }
        uint64_t v25 = *(void *)(a1 + 8);
        *(void *)(*(void *)a1 + 8 * v16) = *(void *)(*(void *)a1 + 8 * v14);
        uint64_t v26 = *(void *)(v25 + 8 * v14);
        *(void *)(v25 + 8 * v14) = 0;
        *(void *)(v25 + 8 * v16) = v26;
        uint64_t v27 = *(void *)(a1 + 8);
        uint64_t v28 = *(void *)(v27 + 8 * v14);
        *(void *)(v27 + 8 * v14) = 0;
        if (v28) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
        uint64_t v8 = *(void *)(a1 + 16);
        *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v16 - v24 + 1))) ^ (1 << v22);
        if (v14 <= (int)v7 + 14)
        {
          uint64_t v32 = v14;
          goto LABEL_37;
        }
      }
LABEL_33:
      *(_WORD *)(v8 + 2 * v16) ^= 1u;
    }
LABEL_34:
    sub_1B6DC52BC(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)a1 + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = *a3;
  *a3 = 0;
  uint64_t result = *(void *)(v29 + 8 * v10);
  *(void *)(v29 + 8 * v10) = v30;
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

void CFX::CrossFrameResourceManager::nextFrame(CFX::CrossFrameResourceManager *this)
{
  uint64_t v18 = 0x2000000000;
  int v19 = v20;
  int v1 = *((_DWORD *)this + 7);
  if (v1 != -15)
  {
    unint64_t v3 = 0;
    do
    {
      if (*(_WORD *)(*((void *)this + 2) + 2 * v3))
      {
        uint64_t v4 = *(void *)this;
        uint64_t v5 = *(void *)(*((void *)this + 1) + 8 * v3);
        unsigned int v6 = *(unsigned __int8 *)(v5 + 8);
        *(unsigned char *)(v5 + 8) = v6 + 1;
        if (v6 >= 0xA)
        {
          sub_1B63D4868((uint64_t)&v18, (void *)(v4 + 8 * v3));
          int v1 = *((_DWORD *)this + 7);
        }
      }
      ++v3;
    }
    while (v3 < (v1 + 15));
    if (v18)
    {
      uint64_t v7 = (char *)v19;
      uint64_t v8 = (char *)v19 + 8 * v18;
      do
      {
        uint64_t v9 = (*((_DWORD *)this + 7) - 1) & *(void *)v7;
        uint64_t v10 = *((void *)this + 2);
        unsigned int v11 = *(unsigned __int16 *)(v10 + 2 * v9);
        if (v11 >= 2)
        {
          int v12 = 1;
          unsigned int v13 = *(unsigned __int16 *)(v10 + 2 * v9);
          while (1)
          {
            if ((v13 & 2) != 0)
            {
              uint64_t v14 = (v9 + v12 - 1);
              if (*(void *)v7 == *(void *)(*(void *)this + 8 * v14)) {
                break;
              }
            }
            ++v12;
            BOOL v15 = v13 > 3;
            v13 >>= 1;
            if (!v15) {
              goto LABEL_18;
            }
          }
          *(_WORD *)(v10 + 2 * v9) = v11 ^ (1 << v12);
          *(_WORD *)(v10 + 2 * v14) ^= 1u;
          uint64_t v16 = *((void *)this + 1);
          uint64_t v17 = *(void *)(v16 + 8 * v14);
          *(void *)(v16 + 8 * v14) = 0;
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
          --*((_DWORD *)this + 6);
        }
LABEL_18:
        v7 += 8;
      }
      while (v7 != v8);
    }
  }
  if (HIDWORD(v18))
  {
    if (v19 != v20) {
      free(v19);
    }
  }
}

void sub_1B6DC5298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, void *a11)
{
  if (a10)
  {
    if (a11 != v11) {
      free(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1B6DC52BC(uint64_t a1)
{
  unsigned int v2 = *(void **)a1;
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(__int16 **)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 28);
  sub_1B63F72E4(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v5 != -15)
  {
    uint64_t v7 = v3;
    uint64_t v8 = v2;
    uint64_t v9 = v4;
    do
    {
      __int16 v10 = *v9++;
      if (v10)
      {
        sub_1B6DC4E5C(a1, *v8, v7);
        uint64_t v11 = *v7;
        uint64_t *v7 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);

  free(v4);
}

uint64_t sub_1B6DC5398(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

BOOL CFX::RG::isCopyPass(CFX::RG *this, CFX::RG::Pass *a2)
{
  uint64_t v2 = *((void *)this + 5);
  unint64_t v3 = &qword_1E9E48000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48040, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = v2;
    int v7 = __cxa_guard_acquire(&qword_1E9E48040);
    unint64_t v3 = &qword_1E9E48000;
    uint64_t v2 = v8;
    if (v7)
    {
      byte_1E9E48038 = 1;
      __cxa_guard_release(&qword_1E9E48040);
      unint64_t v3 = &qword_1E9E48000;
      uint64_t v2 = v8;
    }
  }
  BOOL v4 = *((unsigned char *)v3 + 56) == 0;
  uint64_t v5 = 0x646F94B6FAFEAA7CLL;
  if (v4) {
    uint64_t v5 = 0;
  }
  return v2 == v5;
}

__n128 CFX::RG::CopyPass::CopyPass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = &qword_1E9E48000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48040, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a3;
    uint64_t v13 = a4;
    uint64_t v14 = a2;
    int v11 = __cxa_guard_acquire(&qword_1E9E48040);
    int v7 = &qword_1E9E48000;
    a4 = v13;
    a2 = v14;
    a3 = v12;
    if (v11)
    {
      byte_1E9E48038 = 1;
      __cxa_guard_release(&qword_1E9E48040);
      int v7 = &qword_1E9E48000;
      a4 = v13;
      a2 = v14;
      a3 = v12;
    }
  }
  if (*((unsigned char *)v7 + 56)) {
    uint64_t v8 = 0x646F94B6FAFEAA7CLL;
  }
  else {
    uint64_t v8 = 0;
  }
  CFX::RG::Pass::Pass(a1, a2, a3, a4, 0, v8, 0);
  *(void *)a1 = &unk_1F0FB51A8;
  *(void *)(a1 + 360) = 0;
  __n128 result = *(__n128 *)a5;
  long long v10 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 384) = v10;
  *(_WORD *)(a1 + 400) = 0;
  return result;
}

void CFX::RG::CopyPass::execute(const CFX::RG::Resource **this, CFX::GPUResourceManager **a2, int a3, uint64_t a4)
{
  uint64_t v201 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 401))
  {
    if (a3 == 2)
    {
      v193 = CFX::GPUResourceManager::getTexture(a2[3], this[46]);
      int v21 = CFX::GPUResourceManager::getTexture(a2[3], this[48]);
      int v62 = *((unsigned __int8 *)this + 344);
      if (v62 != 4)
      {
        if (v62 == 3)
        {
          objc_msgSend_setRenderPipelineState_(*(void **)(a4 + 8), v59, *((void *)this[45] + 2), v61);
          objc_msgSend_setFragmentTexture_atIndex_(*(void **)(a4 + 8), v97, (uint64_t)v193, 0);
          objc_msgSend_drawPrimitives_vertexStart_vertexCount_(*(void **)(a4 + 8), v98, 3, 0, 3);
        }
        else if (v62 == 2)
        {
          unint64_t v63 = objc_msgSend_mipmapLevelCount(v193, v59, v60, v61);
          unint64_t v67 = objc_msgSend_mipmapLevelCount(v21, v64, v65, v66);
          if (v63 >= v67) {
            unsigned int v68 = v67;
          }
          else {
            unsigned int v68 = v63;
          }
          uint64_t v69 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, this[46]);
          if (VFXMTLTextureTypeIsCube(*(void *)(v69 + 24))) {
            int v71 = 6;
          }
          else {
            int v71 = 1;
          }
          objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount_(*(void **)(a4 + 8), v70, (uint64_t)v193, (*((_DWORD *)this + 94) * v71), 0, v21, (*((_DWORD *)this + 98) * v71), 0, (*((_DWORD *)this + 99) * v71), v68);
        }
        goto LABEL_66;
      }
      uint64_t v99 = CFX::GPUResourceManager::allocator(a2[3]);
      v192 = (*(void (**)(uint64_t))(*(void *)v99 + 40))(v99);
      id v100 = *(id *)(a4 + 8);
      objc_msgSend_setComputePipelineState_(v100, v101, *((void *)this[45] + 3), v102);
      unint64_t v191 = objc_msgSend_maxTotalThreadsPerThreadgroup(*((void **)this[45] + 3), v103, v104, v105);
      if (*((unsigned char *)this + 400))
      {
        uint64_t v109 = objc_msgSend_textureType(v193, v106, v107, v108);
        BOOL IsArray = VFXMTLTextureTypeIsArray(v109);
        uint64_t v113 = objc_msgSend_textureType(v21, v110, v111, v112);
        BOOL v188 = VFXMTLTextureTypeIsArray(v113);
        uint64_t v117 = objc_msgSend_textureType(v193, v114, v115, v116);
        uint64_t ArrayElementType = VFXMTLTextureTypeGetArrayElementType(v117);
        uint64_t v122 = objc_msgSend_textureType(v21, v119, v120, v121);
        uint64_t v187 = VFXMTLTextureTypeGetArrayElementType(v122);
        unsigned int v126 = objc_msgSend_mipmapLevelCount(v193, v123, v124, v125);
        unsigned int v130 = objc_msgSend_mipmapLevelCount(v21, v127, v128, v129);
        uint64_t v131 = v126 >= v130 ? v130 : v126;
        uint64_t v189 = v131;
        if (v131)
        {
          uint64_t v132 = 0;
          do
          {
            if (VFXMTLTextureTypeIsCube(ArrayElementType)) {
              int v136 = 6;
            }
            else {
              int v136 = 1;
            }
            uint64_t v137 = (*((_DWORD *)this + 94) * v136);
            if (v132) {
              BOOL v138 = 0;
            }
            else {
              BOOL v138 = v137 == 0;
            }
            int v139 = !v138 || IsArray;
            if (v139 == 1)
            {
              int v140 = *((_DWORD *)this + 99);
              uint64_t v141 = objc_msgSend_pixelFormat(v193, v133, v134, v135);
              v143 = objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v193, v142, v141, ArrayElementType, v132, 1, v137, (v140 * v136));
              objc_msgSend_setTexture_atIndex_(v100, v144, (uint64_t)v143, 0);
            }
            else
            {
              objc_msgSend_setTexture_atIndex_(v100, v133, (uint64_t)v193, 0);
            }
            if (objc_msgSend_supportsReadWriteTextureCubeArguments(v192, v145, v146, v147))
            {
              if (v132) {
                int v151 = 1;
              }
              else {
                int v151 = v188;
              }
              if (v151 == 1)
              {
                uint64_t v152 = objc_msgSend_pixelFormat(v21, v148, v149, v150);
                uint64_t v154 = objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v21, v153, v152, v187, v132, 1, (6 * *((_DWORD *)this + 98)), 6);
                objc_msgSend_setTexture_atIndex_(v100, v155, (uint64_t)v154, 1);
              }
              else
              {
                objc_msgSend_setTexture_atIndex_(v100, v148, (uint64_t)v21, 1);
              }
              unint64_t v177 = objc_msgSend_threadExecutionWidth(*((void **)this[45] + 3), v156, v157, v158);
              uint64_t v181 = objc_msgSend_width(v21, v178, v179, v180);
              uint64_t v185 = objc_msgSend_height(v21, v182, v183, v184);
              v195[0] = v181;
              v195[1] = v185;
              v195[2] = 6;
              v194[0] = v177;
              v194[1] = v191 / v177;
              v194[2] = 1;
              objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v100, v186, (uint64_t)v195, (uint64_t)v194);
            }
            else
            {
              uint64_t v159 = 0;
              memset(v200, 0, sizeof(v200));
              while (v159 != 6)
              {
                uint64_t v160 = objc_msgSend_pixelFormat(v21, v148, v149, v150);
                uint64_t v162 = objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v21, v161, v160, 2, v132, 1, (v159 + *((_DWORD *)this + 98)), 1);
                v163 = (uint64_t *)v200 + v159;
                v164 = (void *)*v163;
                uint64_t *v163 = v162;

                objc_msgSend_setTexture_atIndex_(v100, v165, *v163, ++v159);
              }
              unint64_t v166 = objc_msgSend_threadExecutionWidth(*((void **)this[45] + 3), v148, v149, v150);
              uint64_t v170 = objc_msgSend_width(*(void **)&v200[0], v167, v168, v169);
              uint64_t v174 = objc_msgSend_height(*(void **)&v200[0], v171, v172, v173);
              v197[0] = v170;
              v197[1] = v174;
              v197[2] = 6;
              v196[0] = v166;
              v196[1] = v191 / v166;
              v196[2] = 1;
              objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v100, v175, (uint64_t)v197, (uint64_t)v196);
              for (uint64_t i = 40; i != -8; i -= 8)
            }
            ++v132;
          }
          while (v132 != v189);
        }
      }

      id v22 = v192;
    }
    else
    {
      if (a3 != 1) {
        return;
      }
      int v6 = *((unsigned __int8 *)this + 344);
      if (v6 == 4)
      {
        unint64_t v72 = CFX::RG::Pass::hash((CFX::RG::Pass *)this);
        unint64_t v73 = 0x9DDFEA08EB382D69 * (v72 ^ *((unsigned __int8 *)this + 344));
        uint64_t v74 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v72 ^ (v73 >> 47) ^ v73)) ^ ((0x9DDFEA08EB382D69 * (v72 ^ (v73 >> 47) ^ v73)) >> 47));
        uint64_t v75 = CFX::CrossFrameResourceManager::get(a2[4], v74);
        this[45] = (const CFX::RG::Resource *)v75;
        if (v75) {
          return;
        }
        this[45] = (const CFX::RG::Resource *)sub_1B6DC5F34(a2[4], v74);
        uint64_t v76 = CFX::GPUResourceManager::allocator(a2[3]);
        v193 = (*(void (**)(uint64_t))(*(void *)v76 + 40))(v76);
        uint64_t v77 = CFX::GPUResourceManager::allocator(a2[3]);
        int v21 = (*(void (**)(uint64_t))(*(void *)v77 + 32))(v77);
        if (!*((unsigned char *)this + 400))
        {
LABEL_66:

          return;
        }
        if (objc_msgSend_supportsReadWriteTextureCubeArguments(v193, v78, v79, v80)) {
          uint64_t v83 = objc_msgSend_newFunctionWithName_(v21, v81, @"texturecube_copy_resample_kernel", v82);
        }
        else {
          uint64_t v83 = objc_msgSend_newFunctionWithName_(v21, v81, @"texturecube_slices_copy_kernel", v82);
        }
        id v198 = 0;
        id v22 = (id)v83;
        uint64_t v85 = objc_msgSend_newComputePipelineStateWithFunction_error_(v193, v84, v83, (uint64_t)&v198);
        id v86 = v198;
        unint64_t v87 = this[45];
        unsigned int v88 = (void *)*((void *)v87 + 3);
        *((void *)v87 + 3) = v85;

        if (v86)
        {
          objc_msgSend_description(v86, v89, v90, v91);
          id v92 = objc_claimAutoreleasedReturnValue();
          unint64_t v96 = (const char *)objc_msgSend_UTF8String(v92, v93, v94, v95);
          printf("%s", v96);

          abort();
        }
      }
      else
      {
        if (v6 != 3) {
          return;
        }
        unint64_t v7 = CFX::RG::Pass::hash((CFX::RG::Pass *)this);
        uint64_t v8 = *(unsigned __int8 *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, this[46])+ 9);
        uint64_t v9 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, this[48]);
        uint64_t v10 = *(unsigned __int8 *)(v9 + 9);
        uint64_t v11 = *(void *)(v9 + 16);
        unint64_t v12 = 0x9DDFEA08EB382D69 * (v7 ^ *((unsigned __int8 *)this + 344));
        unint64_t v13 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v7 ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v12 >> 47) ^ v12)) >> 47));
        unint64_t v14 = 0x9DDFEA08EB382D69
            * (v13 ^ ((0x9DDFEA08EB382D69 * (v13 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v13 ^ v11)));
        unint64_t v15 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                              * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ v10)));
        unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
        uint64_t v17 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v16 ^ ((0x9DDFEA08EB382D69 * (v16 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (v16 ^ v8)))) ^ ((0x9DDFEA08EB382D69 * (v16 ^ ((0x9DDFEA08EB382D69 * (v16 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (v16 ^ v8)))) >> 47));
        uint64_t v18 = CFX::CrossFrameResourceManager::get(a2[4], v17);
        this[45] = (const CFX::RG::Resource *)v18;
        if (v18) {
          return;
        }
        this[45] = (const CFX::RG::Resource *)sub_1B6DC5F34(a2[4], v17);
        uint64_t v19 = CFX::GPUResourceManager::allocator(a2[3]);
        v193 = (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
        uint64_t v20 = CFX::GPUResourceManager::allocator(a2[3]);
        int v21 = (*(void (**)(uint64_t))(*(void *)v20 + 32))(v20);
        id v22 = objc_alloc_init(MEMORY[0x1E4F352F0]);
        uint64_t v25 = objc_msgSend_newFunctionWithName_(v21, v23, @"vfx_draw_fullscreen_triangle_vertex", v24);
        objc_msgSend_setVertexFunction_(v22, v26, (uint64_t)v25, v27);

        if (v8 <= 1) {
          uint64_t v30 = objc_msgSend_newFunctionWithName_(v21, v28, @"vfx_draw_fullscreen_fragment", v29);
        }
        else {
          uint64_t v30 = objc_msgSend_newFunctionWithName_(v21, v28, @"vfx_draw_fullscreen_fragment_ms", v29);
        }
        uint64_t v33 = (void *)v30;
        objc_msgSend_setFragmentFunction_(v22, v31, v30, v32);

        uint64_t v37 = objc_msgSend_colorAttachments(v22, v34, v35, v36);
        uint64_t v40 = objc_msgSend_objectAtIndexedSubscript_(v37, v38, 0, v39);
        objc_msgSend_setPixelFormat_(v40, v41, v11, v42);

        objc_msgSend_setRasterSampleCount_(v22, v43, v10, v44);
        id v199 = 0;
        uint64_t v46 = objc_msgSend_newRenderPipelineStateWithDescriptor_error_(v193, v45, (uint64_t)v22, (uint64_t)&v199);
        id v47 = v199;
        unsigned int v48 = this[45];
        uint64_t v49 = (void *)*((void *)v48 + 2);
        *((void *)v48 + sub_1B6DC4968((unsigned int *)this + 2) = v46;

        if (v47)
        {
          objc_msgSend_description(v47, v50, v51, v52);
          id v53 = objc_claimAutoreleasedReturnValue();
          uint64_t v57 = (const char *)objc_msgSend_UTF8String(v53, v54, v55, v56);
          printf("%s", v57);

          abort();
        }
      }
    }

    goto LABEL_66;
  }
}

void sub_1B6DC5DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B6DC5F34(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

uint64_t CFX::RG::CopyPass::init(const CFX::RG::Resource **this, CFX::GPUResourceManager **a2)
{
  BOOL v4 = (unsigned __int16 *)CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(a2, this[46]);
  uint64_t v5 = (unsigned __int16 *)CFX::RG::RenderGraphContext::tryResolvedTextureDescriptor(a2, this[48]);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = !v6;
  if (!v6)
  {
    int v8 = *v4;
    int v9 = v4[1];
    unsigned int v10 = *((unsigned __int8 *)v4 + 9);
    uint64_t v11 = *((void *)v4 + 3);
    uint64_t v28 = *((void *)v4 + 2);
    int v12 = *v5;
    int v13 = v5[1];
    unsigned int v14 = *((unsigned __int8 *)v5 + 9);
    uint64_t v15 = *((void *)v5 + 3);
    VFXMTLTextureTypeGetArrayElementType(v11);
    VFXMTLTextureTypeGetArrayElementType(v15);
    if (VFXMTLTextureTypeIsCube(v11))
    {
      BOOL IsCube = VFXMTLTextureTypeIsCube(v15);
      *((unsigned char *)this + 400) = IsCube;
      if (IsCube)
      {
        *((unsigned char *)this + 344) = 4;
        CFX::RG::Pass::readFrom((uint64_t *)this, this[46]);
        CFX::RG::Pass::writeTo((uint64_t *)this, this[48]);
        return v7;
      }
    }
    else
    {
      *((unsigned char *)this + 400) = 0;
    }
    *((unsigned char *)this + 344) = 3;
    CFX::RG::Pass::allocInitDependentParams(this);
    BOOL v18 = v8 == v12 && v9 == v13;
    BOOL v19 = v14 < v10 && v18;
    int IsDepth = VFXMTLTexturePixelFormatIsDepth(v28);
    uint64_t v21 = CFX::RG::Resource::textureDesc(this[48]);
    if (!*(unsigned char *)(v21 + 140)) {
      *(unsigned char *)(v21 + 140) = 1;
    }
    *(_DWORD *)(v21 + 136) = 84148994;
    id v22 = this[46];
    if (v19)
    {
      BOOL v23 = IsDepth == 0;
      if (IsDepth) {
        uint64_t v24 = 0x200000001;
      }
      else {
        uint64_t v24 = 0x100000001;
      }
      if (IsDepth) {
        uint64_t v25 = 0x200000004;
      }
      else {
        uint64_t v25 = 0x100000004;
      }
      if (v23) {
        int v26 = 0;
      }
      else {
        int v26 = -1;
      }
      CFX::RG::Pass::renderTo((uint64_t)this, (uint64_t)v22, v24, v26);
      CFX::RG::Pass::renderTo((uint64_t)this, (uint64_t)this[48], v25, v26);
      *((unsigned char *)this + 401) = 1;
    }
    else
    {
      CFX::RG::Pass::readFrom((uint64_t *)this, v22);
      CFX::RG::Pass::renderTo((uint64_t)this, (uint64_t)this[48], 0x100000000, 0);
    }
  }
  return v7;
}

uint64_t CFX::RG::makeCopyPass(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = a2;
  return sub_1B6DC61AC(a1, &v4, a3);
}

uint64_t sub_1B6DC61AC(uint64_t *a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  sub_1B6DC6F1C(v8[0], v5, v8, a2, a3);
  v8[0] = v6;
  sub_1B63C88CC(a1 + 18, v8);
  return v8[0];
}

CFX::RG::Pass *CFX::RG::makeCopyPass(CFX::RG::RenderGraphContext *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v8 = a2;
  uint64_t v5 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a1);
  uint64_t v6 = (CFX::RG::Pass *)sub_1B6DC61AC(v5, &v8, a3);
  CFX::RG::Pass::triggerInit(v6, a1);
  return v6;
}

CFX::RG::RenderGraphBuilder *CFX::RG::copyIfNeeded_r(CFX::RG *this, CFX::RG::RenderGraphBuilder *a2, CFX::RG::Resource *a3, CFX::RG::Pass *a4, const CFX::RG::TextureDescriptorReference *a5, const char *a6)
{
  if (CFX::RG::Resource::isReference(a2)) {
    goto LABEL_29;
  }
  uint64_t v11 = (CFX::RG::TextureDescriptorReference *)CFX::RG::Resource::textureDesc(a2);
  *(void *)&long long v30 = CFX::RG::TextureDescriptorReference::baseReference(v11);
  uint64_t v34 = (const char *)CFX::RG::TextureDescriptorReference::baseReference(a4);
  if (!CFX::RG::ResourceIdentifier::operator==(&v30, &v34)) {
    goto LABEL_29;
  }
  int v12 = (unsigned __int16 *)CFX::RG::Resource::constTextureDesc(a2);
  if (*((unsigned char *)v12 + 2) && *((unsigned char *)a4 + 2))
  {
    if (*v12 != *(unsigned __int16 *)a4) {
      goto LABEL_29;
    }
  }
  else if ((*((unsigned char *)v12 + 2) != 0) != (*((unsigned char *)a4 + 2) != 0))
  {
    goto LABEL_29;
  }
  uint64_t v13 = CFX::RG::Resource::constTextureDesc(a2);
  if (*(unsigned char *)(v13 + 6) && *((unsigned char *)a4 + 6))
  {
    if (*(unsigned __int16 *)(v13 + 4) != *((unsigned __int16 *)a4 + 2)) {
      goto LABEL_29;
    }
  }
  else if ((*(unsigned char *)(v13 + 6) != 0) != (*((unsigned char *)a4 + 6) != 0))
  {
    goto LABEL_29;
  }
  uint64_t v14 = CFX::RG::Resource::constTextureDesc(a2);
  if (*(unsigned char *)(v14 + 32) && *((unsigned char *)a4 + 32))
  {
    if (*(void *)(v14 + 24) != *((void *)a4 + 3)) {
      goto LABEL_29;
    }
LABEL_18:
    if (*(float *)(CFX::RG::Resource::constTextureDesc(a2) + 144) != *((float *)a4 + 36)) {
      goto LABEL_29;
    }
    uint64_t v15 = CFX::RG::Resource::constTextureDesc(a2);
    char v16 = *(unsigned char *)(v15 + 19) ? *(unsigned char *)(v15 + 18) : 1;
    char v17 = *((unsigned char *)a4 + 19) ? *((unsigned char *)a4 + 18) : 1;
    if (v16 != v17) {
      goto LABEL_29;
    }
    uint64_t v18 = CFX::RG::Resource::constTextureDesc(a2);
    if (*(unsigned char *)(v18 + 48) && *((unsigned char *)a4 + 48))
    {
      if (*(void *)(v18 + 40) != *((void *)a4 + 5)) {
        goto LABEL_29;
      }
    }
    else if ((*(unsigned char *)(v18 + 48) != 0) != (*((unsigned char *)a4 + 48) != 0))
    {
      goto LABEL_29;
    }
    return a2;
  }
  if ((*(unsigned char *)(v14 + 32) != 0) == (*((unsigned char *)a4 + 32) != 0)) {
    goto LABEL_18;
  }
LABEL_29:
  uint64_t v19 = CFX::RG::Resource::name(a2);
  long long v20 = *((_OWORD *)a4 + 7);
  v33[6] = *((_OWORD *)a4 + 6);
  v33[7] = v20;
  long long v21 = *((_OWORD *)a4 + 9);
  v33[8] = *((_OWORD *)a4 + 8);
  v33[9] = v21;
  long long v22 = *((_OWORD *)a4 + 3);
  v33[2] = *((_OWORD *)a4 + 2);
  v33[3] = v22;
  long long v23 = *((_OWORD *)a4 + 5);
  v33[4] = *((_OWORD *)a4 + 4);
  v33[5] = v23;
  long long v24 = *((_OWORD *)a4 + 1);
  v33[0] = *(_OWORD *)a4;
  v33[1] = v24;
  uint64_t v25 = sub_1B63CFDE4((uint64_t *)this, v19, v33);
  int v26 = v25;
  uint64_t v27 = "Resource copy";
  if (a5) {
    uint64_t v27 = (const char *)a5;
  }
  *(void *)&long long v30 = a2;
  DWORD2(v30) = 0;
  uint64_t v31 = v25;
  uint64_t v32 = 0x100000000;
  uint64_t v34 = v27;
  uint64_t v28 = (uint64_t *)sub_1B6DC61AC((uint64_t *)this, (uint64_t *)&v34, &v30);
  if (a3) {
    CFX::RG::Pass::dependsOn(v28, a3);
  }
  return v26;
}

BOOL CFX::RG::isAggregatePass(CFX::RG *this, CFX::RG::Pass *a2)
{
  uint64_t v2 = *((void *)this + 5);
  unint64_t v3 = &qword_1E9E48000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48050, memory_order_acquire) & 1) == 0)
  {
    uint64_t v6 = v2;
    int v5 = __cxa_guard_acquire(&qword_1E9E48050);
    unint64_t v3 = &qword_1E9E48000;
    uint64_t v2 = v6;
    if (v5)
    {
      qword_1E9E48048 = 0x21ECCCB984E35749;
      __cxa_guard_release(&qword_1E9E48050);
      unint64_t v3 = &qword_1E9E48000;
      uint64_t v2 = v6;
    }
  }
  return v2 == v3[9];
}

uint64_t CFX::RG::AggregatePass::AggregatePass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7)
{
  uint64_t v8 = a6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48050, memory_order_acquire) & 1) == 0)
  {
    char v16 = a7;
    uint64_t v14 = a2;
    uint64_t v15 = a3;
    int v13 = __cxa_guard_acquire(&qword_1E9E48050);
    a2 = v14;
    a3 = v15;
    a7 = v16;
    uint64_t v8 = a6;
    if (v13)
    {
      qword_1E9E48048 = sub_1B6DC6DC8((unint64_t)"AGGREGATE_PASS", 0xEu);
      __cxa_guard_release(&qword_1E9E48050);
      a2 = v14;
      a3 = v15;
      a7 = v16;
      uint64_t v8 = a6;
    }
  }
  CFX::RG::Pass::Pass(a1, a2, a3, (uint64_t)"", a7, qword_1E9E48048, v8);
  *(void *)a1 = &unk_1F0FB3340;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)a5;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = a1 + 392;
  sub_1B6DBA100(a1 + 360, a5);
  CFX::RG::AggregatePass::commonInit((CFX::RG::Pass *)a1, a4);
  return a1;
}

void sub_1B6DC6670(_Unwind_Exception *a1)
{
  sub_1B65504F0(v2);
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t *CFX::RG::AggregatePass::commonInit(CFX::RG::Pass *this, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v26 = 0x800000000;
  uint64_t v27 = v28;
  memset(v28, 0, sizeof(v28));
  uint64_t v21 = a2;
  uint64_t v22 = 0x800000000;
  long long v23 = &v24;
  uint64_t v4 = *((unsigned int *)this + 94);
  if (v4)
  {
    int v5 = (unint64_t *)*((void *)this + 48);
    uint64_t v6 = &v5[v4];
    do
    {
      unint64_t v2 = *v5;
      if (*(_DWORD *)(*v5 + 72))
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        do
        {
          sub_1B6DB4424(&v21, (void *)(*(void *)(v2 + 80) + v7));
          ++v8;
          v7 += 8;
        }
        while (v8 < *(unsigned int *)(v2 + 72));
      }
      if (*(_DWORD *)(v2 + 168))
      {
        unint64_t v9 = 0;
        do
        {
          unsigned int v10 = *(CFX::RG::Resource **)(*(void *)(v2 + 176) + 8 * v9);
          uint64_t v11 = CFX::RG::Pass::renderTargetInfo((CFX::RG::Pass *)v2, v10);
          if (v26)
          {
            uint64_t v12 = 16 * v26;
            int v13 = (CFX::RG::Resource **)v27;
            while (v10 != *v13)
            {
              v13 += 2;
              v12 -= 16;
              if (!v12) {
                goto LABEL_15;
              }
            }
          }
          else
          {
            int v13 = (CFX::RG::Resource **)v27;
          }
          if (v13 == (CFX::RG::Resource **)&v27[v26])
          {
LABEL_15:
            v29.n128_u64[0] = (unint64_t)v10;
            v29.n128_u64[1] = v11;
            sub_1B6DB23F0((uint64_t)&v25, &v29);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(v2 + 168));
      }
      ++v5;
    }
    while (v5 != v6);
    if (v22)
    {
      unint64_t v2 = (unint64_t)v23;
      uint64_t v14 = 8 * v22;
      do
      {
        uint64_t v15 = *(CFX::RG::Resource **)v2;
        v2 += 8;
        CFX::RG::Pass::readFrom((uint64_t *)this, v15);
        v14 -= 8;
      }
      while (v14);
    }
  }
  if (v26)
  {
    char v16 = (uint64_t *)v27 + 1;
    uint64_t v17 = 16 * v26;
    do
    {
      uint64_t v18 = (CFX::RG::Resource *)*(v16 - 1);
      uint64_t v19 = *v16;
      if (*v16)
      {
        unint64_t v2 = v2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v19 + 8);
        CFX::RG::Pass::renderTo((uint64_t)this, (uint64_t)v18, *(void *)v19, v2);
      }
      else
      {
        CFX::RG::Pass::writeTo((uint64_t *)this, v18);
      }
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return CFX::RG::AggregatePass::initializePassName(this);
}

void CFX::RG::AggregatePass::~AggregatePass(CFX::RG::AggregatePass *this)
{
  *(void *)this = &unk_1F0FB3340;
  unint64_t v2 = (char *)this + 360;
  uint64_t v3 = *((unsigned int *)this + 94);
  if (v3)
  {
    uint64_t v4 = (uint64_t (****)(void))*((void *)this + 48);
    uint64_t v5 = 8 * v3;
    do
    {
      sub_1B6DB0A5C((uint64_t)(*v4)[1], (*v4)[2], *v4);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  sub_1B65504F0((uint64_t)v2);

  CFX::RG::Pass::~Pass(this);
}

{
  uint64_t vars8;

  CFX::RG::AggregatePass::~AggregatePass(this);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DC6908(_Unwind_Exception *a1)
{
  sub_1B65504F0(v2);
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::AggregatePass::execute(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(result + 376);
  if (v4)
  {
    unint64_t v8 = *(uint64_t **)(result + 384);
    uint64_t v9 = 8 * v4;
    do
    {
      uint64_t v10 = *v8++;
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 24))(v10, a2, a3, a4);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t *CFX::RG::AggregatePass::initializePassName(CFX::RG::AggregatePass *this)
{
  uint64_t v2 = *((unsigned int *)this + 94);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)*((void *)this + 48);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      size_t v7 = strlen(*(const char **)(v6 + 24));
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 7;
      }
      v3 += v8 + 1;
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v3 = 0;
  }
  long long v19 = *(_OWORD *)((char *)this + 8);
  uint64_t v9 = (const char *)sub_1B63C8330(&v19, (int)v3 + 1, 1u);
  uint64_t v10 = *((unsigned int *)this + 94);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (uint64_t *)*((void *)this + 48);
    uint64_t v13 = 8 * v10;
    do
    {
      uint64_t v14 = *v12++;
      uint64_t v15 = *(const char **)(v14 + 24);
      if (*v15) {
        char v16 = v15;
      }
      else {
        char v16 = "Unnamed";
      }
      size_t v17 = strlcpy((char *)&v9[v11], v16, v3 + 1 - v11);
      v9[v17 + v11] = 124;
      v11 += v17 + 1;
      v13 -= 8;
    }
    while (v13);
  }
  *(_WORD *)&v9[v3 - 1] = 32;
  return CFX::RG::Pass::setAllocatedName((uint64_t *)this, v9);
}

BOOL CFX::RG::isPublishResourcePass(CFX::RG *this, CFX::RG::Pass *a2)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = &qword_1E9E48000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48060, memory_order_acquire) & 1) == 0)
  {
    uint64_t v6 = v2;
    int v5 = __cxa_guard_acquire(&qword_1E9E48060);
    uint64_t v3 = &qword_1E9E48000;
    uint64_t v2 = v6;
    if (v5)
    {
      qword_1E9E48058 = 0xD6FB455A40EE7AC9;
      __cxa_guard_release(&qword_1E9E48060);
      uint64_t v3 = &qword_1E9E48000;
      uint64_t v2 = v6;
    }
  }
  return v2 == v3[11];
}

uint64_t CFX::RG::AggregatePass::commonRenderParameters(CFX::RG::AggregatePass *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 48) + 32))();
}

void *CFX::RG::RegisterResourcePass::RegisterResourcePass(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  *a1 = &unk_1F0FB4208;
  uint64_t v10 = &qword_1E9E48000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48060, memory_order_acquire) & 1) == 0)
  {
    int v17 = __cxa_guard_acquire(&qword_1E9E48060);
    uint64_t v10 = &qword_1E9E48000;
    if (v17)
    {
      qword_1E9E48058 = sub_1B6DC6DC8((unint64_t)"PUBLISH_PASS", 0xCu);
      __cxa_guard_release(&qword_1E9E48060);
      uint64_t v10 = &qword_1E9E48000;
    }
  }
  CFX::RG::Pass::Pass((uint64_t)a1, a2, a3, (uint64_t)"RegisterResource", 1, v10[11], (uint64_t)a1);
  *a1 = &unk_1F0FB4208;
  a1[45] = a4;
  a1[46] = 0;
  uint64_t v14 = objc_msgSend_copy(v9, v11, v12, v13);
  uint64_t v15 = (void *)a1[46];
  a1[46] = v14;

  return a1;
}

void sub_1B6DC6CB4(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass((CFX::RG::Pass *)v2);
  _Unwind_Resume(a1);
}

uint64_t CFX::RG::RegisterResourcePass::execute(uint64_t result, uint64_t a2, int a3)
{
  if (a3 == 1) {
    return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(result + 368) + 16))(*(void *)(result + 368), a2, *(void *)(result + 360));
  }
  return result;
}

void sub_1B6DC6D04(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DC6D3C(id *a1)
{
  CFX::RG::Pass::~Pass((CFX::RG::Pass *)a1);
}

void sub_1B6DC6D78(id *a1)
{
  CFX::RG::Pass::~Pass((CFX::RG::Pass *)a1);

  JUMPOUT(0x1BA9B6D80);
}

unint64_t sub_1B6DC6DC8(unint64_t result, unsigned int a2)
{
  if (result)
  {
    unint64_t v2 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * *(void *)result) ^ ((0xC6A4A7935BD1E995 * *(void *)result) >> 47))) ^ (0xC6A4A7935BD1E995 * a2));
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_9;
      case 2u:
        goto LABEL_8;
      case 3u:
        goto LABEL_7;
      case 4u:
        goto LABEL_6;
      case 5u:
        goto LABEL_5;
      case 6u:
        goto LABEL_4;
      case 7u:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 14) << 48;
LABEL_4:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 13) << 40;
LABEL_5:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 12) << 32;
LABEL_6:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 11) << 24;
LABEL_7:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 10) << 16;
LABEL_8:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 9) << 8;
LABEL_9:
        unint64_t v2 = 0xC6A4A7935BD1E995 * (v2 ^ *(unsigned __int8 *)(result + 8));
        break;
      default:
        return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
    }
    return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
  }
  return result;
}

uint64_t sub_1B6DC6E94(uint64_t a1)
{
  return a1;
}

void sub_1B6DC6EC8(uint64_t a1)
{
  JUMPOUT(0x1BA9B6D80);
}

double sub_1B6DC6F1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _OWORD *a5)
{
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v8 = sub_1B63C8330(v15, 0x198u, 8u);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v11 = *a4;
  long long v12 = a5[1];
  v14[0] = *a5;
  v14[1] = v12;
  *(void *)&double result = CFX::RG::CopyPass::CopyPass(v8, v9, v10, v11, (uint64_t)v14).n128_u64[0];
  return result;
}

int *sub_1B6DC6F84(vm_address_t *address, uint64_t a2)
{
  vm_size_t v3 = ((*MEMORY[0x1E4F14B00] - 1) | (a2 - 1)) + 1;
  double result = (int *)vm_allocate(*MEMORY[0x1E4F14960], address, v3, 1);
  if (result)
  {
    double result = __error();
    *double result = 12;
    *address = 0;
  }
  else
  {
    address[1] = v3;
  }
  return result;
}

int *sub_1B6DC6FF8(int *result, unint64_t a2)
{
  vm_size_t v3 = (mach_vm_address_t *)result;
  *((void *)result + sub_1B6DC4968((unsigned int *)this + 2) = 0;
  uint64_t v4 = (mach_vm_address_t *)*((void *)result + 3);
  int v5 = (vm_map_t *)MEMORY[0x1E4F14960];
  if (v4)
  {
    do
    {
      uint64_t v6 = (mach_vm_address_t *)v4[3];
      mach_vm_deallocate(*v5, *v4, v4[1]);
      double result = (int *)MEMORY[0x1BA9B6D80](v4, 0x10A0C4064A2AE3FLL);
      uint64_t v4 = v6;
    }
    while (v6);
  }
  v3[3] = 0;
  v3[4] = (mach_vm_address_t)v3;
  mach_vm_size_t v7 = v3[1];
  if (v7 < a2)
  {
    mach_vm_deallocate(*v5, *v3, v7);
    return sub_1B6DC6F84(v3, a2);
  }
  return result;
}

uint64_t CScratchAllocatorAllocateAligned_0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 1;
  uint64_t v5 = -a3;
  while (1)
  {
    uint64_t v7 = a1[1];
    uint64_t v8 = a1[2];
    uint64_t v9 = *a1 + v8;
    unint64_t v10 = ((v4 + v9) & v5) - v9 + a2;
    if (v10 <= v7 - v8) {
      break;
    }
    v3 += v7;
    a1 = (void *)a1[3];
    if (!a1) {
      operator new();
    }
  }
  a1[2] = v10 + v8;
  return (v4 + v9) & v5;
}

int *CScratchAllocatorReset_0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 24); i; uint64_t i = *(void *)(i + 24))
    v1 += *(void *)(i + 8);
  return sub_1B6DC6FF8((int *)a1, v1);
}

int *CScratchAllocatorDestroy(int *result)
{
  if (result)
  {
    unint64_t v1 = (mach_vm_address_t *)result;
    sub_1B6DC6FF8(result, 0);
    mach_vm_deallocate(*MEMORY[0x1E4F14960], *v1, v1[1]);
    JUMPOUT(0x1BA9B6D80);
  }
  return result;
}

uint64_t CScratchAllocatorAllocate(void *a1, uint64_t a2)
{
  return CScratchAllocatorAllocateAligned_0(a1, a2, 8);
}

uint64_t CScratchAllocatorCapacity(uint64_t a1)
{
  uint64_t v1 = a1;
  for (uint64_t result = *(void *)(a1 + 8); ; result += *(void *)(v1 + 8))
  {
    uint64_t v1 = *(void *)(v1 + 24);
    if (!v1) {
      break;
    }
  }
  return result;
}

uint64_t CScratchAllocatorSize(uint64_t a1)
{
  uint64_t v1 = a1;
  for (uint64_t result = *(void *)(a1 + 16); ; result += *(void *)(v1 + 16))
  {
    uint64_t v1 = *(void *)(v1 + 24);
    if (!v1) {
      break;
    }
  }
  return result;
}

uint64_t CStackAllocatorDestroy(uint64_t a1)
{
  uint64_t result = sub_1B6DC7330(a1, 0);
  if (a1)
  {
    JUMPOUT(0x1BA9B6D80);
  }
  return result;
}

uint64_t sub_1B6DC7330(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(void *)result;
  if (*(void *)result != a2)
  {
    uint64_t v5 = result + 8;
    uint64_t v6 = (vm_map_t *)MEMORY[0x1E4F14960];
    do
    {
      uint64_t v7 = *(void *)(v4 + 16);
      uint64_t result = mach_vm_deallocate(*v6, *(void *)v4, *(unsigned int *)(v4 + 8));
      if (v4 != v5) {
        uint64_t result = MEMORY[0x1BA9B6D80](v4, 0x1030C40D5FA72FALL);
      }
      uint64_t v4 = v7;
    }
    while (v7 != a2);
  }
  void *v3 = a2;
  return result;
}

void *CStackAllocatorAllocate(uint64_t *a1, size_t a2)
{
  return CStackAllocatorAllocateAligned(a1, a2, 8, 2);
}

void *CStackAllocatorAllocateZero(uint64_t *a1, size_t a2)
{
  return CStackAllocatorAllocateAligned(a1, a2, 8, 2);
}

void *CStackAllocatorResizeLast(uint64_t *a1, size_t a2)
{
  unint64_t v2 = (const void *)a1[4];
  uint64_t v3 = (void *)*a1;
  uint64_t v4 = *(void *)*a1;
  unsigned int v5 = v2 + a2 - v4;
  if (*(_DWORD *)(*a1 + 8) <= v5)
  {
    size_t v6 = (v4 + *((_DWORD *)v3 + 3) - v2);
    Aligned = CStackAllocatorAllocateAligned(a1, a2, 32, 2);
    uint64_t v8 = Aligned;
    if (v2) {
      BOOL v9 = v6 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      memcpy(Aligned, v2, v6);
    }
    return v8;
  }
  else
  {
    *((_DWORD *)v3 + 3) = v5;
  }
  return (void *)v2;
}

void *CStackAllocatorReallocate(uint64_t *a1, unint64_t a2, size_t a3, size_t a4, uint64_t a5)
{
  if (a1[4] == a2 && ((a5 - 1) & a2) == 0)
  {
    return CStackAllocatorResizeLast(a1, a4);
  }
  else
  {
    Aligned = CStackAllocatorAllocateAligned(a1, a4, a5, 2);
    uint64_t v8 = Aligned;
    if (a2)
    {
      if (a3) {
        memcpy(Aligned, (const void *)a2, a3);
      }
    }
    return v8;
  }
}

uint64_t CStackAllocatorCapacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t CStackAllocatorSize(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    result += *(unsigned int *)(v1 + 12);
    uint64_t v1 = *(void *)(v1 + 16);
  }
  while (v1);
  return result;
}

uint64_t sub_1B6DC752C(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)uint64_t result = a3;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = a2;
  return result;
}

uint64_t sub_1B6DC7544(uint64_t a1)
{
  return a1;
}

id sub_1B6DC7570(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = *a2;
    int v7 = a2[1];
    int v8 = a2[2];
    int v9 = a2[3];
    int v10 = *((unsigned __int8 *)a2 + 8);
    int v11 = *((unsigned __int8 *)a2 + 9);
    int v12 = *((unsigned __int8 *)a2 + 10);
    uint64_t v13 = *((void *)a2 + 2);
    uint64_t v14 = *((void *)a2 + 3);
    uint64_t v15 = *((void *)a2 + 4);
    uint64_t v16 = 96 * v3;
    while (*(unsigned __int16 *)(v5 + v4 + 8) != v6
         || *(unsigned __int16 *)(v5 + v4 + 10) != v7
         || *(unsigned __int16 *)(v5 + v4 + 12) != v8
         || *(unsigned __int16 *)(v5 + v4 + 14) != v9
         || *(unsigned __int8 *)(v5 + v4 + 16) != v10
         || *(unsigned __int8 *)(v5 + v4 + 17) != v11
         || *(unsigned __int8 *)(v5 + v4 + 18) != v12
         || *(void *)(v5 + v4 + 24) != v13
         || *(void *)(v5 + v4 + 32) != v14
         || *(void *)(v5 + v4 + 40) != v15
         || *(void *)(v5 + v4 + 48) != *((void *)a2 + 5)
         || *(void *)(v5 + v4 + 56) != *((void *)a2 + 6)
         || *(void *)(v5 + v4 + 64) != *((void *)a2 + 7)
         || *(void *)(v5 + v4 + 72) != *((void *)a2 + 8)
         || *(unsigned __int8 *)(v5 + v4 + 80) != *((unsigned __int8 *)a2 + 72)
         || *(unsigned __int8 *)(v5 + v4 + 81) != *((unsigned __int8 *)a2 + 73)
         || *(unsigned __int8 *)(v5 + v4 + 82) != *((unsigned __int8 *)a2 + 74)
         || *(unsigned __int8 *)(v5 + v4 + 83) != *((unsigned __int8 *)a2 + 75))
    {
      v4 += 96;
      if (v16 == v4) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = *(void *)(a1 + 16);
    uint64_t v23 = v5 + v4;
    id v18 = *(id *)(v5 + v4);
    *(_DWORD *)(v23 + 88) = 0;
    uint64_t v25 = a1;
    unsigned int v26 = *(_DWORD *)(a1 + 24);
    uint64_t v27 = *(void *)(a1 + 16) + 96 * v26;
    if (v23 != v27 - 96)
    {
      uint64_t v28 = v23 + 8;
      uint64_t v29 = *(void *)(v22 + v4);
      *(void *)(v22 + v4) = 0;
      *(_OWORD *)&v37[32] = *(_OWORD *)(v28 + 32);
      *(_OWORD *)&v37[48] = *(_OWORD *)(v28 + 48);
      *(_OWORD *)&v37[64] = *(_OWORD *)(v28 + 64);
      *(_DWORD *)&v37[80] = *(_DWORD *)(v28 + 80);
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v28;
      *(_OWORD *)&v37[16] = *(_OWORD *)(v28 + 16);
      uint64_t v30 = *(void *)(v27 - 96);
      *(void *)(v27 - 96) = 0;
      uint64_t v31 = *(void **)(v22 + v4);
      *(void *)(v22 + v4) = v30;

      long long v32 = *(_OWORD *)(v27 - 72);
      *(_OWORD *)uint64_t v28 = *(_OWORD *)(v27 - 88);
      *(_OWORD *)(v28 + 16) = v32;
      long long v33 = *(_OWORD *)(v27 - 56);
      long long v34 = *(_OWORD *)(v27 - 40);
      long long v35 = *(_OWORD *)(v27 - 24);
      *(_DWORD *)(v28 + 80) = *(_DWORD *)(v27 - 8);
      *(_OWORD *)(v28 + 48) = v34;
      *(_OWORD *)(v28 + 64) = v35;
      *(_OWORD *)(v28 + 3sub_1B6DC4968((unsigned int *)this + 2) = v33;
      uint64_t v36 = *(void **)(v27 - 96);
      *(void *)(v27 - 96) = v29;

      *(_OWORD *)(v27 - 56) = *(_OWORD *)&v37[32];
      *(_OWORD *)(v27 - 40) = *(_OWORD *)&v37[48];
      *(_OWORD *)(v27 - 24) = *(_OWORD *)&v37[64];
      *(_DWORD *)(v27 - 8) = *(_DWORD *)&v37[80];
      *(_OWORD *)(v27 - 88) = *(_OWORD *)v37;
      *(_OWORD *)(v27 - 7sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)&v37[16];
      unsigned int v26 = *(_DWORD *)(v25 + 24);
    }
    *(_DWORD *)(v25 + 24) = v26 - 1;
  }
  else
  {
LABEL_22:
    uint64_t v17 = a1 + 8;
    (*(void (**)(void, unsigned __int16 *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    *(void *)uint64_t v37 = v18;
    long long v19 = *(_OWORD *)a2;
    *(_OWORD *)&v37[24] = *((_OWORD *)a2 + 1);
    long long v20 = *((_OWORD *)a2 + 3);
    *(_OWORD *)&v37[40] = *((_OWORD *)a2 + 2);
    *(_OWORD *)&v37[56] = v20;
    *(_OWORD *)&v37[72] = *((_OWORD *)a2 + 4);
    *(_OWORD *)&v37[8] = v19;
    int v38 = 0;
    sub_1B6DC78B0(v17, (uint64_t *)v37);
  }

  return v18;
}

void sub_1B6DC7898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

__n128 sub_1B6DC78B0(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B6DC7C8C((unsigned int *)a1, 1, 0);
    unsigned int v4 = *(_DWORD *)a1;
  }
  uint64_t v5 = *(void *)(a1 + 8) + 96 * v4;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)uint64_t v5 = v6;
  long long v7 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v5 + 8) = v7;
  __n128 result = *(__n128 *)(a2 + 5);
  long long v9 = *(_OWORD *)(a2 + 7);
  long long v10 = *(_OWORD *)(a2 + 9);
  *(_DWORD *)(v5 + 88) = *((_DWORD *)a2 + 22);
  *(_OWORD *)(v5 + 7sub_1B6DC4968((unsigned int *)this + 2) = v10;
  *(_OWORD *)(v5 + 56) = v9;
  *(__n128 *)(v5 + 40) = result;
  ++*(_DWORD *)a1;
  return result;
}

void sub_1B6DC794C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *(_DWORD *)(a1 + 24);
  if (v5 != v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 16);
    int v8 = (void **)(v7 + 96 * v5);
    uint64_t v9 = 96 * v4 - 96 * v5;
    while (v8[v6 / 8] != v3)
    {
      v6 += 96;
      if (v9 == v6) {
        goto LABEL_9;
      }
    }
    if (v6)
    {
      long long v10 = &v8[v6 / 8];
      *long long v10 = 0;
      long long v22 = *(_OWORD *)&v8[v6 / 8 + 5];
      long long v23 = *(_OWORD *)&v8[v6 / 8 + 7];
      long long v24 = *(_OWORD *)&v8[v6 / 8 + 9];
      int v25 = (int)v8[v6 / 8 + 11];
      long long v20 = *(_OWORD *)&v8[v6 / 8 + 1];
      long long v21 = *(_OWORD *)&v8[v6 / 8 + 3];
      int v11 = *v8;
      *int v8 = 0;
      int v12 = *v10;
      *long long v10 = v11;
      id v19 = v3;

      uint64_t v13 = v7 + 96 * v5;
      long long v14 = *(_OWORD *)(v13 + 8);
      *(_OWORD *)(v10 + 3) = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v10 + 1) = v14;
      long long v15 = *(_OWORD *)(v13 + 40);
      long long v16 = *(_OWORD *)(v13 + 56);
      long long v17 = *(_OWORD *)(v13 + 72);
      *((_DWORD *)v10 + 2sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(v13 + 88);
      *(_OWORD *)(v10 + 9) = v17;
      *(_OWORD *)(v10 + 7) = v16;
      *(_OWORD *)(v10 + 5) = v15;
      id v18 = *v8;
      *int v8 = v19;

      id v3 = v19;
      *(_OWORD *)(v13 + 40) = v22;
      *(_OWORD *)(v13 + 56) = v23;
      *(_OWORD *)(v13 + 7sub_1B6DC4968((unsigned int *)this + 2) = v24;
      *(_DWORD *)(v13 + 88) = v25;
      *(_OWORD *)(v13 + 8) = v20;
      *(_OWORD *)(v13 + 24) = v21;
      unsigned int v5 = *(_DWORD *)(a1 + 24);
    }
    *(_DWORD *)(a1 + 24) = v5 + 1;
  }
LABEL_9:
}

id *sub_1B6DC7AAC(id *result)
{
  uint64_t v1 = (uint64_t)result;
  uint64_t v3 = (uint64_t)(result + 1);
  unsigned int v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    uint64_t v4 = (uint64_t)result[2];
    uint64_t v5 = v4 + 96 * v2;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 88) + 1;
      *(_DWORD *)(v4 + 88) = v6;
      if (v6 <= 10 * *(_DWORD *)v1)
      {
        v4 += 96;
      }
      else
      {
        __n128 result = sub_1B6DC7B34(v3, (id *)v4);
        uint64_t v4 = (uint64_t)result;
        unsigned int v2 = *(_DWORD *)(v1 + 8);
        uint64_t v5 = *(void *)(v1 + 16) + 96 * v2;
      }
    }
    while (v4 != v5);
  }
  *(_DWORD *)(v1 + 24) = v2;
  return result;
}

id *sub_1B6DC7B34(uint64_t a1, id *__dst)
{
  if (*(_DWORD *)(a1 + 4)) {

  }
  unsigned int v4 = *(_DWORD *)a1 - 1;
  *(_DWORD *)a1 = v4;
  uint64_t v5 = (id *)(*(void *)(a1 + 8) + 96 * v4);
  if (v5 != __dst) {
    memmove(__dst, __dst + 12, (char *)v5 - (char *)__dst);
  }
  return __dst;
}

void sub_1B6DC7B98(uint64_t a1)
{
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_1B6DC7BC4(unsigned int *a1)
{
  if (*a1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {

      ++v3;
      v2 += 96;
    }
    while (v3 < *a1);
  }
  *a1 = 0;
}

unsigned int *sub_1B6DC7C20(unsigned int *a1)
{
  if (a1[1])
  {
    if (*a1)
    {
      uint64_t v2 = 0;
      unint64_t v3 = 0;
      do
      {

        ++v3;
        v2 += 96;
      }
      while (v3 < *a1);
    }
    free(*((void **)a1 + 1));
  }
  return a1;
}

void sub_1B6DC7C8C(unsigned int *a1, int a2, int a3)
{
  unsigned int v4 = (unsigned int *)*((void *)a1 + 1);
  double v5 = 1.5;
  if (a3) {
    double v5 = 1.0;
  }
  unsigned int v6 = a1 + 4;
  unsigned int v7 = (v5 * (double)(a1[1] + a2));
  int v8 = (char *)malloc_type_malloc(96 * v7, 0xD5346062uLL);
  memset(v8, 255, 96 * v7);
  if (*a1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      int v11 = &v8[v9];
      int v12 = (uint64_t *)(*((void *)a1 + 1) + v9);
      uint64_t v13 = *v12;
      *int v12 = 0;
      *(void *)int v11 = v13;
      long long v14 = *(_OWORD *)(v12 + 1);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 3);
      *(_OWORD *)(v11 + 8) = v14;
      long long v15 = *(_OWORD *)(v12 + 5);
      long long v16 = *(_OWORD *)(v12 + 7);
      long long v17 = *(_OWORD *)(v12 + 9);
      *((_DWORD *)v11 + 2sub_1B6DC4968((unsigned int *)this + 2) = *((_DWORD *)v12 + 22);
      *(_OWORD *)(v11 + 7sub_1B6DC4968((unsigned int *)this + 2) = v17;
      *(_OWORD *)(v11 + 56) = v16;
      *(_OWORD *)(v11 + 40) = v15;
      if (v4 != v6) {

      }
      ++v10;
      v9 += 96;
    }
    while (v10 < *a1);
  }
  *((void *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v6)
  {
    free(v4);
  }
}

uint64_t RGContext.tryResolve(resource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = RGContextResolveTextureDescriptor(a2, a1);
  if (result)
  {
    uint64_t v5 = *(void *)result;
    long long v6 = *(_OWORD *)(result + 16);
    long long v7 = *(_OWORD *)(result + 32);
    long long v8 = *(_OWORD *)(result + 48);
    uint64_t v9 = *(void *)(result + 64);
    uint64_t v10 = *(unsigned int *)(result + 72);
    uint64_t v11 = 0x10000;
    if (!*(unsigned char *)(result + 10)) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(unsigned __int16 *)(result + 8) | (unint64_t)v11;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    long long v6 = 0uLL;
    uint64_t v12 = 0x20000;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v12;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 3sub_1B6DC4968((unsigned int *)this + 2) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(void *)(a3 + 64) = v9;
  *(void *)(a3 + 7sub_1B6DC4968((unsigned int *)this + 2) = v10;
  return result;
}

uint64_t RGContext.tryResolve(textureReference:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  char v13 = 0;
  uint64_t result = RGContextTryResolveTextureDescriptor(a2, a1, &v13, v14);
  if (v13 == 1)
  {
    uint64_t v5 = *(void *)&v14[0];
    long long v6 = v14[1];
    long long v7 = v14[2];
    long long v8 = v14[3];
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    uint64_t v11 = 0x10000;
    if (!BYTE10(v14[0])) {
      uint64_t v11 = 0;
    }
    unint64_t v12 = BYTE8(v14[0]) | ((unint64_t)BYTE9(v14[0]) << 8) | v11;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    long long v6 = 0uLL;
    unint64_t v12 = 0x20000;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
  }
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v12;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 3sub_1B6DC4968((unsigned int *)this + 2) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(void *)(a3 + 64) = v9;
  *(void *)(a3 + 7sub_1B6DC4968((unsigned int *)this + 2) = v10;
  return result;
}

uint64_t RGResource.name.getter()
{
  RGResourceGetName();

  return sub_1B6E31968();
}

uint64_t RGBuilder.createBuffer(name:desc:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return RGBuilderCreateBuffer(a6, a1, a4, a5);
}

CFX::RG::Resource *RGBuilder.createTexture(name:desc:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  __int16 v5 = *((_WORD *)a4 + 4);
  uint64_t v6 = a4[8];
  char v7 = *((unsigned char *)a4 + 10) & 1;
  uint64_t v10 = *a4;
  __int16 v11 = v5;
  char v12 = v7;
  long long v8 = *((_OWORD *)a4 + 2);
  long long v13 = *((_OWORD *)a4 + 1);
  long long v14 = v8;
  long long v15 = *((_OWORD *)a4 + 3);
  uint64_t v16 = v6;
  int v17 = *((_DWORD *)a4 + 18);
  return RGBuilderCreateTexture(a5, a1, (uint64_t)&v10);
}

uint64_t RGBuilder.createTexture(name:desc:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B6DC81C0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))RGBuilderCreateTexture);
}

CFX::RG::Resource *RGBuilder.createExternalTexture(name:desc:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  __int16 v10 = *((_WORD *)a4 + 4);
  long long v17 = *((_OWORD *)a4 + 2);
  long long v18 = *((_OWORD *)a4 + 1);
  long long v16 = *((_OWORD *)a4 + 3);
  uint64_t v11 = a4[8];
  char v12 = *((unsigned char *)a4 + 10) & 1;
  *(void *)&long long v22 = a5;
  *((void *)&v22 + 1) = a6;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v20 = 1107296256;
  *(void *)&long long v21 = sub_1B6DC8140;
  *((void *)&v21 + 1) = &unk_1F0FCCA98;
  long long v13 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t aBlock = *a4;
  LOWORD(v20) = v10;
  BYTE2(v20) = v12;
  long long v21 = v18;
  long long v22 = v17;
  long long v23 = v16;
  uint64_t v24 = v11;
  int v25 = *((_DWORD *)a4 + 18);
  ExternalTexture = RGBuilderCreateExternalTexture(a7, a1, (uint64_t)&aBlock, v13, 0);
  _Block_release(v13);
  return ExternalTexture;
}

id sub_1B6DC8140(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  unint64_t v3 = (void *)v1(v2);
  swift_release();

  return v3;
}

uint64_t sub_1B6DC8190(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B6DC81A0()
{
  return swift_release();
}

uint64_t RGBuilder.createReference(name:reference:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1B6DC81C0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))RGBuilderCreateReference);
}

uint64_t sub_1B6DC81C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  return a6(a5, a1, a4);
}

uint64_t RGBuilder.createCopy(name:input:inputPass:expected:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B6DC8278(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))RGBuilderCreateCopy);
}

CFX::RG::RenderGraphBuilder *RGBuilder.createCopyIfNeeded(name:input:inputPass:expected:)(uint64_t a1, uint64_t a2, uint64_t a3, CFX::RG::RenderGraphBuilder *a4, CFX::RG::Resource *a5, uint64_t *a6, CFX::RG *a7)
{
  __int16 v7 = *((_WORD *)a6 + 4);
  uint64_t v8 = a6[8];
  char v9 = *((unsigned char *)a6 + 10) & 1;
  uint64_t v12 = *a6;
  __int16 v13 = v7;
  char v14 = v9;
  long long v10 = *((_OWORD *)a6 + 2);
  long long v15 = *((_OWORD *)a6 + 1);
  long long v16 = v10;
  long long v17 = *((_OWORD *)a6 + 3);
  uint64_t v18 = v8;
  int v19 = *((_DWORD *)a6 + 18);
  return RGBuilderCreateCopyIfNeeded(a7, a1, a4, a5, (uint64_t)&v12);
}

uint64_t RGBuilder.createCopyIfNeeded(name:input:inputPass:expected:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B6DC8278(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))RGBuilderCreateCopyIfNeeded);
}

uint64_t sub_1B6DC8278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a8(a7, a1, a4, a5, a6);
}

uint64_t RGBufferSlice.length.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t RGBufferSlice.offset.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t RGBufferSlice.data.getter(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    id v5 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v6 = a1;
    return (uint64_t)v5 + a3;
  }
  else
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t RGGPUResourceManager.getBuffer(_:)(const CFX::RG::Resource *a1, CFX::GPUResourceManager *a2)
{
  v5[1] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = 0;
  v5[0] = 0;
  uint64_t v3 = 0;
  RGGPUResourceManagerGetBuffer(a2, a1, &v3, v5, &v4);
  return swift_unknownObjectRetain();
}

uint64_t RGTextureReferenceDescriptor.sizeFactor.setter(float a1)
{
  return RGTextureReferenceDescriptorSetSizeFactor(*v1, a1);
}

uint64_t (*RGTextureReferenceDescriptor.sizeFactor.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = RGTextureReferenceDescriptorGetSizeFactor(*v1);
  return sub_1B6DC8430;
}

uint64_t sub_1B6DC8430(uint64_t a1)
{
  return RGTextureReferenceDescriptorSetSizeFactor(**(void **)a1, *(float *)(a1 + 8));
}

uint64_t RGTextureReferenceDescriptor.width.getter(uint64_t a1)
{
  return sub_1B6DC8608(a1, (uint64_t (*)(void))RGTextureReferenceDescriptorGetWidth);
}

uint64_t RGTextureReferenceDescriptor.width.setter(unsigned __int16 a1, char a2)
{
  return sub_1B6DC866C(a1, a2, (uint64_t (*)(uint64_t, void))RGTextureReferenceDescriptorSetWidth, RGTextureReferenceDescriptorClearWidth);
}

uint64_t (*RGTextureReferenceDescriptor.width.modify(uint64_t a1))(unsigned __int16 *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  Width = (unsigned __int16 *)RGTextureReferenceDescriptorGetWidth(*v1);
  if (Width) {
    uint64_t v4 = *Width;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = Width == 0;
  return sub_1B6DC84EC;
}

uint64_t sub_1B6DC84EC(unsigned __int16 *a1, char a2)
{
  return sub_1B6DC8720(a1, a2, (uint64_t (*)(void, void))RGTextureReferenceDescriptorSetWidth, RGTextureReferenceDescriptorClearWidth);
}

uint64_t RGTextureReferenceDescriptor.height.getter(uint64_t a1)
{
  return sub_1B6DC8608(a1, (uint64_t (*)(void))RGTextureReferenceDescriptorGetHeight);
}

uint64_t RGTextureReferenceDescriptor.height.setter(unsigned __int16 a1, char a2)
{
  return sub_1B6DC866C(a1, a2, (uint64_t (*)(uint64_t, void))RGTextureReferenceDescriptorSetHeight, RGTextureReferenceDescriptorClearHeight);
}

uint64_t (*RGTextureReferenceDescriptor.height.modify(uint64_t a1))(unsigned __int16 *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  Height = (unsigned __int16 *)RGTextureReferenceDescriptorGetHeight(*v1);
  if (Height) {
    uint64_t v4 = *Height;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = Height == 0;
  return sub_1B6DC85C4;
}

uint64_t sub_1B6DC85C4(unsigned __int16 *a1, char a2)
{
  return sub_1B6DC8720(a1, a2, (uint64_t (*)(void, void))RGTextureReferenceDescriptorSetHeight, RGTextureReferenceDescriptorClearHeight);
}

uint64_t RGTextureReferenceDescriptor.depth.getter(uint64_t a1)
{
  return sub_1B6DC8608(a1, (uint64_t (*)(void))RGTextureReferenceDescriptorGetDepth);
}

uint64_t sub_1B6DC8608(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = (unsigned __int16 *)a2();
  if (v2) {
    return *v2;
  }
  else {
    return 0;
  }
}

uint64_t RGTextureReferenceDescriptor.depth.setter(unsigned __int16 a1, char a2)
{
  return sub_1B6DC866C(a1, a2, (uint64_t (*)(uint64_t, void))RGTextureReferenceDescriptorSetDepth, RGTextureReferenceDescriptorClearDepth);
}

uint64_t sub_1B6DC866C(unsigned __int16 a1, char a2, uint64_t (*a3)(uint64_t, void), uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  if (a2) {
    return a4(v6);
  }
  else {
    return a3(v6, a1);
  }
}

uint64_t (*RGTextureReferenceDescriptor.depth.modify(uint64_t a1))(unsigned __int16 *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  Depth = (unsigned __int16 *)RGTextureReferenceDescriptorGetDepth(*v1);
  if (Depth) {
    uint64_t v4 = *Depth;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = Depth == 0;
  return sub_1B6DC86F4;
}

uint64_t sub_1B6DC86F4(unsigned __int16 *a1, char a2)
{
  return sub_1B6DC8720(a1, a2, (uint64_t (*)(void, void))RGTextureReferenceDescriptorSetDepth, RGTextureReferenceDescriptorClearDepth);
}

uint64_t sub_1B6DC8720(unsigned __int16 *a1, char a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v4 = (void *)*((void *)a1 + 2);
  if (a2)
  {
    if (a1[4]) {
      return a4(*v4);
    }
  }
  else if (a1[4])
  {
    return a4(*v4);
  }
  return a3(*v4, *a1);
}

uint64_t RGTextureReferenceDescriptor.sampleCount.getter(uint64_t a1)
{
  SampleCount = (unsigned __int8 *)RGTextureReferenceDescriptorGetSampleCount(a1);
  if (SampleCount) {
    return *SampleCount;
  }
  else {
    return 0;
  }
}

uint64_t RGTextureReferenceDescriptor.sampleCount.setter(unsigned __int8 a1, char a2)
{
  uint64_t v4 = *v2;
  if (a2) {
    return RGTextureReferenceDescriptorClearSampleCount(v4);
  }
  else {
    return RGTextureReferenceDescriptorSetSampleCount(v4, a1);
  }
}

uint64_t (*RGTextureReferenceDescriptor.sampleCount.modify(uint64_t a1))(unsigned __int8 *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  SampleCount = (unsigned __int8 *)RGTextureReferenceDescriptorGetSampleCount(*v1);
  if (SampleCount) {
    uint64_t v4 = *SampleCount;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = SampleCount == 0;
  return sub_1B6DC8810;
}

uint64_t sub_1B6DC8810(unsigned __int8 *a1, char a2)
{
  uint64_t v2 = (uint64_t *)*((void *)a1 + 2);
  if (a2)
  {
    if (a1[8]) {
      return RGTextureReferenceDescriptorClearSampleCount(*v2);
    }
  }
  else if (a1[8])
  {
    return RGTextureReferenceDescriptorClearSampleCount(*v2);
  }
  return RGTextureReferenceDescriptorSetSampleCount(*v2, *a1);
}

uint64_t RGTextureReferenceDescriptor.pixelFormat.getter(uint64_t a1)
{
  uint64_t PixelFormat = RGTextureReferenceDescriptorGetPixelFormat(a1);
  if (PixelFormat) {
    return *(void *)PixelFormat;
  }
  else {
    return 0;
  }
}

uint64_t RGTextureReferenceDescriptor.pixelFormat.setter(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  if (a2) {
    return RGTextureReferenceDescriptorClearPixelFormat(v4);
  }
  else {
    return RGTextureReferenceDescriptorSetPixelFormat(v4, a1);
  }
}

uint64_t (*RGTextureReferenceDescriptor.pixelFormat.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t PixelFormat = (uint64_t *)RGTextureReferenceDescriptorGetPixelFormat(*v1);
  if (PixelFormat) {
    uint64_t v4 = *PixelFormat;
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = PixelFormat == 0;
  return sub_1B6DC88F4;
}

uint64_t sub_1B6DC88F4(uint64_t a1, char a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (a2)
  {
    if (*(unsigned char *)(a1 + 8)) {
      return RGTextureReferenceDescriptorClearPixelFormat(*v2);
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
    return RGTextureReferenceDescriptorClearPixelFormat(*v2);
  }
  return RGTextureReferenceDescriptorSetPixelFormat(*v2, *(void *)a1);
}

void RGCrossFrameResourceManager.create<A>(_:with:)(uint64_t a1, uint64_t a2, CFX::CrossFrameResourceManager *a3, uint64_t a4)
{
}

{
  sub_1B6DC89DC(a1, a2, a3, a4, (uint64_t)&unk_1F0FCCB20, (uint64_t)sub_1B6DC8B8C, (uint64_t)&unk_1F0FCCB38);
}

uint64_t sub_1B6DC894C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6DC8960(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_1B6DC89DC(uint64_t a1, uint64_t a2, CFX::CrossFrameResourceManager *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1, a2);
  long long v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1B6E324A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v16, v15, a4);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  aBlock[4] = a6;
  void aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B6DC8960;
  aBlock[3] = a7;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release();
  RGCrossFrameResourceManagerCreate(a3, a1, v16, 0, v18);
  _Block_release(v18);
}

uint64_t sub_1B6DC8B7C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6DC8B90(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_1B6E32478();

  return MEMORY[0x1F41845D8](a1, v3);
}

uint64_t _sSo27RGCrossFrameResourceManagera14VFXRenderGraphE3get_3keyxSgxm_SitlF_0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = RGCrossFrameResourceManagerGet(a1);
  uint64_t Data = RGCrossFrameResourceGetData(v5);
  uint64_t v7 = *(void *)(a2 - 8);
  if (Data)
  {
    uint64_t v11 = *(void *)(a2 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a3, Data, a2);
    uint64_t v7 = v11;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }
  char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v9(a3, v8, 1, a2);
}

double sub_1B6DC8CA8()
{
  RGTextureDescriptorMakeDefault((uint64_t)&v1);
  double result = *(double *)&v4;
  *(void *)&static RGTextureDescriptor.default = v1;
  WORD4(static RGTextureDescriptor.default) = v2;
  BYTE10(static RGTextureDescriptor.default) = v3;
  xmmword_1E9E498E8 = v4;
  xmmword_1E9E498F8 = v5;
  xmmword_1E9E49908 = v6;
  *(void *)&xmmword_1E9E49918 = v7;
  DWORD2(xmmword_1E9E49918) = v8;
  return result;
}

long long *RGTextureDescriptor.default.unsafeMutableAddressor()
{
  if (qword_1E9E48068 != -1) {
    swift_once();
  }
  return &static RGTextureDescriptor.default;
}

double static RGTextureDescriptor.default.getter@<D0>(uint64_t a1@<X8>)
{
  if (qword_1E9E48068 != -1) {
    swift_once();
  }
  __int16 v2 = WORD4(static RGTextureDescriptor.default);
  char v3 = BYTE10(static RGTextureDescriptor.default);
  uint64_t v4 = xmmword_1E9E49918;
  *(void *)a1 = static RGTextureDescriptor.default;
  *(_WORD *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 10) = v3;
  long long v5 = xmmword_1E9E498F8;
  *(_OWORD *)(a1 + 16) = xmmword_1E9E498E8;
  *(_OWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v5;
  double result = *(double *)&xmmword_1E9E49908;
  *(_OWORD *)(a1 + 48) = xmmword_1E9E49908;
  *(void *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = DWORD2(xmmword_1E9E49918);
  return result;
}

__n128 static RGTextureDescriptor.default.setter(uint64_t a1)
{
  if (qword_1E9E48068 != -1) {
    swift_once();
  }
  long long v2 = *(_OWORD *)(a1 + 48);
  xmmword_1E9E498F8 = *(_OWORD *)(a1 + 32);
  xmmword_1E9E49908 = v2;
  xmmword_1E9E49918 = *(_OWORD *)(a1 + 64);
  __n128 result = *(__n128 *)(a1 + 16);
  static RGTextureDescriptor.default = *(_OWORD *)a1;
  xmmword_1E9E498E8 = (__int128)result;
  return result;
}

uint64_t (*static RGTextureDescriptor.default.modify())()
{
  if (qword_1E9E48068 != -1) {
    swift_once();
  }
  return nullsub_205;
}

uint64_t RGTextureDescriptor.width.getter()
{
  return *v0;
}

uint64_t RGTextureDescriptor.width.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*RGTextureDescriptor.width.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  return sub_1B6DC8F04;
}

uint64_t sub_1B6DC8F04(uint64_t result)
{
  **(_WORD **)(result + 8) = *(void *)result;
  return result;
}

uint64_t RGTextureDescriptor.height.getter()
{
  return *(unsigned __int16 *)(v0 + 2);
}

uint64_t RGTextureDescriptor.height.setter(uint64_t result)
{
  *(_WORD *)(v1 + sub_1B6DC4968((unsigned int *)this + 2) = result;
  return result;
}

void *(*RGTextureDescriptor.height.modify(void *a1))(void *result)
{
  *a1 = *(unsigned __int16 *)(v1 + 2);
  a1[1] = v1;
  return sub_1B6DC8F48;
}

void *sub_1B6DC8F48(void *result)
{
  *(_WORD *)(result[1] + sub_1B6DC4968((unsigned int *)this + 2) = *result;
  return result;
}

uint64_t RGTextureDescriptor.depth.getter()
{
  return *(unsigned __int16 *)(v0 + 4);
}

uint64_t RGTextureDescriptor.depth.setter(uint64_t result)
{
  *(_WORD *)(v1 + 4) = result;
  return result;
}

void *(*RGTextureDescriptor.depth.modify(void *a1))(void *result)
{
  *a1 = *(unsigned __int16 *)(v1 + 4);
  a1[1] = v1;
  return sub_1B6DC8F8C;
}

void *sub_1B6DC8F8C(void *result)
{
  *(_WORD *)(result[1] + 4) = *result;
  return result;
}

uint64_t RGTextureDescriptor.arrayLength.getter()
{
  return *(unsigned __int16 *)(v0 + 6);
}

uint64_t RGTextureDescriptor.arrayLength.setter(uint64_t result)
{
  *(_WORD *)(v1 + 6) = result;
  return result;
}

void *(*RGTextureDescriptor.arrayLength.modify(void *a1))(void *result)
{
  *a1 = *(unsigned __int16 *)(v1 + 6);
  a1[1] = v1;
  return sub_1B6DC8FD0;
}

void *sub_1B6DC8FD0(void *result)
{
  *(_WORD *)(result[1] + 6) = *result;
  return result;
}

uint64_t RGTextureDescriptor.mipmapLevelCount.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t RGTextureDescriptor.mipmapLevelCount.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

void *(*RGTextureDescriptor.mipmapLevelCount.modify(void *a1))(void *result)
{
  *a1 = *(unsigned __int8 *)(v1 + 8);
  a1[1] = v1;
  return sub_1B6DC9014;
}

void *sub_1B6DC9014(void *result)
{
  *(unsigned char *)(result[1] + 8) = *result;
  return result;
}

uint64_t RGTextureDescriptor.sampleCount.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t RGTextureDescriptor.sampleCount.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

void *(*RGTextureDescriptor.sampleCount.modify(void *a1))(void *result)
{
  *a1 = *(unsigned __int8 *)(v1 + 9);
  a1[1] = v1;
  return sub_1B6DC9058;
}

void *sub_1B6DC9058(void *result)
{
  *(unsigned char *)(result[1] + 9) = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RGBufferSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for RGBufferSlice()
{
  return swift_unknownObjectRelease();
}

void *assignWithCopy for RGBufferSlice(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for RGBufferSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RGBufferSlice(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RGBufferSlice(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RGBufferSlice()
{
  return &type metadata for RGBufferSlice;
}

void *sub_1B6DC9210(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *__n128 result = &unk_1F0FB1808;
  result[1] = v2;
  return result;
}

double sub_1B6DC9234(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 16) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

void sub_1B6DC9268(uint64_t a1)
{
  if (*(void *)a1) {
    sub_1B6DC930C((void *)a1, *(void *)a1);
  }
  sub_1B6E073C4(*(void *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 && *(unsigned char *)(a1 + 56)) {
    sub_1B6E073C4(v2);
  }
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_1B6DC92D4(uint64_t a1)
{
  return a1;
}

void sub_1B6DC930C(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 48))
  {
    sub_1B6DC930C(a1, *(void *)(a2 + 40));
    sub_1B6DC930C(a1, *(void *)(a2 + 48));
  }
  if (*a1 == a2) {
    *a1 = 0;
  }
  sub_1B6E073C4(a1[1]);
  a1[1] = a2;
}

uint64_t sub_1B6DC936C(uint64_t result, int a2)
{
  int v2 = a2;
  uint64_t v3 = result;
  if (a2 < 0) {
    int v2 = *(_DWORD *)(result + 20);
  }
  if (*(void *)result) {
    BOOL v4 = v2 < 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    do
    {
      unint64_t v5 = *(void *)v3;
      uint64_t v6 = *(void *)v3 + 48;
      if (*(void *)v6)
      {
        char v7 = 0;
        do
        {
          unint64_t v8 = *(void *)(v5 + 32);
          if (v8 <= v5)
          {
            unint64_t v8 = v5;
          }
          else
          {
            uint64_t v9 = *(void *)(v8 + 48);
            uint64_t v10 = *(void *)(v8 + 32);
            uint64_t v11 = (unint64_t *)v3;
            if (v10) {
              uint64_t v11 = (unint64_t *)(v10 + 8 * (*(void *)(v10 + 48) == v8) + 40);
            }
            uint64_t v12 = *(void *)(v8 + 8 * (v9 != v5) + 40);
            *uint64_t v11 = v5;
            *(void *)(v12 + 3sub_1B6DC4968((unsigned int *)this + 2) = v5;
            *(void *)(v8 + 3sub_1B6DC4968((unsigned int *)this + 2) = v5;
            *(void *)(v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = v10;
            *(void *)(v8 + 40) = *(void *)(v5 + 40);
            *(void *)(v8 + 48) = *(void *)v6;
            *(void *)(*(void *)(v5 + 40) + 3sub_1B6DC4968((unsigned int *)this + 2) = v8;
            *(void *)(*(void *)v6 + 3sub_1B6DC4968((unsigned int *)this + 2) = v8;
            *(void *)(v5 + 40 + 8 * (v9 == v5)) = v8;
            *(void *)(v5 + 40 + 8 * (v9 != v5)) = v12;
            long long v13 = *(_OWORD *)v8;
            long long v14 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)unint64_t v8 = *(_OWORD *)v5;
            *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 + 16);
            *(_OWORD *)unint64_t v5 = v13;
            *(_OWORD *)(v5 + 16) = v14;
          }
          unint64_t v15 = v8 + 8 * ((*(_DWORD *)(v3 + 24) >> v7) & 1);
          char v7 = (v7 + 1) & 0x1F;
          unint64_t v5 = *(void *)(v15 + 40);
          uint64_t v6 = v5 + 48;
        }
        while (*(void *)(v5 + 48));
      }
      double result = sub_1B6DC94A8((uint64_t *)v3, (float32x4_t *)v5, -1);
      ++*(_DWORD *)(v3 + 24);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1B6DC94A8(uint64_t *a1, float32x4_t *a2, int a3)
{
  uint64_t v6 = sub_1B6DC97E8(a1, (uint64_t)a2);
  if (v6)
  {
    if (a3 < 0)
    {
      uint64_t v6 = *a1;
    }
    else
    {
      for (; a3; --a3)
      {
        if (!*(void *)(v6 + 32)) {
          break;
        }
        uint64_t v6 = *(void *)(v6 + 32);
      }
    }
  }

  return sub_1B6DC95B4((uint64_t)a1, v6, a2);
}

uint64_t sub_1B6DC9520(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t v6 = sub_1B6E073B8(64, 16);
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
  }
  *(void *)(v6 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 48) = 0;
  *(_OWORD *)uint64_t v6 = *a2;
  *(_OWORD *)(v6 + 16) = a2[1];
  sub_1B6DC95B4(a1, *(void *)a1, (float32x4_t *)v6);
  ++*(_DWORD *)(a1 + 20);
  return v6;
}

uint64_t sub_1B6DC95B4(uint64_t result, uint64_t a2, float32x4_t *a3)
{
  BOOL v4 = (void *)result;
  if (*(void *)result)
  {
    uint64_t v5 = a2;
    uint64_t v6 = *(float32x4_t **)(a2 + 48);
    if (v6)
    {
      float32x4_t v7 = vaddq_f32(*a3, a3[1]);
      do
      {
        int8x16_t v8 = (int8x16_t)vsubq_f32(v7, vaddq_f32(*(float32x4_t *)*(void *)(v5 + 40), *(float32x4_t *)(*(void *)(v5 + 40) + 16)));
        int32x2_t v9 = (int32x2_t)vabs_f32(*(float32x2_t *)v8.i8);
        int8x16_t v10 = (int8x16_t)vsubq_f32(v7, vaddq_f32(*v6, v6[1]));
        int32x2_t v11 = (int32x2_t)vabs_f32(*(float32x2_t *)v10.i8);
        *(float32x2_t *)v8.i8 = vadd_f32(vabs_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL))), vadd_f32((float32x2_t)vzip1_s32(v9, v11), (float32x2_t)vzip2_s32(v9, v11)));
        uint64_t v5 = *(void *)(v5
                       + 40
                       + 8
                       * (*(void *)&vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), *(float32x2_t *)v8.i8)) & 1));
        uint64_t v6 = *(float32x4_t **)(v5 + 48);
      }
      while (v6);
    }
    uint64_t v12 = *(void *)(v5 + 32);
    double result = *(void *)(result + 8);
    if (result)
    {
      v4[1] = 0;
    }
    else
    {
      double result = sub_1B6E073B8(64, 16);
      *(_OWORD *)double result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = 0u;
      *(_OWORD *)(result + 48) = 0u;
    }
    unint64_t v13 = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = v12;
    do
    {
      float v14 = a3->f32[v13 / 4];
      uint64_t v15 = v5 + v13;
      if (v14 >= *(float *)(v5 + v13)) {
        float v14 = *(float *)(v5 + v13);
      }
      *(float *)(result + v13) = v14;
      float v16 = a3[1].f32[v13 / 4];
      if (v16 <= *(float *)(v15 + 16)) {
        float v16 = *(float *)(v15 + 16);
      }
      *(float *)(result + v13 + 16) = v16;
      v13 += 4;
    }
    while (v13 != 12);
    if (v12)
    {
      *(void *)(v12 + 8 * (*(void *)(*(void *)(v5 + 32) + 48) == v5) + 40) = result;
      *(void *)(result + 40) = v5;
      *(void *)(v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = result;
      *(void *)(result + 48) = a3;
      a3[2].i64[0] = result;
      do
      {
        uint64_t v17 = v12;
        if (*(float *)v12 <= *(float *)result
          && *(float *)(v12 + 4) <= *(float *)(result + 4)
          && *(float *)(v12 + 8) <= *(float *)(result + 8)
          && *(float *)(v12 + 16) >= *(float *)(result + 16)
          && *(float *)(v12 + 20) >= *(float *)(result + 20)
          && *(float *)(v12 + 24) >= *(float *)(result + 24))
        {
          break;
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)(v12 + 40) + 16;
        uint64_t v20 = *(void *)(v12 + 48) + 16;
        do
        {
          long long v21 = (float *)(v19 + v18);
          float v22 = *(float *)(v19 + v18 - 16);
          long long v23 = (float *)(v20 + v18);
          if (v22 >= *(float *)(v20 + v18 - 16)) {
            float v22 = *(float *)(v20 + v18 - 16);
          }
          *(float *)(v12 + v18) = v22;
          float v24 = *v21;
          if (*v21 <= *v23) {
            float v24 = *v23;
          }
          *(float *)(v12 + v18 + 16) = v24;
          v18 += 4;
        }
        while (v18 != 12);
        uint64_t v12 = *(void *)(v12 + 32);
        double result = v17;
      }
      while (v12);
    }
    else
    {
      *(void *)(result + 40) = v5;
      *(void *)(v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = result;
      *(void *)(result + 48) = a3;
      a3[2].i64[0] = result;
      *BOOL v4 = result;
    }
  }
  else
  {
    *(void *)double result = a3;
    a3[2].i64[0] = 0;
  }
  return result;
}

uint64_t sub_1B6DC97E8(uint64_t *a1, uint64_t a2)
{
  if (*a1 == a2)
  {
    BOOL v4 = 0;
    *a1 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 32);
    BOOL v4 = *(long long **)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 8 * (*(void *)(v3 + 48) != a2) + 40);
    if (v4)
    {
      *((void *)v4 + (*((void *)v4 + 6) == v3) + 5) = v5;
      *(void *)(v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = v4;
      sub_1B6E073C4(a1[1]);
      a1[1] = v3;
      while (1)
      {
        uint64_t v6 = 0;
        long long v8 = *v4;
        long long v7 = v4[1];
        uint64_t v9 = *((void *)v4 + 5) + 16;
        uint64_t v10 = *((void *)v4 + 6) + 16;
        do
        {
          int32x2_t v11 = (float *)(v9 + v6);
          float v12 = *(float *)(v9 + v6 - 16);
          unint64_t v13 = (float *)(v10 + v6);
          if (v12 >= *(float *)(v10 + v6 - 16)) {
            float v12 = *(float *)(v10 + v6 - 16);
          }
          *(float *)((char *)v4 + v6) = v12;
          float v14 = *v11;
          if (*v11 <= *v13) {
            float v14 = *v13;
          }
          *(float *)((char *)v4 + v6 + 16) = v14;
          v6 += 4;
        }
        while (v6 != 12);
        if (*(float *)&v8 == *(float *)v4
          && *((float *)&v8 + 1) == *((float *)v4 + 1)
          && *((float *)&v8 + 2) == *((float *)v4 + 2)
          && *(float *)&v7 == *((float *)v4 + 4)
          && *((float *)&v7 + 1) == *((float *)v4 + 5)
          && *((float *)&v7 + 2) == *((float *)v4 + 6))
        {
          break;
        }
        BOOL v4 = (long long *)*((void *)v4 + 4);
        if (!v4) {
          return *a1;
        }
      }
    }
    else
    {
      *a1 = v5;
      *(void *)(v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
      sub_1B6E073C4(a1[1]);
      a1[1] = v3;
      return *a1;
    }
  }
  return (uint64_t)v4;
}

uint64_t sub_1B6DC9940(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = sub_1B6DC97E8((uint64_t *)a1, a2);
  if (v6)
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if (v7 < 0)
    {
      uint64_t v6 = *(void *)a1;
    }
    else
    {
      for (; v7; --v7)
      {
        if (!*(void *)(v6 + 32)) {
          break;
        }
        uint64_t v6 = *(void *)(v6 + 32);
      }
    }
  }
  *(_OWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 16) = a3[1];

  return sub_1B6DC95B4(a1, v6, (float32x4_t *)a2);
}

uint64_t sub_1B6DC99CC(uint64_t a1, float *a2, float32x4_t *a3, uint64_t a4, int32x2_t a5, double a6, double a7, float32x4_t a8)
{
  if (*a2 <= a3->f32[0]
    && a2[1] <= a3->f32[1]
    && a2[2] <= a3->f32[2]
    && a2[4] >= a3[1].f32[0]
    && a2[5] >= a3[1].f32[1]
    && a2[6] >= a3[1].f32[2])
  {
    return 0;
  }
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a5, 0);
  v8.i32[3] = 0;
  float32x4_t v9 = a3[1];
  int8x16_t v10 = (int8x16_t)vsubq_f32(*a3, v8);
  int8x16_t v12 = (int8x16_t)vaddq_f32(v8, v9);
  *a3 = (float32x4_t)v10;
  a3[1] = (float32x4_t)v12;
  v9.i32[0] = *(_DWORD *)a4;
  a8.i64[0] = 0;
  float v11 = *(float *)vbslq_s8((int8x16_t)vcgtq_f32(v9, a8), v12, v10).i32;
  v12.i32[0] = v12.i32[2];
  a3[*(float *)a4 > 0.0].f32[0] = *(float *)a4 + v11;
  float v13 = *(float *)(a4 + 4);
  if (v13 <= 0.0) {
    float v14 = *(float *)&v10.i32[1];
  }
  else {
    float v14 = *(float *)&v12.i32[1];
  }
  uint64_t v15 = 1;
  if (v13 > 0.0) {
    uint64_t v15 = 5;
  }
  a3->f32[v15] = v14 + v13;
  float v16 = *(float *)(a4 + 8);
  if (v16 <= 0.0) {
    v12.i32[0] = v10.i32[2];
  }
  uint64_t v17 = 2;
  if (v16 > 0.0) {
    uint64_t v17 = 6;
  }
  a3->f32[v17] = *(float *)v12.i32 + v16;
  sub_1B6DC9940(a1, (uint64_t)a2, a3);
  return 1;
}

void sub_1B6DC9ADC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  --*(_DWORD *)(a1 + 20);
}

uint64_t sub_1B6DC9B20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

uint64_t sub_1B6DC9B44()
{
  return 1;
}

uint64_t sub_1B6DC9B4C()
{
  return 1;
}

uint64_t sub_1B6DC9B54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0FB1038;
  BOOL v4 = (void *)(a1 + 200);
  for (uint64_t i = 8; i != 200; i += 96)
    sub_1B6DC9234(a1 + i);
  *(_WORD *)(a1 + 285) = 256;
  *(unsigned char *)(a1 + 284) = a2 == 0;
  *(_DWORD *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_OWORD *)(a1 + 236) = xmmword_1B6ECFD40;
  *(_OWORD *)(a1 + 25sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E50D30;
  *(_DWORD *)(a1 + 268) = 0;
  if (!a2)
  {
    a2 = sub_1B6E073B8(128, 16);
    sub_1B6DCBA04();
  }
  *(void *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 280) = 0;
  *(void *)(a1 + 27sub_1B6DC4968((unsigned int *)this + 2) = 0;
  v4[1] = 0;
  v4[2] = 0;
  *BOOL v4 = 0;
  return a1;
}

uint64_t sub_1B6DC9C24(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB1038;
  if (*(unsigned char *)(a1 + 284))
  {
    (***(void (****)(void))(a1 + 224))(*(void *)(a1 + 224));
    sub_1B6E073C4(*(void *)(a1 + 224));
  }
  for (uint64_t i = 104; i != -88; i -= 96)
    sub_1B6DC92D4(a1 + i);
  return a1;
}

void sub_1B6DC9CB8(uint64_t a1)
{
  sub_1B6DC9C24(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DC9CF0(uint64_t a1, _OWORD *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = sub_1B6E073B8(112, 16);
  *(void *)uint64_t v15 = a5;
  *(void *)(v15 + 8) = a6;
  *(void *)(v15 + 16) = a7;
  *(void *)(v15 + 24) = a8;
  *(_OWORD *)(v15 + 48) = *a2;
  *(_OWORD *)(v15 + 64) = *a3;
  *(void *)(v15 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(v15 + 88) = 0;
  *(void *)(v15 + 96) = 0;
  long long v16 = *a3;
  v23[0] = *a2;
  v23[1] = v16;
  *(_DWORD *)(v15 + 104) = *(_DWORD *)(a1 + 236);
  int v17 = *(_DWORD *)(a1 + 280) + 1;
  *(_DWORD *)(a1 + 280) = v17;
  *(_DWORD *)(v15 + 40) = v17;
  *(void *)(v15 + 80) = sub_1B6DC9520(a1 + 8, v23, v15);
  uint64_t v18 = a1 + 8 * *(int *)(a1 + 236);
  *(void *)(v15 + 88) = 0;
  uint64_t v20 = *(void *)(v18 + 200);
  uint64_t v19 = v18 + 200;
  *(void *)(v15 + 96) = v20;
  if (*(void *)v19) {
    *(void *)(*(void *)v19 + 88) = v15;
  }
  *(void *)uint64_t v19 = v15;
  if (!*(unsigned char *)(a1 + 285))
  {
    v22[0] = &unk_1F0FB1460;
    v22[1] = a1;
    v22[2] = v15;
    sub_1B6DC9E30(a1 + 8, *(void *)(a1 + 8), v23, (uint64_t)v22);
    sub_1B6DC9E30(a1 + 104, *(void *)(a1 + 104), v23, (uint64_t)v22);
  }
  return v15;
}

void sub_1B6DC9E30(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (!a2) {
    return;
  }
  long long v24 = a3[1];
  long long v25 = *a3;
  uint64_t v6 = (void *)sub_1B6E073B8(512, 16);
  float v8 = *(float *)&v24;
  float v7 = *(float *)&v25;
  uint64_t v9 = (uint64_t)v6;
  *uint64_t v6 = a2;
  uint64_t v10 = 1;
  uint64_t v11 = 64;
  do
  {
    uint64_t v12 = (v10 - 1);
    uint64_t v13 = *(void *)(v9 + 8 * v12);
    if (*(float *)v13 <= v8
      && *(float *)(v13 + 16) >= v7
      && *(float *)(v13 + 4) <= *((float *)&v24 + 1)
      && *(float *)(v13 + 20) >= *((float *)&v25 + 1)
      && *(float *)(v13 + 8) <= *((float *)&v24 + 2)
      && *(float *)(v13 + 24) >= *((float *)&v25 + 2))
    {
      if (!*(void *)(v13 + 48))
      {
        (*(void (**)(uint64_t, void))(*(void *)a4 + 24))(a4, *(void *)(v9 + 8 * v12));
        float v8 = *(float *)&v24;
        float v7 = *(float *)&v25;
        goto LABEL_40;
      }
      if (v12 == v11
        && (!v11 ? (uint64_t v14 = 1) : (uint64_t v14 = (2 * v11)), (int)v11 < (int)v14))
      {
        if (v14) {
          uint64_t v15 = sub_1B6E073B8(8 * v14, 16);
        }
        else {
          uint64_t v15 = 0;
        }
        if (v10 >= 2)
        {
          uint64_t v16 = v11;
          int v17 = (void *)v15;
          uint64_t v18 = (uint64_t *)v9;
          do
          {
            uint64_t v19 = *v18++;
            *v17++ = v19;
            --v16;
          }
          while (v16);
        }
        sub_1B6E073C4(v9);
        float v8 = *(float *)&v24;
        float v7 = *(float *)&v25;
      }
      else
      {
        uint64_t v14 = v11;
        uint64_t v15 = v9;
      }
      *(void *)(v15 + 8 * v1sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(v13 + 40);
      if (v10 == v14)
      {
        if (v10) {
          uint64_t v11 = (2 * v10);
        }
        else {
          uint64_t v11 = 1;
        }
        if ((int)v10 < (int)v11)
        {
          if (v11) {
            uint64_t v9 = sub_1B6E073B8(8 * (int)v11, 16);
          }
          else {
            uint64_t v9 = 0;
          }
          if ((int)v10 >= 1)
          {
            uint64_t v20 = v10;
            long long v21 = (void *)v9;
            float v22 = (uint64_t *)v15;
            do
            {
              uint64_t v23 = *v22++;
              *v21++ = v23;
              --v20;
            }
            while (v20);
          }
          sub_1B6E073C4(v15);
          float v8 = *(float *)&v24;
          float v7 = *(float *)&v25;
          goto LABEL_39;
        }
        uint64_t v11 = v10;
      }
      else
      {
        uint64_t v11 = v14;
      }
      uint64_t v9 = v15;
LABEL_39:
      *(void *)(v9 + 8 * (int)v10) = *(void *)(v13 + 48);
      uint64_t v12 = (v10 + 1);
    }
LABEL_40:
    uint64_t v10 = v12;
  }
  while ((int)v12 > 0);

  sub_1B6E073C4(v9);
}

void sub_1B6DCA07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 80);
  if (v6 == 2) {
    uint64_t v8 = a1 + 104;
  }
  else {
    uint64_t v8 = a1 + 8;
  }
  sub_1B6DC9ADC(v8, v7);
  uint64_t v9 = (void *)(a1 + 8 * *(int *)(a2 + 104) + 200);
  uint64_t v10 = *(void *)(a2 + 88);
  if (v10) {
    uint64_t v9 = (void *)(v10 + 96);
  }
  *uint64_t v9 = *(void *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 96);
  if (v11) {
    *(void *)(v11 + 88) = *(void *)(a2 + 88);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 224) + 32))(*(void *)(a1 + 224), a2, a3);
  sub_1B6E073C4(a2);
  *(unsigned char *)(a1 + 286) = 1;
}

__n128 sub_1B6DCA138(uint64_t a1, uint64_t a2, _OWORD *a3, __n128 *a4)
{
  *a3 = *(_OWORD *)(a2 + 48);
  __n128 result = *(__n128 *)(a2 + 64);
  *a4 = result;
  return result;
}

void sub_1B6DCA14C(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6)
{
  v14[0] = &unk_1F0FB1670;
  v14[1] = a4;
  uint64_t v12 = (float *)(a4 + 16);
  uint64_t v13 = (unsigned int *)(a4 + 32);
  sub_1B6DCA224(a1 + 8, *(void *)(a1 + 8), a2, *(float *)(a4 + 44), a3, (float *)(a4 + 16), (unsigned int *)(a4 + 32), a5, a6, (uint64_t)v14);
  sub_1B6DCA224(a1 + 104, *(void *)(a1 + 104), a2, *(float *)(a4 + 44), a3, v12, v13, a5, a6, (uint64_t)v14);
}

void sub_1B6DCA224(uint64_t a1, uint64_t a2, float *a3, float a4, uint64_t a5, float *a6, unsigned int *a7, float32x4_t *a8, float32x4_t *a9, uint64_t a10)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v17 = *(int *)(a1 + 68);
    if ((int)v17 <= 127)
    {
      if (*(int *)(a1 + 72) <= 127)
      {
        uint64_t v18 = a8;
        uint64_t v19 = sub_1B6E073B8(1024, 16);
        uint64_t v20 = v19;
        uint64_t v21 = *(unsigned int *)(a1 + 68);
        if ((int)v21 >= 1)
        {
          uint64_t v22 = 0;
          uint64_t v23 = 8 * v21;
          do
          {
            *(void *)(v19 + v2sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(*(void *)(a1 + 80) + v22);
            v22 += 8;
          }
          while (v23 != v22);
        }
        uint64_t v24 = *(void *)(a1 + 80);
        a8 = v18;
        if (v24 && *(unsigned char *)(a1 + 88))
        {
          sub_1B6E073C4(v24);
          a8 = v18;
        }
        *(unsigned char *)(a1 + 88) = 1;
        *(void *)(a1 + 80) = v20;
        *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 128;
      }
      do
        *(void *)(*(void *)(a1 + 80) + 8 * v17++) = 0;
      while (v17 != 128);
    }
    *(_DWORD *)(a1 + 68) = 128;
    **(void **)(a1 + 80) = a2;
    uint64_t v25 = 126;
    LODWORD(v26) = 1;
    uint64_t v61 = a9;
    while (1)
    {
      uint64_t v27 = (int)v26;
      uint64_t v26 = (int)v26 - 1;
      uint64_t v28 = *(void *)(a1 + 80);
      uint64_t v29 = *(float32x4_t **)(v28 + 8 * v26);
      float32x4_t v30 = vsubq_f32(*v29, *a9);
      v30.i32[3] = 0;
      float32x4_t v31 = vsubq_f32(v29[1], *a8);
      v31.i32[3] = 0;
      v62[0] = v30;
      v62[1] = v31;
      uint64_t v32 = *a7;
      uint64_t v33 = a7[1];
      float v34 = a3[1];
      float v35 = a6[1];
      float v36 = (float)(*(float *)&v62[v32] - *a3) * *a6;
      float v37 = *a6 * (float)(*(float *)&v62[(1 - v32)] - *a3);
      float v38 = (float)(*((float *)&v62[v33] + 1) - v34) * v35;
      float v39 = v35 * (float)(*((float *)&v62[(1 - v33)] + 1) - v34);
      if (v36 > v39 || v38 > v37) {
        goto LABEL_44;
      }
      if (v38 > v36) {
        float v36 = v38;
      }
      if (v39 < v37) {
        float v37 = v39;
      }
      uint64_t v41 = a7[2];
      float v42 = a3[2];
      float v43 = a6[2];
      float v44 = (float)(*((float *)&v62[v41] + 2) - v42) * v43;
      float v45 = v43 * (float)(*((float *)&v62[(1 - v41)] + 2) - v42);
      if (v36 > v45 || v44 > v37) {
        goto LABEL_44;
      }
      if (v44 <= v36) {
        float v44 = v36;
      }
      float v47 = v45 >= v37 ? v37 : v45;
      if (v44 >= a4 || v47 <= 0.0) {
        goto LABEL_44;
      }
      if (v29[3].i64[0])
      {
        if ((int)v26 > (int)v25)
        {
          uint64_t v48 = *(int *)(a1 + 68);
          int v49 = 2 * v48;
          if ((int)v48 < 2 * (int)v48)
          {
            if (*(_DWORD *)(a1 + 72) < v49)
            {
              uint64_t v60 = a8;
              if (v48)
              {
                uint64_t v50 = sub_1B6E073B8(16 * v48, 16);
                uint64_t v51 = v50;
                uint64_t v52 = *(unsigned int *)(a1 + 68);
                if ((int)v52 >= 1)
                {
                  uint64_t v53 = 0;
                  uint64_t v54 = 8 * v52;
                  do
                  {
                    *(void *)(v50 + v53) = *(void *)(*(void *)(a1 + 80) + v53);
                    v53 += 8;
                  }
                  while (v54 != v53);
                }
                a8 = v60;
              }
              else
              {
                uint64_t v51 = 0;
              }
              uint64_t v58 = *(void *)(a1 + 80);
              if (v58 && *(unsigned char *)(a1 + 88))
              {
                uint64_t v59 = v51;
                sub_1B6E073C4(v58);
                uint64_t v51 = v59;
                a8 = v60;
              }
              *(unsigned char *)(a1 + 88) = 1;
              *(void *)(a1 + 80) = v51;
              int v49 = 2 * v48;
              *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 2 * v48;
            }
            do
              *(void *)(*(void *)(a1 + 80) + 8 * v48++) = 0;
            while (v49 != v48);
            uint64_t v28 = *(void *)(a1 + 80);
          }
          *(_DWORD *)(a1 + 68) = v49;
          uint64_t v25 = (v49 - 2);
          a9 = v61;
        }
        *(void *)(v28 + 8 * v26) = v29[2].i64[1];
        LODWORD(v26) = v27 + 1;
        *(void *)(*(void *)(a1 + 80) + 8 * v27) = v29[3].i64[0];
        if (v27 == -1) {
          return;
        }
      }
      else
      {
        uint64_t v55 = v29;
        uint64_t v56 = a8;
        uint64_t v57 = v25;
        (*(void (**)(uint64_t, float32x4_t *))(*(void *)a10 + 24))(a10, v55);
        uint64_t v25 = v57;
        a8 = v56;
LABEL_44:
        if (!v26) {
          return;
        }
      }
    }
  }
}

void sub_1B6DCA5E0(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  v7[0] = &unk_1F0FB17C0;
  v7[1] = a4;
  long long v5 = *a3;
  v6[0] = *a2;
  v6[1] = v5;
  sub_1B6DC9E30(a1 + 8, *(void *)(a1 + 8), v6, (uint64_t)v7);
  sub_1B6DC9E30(a1 + 104, *(void *)(a1 + 104), v6, (uint64_t)v7);
}

void sub_1B6DCA65C(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v12 = *a3;
  float32x4_t v13 = *a4;
  v29[0] = *a3;
  v29[1] = v13;
  if (*(_DWORD *)(a2 + 104) == 2)
  {
    sub_1B6DC9ADC(a1 + 104, *(void *)(a2 + 80));
    *(void *)(a2 + 80) = sub_1B6DC9520(a1 + 8, v29, a2);
LABEL_10:
    int v15 = 1;
    goto LABEL_11;
  }
  ++*(_DWORD *)(a1 + 260);
  uint64_t v14 = *(void *)(a2 + 80);
  if (*(float *)v14 > v13.f32[0]
    || *(float *)(v14 + 16) < v12.f32[0]
    || *(float *)(v14 + 4) > v13.f32[1]
    || (a8.i32[0] = *(_DWORD *)(v14 + 20), a8.f32[0] < v12.f32[1])
    || *(float *)(v14 + 8) > v13.f32[2]
    || *(float *)(v14 + 24) < v12.f32[2])
  {
    sub_1B6DC9940(a1 + 8, v14, v29);
    ++*(_DWORD *)(a1 + 264);
    goto LABEL_10;
  }
  float32x4_t v23 = *(float32x4_t *)(a2 + 48);
  float32x4_t v24 = vsubq_f32(*a3, v23);
  float32x4_t v25 = vsubq_f32(*(float32x4_t *)(a2 + 64), v23);
  v25.i32[3] = 0;
  v26.i64[0] = 0x3F0000003F000000;
  v26.i64[1] = 0x3F0000003F000000;
  float32x4_t v27 = vmulq_n_f32(vmulq_f32(v25, v26), *(float *)(a1 + 232));
  v27.i32[3] = 0;
  float32x4_t v28 = v27;
  if (v24.f32[0] < 0.0) {
    v28.f32[0] = -v27.f32[0];
  }
  v26.i32[0] = v24.i32[1];
  if (v24.f32[1] < 0.0)
  {
    v26.f32[0] = -v27.f32[1];
    v28.f32[1] = -v27.f32[1];
  }
  if (v24.f32[2] < 0.0) {
    v28.f32[2] = -v27.f32[2];
  }
  v24.i32[0] = 1028443341;
  int v15 = sub_1B6DC99CC(a1 + 8, (float *)v14, v29, (uint64_t)&v28, *(int32x2_t *)v24.f32, *(double *)v27.i64, *(double *)v26.i64, a8);
  if (v15) {
    ++*(_DWORD *)(a1 + 264);
  }
LABEL_11:
  uint64_t v16 = (void *)(a1 + 8 * *(int *)(a2 + 104) + 200);
  uint64_t v17 = *(void *)(a2 + 88);
  if (v17) {
    uint64_t v16 = (void *)(v17 + 96);
  }
  *uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v18 = *(void *)(a2 + 96);
  if (v18) {
    *(void *)(v18 + 88) = *(void *)(a2 + 88);
  }
  *(float32x4_t *)(a2 + 48) = *a3;
  *(float32x4_t *)(a2 + 64) = *a4;
  uint64_t v19 = *(int *)(a1 + 236);
  *(_DWORD *)(a2 + 104) = v19;
  uint64_t v20 = a1 + 8 * v19;
  *(void *)(a2 + 88) = 0;
  uint64_t v22 = *(void *)(v20 + 200);
  uint64_t v21 = v20 + 200;
  *(void *)(a2 + 96) = v22;
  if (*(void *)v21) {
    *(void *)(*(void *)v21 + 88) = a2;
  }
  *(void *)uint64_t v21 = a2;
  if (v15)
  {
    *(unsigned char *)(a1 + 286) = 1;
    if (!*(unsigned char *)(a1 + 285))
    {
      v28.i64[0] = (uint64_t)&unk_1F0FB1460;
      v28.i64[1] = a1;
      sub_1B6DCA8C4(a1 + 104, *(void *)(a1 + 104), *(void *)(a2 + 80), (uint64_t)&v28);
      sub_1B6DCA8C4(a1 + 8, *(void *)(a1 + 8), *(void *)(a2 + 80), (uint64_t)&v28);
    }
  }
}

void sub_1B6DCA8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a3)
  {
    if (*(int *)(a1 + 36) <= 127 && *(int *)(a1 + 40) <= 127)
    {
      uint64_t v8 = sub_1B6E073B8(2048, 16);
      uint64_t v9 = v8;
      uint64_t v10 = *(unsigned int *)(a1 + 36);
      if ((int)v10 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 16 * v10;
        do
        {
          *(_OWORD *)(v8 + v11) = *(_OWORD *)(*(void *)(a1 + 48) + v11);
          v11 += 16;
        }
        while (v12 != v11);
      }
      uint64_t v13 = *(void *)(a1 + 48);
      if (v13 && *(unsigned char *)(a1 + 56)) {
        sub_1B6E073C4(v13);
      }
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 48) = v9;
      *(_DWORD *)(a1 + 40) = 128;
    }
    *(_DWORD *)(a1 + 36) = 128;
    uint64_t v14 = *(void **)(a1 + 48);
    void *v14 = a2;
    v14[1] = a3;
    int v15 = 124;
    LODWORD(v16) = 1;
    do
    {
      uint64_t v17 = (int)v16;
      uint64_t v16 = (int)v16 - 1;
      uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v16);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      if ((int)v16 > v15)
      {
        uint64_t v21 = *(int *)(a1 + 36);
        int v22 = 2 * v21;
        if ((int)v21 < 2 * (int)v21 && *(_DWORD *)(a1 + 40) < v22)
        {
          if (v21)
          {
            uint64_t v23 = sub_1B6E073B8(32 * v21, 16);
            uint64_t v24 = v23;
            uint64_t v25 = *(unsigned int *)(a1 + 36);
            if ((int)v25 >= 1)
            {
              uint64_t v26 = 0;
              uint64_t v27 = 16 * v25;
              do
              {
                *(_OWORD *)(v23 + v26) = *(_OWORD *)(*(void *)(a1 + 48) + v26);
                v26 += 16;
              }
              while (v27 != v26);
            }
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v28 = *(void *)(a1 + 48);
          if (v28 && *(unsigned char *)(a1 + 56)) {
            sub_1B6E073C4(v28);
          }
          *(unsigned char *)(a1 + 56) = 1;
          *(void *)(a1 + 48) = v24;
          *(_DWORD *)(a1 + 40) = v22;
        }
        *(_DWORD *)(a1 + 36) = v22;
        int v15 = v22 - 4;
      }
      if (v19 == v20)
      {
        if (*(void *)(v19 + 48))
        {
          float v39 = (const double *)(v19 + 40);
          float64x2_t v40 = vld1q_dup_f64(v39);
          *(float64x2_t *)(*(void *)(a1 + 48) + 16 * v16) = v40;
          uint64_t v41 = (const double *)(v19 + 48);
          float64x2_t v42 = vld1q_dup_f64(v41);
          *(float64x2_t *)(*(void *)(a1 + 48) + 16 * v17) = v42;
          LODWORD(v16) = v17 + 2;
          *(_OWORD *)(*(void *)(a1 + 48) + 16 * v17 + 16) = *(_OWORD *)(v19 + 40);
        }
      }
      else if (*(float *)v19 <= *(float *)(v20 + 16) {
             && *(float *)(v19 + 16) >= *(float *)v20
      }
             && *(float *)(v19 + 4) <= *(float *)(v20 + 20)
             && *(float *)(v19 + 20) >= *(float *)(v20 + 4)
             && *(float *)(v19 + 8) <= *(float *)(v20 + 24)
             && *(float *)(v19 + 24) >= *(float *)(v20 + 8))
      {
        uint64_t v29 = *(void *)(v20 + 48);
        if (*(void *)(v19 + 48))
        {
          uint64_t v30 = *(void *)(v19 + 40);
          if (v29)
          {
            uint64_t v31 = *(void *)(v20 + 40);
            uint64_t v32 = (void *)(*(void *)(a1 + 48) + 16 * v16);
            void *v32 = v30;
            v32[1] = v31;
            uint64_t v33 = *(void *)(v20 + 40);
            float v34 = (void *)(*(void *)(a1 + 48) + 16 * v17);
            *float v34 = *(void *)(v19 + 48);
            v34[1] = v33;
            uint64_t v35 = *(void *)(v20 + 48);
            uint64_t v36 = *(void *)(a1 + 48) + 16 * v17;
            *(void *)(v36 + 16) = *(void *)(v19 + 40);
            *(void *)(v36 + 24) = v35;
            uint64_t v37 = *(void *)(v20 + 48);
            LODWORD(v16) = v17 + 3;
            uint64_t v38 = *(void *)(a1 + 48) + 16 * v17;
            *(void *)(v38 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(v19 + 48);
            *(void *)(v38 + 40) = v37;
          }
          else
          {
            float v47 = (void *)(*(void *)(a1 + 48) + 16 * v16);
            *float v47 = v30;
            v47[1] = v20;
            LODWORD(v16) = v17 + 1;
            uint64_t v48 = (void *)(*(void *)(a1 + 48) + 16 * v17);
            *uint64_t v48 = *(void *)(v19 + 48);
            v48[1] = v20;
          }
        }
        else if (v29)
        {
          uint64_t v43 = *(void *)(v20 + 40);
          float v44 = (void *)(*(void *)(a1 + 48) + 16 * v16);
          *float v44 = v19;
          v44[1] = v43;
          uint64_t v45 = *(void *)(v20 + 48);
          LODWORD(v16) = v17 + 1;
          uint64_t v46 = (void *)(*(void *)(a1 + 48) + 16 * v17);
          *uint64_t v46 = v19;
          v46[1] = v45;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v19, v20);
        }
      }
    }
    while (v16);
  }
}

void sub_1B6DCABF4(uint64_t a1, uint64_t a2)
{
  sub_1B6DCAC34(a1);

  sub_1B6DCAFDC(a1, a2);
}

void sub_1B6DCAC34(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = 1374389535 * *(_DWORD *)(a1 + 244) * *(_DWORD *)(a1 + 28);
  sub_1B6DC936C(a1 + 8, (v3 >> 37) + ((unint64_t)v3 >> 63) + 1);
  if (*(_DWORD *)(a1 + 256))
  {
    uint64_t v4 = 1374389535 * *(_DWORD *)(a1 + 240) * *(_DWORD *)(a1 + 124);
    int v5 = (v4 >> 37) + ((unint64_t)v4 >> 63) + 1;
    sub_1B6DC936C(a1 + 104, v5);
    *(_DWORD *)(a1 + 256) = (*(_DWORD *)(a1 + 256) - v5) & ~((*(_DWORD *)(a1 + 256) - v5) >> 31);
  }
  int v6 = *(_DWORD *)(a1 + 236);
  BOOL v7 = __OFADD__(v6++, 1);
  char v8 = (v6 < 0) ^ v7;
  int v9 = v6 & 1;
  if (v8) {
    int v9 = -v9;
  }
  *(_DWORD *)(a1 + 236) = v9;
  uint64_t v10 = *(void *)(a1 + 8 * v9 + 200);
  if (v10)
  {
    uint64_t v33 = &unk_1F0FB1460;
    uint64_t v34 = a1;
    do
    {
      uint64_t v11 = (uint64_t *)(a1 + 8 * *(int *)(v10 + 104) + 200);
      uint64_t v12 = *(void *)(v10 + 88);
      uint64_t v13 = *(void *)(v10 + 96);
      if (v12) {
        uint64_t v11 = (uint64_t *)(v12 + 96);
      }
      *uint64_t v11 = v13;
      uint64_t v14 = *(void *)(v10 + 96);
      if (v14) {
        *(void *)(v14 + 88) = *(void *)(v10 + 88);
      }
      *(void *)(v10 + 88) = 0;
      *(void *)(v10 + 96) = *(void *)(a1 + 216);
      uint64_t v15 = *(void *)(a1 + 216);
      if (v15) {
        *(void *)(v15 + 88) = v10;
      }
      *(void *)(a1 + 216) = v10;
      sub_1B6DC9ADC((uint64_t)v2, *(void *)(v10 + 80));
      long long v16 = *(_OWORD *)(v10 + 64);
      v32[0] = *(_OWORD *)(v10 + 48);
      v32[1] = v16;
      *(void *)(v10 + 80) = sub_1B6DC9520(a1 + 104, v32, v10);
      *(_DWORD *)(v10 + 104) = 2;
      uint64_t v10 = v13;
    }
    while (v13);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a1 + 124);
    *(unsigned char *)(a1 + 286) = 1;
  }
  *(void *)&v32[0] = &unk_1F0FB1460;
  *((void *)&v32[0] + 1) = a1;
  if (*(unsigned char *)(a1 + 285))
  {
    sub_1B6DCA8C4((uint64_t)v2, *(void *)(a1 + 8), *(void *)(a1 + 104), (uint64_t)v32);
    if (*(unsigned char *)(a1 + 285)) {
      sub_1B6DCA8C4((uint64_t)v2, *v2, *v2, (uint64_t)v32);
    }
  }
  if (*(unsigned char *)(a1 + 286))
  {
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 224) + 56))(*(void *)(a1 + 224));
    int v19 = *(_DWORD *)(v17 + 4);
    if (v19 >= 1)
    {
      uint64_t v20 = 1374389535 * *(_DWORD *)(a1 + 248) * v19;
      int v21 = (v20 >> 37) + ((unint64_t)v20 >> 63);
      if (*(_DWORD *)(a1 + 252) > v21) {
        int v21 = *(_DWORD *)(a1 + 252);
      }
      if (v19 >= v21) {
        int v22 = v21;
      }
      else {
        int v22 = *(_DWORD *)(v17 + 4);
      }
      if (v22 < 1) {
        goto LABEL_36;
      }
      uint64_t v23 = v17;
      for (int i = 0; i < v22; ++i)
      {
        uint64_t v25 = (void *)(*(void *)(v23 + 16) + 32 * ((*(_DWORD *)(a1 + 276) + i) % *(_DWORD *)(v23 + 4)));
        uint64_t v26 = v25[1];
        uint64_t v27 = *(unsigned __int32 **)(*v25 + 80);
        uint64_t v28 = *(float **)(v26 + 80);
        v18.n128_u32[0] = *v27;
        if (*(float *)v27 <= v28[4])
        {
          v18.n128_u32[0] = v27[4];
          if (v18.n128_f32[0] >= *v28)
          {
            v18.n128_u32[0] = v27[1];
            if (v18.n128_f32[0] <= v28[5])
            {
              v18.n128_u32[0] = v27[5];
              if (v18.n128_f32[0] >= v28[1])
              {
                v18.n128_u32[0] = v27[2];
                if (v18.n128_f32[0] <= v28[6])
                {
                  v18.n128_u32[0] = v27[6];
                  if (v18.n128_f32[0] >= v28[2]) {
                    continue;
                  }
                }
              }
            }
          }
        }
        (*(void (**)(void, __n128))(**(void **)(a1 + 224) + 24))(*(void *)(a1 + 224), v18);
        --v22;
        --i;
      }
      int v19 = *(_DWORD *)(v23 + 4);
      if (v19 <= 0) {
        *(_DWORD *)(a1 + 276) = 0;
      }
      else {
LABEL_36:
      }
        *(_DWORD *)(a1 + 276) = (*(_DWORD *)(a1 + 276) + v22) % v19;
    }
  }
  ++*(_DWORD *)(a1 + 272);
  *(_DWORD *)(a1 + 25sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(unsigned char *)(a1 + 286) = 0;
  unsigned int v29 = *(_DWORD *)(a1 + 260);
  unsigned int v30 = *(_DWORD *)(a1 + 264);
  if (v29) {
    float v31 = (float)v30 / (float)v29;
  }
  else {
    float v31 = 0.0;
  }
  *(float *)(a1 + 268) = v31;
  *(_DWORD *)(a1 + 264) = v30 >> 1;
  *(_DWORD *)(a1 + 260) = v29 >> 1;
}

void sub_1B6DCAFDC(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 224) + 112))(*(void *)(a1 + 224)))
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 224) + 56))(*(void *)(a1 + 224));
    uint64_t v6 = v4;
    int v7 = *(_DWORD *)(v4 + 4);
    uint64_t v8 = (v7 - 1);
    if (v7 > 1)
    {
      sub_1B6DCB4DC(v4, (uint64_t)&v33, 0, v8);
      int v7 = *(_DWORD *)(v6 + 4);
    }
    if (v7 >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      int v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = v13;
        uint64_t v15 = v12;
        uint64_t v16 = *(void *)(v6 + 16);
        uint64_t v17 = (void *)(v16 + v9);
        uint64_t v12 = *(void *)(v16 + v9);
        uint64_t v13 = *(void *)(v16 + v9 + 8);
        if (v12 == v15 && v13 == v14) {
          goto LABEL_16;
        }
        int v19 = *(unsigned __int32 **)(v12 + 80);
        uint64_t v20 = *(float **)(v13 + 80);
        v5.n128_u32[0] = *v19;
        if (*(float *)v19 > v20[4]
          || (v5.n128_u32[0] = v19[4], v5.n128_f32[0] < *v20)
          || (v5.n128_u32[0] = v19[1], v5.n128_f32[0] > v20[5])
          || (v5.n128_u32[0] = v19[5], v5.n128_f32[0] < v20[1])
          || (v5.n128_u32[0] = v19[2], v5.n128_f32[0] > v20[6])
          || (v5.n128_u32[0] = v19[6], v5.n128_f32[0] < v20[2]))
        {
LABEL_16:
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, __n128))(**(void **)(a1 + 224) + 64))(*(void *)(a1 + 224), v16 + v9, a2, v8, v5);
          ++v11;
          *uint64_t v17 = 0;
          v17[1] = 0;
          int v7 = *(_DWORD *)(v6 + 4);
        }
        ++v10;
        v9 += 32;
      }
      while (v10 < v7);
      if (v7 >= 2)
      {
        sub_1B6DCB4DC(v6, (uint64_t)&v32, 0, (v7 - 1));
        int v7 = *(_DWORD *)(v6 + 4);
      }
      int v21 = v7 - v11;
      if (v11 < 0)
      {
        if (*(_DWORD *)(v6 + 8) < v21)
        {
          if (v7 == v11)
          {
            uint64_t v22 = 0;
            int v23 = v7;
          }
          else
          {
            uint64_t v22 = sub_1B6E073B8(32 * v21, 16);
            int v23 = *(_DWORD *)(v6 + 4);
          }
          if (v23 >= 1)
          {
            uint64_t v24 = 0;
            uint64_t v25 = 32 * v23;
            do
            {
              uint64_t v26 = v22 + v24;
              uint64_t v27 = *(void *)(v6 + 16) + v24;
              *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
              *(void *)(v26 + 16) = *(void *)(v27 + 16);
              *(void *)(v26 + 24) = *(void *)(v27 + 24);
              v24 += 32;
            }
            while (v25 != v24);
          }
          uint64_t v28 = *(void *)(v6 + 16);
          if (v28 && *(unsigned char *)(v6 + 24)) {
            sub_1B6E073C4(v28);
          }
          *(unsigned char *)(v6 + 24) = 1;
          *(void *)(v6 + 16) = v22;
          *(_DWORD *)(v6 + 8) = v21;
        }
        uint64_t v29 = v7;
        uint64_t v30 = 32 * v7;
        do
        {
          float v31 = (_OWORD *)(*(void *)(v6 + 16) + v30);
          ++v29;
          *float v31 = 0uLL;
          v31[1] = 0uLL;
          v30 += 32;
        }
        while (v29 < v21);
      }
      v7 -= v11;
    }
    *(_DWORD *)(v6 + 4) = v7;
  }
}

uint64_t sub_1B6DCB284(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

uint64_t sub_1B6DCB28C(uint64_t a1)
{
  return *(void *)(a1 + 224);
}

uint64_t sub_1B6DCB294(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3 = *(long long **)(result + 8);
  uint64_t v4 = *(long long **)(result + 104);
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = v3 + 1;
      int v7 = v4 + 1;
      do
      {
        uint64_t v8 = (float *)((char *)v6 + v5);
        float v9 = *(float *)((char *)v6 + v5 - 16);
        uint64_t v10 = (float *)((char *)v7 + v5);
        if (v9 >= *(float *)((char *)v7 + v5 - 16)) {
          float v9 = *(float *)((char *)v7 + v5 - 16);
        }
        *(float *)((char *)v14 + v5) = v9;
        float v11 = *v8;
        if (*v8 <= *v10) {
          float v11 = *v10;
        }
        *(float *)((char *)&v14[1] + v5) = v11;
        v5 += 4;
      }
      while (v5 != 12);
      long long v13 = v14[0];
      long long v12 = v14[1];
    }
    else
    {
      long long v13 = *v3;
      long long v12 = v3[1];
    }
  }
  else if (v4)
  {
    long long v13 = *v4;
    long long v12 = v4[1];
  }
  else
  {
    long long v12 = 0uLL;
    long long v13 = 0uLL;
  }
  *a2 = v13;
  *a3 = v12;
  return result;
}

double sub_1B6DCB32C(uint64_t a1)
{
  if (!(*(_DWORD *)(a1 + 28) + *(_DWORD *)(a1 + 124)))
  {
    uint64_t v2 = a1 + 104;
    sub_1B6DC9268(a1 + 8);
    sub_1B6DC9268(v2);
    *(_WORD *)(a1 + 285) = 256;
    *(_OWORD *)(a1 + 236) = xmmword_1B6ECFD40;
    *(void *)&double result = 1;
    *(void *)(a1 + 25sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 268) = 0;
    *(void *)(a1 + 276) = 0;
    *(void *)(a1 + 260) = 0;
  }
  return result;
}

void sub_1B6DCB3AC()
{
}

uint64_t sub_1B6DCB3C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = result;
    double result = (*(uint64_t (**)(void, void, void))(**(void **)(*(void *)(result + 8) + 224) + 16))(*(void *)(*(void *)(result + 8) + 224), *(void *)(a2 + 40), *(void *)(a3 + 40));
    ++*(_DWORD *)(*(void *)(v3 + 8) + 252);
  }
  return result;
}

uint64_t sub_1B6DCB430(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, *(void *)(a1[2] + 80));
}

void sub_1B6DCB45C()
{
}

uint64_t sub_1B6DCB470(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(void *)(a2 + 40));
}

void sub_1B6DCB49C()
{
}

uint64_t sub_1B6DCB4B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(void *)(a2 + 40));
}

uint64_t sub_1B6DCB4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = a4 + a3;
  if ((int)a4 + (int)a3 < 0 != __OFADD__(a4, a3)) {
    ++v8;
  }
  uint64_t v9 = *(void *)(a1 + 16) + 32 * ((uint64_t)v8 >> 1);
  long long v23 = *(_OWORD *)v9;
  uint64_t v24 = *(void *)(v9 + 16);
  uint64_t v25 = *(void *)(v9 + 24);
  LODWORD(v10) = a3;
  LODWORD(v11) = a4;
  do
  {
    uint64_t v12 = 32 * (int)v10;
    do
    {
      BOOL v13 = sub_1B6DCB624(a2, (uint64_t *)(*(void *)(a1 + 16) + v12), (uint64_t *)&v23);
      uint64_t v10 = (v10 + 1);
      v12 += 32;
    }
    while (v13);
    uint64_t v14 = 32 * (int)v11;
    do
    {
      uint64_t result = sub_1B6DCB624(a2, (uint64_t *)&v23, (uint64_t *)(*(void *)(a1 + 16) + v14));
      uint64_t v11 = (v11 - 1);
      v14 -= 32;
    }
    while ((result & 1) != 0);
    if ((int)v10 - 1 <= (int)v11 + 1)
    {
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v17 = v16 + v12;
      uint64_t v18 = v16 + v14;
      long long v19 = *(_OWORD *)(v17 - 32);
      long long v20 = *(_OWORD *)(v17 - 16);
      long long v21 = *(_OWORD *)(v18 + 48);
      *(_OWORD *)(v17 - 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v18 + 32);
      *(_OWORD *)(v17 - 16) = v21;
      uint64_t v22 = *(void *)(a1 + 16) + v14;
      *(_OWORD *)(v22 + 3sub_1B6DC4968((unsigned int *)this + 2) = v19;
      *(_OWORD *)(v22 + 48) = v20;
    }
    else
    {
      uint64_t v10 = (v10 - 1);
      uint64_t v11 = (v11 + 1);
    }
  }
  while ((int)v10 <= (int)v11);
  if ((int)v11 > (int)a3) {
    uint64_t result = sub_1B6DCB4DC(a1, a2, a3, v11);
  }
  if ((int)v10 < (int)a4) {
    return sub_1B6DCB4DC(a1, a2, v10, a4);
  }
  return result;
}

BOOL sub_1B6DCB624(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    int v4 = *(_DWORD *)(v3 + 40);
  }
  else {
    int v4 = -1;
  }
  uint64_t v5 = *a3;
  if (*a3) {
    int v6 = *(_DWORD *)(v5 + 40);
  }
  else {
    int v6 = -1;
  }
  uint64_t v7 = a2[1];
  if (v7) {
    int v8 = *(_DWORD *)(v7 + 40);
  }
  else {
    int v8 = -1;
  }
  uint64_t v9 = a3[1];
  if (v9) {
    int v10 = *(_DWORD *)(v9 + 40);
  }
  else {
    int v10 = -1;
  }
  if (v4 > v6) {
    return 1;
  }
  BOOL v12 = v3 != v5 || v8 <= v10;
  BOOL result = !v12;
  if (v12 && v3 == v5) {
    return v7 == v9 && a2[2] > (unint64_t)a3[2];
  }
  return result;
}

uint64_t sub_1B6DCB6C0(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2500;
  *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 60) = 0;
  *(unsigned char *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 9sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v2 = sub_1B6E073B8(64, 16);
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 32 * v4;
    do
    {
      uint64_t v7 = v2 + v5;
      uint64_t v8 = *(void *)(a1 + 24) + v5;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(void *)(v7 + 16) = *(void *)(v8 + 16);
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      v5 += 32;
    }
    while (v6 != v5);
  }
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9 && *(unsigned char *)(a1 + 32)) {
    sub_1B6E073C4(v9);
  }
  *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 16) = 2;
  sub_1B6DCB7BC(a1);
  return a1;
}

void sub_1B6DCB7BC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  uint64_t v2 = *(unsigned int *)(a1 + 60);
  if ((int)v2 >= (int)v1) {
    return;
  }
  if (*(_DWORD *)(a1 + 64) < (int)v1)
  {
    if (v1)
    {
      uint64_t v4 = sub_1B6E073B8(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 60);
    }
    else
    {
      uint64_t v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 60);
    }
    uint64_t v6 = *(void *)(a1 + 72);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(unsigned char *)(a1 + 80) = 1;
        *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v4;
        *(_DWORD *)(a1 + 64) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v5 = v5;
      uint64_t v7 = (_DWORD *)v4;
      uint64_t v8 = *(int **)(a1 + 72);
      do
      {
        int v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(unsigned char *)(a1 + 80)) {
      sub_1B6E073C4(v6);
    }
    *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(void *)(a1 + 72) + 4 * (int)v2), 4 * (v1 + ~v2) + 4);
  *(_DWORD *)(a1 + 60) = v1;
  int v10 = *(_DWORD *)(a1 + 92);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 96) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(void *)(a1 + 104) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if (v1) {
      uint64_t v11 = sub_1B6E073B8(4 * (int)v1, 16);
    }
    else {
      uint64_t v11 = 0;
    }
    LODWORD(v1sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + 92);
    uint64_t v13 = *(void *)(a1 + 104);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(unsigned char *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
        *(void *)(a1 + 104) = v11;
        *(_DWORD *)(a1 + 96) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v12 = v12;
      uint64_t v14 = (_DWORD *)v11;
      uint64_t v15 = *(int **)(a1 + 104);
      do
      {
        int v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(unsigned char *)(a1 + 112)) {
      sub_1B6E073C4(v13);
    }
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 9sub_1B6DC4968((unsigned int *)this + 2) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 72), 255, 4 * v1);
    memset(*(void **)(a1 + 104), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = *(void *)(a1 + 104);
    uint64_t v20 = *(void *)(a1 + 24) + 8;
    do
    {
      int v21 = *(_DWORD *)(*(void *)(v20 - 8) + 40) | (*(_DWORD *)(*(void *)v20 + 40) << 16);
      uint64_t v22 = ~((uint64_t)v21 << 15) + v21;
      uint64_t v23 = (9 * (v22 ^ (v22 >> 10))) ^ ((9 * (v22 ^ (v22 >> 10))) >> 6);
      LODWORD(v23) = (*(_DWORD *)(a1 + 16) - 1) & (((unint64_t)(v23 + ~(v23 << 11)) >> 16) ^ (v23 + ~(v23 << 11)));
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * (int)v23);
      *(_DWORD *)(v18 + 4 * (int)v23) = v17++;
      v20 += 32;
    }
    while (v2 != v17);
  }
}

void *sub_1B6DCBA08(void *a1)
{
  *a1 = &unk_1F0FB2500;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_1B6441B40((uint64_t)(a1 + 11));
  sub_1B6441B40((uint64_t)(a1 + 7));
  sub_1B6441B40(v2);
  return a1;
}

void sub_1B6DCBA68(void *a1)
{
  sub_1B6DCBA08(a1);

  JUMPOUT(0x1BA9B6D80);
}

void (***sub_1B6DCBAA0(uint64_t a1, uint64_t a2, uint64_t a3))(void)
{
  BOOL result = *(void (****)(void))(a2 + 16);
  if (result)
  {
    (**result)(result);
    BOOL result = (void (***)(void))(*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 120))(a3, *(void *)(a2 + 16));
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_1B6DCBB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = &unk_1F0FCCBC8;
  v4[1] = a2;
  v4[2] = a1;
  v4[3] = a3;
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 96))(a1, v4);
}

uint64_t sub_1B6DCBB8C(uint64_t a1, uint64_t a2)
{
  v3[0] = &unk_1F0FCCBF0;
  v3[1] = a2;
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 96))(a1, v3);
}

uint64_t sub_1B6DCBBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 40);
  int v4 = *(_DWORD *)(a3 + 40);
  BOOL v5 = v3 <= v4;
  if (v3 <= v4) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a3;
  }
  if (v5) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = a2;
  }
  int v8 = *(_DWORD *)(v6 + 40);
  int v9 = *(_DWORD *)(v7 + 40);
  uint64_t v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  uint64_t v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  int v12 = (*(_DWORD *)(a1 + 16) - 1) & (((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~(v11 << 11)));
  if (v12 >= *(_DWORD *)(a1 + 60)) {
    return 0;
  }
  int v13 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v12);
  if (v13 == -1) {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  while (1)
  {
    uint64_t v15 = v13;
    if (*(_DWORD *)(*(void *)(v14 + 32 * v13) + 40) == v8)
    {
      uint64_t v16 = v14 + 32 * v13;
      if (*(_DWORD *)(*(void *)(v16 + 8) + 40) == v9) {
        break;
      }
    }
    int v13 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v15);
    if (v13 == -1) {
      return 0;
    }
  }
  return v16;
}

void *sub_1B6DCBCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a2 + 40);
  int v5 = *(_DWORD *)(a3 + 40);
  if (v4 <= v5) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a3;
  }
  if (v4 <= v5) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = a2;
  }
  int v8 = *(_DWORD *)(v6 + 40);
  int v9 = *(_DWORD *)(v7 + 40);
  uint64_t v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  uint64_t v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  int v12 = ((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~(v11 << 11));
  int v13 = *(_DWORD *)(a1 + 16);
  LODWORD(v14) = (v13 - 1) & v12;
  int v15 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * (int)v14);
  if (v15 == -1)
  {
LABEL_12:
    int v18 = *(_DWORD *)(a1 + 12);
    int v38 = v12;
    if (v18 == v13)
    {
      if (v13) {
        int v19 = 2 * v13;
      }
      else {
        int v19 = 1;
      }
      if (v13 >= v19)
      {
        int v19 = *(_DWORD *)(a1 + 16);
        int v22 = v19;
      }
      else
      {
        if (v19)
        {
          uint64_t v20 = sub_1B6E073B8(32 * v19, 16);
          int v21 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          uint64_t v20 = 0;
          int v21 = *(_DWORD *)(a1 + 16);
        }
        if (v21 >= 1)
        {
          uint64_t v23 = 0;
          uint64_t v24 = 32 * v21;
          do
          {
            uint64_t v25 = v20 + v23;
            uint64_t v26 = *(void *)(a1 + 24) + v23;
            *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
            *(void *)(v25 + 16) = *(void *)(v26 + 16);
            *(void *)(v25 + 24) = *(void *)(v26 + 24);
            v23 += 32;
          }
          while (v24 != v23);
        }
        uint64_t v27 = *(void *)(a1 + 24);
        if (v27 && *(unsigned char *)(a1 + 32)) {
          sub_1B6E073C4(v27);
        }
        *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
        *(void *)(a1 + 24) = v20;
        *(_DWORD *)(a1 + 16) = v19;
        int v22 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      int v19 = *(_DWORD *)(a1 + 16);
      int v22 = *(_DWORD *)(a1 + 12);
    }
    uint64_t v14 = (int)v14;
    *(_DWORD *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = v22 + 1;
    uint64_t v28 = *(void *)(a1 + 24);
    uint64_t v17 = (void *)(v28 + 32 * v18);
    uint64_t v29 = *(void *)(a1 + 120);
    if (v29)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v6, v7);
      int v19 = *(_DWORD *)(a1 + 16);
    }
    if (v13 < v19)
    {
      sub_1B6DCB7BC(a1);
      uint64_t v14 = (*(int *)(a1 + 16) - 1) & v38;
    }
    int v30 = *(_DWORD *)(v6 + 40);
    int v31 = *(_DWORD *)(v7 + 40);
    BOOL v32 = v30 < v31;
    if (v30 >= v31) {
      uint64_t v33 = v7;
    }
    else {
      uint64_t v33 = v6;
    }
    if (v32) {
      uint64_t v34 = v7;
    }
    else {
      uint64_t v34 = v6;
    }
    *uint64_t v17 = v33;
    uint64_t v35 = (void *)(v28 + 32 * v18);
    v35[2] = 0;
    v35[3] = 0;
    v35[1] = v34;
    uint64_t v36 = *(void *)(a1 + 72);
    *(_DWORD *)(*(void *)(a1 + 104) + 4 * v18) = *(_DWORD *)(v36 + 4 * v14);
    *(_DWORD *)(v36 + 4 * v14) = v18;
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 24);
    while (1)
    {
      if (*(_DWORD *)(*(void *)(v16 + 32 * v15) + 40) == v8)
      {
        uint64_t v17 = (void *)(v16 + 32 * v15);
        if (*(_DWORD *)(v17[1] + 40) == v9) {
          break;
        }
      }
      int v15 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v15);
      if (v15 == -1) {
        goto LABEL_12;
      }
    }
  }
  return v17;
}

uint64_t sub_1B6DCBF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a2 + 40);
  int v5 = *(_DWORD *)(a3 + 40);
  if (v4 <= v5) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a3;
  }
  if (v4 <= v5) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = a2;
  }
  int v8 = *(_DWORD *)(v6 + 40);
  int v9 = *(_DWORD *)(v7 + 40);
  uint64_t v10 = ~((uint64_t)(v8 | (v9 << 16)) << 15) + (v8 | (v9 << 16));
  uint64_t v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
  uint64_t v12 = (*(int *)(a1 + 16) - 1) & (int)(((unint64_t)(v11 + ~(v11 << 11)) >> 16) ^ (v11 + ~(v11 << 11)));
  int v13 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v12);
  if (v13 == -1) {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 24);
  while (1)
  {
    if (*(_DWORD *)(*(void *)(v16 + 32 * v13) + 40) == v8)
    {
      uint64_t v17 = v16 + 32 * v13;
      if (*(_DWORD *)(*(void *)(v17 + 8) + 40) == v9) {
        break;
      }
    }
    int v13 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v13);
    if (v13 == -1) {
      return 0;
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, v16 + 32 * v13, a4);
  uint64_t v18 = *(void *)(v17 + 24);
  uint64_t v19 = v17 - *(void *)(a1 + 24);
  unint64_t v20 = (unint64_t)v19 >> 5;
  uint64_t v21 = *(void *)(a1 + 72);
  int v22 = *(_DWORD *)(v21 + 4 * v12);
  if (v22 == ((unint64_t)v19 >> 5)) {
    goto LABEL_17;
  }
  do
  {
    int v23 = v22;
    int v22 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v22);
  }
  while (v22 != v20);
  if (v23 == -1) {
LABEL_17:
  }
    *(_DWORD *)(v21 + 4 * v1sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(*(void *)(a1 + 104) + 4 * (int)v20);
  else {
    *(_DWORD *)(*(void *)(a1 + 104) + 4 * v23) = *(_DWORD *)(*(void *)(a1 + 104) + 4 * (int)v20);
  }
  uint64_t v24 = *(int *)(a1 + 12) - 1;
  uint64_t v25 = *(void *)(a1 + 120);
  if (v25) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v25 + 24))(v25, v6, v7, a4);
  }
  if (v24 != v20)
  {
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t v27 = v26 + 32 * v24;
    int v28 = *(_DWORD *)(*(void *)v27 + 40) | (*(_DWORD *)(*(void *)(v27 + 8) + 40) << 16);
    uint64_t v29 = ~((uint64_t)v28 << 15) + v28;
    uint64_t v30 = (9 * (v29 ^ (v29 >> 10))) ^ ((9 * (v29 ^ (v29 >> 10))) >> 6);
    uint64_t v31 = (*(int *)(a1 + 16) - 1) & (int)(((unint64_t)(v30 + ~(v30 << 11)) >> 16) ^ (v30 + ~(v30 << 11)));
    uint64_t v32 = *(void *)(a1 + 72);
    int v33 = *(_DWORD *)(v32 + 4 * v31);
    if (v33 == v24) {
      goto LABEL_25;
    }
    do
    {
      int v34 = v33;
      int v33 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v33);
    }
    while (v33 != v24);
    if (v34 == -1) {
LABEL_25:
    }
      *(_DWORD *)(v32 + 4 * v31) = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v24);
    else {
      *(_DWORD *)(*(void *)(a1 + 104) + 4 * v34) = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v24);
    }
    uint64_t v35 = (_OWORD *)(v26 + 32 * (int)(v19 >> 5));
    long long v36 = *(_OWORD *)(v27 + 16);
    *uint64_t v35 = *(_OWORD *)v27;
    v35[1] = v36;
    uint64_t v37 = *(void *)(a1 + 72);
    *(_DWORD *)(*(void *)(a1 + 104) + 4 * (int)v20) = *(_DWORD *)(v37 + 4 * v31);
    *(_DWORD *)(v37 + 4 * v31) = v20;
  }
  --*(_DWORD *)(a1 + 12);
  return v18;
}

uint64_t sub_1B6DCC1B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(int *)(result + 12) >= 1)
  {
    uint64_t v5 = result;
    int v6 = 0;
    do
    {
      uint64_t v7 = (void *)(*(void *)(v5 + 24) + 32 * v6);
      BOOL result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a2 + 16))(a2, v7);
      if (result) {
        BOOL result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)v5 + 24))(v5, *v7, v7[1], a3);
      }
      else {
        ++v6;
      }
    }
    while (v6 < *(_DWORD *)(v5 + 12));
  }
  return result;
}

void sub_1B6DCC27C(uint64_t a1, uint64_t a2)
{
  char v31 = 1;
  uint64_t v30 = 0;
  int v28 = 0;
  int v29 = 0;
  if (*(int *)(a1 + 12) < 1)
  {
    LODWORD(v6) = 0;
    goto LABEL_25;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (v6 != v5 || (!v5 ? (uint64_t v9 = 1) : (uint64_t v9 = (2 * v5)), (int)v5 >= (int)v9))
    {
      uint64_t v9 = v5;
      goto LABEL_19;
    }
    if (v9) {
      uint64_t v10 = sub_1B6E073B8(32 * (int)v9, 16);
    }
    else {
      uint64_t v10 = 0;
    }
    if ((int)v5 >= 1)
    {
      uint64_t v11 = v5;
      uint64_t v12 = (uint64_t *)(v4 + 24);
      int v13 = (void *)(v10 + 24);
      do
      {
        *(_OWORD *)(v13 - 3) = *(_OWORD *)(v12 - 3);
        *(v13 - 1) = *(v12 - 1);
        uint64_t v14 = *v12;
        v12 += 4;
        *int v13 = v14;
        v13 += 4;
        --v11;
      }
      while (v11);
LABEL_17:
      sub_1B6E073C4(v4);
      goto LABEL_18;
    }
    if (v4) {
      goto LABEL_17;
    }
LABEL_18:
    char v31 = 1;
    uint64_t v30 = v10;
    uint64_t v4 = v10;
    int v29 = v9;
LABEL_19:
    uint64_t v15 = v8 + 32 * v7;
    uint64_t v16 = v4 + 32 * (int)v6;
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v15;
    *(void *)(v16 + 16) = *(void *)(v15 + 16);
    *(void *)(v16 + 24) = *(void *)(v15 + 24);
    int v17 = v28;
    uint64_t v6 = ++v28;
    ++v7;
    uint64_t v5 = v9;
  }
  while (v7 < *(int *)(a1 + 12));
  if ((v17 & 0x80000000) == 0)
  {
    uint64_t v18 = (void *)(v4 + 8);
    uint64_t v19 = v6;
    do
    {
      (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 24))(a1, *(v18 - 1), *v18, a2);
      v18 += 4;
      --v19;
    }
    while (v19);
  }
LABEL_25:
  if (*(int *)(a1 + 92) >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(a1 + 104);
    do
      *(_DWORD *)(v21 + 4 * v20++) = -1;
    while (v20 < *(int *)(a1 + 92));
  }
  uint64_t v22 = (v6 - 1);
  if ((int)v6 > 1)
  {
    sub_1B6DCB4DC((uint64_t)v27, (uint64_t)&v26, 0, v22);
    LODWORD(v6) = v28;
  }
  if ((int)v6 >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    do
    {
      (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 16))(a1, *(void *)(v30 + v23), *(void *)(v30 + v23 + 8), v22);
      ++v24;
      v23 += 32;
    }
    while (v24 < v28);
  }
  if (v30) {
    BOOL v25 = v31 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (!v25) {
    sub_1B6E073C4(v30);
  }
}

void *sub_1B6DCC4D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (((*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v6 + 16))(v6, a2, a3) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = a2[1];
    uint64_t v8 = a3[1];
    BOOL v9 = (a3[2] & v7) != 0 && (a2[2] & v8) != 0;
    if ((v8 & a2[3]) == 0)
    {
      int v10 = (a3[3] & v7) != 0 || v9;
      if (v10 != 1) {
        return 0;
      }
    }
  }

  return sub_1B6DCBCB4(a1, (uint64_t)a2, (uint64_t)a3);
}

uint64_t sub_1B6DCC5B8(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1B6DCC5C0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_1B6DCC5C8(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1B6DCC5D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_1B6DCC5D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t sub_1B6DCC5E0()
{
  return 0;
}

uint64_t sub_1B6DCC5E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 120) = a2;
  return result;
}

void sub_1B6DCC5F0()
{
}

uint64_t sub_1B6DCC604(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*a2 == v2 || a2[1] == v2) {
    (*(void (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
  }
  return 0;
}

void sub_1B6DCC65C()
{
}

BOOL sub_1B6DCC670(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  return *a2 == v2 || a2[1] == v2;
}

double sub_1B6DCC688(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB0B00;
  *(_DWORD *)(a1 + 64) = 281;
  *(unsigned char *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = 0;
  *(void *)(a1 + 116) = 0;
  *(unsigned char *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = 1;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 200) = 1;
  *(void *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 240) = 1;
  *(void *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  double result = -1.40444776e306;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E51F50;
  *(_OWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E51F40;
  return result;
}

void sub_1B6DCC714(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, float32x4_t a6, double a7, float32x4_t a8, float32x4_t a9, float a10, float32x4_t a11)
{
  int v13 = a3 - a2;
  int v14 = *(_DWORD *)(a1 + 68);
  if (a3 - a2 == 1)
  {
    sub_1B6DCCAF4(a1, *(_DWORD *)(a1 + 68), a2);
    ++*(_DWORD *)(a1 + 68);
  }
  else
  {
    int v16 = sub_1B6DCCB44((__n128 *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    uint64_t v24 = sub_1B6DCCD58((__n128 *)a1, a2, a3, v16, v17, v18, v19, v20, v21, v22, v23);
    int v25 = *(_DWORD *)(a1 + 68);
    sub_1B6DCCFFC((float32x4_t *)a1, v25, (float32x4_t *)(a1 + 32));
    __n128 v26 = (__n128)sub_1B6DCD068((float32x4_t *)a1, *(_DWORD *)(a1 + 68), (float32x4_t *)(a1 + 16));
    if ((int)a3 > (int)a2)
    {
      uint64_t v29 = 16 * (int)a2;
      uint64_t v30 = ((uint64_t)(int)a2 << 6) | 0x10;
      do
      {
        if (*(unsigned char *)(a1 + 72))
        {
          char v31 = (__int16 *)(*(void *)(a1 + 160) + v29);
          v26.n128_u16[0] = *v31;
          float v32 = *(float *)(a1 + 48);
          float v33 = *(float *)(a1 + 52);
          LOWORD(v27) = v31[1];
          LOWORD(v28) = v31[2];
          float v34 = *(float *)(a1 + 56);
          v47.f32[0] = (float)v26.n128_u32[0] / v32;
          v47.f32[1] = (float)v27 / v33;
          v47.i64[1] = COERCE_UNSIGNED_INT((float)v28 / v34);
          float32x4_t v35 = *(float32x4_t *)(a1 + 16);
          float32x4_t v36 = vaddq_f32(v47, v35);
          float32x4_t v47 = v36;
          v36.i16[0] = v31[3];
          v36.f32[0] = (float)v36.u32[0] / v32;
          LOWORD(v3sub_1B6DC4968((unsigned int *)this + 2) = v31[4];
          *(float *)&unsigned int v37 = (float)LODWORD(v32) / v33;
          LOWORD(v33) = v31[5];
          v46.i64[0] = __PAIR64__(v37, v36.u32[0]);
          v46.i64[1] = COERCE_UNSIGNED_INT((float)LODWORD(v33) / v34);
          float32x4_t v38 = vaddq_f32(v46, v35);
        }
        else
        {
          float v39 = (float32x4_t *)(*(void *)(a1 + 96) + v30);
          float32x4_t v47 = v39[-1];
          float32x4_t v38 = *v39;
        }
        int v40 = *(_DWORD *)(a1 + 68);
        float32x4_t v46 = v38;
        __n128 v26 = (__n128)sub_1B6DCD0E4((float32x4_t *)a1, v40, &v47, &v46);
        v29 += 16;
        v30 += 64;
        --v13;
      }
      while (v13);
    }
    int v41 = *(_DWORD *)(a1 + 68) + 1;
    *(_DWORD *)(a1 + 68) = v41;
    sub_1B6DCC714(a1, a2, v24, v26);
    int v42 = *(_DWORD *)(a1 + 68);
    sub_1B6DCC714(a1, v24, a3, v43);
    int v44 = *(_DWORD *)(a1 + 68) - v14;
    int v45 = *(unsigned __int8 *)(a1 + 72);
    if (*(unsigned char *)(a1 + 72) && v44 >= 129)
    {
      sub_1B6DCD204(a1, v41, v42);
      int v45 = *(unsigned __int8 *)(a1 + 72);
    }
    if (v45) {
      *(_DWORD *)(*(void *)(a1 + 192) + 16 * v25 + 1sub_1B6DC4968((unsigned int *)this + 2) = -v44;
    }
    else {
      *(_DWORD *)(*(void *)(a1 + 128) + ((uint64_t)v25 << 6) + 3sub_1B6DC4968((unsigned int *)this + 2) = v44;
    }
  }
}

float32x4_t sub_1B6DCC948(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int32x2_t a4)
{
  float32x4_t v4 = (float32x4_t)vdupq_lane_s32(a4, 0);
  v4.i32[3] = 0;
  float32x4_t v5 = vsubq_f32(*a2, v4);
  float32x4_t v6 = v5;
  v6.i32[3] = 0;
  a1[1] = v6;
  float32x4_t v7 = vaddq_f32(v4, *a3);
  float32x4_t v8 = vsubq_f32(v7, v5);
  v8.i32[3] = 0;
  float32x4_t v9 = vrecpeq_f32(v8);
  float32x4_t v10 = vmulq_f32(v9, vrecpsq_f32(v8, v9));
  float32x4_t v11 = vmulq_f32(vrecpsq_f32(v8, v10), vmulq_f32(v10, (float32x4_t)xmmword_1B6ECFD50));
  _Q5 = vmulq_f32(vsubq_f32(v6, v6), v11);
  *(float32x2_t *)_Q5.f32 = vdiv_f32(vcvt_f32_u32((uint32x2_t)(*(void *)&vcvt_s32_f32(*(float32x2_t *)_Q5.f32) & 0xFFFFFFFEFFFFFFFELL)), *(float32x2_t *)v11.f32);
  _Q5.f32[2] = (float)((int)_Q5.f32[2] & 0xFFFE) / v11.f32[2];
  float32x4_t v13 = vsubq_f32(vaddq_f32(_Q5, v5), v4);
  v13.i32[3] = 0;
  float32x4_t v14 = vminq_f32(v6, v13);
  float32x4_t v15 = vmulq_f32(vsubq_f32(v7, v14), v11);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v15.f32 = vdiv_f32(vcvt_f32_u32((uint32x2_t)(*(void *)&vcvt_s32_f32(vadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)_Q5.f32)) | 0x100000001)), *(float32x2_t *)v11.f32);
  v15.f32[2] = (float)((int)(float)(v15.f32[2] + 1.0) | 1u) / v11.f32[2];
  a1[4].i8[8] = 1;
  v15.i32[3] = 0;
  float32x4_t v20 = vmaxq_f32(v7, vaddq_f32(v4, vaddq_f32(v14, v15)));
  a1[1] = v14;
  a1[2] = v20;
  float32x4_t v21 = vsubq_f32(v20, v14);
  v21.i32[3] = 0;
  float32x4_t v22 = vrecpeq_f32(v21);
  float32x4_t v23 = vmulq_f32(v22, vrecpsq_f32(v21, v22));
  float32x4_t result = vmulq_f32(vrecpsq_f32(v21, v23), vmulq_f32(v23, (float32x4_t)xmmword_1B6ECFD50));
  a1[3] = result;
  return result;
}

void *sub_1B6DCCA5C(void *a1)
{
  *a1 = &unk_1F0FB0B00;
  uint64_t v2 = (uint64_t)(a1 + 10);
  sub_1B6441B40((uint64_t)(a1 + 27));
  sub_1B6441B40((uint64_t)(a1 + 22));
  sub_1B6441B40((uint64_t)(a1 + 18));
  sub_1B6441B40((uint64_t)(a1 + 14));
  sub_1B6441B40(v2);
  return a1;
}

void sub_1B6DCCACC(void *a1)
{
  uint64_t v1 = sub_1B6DCCA5C(a1);

  sub_1B6E073C4((uint64_t)v1);
}

__n128 sub_1B6DCCAF4(uint64_t a1, int a2, int a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    __n128 result = *(__n128 *)(*(void *)(a1 + 160) + 16 * a3);
    *(__n128 *)(*(void *)(a1 + 192) + 16 * asub_1B6DC4968((unsigned int *)this + 2) = result;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 96) + ((uint64_t)a3 << 6);
    uint64_t v5 = *(void *)(a1 + 128) + ((uint64_t)a2 << 6);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(v4 + 16);
    __n128 result = *(__n128 *)(v4 + 32);
    long long v6 = *(_OWORD *)(v4 + 48);
    *(__n128 *)(v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = result;
    *(_OWORD *)(v5 + 48) = v6;
  }
  return result;
}

uint64_t sub_1B6DCCB44(__n128 *a1, int a2, int a3, double a4, double a5, float32x4_t a6, double a7, float32x4_t a8, float32x4_t a9, float a10, float32x4_t a11)
{
  int v12 = a3 - a2;
  if (a3 <= a2)
  {
    float v29 = (float)v12;
    float32x4_t v34 = 0uLL;
  }
  else
  {
    uint64_t v13 = 16 * a2;
    uint64_t v14 = ((uint64_t)a2 << 6) | 0x10;
    float32x4_t v15 = 0uLL;
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    uint64_t v17 = a3 - (uint64_t)a2;
    do
    {
      if (a1[4].n128_u8[8])
      {
        double v18 = (_WORD *)(a1[10].n128_u64[0] + v13);
        a6.i16[0] = v18[3];
        float v19 = a1[3].n128_f32[0];
        float v20 = a1[3].n128_f32[1];
        a9.i16[0] = v18[4];
        LOWORD(a10) = v18[5];
        *(float *)&unsigned int v21 = (float)LODWORD(a10);
        a11.i32[0] = a1[3].n128_i32[2];
        v22.i32[3] = 0;
        v22.f32[0] = (float)a6.u32[0] / v19;
        v22.f32[1] = (float)a9.u32[0] / v20;
        v22.f32[2] = *(float *)&v21 / a11.f32[0];
        a9 = (float32x4_t)a1[1];
        float32x4_t v23 = vaddq_f32(a9, v22);
        LOWORD(v21) = *v18;
        *(float *)&unsigned int v24 = (float)v21;
        *(float *)&unsigned int v25 = *(float *)&v24 / v19;
        LOWORD(v24) = v18[1];
        *(float *)&unsigned int v26 = (float)v24;
        a8.f32[0] = *(float *)&v26 / v20;
        LOWORD(v26) = v18[2];
        a10 = (float)v26;
        v11.i32[3] = 0;
        v11.i64[0] = __PAIR64__(a8.u32[0], v25);
        v11.f32[2] = a10 / a11.f32[0];
        float32x4_t v27 = vaddq_f32(a9, v11);
      }
      else
      {
        unsigned int v28 = (float32x4_t *)(a1[6].n128_u64[0] + v14);
        float32x4_t v27 = v28[-1];
        float32x4_t v23 = *v28;
      }
      a6 = vmulq_f32(vaddq_f32(v23, v27), v16);
      a6.i32[3] = 0;
      float32x4_t v15 = vaddq_f32(v15, a6);
      v13 += 16;
      v14 += 64;
      --v17;
    }
    while (v17);
    float v29 = (float)v12;
    float32x4_t v30 = vmulq_n_f32(v15, 1.0 / (float)v12);
    uint64_t v31 = 16 * a2;
    uint64_t v32 = ((uint64_t)a2 << 6) | 0x10;
    uint64_t v33 = a3 - (uint64_t)a2;
    float32x4_t v34 = 0uLL;
    v35.i64[0] = 0x3F0000003F000000;
    v35.i64[1] = 0x3F0000003F000000;
    do
    {
      if (a1[4].n128_u8[8])
      {
        float32x4_t v36 = (_WORD *)(a1[10].n128_u64[0] + v31);
        a8.i16[0] = v36[3];
        float v37 = a1[3].n128_f32[0];
        float v38 = a1[3].n128_f32[1];
        a11.i16[0] = v36[4];
        v11.i16[0] = v36[5];
        *(float *)&unsigned int v39 = (float)v11.u32[0];
        float v40 = a1[3].n128_f32[2];
        v41.i32[3] = 0;
        v41.f32[0] = (float)a8.u32[0] / v37;
        v41.f32[1] = (float)a11.u32[0] / v38;
        v41.f32[2] = *(float *)&v39 / v40;
        a11 = (float32x4_t)a1[1];
        float32x4_t v42 = vaddq_f32(a11, v41);
        LOWORD(v39) = *v36;
        *(float *)&unsigned int v43 = (float)v39;
        *(float *)&unsigned int v44 = *(float *)&v43 / v37;
        LOWORD(v43) = v36[1];
        *(float *)&unsigned int v45 = (float)v43;
        *(float *)&unsigned int v46 = *(float *)&v45 / v38;
        LOWORD(v45) = v36[2];
        v11.f32[0] = (float)v45;
        v41.i32[3] = 0;
        v41.i64[0] = __PAIR64__(v46, v44);
        v41.f32[2] = v11.f32[0] / v40;
        float32x4_t v47 = vaddq_f32(a11, v41);
      }
      else
      {
        uint64_t v48 = (float32x4_t *)(a1[6].n128_u64[0] + v32);
        float32x4_t v47 = v48[-1];
        float32x4_t v42 = *v48;
      }
      float32x4_t v49 = vsubq_f32(vmulq_f32(vaddq_f32(v42, v47), v35), v30);
      v49.i32[3] = 0;
      a8 = vmulq_f32(v49, v49);
      float32x4_t v34 = vaddq_f32(v34, a8);
      v31 += 16;
      v32 += 64;
      --v33;
    }
    while (v33);
  }
  float32x4_t v50 = vmulq_n_f32(v34, 1.0 / (float)(v29 + -1.0));
  BOOL v51 = v50.f32[0] < v50.f32[1];
  if (v50.f32[0] < v50.f32[1]) {
    v50.f32[0] = v50.f32[1];
  }
  if (v50.f32[0] >= v50.f32[2]) {
    return v51;
  }
  else {
    return 2;
  }
}

uint64_t sub_1B6DCCD58(__n128 *a1, int a2, int a3, int a4, double a5, double a6, float32x4_t a7, double a8, float a9, float32x4_t a10, float a11)
{
  float32x4_t v57 = 0uLL;
  int v12 = a2;
  int v13 = a3 - a2;
  if (a3 > a2)
  {
    float32x4_t v15 = v57;
    uint64_t v16 = 16 * a2;
    uint64_t v17 = ((uint64_t)a2 << 6) | 0x10;
    v18.i64[0] = 0x3F0000003F000000;
    v18.i64[1] = 0x3F0000003F000000;
    uint64_t v19 = a3 - (uint64_t)a2;
    do
    {
      if (a1[4].n128_u8[8])
      {
        float v20 = (_WORD *)(a1[10].n128_u64[0] + v16);
        a7.i16[0] = v20[3];
        float v21 = a1[3].n128_f32[0];
        float v22 = a1[3].n128_f32[1];
        a10.i16[0] = v20[4];
        LOWORD(a11) = v20[5];
        *(float *)&unsigned int v23 = (float)LODWORD(a11);
        float v24 = a1[3].n128_f32[2];
        v25.i32[3] = 0;
        v25.f32[0] = (float)a7.u32[0] / v21;
        v25.f32[1] = (float)a10.u32[0] / v22;
        v25.f32[2] = *(float *)&v23 / v24;
        a10 = (float32x4_t)a1[1];
        float32x4_t v26 = vaddq_f32(a10, v25);
        LOWORD(v23) = *v20;
        *(float *)&unsigned int v27 = (float)v23;
        *(float *)&unsigned int v28 = *(float *)&v27 / v21;
        LOWORD(v27) = v20[1];
        *(float *)&unsigned int v29 = (float)v27;
        a9 = *(float *)&v29 / v22;
        LOWORD(v29) = v20[2];
        a11 = (float)v29;
        v25.i32[3] = 0;
        v25.i64[0] = __PAIR64__(LODWORD(a9), v28);
        v25.f32[2] = a11 / v24;
        float32x4_t v30 = vaddq_f32(a10, v25);
      }
      else
      {
        uint64_t v31 = (float32x4_t *)(a1[6].n128_u64[0] + v17);
        float32x4_t v30 = v31[-1];
        float32x4_t v26 = *v31;
      }
      a7 = vmulq_f32(vaddq_f32(v26, v30), v18);
      a7.i32[3] = 0;
      float32x4_t v15 = vaddq_f32(v15, a7);
      v16 += 16;
      v17 += 64;
      --v19;
    }
    while (v19);
    float32x4_t v32 = vmulq_n_f32(v15, 1.0 / (float)v13);
    float32x4_t v57 = v32;
    uint64_t v33 = a4;
    float v34 = v57.f32[a4];
    uint64_t v35 = 16 * a2;
    uint64_t v36 = ((uint64_t)a2 << 6) | 0x10;
    uint64_t v37 = a3 - (uint64_t)a2;
    v38.i64[0] = 0x3F0000003F000000;
    v38.i64[1] = 0x3F0000003F000000;
    int v39 = a2;
    int v12 = a2;
    do
    {
      if (a1[4].n128_u8[8])
      {
        float v40 = (_WORD *)(a1[10].n128_u64[0] + v35);
        v32.i16[0] = v40[3];
        float v41 = a1[3].n128_f32[0];
        float v42 = a1[3].n128_f32[1];
        v30.i16[0] = v40[4];
        LOWORD(a9) = v40[5];
        *(float *)&unsigned int v43 = (float)LODWORD(a9);
        float v44 = a1[3].n128_f32[2];
        v45.i32[3] = 0;
        v45.f32[0] = (float)v32.u32[0] / v41;
        v45.f32[1] = (float)v30.u32[0] / v42;
        v45.f32[2] = *(float *)&v43 / v44;
        float32x4_t v30 = (float32x4_t)a1[1];
        float32x4_t v46 = vaddq_f32(v30, v45);
        LOWORD(v43) = *v40;
        *(float *)&unsigned int v47 = (float)v43;
        *(float *)&unsigned int v48 = *(float *)&v47 / v41;
        LOWORD(v47) = v40[1];
        *(float *)&unsigned int v49 = (float)v47;
        *(float *)&unsigned int v50 = *(float *)&v49 / v42;
        LOWORD(v49) = v40[2];
        a9 = (float)v49;
        v45.i32[3] = 0;
        v45.i64[0] = __PAIR64__(v50, v48);
        v45.f32[2] = a9 / v44;
        float32x4_t v51 = vaddq_f32(v30, v45);
      }
      else
      {
        uint64_t v52 = (float32x4_t *)(a1[6].n128_u64[0] + v36);
        float32x4_t v51 = v52[-1];
        float32x4_t v46 = *v52;
      }
      float32x4_t v32 = vmulq_f32(vaddq_f32(v46, v51), v38);
      v32.i32[3] = 0;
      float32x4_t v56 = v32;
      v32.i32[0] = v56.i32[v33];
      if (v32.f32[0] > v34)
      {
        v32.i64[0] = sub_1B6DCD46C((uint64_t)a1, v39, v12).n128_u64[0];
        v38.i64[0] = 0x3F0000003F000000;
        v38.i64[1] = 0x3F0000003F000000;
        ++v12;
      }
      ++v39;
      v35 += 16;
      v36 += 64;
      --v37;
    }
    while (v37);
  }
  if (v12 >= ~(v13 / 3) + a3 || v12 <= v13 / 3 + a2) {
    return (a2 + (v13 >> 1));
  }
  else {
    return v12;
  }
}

float32x4_t sub_1B6DCCFFC(float32x4_t *a1, int a2, float32x4_t *a3)
{
  if (a1[4].i8[8])
  {
    int v3 = (_WORD *)(a1[12].i64[0] + 16 * a2);
    float32x4_t result = vmulq_f32(a1[3], vsubq_f32(*a3, a1[1]));
    _WORD *v3 = (int)result.f32[0] & 0xFFFE;
    v3[1] = (int)result.f32[1] & 0xFFFE;
    result.i32[0] = result.i32[2];
    void v3[2] = (int)result.f32[2] & 0xFFFE;
  }
  else
  {
    float32x4_t result = *a3;
    *(float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6)) = *a3;
  }
  return result;
}

float32x4_t sub_1B6DCD068(float32x4_t *a1, int a2, float32x4_t *a3)
{
  if (a1[4].i8[8])
  {
    int v3 = (_WORD *)(a1[12].i64[0] + 16 * a2);
    float32x4_t result = vmulq_f32(a1[3], vsubq_f32(*a3, a1[1]));
    v3[3] = (int)(float)(result.f32[0] + 1.0) | 1;
    v3[4] = (int)(float)(result.f32[1] + 1.0) | 1;
    result.f32[0] = result.f32[2] + 1.0;
    v3[5] = (int)(float)(result.f32[2] + 1.0) | 1;
  }
  else
  {
    float32x4_t result = *a3;
    *(float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6) + 16) = *a3;
  }
  return result;
}

float32x4_t sub_1B6DCD0E4(float32x4_t *a1, int a2, float32x4_t *a3, float32x4_t *a4)
{
  if (a1[4].i8[8])
  {
    uint64_t v4 = 0;
    float32x4_t v5 = a1[1];
    float32x4_t v6 = a1[3];
    float32x4_t v7 = vmulq_f32(v6, vsubq_f32(*a3, v5));
    v14[0] = (int)v7.f32[0] & 0xFFFE;
    v14[1] = (int)v7.f32[1] & 0xFFFE;
    _OWORD v14[2] = (int)v7.f32[2] & 0xFFFE;
    float32x4_t result = vmulq_f32(v6, vsubq_f32(*a4, v5));
    v13[0] = (int)(float)(result.f32[0] + 1.0) | 1;
    v13[1] = (int)(float)(result.f32[1] + 1.0) | 1;
    result.f32[0] = result.f32[2] + 1.0;
    v13[2] = (int)(float)(result.f32[2] + 1.0) | 1;
    uint64_t v9 = a1[12].i64[0] + 16 * a2;
    do
    {
      unsigned int v10 = (unsigned __int16)v14[v4];
      if (*(unsigned __int16 *)(v9 + v4 * 2) > v10) {
        *(_WORD *)(v9 + v4 * sub_1B6DC4968((unsigned int *)this + 2) = v10;
      }
      unsigned int v11 = (unsigned __int16)v13[v4];
      if (*(unsigned __int16 *)(v9 + v4 * 2 + 6) < v11) {
        *(_WORD *)(v9 + v4 * 2 + 6) = v11;
      }
      ++v4;
    }
    while (v4 != 3);
  }
  else
  {
    *(float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6)) = vminq_f32(*(float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6)), *a3);
    int v12 = (float32x4_t *)(a1[8].i64[0] + ((uint64_t)a2 << 6));
    float32x4_t result = vmaxq_f32(v12[1], *a4);
    v12[1] = result;
  }
  return result;
}

void sub_1B6DCD204(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = v5 + 16 * a2;
  int v7 = *(_DWORD *)(v6 + 12);
  if (v7 < 0) {
    unsigned int v8 = -v7;
  }
  else {
    unsigned int v8 = 1;
  }
  uint64_t v9 = v5 + 16 * a3;
  int v10 = *(_DWORD *)(v9 + 12);
  if (v10 < 0) {
    int v11 = -v10;
  }
  else {
    int v11 = 1;
  }
  if (v8 <= 0x80)
  {
    uint64_t v13 = a2;
    int v14 = *(_DWORD *)(a1 + 220);
    uint64_t v15 = v14;
    if (v14 == *(_DWORD *)(a1 + 224))
    {
      int v16 = 2 * v14;
      if (!v14) {
        int v16 = 1;
      }
      if (v14 < v16)
      {
        int v38 = v16;
        uint64_t v39 = a2;
        if (v16)
        {
          uint64_t v17 = sub_1B6E073B8(32 * v16, 16);
          int v14 = *(_DWORD *)(a1 + 220);
        }
        else
        {
          uint64_t v17 = 0;
        }
        if (v14 >= 1)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 32 * v14;
          do
          {
            float v20 = (_OWORD *)(v17 + v18);
            float v21 = (_OWORD *)(*(void *)(a1 + 232) + v18);
            long long v22 = v21[1];
            *float v20 = *v21;
            v20[1] = v22;
            v18 += 32;
          }
          while (v19 != v18);
        }
        uint64_t v23 = *(void *)(a1 + 232);
        if (v23 && *(unsigned char *)(a1 + 240)) {
          sub_1B6E073C4(v23);
        }
        *(unsigned char *)(a1 + 240) = 1;
        *(void *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = v17;
        uint64_t v13 = v39;
        *(_DWORD *)(a1 + 224) = v38;
        int v14 = *(_DWORD *)(a1 + 220);
      }
    }
    *(_DWORD *)(a1 + 220) = v14 + 1;
    uint64_t v24 = *(void *)(a1 + 232) + 32 * v15;
    *(_WORD *)uint64_t v24 = *(_WORD *)v6;
    *(_WORD *)(v24 + sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v6 + 2);
    *(_WORD *)(v24 + 4) = *(_WORD *)(v6 + 4);
    float32x4_t v25 = (_WORD *)(v5 + 16 * v13);
    *(_WORD *)(v24 + 6) = v25[3];
    *(_WORD *)(v24 + 8) = v25[4];
    *(_WORD *)(v24 + 10) = v25[5];
    *(_DWORD *)(v24 + 1sub_1B6DC4968((unsigned int *)this + 2) = a2;
    *(_DWORD *)(v24 + 16) = v8;
  }
  if (v11 <= 128)
  {
    int v26 = *(_DWORD *)(a1 + 220);
    uint64_t v27 = v26;
    if (v26 == *(_DWORD *)(a1 + 224))
    {
      int v28 = v26 ? 2 * v26 : 1;
      if (v26 < v28)
      {
        if (v28)
        {
          uint64_t v29 = sub_1B6E073B8(32 * v28, 16);
          int v26 = *(_DWORD *)(a1 + 220);
        }
        else
        {
          uint64_t v29 = 0;
        }
        if (v26 >= 1)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 32 * v26;
          do
          {
            float32x4_t v32 = (_OWORD *)(v29 + v30);
            uint64_t v33 = (_OWORD *)(*(void *)(a1 + 232) + v30);
            long long v34 = v33[1];
            _OWORD *v32 = *v33;
            v32[1] = v34;
            v30 += 32;
          }
          while (v31 != v30);
        }
        uint64_t v35 = *(void *)(a1 + 232);
        if (v35 && *(unsigned char *)(a1 + 240)) {
          sub_1B6E073C4(v35);
        }
        *(unsigned char *)(a1 + 240) = 1;
        *(void *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = v29;
        *(_DWORD *)(a1 + 224) = v28;
        int v26 = *(_DWORD *)(a1 + 220);
      }
    }
    *(_DWORD *)(a1 + 220) = v26 + 1;
    uint64_t v36 = *(void *)(a1 + 232) + 32 * v27;
    *(_WORD *)uint64_t v36 = *(_WORD *)v9;
    *(_WORD *)(v36 + sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v9 + 2);
    *(_WORD *)(v36 + 4) = *(_WORD *)(v9 + 4);
    uint64_t v37 = (_WORD *)(v5 + 16 * a3);
    *(_WORD *)(v36 + 6) = v37[3];
    *(_WORD *)(v36 + 8) = v37[4];
    *(_WORD *)(v36 + 10) = v37[5];
    *(_DWORD *)(v36 + 1sub_1B6DC4968((unsigned int *)this + 2) = a3;
    *(_DWORD *)(v36 + 16) = v11;
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 220);
}

__n128 sub_1B6DCD46C(uint64_t a1, int a2, int a3)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 160);
    __n128 result = *(__n128 *)(v3 + 16 * a2);
    *(_OWORD *)(v3 + 16 * asub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v3 + 16 * a3);
    *(__n128 *)(*(void *)(a1 + 160) + 16 * a3) = result;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v6 = (__n128 *)(v5 + ((uint64_t)a2 << 6));
    __n128 v7 = *v6;
    __n128 v8 = v6[1];
    __n128 v13 = v6[2];
    __n128 v14 = v6[3];
    uint64_t v9 = (__n128 *)(v5 + ((uint64_t)a3 << 6));
    __n128 v10 = v9[1];
    *uint64_t v6 = *v9;
    v6[1] = v10;
    __n128 v11 = v9[3];
    long long v6[2] = v9[2];
    v6[3] = v11;
    int v12 = (__n128 *)(*(void *)(a1 + 96) + ((uint64_t)a3 << 6));
    *int v12 = v7;
    v12[1] = v8;
    __n128 result = v13;
    uint64_t v12[2] = v13;
    v12[3] = v14;
  }
  return result;
}

uint64_t sub_1B6DCD51C(uint64_t result, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  if (*(unsigned char *)(result + 72))
  {
    float32x4_t v4 = *(float32x4_t *)(result + 16);
    float32x4_t v5 = *(float32x4_t *)(result + 32);
    float32x4_t v6 = *(float32x4_t *)(result + 48);
    float32x4_t v7 = vmulq_f32(v6, vsubq_f32(vminq_f32(vmaxq_f32(*a3, v4), v5), v4));
    v11[0] = (int)v7.f32[0] & 0xFFFE;
    v11[1] = (int)v7.f32[1] & 0xFFFE;
    v11[2] = (int)v7.f32[2] & 0xFFFE;
    float32x4_t v8 = vmulq_f32(v6, vsubq_f32(vminq_f32(vmaxq_f32(*a4, v4), v5), v4));
    v10[0] = (int)(float)(v8.f32[0] + 1.0) | 1;
    v10[1] = (int)(float)(v8.f32[1] + 1.0) | 1;
    uint64_t v10[2] = (int)(float)(v8.f32[2] + 1.0) | 1;
    int v9 = *(_DWORD *)(result + 208);
    switch(v9)
    {
      case 2:
        return sub_1B6DCD864(result, *(unsigned __int16 **)(result + 192), a2, v11, v10);
      case 1:
        return sub_1B6DCD790(result, a2, v11, v10);
      case 0:
        return sub_1B6DCD658(result, a2, v11, v10, 0, *(_DWORD *)(result + 68));
    }
  }
  else
  {
    return sub_1B6DCD994(result, a2, a3->f32, a4->f32);
  }
  return result;
}

uint64_t sub_1B6DCD658(uint64_t result, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int a5, int a6)
{
  if (a5 < a6)
  {
    int v7 = a5;
    int v11 = 0;
    int v12 = (unsigned __int16 *)(*(void *)(result + 192) + 16 * a5);
    while (1)
    {
      int v18 = *a3 <= v12[3]
         && *a4 >= *v12
         && a3[2] <= v12[5]
         && a4[2] >= v12[2]
         && a3[1] <= v12[4]
         && a4[1] >= v12[1];
      int v19 = *((_DWORD *)v12 + 3);
      if (v19 < 0 || !v18)
      {
        if (((v19 < 0) & ~v18) != 0)
        {
          v12 += 8 * -v19;
          v7 -= v19;
          goto LABEL_27;
        }
      }
      else
      {
        __n128 result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, v19 >> 21, v19 & 0x1FFFFF);
      }
      v12 += 8;
      ++v7;
LABEL_27:
      ++v11;
      if (v7 >= a6) {
        goto LABEL_30;
      }
    }
  }
  int v11 = 0;
LABEL_30:
  if (dword_1E9E49928 < v11) {
    dword_1E9E49928 = v11;
  }
  return result;
}

uint64_t sub_1B6DCD790(uint64_t result, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  int v4 = *(_DWORD *)(result + 220);
  if (v4 >= 1)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    for (uint64_t i = 0; i < v4; ++i)
    {
      int v11 = (unsigned __int16 *)(*(void *)(v8 + 232) + v9);
      __n128 result = a3[1];
      if (*a3 <= v11[3]
        && *a4 >= *v11
        && a3[2] <= v11[5]
        && a4[2] >= v11[2]
        && result <= v11[4]
        && a4[1] >= v11[1])
      {
        __n128 result = sub_1B6DCD658(v8, a2, a3, a4, *((_DWORD *)v11 + 3), *((_DWORD *)v11 + 4) + *((_DWORD *)v11 + 3));
        int v4 = *(_DWORD *)(v8 + 220);
      }
      v9 += 32;
    }
  }
  return result;
}

uint64_t sub_1B6DCD864(uint64_t result, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v9 = result;
  while (*a4 <= a2[3]
       && *a5 >= *a2
       && a4[2] <= a2[5]
       && a5[2] >= a2[2]
       && a4[1] <= a2[4]
       && a5[1] >= a2[1])
  {
    unsigned int v10 = *((_DWORD *)a2 + 3);
    if ((v10 & 0x80000000) == 0)
    {
      int v12 = *(uint64_t (**)(uint64_t, void, void))(*(void *)a3 + 16);
      return v12(a3, v10 >> 21, v10 & 0x1FFFFF);
    }
    __n128 result = sub_1B6DCD864(v9, a2 + 8, a3, a4, a5);
    int v11 = *((_DWORD *)a2 + 7);
    if (v11 >= 0) {
      a2 += 16;
    }
    else {
      a2 += 8 * -v11 + 8;
    }
  }
  return result;
}

uint64_t sub_1B6DCD994(uint64_t result, uint64_t a2, float *a3, float *a4)
{
  if (*(int *)(result + 68) >= 1)
  {
    uint64_t v7 = result;
    int v8 = 0;
    int v9 = 0;
    uint64_t v10 = *(void *)(result + 128);
    while (1)
    {
      BOOL v11 = *a3 <= *(float *)(v10 + 16) && *a4 >= *(float *)v10;
      if (a3[2] <= *(float *)(v10 + 24))
      {
        if (a4[2] < *(float *)(v10 + 8)) {
          BOOL v11 = 0;
        }
      }
      else
      {
        BOOL v11 = 0;
      }
      if (a3[1] <= *(float *)(v10 + 20) && a4[1] >= *(float *)(v10 + 4))
      {
        int v14 = *(_DWORD *)(v10 + 32);
        BOOL v15 = v14 == -1;
        BOOL v12 = v14 == -1;
        if (v15 && v11)
        {
          __n128 result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(unsigned int *)(v10 + 36), *(unsigned int *)(v10 + 40));
LABEL_21:
          v10 += 64;
          ++v9;
          goto LABEL_22;
        }
      }
      else
      {
        BOOL v11 = 0;
        BOOL v12 = *(_DWORD *)(v10 + 32) == -1;
      }
      if (v12 || v11) {
        goto LABEL_21;
      }
      uint64_t v13 = *(int *)(v10 + 32);
      v10 += v13 << 6;
      v9 += v13;
LABEL_22:
      ++v8;
      if (v9 >= *(_DWORD *)(v7 + 68)) {
        goto LABEL_25;
      }
    }
  }
  int v8 = 0;
LABEL_25:
  if (dword_1E9E49928 < v8) {
    dword_1E9E49928 = v8;
  }
  return result;
}

uint64_t sub_1B6DCDB04(uint64_t result, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  float32x4_t v13 = *a3;
  float32x4_t v14 = *a4;
  float32x4_t v15 = vsubq_f32(*a4, *a3);
  v15.i32[3] = 0;
  int8x16_t v16 = (int8x16_t)vmulq_f32(v15, v15);
  float32x4_t v17 = vmulq_n_f32(v15, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0]));
  if (v17.f32[1] == 0.0) {
    float v18 = 1.0e18;
  }
  else {
    float v18 = 1.0 / v17.f32[1];
  }
  if (v17.f32[2] == 0.0) {
    float v19 = 1.0e18;
  }
  else {
    float v19 = 1.0 / v17.f32[2];
  }
  if (v17.f32[0] == 0.0) {
    float v20 = 1.0e18;
  }
  else {
    float v20 = 1.0 / v17.f32[0];
  }
  if (*(int *)(result + 68) >= 1)
  {
    uint64_t v25 = result;
    int v26 = 0;
    int v27 = 0;
    int v28 = (float *)&v64[v18 >= 0.0] + 1;
    uint64_t v29 = *(float32x4_t **)(result + 128);
    int8x16_t v30 = (int8x16_t)vmulq_f32(v17, v15);
    a13.n128_u64[0] = (unint64_t)vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
    float32x4_t v31 = vaddq_f32(vmaxq_f32(v13, v14), *a6);
    float32x4_t v32 = vaddq_f32(vminq_f32(v13, v14), *a5);
    float v33 = v32.f32[2];
    float v34 = v31.f32[2];
    float v35 = v32.f32[1];
    float v36 = v31.f32[1];
    uint64_t v37 = (float *)&v64[v19 < 0.0] + 2;
    int v38 = (float *)&v64[v19 >= 0.0] + 2;
    while (1)
    {
      float32x4_t v39 = vsubq_f32(v29[1], *a5);
      v64[0] = vsubq_f32(*v29, *a6);
      v64[1] = v39;
      BOOL v40 = v32.f32[0] <= v29[1].f32[0] && v31.f32[0] >= v29->f32[0];
      if (v33 <= v29[1].f32[2])
      {
        if (v34 < v29->f32[2]) {
          BOOL v40 = 0;
        }
      }
      else
      {
        BOOL v40 = 0;
      }
      if (v35 > v29[1].f32[1]) {
        goto LABEL_36;
      }
      char v41 = !v40;
      if (v36 < v29->f32[1]) {
        char v41 = 1;
      }
      if (v41) {
        goto LABEL_36;
      }
      float v42 = a3->f32[1];
      float v43 = v20 * (float)(*(float *)&v64[v20 < 0.0] - a3->f32[0]);
      float v44 = v20 * (float)(*(float *)&v64[v20 >= 0.0] - a3->f32[0]);
      float v45 = v18 * (float)(*((float *)&v64[v18 < 0.0] + 1) - v42);
      float v46 = v18 * (float)(*v28 - v42);
      if (v43 > v46 || v45 > v44) {
        goto LABEL_36;
      }
      if (v45 > v43) {
        float v43 = v45;
      }
      if (v46 < v44) {
        float v44 = v46;
      }
      float v48 = a3->f32[2];
      float v49 = v19 * (float)(*v37 - v48);
      float v50 = v19 * (float)(*v38 - v48);
      if (v43 <= v50 && v49 <= v44)
      {
        if (v49 > v43) {
          float v43 = v49;
        }
        if (v50 < v44) {
          float v44 = v50;
        }
        BOOL v52 = v43 < a13.n128_f32[0];
        if (v44 <= 0.0) {
          BOOL v52 = 0;
        }
        __int32 v55 = v29[2].i32[0];
        BOOL v56 = v55 == -1;
        BOOL v53 = v55 == -1;
        if (v56 && v52)
        {
          uint64_t v58 = v37;
          uint64_t v59 = a2;
          uint64_t v61 = v28;
          float32x4_t v62 = v31;
          __n128 v63 = a13;
          float32x4_t v60 = v32;
          float32x4_t v57 = v38;
          __n128 result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, v29[2].u32[1], v29[2].u32[2]);
          int v38 = v57;
          uint64_t v37 = v58;
          float32x4_t v32 = v60;
          float32x4_t v31 = v62;
          a13 = v63;
          int v28 = v61;
          a2 = v59;
LABEL_50:
          v29 += 4;
          ++v27;
          goto LABEL_51;
        }
      }
      else
      {
LABEL_36:
        BOOL v52 = 0;
        BOOL v53 = v29[2].i32[0] == -1;
      }
      if (v53 || v52) {
        goto LABEL_50;
      }
      uint64_t v54 = v29[2].i32[0];
      v29 += 4 * v54;
      v27 += v54;
LABEL_51:
      ++v26;
      if (v27 >= *(_DWORD *)(v25 + 68)) {
        goto LABEL_54;
      }
    }
  }
  int v26 = 0;
LABEL_54:
  if (dword_1E9E49928 < v26) {
    dword_1E9E49928 = v26;
  }
  return result;
}

float32x4_t *sub_1B6DCDE80(float32x4_t *result, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, int a7, uint64_t a8)
{
  int v8 = a7;
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  float32x4_t v9 = *a4;
  float32x4_t v10 = *a3;
  float32x4_t v11 = vsubq_f32(*a4, *a3);
  v11.i32[3] = 0;
  int8x16_t v12 = (int8x16_t)vmulq_f32(v11, v11);
  float32x4_t v13 = vmulq_n_f32(v11, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]));
  if (v13.f32[2] == 0.0) {
    float v14 = 1.0e18;
  }
  else {
    float v14 = 1.0 / v13.f32[2];
  }
  if (a7 < (int)a8)
  {
    float32x4_t v15 = (float *)a3;
    float32x4_t v17 = result;
    int v18 = 0;
    int8x16_t v19 = (int8x16_t)vmulq_f32(v13, v11);
    LODWORD(v20) = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).u32[0];
    float32x4_t v21 = vminq_f32(v10, v9);
    float32x4_t v22 = vmaxq_f32(v10, v9);
    float32x4_t v23 = result[1];
    float32x4_t v24 = result[2];
    float32x4_t v25 = result[3];
    float32x4_t v26 = vmulq_f32(v25, vsubq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v21, *a5), v23), v24), v23));
    unsigned int v27 = (int)v26.f32[0] & 0xFFFE;
    unsigned int v28 = (int)v26.f32[1] & 0xFFFE;
    __n128 result = (float32x4_t *)((int)v26.f32[2] & 0xFFFE);
    _Q2 = vmulq_f32(v25, vsubq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v22, *a6), v23), v24), v23));
    unsigned int v30 = (int)(float)(_Q2.f32[0] + 1.0) | 1;
    unsigned int v31 = (int)(float)(_Q2.f32[1] + 1.0) | 1;
    uint64_t v32 = (int)(float)(_Q2.f32[2] + 1.0) | 1u;
    __asm { FMOV            V2.2S, #1.0 }
    float32x2_t v36 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v13.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v13.f32));
    int32x2_t v37 = vcltz_f32(v36);
    int v38 = (unsigned __int16 *)(v17[12].i64[0] + 16 * v8);
    float32x4_t v39 = &v95[v37.i8[0] & 1];
    BOOL v40 = &v95[(v37.i8[0] & 1) == 0];
    char v41 = &v95[v37.i8[4] & 1].f32[1];
    float v42 = &v95[(v37.i8[4] & 1) == 0].f32[1];
    float v43 = &v95[v14 < 0.0].f32[2];
    float v44 = &v95[v14 >= 0.0].f32[2];
    float v45 = v36.f32[1];
    float v94 = v20;
    unsigned int v92 = v28;
    unsigned int v93 = v27;
    unsigned int v90 = v31;
    unsigned int v91 = v30;
    unsigned int v89 = (int)v26.f32[2] & 0xFFFE;
    __int32 v88 = v36.i32[0];
    id v86 = v40;
    unint64_t v87 = v39;
    uint64_t v84 = v42;
    uint64_t v85 = v41;
    while (1)
    {
      unsigned int v46 = *v38;
      unsigned int v47 = v38[2];
      unsigned int v48 = v38[1];
      int v49 = *((_DWORD *)v38 + 3);
      if (v27 > v38[3]
        || v30 < v46
        || result > v38[5]
        || v32 < v47
        || v28 > v38[4]
        || v31 < v48)
      {
        goto LABEL_22;
      }
      float v57 = v17[3].f32[0];
      float v58 = v17[3].f32[1];
      float v59 = v17[3].f32[2];
      *(float *)&unsigned int v60 = (float)v47 / v59;
      v61.i32[3] = 0;
      v61.f32[0] = (float)v46 / v57;
      v61.f32[1] = (float)v48 / v58;
      v61.f32[2] = *(float *)&v60;
      float32x4_t v62 = v17[1];
      v95[0] = vaddq_f32(v62, v61);
      LOWORD(v60) = v38[3];
      *(float *)&unsigned int v63 = (float)v60;
      *(float *)&unsigned int v64 = *(float *)&v63 / v57;
      LOWORD(v63) = v38[4];
      *(float *)&unsigned int v65 = (float)v63;
      *(float *)&unsigned int v66 = *(float *)&v65 / v58;
      LOWORD(v65) = v38[5];
      *(float *)&unsigned int v67 = (float)v65 / v59;
      v68.i64[0] = __PAIR64__(v66, v64);
      v68.i64[1] = v67;
      float32x4_t v69 = vsubq_f32(vaddq_f32(v62, v68), *a5);
      v95[0] = vsubq_f32(v95[0], *a6);
      v95[1] = v69;
      float v70 = v15[1];
      float v71 = v36.f32[0] * (float)(v39->f32[0] - *v15);
      float v72 = v45 * (float)(*v42 - v70);
      if (v71 > v72) {
        goto LABEL_22;
      }
      float v73 = v36.f32[0] * (float)(v40->f32[0] - *v15);
      float v74 = v45 * (float)(*v41 - v70);
      if (v74 > v73) {
        goto LABEL_22;
      }
      if (v74 > v71) {
        float v71 = v74;
      }
      if (v72 >= v73) {
        float v72 = v36.f32[0] * (float)(v40->f32[0] - *v15);
      }
      float v75 = v15[2];
      float v76 = v14 * (float)(*v44 - v75);
      if (v71 <= v76 && (float v77 = v14 * (float)(*v43 - v75), v77 <= v72))
      {
        if (v77 > v71) {
          float v71 = v77;
        }
        if (v76 < v72) {
          float v72 = v76;
        }
        BOOL v55 = v71 < v20;
        if (v72 <= 0.0) {
          BOOL v55 = 0;
        }
        if ((v49 & 0x80000000) == 0 && v55)
        {
          uint64_t v78 = a8;
          uint64_t v79 = a6;
          uint64_t v80 = a5;
          uint64_t v81 = a2;
          uint64_t v82 = v32;
          uint64_t v83 = v15;
          (*(void (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, (*((int *)v38 + 3) >> 21), *((_DWORD *)v38 + 3) & 0x1FFFFF);
          v36.i32[0] = v88;
          float32x4_t v15 = v83;
          uint64_t v32 = v82;
          unsigned int v31 = v90;
          unsigned int v30 = v91;
          __n128 result = (float32x4_t *)v89;
          unsigned int v28 = v92;
          unsigned int v27 = v93;
          float v20 = v94;
          a2 = v81;
          float v42 = v84;
          char v41 = v85;
          a5 = v80;
          BOOL v40 = v86;
          float32x4_t v39 = v87;
          a6 = v79;
          a8 = v78;
          float v44 = &v95[v14 >= 0.0].f32[2];
          float v43 = &v95[v14 < 0.0].f32[2];
LABEL_43:
          v38 += 8;
          ++v8;
          goto LABEL_44;
        }
      }
      else
      {
LABEL_22:
        BOOL v55 = 0;
      }
      if (v55 || (v49 & 0x80000000) == 0) {
        goto LABEL_43;
      }
      int v56 = *((_DWORD *)v38 + 3);
      v38 -= 8 * v56;
      v8 -= v56;
LABEL_44:
      ++v18;
      if (v8 >= (int)a8) {
        goto LABEL_47;
      }
    }
  }
  int v18 = 0;
LABEL_47:
  if (dword_1E9E49928 < v18) {
    dword_1E9E49928 = v18;
  }
  return result;
}

float32x4_t *sub_1B6DCE2D4(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  float32x4_t v13 = 0uLL;
  float32x4_t v12 = 0uLL;
  return sub_1B6DCE304(a1, a2, a3, a4, &v13, &v12, a5, a6, a7, a8, a9, a10, a11);
}

float32x4_t *sub_1B6DCE304(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  if (a1[4].i8[8]) {
    return sub_1B6DCDE80(a1, a2, a3, a4, a5, a6, 0, a1[4].u32[1]);
  }
  else {
    return (float32x4_t *)sub_1B6DCDB04((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
}

uint64_t sub_1B6DCE31C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 220);
  sub_1B6DCC688(a2);
  unsigned int v7 = *(_DWORD *)(a1 + 68);
  if (a4)
  {
    uint64_t v8 = 0;
    *(_DWORD *)(a2 + 68) = bswap32(v7);
    uint64_t v9 = a1 + 19;
    do
    {
      float32x4_t v10 = (unsigned char *)(a2 + 19 + v8);
      *(v10 - 3) = *(unsigned char *)(v9 + v8);
      *(v10 - sub_1B6DC4968((unsigned int *)this + 2) = *(unsigned char *)(v9 + v8 - 1);
      *(v10 - 1) = *(unsigned char *)(v9 + v8 - 2);
      *float32x4_t v10 = *(unsigned char *)(v9 + v8 - 3);
      v8 += 4;
    }
    while (v8 != 16);
    uint64_t v11 = 0;
    uint64_t v12 = a1 + 35;
    do
    {
      float32x4_t v13 = (unsigned char *)(a2 + 35 + v11);
      *(v13 - 3) = *(unsigned char *)(v12 + v11);
      *(v13 - sub_1B6DC4968((unsigned int *)this + 2) = *(unsigned char *)(v12 + v11 - 1);
      *(v13 - 1) = *(unsigned char *)(v12 + v11 - 2);
      *float32x4_t v13 = *(unsigned char *)(v12 + v11 - 3);
      v11 += 4;
    }
    while (v11 != 16);
    uint64_t v14 = 0;
    uint64_t v15 = a1 + 51;
    do
    {
      int8x16_t v16 = (unsigned char *)(a2 + 51 + v14);
      *(v16 - 3) = *(unsigned char *)(v15 + v14);
      *(v16 - sub_1B6DC4968((unsigned int *)this + 2) = *(unsigned char *)(v15 + v14 - 1);
      *(v16 - 1) = *(unsigned char *)(v15 + v14 - 2);
      *int8x16_t v16 = *(unsigned char *)(v15 + v14 - 3);
      v14 += 4;
    }
    while (v14 != 16);
    *(_DWORD *)(a2 + 208) = bswap32(*(_DWORD *)(a1 + 208));
    unsigned int v17 = bswap32(*(_DWORD *)(a1 + 248));
  }
  else
  {
    *(_DWORD *)(a2 + 68) = v7;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a2 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
    *(_DWORD *)(a2 + 208) = *(_DWORD *)(a1 + 208);
    unsigned int v17 = *(_DWORD *)(a1 + 248);
  }
  *(_DWORD *)(a2 + 248) = v17;
  *(unsigned char *)(a2 + 7sub_1B6DC4968((unsigned int *)this + 2) = *(unsigned char *)(a1 + 72);
  uint64_t v18 = a2 + 256;
  uint64_t v19 = *(unsigned int *)(a1 + 68);
  uint64_t v20 = (int)v19;
  if (*(unsigned char *)(a1 + 72))
  {
    float32x4_t v22 = (uint64_t *)(a2 + 192);
    uint64_t v21 = *(void *)(a2 + 192);
    if (v21 && *(unsigned char *)(a2 + 200)) {
      sub_1B6E073C4(v21);
    }
    float32x4_t v23 = (_DWORD *)(a2 + 180);
    float32x4_t v24 = (unsigned char *)(a2 + 200);
    float32x4_t v25 = (_DWORD *)(a2 + 184);
    *(void *)(a2 + 19sub_1B6DC4968((unsigned int *)this + 2) = v18;
    if (a4)
    {
      if ((int)v19 >= 1)
      {
        float32x4_t v26 = (_DWORD *)(a2 + 268);
        unsigned int v27 = (unsigned __int16 *)(*(void *)(a1 + 192) + 6);
        do
        {
          *((_WORD *)v26 - 6) = bswap32(*(v27 - 3)) >> 16;
          *((_WORD *)v26 - 5) = bswap32(*(v27 - 2)) >> 16;
          *((_WORD *)v26 - 4) = bswap32(*(v27 - 1)) >> 16;
          *((_WORD *)v26 - 3) = bswap32(*v27) >> 16;
          *((_WORD *)v26 - sub_1B6DC4968((unsigned int *)this + 2) = bswap32(v27[1]) >> 16;
          *((_WORD *)v26 - 1) = bswap32(v27[2]) >> 16;
          *float32x4_t v26 = bswap32(*(_DWORD *)(v27 + 3));
          v26 += 4;
          v27 += 8;
          --v19;
        }
        while (v19);
      }
    }
    else if ((int)v19 >= 1)
    {
      float v43 = (_DWORD *)(a2 + 268);
      uint64_t v44 = *(void *)(a1 + 192) + 6;
      do
      {
        *((_WORD *)v43 - 6) = *(_WORD *)(v44 - 6);
        *((_WORD *)v43 - 5) = *(_WORD *)(v44 - 4);
        *((_WORD *)v43 - 4) = *(_WORD *)(v44 - 2);
        *((_WORD *)v43 - 3) = *(_WORD *)v44;
        *((_WORD *)v43 - sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v44 + 2);
        *((_WORD *)v43 - 1) = *(_WORD *)(v44 + 4);
        *float v43 = *(_DWORD *)(v44 + 6);
        v43 += 4;
        v44 += 16;
        --v19;
      }
      while (v19);
    }
    uint64_t v45 = 16 * v20;
    goto LABEL_42;
  }
  float32x4_t v22 = (uint64_t *)(a2 + 128);
  uint64_t v28 = *(void *)(a2 + 128);
  if (v28 && *(unsigned char *)(a2 + 136)) {
    sub_1B6E073C4(v28);
  }
  *(_DWORD *)(a2 + 120) = v19;
  float32x4_t v25 = (_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 116) = v19;
  float32x4_t v23 = (_DWORD *)(a2 + 116);
  *(unsigned char *)(a2 + 136) = 0;
  float32x4_t v24 = (unsigned char *)(a2 + 136);
  *(void *)(a2 + sub_1B6DC7B98((uint64_t)this + 128) = v18;
  if ((a4 & 1) == 0)
  {
    if ((int)v19 >= 1)
    {
      uint64_t v46 = 0;
      uint64_t v47 = *(void *)(a1 + 128);
      uint64_t v33 = a2 + 256;
      do
      {
        *(_OWORD *)(v33 + v46) = *(_OWORD *)(v47 + v46);
        *(_OWORD *)(*v22 + v46 + 16) = *(_OWORD *)(*(void *)(a1 + 128) + v46 + 16);
        uint64_t v47 = *(void *)(a1 + 128);
        uint64_t v33 = *v22;
        uint64_t v48 = *v22 + v46;
        *(void *)(v48 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(v47 + v46 + 32);
        *(_DWORD *)(v48 + 40) = *(_DWORD *)(v47 + v46 + 40);
        v46 += 64;
      }
      while (v19 << 6 != v46);
      goto LABEL_40;
    }
LABEL_39:
    uint64_t v33 = a2 + 256;
    goto LABEL_40;
  }
  if ((int)v19 < 1) {
    goto LABEL_39;
  }
  uint64_t v29 = 0;
  uint64_t v30 = *(void *)(a1 + 128);
  uint64_t v31 = 3;
  uint64_t v32 = 19;
  uint64_t v33 = a2 + 256;
  do
  {
    uint64_t v34 = 0;
    uint64_t v35 = v30 + v31;
    do
    {
      float32x2_t v36 = (unsigned char *)(v33 + v31 + v34);
      *(v36 - 3) = *(unsigned char *)(v35 + v34);
      *(v36 - sub_1B6DC4968((unsigned int *)this + 2) = *(unsigned char *)(v35 + v34 - 1);
      *(v36 - 1) = *(unsigned char *)(v35 + v34 - 2);
      *float32x2_t v36 = *(unsigned char *)(v35 + v34 - 3);
      v34 += 4;
    }
    while (v34 != 16);
    uint64_t v37 = 0;
    uint64_t v38 = *v22 + v32;
    uint64_t v39 = *(void *)(a1 + 128) + v32;
    do
    {
      BOOL v40 = (unsigned char *)(v38 + v37);
      *(v40 - 3) = *(unsigned char *)(v39 + v37);
      *(v40 - sub_1B6DC4968((unsigned int *)this + 2) = *(unsigned char *)(v39 + v37 - 1);
      *(v40 - 1) = *(unsigned char *)(v39 + v37 - 2);
      *BOOL v40 = *(unsigned char *)(v39 + v37 - 3);
      v37 += 4;
    }
    while (v37 != 16);
    uint64_t v30 = *(void *)(a1 + 128);
    char v41 = (int8x8_t *)(v30 + (v29 << 6));
    uint64_t v33 = *v22;
    float v42 = (int8x8_t *)(*v22 + (v29 << 6));
    v42[4] = vrev32_s8(v41[4]);
    v42[5].i32[0] = bswap32(v41[5].u32[0]);
    ++v29;
    v31 += 64;
    v32 += 64;
  }
  while (v29 != v19);
LABEL_40:
  uint64_t v45 = (uint64_t)(int)v19 << 6;
  if (*v24) {
    sub_1B6E073C4(v33);
  }
LABEL_42:
  *float32x4_t v24 = 0;
  *float32x4_t v22 = 0;
  *float32x4_t v23 = 0;
  *float32x4_t v25 = 0;
  uint64_t v49 = v18 + v45;
  uint64_t v50 = *(void *)(a2 + 232);
  if (v50 && *(unsigned char *)(a2 + 240)) {
    sub_1B6E073C4(v50);
  }
  *(void *)(a2 + 23sub_1B6DC4968((unsigned int *)this + 2) = v49;
  uint64_t v51 = *(unsigned int *)(a1 + 248);
  if (a4)
  {
    if ((int)v51 >= 1)
    {
      BOOL v52 = (int8x8_t *)(v45 + a2 + 268);
      BOOL v53 = (unsigned __int16 *)(*(void *)(a1 + 232) + 6);
      do
      {
        v52[-2].i16[2] = bswap32(*(v53 - 3)) >> 16;
        v52[-2].i16[3] = bswap32(*(v53 - 2)) >> 16;
        v52[-1].i16[0] = bswap32(*(v53 - 1)) >> 16;
        v52[-1].i16[1] = bswap32(*v53) >> 16;
        v52[-1].i16[2] = bswap32(v53[1]) >> 16;
        v52[-1].i16[3] = bswap32(v53[2]) >> 16;
        *BOOL v52 = vrev32_s8(*(int8x8_t *)(v53 + 3));
        v52 += 4;
        v53 += 16;
        --v51;
      }
      while (v51);
    }
  }
  else if ((int)v51 >= 1)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = *(void *)(a1 + 232);
    uint64_t v57 = a2 + v45;
    do
    {
      uint64_t v58 = v57 + v54;
      *(_WORD *)(v58 + 256) = *(_WORD *)(v56 + v54);
      *(_WORD *)(v58 + 258) = *(_WORD *)(v56 + v54 + 2);
      *(_WORD *)(v58 + 260) = *(_WORD *)(v56 + v54 + 4);
      *(_WORD *)(v58 + 26sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v56 + v54 + 6);
      *(_WORD *)(v58 + 264) = *(_WORD *)(v56 + v54 + 8);
      *(_WORD *)(v58 + 266) = *(_WORD *)(v56 + v54 + 10);
      *(void *)(v57 + v54 + 268) = *(void *)(v56 + v54 + 12);
      *(_DWORD *)(v58 + 276) = 0;
      *(void *)(v58 + 280) = 0;
      ++v55;
      v54 += 32;
    }
    while (v55 < *(int *)(a1 + 248));
  }
  *(unsigned char *)(a2 + 240) = 0;
  *(void *)(a2 + 23sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)(a2 + 220) = 0;
  *(_DWORD *)(a2 + 224) = 0;
  *(void *)a2 = 0;
  return 1;
}

double sub_1B6DCE8A4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a1 + 32 + i) = *(_DWORD *)(a2 + 16 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a1 + 16 + j) = *(_DWORD *)(a2 + j);
  for (uint64_t k = 0; k != 16; k += 4)
  {
    LODWORD(v7) = *(_DWORD *)(a2 + 32 + k);
    *(_DWORD *)(a1 + 48 + k) = v7;
  }
  int v8 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v8 != 0;
  uint64_t v9 = *(unsigned int *)(a2 + 56);
  int v10 = *(_DWORD *)(a1 + 116);
  if (v10 < (int)v9)
  {
    uint64_t v11 = v10;
    if (*(_DWORD *)(a1 + 120) < (int)v9)
    {
      if (v9)
      {
        uint64_t v12 = sub_1B6E073B8((uint64_t)(int)v9 << 6, 16);
        int v10 = *(_DWORD *)(a1 + 116);
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (v10 >= 1)
      {
        uint64_t v13 = 0;
        unint64_t v14 = (unint64_t)v10 << 6;
        do
        {
          uint64_t v15 = (_OWORD *)(v12 + v13);
          int8x16_t v16 = (_OWORD *)(*(void *)(a1 + 128) + v13);
          *uint64_t v15 = *v16;
          v15[1] = v16[1];
          long long v17 = v16[3];
          void v15[2] = v16[2];
          v15[3] = v17;
          v13 += 64;
        }
        while (v14 != v13);
      }
      uint64_t v18 = *(void *)(a1 + 128);
      if (v18 && *(unsigned char *)(a1 + 136)) {
        sub_1B6E073C4(v18);
      }
      *(unsigned char *)(a1 + 136) = 1;
      *(void *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = v12;
      *(_DWORD *)(a1 + 120) = v9;
    }
    uint64_t v19 = v11 << 6;
    uint64_t v20 = (int)v9 - v11;
    long long v7 = 0uLL;
    do
    {
      uint64_t v21 = (_OWORD *)(*(void *)(a1 + 128) + v19);
      v21[2] = 0uLL;
      v21[3] = 0uLL;
      *uint64_t v21 = 0uLL;
      v21[1] = 0uLL;
      v19 += 64;
      --v20;
    }
    while (v20);
  }
  *(_DWORD *)(a1 + 116) = v9;
  if ((int)v9 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(a2 + 64);
    uint64_t v25 = *(void *)(a1 + 128);
    do
    {
      uint64_t v26 = v25 + v22;
      for (uint64_t m = 16; m != 32; m += 4)
        *(_DWORD *)(v26 + m) = *(_DWORD *)(v24 + m);
      uint64_t v28 = 0;
      uint64_t v29 = *(void *)(a1 + 128) + v22;
      do
      {
        *(_DWORD *)(v29 + v28) = *(_DWORD *)(v24 + v28);
        v28 += 4;
      }
      while (v28 != 16);
      uint64_t v25 = *(void *)(a1 + 128);
      uint64_t v30 = v25 + (v23 << 6);
      *(void *)&long long v7 = *(void *)(v24 + 32);
      *(void *)(v30 + 3sub_1B6DC4968((unsigned int *)this + 2) = v7;
      *(_DWORD *)(v30 + 40) = *(_DWORD *)(v24 + 40);
      ++v23;
      v24 += 48;
      v22 += 64;
    }
    while (v23 != v9);
  }
  uint64_t v31 = *(unsigned int *)(a2 + 60);
  int v32 = *(_DWORD *)(a1 + 180);
  if (v32 < (int)v31)
  {
    uint64_t v33 = v32;
    if (*(_DWORD *)(a1 + 184) < (int)v31)
    {
      if (v31)
      {
        uint64_t v34 = sub_1B6E073B8(16 * (int)v31, 16);
        int v32 = *(_DWORD *)(a1 + 180);
      }
      else
      {
        uint64_t v34 = 0;
      }
      if (v32 >= 1)
      {
        uint64_t v35 = 0;
        uint64_t v36 = 16 * v32;
        do
        {
          long long v7 = *(_OWORD *)(*(void *)(a1 + 192) + v35);
          *(_OWORD *)(v34 + v35) = v7;
          v35 += 16;
        }
        while (v36 != v35);
      }
      uint64_t v37 = *(void *)(a1 + 192);
      if (v37 && *(unsigned char *)(a1 + 200)) {
        sub_1B6E073C4(v37);
      }
      *(unsigned char *)(a1 + 200) = 1;
      *(void *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = v34;
      *(_DWORD *)(a1 + 184) = v31;
    }
    uint64_t v38 = 16 * v33;
    uint64_t v39 = (int)v31 - v33;
    do
    {
      BOOL v40 = (void *)(*(void *)(a1 + 192) + v38);
      *BOOL v40 = 0;
      v40[1] = 0;
      v38 += 16;
      --v39;
    }
    while (v39);
  }
  *(_DWORD *)(a1 + 180) = v31;
  if ((int)v31 >= 1)
  {
    uint64_t v41 = *(void *)(a2 + 72) + 6;
    uint64_t v42 = *(void *)(a1 + 192) + 6;
    do
    {
      *(_DWORD *)(v42 + 6) = *(_DWORD *)(v41 + 6);
      *(_WORD *)uint64_t v42 = *(_WORD *)v41;
      *(_WORD *)(v42 + sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v41 + 2);
      *(_WORD *)(v42 + 4) = *(_WORD *)(v41 + 4);
      *(_WORD *)(v42 - 6) = *(_WORD *)(v41 - 6);
      *(_WORD *)(v42 - 4) = *(_WORD *)(v41 - 4);
      *(_WORD *)(v42 - sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v41 - 2);
      v41 += 16;
      v42 += 16;
      --v31;
    }
    while (v31);
  }
  uint64_t v43 = *(unsigned int *)(a2 + 92);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 88);
  int v44 = *(_DWORD *)(a1 + 220);
  if (v44 < (int)v43 && *(_DWORD *)(a1 + 224) < (int)v43)
  {
    if (v43)
    {
      uint64_t v45 = sub_1B6E073B8(32 * (int)v43, 16);
      int v44 = *(_DWORD *)(a1 + 220);
    }
    else
    {
      uint64_t v45 = 0;
    }
    if (v44 >= 1)
    {
      uint64_t v46 = 0;
      uint64_t v47 = 32 * v44;
      do
      {
        uint64_t v48 = (long long *)(v45 + v46);
        uint64_t v49 = (long long *)(*(void *)(a1 + 232) + v46);
        long long v7 = *v49;
        long long v50 = v49[1];
        *uint64_t v48 = *v49;
        v48[1] = v50;
        v46 += 32;
      }
      while (v47 != v46);
    }
    uint64_t v51 = *(void *)(a1 + 232);
    if (v51 && *(unsigned char *)(a1 + 240)) {
      sub_1B6E073C4(v51);
    }
    *(unsigned char *)(a1 + 240) = 1;
    *(void *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = v45;
    *(_DWORD *)(a1 + 224) = v43;
  }
  *(_DWORD *)(a1 + 220) = v43;
  if ((int)v43 >= 1)
  {
    BOOL v52 = (_WORD *)(*(void *)(a2 + 80) + 10);
    uint64_t v53 = *(void *)(a1 + 232) + 6;
    do
    {
      *(_WORD *)uint64_t v53 = v52[2];
      *(_WORD *)(v53 + sub_1B6DC4968((unsigned int *)this + 2) = v52[3];
      *(_WORD *)(v53 + 4) = v52[4];
      *(_WORD *)(v53 - 6) = *(v52 - 1);
      *(_WORD *)(v53 - 4) = *v52;
      *(_WORD *)(v53 - sub_1B6DC4968((unsigned int *)this + 2) = v52[1];
      *(void *)&long long v7 = *(void *)(v52 - 5);
      *(void *)(v53 + 6) = v7;
      v52 += 10;
      v53 += 32;
      --v43;
    }
    while (v43);
  }
  return *(double *)&v7;
}

double sub_1B6DCECAC(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    float v5 = *(double *)(a2 + 32 + 8 * i);
    *(float *)(a1 + 32 + 4 * i) = v5;
  }
  for (uint64_t j = 0; j != 4; ++j)
  {
    float v7 = *(double *)(a2 + 8 * j);
    *(float *)(a1 + 16 + 4 * j) = v7;
  }
  for (uint64_t k = 0; k != 4; ++k)
  {
    *(void *)&long long v9 = *(void *)(a2 + 64 + 8 * k);
    *(float *)&long long v9 = *(double *)&v9;
    *(_DWORD *)(a1 + 48 + 4 * k) = v9;
  }
  int v10 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v10 != 0;
  uint64_t v11 = *(unsigned int *)(a2 + 104);
  int v12 = *(_DWORD *)(a1 + 116);
  if (v12 < (int)v11)
  {
    uint64_t v13 = v12;
    if (*(_DWORD *)(a1 + 120) < (int)v11)
    {
      if (v11)
      {
        uint64_t v14 = sub_1B6E073B8((uint64_t)(int)v11 << 6, 16);
        int v12 = *(_DWORD *)(a1 + 116);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (v12 >= 1)
      {
        uint64_t v15 = 0;
        unint64_t v16 = (unint64_t)v12 << 6;
        do
        {
          long long v17 = (_OWORD *)(v14 + v15);
          uint64_t v18 = (_OWORD *)(*(void *)(a1 + 128) + v15);
          *long long v17 = *v18;
          v17[1] = v18[1];
          long long v19 = v18[3];
          v17[2] = v18[2];
          v17[3] = v19;
          v15 += 64;
        }
        while (v16 != v15);
      }
      uint64_t v20 = *(void *)(a1 + 128);
      if (v20 && *(unsigned char *)(a1 + 136)) {
        sub_1B6E073C4(v20);
      }
      *(unsigned char *)(a1 + 136) = 1;
      *(void *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = v14;
      *(_DWORD *)(a1 + 120) = v11;
    }
    uint64_t v21 = v13 << 6;
    uint64_t v22 = (int)v11 - v13;
    long long v9 = 0uLL;
    do
    {
      uint64_t v23 = (_OWORD *)(*(void *)(a1 + 128) + v21);
      long long v23[2] = 0uLL;
      v23[3] = 0uLL;
      *uint64_t v23 = 0uLL;
      v23[1] = 0uLL;
      v21 += 64;
      --v22;
    }
    while (v22);
  }
  *(_DWORD *)(a1 + 116) = v11;
  if ((int)v11 >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a2 + 112);
    uint64_t v27 = *(void *)(a1 + 128);
    do
    {
      uint64_t v28 = v27 + v24;
      for (uint64_t m = 4; m != 8; ++m)
      {
        float v30 = *(double *)(v26 + 8 * m);
        *(float *)(v28 + 4 * m) = v30;
      }
      uint64_t v31 = 0;
      uint64_t v32 = *(void *)(a1 + 128) + v24;
      do
      {
        float v33 = *(double *)(v26 + 8 * v31);
        *(float *)(v32 + 4 * v31++) = v33;
      }
      while (v31 != 4);
      uint64_t v27 = *(void *)(a1 + 128);
      uint64_t v34 = v27 + (v25 << 6);
      *(void *)&long long v9 = *(void *)(v26 + 64);
      *(void *)(v34 + 3sub_1B6DC4968((unsigned int *)this + 2) = v9;
      *(_DWORD *)(v34 + 40) = *(_DWORD *)(v26 + 72);
      ++v25;
      v26 += 80;
      v24 += 64;
    }
    while (v25 != v11);
  }
  uint64_t v35 = *(unsigned int *)(a2 + 108);
  int v36 = *(_DWORD *)(a1 + 180);
  if (v36 < (int)v35)
  {
    uint64_t v37 = v36;
    if (*(_DWORD *)(a1 + 184) < (int)v35)
    {
      if (v35)
      {
        uint64_t v38 = sub_1B6E073B8(16 * (int)v35, 16);
        int v36 = *(_DWORD *)(a1 + 180);
      }
      else
      {
        uint64_t v38 = 0;
      }
      if (v36 >= 1)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 16 * v36;
        do
        {
          long long v9 = *(_OWORD *)(*(void *)(a1 + 192) + v39);
          *(_OWORD *)(v38 + v39) = v9;
          v39 += 16;
        }
        while (v40 != v39);
      }
      uint64_t v41 = *(void *)(a1 + 192);
      if (v41 && *(unsigned char *)(a1 + 200)) {
        sub_1B6E073C4(v41);
      }
      *(unsigned char *)(a1 + 200) = 1;
      *(void *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = v38;
      *(_DWORD *)(a1 + 184) = v35;
    }
    uint64_t v42 = 16 * v37;
    uint64_t v43 = (int)v35 - v37;
    do
    {
      int v44 = (void *)(*(void *)(a1 + 192) + v42);
      *int v44 = 0;
      v44[1] = 0;
      v42 += 16;
      --v43;
    }
    while (v43);
  }
  *(_DWORD *)(a1 + 180) = v35;
  if ((int)v35 >= 1)
  {
    uint64_t v45 = *(void *)(a2 + 120) + 6;
    uint64_t v46 = *(void *)(a1 + 192) + 6;
    do
    {
      *(_DWORD *)(v46 + 6) = *(_DWORD *)(v45 + 6);
      *(_WORD *)uint64_t v46 = *(_WORD *)v45;
      *(_WORD *)(v46 + sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v45 + 2);
      *(_WORD *)(v46 + 4) = *(_WORD *)(v45 + 4);
      *(_WORD *)(v46 - 6) = *(_WORD *)(v45 - 6);
      *(_WORD *)(v46 - 4) = *(_WORD *)(v45 - 4);
      *(_WORD *)(v46 - sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v45 - 2);
      v45 += 16;
      v46 += 16;
      --v35;
    }
    while (v35);
  }
  uint64_t v47 = *(unsigned int *)(a2 + 132);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 128);
  int v48 = *(_DWORD *)(a1 + 220);
  if (v48 < (int)v47 && *(_DWORD *)(a1 + 224) < (int)v47)
  {
    if (v47)
    {
      uint64_t v49 = sub_1B6E073B8(32 * (int)v47, 16);
      int v48 = *(_DWORD *)(a1 + 220);
    }
    else
    {
      uint64_t v49 = 0;
    }
    if (v48 >= 1)
    {
      uint64_t v50 = 0;
      uint64_t v51 = 32 * v48;
      do
      {
        BOOL v52 = (long long *)(v49 + v50);
        uint64_t v53 = (long long *)(*(void *)(a1 + 232) + v50);
        long long v9 = *v53;
        long long v54 = v53[1];
        *BOOL v52 = *v53;
        v52[1] = v54;
        v50 += 32;
      }
      while (v51 != v50);
    }
    uint64_t v55 = *(void *)(a1 + 232);
    if (v55 && *(unsigned char *)(a1 + 240)) {
      sub_1B6E073C4(v55);
    }
    *(unsigned char *)(a1 + 240) = 1;
    *(void *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = v49;
    *(_DWORD *)(a1 + 224) = v47;
  }
  *(_DWORD *)(a1 + 220) = v47;
  if ((int)v47 >= 1)
  {
    uint64_t v56 = (_WORD *)(*(void *)(a2 + 136) + 10);
    uint64_t v57 = *(void *)(a1 + 232) + 6;
    do
    {
      *(_WORD *)uint64_t v57 = v56[2];
      *(_WORD *)(v57 + sub_1B6DC4968((unsigned int *)this + 2) = v56[3];
      *(_WORD *)(v57 + 4) = v56[4];
      *(_WORD *)(v57 - 6) = *(v56 - 1);
      *(_WORD *)(v57 - 4) = *v56;
      *(_WORD *)(v57 - sub_1B6DC4968((unsigned int *)this + 2) = v56[1];
      *(void *)&long long v9 = *(void *)(v56 - 5);
      *(void *)(v57 + 6) = v9;
      v56 += 10;
      v57 += 32;
      --v47;
    }
    while (v47);
  }
  return *(double *)&v9;
}

const char *sub_1B6DCF0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 16 + i) = *(_DWORD *)(a1 + 32 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + j) = *(_DWORD *)(a1 + 16 + j);
  for (uint64_t k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + 32 + k) = *(_DWORD *)(a1 + 48 + k);
  int v9 = *(unsigned __int8 *)(a1 + 72);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 5sub_1B6DC4968((unsigned int *)this + 2) = v9;
  int v10 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a2 + 56) = v10;
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 128));
    *(void *)(a2 + 64) = v11;
    if (v11)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 116);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 48, v12);
      uint64_t v14 = *(void *)(a1 + 128);
      if ((int)v12 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(v13 + 8);
        uint64_t v17 = *(void *)(a1 + 128);
        do
        {
          for (uint64_t m = 16; m != 32; m += 4)
            *(_DWORD *)(v16 + m) = *(_DWORD *)(v17 + m);
          for (uint64_t n = 0; n != 16; n += 4)
            *(_DWORD *)(v16 + n) = *(_DWORD *)(v17 + n);
          uint64_t v20 = v14 + (v15 << 6);
          *(void *)(v16 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(v20 + 32);
          *(_DWORD *)(v16 + 40) = *(_DWORD *)(v20 + 40);
          ++v15;
          v16 += 48;
          v17 += 64;
        }
        while (v15 != v12);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v13, "btOptimizedBvhNodeData", 1497453121, v14);
    }
  }
  else
  {
    *(void *)(a2 + 64) = 0;
  }
  int v21 = *(_DWORD *)(a1 + 180);
  *(_DWORD *)(a2 + 60) = v21;
  if (v21)
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 192));
    *(void *)(a2 + 7sub_1B6DC4968((unsigned int *)this + 2) = v22;
    if (v22)
    {
      uint64_t v23 = *(unsigned int *)(a1 + 180);
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 16, v23);
      uint64_t v25 = *(void *)(a1 + 192);
      if ((int)v23 >= 1)
      {
        uint64_t v26 = *(void *)(v24 + 8) + 6;
        uint64_t v27 = v25 + 6;
        do
        {
          *(_DWORD *)(v26 + 6) = *(_DWORD *)(v27 + 6);
          *(_WORD *)uint64_t v26 = *(_WORD *)v27;
          *(_WORD *)(v26 + sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v27 + 2);
          *(_WORD *)(v26 + 4) = *(_WORD *)(v27 + 4);
          *(_WORD *)(v26 - 6) = *(_WORD *)(v27 - 6);
          *(_WORD *)(v26 - 4) = *(_WORD *)(v27 - 4);
          *(_WORD *)(v26 - sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v27 - 2);
          v26 += 16;
          v27 += 16;
          --v23;
        }
        while (v23);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v24, "btQuantizedBvhNodeData", 1497453121, v25);
    }
  }
  else
  {
    *(void *)(a2 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  }
  int v28 = *(_DWORD *)(a1 + 220);
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 208);
  *(_DWORD *)(a2 + 9sub_1B6DC4968((unsigned int *)this + 2) = v28;
  if (v28)
  {
    uint64_t v29 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 232));
    *(void *)(a2 + 80) = v29;
    if (v29)
    {
      uint64_t v30 = *(unsigned int *)(a1 + 220);
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 20, v30);
      uint64_t v32 = *(void *)(a1 + 232);
      if ((int)v30 >= 1)
      {
        float v33 = (_WORD *)(*(void *)(v31 + 8) + 10);
        uint64_t v34 = v32 + 6;
        do
        {
          v33[2] = *(_WORD *)v34;
          v33[3] = *(_WORD *)(v34 + 2);
          v33[4] = *(_WORD *)(v34 + 4);
          *(v33 - 1) = *(_WORD *)(v34 - 6);
          *float v33 = *(_WORD *)(v34 - 4);
          v33[1] = *(_WORD *)(v34 - 2);
          *(void *)(v33 - 5) = *(void *)(v34 + 6);
          v33 += 10;
          v34 += 32;
          --v30;
        }
        while (v30);
      }
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v31, "btBvhSubtreeInfoData", 1497453121, v32);
    }
  }
  else
  {
    *(void *)(a2 + 80) = 0;
  }
  return "btQuantizedBvhFloatData";
}

uint64_t sub_1B6DCF4C4()
{
  return 96;
}

uint64_t sub_1B6DCF4CC(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(void *)__n128 result = &unk_1F0FB1A58;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(float *)(result + 24) = a4;
  return result;
}

uint64_t sub_1B6DCF4F4(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  float v39 = 0.0;
  float32x4_t v8 = a2[2];
  float32x4_t v9 = a2[6];
  float32x4_t v10 = vsubq_f32(a2[3], a2[7]);
  float32x4_t v11 = *a2;
  float32x4_t v12 = a2[1];
  v11.i32[3] = 0;
  v12.i32[3] = 0;
  v8.i32[3] = 0;
  float32x4_t v13 = a2[4];
  float32x4_t v14 = a2[5];
  v10.i32[3] = 0;
  float32x4_t v15 = vmlaq_laneq_f32(vmulq_laneq_f32(v11, v13, 2), v12, v14, 2);
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  float32x4_t v16 = vmlaq_laneq_f32(v15, v8, v9, 2);
  v9.i32[3] = 0;
  v37[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, v13.f32[0]), v12, v14.f32[0]), v8, v9.f32[0]);
  v37[2] = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v11, *(float32x2_t *)v13.f32, 1), v12, *(float32x2_t *)v14.f32, 1), v8, *(float32x2_t *)v9.f32, 1);
  v37[3] = v16;
  float32x4_t v38 = vaddq_f32(vaddq_f32(vmulq_n_f32(v13, v10.f32[0]), vmulq_lane_f32(v14, *(float32x2_t *)v10.f32, 1)), vmulq_laneq_f32(v9, v10, 2));
  uint64_t result = sub_1B6DCF748(a1, &v38, &v41, &v40, &v39, *(float *)(a1 + 24));
  if (result)
  {
    float32x4_t v18 = a2[4];
    float32x4_t v19 = a2[5];
    int8x16_t v20 = (int8x16_t)vmulq_f32(v18, v40);
    int8x16_t v21 = (int8x16_t)vmulq_f32(v40, v19);
    float32x4_t v22 = a2[6];
    if (a5)
    {
      int8x16_t v23 = (int8x16_t)vmulq_f32(v40, v22);
      v23.i32[3] = 0;
      *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
      *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
      float32x4_t v25 = vmulq_f32(v18, v41);
      int8x16_t v26 = (int8x16_t)vmulq_f32(v19, v41);
      int8x16_t v27 = (int8x16_t)vmulq_f32(v22, v41);
      v28.i64[0] = 0x8000000080000000;
      v28.i64[1] = 0x8000000080000000;
      v27.i32[3] = 0;
      *(float32x2_t *)v25.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
      *(float32x2_t *)&v25.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
      float32x4_t v29 = vmulq_n_f32(v24, v39);
      v29.i32[3] = 0;
      float32x4_t v36 = vaddq_f32(vaddq_f32(a2[7], v25), v29);
      v37[0] = veorq_s8((int8x16_t)v24, v28);
    }
    else
    {
      float32x4_t v30 = a2[7];
      int8x16_t v31 = (int8x16_t)vmulq_f32(v40, v22);
      v31.i32[3] = 0;
      *(float32x2_t *)&long long v32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
      *((float32x2_t *)&v32 + 1) = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
      v37[0] = v32;
      float32x4_t v33 = vmulq_f32(v18, v41);
      int8x16_t v34 = (int8x16_t)vmulq_f32(v19, v41);
      int8x16_t v35 = (int8x16_t)vmulq_f32(v22, v41);
      v35.i32[3] = 0;
      *(float32x2_t *)v33.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v34.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
      *(float32x2_t *)&v33.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
      float32x4_t v36 = vaddq_f32(v30, v33);
    }
    return (*(uint64_t (**)(uint64_t, _OWORD *, float32x4_t *))(*(void *)a3 + 32))(a3, v37, &v36);
  }
  return result;
}

uint64_t sub_1B6DCF748(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float *a5, float a6)
{
  float32x4_t v11 = *(float32x4_t **)(a1 + 16);
  float v12 = v11[7].f32[3];
  if (v11[6].f32[3] == v12
    && v11[6].f32[2] == v11[7].f32[2]
    && v11[6].f32[1] == v11[7].f32[1]
    && v11[6].f32[0] == v11[7].f32[0]
    || v11[5].f32[3] == v12
    && v11[5].f32[2] == v11[7].f32[2]
    && v11[5].f32[1] == v11[7].f32[1]
    && v11[5].f32[0] == v11[7].f32[0])
  {
    return 0;
  }
  float v13 = *(float *)(*(void *)(a1 + 8) + 48) * *(float *)(*(void *)(a1 + 8) + 32);
  float v14 = v13 + a6;
  float32x4_t v15 = v11[5];
  float32x4_t v16 = vsubq_f32(v11[6], v15);
  int8x8_t v17 = (int8x8_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v16.i32[3] = 0;
  float32x4_t v18 = vsubq_f32(v11[7], v15);
  int8x8_t v19 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
  v18.i32[3] = 0;
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v16.f32, v17, 4uLL);
  v20.i64[1] = v16.i64[0];
  *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v18.f32, v19, 4uLL);
  v21.i64[1] = v18.i64[0];
  int8x16_t v22 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v16), vmulq_f32(v20, v18));
  v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
  v23.i64[1] = v22.u32[0];
  int8x16_t v24 = (int8x16_t)vmulq_f32(v23, v23);
  *(float32x2_t *)v18.f32 = vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8);
  float32x4_t v25 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
  v25.f32[0] = vadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v25.f32).f32[0];
  if (v25.f32[0] >= 1.4211e-14) {
    float32x4_t v26 = vmulq_n_f32(v23, 1.0 / sqrtf(v25.f32[0]));
  }
  else {
    float32x4_t v26 = (float32x4_t)xmmword_1B6E4F300;
  }
  float32x4_t v27 = *a2;
  float32x4_t v28 = vsubq_f32(*a2, v15);
  v28.i32[3] = 0;
  int8x16_t v29 = (int8x16_t)vmulq_f32(v26, v28);
  *(float32x2_t *)v25.f32 = vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8);
  float32x4_t v30 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
  *(float32x2_t *)v30.f32 = vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v30.f32);
  v25.f32[0] = -v30.f32[0];
  if (v30.f32[0] >= 0.0) {
    v25.f32[0] = v30.f32[0];
  }
  if (v25.f32[0] >= v14) {
    return 0;
  }
  float v56 = v25.f32[0];
  float32x4_t v58 = *a2;
  v25.i64[0] = 0;
  float32x4_t v59 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v25, v30), 0), (int8x16_t)vnegq_f32(v26), (int8x16_t)v26);
  float32x4_t v60 = v27;
  float32x4_t v55 = v59;
  if (sub_1B6DCFAF0(a1, v11 + 5, (int8x8_t *)&v59, &v60))
  {
    float32x4_t v31 = v55;
    float32x4_t v32 = v58;
    float32x4_t v33 = vsubq_f32(v58, vmulq_n_f32(v55, v56));
    v33.i32[3] = 0;
    float v34 = v14 * v14;
  }
  else
  {
    if ((*(int (**)(float32x4_t *))(v11->i64[0] + 200))(v11) < 1) {
      return 0;
    }
    uint64_t v36 = 0;
    char v37 = 0;
    v35.f32[0] = v14 * v14;
    float32x4_t v57 = v35;
    do
    {
      (*(void (**)(void, uint64_t, float32x4_t *, float32x4_t *))(**(void **)(a1 + 16) + 208))(*(void *)(a1 + 16), v36, &v60, &v59);
      float32x4_t v38 = vsubq_f32(*a2, v60);
      v38.i32[3] = 0;
      float32x4_t v39 = vsubq_f32(v59, v60);
      v39.i32[3] = 0;
      int8x16_t v40 = (int8x16_t)vmulq_f32(v38, v39);
      float32x2_t v41 = vadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
      float v42 = 0.0;
      if (v41.f32[0] > 0.0)
      {
        int8x16_t v43 = (int8x16_t)vmulq_f32(v39, v39);
        float32x2_t v44 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8));
        if (vcgt_f32(v44, v41).u8[0])
        {
          LODWORD(v4sub_1B6DC4968((unsigned int *)this + 2) = vdiv_f32(v41, v44).u32[0];
          float32x4_t v45 = vmulq_n_f32(v39, v42);
          v45.i32[3] = 0;
          float32x4_t v38 = vsubq_f32(v38, v45);
        }
        else
        {
          float32x4_t v38 = vsubq_f32(v38, v39);
          float v42 = 1.0;
        }
      }
      float32x4_t v46 = vmulq_n_f32(v39, v42);
      v46.i32[3] = 0;
      int8x16_t v47 = (int8x16_t)vaddq_f32(v60, v46);
      int8x16_t v48 = (int8x16_t)vmulq_f32(v38, v38);
      *(float32x2_t *)v46.f32 = vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8);
      float32x4_t v49 = (float32x4_t)vextq_s8(v48, v48, 8uLL);
      *(float32x2_t *)v49.f32 = vadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v49.f32);
      float32x4_t v58 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v57, v49), 0), v47, (int8x16_t)v58);
      if (v49.f32[0] < v57.f32[0]) {
        char v37 = 1;
      }
      uint64_t v36 = (v36 + 1);
    }
    while ((int)v36 < (*(int (**)(void))(**(void **)(a1 + 16) + 200))(*(void *)(a1 + 16)));
    if ((v37 & 1) == 0) {
      return 0;
    }
    float32x4_t v32 = *a2;
    float32x4_t v31 = v55;
    float v34 = v57.f32[0];
    float32x4_t v33 = v58;
  }
  float32x4_t v50 = vsubq_f32(v32, v33);
  v50.i32[3] = 0;
  int8x16_t v51 = (int8x16_t)vmulq_f32(v50, v50);
  float v52 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)).f32[0];
  if (v52 >= v34) {
    return 0;
  }
  if (v52 > 0.00000011921)
  {
    float v54 = sqrtf(v52);
    float32x4_t v31 = vmulq_n_f32(v50, 1.0 / v54);
    float v13 = v13 - v54;
  }
  *a4 = v31;
  *a3 = v33;
  *a5 = -v13;
  return 1;
}

uint64_t sub_1B6DCFAF0(uint64_t a1, float32x4_t *a2, int8x8_t *a3, float32x4_t *a4)
{
  float32x4_t v4 = a2[1];
  float32x4_t v5 = vsubq_f32(v4, *a2);
  int8x8_t v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  float32x4_t v7 = a2[2];
  float32x4_t v8 = vsubq_f32(v7, v4);
  int8x8_t v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  int8x16_t v10 = (int8x16_t)vsubq_f32(*a2, v7);
  float32x4_t v11 = (float32x4_t)v10;
  v11.i32[3] = 0;
  float32x4_t v12 = vsubq_f32(*a4, *a2);
  v12.i32[3] = 0;
  float32x4_t v13 = vsubq_f32(*a4, v4);
  v13.i32[3] = 0;
  float32x4_t v14 = vsubq_f32(*a4, v7);
  v14.i32[3] = 0;
  *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v15.i64[1] = v5.i64[0];
  *(int8x8_t *)v16.f32 = vext_s8(*a3, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v16.u32[2] = *a3;
  float32x4_t v17 = vsubq_f32(vmulq_f32(v16, v5), vmulq_f32(*(float32x4_t *)a3->i8, v15));
  v15.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL).u64[0];
  v15.i64[1] = v17.u32[0];
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v18.i64[1] = v8.i64[0];
  int8x16_t v19 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v8), vmulq_f32(*(float32x4_t *)a3->i8, v18));
  v18.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v18.i64[1] = v19.u32[0];
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), 4uLL);
  v17.i64[1] = v10.i64[0];
  int8x16_t v20 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v11), vmulq_f32(*(float32x4_t *)a3->i8, v17));
  v17.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
  v17.i64[1] = v20.u32[0];
  int8x16_t v21 = (int8x16_t)vmulq_f32(v12, v15);
  float v22 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)).f32[0];
  int8x16_t v23 = (int8x16_t)vmulq_f32(v13, v18);
  LODWORD(v24) = vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).u32[0];
  int8x16_t v25 = (int8x16_t)vmulq_f32(v14, v17);
  LODWORD(v26) = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).u32[0];
  if (v22 > 0.0 && v24 > 0.0 && v26 > 0.0) {
    return 1;
  }
  BOOL v28 = v22 <= 0.0;
  if (v24 > 0.0) {
    BOOL v28 = 0;
  }
  return v26 <= 0.0 && v28;
}

void sub_1B6DCFC1C()
{
}

void *sub_1B6DCFC30(void *a1, uint64_t *a2)
{
  uint64_t result = sub_1B6DC9210(a1, a2);
  *uint64_t result = &unk_1F0FB25C8;
  return result;
}

uint64_t sub_1B6DCFC6C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int8x8_t v9 = sub_1B6DCFC30((void *)a1, a3);
  *int8x8_t v9 = &unk_1F0FB2388;
  *((unsigned char *)v9 + 16) = 0;
  id v9[3] = a2;
  if (!a2
    && (*(unsigned int (**)(void, void, void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), *(void *)(a4 + 16), *(void *)(a5 + 16)))
  {
    *(void *)(a1 + 24) = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)(a4 + 16), *(void *)(a5 + 16));
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

double sub_1B6DCFD50(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2388;
  if (*(unsigned char *)(a1 + 16) && *(void *)(a1 + 24)) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }

  return nullsub_1(a1);
}

void sub_1B6DCFDDC(uint64_t a1)
{
  sub_1B6DCFD50(a1);

  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B6DCFE14(void *result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = result[3];
  if (v5)
  {
    float32x4_t v7 = result;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a3 + 8);
    a5[1] = v5;
    int v18 = 1566444395;
    int8x16_t v10 = *(float32x4_t **)(a2 + 24);
    float32x4_t v11 = v10[1];
    v17[0] = *v10;
    v17[1] = v11;
    float32x4_t v12 = v10[3];
    v17[2] = v10[2];
    v17[3] = v12;
    float32x4_t v13 = *(float32x4_t **)(a3 + 24);
    void v17[4] = *v13;
    v17[5] = v13[1];
    v17[6] = v13[2];
    v17[7] = v13[3];
    sub_1B6DD0020(v16, v8, v9);
    uint64_t result = (void *)sub_1B6DD17D8((uint64_t)v16, v17, (uint64_t)a5);
    if (*((unsigned char *)v7 + 16))
    {
      uint64_t result = (void *)a5[1];
      if (*((_DWORD *)result + 200))
      {
        float32x4_t v14 = (float32x4_t *)result[98];
        float32x4_t v15 = *(float32x4_t **)(a5[2] + 16);
        if (v14 == v15) {
          float32x4_t v15 = *(float32x4_t **)(a5[3] + 16);
        }
        else {
          float32x4_t v14 = *(float32x4_t **)(a5[3] + 16);
        }
        return sub_1B6DF3CF4(result, v14 + 1, v15 + 1);
      }
    }
  }
  return result;
}

float sub_1B6DCFF34()
{
  return 1.0;
}

void sub_1B6DCFF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      int v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          uint64_t v7 = sub_1B6E073B8(8 * v6, 16);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          uint64_t v7 = 0;
        }
        if (v5 >= 1)
        {
          uint64_t v8 = 0;
          do
          {
            *(void *)(v7 + v8) = *(void *)(*(void *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9) {
          BOOL v10 = *(unsigned char *)(a2 + 24) == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10)
        {
          sub_1B6E073C4(v9);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        *(unsigned char *)(a2 + 24) = 1;
        *(void *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        uint64_t v2 = *(void *)(a1 + 24);
      }
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

void *sub_1B6DD0020(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = &unk_1F0FB0F68;
  result[1] = a2;
  result[2] = a3;
  return result;
}

float *sub_1B6DD0044(float *result, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6 = a2[1];
  float v7 = a4[1];
  float v8 = a2[2];
  float v9 = a4[2];
  float v10 = (float)((float)(v6 * v7) + (float)(*a2 * *a4)) + (float)(v8 * v9);
  float v11 = 1.0 - (float)(v10 * v10);
  float v12 = 0.0;
  float v13 = 0.0;
  if (v11 > 0.0001)
  {
    float v14 = a3[2] - result[2];
    float v15 = *a3 - *result;
    float v16 = a3[1] - result[1];
    float v17 = (float)((float)(v7 * v16) + (float)(*a4 * v15)) + (float)(v9 * v14);
    float v18 = (float)((float)(v6 * v16) + (float)(*a2 * v15)) + (float)(v8 * v14);
    float v12 = (float)(1.0 / v11) * (float)(v18 - (float)(v10 * v17));
    float v13 = (float)(1.0 / v11) * (float)-(float)(v17 - (float)(v10 * v18));
  }
  *a5 = v12;
  *a6 = v13;
  return result;
}

void sub_1B6DD00D4(int a1, float32x2_t *a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (a1 - 1);
  if (a1 == 1)
  {
    float32x2_t v10 = *a2;
    goto LABEL_5;
  }
  if (a1 == 2)
  {
    float32x2_t v10 = vmul_f32(vadd_f32(*a2, a2[1]), (float32x2_t)0x3F0000003F000000);
LABEL_5:
    float v11 = v10.f32[1];
    goto LABEL_14;
  }
  float v12 = 0.0;
  float v13 = 0.0;
  float v14 = 0.0;
  if (a1 >= 2)
  {
    float v15 = (float *)&a2[1];
    do
    {
      float v16 = v15[1];
      float v17 = *(v15 - 2);
      float v18 = *(v15 - 1);
      float v19 = (float)(v17 * v16) - (float)(*v15 * v18);
      float v12 = v12 + v19;
      float v13 = v13 + (float)(v19 * (float)(v17 + *v15));
      float v14 = v14 + (float)(v19 * (float)(v16 + v18));
      v15 += 2;
      --v9;
    }
    while (v9);
  }
  float v20 = a2[a1 - 1].f32[0];
  float v21 = a2->f32[1];
  float v22 = a2[a1 - 1].f32[1];
  float v23 = (float)(v20 * v21) - (float)(a2->f32[0] * v22);
  float v24 = v12 + v23;
  if (fabsf(v24) <= 0.00000011921) {
    float v25 = 1.0e18;
  }
  else {
    float v25 = 1.0 / (float)(v24 * 3.0);
  }
  if (a1 <= 0)
  {
    int v30 = 0;
    goto LABEL_17;
  }
  v10.f32[0] = (float)(v13 + (float)(v23 * (float)(v20 + a2->f32[0]))) * v25;
  float v11 = (float)(v14 + (float)(v23 * (float)(v21 + v22))) * v25;
LABEL_14:
  float v26 = (float *)a2 + 1;
  float32x4_t v27 = v41;
  uint64_t v28 = a1;
  __int32 v39 = v10.i32[0];
  do
  {
    float v29 = atan2f(*v26 - v11, *(v26 - 1) - v10.f32[0]);
    v10.i32[0] = v39;
    *v27++ = v29;
    v26 += 2;
    --v28;
  }
  while (v28);
  memset_pattern16(__b, &unk_1B6ECFD70, 4 * a1);
  int v30 = 1;
LABEL_17:
  __b[a4] = 0;
  *a5 = a4;
  if (a3 >= 2)
  {
    float v31 = v41[a4];
    int v32 = 1;
    do
    {
      a5[1] = a4;
      ++a5;
      float v33 = v31 + (float)((float)v32 * (float)(6.2832 / (float)a3));
      if (v33 > 3.1416) {
        float v33 = v33 + -6.2832;
      }
      uint64_t v34 = a4;
      if (v30)
      {
        uint64_t v35 = 0;
        int v36 = a4;
        float v37 = *(float *)"(knN";
        do
        {
          if (__b[v35])
          {
            float v38 = vabds_f32(v41[v35], v33);
            if (v38 > 3.1416) {
              float v38 = 6.2832 - v38;
            }
            if (v38 < v37)
            {
              *a5 = v35;
              int v36 = v35;
              float v37 = v38;
            }
          }
          ++v35;
        }
        while (a1 != v35);
        uint64_t v34 = v36;
      }
      __b[v34] = 0;
      ++v32;
    }
    while (v32 != a3);
  }
}

uint64_t sub_1B6DD035C(float32x4_t *a1, float *a2, float32x2_t *a3, float32x4_t *a4, float *a5, float32x2_t *a6, float32x4_t *a7, float *a8, unsigned int *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v304 = *MEMORY[0x1E4F143B8];
  _Q23 = vsubq_f32(*a4, *a1);
  float v14 = *a2;
  float v15 = a2[4];
  float v16 = a2[5];
  _S4 = a2[8];
  _S9 = a2[9];
  __asm { FMLA            S21, S4, V23.S[2] }
  float v24 = a2[1];
  float v25 = a2 + 2;
  float v26 = a2[2];
  float v27 = a2[6];
  _S19 = a2[10];
  float32x2_t v29 = vmul_f32(*a3, (float32x2_t)0x3F0000003F000000);
  float32x2_t v302 = v29;
  float v30 = a3[1].f32[0] * 0.5;
  float v303 = v30;
  _D5 = vmul_f32(*a6, (float32x2_t)0x3F0000003F000000);
  float32x2_t v300 = _D5;
  float v32 = a6[1].f32[0] * 0.5;
  float v301 = v32;
  float v33 = *a5;
  float v35 = a5[4];
  float v34 = a5[5];
  float v37 = a5[8];
  float v36 = a5[9];
  float v38 = (float)((float)(v15 * v35) + (float)(v14 * *a5)) + (float)(_S4 * v37);
  float v39 = a5[1];
  float v40 = (float)((float)(v15 * v34) + (float)(v14 * v39)) + (float)(_S4 * v36);
  float32x2_t v41 = a5 + 2;
  float v42 = a5[2];
  float v43 = a5[6];
  float v44 = a5[10];
  float v45 = (float)((float)(v15 * v43) + (float)(v14 * v42)) + (float)(_S4 * v44);
  float v46 = fabsf(v38);
  _S26 = fabsf(v40);
  float v48 = fabsf(v45);
  __asm { FMLA            S4, S26, V5.S[1] }
  float v50 = fabsf(_S21) - (float)(_S4 + (float)(v32 * v48));
  if (v50 > 0.0) {
    return 0;
  }
  float v274 = v40;
  __asm { FMLA            S7, S9, V23.S[2] }
  float v278 = (float)((float)(v16 * v35) + (float)(v24 * v33)) + (float)(_S9 * v37);
  float v52 = fabsf(v278);
  float v275 = (float)((float)(v16 * v43) + (float)(v24 * v42)) + (float)(_S9 * v44);
  float v276 = (float)((float)(v16 * v34) + (float)(v24 * v39)) + (float)(_S9 * v36);
  float v53 = fabsf(v276);
  float v54 = fabsf(v275);
  BOOL v55 = _S21 < 0.0;
  BOOL v56 = v50 <= -3.4028e38;
  if (v50 > -3.4028e38)
  {
    int v57 = 1;
  }
  else
  {
    float v50 = -3.4028e38;
    BOOL v55 = 0;
    int v57 = 0;
  }
  float32x4_t v58 = v56 ? 0 : a2;
  float v59 = fabsf(_S7)
      - (float)((float)((float)(v29.f32[1] + (float)(_D5.f32[0] * v52)) + (float)(_D5.f32[1] * v53)) + (float)(v32 * v54));
  if (v59 > 0.0) {
    return 0;
  }
  float v272 = v54;
  float v265 = v24;
  float v266 = v26;
  float v267 = v45;
  __asm { FMLA            S14, S19, V23.S[2] }
  float v61 = (float)((float)(v27 * v35) + (float)(v26 * v33)) + (float)(_S19 * v37);
  float v62 = (float)((float)(v27 * v34) + (float)(v26 * v39)) + (float)(_S19 * v36);
  float v63 = (float)((float)(v27 * v43) + (float)(v26 * v42)) + (float)(_S19 * v44);
  float v269 = v62;
  float v270 = v61;
  float v64 = fabsf(v61);
  float v65 = fabsf(v62);
  float v268 = v63;
  float v66 = fabsf(v63);
  if (v59 > v50) {
    float v67 = v59;
  }
  else {
    float v67 = v50;
  }
  if (v59 > v50)
  {
    BOOL v55 = _S7 < 0.0;
    int v57 = 2;
    float32x4_t v58 = a2 + 1;
  }
  float v68 = fabsf(_S14)
      - (float)((float)((float)(v30 + (float)(_D5.f32[0] * v64)) + (float)(_D5.f32[1] * v65)) + (float)(v32 * v66));
  if (v68 > 0.0) {
    return 0;
  }
  BOOL v69 = _S14 < 0.0;
  BOOL v70 = v68 <= v67;
  if (v68 <= v67) {
    BOOL v69 = v55;
  }
  else {
    float v67 = v68;
  }
  if (v70) {
    int v71 = v57;
  }
  else {
    int v71 = 3;
  }
  if (v70) {
    float v25 = v58;
  }
  float v72 = (float)((float)(_Q23.f32[1] * v35) + (float)(v33 * _Q23.f32[0])) + (float)(v37 * _Q23.f32[2]);
  float v73 = fabsf(v72)
      - (float)(_D5.f32[0] + (float)((float)((float)(v29.f32[1] * v52) + (float)(v29.f32[0] * v46)) + (float)(v30 * v64)));
  if (v73 > 0.0) {
    return 0;
  }
  BOOL v74 = v73 <= v67;
  if (v73 > v67) {
    BOOL v69 = v72 < 0.0;
  }
  else {
    float v73 = v67;
  }
  if (!v74)
  {
    int v71 = 4;
    float v25 = a5;
  }
  float v75 = (float)((float)(_Q23.f32[1] * v34) + (float)(v39 * _Q23.f32[0])) + (float)(v36 * _Q23.f32[2]);
  float v76 = fabsf(v75)
      - (float)(_D5.f32[1]
              + (float)((float)((float)(v29.f32[1] * v53) + (float)(v29.f32[0] * _S26)) + (float)(v30 * v65)));
  if (v76 > 0.0) {
    return 0;
  }
  BOOL v77 = v75 < 0.0;
  if (v76 > v73) {
    float v78 = v76;
  }
  else {
    float v78 = v73;
  }
  if (v76 > v73)
  {
    BOOL v69 = v77;
    int v71 = 5;
    float v25 = a5 + 1;
  }
  float v79 = (float)((float)(_Q23.f32[1] * v43) + (float)(v42 * _Q23.f32[0])) + (float)(v44 * _Q23.f32[2]);
  float v80 = fabsf(v79)
      - (float)(v32 + (float)((float)((float)(v29.f32[1] * v272) + (float)(v29.f32[0] * v48)) + (float)(v30 * v66)));
  if (v80 > 0.0) {
    return 0;
  }
  BOOL v81 = v79 < 0.0;
  if (v80 > v78) {
    float v82 = v80;
  }
  else {
    float v82 = v78;
  }
  if (v80 > v78)
  {
    unsigned int v83 = 6;
  }
  else
  {
    BOOL v81 = v69;
    unsigned int v83 = v71;
  }
  if (v80 <= v78) {
    float32x2_t v41 = v25;
  }
  float v84 = _S26 + 0.00001;
  float v85 = v48 + 0.00001;
  float v86 = v52 + 0.00001;
  float v87 = v64 + 0.00001;
  float v88 = (float)(_S14 * v278) - (float)(_S7 * v61);
  float v89 = fabsf(v88)
      - (float)((float)((float)((float)(v30 * (float)(v52 + 0.00001)) + (float)(v29.f32[1] * (float)(v64 + 0.00001)))
                      + (float)(_D5.f32[1] * v85))
              + (float)(v32 * v84));
  if (v89 > 0.00000011921) {
    return 0;
  }
  unsigned int v91 = a1;
  float v92 = v66;
  float v93 = v46 + 0.00001;
  float v264 = v53 + 0.00001;
  float v94 = v65 + 0.00001;
  float v95 = -_S7;
  float v96 = 0.0;
  float v97 = (float)(v61 * v61) + 0.0;
  float v98 = sqrtf(v97 + (float)(v278 * v278));
  if (v98 <= 0.00000011921)
  {
    float v100 = 0.0;
    float v101 = 0.0;
    float v102 = v276;
    float v103 = v269;
  }
  else
  {
    float v99 = v89 / v98;
    float v100 = 0.0;
    float v101 = 0.0;
    float v102 = v276;
    float v103 = v269;
    if ((float)(v99 * 1.05) > v82)
    {
      float32x2_t v41 = 0;
      float v96 = 0.0 / v98;
      float v100 = (float)-v61 / v98;
      BOOL v81 = v88 < 0.0;
      unsigned int v83 = 7;
      float v82 = v99;
      float v101 = v278 / v98;
    }
  }
  float v104 = (float)(v103 * v95) + (float)(_S14 * v102);
  float v105 = fabsf(v104)
       - (float)((float)((float)((float)(v30 * v264) + (float)(v29.f32[1] * v94)) + (float)(_D5.f32[0] * v85))
               + (float)(v32 * v93));
  if (v105 > 0.00000011921) {
    return 0;
  }
  float v263 = v96;
  float v106 = (float)(v103 * v103) + 0.0;
  float v107 = sqrtf(v106 + (float)(v102 * v102));
  if (v107 > 0.00000011921 && (float)((float)(v105 / v107) * 1.05) > v82)
  {
    float32x2_t v41 = 0;
    float v263 = 0.0 / v107;
    float v100 = (float)-v269 / v107;
    BOOL v81 = v104 < 0.0;
    unsigned int v83 = 8;
    float v82 = v105 / v107;
    float v101 = v102 / v107;
  }
  float v262 = v101;
  float v108 = (float)(v268 * v95) + (float)(_S14 * v275);
  float v109 = fabsf(v108)
       - (float)((float)((float)((float)(v30 * (float)(v272 + 0.00001)) + (float)(v29.f32[1] * (float)(v92 + 0.00001)))
                       + (float)(_D5.f32[0] * v84))
               + (float)(_D5.f32[1] * v93));
  if (v109 > 0.00000011921) {
    return 0;
  }
  float v110 = v92 + 0.00001;
  float v261 = (float)(v268 * v268) + 0.0;
  float v111 = sqrtf(v261 + (float)(v275 * v275));
  float v273 = v272 + 0.00001;
  if (v111 <= 0.00000011921)
  {
    float v113 = v270;
  }
  else
  {
    float v112 = v109 / v111;
    float v113 = v270;
    if ((float)(v112 * 1.05) > v82)
    {
      float32x2_t v41 = 0;
      float v100 = (float)-v268 / v111;
      BOOL v81 = v108 < 0.0;
      unsigned int v83 = 9;
      float v82 = v112;
      float v262 = v275 / v111;
      float v263 = 0.0 / v111;
    }
  }
  float v114 = (float)(_S21 * v113) - (float)(_S14 * v38);
  float v115 = fabsf(v114)
       - (float)((float)((float)((float)(v30 * v93) + (float)(v29.f32[0] * v87)) + (float)(_D5.f32[1] * v273))
               + (float)(v32 * v264));
  if (v115 > 0.00000011921) {
    return 0;
  }
  float v271 = v94;
  float v116 = -_S14;
  float v117 = sqrtf(v97 + (float)(v38 * v38));
  if (v117 <= 0.00000011921)
  {
    float v119 = v267;
    float v120 = v274;
  }
  else
  {
    float v118 = v115 / v117;
    float v119 = v267;
    float v120 = v274;
    if ((float)(v118 * 1.05) > v82)
    {
      float32x2_t v41 = 0;
      float v100 = 0.0 / v117;
      BOOL v81 = v114 < 0.0;
      unsigned int v83 = 10;
      float v82 = v118;
      float v262 = (float)-v38 / v117;
      float v263 = v113 / v117;
    }
  }
  float v121 = (float)(v120 * v116) + (float)(_S21 * v269);
  float v122 = fabsf(v121)
       - (float)((float)((float)((float)(v30 * v84) + (float)(v29.f32[0] * v271)) + (float)(_D5.f32[0] * v273))
               + (float)(v32 * v86));
  if (v122 > 0.00000011921) {
    return 0;
  }
  float v123 = sqrtf(v106 + (float)(v120 * v120));
  if (v123 > 0.00000011921)
  {
    float v124 = v122 / v123;
    if ((float)(v124 * 1.05) > v82)
    {
      float32x2_t v41 = 0;
      float v100 = 0.0 / v123;
      BOOL v81 = v121 < 0.0;
      unsigned int v83 = 11;
      float v82 = v124;
      float v262 = (float)-v120 / v123;
      float v263 = v269 / v123;
    }
  }
  float v125 = (float)(v119 * v116) + (float)(_S21 * v268);
  float v126 = fabsf(v125)
       - (float)((float)((float)((float)(v30 * v85) + (float)(v29.f32[0] * v110)) + (float)(_D5.f32[0] * v264))
               + (float)(_D5.f32[1] * v86));
  if (v126 > 0.00000011921) {
    return 0;
  }
  float v127 = sqrtf(v261 + (float)(v119 * v119));
  if (v127 > 0.00000011921)
  {
    float v128 = v126 / v127;
    if ((float)(v128 * 1.05) > v82)
    {
      float32x2_t v41 = 0;
      float v100 = 0.0 / v127;
      BOOL v81 = v125 < 0.0;
      unsigned int v83 = 12;
      float v82 = v128;
      float v262 = (float)-v119 / v127;
      float v263 = v268 / v127;
    }
  }
  float v129 = (float)(_S7 * v38) - (float)(_S21 * v278);
  float v130 = fabsf(v129)
       - (float)((float)((float)((float)(v29.f32[1] * v93) + (float)(v29.f32[0] * v86)) + (float)(_D5.f32[1] * v110))
               + (float)(v32 * v271));
  if (v130 > 0.00000011921) {
    return 0;
  }
  float v131 = -_S21;
  float v132 = sqrtf((float)(v38 * v38) + (float)(v278 * v278));
  if (v132 > 0.00000011921)
  {
    float v133 = v130 / v132;
    if ((float)(v133 * 1.05) > v82)
    {
      float32x2_t v41 = 0;
      float v100 = v38 / v132;
      BOOL v81 = v129 < 0.0;
      unsigned int v83 = 13;
      float v82 = v133;
      float v262 = 0.0 / v132;
      float v263 = (float)-v278 / v132;
    }
  }
  float v134 = (float)(v102 * v131) + (float)(_S7 * v120);
  float v135 = fabsf(v134)
       - (float)((float)((float)((float)(v29.f32[1] * v84) + (float)(v29.f32[0] * v264)) + (float)(_D5.f32[0] * v110))
               + (float)(v32 * v87));
  if (v135 > 0.00000011921) {
    return 0;
  }
  float v136 = v100;
  float v279 = v82;
  float v137 = sqrtf((float)(v120 * v120) + (float)(v102 * v102));
  if (v137 > 0.00000011921)
  {
    float v138 = v135 / v137;
    if ((float)(v138 * 1.05) > v82)
    {
      float32x2_t v41 = 0;
      float v136 = v274 / v137;
      BOOL v81 = v134 < 0.0;
      unsigned int v83 = 14;
      float v279 = v138;
      float v262 = 0.0 / v137;
      float v263 = (float)-v276 / v137;
    }
  }
  float v139 = (float)(v275 * v131) + (float)(_S7 * v267);
  float v140 = fabsf(v139)
       - (float)((float)((float)((float)(v29.f32[1] * v85) + (float)(v29.f32[0] * v273)) + (float)(_D5.f32[0] * v271))
               + (float)(_D5.f32[1] * v87));
  if (v140 > 0.00000011921) {
    return 0;
  }
  float v141 = sqrtf((float)(v267 * v267) + (float)(v275 * v275));
  if (v141 > 0.00000011921)
  {
    float v142 = v140 / v141;
    if ((float)(v142 * 1.05) > v279)
    {
      float v136 = v267 / v141;
      BOOL v81 = v139 < 0.0;
      unsigned int v83 = 15;
      float v279 = v142;
      float v262 = 0.0 / v141;
      float v263 = (float)-v275 / v141;
LABEL_87:
      float v143 = (float)((float)(v265 * v136) + (float)(v14 * v263)) + (float)(v266 * v262);
      a7->f32[0] = v143;
      float v144 = (float)((float)(v136 * a2[5]) + (float)(a2[4] * v263)) + (float)(a2[6] * v262);
      a7->f32[1] = v144;
      float v145 = (float)((float)(v136 * a2[9]) + (float)(a2[8] * v263)) + (float)(a2[10] * v262);
      goto LABEL_88;
    }
  }
  if (!v83) {
    return 0;
  }
  if (!v41) {
    goto LABEL_87;
  }
  float v143 = *v41;
  a7->f32[0] = *v41;
  float v144 = v41[4];
  a7->f32[1] = v144;
  float v145 = v41[8];
LABEL_88:
  a7->f32[2] = v145;
  if (v81)
  {
    a7->f32[0] = -v143;
    a7->f32[1] = -v144;
    a7->f32[2] = -v145;
  }
  *a8 = -v279;
  unsigned int v147 = v83 - 7;
  if (v83 < 7)
  {
    float v282 = a7->f32[0];
    if (v83 > 3)
    {
      float v282 = -a7->f32[0];
      float v280 = -a7->f32[1];
      uint64_t v168 = &v300;
      uint64_t v169 = (float *)&v302;
      float v277 = -a7->f32[2];
      uint64_t v170 = a1;
      unsigned int v91 = a4;
      v171 = (float32x2_t *)a2;
      a2 = a5;
    }
    else
    {
      float v280 = a7->f32[1];
      float v277 = a7->f32[2];
      uint64_t v168 = &v302;
      uint64_t v169 = (float *)&v300;
      uint64_t v170 = a4;
      v171 = (float32x2_t *)a5;
    }
    float32x2_t v172 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v171[2], v280), *v171, v282), v171[4], v277);
    float v173 = (float)((float)(v280 * v171[3].f32[0]) + (float)(v171[1].f32[0] * v282)) + (float)(v171[5].f32[0] * v277);
    float32x2_t v174 = vabs_f32(v172);
    float v175 = fabsf(v173);
    BOOL v176 = v174.f32[0] > v175;
    uint64_t v177 = 2;
    if (v174.f32[1] > v175) {
      uint64_t v177 = 1;
    }
    if (v174.f32[1] <= v174.f32[0]) {
      uint64_t v177 = 2 * (v174.f32[0] <= v175);
    }
    else {
      BOOL v176 = v174.f32[1] > v175;
    }
    float32x2_t v290 = v172;
    float v291 = v173;
    BOOL v178 = v174.f32[0] > v175 && v174.f32[1] <= v174.f32[0];
    float v179 = v169[v177];
    uint64_t v180 = 0;
    if (*(float *)((unint64_t)&v290 | (4 * v177)) >= 0.0)
    {
      float v182 = -v179;
      uint64_t v183 = (char *)v171 + 4 * v177;
      do
      {
        *(float *)((char *)&v287 + v180 * 4) = (float)(v170->f32[v180] - v91->f32[v180])
                                             + (float)(v182 * *(float *)&v183[1 * v180]);
        ++v180;
      }
      while (v180 != 3);
    }
    else
    {
      uint64_t v181 = (char *)v171 + 4 * v177;
      do
      {
        *(float *)((char *)&v287 + v180 * 4) = (float)(v170->f32[v180] - v91->f32[v180])
                                             + (float)(v179 * *(float *)&v181[1 * v180]);
        ++v180;
      }
      while (v180 != 3);
    }
    if (v83 < 4) {
      int v184 = -1;
    }
    else {
      int v184 = -4;
    }
    unsigned int v185 = v184 + v83;
    if (v184 + v83)
    {
      uint64_t v186 = 1;
      uint64_t v187 = 0;
      if (v185 == 1) {
        uint64_t v186 = 2;
      }
    }
    else
    {
      uint64_t v186 = 2;
      uint64_t v187 = 1;
    }
    BOOL v188 = &a2[v187];
    float v189 = *v188;
    float v190 = v188[4];
    float v191 = v188[8];
    float v192 = (float)((float)(v288 * v190) + (float)(v287 * *v188)) + (float)(v289 * v191);
    v193 = &a2[v186];
    float v194 = *v193;
    float v195 = v193[4];
    float v196 = v193[8];
    float v197 = (float)((float)(v288 * v195) + (float)(v287 * *v193)) + (float)(v289 * v196);
    id v198 = (float *)v171 + v178;
    float v199 = v198[4];
    v200 = v198;
    float v201 = v198[8];
    float v202 = (float)((float)(v190 * v199) + (float)(v189 * *v198)) + (float)(v191 * v201);
    _ZF = !v176;
    uint64_t v203 = 1;
    if (!_ZF) {
      uint64_t v203 = 2;
    }
    v204 = (float *)v171 + v203;
    float v205 = v204[4];
    float v206 = (float)(v190 * v205) + (float)(v189 * *v204);
    v207 = v204;
    float v208 = v204[8];
    float v209 = v206 + (float)(v191 * v208);
    float v210 = (float)((float)(v195 * v199) + (float)(v194 * *v198)) + (float)(v196 * v201);
    float v211 = (float)((float)(v195 * v205) + (float)(v194 * *v204)) + (float)(v196 * v208);
    float v212 = v169[v178];
    float v213 = v202 * v212;
    float v214 = v210 * v212;
    float v215 = v169[v203];
    float v216 = v209 * v215;
    float v217 = v211 * v215;
    v299[0] = (float)(v192 - v213) - v216;
    v299[1] = (float)(v197 - v214) - v217;
    v299[2] = (float)(v192 - v213) + v216;
    v299[3] = (float)(v197 - v214) + v217;
    float v218 = v192 + v213;
    float v219 = v197 + v214;
    v299[4] = v218 + v216;
    v299[5] = v219 + v217;
    v299[6] = v218 - v216;
    v299[7] = v219 - v217;
    __int32 v220 = v168->i32[v186];
    v298[0] = v168->i32[v187];
    v298[1] = v220;
    int v221 = sub_1B6DD1648((uint64_t)v298, (char *)v299, (char *)&__src);
    if (v221 < 1) {
      return 0;
    }
    uint64_t v222 = 0;
    uint64_t v223 = 0;
    LODWORD(v224) = a10;
    float v225 = 1.0 / (float)((float)(v202 * v211) - (float)(v209 * v210));
    float v226 = v202 * v225;
    float v227 = v211 * v225;
    float v228 = -(float)(v209 * v225);
    float v229 = -(float)(v210 * v225);
    float v230 = v168->f32[v185];
    do
    {
      uint64_t v231 = 0;
      v232 = &__src + v222;
      float v233 = v232->f32[0];
      float v234 = v232->f32[1];
      float v235 = v232->f32[0] - v192;
      float v236 = (float)(v228 * (float)(v234 - v197)) + (float)(v227 * v235);
      float v237 = (float)(v226 * (float)(v234 - v197)) + (float)(v229 * v235);
      do
      {
        *(float *)((char *)&v294 + 12 * (int)v223 + v231) = (float)(*(float *)((char *)&v287 + v231)
                                                                  + (float)(v236 * v200[v231]))
                                                          + (float)(v237 * v207[v231]);
        v231 += 4;
      }
      while (v231 != 12);
      float v238 = v230
           - (float)((float)((float)(v280 * *((float *)&v294 + 3 * (int)v223 + 1))
                           + (float)(v282 * *((float *)&v294 + 3 * (int)v223)))
                   + (float)(v277 * *((float *)&v294 + 3 * (int)v223 + 2)));
      v293[(int)v223] = v238;
      if (v238 >= 0.0)
      {
        __src.f32[2 * (int)v223] = v233;
        __src.f32[2 * v223 + 1] = v234;
        uint64_t v223 = (v223 + 1);
      }
      ++v222;
    }
    while (v222 != v221);
    uint64_t v281 = v223;
    if ((int)v223 < 1) {
      return 0;
    }
    if ((int)v223 < a10) {
      LODWORD(v224) = v223;
    }
    if ((int)v224 <= 1) {
      uint64_t v224 = 1;
    }
    else {
      uint64_t v224 = v224;
    }
    uint64_t v283 = v224;
    if (v223 <= v224)
    {
      if (v83 >= 4)
      {
        uint64_t v256 = 0;
        v257 = &v294;
        do
        {
          uint64_t v258 = 0;
          float v259 = v293[v256];
          do
          {
            *(float *)&v292.i32[v258] = (float)(*(float *)((char *)v257 + v258 * 4) + v91->f32[v258])
                                      - (float)(a7->f32[v258] * v259);
            ++v258;
          }
          while (v258 != 3);
          v260.i64[0] = 0x8000000080000000;
          v260.i64[1] = 0x8000000080000000;
          float32x4_t v286 = (float32x4_t)veorq_s8(*(int8x16_t *)a7, v260);
          (*(void (**)(uint64_t, float32x4_t *, int8x16_t *, float))(*(void *)a13 + 32))(a13, &v286, &v292, -v259);
          ++v256;
          v257 = (uint64_t *)((char *)v257 + 12);
        }
        while (v256 != v281);
      }
      else
      {
        uint64_t v242 = 0;
        v243 = &v294;
        do
        {
          for (uint64_t i = 0; i != 3; ++i)
            *(float *)&v292.i32[i] = *(float *)((char *)v243 + i * 4) + v91->f32[i];
          v245.i64[0] = 0x8000000080000000;
          v245.i64[1] = 0x8000000080000000;
          int8x16_t v246 = veorq_s8(*(int8x16_t *)a7, v245);
          *(float *)v245.i32 = v293[v242];
          float32x4_t v286 = (float32x4_t)v246;
          (*(void (**)(uint64_t, float32x4_t *, int8x16_t *, float))(*(void *)a13 + 32))(a13, &v286, &v292, -*(float *)v245.i32);
          ++v242;
          v243 = (uint64_t *)((char *)v243 + 12);
        }
        while (v242 != v281);
      }
      uint64_t v283 = v281;
    }
    else
    {
      if (v223 < 2)
      {
        int v239 = 0;
      }
      else
      {
        int v239 = 0;
        float v240 = v293[0];
        uint64_t v241 = 1;
        do
        {
          if (v293[v241] > v240)
          {
            int v239 = v241;
            float v240 = v293[v241];
          }
          ++v241;
        }
        while (v223 != v241);
      }
      sub_1B6DD00D4(v223, &__src, v283, v239, &v292);
      for (uint64_t j = 0; j != v283; ++j)
      {
        uint64_t v248 = 0;
        uint64_t v249 = v292.i32[j];
        do
        {
          v286.f32[v248] = *(float *)((char *)&v294 + 12 * (int)v249 + v248 * 4) + v91->f32[v248];
          ++v248;
        }
        while (v248 != 3);
        v250.i64[0] = 0x8000000080000000;
        v250.i64[1] = 0x8000000080000000;
        if (v83 > 3)
        {
          int8x16_t v253 = veorq_s8(*(int8x16_t *)a7, v250);
          float v254 = v293[v249];
          __n128 v255 = (__n128)vsubq_f32(v286, vmulq_n_f32(*a7, v254));
          v255.n128_u32[3] = 0;
          __n128 v284 = v255;
          int8x16_t v285 = v253;
          v255.n128_f32[0] = -v254;
          (*(void (**)(uint64_t, int8x16_t *, __n128 *, __n128))(*(void *)a13 + 32))(a13, &v285, &v284, v255);
        }
        else
        {
          __n128 v251 = (__n128)veorq_s8(*(int8x16_t *)a7, v250);
          float v252 = v293[v249];
          int8x16_t v285 = (int8x16_t)v251;
          v251.n128_f32[0] = -v252;
          (*(void (**)(uint64_t, int8x16_t *, float32x4_t *, __n128))(*(void *)a13 + 32))(a13, &v285, &v286, v251);
        }
      }
    }
    *a9 = v83;
    return v283;
  }
  else
  {
    uint64_t v148 = 0;
    uint64_t v294 = a1->i64[0];
    __int32 v295 = a1->i32[2];
    float v150 = a7->f32[0];
    float v149 = a7->f32[1];
    float v151 = a7->f32[2];
    uint64_t v152 = a2;
    do
    {
      uint64_t v153 = 0;
      if ((float)((float)((float)(v149 * a2[v148 + 4]) + (float)(v150 * a2[v148])) + (float)(v151 * a2[v148 + 8])) <= 0.0) {
        float v154 = -v302.f32[v148];
      }
      else {
        float v154 = v302.f32[v148];
      }
      do
      {
        *(float *)((char *)&v294 + v153) = *(float *)((char *)&v294 + v153) + (float)(v154 * v152[v153]);
        v153 += 4;
      }
      while (v153 != 12);
      ++v148;
      ++v152;
    }
    while (v148 != 3);
    uint64_t v155 = 0;
    float32x2_t __src = *(float32x2_t *)a4->f32;
    __int32 v297 = a4->i32[2];
    float v156 = a7->f32[0];
    uint64_t v157 = a5;
    do
    {
      uint64_t v158 = 0;
      if ((float)((float)((float)(v149 * a5[v155 + 4]) + (float)(v156 * a5[v155])) + (float)(v151 * a5[v155 + 8])) <= 0.0) {
        float v159 = v300.f32[v155];
      }
      else {
        float v159 = -v300.f32[v155];
      }
      do
      {
        __src.f32[v158] = __src.f32[v158] + (float)(v159 * v157[v158 * 4]);
        ++v158;
      }
      while (v158 != 3);
      ++v155;
      ++v157;
    }
    while (v155 != 3);
    uint64_t v160 = 0;
    v290.i32[0] = 0;
    float v287 = 0.0;
    do
    {
      v299[v160] = a2[v147 / 3uLL + v160 * 4];
      ++v160;
    }
    while (v160 != 3);
    uint64_t v161 = 0;
    unsigned int v162 = v147 % 3;
    do
    {
      v293[v161] = a5[(v161 * 4) | v162];
      ++v161;
    }
    while (v161 != 3);
    sub_1B6DD0044((float *)&v294, v299, (float *)&__src, v293, (float *)&v290, &v287);
    uint64_t v163 = 0;
    float v164 = v290.f32[0];
    do
    {
      *(float *)((char *)&v294 + v163 * 4) = *(float *)((char *)&v294 + v163 * 4) + (float)(v299[v163] * v164);
      ++v163;
    }
    while (v163 != 3);
    uint64_t v165 = 0;
    float v166 = v287;
    do
    {
      __src.f32[v165] = __src.f32[v165] + (float)(v293[v165] * v166);
      ++v165;
    }
    while (v165 != 3);
    v167.i64[0] = 0x8000000080000000;
    v167.i64[1] = 0x8000000080000000;
    int8x16_t v292 = veorq_s8(*(int8x16_t *)a7, v167);
    (*(void (**)(uint64_t, int8x16_t *, float32x2_t *, float))(*(void *)a13 + 32))(a13, &v292, &__src, v279);
    *a9 = v83;
    return 1;
  }
}

uint64_t sub_1B6DD1648(uint64_t a1, char *a2, char *__src)
{
  uint64_t v3 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  LODWORD(v4) = 4;
  char v5 = 1;
  float v6 = __src;
  do
  {
    char v7 = v5;
    int v8 = -1;
    uint64_t v9 = a2;
    do
    {
      a2 = v6;
      int v10 = v8;
      if ((int)v4 >= 1)
      {
        float v11 = (float)v8;
        int v12 = v4;
        float v13 = a2;
        float v14 = v9;
        uint64_t v4 = 0;
        do
        {
          float v15 = *(float *)&v14[4 * v3];
          float v16 = v15 * v11;
          float v17 = *(float *)(a1 + 4 * v3);
          if ((float)(v15 * v11) < v17)
          {
            *(_DWORD *)float v13 = *(_DWORD *)v14;
            *((_DWORD *)v13 + 1) = *((_DWORD *)v14 + 1);
            uint64_t v4 = (v4 + 1);
            if ((v4 & 8) != 0) {
              goto LABEL_24;
            }
            v13 += 8;
            float v15 = *(float *)&v14[4 * v3];
            float v17 = *(float *)(a1 + 4 * v3);
            float v16 = v15 * v11;
          }
          if (v12 <= 1) {
            float v18 = v9;
          }
          else {
            float v18 = v14 + 8;
          }
          BOOL v19 = v16 < v17;
          float v20 = *(float *)&v18[4 * v3];
          if (v19 != (float)(v20 * v11) < v17)
          {
            *(float *)&v13[4 * (v3 ^ 1)] = *(float *)&v14[4 * (v3 ^ 1)]
                                         + (float)((float)((float)(*(float *)&v18[4 * (v3 ^ 1)]
                                                                 - *(float *)&v14[4 * (v3 ^ 1)])
                                                         / (float)(v20 - v15))
                                                 * (float)-(float)(v15 - (float)(v11 * v17)));
            *(float *)&v13[4 * v3] = *(float *)(a1 + 4 * v3) * v11;
            uint64_t v4 = (v4 + 1);
            if ((v4 & 8) != 0) {
              goto LABEL_24;
            }
            v13 += 8;
          }
          v14 += 8;
          BOOL v21 = __OFSUB__(v12--, 1);
        }
        while (!((v12 < 0) ^ v21 | (v12 == 0)));
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (a2 == __src) {
        float v6 = &v23;
      }
      else {
        float v6 = __src;
      }
      int v8 = v10 + 2;
      uint64_t v9 = a2;
    }
    while (v10 < 0);
    char v5 = 0;
    uint64_t v3 = 1;
  }
  while ((v7 & 1) != 0);
LABEL_24:
  if (a2 != __src) {
    memcpy(__src, a2, 8 * v4);
  }
  return v4;
}

uint64_t sub_1B6DD17D8(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  memset(v36, 0, sizeof(v36));
  memset(v35, 0, sizeof(v35));
  do
  {
    char v7 = &v36[v6];
    int v8 = &v35[v6];
    *(void *)char v7 = a2[v6].i64[0];
    *(void *)int v8 = a2[v6 + 4].i64[0];
    *((_DWORD *)v7 + sub_1B6DC4968((unsigned int *)this + 2) = a2[v6].i32[2];
    *((_DWORD *)v8 + sub_1B6DC4968((unsigned int *)this + 2) = a2[v6 + 4].i32[2];
    ++v6;
  }
  while (v6 != 3);
  uint64_t v9 = *(float32x4_t **)(a1 + 8);
  float32x4_t v28 = v9[3];
  double v10 = (*(double (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  unsigned int v26 = LODWORD(v10);
  double v11 = (*(double (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  unsigned int v24 = LODWORD(v11);
  *(float *)&unsigned int v12 = (*(float (**)(float32x4_t *))(v9->i64[0] + 96))(v9);
  v13.i64[0] = __PAIR64__(v24, v26);
  v13.i64[1] = v12;
  float32x4_t v14 = vaddq_f32(v28, v13);
  float32x4_t v15 = vaddq_f32(v14, v14);
  v15.i32[3] = 0;
  float32x4_t v31 = v15;
  float v16 = *(float32x4_t **)(a1 + 16);
  float32x4_t v29 = v16[3];
  unsigned int v27 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(v16->i64[0] + 96))(v16));
  unsigned int v25 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(v16->i64[0] + 96))(v16));
  *(float *)&unsigned int v17 = (*(float (**)(float32x4_t *))(v16->i64[0] + 96))(v16);
  v18.i64[0] = __PAIR64__(v25, v27);
  v18.i64[1] = v17;
  float32x4_t v19 = vaddq_f32(v29, v18);
  float32x4_t v20 = vaddq_f32(v19, v19);
  v20.i32[3] = 0;
  float32x4_t v30 = v20;
  return sub_1B6DD035C(a2 + 3, (float *)v36, (float32x2_t *)&v31, a2 + 7, (float *)v35, (float32x2_t *)&v30, &v34, &v33, &v32, 4, v22, v23, a3);
}

void sub_1B6DD1A50()
{
}

uint64_t sub_1B6DD1A64(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0FB1868;
  *(_DWORD *)(a1 + 8) = 2;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0FB10F0;
  *(void *)(a1 + 10488) = a2;
  *(void *)(a1 + 96) = sub_1B6DD1BB0;
  *(void *)(a1 + 104) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v5 = 0;
  *(void *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = v4;
  uint64_t v6 = a1 + 120;
  do
  {
    for (uint64_t i = 0; i != 36; ++i)
      *(void *)(v6 + 8 * i) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 10488) + 32))(*(void *)(a1 + 10488), v5, i);
    ++v5;
    v6 += 288;
  }
  while (v5 != 36);
  return a1;
}

void sub_1B6DD1BB0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = **a1;
  uint64_t v7 = *a1[1];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, v6, v7))
  {
    uint64_t v8 = *(void *)(v6 + 208);
    v15[0] = 0;
    v15[1] = v8;
    void v15[2] = v6;
    v15[3] = v6 + 16;
    v15[4] = -1;
    uint64_t v9 = *(void *)(v7 + 208);
    v14[0] = 0;
    v14[1] = v9;
    _OWORD v14[2] = v7;
    _WORD v14[3] = v7 + 16;
    _OWORD v14[4] = -1;
    if (a1[2]
      || (uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, void *, void))(*(void *)a2 + 16))(a2, v15, v14, 0), (a1[2] = (uint64_t *)v10) != 0))
    {
      sub_1B6DDFA60(v13, (uint64_t)v15, (uint64_t)v14);
      uint64_t v11 = *a1[2];
      if (*(_DWORD *)(a3 + 8) == 1)
      {
        (*(void (**)(void))(v11 + 16))();
      }
      else
      {
        float v12 = (*(float (**)(void))(v11 + 24))();
        if (*(float *)(a3 + 12) > v12) {
          *(float *)(a3 + 1sub_1B6DC4968((unsigned int *)this + 2) = v12;
        }
      }
    }
  }
}

double sub_1B6DD1D3C(void *a1)
{
  *a1 = &unk_1F0FB1868;
  sub_1B6441B40((uint64_t)(a1 + 2));

  return nullsub_1(a1);
}

double sub_1B6DD1D90(void *a1)
{
  *a1 = &unk_1F0FB1868;
  sub_1B6441B40((uint64_t)(a1 + 2));

  return nullsub_1(a1);
}

void sub_1B6DD1DE4(void *a1)
{
  *a1 = &unk_1F0FB1868;
  sub_1B6441B40((uint64_t)(a1 + 2));
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DD1E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ++dword_1E9E4992C;
  uint64_t v6 = (float *)&dword_1E9DDA464;
  if ((*(_DWORD *)(a1 + 8) & 2) != 0)
  {
    float v22 = (*(float (**)(void, float))(**(void **)(a2 + 208) + 40))(*(void *)(a2 + 208), *(float *)&dword_1E9DDA464);
    float v21 = (*(float (**)(void, float))(**(void **)(a3 + 208) + 40))(*(void *)(a3 + 208), *(float *)&dword_1E9DDA464);
    if (v22 >= v21) {
      uint64_t v6 = &v21;
    }
    else {
      uint64_t v6 = &v22;
    }
  }
  int v7 = *(_DWORD *)v6;
  if (*(float *)(a2 + 196) >= *(float *)(a3 + 196)) {
    int v8 = *(_DWORD *)(a3 + 196);
  }
  else {
    int v8 = *(_DWORD *)(a2 + 196);
  }
  uint64_t v9 = *(void *)(a1 + 112);
  int v10 = *(_DWORD *)(v9 + 8);
  if (v10)
  {
    uint64_t v11 = *(void *)(v9 + 16);
    *(void *)(v9 + 16) = *(void *)v11;
    *(_DWORD *)(v9 + 8) = v10 - 1;
  }
  else
  {
    if ((*(unsigned char *)(a1 + 8) & 4) != 0) {
      return 0;
    }
    uint64_t v11 = sub_1B6E073B8(832, 16);
  }
  uint64_t v12 = 0;
  *(_DWORD *)uint64_t v11 = 1025;
  do
  {
    uint64_t v13 = v11 + v12;
    *(void *)(v13 + sub_1B6DC7B98((uint64_t)this + 128) = 0;
    *(unsigned char *)(v13 + 136) = 0;
    *(_OWORD *)(v13 + 140) = 0uLL;
    *(_OWORD *)(v13 + 156) = 0uLL;
    v12 += 192;
  }
  while (v12 != 768);
  *(void *)(v11 + 784) = a2;
  *(void *)(v11 + 79sub_1B6DC4968((unsigned int *)this + 2) = a3;
  *(_DWORD *)(v11 + 800) = 0;
  *(_DWORD *)(v11 + 804) = v7;
  *(_DWORD *)(v11 + 808) = v8;
  *(void *)(v11 + 824) = 0;
  int v14 = *(_DWORD *)(a1 + 20);
  int v15 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v11 + 820) = v14;
  if (v14 == v15)
  {
    int v16 = v14 ? 2 * v14 : 1;
    if (v14 < v16)
    {
      if (v16)
      {
        uint64_t v17 = sub_1B6E073B8(8 * v16, 16);
        int v14 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        uint64_t v17 = 0;
      }
      if (v14 >= 1)
      {
        uint64_t v18 = 0;
        do
        {
          *(void *)(v17 + v18) = *(void *)(*(void *)(a1 + 32) + v18);
          v18 += 8;
        }
        while (8 * v14 != v18);
      }
      uint64_t v19 = *(void *)(a1 + 32);
      if (v19 && *(unsigned char *)(a1 + 40))
      {
        sub_1B6E073C4(v19);
        int v14 = *(_DWORD *)(a1 + 20);
      }
      *(unsigned char *)(a1 + 40) = 1;
      *(void *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v17;
      *(_DWORD *)(a1 + 24) = v16;
    }
  }
  *(void *)(*(void *)(a1 + 32) + 8 * v14) = v11;
  *(_DWORD *)(a1 + 20) = v14 + 1;
  return v11;
}

void *sub_1B6DD2068(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 800) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2 + 16;
    do
    {
      uint64_t result = sub_1B6DF3428((void *)a2, v4);
      ++v3;
      v4 += 192;
    }
    while (v3 < *(int *)(a2 + 800));
  }
  *(_DWORD *)(a2 + 800) = 0;
  return result;
}

void sub_1B6DD20C8(uint64_t a1, unint64_t a2)
{
  --dword_1E9E4992C;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v4 = *(int *)(a2 + 820);
  uint64_t v5 = *(int *)(a1 + 20) - 1;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 8 * v4);
  *(void *)(v6 + 8 * v4) = *(void *)(v6 + 8 * v5);
  *(void *)(*(void *)(a1 + 32) + 8 * v5) = v7;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8 * v4) + 820) = v4;
  *(_DWORD *)(a1 + 20) = v5;
  int v8 = *(int **)(a1 + 112);
  unint64_t v9 = *((void *)v8 + 3);
  if (v9 > a2 || v9 + *v8 * (uint64_t)v8[1] <= a2)
  {
    sub_1B6E073C4(a2);
  }
  else
  {
    *(void *)a2 = *((void *)v8 + 2);
    *((void *)v8 + sub_1B6DC4968((unsigned int *)this + 2) = a2;
    ++v8[2];
  }
}

uint64_t sub_1B6DD21AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a1;
  v6[1] = a4;
  uint64_t v4 = *(void *)(a1 + 288 * *(int *)(*(void *)(a2 + 8) + 8) + 8 * *(int *)(*(void *)(a3 + 8) + 8) + 120);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v6, a2, a3);
}

BOOL sub_1B6DD2220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 232);
  if ((v3 & 4) != 0)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL v4 = (v3 & 3) == 0 || (*(_DWORD *)(a3 + 232) & 3) == 0;
    BOOL result = (*(_DWORD *)(a3 + 232) & 4) == 0 && v4;
  }
  uint64_t v6 = *(void *)(a2 + 200);
  uint64_t v7 = *(void *)(a3 + 200);
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    BOOL v9 = (*(void *)(v7 + 16) & *(void *)(v6 + 8)) != 0 && (*(void *)(v6 + 16) & *(void *)(v7 + 8)) != 0;
    return result && v9;
  }
  return result;
}

uint64_t sub_1B6DD2294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 244);
  if (v3 == 5 || v3 == 2)
  {
    int v5 = *(_DWORD *)(a3 + 244);
    if (v5 == 2 || v5 == 5) {
      return 0;
    }
  }
  if (*(_DWORD *)(a2 + 292)) {
    return (**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, a3);
  }
  return 1;
}

uint64_t sub_1B6DD22F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = &unk_1F0FB1C98;
  v5[1] = a3;
  id v5[2] = a1;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 96))(a2, v5, a4);
}

void *sub_1B6DD2370(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  int v3 = *(_DWORD *)(v2 + 8);
  if (!v3) {
    return (void *)sub_1B6E073B8(a2, 16);
  }
  BOOL result = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = *result;
  *(_DWORD *)(v2 + 8) = v3 - 1;
  return result;
}

void sub_1B6DD23A0(uint64_t a1, void *a2)
{
  if (a2
    && (uint64_t v2 = *(int **)(a1 + 104), v3 = *((void *)v2 + 3), v3 <= (unint64_t)a2)
    && v3 + *v2 * (uint64_t)v2[1] > (unint64_t)a2)
  {
    *a2 = *((void *)v2 + 2);
    *((void *)v2 + sub_1B6DC4968((unsigned int *)this + 2) = a2;
    ++v2[2];
  }
  else
  {
    sub_1B6E073C4((uint64_t)a2);
  }
}

void sub_1B6DD23E8()
{
}

uint64_t sub_1B6DD23FC(uint64_t a1, uint64_t a2)
{
  return 0;
}

double sub_1B6DD2428(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB11B8;
  *(_OWORD *)(a1 + 176) = xmmword_1B6E4F540;
  *(void *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = 0x5D5E0B6B00000000;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6ECFD80;
  *(_OWORD *)(a1 + 248) = xmmword_1B6EB4120;
  *(_DWORD *)(a1 + 264) = 1;
  *(void *)(a1 + 27sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 280) = 1065353216;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F300;
  *(_OWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E4F320;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = xmmword_1B6E4F2E0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  return result;
}

uint64_t sub_1B6DD24CC(uint64_t result, int a2)
{
  if ((*(_DWORD *)(result + 244) & 0xFFFFFFFE) != 4) {
    *(_DWORD *)(result + 244) = a2;
  }
  return result;
}

uint64_t sub_1B6DD24E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 244) = a2;
  return result;
}

uint64_t sub_1B6DD24EC(uint64_t result, char a2)
{
  if ((a2 & 1) != 0 || (*(unsigned char *)(result + 232) & 3) == 0)
  {
    if ((*(_DWORD *)(result + 244) & 0xFFFFFFFE) != 4) {
      *(_DWORD *)(result + 244) = 1;
    }
    *(_DWORD *)(result + 248) = 0;
  }
  return result;
}

const char *sub_1B6DD2520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  for (uint64_t i = 0; i != 3; ++i)
  {
    for (uint64_t j = 0; j != 16; j += 4)
      *(_DWORD *)(a2 + v6 + j + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + v6 + j + 16);
    v6 += 16;
  }
  for (uint64_t k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + k + 80) = *(_DWORD *)(a1 + k + 64);
  uint64_t v10 = 0;
  for (uint64_t m = 0; m != 3; ++m)
  {
    for (uint64_t n = 0; n != 16; n += 4)
      *(_DWORD *)(a2 + v10 + n + 96) = *(_DWORD *)(a1 + v10 + n + 80);
    v10 += 16;
  }
  for (iuint64_t i = 0; ii != 16; ii += 4)
    *(_DWORD *)(a2 + ii + 144) = *(_DWORD *)(a1 + ii + 128);
  for (juint64_t j = 0; jj != 16; jj += 4)
    *(_DWORD *)(a2 + jj + 160) = *(_DWORD *)(a1 + jj + 144);
  for (kuint64_t k = 0; kk != 16; kk += 4)
    *(_DWORD *)(a2 + kk + 176) = *(_DWORD *)(a1 + kk + 160);
  for (muint64_t m = 0; mm != 16; mm += 4)
    *(_DWORD *)(a2 + mm + 19sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + mm + 176);
  *(_DWORD *)(a2 + 240) = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a2 + 208) = *(_DWORD *)(a1 + 196);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 208));
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 244) = *(_OWORD *)(a1 + 232);
  int32x4_t v17 = vrev64q_s32(*(int32x4_t *)(a1 + 248));
  v17.i64[0] = *(void *)(a1 + 248);
  *(int32x4_t *)(a2 + 21sub_1B6DC4968((unsigned int *)this + 2) = v17;
  *(_DWORD *)(a2 + 260) = *(_DWORD *)(a1 + 264);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, a1);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v18);
  *(void *)(a2 + 24) = v19;
  if (v19) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 96))(a3, v18);
  }
  *(void *)(a2 + 228) = *(void *)(a1 + 280);
  *(_DWORD *)(a2 + 236) = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a2 + 264) = *(_DWORD *)(a1 + 292);
  return "btCollisionObjectFloatData";
}

uint64_t sub_1B6DD2784(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, v4, 1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 40))(a1, *(void *)(v5 + 8), a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40);

  return v7(a2, v5, v6, 1245859651, a1);
}

uint64_t sub_1B6DD2880()
{
  return 1;
}

uint64_t sub_1B6DD2888(uint64_t result, uint64_t a2)
{
  *(void *)(result + 208) = a2;
  *(void *)(result + 224) = a2;
  return result;
}

uint64_t sub_1B6DD2894()
{
  return 272;
}

double sub_1B6DD289C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0FB0FC0;
  *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)&double result = 0x100000000;
  *(void *)(a1 + 5sub_1B6DC4968((unsigned int *)this + 2) = 0x100000000;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_WORD *)(a1 + 80) = 256;
  *(unsigned char *)(a1 + 8sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(_DWORD *)(a1 + 84) = 1025758986;
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 9sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 96) = a3;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
  return result;
}

uint64_t sub_1B6DD2918(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB0FC0;
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8 * i);
      uint64_t v5 = *(void *)(v4 + 200);
      if (v5)
      {
        uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 80))(v6, v5, *(void *)(a1 + 40));
        (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 96) + 24))(*(void *)(a1 + 96), v5, *(void *)(a1 + 40));
        *(void *)(v4 + 200) = 0;
        int v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  sub_1B6441B40(a1 + 8);
  return a1;
}

void sub_1B6DD2A24(uint64_t a1)
{
  sub_1B6DD2918(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DD2A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = *(_DWORD *)(a1 + 12);
  if (v10 == *(_DWORD *)(a1 + 16))
  {
    int v11 = v10 ? 2 * v10 : 1;
    if (v10 < v11)
    {
      if (v11)
      {
        uint64_t v12 = sub_1B6E073B8(8 * v11, 16);
        int v10 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (v10 >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          *(void *)(v12 + v13) = *(void *)(*(void *)(a1 + 24) + v13);
          v13 += 8;
        }
        while (8 * v10 != v13);
      }
      uint64_t v14 = *(void *)(a1 + 24);
      if (v14 && *(unsigned char *)(a1 + 32))
      {
        sub_1B6E073C4(v14);
        int v10 = *(_DWORD *)(a1 + 12);
      }
      *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
      *(void *)(a1 + 24) = v12;
      *(_DWORD *)(a1 + 16) = v11;
    }
  }
  *(void *)(*(void *)(a1 + 24) + 8 * v10) = a2;
  *(_DWORD *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = v10 + 1;
  long long v15 = *(_OWORD *)(a2 + 32);
  v20[0] = *(_OWORD *)(a2 + 16);
  v20[1] = v15;
  long long v16 = *(_OWORD *)(a2 + 64);
  v20[2] = *(_OWORD *)(a2 + 48);
  v20[3] = v16;
  (*(void (**)(void, _OWORD *, unsigned char *, unsigned char *))(**(void **)(a2 + 208) + 16))(*(void *)(a2 + 208), v20, v19, v18);
  uint64_t result = (*(uint64_t (**)(void, unsigned char *, unsigned char *, void, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96), v19, v18, *(unsigned int *)(*(void *)(a2 + 208) + 8), a2, a3, a4, a5, *(void *)(a1 + 40), 0);
  *(void *)(a2 + 200) = result;
  return result;
}

uint64_t sub_1B6DD2BE4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, uint64_t, float32x4_t *, float32x4_t *))(**(void **)(a2 + 208) + 16))(*(void *)(a2 + 208), a2 + 16, &v15, &v14);
  uint64_t v4 = (const float *)&dword_1E9DDA464;
  float32x4_t v5 = vld1q_dup_f32(v4);
  v5.i32[3] = 0;
  float32x4_t v6 = vsubq_f32(v15, v5);
  float32x4_t v15 = v6;
  float32x4_t v7 = vaddq_f32(v14, v5);
  float32x4_t v14 = v7;
  if (*(unsigned char *)(a1 + 64) && *(_DWORD *)(a2 + 264) == 2 && (*(unsigned char *)(a2 + 232) & 3) == 0)
  {
    float32x4_t v11 = v5;
    (*(void (**)(void, uint64_t, float32x4_t *, float32x4_t *))(**(void **)(a2 + 208) + 16))(*(void *)(a2 + 208), a2 + 80, &v13, &v12);
    float32x4_t v6 = vminq_f32(v15, vsubq_f32(v13, v11));
    float32x4_t v15 = v6;
    float32x4_t v7 = vmaxq_f32(v14, vaddq_f32(v11, v12));
    float32x4_t v14 = v7;
  }
  if (*(unsigned char *)(a2 + 232)) {
    return (*(uint64_t (**)(void, void, float32x4_t *, float32x4_t *, void))(**(void **)(a1 + 96)
  }
                                                                                           + 32))(*(void *)(a1 + 96), *(void *)(a2 + 200), &v15, &v14, *(void *)(a1 + 40));
  float32x4_t v8 = vsubq_f32(v7, v6);
  v8.i32[3] = 0;
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).f32[0] < 1.0e12)return (*(uint64_t (**)(void, void, float32x4_t *, float32x4_t *, void))(**(void **)(a1 + 96)+ 32))(*(void *)(a1 + 96), *(void *)(a2 + 200), &v15, &v14, *(void *)(a1 + 40)); {
  uint64_t result = sub_1B6DD24CC(a2, 5);
  }
  if ((byte_1E9E48070 & 1) == 0)
  {
    uint64_t result = *(void *)(a1 + 104);
    if (result)
    {
      byte_1E9E48070 = 1;
      (*(void (**)(uint64_t, const char *))(*(void *)result + 72))(result, "Overflow in AABB, object removed from simulation");
      (*(void (**)(void, const char *))(**(void **)(a1 + 104) + 72))(*(void *)(a1 + 104), "If you can reproduce this, please email bugs@continuousphysics.com\n");
      (*(void (**)(void, const char *))(**(void **)(a1 + 104) + 72))(*(void *)(a1 + 104), "Please include above information, your Platform, version of OS.\n");
      return (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 104) + 72))(*(void *)(a1 + 104), "Thanks.\n");
    }
  }
  return result;
}

uint64_t sub_1B6DD2E3C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 12);
  if (v1 >= 1)
  {
    uint64_t v2 = result;
    for (uint64_t i = 0; i < v1; ++i)
    {
      uint64_t v4 = *(void *)(*(void *)(v2 + 24) + 8 * i);
      if (!*(unsigned char *)(v2 + 112))
      {
        int v5 = *(_DWORD *)(v4 + 244);
        if (v5 == 2 || v5 == 5) {
          continue;
        }
      }
      uint64_t result = sub_1B6DD2BE4(v2, v4);
      int v1 = *(_DWORD *)(v2 + 12);
    }
  }
  return result;
}

uint64_t sub_1B6DD2EA8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 96) + 64))(*(void *)(a1 + 96), *(void *)(a1 + 40));
}

uint64_t sub_1B6DD2ED8(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
    uint64_t v5 = *(void *)(a1 + 40);
    float32x4_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 64);
    return v6(v3, v4, a1 + 48, v5);
  }
  return result;
}

uint64_t sub_1B6DD2FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = *(void *)(a2 + 200);
  if (v3)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 80))(v5, v3, *(void *)(a1 + 40));
    (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 96) + 24))(*(void *)(a1 + 96), v3, *(void *)(a1 + 40));
    *(void *)(a2 + 200) = 0;
  }
  return sub_1B6DD30A4(a1 + 8, &v7);
}

uint64_t sub_1B6DD30A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 4);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(result + 16);
    while (*(void *)(v4 + 8 * v3) != *a2)
    {
      if (v2 == ++v3) {
        return result;
      }
    }
    if ((int)v2 > (int)v3)
    {
      int v5 = v2 - 1;
      uint64_t v6 = *(void *)(v4 + 8 * v3);
      *(void *)(v4 + 8 * v3) = *(void *)(v4 + 8 * v5);
      *(void *)(*(void *)(result + 16) + 8 * v5) = v6;
      *(_DWORD *)(result + 4) = v5;
    }
  }
  return result;
}

double sub_1B6DD3100(float32x4_t *a1, float32x4_t *a2, void *a3, uint64_t a4)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  v8.n128_f64[0] = sub_1B6DE65E4((uint64_t)&v106);
  float v106 = &unk_1F0FB07C0;
  int v107 = 8;
  int v108 = 0;
  int v109 = 0;
  uint64_t v9 = a3[1];
  uint64_t v10 = a3[3];
  int v11 = *(_DWORD *)(v9 + 8);
  if (v11 == 28)
  {
    int32x4_t v12 = *(int32x4_t *)(v10 + 16);
    int8x16_t v13 = *(int8x16_t *)(v10 + 32);
    float32x4_t v14 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v10, v12);
    int32x2_t v15 = vzip2_s32(*(int32x2_t *)v13.i8, 0);
    unsigned __int32 v16 = vextq_s8(v13, v13, 8uLL).u32[0];
    v17.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
    v14.i64[1] = v13.u32[0];
    v13.i64[0] = 0x8000000080000000;
    v13.i64[1] = 0x8000000080000000;
    float32x4_t v18 = (float32x4_t)veorq_s8(*(int8x16_t *)(v10 + 48), v13);
    float32x4_t v19 = vmulq_f32(v14, v18);
    *(int32x2_t *)v20.f32 = vzip2_s32(*(int32x2_t *)v10, *(int32x2_t *)v12.i8);
    *(int32x2_t *)&v20.u32[2] = v15;
    int8x16_t v21 = (int8x16_t)vmulq_f32(v20, v18);
    v17.i64[1] = v16;
    int8x16_t v22 = (int8x16_t)vmulq_f32(v17, v18);
    v22.i32[3] = 0;
    *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    float32x4_t v23 = a1[3];
    float32x4_t v24 = vmulq_f32(v14, v23);
    int8x16_t v25 = (int8x16_t)vmulq_f32(v20, v23);
    int8x16_t v26 = (int8x16_t)vmulq_f32(v17, v23);
    v26.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
    *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    float32x4_t v27 = a2[3];
    int8x16_t v28 = (int8x16_t)vmulq_f32(v14, v27);
    float32x4_t v29 = vmulq_f32(v20, v27);
    int8x16_t v30 = (int8x16_t)vmulq_f32(v17, v27);
    v30.i32[3] = 0;
    *(float32x2_t *)v29.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v29.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)));
    *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 0);
    float32x4_t v31 = vaddq_f32(v19, v24);
    float32x4_t v32 = vsubq_f32(vaddq_f32(v19, v29), v31);
    v32.i32[3] = 0;
    int8x16_t v33 = (int8x16_t)vmulq_f32(v32, v32);
    float v34 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8)).f32[0]);
    float32x4_t v35 = *(float32x4_t *)(v9 + 64);
    v35.i32[3] = *(_DWORD *)(v9 + 80);
    int8x16_t v36 = (int8x16_t)vmulq_f32(v35, vmulq_n_f32(v32, 1.0 / v34));
    float v37 = vadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)).f32[0];
    if (v37 != 0.0)
    {
      int8x16_t v38 = (int8x16_t)vmulq_f32(v31, v35);
      float v39 = (float)-(float)(*(float *)(v9 + 80)
                          + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8)).f32[0])/ v37;
      if (v39 >= -0.00000011921 && v39 <= v34)
      {
        float v41 = v39 / v34;
        if (v41 < *(float *)(a4 + 8))
        {
          float v86 = (void *)a3[2];
          uint64_t v87 = 0;
          float32x4_t v88 = v35;
          *(float *)&float v89 = v41;
          (*(void (**)(uint64_t, void **, void))(*(void *)a4 + 24))(a4, &v86, 0);
        }
      }
    }
  }
  else if (v11 > 19)
  {
    if ((v11 - 21) > 8)
    {
      if (v11 == 31)
      {
        int v71 = *(uint64_t **)(v9 + 96);
        uint64_t v72 = a3[2];
        float v86 = &unk_1F0FCCC78;
        uint64_t v87 = v72;
        v88.i64[0] = v9;
        v88.i64[1] = v10;
        float v89 = a1;
        unsigned int v90 = a2;
        uint64_t v91 = a4;
        if (v71)
        {
          float32x4_t v74 = *(float32x4_t *)(v10 + 32);
          float32x4_t v73 = *(float32x4_t *)(v10 + 48);
          float32x4_t v75 = vsubq_f32(a1[3], v73);
          v75.i32[3] = 0;
          float32x4_t v76 = *(float32x4_t *)v10;
          float32x4_t v77 = *(float32x4_t *)(v10 + 16);
          v76.i32[3] = 0;
          v77.i32[3] = 0;
          v74.i32[3] = 0;
          v101[0] = vaddq_f32(vaddq_f32(vmulq_n_f32(v76, v75.f32[0]), vmulq_lane_f32(v77, *(float32x2_t *)v75.f32, 1)), vmulq_laneq_f32(v74, v75, 2));
          float32x4_t v78 = vsubq_f32(a2[3], v73);
          v78.i32[3] = 0;
          v84[0] = (__n128)vaddq_f32(vaddq_f32(vmulq_n_f32(v76, v78.f32[0]), vmulq_lane_f32(v77, *(float32x2_t *)v78.f32, 1)), vmulq_laneq_f32(v74, v78, 2));
          sub_1B6DD3894(*v71, v101, (float32x4_t *)v84, (uint64_t)&v86);
        }
        else
        {
          int v80 = *(_DWORD *)(v9 + 28);
          if (v80 >= 1)
          {
            uint64_t v81 = 0;
            do
            {
              sub_1B6DD3C88(&v86, v81, v8);
              uint64_t v81 = (v81 + 1);
            }
            while (v80 != v81);
          }
        }
      }
    }
    else
    {
      float32x4_t v46 = *(float32x4_t *)(v10 + 16);
      float32x4_t v47 = *(float32x4_t *)(v10 + 32);
      int32x2_t v48 = vzip2_s32(*(int32x2_t *)v47.f32, 0);
      unsigned __int32 v49 = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
      float32x4_t v50 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v10, (int32x4_t)v46);
      v47.i64[0] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
      v50.i64[1] = *(_OWORD *)(v10 + 32);
      v51.i64[0] = 0x8000000080000000;
      v51.i64[1] = 0x8000000080000000;
      float32x4_t v52 = (float32x4_t)veorq_s8(*(int8x16_t *)(v10 + 48), v51);
      int8x16_t v53 = (int8x16_t)vmulq_f32(v50, v52);
      *(int32x2_t *)v46.f32 = vzip2_s32(*(int32x2_t *)v10, *(int32x2_t *)v46.f32);
      *(int32x2_t *)&v46.u32[2] = v48;
      float32x4_t v54 = vmulq_f32(v46, v52);
      *(float32x2_t *)v54.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v54.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)));
      v47.i64[1] = v49;
      int8x16_t v55 = (int8x16_t)vmulq_f32(v47, v52);
      v55.i32[3] = 0;
      *(float32x2_t *)&v54.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), 0);
      float32x4_t v56 = a1[3];
      float32x4_t v57 = vmulq_f32(v50, v56);
      int8x16_t v58 = (int8x16_t)vmulq_f32(v46, v56);
      int8x16_t v59 = (int8x16_t)vmulq_f32(v47, v56);
      v59.i32[3] = 0;
      *(float32x2_t *)v57.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
      *(float32x2_t *)&v57.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
      v101[0] = vaddq_f32(v54, v57);
      float32x4_t v60 = a2[3];
      float32x4_t v61 = vmulq_f32(v50, v60);
      int8x16_t v62 = (int8x16_t)vmulq_f32(v46, v60);
      int8x16_t v63 = (int8x16_t)vmulq_f32(v47, v60);
      v63.i32[3] = 0;
      *(float32x2_t *)v61.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)));
      *(float32x2_t *)&v61.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
      v84[0] = (__n128)vaddq_f32(v54, v61);
      uint64_t v64 = a3[2];
      if (v11 == 21)
      {
        sub_1B6DF5444((uint64_t)&v86, v101, v84, *(_DWORD *)(a4 + 48));
        float v86 = &unk_1F0FCCC18;
        uint64_t v92 = a4;
        uint64_t v93 = v64;
        uint64_t v94 = v9;
        int32x4_t v95 = *(int32x4_t *)v10;
        long long v96 = *(_OWORD *)(v10 + 16);
        long long v97 = *(_OWORD *)(v10 + 32);
        long long v98 = *(_OWORD *)(v10 + 48);
        HIDWORD(v91) = *(_DWORD *)(a4 + 8);
        sub_1B6DE2D50(v9, (uint64_t)&v86, v101, (float32x4_t *)v84, COERCE_DOUBLE(__PAIR64__(DWORD1(v98), HIDWORD(v91))), v65, v66, v67, v68, v69, v70);
      }
      else
      {
        sub_1B6DF5444((uint64_t)&v86, v101, v84, *(_DWORD *)(a4 + 48));
        float v86 = &unk_1F0FCCC48;
        uint64_t v92 = a4;
        uint64_t v93 = v64;
        uint64_t v94 = v9;
        int32x4_t v95 = *(int32x4_t *)v10;
        long long v96 = *(_OWORD *)(v10 + 16);
        long long v97 = *(_OWORD *)(v10 + 32);
        long long v98 = *(_OWORD *)(v10 + 48);
        HIDWORD(v91) = *(_DWORD *)(a4 + 8);
        float32x4_t v82 = vmaxq_f32(v101[0], (float32x4_t)v84[0]);
        v83[0] = vminq_f32(v101[0], (float32x4_t)v84[0]);
        (*(void (**)(uint64_t, void **, _OWORD *, float32x4_t *))(*(void *)v9 + 128))(v9, &v86, v83, &v82);
      }
      nullsub_1(&v86);
    }
  }
  else
  {
    v101[0].i64[0] = (uint64_t)&unk_1F0FB2B98;
    uint64_t v104 = 0;
    int v105 = 0;
    float v103 = *(float *)(a4 + 8);
    int v99 = 953267991;
    char v100 = 0;
    sub_1B6DF594C(v83, (uint64_t)&v106, v9, (uint64_t)&v86);
    if (sub_1B6DF5970((uint64_t *)v83, a1, a2, (float32x4_t *)v10, (float32x4_t *)v10, (uint64_t)v101))
    {
      int8x16_t v42 = (int8x16_t)vmulq_f32(v102, v102);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)).f32[0] > 0.0001&& v103 < *(float *)(a4 + 8))
      {
        int8x16_t v43 = (int8x16_t)vmulq_f32(v102, *a1);
        float32x4_t v44 = vmulq_f32(v102, a1[1]);
        int8x16_t v45 = (int8x16_t)vmulq_f32(v102, a1[2]);
        v45.i32[3] = 0;
        *(float32x2_t *)v44.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v44.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL)));
        *(float32x2_t *)&v44.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), 0);
        *(float32x2_t *)v43.i8 = vmul_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
        float32x4_t v102 = vmulq_n_f32(v44, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), vmul_f32(*(float32x2_t *)&v44.u32[2], *(float32x2_t *)&v44.u32[2])).f32[0]));
        v84[0] = (__n128)(unint64_t)a3[2];
        v84[1] = (__n128)v102;
        float v85 = v103;
        (*(void (**)(uint64_t, __n128 *, uint64_t))(*(void *)a4 + 24))(a4, v84, 1);
      }
    }
    nullsub_1(v83);
  }
  return nullsub_1(&v106);
}

void sub_1B6DD3894(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  float32x4_t v6 = vsubq_f32(*a3, *a2);
  v6.i32[3] = 0;
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float32x4_t v65 = vmulq_n_f32(v6, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0]));
  float v8 = 1.0 / v65.f32[0];
  int8x16_t v9 = (int8x16_t)vmulq_f32(v65, v6);
  unsigned __int32 v67 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).u32[0];
  uint64_t v10 = (void *)sub_1B6E073B8(1024, 16);
  bzero(v10 + 1, 0x3F8uLL);
  v11.i32[1] = v65.i32[1];
  float v12 = *(float *)&v67;
  if (v65.f32[0] == 0.0) {
    float v8 = 1.0e18;
  }
  v11.i32[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
  int8x8_t v13 = (int8x8_t)vceqz_f32(v11);
  float32x2_t v14 = v11;
  __asm { FMOV            V1.2S, #1.0 }
  float32x2_t v20 = (float32x2_t)vbsl_s8(v13, (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D1, v14));
  int32x2_t v21 = vcltz_f32(v20);
  int8x16_t v22 = (float *)&v68[v8 < 0.0];
  float32x4_t v23 = (float *)&v68[v8 >= 0.0];
  *uint64_t v10 = a1;
  float32x4_t v24 = (float *)&v68[v21.i8[4] & 1];
  int8x16_t v25 = (float *)&v68[(v21.i8[4] & 1) == 0];
  int8x16_t v26 = (float *)&v68[v21.i8[0] & 1] + 2;
  float32x4_t v27 = (float *)&v68[(v21.i8[0] & 1) == 0] + 2;
  float v28 = v20.f32[1];
  LODWORD(v29) = 1;
  uint64_t v30 = 126;
  uint64_t v31 = 128;
  uint64_t v32 = 128;
  __int32 v66 = v20.i32[0];
  int8x16_t v62 = v24;
  int8x16_t v63 = v27;
  do
  {
    while (1)
    {
      uint64_t v33 = (int)v29;
      uint64_t v29 = (int)v29 - 1;
      uint64_t v34 = v10[v29];
      long long v35 = *(_OWORD *)(v34 + 16);
      v68[0] = *(_OWORD *)v34;
      v68[1] = v35;
      float v36 = a2->f32[1];
      float v37 = v8 * (float)(*v22 - a2->f32[0]);
      float v38 = v8 * (float)(*v23 - a2->f32[0]);
      float v39 = v28 * (float)(v24[1] - v36);
      float v40 = v28 * (float)(v25[1] - v36);
      if (v37 > v40 || v39 > v38) {
        goto LABEL_37;
      }
      if (v39 > v37) {
        float v37 = v39;
      }
      if (v40 < v38) {
        float v38 = v40;
      }
      float v42 = a2->f32[2];
      float v43 = v20.f32[0] * (float)(*v26 - v42);
      float v44 = v20.f32[0] * (float)(*v27 - v42);
      if (v37 > v44 || v43 > v38) {
        goto LABEL_37;
      }
      if (v43 <= v37) {
        float v43 = v37;
      }
      float v46 = v44 >= v38 ? v38 : v44;
      if (v43 >= v12 || v46 <= 0.0) {
        goto LABEL_37;
      }
      if (*(void *)(v34 + 48)) {
        break;
      }
      uint64_t v51 = v34;
      float32x4_t v52 = v26;
      uint64_t v53 = v31;
      uint64_t v54 = v32;
      int8x16_t v55 = v23;
      float32x4_t v56 = v22;
      uint64_t v57 = v30;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 24))(a4, v51);
      uint64_t v30 = v57;
      int8x16_t v22 = v56;
      float32x4_t v23 = v55;
      uint64_t v32 = v54;
      uint64_t v31 = v53;
      float32x4_t v24 = v62;
      float32x4_t v27 = v63;
      int8x16_t v26 = v52;
      v20.i32[0] = v66;
      float v12 = *(float *)&v67;
LABEL_37:
      if (!v29) {
        goto LABEL_46;
      }
    }
    if ((int)v29 <= (int)v30)
    {
      uint64_t v47 = v32;
    }
    else
    {
      uint64_t v47 = (2 * v32);
      if ((int)v32 <= 2 * (int)v32)
      {
        uint64_t v60 = (2 * v32);
        float32x4_t v61 = v26;
        if ((int)v32 < (int)v47 && (int)v31 < (int)v47)
        {
          int v58 = v32;
          if (v32)
          {
            uint64_t v48 = sub_1B6E073B8(8 * (int)v47, 16);
            unsigned __int32 v49 = (void *)v48;
            if (v58 >= 1)
            {
              for (uint64_t i = 0; i != v58; ++i)
                *(void *)(v48 + i * 8) = v10[i];
            }
          }
          else
          {
            unsigned __int32 v49 = 0;
          }
          sub_1B6E073C4((uint64_t)v10);
          uint64_t v47 = v60;
          int8x16_t v26 = v61;
          uint64_t v31 = v60;
          uint64_t v10 = v49;
          v20.i32[0] = v66;
          float v12 = *(float *)&v67;
          float32x4_t v27 = v63;
          LODWORD(v3sub_1B6DC4968((unsigned int *)this + 2) = v58;
        }
        if ((int)v32 < (int)v47)
        {
          unsigned int v59 = v31;
          bzero(&v10[(int)v32], 8 * (v32 - 1) + 8);
          uint64_t v47 = v60;
          int8x16_t v26 = v61;
          uint64_t v31 = v59;
          v20.i32[0] = v66;
          float v12 = *(float *)&v67;
        }
      }
      uint64_t v30 = (v47 - 2);
    }
    v10[v29] = *(void *)(v34 + 40);
    LODWORD(v29) = v33 + 1;
    v10[v33] = *(void *)(v34 + 48);
    uint64_t v32 = v47;
  }
  while (v33 != -1);
LABEL_46:

  sub_1B6E073C4((uint64_t)v10);
}

double sub_1B6DD3C88(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 40) + 96 * a2;
  uint64_t v4 = *(void *)(v3 + 64);
  float32x4_t v5 = *(float32x4_t *)v3;
  float32x4_t v6 = *(float32x4_t *)(v3 + 16);
  float32x4_t v7 = *(float32x4_t *)(v3 + 32);
  float32x4_t v8 = *(float32x4_t *)(v3 + 48);
  int8x16_t v9 = *(float32x4_t **)(a1 + 24);
  float32x4_t v10 = v9[1];
  float32x4_t v11 = v9[2];
  float32x4_t v12 = vmulq_f32(*v9, v8);
  int8x16_t v13 = (int8x16_t)vmulq_f32(v10, v8);
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  int8x16_t v14 = (int8x16_t)vmulq_f32(v11, v8);
  v14.i32[3] = 0;
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  v7.i32[3] = 0;
  v6.i32[3] = 0;
  float32x4_t v15 = vaddq_f32(v9[3], v12);
  v5.i32[3] = 0;
  v29[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(*v9)), v6, *(float32x2_t *)v9->f32, 1), v7, *v9, 2);
  v29[1] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v10.f32[0]), v6, *(float32x2_t *)v10.f32, 1), v7, v10, 2);
  float32x4_t v29[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v11.f32[0]), v6, *(float32x2_t *)v11.f32, 1), v7, v11, 2);
  v29[3] = v15;
  v26[0] = 0;
  v26[1] = v4;
  void v26[2] = v2;
  void v26[3] = v29;
  int v27 = -1;
  int v28 = a2;
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v20 = 0;
  long long v21 = xmmword_1B6E50980;
  uint64_t v22 = 0;
  float32x4_t v18 = &unk_1F0FCCCC0;
  uint64_t v24 = v16;
  int v25 = a2;
  int v19 = *(_DWORD *)(v16 + 8);
  int v23 = *(_DWORD *)(v16 + 48);
  return sub_1B6DD3100(*(float32x4_t **)(a1 + 32), *(float32x4_t **)(a1 + 40), v26, (uint64_t)&v18);
}

void sub_1B6DD3DBC(uint64_t a1, float32x4_t *a2, float32x4_t *a3, void *a4, float *a5, float a6)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a4[1];
  int8x16_t v13 = (float32x4_t *)a4[3];
  int v14 = *(_DWORD *)(v12 + 8);
  if (v14 <= 19)
  {
    v118.i64[0] = (uint64_t)&unk_1F0FB2B98;
    uint64_t v126 = 0;
    float v127 = a6;
    float v125 = a5[2];
    int v116 = 953267991;
    char v117 = 0;
    v99.i64[0] = (uint64_t)&unk_1F0FB2600;
    sub_1B6DEECEC(v100, a1, v12, (uint64_t)v105, (uint64_t)&v99);
    if ((*(unsigned int (**)(float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *))(v100[0].i64[0] + 16))(v100, a2, a3, v13, v13, &v118))
    {
      int8x16_t v15 = (int8x16_t)vmulq_f32(v123, v123);
      float v16 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0];
      if (v16 > 0.0001 && v125 < a5[2])
      {
        float32x4_t v123 = vmulq_n_f32(v123, 1.0 / sqrtf(v16));
        float32x4_t v101 = (float32x4_t)(unint64_t)a4[2];
        float32x4_t v102 = v123;
        long long v103 = v124;
        float v104 = v125;
        (*(void (**)(float *, float32x4_t *, uint64_t))(*(void *)a5 + 24))(a5, &v101, 1);
      }
    }
    float32x4_t v17 = v100;
LABEL_7:
    nullsub_1(v17);
    return;
  }
  if ((v14 - 21) > 8)
  {
    if (v14 == 31 && *(int *)(v12 + 28) >= 1)
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      do
      {
        uint64_t v54 = (float32x4_t *)(*(void *)(v12 + 40) + v52);
        float32x4_t v55 = *v54;
        float32x4_t v56 = v54[1];
        float32x4_t v57 = v54[2];
        float32x4_t v58 = v54[3];
        uint64_t v59 = v54[4].i64[0];
        v55.i32[3] = 0;
        v56.i32[3] = 0;
        float32x4_t v60 = v13[1];
        v57.i32[3] = 0;
        float32x4_t v61 = v13[2];
        float32x4_t v62 = v13[3];
        float32x4_t v63 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v60.f32[0]), v56, *(float32x2_t *)v60.f32, 1), v57, v60, 2);
        int8x16_t v64 = (int8x16_t)vmulq_f32(v58, *v13);
        float32x4_t v65 = vmulq_f32(v58, v60);
        int8x16_t v66 = (int8x16_t)vmulq_f32(v58, v61);
        v66.i32[3] = 0;
        *(float32x2_t *)v65.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v65.f32));
        *(float32x2_t *)&v65.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)), 0);
        v105[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*v13)), v56, *(float32x2_t *)v13->f32, 1), v57, *v13, 2);
        v105[1] = v63;
        v105[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v61.f32[0]), v56, *(float32x2_t *)v61.f32, 1), v57, v61, 2);
        v105[3] = vaddq_f32(v65, v62);
        long long v119 = xmmword_1B6E50980;
        v118.i64[0] = (uint64_t)&unk_1F0FCCD50;
        v120.i64[0] = 0;
        v120.i64[1] = (uint64_t)a5;
        LODWORD(v121) = v53;
        v118.f32[2] = a5[2];
        uint64_t v67 = a4[2];
        v101.i64[0] = (uint64_t)a4;
        v101.i64[1] = v59;
        v102.i64[0] = v67;
        v102.i64[1] = (uint64_t)v105;
        LODWORD(v103) = -1;
        DWORD1(v103) = v53;
        sub_1B6DD3DBC(a1, a2, a3, &v101, &v118, a6);
        ++v53;
        v52 += 96;
      }
      while (v53 < *(int *)(v12 + 28));
    }
  }
  else
  {
    if (v14 == 28)
    {
      *(void *)&v105[0] = &unk_1F0FB2B98;
      uint64_t v109 = 0;
      float v110 = a6;
      float v108 = a5[2];
      sub_1B6DEED14(&v101, a1, v12);
      if ((*(unsigned int (**)(float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *, _OWORD *))(v101.i64[0] + 16))(&v101, a2, a3, v13, v13, v105))
      {
        int8x16_t v68 = (int8x16_t)vmulq_f32(v106, v106);
        float v69 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v68.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)).f32[0];
        if (v69 > 0.0001 && v108 < a5[2])
        {
          float32x4_t v106 = vmulq_n_f32(v106, 1.0 / sqrtf(v69));
          float32x4_t v118 = (float32x4_t)(unint64_t)a4[2];
          long long v119 = (__int128)v106;
          float32x4_t v120 = v107;
          *(float *)&uint64_t v121 = v108;
          (*(void (**)(float *, float32x4_t *, uint64_t))(*(void *)a5 + 24))(a5, &v118, 1);
        }
      }
      float32x4_t v17 = &v101;
      goto LABEL_7;
    }
    float32x4_t v18 = v13[1];
    if (v14 == 21)
    {
      float32x4_t v19 = v13[2];
      float32x4_t v20 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v13, (int32x4_t)v18);
      float32x4_t v21 = *a3;
      float32x4_t v22 = a3[1];
      v21.i32[3] = 0;
      v22.i32[3] = 0;
      float32x4_t v24 = a3[2];
      float32x4_t v23 = a3[3];
      v24.i32[3] = 0;
      float32x4_t v25 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v21, *(float32x2_t *)v13->f32, 1), v22, *(float32x2_t *)v18.f32, 1), v24, *(float32x2_t *)v19.f32, 1);
      float32x4_t v26 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v21, COERCE_FLOAT(*v13)), v22, v18.f32[0]), v24, v19.f32[0]);
      v27.i64[0] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v20.i64[1] = v19.u32[0];
      v28.i64[0] = 0x8000000080000000;
      v28.i64[1] = 0x8000000080000000;
      float32x4_t v29 = (float32x4_t)veorq_s8((int8x16_t)v13[3], v28);
      int8x16_t v30 = (int8x16_t)vmulq_f32(v20, v29);
      *(int32x2_t *)v31.f32 = vzip2_s32(*(int32x2_t *)v13->f32, *(int32x2_t *)v18.f32);
      *(int32x2_t *)&v31.u32[2] = vzip2_s32(*(int32x2_t *)v19.f32, 0);
      float32x4_t v32 = vmulq_f32(v31, v29);
      *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v32.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)));
      v27.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
      int8x16_t v33 = (int8x16_t)vmulq_f32(v27, v29);
      v33.i32[3] = 0;
      *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 0);
      float32x4_t v34 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v21, *v13, 2), v22, v18, 2), v24, v19, 2);
      float32x4_t v35 = a2[3];
      float32x4_t v36 = vmulq_f32(v20, v35);
      int8x16_t v37 = (int8x16_t)vmulq_f32(v31, v35);
      int8x16_t v38 = (int8x16_t)vmulq_f32(v27, v35);
      v38.i32[3] = 0;
      *(float32x2_t *)v36.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v37.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)));
      *(float32x2_t *)&v36.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), 0);
      float32x4_t v101 = vaddq_f32(v32, v36);
      float32x4_t v39 = vmulq_f32(v20, v23);
      int8x16_t v40 = (int8x16_t)vmulq_f32(v31, v23);
      int8x16_t v41 = (int8x16_t)vmulq_f32(v27, v23);
      v41.i32[3] = 0;
      *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
      *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
      v100[0] = vaddq_f32(v32, v39);
      float32x4_t v118 = v26;
      long long v119 = (__int128)v25;
      float32x4_t v120 = v34;
      uint64_t v122 = 0;
      uint64_t v121 = 0;
      uint64_t v42 = a4[2];
      float v43 = (*(float (**)(uint64_t))(*(void *)v12 + 96))(v12);
      sub_1B6DF56CC((uint64_t)v105, a1, a2, a3, v13, v43);
      *(void *)&v105[0] = &unk_1F0FCCCF0;
      float v113 = a5;
      uint64_t v114 = v42;
      uint64_t v115 = v12;
      int v111 = *((_DWORD *)a5 + 2);
      float v112 = a6;
      double v44 = (*(double (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)a1 + 16))(a1, &v118, &v99, &v98);
      sub_1B6DE2DA0(v12, (uint64_t)v105, &v101, v100, &v99, &v98, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      float32x4_t v70 = v13[2];
      float32x4_t v71 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v13, (int32x4_t)v18);
      int32x2_t v72 = vzip2_s32(*(int32x2_t *)v70.f32, 0);
      float32x4_t v73 = *a3;
      float32x4_t v74 = a3[1];
      v73.i32[3] = 0;
      v74.i32[3] = 0;
      unsigned __int32 v75 = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u32[0];
      float32x4_t v77 = a3[2];
      float32x4_t v76 = a3[3];
      v77.i32[3] = 0;
      float32x4_t v78 = vmlaq_laneq_f32(vmulq_laneq_f32(v73, *v13, 2), v74, v18, 2);
      float32x4_t v79 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v73, *(float32x2_t *)v13->f32, 1), v74, *(float32x2_t *)v18.f32, 1), v77, *(float32x2_t *)v70.f32, 1);
      float32x4_t v80 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v73, COERCE_FLOAT(*v13)), v74, v18.f32[0]), v77, v70.f32[0]);
      float32x4_t v81 = vmlaq_laneq_f32(v78, v77, v70, 2);
      v74.i64[0] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
      v71.i64[1] = v70.u32[0];
      v70.i64[0] = 0x8000000080000000;
      v70.i64[1] = 0x8000000080000000;
      float32x4_t v82 = (float32x4_t)veorq_s8((int8x16_t)v13[3], (int8x16_t)v70);
      int8x16_t v83 = (int8x16_t)vmulq_f32(v71, v82);
      *(int32x2_t *)v84.f32 = vzip2_s32(*(int32x2_t *)v13->f32, *(int32x2_t *)v18.f32);
      *(int32x2_t *)&v84.u32[2] = v72;
      float32x4_t v85 = vmulq_f32(v84, v82);
      v74.i64[1] = v75;
      int8x16_t v86 = (int8x16_t)vmulq_f32(v74, v82);
      v86.i32[3] = 0;
      float32x4_t v87 = a2[3];
      float32x4_t v88 = vmulq_f32(v71, v87);
      int8x16_t v89 = (int8x16_t)vmulq_f32(v84, v87);
      int8x16_t v90 = (int8x16_t)vmulq_f32(v74, v87);
      v90.i32[3] = 0;
      *(float32x2_t *)v88.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v89.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)));
      *(float32x2_t *)&v88.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)), 0);
      int8x16_t v91 = (int8x16_t)vmulq_f32(v71, v76);
      float32x4_t v92 = vmulq_f32(v84, v76);
      int8x16_t v93 = (int8x16_t)vmulq_f32(v74, v76);
      v93.i32[3] = 0;
      *(float32x2_t *)v92.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v92.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL)));
      *(float32x2_t *)&v92.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)), 0);
      *(float32x2_t *)v85.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v85.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL)));
      *(float32x2_t *)&v85.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)), 0);
      float32x4_t v96 = vaddq_f32(v85, v92);
      float32x4_t v97 = vaddq_f32(v85, v88);
      float32x4_t v118 = v80;
      long long v119 = (__int128)v79;
      float32x4_t v120 = v81;
      uint64_t v122 = 0;
      uint64_t v121 = 0;
      uint64_t v94 = a4[2];
      float v95 = (*(float (**)(uint64_t))(*(void *)v12 + 96))(v12);
      sub_1B6DF56CC((uint64_t)v105, a1, a2, a3, v13, v95);
      *(void *)&v105[0] = &unk_1F0FCCD20;
      float v113 = a5;
      uint64_t v114 = v94;
      uint64_t v115 = v12;
      int v111 = *((_DWORD *)a5 + 2);
      float v112 = a6;
      (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)a1 + 16))(a1, &v118, &v101, v100);
      float32x4_t v98 = vaddq_f32(vmaxq_f32(v97, v96), v100[0]);
      float32x4_t v99 = vaddq_f32(vminq_f32(v97, v96), v101);
      (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(void *)v12 + 128))(v12, v105, &v99, &v98);
    }
    nullsub_1(v105);
  }
}

uint64_t sub_1B6DD467C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  *(float32x2_t *)&double v7 = sub_1B6DD6CB0((uint64_t)v12, a2, a3, a1, a4);
  uint64_t v8 = *(void *)(a1 + 96);
  v11[0] = 0;
  v11[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, unsigned char *, void *, void *, double))(*(void *)v8 + 48))(v8, a2, a3, v12, v11, v10, v7);
}

uint64_t sub_1B6DD470C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  long long v12 = *(_OWORD *)(a3 + 16);
  v28[0] = *(_OWORD *)a3;
  v28[1] = v12;
  long long v13 = *(_OWORD *)(a3 + 48);
  v28[2] = *(_OWORD *)(a3 + 32);
  long long v29 = v13;
  long long v14 = *(_OWORD *)(a4 + 16);
  v26[0] = *(_OWORD *)a4;
  v26[1] = v14;
  long long v15 = *(_OWORD *)(a4 + 48);
  void v26[2] = *(_OWORD *)(a4 + 32);
  long long v27 = v15;
  v25.i32[0] = 0;
  sub_1B6DD6E68(v28, (float32x2_t *)v26, v19, v25.f32);
  float32x4_t v16 = vmulq_n_f32(v19[0], v25.f32[0]);
  v16.i32[3] = 0;
  float32x4_t v23 = v16;
  float32x4_t v22 = 0uLL;
  v19[0] = (float32x4_t)xmmword_1B6E4F300;
  v19[1] = (float32x4_t)xmmword_1B6E4F320;
  v19[2] = (float32x4_t)xmmword_1B6E4F2E0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_1B6DD7060((float *)v28, &v25);
  sub_1B6548938((uint64_t)v19, &v25);
  sub_1B6DE4570(a2, (uint64_t)v19, &v22, &v23, (float32x2_t *)&v25, v24, 1.0);
  *(float32x2_t *)&double v17 = sub_1B6DD717C((uint64_t)v19, a2, (float32x4_t *)a3, (float32x4_t *)a4, a1, a5, a6);
  return (*(uint64_t (**)(void, long long *, long long *, float32x4_t *, float32x4_t *, float32x2_t *, double))(**(void **)(a1 + 96) + 48))(*(void *)(a1 + 96), &v29, &v27, v19, &v25, v24, v17);
}

uint64_t sub_1B6DD4884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t, unsigned char *, unsigned char *))(**(void **)(a2 + 208) + 16))(*(void *)(a2 + 208), a2 + 16, v9, v8);
  v7[0] = &unk_1F0FB2010;
  v7[1] = a2;
  void v7[2] = a1;
  v7[3] = a3;
  return (*(uint64_t (**)(void, unsigned char *, unsigned char *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), v9, v8, v7);
}

uint64_t sub_1B6DD494C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 208);
  v12[0] = 0;
  v12[1] = v6;
  uint64_t v12[2] = a2;
  v12[3] = a2 + 16;
  v12[4] = -1;
  uint64_t v7 = *(void *)(a3 + 208);
  v11[0] = 0;
  v11[1] = v7;
  void v11[2] = a3;
  unsigned __int16 v11[3] = a3 + 16;
  v11[4] = -1;
  uint64_t result = (*(uint64_t (**)(void, void *, void *, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), v12, v11, 0);
  if (result)
  {
    uint64_t v9 = result;
    sub_1B6DDFA60(v10, (uint64_t)v12, (uint64_t)v11);
    v10[0] = &unk_1F0FB1BD8;
    v10[6] = a4;
    (*(void (**)(uint64_t, void *, void *, uint64_t, void *))(*(void *)v9 + 16))(v9, v12, v11, a1 + 48, v10);
    (**(void (***)(uint64_t))v9)(v9);
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40), v9);
  }
  return result;
}

void sub_1B6DD4AC0(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v8 + 112))(v8, a2, 1.0);
  int v9 = a3->i32[2];
  switch(v9)
  {
    case 0:
    case 17:
      float32x4_t v167 = a3[3];
      unsigned int v163 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a3->i64[0] + 96))(a3));
      unsigned int v161 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a3->i64[0] + 96))(a3));
      *(float *)&unsigned int v10 = (*(float (**)(float32x4_t *))(a3->i64[0] + 96))(a3);
      v11.i64[0] = __PAIR64__(v161, v163);
      v11.i64[1] = v10;
      float32x4_t v173 = vaddq_f32(v167, v11);
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      v13.i64[0] = 0x8000000080000000;
      v13.i64[1] = 0x8000000080000000;
      v182[0] = (float32x4_t)veorq_s8((int8x16_t)v173, v13);
      (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v12
                                                                                                  + 144))(v12, v182, &v173, a2, a4);
      return;
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 12:
    case 14:
    case 15:
    case 16:
      goto LABEL_9;
    case 4:
      int v69 = a3[9].i32[3];
      if ((v69 + 2) > 4)
      {
        if (v69 >= 3)
        {
          uint64_t v115 = (v69 / 3);
          int v116 = (int *)(a3[10].i64[1] + 8);
          do
          {
            uint64_t v117 = a3[8].i64[1];
            float32x4_t v118 = a3[2];
            float32x4_t v119 = vmulq_f32(*(float32x4_t *)(v117 + 16 * *(v116 - 2)), v118);
            float32x4_t v120 = vmulq_f32(v118, *(float32x4_t *)(v117 + 16 * *(v116 - 1)));
            float32x4_t v121 = vmulq_f32(v118, *(float32x4_t *)(v117 + 16 * *v116));
            float32x4_t v122 = *a2;
            float32x4_t v123 = a2[1];
            float32x4_t v124 = vmulq_f32(v119, *a2);
            int8x16_t v125 = (int8x16_t)vmulq_f32(v119, v123);
            float32x4_t v126 = a2[2];
            float32x4_t v127 = a2[3];
            int8x16_t v128 = (int8x16_t)vmulq_f32(v119, v126);
            v128.i32[3] = 0;
            *(float32x2_t *)v124.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v125.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)));
            *(float32x2_t *)&v124.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v128.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL)), 0);
            float32x4_t v129 = vmulq_f32(v120, *a2);
            int8x16_t v130 = (int8x16_t)vmulq_f32(v120, v123);
            int8x16_t v131 = (int8x16_t)vmulq_f32(v120, v126);
            v131.i32[3] = 0;
            *(float32x2_t *)v129.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)), vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v130.i8));
            *(float32x2_t *)&v129.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v131.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL)), 0);
            float32x4_t v173 = vaddq_f32(v124, v127);
            float32x4_t v132 = vaddq_f32(v127, v129);
            float32x4_t v133 = vmulq_f32(v121, v122);
            int8x16_t v134 = (int8x16_t)vmulq_f32(v121, v123);
            int8x16_t v135 = (int8x16_t)vmulq_f32(v121, v126);
            v135.i32[3] = 0;
            *(float32x2_t *)v133.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL)), vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v134.i8));
            *(float32x2_t *)&v133.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v135.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL)), 0);
            float32x4_t v181 = vaddq_f32(v127, v133);
            v182[0] = v132;
            uint64_t v136 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v136 + 16))(v136, &v173, v182, a4);
            uint64_t v137 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v137 + 16))(v137, &v173, &v181, a4);
            uint64_t v138 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v138 + 16))(v138, v182, &v181, a4);
            v116 += 3;
            --v115;
          }
          while (v115);
        }
      }
      else if ((*(int (**)(float32x4_t *))(a3->i64[0] + 200))(a3) >= 1)
      {
        uint64_t v70 = 0;
        do
        {
          (*(void (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *))(a3->i64[0] + 208))(a3, v70, &v173, v182);
          float32x4_t v71 = a2[1];
          float32x4_t v72 = vmulq_f32(*a2, v173);
          int8x16_t v73 = (int8x16_t)vmulq_f32(v173, v71);
          float32x4_t v74 = a2[2];
          float32x4_t v75 = a2[3];
          int8x16_t v76 = (int8x16_t)vmulq_f32(v173, v74);
          v76.i32[3] = 0;
          *(float32x2_t *)v72.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v73.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
          *(float32x2_t *)&v72.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), 0);
          float32x4_t v77 = vmulq_f32(*a2, v182[0]);
          int8x16_t v78 = (int8x16_t)vmulq_f32(v71, v182[0]);
          int8x16_t v79 = (int8x16_t)vmulq_f32(v74, v182[0]);
          v79.i32[3] = 0;
          *(float32x2_t *)v77.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v78.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)));
          *(float32x2_t *)&v77.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), 0);
          float32x4_t v180 = vaddq_f32(v75, v77);
          float32x4_t v181 = vaddq_f32(v72, v75);
          uint64_t v80 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v80 + 16))(v80, &v181, &v180, a4);
          uint64_t v70 = (v70 + 1);
        }
        while ((int)v70 < (*(int (**)(float32x4_t *))(a3->i64[0] + 200))(a3));
      }
      return;
    case 8:
      float v81 = (*(float (**)(float32x4_t *))(a3->i64[0] + 96))(a3);
      float32x4_t v82 = *(void (**)(__n128))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1)
                                          + 32);
      v83.n128_f32[0] = v81;
      v82(v83);
      return;
    case 9:
      uint64_t v84 = a3[7].u32[3];
      if ((int)v84 >= 1)
      {
        unint64_t v85 = v84 + 1;
        do
        {
          float32x4_t v171 = *(float32x4_t *)(a3[8].i64[1] + 16 * (v85 - 2));
          uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          float v87 = *(float *)(a3[10].i64[1] + 4 * (v85 - 2));
          float32x4_t v88 = a2[1];
          float32x4_t v89 = a2[2];
          float32x4_t v90 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, v88.f32[0]), (float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)v88.f32, 1), (float32x4_t)xmmword_1B6E4F2E0, v88, 2);
          int8x16_t v91 = (int8x16_t)vmulq_f32(v171, *a2);
          int8x16_t v92 = (int8x16_t)vmulq_f32(v171, v88);
          int8x16_t v93 = (int8x16_t)vmulq_f32(v171, v89);
          v93.i32[3] = 0;
          *(float32x2_t *)v94.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)), vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v92.i8));
          *(float32x2_t *)&v94.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)), 0);
          float32x4_t v95 = vaddq_f32(v94, a2[3]);
          float32x4_t v173 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*a2)), (float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)a2->f32, 1), (float32x4_t)xmmword_1B6E4F2E0, *a2, 2);
          float32x4_t v174 = v90;
          float32x4_t v175 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, v89.f32[0]), (float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)v89.f32, 1), (float32x4_t)xmmword_1B6E4F2E0, v89, 2);
          float32x4_t v176 = v95;
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float))(*(void *)v86 + 32))(v86, &v173, a4, v87);
          --v85;
        }
        while (v85 > 1);
      }
      return;
    case 10:
      uint64_t v96 = a3[4].i32[2];
      unsigned __int32 v97 = a3[3].u32[((int)v96 + 2) % 3];
      unsigned __int32 v98 = a3[3].u32[v96];
      float32x4_t v99 = *(void (**)(__n128, __n128))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1)
                                                  + 152);
      v100.n128_u32[0] = v97;
      v101.n128_u32[0] = v98;
      goto LABEL_36;
    case 11:
      unsigned __int32 v102 = a3[4].u32[3];
      unsigned __int32 v103 = a3[5].u32[0];
      float32x4_t v99 = *(void (**)(__n128, __n128))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1)
                                                  + 168);
      v100.n128_u32[0] = v102;
      v101.n128_u32[0] = v103;
LABEL_36:
      v99(v100, v101);
      break;
    case 13:
      uint64_t v104 = a3[4].i32[2];
      float v105 = (*(float (**)(float32x4_t *))(a3->i64[0] + 184))(a3);
      float32x4_t v172 = a3[3];
      unsigned int v166 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a3->i64[0] + 96))(a3));
      unsigned int v162 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a3->i64[0] + 96))(a3));
      *(float *)&unsigned int v106 = (*(float (**)(float32x4_t *))(a3->i64[0] + 96))(a3);
      v107.i64[0] = __PAIR64__(v162, v166);
      v107.i64[1] = v106;
      float32x4_t v173 = vaddq_f32(v172, v107);
      __int32 v108 = v173.i32[v104];
      uint64_t v109 = *(void (**)(__n128, __n128))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1)
                                                   + 160);
      v110.n128_f32[0] = v105;
      v111.n128_u32[0] = v108;
      v109(v110, v111);
      break;
    default:
      if (v9 == 28)
      {
        unsigned __int32 v112 = a3[5].u32[0];
        float v113 = *(void (**)(__n128))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1)
                                             + 176);
        v114.n128_u32[0] = v112;
        v113(v114);
      }
      else if (v9 == 31)
      {
        uint64_t v14 = a3[1].u32[3];
        if ((int)v14 >= 1)
        {
          unint64_t v15 = v14 + 1;
          do
          {
            uint64_t v16 = a3[2].i64[1] + 96 * (v15 - 2);
            float32x4_t v17 = *(float32x4_t *)v16;
            float32x4_t v18 = *(float32x4_t *)(v16 + 16);
            float32x4_t v19 = *(float32x4_t *)(v16 + 32);
            float32x4_t v20 = *(float32x4_t *)(v16 + 48);
            v17.i32[3] = 0;
            uint64_t v21 = *(void *)(v16 + 64);
            v18.i32[3] = 0;
            v19.i32[3] = 0;
            float32x4_t v22 = a2[1];
            float32x4_t v23 = a2[2];
            float32x4_t v24 = vmlaq_lane_f32(vmulq_n_f32(v17, v23.f32[0]), v18, *(float32x2_t *)v23.f32, 1);
            float32x4_t v25 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, v22.f32[0]), v18, *(float32x2_t *)v22.f32, 1), v19, v22, 2);
            int8x16_t v26 = (int8x16_t)vmulq_f32(v20, *a2);
            int8x16_t v27 = (int8x16_t)vmulq_f32(v20, v23);
            v27.i32[3] = 0;
            int8x16_t v28 = (int8x16_t)vmulq_f32(v20, v22);
            float32x4_t v29 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*a2)), v18, *(float32x2_t *)a2->f32, 1), v19, *a2, 2);
            *(float32x2_t *)v18.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v28.i8));
            *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
            float32x4_t v30 = vaddq_f32(v18, a2[3]);
            float32x4_t v173 = v29;
            float32x4_t v174 = v25;
            float32x4_t v175 = vmlaq_laneq_f32(v24, v19, v23, 2);
            float32x4_t v176 = v30;
            (*(void (**)(uint64_t, float32x4_t *, uint64_t, float32x4_t *))(*(void *)a1 + 56))(a1, &v173, v21, a4);
            --v15;
          }
          while (v15 > 1);
        }
      }
      else
      {
LABEL_9:
        if (v9 <= 6)
        {
          uint64_t v31 = a3[4].i64[1];
          if (v31)
          {
            if (*(int *)(v31 + 44) >= 1)
            {
              uint64_t v32 = 0;
              do
              {
                uint64_t v33 = *(void *)(v31 + 56);
                uint64_t v34 = v33 + 48 * v32;
                int v35 = *(_DWORD *)(v34 + 4);
                int v164 = v35;
                if (v35 < 1)
                {
                  float32x4_t v38 = 0uLL;
                }
                else
                {
                  uint64_t v36 = 0;
                  int v37 = *(_DWORD *)(*(void *)(v34 + 16) + 4 * (v35 - 1));
                  float32x4_t v38 = 0uLL;
                  do
                  {
                    uint64_t v39 = *(int *)(*(void *)(v33 + 48 * v32 + 16) + 4 * v36);
                    float32x4_t v168 = vaddq_f32(v38, *(float32x4_t *)(*(void *)(v31 + 24) + 16 * v39));
                    uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
                    uint64_t v41 = *(void *)(v31 + 24);
                    float32x4_t v42 = *(float32x4_t *)(v41 + 16 * v37);
                    float32x4_t v43 = *a2;
                    float32x4_t v44 = a2[1];
                    float32x4_t v45 = vmulq_f32(*a2, v42);
                    int8x16_t v46 = (int8x16_t)vmulq_f32(v42, v44);
                    float32x4_t v47 = a2[2];
                    float32x4_t v48 = a2[3];
                    int8x16_t v49 = (int8x16_t)vmulq_f32(v42, v47);
                    v49.i32[3] = 0;
                    *(float32x2_t *)v45.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v46.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)));
                    *(float32x2_t *)&v45.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)), 0);
                    float32x4_t v173 = vaddq_f32(v45, v48);
                    float32x4_t v50 = *(float32x4_t *)(v41 + 16 * v39);
                    float32x4_t v51 = vmulq_f32(v43, v50);
                    int8x16_t v52 = (int8x16_t)vmulq_f32(v44, v50);
                    int8x16_t v53 = (int8x16_t)vmulq_f32(v47, v50);
                    v53.i32[3] = 0;
                    *(float32x2_t *)v51.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)));
                    *(float32x2_t *)&v51.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), 0);
                    v182[0] = vaddq_f32(v48, v51);
                    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v40 + 16))(v40, &v173, v182, a4);
                    float32x4_t v38 = v168;
                    ++v36;
                    uint64_t v33 = *(void *)(v31 + 56);
                    int v37 = v39;
                  }
                  while (v36 < *(int *)(v33 + 48 * v32 + 4));
                }
                float32x4_t v169 = v38;
                uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
                if (((*(uint64_t (**)(uint64_t))(*(void *)v54 + 96))(v54) & 0x4000) != 0)
                {
                  float32x4_t v173 = (float32x4_t)xmmword_1B6E4F490;
                  uint64_t v55 = *(void *)(v31 + 56) + 48 * v32;
                  v56.i64[0] = *(void *)(v55 + 32);
                  v56.i64[1] = *(unsigned int *)(v55 + 40);
                  float32x4_t v165 = vmulq_n_f32(v169, 1.0 / (float)v164);
                  float32x4_t v170 = v56;
                  uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
                  float32x4_t v58 = *a2;
                  float32x4_t v59 = a2[1];
                  float32x4_t v60 = vmulq_f32(v165, *a2);
                  int8x16_t v61 = (int8x16_t)vmulq_f32(v165, v59);
                  float32x4_t v62 = a2[2];
                  float32x4_t v63 = a2[3];
                  int8x16_t v64 = (int8x16_t)vmulq_f32(v165, v62);
                  v64.i32[3] = 0;
                  *(float32x2_t *)v60.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v61.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)));
                  *(float32x2_t *)&v60.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)), 0);
                  v182[0] = vaddq_f32(v60, v63);
                  float32x4_t v65 = vaddq_f32(v165, v170);
                  float32x4_t v66 = vmulq_f32(v65, v58);
                  int8x16_t v67 = (int8x16_t)vmulq_f32(v65, v59);
                  int8x16_t v68 = (int8x16_t)vmulq_f32(v65, v62);
                  v68.i32[3] = 0;
                  *(float32x2_t *)v66.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)), vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v67.i8));
                  *(float32x2_t *)&v66.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)), 0);
                  float32x4_t v181 = vaddq_f32(v63, v66);
                  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v57 + 16))(v57, v182, &v181, &v173);
                }
                ++v32;
              }
              while (v32 < *(int *)(v31 + 44));
            }
          }
          else if ((*(int (**)(float32x4_t *))(a3->i64[0] + 200))(a3) >= 1)
          {
            uint64_t v139 = 0;
            do
            {
              (*(void (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *))(a3->i64[0] + 208))(a3, v139, &v173, v182);
              float32x4_t v140 = a2[1];
              float32x4_t v141 = vmulq_f32(*a2, v173);
              int8x16_t v142 = (int8x16_t)vmulq_f32(v173, v140);
              float32x4_t v143 = a2[2];
              float32x4_t v144 = a2[3];
              int8x16_t v145 = (int8x16_t)vmulq_f32(v173, v143);
              v145.i32[3] = 0;
              *(float32x2_t *)v141.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v142.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL)));
              *(float32x2_t *)&v141.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v145.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL)), 0);
              float32x4_t v146 = vmulq_f32(*a2, v182[0]);
              int8x16_t v147 = (int8x16_t)vmulq_f32(v140, v182[0]);
              int8x16_t v148 = (int8x16_t)vmulq_f32(v143, v182[0]);
              v148.i32[3] = 0;
              *(float32x2_t *)v146.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v147.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL)));
              *(float32x2_t *)&v146.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v148.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL)), 0);
              float32x4_t v180 = vaddq_f32(v144, v146);
              float32x4_t v181 = vaddq_f32(v141, v144);
              uint64_t v149 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
              (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v149 + 16))(v149, &v181, &v180, a4);
              uint64_t v139 = (v139 + 1);
            }
            while ((int)v139 < (*(int (**)(float32x4_t *))(a3->i64[0] + 200))(a3));
          }
        }
        __int32 v150 = a3->i32[2];
        if ((v150 - 21) <= 8)
        {
          float32x4_t v181 = (float32x4_t)xmmword_1B6ECFDB0;
          v182[0] = (float32x4_t)xmmword_1B6ECFDA0;
          uint64_t v151 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          v173.i64[0] = (uint64_t)&unk_1F0FB1160;
          float32x4_t v152 = *a2;
          float32x4_t v153 = a2[1];
          float32x4_t v175 = *a4;
          float32x4_t v176 = v152;
          float32x4_t v154 = a2[2];
          float32x4_t v155 = a2[3];
          float32x4_t v177 = v153;
          float32x4_t v178 = v154;
          v173.i64[1] = (uint64_t)&unk_1F0FB1190;
          v174.i64[0] = v151;
          float32x4_t v179 = v155;
          (*(void (**)(float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t *))(a3->i64[0] + 128))(a3, &v173, &v181, v182);
          nullsub_1(&v173.u32[2]);
          nullsub_1(&v173);
          __int32 v150 = a3->i32[2];
        }
        if (v150 == 3)
        {
          float32x4_t v181 = (float32x4_t)xmmword_1B6ECFDB0;
          v182[0] = (float32x4_t)xmmword_1B6ECFDA0;
          uint64_t v156 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          v173.i64[0] = (uint64_t)&unk_1F0FB1160;
          float32x4_t v157 = *a2;
          float32x4_t v158 = a2[1];
          float32x4_t v175 = *a4;
          float32x4_t v176 = v157;
          float32x4_t v159 = a2[2];
          float32x4_t v160 = a2[3];
          float32x4_t v177 = v158;
          float32x4_t v178 = v159;
          v173.i64[1] = (uint64_t)&unk_1F0FB1190;
          v174.i64[0] = v156;
          float32x4_t v179 = v160;
          (*(void (**)(uint64_t, unsigned __int32 *, float32x4_t *, float32x4_t *))(*(void *)a3[7].i64[1]
                                                                                            + 16))(a3[7].i64[1], &v173.u32[2], &v181, v182);
          nullsub_1(&v173.u32[2]);
          nullsub_1(&v173);
        }
      }
      break;
  }
}

double sub_1B6DD5D48(uint64_t a1)
{
  nullsub_1(a1 + 8);

  return nullsub_1(a1);
}

uint64_t sub_1B6DD5D84(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v2) & 8) != 0)
    {
      int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 72))(*(void *)(a1 + 40));
      long long v26 = xmmword_1B6E4F490;
      if (v3 >= 1)
      {
        int v4 = v3;
        uint64_t v5 = 0;
        do
        {
          uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40), v5);
          uint64_t v7 = *(unsigned int *)(v6 + 800);
          if ((int)v7 >= 1)
          {
            uint64_t v8 = (float *)(v6 + 168);
            do
            {
              uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
              unsigned int v10 = v8 - 30;
              float32x4_t v11 = v8 - 22;
              float v12 = *(v8 - 18);
              float v13 = *v8;
              v8 += 48;
              (*(void (**)(uint64_t, float *, float *, void, long long *, float))(*(void *)v9 + 64))(v9, v10, v11, LODWORD(v13), &v26, v12);
              --v7;
            }
            while (v7);
          }
          uint64_t v5 = (v5 + 1);
        }
        while (v5 != v4);
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (result)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 96))(v15);
    if ((result & 3) != 0 && *(int *)(a1 + 12) >= 1)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 24) + 8 * v16);
        if ((*(unsigned char *)(v17 + 232) & 0x20) == 0)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1))
          {
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
            if ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 96))(v18))
            {
              switch(*(_DWORD *)(v17 + 244))
              {
                case 1:
                  long long v19 = xmmword_1B6E4F320;
                  break;
                case 2:
                  long long v19 = xmmword_1B6E87B90;
                  break;
                case 3:
                  long long v19 = xmmword_1B6E4F4B0;
                  break;
                case 5:
                  long long v19 = xmmword_1B6E4F490;
                  break;
                default:
                  long long v19 = xmmword_1B6E4F300;
                  break;
              }
              long long v26 = v19;
              (*(void (**)(uint64_t, uint64_t, void, long long *))(*(void *)a1 + 56))(a1, v17 + 16, *(void *)(v17 + 208), &v26);
            }
          }
          uint64_t result = *(void *)(a1 + 104);
          if (result)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 96))(result);
            if ((result & 2) != 0)
            {
              long long v24 = xmmword_1B6E4F300;
              (*(void (**)(void, uint64_t, long long *, float32x4_t *))(**(void **)(v17 + 208) + 16))(*(void *)(v17 + 208), v17 + 16, &v26, &v25);
              float32x4_t v20 = vld1q_dup_f32((const float *)&dword_1E9DDA464);
              v20.i32[3] = 0;
              float32x4_t v25 = vaddq_f32(v25, v20);
              long long v26 = (__int128)vsubq_f32((float32x4_t)v26, v20);
              if (*(unsigned char *)(a1 + 64) && *(_DWORD *)(v17 + 264) == 2 && (*(unsigned char *)(v17 + 232) & 3) == 0)
              {
                float32x4_t v21 = v20;
                (*(void (**)(void, uint64_t, float32x4_t *, float32x4_t *))(**(void **)(v17 + 208) + 16))(*(void *)(v17 + 208), v17 + 80, &v23, &v22);
                float32x4_t v22 = vaddq_f32(v21, v22);
                float32x4_t v23 = vsubq_f32(v23, v21);
                float32x4_t v25 = vmaxq_f32(v25, v22);
                long long v26 = (__int128)vminq_f32((float32x4_t)v26, v23);
              }
              uint64_t result = (*(uint64_t (**)(void, long long *, float32x4_t *, long long *))(**(void **)(a1 + 104)
                                                                                                + 104))(*(void *)(a1 + 104), &v26, &v25, &v24);
            }
          }
        }
        ++v16;
      }
      while (v16 < *(int *)(a1 + 12));
    }
  }
  return result;
}

void sub_1B6DD6274(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(_DWORD **)(*(void *)(a1 + 24) + 8 * i);
      if (v6[66] == 1)
      {
        (*(void (**)(_DWORD *, uint64_t))(*(void *)v6 + 48))(v6, a2);
        int v4 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  char v13 = 1;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  char v16 = 1;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  char v19 = 1;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  char v22 = 1;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 24) + 8 * v7) + 208);
      uint64_t v9 = v8;
      if (sub_1B6DD7B90((uint64_t)v10, &v8) == -1 || !v18)
      {
        uint64_t v8 = v9;
        sub_1B6DD6440((uint64_t)v10, (int *)&v8, &v9);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 120))(v9, a2);
      }
      ++v7;
    }
    while (v7 < *(int *)(a1 + 12));
    if (v21 && v22) {
      sub_1B6E073C4(v21);
    }
  }
  char v22 = 1;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  if (v18 && v19) {
    sub_1B6E073C4(v18);
  }
  char v19 = 1;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  if (v15 && v16) {
    sub_1B6E073C4(v15);
  }
  char v16 = 1;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  if (v12)
  {
    if (v13) {
      sub_1B6E073C4(v12);
    }
  }
}

void sub_1B6DD6440(uint64_t a1, int *a2, void *a3)
{
  int v6 = *a2;
  int v7 = a2[1];
  int v8 = *(_DWORD *)(a1 + 72);
  int v9 = sub_1B6DD7B90(a1, a2);
  if (v9 == -1)
  {
    int v10 = 9 * ((v7 + v6 + ~((v7 + v6) << 15)) ^ ((v7 + v6 + ~((v7 + v6) << 15)) >> 10));
    int v11 = ((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) ^ (((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) >> 16);
    int v12 = v8 - 1;
    int v13 = *(_DWORD *)(a1 + 68);
    int v14 = *(_DWORD *)(a1 + 72);
    int v15 = v13;
    if (v13 == v14)
    {
      int v16 = v13 ? 2 * v13 : 1;
      int v15 = *(_DWORD *)(a1 + 68);
      if (v13 < v16)
      {
        if (v16) {
          uint64_t v17 = sub_1B6E073B8(8 * v16, 16);
        }
        else {
          uint64_t v17 = 0;
        }
        int v15 = *(_DWORD *)(a1 + 68);
        if (v15 >= 1)
        {
          uint64_t v18 = 0;
          do
          {
            *(void *)(v17 + v18) = *(void *)(*(void *)(a1 + 80) + v18);
            v18 += 8;
          }
          while (8 * v15 != v18);
        }
        uint64_t v19 = *(void *)(a1 + 80);
        if (v19 && *(unsigned char *)(a1 + 88))
        {
          sub_1B6E073C4(v19);
          int v15 = *(_DWORD *)(a1 + 68);
        }
        *(unsigned char *)(a1 + 88) = 1;
        *(void *)(a1 + 80) = v17;
        *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v16;
      }
    }
    *(void *)(*(void *)(a1 + 80) + 8 * v15) = *a3;
    int v20 = v11 & v12;
    *(_DWORD *)(a1 + 68) = v15 + 1;
    int v21 = *(_DWORD *)(a1 + 100);
    if (v21 == *(_DWORD *)(a1 + 104))
    {
      int v22 = v21 ? 2 * v21 : 1;
      if (v21 < v22)
      {
        if (v22)
        {
          uint64_t v23 = sub_1B6E073B8(8 * v22, 16);
          int v21 = *(_DWORD *)(a1 + 100);
        }
        else
        {
          uint64_t v23 = 0;
        }
        if (v21 >= 1)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 8 * v21;
          do
          {
            *(void *)(v23 + v24) = *(void *)(*(void *)(a1 + 112) + v24);
            v24 += 8;
          }
          while (v25 != v24);
        }
        uint64_t v26 = *(void *)(a1 + 112);
        if (v26 && *(unsigned char *)(a1 + 120)) {
          sub_1B6E073C4(v26);
        }
        *(unsigned char *)(a1 + 120) = 1;
        *(void *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = v23;
        *(_DWORD *)(a1 + 104) = v22;
        int v21 = *(_DWORD *)(a1 + 100);
      }
    }
    *(void *)(*(void *)(a1 + 112) + 8 * v21) = *(void *)a2;
    ++*(_DWORD *)(a1 + 100);
    if (v14 < *(_DWORD *)(a1 + 72))
    {
      sub_1B6DD7C18(a1);
      int v27 = 9 * ((a2[1] + *a2 + ~((a2[1] + *a2) << 15)) ^ ((a2[1] + *a2 + ~((a2[1] + *a2) << 15)) >> 10));
      int v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
      int v20 = (v28 ^ (v28 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
    }
    uint64_t v29 = *(void *)(a1 + 16);
    *(_DWORD *)(*(void *)(a1 + 48) + 4 * v13) = *(_DWORD *)(v29 + 4 * v20);
    *(_DWORD *)(v29 + 4 * v20) = v13;
  }
  else
  {
    *(void *)(*(void *)(a1 + 80) + 8 * v9) = *a3;
  }
}

uint64_t sub_1B6DD669C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 64))(a2);
  sub_1B6DD6274(a1, a2);
  int v4 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 72);

  return v4(a2);
}

uint64_t sub_1B6DD6728(uint64_t result, uint64_t a2)
{
  *(void *)(result + 104) = a2;
  return result;
}

uint64_t sub_1B6DD6730(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void sub_1B6DD6744()
{
}

void sub_1B6DD6758(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DD6790(float32x4_t *a1, float32x4_t *a2, int a3, int a4, float a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int8x16_t v5 = (int8x16_t)vmulq_f32(a1[5], *a2);
  int8x16_t v6 = (int8x16_t)vmulq_f32(*a2, a1[6]);
  int8x16_t v7 = (int8x16_t)vmulq_f32(*a2, a1[7]);
  v7.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v5.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  v11[0] = a3;
  v11[1] = a4;
  int v9 = &a1[3].i8[8];
  uint64_t v8 = a1[3].i64[1];
  v12[0] = *((void *)v9 + 1);
  v12[1] = v11;
  int8x16_t v13 = v5;
  float v14 = a5;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 24))(v8, v12, 1);
}

void sub_1B6DD6860(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DD6898(float32x4_t *a1, float32x4_t *a2, int a3, int a4, float a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int8x16_t v5 = (int8x16_t)vmulq_f32(a1[5], *a2);
  int8x16_t v6 = (int8x16_t)vmulq_f32(*a2, a1[6]);
  int8x16_t v7 = (int8x16_t)vmulq_f32(*a2, a1[7]);
  v7.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v5.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  v11[0] = a3;
  v11[1] = a4;
  int v9 = &a1[3].i8[8];
  uint64_t v8 = a1[3].i64[1];
  v12[0] = *((void *)v9 + 1);
  v12[1] = v11;
  int8x16_t v13 = v5;
  float v14 = a5;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 24))(v8, v12, 1);
}

void sub_1B6DD6968()
{
}

double sub_1B6DD697C(uint64_t a1, uint64_t a2)
{
  return sub_1B6DD3C88(a1, *(_DWORD *)(a2 + 40));
}

void sub_1B6DD6988()
{
}

uint64_t sub_1B6DD699C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))();
}

uint64_t sub_1B6DD69C4(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 64);
  v5[0] = -1;
  v5[1] = v3;
  if (!*(void *)(a2 + 8)) {
    *(void *)(a2 + 8) = v5;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)(a1 + 56) + 8);
  return result;
}

void sub_1B6DD6A3C(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

float *sub_1B6DD6A74(uint64_t a1, long long *a2, long long *a3, int a4, int a5, float a6)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v9[0] = a4;
  v9[1] = a5;
  uint64_t result = *(float **)(a1 + 224);
  if (result[2] >= a6)
  {
    v10[0] = *(void *)(a1 + 232);
    v10[1] = v9;
    long long v8 = *a3;
    long long v11 = *a2;
    long long v12 = v8;
    float v13 = a6;
    return (float *)(*(uint64_t (**)(float *, void *, uint64_t))(*(void *)result + 24))(result, v10, 1);
  }
  return result;
}

void sub_1B6DD6B1C(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

float *sub_1B6DD6B54(uint64_t a1, long long *a2, long long *a3, int a4, int a5, float a6)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v9[0] = a4;
  v9[1] = a5;
  uint64_t result = *(float **)(a1 + 224);
  if (result[2] >= a6)
  {
    v10[0] = *(void *)(a1 + 232);
    v10[1] = v9;
    long long v8 = *a3;
    long long v11 = *a2;
    long long v12 = v8;
    float v13 = a6;
    return (float *)(*(uint64_t (**)(float *, void *, void))(*(void *)result + 24))(result, v10, 0);
  }
  return result;
}

void sub_1B6DD6BFC()
{
}

uint64_t sub_1B6DD6C10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
}

uint64_t sub_1B6DD6C38(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 48);
  v5[0] = -1;
  v5[1] = v3;
  if (!*(void *)(a2 + 8)) {
    *(void *)(a2 + 8) = v5;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)(a1 + 40) + 8);
  return result;
}

float32x2_t sub_1B6DD6CB0(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_1F0FB16F0;
  float32x4_t v5 = *a2;
  *(float32x4_t *)(a1 + 48) = *a2;
  float32x4_t v6 = *a3;
  *(void *)(a1 + 224) = a4;
  *(void *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = a5;
  *(float32x4_t *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = xmmword_1B6E4F300;
  *(_OWORD *)(a1 + 96) = xmmword_1B6E4F320;
  *(_OWORD *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E4F2E0;
  *(float32x4_t *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = v5;
  *(_OWORD *)(a1 + 144) = xmmword_1B6E4F300;
  *(_OWORD *)(a1 + 160) = xmmword_1B6E4F320;
  *(_OWORD *)(a1 + 176) = xmmword_1B6E4F2E0;
  *(float32x4_t *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = v6;
  float32x4_t v7 = vsubq_f32(*a3, *a2);
  v7.i32[3] = 0;
  int8x16_t v8 = (int8x16_t)vmulq_f32(v7, v7);
  float32x4_t v9 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0]));
  float v10 = 1.0e18;
  if (v9.f32[2] != 0.0) {
    float v10 = 1.0 / v9.f32[2];
  }
  *(float *)(a1 + 24) = v10;
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v16 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v9.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D5, *(float32x2_t *)v9.f32));
  *(float32x2_t *)(a1 + 16) = v16;
  *(int8x8_t *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = vand_s8((int8x8_t)vcltz_f32(v16), (int8x8_t)0x100000001);
  *(_DWORD *)(a1 + 40) = v10 < 0.0;
  float32x4_t v17 = vsubq_f32(v6, v5);
  v17.i32[3] = 0;
  int8x16_t v18 = (int8x16_t)vmulq_f32(v9, v17);
  float32x2_t result = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  *(_DWORD *)(a1 + 44) = result.i32[0];
  return result;
}

void sub_1B6DD6DB0()
{
}

BOOL sub_1B6DD6DC4(float32x4_t *a1, uint64_t *a2)
{
  int v3 = (float *)a1[14].i64[1];
  float v4 = v3[2];
  if (v4 != 0.0)
  {
    uint64_t v5 = *a2;
    if ((*(unsigned int (**)(float *, void))(*(void *)v3 + 16))(v3, *(void *)(*a2 + 200)))
    {
      uint64_t v6 = *(void *)(v5 + 208);
      uint64_t v7 = a1[14].i64[1];
      v9[0] = 0;
      v9[1] = v6;
      _DWORD v9[2] = v5;
      id v9[3] = v5 + 16;
      v9[4] = -1;
      sub_1B6DD3100(a1 + 5, a1 + 9, v9, v7);
    }
  }
  return v4 != 0.0;
}

void sub_1B6DD6E68(_OWORD *a1, float32x2_t *a2, float32x4_t *a3, float *a4)
{
  _S3 = *((_DWORD *)a1 + 6);
  _S2 = *((float *)a1 + 4);
  _Q1 = *a1;
  int32x2_t v9 = (int32x2_t)a1[2];
  float32x2_t v10 = (float32x2_t)vrev64_s32(v9);
  float32x2_t v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1, 0);
  v12.i32[1] = v11.i32[1];
  v12.i32[0] = *((_DWORD *)a1 + 5);
  long long v13 = *a1;
  *(float *)&long long v13 = _S2;
  float32x2_t v14 = vmla_f32(vmul_f32((float32x2_t)v9, vneg_f32(v12)), v10, *(float32x2_t *)&v13);
  *(int32x2_t *)&long long v13 = vdup_laneq_s32(*(int32x4_t *)a1, 2);
  v10.i32[0] = *((_DWORD *)a1 + 10);
  v11.i32[0] = _S3;
  float32x2_t v15 = vmla_f32(vmul_f32(v10, vneg_f32((float32x2_t)__PAIR64__(DWORD1(v13), LODWORD(_S2)))), (float32x2_t)__PAIR64__(v10.u32[0], v9.u32[0]), v11);
  int32x4_t v16 = *(int32x4_t *)a1;
  v16.i32[0] = _S3;
  *(float32x2_t *)v16.i8 = vneg_f32(*(float32x2_t *)v16.i8);
  LODWORD(v13) = *((_DWORD *)a1 + 5);
  v9.i32[0] = *((_DWORD *)a1 + 10);
  float32x2_t v17 = vmla_f32(vmul_f32(*(float32x2_t *)((char *)a1 + 36), *(float32x2_t *)v16.i8), (float32x2_t)v9, *(float32x2_t *)&v13);
  v18.i64[0] = __PAIR64__(v15.u32[0], v17.u32[0]);
  __asm { FMLA            S19, S3, V1.S[1] }
  v18.i64[1] = v14.u32[0];
  int8x16_t v24 = (int8x16_t)vmulq_f32(*(float32x4_t *)a1, v18);
  *(float *)v24.i32 = 1.0
                    / vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0];
  *(float32x2_t *)v25.f32 = vmul_n_f32(v17, *(float *)v24.i32);
  *(float32x2_t *)v26.f32 = vmul_n_f32(v15, *(float *)v24.i32);
  __asm { FMLA            S3, S2, V1.S[2] }
  *(float32x2_t *)v28.f32 = vmul_n_f32(v14, *(float *)v24.i32);
  v25.f32[2] = _S19 * *(float *)v24.i32;
  v26.f32[2] = _S3 * *(float *)v24.i32;
  v28.f32[2] = vmlas_n_f32(vmuls_lane_f32(_S2, *(float32x2_t *)v16.i8, 1), *(float *)&v13, COERCE_FLOAT(*a1))
             * *(float *)v24.i32;
  v25.i32[3] = 0;
  v26.i32[3] = 0;
  v28.i32[3] = 0;
  float32x4_t v29 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v26, a2[2], 1), v28, *(float32x4_t *)a2[2].f32, 2);
  float32x4_t v30 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v26, a2[4], 1), v28, *(float32x4_t *)a2[4].f32, 2);
  v42[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)a2->f32)), v26, *a2, 1), v28, *(float32x4_t *)a2->f32, 2);
  v42[1] = v29;
  v42[2] = v30;
  sub_1B6DD7060((float *)v42, &v41);
  float32x4_t v31 = vmulq_f32(v41, v41);
  v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
  float32x4_t v32 = vmulq_n_f32(v41, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0]));
  float32x4_t v40 = v32;
  float v33 = v32.f32[3];
  if (v32.f32[3] < -1.0) {
    float v33 = -1.0;
  }
  if (v33 > 1.0) {
    float v33 = 1.0;
  }
  float v34 = acosf(v33);
  *a4 = v34 + v34;
  float32x4_t v35 = v40;
  v35.i32[3] = 0;
  *a3 = v35;
  a3->i32[3] = 0;
  float32x4_t v36 = *a3;
  int8x16_t v37 = (int8x16_t)vmulq_f32(v36, v36);
  float v38 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)).f32[0];
  if (v38 >= 1.4211e-14) {
    float32x4_t v39 = vmulq_n_f32(v36, 1.0 / sqrtf(v38));
  }
  else {
    float32x4_t v39 = (float32x4_t)xmmword_1B6E4F300;
  }
  *a3 = v39;
}

float32x4_t sub_1B6DD7060(float *a1, float32x4_t *a2)
{
  float v2 = *a1;
  float v3 = a1[5];
  float v4 = a1[10];
  float v5 = (float)(*a1 + v3) + v4;
  if (v5 <= 0.0)
  {
    uint64_t v9 = v2 >= v4;
    uint64_t v8 = 2 * (v2 < v4);
    uint64_t v10 = 2;
    if (v2 < v4) {
      uint64_t v10 = 1;
    }
    uint64_t v11 = 2;
    if (v3 >= v4) {
      uint64_t v11 = 1;
    }
    if (v2 < v3)
    {
      uint64_t v8 = v11;
      uint64_t v9 = 2 * (v3 >= v4);
    }
    float32x2_t v12 = &a1[4 * v8];
    if (v2 < v3) {
      uint64_t v10 = v3 < v4;
    }
    long long v13 = &a1[4 * v9];
    float32x2_t v14 = &a1[4 * v10];
    float v5 = (float)(v12[v8] - v13[v9]) - v14[v10];
    float v15 = v13[v8];
    float v16 = v12[v9];
    v21.f32[3] = v14[v9] - v13[v10];
    float v17 = v15 + v16;
    float v18 = v14[v8];
    *(float *)((unint64_t)&v21 | (4 * v9)) = v17;
    *(float *)((unint64_t)&v21 | (4 * v10)) = v18 + v12[v10];
  }
  else
  {
    float v6 = a1[1];
    float32_t v7 = a1[2] - a1[8];
    v21.f32[0] = a1[9] - a1[6];
    v21.f32[1] = v7;
    v21.f32[2] = a1[4] - v6;
    uint64_t v8 = 3;
  }
  float v19 = v5 + 1.0;
  *(float *)((unint64_t)&v21 | (4 * vsub_1B6DBC660((uint64_t)(this + 8)) = v19;
  float32x4_t result = vmulq_n_f32(v21, 0.5 / sqrtf(v19));
  *a2 = result;
  return result;
}

float32x2_t sub_1B6DD717C(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, float a7)
{
  *(void *)a1 = &unk_1F0FB1A30;
  *(float32x4_t *)(a1 + 48) = *a3;
  *(float32x4_t *)(a1 + 64) = a3[1];
  *(float32x4_t *)(a1 + 80) = a3[2];
  float32x4_t v7 = a3[3];
  *(float32x4_t *)(a1 + 96) = v7;
  *(float32x4_t *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = *a4;
  *(float32x4_t *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = a4[1];
  *(float32x4_t *)(a1 + 144) = a4[2];
  float32x4_t v8 = a4[3];
  *(float32x4_t *)(a1 + 160) = v8;
  *(void *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = a5;
  *(void *)(a1 + 200) = a6;
  *(float *)(a1 + 208) = a7;
  *(void *)(a1 + 216) = a2;
  float32x4_t v9 = vsubq_f32(v8, v7);
  v9.i32[3] = 0;
  int8x16_t v10 = (int8x16_t)vmulq_f32(v9, v9);
  float32x4_t v11 = vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0]));
  float v12 = 1.0 / v11.f32[2];
  if (v11.f32[2] == 0.0) {
    float v12 = 1.0e18;
  }
  *(float *)(a1 + 24) = v12;
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v11.f32), (int8x8_t)vdup_n_s32(0x5D5E0B6Bu), (int8x8_t)vdiv_f32(_D4, *(float32x2_t *)v11.f32));
  *(float32x2_t *)(a1 + 16) = v18;
  *(int8x8_t *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = vand_s8((int8x8_t)vcltz_f32(v18), (int8x8_t)0x100000001);
  *(_DWORD *)(a1 + 40) = v12 < 0.0;
  int8x16_t v19 = (int8x16_t)vmulq_f32(v11, v9);
  float32x2_t result = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  *(_DWORD *)(a1 + 44) = result.i32[0];
  return result;
}

void sub_1B6DD727C()
{
}

BOOL sub_1B6DD7290(float32x4_t *a1, uint64_t *a2)
{
  float v3 = (float *)a1[12].i64[1];
  float v4 = v3[2];
  if (v4 != 0.0)
  {
    uint64_t v5 = *a2;
    if ((*(unsigned int (**)(float *, void))(*(void *)v3 + 16))(v3, *(void *)(*a2 + 200)))
    {
      uint64_t v6 = a1[13].i64[1];
      uint64_t v7 = *(void *)(v5 + 208);
      float32x4_t v8 = (float *)a1[12].i64[1];
      float v9 = a1[13].f32[0];
      v11[0] = 0;
      v11[1] = v7;
      _DWORD v11[2] = v5;
      unsigned __int16 v11[3] = v5 + 16;
      v11[4] = -1;
      sub_1B6DD3DBC(v6, a1 + 3, a1 + 7, v11, v8, v9);
    }
  }
  return v4 != 0.0;
}

void sub_1B6DD733C()
{
}

uint64_t sub_1B6DD7350(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 != a1[1])
  {
    if ((*(unsigned int (**)(void, void))(*(void *)a1[3] + 16))(a1[3], *(void *)(v2 + 200)))
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = a1[2];
      uint64_t v6 = *(void *)(v4 + 208);
      v14[0] = 0;
      v14[1] = v6;
      _OWORD v14[2] = v4;
      _WORD v14[3] = v4 + 16;
      _OWORD v14[4] = -1;
      uint64_t v7 = *(void *)(v2 + 208);
      v13[0] = 0;
      v13[1] = v7;
      v13[2] = v2;
      _WORD v13[3] = v2 + 16;
      v13[4] = -1;
      uint64_t v8 = (*(uint64_t (**)(void, void *, void *, void))(**(void **)(v5 + 40) + 16))(*(void *)(v5 + 40), v14, v13, 0);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = a1[3];
        sub_1B6DDFA60(v12, (uint64_t)v14, (uint64_t)v13);
        v12[0] = &unk_1F0FB1BD8;
        v12[6] = v10;
        (*(void (**)(uint64_t, void *, void *, uint64_t, void *))(*(void *)v9 + 16))(v9, v14, v13, a1[2] + 48, v12);
        (**(void (***)(uint64_t))v9)(v9);
        (*(void (**)(void, uint64_t))(**(void **)(a1[2] + 40) + 120))(*(void *)(a1[2] + 40), v9);
      }
    }
  }
  return 1;
}

void sub_1B6DD7510()
{
}

uint64_t sub_1B6DD7524(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

uint64_t sub_1B6DD7530(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 36) = a2;
  *(_DWORD *)(result + 44) = a3;
  return result;
}

uint64_t sub_1B6DD753C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 784);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 16);
  float32x4_t v6 = *a2;
  float32x4_t v7 = vmulq_n_f32(*a2, a4);
  v7.i32[3] = 0;
  float32x4_t v8 = *a3;
  float32x4_t v9 = vaddq_f32(*a3, v7);
  if (v4 == v5)
  {
    int8x16_t v30 = *(int8x16_t *)(v4 + 48);
    float32x4_t v31 = vsubq_f32(v9, *(float32x4_t *)(v4 + 64));
    float32x4_t v32 = *(float32x4_t *)(v4 + 16);
    int32x4_t v33 = *(int32x4_t *)(v4 + 32);
    float32x4_t v34 = (float32x4_t)vtrn1q_s32((int32x4_t)v32, v33);
    v35.i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v35.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
    int8x16_t v36 = (int8x16_t)vmulq_f32(v35, v31);
    v31.i32[3] = 0;
    *(int32x2_t *)v32.f32 = vzip2_s32(*(int32x2_t *)v32.f32, *(int32x2_t *)v33.i8);
    v34.i64[1] = v30.u32[0];
    *(int32x2_t *)&v32.u32[2] = vzip2_s32(*(int32x2_t *)v30.i8, 0);
    int8x16_t v37 = (int8x16_t)vmulq_f32(v34, v31);
    int8x16_t v38 = (int8x16_t)vmulq_f32(v32, v31);
    v36.i32[3] = 0;
    *(float32x2_t *)v33.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
    uint64_t v39 = *(void *)(*(void *)(a1 + 24) + 16);
    int8x16_t v40 = *(int8x16_t *)(v39 + 48);
    float32x4_t v41 = vsubq_f32(v8, *(float32x4_t *)(v39 + 64));
    float32x4_t v42 = *(float32x4_t *)(v39 + 16);
    float32x4_t v43 = *(float32x4_t *)(v39 + 32);
    float32x4_t v44 = (float32x4_t)vtrn1q_s32((int32x4_t)v42, (int32x4_t)v43);
    *(int32x2_t *)v42.f32 = vzip2_s32(*(int32x2_t *)v42.f32, *(int32x2_t *)v43.f32);
    v43.i64[0] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
    *(float32x2_t *)&long long v26 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v38.i8));
    *((void *)&v26 + 1) = v33.i64[0];
    v41.i32[3] = 0;
    v44.i64[1] = v40.u32[0];
    *(int32x2_t *)&v42.u32[2] = vzip2_s32(*(int32x2_t *)v40.i8, 0);
    v43.i64[1] = vextq_s8(v40, v40, 8uLL).u32[0];
    int8x16_t v27 = (int8x16_t)vmulq_f32(v44, v41);
    int8x16_t v28 = (int8x16_t)vmulq_f32(v42, v41);
    int8x16_t v29 = (int8x16_t)vmulq_f32(v43, v41);
  }
  else
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 24) + 16);
    int8x16_t v11 = *(int8x16_t *)(v10 + 48);
    float32x4_t v12 = vsubq_f32(v9, *(float32x4_t *)(v10 + 64));
    float32x4_t v13 = *(float32x4_t *)(v10 + 16);
    float32x4_t v14 = *(float32x4_t *)(v10 + 32);
    float32x4_t v15 = (float32x4_t)vtrn1q_s32((int32x4_t)v13, (int32x4_t)v14);
    *(int32x2_t *)v13.f32 = vzip2_s32(*(int32x2_t *)v13.f32, *(int32x2_t *)v14.f32);
    v14.i64[0] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    float32x4_t v16 = v12;
    v16.i32[3] = 0;
    v15.i64[1] = v11.u32[0];
    *(int32x2_t *)&v13.u32[2] = vzip2_s32(*(int32x2_t *)v11.i8, 0);
    v14.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
    int8x16_t v17 = (int8x16_t)vmulq_f32(v14, v12);
    int8x16_t v18 = (int8x16_t)vmulq_f32(v15, v16);
    int8x16_t v19 = (int8x16_t)vmulq_f32(v13, v16);
    v17.i32[3] = 0;
    *(float32x2_t *)v15.f32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
    int8x16_t v20 = *(int8x16_t *)(v5 + 48);
    float32x4_t v21 = vsubq_f32(v8, *(float32x4_t *)(v5 + 64));
    int32x4_t v22 = *(int32x4_t *)(v5 + 16);
    float32x4_t v23 = *(float32x4_t *)(v5 + 32);
    float32x4_t v24 = (float32x4_t)vtrn1q_s32(v22, (int32x4_t)v23);
    *(int32x2_t *)v23.f32 = vzip2_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v23.f32);
    v25.i64[0] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    *(float32x2_t *)&long long v26 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8));
    *((void *)&v26 + 1) = v15.i64[0];
    v21.i32[3] = 0;
    v24.i64[1] = v20.u32[0];
    *(int32x2_t *)&v23.u32[2] = vzip2_s32(*(int32x2_t *)v20.i8, 0);
    v25.i64[1] = vextq_s8(v20, v20, 8uLL).u32[0];
    int8x16_t v27 = (int8x16_t)vmulq_f32(v24, v21);
    int8x16_t v28 = (int8x16_t)vmulq_f32(v23, v21);
    int8x16_t v29 = (int8x16_t)vmulq_f32(v25, v21);
  }
  v29.i32[3] = 0;
  *(float32x2_t *)&long long v45 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v28.i8));
  *((float32x2_t *)&v45 + 1) = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
  v56[0] = v26;
  v56[1] = v45;
  v56[3] = v9;
  v56[4] = v6;
  float v57 = a4;
  uint64_t v58 = 0;
  int v59 = 0;
  uint64_t v64 = 0;
  char v65 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  v56[2] = v8;
  if (v4 == v5)
  {
    int8x16_t v46 = (int *)(a1 + 32);
    float32x4_t v47 = (int *)(a1 + 36);
    float32x4_t v48 = (int *)(a1 + 40);
    int8x16_t v49 = (int *)(a1 + 44);
  }
  else
  {
    int8x16_t v46 = (int *)(a1 + 36);
    float32x4_t v47 = (int *)(a1 + 32);
    float32x4_t v48 = (int *)(a1 + 44);
    int8x16_t v49 = (int *)(a1 + 40);
  }
  int v50 = *v49;
  int v51 = *v48;
  int v52 = *v47;
  int v60 = *v46;
  int v61 = v52;
  if (v4 == v5) {
    uint64_t v53 = 16;
  }
  else {
    uint64_t v53 = 24;
  }
  uint64_t v54 = *(void *)(a1 + v53);
  int v62 = v51;
  int v63 = v50;
  return (*(uint64_t (**)(void, _OWORD *, uint64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v56, v54);
}

void sub_1B6DD77E4(uint64_t a1)
{
  nullsub_1(a1 + 8);
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DD7834(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v3 = a1[3];
  float32x4_t v4 = a1[4];
  float32x4_t v5 = a2[1];
  float32x4_t v6 = vmulq_f32(v3, *a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(*a2, v4);
  float32x4_t v8 = a1[5];
  float32x4_t v9 = a1[6];
  int8x16_t v10 = (int8x16_t)vmulq_f32(*a2, v8);
  v10.i32[3] = 0;
  *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
  float32x4_t v11 = vaddq_f32(v6, v9);
  float32x4_t v12 = vmulq_f32(v3, v5);
  int8x16_t v13 = (int8x16_t)vmulq_f32(v4, v5);
  int8x16_t v14 = (int8x16_t)vmulq_f32(v8, v5);
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  float32x4_t v36 = vaddq_f32(v9, v12);
  float32x4_t v37 = v11;
  float32x4_t v15 = a2[2];
  float32x4_t v16 = vmulq_f32(v3, v15);
  int8x16_t v17 = (int8x16_t)vmulq_f32(v4, v15);
  int8x16_t v18 = (int8x16_t)vmulq_f32(v8, v15);
  v18.i32[3] = 0;
  *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  float32x4_t v35 = vaddq_f32(v9, v16);
  float32x4_t v19 = vmulq_f32(vaddq_f32(vaddq_f32(v11, v36), v35), (float32x4_t)vdupq_n_s32(0x3EAAAAABu));
  v19.i32[3] = 0;
  float32x4_t v30 = v19;
  float32x4_t v31 = v11;
  float32x4_t v34 = v19;
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1[1].i64[0] + 96))(a1[1].i64[0]) & 0x4000) != 0)
  {
    float32x4_t v20 = vsubq_f32(v36, v31);
    int8x8_t v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v20.i32[3] = 0;
    float32x4_t v22 = vsubq_f32(v35, v31);
    int8x8_t v23 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    v22.i32[3] = 0;
    *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
    v24.i64[1] = v20.i64[0];
    *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v22.f32, v23, 4uLL);
    v25.i64[1] = v22.i64[0];
    int8x16_t v26 = (int8x16_t)vsubq_f32(vmulq_f32(v25, v20), vmulq_f32(v24, v22));
    v24.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
    v24.i64[1] = v26.u32[0];
    int8x16_t v27 = (int8x16_t)vmulq_f32(v24, v24);
    uint64_t v28 = a1[1].i64[0];
    float32x4_t v32 = vaddq_f32(vmulq_n_f32(v24, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0])), v30);
    long long v33 = xmmword_1B6E4F490;
    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, long long *))(*(void *)v28 + 16))(v28, &v34, &v32, &v33);
  }
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)a1[1].i64[0] + 16))(a1[1].i64[0], &v37, &v36, a1 + 2);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)a1[1].i64[0] + 16))(a1[1].i64[0], &v36, &v35, a1 + 2);
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)a1[1].i64[0] + 16))(a1[1].i64[0], &v35, &v37, a1 + 2);
}

uint64_t sub_1B6DD7AC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

double sub_1B6DD7AE8(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  nullsub_1(a1);

  return nullsub_1(v1);
}

void sub_1B6DD7B20(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  nullsub_1(a1);
  nullsub_1(v1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DD7B6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 8) + 16))();
}

uint64_t sub_1B6DD7B90(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  int v4 = a2[1] + *a2 + ~((a2[1] + *a2) << 15);
  int v5 = (9 * (v4 ^ (v4 >> 10))) ^ ((9 * (v4 ^ (v4 >> 10))) >> 6);
  int v6 = ((v5 + ~(v5 << 11)) ^ ((v5 + ~(v5 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v6 < *(_DWORD *)(a1 + 4))
  {
    uint64_t result = *(unsigned int *)(*(void *)(a1 + 16) + 4 * v6);
    if (result == -1)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      while (*(void *)a2 != *(void *)(*(void *)(a1 + 112) + 8 * (int)result))
      {
        uint64_t result = *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)result);
        if (result == -1) {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return result;
}

void sub_1B6DD7C18(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 72);
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1) {
    return;
  }
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if (v1)
    {
      uint64_t v4 = sub_1B6E073B8(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      uint64_t v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    uint64_t v6 = *(void *)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(unsigned char *)(a1 + 24) = 1;
        *(void *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v5 = v5;
      int8x16_t v7 = (_DWORD *)v4;
      float32x4_t v8 = *(int **)(a1 + 16);
      do
      {
        int v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(unsigned char *)(a1 + 24)) {
      sub_1B6E073C4(v6);
    }
    *(void *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(void *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  int v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(void *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if (v1) {
      uint64_t v11 = sub_1B6E073B8(4 * (int)v1, 16);
    }
    else {
      uint64_t v11 = 0;
    }
    LODWORD(v1sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + 36);
    uint64_t v13 = *(void *)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(unsigned char *)(a1 + 56) = 1;
        *(void *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v12 = v12;
      int8x16_t v14 = (_DWORD *)v11;
      float32x4_t v15 = *(int **)(a1 + 48);
      do
      {
        int v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(unsigned char *)(a1 + 56)) {
      sub_1B6E073C4(v13);
    }
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 48);
    float32x4_t v20 = (_DWORD *)(*(void *)(a1 + 112) + 4);
    do
    {
      int v21 = *v20 + *(v20 - 1) + ~((*v20 + *(v20 - 1)) << 15);
      int v22 = (9 * (v21 ^ (v21 >> 10))) ^ ((9 * (v21 ^ (v21 >> 10))) >> 6);
      int v23 = ((v22 + ~(v22 << 11)) ^ ((v22 + ~(v22 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * v23);
      *(_DWORD *)(v18 + 4 * v23) = v17++;
      v20 += 2;
    }
    while (v2 != v17);
  }
}

void *sub_1B6DD7E50(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = sub_1B6DCFC30(a1, a2);
  *int v10 = &unk_1F0FB24C8;
  *((unsigned char *)v10 + 40) = 1;
  unsigned char v10[4] = 0;
  *((_DWORD *)v10 + 5) = 0;
  *((_DWORD *)v10 + 6) = 0;
  *((unsigned char *)v10 + 48) = a5;
  void v10[7] = a2[1];
  *((unsigned char *)v10 + 64) = 0;
  if (a5) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = a3;
  }
  *((_DWORD *)v10 + 17) = *(_DWORD *)(*(void *)(v11 + 8) + 104);
  sub_1B6DD7EF4((uint64_t)v10, a3, a4);
  return a1;
}

void sub_1B6DD7EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v4 = a3;
  }
  else {
    uint64_t v4 = a2;
  }
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a3;
  }
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 28);
  int v8 = *(_DWORD *)(a1 + 20);
  if (v8 < (int)v7)
  {
    uint64_t v9 = v8;
    if (*(_DWORD *)(a1 + 24) < (int)v7)
    {
      if (v7)
      {
        uint64_t v10 = sub_1B6E073B8(8 * (int)v7, 16);
        int v8 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (v8 >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 8 * v8;
        do
        {
          *(void *)(v10 + v11) = *(void *)(*(void *)(a1 + 32) + v11);
          v11 += 8;
        }
        while (v12 != v11);
      }
      uint64_t v13 = *(void *)(a1 + 32);
      if (v13 && *(unsigned char *)(a1 + 40)) {
        sub_1B6E073C4(v13);
      }
      *(unsigned char *)(a1 + 40) = 1;
      *(void *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v10;
      *(_DWORD *)(a1 + 24) = v7;
    }
    do
      *(void *)(*(void *)(a1 + 32) + 8 * v9++) = 0;
    while ((int)v7 != v9);
  }
  *(_DWORD *)(a1 + 20) = v7;
  if ((int)v7 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 64;
    do
    {
      if (*(void *)(v6 + 96))
      {
        *(void *)(*(void *)(a1 + 32) + 8 * v14) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(*(void *)(v6 + 40) + v15);
        v17[0] = v4;
        v17[1] = v16;
        long long v18 = *(_OWORD *)(v4 + 16);
        int v19 = -1;
        int v20 = v14;
        *(void *)(*(void *)(a1 + 32) + 8 * v14) = (*(uint64_t (**)(void, void *, uint64_t, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v17, v5, *(void *)(a1 + 56));
      }
      ++v14;
      v15 += 96;
    }
    while (v7 != v14);
  }
}

uint64_t sub_1B6DD8080(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 20);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = 8 * v1;
    do
    {
      uint64_t result = *(void *)(*(void *)(v2 + 32) + v3);
      if (result)
      {
        (**(void (***)(uint64_t))result)(result);
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v2 + 8) + 120))(*(void *)(v2 + 8), *(void *)(*(void *)(v2 + 32) + v3));
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
  return result;
}

double sub_1B6DD8128(void *a1)
{
  *a1 = &unk_1F0FB24C8;
  uint64_t v2 = (uint64_t)(a1 + 2);
  sub_1B6DD8080((uint64_t)a1);
  sub_1B6441B40(v2);

  return nullsub_1(a1);
}

void sub_1B6DD818C(void *a1)
{
  sub_1B6DD8128(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DD81C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = a2;
  }
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a3;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  if (*(_DWORD *)(v10 + 104) != *(_DWORD *)(a1 + 68))
  {
    sub_1B6DD8080(a1);
    sub_1B6DD7EF4(a1, a2, a3);
  }
  uint64_t v13 = *(uint64_t **)(v10 + 96);
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 56);
  v83[0] = &unk_1F0FB1B68;
  v83[1] = v8;
  _OWORD v83[2] = v9;
  v83[3] = v14;
  v83[4] = a4;
  v83[5] = a5;
  v83[6] = v15;
  v83[7] = v16;
  v78.i8[8] = 1;
  v78.i64[0] = 0;
  *(uint64_t *)((char *)v77.i64 + 4) = 0;
  int v17 = *(_DWORD *)(a1 + 20);
  if (v17 >= 1)
  {
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 8 * v18);
      if (v19) {
        break;
      }
LABEL_31:
      if (++v18 >= v17)
      {
        if (v78.i64[0]) {
          BOOL v26 = v78.u8[8] == 0;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26) {
          sub_1B6E073C4(v78.i64[0]);
        }
        goto LABEL_37;
      }
    }
    (*(void (**)(uint64_t, float32x4_t *))(*(void *)v19 + 32))(v19, &v77);
    int v20 = v77.i32[1];
    if (v77.i32[1] < 1) {
      goto LABEL_22;
    }
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = *(void *)(v78.i64[0] + 8 * v21);
      if (*(_DWORD *)(v22 + 800))
      {
        a5[1] = v22;
        int v23 = *(float32x4_t **)(v22 + 784);
        float32x4_t v24 = *(float32x4_t **)(a5[2] + 16);
        if (v23 == v24) {
          float32x4_t v24 = *(float32x4_t **)(a5[3] + 16);
        }
        else {
          int v23 = *(float32x4_t **)(a5[3] + 16);
        }
        sub_1B6DF3CF4((void *)v22, v23 + 1, v24 + 1);
        a5[1] = 0;
        int v20 = v77.i32[1];
      }
      ++v21;
    }
    while (v21 < v20);
    if (v20 <= 0)
    {
LABEL_22:
      if (v20 && v77.i32[2] < 0)
      {
        if (v78.i64[0] && v78.i8[8]) {
          sub_1B6E073C4(v78.i64[0]);
        }
        v78.i8[8] = 1;
        v78.i64[0] = 0;
        v77.i32[2] = 0;
        goto LABEL_28;
      }
      if (v20 < 0)
      {
LABEL_28:
        uint64_t v25 = v20;
        do
          *(void *)(v78.i64[0] + 8 * v25++) = 0;
        while (v25);
      }
    }
    v77.i32[1] = 0;
    int v17 = *(_DWORD *)(a1 + 20);
    goto LABEL_31;
  }
LABEL_37:
  if (v13)
  {
    uint64_t v27 = *(void *)(v8 + 24);
    float32x4_t v28 = *(float32x4_t *)v27;
    float32x4_t v29 = *(float32x4_t *)(v27 + 16);
    float32x4_t v31 = *(float32x4_t *)(v27 + 32);
    int8x16_t v30 = *(int8x16_t *)(v27 + 48);
    float32x4_t v32 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v27, (int32x4_t)v29);
    int32x2_t v33 = vzip2_s32(*(int32x2_t *)v31.f32, 0);
    unsigned __int32 v34 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
    float32x4_t v35 = *(float32x4_t **)(v9 + 24);
    float32x4_t v36 = *v35;
    float32x4_t v37 = v35[1];
    v36.i32[3] = 0;
    v37.i32[3] = 0;
    float32x4_t v38 = v35[2];
    float32x4_t v39 = v35[3];
    v38.i32[3] = 0;
    float32x4_t v40 = vmlaq_laneq_f32(vmulq_laneq_f32(v36, v28, 2), v37, v29, 2);
    float32x4_t v41 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v36, *(float32x2_t *)v28.f32, 1), v37, *(float32x2_t *)v29.f32, 1), v38, *(float32x2_t *)v31.f32, 1);
    float32x4_t v42 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, v28.f32[0]), v37, v29.f32[0]), v38, v31.f32[0]);
    float32x4_t v43 = vmlaq_laneq_f32(v40, v38, v31, 2);
    v37.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v32.i64[1] = v31.u32[0];
    v31.i64[0] = 0x8000000080000000;
    v31.i64[1] = 0x8000000080000000;
    float32x4_t v44 = (float32x4_t)veorq_s8(v30, (int8x16_t)v31);
    int8x16_t v45 = (int8x16_t)vmulq_f32(v32, v44);
    *(int32x2_t *)v28.f32 = vzip2_s32(*(int32x2_t *)v28.f32, *(int32x2_t *)v29.f32);
    *(int32x2_t *)&v28.u32[2] = v33;
    int8x16_t v46 = (int8x16_t)vmulq_f32(v28, v44);
    float32x2_t v47 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
    v37.i64[1] = v34;
    int8x16_t v48 = (int8x16_t)vmulq_f32(v37, v44);
    v48.i32[3] = 0;
    *(float32x2_t *)v46.i8 = vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v46.i8);
    int8x16_t v49 = (int8x16_t)vmulq_f32(v32, v39);
    int8x16_t v50 = (int8x16_t)vmulq_f32(v28, v39);
    int8x16_t v51 = (int8x16_t)vmulq_f32(v37, v39);
    v51.i32[3] = 0;
    *(float32x2_t *)v50.i8 = vadd_f32(vadd_f32(*(float32x2_t *)v46.i8, v47), vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v50.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL))));
    v50.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)), 0));
    float32x4_t v77 = v42;
    float32x4_t v78 = v41;
    float32x4_t v79 = v43;
    int8x16_t v80 = v50;
    (*(void (**)(void, float32x4_t *, long long *, long long *))(**(void **)(v9 + 8) + 16))(*(void *)(v9 + 8), &v77, &v82, &v81);
    v76[0] = v82;
    v76[1] = v81;
    sub_1B6DC9E30((uint64_t)v13, *v13, v76, (uint64_t)v83);
  }
  else
  {
    uint64_t v52 = *(unsigned int *)(a1 + 20);
    if ((int)v52 <= 0) {
      return;
    }
    uint64_t v53 = 0;
    uint64_t v54 = 64;
    do
    {
      sub_1B6DD8754((uint64_t)v83, *(void *)(*(void *)(v10 + 40) + v54), v53++);
      v54 += 96;
    }
    while (v52 != v53);
  }
  uint64_t v55 = *(unsigned int *)(a1 + 20);
  if ((int)v55 >= 1)
  {
    uint64_t v56 = 0;
    uint64_t v57 = 8 * v55;
    uint64_t v58 = 32;
    do
    {
      if (*(void *)(*(void *)(a1 + 32) + v56))
      {
        int v59 = (float32x4_t *)(*(void *)(v10 + 40) + v58);
        uint64_t v60 = v59[2].i64[0];
        int v61 = *(float32x4_t **)(v8 + 24);
        float32x4_t v62 = v61[1];
        float32x4_t v63 = v61[2];
        float32x4_t v64 = v59[-2];
        float32x4_t v65 = v59[-1];
        v64.i32[3] = 0;
        v65.i32[3] = 0;
        float32x4_t v66 = *v59;
        float32x4_t v67 = v59[1];
        v66.i32[3] = 0;
        float32x4_t v68 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, v62.f32[0]), v65, *(float32x2_t *)v62.f32, 1), v66, v62, 2);
        int8x16_t v69 = (int8x16_t)vmulq_f32(*v61, v67);
        float32x4_t v70 = vmulq_f32(v62, v67);
        int8x16_t v71 = (int8x16_t)vmulq_f32(v63, v67);
        v71.i32[3] = 0;
        *(float32x2_t *)v70.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v70.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL)));
        *(float32x2_t *)&v70.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)), 0);
        float32x4_t v72 = vaddq_f32(v61[3], v70);
        float32x4_t v77 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, COERCE_FLOAT(*v61)), v65, *(float32x2_t *)v61->f32, 1), v66, *v61, 2);
        float32x4_t v78 = v68;
        float32x4_t v79 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, v63.f32[0]), v65, *(float32x2_t *)v63.f32, 1), v66, v63, 2);
        int8x16_t v80 = (int8x16_t)v72;
        (*(void (**)(uint64_t, float32x4_t *, long long *, long long *))(*(void *)v60 + 16))(v60, &v77, v76, &v82);
        (*(void (**)(void, void, long long *, float *))(**(void **)(v9 + 8) + 16))(*(void *)(v9 + 8), *(void *)(v9 + 24), &v81, v75);
        BOOL v74 = 0;
        if (*(float *)v76 <= v75[0]) {
          BOOL v74 = *(float *)&v82 >= *(float *)&v81;
        }
        if (*((float *)v76 + 2) > v75[2] || *((float *)&v82 + 2) < *((float *)&v81 + 2)) {
          BOOL v74 = 0;
        }
        v73.n128_u32[0] = DWORD1(v76[0]);
        if (*((float *)v76 + 1) > v75[1]) {
          goto LABEL_54;
        }
        v73.n128_u32[0] = DWORD1(v82);
        if (*((float *)&v82 + 1) < *((float *)&v81 + 1)) {
          BOOL v74 = 0;
        }
        if (!v74)
        {
LABEL_54:
          (***(void (****)(void, __n128))(*(void *)(a1 + 32) + v56))(*(void *)(*(void *)(a1 + 32) + v56), v73);
          (*(void (**)(void, void))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8), *(void *)(*(void *)(a1 + 32) + v56));
          *(void *)(*(void *)(a1 + 32) + v56) = 0;
        }
      }
      v56 += 8;
      v58 += 96;
    }
    while (v57 != v56);
  }
}

uint64_t sub_1B6DD8754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(float32x4_t **)(v6 + 24);
  float32x4_t v9 = *v8;
  float32x4_t v10 = v8[1];
  float32x4_t v11 = v8[2];
  float32x4_t v12 = v8[3];
  uint64_t v13 = (float32x4_t *)(*(void *)(v7 + 40) + 96 * (int)a3);
  float32x4_t v14 = *v13;
  float32x4_t v15 = v13[1];
  v14.i32[3] = 0;
  v15.i32[3] = 0;
  float32x4_t v16 = v13[2];
  float32x4_t v17 = v13[3];
  v16.i32[3] = 0;
  float32x4_t v18 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v10.f32[0]), v15, *(float32x2_t *)v10.f32, 1), v16, v10, 2);
  int8x16_t v19 = (int8x16_t)vmulq_f32(v9, v17);
  float32x4_t v20 = vmulq_f32(v10, v17);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v11, v17);
  v21.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v20.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
  v41[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v9.f32[0]), v15, *(float32x2_t *)v9.f32, 1), v16, v9, 2);
  v41[1] = v18;
  v41[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v11.f32[0]), v15, *(float32x2_t *)v11.f32, 1), v16, v11, 2);
  v41[3] = vaddq_f32(v12, v20);
  (*(void (**)(uint64_t, _OWORD *, float *, float *))(*(void *)a2 + 16))(a2, v41, v40, &v37);
  uint64_t result = (*(uint64_t (**)(void, void, float *, float *))(**(void **)(*(void *)(a1 + 16) + 8) + 16))(*(void *)(*(void *)(a1 + 16) + 8), *(void *)(*(void *)(a1 + 16) + 24), v36, v35);
  if (!off_1E9E49930 || (uint64_t result = off_1E9E49930(*(void *)(*(void *)(a1 + 16) + 8), a2), result))
  {
    BOOL v24 = v40[0] <= v35[0] && v37 >= v36[0];
    if (v40[2] > v35[2] || v39 < v36[2]) {
      BOOL v24 = 0;
    }
    if (v40[1] <= v35[1])
    {
      v23.n128_f32[0] = v38;
      char v25 = !v24;
      if (v38 < v36[1]) {
        char v25 = 1;
      }
      if ((v25 & 1) == 0)
      {
        uint64_t v26 = *(void *)(*(void *)(a1 + 8) + 16);
        v32[0] = *(void *)(a1 + 8);
        v32[1] = a2;
        _OWORD v32[2] = v26;
        v32[3] = v41;
        int v33 = -1;
        int v34 = a3;
        if (!*(void *)(*(void *)(a1 + 48) + 8 * (int)a3))
        {
          *(void *)(*(void *)(a1 + 48) + 8 * (int)a3) = (*(uint64_t (**)(void, void *, void, void, __n128))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v32, *(void *)(a1 + 16), *(void *)(a1 + 56), v23);
          uint64_t v26 = *(void *)(*(void *)(a1 + 8) + 16);
        }
        uint64_t v27 = *(void **)(a1 + 40);
        uint64_t v28 = v27[2];
        if (*(void *)(v28 + 16) == v26)
        {
          v27[2] = v32;
          (*(void (**)(void *, uint64_t, uint64_t, __n128))(*v27 + 16))(v27, 0xFFFFFFFFLL, a3, v23);
        }
        else
        {
          uint64_t v28 = v27[3];
          void v27[3] = v32;
          (*(void (**)(void *, uint64_t, uint64_t, __n128))(*v27 + 24))(v27, 0xFFFFFFFFLL, a3, v23);
        }
        uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8 * (int)a3);
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, void, void, void))(*(void *)v29 + 16))(v29, v32, *(void *)(a1 + 16), *(void *)(a1 + 32), *(void *)(a1 + 40));
        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v31 = 24;
        if (*(void *)(*(void *)(v30 + 16) + 16) == *(void *)(*(void *)(a1 + 8) + 16)) {
          uint64_t v31 = 16;
        }
        *(void *)(v30 + v31) = v28;
      }
    }
  }
  return result;
}

float sub_1B6DD8A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = a2;
  }
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a3;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 20);
  if ((int)v7 < 1) {
    return 1.0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(v5 + 208);
  int32x4_t v13 = *(int32x4_t *)(v5 + 16);
  int32x4_t v14 = *(int32x4_t *)(v5 + 32);
  int32x4_t v15 = *(int32x4_t *)(v5 + 48);
  float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 1);
  float32x4_t v35 = *(float32x4_t *)(v5 + 64);
  float32x4_t v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 1);
  float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1);
  float32x4_t v38 = (float32x4_t)v13;
  float32x4_t v36 = (float32x4_t)v15;
  float32x4_t v37 = (float32x4_t)v14;
  float32x4_t v30 = (float32x4_t)vdupq_laneq_s32(v14, 2);
  float32x4_t v31 = (float32x4_t)vdupq_laneq_s32(v13, 2);
  uint64_t v16 = 8 * v7;
  float v17 = 1.0;
  uint64_t v18 = 32;
  float32x4_t v29 = (float32x4_t)vdupq_laneq_s32(v15, 2);
  do
  {
    int8x16_t v19 = (float32x4_t *)(*(void *)(v12 + 40) + v18);
    float32x4_t v20 = v19[-2];
    float32x4_t v21 = v19[-1];
    v20.i32[3] = 0;
    v21.i32[3] = 0;
    float32x4_t v22 = *v19;
    float32x4_t v23 = v19[1];
    v22.i32[3] = 0;
    float32x4_t v24 = vmulq_f32(v38, v23);
    int8x16_t v25 = (int8x16_t)vmulq_f32(v37, v23);
    int8x16_t v26 = (int8x16_t)vmulq_f32(v36, v23);
    v26.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
    *(float32x4_t *)(v5 + 16) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v38.f32[0]), v34, v21), v31, v22);
    *(float32x4_t *)(v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v37.f32[0]), v33, v21), v30, v22);
    *(float32x4_t *)(v5 + 48) = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v20, v36.f32[0]), v32, v21), v29, v22);
    *(float32x4_t *)(v5 + 64) = vaddq_f32(v35, v24);
    float v27 = (*(float (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 32) + v11)
                                                                              + 24))(*(void *)(*(void *)(a1 + 32) + v11), v5, v6, a4, a5);
    if (v27 < v17) {
      float v17 = v27;
    }
    *(float32x4_t *)(v5 + 16) = v38;
    *(float32x4_t *)(v5 + 3sub_1B6DC4968((unsigned int *)this + 2) = v37;
    *(float32x4_t *)(v5 + 48) = v36;
    *(float32x4_t *)(v5 + 64) = v35;
    v11 += 8;
    v18 += 96;
  }
  while (v16 != v11);
  return v17;
}

_DWORD *sub_1B6DD8C68(_DWORD *result, uint64_t a2)
{
  int v2 = result[5];
  if (v2 >= 1)
  {
    uint64_t v4 = result;
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t result = *(_DWORD **)(*((void *)v4 + 4) + 8 * i);
      if (result)
      {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)result + 32))(result, a2);
        int v2 = v4[5];
      }
    }
  }
  return result;
}

void sub_1B6DD8CE8()
{
}

uint64_t sub_1B6DD8CFC(uint64_t a1, uint64_t a2)
{
  return sub_1B6DD8754(a1, *(void *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 40) + 96 * *(int *)(a2 + 40) + 64), *(int *)(a2 + 40));
}

void *sub_1B6DD8D1C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  float32x4_t v10 = sub_1B6DCFC30(a1, a2);
  *float32x4_t v10 = &unk_1F0FB27A0;
  *((unsigned char *)v10 + 16) = a5;
  sub_1B6DD8F3C(v10 + 4, *a2, a3, a4, a5);
  return a1;
}

double sub_1B6DD8DA4(void *a1)
{
  *a1 = &unk_1F0FB27A0;
  sub_1B6DD8FF4((uint64_t)(a1 + 4));

  return nullsub_1(a1);
}

void sub_1B6DD8DF8(void *a1)
{
  *a1 = &unk_1F0FB27A0;
  sub_1B6DD8FF4((uint64_t)(a1 + 4));
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DD8E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2)
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if (v4 == *(_DWORD *)(a2 + 8))
    {
      int v5 = v4 ? 2 * v4 : 1;
      if (v4 < v5)
      {
        if (v5)
        {
          uint64_t v7 = sub_1B6E073B8(8 * v5, 16);
          int v4 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          uint64_t v7 = 0;
        }
        if (v4 >= 1)
        {
          uint64_t v8 = 0;
          do
          {
            *(void *)(v7 + v8) = *(void *)(*(void *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v4 != v8);
        }
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9) {
          BOOL v10 = *(unsigned char *)(a2 + 24) == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10)
        {
          sub_1B6E073C4(v9);
          int v4 = *(_DWORD *)(a2 + 4);
        }
        *(unsigned char *)(a2 + 24) = 1;
        *(void *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v5;
        uint64_t v2 = *(void *)(a1 + 128);
      }
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v4) = v2;
    *(_DWORD *)(a2 + 4) = v4 + 1;
  }
}

void *sub_1B6DD8F3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  a1[9] = a2;
  a1[10] = 0;
  if (a5) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = a3;
  }
  *a1 = &unk_1F0FB2138;
  a1[1] = v6;
  if (a5) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = a4;
  }
  a1[2] = v7;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 24))(a2, *(void *)(v6 + 16), *(void *)(v7 + 16));
  a1[12] = v8;
  (*(void (**)(void, uint64_t))(*(void *)a1[9] + 40))(a1[9], v8);
  return a1;
}

double sub_1B6DD8FF4(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2138;
  (*(void (**)(void, void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), *(void *)(a1 + 96));
  (*(void (**)(void, void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72), *(void *)(a1 + 96));

  return nullsub_1(a1);
}

void sub_1B6DD909C(uint64_t a1)
{
  sub_1B6DD8FF4(a1);

  JUMPOUT(0x1BA9B6D80);
}

double sub_1B6DD90D4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(int *)(*(void *)(*(void *)(a1 + 8) + 8) + 8) <= 19)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    sub_1B6DEA398((uint64_t)&v22);
    float32x4_t v22 = &unk_1F0FB0E08;
    int v23 = 1;
    long long v9 = a2[1];
    long long v25 = *a2;
    long long v10 = a2[2];
    long long v26 = v9;
    long long v27 = v10;
    int v24 = *(_DWORD *)(a1 + 88);
    uint64_t v11 = *(void *)(a1 + 8);
    v18[0] = *(void *)(a1 + 16);
    v18[1] = &v22;
    long long v19 = *(_OWORD *)(v18[0] + 16);
    int v20 = a3;
    int v21 = a4;
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void))(*(void *)v8 + 16))(v8, v11, v18, *(void *)(a1 + 96));
    int32x4_t v13 = *(void **)(a1 + 64);
    uint64_t v14 = v13[2];
    if (*(void *)(v14 + 16) == *(void *)(*(void *)(a1 + 16) + 16))
    {
      v13[2] = v18;
      (*(void (**)(void *, uint64_t, uint64_t))(*v13 + 16))(v13, a3, a4);
    }
    else
    {
      uint64_t v14 = v13[3];
      _WORD v13[3] = v18;
      (*(void (**)(void *, uint64_t, uint64_t))(*v13 + 24))(v13, a3, a4);
    }
    (*(void (**)(uint64_t, void, void *, void, void))(*(void *)v12 + 16))(v12, *(void *)(a1 + 8), v18, *(void *)(a1 + 80), *(void *)(a1 + 64));
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = 24;
    if (*(void *)(*(void *)(v15 + 16) + 16) == *(void *)(*(void *)(a1 + 16) + 16)) {
      uint64_t v16 = 16;
    }
    *(void *)(v15 + v16) = v14;
    (**(void (***)(uint64_t))v12)(v12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 120))(v8, v12);
    return sub_1B6DEA3D0(&v22);
  }
  return result;
}

uint64_t sub_1B6DD934C(uint64_t result, float a2)
{
  *(float *)(result + 64) = a2;
  return result;
}

float32x4_t sub_1B6DD9358(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x2_t a6)
{
  a1->i64[1] = a3;
  a1[1].i64[0] = a4;
  a1[5].i64[0] = a2;
  a1[5].i32[2] = a6.i32[0];
  a1[4].i64[0] = a5;
  uint64_t v7 = *(_OWORD **)(a4 + 24);
  float32x4_t v8 = *(float32x4_t *)v7;
  float32x4_t v9 = *((float32x4_t *)v7 + 1);
  float32x4_t v10 = *((float32x4_t *)v7 + 2);
  int8x16_t v11 = *((int8x16_t *)v7 + 3);
  uint64_t v12 = *(float32x4_t **)(a3 + 24);
  float32x4_t v14 = *v12;
  float32x4_t v13 = v12[1];
  float32x4_t v15 = v12[2];
  float32x4_t v16 = v12[3];
  float32x4_t v17 = (float32x4_t)vtrn1q_s32((int32x4_t)v8, (int32x4_t)v9);
  v18.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v18.i64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u32[0];
  v19.i64[0] = 0x8000000080000000;
  v19.i64[1] = 0x8000000080000000;
  float32x4_t v20 = (float32x4_t)veorq_s8(v11, v19);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v18, v20);
  v21.i32[3] = 0;
  v15.i32[3] = 0;
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  v17.i64[1] = v10.u32[0];
  int8x16_t v22 = (int8x16_t)vmulq_f32(v17, v20);
  *(int32x2_t *)v23.f32 = vzip2_s32(*(int32x2_t *)v8.f32, *(int32x2_t *)v9.f32);
  *(int32x2_t *)&v23.u32[2] = vzip2_s32(*(int32x2_t *)v10.f32, 0);
  int8x16_t v24 = (int8x16_t)vmulq_f32(v23, v20);
  int8x16_t v25 = (int8x16_t)vmulq_f32(v18, v16);
  v25.i32[3] = 0;
  int8x16_t v26 = (int8x16_t)vmulq_f32(v17, v16);
  int8x16_t v27 = (int8x16_t)vmulq_f32(v23, v16);
  *(float32x2_t *)v27.i8 = vadd_f32(vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v24.i8)), vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v27.i8)));
  v27.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0));
  v32[0] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v14, v8.f32[0]), v13, v9.f32[0]), v15, v10.f32[0]);
  v32[1] = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v14, *(float32x2_t *)v8.f32, 1), v13, *(float32x2_t *)v9.f32, 1), v15, *(float32x2_t *)v10.f32, 1);
  _OWORD v32[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v14, v8, 2), v13, v9, 2), v15, v10, 2);
  v32[3] = v27;
  (*(void (**)(void, _OWORD *, float32x4_t *, float32x4_t *))(**(void **)(a3 + 8) + 16))(*(void *)(a3 + 8), v32, a1 + 2, a1 + 3);
  float32x4_t v28 = (float32x4_t)vdupq_lane_s32(a6, 0);
  v28.i32[3] = 0;
  float32x4_t v29 = vaddq_f32(v28, a1[3]);
  float32x4_t result = vsubq_f32(a1[2], v28);
  a1[2] = result;
  a1[3] = v29;
  return result;
}

float32x4_t *sub_1B6DD94D8(float32x4_t *result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (result[1].i8[0]) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = a2;
  }
  if (result[1].i8[0]) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = a3;
  }
  uint64_t v7 = *(_DWORD **)(v6 + 8);
  if ((v7[2] - 21) <= 8 && *(int *)(*(void *)(v5 + 8) + 8) <= 19)
  {
    float32x4_t v10 = result;
    *(double *)&int32x2_t v11 = (*(double (**)(void))(*(void *)v7 + 96))(*(void *)(v6 + 8));
    a5[1] = v10[8].i64[0];
    float32x4_t v12 = sub_1B6DD9358(v10 + 2, a4, v5, v6, (uint64_t)a5, v11);
    uint64_t v13 = v10[8].i64[0];
    uint64_t v14 = *(void *)(v6 + 16);
    *(void *)(v13 + 784) = *(void *)(v5 + 16);
    *(void *)(v13 + 79sub_1B6DC4968((unsigned int *)this + 2) = v14;
    (*(void (**)(_DWORD *, float32x4_t *, float32x4_t *, float32x4_t *, float32x4_t))(*(void *)v7 + 128))(v7, v10 + 2, v10 + 4, v10 + 5, v12);
    float32x4_t result = (float32x4_t *)a5[1];
    if (result[50].i32[0])
    {
      float32x4_t v15 = (float32x4_t *)result[49].i64[0];
      float32x4_t v16 = *(float32x4_t **)(a5[2] + 16);
      if (v15 == v16) {
        float32x4_t v16 = *(float32x4_t **)(a5[3] + 16);
      }
      else {
        float32x4_t v15 = *(float32x4_t **)(a5[3] + 16);
      }
      float32x4_t result = (float32x4_t *)sub_1B6DF3CF4(result, v15 + 1, v16 + 1);
    }
    v10[2].i64[1] = 0;
    v10[3].i64[0] = 0;
  }
  return result;
}

float sub_1B6DD9618(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a3;
  }
  else {
    uint64_t v3 = a2;
  }
  float32x4_t v4 = v3[8];
  float32x4_t v5 = v3[4];
  float32x4_t v6 = vsubq_f32(v4, v5);
  v6.i32[3] = 0;
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float v8 = 1.0;
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0] >= (float)(v3[18].f32[0] * v3[18].f32[0]))
  {
    if (*(unsigned char *)(a1 + 16)) {
      float32x4_t v9 = a2;
    }
    else {
      float32x4_t v9 = a3;
    }
    float32x4_t v10 = (_DWORD *)v9[13].i64[0];
    if ((v10[2] - 21) <= 8)
    {
      float32x4_t v11 = v9[1];
      float32x4_t v12 = v9[2];
      float32x4_t v13 = v9[3];
      int32x2_t v14 = vzip2_s32(*(int32x2_t *)v13.f32, 0);
      unsigned __int32 v15 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
      float32x4_t v17 = v3[6];
      float32x4_t v16 = v3[7];
      v16.i32[3] = 0;
      float32x4_t v18 = v3[5];
      v17.i32[3] = 0;
      v18.i32[3] = 0;
      float32x4_t v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v11, 2), v17, v12, 2), v16, v13, 2);
      float32x4_t v21 = v3[2];
      float32x4_t v20 = v3[3];
      v20.i32[3] = 0;
      float32x4_t v22 = v3[1];
      v21.i32[3] = 0;
      float32x4_t v23 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v18, v11.f32[0]), v17, v12.f32[0]), v16, v13.f32[0]);
      v22.i32[3] = 0;
      float32x4_t v24 = vmlaq_lane_f32(vmulq_lane_f32(v18, *(float32x2_t *)v11.f32, 1), v17, *(float32x2_t *)v12.f32, 1);
      float32x4_t v25 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v22, v11.f32[0]), v21, v12.f32[0]), v20, v13.f32[0]);
      float32x4_t v26 = vmlaq_lane_f32(v24, v16, *(float32x2_t *)v13.f32, 1);
      float32x4_t v27 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v22, v11, 2), v21, v12, 2), v20, v13, 2);
      float32x4_t v28 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v22, *(float32x2_t *)v11.f32, 1), v21, *(float32x2_t *)v12.f32, 1), v20, *(float32x2_t *)v13.f32, 1);
      float32x4_t v29 = (float32x4_t)vtrn1q_s32((int32x4_t)v11, (int32x4_t)v12);
      v21.i64[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
      v29.i64[1] = v13.u32[0];
      v13.i64[0] = 0x8000000080000000;
      v13.i64[1] = 0x8000000080000000;
      float32x4_t v30 = (float32x4_t)veorq_s8((int8x16_t)v9[4], (int8x16_t)v13);
      int8x16_t v31 = (int8x16_t)vmulq_f32(v29, v30);
      *(int32x2_t *)v11.f32 = vzip2_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v12.f32);
      *(int32x2_t *)&v11.u32[2] = v14;
      float32x4_t v32 = vmulq_f32(v11, v30);
      *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)));
      v21.i64[1] = v15;
      int8x16_t v33 = (int8x16_t)vmulq_f32(v21, v30);
      v33.i32[3] = 0;
      *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 0);
      float32x4_t v34 = vmulq_f32(v4, v29);
      int8x16_t v35 = (int8x16_t)vmulq_f32(v4, v11);
      *(float32x2_t *)v34.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v35.i8));
      int8x16_t v36 = (int8x16_t)vmulq_f32(v4, v21);
      v36.i32[3] = 0;
      *(float32x2_t *)&v34.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
      float32x4_t v37 = vaddq_f32(v32, v34);
      int8x16_t v38 = (int8x16_t)vmulq_f32(v5, v29);
      float32x4_t v39 = vmulq_f32(v5, v11);
      int8x16_t v40 = (int8x16_t)vmulq_f32(v5, v21);
      v40.i32[3] = 0;
      *(float32x2_t *)v39.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL)), vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v39.f32));
      *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)), 0);
      float32x4_t v41 = vaddq_f32(v32, v39);
      float32x4_t v42 = vminq_f32(v41, v37);
      float32x4_t v43 = vmaxq_f32(v41, v37);
      v49[0] = &unk_1F0FCCD80;
      float32x4_t v50 = v25;
      float32x4_t v51 = v28;
      float32x4_t v52 = v27;
      float32x4_t v53 = v41;
      float32x4_t v54 = v23;
      float32x4_t v55 = v26;
      float32x4_t v56 = v19;
      float32x4_t v57 = v37;
      v41.i64[0] = v3[17].i64[1];
      float32x4_t v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1);
      v44.i32[3] = 0;
      float32x4_t v47 = vaddq_f32(v43, v44);
      float32x4_t v48 = vsubq_f32(v42, v44);
      int32x2_t v58 = vrev64_s32(*(int32x2_t *)v41.f32);
      (*(void (**)(_DWORD *, void *, float32x4_t *, float32x4_t *))(*(void *)v10 + 128))(v10, v49, &v48, &v47);
      float v45 = *(float *)&v58.i32[1];
      if (*(float *)&v58.i32[1] < v3[17].f32[2])
      {
        v3[17].i32[2] = v58.i32[1];
        nullsub_1(v49);
        return v45;
      }
      else
      {
        nullsub_1(v49);
      }
    }
  }
  return v8;
}

void sub_1B6DD98D8(void *a1)
{
  sub_1B6DEA3D0(a1);

  sub_1B6E073C4(v1);
}

uint64_t sub_1B6DD9900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t sub_1B6DD9924(uint64_t a1)
{
  return a1 + 32;
}

void sub_1B6DD992C(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
}

const char *sub_1B6DD9934()
{
  return "Triangle";
}

double sub_1B6DD9940@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.00781250185;
  *a1 = xmmword_1B6E4F540;
  return result;
}

float sub_1B6DD9950(uint64_t a1)
{
  return *(float *)(a1 + 64);
}

uint64_t sub_1B6DD9958()
{
  return 56;
}

const char *sub_1B6DD9960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DE46E8(a1, a2, a3);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  return "btConvexInternalShapeData";
}

__n128 sub_1B6DD99D8@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, __n128 *a3@<X8>)
{
  float32x4_t v4 = a1[5];
  float32x4_t v5 = a1[6];
  uint64_t v3 = a1 + 5;
  int8x16_t v6 = (int8x16_t)vmulq_f32(v4, *a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(*a2, v5);
  int8x16_t v8 = (int8x16_t)vmulq_f32(*a2, v3[2]);
  v8.i32[3] = 0;
  float32x2_t v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  float32x2_t v10 = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
  uint64_t v11 = 2;
  if (v9.f32[1] >= v10.f32[0]) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 2;
  }
  if ((vcgt_f32(v10, v9).u8[0] & 1) == 0) {
    uint64_t v11 = 0;
  }
  if (v9.f32[0] < v9.f32[1]) {
    uint64_t v11 = v12;
  }
  __n128 result = (__n128)v3[v11];
  *a3 = result;
  return result;
}

float32x4_t *sub_1B6DD9A4C(float32x4_t *result, float32x4_t *a2, _OWORD *a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = a4;
    do
    {
      float32x4_t v5 = *a2++;
      int8x16_t v6 = (int8x16_t)vmulq_f32(result[5], v5);
      int8x16_t v7 = (int8x16_t)vmulq_f32(v5, result[7]);
      int8x16_t v8 = (int8x16_t)vmulq_f32(v5, result[6]);
      v7.i32[3] = 0;
      float32x2_t v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
      float32x2_t v10 = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
      if (v9.f32[1] >= v10.f32[0]) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = 2;
      }
      if (vcgt_f32(v10, v9).u8[0]) {
        uint64_t v12 = 2;
      }
      else {
        uint64_t v12 = 0;
      }
      if (v9.f32[0] >= v9.f32[1]) {
        uint64_t v11 = v12;
      }
      *a3++ = result[v11 + 5];
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1B6DD9AD8()
{
  return 2;
}

int8x16_t sub_1B6DD9AE0(float32x4_t *a1, __int32 a2, int8x16_t *a3, int32x4_t a4)
{
  a4.i32[0] = 0;
  float32x4_t v4 = a1[5];
  float32x4_t v5 = vsubq_f32(a1[6], v4);
  int8x8_t v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  float32x4_t v7 = vsubq_f32(a1[7], v4);
  int8x8_t v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v7.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v9.i64[1] = v5.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
  v10.i64[1] = v7.i64[0];
  int8x16_t v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v5), vmulq_f32(v9, v7));
  v7.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v7.i64[1] = v11.u32[0];
  int8x16_t v12 = (int8x16_t)vmulq_f32(v7, v7);
  float32x4_t v13 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]));
  v7.i32[0] = a2;
  int8x16_t result = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v7, a4), 0), (int8x16_t)v13, (int8x16_t)vnegq_f32(v13));
  *a3 = result;
  return result;
}

uint64_t sub_1B6DD9B68()
{
  return 3;
}

uint64_t sub_1B6DD9B70()
{
  return 3;
}

uint64_t sub_1B6DD9B78(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 216))(a1);
  float32x4_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 216);

  return v7(a1, ((a2 + 1) % 3), a4);
}

__n128 sub_1B6DD9C28(uint64_t a1, int a2, __n128 *a3)
{
  __n128 result = *(__n128 *)(a1 + 16 * a2 + 80);
  *a3 = result;
  return result;
}

uint64_t sub_1B6DD9C38()
{
  return 0;
}

uint64_t sub_1B6DD9C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a4, a2, a3);
}

BOOL sub_1B6DD9C7C(float32x4_t *a1, float32x4_t *a2, float a3)
{
  BOOL result = 0;
  float32x4_t v5 = a1[5];
  float32x4_t v6 = vsubq_f32(a1[6], v5);
  int8x8_t v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  float32x4_t v8 = vsubq_f32(a1[7], v5);
  int8x8_t v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v10.i64[1] = v6.i64[0];
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v11.i64[1] = v8.i64[0];
  int8x16_t v12 = (int8x16_t)vsubq_f32(vmulq_f32(v11, v6), vmulq_f32(v10, v8));
  v10.i64[0] = vextq_s8(v12, v12, 4uLL).u64[0];
  v10.i64[1] = v12.u32[0];
  int8x16_t v13 = (int8x16_t)vmulq_f32(v10, v10);
  float32x4_t v14 = vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]));
  int8x16_t v15 = (int8x16_t)vmulq_f32(*a2, v14);
  float32x4_t v33 = v14;
  int8x16_t v16 = (int8x16_t)vmulq_f32(v5, v14);
  float v17 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL))).f32[0];
  float v18 = -a3;
  if (v17 >= (float)-a3 && v17 <= a3)
  {
    uint64_t v21 = 0;
    v22.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL).u64[0];
    v22.i64[1] = v14.i64[0];
    float32x4_t v32 = v22;
    do
    {
      (*(void (**)(float32x4_t *, uint64_t, float32x4_t *, float32x4_t *))(a1->i64[0] + 208))(a1, v21, &v35, &v34);
      float32x4_t v23 = vsubq_f32(v34, v35);
      int8x8_t v24 = (int8x8_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
      v23.i32[3] = 0;
      *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v23.f32, v24, 4uLL);
      v25.i64[1] = v23.i64[0];
      int8x16_t v26 = (int8x16_t)vsubq_f32(vmulq_f32(v32, v23), vmulq_f32(v33, v25));
      v25.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
      v25.i64[1] = v26.u32[0];
      int8x16_t v27 = (int8x16_t)vmulq_f32(v25, v25);
      float32x4_t v28 = vmulq_n_f32(v25, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0]));
      int8x16_t v29 = (int8x16_t)vmulq_f32(*a2, v28);
      int8x16_t v30 = (int8x16_t)vmulq_f32(v35, v28);
      *(float *)v30.i32 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))).f32[0];
      BOOL result = *(float *)v30.i32 >= v18;
      BOOL v31 = *(float *)v30.i32 < v18 || v21 == 2;
      uint64_t v21 = (v21 + 1);
    }
    while (!v31);
  }
  return result;
}

uint64_t sub_1B6DD9E38()
{
  return 1;
}

__n128 sub_1B6DD9E40(float32x4_t *a1, uint64_t a2, float32x4_t *a3, __n128 *a4)
{
  float32x4_t v4 = a1[5];
  float32x4_t v5 = vsubq_f32(a1[6], v4);
  int8x8_t v6 = (int8x8_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  v5.i32[3] = 0;
  float32x4_t v7 = vsubq_f32(a1[7], v4);
  int8x8_t v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v7.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v5.f32, v6, 4uLL);
  v9.i64[1] = v5.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
  v10.i64[1] = v7.i64[0];
  int8x16_t v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v5), vmulq_f32(v9, v7));
  v7.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v7.i64[1] = v11.u32[0];
  int8x16_t v12 = (int8x16_t)vmulq_f32(v7, v7);
  *a3 = vmulq_n_f32(v7, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]));
  __n128 result = (__n128)a1[5];
  *a4 = result;
  return result;
}

void sub_1B6DD9EB8(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DD9EF0(float32x4_t *a1, long long *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v7[0] = (float32x4_t)xmmword_1B6E4F300;
  v7[1] = (float32x4_t)xmmword_1B6E4F320;
  void v7[2] = (float32x4_t)xmmword_1B6E4F2E0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __int32 v4 = a1[13].i32[0];
  float v23 = a1[13].f32[1];
  float32x4_t v22 = &unk_1F0FB2B98;
  uint64_t v24 = 0;
  int v25 = 0;
  sub_1B6DE65E4((uint64_t)&v18);
  float v18 = &unk_1F0FB07C0;
  int v19 = 8;
  __int32 v20 = v4;
  __int32 v21 = v4;
  sub_1B6DEA398((uint64_t)&v13);
  int8x16_t v13 = &unk_1F0FB0E08;
  int v14 = 1;
  long long v5 = a2[1];
  long long v15 = *a2;
  long long v16 = v5;
  long long v17 = a2[2];
  int v11 = 953267991;
  char v12 = 0;
  sub_1B6DF594C(v6, (uint64_t)&v18, (uint64_t)&v13, (uint64_t)v10);
  if (sub_1B6DF5970(v6, a1 + 1, a1 + 5, v7, v7, (uint64_t)&v22) && a1[13].f32[1] > v23) {
    a1[13].f32[1] = v23;
  }
  nullsub_1(v6);
  sub_1B6DEA3D0(&v13);
  nullsub_1(&v18);
}

double sub_1B6DDA094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F0FB2C28;
  *(void *)&double result = 0x300000000;
  *(void *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0x300000000;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a2;
  return result;
}

void sub_1B6DDA0CC()
{
}

double sub_1B6DDA0E0(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB1CE8;
  if (*(unsigned char *)(a1 + 32) && *(void *)(a1 + 40)) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }

  return nullsub_1(a1);
}

void sub_1B6DDA16C(uint64_t a1)
{
  sub_1B6DDA0E0(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DDA1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v249 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 40);
  if (!v10)
  {
    uint64_t v10 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)(a2 + 16), *(void *)(a3 + 16));
    *(void *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
  }
  a5[1] = v10;
  uint64_t v11 = *(void *)(a2 + 8);
  char v12 = *(float32x4_t **)(a3 + 8);
  if (*(_DWORD *)(v11 + 8) == 10 && v12->i32[2] == 10)
  {
    float v13 = sub_1B6DF3BE0(v10);
    uint64_t v14 = *(int *)(v11 + 72);
    float v15 = *(float *)(v11 + 48 + 4 * v14);
    int v16 = ((int)v14 + 2) % 3;
    uint64_t v17 = v12[4].i32[2];
    float v18 = v12[3].f32[v17];
    int v19 = *(float32x4_t **)(a2 + 24);
    __int32 v20 = *(float32x4_t **)(a3 + 24);
    __int32 v21 = &v19->f32[v14];
    float v22 = *v21;
    float v23 = v21[4];
    v25.f32[0] = *v21;
    float v24 = v21[8];
    v25.f32[1] = v23;
    v25.i64[1] = LODWORD(v24);
    uint64_t v26 = &v20->i32[v17];
    v27.i32[0] = *v26;
    v27.i32[1] = v26[4];
    v27.i32[2] = v26[8];
    float32x4_t v28 = v20[3];
    float32x4_t v29 = vsubq_f32(v28, v19[3]);
    v29.i32[3] = 0;
    int8x16_t v30 = (int8x16_t)vmulq_f32(v25, v27);
    LODWORD(_S20) = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u32[0];
    int8x16_t v32 = (int8x16_t)vmulq_f32(v25, v29);
    LODWORD(v33) = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).u32[0];
    int8x16_t v34 = (int8x16_t)vmulq_f32(v27, v29);
    float v35 = vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)).f32[0];
    __asm { FMLS            S6, S20, V20.S[0] }
    float v41 = 0.0;
    if (_S6 != 0.0)
    {
      float v42 = (float)(v33 + (float)((float)-v35 * _S20)) / _S6;
      float v41 = -v15;
      if (v42 >= (float)-v15)
      {
        float v41 = v42;
        if (v42 > v15) {
          float v41 = v15;
        }
      }
    }
    float v43 = v12[3].f32[((int)v17 + 2) % 3];
    float v44 = (float)(v41 * _S20) - v35;
    float v45 = -v18;
    if (v44 >= (float)-v18)
    {
      if (v44 <= v18) {
        goto LABEL_76;
      }
      float v65 = v33 + (float)(v18 * _S20);
      float v41 = -v15;
      float v44 = v12[3].f32[v17];
      if (v65 < (float)-v15) {
        goto LABEL_76;
      }
      if (v65 <= v15)
      {
        float v41 = v65;
        goto LABEL_76;
      }
    }
    else
    {
      float v46 = v33 + (float)(v45 * _S20);
      float v41 = -v15;
      float v44 = v45;
      if (v46 < (float)-v15)
      {
LABEL_76:
        float32x4_t v183 = vmulq_n_f32(v25, v41);
        float32x4_t v184 = vmulq_n_f32(v27, v44);
        v184.i32[3] = 0;
        float32x4_t v185 = vsubq_f32(v29, v183);
        v185.i32[3] = 0;
        float32x4_t v186 = vaddq_f32(v184, v185);
        int8x16_t v187 = (int8x16_t)vmulq_f32(v186, v186);
        LODWORD(v188) = vadd_f32(vpadd_f32(*(float32x2_t *)v187.i8, *(float32x2_t *)v187.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)).u32[0];
        float v189 = sqrtf(v188);
        float v190 = (float)(v189 - *(float *)(v11 + 48 + 4 * v16)) - v43;
        if (v190 <= v13)
        {
          if (v188 <= 1.4211e-14)
          {
            if (fabsf(v24) <= 0.70711)
            {
              float v193 = 1.0 / sqrtf((float)(v23 * v23) + (float)(v22 * v22));
              v212.f32[0] = -(float)(v23 * v193);
              *(uint64_t *)((char *)v212.i64 + 4) = COERCE_UNSIGNED_INT(v22 * v193);
            }
            else
            {
              float v192 = 1.0 / sqrtf((float)(v24 * v24) + (float)(v23 * v23));
              v212.i32[0] = 0;
              v212.f32[1] = -(float)(v24 * v192);
              v212.f32[2] = v23 * v192;
            }
          }
          else
          {
            float32x4_t v191 = vmulq_n_f32(v186, -1.0 / v189);
            v191.i32[3] = 0;
            float32x4_t v212 = v191;
          }
          float32x4_t v194 = vaddq_f32(v28, v184);
          float32x4_t v195 = vmulq_n_f32(v212, v43);
          v195.i32[3] = 0;
          float32x4_t v240 = vaddq_f32(v194, v195);
        }
        if (v190 < v13) {
          (*(void (**)(void *, float32x4_t *, float32x4_t *, float))(*a5 + 32))(a5, &v212, &v240, v190);
        }
LABEL_85:
        uint64_t v178 = a5[1];
        if (!*(_DWORD *)(v178 + 800)) {
          return;
        }
        float v196 = *(float32x4_t **)(v178 + 784);
        float v197 = *(float32x4_t **)(a5[2] + 16);
        if (v196 == v197)
        {
          float32x4_t v181 = v196 + 1;
          float v197 = *(float32x4_t **)(a5[3] + 16);
        }
        else
        {
          float32x4_t v181 = (float32x4_t *)(*(void *)(a5[3] + 16) + 16);
        }
        float v182 = v197 + 1;
        goto LABEL_90;
      }
      if (v46 <= v15)
      {
        float v41 = v33 + (float)(v45 * _S20);
        goto LABEL_76;
      }
    }
    float v41 = v15;
    goto LABEL_76;
  }
  float v248 = 1.0e18;
  sub_1B6DF22D0((uint64_t)v235, (_DWORD *)v11, v12, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v237 = v11;
  float v238 = v12;
  float v47 = (*(float (**)(uint64_t))(*(void *)v11 + 96))(v11);
  float v48 = v47 + (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
  float v49 = sub_1B6DF3BE0(*(void *)(a1 + 40));
  float v248 = (float)(v48 + v49) * (float)(v48 + v49);
  float32x4_t v50 = *(float32x4_t **)(a2 + 24);
  float32x4_t v51 = v50[1];
  float32x4_t v240 = *v50;
  float32x4_t v241 = v51;
  float32x4_t v52 = v50[3];
  float32x4_t v242 = v50[2];
  float32x4_t v243 = v52;
  float32x4_t v53 = *(float32x4_t **)(a3 + 24);
  float32x4_t v244 = *v53;
  float32x4_t v245 = v53[1];
  float32x4_t v246 = v53[2];
  float32x4_t v247 = v53[3];
  int v54 = *(_DWORD *)(v11 + 8);
  if (v54 > 6) {
    goto LABEL_43;
  }
  int v55 = v12->i32[2];
  if (v55 > 6) {
    goto LABEL_43;
  }
  float v234 = &unk_1F0FCCDA8;
  float v56 = 0.0;
  if (v54)
  {
    float v57 = (*(float (**)(uint64_t))(*(void *)v11 + 96))(v11);
    if (!v12->i32[2]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  float v57 = 0.0;
  if (v55) {
LABEL_17:
  }
    float v56 = (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
LABEL_18:
  v212.i64[0] = (uint64_t)&unk_1F0FCCDE0;
  v212.i64[1] = (uint64_t)a5;
  v214.i64[0] = __PAIR64__(LODWORD(v56), LODWORD(v57));
  v214.i8[12] = 0;
  if (*(void *)(v11 + 72))
  {
    if (v12[4].i64[1])
    {
      float v58 = sub_1B6DF3BE0(*(void *)(a1 + 40));
      if (*(unsigned char *)(a4 + 32))
      {
        if (sub_1B6DF4440(*(void *)(v11 + 72), v12[4].i64[1], *(float32x4_t **)(a2 + 24), *(float32x4_t **)(a3 + 24), &v231, (uint64_t)a5))
        {
          float v64 = -1.0e30;
LABEL_68:
          sub_1B6DF5184(&v231, *(void *)(v11 + 72), v12[4].i64[1], *(float32x4_t **)(a2 + 24), *(float32x4_t **)(a3 + 24), (uint64_t)a5, v64 - v58, v58, v59, v60, v61, v62, v63);
        }
      }
      else
      {
        sub_1B6DF2324(v235, &v240, &v212, *(void *)(a4 + 24), 0);
        float32x4_t v231 = v213;
        if (v214.i8[12])
        {
          float v64 = v214.f32[2];
          if (v214.f32[2] < 0.0) {
            goto LABEL_68;
          }
        }
      }
      if (*(unsigned char *)(a1 + 32))
      {
        uint64_t v178 = a5[1];
        if (*(_DWORD *)(v178 + 800))
        {
          float32x4_t v179 = *(float32x4_t **)(v178 + 784);
          float32x4_t v180 = *(float32x4_t **)(a5[2] + 16);
          if (v179 == v180) {
            float32x4_t v180 = *(float32x4_t **)(a5[3] + 16);
          }
          else {
            float32x4_t v179 = *(float32x4_t **)(a5[3] + 16);
          }
          float32x4_t v181 = v179 + 1;
          float v182 = v180 + 1;
LABEL_90:
          sub_1B6DF3CF4((void *)v178, v181, v182);
          return;
        }
      }
      return;
    }
    if (v12->i32[2] == 1)
    {
      *(uint64_t *)((char *)v231.i64 + 4) = 0x100000000;
      float32x4_t v66 = *(float32x4_t **)(a3 + 24);
      float32x4_t v67 = v12[5];
      float32x4_t v68 = vmulq_f32(*v66, v67);
      int8x16_t v69 = (int8x16_t)vmulq_f32(v67, v66[1]);
      int8x16_t v70 = (int8x16_t)vmulq_f32(v67, v66[2]);
      v70.i32[3] = 0;
      *(float32x2_t *)v68.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v69.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)));
      *(float32x2_t *)&v68.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)), 0);
      float32x4_t v208 = vaddq_f32(v68, v66[3]);
      int8x16_t v71 = (_OWORD *)sub_1B6E073B8(16, 16);
      _OWORD *v71 = v208;
      float32x4_t v72 = *(float32x4_t **)(a3 + 24);
      float32x4_t v73 = v12[6];
      float32x4_t v74 = vmulq_f32(*v72, v73);
      int8x16_t v75 = (int8x16_t)vmulq_f32(v73, v72[1]);
      int8x16_t v76 = (int8x16_t)vmulq_f32(v73, v72[2]);
      v76.i32[3] = 0;
      *(float32x2_t *)v74.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v75.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
      *(float32x2_t *)&v74.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), 0);
      float32x4_t v209 = vaddq_f32(v74, v72[3]);
      float32x4_t v77 = (_OWORD *)sub_1B6E073B8(32, 16);
      *float32x4_t v77 = *v71;
      sub_1B6E073C4((uint64_t)v71);
      char v233 = 1;
      v232 = v77;
      v77[1] = v209;
      float32x4_t v78 = *(float32x4_t **)(a3 + 24);
      float32x4_t v79 = v12[7];
      float32x4_t v80 = vmulq_f32(*v78, v79);
      int8x16_t v81 = (int8x16_t)vmulq_f32(v79, v78[1]);
      int8x16_t v82 = (int8x16_t)vmulq_f32(v79, v78[2]);
      v82.i32[3] = 0;
      *(float32x2_t *)v80.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v81.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)));
      *(float32x2_t *)&v80.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)), 0);
      float32x4_t v210 = vaddq_f32(v80, v78[3]);
      __n128 v83 = (_OWORD *)sub_1B6E073B8(64, 16);
      uint64_t v84 = v232;
      *__n128 v83 = *v232;
      v83[1] = v84[1];
      if (v233) {
        sub_1B6E073C4((uint64_t)v84);
      }
      char v233 = 1;
      v232 = v83;
      _OWORD v83[2] = v210;
      *(uint64_t *)((char *)v231.i64 + 4) = 0x400000003;
      float v85 = sub_1B6DF3BE0(*(void *)(a1 + 40));
      sub_1B6DF2324(v235, &v240, &v234, *(void *)(a4 + 24), 0);
      int8x16_t v86 = (int8x16_t)vmulq_f32(v236, v236);
      float v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).f32[0];
      if (v87 > 0.00000011921)
      {
        float32x4_t v88 = vmulq_n_f32(v236, 1.0 / v87);
        v88.i32[3] = 0;
        float32x4_t v230 = v88;
        float v89 = v239;
        float v90 = v89 - (*(float (**)(uint64_t))(*(void *)v11 + 96))(v11);
        float v91 = (*(float (**)(float32x4_t *))(v12->i64[0] + 96))(v12);
        sub_1B6DF4D44(&v230, *(void *)(v11 + 72), *(float32x4_t **)(a2 + 24), (uint64_t)&v231, (uint64_t)a5, (float)(v90 - v91) - v85, v85, v92, v93, v94, v95, v96);
      }
      if (*(unsigned char *)(a1 + 32))
      {
        uint64_t v97 = a5[1];
        if (*(_DWORD *)(v97 + 800))
        {
          unsigned __int32 v98 = *(float32x4_t **)(v97 + 784);
          float32x4_t v99 = *(float32x4_t **)(a5[2] + 16);
          if (v98 == v99) {
            float32x4_t v99 = *(float32x4_t **)(a5[3] + 16);
          }
          else {
            unsigned __int32 v98 = *(float32x4_t **)(a5[3] + 16);
          }
          sub_1B6DF3CF4((void *)v97, v98 + 1, v99 + 1);
        }
      }
      if (v232 && v233) {
        sub_1B6E073C4((uint64_t)v232);
      }
      return;
    }
  }
LABEL_43:
  sub_1B6DF2324(v235, &v240, a5, *(void *)(a4 + 24), 0);
  if (*(_DWORD *)(a1 + 52))
  {
    if (*(_DWORD *)(a5[1] + 800) < *(_DWORD *)(a1 + 56))
    {
      int8x16_t v100 = (int8x16_t)vmulq_f32(v236, v236);
      float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8);
      int8x16_t v102 = vextq_s8(v100, v100, 8uLL);
      float v103 = vadd_f32(v101, *(float32x2_t *)v102.i8).f32[0];
      if (v103 > 0.00000011921)
      {
        _Q3 = vmulq_n_f32(v236, 1.0 / v103);
        _Q3.i32[3] = 0;
        float32x4_t v207 = _Q3;
        float v206 = _Q3.f32[2];
        _S1 = _Q3.i32[1];
        if (fabsf(_Q3.f32[2]) <= 0.70711)
        {
          float32x2_t v109 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q3.f32, 0);
          v109.f32[0] = -_Q3.f32[1];
          *(float32x2_t *)v102.i8 = vmul_n_f32(v109, 1.0/ sqrtf(vmlas_n_f32(vmuls_lane_f32(_Q3.f32[1], *(float32x2_t *)_Q3.f32, 1), _Q3.f32[0], _Q3.f32[0])));
          v102.i32[2] = 0;
          float32x4_t v200 = (float32x4_t)v102;
        }
        else
        {
          __asm { FMLA            S2, S1, V3.S[1] }
          float v107 = 1.0 / sqrtf(_S2);
          v108.i32[0] = 0;
          v108.f32[1] = -(float)(_Q3.f32[2] * v107);
          v108.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v107, *(float32x2_t *)_Q3.f32, 1));
          float32x4_t v200 = v108;
        }
        float v110 = (*(float (**)(uint64_t))(*(void *)v11 + 32))(v11);
        float v111 = (*(float (**)(float32x4_t *))(v12->i64[0] + 32))(v12);
        if (v110 >= v111)
        {
          unsigned __int32 v112 = &v245;
          float v113 = &v246;
          __n128 v114 = &v247;
          float v115 = *(float *)&dword_1E9DDA464 / v111;
          if ((float)(*(float *)&dword_1E9DDA464 / v111) > 0.3927) {
            float v115 = 0.3927;
          }
          float32x4_t v116 = v244;
        }
        else
        {
          unsigned __int32 v112 = &v241;
          float v113 = &v242;
          __n128 v114 = &v243;
          float v115 = *(float *)&dword_1E9DDA464 / v110;
          if ((float)(*(float *)&dword_1E9DDA464 / v110) > 0.3927) {
            float v115 = 0.3927;
          }
          float32x4_t v116 = v240;
        }
        float32x4_t v205 = v116;
        int v117 = *(_DWORD *)(a1 + 52);
        if (v117 >= 1)
        {
          float32x4_t v203 = *v113;
          float32x4_t v204 = *v112;
          float32x4_t v202 = *v114;
          int8x16_t v118 = (int8x16_t)vmulq_f32(v200, v200);
          LODWORD(v211) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8)).u32[0];
          __float2 v119 = __sincosf_stret(v115 * 0.5);
          int v120 = 0;
          float v121 = v119.__sinval / sqrtf(v211);
          *(float32x2_t *)v122.i8 = vmul_n_f32(*(float32x2_t *)v200.f32, v121);
          v123.i64[0] = v122.i64[0];
          v123.i64[1] = __PAIR64__(LODWORD(v119.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v121, v200, 2)));
          int8x16_t v124 = (int8x16_t)vmulq_f32(v207, v207);
          int32x2_t v125 = (int32x2_t)vextq_s8(v123, v123, 8uLL).u64[0];
          int32x2_t v126 = vzip1_s32(v125, *(int32x2_t *)v122.i8);
          float32x4_t v199 = (float32x4_t)v123;
          float32x2_t v201 = *(float32x2_t *)v122.i8;
          float32x2_t v198 = (float32x2_t)vextq_s8(v123, v122, 0xCuLL).u64[0];
          float32x2_t v127 = (float32x2_t)vext_s8(*(int8x8_t *)v122.i8, (int8x8_t)v125, 4uLL);
          float32x2_t v128 = (float32x2_t)vrev64_s32(v126);
          float v129 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL), vpadd_f32(*(float32x2_t *)v124.i8, *(float32x2_t *)v124.i8)).f32[0]);
          do
          {
            if (v211 > 0.00000011921)
            {
              __float2 v130 = __sincosf_stret((float)((float)(6.2832 / (float)v117) * (float)v120) * 0.5);
              v131.i64[1] = v207.i64[1];
              *(float32x2_t *)v131.i8 = vmul_n_f32(*(float32x2_t *)v207.f32, v130.__sinval / v129);
              v132.i64[0] = v131.i64[0];
              v132.i64[1] = __PAIR64__(LODWORD(v130.__cosval), v206 * (float)(v130.__sinval / v129));
              if (v110 >= v111)
              {
                float32x4_t v159 = *(float32x4_t **)(a2 + 24);
                float32x4_t v160 = v159[1];
                float32x4_t v240 = *v159;
                float32x4_t v241 = v160;
                float32x4_t v161 = v159[3];
                float32x4_t v242 = v159[2];
                float32x4_t v243 = v161;
                float32x4_t v162 = (float32x4_t)veorq_s8((int8x16_t)v132, (int8x16_t)xmmword_1B6E72E30);
                v161.i64[0] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
                float32x2_t v163 = (float32x2_t)vzip1_s32(*(int32x2_t *)v161.f32, *(int32x2_t *)v162.f32);
                *(int8x8_t *)v161.f32 = vext_s8(*(int8x8_t *)v162.f32, *(int8x8_t *)v161.f32, 4uLL);
                float32x2_t v164 = vmul_f32(v198, v163);
                *(float32x2_t *)v165.f32 = vmul_f32(v127, v163);
                *(float32x2_t *)&v165.u32[2] = vmul_f32(v128, *(float32x2_t *)v161.f32);
                *(float32x2_t *)v161.f32 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v162.f32, v199, 3), vmul_f32((float32x2_t)v126, *(float32x2_t *)v161.f32));
                *(float32x2_t *)&v161.u32[2] = vadd_f32(vmul_lane_f32(*(float32x2_t *)v162.f32, v201, 1), v164);
                float32x4_t v166 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v199, v162, 3), v165), (float32x4_t)veorq_s8((int8x16_t)v161, (int8x16_t)xmmword_1B6E72E20));
                *(int32x2_t *)v161.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL), *(int32x2_t *)v166.f32);
                v165.i64[0] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
                int32x2_t v167 = vzip1_s32(*(int32x2_t *)v165.f32, *(int32x2_t *)v131.i8);
                float32x2_t v168 = (float32x2_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 4uLL).u64[0];
                *(int8x8_t *)v165.f32 = vext_s8(*(int8x8_t *)v131.i8, *(int8x8_t *)v165.f32, 4uLL);
                float32x2_t v169 = vmul_laneq_f32(*(float32x2_t *)v166.f32, v132, 3);
                float32x2_t v170 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, v131, 0xCuLL), *(float32x2_t *)v161.f32);
                float32x2_t v171 = vmul_lane_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v131.i8, 1);
                *(float32x2_t *)v161.f32 = vmul_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v161.f32);
                *(float32x2_t *)&v161.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v167), v168);
                float32x4_t v172 = vmulq_laneq_f32(v132, v166, 3);
                *(float32x2_t *)v166.f32 = vadd_f32(v169, vmul_f32((float32x2_t)v167, v168));
                *(float32x2_t *)&v166.u32[2] = vadd_f32(v171, v170);
                float32x4_t v231 = vaddq_f32(vsubq_f32(v172, v161), (float32x4_t)veorq_s8((int8x16_t)v166, (int8x16_t)xmmword_1B6E72E20));
                sub_1B6548938((uint64_t)&v212, &v231);
                float32x4_t v173 = *(float32x4_t **)(a3 + 24);
                float32x4_t v174 = *v173;
                float32x4_t v175 = v173[1];
                v174.i32[3] = 0;
                v175.i32[3] = 0;
                float32x4_t v176 = v173[2];
                v176.i32[3] = 0;
                float32x4_t v155 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v212.f32[0]), v175, *(float32x2_t *)v212.f32, 1), v176, v212, 2);
                float32x4_t v156 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v213.f32[0]), v175, *(float32x2_t *)v213.f32, 1), v176, v213, 2);
                float32x4_t v157 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, v214.f32[0]), v175, *(float32x2_t *)v214.f32, 1), v176, v214, 2);
                float32x4_t v244 = v155;
                float32x4_t v245 = v156;
                float32x4_t v246 = v157;
                float32x4_t v151 = v240;
                float32x4_t v152 = v241;
                float32x4_t v153 = v242;
                float32x4_t v158 = v247;
              }
              else
              {
                float32x4_t v133 = (float32x4_t)veorq_s8((int8x16_t)v132, (int8x16_t)xmmword_1B6E72E30);
                int32x2_t v134 = (int32x2_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
                float32x2_t v135 = (float32x2_t)vzip1_s32(v134, *(int32x2_t *)v133.f32);
                float32x2_t v136 = (float32x2_t)vext_s8(*(int8x8_t *)v133.f32, (int8x8_t)v134, 4uLL);
                float32x2_t v137 = vmul_f32(v198, v135);
                *(float32x2_t *)v138.f32 = vmul_f32(v127, v135);
                *(float32x2_t *)&v138.u32[2] = vmul_f32(v128, v136);
                *(float32x2_t *)v139.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v133.f32, v199, 3), vmul_f32((float32x2_t)v126, v136));
                v139.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v133.f32, v201, 1), v137);
                float32x4_t v140 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v199, v133, 3), v138), (float32x4_t)veorq_s8(v139, (int8x16_t)xmmword_1B6E72E20));
                *(int32x2_t *)v139.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), *(int32x2_t *)v140.f32);
                v138.i64[0] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
                int32x2_t v141 = vzip1_s32(*(int32x2_t *)v138.f32, *(int32x2_t *)v131.i8);
                float32x2_t v142 = (float32x2_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 4uLL).u64[0];
                *(int8x8_t *)v138.f32 = vext_s8(*(int8x8_t *)v131.i8, *(int8x8_t *)v138.f32, 4uLL);
                float32x2_t v143 = vmul_laneq_f32(*(float32x2_t *)v140.f32, v132, 3);
                float32x2_t v144 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v132, v131, 0xCuLL), *(float32x2_t *)v139.i8);
                float32x2_t v145 = vmul_lane_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v131.i8, 1);
                *(float32x2_t *)v139.i8 = vmul_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v139.i8);
                v139.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v141), v142);
                float32x4_t v146 = vmulq_laneq_f32(v132, v140, 3);
                *(float32x2_t *)v140.f32 = vadd_f32(v143, vmul_f32((float32x2_t)v141, v142));
                *(float32x2_t *)&v140.u32[2] = vadd_f32(v145, v144);
                float32x4_t v231 = vaddq_f32(vsubq_f32(v146, (float32x4_t)v139), (float32x4_t)veorq_s8((int8x16_t)v140, (int8x16_t)xmmword_1B6E72E20));
                sub_1B6548938((uint64_t)&v212, &v231);
                int8x16_t v147 = *(float32x4_t **)(a2 + 24);
                float32x4_t v148 = *v147;
                float32x4_t v149 = v147[1];
                v148.i32[3] = 0;
                v149.i32[3] = 0;
                float32x4_t v150 = v147[2];
                v150.i32[3] = 0;
                float32x4_t v151 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v212.f32[0]), v149, *(float32x2_t *)v212.f32, 1), v150, v212, 2);
                float32x4_t v152 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v213.f32[0]), v149, *(float32x2_t *)v213.f32, 1), v150, v213, 2);
                float32x4_t v153 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v214.f32[0]), v149, *(float32x2_t *)v214.f32, 1), v150, v214, 2);
                float32x4_t v240 = v151;
                float32x4_t v241 = v152;
                float32x4_t v242 = v153;
                float32x4_t v154 = *(float32x4_t **)(a3 + 24);
                float32x4_t v155 = *v154;
                float32x4_t v244 = *v154;
                float32x4_t v156 = v154[1];
                float32x4_t v245 = v156;
                float32x4_t v157 = v154[2];
                float32x4_t v246 = v157;
                float32x4_t v158 = v154[3];
                float32x4_t v247 = v158;
              }
              uint64_t v177 = *(void *)(a4 + 24);
              v212.i64[0] = (uint64_t)&unk_1F0FB2160;
              float v215 = a5;
              float32x4_t v216 = v151;
              float32x4_t v217 = v152;
              float32x4_t v218 = v153;
              float32x4_t v219 = v243;
              float32x4_t v220 = v155;
              float32x4_t v221 = v156;
              float32x4_t v222 = v157;
              float32x4_t v223 = v158;
              float32x4_t v224 = v205;
              float32x4_t v225 = v204;
              float32x4_t v226 = v203;
              float32x4_t v227 = v202;
              BOOL v228 = v110 < v111;
              uint64_t v229 = v177;
              sub_1B6DF2324(v235, &v240, &v212, v177, 0);
              int v117 = *(_DWORD *)(a1 + 52);
            }
            ++v120;
          }
          while (v120 < v117);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 32)) {
    goto LABEL_85;
  }
}

float sub_1B6DDB078(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  float32x4_t v5 = vsubq_f32(a2[8], a2[4]);
  v5.i32[3] = 0;
  int8x16_t v6 = (int8x16_t)vmulq_f32(v5, v5);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0] >= (float)(a2[18].f32[0] * a2[18].f32[0]))
  {
    float v9 = 1.0;
    if (byte_1E9E49938) {
      return v9;
    }
  }
  else
  {
    float32x4_t v7 = vsubq_f32(a3[8], a3[4]);
    v7.i32[3] = 0;
    int8x16_t v8 = (int8x16_t)vmulq_f32(v7, v7);
    float v9 = 1.0;
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] < (float)(a3[18].f32[0] * a3[18].f32[0])|| byte_1E9E49938 != 0)
    {
      return v9;
    }
  }
  uint64_t v11 = a2[13].i64[0];
  __int32 v12 = a3[17].i32[3];
  sub_1B6DE65E4((uint64_t)&v27);
  float32x4_t v27 = &unk_1F0FB07C0;
  int v28 = 8;
  __int32 v29 = v12;
  __int32 v30 = v12;
  v23[0] = &unk_1F0FB2B98;
  float v24 = 1.0e18;
  uint64_t v25 = 0;
  int v26 = 0;
  int v21 = 953267991;
  char v22 = 0;
  sub_1B6DEF878(v19, v11, (uint64_t)&v27, (uint64_t)v20);
  float v9 = 1.0;
  if (sub_1B6DEF89C((uint64_t)v19, (uint64_t)&a2[1], a2 + 5, a3 + 1, a3 + 5, (uint64_t)v23))
  {
    float v13 = v24;
    if (a2[17].f32[2] > v24) {
      a2[17].f32[2] = v24;
    }
    if (a3[17].f32[2] > v13) {
      a3[17].f32[2] = v13;
    }
    if (v13 < 1.0) {
      float v9 = v13;
    }
    else {
      float v9 = 1.0;
    }
  }
  nullsub_1(v19);
  nullsub_1(&v27);
  uint64_t v14 = a3[13].i64[0];
  __int32 v15 = a2[17].i32[3];
  sub_1B6DE65E4(v16);
  float32x4_t v27 = &unk_1F0FB07C0;
  int v28 = 8;
  __int32 v29 = v15;
  __int32 v30 = v15;
  v23[0] = &unk_1F0FB2B98;
  float v24 = 1.0e18;
  uint64_t v25 = 0;
  int v26 = 0;
  int v21 = 953267991;
  char v22 = 0;
  sub_1B6DEF878(v19, (uint64_t)&v27, v14, (uint64_t)v20);
  if (sub_1B6DEF89C((uint64_t)v19, (uint64_t)&a2[1], a2 + 5, a3 + 1, a3 + 5, (uint64_t)v23))
  {
    float v17 = v24;
    if (a2[17].f32[2] > v24) {
      a2[17].f32[2] = v24;
    }
    if (a3[17].f32[2] > v17) {
      a3[17].f32[2] = v17;
    }
    if (v9 > v17) {
      float v9 = v17;
    }
  }
  nullsub_1(v19);
  nullsub_1(&v27);
  return v9;
}

int8x16_t sub_1B6DDB370(int8x16_t *a1, uint64_t *a2)
{
  __int32 v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 112))(*a2, 64);
  uint64_t v5 = a2[1];
  uint64_t v6 = a1[2].i64[0];
  int8x16_t v9 = a1[1];
  float32x4_t v7 = sub_1B6DCFC30(v4, a2);
  void *v7 = &unk_1F0FB1CE8;
  int8x16_t result = vextq_s8(v9, v9, 8uLL);
  *((int8x16_t *)v7 + 1) = result;
  *((unsigned char *)v7 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  _OWORD v7[5] = v5;
  *((unsigned char *)v7 + 48) = 0;
  *(void *)((char *)v7 + 5sub_1B6DC4968((unsigned int *)this + 2) = v6;
  return result;
}

void sub_1B6DDB440(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 && *(unsigned char *)(a1 + 32))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      int v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          uint64_t v7 = sub_1B6E073B8(8 * v6, 16);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          uint64_t v7 = 0;
        }
        if (v5 >= 1)
        {
          uint64_t v8 = 0;
          do
          {
            *(void *)(v7 + v8) = *(void *)(*(void *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9) {
          BOOL v10 = *(unsigned char *)(a2 + 24) == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10)
        {
          sub_1B6E073C4(v9);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        *(unsigned char *)(a2 + 24) = 1;
        *(void *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        uint64_t v2 = *(void *)(a1 + 40);
      }
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

void sub_1B6DDB524()
{
}

void sub_1B6DDB544()
{
}

uint64_t sub_1B6DDB560(uint64_t a1, _OWORD *a2, float a3)
{
  *(float *)(a1 + 40) = a3;
  *(_OWORD *)(a1 + 16) = *a2;
  float v3 = (float)(*(float *)(a1 + 36) + *(float *)(a1 + 32)) + a3;
  *(float *)(a1 + 40) = v3;
  if (v3 < 0.0) {
    *(unsigned char *)(a1 + 44) = 1;
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
}

void sub_1B6DDB5EC()
{
}

uint64_t sub_1B6DDB600(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t v4 = *a2;
  float32x4_t v5 = vmulq_n_f32(*a2, a4);
  v5.i32[3] = 0;
  float32x4_t v6 = *a3;
  if (*(unsigned char *)(a1 + 256))
  {
    float32x4_t v7 = *(float32x4_t *)(a1 + 64);
    int32x4_t v8 = *(int32x4_t *)(a1 + 80);
    int8x16_t v9 = *(int8x16_t *)(a1 + 96);
    float32x4_t v10 = (float32x4_t)vtrn1q_s32((int32x4_t)v7, v8);
    v11.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    v10.i64[1] = v9.u32[0];
    v12.i64[0] = 0x8000000080000000;
    v12.i64[1] = 0x8000000080000000;
    float32x4_t v13 = (float32x4_t)veorq_s8(*(int8x16_t *)(a1 + 112), v12);
    *(int32x2_t *)v7.f32 = vzip2_s32(*(int32x2_t *)v7.f32, *(int32x2_t *)v8.i8);
    *(int32x2_t *)&v7.u32[2] = vzip2_s32(*(int32x2_t *)v9.i8, 0);
    float32x4_t v14 = vmulq_f32(v10, v13);
    int8x16_t v15 = (int8x16_t)vmulq_f32(v7, v13);
    v11.i64[1] = vextq_s8(v9, v9, 8uLL).u32[0];
    int8x16_t v16 = (int8x16_t)vmulq_f32(v11, v13);
    v16.i32[3] = 0;
    float32x4_t v17 = *(float32x4_t *)(a1 + 192);
    float32x4_t v18 = *(float32x4_t *)(a1 + 208);
    *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v15.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)));
    *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
    v10.i32[3] = 0;
    v7.i32[3] = 0;
    v11.i32[3] = 0;
    float32x4_t v19 = *(float32x4_t *)(a1 + 224);
    float32x4_t v20 = vmlaq_lane_f32(vmulq_n_f32(v10, v19.f32[0]), v7, *(float32x2_t *)v19.f32, 1);
    float32x4_t v21 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v18.f32[0]), v7, *(float32x2_t *)v18.f32, 1), v11, v18, 2);
    int8x16_t v22 = (int8x16_t)vmulq_f32(v17, v14);
    int8x16_t v23 = (int8x16_t)vmulq_f32(v18, v14);
    int8x16_t v24 = (int8x16_t)vmulq_f32(v19, v14);
    v24.i32[3] = 0;
    float32x4_t v25 = vaddq_f32(v6, v5);
    float32x4_t v26 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v17.f32[0]), v7, *(float32x2_t *)v17.f32, 1), v11, v17, 2);
    *(float32x2_t *)v7.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v23.i8));
    *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), 0);
    float32x4_t v27 = vmlaq_laneq_f32(v20, v11, v19, 2);
    float32x4_t v28 = vaddq_f32(v7, *(float32x4_t *)(a1 + 240));
    float32x4_t v29 = vmulq_f32(v25, v26);
    int8x16_t v30 = (int8x16_t)vmulq_f32(v25, v21);
    int8x16_t v31 = (int8x16_t)vmulq_f32(v25, v27);
    v31.i32[3] = 0;
    *(float32x2_t *)v29.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.i8));
    *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    float32x4_t v32 = vsubq_f32(vaddq_f32(v28, v29), v6);
    v32.i32[3] = 0;
    int8x16_t v33 = (int8x16_t)vmulq_f32(v4, v32);
    float32x2_t v34 = vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8);
    __n128 v35 = (__n128)vextq_s8(v33, v33, 8uLL);
    v35.n128_u64[0] = (unint64_t)vadd_f32(v34, (float32x2_t)v35.n128_u64[0]);
  }
  else
  {
    float32x4_t v36 = *(float32x4_t *)(a1 + 128);
    int32x4_t v37 = *(int32x4_t *)(a1 + 144);
    float32x4_t v38 = *(float32x4_t *)(a1 + 160);
    int32x2_t v39 = vzip2_s32(*(int32x2_t *)v38.f32, 0);
    unsigned __int32 v40 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
    float32x4_t v41 = (float32x4_t)vtrn1q_s32((int32x4_t)v36, v37);
    v38.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    v41.i64[1] = *(_OWORD *)(a1 + 160);
    v42.i64[0] = 0x8000000080000000;
    v42.i64[1] = 0x8000000080000000;
    float32x4_t v43 = (float32x4_t)veorq_s8(*(int8x16_t *)(a1 + 176), v42);
    int8x16_t v44 = (int8x16_t)vmulq_f32(v41, v43);
    *(int32x2_t *)v36.f32 = vzip2_s32(*(int32x2_t *)v36.f32, *(int32x2_t *)v37.i8);
    *(int32x2_t *)&v36.u32[2] = v39;
    float32x4_t v45 = vmulq_f32(v36, v43);
    v38.i64[1] = v40;
    int8x16_t v46 = (int8x16_t)vmulq_f32(v38, v43);
    v46.i32[3] = 0;
    *(float32x2_t *)v45.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v45.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)));
    *(float32x2_t *)&v45.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0);
    float32x4_t v47 = *(float32x4_t *)(a1 + 192);
    float32x4_t v48 = *(float32x4_t *)(a1 + 208);
    v41.i32[3] = 0;
    v36.i32[3] = 0;
    v38.i32[3] = 0;
    float32x4_t v49 = *(float32x4_t *)(a1 + 224);
    float32x4_t v50 = vmlaq_lane_f32(vmulq_n_f32(v41, v49.f32[0]), v36, *(float32x2_t *)v49.f32, 1);
    float32x4_t v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, v48.f32[0]), v36, *(float32x2_t *)v48.f32, 1), v38, v48, 2);
    int8x16_t v52 = (int8x16_t)vmulq_f32(v47, v45);
    int8x16_t v53 = (int8x16_t)vmulq_f32(v48, v45);
    int8x16_t v54 = (int8x16_t)vmulq_f32(v49, v45);
    v54.i32[3] = 0;
    float32x4_t v55 = vaddq_f32(v6, v5);
    float32x4_t v56 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v41, v47.f32[0]), v36, *(float32x2_t *)v47.f32, 1), v38, v47, 2);
    float32x4_t v57 = vmlaq_laneq_f32(v50, v38, v49, 2);
    *(float32x2_t *)v38.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8));
    *(float32x2_t *)&v38.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
    float32x4_t v58 = vmulq_f32(v6, v56);
    int8x16_t v59 = (int8x16_t)vmulq_f32(v6, v51);
    int8x16_t v60 = (int8x16_t)vmulq_f32(v6, v57);
    v60.i32[3] = 0;
    *(float32x2_t *)v58.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v59.i8));
    *(float32x2_t *)&v58.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)), 0);
    float32x4_t v61 = vsubq_f32(v55, vaddq_f32(vaddq_f32(v38, *(float32x4_t *)(a1 + 240)), v58));
    v61.i32[3] = 0;
    int8x16_t v62 = (int8x16_t)vmulq_f32(v4, v61);
    float32x2_t v63 = vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8);
    __n128 v35 = (__n128)vextq_s8(v62, v62, 8uLL);
    v35.n128_u64[0] = (unint64_t)vadd_f32(v63, (float32x2_t)v35.n128_u64[0]);
  }
  return (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v35);
}

uint64_t sub_1B6DDB8F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  int8x16_t v15 = sub_1B6DC9210((void *)a1, a3);
  *int8x16_t v15 = &unk_1F0FB2628;
  *((unsigned char *)v15 + 16) = 0;
  v15[3] = a2;
  *((unsigned char *)v15 + 3sub_1B6DC4968((unsigned int *)this + 2) = a6;
  *((_DWORD *)v15 + 9) = a7;
  *((_DWORD *)v15 + 10) = a8;
  if (!a2)
  {
    BOOL v16 = a6 == 0;
    if (a6) {
      uint64_t v17 = a4;
    }
    else {
      uint64_t v17 = a5;
    }
    if (v16) {
      a5 = a4;
    }
    if ((*(unsigned int (**)(void, void, void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), *(void *)(a5 + 16), *(void *)(v17 + 16)))
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)(a5 + 16), *(void *)(v17 + 16));
      *(unsigned char *)(a1 + 16) = 1;
    }
  }
  return a1;
}

uint64_t sub_1B6DDB9FC(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2628;
  if (*(unsigned char *)(a1 + 16) && *(void *)(a1 + 24)) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  return a1;
}

void sub_1B6DDBA78(uint64_t a1)
{
  sub_1B6DDB9FC(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DDBAB0(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a3;
  }
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = a4;
  }
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v9 + 8);
  int8x16_t v12 = *(float32x4_t **)(v8 + 24);
  float32x4_t v75 = v12[1];
  float32x4_t v77 = *v12;
  float32x4_t v13 = v12[3];
  float32x4_t v73 = v12[2];
  float32x4_t v14 = *(_OWORD **)(v9 + 24);
  float32x4_t v15 = *((float32x4_t *)v14 + 1);
  float32x4_t v16 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v14, (int32x4_t)v15);
  int8x16_t v17 = *((int8x16_t *)v14 + 2);
  v18.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v16.i64[1] = v17.u32[0];
  v19.i64[0] = 0x8000000080000000;
  v19.i64[1] = 0x8000000080000000;
  float32x4_t v20 = (float32x4_t)veorq_s8(*((int8x16_t *)v14 + 3), v19);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v16, v20);
  *(int32x2_t *)v22.f32 = vzip2_s32(*(int32x2_t *)v14, *(int32x2_t *)v15.f32);
  *(int32x2_t *)&v22.u32[2] = vzip2_s32(*(int32x2_t *)v17.i8, 0);
  int8x16_t v23 = (int8x16_t)vmulq_f32(v22, v20);
  v18.i64[1] = vextq_s8(v17, v17, 8uLL).u32[0];
  int8x16_t v24 = (int8x16_t)vmulq_f32(v18, v20);
  v24.i32[3] = 0;
  float32x2_t v25 = vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  *(float32x2_t *)v24.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v23.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)));
  float32x4_t v26 = v77;
  v26.i32[3] = 0;
  float32x4_t v27 = v75;
  v27.i32[3] = 0;
  float32x4_t v28 = v73;
  v28.i32[3] = 0;
  float32x4_t v70 = (float32x4_t)v17;
  float32x4_t v71 = v28;
  float32x4_t v81 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v26, *(float32x2_t *)v14, 1), v27, *(float32x2_t *)v15.f32, 1), v28, *(float32x2_t *)v17.i8, 1);
  float32x4_t v83 = vmlaq_laneq_f32(vmulq_laneq_f32(v26, *(float32x4_t *)v14, 2), v27, v15, 2);
  int8x16_t v29 = (int8x16_t)vmulq_f32(v13, v16);
  int8x16_t v30 = (int8x16_t)vmulq_f32(v13, v22);
  int8x16_t v31 = (int8x16_t)vmulq_f32(v13, v18);
  v31.i32[3] = 0;
  float32x2_t v32 = vadd_f32(*(float32x2_t *)v24.i8, vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.i8)));
  float32x4_t v79 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v26, COERCE_FLOAT(*v14)), v27, v15.f32[0]), v28, *(float *)v17.i32);
  float32x2_t v33 = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
  sub_1B6548938((uint64_t)v87, a2);
  float32x4_t v34 = v87[0];
  float32x4_t v35 = v87[1];
  v34.i32[3] = 0;
  v35.i32[3] = 0;
  float32x4_t v36 = v87[2];
  v36.i32[3] = 0;
  float32x4_t v37 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v77.f32[0]), v35, *(float32x2_t *)v77.f32, 1), v36, v77, 2);
  float32x4_t v38 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v75.f32[0]), v35, *(float32x2_t *)v75.f32, 1), v36, v75, 2);
  float32x4_t v39 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v73.f32[0]), v35, *(float32x2_t *)v73.f32, 1), v36, v73, 2);
  unsigned __int32 v40 = *(float32x4_t **)(v9 + 24);
  float32x4_t v41 = *v40;
  float32x4_t v42 = v40[1];
  v41.i32[3] = 0;
  v42.i32[3] = 0;
  float32x4_t v43 = v40[2];
  v43.i32[3] = 0;
  float32x4_t v44 = vmlaq_laneq_f32(vmulq_laneq_f32(v41, v37, 2), v42, v38, 2);
  float32x4_t v45 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v41, *(float32x2_t *)v37.f32, 1), v42, *(float32x2_t *)v38.f32, 1), v43, *(float32x2_t *)v39.f32, 1);
  float32x4_t v46 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v41, v37.f32[0]), v42, v38.f32[0]), v43, v39.f32[0]);
  float32x4_t v47 = vmlaq_laneq_f32(v44, v43, v39, 2);
  v42.i64[0] = 0x8000000080000000;
  v42.i64[1] = 0x8000000080000000;
  float32x4_t v48 = (float32x4_t)veorq_s8(*(int8x16_t *)(v11 + 64), (int8x16_t)v42);
  int8x16_t v49 = (int8x16_t)vmulq_f32(v46, v48);
  int8x16_t v50 = (int8x16_t)vmulq_f32(v45, v48);
  int8x16_t v51 = (int8x16_t)vmulq_f32(v47, v48);
  v51.i32[3] = 0;
  *(float32x2_t *)v49.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v50.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)));
  v49.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)), 0);
  int8x16_t v86 = v49;
  (*(void (**)(float32x4_t *__return_ptr, uint64_t, int8x16_t *))(*(void *)v10 + 128))(v87, v10, &v86);
  float32x4_t v52 = vmulq_f32(v79, v87[0]);
  int8x16_t v53 = (int8x16_t)vmulq_f32(v81, v87[0]);
  int8x16_t v54 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(v83, v71, v70, 2), v87[0]);
  v54.i32[3] = 0;
  *(float32x2_t *)v52.f32 = vadd_f32(v32, vadd_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL))));
  *(float32x2_t *)&v52.u32[2] = vadd_f32(vadd_f32(vpadd_f32(v25, 0), v33), vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0));
  float32x4_t v80 = v52;
  float32x4_t v72 = *(float32x4_t *)(v11 + 64);
  int8x16_t v55 = (int8x16_t)vmulq_f32(v72, v52);
  float v84 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0]- *(float *)(v11 + 80);
  float32x4_t v56 = *(float32x4_t **)(v9 + 24);
  float32x4_t v76 = v56[1];
  float32x4_t v78 = *v56;
  float32x4_t v74 = v56[2];
  float32x4_t v82 = v56[3];
  float v57 = sub_1B6DF3BE0(*(void *)(a1 + 24));
  a6[1] = *(void *)(a1 + 24);
  if (v84 < v57)
  {
    float32x4_t v58 = vmulq_n_f32(v72, v84);
    v58.i32[3] = 0;
    float32x4_t v59 = vsubq_f32(v80, v58);
    float32x4_t v60 = v59;
    v60.i32[3] = 0;
    int8x16_t v61 = (int8x16_t)vmulq_f32(v74, v59);
    int8x16_t v62 = (int8x16_t)vmulq_f32(v78, v60);
    float32x4_t v63 = vmulq_f32(v76, v60);
    *(float32x2_t *)v63.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL)), vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v63.f32));
    v61.i32[3] = 0;
    *(float32x2_t *)&v63.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)), 0);
    float32x4_t v64 = vaddq_f32(v82, v63);
    float v65 = *(float32x4_t **)(v9 + 24);
    float32x4_t v66 = *(float32x4_t *)(v11 + 64);
    int8x16_t v67 = (int8x16_t)vmulq_f32(*v65, v66);
    int8x16_t v68 = (int8x16_t)vmulq_f32(v66, v65[1]);
    int8x16_t v69 = (int8x16_t)vmulq_f32(v66, v65[2]);
    v69.i32[3] = 0;
    *(float32x2_t *)v67.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
    v67.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), 0);
    float32x4_t v85 = v64;
    int8x16_t v86 = v67;
    (*(void (**)(void *, int8x16_t *, float32x4_t *, float))(*a6 + 32))(a6, &v86, &v85, v84);
  }
}

void sub_1B6DDBEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (*(void *)(a1 + 24))
  {
    if (*(unsigned char *)(a1 + 32)) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = a2;
    }
    if (*(unsigned char *)(a1 + 32)) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = a3;
    }
    uint64_t v11 = *(int **)(v9 + 8);
    uint64_t v12 = *(void *)(v10 + 8);
    float32x4_t v13 = *(float32x4_t **)(v9 + 24);
    float32x4_t v15 = *v13;
    float32x4_t v14 = v13[1];
    float32x4_t v16 = *(_OWORD **)(v10 + 24);
    float32x4_t v17 = *((float32x4_t *)v16 + 1);
    float32x4_t v18 = *(float32x4_t *)v16;
    v18.i32[3] = 0;
    float32x4_t v19 = v17;
    v19.i32[3] = 0;
    float32x4_t v20 = vmlaq_n_f32(vmulq_n_f32(v18, COERCE_FLOAT(*v13)), v19, v14.f32[0]);
    float32x4_t v21 = vmlaq_laneq_f32(vmulq_laneq_f32(v18, *v13, 2), v19, v14, 2);
    float32x4_t v22 = vmlaq_lane_f32(vmulq_lane_f32(v18, *(float32x2_t *)v13->f32, 1), v19, *(float32x2_t *)v14.f32, 1);
    float32x4_t v23 = *((float32x4_t *)v16 + 2);
    unsigned __int32 v24 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
    v15.i32[3] = 0;
    v14.i32[3] = 0;
    float32x4_t v25 = v13[2];
    float32x4_t v26 = v13[3];
    float32x4_t v27 = v25;
    v27.i32[3] = 0;
    float32x4_t v118 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, COERCE_FLOAT(*v16)), v14, v17.f32[0]), v27, v23.f32[0]);
    float32x4_t v121 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v15, *(float32x2_t *)v16, 1), v14, *(float32x2_t *)v17.f32, 1), v27, *(float32x2_t *)v23.f32, 1);
    float32x4_t v115 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v15, *(float32x4_t *)v16, 2), v14, v17, 2), v27, v23, 2);
    v23.i32[3] = 0;
    float32x4_t v28 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v16, (int32x4_t)v17);
    v15.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
    v28.i64[1] = v16[2];
    v29.i64[0] = 0x8000000080000000;
    v29.i64[1] = 0x8000000080000000;
    float32x4_t v30 = (float32x4_t)veorq_s8(*((int8x16_t *)v16 + 3), v29);
    int8x16_t v31 = (int8x16_t)vmulq_f32(v28, v30);
    *(int32x2_t *)v32.f32 = vzip2_s32(*(int32x2_t *)v16, *(int32x2_t *)v17.f32);
    *(int32x2_t *)&v32.u32[2] = vzip2_s32(*(int32x2_t *)v23.f32, 0);
    int8x16_t v33 = (int8x16_t)vmulq_f32(v32, v30);
    v15.i64[1] = v24;
    int8x16_t v34 = (int8x16_t)vmulq_f32(v15, v30);
    v34.i32[3] = 0;
    int8x16_t v35 = (int8x16_t)vmulq_f32(v28, v26);
    int8x16_t v36 = (int8x16_t)vmulq_f32(v32, v26);
    int8x16_t v37 = (int8x16_t)vmulq_f32(v15, v26);
    v37.i32[3] = 0;
    float32x2_t v38 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))), vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v36.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL))));
    float32x4_t v39 = (float32x4_t)veorq_s8(*(int8x16_t *)(v12 + 64), v29);
    int8x16_t v40 = (int8x16_t)vmulq_f32(vmlaq_n_f32(v20, v23, v25.f32[0]), v39);
    int8x16_t v41 = (int8x16_t)vmulq_f32(vmlaq_lane_f32(v22, v23, *(float32x2_t *)v25.f32, 1), v39);
    int8x16_t v42 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(v21, v23, v25, 2), v39);
    v42.i32[3] = 0;
    *(float32x2_t *)v40.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v41.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)));
    v40.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), 0);
    float32x2_t v43 = vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)), 0));
    float32x4_t v126 = (float32x4_t)v40;
    (*(void (**)(float32x4_t *__return_ptr, int *, float32x4_t *))(*(void *)v11 + 128))(&v127, v11, &v126);
    float32x4_t v44 = vmulq_f32(v118, v127);
    int8x16_t v45 = (int8x16_t)vmulq_f32(v121, v127);
    int8x16_t v46 = (int8x16_t)vmulq_f32(v115, v127);
    v46.i32[3] = 0;
    *(float32x2_t *)v44.f32 = vadd_f32(v38, vadd_f32(vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL))));
    *(float32x2_t *)&v44.u32[2] = vadd_f32(v43, vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0));
    float32x4_t v116 = v44;
    float32x4_t v110 = *(float32x4_t *)(v12 + 64);
    int8x16_t v47 = (int8x16_t)vmulq_f32(v110, v44);
    float v122 = vadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)).f32[0]- *(float *)(v12 + 80);
    float32x4_t v48 = *(float32x4_t **)(v10 + 24);
    float32x4_t v113 = v48[1];
    float32x4_t v114 = *v48;
    float32x4_t v111 = v48[2];
    float32x4_t v119 = v48[3];
    float v49 = sub_1B6DF3BE0(*(void *)(a1 + 24));
    a5[1] = *(void *)(a1 + 24);
    if (v122 < v49)
    {
      float32x4_t v50 = vmulq_n_f32(v110, v122);
      v50.i32[3] = 0;
      float32x4_t v51 = vsubq_f32(v116, v50);
      float32x4_t v52 = v51;
      v52.i32[3] = 0;
      int8x16_t v53 = (int8x16_t)vmulq_f32(v111, v51);
      int8x16_t v54 = (int8x16_t)vmulq_f32(v114, v52);
      float32x4_t v55 = vmulq_f32(v113, v52);
      *(float32x2_t *)v55.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL)), vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v55.f32));
      v53.i32[3] = 0;
      *(float32x2_t *)&v55.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), 0);
      float32x4_t v56 = vaddq_f32(v119, v55);
      float v57 = *(float32x4_t **)(v10 + 24);
      float32x4_t v58 = *(float32x4_t *)(v12 + 64);
      int8x16_t v59 = (int8x16_t)vmulq_f32(*v57, v58);
      int8x16_t v60 = (int8x16_t)vmulq_f32(v58, v57[1]);
      int8x16_t v61 = (int8x16_t)vmulq_f32(v58, v57[2]);
      v61.i32[3] = 0;
      *(float32x2_t *)v59.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v60.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)));
      v59.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)), 0);
      float32x4_t v125 = v56;
      float32x4_t v126 = (float32x4_t)v59;
      (*(void (**)(void *, float32x4_t *, float32x4_t *, float))(*a5 + 32))(a5, &v126, &v125, v122);
    }
    if (v11[2] <= 6 && *(_DWORD *)(a5[1] + 800) < *(_DWORD *)(a1 + 40))
    {
      float v62 = *(float *)(v12 + 72);
      if (fabsf(v62) <= 0.70711)
      {
        float v68 = *(float *)(v12 + 64);
        float v69 = *(float *)(v12 + 68);
        float v70 = 1.0 / sqrtf((float)(v69 * v69) + (float)(v68 * v68));
        float32_t v71 = v68 * v70;
        v67.i64[1] = 0;
        v67.f32[0] = -(float)(v69 * v70);
        v67.f32[1] = v71;
      }
      else
      {
        float v63 = *(float *)(v12 + 68);
        float v64 = 1.0 / sqrtf((float)(v62 * v62) + (float)(v63 * v63));
        float32_t v65 = -(float)(v62 * v64);
        *(float *)&unsigned int v66 = v63 * v64;
        v67.i32[0] = 0;
        v67.f32[1] = v65;
        v67.i64[1] = v66;
      }
      float32x4_t v123 = v67;
      float v72 = *(float *)&dword_1E9DDA464 / (*(float (**)(int *))(*(void *)v11 + 32))(v11);
      float v73 = v72 * 0.5;
      BOOL v74 = v72 <= 0.3927;
      float v75 = 0.19635;
      if (v74) {
        float v75 = v73;
      }
      __float2 v76 = __sincosf_stret(v75);
      int v77 = *(_DWORD *)(a1 + 36);
      if (v77 >= 1)
      {
        int v78 = 0;
        int8x16_t v79 = (int8x16_t)vmulq_f32(v123, v123);
        float32x2_t v80 = vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8);
        int8x16_t v81 = vextq_s8(v79, v79, 8uLL);
        float v82 = v76.__sinval / sqrtf(vadd_f32(*(float32x2_t *)v81.i8, v80).f32[0]);
        *(float32x2_t *)v81.i8 = vmul_n_f32(*(float32x2_t *)v123.f32, v82);
        v83.i64[0] = v81.i64[0];
        v83.i64[1] = __PAIR64__(LODWORD(v76.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v82, v123, 2)));
        int32x2_t v84 = (int32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
        int32x2_t v85 = vzip1_s32(v84, *(int32x2_t *)v81.i8);
        float32x4_t v117 = (float32x4_t)v83;
        float32x2_t v120 = *(float32x2_t *)v81.i8;
        float32x2_t v112 = (float32x2_t)vextq_s8(v83, v81, 0xCuLL).u64[0];
        float32x2_t v86 = (float32x2_t)vext_s8(*(int8x8_t *)v81.i8, (int8x8_t)v84, 4uLL);
        float32x2_t v87 = (float32x2_t)vrev64_s32(v85);
        do
        {
          float32x4_t v124 = *(float32x4_t *)(v12 + 64);
          int8x16_t v88 = (int8x16_t)vmulq_f32(v124, v124);
          float v89 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v88.i8, *(float32x2_t *)v88.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL)).f32[0]);
          __float2 v90 = __sincosf_stret((float)((float)(6.2832 / (float)v77) * (float)v78) * 0.5);
          *(float32x2_t *)v91.i8 = vmul_n_f32(*(float32x2_t *)v124.f32, v90.__sinval / v89);
          v92.i64[0] = v91.i64[0];
          v92.i64[1] = __PAIR64__(LODWORD(v90.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v90.__sinval / v89, v124, 2)));
          float32x4_t v93 = (float32x4_t)veorq_s8(v92, (int8x16_t)xmmword_1B6E72E30);
          int32x2_t v94 = (int32x2_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
          float32x2_t v95 = (float32x2_t)vzip1_s32(v94, *(int32x2_t *)v93.f32);
          float32x2_t v96 = (float32x2_t)vext_s8(*(int8x8_t *)v93.f32, (int8x8_t)v94, 4uLL);
          float32x2_t v97 = vmul_f32(v112, v95);
          *(float32x2_t *)v98.f32 = vmul_f32(v86, v95);
          *(float32x2_t *)&v98.u32[2] = vmul_f32(v87, v96);
          *(float32x2_t *)v99.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v93.f32, v117, 3), vmul_f32((float32x2_t)v85, v96));
          v99.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v93.f32, v120, 1), v97);
          float32x4_t v100 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v117, v93, 3), v98), (float32x4_t)veorq_s8(v99, (int8x16_t)xmmword_1B6E72E20));
          *(int32x2_t *)v99.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL), *(int32x2_t *)v100.f32);
          v98.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
          int32x2_t v101 = vzip1_s32(*(int32x2_t *)v98.f32, *(int32x2_t *)v91.i8);
          float32x2_t v102 = (float32x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 4uLL).u64[0];
          *(int8x8_t *)v98.f32 = vext_s8(*(int8x8_t *)v91.i8, *(int8x8_t *)v98.f32, 4uLL);
          float32x2_t v103 = vmul_laneq_f32(*(float32x2_t *)v100.f32, (float32x4_t)v92, 3);
          float32x2_t v104 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v92, v91, 0xCuLL), *(float32x2_t *)v99.i8);
          *(float32x2_t *)v91.i8 = vmul_lane_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v91.i8, 1);
          *(float32x2_t *)v99.i8 = vmul_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v99.i8);
          v99.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v101), v102);
          float32x4_t v105 = vmulq_laneq_f32((float32x4_t)v92, v100, 3);
          *(float32x2_t *)v92.i8 = vadd_f32(v103, vmul_f32((float32x2_t)v101, v102));
          v92.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v91.i8, v104);
          float32x4_t v126 = vaddq_f32(vsubq_f32(v105, (float32x4_t)v99), (float32x4_t)veorq_s8(v92, (int8x16_t)xmmword_1B6E72E20));
          sub_1B6DDBAB0(a1, &v126, a2, a3, v106, a5);
          ++v78;
          int v77 = *(_DWORD *)(a1 + 36);
        }
        while (v78 < v77);
      }
    }
    if (*(unsigned char *)(a1 + 16))
    {
      if (*(_DWORD *)(*(void *)(a1 + 24) + 800))
      {
        uint64_t v107 = a5[1];
        if (*(_DWORD *)(v107 + 800))
        {
          float32x4_t v108 = *(float32x4_t **)(v107 + 784);
          float32x2_t v109 = *(float32x4_t **)(a5[2] + 16);
          if (v108 == v109) {
            float32x2_t v109 = *(float32x4_t **)(a5[3] + 16);
          }
          else {
            float32x4_t v108 = *(float32x4_t **)(a5[3] + 16);
          }
          sub_1B6DF3CF4((void *)v107, v108 + 1, v109 + 1);
        }
      }
    }
  }
}

float sub_1B6DDC53C()
{
  return 1.0;
}

void sub_1B6DDC544(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      int v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          uint64_t v7 = sub_1B6E073B8(8 * v6, 16);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          uint64_t v7 = 0;
        }
        if (v5 >= 1)
        {
          uint64_t v8 = 0;
          do
          {
            *(void *)(v7 + v8) = *(void *)(*(void *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9) {
          BOOL v10 = *(unsigned char *)(a2 + 24) == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10)
        {
          sub_1B6E073C4(v9);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        *(unsigned char *)(a2 + 24) = 1;
        *(void *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        uint64_t v2 = *(void *)(a1 + 24);
      }
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

uint64_t sub_1B6DDC628(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0FB2660;
  uint64_t v4 = sub_1B6E073B8(400, 16);
  *(_DWORD *)(v4 + 320) = 953267991;
  *(unsigned char *)(v4 + 352) &= 0xF0u;
  *(void *)(a1 + 48) = v4;
  int v5 = *(_DWORD *)(a2 + 28);
  int v6 = (void *)sub_1B6E073B8(8, 16);
  if (v5) {
    uint64_t v7 = &unk_1F0FB2600;
  }
  else {
    uint64_t v7 = &unk_1F0FB27D8;
  }
  *int v6 = v7;
  *(void *)(a1 + 56) = v6;
  uint64_t v8 = sub_1B6E073B8(40, 16);
  sub_1B6DDA094(v8, *(void *)(a1 + 48), *(void *)(a1 + 56));
  *(void *)(a1 + 64) = v9;
  uint64_t v10 = sub_1B6E073B8(16, 16);
  *(unsigned char *)(v10 + 8) = 0;
  *(void *)uint64_t v10 = &unk_1F0FB2D18;
  *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v10;
  uint64_t v11 = sub_1B6E073B8(16, 16);
  *(unsigned char *)(v11 + 8) = 0;
  *(void *)uint64_t v11 = &unk_1F0FB2D40;
  *(void *)(a1 + 80) = v11;
  uint64_t v12 = sub_1B6E073B8(16, 16);
  *(unsigned char *)(v12 + 8) = 0;
  *(void *)uint64_t v12 = &unk_1F0FB2C78;
  *(void *)(a1 + 88) = v12;
  uint64_t v13 = sub_1B6E073B8(16, 16);
  *(unsigned char *)(v13 + 8) = 0;
  *(void *)uint64_t v13 = &unk_1F0FB2CA0;
  *(void *)(a1 + 96) = v13;
  uint64_t v14 = sub_1B6E073B8(16, 16);
  *(unsigned char *)(v14 + 8) = 0;
  *(void *)uint64_t v14 = &unk_1F0FB2C00;
  *(void *)(a1 + 104) = v14;
  uint64_t v15 = sub_1B6E073B8(16, 16);
  *(unsigned char *)(v15 + 8) = 0;
  *(void *)uint64_t v15 = &unk_1F0FB2CF0;
  *(void *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = v15;
  uint64_t v16 = sub_1B6E073B8(16, 16);
  *(unsigned char *)(v16 + 8) = 0;
  *(void *)uint64_t v16 = &unk_1F0FB2D68;
  *(void *)(a1 + 144) = v16;
  uint64_t v17 = sub_1B6E073B8(16, 16);
  *(void *)uint64_t v17 = &unk_1F0FB2D68;
  *(void *)(a1 + 15sub_1B6DC4968((unsigned int *)this + 2) = v17;
  *(unsigned char *)(v17 + 8) = 1;
  uint64_t v18 = sub_1B6E073B8(16, 16);
  *(unsigned char *)(v18 + 8) = 0;
  *(void *)uint64_t v18 = &unk_1F0FB2C50;
  *(void *)(a1 + 136) = v18;
  uint64_t v19 = sub_1B6E073B8(24, 16);
  *(unsigned char *)(v19 + 8) = 0;
  *(void *)uint64_t v19 = &unk_1F0FB2CC8;
  *(void *)(v19 + 1sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = v19;
  uint64_t v20 = sub_1B6E073B8(24, 16);
  *(void *)uint64_t v20 = &unk_1F0FB2CC8;
  *(void *)(v20 + 1sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + 160) = v20;
  *(unsigned char *)(v20 + 8) = 1;
  int v21 = *(_DWORD *)(a2 + 24);
  if (v21 <= 64) {
    int v21 = 64;
  }
  if (v21 <= 0x90) {
    int v22 = 144;
  }
  else {
    int v22 = v21;
  }
  float32x4_t v23 = *(int **)a2;
  if (*(void *)a2)
  {
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 1;
    unsigned __int32 v24 = (int *)sub_1B6E073B8(32, 16);
    float32x4_t v23 = sub_1B6DDD40C(v24, 832, *(_DWORD *)(a2 + 16));
  }
  *(void *)(a1 + 16) = v23;
  float32x4_t v25 = *(int **)(a2 + 8);
  if (v25)
  {
    *(unsigned char *)(a1 + 40) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 1;
    float32x4_t v26 = (int *)sub_1B6E073B8(32, 16);
    float32x4_t v25 = sub_1B6DDD40C(v26, v22, *(_DWORD *)(a2 + 20));
  }
  *(void *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v25;
  return a1;
}

uint64_t sub_1B6DDC9B4(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2660;
  if (*(unsigned char *)(a1 + 40))
  {
    sub_1B6E073C4(*(void *)(*(void *)(a1 + 32) + 24));
    sub_1B6E073C4(*(void *)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1B6E073C4(*(void *)(*(void *)(a1 + 16) + 24));
    sub_1B6E073C4(*(void *)(a1 + 16));
  }
  (***(void (****)(void))(a1 + 64))(*(void *)(a1 + 64));
  sub_1B6E073C4(*(void *)(a1 + 64));
  (***(void (****)(void))(a1 + 72))();
  sub_1B6E073C4(*(void *)(a1 + 72));
  (***(void (****)(void))(a1 + 80))();
  sub_1B6E073C4(*(void *)(a1 + 80));
  (***(void (****)(void))(a1 + 88))();
  sub_1B6E073C4(*(void *)(a1 + 88));
  (***(void (****)(void))(a1 + 96))();
  sub_1B6E073C4(*(void *)(a1 + 96));
  (***(void (****)(void))(a1 + 104))();
  sub_1B6E073C4(*(void *)(a1 + 104));
  (***(void (****)(void))(a1 + 112))();
  sub_1B6E073C4(*(void *)(a1 + 112));
  (***(void (****)(void))(a1 + 144))();
  sub_1B6E073C4(*(void *)(a1 + 144));
  (***(void (****)(void))(a1 + 152))();
  sub_1B6E073C4(*(void *)(a1 + 152));
  (***(void (****)(void))(a1 + 136))();
  sub_1B6E073C4(*(void *)(a1 + 136));
  (***(void (****)(void))(a1 + 168))();
  sub_1B6E073C4(*(void *)(a1 + 168));
  (***(void (****)(void))(a1 + 160))();
  sub_1B6E073C4(*(void *)(a1 + 160));
  sub_1B6E073C4(*(void *)(a1 + 48));
  (***(void (****)(void))(a1 + 56))();
  sub_1B6E073C4(*(void *)(a1 + 56));
  return a1;
}

void sub_1B6DDCD98(uint64_t a1)
{
  sub_1B6DDC9B4(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DDCDD0(uint64_t a1, int a2, int a3)
{
  if (a2 == 8 && a3 == 8)
  {
    uint64_t v3 = a1 + 112;
  }
  else if (a2 == 8 && a3 == 1)
  {
    uint64_t v3 = a1 + 144;
  }
  else if (a2 == 1 && a3 == 8)
  {
    uint64_t v3 = a1 + 152;
  }
  else if (a3 | a2)
  {
    if (a2 <= 19 && a3 == 28)
    {
      uint64_t v3 = a1 + 168;
    }
    else if (a2 == 28 && a3 <= 19)
    {
      uint64_t v3 = a1 + 160;
    }
    else
    {
      if (a2 > 19)
      {
        if (a3 <= 19 && (a2 - 21) <= 8)
        {
          uint64_t v3 = a1 + 80;
          return *(void *)v3;
        }
        if (a2 == 31)
        {
          uint64_t v3 = a1 + 88;
          return *(void *)v3;
        }
      }
      else
      {
        if (a3 <= 19)
        {
          uint64_t v3 = a1 + 64;
          return *(void *)v3;
        }
        if ((a3 - 21) <= 8)
        {
          uint64_t v3 = a1 + 72;
          return *(void *)v3;
        }
      }
      uint64_t v3 = a1 + 104;
      if (a3 == 31) {
        uint64_t v3 = a1 + 96;
      }
    }
  }
  else
  {
    uint64_t v3 = a1 + 136;
  }
  return *(void *)v3;
}

uint64_t sub_1B6DDCEC8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B6DDCED0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1B6DDCED8(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void sub_1B6DDCEE4()
{
}

uint64_t sub_1B6DDCEF8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 112))(*a2, 144);

  return sub_1B6DD8D9C(v7, a2, a3, a4, 0);
}

void sub_1B6DDCF78()
{
}

uint64_t sub_1B6DDCF8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 112))(*a2, 144);

  return sub_1B6DD8D9C(v7, a2, a3, a4, 1);
}

void sub_1B6DDD00C()
{
}

uint64_t sub_1B6DDD020(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 112))(*a2, 72);

  return sub_1B6DD807C(v7, a2, a3, a4, 0);
}

void sub_1B6DDD0A0()
{
}

uint64_t sub_1B6DDD0B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 112))(*a2, 72);

  return sub_1B6DD807C(v7, a2, a3, a4, 1);
}

void sub_1B6DDD134()
{
}

void *sub_1B6DDD148(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 112))(*a2, 16);

  return sub_1B6DDD478(v3, a2);
}

void sub_1B6DDD1AC()
{
}

uint64_t sub_1B6DDD1C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 112))(*a2, 32);

  return sub_1B6DE0C44(v7, 0, a2, a3, a4);
}

void sub_1B6DDD240()
{
}

uint64_t sub_1B6DDD254(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 112))(*a2, 40);
  uint64_t v9 = a2[1];
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);

  return sub_1B6DE1048(v8, v9, a2, a3, a4, v10);
}

void sub_1B6DDD2DC()
{
}

uint64_t sub_1B6DDD2F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 112))(*a2, 32);

  return sub_1B6DCFD4C(v7, 0, a2, a3, a4);
}

void sub_1B6DDD370()
{
}

uint64_t sub_1B6DDD384(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 112))(*a2, 48);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v10 = *(unsigned int *)(a1 + 12);
  uint64_t v11 = *(unsigned int *)(a1 + 16);

  return sub_1B6DDB9F8(v8, 0, a2, a3, a4, v9, v10, v11);
}

int *sub_1B6DDD40C(int *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  uint64_t v4 = (void *)sub_1B6E073B8((a3 * a2), 16);
  *((void *)a1 + sub_1B6DC4968((unsigned int *)this + 2) = v4;
  *((void *)a1 + 3) = v4;
  int v5 = a1[1];
  a1[2] = v5;
  int v6 = v5 - 1;
  if (v6)
  {
    uint64_t v7 = *a1;
    do
    {
      uint64_t v8 = (void *)((char *)v4 + v7);
      *uint64_t v4 = (char *)v4 + v7;
      uint64_t v4 = (void *)((char *)v4 + v7);
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = v4;
  }
  *uint64_t v8 = 0;
  return a1;
}

void *sub_1B6DDD478(void *a1, uint64_t *a2)
{
  int8x16_t result = sub_1B6DC9210(a1, a2);
  *int8x16_t result = &unk_1F0FB10B8;
  return result;
}

float sub_1B6DDD4B0()
{
  return 1.0;
}

void sub_1B6DDD4BC()
{
}

uint64_t sub_1B6DDD4D4(uint64_t result, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(result + 80))
  {
    uint64_t v3 = result;
    *(void *)(result + 80) = a2;
    uint64_t v4 = *(float32x2_t **)(result + 64);
    int8x16_t result = (*(uint64_t (**)(float32x2_t *))(*(void *)v4 + 56))(v4);
    if ((int)result >= 1)
    {
      int v5 = 0;
      do
      {
        uint64_t v31 = 0;
        int v29 = 2;
        int v30 = 0;
        int v28 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v25 = 2;
        (*(void (**)(float32x2_t *, uint64_t *, int *, int *, int *, uint64_t *, char *, uint64_t *, int *, int))(*(void *)v4 + 32))(v4, &v31, &v30, &v29, &v28, &v27, (char *)&v26 + 4, &v26, &v25, v5);
        if ((int)v26 >= 1)
        {
          int v6 = 0;
          do
          {
            uint64_t v7 = 0;
            int v8 = v25;
            int v9 = v29;
            int v10 = v28;
            uint64_t v11 = v31;
            uint64_t v12 = v27 + HIDWORD(v26) * v6;
            do
            {
              if (v8 == 3)
              {
                int v13 = *(unsigned __int16 *)(v12 + 2 * v7 + 4);
              }
              else if (v8 == 5)
              {
                int v13 = *(unsigned __int8 *)(v12 + v7 + 2);
              }
              else
              {
                int v13 = *(_DWORD *)(v12 + 4 * v7 + 8);
              }
              uint64_t v14 = v11 + v10 * (uint64_t)v13;
              float32x2_t v15 = v4[2];
              if (v9)
              {
                *(float32x2_t *)&long long v16 = vcvt_f32_f64(vmulq_f64(*(float64x2_t *)v14, vcvtq_f64_f32(v15)));
                float v17 = *(double *)(v14 + 16) * v4[3].f32[0];
              }
              else
              {
                *(float32x2_t *)&long long v16 = vmul_f32(*(float32x2_t *)v14, v15);
                float v17 = *(float *)(v14 + 8) * v4[3].f32[0];
              }
              *((void *)&v16 + 1) = LODWORD(v17);
              *((_OWORD *)&v34 + v7--) = v16;
            }
            while (v7 != -3);
            float32x4_t v23 = vmaxq_f32(vmaxq_f32(vmaxq_f32(v32, (float32x4_t)xmmword_1B6ECFDB0), v33), v34);
            float32x4_t v24 = vminq_f32(vminq_f32(vminq_f32(v32, (float32x4_t)xmmword_1B6ECFDA0), v33), v34);
            uint64_t v18 = &unk_1F0FB1CC0;
            int v19 = v5;
            int v20 = v6;
            int v21 = &v32;
            uint64_t v22 = a2;
            (*(void (**)(uint64_t, void **, float32x4_t *, float32x4_t *))(*(void *)v3 + 128))(v3, &v18, &v24, &v23);
            nullsub_1(&v18);
            ++v6;
          }
          while (v6 < (int)v26);
        }
        ++v5;
        int8x16_t result = (*(uint64_t (**)(float32x2_t *))(*(void *)v4 + 56))(v4);
      }
      while (v5 < (int)result);
    }
  }
  return result;
}

uint64_t sub_1B6DDD7C4(int8x8_t *a1, int8x8_t *a2, float32x4_t *a3, int8x16_t *a4, float a5)
{
  *(int8x8_t *)v8.f32 = vext_s8(*a1, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1->i8, *(int8x16_t *)a1->i8, 8uLL), 4uLL);
  *(int8x8_t *)v9.f32 = vext_s8(*a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v9.u32[2] = *a2;
  float32x4_t v23 = *(float32x4_t *)a1->i8;
  *(int8x8_t *)&v8.u32[2] = *a1;
  int8x16_t v10 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a1->i8, v9), vmulq_f32(*(float32x4_t *)a2->i8, v8));
  v9.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
  v9.i64[1] = v10.u32[0];
  int8x16_t v11 = (int8x16_t)vmulq_f32(v9, v9);
  int8x16_t v12 = (int8x16_t)vmulq_f32(*a3, vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])));
  int8x16_t v13 = (int8x16_t)vmulq_f32(*(float32x4_t *)a2->i8, *a3);
  float v14 = atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]);
  if (a5 < 0.0 && v14 < a5 || (uint64_t result = 0, a5 >= 0.0) && v14 > a5)
  {
    float v16 = a5 - v14;
    int8x16_t v17 = (int8x16_t)vmulq_f32(v23, v23);
    float v18 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8)).f32[0]);
    __float2 v19 = __sincosf_stret(v16 * 0.5);
    *(float32x2_t *)v25.f32 = vmul_n_f32(*(float32x2_t *)v23.f32, v19.__sinval / v18);
    v25.i64[1] = __PAIR64__(LODWORD(v19.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v19.__sinval / v18, v23, 2)));
    sub_1B6548938((uint64_t)v24, &v25);
    int8x16_t v20 = (int8x16_t)vmulq_f32(v24[0], *a3);
    int8x16_t v21 = (int8x16_t)vmulq_f32(*a3, v24[1]);
    int8x16_t v22 = (int8x16_t)vmulq_f32(*a3, v24[2]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    v20.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    *a4 = v20;
    return 1;
  }
  return result;
}

void sub_1B6DDD93C(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, char a6)
{
  if (*(_DWORD *)(a2[1] + 8) == 1)
  {
    uint64_t v9 = *(void *)(a2[2] + 208);
    if (*(_DWORD *)(v9 + 8) == 22) {
      uint64_t v9 = *(void *)(v9 + 48);
    }
    uint64_t v10 = *(void *)(v9 + 80);
    if (v10)
    {
      v314[0].i32[0] = a5 | (a4 << 21);
      int v11 = sub_1B6DDF70C(v10 + 8, v314[0].i32);
      if (v11 != -1)
      {
        uint64_t v12 = *(void *)(v10 + 88);
        if (v12)
        {
          int v13 = v11;
          uint64_t v14 = v11;
          float v15 = -1.0;
          if ((a6 & 1) == 0) {
            float v15 = 1.0;
          }
          float v307 = v15;
          float v16 = (float32x4_t *)a2[1];
          (*(void (**)(float32x4_t *, void, float32x4_t *))(v16->i64[0] + 216))(v16, 0, &v312);
          (*(void (**)(float32x4_t *, uint64_t, float32x4_t *))(v16->i64[0] + 216))(v16, 1, &v311);
          (*(void (**)(float32x4_t *, uint64_t, float32x4_t *))(v16->i64[0] + 216))(v16, 2, &v310);
          float32x4_t v17 = v16[5];
          float32x4_t v18 = vsubq_f32(v16[6], v17);
          int8x8_t v19 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
          v18.i32[3] = 0;
          float32x4_t v20 = vsubq_f32(v16[7], v17);
          int8x8_t v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
          v20.i32[3] = 0;
          *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v18.f32, v19, 4uLL);
          v22.i64[1] = v18.i64[0];
          *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
          v23.i64[1] = v20.i64[0];
          int8x16_t v24 = (int8x16_t)vsubq_f32(vmulq_f32(v23, v18), vmulq_f32(v22, v20));
          v25.i64[0] = vextq_s8(v24, v24, 4uLL).u64[0];
          v25.i64[1] = v24.u32[0];
          int8x16_t v26 = (int8x16_t)vmulq_f32(v25, v25);
          LODWORD(v27) = vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)).u32[0];
          float32x4_t v28 = v311;
          float32x4_t v29 = vsubq_f32(v311, v312);
          v29.i32[3] = 0;
          int8x16_t v30 = (int8x16_t)vmulq_f32(v29, v29);
          float32x2_t v31 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
          float32x4_t v32 = *(float32x4_t *)(a1 + 16);
          float32x4_t v33 = v312;
          if (v31.f32[0] >= 1.4211e-14)
          {
            float32x4_t v34 = vsubq_f32(v32, v312);
            v34.i32[3] = 0;
            int8x16_t v35 = (int8x16_t)vmulq_f32(v29, v34);
            float v36 = vdiv_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), v31).f32[0];
            float v37 = 0.0;
            if (v36 >= 0.0)
            {
              float v37 = v36;
              if (v36 > 1.0) {
                float v37 = 1.0;
              }
            }
            float32x4_t v38 = vmulq_n_f32(v29, v37);
            v38.i32[3] = 0;
            float32x4_t v33 = vaddq_f32(v312, v38);
          }
          uint64_t v39 = a2[3];
          float32x4_t v40 = *(float32x4_t *)(v39 + 16);
          float32x4_t v41 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v39, (int32x4_t)v40);
          int8x16_t v42 = *(int8x16_t *)(v39 + 32);
          unint64_t v43 = vextq_s8(v42, v42, 8uLL).u64[0];
          *(int32x2_t *)v44.f32 = vzip2_s32(*(int32x2_t *)v39, *(int32x2_t *)v40.f32);
          v40.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
          v41.i64[1] = v42.u32[0];
          *(int32x2_t *)&v44.u32[2] = vzip2_s32(*(int32x2_t *)v42.i8, 0);
          float v45 = sqrtf(v27);
          v40.i64[1] = v43;
          float32x4_t v46 = *(float32x4_t *)(a1 + 64);
          int8x16_t v47 = (int8x16_t)vmulq_f32(v41, v46);
          float32x4_t v48 = vmulq_f32(v44, v46);
          int8x16_t v49 = (int8x16_t)vmulq_f32(v40, v46);
          v49.i32[3] = 0;
          *(float32x2_t *)v48.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v48.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL)));
          *(float32x2_t *)v40.f32 = vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
          *(float32x2_t *)&v48.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)), 0);
          float32x4_t v50 = vmulq_n_f32(v48, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), vmul_f32(*(float32x2_t *)&v48.u32[2], *(float32x2_t *)&v48.u32[2])).f32[0]));
          float32x4_t v309 = v50;
          uint64_t v51 = v12 + 16 * v14;
          float32x4_t v52 = (float *)(v51 + 4);
          float v53 = *(float *)(v51 + 4);
          float v54 = fabsf(v53);
          float v55 = *(float *)(v10 + 152);
          if (v54 >= v55)
          {
            int v65 = -1;
            float v64 = 1.0e18;
          }
          else
          {
            float32x4_t v56 = v312;
            if (v31.f32[0] >= 1.4211e-14)
            {
              float32x4_t v57 = vsubq_f32(v32, v312);
              v57.i32[3] = 0;
              int8x16_t v58 = (int8x16_t)vmulq_f32(v29, v57);
              float v59 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8)), v31).f32[0];
              float v60 = 0.0;
              if (v59 >= 0.0)
              {
                float v60 = v59;
                if (v59 > 1.0) {
                  float v60 = 1.0;
                }
              }
              float32x4_t v61 = vmulq_n_f32(v29, v60);
              v61.i32[3] = 0;
              float32x4_t v56 = vaddq_f32(v312, v61);
            }
            float32x4_t v62 = vsubq_f32(v32, v56);
            v62.i32[3] = 0;
            int8x16_t v63 = (int8x16_t)vmulq_f32(v62, v62);
            float v64 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).f32[0]);
            if (v64 < 1.0e18)
            {
              int v65 = 0;
            }
            else
            {
              float v64 = 1.0e18;
              int v65 = -1;
            }
          }
          float v67 = *(float *)(v51 + 8);
          unsigned int v66 = (float *)(v51 + 8);
          float v68 = 1.0 / v45;
          if (fabsf(v67) < v55)
          {
            float32x4_t v69 = vsubq_f32(v310, v311);
            v69.i32[3] = 0;
            int8x16_t v70 = (int8x16_t)vmulq_f32(v69, v69);
            float32x2_t v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
            float32x4_t v72 = v311;
            if (v71.f32[0] >= 1.4211e-14)
            {
              float32x4_t v73 = vsubq_f32(v32, v311);
              v73.i32[3] = 0;
              int8x16_t v74 = (int8x16_t)vmulq_f32(v73, v69);
              float v75 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8)), v71).f32[0];
              float v76 = 0.0;
              if (v75 >= 0.0)
              {
                float v76 = v75;
                if (v75 > 1.0) {
                  float v76 = 1.0;
                }
              }
              float32x4_t v77 = vmulq_n_f32(v69, v76);
              v77.i32[3] = 0;
              float32x4_t v72 = vaddq_f32(v311, v77);
            }
            float32x4_t v78 = vsubq_f32(v32, v72);
            v78.i32[3] = 0;
            int8x16_t v79 = (int8x16_t)vmulq_f32(v78, v78);
            float v80 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)).f32[0]);
            if (v80 < v64)
            {
              float v64 = v80;
              int v65 = 1;
            }
          }
          uint64_t v81 = v12 + 16 * v14;
          float v83 = *(float *)(v81 + 12);
          float v82 = (float *)(v81 + 12);
          if (fabsf(v83) < v55)
          {
            float32x4_t v84 = v310;
            float32x4_t v85 = vsubq_f32(v312, v310);
            v85.i32[3] = 0;
            int8x16_t v86 = (int8x16_t)vmulq_f32(v85, v85);
            float32x2_t v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL));
            if (v87.f32[0] >= 1.4211e-14)
            {
              float32x4_t v88 = vsubq_f32(v32, v310);
              v88.i32[3] = 0;
              int8x16_t v89 = (int8x16_t)vmulq_f32(v85, v88);
              float v90 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8)), v87).f32[0];
              float v91 = 0.0;
              if (v90 >= 0.0)
              {
                float v91 = v90;
                if (v90 > 1.0) {
                  float v91 = 1.0;
                }
              }
              float32x4_t v92 = vmulq_n_f32(v85, v91);
              v92.i32[3] = 0;
              float32x4_t v84 = vaddq_f32(v310, v92);
            }
            float32x4_t v93 = vsubq_f32(v32, v84);
            v93.i32[3] = 0;
            int8x16_t v94 = (int8x16_t)vmulq_f32(v93, v93);
            if (sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v94.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)).f32[0]) < v64)int v65 = 2; {
          }
            }
          float32x2_t v95 = (_DWORD *)(v12 + 16 * v13);
          float32x4_t v96 = vmulq_n_f32(v25, v68);
          int v97 = 0;
          if (v54 >= v55)
          {
            int v101 = 0;
          }
          else if (v65 {
                 || (float32x4_t v98 = vsubq_f32(v32, v33),
          }
                     v98.i32[3] = 0,
                     int8x16_t v99 = (int8x16_t)vmulq_f32(v98, v98),
                     sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), vpadd_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8)).f32[0]) >= *(float *)(v10 + 148)))
          {
            int v101 = 0;
          }
          else
          {
            float32x4_t v100 = vsubq_f32(v312, v311);
            v100.i32[3] = 0;
            float32x4_t v308 = v100;
            if (v53 == 0.0)
            {
              int v97 = 1;
            }
            else
            {
              float v102 = 1.0;
              if ((*v95 & 1) == 0) {
                float v102 = -1.0;
              }
              float v293 = v102;
              float32x4_t v296 = v32;
              float32x4_t v103 = vmulq_n_f32(v96, v102);
              v103.i32[3] = 0;
              float32x4_t v288 = v100;
              float32x4_t v290 = v103;
              int8x16_t v104 = (int8x16_t)vmulq_f32(v100, v100);
              float v105 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL), vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v104.i8)).f32[0]);
              float32x4_t v299 = v50;
              float32x4_t v304 = v96;
              __float2 v106 = __sincosf_stret(v53 * 0.5);
              *(float32x2_t *)v107.i8 = vmul_n_f32(*(float32x2_t *)v288.f32, v106.__sinval / v105);
              v108.i64[0] = v107.i64[0];
              v108.i64[1] = __PAIR64__(LODWORD(v106.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v106.__sinval / v105, v288, 2)));
              int32x2_t v109 = (int32x2_t)vextq_s8(v108, v108, 8uLL).u64[0];
              int8x16_t v110 = (int8x16_t)v304;
              int32x2_t v111 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL), *(int32x2_t *)v304.f32);
              float32x2_t v112 = (float32x2_t)vzip1_s32(v109, *(int32x2_t *)v107.i8);
              float32x2_t v113 = (float32x2_t)vext_s8(*(int8x8_t *)v107.i8, (int8x8_t)v109, 4uLL);
              *(float32x2_t *)v114.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 4uLL), v112);
              *(float32x2_t *)&v114.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v111), v113);
              *(float32x2_t *)v115.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v304.f32, (float32x4_t)v108, 3), vmul_f32((float32x2_t)v111, v113));
              v115.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v304.f32, 1), vmul_f32((float32x2_t)v111, (float32x2_t)*(_OWORD *)&vextq_s8(v108, v107, 0xCuLL)));
              int8x16_t v313 = veorq_s8(v108, (int8x16_t)xmmword_1B6E72E30);
              v314[0] = (int8x16_t)vsubq_f32((float32x4_t)veorq_s8(v115, (int8x16_t)xmmword_1B6E72E20), v114);
              int8x16_t v116 = sub_1B6DDF9B8(v314, &v313);
              float32x4_t v50 = v299;
              v116.i32[0] = 0;
              float32x4_t v117 = (float32x4_t)v314[0];
              v117.i32[3] = 0;
              v118.i32[0] = *v95 & 8;
              float32x4_t v119 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v118, (int32x4_t)v116), 0), v314[0], (int8x16_t)vnegq_f32(v117)), v293);
              v119.i32[3] = 0;
              int8x16_t v120 = (int8x16_t)vmulq_f32(v299, v290);
              int8x16_t v121 = (int8x16_t)vmulq_f32(v299, v119);
              LODWORD(v12sub_1B6DC4968((unsigned int *)this + 2) = vadd_f32(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)).u32[0];
              float v123 = *(float *)(v10 + 136);
              if (vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)).f32[0] < v123&& v122 < v123)
              {
                int v97 = 1;
                float32x4_t v96 = v304;
              }
              else
              {
                int8x16_t v313 = (int8x16_t)v290;
                int v125 = sub_1B6DDD7C4((int8x8_t *)&v308, (int8x8_t *)&v313, &v309, v314, *v52);
                float32x4_t v96 = v304;
                if (v125)
                {
                  if ((a6 & 4) != 0
                    || (float32x4_t v126 = vmulq_n_f32(v304, v307),
                        v126.i32[3] = 0,
                        int8x16_t v127 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v126),
                        vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL)).f32[0] > 0.0))
                  {
                    float32x2_t v128 = (float32x4_t *)a2[3];
                    float32x4_t v129 = vmulq_f32(*v128, (float32x4_t)v314[0]);
                    int8x16_t v130 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v128[1]);
                    int8x16_t v131 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v128[2]);
                    v131.i32[3] = 0;
                    *(float32x2_t *)v129.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v130.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)));
                    *(float32x2_t *)&v129.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v131.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL)), 0);
                    float32x4_t v132 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v129, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                    v132.i32[3] = 0;
                    *(float32x4_t *)(a1 + 64) = v129;
                    *(float32x4_t *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v132;
                    uint64_t v133 = a2[3];
                    int8x16_t v134 = *(int8x16_t *)(v133 + 32);
                    float32x4_t v135 = vsubq_f32(v132, *(float32x4_t *)(v133 + 48));
                    int32x4_t v136 = *(int32x4_t *)(v133 + 16);
                    float32x4_t v137 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v133, v136);
                    v138.i64[0] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
                    v138.i64[1] = vextq_s8(v134, v134, 8uLL).u64[0];
                    int8x16_t v139 = (int8x16_t)vmulq_f32(v138, v135);
                    v135.i32[3] = 0;
                    v137.i64[1] = v134.u32[0];
                    *(int32x2_t *)v132.f32 = vzip2_s32(*(int32x2_t *)v133, *(int32x2_t *)v136.i8);
                    *(int32x2_t *)&v132.u32[2] = vzip2_s32(*(int32x2_t *)v134.i8, 0);
                    int8x16_t v140 = (int8x16_t)vmulq_f32(v137, v135);
                    int8x16_t v141 = (int8x16_t)vmulq_f32(v132, v135);
                    v139.i32[3] = 0;
                    *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL)), vpadd_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v141.i8));
                    v141.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v139.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL)), 0);
                    *(int8x16_t *)(a1 + 16) = v141;
                  }
                }
                int v97 = 0;
                float32x4_t v50 = v299;
              }
              float32x4_t v32 = v296;
            }
            int v101 = 1;
            float32x4_t v28 = v311;
          }
          float32x4_t v142 = v310;
          float32x4_t v143 = vsubq_f32(v310, v28);
          v143.i32[3] = 0;
          int8x16_t v144 = (int8x16_t)vmulq_f32(v143, v143);
          float32x2_t v145 = vadd_f32(vpadd_f32(*(float32x2_t *)v144.i8, *(float32x2_t *)v144.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL));
          float32x4_t v146 = v28;
          if (v145.f32[0] >= 1.4211e-14)
          {
            float32x4_t v147 = vsubq_f32(v32, v28);
            v147.i32[3] = 0;
            int8x16_t v148 = (int8x16_t)vmulq_f32(v143, v147);
            float v149 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL), vpadd_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8)), v145).f32[0];
            float v150 = 0.0;
            if (v149 >= 0.0)
            {
              float v150 = v149;
              if (v149 > 1.0) {
                float v150 = 1.0;
              }
            }
            float32x4_t v151 = vmulq_n_f32(v143, v150);
            v151.i32[3] = 0;
            float32x4_t v146 = vaddq_f32(v28, v151);
          }
          float v152 = *v66;
          if (fabsf(*v66) < *(float *)(v10 + 152) && v65 == 1)
          {
            float32x4_t v153 = vsubq_f32(v32, v146);
            v153.i32[3] = 0;
            int8x16_t v154 = (int8x16_t)vmulq_f32(v153, v153);
            if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v154, v154, 8uLL), vpadd_f32(*(float32x2_t *)v154.i8, *(float32x2_t *)v154.i8)).f32[0]) < *(float *)(v10 + 148))
            {
              float32x4_t v155 = vsubq_f32(v28, v310);
              v155.i32[3] = 0;
              float32x4_t v308 = v155;
              if (v152 == 0.0)
              {
                ++v97;
              }
              else
              {
                float v156 = 1.0;
                if ((*v95 & 2) == 0) {
                  float v156 = -1.0;
                }
                float v294 = v156;
                float32x4_t v297 = v32;
                float32x4_t v157 = vmulq_n_f32(v96, v156);
                v157.i32[3] = 0;
                float32x4_t v289 = v155;
                float32x4_t v291 = v157;
                int8x16_t v158 = (int8x16_t)vmulq_f32(v155, v155);
                float v159 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL), vpadd_f32(*(float32x2_t *)v158.i8, *(float32x2_t *)v158.i8)).f32[0]);
                float32x4_t v300 = v50;
                float32x4_t v305 = v96;
                __float2 v160 = __sincosf_stret(v152 * 0.5);
                *(float32x2_t *)v161.i8 = vmul_n_f32(*(float32x2_t *)v289.f32, v160.__sinval / v159);
                v162.i64[0] = v161.i64[0];
                v162.i64[1] = __PAIR64__(LODWORD(v160.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v160.__sinval / v159, v289, 2)));
                int32x2_t v163 = (int32x2_t)vextq_s8(v162, v162, 8uLL).u64[0];
                int8x16_t v164 = (int8x16_t)v305;
                int32x2_t v165 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL), *(int32x2_t *)v305.f32);
                float32x2_t v166 = (float32x2_t)vzip1_s32(v163, *(int32x2_t *)v161.i8);
                float32x2_t v167 = (float32x2_t)vext_s8(*(int8x8_t *)v161.i8, (int8x8_t)v163, 4uLL);
                *(float32x2_t *)v168.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 4uLL), v166);
                *(float32x2_t *)&v168.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v165), v167);
                *(float32x2_t *)v169.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v305.f32, (float32x4_t)v162, 3), vmul_f32((float32x2_t)v165, v167));
                v169.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v305.f32, 1), vmul_f32((float32x2_t)v165, (float32x2_t)*(_OWORD *)&vextq_s8(v162, v161, 0xCuLL)));
                int8x16_t v313 = veorq_s8(v162, (int8x16_t)xmmword_1B6E72E30);
                v314[0] = (int8x16_t)vsubq_f32((float32x4_t)veorq_s8(v169, (int8x16_t)xmmword_1B6E72E20), v168);
                int8x16_t v170 = sub_1B6DDF9B8(v314, &v313);
                float32x4_t v50 = v300;
                v170.i32[0] = 0;
                float32x4_t v171 = (float32x4_t)v314[0];
                v171.i32[3] = 0;
                v172.i32[0] = *v95 & 0x10;
                float32x4_t v173 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v172, (int32x4_t)v170), 0), v314[0], (int8x16_t)vnegq_f32(v171)), v294);
                v173.i32[3] = 0;
                int8x16_t v174 = (int8x16_t)vmulq_f32(v300, v291);
                int8x16_t v175 = (int8x16_t)vmulq_f32(v300, v173);
                LODWORD(v176) = vadd_f32(vpadd_f32(*(float32x2_t *)v175.i8, *(float32x2_t *)v175.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v175, v175, 8uLL)).u32[0];
                float v177 = *(float *)(v10 + 136);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v174.i8, *(float32x2_t *)v174.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v174, v174, 8uLL)).f32[0] < v177&& v176 < v177)
                {
                  ++v97;
                  float32x4_t v96 = v305;
                }
                else
                {
                  uint64_t v179 = a2[3];
                  int32x4_t v180 = *(int32x4_t *)(v179 + 16);
                  float32x4_t v181 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v179, v180);
                  int8x16_t v182 = *(int8x16_t *)(v179 + 32);
                  v183.i64[0] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u64[0];
                  v181.i64[1] = v182.u32[0];
                  *(int32x2_t *)v184.f32 = vzip2_s32(*(int32x2_t *)v179, *(int32x2_t *)v180.i8);
                  *(int32x2_t *)&v184.u32[2] = vzip2_s32(*(int32x2_t *)v182.i8, 0);
                  v183.i64[1] = vextq_s8(v182, v182, 8uLL).u64[0];
                  float32x4_t v185 = *(float32x4_t *)(a1 + 64);
                  int8x16_t v186 = (int8x16_t)vmulq_f32(v181, v185);
                  int8x16_t v187 = (int8x16_t)vmulq_f32(v184, v185);
                  int8x16_t v188 = (int8x16_t)vmulq_f32(v183, v185);
                  v188.i32[3] = 0;
                  *(float32x2_t *)v186.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v186.i8, *(float32x2_t *)v187.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)));
                  v186.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v188.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v188, v188, 8uLL)), 0);
                  float32x4_t v301 = (float32x4_t)v186;
                  float32x4_t v309 = (float32x4_t)v186;
                  int8x16_t v313 = (int8x16_t)v291;
                  int v189 = sub_1B6DDD7C4((int8x8_t *)&v308, (int8x8_t *)&v313, &v309, v314, *v66);
                  float32x4_t v96 = v305;
                  if (v189)
                  {
                    if ((a6 & 4) != 0
                      || (float32x4_t v190 = vmulq_n_f32(v305, v307),
                          v190.i32[3] = 0,
                          int8x16_t v191 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v190),
                          vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL)).f32[0] > 0.0))
                    {
                      float v192 = (float32x4_t *)a2[3];
                      float32x4_t v193 = vmulq_f32(*v192, (float32x4_t)v314[0]);
                      int8x16_t v194 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v192[1]);
                      int8x16_t v195 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v192[2]);
                      v195.i32[3] = 0;
                      *(float32x2_t *)v193.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v194.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v194, v194, 8uLL)));
                      *(float32x2_t *)&v193.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v195.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL)), 0);
                      float32x4_t v196 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v193, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                      v196.i32[3] = 0;
                      *(float32x4_t *)(a1 + 64) = v193;
                      *(float32x4_t *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v196;
                      uint64_t v197 = a2[3];
                      int8x16_t v198 = *(int8x16_t *)(v197 + 32);
                      float32x4_t v199 = vsubq_f32(v196, *(float32x4_t *)(v197 + 48));
                      int32x4_t v200 = *(int32x4_t *)(v197 + 16);
                      float32x4_t v201 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v197, v200);
                      v202.i64[0] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
                      v202.i64[1] = vextq_s8(v198, v198, 8uLL).u64[0];
                      int8x16_t v203 = (int8x16_t)vmulq_f32(v202, v199);
                      v199.i32[3] = 0;
                      v201.i64[1] = v198.u32[0];
                      *(int32x2_t *)v196.f32 = vzip2_s32(*(int32x2_t *)v197, *(int32x2_t *)v200.i8);
                      *(int32x2_t *)&v196.u32[2] = vzip2_s32(*(int32x2_t *)v198.i8, 0);
                      int8x16_t v204 = (int8x16_t)vmulq_f32(v201, v199);
                      int8x16_t v205 = (int8x16_t)vmulq_f32(v196, v199);
                      v203.i32[3] = 0;
                      *(float32x2_t *)v205.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v205, v205, 8uLL)), vpadd_f32(*(float32x2_t *)v204.i8, *(float32x2_t *)v205.i8));
                      v205.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v203.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL)), 0);
                      *(int8x16_t *)(a1 + 16) = v205;
                    }
                  }
                  float32x4_t v50 = v301;
                }
                float32x4_t v32 = v297;
              }
              int v101 = 1;
              float32x4_t v142 = v310;
            }
          }
          float32x4_t v206 = vsubq_f32(v312, v142);
          v206.i32[3] = 0;
          int8x16_t v207 = (int8x16_t)vmulq_f32(v206, v206);
          float32x2_t v208 = vadd_f32(vpadd_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v207.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL));
          float32x4_t v209 = v142;
          if (v208.f32[0] >= 1.4211e-14)
          {
            float32x4_t v210 = vsubq_f32(v32, v142);
            v210.i32[3] = 0;
            int8x16_t v211 = (int8x16_t)vmulq_f32(v206, v210);
            float v212 = vdiv_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL), vpadd_f32(*(float32x2_t *)v211.i8, *(float32x2_t *)v211.i8)), v208).f32[0];
            float v213 = 0.0;
            if (v212 >= 0.0)
            {
              float v213 = v212;
              if (v212 > 1.0) {
                float v213 = 1.0;
              }
            }
            float32x4_t v214 = vmulq_n_f32(v206, v213);
            v214.i32[3] = 0;
            float32x4_t v209 = vaddq_f32(v142, v214);
          }
          float v215 = *v82;
          if (fabsf(*v82) < *(float *)(v10 + 152) && v65 == 2)
          {
            float32x4_t v216 = vsubq_f32(v32, v209);
            v216.i32[3] = 0;
            int8x16_t v217 = (int8x16_t)vmulq_f32(v216, v216);
            if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v217, v217, 8uLL), vpadd_f32(*(float32x2_t *)v217.i8, *(float32x2_t *)v217.i8)).f32[0]) < *(float *)(v10 + 148))
            {
              float32x4_t v218 = vsubq_f32(v142, v312);
              v218.i32[3] = 0;
              float32x4_t v308 = v218;
              if (v215 == 0.0)
              {
                ++v97;
              }
              else
              {
                float v219 = 1.0;
                if ((*v95 & 4) == 0) {
                  float v219 = -1.0;
                }
                float v298 = v219;
                float32x4_t v302 = v50;
                float32x4_t v220 = vmulq_n_f32(v96, v219);
                v220.i32[3] = 0;
                float32x4_t v292 = v218;
                float32x4_t v295 = v220;
                int8x16_t v221 = (int8x16_t)vmulq_f32(v218, v218);
                float v222 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v221, v221, 8uLL), vpadd_f32(*(float32x2_t *)v221.i8, *(float32x2_t *)v221.i8)).f32[0]);
                float32x4_t v306 = v96;
                __float2 v223 = __sincosf_stret(v215 * 0.5);
                *(float32x2_t *)v224.i8 = vmul_n_f32(*(float32x2_t *)v292.f32, v223.__sinval / v222);
                v225.i64[0] = v224.i64[0];
                v225.i64[1] = __PAIR64__(LODWORD(v223.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v223.__sinval / v222, v292, 2)));
                int32x2_t v226 = (int32x2_t)vextq_s8(v225, v225, 8uLL).u64[0];
                int8x16_t v227 = (int8x16_t)v306;
                int32x2_t v228 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL), *(int32x2_t *)v306.f32);
                float32x2_t v229 = (float32x2_t)vzip1_s32(v226, *(int32x2_t *)v224.i8);
                float32x2_t v230 = (float32x2_t)vext_s8(*(int8x8_t *)v224.i8, (int8x8_t)v226, 4uLL);
                *(float32x2_t *)v231.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 4uLL), v229);
                *(float32x2_t *)&v231.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v228), v230);
                *(float32x2_t *)v232.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v306.f32, (float32x4_t)v225, 3), vmul_f32((float32x2_t)v228, v230));
                v232.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v306.f32, 1), vmul_f32((float32x2_t)v228, (float32x2_t)*(_OWORD *)&vextq_s8(v225, v224, 0xCuLL)));
                int8x16_t v313 = veorq_s8(v225, (int8x16_t)xmmword_1B6E72E30);
                v314[0] = (int8x16_t)vsubq_f32((float32x4_t)veorq_s8(v232, (int8x16_t)xmmword_1B6E72E20), v231);
                int8x16_t v233 = sub_1B6DDF9B8(v314, &v313);
                float32x4_t v50 = v302;
                v233.i32[0] = 0;
                float32x4_t v234 = (float32x4_t)v314[0];
                v234.i32[3] = 0;
                v235.i32[0] = *v95 & 0x20;
                float32x4_t v236 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v235, (int32x4_t)v233), 0), v314[0], (int8x16_t)vnegq_f32(v234)), v298);
                v236.i32[3] = 0;
                int8x16_t v237 = (int8x16_t)vmulq_f32(v302, v295);
                *(float32x2_t *)v234.f32 = vpadd_f32(*(float32x2_t *)v237.i8, *(float32x2_t *)v237.i8);
                float32x4_t v142 = (float32x4_t)vextq_s8(v237, v237, 8uLL);
                v142.f32[0] = vadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v142.f32).f32[0];
                int8x16_t v238 = (int8x16_t)vmulq_f32(v302, v236);
                LODWORD(v239) = vadd_f32(vpadd_f32(*(float32x2_t *)v238.i8, *(float32x2_t *)v238.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL)).u32[0];
                float v240 = *(float *)(v10 + 136);
                if (v142.f32[0] < v240 && v239 < v240)
                {
                  ++v97;
                  float32x4_t v96 = v306;
                }
                else
                {
                  uint64_t v242 = a2[3];
                  int32x4_t v243 = *(int32x4_t *)(v242 + 16);
                  float32x4_t v244 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v242, v243);
                  int8x16_t v245 = *(int8x16_t *)(v242 + 32);
                  v246.i64[0] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u64[0];
                  v244.i64[1] = v245.u32[0];
                  *(int32x2_t *)v247.f32 = vzip2_s32(*(int32x2_t *)v242, *(int32x2_t *)v243.i8);
                  *(int32x2_t *)&v247.u32[2] = vzip2_s32(*(int32x2_t *)v245.i8, 0);
                  v246.i64[1] = vextq_s8(v245, v245, 8uLL).u64[0];
                  float32x4_t v248 = *(float32x4_t *)(a1 + 64);
                  int8x16_t v249 = (int8x16_t)vmulq_f32(v244, v248);
                  int8x16_t v250 = (int8x16_t)vmulq_f32(v247, v248);
                  int8x16_t v251 = (int8x16_t)vmulq_f32(v246, v248);
                  v251.i32[3] = 0;
                  *(float32x2_t *)v249.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v249.i8, *(float32x2_t *)v250.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v249, v249, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL)));
                  v249.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v251.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v251, v251, 8uLL)), 0);
                  float32x4_t v303 = (float32x4_t)v249;
                  float32x4_t v309 = (float32x4_t)v249;
                  int8x16_t v313 = (int8x16_t)v295;
                  int v252 = sub_1B6DDD7C4((int8x8_t *)&v308, (int8x8_t *)&v313, &v309, v314, *v82);
                  float32x4_t v96 = v306;
                  if (v252)
                  {
                    if ((a6 & 4) != 0
                      || (float32x4_t v253 = vmulq_n_f32(v306, v307),
                          v253.i32[3] = 0,
                          int8x16_t v254 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v253),
                          float32x2_t v255 = vpadd_f32(*(float32x2_t *)v254.i8, *(float32x2_t *)v254.i8),
                          float32x4_t v142 = (float32x4_t)vextq_s8(v254, v254, 8uLL),
                          vadd_f32(v255, *(float32x2_t *)v142.f32).f32[0] > 0.0))
                    {
                      uint64_t v256 = (float32x4_t *)a2[3];
                      float32x4_t v257 = vmulq_f32(*v256, (float32x4_t)v314[0]);
                      int8x16_t v258 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v256[1]);
                      int8x16_t v259 = (int8x16_t)vmulq_f32((float32x4_t)v314[0], v256[2]);
                      v259.i32[3] = 0;
                      *(float32x2_t *)v257.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v258.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v257, (int8x16_t)v257, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v258, v258, 8uLL)));
                      *(float32x2_t *)&v257.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v259.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v259, v259, 8uLL)), 0);
                      float32x4_t v260 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v257, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
                      v260.i32[3] = 0;
                      *(float32x4_t *)(a1 + 64) = v257;
                      *(float32x4_t *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v260;
                      uint64_t v261 = a2[3];
                      int8x16_t v262 = *(int8x16_t *)(v261 + 32);
                      float32x4_t v263 = vsubq_f32(v260, *(float32x4_t *)(v261 + 48));
                      int32x4_t v264 = *(int32x4_t *)(v261 + 16);
                      float32x4_t v265 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v261, v264);
                      v266.i64[0] = vextq_s8((int8x16_t)v265, (int8x16_t)v265, 8uLL).u64[0];
                      v266.i64[1] = vextq_s8(v262, v262, 8uLL).u64[0];
                      int8x16_t v267 = (int8x16_t)vmulq_f32(v266, v263);
                      v263.i32[3] = 0;
                      v265.i64[1] = v262.u32[0];
                      *(int32x2_t *)v260.f32 = vzip2_s32(*(int32x2_t *)v261, *(int32x2_t *)v264.i8);
                      *(int32x2_t *)&v260.u32[2] = vzip2_s32(*(int32x2_t *)v262.i8, 0);
                      int8x16_t v268 = (int8x16_t)vmulq_f32(v265, v263);
                      int8x16_t v269 = (int8x16_t)vmulq_f32(v260, v263);
                      v267.i32[3] = 0;
                      *(float32x2_t *)v142.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL)), vpadd_f32(*(float32x2_t *)v268.i8, *(float32x2_t *)v269.i8));
                      *(float32x2_t *)&v142.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v267.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v267, v267, 8uLL)), 0);
                      *(float32x4_t *)(a1 + 16) = v142;
                    }
                  }
                  float32x4_t v50 = v303;
                }
              }
              int v101 = 1;
            }
          }
          if (v101 && v97)
          {
            if ((a6 & 2) != 0)
            {
              int8x16_t v272 = (int8x16_t)vmulq_f32(v96, v50);
              *(float32x2_t *)v142.f32 = vpadd_f32(*(float32x2_t *)v272.i8, *(float32x2_t *)v272.i8);
              float32x4_t v273 = (float32x4_t)vextq_s8(v272, v272, 8uLL);
              *(float32x2_t *)v273.f32 = vadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v273.f32);
              v142.i64[0] = 0;
              float32x4_t v270 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v142, v273), 0), (int8x16_t)vnegq_f32(v96), (int8x16_t)v96);
            }
            else
            {
              float32x4_t v270 = vmulq_n_f32(v96, v307);
              v270.i32[3] = 0;
              int8x16_t v271 = (int8x16_t)vmulq_f32(v50, v270);
              if (vadd_f32(vpadd_f32(*(float32x2_t *)v271.i8, *(float32x2_t *)v271.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v271, v271, 8uLL)).f32[0] < 0.0)return; {
            }
              }
            float v274 = (float32x4_t *)a2[3];
            float32x4_t v275 = vmulq_f32(*v274, v270);
            int8x16_t v276 = (int8x16_t)vmulq_f32(v274[1], v270);
            int8x16_t v277 = (int8x16_t)vmulq_f32(v274[2], v270);
            v277.i32[3] = 0;
            *(float32x2_t *)v275.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v275.f32, *(float32x2_t *)v276.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v276, v276, 8uLL)));
            *(float32x2_t *)&v275.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v277.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v277, v277, 8uLL)), 0);
            float32x4_t v278 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmulq_n_f32(v275, COERCE_FLOAT(*(_OWORD *)(a1 + 80))));
            v278.i32[3] = 0;
            *(float32x4_t *)(a1 + 64) = v275;
            *(float32x4_t *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v278;
            uint64_t v279 = a2[3];
            int8x16_t v280 = *(int8x16_t *)(v279 + 32);
            float32x4_t v281 = vsubq_f32(v278, *(float32x4_t *)(v279 + 48));
            int32x4_t v282 = *(int32x4_t *)(v279 + 16);
            float32x4_t v283 = (float32x4_t)vtrn1q_s32(*(int32x4_t *)v279, v282);
            v284.i64[0] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u64[0];
            v284.i64[1] = vextq_s8(v280, v280, 8uLL).u64[0];
            int8x16_t v285 = (int8x16_t)vmulq_f32(v284, v281);
            v281.i32[3] = 0;
            v283.i64[1] = v280.u32[0];
            *(int32x2_t *)v278.f32 = vzip2_s32(*(int32x2_t *)v279, *(int32x2_t *)v282.i8);
            *(int32x2_t *)&v278.u32[2] = vzip2_s32(*(int32x2_t *)v280.i8, 0);
            int8x16_t v286 = (int8x16_t)vmulq_f32(v283, v281);
            int8x16_t v287 = (int8x16_t)vmulq_f32(v278, v281);
            v285.i32[3] = 0;
            *(float32x2_t *)v287.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v286, v286, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v287, v287, 8uLL)), vpadd_f32(*(float32x2_t *)v286.i8, *(float32x2_t *)v287.i8));
            v287.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v285.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v285, v285, 8uLL)), 0);
            *(int8x16_t *)(a1 + 16) = v287;
          }
        }
      }
    }
  }
}

void sub_1B6DDE9DC(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DDEA14(uint64_t a1, float32x4_t *a2, int a3, int a4)
{
  uint64_t v191 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a1 + 8);
  if (v6 != a3 || *(_DWORD *)(a1 + 12) != a4)
  {
    uint64_t v189 = -1;
    int v190 = -1;
    int v188 = -1;
    int32x2_t v187 = (int32x2_t)-1;
    float32x4_t v7 = vsubq_f32(a2[1], *a2);
    int8x8_t v8 = (int8x8_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    v7.i32[3] = 0;
    float32x4_t v9 = vsubq_f32(a2[2], *a2);
    int8x8_t v10 = (int8x8_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
    v9.i32[3] = 0;
    *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v7.f32, v8, 4uLL);
    v11.i64[1] = v7.i64[0];
    *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v9.f32, v10, 4uLL);
    v12.i64[1] = v9.i64[0];
    int8x16_t v13 = (int8x16_t)vsubq_f32(vmulq_f32(v12, v7), vmulq_f32(v11, v9));
    v9.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
    v9.i64[1] = v13.u32[0];
    int8x16_t v14 = (int8x16_t)vmulq_f32(v9, v9);
    v9.f32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
    uint64_t v15 = *(void *)(a1 + 24);
    float v16 = *(float *)(v15 + 144);
    if (v9.f32[0] >= v16)
    {
      float32x4_t v17 = *(float32x4_t **)(a1 + 16);
      float32x4_t v18 = vsubq_f32(v17[1], *v17);
      int8x8_t v19 = (int8x8_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
      v18.i32[3] = 0;
      float32x4_t v20 = vsubq_f32(v17[2], *v17);
      int8x8_t v21 = (int8x8_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      v20.i32[3] = 0;
      *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v18.f32, v19, 4uLL);
      v22.i64[1] = v18.i64[0];
      *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v20.f32, v21, 4uLL);
      v23.i64[1] = v20.i64[0];
      int8x16_t v24 = (int8x16_t)vsubq_f32(vmulq_f32(v23, v18), vmulq_f32(v22, v20));
      v20.i64[0] = vextq_s8(v24, v24, 4uLL).u64[0];
      v20.i64[1] = v24.u32[0];
      int8x16_t v25 = (int8x16_t)vmulq_f32(v20, v20);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).f32[0] >= v16)
      {
        uint64_t v26 = 0;
        int v27 = 0;
        do
        {
          uint64_t v28 = 0;
          uint64_t v29 = v26;
          float32x4_t v30 = v17[v26];
          do
          {
            float32x4_t v31 = vsubq_f32(v30, a2[v28]);
            v31.i32[3] = 0;
            int8x16_t v32 = (int8x16_t)vmulq_f32(v31, v31);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0] < v16)
            {
              *((_DWORD *)&v189 + v27) = v26;
              v187.i32[v27] = v28;
              if (v27 > 1) {
                return;
              }
              ++v27;
            }
            ++v28;
          }
          while (v28 != 3);
          if (v27 > 2) {
            return;
          }
          ++v26;
        }
        while (v29 != 2);
        if (v27 != 2) {
          return;
        }
        int v34 = v189;
        int v33 = HIDWORD(v189);
        if (v189 == 0x200000000)
        {
          int v33 = 0;
          uint64_t v189 = 2;
          int32x2_t v187 = vrev64_s32(v187);
          int v34 = 2;
        }
        int v35 = *(_DWORD *)(a1 + 12) | (v6 << 21);
        LODWORD(v183[0]) = v35;
        int v36 = sub_1B6DDF70C(v15 + 8, (int *)v183);
        if (v36 == -1 || (uint64_t v37 = *(void *)(v15 + 88)) == 0)
        {
          *(int32x2_t *)((char *)v183 + 4) = vdup_n_s32(0x40C90FDBu);
          HIDWORD(v183[0]) = 1086918619;
          LODWORD(v183[0]) = 0;
          uint64_t v38 = *(void *)(a1 + 24) + 8;
          LODWORD(v178) = v35;
          sub_1B6DDF4B0(v38, (int *)&v178, v183);
          uint64_t v39 = *(void *)(a1 + 24);
          LODWORD(v178) = v35;
          int v36 = sub_1B6DDF70C(v39 + 8, (int *)&v178);
          if (v36 == -1)
          {
            uint64_t v171 = 0;
LABEL_23:
            int v40 = v33 + v34;
            int v41 = 3 - (v33 + v34);
            int8x16_t v42 = *(float32x4_t **)(a1 + 16);
            float32x4_t v43 = vsubq_f32(v42[v33], v42[v34]);
            v43.i32[3] = 0;
            float32x4_t v172 = v43;
            sub_1B6DEA398((uint64_t)v183);
            *(void *)&v183[0] = &unk_1F0FB0E08;
            DWORD2(v183[0]) = 1;
            float32x4_t v184 = *v42;
            float32x4_t v185 = v42[1];
            float32x4_t v186 = v42[2];
            uint64_t v45 = v187.i32[0];
            uint64_t v44 = v187.i32[1];
            __int32 v46 = 3 - (v187.i32[0] + v187.i32[1]);
            sub_1B6DEA398((uint64_t)&v178);
            BOOL v174 = 0;
            uint64_t v178 = &unk_1F0FB0E08;
            int v179 = 1;
            float32x4_t v47 = a2[v45];
            float32x4_t v180 = a2[v44];
            float32x4_t v181 = v47;
            float32x4_t v48 = vsubq_f32(v185, v184);
            int8x8_t v49 = (int8x8_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
            v48.i32[3] = 0;
            float32x4_t v182 = a2[v46];
            float32x4_t v50 = vsubq_f32(v186, v184);
            int8x8_t v51 = (int8x8_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
            v50.i32[3] = 0;
            *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v48.f32, v49, 4uLL);
            v52.i64[1] = v48.i64[0];
            *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v50.f32, v51, 4uLL);
            v53.i64[1] = v50.i64[0];
            int8x16_t v54 = (int8x16_t)vsubq_f32(vmulq_f32(v53, v48), vmulq_f32(v52, v50));
            v50.i64[0] = vextq_s8(v54, v54, 4uLL).u64[0];
            v50.i64[1] = v54.u32[0];
            int8x16_t v55 = (int8x16_t)vmulq_f32(v50, v50);
            float32x4_t v56 = vmulq_n_f32(v50, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0]));
            float32x4_t v57 = vsubq_f32(v47, v180);
            v52.i64[0] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
            v57.i32[3] = 0;
            float32x4_t v58 = vsubq_f32(v182, v180);
            v53.i64[0] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
            v58.i32[3] = 0;
            *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v52.f32, 4uLL);
            v52.i64[1] = v57.i64[0];
            *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v58.f32, *(int8x8_t *)v53.f32, 4uLL);
            v53.i64[1] = v58.i64[0];
            int8x16_t v59 = (int8x16_t)vsubq_f32(vmulq_f32(v53, v57), vmulq_f32(v52, v58));
            v52.i64[0] = vextq_s8(v59, v59, 4uLL).u64[0];
            v52.i64[1] = v59.u32[0];
            int8x16_t v60 = (int8x16_t)vmulq_f32(v52, v52);
            v53.f32[0] = 1.0
                       / sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)).f32[0]);
            int8x16_t v61 = (int8x16_t)vmulq_f32(v172, v172);
            float32x4_t v62 = vmulq_n_f32(v172, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), vpadd_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8)).f32[0]));
            v57.i64[0] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL).u64[0];
            v57.i64[1] = v62.i64[0];
            float32x4_t v63 = vmulq_n_f32(v52, v53.f32[0]);
            v52.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL).u64[0];
            int32x2_t v168 = (int32x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
            float32x2_t v169 = *(float32x2_t *)v52.f32;
            v52.i64[1] = v56.i64[0];
            float32x4_t v173 = v56;
            int8x16_t v64 = (int8x16_t)vsubq_f32(vmulq_f32(v62, v52), vmulq_f32(v57, v56));
            v52.i64[0] = vextq_s8(v64, v64, 4uLL).u64[0];
            v52.i64[1] = v64.u32[0];
            int8x16_t v65 = (int8x16_t)vmulq_f32(v52, v52);
            float32x4_t v66 = vmulq_n_f32(v52, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v65.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)).f32[0]));
            float32x4_t v67 = vsubq_f32(*(float32x4_t *)(*(void *)(a1 + 16) + 16 * v41), *(float32x4_t *)(*(void *)(a1 + 16) + 16 * v34));
            v67.i32[3] = 0;
            int8x16_t v68 = (int8x16_t)vmulq_f32(v66, v67);
            *(float32x2_t *)v56.f32 = vpadd_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v68.i8);
            float32x4_t v69 = (float32x4_t)vextq_s8(v68, v68, 8uLL);
            *(float32x2_t *)v69.f32 = vadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v69.f32);
            v70.i64[0] = 0;
            v56.i64[0] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 4uLL).u64[0];
            v56.i64[1] = v63.i64[0];
            float32x4_t v170 = v63;
            int8x16_t v71 = (int8x16_t)vsubq_f32(vmulq_f32(v62, v56), vmulq_f32(v57, v63));
            v57.i64[0] = vextq_s8(v71, v71, 4uLL).u64[0];
            v57.i64[1] = v71.u32[0];
            float32x4_t v72 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v70, v69), 0), (int8x16_t)vnegq_f32(v66), (int8x16_t)v66);
            int8x16_t v73 = (int8x16_t)vmulq_f32(v57, v57);
            float32x4_t v74 = vsubq_f32(v182, v47);
            v74.i32[3] = 0;
            float32x4_t v75 = vmulq_n_f32(v57, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0]));
            int8x16_t v76 = (int8x16_t)vmulq_f32(v75, v74);
            *(float32x2_t *)v57.f32 = vpadd_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8);
            float32x4_t v77 = (float32x4_t)vextq_s8(v76, v76, 8uLL);
            *(float32x2_t *)v77.f32 = vadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v77.f32);
            int8x16_t v78 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v70, v77), 0);
            v79.i64[0] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL).u64[0];
            v79.i64[1] = v72.i64[0];
            float32x4_t v80 = (float32x4_t)vbslq_s8(v78, (int8x16_t)vnegq_f32(v75), (int8x16_t)v75);
            v75.i64[0] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL).u64[0];
            v75.i64[1] = v80.i64[0];
            int8x16_t v81 = (int8x16_t)vsubq_f32(vmulq_f32(v75, v72), vmulq_f32(v80, v79));
            v82.i64[0] = vextq_s8(v81, v81, 4uLL).u64[0];
            v82.i64[1] = v81.u32[0];
            int8x16_t v83 = (int8x16_t)vmulq_f32(v82, v82);
            float v84 = vadd_f32(vpadd_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL)).f32[0];
            if (v84 >= *(float *)(*(void *)(a1 + 24) + 140))
            {
              float32x4_t v164 = vmulq_n_f32(v82, 1.0 / sqrtf(v84));
              v85.i64[0] = vextq_s8((int8x16_t)v164, (int8x16_t)v164, 4uLL).u64[0];
              v85.i64[1] = v164.i64[0];
              int8x16_t v86 = (int8x16_t)vsubq_f32(vmulq_f32(v79, v164), vmulq_f32(v72, v85));
              v85.i64[0] = vextq_s8(v86, v86, 4uLL).u64[0];
              v85.i64[1] = v86.u32[0];
              int8x16_t v87 = (int8x16_t)vmulq_f32(v85, v85);
              int8x16_t v88 = (int8x16_t)vmulq_f32(v80, vmulq_n_f32(v85, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), vpadd_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v87.i8)).f32[0])));
              int8x16_t v89 = (int8x16_t)vmulq_f32(v80, v72);
              float32x4_t v175 = v80;
              float v90 = 3.1416
                  - atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v88.i8, *(float32x2_t *)v88.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL)).f32[0], vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8)).f32[0]);
              int8x16_t v91 = (int8x16_t)vmulq_f32(v173, v175);
              *(float *)v91.i32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v91.i8)).f32[0];
              BOOL v174 = *(float *)v91.i32 < 0.0;
              if (*(float *)v91.i32 >= 0.0) {
                float v92 = -v90;
              }
              else {
                float v92 = v90;
              }
              float v163 = v92;
              int8x16_t v93 = (int8x16_t)vmulq_f32(v164, v164);
              float v94 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL), vpadd_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v93.i8)).f32[0]);
              __float2 v95 = __sincosf_stret(v92 * -0.5);
              *(float32x2_t *)v177.f32 = vmul_n_f32(*(float32x2_t *)v164.f32, v95.__sinval / v94);
              v177.i64[1] = __PAIR64__(LODWORD(v95.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v95.__sinval / v94, v164, 2)));
              sub_1B6548938((uint64_t)v176, &v177);
              v70.f32[0] = v163;
            }
            switch(v40)
            {
              case 3:
                float32x4_t v119 = vsubq_f32(*(float32x4_t *)(*(void *)(a1 + 16) + 16), *(float32x4_t *)(*(void *)(a1 + 16) + 32));
                v119.i32[3] = 0;
                float32x4_t v166 = v119;
                float v120 = -v70.f32[0];
                int8x16_t v121 = (int8x16_t)vmulq_f32(v119, v119);
                float v122 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)).f32[0]);
                __float2 v123 = __sincosf_stret(v70.f32[0] * -0.5);
                *(float32x2_t *)v124.i8 = vmul_n_f32(*(float32x2_t *)v166.f32, v123.__sinval / v122);
                v125.i64[0] = v124.i64[0];
                v125.i64[1] = __PAIR64__(LODWORD(v123.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v123.__sinval / v122, v166, 2)));
                int32x2_t v126 = (int32x2_t)vextq_s8(v125, v125, 8uLL).u64[0];
                int32x2_t v127 = vzip1_s32(v168, *(int32x2_t *)v173.f32);
                float32x2_t v128 = (float32x2_t)vzip1_s32(v126, *(int32x2_t *)v124.i8);
                float32x2_t v129 = (float32x2_t)vext_s8(*(int8x8_t *)v124.i8, (int8x8_t)v126, 4uLL);
                *(float32x2_t *)v130.f32 = vmul_f32(v169, v128);
                *(float32x2_t *)&v130.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v127), v129);
                *(float32x2_t *)v131.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v173.f32, (float32x4_t)v125, 3), vmul_f32((float32x2_t)v127, v129));
                v131.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v124.i8, *(float32x2_t *)v173.f32, 1), vmul_f32((float32x2_t)v127, (float32x2_t)*(_OWORD *)&vextq_s8(v125, v124, 0xCuLL)));
                float32x4_t v132 = vsubq_f32((float32x4_t)veorq_s8(v131, (int8x16_t)xmmword_1B6E72E20), v130);
                float32x4_t v133 = (float32x4_t)veorq_s8(v125, (int8x16_t)xmmword_1B6E72E30);
                v124.i64[0] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
                *(int32x2_t *)v125.i8 = vzip1_s32(*(int32x2_t *)v124.i8, *(int32x2_t *)v132.f32);
                int32x2_t v134 = (int32x2_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
                *(int32x2_t *)v130.f32 = vzip1_s32(v134, *(int32x2_t *)v133.f32);
                float32x2_t v135 = (float32x2_t)vextq_s8((int8x16_t)v132, (int8x16_t)v132, 4uLL).u64[0];
                float32x2_t v136 = vmul_laneq_f32(*(float32x2_t *)v132.f32, v133, 3);
                *(float32x2_t *)v124.i8 = vmul_laneq_f32(*(float32x2_t *)v124.i8, v133, 3);
                float32x2_t v137 = vmul_lane_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v133.f32, 1);
                *(float32x2_t *)v125.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v133.f32, (int8x8_t)v134, 4uLL), *(float32x2_t *)v125.i8);
                v125.u64[1] = (unint64_t)vmul_lane_f32(v135, *(float32x2_t *)v130.f32, 1);
                float32x4_t v138 = vmulq_laneq_f32(v133, v132, 3);
                *(float32x2_t *)v133.f32 = vadd_f32(v136, vmul_f32(*(float32x2_t *)v130.f32, v135));
                *(float32x2_t *)&v133.u32[2] = vadd_f32(v137, *(float32x2_t *)v124.i8);
                float32x4_t v139 = vaddq_f32(vsubq_f32(v138, (float32x4_t)v125), v133);
                v139.i32[3] = 0;
                int8x16_t v140 = (int8x16_t)vmulq_f32(v170, v139);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v140.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL)).f32[0] < 0.0)*(_DWORD *)v171 |= 0x10u; {
                *(float *)(v171 + 8) = v120;
                }
                if (!v174) {
                  goto LABEL_44;
                }
                int v118 = 2;
                break;
              case 2:
                float32x4_t v141 = vsubq_f32(*(float32x4_t *)(*(void *)(a1 + 16) + 32), *(float32x4_t *)*(void *)(a1 + 16));
                v141.i32[3] = 0;
                float32x4_t v167 = v141;
                float v142 = -v70.f32[0];
                int8x16_t v143 = (int8x16_t)vmulq_f32(v141, v141);
                float v144 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v143.i8, *(float32x2_t *)v143.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL)).f32[0]);
                __float2 v145 = __sincosf_stret(v70.f32[0] * -0.5);
                *(float32x2_t *)v146.i8 = vmul_n_f32(*(float32x2_t *)v167.f32, v145.__sinval / v144);
                v147.i64[0] = v146.i64[0];
                v147.i64[1] = __PAIR64__(LODWORD(v145.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v145.__sinval / v144, v167, 2)));
                int32x2_t v148 = (int32x2_t)vextq_s8(v147, v147, 8uLL).u64[0];
                int32x2_t v149 = vzip1_s32(v168, *(int32x2_t *)v173.f32);
                float32x2_t v150 = (float32x2_t)vzip1_s32(v148, *(int32x2_t *)v146.i8);
                float32x2_t v151 = (float32x2_t)vext_s8(*(int8x8_t *)v146.i8, (int8x8_t)v148, 4uLL);
                *(float32x2_t *)v152.f32 = vmul_f32(v169, v150);
                *(float32x2_t *)&v152.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v149), v151);
                *(float32x2_t *)v153.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v173.f32, (float32x4_t)v147, 3), vmul_f32((float32x2_t)v149, v151));
                v153.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v146.i8, *(float32x2_t *)v173.f32, 1), vmul_f32((float32x2_t)v149, (float32x2_t)*(_OWORD *)&vextq_s8(v147, v146, 0xCuLL)));
                float32x4_t v154 = vsubq_f32((float32x4_t)veorq_s8(v153, (int8x16_t)xmmword_1B6E72E20), v152);
                float32x4_t v155 = (float32x4_t)veorq_s8(v147, (int8x16_t)xmmword_1B6E72E30);
                v146.i64[0] = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u64[0];
                *(int32x2_t *)v147.i8 = vzip1_s32(*(int32x2_t *)v146.i8, *(int32x2_t *)v154.f32);
                int32x2_t v156 = (int32x2_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 8uLL).u64[0];
                *(int32x2_t *)v152.f32 = vzip1_s32(v156, *(int32x2_t *)v155.f32);
                float32x2_t v157 = (float32x2_t)vextq_s8((int8x16_t)v154, (int8x16_t)v154, 4uLL).u64[0];
                float32x2_t v158 = vmul_laneq_f32(*(float32x2_t *)v154.f32, v155, 3);
                *(float32x2_t *)v146.i8 = vmul_laneq_f32(*(float32x2_t *)v146.i8, v155, 3);
                float32x2_t v159 = vmul_lane_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v155.f32, 1);
                *(float32x2_t *)v147.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v155.f32, (int8x8_t)v156, 4uLL), *(float32x2_t *)v147.i8);
                v147.u64[1] = (unint64_t)vmul_lane_f32(v157, *(float32x2_t *)v152.f32, 1);
                float32x4_t v160 = vmulq_laneq_f32(v155, v154, 3);
                *(float32x2_t *)v155.f32 = vadd_f32(v158, vmul_f32(*(float32x2_t *)v152.f32, v157));
                *(float32x2_t *)&v155.u32[2] = vadd_f32(v159, *(float32x2_t *)v146.i8);
                float32x4_t v161 = vaddq_f32(vsubq_f32(v160, (float32x4_t)v147), v155);
                v161.i32[3] = 0;
                int8x16_t v162 = (int8x16_t)vmulq_f32(v170, v161);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v162.i8, *(float32x2_t *)v162.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL)).f32[0] < 0.0)*(_DWORD *)v171 |= 0x20u; {
                *(float *)(v171 + 1sub_1B6DC4968((unsigned int *)this + 2) = v142;
                }
                if (!v174) {
                  goto LABEL_44;
                }
                int v118 = 4;
                break;
              case 1:
                float32x4_t v96 = vsubq_f32(*(float32x4_t *)*(void *)(a1 + 16), *(float32x4_t *)(*(void *)(a1 + 16) + 16));
                v96.i32[3] = 0;
                float32x4_t v165 = v96;
                float v97 = -v70.f32[0];
                int8x16_t v98 = (int8x16_t)vmulq_f32(v96, v96);
                float v99 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL)).f32[0]);
                __float2 v100 = __sincosf_stret(v70.f32[0] * -0.5);
                *(float32x2_t *)v101.i8 = vmul_n_f32(*(float32x2_t *)v165.f32, v100.__sinval / v99);
                v102.i64[0] = v101.i64[0];
                v102.i64[1] = __PAIR64__(LODWORD(v100.__cosval), COERCE_UNSIGNED_INT(vmuls_lane_f32(v100.__sinval / v99, v165, 2)));
                int32x2_t v103 = (int32x2_t)vextq_s8(v102, v102, 8uLL).u64[0];
                int32x2_t v104 = vzip1_s32(v168, *(int32x2_t *)v173.f32);
                float32x2_t v105 = (float32x2_t)vzip1_s32(v103, *(int32x2_t *)v101.i8);
                float32x2_t v106 = (float32x2_t)vext_s8(*(int8x8_t *)v101.i8, (int8x8_t)v103, 4uLL);
                *(float32x2_t *)v107.f32 = vmul_f32(v169, v105);
                *(float32x2_t *)&v107.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v104), v106);
                *(float32x2_t *)v108.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v173.f32, (float32x4_t)v102, 3), vmul_f32((float32x2_t)v104, v106));
                v108.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v173.f32, 1), vmul_f32((float32x2_t)v104, (float32x2_t)*(_OWORD *)&vextq_s8(v102, v101, 0xCuLL)));
                float32x4_t v109 = vsubq_f32((float32x4_t)veorq_s8(v108, (int8x16_t)xmmword_1B6E72E20), v107);
                float32x4_t v110 = (float32x4_t)veorq_s8(v102, (int8x16_t)xmmword_1B6E72E30);
                v101.i64[0] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u64[0];
                *(int32x2_t *)v102.i8 = vzip1_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v109.f32);
                int32x2_t v111 = (int32x2_t)vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u64[0];
                *(int32x2_t *)v107.f32 = vzip1_s32(v111, *(int32x2_t *)v110.f32);
                float32x2_t v112 = (float32x2_t)vextq_s8((int8x16_t)v109, (int8x16_t)v109, 4uLL).u64[0];
                float32x2_t v113 = vmul_laneq_f32(*(float32x2_t *)v109.f32, v110, 3);
                *(float32x2_t *)v101.i8 = vmul_laneq_f32(*(float32x2_t *)v101.i8, v110, 3);
                float32x2_t v114 = vmul_lane_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v110.f32, 1);
                *(float32x2_t *)v102.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v110.f32, (int8x8_t)v111, 4uLL), *(float32x2_t *)v102.i8);
                v102.u64[1] = (unint64_t)vmul_lane_f32(v112, *(float32x2_t *)v107.f32, 1);
                float32x4_t v115 = vmulq_laneq_f32(v110, v109, 3);
                *(float32x2_t *)v110.f32 = vadd_f32(v113, vmul_f32(*(float32x2_t *)v107.f32, v112));
                *(float32x2_t *)&v110.u32[2] = vadd_f32(v114, *(float32x2_t *)v101.i8);
                float32x4_t v116 = vaddq_f32(vsubq_f32(v115, (float32x4_t)v102), v110);
                v116.i32[3] = 0;
                int8x16_t v117 = (int8x16_t)vmulq_f32(v170, v116);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v117.i8, *(float32x2_t *)v117.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL)).f32[0] < 0.0)*(_DWORD *)v171 |= 8u; {
                *(float *)(v171 + 4) = v97;
                }
                if (!v174) {
                  goto LABEL_44;
                }
                int v118 = 1;
                break;
              default:
                goto LABEL_44;
            }
            *(_DWORD *)v171 |= v118;
LABEL_44:
            sub_1B6DEA3D0(&v178);
            sub_1B6DEA3D0(v183);
            return;
          }
          uint64_t v37 = *(void *)(v39 + 88);
        }
        uint64_t v171 = v37 + 16 * v36;
        goto LABEL_23;
      }
    }
  }
}

void sub_1B6DDF4B0(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = *a2;
  int v7 = *(_DWORD *)(a1 + 72);
  int v8 = sub_1B6DDF70C(a1, a2);
  if (v8 != -1)
  {
    *(_OWORD *)(*(void *)(a1 + 80) + 16 * v8) = *a3;
    return;
  }
  int v9 = 9 * ((v6 + ~(v6 << 15)) ^ ((v6 + ~(v6 << 15)) >> 10));
  int v10 = ((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) ^ (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) >> 16);
  int v11 = v7 - 1;
  int v12 = *(_DWORD *)(a1 + 68);
  int v13 = *(_DWORD *)(a1 + 72);
  int v14 = v12;
  if (v12 == v13)
  {
    int v15 = v12 ? 2 * v12 : 1;
    int v14 = *(_DWORD *)(a1 + 68);
    if (v12 < v15)
    {
      if (v15) {
        uint64_t v16 = sub_1B6E073B8(16 * v15, 16);
      }
      else {
        uint64_t v16 = 0;
      }
      if (*(int *)(a1 + 68) >= 1)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 16 * *(unsigned int *)(a1 + 68);
        do
        {
          *(_OWORD *)(v16 + v17) = *(_OWORD *)(*(void *)(a1 + 80) + v17);
          v17 += 16;
        }
        while (v18 != v17);
      }
      uint64_t v19 = *(void *)(a1 + 80);
      if (v19 && *(unsigned char *)(a1 + 88)) {
        sub_1B6E073C4(v19);
      }
      *(unsigned char *)(a1 + 88) = 1;
      *(void *)(a1 + 80) = v16;
      *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v15;
      int v14 = *(_DWORD *)(a1 + 68);
    }
  }
  int v20 = v10 & v11;
  *(_OWORD *)(*(void *)(a1 + 80) + 16 * v14) = *a3;
  ++*(_DWORD *)(a1 + 68);
  LODWORD(v21) = *(_DWORD *)(a1 + 100);
  if (v21 == *(_DWORD *)(a1 + 104))
  {
    int v22 = v21 ? 2 * v21 : 1;
    if ((int)v21 < v22)
    {
      if (v22)
      {
        uint64_t v23 = sub_1B6E073B8(4 * v22, 16);
        LODWORD(v21) = *(_DWORD *)(a1 + 100);
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void *)(a1 + 112);
      if ((int)v21 < 1)
      {
        if (!v24)
        {
LABEL_34:
          *(unsigned char *)(a1 + 120) = 1;
          *(void *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = v23;
          *(_DWORD *)(a1 + 104) = v22;
          LODWORD(v21) = *(_DWORD *)(a1 + 100);
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v21 = v21;
        int8x16_t v25 = (_DWORD *)v23;
        uint64_t v26 = *(int **)(a1 + 112);
        do
        {
          int v27 = *v26++;
          *v25++ = v27;
          --v21;
        }
        while (v21);
      }
      if (*(unsigned char *)(a1 + 120)) {
        sub_1B6E073C4(v24);
      }
      *(void *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0;
      goto LABEL_34;
    }
  }
LABEL_35:
  *(_DWORD *)(*(void *)(a1 + 112) + 4 * (int)v21) = *a2;
  ++*(_DWORD *)(a1 + 100);
  if (v13 < *(_DWORD *)(a1 + 72))
  {
    sub_1B6DDF78C(a1);
    int v28 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
    int v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
    int v20 = (v29 ^ (v29 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  }
  uint64_t v30 = *(void *)(a1 + 16);
  *(_DWORD *)(*(void *)(a1 + 48) + 4 * v1sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(v30 + 4 * v20);
  *(_DWORD *)(v30 + 4 * v20) = v12;
}

uint64_t sub_1B6DDF70C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t result = 0xFFFFFFFFLL;
  int v5 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  int v7 = (v6 ^ (v6 >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v7 < *(_DWORD *)(a1 + 4))
  {
    uint64_t result = *(unsigned int *)(*(void *)(a1 + 16) + 4 * v7);
    if (result == -1)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      while (v3 != *(_DWORD *)(*(void *)(a1 + 112) + 4 * (int)result))
      {
        uint64_t result = *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)result);
        if (result == -1) {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return result;
}

void sub_1B6DDF78C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 72);
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1) {
    return;
  }
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if (v1)
    {
      uint64_t v4 = sub_1B6E073B8(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      uint64_t v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    uint64_t v6 = *(void *)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(unsigned char *)(a1 + 24) = 1;
        *(void *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v5 = v5;
      int v7 = (_DWORD *)v4;
      int v8 = *(int **)(a1 + 16);
      do
      {
        int v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(unsigned char *)(a1 + 24)) {
      sub_1B6E073C4(v6);
    }
    *(void *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(void *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  int v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(void *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if (v1) {
      uint64_t v11 = sub_1B6E073B8(4 * (int)v1, 16);
    }
    else {
      uint64_t v11 = 0;
    }
    LODWORD(v1sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + 36);
    uint64_t v13 = *(void *)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(unsigned char *)(a1 + 56) = 1;
        *(void *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v12 = v12;
      int v14 = (_DWORD *)v11;
      int v15 = *(int **)(a1 + 48);
      do
      {
        int v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(unsigned char *)(a1 + 56)) {
      sub_1B6E073C4(v13);
    }
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(a1 + 112);
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = *(void *)(a1 + 48);
    do
    {
      int v21 = *(_DWORD *)(v18 + 4 * v17) + ~(*(_DWORD *)(v18 + 4 * v17) << 15);
      int v22 = (9 * (v21 ^ (v21 >> 10))) ^ ((9 * (v21 ^ (v21 >> 10))) >> 6);
      int v23 = ((v22 + ~(v22 << 11)) ^ ((v22 + ~(v22 << 11)) >> 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v20 + 4 * v17) = *(_DWORD *)(v19 + 4 * v23);
      *(_DWORD *)(v19 + 4 * v23) = v17++;
    }
    while (v2 != v17);
  }
}

int8x16_t sub_1B6DDF9B8(int8x16_t *a1, int8x16_t *a2)
{
  int32x2_t v2 = (int32x2_t)vextq_s8(*a1, *a1, 8uLL).u64[0];
  float32x2_t v3 = (float32x2_t)vzip1_s32(v2, *(int32x2_t *)a1->i8);
  int32x2_t v4 = (int32x2_t)vextq_s8(*a2, *a2, 8uLL).u64[0];
  float32x2_t v5 = (float32x2_t)vzip1_s32(v4, *(int32x2_t *)a2->i8);
  float32x2_t v6 = (float32x2_t)vext_s8(*(int8x8_t *)a1->i8, (int8x8_t)v2, 4uLL);
  float32x2_t v7 = vmul_f32(v3, (float32x2_t)vext_s8((int8x8_t)v4, *(int8x8_t *)a2->i8, 4uLL));
  *(float32x2_t *)v8.f32 = vmul_f32(v3, (float32x2_t)vext_s8(*(int8x8_t *)a2->i8, (int8x8_t)v4, 4uLL));
  *(float32x2_t *)&v8.u32[2] = vmul_f32(v6, (float32x2_t)vrev64_s32((int32x2_t)v5));
  *(float32x2_t *)v9.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)a1->i8, *(float32x4_t *)a2, 3), vmul_f32(v6, v5));
  v9.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)a2->i8, 1), v7);
  int8x16_t result = (int8x16_t)vaddq_f32(vsubq_f32(vmulq_laneq_f32(*(float32x4_t *)a2, *(float32x4_t *)a1, 3), v8), (float32x4_t)veorq_s8(v9, (int8x16_t)xmmword_1B6E72E20));
  *a1 = result;
  return result;
}

float sub_1B6DDFA28(uint64_t a1, uint64_t a2)
{
  float result = *(float *)(a1 + 252) * *(float *)(a2 + 252);
  if (result < -10.0) {
    float result = -10.0;
  }
  if (result > 10.0) {
    return 10.0;
  }
  return result;
}

float sub_1B6DDFA50(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 256) * *(float *)(a2 + 256);
}

void *sub_1B6DDFA60(void *result, uint64_t a2, uint64_t a3)
{
  *float result = &unk_1F0FB10F0;
  result[1] = 0;
  result[2] = a2;
  result[3] = a3;
  return result;
}

void sub_1B6DDFA84(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  if (sub_1B6DF3BE0(a1[1]) >= a4)
  {
    uint64_t v7 = a1[1];
    uint64_t v8 = *(void *)(v7 + 784);
    uint64_t v9 = *(void *)(a1[2] + 16);
    float32x4_t v10 = *a2;
    float32x4_t v11 = vmulq_n_f32(*a2, a4);
    v11.i32[3] = 0;
    float32x4_t v12 = *a3;
    float32x4_t v13 = vaddq_f32(*a3, v11);
    if (v8 == v9)
    {
      int8x16_t v34 = *(int8x16_t *)(v8 + 48);
      float32x4_t v35 = vsubq_f32(v13, *(float32x4_t *)(v8 + 64));
      float32x4_t v36 = *(float32x4_t *)(v8 + 16);
      int32x4_t v37 = *(int32x4_t *)(v8 + 32);
      float32x4_t v38 = (float32x4_t)vtrn1q_s32((int32x4_t)v36, v37);
      v39.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
      v39.i64[1] = vextq_s8(v34, v34, 8uLL).u64[0];
      int8x16_t v40 = (int8x16_t)vmulq_f32(v39, v35);
      v35.i32[3] = 0;
      *(int32x2_t *)v36.f32 = vzip2_s32(*(int32x2_t *)v36.f32, *(int32x2_t *)v37.i8);
      v38.i64[1] = v34.u32[0];
      *(int32x2_t *)&v36.u32[2] = vzip2_s32(*(int32x2_t *)v34.i8, 0);
      int8x16_t v41 = (int8x16_t)vmulq_f32(v38, v35);
      int8x16_t v42 = (int8x16_t)vmulq_f32(v36, v35);
      v40.i32[3] = 0;
      *(float32x2_t *)v37.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)), 0);
      uint64_t v43 = *(void *)(a1[3] + 16);
      int8x16_t v44 = *(int8x16_t *)(v43 + 48);
      float32x4_t v45 = vsubq_f32(v12, *(float32x4_t *)(v43 + 64));
      float32x4_t v46 = *(float32x4_t *)(v43 + 16);
      float32x4_t v47 = *(float32x4_t *)(v43 + 32);
      float32x4_t v48 = (float32x4_t)vtrn1q_s32((int32x4_t)v46, (int32x4_t)v47);
      *(int32x2_t *)v46.f32 = vzip2_s32(*(int32x2_t *)v46.f32, *(int32x2_t *)v47.f32);
      v47.i64[0] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
      *(float32x2_t *)v30.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8));
      v30.i64[1] = v37.i64[0];
      v45.i32[3] = 0;
      v48.i64[1] = v44.u32[0];
      *(int32x2_t *)&v46.u32[2] = vzip2_s32(*(int32x2_t *)v44.i8, 0);
      v47.i64[1] = vextq_s8(v44, v44, 8uLL).u32[0];
      int8x16_t v31 = (int8x16_t)vmulq_f32(v48, v45);
      int8x16_t v32 = (int8x16_t)vmulq_f32(v46, v45);
      int8x16_t v33 = (int8x16_t)vmulq_f32(v47, v45);
    }
    else
    {
      uint64_t v14 = *(void *)(a1[3] + 16);
      int8x16_t v15 = *(int8x16_t *)(v14 + 48);
      float32x4_t v16 = vsubq_f32(v13, *(float32x4_t *)(v14 + 64));
      float32x4_t v17 = *(float32x4_t *)(v14 + 16);
      float32x4_t v18 = *(float32x4_t *)(v14 + 32);
      float32x4_t v19 = (float32x4_t)vtrn1q_s32((int32x4_t)v17, (int32x4_t)v18);
      *(int32x2_t *)v17.f32 = vzip2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v18.f32);
      v18.i64[0] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      float32x4_t v20 = v16;
      v20.i32[3] = 0;
      v19.i64[1] = v15.u32[0];
      *(int32x2_t *)&v17.u32[2] = vzip2_s32(*(int32x2_t *)v15.i8, 0);
      v18.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
      int8x16_t v21 = (int8x16_t)vmulq_f32(v18, v16);
      int8x16_t v22 = (int8x16_t)vmulq_f32(v19, v20);
      int8x16_t v23 = (int8x16_t)vmulq_f32(v17, v20);
      v21.i32[3] = 0;
      *(float32x2_t *)v19.f32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
      int8x16_t v24 = *(int8x16_t *)(v9 + 48);
      float32x4_t v25 = vsubq_f32(v12, *(float32x4_t *)(v9 + 64));
      int32x4_t v26 = *(int32x4_t *)(v9 + 16);
      float32x4_t v27 = *(float32x4_t *)(v9 + 32);
      float32x4_t v28 = (float32x4_t)vtrn1q_s32(v26, (int32x4_t)v27);
      *(int32x2_t *)v27.f32 = vzip2_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v27.f32);
      v29.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
      *(float32x2_t *)v30.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v23.i8));
      v30.i64[1] = v19.i64[0];
      v25.i32[3] = 0;
      v28.i64[1] = v24.u32[0];
      *(int32x2_t *)&v27.u32[2] = vzip2_s32(*(int32x2_t *)v24.i8, 0);
      v29.i64[1] = vextq_s8(v24, v24, 8uLL).u32[0];
      int8x16_t v31 = (int8x16_t)vmulq_f32(v28, v25);
      int8x16_t v32 = (int8x16_t)vmulq_f32(v27, v25);
      int8x16_t v33 = (int8x16_t)vmulq_f32(v29, v25);
    }
    v33.i32[3] = 0;
    *(float32x2_t *)v49.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.i8));
    *(float32x2_t *)&v49.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 0);
    v84[0] = v30;
    v84[1] = v49;
    v84[3] = v13;
    float32x4_t v85 = v10;
    float v86 = a4;
    int8x8_t v87 = 0;
    float v88 = 0.0;
    uint64_t v93 = 0;
    char v94 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    __n128 v84[2] = v12;
    int v50 = sub_1B6DF3B7C(v7, v84);
    uint64_t v51 = *(void *)(a1[2] + 16);
    uint64_t v52 = *(void *)(a1[3] + 16);
    v53.i32[0] = *(_DWORD *)(v51 + 252);
    v54.i32[0] = *(_DWORD *)(v52 + 252);
    float v88 = *(float *)(v51 + 256) * *(float *)(v52 + 256);
    v53.i32[1] = *(_DWORD *)(v51 + 260);
    v54.i32[1] = *(_DWORD *)(v52 + 260);
    float32x2_t v55 = vmul_f32(v53, v54);
    __asm { FMOV            V1.2S, #-10.0 }
    float32x2_t v61 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D1, v55), (int8x8_t)_D1, (int8x8_t)v55);
    __asm { FMOV            V1.2S, #10.0 }
    int8x8_t v87 = vbsl_s8((int8x8_t)vcgt_f32(v61, _D1), (int8x8_t)_D1, (int8x8_t)v61);
    if (fabsf(v85.f32[2]) <= 0.70711)
    {
      float v71 = (float)(v85.f32[1] * v85.f32[1]) + (float)(v85.f32[0] * v85.f32[0]);
      float v72 = 1.0 / sqrtf(v71);
      float v70 = -(float)(v85.f32[1] * v72);
      float v65 = v85.f32[0] * v72;
      float v67 = -(float)(v85.f32[2] * (float)(v85.f32[0] * v72));
      float v68 = v85.f32[2] * v70;
      float v69 = v71 * v72;
      float v66 = 0.0;
    }
    else
    {
      float v63 = (float)(v85.f32[2] * v85.f32[2]) + (float)(v85.f32[1] * v85.f32[1]);
      float v64 = 1.0 / sqrtf(v63);
      float v65 = -(float)(v85.f32[2] * v64);
      float v66 = v85.f32[1] * v64;
      float v67 = v63 * v64;
      float v68 = -(float)(v85.f32[0] * (float)(v85.f32[1] * v64));
      float v69 = v65 * v85.f32[0];
      float v70 = 0.0;
    }
    float v97 = v70;
    float v98 = v65;
    float v99 = v66;
    float v100 = v67;
    float v101 = v68;
    float v102 = v69;
    if (v8 == v9)
    {
      int8x16_t v73 = (unsigned int *)(a1 + 4);
      float32x4_t v74 = (unsigned int *)a1 + 9;
      float32x4_t v75 = (unsigned int *)(a1 + 5);
      int8x16_t v76 = (unsigned int *)a1 + 11;
    }
    else
    {
      int8x16_t v73 = (unsigned int *)a1 + 9;
      float32x4_t v74 = (unsigned int *)(a1 + 4);
      float32x4_t v75 = (unsigned int *)a1 + 11;
      int8x16_t v76 = (unsigned int *)(a1 + 5);
    }
    unsigned int v77 = *v76;
    unsigned int v78 = *v75;
    unsigned int v79 = *v74;
    unsigned int v89 = *v73;
    unsigned int v90 = v79;
    unsigned int v91 = v78;
    unsigned int v92 = v77;
    float32x4_t v80 = (float32x4_t *)a1[1];
    if (v50 < 0) {
      int v50 = sub_1B6DF3BE8(v80, (uint64_t)v84);
    }
    else {
      sub_1B6DDFE8C((uint64_t)v80, v84, v50);
    }
    if (off_1E9E49940
      && ((*(unsigned char *)(*(void *)(a1[2] + 16) + 232) & 8) != 0
       || (*(unsigned char *)(*(void *)(a1[3] + 16) + 232) & 8) != 0))
    {
      uint64_t v81 = 3;
      if (v8 == v9) {
        uint64_t v82 = 2;
      }
      else {
        uint64_t v82 = 3;
      }
      if (v8 != v9) {
        uint64_t v81 = 2;
      }
      off_1E9E49940(a1[1] + 192 * v50 + 16, a1[v82], v89, v91, a1[v81], v90, v92);
    }
  }
}

unsigned char *sub_1B6DDFE8C(uint64_t a1, _OWORD *a2, int a3)
{
  uint64_t v4 = a1 + 192 * a3;
  int v5 = *(_DWORD *)(v4 + 168);
  int v6 = *(_DWORD *)(v4 + 148);
  uint64_t v7 = *(void *)(v4 + 128);
  *(_OWORD *)(v4 + 16) = *a2;
  *(_OWORD *)(v4 + 3sub_1B6DC4968((unsigned int *)this + 2) = a2[1];
  *(_OWORD *)(v4 + 48) = a2[2];
  *(_OWORD *)(v4 + 64) = a2[3];
  *(_OWORD *)(v4 + 80) = a2[4];
  uint64_t v8 = *(void *)(v4 + 140);
  *(_OWORD *)(v4 + 96) = a2[5];
  long long v9 = a2[6];
  long long v10 = a2[7];
  long long v11 = a2[8];
  *(_OWORD *)(v4 + 156) = *(_OWORD *)((char *)a2 + 140);
  *(_OWORD *)(v4 + sub_1B6DC7B98((uint64_t)this + 128) = v10;
  *(_OWORD *)(v4 + 144) = v11;
  *(_OWORD *)(v4 + 11sub_1B6DC4968((unsigned int *)this + 2) = v9;
  *(_OWORD *)(v4 + 176) = a2[10];
  *(_OWORD *)(v4 + 19sub_1B6DC4968((unsigned int *)this + 2) = a2[11];
  *(void *)(v4 + sub_1B6DC7B98((uint64_t)this + 128) = v7;
  *(void *)(v4 + 140) = v8;
  *(_DWORD *)(v4 + 148) = v6;
  *(_DWORD *)(v4 + sub_1B6DAD18C((uint64_t)this + 168) = v5;
  float result = *(unsigned char **)(a1 + 824);
  if (result)
  {
    if ((result[8] & 2) != 0) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)result + 8))(result, a1);
    }
  }
  return result;
}

void sub_1B6DDFF50()
{
}

uint64_t sub_1B6DDFF64(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2300;
  sub_1B6DE13BC(a1 + 8);
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 44) = 0;
  *(unsigned char *)(a1 + 96) = 1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  return a1;
}

void *sub_1B6DDFFCC(void *a1)
{
  *a1 = &unk_1F0FB2300;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_1B6441B40((uint64_t)(a1 + 9));
  sub_1B6441B40((uint64_t)(a1 + 5));
  sub_1B6DE1384(v2);
  return a1;
}

void sub_1B6DE002C(void *a1)
{
  sub_1B6DDFFCC(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DE0064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a3 + 96) + 72))(*(void *)(a3 + 96));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 72))(v4);
  if (result)
  {
    LODWORD(v6) = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = a1 + 8;
      uint64_t v6 = v6;
      uint64_t v8 = (uint64_t **)(result + 8);
      do
      {
        uint64_t v9 = **(v8 - 1);
        if (v9)
        {
          uint64_t v10 = **v8;
          BOOL v11 = (*(unsigned char *)(v9 + 232) & 7) != 0 || v10 == 0;
          if (!v11 && (*(unsigned char *)(v10 + 232) & 7) == 0) {
            uint64_t result = sub_1B6DE0170(v7, *(unsigned int *)(v9 + 236), *(unsigned int *)(v10 + 236));
          }
        }
        v8 += 4;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_1B6DE0170(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = (int *)(v3 + 8 * (int)a2);
  for (int i = *v4; a2 != *v4; int i = *v4)
  {
    uint64_t v6 = 8 * i;
    *uint64_t v4 = *(_DWORD *)(v3 + v6);
    a2 = *(int *)(v3 + v6);
    uint64_t v4 = (int *)(v3 + 8 * a2);
  }
  uint64_t v7 = (int *)(v3 + 8 * (int)a3);
  for (int j = *v7; a3 != *v7; int j = *v7)
  {
    uint64_t v9 = 8 * j;
    int *v7 = *(_DWORD *)(v3 + v9);
    a3 = *(int *)(v3 + v9);
    uint64_t v7 = (int *)(v3 + 8 * a3);
  }
  if (a2 != a3)
  {
    uint64_t v10 = (_DWORD *)(v3 + 8 * (int)a2);
    *uint64_t v10 = a3;
    *(_DWORD *)(v3 + 8 * (int)a3 + 4) += v10[1];
  }
  return result;
}

uint64_t sub_1B6DE01FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if ((int)v4 < 1)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    uint64_t v6 = *(void *)(a2 + 24);
    do
    {
      uint64_t v7 = *(_DWORD **)v6;
      if ((*(unsigned char *)(*(void *)v6 + 232) & 3) == 0) {
        v7[59] = v5++;
      }
      v7[60] = -1;
      v7[70] = 1065353216;
      v6 += 8;
      --v4;
    }
    while (v4);
  }
  sub_1B6DE14A4(a1 + 8, v5);

  return sub_1B6DE0064(a1, v8, a2);
}

uint64_t sub_1B6DE0290(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    uint64_t v5 = *(void *)(a2 + 24);
    do
    {
      uint64_t v6 = *(void *)(v5 + 8 * v3);
      if ((*(unsigned char *)(v6 + 232) & 3) != 0)
      {
        *(void *)(v6 + 236) = 0xFFFFFFFEFFFFFFFFLL;
      }
      else
      {
        uint64_t v7 = *(void *)(result + 24);
        uint64_t v8 = (int *)(v7 + 8 * v4);
        int v9 = *v8;
        LODWORD(v10) = v4;
        if (*v8 != v4)
        {
          do
          {
            uint64_t v11 = 8 * v9;
            *uint64_t v8 = *(_DWORD *)(v7 + v11);
            uint64_t v10 = *(int *)(v7 + v11);
            uint64_t v8 = (int *)(v7 + 8 * v10);
            int v9 = *v8;
          }
          while (v10 != *v8);
        }
        *(_DWORD *)(v7 + 8 * v4 + 4) = v3;
        *(_DWORD *)(v6 + 236) = v10;
        *(_DWORD *)(v6 + 240) = -1;
        ++v4;
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

void sub_1B6DE0328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(int *)(a1 + 44);
  if ((v6 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 48) & 0x80000000) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 56);
      if (v7 && *(unsigned char *)(a1 + 64)) {
        sub_1B6E073C4(v7);
      }
      *(unsigned char *)(a1 + 64) = 1;
      *(void *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
    do
      *(void *)(*(void *)(a1 + 56) + 8 * v6++) = 0;
    while (v6);
  }
  *(_DWORD *)(a1 + 44) = 0;
  sub_1B6DE14FC(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  if ((int)v8 >= 1)
  {
    int v9 = 0;
    do
    {
      int v10 = v9;
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = 8 * v9;
      float32x4_t v13 = (int *)(v11 + v12 + 8);
      int v14 = *(_DWORD *)(v11 + v12);
      if ((int)v8 <= v9 + 1) {
        int v15 = v9 + 1;
      }
      else {
        int v15 = v8;
      }
      int v16 = v15 - 1;
      uint64_t v17 = v9 + 1;
      while (v17 < v8)
      {
        int v18 = *v13;
        v13 += 2;
        ++v9;
        ++v17;
        if (v18 != v14)
        {
          int v16 = v9 - 1;
          goto LABEL_18;
        }
      }
      int v9 = v15;
LABEL_18:
      if (v10 <= v16)
      {
        float32x4_t v19 = (int *)(v11 + v12 + 4);
        int v20 = v16 - v10 + 1;
        char v21 = 1;
        int v22 = v20;
        do
        {
          uint64_t v23 = *v19;
          v19 += 2;
          uint64_t v24 = *(void *)(*(void *)(a3 + 24) + 8 * v23);
          if (*(_DWORD *)(v24 + 236) == v14)
          {
            int v25 = *(_DWORD *)(v24 + 244);
            BOOL v27 = v25 != 4 && v25 != 1;
            v21 &= v27;
          }
          --v22;
        }
        while (v22);
        if (v21)
        {
          uint64_t v28 = v12 + 4;
          do
          {
            uint64_t v29 = *(void *)(*(void *)(a3 + 24) + 8 * *(int *)(*(void *)(a1 + 24) + v28));
            if (*(_DWORD *)(v29 + 236) == v14) {
              sub_1B6DD24CC(v29, 2);
            }
            v28 += 8;
            --v20;
          }
          while (v20);
        }
        else
        {
          uint64_t v30 = v12 + 4;
          do
          {
            int8x16_t v31 = *(_DWORD **)(*(void *)(a3 + 24) + 8 * *(int *)(*(void *)(a1 + 24) + v30));
            if (v31[59] == v14 && v31[61] == 2)
            {
              sub_1B6DD24CC(*(void *)(*(void *)(a3 + 24) + 8 * *(int *)(*(void *)(a1 + 24) + v30)), 3);
              v31[62] = 0;
            }
            v30 += 8;
            --v20;
          }
          while (v20);
        }
      }
    }
    while (v9 < (int)v8);
  }
  int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
  if (v32 >= 1)
  {
    int v33 = v32;
    uint64_t v34 = 0;
    do
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v34);
      uint64_t v36 = v35;
      uint64_t v37 = *(void *)(v35 + 784);
      uint64_t v38 = *(void *)(v35 + 792);
      if (v37 && *(_DWORD *)(v37 + 244) != 2 || v38 && *(_DWORD *)(v38 + 244) != 2)
      {
        int v39 = *(_DWORD *)(v37 + 232);
        if ((v39 & 2) != 0 && (v39 & 4) == 0 && *(_DWORD *)(v37 + 244) != 2) {
          sub_1B6DD24EC(*(void *)(v35 + 792), 0);
        }
        int v40 = *(_DWORD *)(v38 + 232);
        if ((v40 & 2) != 0 && (v40 & 4) == 0 && *(_DWORD *)(v38 + 244) != 2) {
          sub_1B6DD24EC(v37, 0);
        }
        if (*(unsigned char *)(a1 + 104)
          && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v37, v38))
        {
          int v41 = *(_DWORD *)(a1 + 44);
          if (v41 == *(_DWORD *)(a1 + 48))
          {
            int v42 = v41 ? 2 * v41 : 1;
            if (v41 < v42)
            {
              if (v42)
              {
                uint64_t v43 = sub_1B6E073B8(8 * v42, 16);
                int v41 = *(_DWORD *)(a1 + 44);
              }
              else
              {
                uint64_t v43 = 0;
              }
              if (v41 >= 1)
              {
                uint64_t v44 = 0;
                do
                {
                  *(void *)(v43 + v44) = *(void *)(*(void *)(a1 + 56) + v44);
                  v44 += 8;
                }
                while (8 * v41 != v44);
              }
              uint64_t v45 = *(void *)(a1 + 56);
              if (v45)
              {
                if (*(unsigned char *)(a1 + 64))
                {
                  sub_1B6E073C4(v45);
                  int v41 = *(_DWORD *)(a1 + 44);
                }
              }
              *(unsigned char *)(a1 + 64) = 1;
              *(void *)(a1 + 56) = v43;
              *(_DWORD *)(a1 + 48) = v42;
            }
          }
          *(void *)(*(void *)(a1 + 56) + 8 * v41) = v36;
          *(_DWORD *)(a1 + 44) = v41 + 1;
        }
      }
      uint64_t v34 = (v34 + 1);
    }
    while (v34 != v33);
  }
}

void sub_1B6DE06C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B6DE0328(a1, a2, a3);
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v41 = a4;
    uint64_t v8 = *(unsigned int *)(a1 + 12);
    uint64_t v9 = *(int *)(a1 + 44);
    if ((int)v9 > 1) {
      sub_1B6DE0A70(a1 + 40, (uint64_t)&v45, 0, v9 - 1);
    }
    if ((int)v8 >= 1)
    {
      int v10 = 0;
      int v11 = 0;
      int v12 = 1;
      uint64_t v42 = v9;
      do
      {
        int v44 = v11;
        uint64_t v13 = v10;
        uint64_t v14 = *(unsigned int *)(*(void *)(a1 + 24) + 8 * v10);
        if ((int)v8 <= v10 + 1) {
          int v15 = v10 + 1;
        }
        else {
          int v15 = v8;
        }
        int v43 = v15;
        char v16 = 1;
        while (1)
        {
          uint64_t v17 = *(void *)(a1 + 24);
          if (*(_DWORD *)(v17 + 8 * v13) != v14) {
            break;
          }
          uint64_t v18 = *(void *)(*(void *)(a3 + 24) + 8 * *(int *)(v17 + 8 * v13 + 4));
          int v19 = *(_DWORD *)(a1 + 76);
          if (v19 == *(_DWORD *)(a1 + 80))
          {
            int v20 = v19 ? 2 * v19 : 1;
            if (v19 < v20)
            {
              if (v20)
              {
                uint64_t v21 = sub_1B6E073B8(8 * v20, 16);
                int v19 = *(_DWORD *)(a1 + 76);
              }
              else
              {
                uint64_t v21 = 0;
              }
              if (v19 >= 1)
              {
                uint64_t v22 = 0;
                do
                {
                  *(void *)(v21 + v2sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(*(void *)(a1 + 88) + v22);
                  v22 += 8;
                }
                while (8 * v19 != v22);
              }
              uint64_t v23 = *(void *)(a1 + 88);
              if (v23 && *(unsigned char *)(a1 + 96))
              {
                sub_1B6E073C4(v23);
                int v19 = *(_DWORD *)(a1 + 76);
              }
              *(unsigned char *)(a1 + 96) = 1;
              *(void *)(a1 + 88) = v21;
              *(_DWORD *)(a1 + 80) = v20;
            }
          }
          *(void *)(*(void *)(a1 + 88) + 8 * v19) = v18;
          *(_DWORD *)(a1 + 76) = v19 + 1;
          int v24 = *(_DWORD *)(v18 + 244);
          if (v24 != 2) {
            v16 &= v24 == 5;
          }
          if (++v13 >= v8) {
            goto LABEL_31;
          }
        }
        int v43 = v13;
        if (v44 >= (int)v42) {
          goto LABEL_44;
        }
LABEL_31:
        uint64_t v25 = *(void *)(a1 + 56);
        uint64_t v26 = v25 + 8 * v44;
        int v27 = *(_DWORD *)(*(void *)(*(void *)v26 + 784) + 236);
        if (v27 < 0) {
          int v27 = *(_DWORD *)(*(void *)(*(void *)v26 + 792) + 236);
        }
        if (v27 == v14)
        {
          if ((int)v42 <= v44 + 1) {
            int v28 = v44 + 1;
          }
          else {
            int v28 = v42;
          }
          uint64_t v29 = v44 + 1;
          int v12 = v44;
          while (v29 < v42)
          {
            uint64_t v30 = *(void *)(v25 + 8 * v29);
            int v31 = *(_DWORD *)(*(void *)(v30 + 784) + 236);
            if (v31 < 0) {
              int v31 = *(_DWORD *)(*(void *)(v30 + 792) + 236);
            }
            ++v12;
            ++v29;
            if (v14 != v31) {
              goto LABEL_46;
            }
          }
          int v12 = v28;
LABEL_46:
          uint64_t v32 = (v12 - v44);
        }
        else
        {
LABEL_44:
          uint64_t v32 = 0;
          uint64_t v26 = 0;
        }
        int v33 = *(_DWORD *)(a1 + 76);
        if ((v16 & 1) == 0)
        {
          (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v41 + 16))(v41, *(void *)(a1 + 88), *(unsigned int *)(a1 + 76), v26, v32, v14);
          int v33 = *(_DWORD *)(a1 + 76);
        }
        int v10 = v43;
        if (v32) {
          int v11 = v12;
        }
        else {
          int v11 = v44;
        }
        if (v33 < 0)
        {
          if ((*(_DWORD *)(a1 + 80) & 0x80000000) != 0)
          {
            uint64_t v34 = *(void *)(a1 + 88);
            if (v34 && *(unsigned char *)(a1 + 96)) {
              sub_1B6E073C4(v34);
            }
            *(unsigned char *)(a1 + 96) = 1;
            *(void *)(a1 + 88) = 0;
            *(_DWORD *)(a1 + 80) = 0;
          }
          uint64_t v35 = v33;
          do
            *(void *)(*(void *)(a1 + 88) + 8 * v35++) = 0;
          while (v35);
        }
        *(_DWORD *)(a1 + 76) = 0;
      }
      while (v43 < (int)v8);
    }
  }
  else
  {
    uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
    uint64_t v38 = *(void *)(a3 + 24);
    uint64_t v39 = *(unsigned int *)(a3 + 12);
    int v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 16);
    v40(a4, v38, v39, v36, v37, 0xFFFFFFFFLL);
  }
}

uint64_t sub_1B6DE0A70(uint64_t a1, uint64_t a2, int a3, int a4)
{
  do
  {
    int v8 = a3;
    int v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4)) {
      ++v9;
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 16) + 8 * (v9 >> 1));
    int v11 = a4;
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      int v13 = *(_DWORD *)(*(void *)(v10 + 784) + 236);
      uint64_t v14 = (uint64_t *)(v12 + 8 * a3);
      int v15 = a3;
      do
      {
        uint64_t v16 = *v14;
        int v17 = *(_DWORD *)(*(void *)(*v14 + 784) + 236);
        if (v17 < 0) {
          int v17 = *(_DWORD *)(*(void *)(v16 + 792) + 236);
        }
        int v18 = *(_DWORD *)(*(void *)(v10 + 784) + 236);
        if (v13 < 0) {
          int v18 = *(_DWORD *)(*(void *)(v10 + 792) + 236);
        }
        ++v15;
        ++v14;
      }
      while (v17 < v18);
      a3 = v15 - 1;
      uint64_t v19 = 8 * v11;
      int v20 = v11;
      do
      {
        int v21 = *(_DWORD *)(*(void *)(v10 + 784) + 236);
        if (v13 < 0) {
          int v21 = *(_DWORD *)(*(void *)(v10 + 792) + 236);
        }
        uint64_t v22 = *(void *)(v12 + v19);
        uint64_t result = *(unsigned int *)(*(void *)(v22 + 784) + 236);
        if ((result & 0x80000000) != 0) {
          uint64_t result = *(unsigned int *)(*(void *)(v22 + 792) + 236);
        }
        --v20;
        v19 -= 8;
      }
      while (v21 < (int)result);
      int v11 = v20 + 1;
      if (a3 <= v20 + 1)
      {
        *(v14 - 1) = v22;
        *(void *)(*(void *)(a1 + 16) + v19 + 8) = v16;
        a3 = v15;
        int v11 = v20;
      }
    }
    while (a3 <= v11);
    if (v11 > v8) {
      uint64_t result = sub_1B6DE0A70(a1, a2);
    }
  }
  while (a3 < a4);
  return result;
}

uint64_t sub_1B6DE0B98(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v9 = sub_1B6DCFC30((void *)a1, a3);
  *int v9 = &unk_1F0FB2768;
  *((unsigned char *)v9 + 16) = 0;
  id v9[3] = a2;
  if (!a2)
  {
    *(void *)(a1 + 24) = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)(a4 + 16), *(void *)(a5 + 16));
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

double sub_1B6DE0C48(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2768;
  if (*(unsigned char *)(a1 + 16) && *(void *)(a1 + 24)) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }

  return nullsub_1(a1);
}

void sub_1B6DE0CD4(uint64_t a1)
{
  sub_1B6DE0C48(a1);

  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B6DE0D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    a5[1] = result;
    float32x4_t v7 = *(float32x4_t *)(*(void *)(a3 + 24) + 48);
    float32x4_t v8 = vsubq_f32(*(float32x4_t *)(*(void *)(a2 + 24) + 48), v7);
    v8.i32[3] = 0;
    int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
    float32x2_t v10 = vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
    __n128 v13 = (__n128)vextq_s8(v9, v9, 8uLL);
    v13.n128_u64[0] = (unint64_t)vadd_f32(v10, (float32x2_t)v13.n128_u64[0]);
    float v11 = sqrtf(v13.n128_f32[0]);
    float v12 = *(float *)(*(void *)(a3 + 8) + 48) * *(float *)(*(void *)(a3 + 8) + 32);
    v13.n128_f32[0] = (float)(*(float *)(*(void *)(a2 + 8) + 48) * *(float *)(*(void *)(a2 + 8) + 32)) + v12;
    if (v11 <= v13.n128_f32[0])
    {
      v13.n128_f32[0] = v11 - v13.n128_f32[0];
      long long v22 = xmmword_1B6E4F300;
      if (v11 <= 0.00000011921)
      {
        float32x4_t v17 = (float32x4_t)v22;
      }
      else
      {
        float32x4_t v17 = vmulq_n_f32(v8, 1.0 / v11);
        v17.i32[3] = 0;
        long long v22 = (__int128)v17;
      }
      float32x4_t v18 = vmulq_n_f32(v17, v12);
      v18.i32[3] = 0;
      float32x4_t v21 = vaddq_f32(v7, v18);
      (*(void (**)(void *, long long *, float32x4_t *, __n128))(*a5 + 32))(a5, &v22, &v21, v13);
      uint64_t result = (void *)a5[1];
      if (*((_DWORD *)result + 200))
      {
        uint64_t v19 = (float32x4_t *)result[98];
        int v20 = *(float32x4_t **)(a5[2] + 16);
        if (v19 == v20) {
          int v20 = *(float32x4_t **)(a5[3] + 16);
        }
        else {
          uint64_t v19 = *(float32x4_t **)(a5[3] + 16);
        }
        return sub_1B6DF3CF4(result, v19 + 1, v20 + 1);
      }
    }
    else if (*((_DWORD *)result + 200))
    {
      uint64_t v14 = (float32x4_t *)result[98];
      int v15 = *(float32x4_t **)(a5[2] + 16);
      if (v14 == v15)
      {
        uint64_t v16 = v14 + 1;
        int v15 = *(float32x4_t **)(a5[3] + 16);
      }
      else
      {
        uint64_t v16 = (float32x4_t *)(*(void *)(a5[3] + 16) + 16);
      }
      return sub_1B6DF3CF4(result, v16, v15 + 1);
    }
  }
  return result;
}

float sub_1B6DE0EA0()
{
  return 1.0;
}

void sub_1B6DE0EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      int v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          uint64_t v7 = sub_1B6E073B8(8 * v6, 16);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          uint64_t v7 = 0;
        }
        if (v5 >= 1)
        {
          uint64_t v8 = 0;
          do
          {
            *(void *)(v7 + v8) = *(void *)(*(void *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9) {
          BOOL v10 = *(unsigned char *)(a2 + 24) == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10)
        {
          sub_1B6E073C4(v9);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        *(unsigned char *)(a2 + 24) = 1;
        *(void *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        uint64_t v2 = *(void *)(a1 + 24);
      }
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

uint64_t sub_1B6DE0F8C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6)
{
  float v11 = sub_1B6DCFC30((void *)a1, a3);
  *float v11 = &unk_1F0FB2938;
  *((unsigned char *)v11 + 16) = 0;
  unsigned __int16 v11[3] = a2;
  *((unsigned char *)v11 + 3sub_1B6DC4968((unsigned int *)this + 2) = a6;
  if (!a2)
  {
    *(void *)(a1 + 24) = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)(a4 + 16), *(void *)(a5 + 16));
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

double sub_1B6DE104C(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2938;
  if (*(unsigned char *)(a1 + 16) && *(void *)(a1 + 24)) {
    (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }

  return nullsub_1(a1);
}

void sub_1B6DE10D8(uint64_t a1)
{
  sub_1B6DE104C(a1);

  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B6DE1110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    uint64_t v9 = *(unsigned char *)(a1 + 32) ? a3 : a2;
    uint64_t v10 = *(unsigned char *)(a1 + 32) ? a2 : a3;
    uint64_t v11 = *(void *)(v9 + 8);
    uint64_t v12 = *(void *)(v10 + 8);
    a5[1] = result;
    float v13 = sub_1B6DF3BE0((uint64_t)result);
    sub_1B6DCF4CC((uint64_t)v20, v11, v12, v13);
    int v22 = 1566444395;
    uint64_t v14 = *(float32x4_t **)(v9 + 24);
    float32x4_t v15 = v14[1];
    v21[0] = *v14;
    v21[1] = v15;
    float32x4_t v16 = v14[3];
    v21[2] = v14[2];
    v21[3] = v16;
    float32x4_t v17 = *(float32x4_t **)(v10 + 24);
    v21[4] = *v17;
    v21[5] = v17[1];
    v21[6] = v17[2];
    v21[7] = v17[3];
    uint64_t result = (void *)sub_1B6DCF4F4((uint64_t)v20, v21, (uint64_t)a5, *(void *)(a4 + 24), *(unsigned __int8 *)(a1 + 32));
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t result = (void *)a5[1];
      if (*((_DWORD *)result + 200))
      {
        float32x4_t v18 = (float32x4_t *)result[98];
        uint64_t v19 = *(float32x4_t **)(a5[2] + 16);
        if (v18 == v19) {
          uint64_t v19 = *(float32x4_t **)(a5[3] + 16);
        }
        else {
          float32x4_t v18 = *(float32x4_t **)(a5[3] + 16);
        }
        return sub_1B6DF3CF4(result, v18 + 1, v19 + 1);
      }
    }
  }
  return result;
}

float sub_1B6DE1254()
{
  return 1.0;
}

void sub_1B6DE125C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && *(unsigned char *)(a1 + 16))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    if (v5 == *(_DWORD *)(a2 + 8))
    {
      int v6 = v5 ? 2 * v5 : 1;
      if (v5 < v6)
      {
        if (v6)
        {
          uint64_t v7 = sub_1B6E073B8(8 * v6, 16);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          uint64_t v7 = 0;
        }
        if (v5 >= 1)
        {
          uint64_t v8 = 0;
          do
          {
            *(void *)(v7 + v8) = *(void *)(*(void *)(a2 + 16) + v8);
            v8 += 8;
          }
          while (8 * v5 != v8);
        }
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9) {
          BOOL v10 = *(unsigned char *)(a2 + 24) == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10)
        {
          sub_1B6E073C4(v9);
          int v5 = *(_DWORD *)(a2 + 4);
        }
        *(unsigned char *)(a2 + 24) = 1;
        *(void *)(a2 + 16) = v7;
        *(_DWORD *)(a2 + 8) = v6;
        uint64_t v2 = *(void *)(a1 + 24);
      }
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v5) = v2;
    *(_DWORD *)(a2 + 4) = v5 + 1;
  }
}

void sub_1B6DE1340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24)) {
    sub_1B6E073C4(v2);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t sub_1B6DE1384(uint64_t a1)
{
  sub_1B6DE1340(a1);

  return sub_1B6441B40(a1);
}

uint64_t sub_1B6DE13BC(uint64_t result)
{
  *(unsigned char *)(result + 24) = 1;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void sub_1B6DE13D0(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 < a2)
  {
    uint64_t v5 = v4;
    if (*(_DWORD *)(a1 + 8) < a2)
    {
      if (a2)
      {
        uint64_t v6 = sub_1B6E073B8(8 * a2, 16);
        int v4 = *(_DWORD *)(a1 + 4);
      }
      else
      {
        uint64_t v6 = 0;
      }
      if (v4 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 8 * v4;
        do
        {
          *(void *)(v6 + v7) = *(void *)(*(void *)(a1 + 16) + v7);
          v7 += 8;
        }
        while (v8 != v7);
      }
      uint64_t v9 = *(void *)(a1 + 16);
      if (v9 && *(unsigned char *)(a1 + 24)) {
        sub_1B6E073C4(v9);
      }
      *(unsigned char *)(a1 + 24) = 1;
      *(void *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 8) = a2;
    }
    do
      *(void *)(*(void *)(a1 + 16) + 8 * v5++) = 0;
    while (a2 != v5);
  }
  *(_DWORD *)(a1 + 4) = a2;
}

void sub_1B6DE14A4(uint64_t a1, int a2)
{
  sub_1B6DE13D0(a1, a2);
  if (a2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(*(void *)(a1 + 16) + 4);
    do
    {
      *(v5 - 1) = v4;
      *uint64_t v5 = 1;
      ++v4;
      v5 += 2;
    }
    while (a2 != v4);
  }
}

uint64_t sub_1B6DE14FC(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 4);
  if ((int)v1 > 0)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(result + 16);
    do
    {
      uint64_t v4 = (_DWORD *)(v3 + 8 * v2);
      uint64_t v5 = *v4;
      LODWORD(v6) = v2;
      if (v2 != v5)
      {
        uint64_t v7 = (_DWORD *)(v3 + 8 * v2);
        do
        {
          uint64_t v8 = 8 * (int)v5;
          _DWORD *v7 = *(_DWORD *)(v3 + v8);
          uint64_t v6 = *(int *)(v3 + v8);
          uint64_t v7 = (_DWORD *)(v3 + 8 * v6);
          LODWORD(v5) = *v7;
        }
        while (v6 != *v7);
      }
      *uint64_t v4 = v6;
      ++v2;
    }
    while (v2 != v1);
    if ((int)v1 >= 2) {
      return sub_1B6DE158C(result, (uint64_t)&v9, 0, (int)v1 - 1);
    }
  }
  return result;
}

uint64_t sub_1B6DE158C(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = result;
  do
  {
    int v8 = a3;
    int v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4)) {
      ++v9;
    }
    uint64_t v10 = *(void *)(*(void *)(v7 + 16) + 8 * (v9 >> 1));
    int v11 = a4;
    do
    {
      uint64_t v12 = *(void *)(v7 + 16);
      uint64_t v13 = v12 + 8 * a3 - 8;
      int v14 = a3;
      do
      {
        int v15 = *(_DWORD *)(v13 + 8);
        v13 += 8;
        ++v14;
      }
      while (v15 < (int)v10);
      a3 = v14 - 1;
      uint64_t v16 = 8 * v11;
      int v17 = v11;
      do
      {
        int v18 = *(_DWORD *)(v12 + v16);
        v16 -= 8;
        --v17;
      }
      while (v18 > (int)v10);
      int v11 = v17 + 1;
      if (a3 <= v17 + 1)
      {
        uint64_t v19 = *(void *)v13;
        *(void *)uint64_t v13 = *(void *)(v12 + v16 + 8);
        *(void *)(*(void *)(v7 + 16) + v16 + 8) = v19;
        a3 = v14;
        int v11 = v17;
      }
    }
    while (a3 <= v11);
    if (v11 > v8) {
      uint64_t result = sub_1B6DE158C(v7, a2);
    }
  }
  while (a3 < a4);
  return result;
}

float32x4_t sub_1B6DE1670(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  *(double *)&int32x2_t v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v9 = *(float32x4_t *)(a2 + 48);
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  float32x4_t v11 = vaddq_f32(a1[3], v10);
  float32x4_t v12 = vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 16), (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 32), (int8x16_t)xmmword_1B6ECFDF0));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  float32x4_t v15 = vsubq_f32(v9, v12);
  v15.i32[3] = 0;
  *a3 = v15;
  float32x4_t result = vaddq_f32(v9, v12);
  *a4 = result;
  return result;
}

float32_t sub_1B6DE1740(float32x4_t *a1, float32x2_t *a2, float a3)
{
  float32x4_t v13 = a1[3];
  v12.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  __int32 v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  float v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v7 = v12;
  v7.i32[1] = v11;
  v7.f32[2] = v6;
  float32x4_t v8 = vaddq_f32(v13, v7);
  v7.f32[0] = (float)(v8.f32[2] + v8.f32[2]) * (float)(v8.f32[2] + v8.f32[2]);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  float32x2_t v9 = (float32x2_t)vrev64_s32(*(int32x2_t *)v8.f32);
  *a2 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), v9, v9), a3 / 12.0);
  float32_t result = (float)(a3 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8).i32[1]), v8.f32[0], v8.f32[0]);
  a2[1].f32[0] = result;
  a2[1].i32[1] = 0;
  return result;
}

void sub_1B6DE1858(void *a1)
{
  sub_1B6DEA3D0(a1);

  sub_1B6E073C4(v1);
}

float32x4_t sub_1B6DE1880(float32x4_t *a1, float32x4_t *a2)
{
  double v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v15 = LODWORD(v4);
  double v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v13 = LODWORD(v5);
  *(float *)&unsigned int v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  float32x4_t v16 = v7;
  float32x4_t v8 = a1[2];
  float32x4_t v9 = vaddq_f32(a1[3], v7);
  float32x4_t v10 = vrecpeq_f32(v8);
  float32x4_t v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  float32x4_t v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  sub_1B6DE6630(a1, a2);
  float32x4_t result = vsubq_f32(vmulq_f32(v14, a1[2]), v16);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

const char *sub_1B6DE1990()
{
  return "Box2d";
}

float32x4_t sub_1B6DE199C(float32x4_t *a1, float32_t a2)
{
  double v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v14 = LODWORD(v4);
  double v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v12 = LODWORD(v5);
  *(float *)&unsigned int v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  float32x4_t v15 = vaddq_f32(a1[3], v7);
  a1[4].f32[0] = a2;
  unsigned int v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  unsigned int v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&unsigned int v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  float32x4_t result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

void sub_1B6DE1B1C(float32x4_t *a1@<X0>, float32x2_t *a2@<X1>, int8x8_t *a3@<X8>)
{
  float32x4_t v12 = a1[3];
  v11.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  __int32 v10 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  float v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v7 = v11;
  v7.i32[1] = v10;
  v7.f32[2] = v6;
  float32x4_t v9 = vaddq_f32(v12, v7);
  v7.i32[0] = a2[1].i32[0];
  int8x8_t v8 = vbsl_s8((int8x8_t)vcgez_f32(*a2), *(int8x8_t *)v9.f32, (int8x8_t)vneg_f32(*(float32x2_t *)v9.f32));
  v9.i32[0] = v9.i32[2];
  *a3 = v8;
  if (v7.f32[0] < 0.0) {
    v9.f32[0] = -v9.f32[2];
  }
  a3[1].i32[0] = v9.i32[0];
  a3[1].i32[1] = 0;
}

uint64_t sub_1B6DE1C1C@<X0>(uint64_t result@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[1].f32[0] < 0.0) {
    float v3 = -*(float *)(result + 56);
  }
  else {
    float v3 = *(float *)(result + 56);
  }
  *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgez_f32(*a2), *(int8x8_t *)(result + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(result + 48)));
  *(float *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  return result;
}

uint64_t sub_1B6DE1C54(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = a4;
    double v5 = (float *)(a3 + 12);
    float v6 = (float *)(a2 + 8);
    do
    {
      if (*v6 < 0.0) {
        float v7 = -*(float *)(result + 56);
      }
      else {
        float v7 = *(float *)(result + 56);
      }
      *(int8x8_t *)(v5 - 3) = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(v6 - 2)), *(int8x8_t *)(result + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(result + 48)));
      *(v5 - 1) = v7;
      *double v5 = 0.0;
      v5 += 4;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1B6DE1CAC()
{
  return 6;
}

float sub_1B6DE1CB4(uint64_t a1, signed int a2, uint64_t a3)
{
  if (a2 <= 5)
  {
    float result = flt_1B6ECFE90[a2];
    int v4 = dword_1B6ECFEA8[a2];
    int v5 = dword_1B6ECFEC0[a2];
    *(float *)a3 = result;
    *(_DWORD *)(a3 + 4) = v4;
    *(_DWORD *)(a3 + 8) = v5;
    *(_DWORD *)(a3 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  }
  return result;
}

uint64_t sub_1B6DE1CF0()
{
  return 4;
}

uint64_t sub_1B6DE1CF8()
{
  return 12;
}

uint64_t sub_1B6DE1D00(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4)
{
  if (a2 > 0xB)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = dword_1B6ECFE00[a2];
    uint64_t v8 = dword_1B6ECFE30[a2];
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, v7);
  float32x4_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216);

  return v9(a1, v8, a4);
}

__n128 sub_1B6DE1DC0(__n128 *a1, unsigned __int32 a2, _OWORD *a3)
{
  __n128 result = a1[3];
  v4.i32[0] = a2;
  v4.i32[1] = a2 >> 1;
  int32x2_t v5 = (int32x2_t)vand_s8(v4, (int8x8_t)0x100000001);
  *(float32x2_t *)&long long v6 = vmla_f32(vmul_f32(vcvt_f32_s32(v5), vneg_f32((float32x2_t)result.n128_u64[0])), vcvt_f32_s32((int32x2_t)veor_s8((int8x8_t)v5, (int8x8_t)0x100000001)), (float32x2_t)result.n128_u64[0]);
  _S3 = (float)((a2 & 4) == 0);
  __asm { FMLA            S2, S3, V0.S[2] }
  *((void *)&v6 + 1) = _S2;
  *a3 = v6;
  return result;
}

double sub_1B6DE1E1C(uint64_t a1, int8x16_t *a2, _OWORD *a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 256))(a1, &v12, a4);
  v7.i64[0] = v12;
  v7.i64[1] = v13;
  *a2 = v7;
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  int8x16_t v10 = veorq_s8(v7, v8);
  (*(void (**)(long long *__return_ptr, uint64_t, int8x16_t *))(*(void *)a1 + 128))(&v11, a1, &v10);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

BOOL sub_1B6DE1EE4(uint64_t a1, float *a2, float a3)
{
  long long v3 = *(_OWORD *)(a1 + 48);
  if (*a2 <= (float)(*(float *)&v3 + a3)
    && *a2 >= (float)((float)-*(float *)&v3 - a3)
    && (float v4 = a2[1], v4 <= (float)(*((float *)&v3 + 1) + a3))
    && v4 >= (float)((float)-*((float *)&v3 + 1) - a3)
    && (float v5 = a2[2], v5 <= (float)(*((float *)&v3 + 2) + a3)))
  {
    return v5 >= (float)((float)-*((float *)&v3 + 2) - a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B6DE1F5C()
{
  return 6;
}

float sub_1B6DE1F64(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 5)
  {
    int v3 = dword_1B6ECFEA8[a3];
    int v4 = dword_1B6ECFEC0[a3];
    float v5 = *(float *)(a1 + 4 * (qword_1B6ECFE60[a3] & 3) + 48);
    *(float *)a2 = flt_1B6ECFE90[a3];
    *(_DWORD *)(a2 + 4) = v3;
    float result = -v5;
    *(_DWORD *)(a2 + 8) = v4;
    *(float *)(a2 + 1sub_1B6DC4968((unsigned int *)this + 2) = -v5;
  }
  return result;
}

uint64_t sub_1B6DE1FB8(uint64_t a1, float32x4_t *a2)
{
  sub_1B6DEA398(a1);
  *(void *)uint64_t v4 = &unk_1F0FB03B8;
  *(_DWORD *)(v4 + 8) = 0;
  sub_1B6DE20C4(v4, a2->f32, 0.1);
  v10.i64[0] = (*(double (**)(uint64_t))(*(void *)a1 + 96))(a1);
  __int32 v9 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(void *)a1 + 96))(a1));
  float v5 = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  float32x4_t v6 = v10;
  v6.i32[1] = v9;
  v6.f32[2] = v5;
  float32x4_t v7 = vsubq_f32(vmulq_f32(*a2, *(float32x4_t *)(a1 + 32)), v6);
  v7.i32[3] = 0;
  *(float32x4_t *)(a1 + 48) = v7;
  return a1;
}

void sub_1B6DE20C4(uint64_t a1, float *a2, float a3)
{
  float v4 = *a2;
  float v5 = a2[1];
  uint64_t v6 = *a2 >= v5;
  if (*a2 >= v5) {
    float v4 = a2[1];
  }
  if (v4 >= a2[2]) {
    uint64_t v6 = 2;
  }
  float v7 = a2[v6] * a3;
  if (v7 < (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1))
  {
    __int32 v9 = *(void (**)(uint64_t, __n128))(*(void *)a1 + 88);
    v8.n128_f32[0] = v7;
    v9(a1, v8);
  }
}

float32x4_t sub_1B6DE218C(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  *(double *)&int32x2_t v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v9 = *(float32x4_t *)(a2 + 48);
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  float32x4_t v11 = vaddq_f32(a1[3], v10);
  float32x4_t v12 = vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 16), (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 32), (int8x16_t)xmmword_1B6ECFDF0));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  float32x4_t v15 = vsubq_f32(v9, v12);
  v15.i32[3] = 0;
  *a3 = v15;
  float32x4_t result = vaddq_f32(v9, v12);
  *a4 = result;
  return result;
}

float32_t sub_1B6DE225C(float32x4_t *a1, float32x2_t *a2, float a3)
{
  float32x4_t v13 = a1[3];
  v12.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  __int32 v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  float v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v7 = v12;
  v7.i32[1] = v11;
  v7.f32[2] = v6;
  float32x4_t v8 = vaddq_f32(v13, v7);
  v7.f32[0] = (float)(v8.f32[2] + v8.f32[2]) * (float)(v8.f32[2] + v8.f32[2]);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  float32x2_t v9 = (float32x2_t)vrev64_s32(*(int32x2_t *)v8.f32);
  *a2 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), v9, v9), a3 / 12.0);
  float32_t result = (float)(a3 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8).i32[1]), v8.f32[0], v8.f32[0]);
  a2[1].f32[0] = result;
  a2[1].i32[1] = 0;
  return result;
}

void sub_1B6DE2374(void *a1)
{
  sub_1B6DEA3D0(a1);

  sub_1B6E073C4(v1);
}

float32x4_t sub_1B6DE239C(float32x4_t *a1, float32x4_t *a2)
{
  double v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v15 = LODWORD(v4);
  double v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v13 = LODWORD(v5);
  *(float *)&unsigned int v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  float32x4_t v16 = v7;
  float32x4_t v8 = a1[2];
  float32x4_t v9 = vaddq_f32(a1[3], v7);
  float32x4_t v10 = vrecpeq_f32(v8);
  float32x4_t v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  float32x4_t v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  sub_1B6DE6630(a1, a2);
  float32x4_t result = vsubq_f32(vmulq_f32(v14, a1[2]), v16);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

const char *sub_1B6DE24AC()
{
  return "Box";
}

float32x4_t sub_1B6DE24B8(float32x4_t *a1, float32_t a2)
{
  double v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v14 = LODWORD(v4);
  double v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v12 = LODWORD(v5);
  *(float *)&unsigned int v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  float32x4_t v15 = vaddq_f32(a1[3], v7);
  a1[4].f32[0] = a2;
  unsigned int v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  unsigned int v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&unsigned int v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  float32x4_t result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

void sub_1B6DE2638(float32x4_t *a1@<X0>, float32x2_t *a2@<X1>, int8x8_t *a3@<X8>)
{
  float32x4_t v12 = a1[3];
  v11.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  __int32 v10 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  float v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v7 = v11;
  v7.i32[1] = v10;
  v7.f32[2] = v6;
  float32x4_t v9 = vaddq_f32(v12, v7);
  v7.i32[0] = a2[1].i32[0];
  int8x8_t v8 = vbsl_s8((int8x8_t)vcgez_f32(*a2), *(int8x8_t *)v9.f32, (int8x8_t)vneg_f32(*(float32x2_t *)v9.f32));
  v9.i32[0] = v9.i32[2];
  *a3 = v8;
  if (v7.f32[0] < 0.0) {
    v9.f32[0] = -v9.f32[2];
  }
  a3[1].i32[0] = v9.i32[0];
  a3[1].i32[1] = 0;
}

uint64_t sub_1B6DE2738@<X0>(uint64_t result@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[1].f32[0] < 0.0) {
    float v3 = -*(float *)(result + 56);
  }
  else {
    float v3 = *(float *)(result + 56);
  }
  *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgez_f32(*a2), *(int8x8_t *)(result + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(result + 48)));
  *(float *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  return result;
}

uint64_t sub_1B6DE2770(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = a4;
    double v5 = (float *)(a3 + 12);
    float v6 = (float *)(a2 + 8);
    do
    {
      if (*v6 < 0.0) {
        float v7 = -*(float *)(result + 56);
      }
      else {
        float v7 = *(float *)(result + 56);
      }
      *(int8x8_t *)(v5 - 3) = vbsl_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(v6 - 2)), *(int8x8_t *)(result + 48), (int8x8_t)vneg_f32(*(float32x2_t *)(result + 48)));
      *(v5 - 1) = v7;
      *double v5 = 0.0;
      v5 += 4;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1B6DE27C8()
{
  return 6;
}

float sub_1B6DE27D0(uint64_t a1, signed int a2, uint64_t a3)
{
  if (a2 <= 5)
  {
    float result = flt_1B6ECFF68[a2];
    int v4 = dword_1B6ECFF80[a2];
    int v5 = dword_1B6ECFF98[a2];
    *(float *)a3 = result;
    *(_DWORD *)(a3 + 4) = v4;
    *(_DWORD *)(a3 + 8) = v5;
    *(_DWORD *)(a3 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  }
  return result;
}

uint64_t sub_1B6DE280C()
{
  return 8;
}

uint64_t sub_1B6DE2814()
{
  return 12;
}

uint64_t sub_1B6DE281C(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4)
{
  if (a2 > 0xB)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = dword_1B6ECFED8[a2];
    uint64_t v8 = dword_1B6ECFF08[a2];
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 216))(a1, v7);
  float32x4_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216);

  return v9(a1, v8, a4);
}

float32x4_t sub_1B6DE28DC(float32x4_t *a1, unsigned __int32 a2, float32x4_t *a3)
{
  float32x4_t v17 = a1[3];
  v16.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  __int32 v15 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  float v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v7 = v16;
  v7.i32[1] = v15;
  v7.f32[2] = v6;
  float32x4_t result = vaddq_f32(v17, v7);
  v7.i32[0] = a2;
  v7.i32[1] = a2 >> 1;
  *(int8x8_t *)v7.f32 = vand_s8(*(int8x8_t *)v7.f32, (int8x8_t)0x100000001);
  *(float32x2_t *)v7.f32 = vmla_f32(vmul_f32(vcvt_f32_s32(*(int32x2_t *)v7.f32), vneg_f32(*(float32x2_t *)result.f32)), vcvt_f32_s32((int32x2_t)veor_s8(*(int8x8_t *)v7.f32, (int8x8_t)0x100000001)), *(float32x2_t *)result.f32);
  _S3 = (float)((a2 & 4) == 0);
  __asm { FMLA            S2, S3, V0.S[2] }
  v7.i64[1] = _S2;
  *a3 = v7;
  return result;
}

double sub_1B6DE2A00(uint64_t a1, int8x16_t *a2, _OWORD *a3, uint64_t a4)
{
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 256))(a1, &v12, a4);
  v7.i64[0] = v12;
  v7.i64[1] = v13;
  *a2 = v7;
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  int8x16_t v10 = veorq_s8(v7, v8);
  (*(void (**)(long long *__return_ptr, uint64_t, int8x16_t *))(*(void *)a1 + 128))(&v11, a1, &v10);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

BOOL sub_1B6DE2AC8(uint64_t a1, float *a2, float a3)
{
  long long v3 = *(_OWORD *)(a1 + 48);
  if (*a2 <= (float)(*(float *)&v3 + a3)
    && *a2 >= (float)((float)-*(float *)&v3 - a3)
    && (float v4 = a2[1], v4 <= (float)(*((float *)&v3 + 1) + a3))
    && v4 >= (float)((float)-*((float *)&v3 + 1) - a3)
    && (float v5 = a2[2], v5 <= (float)(*((float *)&v3 + 2) + a3)))
  {
    return v5 >= (float)((float)-*((float *)&v3 + 2) - a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B6DE2B40()
{
  return 6;
}

float sub_1B6DE2B48(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 5)
  {
    int v3 = dword_1B6ECFF80[a3];
    int v4 = dword_1B6ECFF98[a3];
    float v5 = *(float *)(a1 + 4 * (qword_1B6ECFF38[a3] & 3) + 48);
    *(float *)a2 = flt_1B6ECFF68[a3];
    *(_DWORD *)(a2 + 4) = v3;
    float result = -v5;
    *(_DWORD *)(a2 + 8) = v4;
    *(float *)(a2 + 1sub_1B6DC4968((unsigned int *)this + 2) = -v5;
  }
  return result;
}

float32x4_t *sub_1B6DE2B9C(float32x4_t *a1, uint64_t a2, char a3, int a4)
{
  int8x16_t v7 = sub_1B6DEE5E0(a1->f32, a2);
  *(void *)int8x16_t v7 = &unk_1F0FB1A80;
  *((void *)v7 + 9) = 0;
  *((void *)v7 + 10) = 0;
  *((unsigned char *)v7 + 88) = a3;
  *((unsigned char *)v7 + 89) = 0;
  *((_DWORD *)v7 + sub_1B6DC4968((unsigned int *)this + 2) = 21;
  if (a4) {
    sub_1B6DE2C10(a1);
  }
  return a1;
}

void sub_1B6DE2C10(float32x4_t *a1)
{
  if (a1[5].i8[9])
  {
    (**(void (***)(uint64_t))a1[4].i64[1])(a1[4].i64[1]);
    sub_1B6E073C4(a1[4].i64[1]);
  }
  uint64_t v2 = sub_1B6E073B8(256, 16);
  sub_1B6DE9B1C(v2);
  a1[4].i64[1] = (uint64_t)v3;
  sub_1B6DE9B7C(v3, a1[4].i64[0], a1[5].u8[8], a1 + 2, a1 + 3, v4);
  a1[5].i8[9] = 1;
}

double sub_1B6DE2C9C(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB1A80;
  if (*(unsigned char *)(a1 + 89))
  {
    (***(void (****)(void))(a1 + 72))(*(void *)(a1 + 72));
    sub_1B6E073C4(*(void *)(a1 + 72));
  }

  return j_nullsub_1(a1);
}

void sub_1B6DE2D28(uint64_t a1)
{
  sub_1B6DE2C9C(a1);

  sub_1B6E073C4(v1);
}

float32x4_t *sub_1B6DE2D50(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  uint64_t v12 = *(void *)(a1 + 64);
  long long v11 = *(float32x4_t **)(a1 + 72);
  v14[0] = &unk_1F0FCCE18;
  v14[1] = v12;
  _OWORD v14[2] = a2;
  return sub_1B6DCE2D4(v11, (uint64_t)v14, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

float32x4_t *sub_1B6DE2DA0(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  uint64_t v14 = *(void *)(a1 + 64);
  unsigned int v13 = *(float32x4_t **)(a1 + 72);
  v16[0] = &unk_1F0FCCE40;
  v16[1] = v14;
  void v16[2] = a2;
  return sub_1B6DCE304(v13, (uint64_t)v16, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1B6DE2DF0(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  v7[0] = &unk_1F0FCCE68;
  v7[1] = v5;
  void v7[2] = a2;
  return sub_1B6DCD51C(v4, (uint64_t)v7, a3, a4);
}

void sub_1B6DE2E40(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v4 = vsubq_f32(*(float32x4_t *)(*(uint64_t (**)(float32x4_t *))(a1->i64[0] + 56))(a1), *a2);
  v4.i32[3] = 0;
  int8x16_t v5 = (int8x16_t)vmulq_f32(v4, v4);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0] > 0.00000011921)
  {
    sub_1B6DEE964(a1->f32, a2);
    sub_1B6DE2C10(a1);
  }
}

const char *sub_1B6DE2EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DE46E8(a1, a2, a3);
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 64) + 112))(*(void *)(a1 + 64), a2 + 16, a3);
  *(_DWORD *)(a2 + 7sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + 24);
  if (!*(void *)(a1 + 72) || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3) & 1) != 0)
  {
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 48))(a3, *(void *)(a1 + 72));
    if (v6)
    {
      *(void *)(a2 + 48) = v6;
      *(void *)(a2 + 56) = 0;
    }
    else
    {
      *(void *)(a2 + 48) = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 72));
      *(void *)(a2 + 56) = 0;
      int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a3 + 32))(a3, v9, 1);
      uint64_t v11 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72), *(void *)(v10 + 8), a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a3 + 40))(a3, v10, v11, 1213612625, *(void *)(a1 + 72));
    }
  }
  if (!*(void *)(a1 + 80) || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3) & 2) != 0)
  {
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 48))(a3, *(void *)(a1 + 80));
    if (v7)
    {
      *(void *)(a2 + 64) = v7;
    }
    else
    {
      *(void *)(a2 + 64) = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 80));
      int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80));
      uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a3 + 32))(a3, v12, 1);
      uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), *(void *)(v13 + 8), a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a3 + 40))(a3, v13, v14, 1346456916, *(void *)(a1 + 80));
    }
  }
  return "btTriangleMeshShapeData";
}

uint64_t sub_1B6DE322C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 72);
  if (result)
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, v5, 1);
    uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72), *(void *)(v6 + 8), a2);
    uint64_t v8 = *(void *)(a1 + 72);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40);
    return v9(a2, v6, v7, 1213612625, v8);
  }
  return result;
}

uint64_t sub_1B6DE3340(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, v5, 1);
    uint64_t v7 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), *(void *)(v6 + 8), a2);
    uint64_t v8 = *(void *)(a1 + 80);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40);
    return v9(a2, v6, v7, 1346456916, v8);
  }
  return result;
}

const char *sub_1B6DE3454()
{
  return "BVHTRIANGLEMESH";
}

uint64_t sub_1B6DE3460(uint64_t result, float a2)
{
  *(float *)(result + 24) = a2;
  return result;
}

float sub_1B6DE3468(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

uint64_t sub_1B6DE3470()
{
  return 80;
}

uint64_t sub_1B6DE3478(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

void sub_1B6DE349C()
{
}

uint64_t sub_1B6DE34B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v23 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  (*(void (**)(void, uint64_t *, char *, uint64_t *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), &v25, (char *)&v24 + 4, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  uint64_t v6 = 0;
  uint64_t v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  uint64_t v8 = *(float32x2_t **)(a1 + 8);
  int v9 = v20;
  int v10 = v24;
  int v11 = v23;
  uint64_t v12 = v25;
  do
  {
    if (v9 == 5)
    {
      int v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    else if (v9 == 3)
    {
      int v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else
    {
      int v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    uint64_t v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&long long v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      float v16 = v14[1].f64[0];
      float32x4_t v17 = (float *)&v8[3];
    }
    else
    {
      float32x2_t v18 = *(float32x2_t *)&v14->f64[0];
      float32x4_t v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&long long v15 = vmul_f32(v18, v8[2]);
      float v16 = v8[3].f32[0];
    }
    *((void *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)&v26[16 * v6-- + 32] = v15;
  }
  while (v6 != -3);
  (*(void (**)(void, unsigned char *, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v26, a2, a3);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2);
}

void sub_1B6DE368C()
{
}

uint64_t sub_1B6DE36A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v23 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  (*(void (**)(void, uint64_t *, char *, uint64_t *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), &v25, (char *)&v24 + 4, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  uint64_t v6 = 0;
  uint64_t v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  uint64_t v8 = *(float32x2_t **)(a1 + 8);
  int v9 = v20;
  int v10 = v24;
  int v11 = v23;
  uint64_t v12 = v25;
  do
  {
    if (v9 == 3)
    {
      int v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else if (v9 == 5)
    {
      int v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    else
    {
      int v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    uint64_t v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&long long v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      float v16 = v14[1].f64[0];
      float32x4_t v17 = (float *)&v8[3];
    }
    else
    {
      float32x2_t v18 = *(float32x2_t *)&v14->f64[0];
      float32x4_t v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&long long v15 = vmul_f32(v18, v8[2]);
      float v16 = v8[3].f32[0];
    }
    *((void *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)&v26[16 * v6-- + 32] = v15;
  }
  while (v6 != -3);
  (*(void (**)(void, unsigned char *, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v26, a2, a3);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2);
}

void sub_1B6DE387C()
{
}

uint64_t sub_1B6DE3890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = 0;
  int v25 = 0;
  int v23 = 0;
  int v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  (*(void (**)(void, uint64_t *, int *, int *, int *, uint64_t *, char *, uint64_t *, int *, _DWORD))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), &v26, &v25, &v24, &v23, &v22, (char *)&v21 + 4, &v21, &v20, a2);
  uint64_t v6 = 0;
  uint64_t v7 = v22 + SHIDWORD(v21) * (uint64_t)(int)a3;
  uint64_t v8 = *(float32x2_t **)(a1 + 8);
  int v9 = v20;
  int v10 = v24;
  int v11 = v23;
  uint64_t v12 = v26;
  do
  {
    if (v9 == 2)
    {
      int v13 = *(_DWORD *)(v7 + 4 * v6 + 8);
    }
    else if (v9 == 3)
    {
      int v13 = *(unsigned __int16 *)(v7 + 2 * v6 + 4);
    }
    else
    {
      int v13 = *(unsigned __int8 *)(v7 + v6 + 2);
    }
    uint64_t v14 = (float64x2_t *)(v12 + v11 * (uint64_t)v13);
    if (v10)
    {
      *(float32x2_t *)&long long v15 = vmul_f32(v8[2], vcvt_f32_f64(*v14));
      float v16 = v14[1].f64[0];
      float32x4_t v17 = (float *)&v8[3];
    }
    else
    {
      float32x2_t v18 = *(float32x2_t *)&v14->f64[0];
      float32x4_t v17 = (float *)&v14->f64[1];
      *(float32x2_t *)&long long v15 = vmul_f32(v18, v8[2]);
      float v16 = v8[3].f32[0];
    }
    *((void *)&v15 + 1) = COERCE_UNSIGNED_INT(*v17 * v16);
    *(_OWORD *)(a1 + 64 + 16 * v6--) = v15;
  }
  while (v6 != -3);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a1 + 32, a2, a3);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2);
}

float sub_1B6DE3A40(uint64_t a1, float a2, float a3)
{
  sub_1B6DE65E4(a1);
  *(void *)uint64_t v5 = &unk_1F0FB0950;
  *(_DWORD *)(v5 + 8) = 10;
  *(_DWORD *)(v5 + 7sub_1B6DC4968((unsigned int *)this + 2) = 1;
  float result = a3 * 0.5;
  *(float *)(v5 + 48) = a2;
  *(float *)(v5 + 5sub_1B6DC4968((unsigned int *)this + 2) = a3 * 0.5;
  *(float *)(v5 + 56) = a2;
  *(_DWORD *)(v5 + 60) = 0;
  return result;
}

void sub_1B6DE3AA8(int *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  float32x4_t v5 = *a2;
  int8x16_t v6 = (int8x16_t)vmulq_f32(v5, v5);
  float v7 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0];
  if (v7 >= 0.0001) {
    float32x4_t v8 = vmulq_n_f32(v5, 1.0 / sqrtf(v7));
  }
  else {
    float32x4_t v8 = (float32x4_t)xmmword_1B6E4F300;
  }
  float32x4_t v19 = v8;
  uint64_t v9 = a1[18];
  float v10 = *(float *)&a1[((int)v9 + 2) % 3 + 12];
  float32x4_t v20 = 0uLL;
  v20.i32[v9] = a1[v9 + 12];
  float32x4_t v11 = vmulq_n_f32(v8, v10);
  v11.i32[3] = 0;
  float32x4_t v18 = v11;
  float32x4_t v12 = vsubq_f32(vaddq_f32(v20, v11), vmulq_n_f32(v8, (*(float (**)(int *))(*(void *)a1 + 96))(a1)));
  v12.i32[3] = 0;
  int8x16_t v13 = (int8x16_t)vmulq_f32(v19, v12);
  float v14 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0];
  float v15 = -1.0e18;
  if (v14 > -1.0e18)
  {
    *a3 = v12;
    float v15 = v14;
  }
  float32x4_t v20 = 0uLL;
  v20.f32[a1[18]] = -*(float *)&a1[a1[18] + 12];
  float32x4_t v16 = vsubq_f32(vaddq_f32(v20, v18), vmulq_n_f32(v19, (*(float (**)(int *))(*(void *)a1 + 96))(a1)));
  v16.i32[3] = 0;
  int8x16_t v17 = (int8x16_t)vmulq_f32(v19, v16);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)).f32[0] > v15)*a3 = v16; {
}
  }

void sub_1B6DE3C60(_DWORD *a1, float32x4_t *a2, float32x4_t *a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v28 = v7;
    uint64_t v29 = v6;
    uint64_t v30 = v4;
    uint64_t v31 = v5;
    float32x4_t v11 = a1 + 12;
    float32x4_t v12 = (const float *)&a1[(a1[18] + 2) % 3 + 12];
    float32x4_t v13 = vld1q_dup_f32(v12);
    uint64_t v14 = a4;
    float32x4_t v26 = v13;
    do
    {
      float32x4_t v27 = 0uLL;
      v27.i32[a1[18]] = v11[a1[18]];
      float32x4_t v15 = vmulq_f32(v13, *a2);
      v15.i32[3] = 0;
      float32x4_t v25 = vaddq_f32(v27, v15);
      float v16 = (*(float (**)(_DWORD *))(*(void *)a1 + 96))(a1);
      float32x4_t v17 = *a2;
      float32x4_t v18 = vsubq_f32(v25, vmulq_n_f32(*a2, v16));
      v18.i32[3] = 0;
      int8x16_t v19 = (int8x16_t)vmulq_f32(*a2, v18);
      float v20 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0];
      float v21 = -1.0e18;
      if (v20 > -1.0e18)
      {
        *a3 = v18;
        float32x4_t v17 = *a2;
        float v21 = v20;
      }
      float32x4_t v27 = 0uLL;
      v27.f32[a1[18]] = -*(float *)&v11[a1[18]];
      float32x4_t v22 = vmulq_f32(v26, v17);
      v22.i32[3] = 0;
      float32x4_t v23 = vsubq_f32(vaddq_f32(v27, v22), vmulq_n_f32(*a2, (*(float (**)(_DWORD *))(*(void *)a1 + 96))(a1)));
      v23.i32[3] = 0;
      int8x16_t v24 = (int8x16_t)vmulq_f32(*a2, v23);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0] > v21)*a3 = v23; {
      ++a3;
      }
      ++a2;
      --v14;
      float32x4_t v13 = v26;
    }
    while (v14);
  }
}

float32_t sub_1B6DE3E2C(uint64_t a1, float32x2_t *a2, float a3)
{
  *((float *)&v10 + *(int *)(a1 + 72)) = *(float *)(a1 + 48 + 4 * *(int *)(a1 + 72))
                                       + *((float *)&v10 + *(int *)(a1 + 72));
  float32_t v3 = (float)((float)(v11 + 0.04) + (float)(v11 + 0.04)) * (float)((float)(v11 + 0.04) + (float)(v11 + 0.04));
  float v4 = a3 * 0.083333;
  float32x2_t v5 = vadd_f32((float32x2_t)__PAIR64__(v10, v12), (float32x2_t)vdup_n_s32(0x3D23D70Au));
  float32x2_t v6 = vadd_f32(v5, v5);
  float32x2_t v7 = vmul_f32(v6, v6);
  float32x2_t v8 = (float32x2_t)vdup_lane_s32((int32x2_t)v7, 0);
  v8.f32[0] = v3;
  *a2 = vmul_n_f32(vadd_f32(v7, v8), v4);
  float32_t result = v4 * (float)(v7.f32[1] + v3);
  a2[1].f32[0] = result;
  return result;
}

void sub_1B6DE3EF8(uint64_t a1)
{
  nullsub_1(a1);

  sub_1B6E073C4(v1);
}

float32x4_t sub_1B6DE3F20(int *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v8 = a1[18];
  unsigned int v9 = a1[((int)v8 + 2) % 3 + 12];
  int32x4_t v10 = vzip1q_s32((int32x4_t)v9, (int32x4_t)v9);
  v10.i32[2] = a1[((int)v8 + 2) % 3 + 12];
  float32x4_t v22 = (float32x4_t)v10;
  v22.f32[v8] = *(float *)&v10.i32[2] + *(float *)&a1[v8 + 12];
  unsigned int v21 = COERCE_UNSIGNED_INT64((*(double (**)(int *))(*(void *)a1 + 96))(a1));
  unsigned int v20 = COERCE_UNSIGNED_INT64((*(double (**)(int *))(*(void *)a1 + 96))(a1));
  *(float *)&unsigned int v11 = (*(float (**)(int *))(*(void *)a1 + 96))(a1);
  v12.i64[0] = __PAIR64__(v20, v21);
  v12.i64[1] = v11;
  float32x4_t v13 = vaddq_f32(v22, v12);
  float32x4_t v14 = *(float32x4_t *)(a2 + 48);
  float32x4_t v15 = vmulq_f32(v13, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v16 = (int8x16_t)vmulq_f32(v13, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 16), (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v17 = (int8x16_t)vmulq_f32(v13, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 32), (int8x16_t)xmmword_1B6ECFDF0));
  v17.i32[3] = 0;
  *(float32x2_t *)v15.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v16.i8));
  *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  float32x4_t v18 = vsubq_f32(v14, v15);
  v18.i32[3] = 0;
  *a3 = v18;
  float32x4_t result = vaddq_f32(v14, v15);
  *a4 = result;
  return result;
}

float32x4_t sub_1B6DE40B4(float32x4_t *a1, float32x4_t *a2)
{
  double v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v15 = LODWORD(v4);
  double v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v13 = LODWORD(v5);
  *(float *)&unsigned int v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  float32x4_t v16 = v7;
  float32x4_t v8 = a1[2];
  float32x4_t v9 = vaddq_f32(a1[3], v7);
  float32x4_t v10 = vrecpeq_f32(v8);
  float32x4_t v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  float32x4_t v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  sub_1B6DE6630(a1, a2);
  float32x4_t result = vsubq_f32(vmulq_f32(v14, a1[2]), v16);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

const char *sub_1B6DE41C4()
{
  return "CapsuleShape";
}

uint64_t sub_1B6DE41D0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + *(int *)(result + 72)) = 1065353216;
  return result;
}

float32x4_t sub_1B6DE41E4(float32x4_t *a1, float32_t a2)
{
  double v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v14 = LODWORD(v4);
  double v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v12 = LODWORD(v5);
  *(float *)&unsigned int v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  float32x4_t v15 = vaddq_f32(a1[3], v7);
  a1[4].f32[0] = a2;
  unsigned int v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  unsigned int v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&unsigned int v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  float32x4_t result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

uint64_t sub_1B6DE4364()
{
  return 64;
}

const char *sub_1B6DE436C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DE46E8(a1, a2, a3);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
  return "btCapsuleShapeData";
}

uint64_t sub_1B6DE43EC()
{
  return 0;
}

__n128 sub_1B6DE43F8(uint64_t a1, __n128 *a2, float *a3)
{
  v13[0] = xmmword_1B6E4F300;
  v13[1] = xmmword_1B6E4F320;
  v13[2] = xmmword_1B6E4F2E0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(void *)a1 + 16))(a1, v13, &v12, &v11);
  float32x4_t v5 = v11;
  float32x4_t v6 = v12;
  float32x4_t v7 = vsubq_f32(v11, v12);
  v7.i32[3] = 0;
  int8x16_t v8 = (int8x16_t)vmulq_f32(v7, v7);
  *a3 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0])* 0.5;
  float32x4_t v9 = vaddq_f32(v5, v6);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  __n128 result = (__n128)vmulq_f32(v9, v6);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

float sub_1B6DE44BC(uint64_t a1, float a2)
{
  return (*(float (**)(uint64_t))(*(void *)a1 + 32))(a1) * a2;
}

float sub_1B6DE4504(uint64_t a1)
{
  float v3 = 0.0;
  (*(void (**)(uint64_t, float32x4_t *, float *))(*(void *)a1 + 24))(a1, &v4, &v3);
  int8x16_t v1 = (int8x16_t)vmulq_f32(v4, v4);
  return v3
       + sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v1.i8, *(float32x2_t *)v1.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)).f32[0]);
}

float32x4_t sub_1B6DE4570(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, float32x2_t *a6, float a7)
{
  (*(void (**)(uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(void *)a1 + 16))(a1, a2, a5, a6);
  float32x4_t v12 = vmulq_n_f32(*a3, a7);
  int8x8_t v13 = (int8x8_t)vcgtz_f32(*(float32x2_t *)v12.f32);
  float32x2_t v24 = vadd_f32(*a5, (float32x2_t)vbsl_s8(v13, (int8x8_t)0x8000000080000000, *(int8x8_t *)v12.f32));
  float32x2_t v25 = vadd_f32(*a6, (float32x2_t)vbsl_s8(v13, *(int8x8_t *)v12.f32, (int8x8_t)0x8000000080000000));
  if (v12.f32[2] <= 0.0) {
    float v14 = -0.0;
  }
  else {
    float v14 = v12.f32[2];
  }
  float v23 = a6[1].f32[0] + v14;
  if (v12.f32[2] <= 0.0) {
    float v15 = v12.f32[2];
  }
  else {
    float v15 = -0.0;
  }
  *(float *)&unsigned int v22 = a5[1].f32[0] + v15;
  int8x16_t v16 = (int8x16_t)vmulq_f32(*a4, *a4);
  float v17 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0]);
  double v18 = (*(double (**)(uint64_t))(*(void *)a1 + 32))(a1);
  *(float *)&double v18 = (float)(v17 * *(float *)&v18) * a7;
  float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v18, 0);
  v19.i32[3] = 0;
  *(float32x2_t *)&long long v20 = v24;
  *((void *)&v20 + 1) = v22;
  *(_OWORD *)a5->f32 = v20;
  *(float32x2_t *)&long long v20 = v25;
  *((void *)&v20 + 1) = LODWORD(v23);
  *(_OWORD *)a6->f32 = v20;
  *(float32x4_t *)a5->f32 = vsubq_f32(*(float32x4_t *)a5->f32, v19);
  float32x4_t result = vaddq_f32(*(float32x4_t *)a6->f32, v19);
  *(float32x4_t *)a6->f32 = result;
  return result;
}

const char *sub_1B6DE46E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v6);
  *(void *)a2 = v7;
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 96))(a3, v6);
  }
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return "btCollisionShapeData";
}

uint64_t sub_1B6DE47B8(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, v4, 1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *(void *)(v5 + 8), a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40);

  return v7(a2, v5, v6, 1346455635, a1);
}

uint64_t sub_1B6DE48B4()
{
  return 16;
}

uint64_t sub_1B6DE48BC(uint64_t a1, int a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0FB0B48;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1B6ECFDA0;
  *(_OWORD *)(a1 + 80) = xmmword_1B6ECFDB0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1;
  *(_OWORD *)(a1 + 108) = xmmword_1B6ECFFC0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 8) = 31;
  if (a2)
  {
    uint64_t v3 = sub_1B6E073B8(96, 16);
    sub_1B6DC9234(v3);
    *(void *)(a1 + 96) = v4;
  }
  return a1;
}

void *sub_1B6DE4960(void *a1)
{
  *a1 = &unk_1F0FB0B48;
  uint64_t v2 = a1[12];
  if (v2)
  {
    sub_1B6DC92D4(v2);
    sub_1B6E073C4(a1[12]);
  }
  sub_1B6441B40((uint64_t)(a1 + 3));
  return a1;
}

void sub_1B6DE49C0(void *a1)
{
  int8x16_t v1 = sub_1B6DE4960(a1);

  sub_1B6E073C4((uint64_t)v1);
}

__n128 sub_1B6DE49E8(uint64_t a1, __n128 *a2, _DWORD *a3, char a4)
{
  ++*(_DWORD *)(a1 + 104);
  __n128 v29 = a2[1];
  __n128 v30 = *a2;
  __n128 v27 = a2[3];
  __n128 v28 = a2[2];
  int v8 = a3[2];
  float v9 = (*(float (**)(_DWORD *))(*(void *)a3 + 96))(a3);
  (*(void (**)(_DWORD *, __n128 *, long long *, long long *))(*(void *)a3 + 16))(a3, a2, &v33, &v32);
  for (uint64_t i = 0; i != 12; i += 4)
  {
    uint64_t v11 = a1 + i;
    float v12 = *(float *)((char *)&v33 + i);
    if (*(float *)(a1 + i + 64) > v12) {
      *(float *)(v11 + 64) = v12;
    }
    float v13 = *(float *)((char *)&v32 + i);
    if (*(float *)(v11 + 80) < v13) {
      *(float *)(v11 + 80) = v13;
    }
  }
  uint64_t v14 = *(void *)(a1 + 96);
  if (v14)
  {
    v31[0] = v33;
    v31[1] = v32;
    uint64_t v15 = sub_1B6DC9520(v14, v31, *(int *)(a1 + 28));
  }
  else
  {
    uint64_t v15 = 0;
  }
  int v16 = *(_DWORD *)(a1 + 28);
  if (v16 == *(_DWORD *)(a1 + 32))
  {
    int v17 = v16 ? 2 * v16 : 1;
    if (v16 < v17)
    {
      if (v17)
      {
        uint64_t v18 = sub_1B6E073B8(96 * v17, 16);
        int v16 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        uint64_t v18 = 0;
      }
      if (v16 >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 96 * v16;
        do
        {
          unsigned int v21 = (_OWORD *)(v18 + v19);
          unsigned int v22 = (_OWORD *)(*(void *)(a1 + 40) + v19);
          *unsigned int v21 = *v22;
          v21[1] = v22[1];
          v21[2] = v22[2];
          v21[3] = v22[3];
          long long v23 = v22[4];
          *(_OWORD *)((char *)v21 + 73) = *(_OWORD *)((char *)v22 + 73);
          v21[4] = v23;
          v19 += 96;
        }
        while (v20 != v19);
      }
      uint64_t v24 = *(void *)(a1 + 40);
      if (v24 && *(unsigned char *)(a1 + 48)) {
        sub_1B6E073C4(v24);
      }
      *(unsigned char *)(a1 + 48) = 1;
      *(void *)(a1 + 40) = v18;
      *(_DWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v17;
      int v16 = *(_DWORD *)(a1 + 28);
    }
  }
  uint64_t v25 = *(void *)(a1 + 40) + 96 * v16;
  *(__n128 *)uint64_t v25 = v30;
  *(__n128 *)(v25 + 16) = v29;
  __n128 result = v27;
  *(__n128 *)(v25 + 3sub_1B6DC4968((unsigned int *)this + 2) = v28;
  *(__n128 *)(v25 + 48) = v27;
  *(void *)(v25 + 64) = a3;
  *(_DWORD *)(v25 + 7sub_1B6DC4968((unsigned int *)this + 2) = v8;
  *(float *)(v25 + 76) = v9;
  *(void *)(v25 + 80) = v15;
  *(unsigned char *)(v25 + 88) = a4;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t sub_1B6DE4C40(uint64_t result, int a2, _OWORD *a3, int a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = (_OWORD *)(*(void *)(result + 40) + 96 * a2);
  *uint64_t v6 = *a3;
  v6[1] = a3[1];
  void v6[2] = a3[2];
  v6[3] = a3[3];
  if (*(void *)(result + 96))
  {
    uint64_t v7 = 3 * a2;
    uint64_t v8 = *(void *)(*(void *)(result + 40) + 96 * a2 + 64);
    (*(void (**)(uint64_t, _OWORD *, long long *, long long *))(*(void *)v8 + 16))(v8, a3, &v11, &v10);
    v9[0] = v11;
    v9[1] = v10;
    __n128 result = sub_1B6DC9940(v5[12], *(void *)(v5[5] + 32 * v7 + 80), v9);
  }
  if (a4) {
    return (*(uint64_t (**)(void *))(*v5 + 136))(v5);
  }
  return result;
}

void sub_1B6DE4D3C(uint64_t a1, int a2)
{
  ++*(_DWORD *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4) {
    sub_1B6DC9ADC(v4, *(void *)(*(void *)(a1 + 40) + 96 * a2 + 80));
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (long long *)(v6 + 96 * a2);
  long long v8 = *v7;
  long long v9 = v7[1];
  long long v10 = v7[2];
  long long v11 = v7[3];
  *(_OWORD *)uint64_t v18 = v7[4];
  *(_OWORD *)&v18[9] = *(long long *)((char *)v7 + 73);
  uint64_t v12 = 96 * *(int *)(a1 + 28) - 96;
  float v13 = (long long *)(v6 + v12);
  long long v14 = v13[1];
  long long *v7 = *v13;
  v7[1] = v14;
  long long v15 = v13[3];
  void v7[2] = v13[2];
  float32x4_t v7[3] = v15;
  long long v16 = *(long long *)((char *)v13 + 73);
  void v7[4] = v13[4];
  *(long long *)((char *)v7 + 73) = v16;
  int v17 = (_OWORD *)(*(void *)(a1 + 40) + v12);
  *int v17 = v8;
  v17[1] = v9;
  void v17[2] = v10;
  v17[3] = v11;
  void v17[4] = *(_OWORD *)v18;
  *(_OWORD *)((char *)v17 + 73) = *(_OWORD *)&v18[9];
  if (*(void *)(a1 + 96)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 96 * a2 + 80) + 40) = a2;
  }
  --*(_DWORD *)(a1 + 28);
}

uint64_t sub_1B6DE4E44(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 104);
  uint64_t v3 = *(unsigned int *)(a1 + 28);
  if ((int)v3 >= 1)
  {
    do
    {
      uint64_t v5 = v3 - 1;
      if (*(void *)(*(void *)(a1 + 40) + 96 * (v3 - 1) + 64) == a2) {
        sub_1B6DE4D3C(a1, v3 - 1);
      }
      uint64_t v3 = v5;
    }
    while ((unint64_t)(v5 + 1) > 1);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 136);

  return v6(a1);
}

uint64_t sub_1B6DE4EF8(uint64_t result)
{
  *(_OWORD *)(result + 64) = xmmword_1B6ECFDA0;
  *(_OWORD *)(result + 80) = xmmword_1B6ECFDB0;
  if (*(int *)(result + 28) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    do
    {
      __n128 result = (*(uint64_t (**)(void, uint64_t, unsigned char *, unsigned char *))(**(void **)(*(void *)(v1 + 40)
                                                                                          + 96 * v2
                                                                                          + 64)
                                                                            + 16))(*(void *)(*(void *)(v1 + 40) + 96 * v2 + 64), *(void *)(v1 + 40) + 96 * v2, v8, v7);
      for (uint64_t i = 0; i != 12; i += 4)
      {
        uint64_t v4 = v1 + i;
        float v5 = *(float *)&v8[i];
        if (*(float *)(v1 + i + 64) > v5) {
          *(float *)(v4 + 64) = v5;
        }
        float v6 = *(float *)&v7[i];
        if (*(float *)(v4 + 80) < v6) {
          *(float *)(v4 + 80) = v6;
        }
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 28));
  }
  return result;
}

float32x4_t sub_1B6DE4FE4(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v30 = a1[4];
  float32x4_t v8 = v30;
  float32x4_t v31 = a1[5];
  v8.i32[0] = a1[1].i32[3];
  int32x4_t v29 = (int32x4_t)v8;
  unsigned int v33 = COERCE_UNSIGNED_INT64((*(double (**)(void))(a1->i64[0] + 96))());
  unsigned int v32 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&unsigned int v9 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v10.i32[0] = 0;
  int8x16_t v11 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v29, v10), 0);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  int8x16_t v13 = (int8x16_t)vmulq_f32(vaddq_f32(v31, v30), v12);
  v13.i32[3] = 0;
  float32x4_t v14 = a2[1];
  float32x4_t v15 = (float32x4_t)vbicq_s8(v13, v11);
  int8x16_t v16 = (int8x16_t)vmulq_f32(vsubq_f32(v31, v30), v12);
  v16.i32[3] = 0;
  float32x4_t v17 = a2[2];
  v18.i64[0] = __PAIR64__(v32, v33);
  v18.i64[1] = v9;
  float32x4_t v19 = vaddq_f32((float32x4_t)vbicq_s8(v16, v11), v18);
  float32x4_t v20 = vmulq_f32(v15, *a2);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v15, v14);
  int8x16_t v22 = (int8x16_t)vmulq_f32(v15, v17);
  v22.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  float32x4_t v23 = vaddq_f32(v20, a2[3]);
  float32x4_t v24 = vmulq_f32(v19, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v25 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v14, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v26 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v17, (int8x16_t)xmmword_1B6ECFDF0));
  v26.i32[3] = 0;
  *(float32x2_t *)v24.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8));
  *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
  float32x4_t v27 = vsubq_f32(v23, v24);
  v27.i32[3] = 0;
  *a3 = v27;
  float32x4_t result = vaddq_f32(v23, v24);
  *a4 = result;
  return result;
}

float32_t sub_1B6DE51A0(uint64_t a1, float32x2_t *a2, float a3)
{
  v11[0] = xmmword_1B6E4F300;
  v11[1] = xmmword_1B6E4F320;
  _DWORD v11[2] = xmmword_1B6E4F2E0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(void *)a1 + 16))(a1, v11, &v10, &v9);
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  float32x4_t v6 = vmulq_f32(vsubq_f32(v9, v10), v5);
  v5.f32[0] = (float)(v6.f32[2] + v6.f32[2]) * (float)(v6.f32[2] + v6.f32[2]);
  *(float32x2_t *)v6.f32 = vadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  float32x2_t v7 = (float32x2_t)vrev64_s32(*(int32x2_t *)v6.f32);
  *a2 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0), v7, v7), a3 / 12.0);
  float32_t result = (float)(a3 / 12.0)
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v6, *(float32x2_t *)&v6).i32[1]), v6.f32[0], v6.f32[0]);
  a2[1].f32[0] = result;
  return result;
}

uint64_t sub_1B6DE5278(uint64_t a1, float32x4_t *a2)
{
  if (*(int *)(a1 + 28) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 40) + v4;
      v14[0] = *(_OWORD *)v6;
      v14[1] = *(_OWORD *)(v6 + 16);
      _OWORD v14[2] = *(_OWORD *)(v6 + 32);
      float32x4_t v15 = *(float32x4_t *)(v6 + 48);
      float32x2_t v7 = (float32x4_t *)(*(uint64_t (**)(void))(**(void **)(v6 + 64) + 56))(*(void *)(v6 + 64));
      float32x4_t v8 = *(float32x4_t *)(a1 + 112);
      float32x4_t v9 = vrecpeq_f32(v8);
      float32x4_t v10 = vmulq_f32(v9, vrecpsq_f32(v8, v9));
      float32x4_t v13 = vmulq_f32(vrecpsq_f32(v8, v10), vmulq_f32(vmulq_f32(*v7, *a2), v10));
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + v4 + 64);
      (*(void (**)(uint64_t, float32x4_t *))(*(void *)v11 + 48))(v11, &v13);
      float32x4_t v15 = vmulq_f32(v15, *a2);
      sub_1B6DE4C40(a1, v5++, v14, 0);
      v4 += 96;
    }
    while (v5 < *(int *)(a1 + 28));
  }
  *(float32x4_t *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = *a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
}

void sub_1B6DE53D8(uint64_t a1)
{
  if (!*(void *)(a1 + 96))
  {
    uint64_t v2 = sub_1B6E073B8(96, 16);
    v3.n128_f64[0] = sub_1B6DC9234(v2);
    *(void *)(a1 + 96) = v4;
    if (*(int *)(a1 + 28) >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(a1 + 40) + v5;
        (*(void (**)(void, uint64_t, long long *, long long *, __n128))(**(void **)(v7 + 64) + 16))(*(void *)(v7 + 64), v7, &v10, &v9, v3);
        v8[0] = v10;
        v8[1] = v9;
        *(void *)(v7 + 80) = sub_1B6DC9520(*(void *)(a1 + 96), v8, v6++);
        v5 += 96;
      }
      while (v6 < *(int *)(a1 + 28));
    }
  }
}

const char *sub_1B6DE54A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DE46E8(a1, a2, a3);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 108);
  int v6 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 24) = v6;
  *(void *)(a2 + 16) = 0;
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 80);
    uint64_t v8 = *(void *)(v7 + 8);
    *(void *)(a2 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v8);
    if (*(int *)(a2 + 24) >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 40);
      do
      {
        uint64_t v12 = v11 + 96 * v10;
        *(_DWORD *)(v8 + 76) = *(_DWORD *)(v12 + 76);
        *(void *)(v8 + 64) = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(v12 + 64));
        if (!(*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 48))(a3, *(void *)(*(void *)(a1 + 40) + 96 * v10 + 64)))
        {
          uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 96 * v10 + 64);
          int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 104))(v13);
          uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a3 + 32))(a3, v14, 1);
          uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 96 * v10 + 64);
          uint64_t v17 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v16 + 112))(v16, *(void *)(v15 + 8), a3);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a3 + 40))(a3, v15, v17, 1346455635, *(void *)(*(void *)(a1 + 40) + 96 * v10 + 64));
        }
        uint64_t v18 = 0;
        uint64_t v11 = *(void *)(a1 + 40);
        *(_DWORD *)(v8 + 7sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(v11 + 96 * v10 + 72);
        uint64_t v19 = v11 + v9;
        uint64_t v20 = v8;
        do
        {
          for (uint64_t i = 0; i != 16; i += 4)
            *(_DWORD *)(v20 + i) = *(_DWORD *)(v19 + i);
          ++v18;
          v19 += 16;
          v20 += 16;
        }
        while (v18 != 3);
        for (uint64_t j = 48; j != 64; j += 4)
          *(_DWORD *)(v8 + j) = *(_DWORD *)(v11 + v9 + j);
        ++v10;
        v8 += 80;
        v9 += 96;
      }
      while (v10 < *(int *)(a2 + 24));
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)a3 + 40))(a3, v7, "btCompoundShapeChildData", 1497453121, *(void *)(v7 + 8));
  }
  return "btCompoundShapeData";
}

uint64_t sub_1B6DE57A4(uint64_t a1)
{
  return a1 + 112;
}

const char *sub_1B6DE57AC()
{
  return "Compound";
}

uint64_t sub_1B6DE57B8(uint64_t result, float a2)
{
  *(float *)(result + 108) = a2;
  return result;
}

float sub_1B6DE57C0(uint64_t a1)
{
  return *(float *)(a1 + 108);
}

uint64_t sub_1B6DE57C8()
{
  return 32;
}

uint64_t sub_1B6DE57D0(uint64_t result)
{
  *(_DWORD *)(result + 8) = 35;
  *(void *)(result + 16) = 0;
  *(void *)float32_t result = &unk_1F0FB0A18;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

float sub_1B6DE5808(uint64_t a1, float a2, float a3)
{
  sub_1B6DE65E4(a1);
  *(void *)uint64_t v5 = &unk_1F0FB04D0;
  *(float *)(v5 + 76) = a2;
  *(float *)(v5 + 80) = a3;
  *(_DWORD *)(v5 + 8) = 11;
  *(void *)(v5 + 84) = 0x100000000;
  *(_DWORD *)(v5 + 9sub_1B6DC4968((unsigned int *)this + 2) = 2;
  float result = a2 / sqrtf((float)(a3 * a3) + (float)(a2 * a2));
  *(float *)(v5 + 7sub_1B6DC4968((unsigned int *)this + 2) = result;
  return result;
}

uint64_t sub_1B6DE5880@<X0>(uint64_t result@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float v3 = *(float *)(result + 80) * 0.5;
  uint64_t v5 = *(int *)(result + 84);
  uint64_t v4 = *(int *)(result + 88);
  int8x16_t v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  if (a2->f32[v4] <= (float)(*(float *)(result + 72)
                            * sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0])))
  {
    float v9 = a2->f32[v5];
    uint64_t v8 = *(int *)(result + 92);
    float v10 = a2->f32[v8];
    float v11 = sqrtf((float)(v10 * v10) + (float)(v9 * v9));
    if (v11 <= 0.00000011921)
    {
      *(_DWORD *)(a3 + 4 * v5) = 0;
      *(float *)(a3 + 4 * v4) = -v3;
      float v7 = 0.0;
    }
    else
    {
      float v12 = *(float *)(result + 76) / v11;
      *(float *)(a3 + 4 * v5) = v9 * v12;
      *(float *)(a3 + 4 * v4) = -v3;
      float v7 = v10 * v12;
    }
  }
  else
  {
    *(_DWORD *)(a3 + 4 * v5) = 0;
    *(float *)(a3 + 4 * v4) = v3;
    float v7 = 0.0;
    uint64_t v8 = *(int *)(result + 92);
  }
  *(float *)(a3 + 4 * v8) = v7;
  return result;
}

double sub_1B6DE5930(uint64_t a1, float32x4_t *a2, _OWORD *a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v12 = v4;
    uint64_t v13 = v5;
    uint64_t v9 = a4;
    do
    {
      sub_1B6DE5880(a1, a2, (uint64_t)&v11);
      double result = *(double *)&v11;
      *a3++ = v11;
      ++a2;
      --v9;
    }
    while (v9);
  }
  return result;
}

float32x4_t sub_1B6DE599C@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  sub_1B6DE5880(a1, a2, (uint64_t)a3);
  result.f32[0] = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    int8x16_t v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    float32x4_t v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    float32x4_t v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B6E50990, *(int8x16_t *)a2);
    int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10);
    float32x4_t v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1));
    v12.i32[3] = 0;
    float32x4_t result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

double sub_1B6DE5A9C(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2 = a1[5].i32[1];
  uint64_t v3 = a1[5].i32[3];
  float v4 = a1[4].f32[3];
  float32_t v5 = a1[5].f32[0] * (float)(a2->f32[a1[5].i32[2]] / a1[2].f32[a1[5].i32[2]]);
  a1[5].f32[0] = v5;
  float32_t v6 = v4 * (float)((float)((float)(a2->f32[v2] / a1[2].f32[v2]) + (float)(a2->f32[v3] / a1[2].f32[v3])) * 0.5);
  a1[4].f32[2] = v6 / sqrtf((float)(v5 * v5) + (float)(v6 * v6));
  a1[4].f32[3] = v6;
  *(void *)&double result = sub_1B6DE6630(a1, a2).u64[0];
  return result;
}

void sub_1B6DE5B04(uint64_t a1)
{
  nullsub_1(a1);

  sub_1B6E073C4(v1);
}

uint64_t sub_1B6DE5B2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

__n128 sub_1B6DE5B50(uint64_t a1, __n128 *a2, float a3)
{
  v17[0] = xmmword_1B6E4F300;
  v17[1] = xmmword_1B6E4F320;
  void v17[2] = xmmword_1B6E4F2E0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(void *)a1 + 16))(a1, v17, &v16, &v15);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  int8x16_t v14 = (int8x16_t)vmulq_f32(vsubq_f32(v15, v16), v6);
  double v7 = (*(double (**)(uint64_t))(*(void *)a1 + 96))(a1);
  float32_t v8 = (float)((float)(*(float *)&v14.i32[1] + *(float *)&v7) + (float)(*(float *)&v14.i32[1] + *(float *)&v7))
     * (float)((float)(*(float *)&v14.i32[1] + *(float *)&v7) + (float)(*(float *)&v14.i32[1] + *(float *)&v7));
  float32x4_t v9 = (float32x4_t)vextq_s8(v14, v14, 8uLL);
  v9.i32[1] = v14.i32[0];
  float32x2_t v10 = vadd_f32(*(float32x2_t *)v9.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v7, 0));
  float32x2_t v11 = vadd_f32(v10, v10);
  float32x2_t v12 = vmul_f32(v11, v11);
  *(int32x2_t *)v9.f32 = vdup_lane_s32((int32x2_t)v12, 0);
  v9.f32[0] = v8;
  *(float32x2_t *)v9.f32 = vadd_f32(v12, *(float32x2_t *)v9.f32);
  v9.f32[2] = v12.f32[1] + v8;
  __n128 result = (__n128)vmulq_n_f32(v9, a3 * 0.083333);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

const char *sub_1B6DE5C74()
{
  return "Cone";
}

double sub_1B6DE5C80@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0078125;
  *a1 = xmmword_1B6E4F320;
  return result;
}

uint64_t sub_1B6DE5C90(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  sub_1B6DEC454(a1);
  *(void *)uint64_t v12 = &unk_1F0FB1200;
  *(unsigned char *)(v12 + 144) = 1;
  *(void *)(v12 + 136) = 0;
  *(void *)(v12 + 124) = 0;
  *(unsigned char *)(v12 + 176) = 1;
  *(void *)(v12 + sub_1B6DAD18C((uint64_t)this + 168) = 0;
  *(void *)(v12 + 156) = 0;
  *(_DWORD *)(v12 + 8) = 4;
  if (a3 < 1)
  {
    *(_DWORD *)(a1 + 124) = a3;
  }
  else
  {
    uint64_t v13 = sub_1B6E073B8(16 * a3, 16);
    uint64_t v14 = v13;
    uint64_t v15 = *(unsigned int *)(a1 + 124);
    if ((int)v15 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 16 * v15;
      do
      {
        *(_OWORD *)(v13 + v16) = *(_OWORD *)(*(void *)(a1 + 136) + v16);
        v16 += 16;
      }
      while (v17 != v16);
    }
    uint64_t v18 = *(void *)(a1 + 136);
    if (v18 && *(unsigned char *)(a1 + 144)) {
      sub_1B6E073C4(v18);
    }
    *(unsigned char *)(a1 + 144) = 1;
    *(void *)(a1 + 136) = v14;
    *(_DWORD *)(a1 + 124) = a3;
    *(_DWORD *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = a3;
    uint64_t v19 = 0;
    uint64_t v20 = (_DWORD *)(a2 + 8);
    do
    {
      *(void *)&long long v21 = *((void *)v20 - 1);
      DWORD2(v21) = *v20;
      uint64_t v20 = (_DWORD *)((char *)v20 + a4);
      *((void *)&v21 + 1) = DWORD2(v21);
      *(_OWORD *)(*(void *)(a1 + 136) + v19) = v21;
      v19 += 16;
    }
    while (16 * a3 != v19);
  }
  int v22 = 3 * a6;
  int v23 = *(_DWORD *)(a1 + 156);
  if (v23 < 3 * a6)
  {
    if (*(_DWORD *)(a1 + 160) >= v22)
    {
LABEL_25:
      bzero((void *)(*(void *)(a1 + 168) + 4 * v23), 4 * (v22 + ~v23) + 4);
      goto LABEL_26;
    }
    if (a6) {
      uint64_t v24 = sub_1B6E073B8(4 * v22, 16);
    }
    else {
      uint64_t v24 = 0;
    }
    LODWORD(v25) = *(_DWORD *)(a1 + 156);
    uint64_t v26 = *(void *)(a1 + 168);
    if ((int)v25 < 1)
    {
      if (!v26)
      {
LABEL_24:
        *(unsigned char *)(a1 + 176) = 1;
        *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = v24;
        *(_DWORD *)(a1 + 160) = v22;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v25 = v25;
      float32x4_t v27 = (_DWORD *)v24;
      __n128 v28 = *(int **)(a1 + 168);
      do
      {
        int v29 = *v28++;
        *v27++ = v29;
        --v25;
      }
      while (v25);
    }
    if (*(unsigned char *)(a1 + 176)) {
      sub_1B6E073C4(v26);
    }
    goto LABEL_24;
  }
LABEL_26:
  *(_DWORD *)(a1 + 156) = v22;
  if (a6 >= 1)
  {
    uint64_t v30 = a6;
    float32x4_t v31 = (_DWORD *)(*(void *)(a1 + 168) + 8);
    unsigned int v32 = (int *)(a5 + 8);
    do
    {
      *(v31 - sub_1B6DC4968((unsigned int *)this + 2) = *(v32 - 2);
      *(v31 - 1) = *(v32 - 1);
      int v33 = *v32;
      v32 += 3;
      *float32x4_t v31 = v33;
      v31 += 3;
      --v30;
    }
    while (v30);
  }
  sub_1B6DEC2F8(a1);
  return a1;
}

uint64_t sub_1B6DE5EC8(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = *a2;
  return sub_1B6DEC2F8(a1);
}

float32x4_t sub_1B6DE5ED4@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t result@<Q0>)
{
  int v16 = -581039253;
  uint64_t v5 = a1[7].u32[3];
  if ((int)v5 < 1)
  {
    a3->i64[0] = 0;
    a3->i64[1] = 0;
  }
  else
  {
    float32x4_t v7 = a1[2];
    float32x4_t v8 = vmulq_f32(*a2, v7);
    float32x4_t v15 = v8;
    uint64_t v9 = a1[8].i64[1];
    if (v5 > 3)
    {
      int v11 = off_1EB9734A0(v9, (uint64_t)&v15, v5, (uint64_t)&v16);
      uint64_t v9 = a1[8].i64[1];
      float32x4_t v7 = a1[2];
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = -1;
      float v12 = -3.4028e38;
      do
      {
        int8x16_t v13 = (int8x16_t)vmulq_f32(v8, *(float32x4_t *)(v9 + 16 * v10));
        float v14 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0];
        if (v14 > v12)
        {
          float v12 = v14;
          int v11 = v10;
        }
        ++v10;
      }
      while (v5 != v10);
    }
    double result = vmulq_f32(*(float32x4_t *)(v9 + 16 * v11), v7);
    *a3 = result;
  }
  return result;
}

uint64_t sub_1B6DE5FAC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    float32x4_t v8 = (float32x4_t *)result;
    uint64_t v9 = a3 + 12;
    uint64_t v10 = a4;
    uint64_t v11 = a4;
    float v12 = (_DWORD *)(a3 + 12);
    do
    {
      *float v12 = -581039253;
      v12 += 4;
      --v11;
    }
    while (v11);
    uint64_t v13 = 0;
    float v25 = 0.0;
    do
    {
      float32x4_t v14 = v8[2];
      float32x4_t v15 = vmulq_f32(*(float32x4_t *)(a2 + 16 * v13), v14);
      float32x4_t v24 = v15;
      uint64_t v16 = v8[7].u32[3];
      if ((int)v16 < 1)
      {
        *(_DWORD *)(v9 + 16 * v13) = -581039253;
      }
      else
      {
        double result = v8[8].i64[1];
        if (v16 > 3)
        {
          int v18 = off_1EB9734A0(result, (uint64_t)&v24, v16, (uint64_t)&v25);
          double result = v8[8].i64[1];
          float32x4_t v14 = v8[2];
          float v19 = v25;
        }
        else
        {
          uint64_t v17 = 0;
          int v18 = -1;
          float v19 = -3.4028e38;
          do
          {
            int8x16_t v20 = (int8x16_t)vmulq_f32(v15, *(float32x4_t *)(result + 16 * v17));
            float v21 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)).f32[0];
            if (v21 > v19)
            {
              float v19 = v21;
              int v18 = v17;
            }
            ++v17;
          }
          while (v16 != v17);
          float v25 = v19;
        }
        float32x4_t v22 = vmulq_f32(*(float32x4_t *)(result + 16 * v18), v14);
        int v23 = (float32x4_t *)(a3 + 16 * v13);
        *int v23 = v22;
        v23->f32[3] = v19;
      }
      ++v13;
    }
    while (v13 != v10);
  }
  return result;
}

float32x4_t sub_1B6DE60F8@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
  result.f32[0] = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    int8x16_t v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    float32x4_t v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    float32x4_t v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B6E50990, *(int8x16_t *)a2);
    int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10);
    float32x4_t v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1));
    v12.i32[3] = 0;
    float32x4_t result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

uint64_t sub_1B6DE6218(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_1B6DE6220(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

float32x4_t sub_1B6DE6228(float32x4_t *a1, int a2, float32x4_t *a3, float32x4_t *a4)
{
  __int32 v4 = a1[7].i32[3];
  *a3 = vmulq_f32(*(float32x4_t *)(a1[8].i64[1] + 16 * (a2 % v4)), a1[2]);
  float32x4_t result = vmulq_f32(*(float32x4_t *)(a1[8].i64[1] + 16 * ((a2 + 1) % v4)), a1[2]);
  *a4 = result;
  return result;
}

float32x4_t sub_1B6DE626C(float32x4_t *a1, int a2, float32x4_t *a3)
{
  float32x4_t result = vmulq_f32(*(float32x4_t *)(a1[8].i64[1] + 16 * a2), a1[2]);
  *a3 = result;
  return result;
}

uint64_t sub_1B6DE6284()
{
  return 0;
}

uint64_t sub_1B6DE6290()
{
  return 0;
}

const char *sub_1B6DE6298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DE46E8(a1, a2, a3);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  uint64_t v8 = *(unsigned int *)(a1 + 124);
  *(_DWORD *)(a2 + 7sub_1B6DC4968((unsigned int *)this + 2) = v8;
  if (v8)
  {
    *(void *)(a2 + 56) = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 136));
    *(void *)(a2 + 64) = 0;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 16, v8);
    uint64_t v10 = *(void *)(a1 + 136);
    if ((int)v8 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v13 = *(void *)(a1 + 136);
      do
      {
        for (uint64_t k = 0; k != 16; k += 4)
          *(_DWORD *)(v12 + k) = *(_DWORD *)(v13 + k);
        ++v11;
        v12 += 16;
        v13 += 16;
      }
      while (v11 != v8);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v9, "btVector3FloatData", 1497453121, v10);
  }
  else
  {
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  return "btConvexHullShapeData";
}

float32x4_t sub_1B6DE6410(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float *a4, float *a5, float32x4_t *a6, float32x4_t *a7)
{
  *a4 = 3.4028e38;
  *a5 = -3.4028e38;
  uint64_t v7 = a1[7].u32[3];
  if ((int)v7 < 1)
  {
    result.i32[0] = -8388609;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 16 * v7;
    result.i32[1] = 0;
    do
    {
      float32x4_t v11 = vmulq_f32(*(float32x4_t *)(a1[8].i64[1] + v8), a1[2]);
      float32x4_t v12 = vmulq_f32(*a2, v11);
      int8x16_t v13 = (int8x16_t)vmulq_f32(v11, a2[1]);
      int8x16_t v14 = (int8x16_t)vmulq_f32(v11, a2[2]);
      v14.i32[3] = 0;
      *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
      *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
      float32x4_t v15 = vaddq_f32(v12, a2[3]);
      int8x16_t v16 = (int8x16_t)vmulq_f32(v15, *a3);
      float v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0];
      if (v17 < *a4)
      {
        *a4 = v17;
        *a6 = v15;
      }
      if (v17 > *a5)
      {
        *a5 = v17;
        *a7 = v15;
      }
      v8 += 16;
    }
    while (v9 != v8);
    result.f32[0] = *a5;
  }
  float v18 = *a4;
  if (*a4 > result.f32[0])
  {
    *a4 = result.f32[0];
    *a5 = v18;
    float32x4_t result = *a6;
    *a6 = *a7;
    *a7 = result;
  }
  return result;
}

double sub_1B6DE6504(void *a1)
{
  *a1 = &unk_1F0FB1200;
  uint64_t v2 = (uint64_t)(a1 + 15);
  sub_1B6441B40((uint64_t)(a1 + 19));
  sub_1B6441B40(v2);

  return sub_1B6DEA3D0(a1);
}

void sub_1B6DE6568(void *a1)
{
  *a1 = &unk_1F0FB1200;
  uint64_t v2 = (uint64_t)(a1 + 15);
  sub_1B6441B40((uint64_t)(a1 + 19));
  sub_1B6441B40(v2);
  sub_1B6DEA3D0(a1);

  sub_1B6E073C4(v3);
}

const char *sub_1B6DE65D0()
{
  return "Convex";
}

uint64_t sub_1B6DE65DC()
{
  return 80;
}

double sub_1B6DE65E4(uint64_t a1)
{
  uint64_t v1 = sub_1B6DE7BA8(a1);
  *(void *)uint64_t v1 = &unk_1F0FB1968;
  double result = 0.00781250185;
  *(_OWORD *)(v1 + 3sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E4F540;
  *(_DWORD *)(v1 + 64) = 1025758986;
  return result;
}

float32x4_t sub_1B6DE6630(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t result = vabsq_f32(*a2);
  a1[2] = result;
  return result;
}

void *sub_1B6DE6640(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  float v8 = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  for (uint64_t i = 0; i != 3; ++i)
  {
    float32x4_t v27 = 0uLL;
    v27.i32[i] = 1065353216;
    float32x4_t v10 = *a2;
    float32x4_t v11 = a2[1];
    v10.i32[3] = 0;
    v11.i32[3] = 0;
    float32x4_t v12 = a2[2];
    v12.i32[3] = 0;
    float32x4_t v25 = vaddq_f32(vaddq_f32(vmulq_n_f32(v10, v27.f32[0]), vmulq_lane_f32(v11, *(float32x2_t *)v27.f32, 1)), vmulq_laneq_f32(v12, v27, 2));
    (*(void (**)(float32x4_t *__return_ptr, uint64_t, float32x4_t *))(*(void *)a1 + 128))(&v26, a1, &v25);
    float32x4_t v13 = vmulq_f32(*a2, v26);
    int8x16_t v14 = (int8x16_t)vmulq_f32(v26, a2[1]);
    int8x16_t v15 = (int8x16_t)vmulq_f32(v26, a2[2]);
    v15.i32[3] = 0;
    *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
    *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
    float32x4_t v25 = vaddq_f32(v13, a2[3]);
    *(float *)(a4 + i * 4) = v8 + v25.f32[i];
    v27.i32[i] = -1082130432;
    float32x4_t v16 = *a2;
    float32x4_t v17 = a2[1];
    v16.i32[3] = 0;
    v17.i32[3] = 0;
    float32x4_t v18 = a2[2];
    v18.i32[3] = 0;
    float32x4_t v23 = vaddq_f32(vaddq_f32(vmulq_n_f32(v16, v27.f32[0]), vmulq_lane_f32(v17, *(float32x2_t *)v27.f32, 1)), vmulq_laneq_f32(v18, v27, 2));
    float32x4_t result = (*(void *(**)(float32x4_t *__return_ptr, uint64_t, float32x4_t *))(*(void *)a1 + 128))(&v24, a1, &v23);
    float32x4_t v20 = vmulq_f32(*a2, v24);
    int8x16_t v21 = (int8x16_t)vmulq_f32(v24, a2[1]);
    int8x16_t v22 = (int8x16_t)vmulq_f32(v24, a2[2]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    float32x4_t v25 = vaddq_f32(v20, a2[3]);
    *(float *)(a3 + i * 4) = v25.f32[i] - v8;
  }
  return result;
}

float32x4_t sub_1B6DE685C@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
  result.f32[0] = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    int8x16_t v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    float32x4_t v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    float32x4_t v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B6E50990, *(int8x16_t *)a2);
    int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10);
    float32x4_t v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1));
    v12.i32[3] = 0;
    float32x4_t result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

double sub_1B6DE697C(uint64_t a1)
{
  uint64_t v1 = sub_1B6DE7BA8(a1);
  double result = 0.00781250185;
  *(_OWORD *)(v1 + 3sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E4F540;
  *(_DWORD *)(v1 + 64) = 1025758986;
  *(void *)uint64_t v1 = &unk_1F0FB26A0;
  *(_OWORD *)(v1 + 80) = xmmword_1B6E4F540;
  *(_OWORD *)(v1 + 96) = xmmword_1B6E50990;
  *(unsigned char *)(v1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0;
  return result;
}

float32x4_t sub_1B6DE69D8(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  *(double *)&int32x2_t v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v10 = a1[5];
  float32x4_t v9 = a1[6];
  float32x4_t v11 = a2[1];
  float32x4_t v12 = a2[2];
  float32x4_t v13 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)xmmword_1B6ECFDF0);
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  float32x4_t v15 = vmulq_f32(vaddq_f32(v9, v10), v14);
  int8x16_t v16 = (int8x16_t)vmulq_f32(v12, v15);
  v15.i32[3] = 0;
  float32x4_t v17 = vmulq_f32(vsubq_f32(v9, v10), v14);
  v17.i32[3] = 0;
  float32x4_t v18 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v18.i32[3] = 0;
  float32x4_t v19 = vaddq_f32(v18, v17);
  float32x4_t v20 = vmulq_f32(*a2, v15);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v11, v15);
  v16.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  float32x4_t v22 = vaddq_f32(a2[3], v20);
  float32x4_t v23 = vmulq_f32(v19, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v24 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v11, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v25 = (int8x16_t)vmulq_f32(v19, v13);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
  float32x4_t v26 = vsubq_f32(v22, v23);
  v26.i32[3] = 0;
  *a3 = v26;
  float32x4_t result = vaddq_f32(v22, v23);
  *a4 = result;
  return result;
}

uint64_t sub_1B6DE6B00(uint64_t a1, float32x4_t *a2)
{
  *(float32x4_t *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = vabsq_f32(*a2);
  return sub_1B6DE6B10(a1);
}

uint64_t sub_1B6DE6B10(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1E9E480E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_1E9E480E0))
  {
    dword_1E9E48080 = 1065353216;
    unk_1E9E4808C = 0;
    unk_1E9E48084 = 0;
    dword_1E9E48094 = 1065353216;
    qword_1E9E48098 = 0;
    unk_1E9E480A0 = 0;
    qword_1E9E480A8 = 1065353216;
    dword_1E9E480B0 = -1082130432;
    unk_1E9E480BC = 0;
    unk_1E9E480B4 = 0;
    dword_1E9E480C4 = -1082130432;
    qword_1E9E480C8 = 0;
    unk_1E9E480D0 = 0;
    qword_1E9E480D8 = 3212836864;
    __cxa_guard_release(qword_1E9E480E0);
  }
  memset(v7, 0, sizeof(v7));
  uint64_t v2 = (float *)v7;
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t))(*(void *)a1 + 152))(a1, &dword_1E9E48080, v7, 6);
  float v4 = *(float *)(a1 + 64);
  uint64_t v5 = (float *)(a1 + 96);
  uint64_t v6 = -48;
  do
  {
    *uint64_t v5 = *v2 + v4;
    *(v5 - 4) = v2[12] - v4;
    ++v5;
    v2 += 5;
    v6 += 16;
  }
  while (v6);
  return result;
}

double sub_1B6DE6C6C(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB1440;
  *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + 24) = 0;
  double result = 0.0;
  *(void *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 44) = 0;
  *(unsigned char *)(a1 + 96) = 1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 76) = 0;
  return result;
}

void *sub_1B6DE6CB8(void *a1)
{
  *a1 = &unk_1F0FB1440;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_1B6441B40((uint64_t)(a1 + 9));
  sub_1B6DE7898((uint64_t)(a1 + 5));
  sub_1B6441B40(v2);
  return a1;
}

void sub_1B6DE6D18(void *a1)
{
  uint64_t v1 = sub_1B6DE6CB8(a1);

  sub_1B6E073C4((uint64_t)v1);
}

BOOL sub_1B6DE6D40(float32x4_t *a1, float32x4_t a2)
{
  BOOL v2 = 0;
  unsigned int v3 = 0;
  while (1)
  {
    switch(v3)
    {
      case 0u:
        float v4 = a1[8].f32[0];
        float v5 = a1[8].f32[1];
        goto LABEL_11;
      case 1u:
        float v5 = a1[8].f32[1];
        float v6 = -a1[8].f32[2];
        float v4 = a1[8].f32[0];
        goto LABEL_15;
      case 2u:
        float v4 = a1[8].f32[0];
        float v7 = a1[8].f32[1];
        goto LABEL_10;
      case 3u:
        float v4 = a1[8].f32[0];
        float v8 = a1[8].f32[1];
        goto LABEL_13;
      case 4u:
        float v5 = a1[8].f32[1];
        float v4 = -a1[8].f32[0];
        goto LABEL_11;
      case 5u:
        float v5 = a1[8].f32[1];
        float v4 = -a1[8].f32[0];
        goto LABEL_14;
      case 6u:
        float v7 = a1[8].f32[1];
        float v4 = -a1[8].f32[0];
LABEL_10:
        float v5 = -v7;
LABEL_11:
        float v6 = a1[8].f32[2];
        goto LABEL_15;
      case 7u:
        float v8 = a1[8].f32[1];
        float v4 = -a1[8].f32[0];
LABEL_13:
        float v5 = -v8;
LABEL_14:
        float v6 = -a1[8].f32[2];
LABEL_15:
        v9.i64[0] = __PAIR64__(LODWORD(v5), LODWORD(v4));
        v9.i64[1] = LODWORD(v6);
        a2 = vaddq_f32(a1[7], v9);
        break;
      default:
        break;
    }
    if (a1[2].i32[3] >= 1) {
      break;
    }
LABEL_20:
    BOOL v2 = v3++ > 6;
    if (v3 == 8) {
      return 1;
    }
  }
  float32x4_t v10 = (float *)(a1[3].i64[1] + 44);
  uint64_t v11 = a1[2].u32[3];
  while (1)
  {
    v12.i64[0] = *(void *)(v10 - 3);
    v12.i64[1] = *((unsigned int *)v10 - 1);
    int8x16_t v13 = (int8x16_t)vmulq_f32(a2, v12);
    if ((float)(*v10
               + vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0]) > 0.0)return v2;
    v10 += 12;
    if (!--v11) {
      goto LABEL_20;
    }
  }
}

void sub_1B6DE6E8C(float32x4_t *a1)
{
  char v95 = 1;
  uint64_t v94 = 0;
  uint64_t v93 = 0;
  char v98 = 1;
  uint64_t v97 = 0;
  uint64_t v96 = 0;
  char v101 = 1;
  uint64_t v100 = 0;
  uint64_t v99 = 0;
  char v104 = 1;
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  a1[7].i64[0] = 0;
  a1[7].i64[1] = 0;
  BOOL v2 = a1 + 7;
  LODWORD(v3) = a1[2].i32[3];
  if ((int)v3 < 1) {
    goto LABEL_54;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(unsigned int *)(a1[3].i64[1] + 48 * v4 + 4);
    if ((int)v5 >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = v6 + 1;
        uint64_t v8 = (v6 + 1);
        uint64_t v9 = *(void *)(a1[3].i64[1] + 48 * v4 + 16);
        int v10 = *(_DWORD *)(v9 + 4 * v6);
        if (v7 == v5) {
          uint64_t v8 = 0;
        }
        int v11 = *(_DWORD *)(v9 + 4 * v8);
        __int16 v90 = v10;
        __int16 v91 = v11;
        if ((__int16)v11 > (__int16)v10)
        {
          __int16 v90 = v11;
          __int16 v91 = v10;
        }
        int v12 = sub_1B6DE7918((uint64_t)v92, &v90);
        if (v12 == -1) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v100 + 4 * v12;
        }
        float32x4_t v14 = vsubq_f32(*(float32x4_t *)(a1[1].i64[1] + 16 * v91), *(float32x4_t *)(a1[1].i64[1] + 16 * v90));
        v14.i32[3] = 0;
        int8x16_t v15 = (int8x16_t)vmulq_f32(v14, v14);
        float32x4_t v16 = vmulq_n_f32(v14, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0]));
        int v17 = a1[4].i32[3];
        if (v17 < 1)
        {
LABEL_21:
          if (v17 == a1[5].i32[0])
          {
            int v22 = v17 ? 2 * v17 : 1;
            if (v17 < v22)
            {
              float32x4_t v88 = v16;
              if (v22)
              {
                uint64_t v23 = sub_1B6E073B8(16 * v22, 16);
                float32x4_t v16 = v88;
                uint64_t v24 = v23;
                int v17 = a1[4].i32[3];
              }
              else
              {
                uint64_t v24 = 0;
              }
              if (v17 >= 1)
              {
                uint64_t v25 = 0;
                uint64_t v26 = 16 * v17;
                do
                {
                  *(_OWORD *)(v24 + v25) = *(_OWORD *)(a1[5].i64[1] + v25);
                  v25 += 16;
                }
                while (v26 != v25);
              }
              uint64_t v27 = a1[5].i64[1];
              if (v27 && a1[6].i8[0])
              {
                sub_1B6E073C4(v27);
                float32x4_t v16 = v88;
              }
              a1[6].i8[0] = 1;
              a1[5].i64[1] = v24;
              a1[5].i32[0] = v22;
              int v17 = a1[4].i32[3];
            }
          }
          *(float32x4_t *)(a1[5].i64[1] + 16 * v17) = v16;
          ++a1[4].i32[3];
        }
        else
        {
          float32x4_t v18 = (float32x4_t *)a1[5].i64[1];
          uint64_t v19 = a1[4].u32[3];
          while (1)
          {
            float32x4_t v20 = vsubq_f32(*v18, v16);
            if (fabsf(v20.f32[0]) <= 0.000001 && fabsf(v20.f32[1]) <= 0.000001 && fabsf(v20.f32[2]) <= 0.000001) {
              break;
            }
            float32x4_t v21 = vaddq_f32(v16, *v18);
            if (fabsf(v21.f32[0]) <= 0.000001 && fabsf(v21.f32[1]) <= 0.000001 && fabsf(v21.f32[2]) <= 0.000001) {
              break;
            }
            ++v18;
            if (!--v19) {
              goto LABEL_21;
            }
          }
        }
        if (v13)
        {
          *(_WORD *)(v13 + sub_1B6DC4968((unsigned int *)this + 2) = v4;
        }
        else
        {
          HIWORD(v89) = -1;
          LOWORD(v89) = v4;
          sub_1B6DE758C((uint64_t)v92, &v90, &v89);
        }
        uint64_t v6 = v7;
      }
      while (v7 != v5);
      LODWORD(v3) = a1[2].i32[3];
    }
    ++v4;
  }
  while (v4 < (int)v3);
  if ((int)v3 < 1)
  {
LABEL_54:
    float32x4_t v51 = vmulq_f32(a1[7], (float32x4_t)vdupq_n_s32(0x7F800000u));
    a1[7] = v51;
    a1[9].i32[0] = 2139095039;
    float v53 = 3.4028e38;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = a1[3].i64[1];
    uint64_t v30 = a1[1].i64[1];
    uint64_t v3 = v3;
    float v31 = 0.0;
    float32x4_t v32 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    do
    {
      uint64_t v33 = v29 + 48 * v28;
      int v34 = *(_DWORD *)(v33 + 4);
      if (v34 >= 3)
      {
        uint64_t v35 = **(int **)(v33 + 16);
        uint64_t v36 = (void *)(v29 + 48 * v28 + 16);
        float32x4_t v37 = *v2;
        uint64_t v38 = 1;
        do
        {
          float32x4_t v39 = *(float32x4_t *)(v30 + 16 * v35);
          float32x4_t v40 = *(float32x4_t *)(v30 + 16 * *(int *)(*v36 + 4 * v38));
          float32x4_t v41 = vsubq_f32(v39, v40);
          int8x8_t v42 = (int8x8_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
          v41.i32[3] = 0;
          float32x4_t v43 = *(float32x4_t *)(v30 + 16 * *(int *)(*v36 + 4 * (((int)v38 + 1) % v34)));
          float32x4_t v44 = vsubq_f32(v39, v43);
          int8x8_t v45 = (int8x8_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
          v44.i32[3] = 0;
          *(int8x8_t *)v46.f32 = vext_s8(*(int8x8_t *)v41.f32, v42, 4uLL);
          v46.i64[1] = v41.i64[0];
          *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v44.f32, v45, 4uLL);
          v47.i64[1] = v44.i64[0];
          int8x16_t v48 = (int8x16_t)vsubq_f32(vmulq_f32(v47, v41), vmulq_f32(v46, v44));
          v46.i64[0] = vextq_s8(v48, v48, 4uLL).u64[0];
          v46.i64[1] = v48.u32[0];
          int8x16_t v49 = (int8x16_t)vmulq_f32(v46, v46);
          *(float *)v49.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)).f32[0])* 0.5;
          float32x4_t v50 = vmulq_n_f32(vmulq_f32(vaddq_f32(vaddq_f32(v39, v40), v43), v32), *(float *)v49.i32);
          v50.i32[3] = 0;
          float32x4_t v37 = vaddq_f32(v37, v50);
          *BOOL v2 = v37;
          float v31 = v31 + *(float *)v49.i32;
          ++v38;
        }
        while (v34 - 1 != v38);
      }
      ++v28;
    }
    while (v28 != v3);
    float32x4_t v51 = vmulq_n_f32(a1[7], 1.0 / v31);
    a1[7] = v51;
    a1[9].i32[0] = 2139095039;
    uint64_t v52 = (float *)(a1[3].i64[1] + 44);
    float v53 = 3.4028e38;
    do
    {
      v54.i64[0] = *(void *)(v52 - 3);
      v54.i64[1] = *((unsigned int *)v52 - 1);
      int8x16_t v55 = (int8x16_t)vmulq_f32(v51, v54);
      float v56 = fabsf(*v52+ vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0]);
      if (v56 < v53)
      {
        a1[9].f32[0] = v56;
        float v53 = v56;
      }
      v52 += 12;
      --v3;
    }
    while (v3);
  }
  uint64_t v57 = a1->u32[3];
  if ((int)v57 < 1)
  {
    float32x2_t v58 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
    float32x2_t v59 = (float32x2_t)0x7F7FFFFFFF7FFFFFLL;
    float v62 = -3.4028e38;
    float v61 = 3.4028e38;
  }
  else
  {
    float32x2_t v58 = (float32x2_t)0xFF7FFFFF7F7FFFFFLL;
    float32x2_t v59 = (float32x2_t)0x7F7FFFFFFF7FFFFFLL;
    int8x16_t v60 = (float *)(a1[1].i64[1] + 8);
    float v61 = 3.4028e38;
    float v62 = -3.4028e38;
    do
    {
      int8x8_t v63 = *(int8x8_t *)(v60 - 2);
      float32x2_t v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v59.u32[1], v63.u32[0]), (float32x2_t)__PAIR64__(v63.u32[1], v59.u32[0])), v63, (int8x8_t)v59);
      float32x2_t v58 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v63.u32[1], v58.u32[0]), (float32x2_t)__PAIR64__(v58.u32[1], v63.u32[0])), v63, (int8x8_t)v58);
      float v64 = *v60;
      v60 += 4;
      float v65 = v64;
      if (v64 < v61) {
        float v61 = v65;
      }
      if (v65 > v62) {
        float v62 = v65;
      }
      --v57;
    }
    while (v57);
  }
  float32x2_t v66 = vadd_f32(v59, v58);
  float32x2_t v67 = (float32x2_t)__PAIR64__(v58.u32[1], v59.u32[0]);
  __int32 v68 = v59.i32[1];
  *(float32x2_t *)v51.f32 = vsub_f32(v67, v58);
  a1[11].i64[0] = v51.i64[0];
  *(float32x2_t *)a1[10].f32 = v66;
  a1[10].f32[2] = v61 + v62;
  a1[10].i32[3] = 0;
  float v69 = v62 - v61;
  a1[11].f32[2] = v69;
  a1[11].i32[3] = 0;
  float v70 = v53 / 1.7321;
  if (v51.f32[1] >= v69) {
    unsigned int v71 = 1;
  }
  else {
    unsigned int v71 = 2;
  }
  if (v51.f32[0] >= v51.f32[1]) {
    uint64_t v72 = 2 * (v51.f32[0] < v69);
  }
  else {
    uint64_t v72 = v71;
  }
  v51.i32[0] = a1[11].i32[v72];
  float v73 = (float)-(float)(v70 - (float)(v51.f32[0] * 0.5)) * 0.00097656;
  a1[8].f32[1] = v70;
  a1[8].f32[2] = v70;
  a1[8].f32[0] = v70;
  float32x4_t v74 = a1 + 8;
  float v75 = v51.f32[0] * 0.5;
  a1[8].f32[v72] = v51.f32[0] * 0.5;
  int v76 = 1024;
  while (!sub_1B6DE6D40(a1, v51))
  {
    float v75 = v75 - v73;
    v74->f32[v72] = v75;
    if (!--v76)
    {
      a1[8].f32[1] = v70;
      a1[8].f32[2] = v70;
      a1[8].f32[0] = v70;
      goto LABEL_79;
    }
  }
  v51.f32[0] = v53 - v70;
  int v77 = 1 << v72;
  uint64_t v78 = (1 << v72) & 3;
  uint64_t v79 = (1 << (v77 & 3)) & 3;
  float v80 = v74->f32[v79];
  float v81 = v51.f32[0] * 0.00097656;
  float v82 = v74->f32[v78];
  v74->f32[v78] = (float)(v51.f32[0] * 0.00097656) + v82;
  v51.i32[0] = v74->i32[v79];
  float v83 = v81 + v51.f32[0];
  v74->f32[v79] = v81 + v51.f32[0];
  if (sub_1B6DE6D40(a1, v51))
  {
    int v85 = 1024;
    while (--v85)
    {
      float v80 = v83;
      float v82 = v74->f32[v78];
      v74->f32[v78] = v81 + v82;
      v84.i32[0] = v74->i32[v79];
      float v83 = v81 + v84.f32[0];
      v74->f32[v79] = v81 + v84.f32[0];
      if (!sub_1B6DE6D40(a1, v84)) {
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    v74->f32[v78] = v82;
    v74->f32[v79] = v80;
  }
LABEL_79:
  if (v103) {
    BOOL v86 = v104 == 0;
  }
  else {
    BOOL v86 = 1;
  }
  if (!v86) {
    sub_1B6E073C4(v103);
  }
  char v104 = 1;
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  if (v100) {
    BOOL v87 = v101 == 0;
  }
  else {
    BOOL v87 = 1;
  }
  if (!v87) {
    sub_1B6E073C4(v100);
  }
  char v101 = 1;
  uint64_t v100 = 0;
  uint64_t v99 = 0;
  if (v97 && v98) {
    sub_1B6E073C4(v97);
  }
  char v98 = 1;
  uint64_t v97 = 0;
  uint64_t v96 = 0;
  if (v94)
  {
    if (v95) {
      sub_1B6E073C4(v94);
    }
  }
}

void sub_1B6DE758C(uint64_t a1, __int16 *a2, _DWORD *a3)
{
  int v6 = *a2;
  int v7 = a2[1];
  int v8 = *(_DWORD *)(a1 + 72);
  int v9 = sub_1B6DE7918(a1, a2);
  if (v9 == -1)
  {
    int v10 = v6 + (v7 << 16);
    int v11 = v8 - 1;
    int v12 = *(_DWORD *)(a1 + 68);
    int v13 = *(_DWORD *)(a1 + 72);
    int v14 = v12;
    if (v12 == v13)
    {
      int v15 = v12 ? 2 * v12 : 1;
      int v14 = *(_DWORD *)(a1 + 68);
      if (v12 < v15)
      {
        if (v15) {
          uint64_t v16 = sub_1B6E073B8(4 * v15, 16);
        }
        else {
          uint64_t v16 = 0;
        }
        if (*(int *)(a1 + 68) >= 1)
        {
          uint64_t v17 = 0;
          uint64_t v18 = 4 * *(unsigned int *)(a1 + 68);
          do
          {
            *(_DWORD *)(v16 + v17) = *(_DWORD *)(*(void *)(a1 + 80) + v17);
            v17 += 4;
          }
          while (v18 != v17);
        }
        uint64_t v19 = *(void *)(a1 + 80);
        if (v19 && *(unsigned char *)(a1 + 88)) {
          sub_1B6E073C4(v19);
        }
        *(unsigned char *)(a1 + 88) = 1;
        *(void *)(a1 + 80) = v16;
        *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v15;
        int v14 = *(_DWORD *)(a1 + 68);
      }
    }
    int v20 = v10 & v11;
    *(_DWORD *)(*(void *)(a1 + 80) + 4 * v14) = *a3;
    ++*(_DWORD *)(a1 + 68);
    int v21 = *(_DWORD *)(a1 + 100);
    if (v21 == *(_DWORD *)(a1 + 104))
    {
      int v22 = v21 ? 2 * v21 : 1;
      if (v21 < v22)
      {
        if (v22)
        {
          uint64_t v23 = sub_1B6E073B8(4 * v22, 16);
          int v21 = *(_DWORD *)(a1 + 100);
        }
        else
        {
          uint64_t v23 = 0;
        }
        if (v21 >= 1)
        {
          uint64_t v24 = 0;
          uint64_t v25 = 4 * v21;
          do
          {
            *(_DWORD *)(v23 + v24) = *(_DWORD *)(*(void *)(a1 + 112) + v24);
            v24 += 4;
          }
          while (v25 != v24);
        }
        uint64_t v26 = *(void *)(a1 + 112);
        if (v26 && *(unsigned char *)(a1 + 120)) {
          sub_1B6E073C4(v26);
        }
        *(unsigned char *)(a1 + 120) = 1;
        *(void *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = v23;
        *(_DWORD *)(a1 + 104) = v22;
        int v21 = *(_DWORD *)(a1 + 100);
      }
    }
    *(_DWORD *)(*(void *)(a1 + 112) + 4 * v21) = *(_DWORD *)a2;
    ++*(_DWORD *)(a1 + 100);
    if (v13 < *(_DWORD *)(a1 + 72))
    {
      sub_1B6DE7994(a1);
      int v20 = (*a2 + ((unsigned __int16)a2[1] << 16)) & (*(_DWORD *)(a1 + 72) - 1);
    }
    uint64_t v27 = *(void *)(a1 + 16);
    *(_DWORD *)(*(void *)(a1 + 48) + 4 * v1sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(v27 + 4 * v20);
    *(_DWORD *)(v27 + 4 * v20) = v12;
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 80) + 4 * v9) = *a3;
  }
}

float32x4_t sub_1B6DE77AC(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float *a4, float *a5, float32x4_t *a6, float32x4_t *a7)
{
  *a4 = 3.4028e38;
  *a5 = -3.4028e38;
  uint64_t v7 = *(unsigned int *)(a1 + 12);
  if ((int)v7 < 1)
  {
    result.i32[0] = -8388609;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 16 * v7;
    result.i32[1] = 0;
    do
    {
      float32x4_t v11 = *(float32x4_t *)(*(void *)(a1 + 24) + v8);
      float32x4_t v12 = vmulq_f32(*a2, v11);
      int8x16_t v13 = (int8x16_t)vmulq_f32(v11, a2[1]);
      int8x16_t v14 = (int8x16_t)vmulq_f32(v11, a2[2]);
      v14.i32[3] = 0;
      *(float32x2_t *)v12.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
      *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
      float32x4_t v15 = vaddq_f32(v12, a2[3]);
      int8x16_t v16 = (int8x16_t)vmulq_f32(v15, *a3);
      float v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)).f32[0];
      if (v17 < *a4)
      {
        *a4 = v17;
        *a6 = v15;
      }
      if (v17 > *a5)
      {
        *a5 = v17;
        *a7 = v15;
      }
      v8 += 16;
    }
    while (v9 != v8);
    result.f32[0] = *a5;
  }
  float v18 = *a4;
  if (*a4 > result.f32[0])
  {
    *a4 = result.f32[0];
    *a5 = v18;
    float32x4_t result = *a6;
    *a6 = *a7;
    *a7 = result;
  }
  return result;
}

uint64_t sub_1B6DE7898(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 48 * v2;
    do
    {
      sub_1B6441B40(*(void *)(a1 + 16) + v3);
      v3 += 48;
    }
    while (v4 != v3);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 && *(unsigned char *)(a1 + 24)) {
    sub_1B6E073C4(v5);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1B6DE7918(uint64_t a1, __int16 *a2)
{
  int v2 = (unsigned __int16)a2[1];
  int v3 = (*a2 + (v2 << 16)) & (*(_DWORD *)(a1 + 72) - 1);
  if (v3 >= *(_DWORD *)(a1 + 4)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * v3);
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)(a1 + 112);
  while (*a2 != *(_WORD *)(v5 + 4 * (int)v4) || v2 != *(unsigned __int16 *)(v5 + 4 * (int)v4 + 2))
  {
    uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * (int)v4);
    if (v4 == -1) {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

void sub_1B6DE7994(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 72);
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= (int)v1) {
    return;
  }
  if (*(_DWORD *)(a1 + 8) < (int)v1)
  {
    if (v1)
    {
      uint64_t v4 = sub_1B6E073B8(4 * (int)v1, 16);
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    else
    {
      uint64_t v4 = 0;
      LODWORD(v5) = *(_DWORD *)(a1 + 4);
    }
    uint64_t v6 = *(void *)(a1 + 16);
    if ((int)v5 < 1)
    {
      if (!v6)
      {
LABEL_14:
        *(unsigned char *)(a1 + 24) = 1;
        *(void *)(a1 + 16) = v4;
        *(_DWORD *)(a1 + 8) = v1;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v5 = v5;
      uint64_t v7 = (_DWORD *)v4;
      uint64_t v8 = *(int **)(a1 + 16);
      do
      {
        int v9 = *v8++;
        *v7++ = v9;
        --v5;
      }
      while (v5);
    }
    if (*(unsigned char *)(a1 + 24)) {
      sub_1B6E073C4(v6);
    }
    *(void *)(a1 + 16) = 0;
    goto LABEL_14;
  }
LABEL_15:
  bzero((void *)(*(void *)(a1 + 16) + 4 * (int)v2), 4 * (v1 + ~v2) + 4);
  *(_DWORD *)(a1 + 4) = v1;
  int v10 = *(_DWORD *)(a1 + 36);
  if (v10 < (int)v1)
  {
    if (*(_DWORD *)(a1 + 40) >= (int)v1)
    {
LABEL_28:
      bzero((void *)(*(void *)(a1 + 48) + 4 * v10), 4 * (v1 + ~v10) + 4);
      goto LABEL_29;
    }
    if (v1) {
      uint64_t v11 = sub_1B6E073B8(4 * (int)v1, 16);
    }
    else {
      uint64_t v11 = 0;
    }
    LODWORD(v1sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + 36);
    uint64_t v13 = *(void *)(a1 + 48);
    if ((int)v12 < 1)
    {
      if (!v13)
      {
LABEL_27:
        *(unsigned char *)(a1 + 56) = 1;
        *(void *)(a1 + 48) = v11;
        *(_DWORD *)(a1 + 40) = v1;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v12 = v12;
      int8x16_t v14 = (_DWORD *)v11;
      float32x4_t v15 = *(int **)(a1 + 48);
      do
      {
        int v16 = *v15++;
        *v14++ = v16;
        --v12;
      }
      while (v12);
    }
    if (*(unsigned char *)(a1 + 56)) {
      sub_1B6E073C4(v13);
    }
    goto LABEL_27;
  }
LABEL_29:
  *(_DWORD *)(a1 + 36) = v1;
  if ((int)v1 >= 1)
  {
    memset(*(void **)(a1 + 16), 255, 4 * v1);
    memset(*(void **)(a1 + 48), 255, 4 * v1);
  }
  if ((int)v2 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 48);
    int v20 = (unsigned __int16 *)(*(void *)(a1 + 112) + 2);
    do
    {
      int v21 = (__int16)*(v20 - 1);
      int v22 = *v20;
      v20 += 2;
      int v23 = (v21 + (v22 << 16)) & (*(_DWORD *)(a1 + 72) - 1);
      *(_DWORD *)(v19 + 4 * v17) = *(_DWORD *)(v18 + 4 * v23);
      *(_DWORD *)(v18 + 4 * v23) = v17++;
    }
    while (v2 != v17);
  }
}

uint64_t sub_1B6DE7BA8(uint64_t result)
{
  *(_DWORD *)(result + 8) = 35;
  *(void *)(result + 16) = 0;
  *(void *)float32x4_t result = &unk_1F0FB06F8;
  return result;
}

void *sub_1B6DE7BDC(uint64_t a1, float32x4_t *a2, float32x2_t *a3, float *a4, float *a5)
{
  float32x4_t v10 = *a2;
  float32x4_t v11 = a2[1];
  v10.i32[3] = 0;
  v11.i32[3] = 0;
  float32x4_t v12 = a2[2];
  v12.i32[3] = 0;
  int8x16_t v29 = (int8x16_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)a3->f32)), vmulq_lane_f32(v11, *a3, 1)), vmulq_laneq_f32(v12, *(float32x4_t *)a3->f32, 2));
  (*(void (**)(float32x4_t *__return_ptr))(*(void *)a1 + 128))(&v28);
  float32x4_t v13 = vmulq_f32(*a2, v28);
  int8x16_t v14 = (int8x16_t)vmulq_f32(v28, a2[1]);
  int8x16_t v15 = (int8x16_t)vmulq_f32(v28, a2[2]);
  v15.i32[3] = 0;
  *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
  *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  float32x4_t v16 = vaddq_f32(v13, a2[3]);
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  float32x4_t v26 = v16;
  int8x16_t v27 = veorq_s8(v29, (int8x16_t)v13);
  float32x4_t result = (*(void *(**)(float32x4_t *__return_ptr, uint64_t, int8x16_t *))(*(void *)a1 + 128))(&v28, a1, &v27);
  float32x4_t v18 = vmulq_f32(*a2, v28);
  int8x16_t v19 = (int8x16_t)vmulq_f32(v28, a2[1]);
  int8x16_t v20 = (int8x16_t)vmulq_f32(v28, a2[2]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  float32x4_t v21 = vaddq_f32(v18, a2[3]);
  int8x16_t v22 = (int8x16_t)vmulq_f32(v26, *(float32x4_t *)a3->f32);
  *(_DWORD *)a4 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).u32[0];
  int8x16_t v23 = (int8x16_t)vmulq_f32(v21, *(float32x4_t *)a3->f32);
  float v24 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).f32[0];
  *a5 = v24;
  float v25 = *a4;
  if (*a4 > v24)
  {
    *a4 = v24;
    *a5 = v25;
  }
  return result;
}

uint64_t sub_1B6DE7D9C@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q6>)
{
  switch(*(_DWORD *)(result + 8))
  {
    case 0:
      v4.i64[0] = 0x8000000080000000;
      v4.i64[1] = 0x8000000080000000;
      *(int8x16_t *)a3 = veorq_s8(vandq_s8(*a2, v4), *(int8x16_t *)(result + 48));
      return result;
    case 1:
      float32x4_t v5 = *(float32x4_t *)a2;
      v5.i32[2] = a2->i32[2];
      float32x4_t v6 = *(float32x4_t *)(result + 80);
      float32x4_t v7 = *(float32x4_t *)(result + 96);
      result += 80;
      int8x16_t v8 = (int8x16_t)vmulq_f32(v5, *(float32x4_t *)(result + 32));
      v5.i32[3] = 0;
      int8x16_t v9 = (int8x16_t)vmulq_f32(v6, v5);
      int8x16_t v10 = (int8x16_t)vmulq_f32(v5, v7);
      v8.i32[3] = 0;
      float32x2_t v11 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v10.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
      float32x2_t v12 = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
      uint64_t v13 = 2;
      if (v11.f32[1] >= v12.f32[0]) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = 2;
      }
      if ((vcgt_f32(v12, v11).u8[0] & 1) == 0) {
        uint64_t v13 = 0;
      }
      if (v11.f32[0] < v11.f32[1]) {
        uint64_t v13 = v14;
      }
      int8x16_t v15 = *(int8x16_t *)(result + 16 * v13);
      goto LABEL_33;
    case 4:
      float32x4_t v16 = *(float32x4_t **)(result + 136);
      int v17 = *(_DWORD *)(result + 124);
      return sub_1B6DE8134((float32x4_t *)a2, v16, v17, (float32x4_t *)(result + 32), a3);
    case 5:
      float32x4_t v16 = *(float32x4_t **)(result + 120);
      int v17 = *(_DWORD *)(result + 128);
      return sub_1B6DE8134((float32x4_t *)a2, v16, v17, (float32x4_t *)(result + 32), a3);
    case 8:
      a3->i64[0] = 0;
      a3->i64[1] = 0;
      return result;
    case 0xA:
      float32x4_t v18 = *(float32x4_t *)a2;
      v18.i64[1] = a2->u32[2];
      uint64_t v19 = *(int *)(result + 72);
      float v20 = *(float *)(result + 48 + 4 * v19);
      float v21 = *(float *)(result + 48 + 4 * (((int)v19 + 2) % 3));
      int8x16_t v22 = (int8x16_t)vmulq_f32(v18, v18);
      float v23 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8)).f32[0];
      if (v23 >= 0.0001) {
        float32x4_t v24 = vmulq_n_f32(v18, 1.0 / sqrtf(v23));
      }
      else {
        float32x4_t v24 = (float32x4_t)xmmword_1B6E4F300;
      }
      float32x4_t v55 = 0uLL;
      v55.f32[v19] = v20;
      float32x4_t v40 = vmulq_n_f32(v24, v21);
      float32x4_t v41 = vmulq_n_f32(v24, *(float *)(result + 64));
      float32x4_t v42 = vsubq_f32(vaddq_f32(v55, v40), v41);
      v42.i32[3] = 0;
      int8x16_t v43 = (int8x16_t)vmulq_f32(v24, v42);
      *(float32x2_t *)a4.f32 = vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8);
      float32x4_t v44 = (float32x4_t)vextq_s8(v43, v43, 8uLL);
      *(float32x2_t *)v44.f32 = vadd_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)v44.f32);
      a4.i32[0] = -581039253;
      int8x16_t v45 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v44, a4), 0), (int8x16_t)v42, (int8x16_t)0);
      v44.f32[0] = fmaxf(v44.f32[0], -1.0e18);
      float32x4_t v55 = 0uLL;
      v55.f32[v19] = -v20;
      float32x4_t v46 = vsubq_f32(vaddq_f32(v55, v40), v41);
      v46.i32[3] = 0;
      int8x16_t v47 = (int8x16_t)vmulq_f32(v24, v46);
      *(float32x2_t *)v40.f32 = vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8);
      float32x4_t v48 = (float32x4_t)vextq_s8(v47, v47, 8uLL);
      *(float32x2_t *)v48.f32 = vadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v48.f32);
      int8x16_t v15 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v48, v44), 0), (int8x16_t)v46, v45);
LABEL_33:
      a3->i64[0] = v15.i64[0];
      a3->i32[2] = v15.i32[2];
      goto LABEL_38;
    case 0xD:
      float32x4_t v55 = *(float32x4_t *)(result + 48);
      uint64_t v52 = a2->i64[0];
      __int32 v53 = a2->i32[2];
      int v54 = 0;
      int v25 = *(_DWORD *)(result + 72);
      uint64_t v26 = v25;
      BOOL v27 = v25 == 1;
      BOOL v28 = v25 != 1;
      BOOL v29 = v25 == 2;
      if (v25 == 2) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = 2;
      }
      if (v29) {
        uint64_t v31 = 2;
      }
      else {
        uint64_t v31 = v27;
      }
      BOOL v32 = !v29 && v28;
      float v33 = *(float *)((unint64_t)&v55 | (4 * v32));
      float v34 = v55.f32[v26];
      float v35 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFFBLL | (4 * v32));
      float v36 = *(float *)((unint64_t)&v52 | (4 * v30));
      float v37 = sqrtf((float)(v36 * v36) + (float)(v35 * v35));
      if (v37 == 0.0)
      {
        *(float *)((unint64_t)&v50 | (4 * v32)) = v33;
        if (*(float *)((unint64_t)&v52 | (4 * v31)) < 0.0) {
          float v34 = -v34;
        }
        *(float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3))) = v34;
        float v39 = 0.0;
      }
      else
      {
        float v38 = v33 / v37;
        *(float *)((unint64_t)&v50 | (4 * v32)) = v35 * v38;
        if (*(float *)((unint64_t)&v52 | (4 * v31)) < 0.0) {
          float v34 = -v34;
        }
        *(float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3))) = v34;
        float v39 = v36 * v38;
      }
      *(float *)((unint64_t)&v50 | (4 * v30)) = v39;
      __int32 v49 = v51;
      a3->i64[0] = v50;
      a3->i32[2] = v49;
LABEL_38:
      a3->i32[3] = 0;
      break;
    default:
      float32x4_t result = (*(uint64_t (**)(void))(*(void *)result + 136))();
      break;
  }
  return result;
}

uint64_t sub_1B6DE8134@<X0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, float32x4_t *a4@<X3>, float32x4_t *a5@<X8>)
{
  float32x4_t v9 = vmulq_f32(*a1, *a4);
  float32x4_t v19 = v9;
  uint64_t v10 = a3;
  if (a3 > 3)
  {
    int v18 = 0;
    uint64_t result = off_1EB9734A0((uint64_t)a2, (uint64_t)&v19, a3, (uint64_t)&v18);
    if (result < 0) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (a3 < 1)
  {
    uint64_t result = -1;
    goto LABEL_14;
  }
  uint64_t v11 = 0;
  int v12 = -1;
  float v13 = -3.4028e38;
  do
  {
    int8x16_t v14 = (int8x16_t)vmulq_f32(v9, a2[v11]);
    float v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
    if (v15 > v13)
    {
      float v13 = v15;
      int v12 = v11;
    }
    ++v11;
  }
  while (a3 != v11);
  uint64_t result = v12;
  if ((v12 & 0x8000000000000000) == 0)
  {
LABEL_12:
    if (result < v10)
    {
      float32x4_t v17 = a2[result];
LABEL_16:
      *a5 = vmulq_f32(v17, *a4);
      return result;
    }
  }
LABEL_14:
  if (a3 >= 1)
  {
    float32x4_t v17 = *a2;
    goto LABEL_16;
  }
  a5->i64[0] = 0;
  a5->i64[1] = 0;
  return result;
}

float32x4_t sub_1B6DE824C@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q6>)
{
  float32x4_t v6 = *a2;
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float v8 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0];
  if (v8 < 1.4211e-14)
  {
    float32x4_t v6 = (float32x4_t)xmmword_1B6E50990;
    float32x4_t v18 = (float32x4_t)xmmword_1B6E50990;
    __asm { FMOV            V1.2S, #1.0 }
    float v8 = vpadd_f32(_D1, _D1).f32[0] + 1.0;
  }
  float32x4_t v18 = vmulq_n_f32(v6, 1.0 / sqrtf(v8));
  sub_1B6DE7D9C(a1, (int8x16_t *)&v18, &v17, a4);
  float v14 = sub_1B6DE82FC(a1);
  float32x4_t v15 = vmulq_n_f32(v18, v14);
  v15.i32[3] = 0;
  float32x4_t result = vaddq_f32(v17, v15);
  *a3 = result;
  return result;
}

float sub_1B6DE82FC(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
    case 1:
    case 4:
    case 5:
    case 0xA:
    case 0xD:
      float result = *(float *)(a1 + 64);
      break;
    case 8:
      float result = *(float *)(a1 + 48) * *(float *)(a1 + 32);
      break;
    default:
      (*(void (**)(void))(*(void *)a1 + 96))();
      break;
  }
  return result;
}

uint64_t sub_1B6DE839C(uint64_t a1, uint64_t a2, int a3)
{
  sub_1B6DEC454(a1);
  *(void *)uint64_t v6 = &unk_1F0FB21C8;
  *(void *)(v6 + 120) = a2;
  *(_DWORD *)(v6 + 8) = 3;
  if (a3) {
    sub_1B6DEC2F8(a1);
  }
  return a1;
}

double sub_1B6DE840C@<D0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  float32x4_t v4 = *a2;
  int8x16_t v5 = (int8x16_t)vmulq_f32(v4, v4);
  float v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
  if (v6 >= 0.0001) {
    float32x4_t v7 = vmulq_n_f32(v4, 1.0 / sqrtf(v6));
  }
  else {
    float32x4_t v7 = (float32x4_t)xmmword_1B6E4F300;
  }
  long long v13 = 0uLL;
  v12[0] = &unk_1F0FB2360;
  int v14 = -581039253;
  float32x4_t v15 = v7;
  uint64_t v8 = *(void *)(a1 + 120);
  long long v10 = xmmword_1B6ECFFF0;
  long long v11 = xmmword_1B6ECFDA0;
  (*(void (**)(uint64_t, void *, long long *, long long *))(*(void *)v8 + 16))(v8, v12, &v10, &v11);
  *a3 = v13;
  return nullsub_1(v12);
}

void sub_1B6DE8504(uint64_t a1, long long *a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    float v6 = (_OWORD *)a3;
    float32x4_t v9 = (_DWORD *)(a3 + 12);
    uint64_t v10 = a4;
    uint64_t v11 = a4;
    do
    {
      *float32x4_t v9 = -581039253;
      v9 += 4;
      --v11;
    }
    while (v11);
    do
    {
      v16[0] = &unk_1F0FB2360;
      long long v17 = 0uLL;
      int v18 = -581039253;
      long long v12 = *a2++;
      long long v19 = v12;
      uint64_t v13 = *(void *)(a1 + 120);
      long long v14 = xmmword_1B6ECFFF0;
      long long v15 = xmmword_1B6ECFDA0;
      (*(void (**)(uint64_t, void *, long long *, long long *))(*(void *)v13 + 16))(v13, v16, &v14, &v15);
      *v6++ = v17;
      nullsub_1(v16);
      --v10;
    }
    while (v10);
  }
}

float32x4_t sub_1B6DE8628@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
  result.f32[0] = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    int8x16_t v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    float32x4_t v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    float32x4_t v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B6E50990, *(int8x16_t *)a2);
    int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10);
    float32x4_t v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1));
    v12.i32[3] = 0;
    float32x4_t result = vaddq_f32(*a3, v12);
    *a3 = result;
  }
  return result;
}

uint64_t sub_1B6DE8748()
{
  return 0;
}

uint64_t sub_1B6DE8750()
{
  return 0;
}

uint64_t sub_1B6DE8760()
{
  return 0;
}

uint64_t sub_1B6DE876C()
{
  return 0;
}

uint64_t sub_1B6DE8774(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(*(void *)(a1 + 120) + 16) = *a2;
  return sub_1B6DEC2F8(a1);
}

uint64_t sub_1B6DE8784(uint64_t a1)
{
  return *(void *)(a1 + 120) + 16;
}

void sub_1B6DE8794(void *a1)
{
  sub_1B6DEA3D0(a1);

  sub_1B6E073C4(v1);
}

const char *sub_1B6DE87BC()
{
  return "ConvexTrimesh";
}

void sub_1B6DE87C8(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DE8800(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  float32x4_t v3 = *(float32x4_t *)(result + 48);
  float v4 = *(float *)(result + 32);
  do
  {
    int8x16_t v5 = (int8x16_t)vmulq_f32(v3, *(float32x4_t *)(a2 + v2));
    float v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
    if (v6 > v4)
    {
      *(float *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = v6;
      *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + v2);
      float v4 = v6;
    }
    v2 += 16;
  }
  while (v2 != 48);
  return result;
}

uint64_t sub_1B6DE8848(uint64_t a1, float32x4_t *a2)
{
  sub_1B6DE65E4(a1);
  *(void *)uint64_t v4 = &unk_1F0FB0BE8;
  *(_DWORD *)(v4 + 7sub_1B6DC4968((unsigned int *)this + 2) = 1;
  sub_1B6DE20C4(v4, a2->f32, 0.1);
  v10.i64[0] = (*(double (**)(uint64_t))(*(void *)a1 + 96))(a1);
  __int32 v9 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(void *)a1 + 96))(a1));
  float v5 = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  float32x4_t v6 = v10;
  v6.i32[1] = v9;
  v6.f32[2] = v5;
  float32x4_t v7 = vsubq_f32(vmulq_f32(*a2, *(float32x4_t *)(a1 + 32)), v6);
  v7.i32[3] = 0;
  *(float32x4_t *)(a1 + 48) = v7;
  *(_DWORD *)(a1 + 8) = 13;
  return a1;
}

float32x4_t sub_1B6DE8964(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  *(double *)&int32x2_t v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v9 = *(float32x4_t *)(a2 + 48);
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v10.i32[3] = 0;
  float32x4_t v11 = vaddq_f32(a1[3], v10);
  float32x4_t v12 = vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v13 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 16), (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v14 = (int8x16_t)vmulq_f32(v11, (float32x4_t)vandq_s8(*(int8x16_t *)(a2 + 32), (int8x16_t)xmmword_1B6ECFDF0));
  v14.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8));
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  float32x4_t v15 = vsubq_f32(v9, v12);
  v15.i32[3] = 0;
  *a3 = v15;
  float32x4_t result = vaddq_f32(v9, v12);
  *a4 = result;
  return result;
}

void sub_1B6DE8A34(float32x4_t *a1, uint64_t a2, float a3)
{
  float32x4_t v18 = a1[3];
  v17.i64[0] = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  __int32 v16 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  float v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v7 = v17;
  v7.i32[1] = v16;
  v7.f32[2] = v6;
  float32x4_t v8 = vaddq_f32(v18, v7);
  __int32 v9 = a1[4].i32[2];
  float32x2_t v10 = (float32x2_t)vmulq_f32(v8, v8).u64[0];
  float v11 = (float)((float)(a3 * 0.25) * v10.f32[0])
      + (float)((float)(a3 / 12.0) * vmuls_lane_f32(vmuls_lane_f32(4.0, v8, 2), v8, 2));
  float v12 = (float)((float)(a3 * 0.25) * v10.f32[0])
      + (float)((float)(a3 / 12.0)
              * vmuls_lane_f32(vmuls_lane_f32(4.0, *(float32x2_t *)v8.f32, 1), *(float32x2_t *)v8.f32, 1));
  float v13 = vmuls_lane_f32(a3 * 0.25, v10, 1) + (float)((float)(a3 / 12.0) * (float)((float)(4.0 * v8.f32[0]) * v8.f32[0]));
  float v14 = vmuls_lane_f32(a3 * 0.5, v10, 1);
  if (v9)
  {
    float v14 = v12;
    float v15 = (float)(a3 * 0.5) * v10.f32[0];
  }
  else
  {
    float v15 = v13;
  }
  if (v9) {
    float v13 = v12;
  }
  if (v9 == 2)
  {
    float v14 = v11;
    float v15 = v11;
  }
  *(float *)a2 = v14;
  *(float *)(a2 + 4) = v15;
  if (v9 == 2) {
    float v13 = (float)(a3 * 0.5) * v10.f32[0];
  }
  *(float *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
}

uint64_t sub_1B6DE8B90@<X0>(uint64_t result@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = *(float *)(result + 48);
  float v4 = *(float *)(result + 52);
  float v5 = *a2;
  float v6 = a2[2];
  float v7 = sqrtf((float)(v6 * v6) + (float)(v5 * v5));
  if (v7 == 0.0)
  {
    if (a2[1] < 0.0) {
      float v4 = -v4;
    }
    float v9 = 0.0;
  }
  else
  {
    float v8 = v3 / v7;
    float v3 = v5 * v8;
    if (a2[1] < 0.0) {
      float v4 = -v4;
    }
    float v9 = v6 * v8;
  }
  *a3 = v3;
  a3[1] = v4;
  a3[2] = v9;
  return result;
}

__n128 sub_1B6DE8BF0(uint64_t a1, uint64_t a2, __n128 *a3, int a4, __n128 a5)
{
  if (a4 >= 1)
  {
    uint64_t v5 = a4;
    float v6 = (float *)(a2 + 4);
    do
    {
      float v7 = *(float *)(a1 + 48);
      float v8 = *(float *)(a1 + 52);
      float v9 = *(v6 - 1);
      float v10 = v6[1];
      float v11 = sqrtf((float)(v10 * v10) + (float)(v9 * v9));
      if (v11 == 0.0)
      {
        if (*v6 >= 0.0) {
          float v13 = *(float *)(a1 + 52);
        }
        else {
          float v13 = -v8;
        }
        float v14 = 0.0;
      }
      else
      {
        float v12 = v7 / v11;
        float v7 = v9 * v12;
        if (*v6 >= 0.0) {
          float v13 = *(float *)(a1 + 52);
        }
        else {
          float v13 = -v8;
        }
        float v14 = v10 * v12;
      }
      a5.n128_u64[0] = __PAIR64__(LODWORD(v13), LODWORD(v7));
      a5.n128_f32[2] = v14;
      *a3++ = a5;
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  result.n128_u64[0] = a5.n128_u64[0];
  result.n128_u32[2] = a5.n128_u32[2];
  return result;
}

void sub_1B6DE8C78(uint64_t a1)
{
  nullsub_1(a1);

  sub_1B6E073C4(v1);
}

float32x4_t sub_1B6DE8CA0(float32x4_t *a1, float32x4_t *a2)
{
  double v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v15 = LODWORD(v4);
  double v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v13 = LODWORD(v5);
  *(float *)&unsigned int v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v13, v15);
  v7.i64[1] = v6;
  float32x4_t v16 = v7;
  float32x4_t v8 = a1[2];
  float32x4_t v9 = vaddq_f32(a1[3], v7);
  float32x4_t v10 = vrecpeq_f32(v8);
  float32x4_t v11 = vmulq_f32(v10, vrecpsq_f32(v8, v10));
  float32x4_t v14 = vmulq_f32(vrecpsq_f32(v8, v11), vmulq_f32(v9, v11));
  sub_1B6DE6630(a1, a2);
  float32x4_t result = vsubq_f32(vmulq_f32(v14, a1[2]), v16);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

const char *sub_1B6DE8DB0()
{
  return "CylinderY";
}

uint64_t sub_1B6DE8DBC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  *((_DWORD *)a2 + *(int *)(result + 72)) = 1065353216;
  return result;
}

float32x4_t sub_1B6DE8DD0(float32x4_t *a1, float32_t a2)
{
  double v4 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v14 = LODWORD(v4);
  double v5 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  unsigned int v12 = LODWORD(v5);
  *(float *)&unsigned int v6 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v7.i64[0] = __PAIR64__(v12, v14);
  v7.i64[1] = v6;
  float32x4_t v15 = vaddq_f32(a1[3], v7);
  a1[4].f32[0] = a2;
  unsigned int v13 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  unsigned int v11 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&unsigned int v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  v9.i64[0] = __PAIR64__(v11, v13);
  v9.i64[1] = v8;
  float32x4_t result = vsubq_f32(v15, v9);
  result.i32[3] = 0;
  a1[3] = result;
  return result;
}

uint64_t sub_1B6DE8F50()
{
  return 64;
}

const char *sub_1B6DE8F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DE46E8(a1, a2, a3);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 72);
  return "btCylinderShapeData";
}

float32x4_t sub_1B6DE8FD8@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  (*(void (**)(float32x4_t *__return_ptr))(*(void *)a1 + 136))(&v14);
  float32x4_t v13 = v14;
  *a3 = v14;
  result.f32[0] = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (result.f32[0] != 0.0)
  {
    int8x16_t v8 = (int8x16_t)vmulq_f32(*a2, *a2);
    *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8);
    float32x4_t v9 = (float32x4_t)vextq_s8(v8, v8, 8uLL);
    *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v9.f32);
    v7.i32[0] = 679477248;
    float32x4_t v10 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v9), 0), (int8x16_t)xmmword_1B6E50990, *(int8x16_t *)a2);
    int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10);
    float32x4_t v12 = vmulq_n_f32(vmulq_n_f32(v10, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1));
    v12.i32[3] = 0;
    float32x4_t result = vaddq_f32(v13, v12);
    *a3 = result;
  }
  return result;
}

float sub_1B6DE9108(float *a1)
{
  float v2 = a1[12];
  float v3 = (*(float (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(float *))(*(void *)a1 + 96))(a1);
  (*(void (**)(float *))(*(void *)a1 + 96))(a1);
  return v2 + v3;
}

uint64_t sub_1B6DE91B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  sub_1B6DE697C(a1);
  *(void *)uint64_t v8 = &unk_1F0FB14A8;
  *(unsigned char *)(v8 + 144) = 1;
  *(void *)(v8 + 136) = 0;
  *(void *)(v8 + 124) = 0;
  *(unsigned char *)(v8 + 176) = 1;
  *(void *)(v8 + sub_1B6DAD18C((uint64_t)this + 168) = 0;
  *(void *)(v8 + 156) = 0;
  *(_DWORD *)(v8 + 8) = 9;
  if (a4 < 0)
  {
    int v15 = 0;
  }
  else
  {
    if (!a4)
    {
      *(_DWORD *)(a1 + 124) = 0;
      *(_DWORD *)(a1 + 156) = 0;
      goto LABEL_29;
    }
    uint64_t v9 = sub_1B6E073B8(16 * a4, 16);
    uint64_t v10 = v9;
    uint64_t v11 = *(unsigned int *)(a1 + 124);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 16 * v11;
      do
      {
        *(_OWORD *)(v9 + v1sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(*(void *)(a1 + 136) + v12);
        v12 += 16;
      }
      while (v13 != v12);
    }
    uint64_t v14 = *(void *)(a1 + 136);
    if (v14 && *(unsigned char *)(a1 + 144)) {
      sub_1B6E073C4(v14);
    }
    *(unsigned char *)(a1 + 144) = 1;
    *(void *)(a1 + 136) = v10;
    *(_DWORD *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = a4;
    int v15 = *(_DWORD *)(a1 + 156);
  }
  *(_DWORD *)(a1 + 124) = a4;
  if (v15 < a4)
  {
    if (*(_DWORD *)(a1 + 160) >= a4)
    {
LABEL_25:
      bzero((void *)(*(void *)(a1 + 168) + 4 * v15), 4 * (~v15 + a4) + 4);
      goto LABEL_26;
    }
    if (a4)
    {
      uint64_t v16 = sub_1B6E073B8(4 * a4, 16);
      LODWORD(v17) = *(_DWORD *)(a1 + 156);
    }
    else
    {
      uint64_t v16 = 0;
      LODWORD(v17) = v15;
    }
    uint64_t v18 = *(void *)(a1 + 168);
    if ((int)v17 < 1)
    {
      if (!v18)
      {
LABEL_24:
        *(unsigned char *)(a1 + 176) = 1;
        *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = v16;
        *(_DWORD *)(a1 + 160) = a4;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v17 = v17;
      long long v19 = (_DWORD *)v16;
      uint64_t v20 = *(int **)(a1 + 168);
      do
      {
        int v21 = *v20++;
        *v19++ = v21;
        --v17;
      }
      while (v17);
    }
    if (*(unsigned char *)(a1 + 176)) {
      sub_1B6E073C4(v18);
    }
    goto LABEL_24;
  }
LABEL_26:
  *(_DWORD *)(a1 + 156) = a4;
  if (a4 >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      *(_OWORD *)(*(void *)(a1 + 136) + 16 * v2sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(a2 + 16 * v22);
      *(_DWORD *)(*(void *)(a1 + 168) + 4 * v2sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a3 + 4 * v22);
      ++v22;
    }
    while (a4 != v22);
  }
LABEL_29:
  sub_1B6DE6B10(a1);
  return a1;
}

uint64_t sub_1B6DE93A4@<X0>(uint64_t result@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  float v3 = (float32x4_t *)result;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  float32x4_t v4 = *a2;
  int8x16_t v5 = (int8x16_t)vmulq_f32(v4, v4);
  float v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
  if (v6 >= 1.4211e-14) {
    float32x4_t v7 = vmulq_n_f32(v4, 1.0 / sqrtf(v6));
  }
  else {
    float32x4_t v7 = (float32x4_t)xmmword_1B6E4F300;
  }
  float32x4_t v33 = v7;
  float v32 = 0.0;
  int v8 = *(_DWORD *)(result + 124);
  if (v8 >= 1)
  {
    int v9 = 0;
    uint64_t v10 = *(float **)(result + 168);
    uint64_t v11 = *(float32x4_t **)(result + 136);
    float v12 = -1.0e18;
    int v13 = *(_DWORD *)(result + 124);
    do
    {
      int v14 = v13 - 128;
      if (v13 >= 128) {
        int v13 = 128;
      }
      if (v13 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v13;
      }
      if (v8 - v9 >= 128) {
        int v16 = 128;
      }
      else {
        int v16 = v8 - v9;
      }
      uint64_t v17 = v16;
      if (v8 - v9 < 1)
      {
        if (v16 >= 4) {
          goto LABEL_26;
        }
        int v26 = -1;
        float v27 = -3.4028e38;
      }
      else
      {
        uint64_t v18 = v34;
        float32x4_t v19 = v33;
        do
        {
          float v20 = *v10++;
          float32x4_t v21 = vmulq_n_f32(vmulq_f32(v19, v3[2]), v20);
          v21.i32[3] = 0;
          float32x4_t v22 = *v11++;
          float32x4_t v31 = vaddq_f32(v22, v21);
          float v23 = (*(float (**)(float32x4_t *))(v3->i64[0] + 96))(v3);
          float32x4_t v19 = v33;
          float32x4_t v24 = vsubq_f32(v31, vmulq_n_f32(v33, v23));
          v24.i32[3] = 0;
          *v18++ = v24;
          --v15;
        }
        while (v15);
        if ((int)v17 >= 4)
        {
LABEL_26:
          float32x4_t result = off_1EB9734A0((uint64_t)v34, (uint64_t)&v33, v17, (uint64_t)&v32);
          float v27 = v32;
          goto LABEL_27;
        }
        uint64_t v25 = 0;
        int v26 = -1;
        float v27 = -3.4028e38;
        do
        {
          int8x16_t v28 = (int8x16_t)vmulq_f32(v34[v25], v33);
          float v29 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).f32[0];
          if (v29 > v27)
          {
            float v27 = v29;
            int v26 = v25;
          }
          ++v25;
        }
        while (v25 < v17);
      }
      float v32 = v27;
      float32x4_t result = v26;
LABEL_27:
      if (v27 > v12)
      {
        *a3 = v34[result];
        float v12 = v27;
      }
      v9 += 128;
      int v13 = v14;
    }
    while (v9 < v8);
  }
  return result;
}

uint64_t sub_1B6DE95F8(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a4 >= 1)
  {
    float32x4_t v4 = (float32x4_t *)result;
    uint64_t v32 = 0;
    uint64_t v30 = a4;
    while (1)
    {
      float v35 = 0.0;
      uint64_t v5 = v4[7].u32[3];
      if ((int)v5 >= 1) {
        break;
      }
LABEL_30:
      if (++v32 == v30) {
        return result;
      }
    }
    int v6 = 0;
    float32x4_t v7 = (float *)v4[10].i64[1];
    int v8 = (float32x4_t *)v4[8].i64[1];
    int v9 = v4[7].i32[3];
    float v10 = -1.0e18;
    uint64_t v11 = (float32x4_t *)(a2 + 16 * v32);
    while (1)
    {
      int v12 = v9 - 128;
      if (v9 >= 128) {
        int v9 = 128;
      }
      if (v9 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v9;
      }
      if ((int)v5 - v6 >= 128) {
        int v14 = 128;
      }
      else {
        int v14 = v5 - v6;
      }
      uint64_t v15 = v14;
      if ((int)v5 - v6 < 1)
      {
        if (v14 >= 4) {
          goto LABEL_26;
        }
        int v25 = -1;
        float v26 = -3.4028e38;
      }
      else
      {
        int v33 = v12;
        uint64_t v16 = v5;
        float32x4_t v17 = *v11;
        uint64_t v18 = v36;
        do
        {
          float v19 = *v7++;
          float32x4_t v20 = vmulq_n_f32(vmulq_f32(v17, v4[2]), v19);
          v20.i32[3] = 0;
          float32x4_t v21 = *v8++;
          float32x4_t v34 = vaddq_f32(v21, v20);
          float v22 = (*(float (**)(float32x4_t *))(v4->i64[0] + 96))(v4);
          float32x4_t v17 = *v11;
          float32x4_t v23 = vsubq_f32(v34, vmulq_n_f32(*v11, v22));
          v23.i32[3] = 0;
          *v18++ = v23;
          --v13;
        }
        while (v13);
        if ((int)v15 >= 4)
        {
          uint64_t v5 = v16;
          int v12 = v33;
LABEL_26:
          float32x4_t result = off_1EB9734A0((uint64_t)v36, (uint64_t)v11, v15, (uint64_t)&v35);
          float v26 = v35;
          goto LABEL_27;
        }
        uint64_t v24 = 0;
        int v25 = -1;
        float v26 = -3.4028e38;
        uint64_t v5 = v16;
        do
        {
          int8x16_t v27 = (int8x16_t)vmulq_f32(v36[v24], *v11);
          float v28 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0];
          if (v28 > v26)
          {
            float v26 = v28;
            int v25 = v24;
          }
          ++v24;
        }
        while (v24 < v15);
        int v12 = v33;
      }
      float v35 = v26;
      float32x4_t result = v25;
LABEL_27:
      if (v26 > v10)
      {
        *(float32x4_t *)(a3 + 16 * v3sub_1B6DC4968((unsigned int *)this + 2) = v36[result];
        float v10 = v26;
      }
      v6 += 128;
      int v9 = v12;
      if (v6 >= (int)v5) {
        goto LABEL_30;
      }
    }
  }
  return result;
}

float32_t sub_1B6DE985C(float32x4_t *a1, float32x2_t *a2, float a3)
{
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  float32x4_t v4 = vmulq_f32(vsubq_f32(a1[6], a1[5]), v3);
  float v5 = a3 / 12.0;
  v3.f32[0] = (float)(v4.f32[2] + v4.f32[2]) * (float)(v4.f32[2] + v4.f32[2]);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v4.f32);
  float32x2_t v6 = (float32x2_t)vrev64_s32(*(int32x2_t *)v4.f32);
  *a2 = vmul_n_f32(vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.f32, 0), v6, v6), v5);
  float32_t result = v5
         * vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v4, *(float32x2_t *)&v4).i32[1]), v4.f32[0], v4.f32[0]);
  a2[1].f32[0] = result;
  a2[1].i32[1] = 0;
  return result;
}

const char *sub_1B6DE98B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DE46E8(a1, a2, a3);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 32 + i) = *(_DWORD *)(a1 + 48 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 16 + j) = *(_DWORD *)(a1 + 32 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 64);
  uint64_t v8 = *(unsigned int *)(a1 + 124);
  if (v8)
  {
    *(void *)(a2 + 56) = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 136));
    *(_DWORD *)(a2 + 64) = v8;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 20, v8);
    uint64_t v10 = *(void *)(a1 + 136);
    if ((int)v8 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v13 = *(void *)(a1 + 168);
      uint64_t v14 = *(void *)(a1 + 136);
      do
      {
        for (uint64_t k = 0; k != 16; k += 4)
          *(_DWORD *)(v12 + k) = *(_DWORD *)(v14 + k);
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 4 * v11++);
        v12 += 20;
        v14 += 16;
      }
      while (v11 != v8);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)a3 + 40))(a3, v9, "btPositionAndRadius", 1497453121, v10);
  }
  else
  {
    *(void *)(a2 + 56) = 0;
    *(_DWORD *)(a2 + 64) = 0;
  }
  return "btMultiSphereShapeData";
}

double sub_1B6DE9A3C(void *a1)
{
  *a1 = &unk_1F0FB14A8;
  uint64_t v2 = (uint64_t)(a1 + 15);
  sub_1B6441B40((uint64_t)(a1 + 19));
  sub_1B6441B40(v2);

  return nullsub_1(a1);
}

void sub_1B6DE9AA0(void *a1)
{
  *a1 = &unk_1F0FB14A8;
  uint64_t v2 = (uint64_t)(a1 + 15);
  sub_1B6441B40((uint64_t)(a1 + 19));
  sub_1B6441B40(v2);
  nullsub_1(a1);

  sub_1B6E073C4(v3);
}

const char *sub_1B6DE9B08()
{
  return "MultiSphere";
}

uint64_t sub_1B6DE9B14()
{
  return 72;
}

void sub_1B6DE9B1C(uint64_t a1)
{
  sub_1B6DCC688(a1);
  *uint64_t v1 = &unk_1F0FB0AB0;
}

void sub_1B6DE9B54(void *a1)
{
  uint64_t v1 = sub_1B6DCCA5C(a1);

  sub_1B6E073C4((uint64_t)v1);
}

void sub_1B6DE9B7C(float32x4_t *a1, uint64_t a2, int a3, float32x4_t *a4, float32x4_t *a5, int32x2_t a6)
{
  a1[4].i8[8] = a3;
  if (a3)
  {
    a6.i32[0] = 1.0;
    float32x4_t v8 = sub_1B6DCC948(a1, a4, a5, a6);
    float32x2_t v59 = &unk_1F0FCCE90;
    int8x16_t v60 = a1 + 9;
    float v61 = a1;
    (*(void (**)(uint64_t, void **, float32x4_t *, float32x4_t *, float32x4_t))(*(void *)a2 + 16))(a2, &v59, a1 + 1, a1 + 2, v8);
    uint64_t v9 = a1[9].i32[1];
    __int32 v10 = 2 * v9;
    int v11 = a1[11].i32[1];
    if (v11 < 2 * (int)v9)
    {
      uint64_t v12 = v11;
      if (a1[11].i32[2] < v10)
      {
        if (v9)
        {
          uint64_t v13 = sub_1B6E073B8(32 * v9, 16);
          int v11 = a1[11].i32[1];
        }
        else
        {
          uint64_t v13 = 0;
        }
        if (v11 >= 1)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 16 * v11;
          do
          {
            *(_OWORD *)(v13 + v18) = *(_OWORD *)(a1[12].i64[0] + v18);
            v18 += 16;
          }
          while (v19 != v18);
        }
        uint64_t v20 = a1[12].i64[0];
        if (v20 && a1[12].i8[8]) {
          sub_1B6E073C4(v20);
        }
        a1[12].i8[8] = 1;
        a1[12].i64[0] = v13;
        a1[11].i32[2] = v10;
      }
      uint64_t v21 = 16 * v12;
      uint64_t v22 = v10 - v12;
      do
      {
        float32x4_t v23 = (void *)(a1[12].i64[0] + v21);
        *float32x4_t v23 = 0;
        v23[1] = 0;
        v21 += 16;
        --v22;
      }
      while (v22);
    }
    a1[11].i32[1] = v10;
  }
  else
  {
    float32x2_t v59 = &unk_1F0FCCEB8;
    int8x16_t v60 = a1 + 5;
    long long v57 = xmmword_1B6ECFDA0;
    long long v58 = xmmword_1B6ECFDB0;
    (*(void (**)(uint64_t, void **, long long *, long long *))(*(void *)a2 + 16))(a2, &v59, &v58, &v57);
    uint64_t v9 = a1[5].i32[1];
    __int32 v14 = 2 * v9;
    int v15 = a1[7].i32[1];
    if (v15 < 2 * (int)v9)
    {
      uint64_t v16 = v15;
      if (a1[7].i32[2] < v14)
      {
        if (v9)
        {
          uint64_t v17 = sub_1B6E073B8(v9 << 7, 16);
          int v15 = a1[7].i32[1];
        }
        else
        {
          uint64_t v17 = 0;
        }
        if (v15 >= 1)
        {
          uint64_t v24 = 0;
          unint64_t v25 = (unint64_t)v15 << 6;
          do
          {
            float v26 = (_OWORD *)(v17 + v24);
            int8x16_t v27 = (_OWORD *)(a1[8].i64[0] + v24);
            *float v26 = *v27;
            v26[1] = v27[1];
            long long v28 = v27[3];
            void v26[2] = v27[2];
            _OWORD v26[3] = v28;
            v24 += 64;
          }
          while (v25 != v24);
        }
        uint64_t v29 = a1[8].i64[0];
        if (v29 && a1[8].i8[8]) {
          sub_1B6E073C4(v29);
        }
        a1[8].i8[8] = 1;
        a1[8].i64[0] = v17;
        a1[7].i32[2] = v14;
      }
      uint64_t v30 = v16 << 6;
      uint64_t v31 = v14 - v16;
      do
      {
        uint64_t v32 = (_OWORD *)(a1[8].i64[0] + v30);
        _OWORD v32[2] = 0uLL;
        v32[3] = 0uLL;
        _OWORD *v32 = 0uLL;
        v32[1] = 0uLL;
        v30 += 64;
        --v31;
      }
      while (v31);
    }
    a1[7].i32[1] = v14;
  }
  double v33 = nullsub_1(&v59);
  a1[4].i32[1] = 0;
  if (v9)
  {
    sub_1B6DCC714((uint64_t)a1, 0, v9, v33, v34, v35, v36, v37, v38, v39, v40);
    if (a1[4].i8[8] && !a1[13].i32[3])
    {
      int v41 = 1;
      if (!a1[14].i32[0])
      {
        uint64_t v42 = sub_1B6E073B8(32, 16);
        uint64_t v43 = v42;
        uint64_t v44 = a1[13].u32[3];
        if ((int)v44 >= 1)
        {
          uint64_t v45 = 0;
          uint64_t v46 = 32 * v44;
          do
          {
            int8x16_t v47 = (_OWORD *)(v42 + v45);
            float32x4_t v48 = (_OWORD *)(a1[14].i64[1] + v45);
            long long v49 = v48[1];
            *int8x16_t v47 = *v48;
            v47[1] = v49;
            v45 += 32;
          }
          while (v46 != v45);
        }
        uint64_t v50 = a1[14].i64[1];
        if (v50 && a1[15].i8[0]) {
          sub_1B6E073C4(v50);
        }
        a1[15].i8[0] = 1;
        a1[14].i64[1] = v43;
        a1[14].i32[0] = 1;
        int v41 = a1[13].i32[3] + 1;
      }
      a1[13].i32[3] = v41;
      uint64_t v51 = a1[14].i64[1];
      uint64_t v52 = a1[12].i64[0];
      *(_WORD *)uint64_t v51 = *(_WORD *)v52;
      *(_WORD *)(v51 + sub_1B6DC4968((unsigned int *)this + 2) = *(_WORD *)(v52 + 2);
      *(_WORD *)(v51 + 4) = *(_WORD *)(v52 + 4);
      *(_WORD *)(v51 + 6) = *(_WORD *)(v52 + 6);
      *(_WORD *)(v51 + 8) = *(_WORD *)(v52 + 8);
      *(_WORD *)(v51 + 10) = *(_WORD *)(v52 + 10);
      *(_DWORD *)(v51 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
      int v53 = *(_DWORD *)(v52 + 12);
      if (v53 < 0) {
        int v54 = -v53;
      }
      else {
        int v54 = 1;
      }
      *(_DWORD *)(v51 + 16) = v54;
    }
    a1[15].i32[2] = a1[13].i32[3];
    uint64_t v55 = a1[10].i64[0];
    if (v55 && a1[10].i8[8]) {
      sub_1B6E073C4(v55);
    }
    a1[10].i8[8] = 1;
    a1[10].i64[0] = 0;
    a1[9].i32[1] = 0;
    a1[9].i32[2] = 0;
    uint64_t v56 = a1[6].i64[0];
    if (v56)
    {
      if (a1[6].i8[8]) {
        sub_1B6E073C4(v56);
      }
    }
    a1[6].i8[8] = 1;
    a1[6].i64[0] = 0;
    a1[5].i32[1] = 0;
    a1[5].i32[2] = 0;
  }
}

void sub_1B6DE9F90(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

float32x4_t sub_1B6DE9FC8(uint64_t a1, float32x4_t *a2, int a3, int a4)
{
  float32x4_t v6 = a2[1];
  float32x4_t v7 = vminq_f32(vminq_f32(*a2, (float32x4_t)xmmword_1B6ECFDA0), v6);
  float32x4_t v8 = vmaxq_f32(vmaxq_f32(*a2, (float32x4_t)xmmword_1B6ECFDB0), v6);
  float32x4_t v9 = a2[2];
  float32x4_t v10 = vminq_f32(v7, v9);
  float32x4_t v11 = vmaxq_f32(v8, v9);
  int8x16_t v12 = (int8x16_t)v10;
  *(float *)v12.i32 = v10.f32[0] + -0.001;
  int8x16_t v13 = (int8x16_t)v11;
  *(float *)v13.i32 = v11.f32[0] + 0.001;
  v9.i32[0] = 990057071;
  int8x16_t v14 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v9, vsubq_f32(v11, v10)), 0);
  float32x4_t v15 = (float32x4_t)vbslq_s8(v14, v12, (int8x16_t)v10);
  float32x4_t v16 = (float32x4_t)vbslq_s8(v14, v13, (int8x16_t)v11);
  if ((float)(v16.f32[1] - v15.f32[1]) < 0.002)
  {
    v16.f32[1] = v16.f32[1] + 0.001;
    v15.f32[1] = v15.f32[1] + -0.001;
  }
  if ((float)(v16.f32[2] - v15.f32[2]) < 0.002)
  {
    v16.f32[2] = v16.f32[2] + 0.001;
    v15.f32[2] = v15.f32[2] + -0.001;
  }
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v17 = *(float32x4_t **)(a1 + 16);
  float32x4_t v19 = v17[1];
  float32x4_t v20 = v17[3];
  int v21 = *(_DWORD *)(v18 + 4);
  if (v21 == *(_DWORD *)(v18 + 8))
  {
    int v22 = v21 ? 2 * v21 : 1;
    if (v21 < v22)
    {
      float32x4_t v36 = v16;
      float32x4_t v37 = v15;
      float32x4_t v34 = v19;
      float32x4_t v35 = v20;
      if (v22)
      {
        uint64_t v23 = sub_1B6E073B8(16 * v22, 16);
        float32x4_t v19 = v34;
        float32x4_t v20 = v35;
        float32x4_t v16 = v36;
        float32x4_t v15 = v37;
        uint64_t v24 = v23;
        int v21 = *(_DWORD *)(v18 + 4);
      }
      else
      {
        uint64_t v24 = 0;
      }
      if (v21 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 16 * v21;
        do
        {
          *(_OWORD *)(v24 + v25) = *(_OWORD *)(*(void *)(v18 + 16) + v25);
          v25 += 16;
        }
        while (v26 != v25);
      }
      uint64_t v27 = *(void *)(v18 + 16);
      if (v27 && *(unsigned char *)(v18 + 24))
      {
        sub_1B6E073C4(v27);
        float32x4_t v19 = v34;
        float32x4_t v20 = v35;
        float32x4_t v16 = v36;
        float32x4_t v15 = v37;
      }
      *(unsigned char *)(v18 + 24) = 1;
      *(void *)(v18 + 16) = v24;
      *(_DWORD *)(v18 + 8) = v22;
      int v21 = *(_DWORD *)(v18 + 4);
    }
  }
  float32x4_t v28 = vmulq_f32(v20, vsubq_f32(v16, v19));
  int v29 = (int)(float)(v28.f32[2] + 1.0) | 1;
  int v30 = (int)(float)(v28.f32[1] + 1.0) | 1;
  int v31 = (int)(float)(v28.f32[0] + 1.0) | 1;
  float32x4_t result = vmulq_f32(v20, vsubq_f32(v15, v19));
  uint64_t v33 = *(void *)(v18 + 16) + 16 * v21;
  *(_WORD *)uint64_t v33 = (int)result.f32[0] & 0xFFFE;
  *(_WORD *)(v33 + sub_1B6DC4968((unsigned int *)this + 2) = (int)result.f32[1] & 0xFFFE;
  *(_WORD *)(v33 + 4) = (int)result.f32[2] & 0xFFFE;
  *(_WORD *)(v33 + 6) = v31;
  *(_WORD *)(v33 + 8) = v30;
  *(_WORD *)(v33 + 10) = v29;
  *(_DWORD *)(v33 + 1sub_1B6DC4968((unsigned int *)this + 2) = a4 | (a3 << 21);
  ++*(_DWORD *)(v18 + 4);
  return result;
}

void sub_1B6DEA208(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

float32x4_t sub_1B6DEA240(uint64_t a1, float32x4_t *a2, __int32 a3, __int32 a4)
{
  float32x4_t v6 = *a2;
  float32x4_t v7 = a2[1];
  float32x4_t v8 = a2[2];
  uint64_t v9 = *(void *)(a1 + 8);
  int v10 = *(_DWORD *)(v9 + 4);
  if (v10 == *(_DWORD *)(v9 + 8))
  {
    int v11 = v10 ? 2 * v10 : 1;
    if (v10 < v11)
    {
      float32x4_t v23 = a2[1];
      float32x4_t v24 = *a2;
      float32x4_t v22 = a2[2];
      if (v11)
      {
        uint64_t v12 = sub_1B6E073B8((uint64_t)v11 << 6, 16);
        float32x4_t v8 = v22;
        float32x4_t v7 = v23;
        float32x4_t v6 = v24;
        uint64_t v13 = v12;
        int v10 = *(_DWORD *)(v9 + 4);
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (v10 >= 1)
      {
        uint64_t v14 = 0;
        unint64_t v15 = (unint64_t)v10 << 6;
        do
        {
          float32x4_t v16 = (_OWORD *)(v13 + v14);
          uint64_t v17 = (_OWORD *)(*(void *)(v9 + 16) + v14);
          *float32x4_t v16 = *v17;
          v16[1] = v17[1];
          long long v18 = v17[3];
          void v16[2] = v17[2];
          void v16[3] = v18;
          v14 += 64;
        }
        while (v15 != v14);
      }
      uint64_t v19 = *(void *)(v9 + 16);
      if (v19 && *(unsigned char *)(v9 + 24))
      {
        sub_1B6E073C4(v19);
        float32x4_t v8 = v22;
        float32x4_t v7 = v23;
        float32x4_t v6 = v24;
      }
      *(unsigned char *)(v9 + 24) = 1;
      *(void *)(v9 + 16) = v13;
      *(_DWORD *)(v9 + 8) = v11;
      int v10 = *(_DWORD *)(v9 + 4);
    }
  }
  float32x4_t result = vmaxq_f32(vmaxq_f32(vmaxq_f32(v6, (float32x4_t)xmmword_1B6ECFDB0), v7), v8);
  int v21 = (float32x4_t *)(*(void *)(v9 + 16) + ((uint64_t)v10 << 6));
  *int v21 = vminq_f32(vminq_f32(vminq_f32(v6, (float32x4_t)xmmword_1B6ECFDA0), v7), v8);
  v21[1] = result;
  v21[2].i32[0] = -1;
  v21[2].i32[1] = a3;
  v21[2].i32[2] = a4;
  ++*(_DWORD *)(v9 + 4);
  return result;
}

void sub_1B6DEA398(uint64_t a1)
{
  sub_1B6DE65E4(a1);
  *uint64_t v1 = &unk_1F0FB1F08;
  v1[9] = 0;
}

double sub_1B6DEA3D0(void *a1)
{
  *a1 = &unk_1F0FB1F08;
  uint64_t v2 = (void (***)(void))a1[9];
  if (v2)
  {
    (**v2)(v2);
    sub_1B6E073C4(a1[9]);
  }

  return nullsub_1(a1);
}

uint64_t sub_1B6DEA45C(uint64_t a1, int a2)
{
  uint64_t v2 = (float32x4_t **)a1;
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void (****)(void))(a1 + 72);
  if (v3)
  {
    (**v3)(v3);
    sub_1B6E073C4((uint64_t)v2[9]);
  }
  uint64_t v4 = sub_1B6E073B8(192, 16);
  double v5 = sub_1B6DE6C6C(v4);
  v2[9] = v6;
  char v225 = 1;
  uint64_t v224 = 0;
  uint64_t v223 = 0;
  if (((int (*)(float32x4_t **, double))(*v2)[12].i64[0])(v2, v5) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
    while (1)
    {
      if (v12 == v11)
      {
        if (v11) {
          uint64_t v14 = (2 * v11);
        }
        else {
          uint64_t v14 = 1;
        }
        if ((int)v11 < (int)v14)
        {
          if (v14) {
            uint64_t v15 = sub_1B6E073B8(16 * (int)v14, 16);
          }
          else {
            uint64_t v15 = 0;
          }
          if ((int)v11 >= 1)
          {
            uint64_t v17 = 0;
            do
            {
              *(_OWORD *)(v15 + v17) = *(_OWORD *)(v224 + v17);
              v17 += 16;
            }
            while (16 * v11 != v17);
            uint64_t v10 = v224;
          }
          if (v10) {
            BOOL v18 = v225 == 0;
          }
          else {
            BOOL v18 = 1;
          }
          if (!v18) {
            sub_1B6E073C4(v10);
          }
          char v225 = 1;
          uint64_t v224 = v15;
          HIDWORD(v223) = v14;
          int v16 = v223;
          goto LABEL_26;
        }
        uint64_t v15 = v10;
        int v16 = v11;
      }
      else
      {
        uint64_t v15 = v10;
        int v16 = v12;
      }
      uint64_t v14 = v11;
LABEL_26:
      int v19 = v16 + 1;
      LODWORD(v223) = v16 + 1;
      ((void (*)(float32x4_t **, uint64_t, uint64_t))(*v2)[13].i64[1])(v2, v13, v15 + 16 * v12);
      uint64_t v13 = (v13 + 1);
      uint64_t v10 = v15;
      uint64_t v11 = v14;
      int v12 = v19;
      if ((int)v13 >= ((int (*)(float32x4_t **))(*v2)[12].i64[0])(v2)) {
        goto LABEL_29;
      }
    }
  }
  int v19 = 0;
  uint64_t v15 = 0;
LABEL_29:
  char v215 = 1;
  uint64_t v214 = 0;
  uint64_t v213 = 0;
  char v218 = 1;
  uint64_t v217 = 0;
  uint64_t v216 = 0;
  char v221 = 1;
  uint64_t v220 = 0;
  uint64_t v219 = 0;
  if (a2)
  {
    v227.i8[8] = 1;
    v227.i64[0] = 0;
    *(uint64_t *)((char *)v226.i64 + 4) = 0;
    sub_1B6E0EA24((uint64_t)v222, (uint64_t)&v226);
    char v211 = 1;
    uint64_t v210 = 0;
    uint64_t v209 = 0;
    if (v226.i32[1] >= 1)
    {
      uint64_t v20 = 0;
      do
      {
        long long v187 = *(_OWORD *)(v227.i64[0] + 16 * v20);
        float v21 = ((float (*)(float32x4_t **))(*v2)[6].i64[0])(v2);
        int v22 = v209;
        if (v209 == HIDWORD(v209))
        {
          int v23 = v209 ? 2 * v209 : 1;
          if ((int)v209 < v23)
          {
            if (v23)
            {
              uint64_t v24 = sub_1B6E073B8(16 * v23, 16);
              int v22 = v209;
            }
            else
            {
              uint64_t v24 = 0;
            }
            if (v22 >= 1)
            {
              uint64_t v25 = 0;
              uint64_t v26 = 16 * v22;
              do
              {
                *(_OWORD *)(v24 + v25) = *(_OWORD *)(v210 + v25);
                v25 += 16;
              }
              while (v26 != v25);
            }
            if (v210) {
              BOOL v27 = v211 == 0;
            }
            else {
              BOOL v27 = 1;
            }
            if (!v27) {
              sub_1B6E073C4(v210);
            }
            char v211 = 1;
            uint64_t v210 = v24;
            HIDWORD(v209) = v23;
            int v22 = v209;
          }
        }
        long long v28 = v187;
        *((float *)&v28 + 3) = *((float *)&v187 + 3) - v21;
        *(_OWORD *)(v210 + 16 * v2sub_1B6DC4968((unsigned int *)this + 2) = v28;
        LODWORD(v209) = v209 + 1;
        ++v20;
      }
      while (v20 < v226.i32[1]);
    }
    char v207 = 1;
    uint64_t v206 = 0;
    int v204 = 0;
    int v205 = 0;
    sub_1B6E0ED4C((uint64_t)v208, (uint64_t)v203);
    sub_1B6E0DF48((uint64_t)v212, v206, 0, 16, v204, 0.0, 0.0, v29, v30, v31);
    if (v206 && v207) {
      sub_1B6E073C4(v206);
    }
    if (v210 && v211) {
      sub_1B6E073C4(v210);
    }
    if (v227.i64[0] && v227.i8[8]) {
      sub_1B6E073C4(v227.i64[0]);
    }
  }
  else
  {
    sub_1B6E0DF48((uint64_t)v212, v15, 0, 16, v19, 0.0, 0.0, v7, v8, v9);
  }
  uint64_t v32 = v219;
  if ((int)v219 < 1) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = sub_1B6E073B8(16 * v219, 16);
  }
  uint64_t v183 = v33;
  char v211 = 1;
  uint64_t v210 = 0;
  HIDWORD(v209) = 0;
  int8x16_t v226 = 0u;
  int8x16_t v227 = 0u;
  long long v228 = 0u;
  v227.i8[8] = 1;
  v226.i32[1] = 0;
  if ((v32 & 0x80000000) != 0)
  {
    uint64_t v36 = 48 * (int)v32;
    uint64_t v37 = (int)v32 + 1;
    do
      uint64_t v36 = sub_1B6441B40(v36) + 48;
    while (v37++);
    goto LABEL_70;
  }
  if (!v32)
  {
LABEL_70:
    uint64_t v34 = 0;
    goto LABEL_71;
  }
  uint64_t v34 = sub_1B6E073B8(48 * v32, 16);
  uint64_t v35 = 0;
  char v211 = 1;
  uint64_t v210 = v34;
  HIDWORD(v209) = v32;
  do
  {
    *(_OWORD *)(sub_1B6DEC7B4(v34 + v35, (uint64_t)&v226) + 3sub_1B6DC4968((unsigned int *)this + 2) = v228;
    v35 += 48;
  }
  while (48 * v32 != v35);
LABEL_71:
  LODWORD(v209) = v32;
  if (v227.i64[0]) {
    BOOL v39 = v227.u8[8] == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (!v39) {
    sub_1B6E073C4(v227.i64[0]);
  }
  uint64_t v40 = v213;
  int v41 = v2[9];
  int v42 = v41->i32[3];
  if (v42 < (int)v213 && v41[1].i32[0] < (int)v213)
  {
    if (v213)
    {
      uint64_t v43 = sub_1B6E073B8(16 * (int)v213, 16);
      int v42 = v41->i32[3];
    }
    else
    {
      uint64_t v43 = 0;
    }
    if (v42 >= 1)
    {
      uint64_t v44 = 0;
      uint64_t v45 = 16 * v42;
      do
      {
        *(_OWORD *)(v43 + v44) = *(_OWORD *)(v41[1].i64[1] + v44);
        v44 += 16;
      }
      while (v45 != v44);
    }
    uint64_t v46 = v41[1].i64[1];
    if (v46 && v41[2].i8[0]) {
      sub_1B6E073C4(v46);
    }
    v41[2].i8[0] = 1;
    v41[1].i64[1] = v43;
    v41[1].i32[0] = v40;
  }
  v41->i32[3] = v40;
  if ((int)v40 >= 1)
  {
    uint64_t v47 = 0;
    do
    {
      *(_OWORD *)(v2[9][1].i64[1] + v47) = *(_OWORD *)(v214 + v47);
      v47 += 16;
    }
    while (16 * v40 != v47);
  }
  if ((int)v32 <= 0)
  {
    char v207 = 1;
    uint64_t v206 = 0;
    int v204 = 0;
    int v205 = 0;
    goto LABEL_310;
  }
  uint64_t v48 = 0;
  uint64_t v188 = v32;
  do
  {
    uint64_t v49 = 0;
    unint64_t v50 = v217 + 12 * *(int *)(v220 + 4 * v48);
    uint64_t v51 = v34 + 48 * v48;
    unint64_t v52 = v50;
    do
    {
      while (1)
      {
        int v53 = *(_DWORD *)(v52 + 12 * *(int *)(v52 + 4) + 8);
        LODWORD(v54) = *(_DWORD *)(v51 + 4);
        if (v54 == *(_DWORD *)(v51 + 8))
        {
          int v55 = v54 ? 2 * v54 : 1;
          if ((int)v54 < v55)
          {
            if (v55)
            {
              uint64_t v56 = sub_1B6E073B8(4 * v55, 16);
              LODWORD(v54) = *(_DWORD *)(v51 + 4);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v57 = *(void *)(v51 + 16);
            if ((int)v54 < 1)
            {
              if (!v57)
              {
LABEL_110:
                *(unsigned char *)(v51 + 24) = 1;
                *(void *)(v51 + 16) = v56;
                *(_DWORD *)(v51 + 8) = v55;
                LODWORD(v54) = *(_DWORD *)(v51 + 4);
                goto LABEL_111;
              }
            }
            else
            {
              uint64_t v54 = v54;
              long long v58 = (_DWORD *)v56;
              float32x2_t v59 = *(int **)(v51 + 16);
              do
              {
                int v60 = *v59++;
                *v58++ = v60;
                --v54;
              }
              while (v54);
            }
            if (*(unsigned char *)(v51 + 24)) {
              sub_1B6E073C4(v57);
            }
            *(void *)(v51 + 16) = 0;
            goto LABEL_110;
          }
        }
LABEL_111:
        *(_DWORD *)(*(void *)(v51 + 16) + 4 * (int)v54) = v53;
        ++*(_DWORD *)(v51 + 4);
        if ((int)v49 <= 1) {
          break;
        }
        float v65 = (int *)(v52 + 12 * *(int *)(v52 + 4));
        unint64_t v52 = (unint64_t)&v65[3 * *v65];
        uint64_t v49 = 2;
        if (v52 == v50) {
          goto LABEL_117;
        }
      }
      float32x4_t v61 = vsubq_f32(*(float32x4_t *)(v214 + 16 * *(int *)(v52 + 8)), *(float32x4_t *)(v214 + 16 * v53));
      v61.i32[3] = 0;
      int8x16_t v62 = (int8x16_t)vmulq_f32(v61, v61);
      uint64_t v63 = v49 + 1;
      *((float32x4_t *)&v226 + v49) = vmulq_n_f32(v61, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)).f32[0]));
      float v64 = (int *)(v52 + 12 * *(int *)(v52 + 4));
      unint64_t v52 = (unint64_t)&v64[3 * *v64];
      ++v49;
    }
    while (v52 != v50);
    if (v63 == 2)
    {
LABEL_117:
      *(int8x8_t *)v66.f32 = vext_s8(*(int8x8_t *)v226.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL), 4uLL);
      v66.i64[1] = v226.i64[0];
      *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v227.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL), 4uLL);
      v67.i64[1] = v227.i64[0];
      int8x16_t v68 = (int8x16_t)vsubq_f32(vmulq_f32((float32x4_t)v226, v67), vmulq_f32((float32x4_t)v227, v66));
      v69.i64[0] = vextq_s8(v68, v68, 4uLL).u64[0];
      v69.i64[1] = v68.u32[0];
      uint64_t v70 = v183;
      unsigned int v71 = (float32x4_t *)(v183 + 16 * v48);
      int8x16_t v72 = (int8x16_t)vmulq_f32(v69, v69);
      float32x4_t v73 = vmulq_n_f32(v69, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL)).f32[0]));
      float32x4_t *v71 = v73;
      uint64_t v34 = v210;
      float32x4_t v74 = (_DWORD *)(v210 + 48 * v48);
      v74[8] = v73.i32[0];
      v74[9] = v71->i32[1];
      v74[10] = v71->i32[2];
      v74[11] = 1900671690;
      goto LABEL_119;
    }
    uint64_t v70 = v183;
    float v75 = (void *)(v183 + 16 * v48);
    *float v75 = 0;
    v75[1] = 0;
    uint64_t v34 = v210;
LABEL_119:
    uint64_t v76 = v34 + 48 * v48;
    uint64_t v77 = *(unsigned int *)(v76 + 4);
    float v78 = 1.0e30;
    if ((int)v77 >= 1)
    {
      uint64_t v79 = *(int **)(v76 + 16);
      float v78 = 1.0e30;
      do
      {
        uint64_t v80 = *v79++;
        int8x16_t v81 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v2[9][1].i64[1] + 16 * v80), *(float32x4_t *)(v70 + 16 * v48));
        float v82 = vadd_f32(vpadd_f32(*(float32x2_t *)v81.i8, *(float32x2_t *)v81.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)).f32[0];
        if (v78 > v82) {
          float v78 = v82;
        }
        --v77;
      }
      while (v77);
    }
    *(float *)(v34 + 48 * v48++ + 44) = -v78;
  }
  while (v48 != v188);
  char v207 = 1;
  uint64_t v206 = 0;
  int v204 = 0;
  int v205 = 0;
  if ((int)v209 >= 1)
  {
    uint64_t v83 = 0;
    LODWORD(v84) = 0;
    int v85 = 0;
    while (2)
    {
      if (v84 == v205 && (!v84 ? (int v86 = 1) : (int v86 = 2 * v84), (int)v84 < v86))
      {
        if (v86)
        {
          uint64_t v87 = sub_1B6E073B8(4 * v86, 16);
          LODWORD(v84) = v204;
          uint64_t v83 = v206;
        }
        else
        {
          uint64_t v87 = 0;
        }
        if ((int)v84 >= 1)
        {
          uint64_t v84 = v84;
          float32x4_t v88 = (_DWORD *)v87;
          int v89 = (int *)v83;
          do
          {
            int v90 = *v89++;
            *v88++ = v90;
            --v84;
          }
          while (v84);
          goto LABEL_141;
        }
        if (v83)
        {
LABEL_141:
          if (v207) {
            sub_1B6E073C4(v83);
          }
        }
        char v207 = 1;
        uint64_t v206 = v87;
        int v205 = v86;
        LODWORD(v84) = v204;
      }
      else
      {
        uint64_t v87 = v83;
      }
      *(_DWORD *)(v87 + 4 * (int)v84) = v85;
      LODWORD(v84) = ++v204;
      ++v85;
      uint64_t v83 = v87;
      if (v85 < (int)v209) {
        continue;
      }
      break;
    }
    if (v84)
    {
      while (2)
      {
        int v91 = *(_DWORD *)(v206 + 4 * ((int)v84 - 1));
        unsigned int v92 = (int *)sub_1B6E073B8(4, 16);
        int *v92 = v91;
        int v93 = v204--;
        uint64_t v94 = (v93 - 2);
        if (v93 < 2)
        {
          LODWORD(v97) = 1;
          goto LABEL_281;
        }
        uint64_t v95 = v210 + 48 * v91;
        v96.i64[0] = *(void *)(v95 + 32);
        v96.i64[1] = *(unsigned int *)(v95 + 40);
        LODWORD(v97) = 1;
        int v98 = 1;
        float32x4_t v189 = v96;
LABEL_148:
        v226.i32[0] = 0;
        v226.i32[0] = *(_DWORD *)(v206 + 4 * v94);
        uint64_t v99 = v210 + 48 * v226.i32[0];
        v100.i64[0] = *(void *)(v99 + 32);
        v100.i64[1] = *(unsigned int *)(v99 + 40);
        int8x16_t v101 = (int8x16_t)vmulq_f32(v96, v100);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)).f32[0] > 0.999)
        {
          if (v97 == v98)
          {
            if (v97) {
              int v98 = 2 * v97;
            }
            else {
              int v98 = 1;
            }
            if ((int)v97 >= v98)
            {
              uint64_t v102 = (uint64_t)v92;
              int v98 = v97;
            }
            else
            {
              if (v98) {
                uint64_t v102 = sub_1B6E073B8(4 * v98, 16);
              }
              else {
                uint64_t v102 = 0;
              }
              if ((int)v97 < 1)
              {
                if (v92) {
                  goto LABEL_164;
                }
              }
              else
              {
                uint64_t v103 = v97;
                char v104 = (_DWORD *)v102;
                float32x2_t v105 = v92;
                do
                {
                  int v106 = *v105++;
                  *v104++ = v106;
                  --v103;
                }
                while (v103);
LABEL_164:
                sub_1B6E073C4((uint64_t)v92);
              }
            }
          }
          else
          {
            uint64_t v102 = (uint64_t)v92;
          }
          *(_DWORD *)(v102 + 4 * (int)v97) = v226.i32[0];
          LODWORD(v97) = v97 + 1;
          sub_1B6DEB6B0((uint64_t)v203, &v226);
          unsigned int v92 = (int *)v102;
          float32x4_t v96 = v189;
        }
        BOOL v144 = v94-- <= 0;
        if (v144)
        {
          if ((int)v97 <= 1) {
            goto LABEL_280;
          }
          int v107 = 0;
          uint64_t v108 = 0;
          char v202 = 1;
          uint64_t v201 = 0;
          unsigned int v199 = 0;
          int v200 = 0;
          float32x4_t v197 = 0uLL;
          uint64_t v184 = v210;
          float32x4_t v185 = v92;
          do
          {
            uint64_t v109 = v184 + 48 * v92[v108];
            v110.i64[0] = *(void *)(v109 + 32);
            v110.i64[1] = *(unsigned int *)(v109 + 40);
            float32x4_t v197 = vaddq_f32(v197, v110);
            int v111 = *(_DWORD *)(v109 + 4);
            if (v111 >= 1)
            {
              for (uint64_t i = 0; i < v111; ++i)
              {
                unsigned int v113 = *(_DWORD *)(*(void *)(v109 + 16) + 4 * i);
                long long v114 = *(_OWORD *)(v2[9][1].i64[1] + 16 * (int)v113);
                if (v107 < 1)
                {
LABEL_176:
                  if (v107 == v200)
                  {
                    int v118 = v107 ? 2 * v107 : 1;
                    if (v107 < v118)
                    {
                      long long v190 = *(_OWORD *)(v2[9][1].i64[1] + 16 * *(int *)(*(void *)(v109 + 16) + 4 * i));
                      if (v118)
                      {
                        uint64_t v119 = sub_1B6E073B8(32 * v118, 16);
                        int v107 = v199;
                      }
                      else
                      {
                        uint64_t v119 = 0;
                      }
                      if (v107 >= 1)
                      {
                        uint64_t v120 = 0;
                        uint64_t v121 = 32 * v107;
                        do
                        {
                          uint64_t v122 = v119 + v120;
                          uint64_t v123 = v201 + v120;
                          *(_OWORD *)uint64_t v122 = *(_OWORD *)(v201 + v120);
                          *(void *)(v122 + 16) = *(void *)(v123 + 16);
                          v120 += 32;
                        }
                        while (v121 != v120);
                      }
                      if (v201) {
                        BOOL v124 = v202 == 0;
                      }
                      else {
                        BOOL v124 = 1;
                      }
                      if (!v124) {
                        sub_1B6E073C4(v201);
                      }
                      char v202 = 1;
                      uint64_t v201 = v119;
                      int v200 = v118;
                      int v107 = v199;
                      long long v114 = v190;
                    }
                  }
                  unint64_t v52 = v52 | ((unint64_t)v113 << 32);
                  uint64_t v125 = v201 + 32 * v107;
                  *(_OWORD *)uint64_t v125 = v114;
                  *(void *)(v125 + 16) = v52;
                  int v107 = ++v199;
                  int v111 = *(_DWORD *)(v109 + 4);
                }
                else
                {
                  uint64_t v115 = v107;
                  float32x4_t v116 = (int *)(v201 + 20);
                  while (1)
                  {
                    int v117 = *v116;
                    v116 += 8;
                    if (v117 == v113) {
                      break;
                    }
                    if (!--v115) {
                      goto LABEL_176;
                    }
                  }
                }
              }
            }
            ++v108;
            unsigned int v92 = v185;
          }
          while (v108 != v97);
          v227.i8[8] = 1;
          v227.i64[0] = 0;
          *(uint64_t *)((char *)v226.i64 + 4) = 0;
          uint64_t v126 = v184 + 48 * *v185;
          for (uint64_t j = 8; j != 12; ++j)
            v226.i32[j] = *(_DWORD *)(v126 + j * 4);
          char v196 = 1;
          uint64_t v195 = 0;
          int v193 = 0;
          int v194 = 0;
          int8x16_t v128 = (int8x16_t)vmulq_f32(v197, v197);
          float32x4_t v197 = vmulq_n_f32(v197, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL)).f32[0]));
          sub_1B6DEB710((uint64_t)v198, (uint64_t)v192, &v197);
          if (v193 > 0)
          {
            uint64_t v129 = 0;
            int v130 = v226.i32[1];
            while (1)
            {
              uint64_t v131 = v195;
              if (v130 == v226.i32[2]) {
                break;
              }
LABEL_217:
              *(_DWORD *)(v227.i64[0] + 4 * v130) = *(_DWORD *)(v131 + 32 * v129 + 20);
              int v130 = ++v226.i32[1];
              uint64_t v139 = v199;
              if ((int)v199 >= 1)
              {
                int8x16_t v140 = (_DWORD *)(v201 + 20);
                uint64_t v141 = v199;
                while (*v140 != *(_DWORD *)(v195 + 32 * v129 + 20))
                {
                  v140 += 8;
                  if (!--v141) {
                    goto LABEL_223;
                  }
                }
                _DWORD *v140 = -1;
              }
LABEL_223:
              if (++v129 >= v193) {
                goto LABEL_227;
              }
            }
            if (v130) {
              int v132 = 2 * v130;
            }
            else {
              int v132 = 1;
            }
            if (v130 < v132)
            {
              if (v132)
              {
                uint64_t v133 = sub_1B6E073B8(4 * v132, 16);
                int v130 = v226.i32[1];
              }
              else
              {
                uint64_t v133 = 0;
              }
              uint64_t v134 = v227.i64[0];
              if (v130 >= 1)
              {
                uint64_t v135 = v130;
                float32x2_t v136 = (_DWORD *)v133;
                float32x2_t v137 = (int *)v227.i64[0];
                do
                {
                  int v138 = *v137++;
                  *v136++ = v138;
                  --v135;
                }
                while (v135);
                goto LABEL_213;
              }
              if (v227.i64[0])
              {
LABEL_213:
                if (v227.i8[8]) {
                  sub_1B6E073C4(v134);
                }
              }
              v227.i8[8] = 1;
              v227.i64[0] = v133;
              v226.i32[2] = v132;
              int v130 = v226.i32[1];
            }
            unsigned int v92 = v185;
            goto LABEL_217;
          }
          uint64_t v139 = v199;
LABEL_227:
          if ((int)v139 >= 1)
          {
            for (uint64_t k = 0; k != v139; ++k)
            {
              int v143 = *(_DWORD *)(v201 + 32 * k + 20);
              BOOL v144 = v143 == -1 || (int)v209 < 1;
              if (!v144)
              {
                uint64_t v145 = 0;
                while (2)
                {
                  uint64_t v146 = v97;
                  uint64_t v147 = v184 + 48 * v145;
                  int32x2_t v148 = v92;
                  while (1)
                  {
                    int v149 = *v148++;
                    if (v145 == v149) {
                      break;
                    }
                    if (!--v146)
                    {
                      uint64_t v150 = *(unsigned int *)(v147 + 4);
                      if ((int)v150 >= 1)
                      {
                        float32x2_t v151 = *(int **)(v147 + 16);
                        while (1)
                        {
                          int v152 = *v151++;
                          if (v152 == v143) {
                            break;
                          }
                          if (!--v150) {
                            goto LABEL_243;
                          }
                        }
                        char v153 = 0;
                        goto LABEL_266;
                      }
                      break;
                    }
                  }
LABEL_243:
                  if (++v145 != v209) {
                    continue;
                  }
                  break;
                }
              }
            }
          }
          float32x4_t v154 = v2[9];
          int v155 = v154[2].i32[3];
          if (v155 == v154[3].i32[0])
          {
            if (v155) {
              int v156 = 2 * v155;
            }
            else {
              int v156 = 1;
            }
            if (v155 < v156)
            {
              if (v156)
              {
                uint64_t v157 = sub_1B6E073B8(48 * v156, 16);
                int v155 = v154[2].i32[3];
              }
              else
              {
                uint64_t v157 = 0;
              }
              if (v155 >= 1)
              {
                uint64_t v158 = 0;
                uint64_t v159 = 48 * v155;
                do
                {
                  uint64_t v160 = v154[3].i64[1] + v158;
                  *(_OWORD *)(sub_1B6DEC7B4(v157 + v158, v160) + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v160 + 32);
                  v158 += 48;
                }
                while (v159 != v158);
                uint64_t v161 = v154[2].u32[3];
                if ((int)v161 >= 1)
                {
                  uint64_t v162 = 0;
                  uint64_t v163 = 48 * v161;
                  do
                  {
                    sub_1B6441B40(v154[3].i64[1] + v162);
                    v162 += 48;
                  }
                  while (v163 != v162);
                }
              }
              uint64_t v164 = v154[3].i64[1];
              if (v164 && v154[4].i8[0]) {
                sub_1B6E073C4(v164);
              }
              v154[4].i8[0] = 1;
              v154[3].i64[1] = v157;
              v154[3].i32[0] = v156;
              int v155 = v154[2].i32[3];
            }
            unsigned int v92 = v185;
          }
          *(_OWORD *)(sub_1B6DEC7B4(v154[3].i64[1] + 48 * v155, (uint64_t)&v226) + 3sub_1B6DC4968((unsigned int *)this + 2) = v228;
          ++v154[2].i32[3];
          char v153 = 1;
LABEL_266:
          if (v195) {
            BOOL v165 = v196 == 0;
          }
          else {
            BOOL v165 = 1;
          }
          if (!v165) {
            sub_1B6E073C4(v195);
          }
          if (v227.i64[0]) {
            BOOL v166 = v227.u8[8] == 0;
          }
          else {
            BOOL v166 = 1;
          }
          if (!v166) {
            sub_1B6E073C4(v227.i64[0]);
          }
          if (v201 && v202) {
            sub_1B6E073C4(v201);
          }
          if ((v153 & 1) == 0)
          {
LABEL_280:
            if ((int)v97 >= 1)
            {
LABEL_281:
              uint64_t v167 = 0;
              uint64_t v97 = v97;
              uint64_t v191 = v97;
              do
              {
                uint64_t v168 = v210 + 48 * v92[v167];
                sub_1B6DEC7B4((uint64_t)&v226, v168);
                long long v228 = *(_OWORD *)(v168 + 32);
                float32x2_t v169 = v2[9];
                int v170 = v169[2].i32[3];
                if (v170 == v169[3].i32[0])
                {
                  uint64_t v171 = v2;
                  float32x4_t v172 = v92;
                  if (v170) {
                    int v173 = 2 * v170;
                  }
                  else {
                    int v173 = 1;
                  }
                  if (v170 < v173)
                  {
                    if (v173)
                    {
                      uint64_t v174 = sub_1B6E073B8(48 * v173, 16);
                      int v170 = v169[2].i32[3];
                    }
                    else
                    {
                      uint64_t v174 = 0;
                    }
                    if (v170 >= 1)
                    {
                      uint64_t v175 = 0;
                      uint64_t v176 = 48 * v170;
                      do
                      {
                        uint64_t v177 = v169[3].i64[1] + v175;
                        *(_OWORD *)(sub_1B6DEC7B4(v174 + v175, v177) + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v177 + 32);
                        v175 += 48;
                      }
                      while (v176 != v175);
                      uint64_t v178 = v169[2].u32[3];
                      if ((int)v178 >= 1)
                      {
                        uint64_t v179 = 0;
                        uint64_t v180 = 48 * v178;
                        do
                        {
                          sub_1B6441B40(v169[3].i64[1] + v179);
                          v179 += 48;
                        }
                        while (v180 != v179);
                      }
                    }
                    uint64_t v181 = v169[3].i64[1];
                    if (v181 && v169[4].i8[0]) {
                      sub_1B6E073C4(v181);
                    }
                    v169[4].i8[0] = 1;
                    v169[3].i64[1] = v174;
                    v169[3].i32[0] = v173;
                    int v170 = v169[2].i32[3];
                  }
                  unsigned int v92 = v172;
                  uint64_t v2 = v171;
                  uint64_t v97 = v191;
                }
                *(_OWORD *)(sub_1B6DEC7B4(v169[3].i64[1] + 48 * v170, (uint64_t)&v226) + 3sub_1B6DC4968((unsigned int *)this + 2) = v228;
                ++v169[2].i32[3];
                if (v227.i64[0] && v227.i8[8]) {
                  sub_1B6E073C4(v227.i64[0]);
                }
                ++v167;
              }
              while (v167 != v97);
            }
          }
          if (v92) {
            sub_1B6E073C4((uint64_t)v92);
          }
          LODWORD(v84) = v204;
          if (!v204) {
            break;
          }
          continue;
        }
        goto LABEL_148;
      }
    }
  }
LABEL_310:
  sub_1B6DE6E8C(v2[9]);
  if (v206 && v207) {
    sub_1B6E073C4(v206);
  }
  sub_1B6DE7898((uint64_t)v208);
  if (v183) {
    sub_1B6E073C4(v183);
  }
  if (v220 && v221) {
    sub_1B6E073C4(v220);
  }
  char v221 = 1;
  uint64_t v220 = 0;
  uint64_t v219 = 0;
  if (v217 && v218) {
    sub_1B6E073C4(v217);
  }
  char v218 = 1;
  uint64_t v217 = 0;
  uint64_t v216 = 0;
  if (v214 && v215) {
    sub_1B6E073C4(v214);
  }
  if (v224 && v225) {
    sub_1B6E073C4(v224);
  }
  return 1;
}

uint64_t sub_1B6DEB6B0(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 4);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(result + 16);
    while (*(_DWORD *)(v4 + 4 * v3) != *a2)
    {
      if (v2 == ++v3) {
        return result;
      }
    }
    if ((int)v2 > (int)v3)
    {
      int v5 = v2 - 1;
      int v6 = *(_DWORD *)(v4 + 4 * v3);
      *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * v5);
      *(_DWORD *)(v4 + 4 * v5) = v6;
      --*(_DWORD *)(result + 4);
    }
  }
  return result;
}

void sub_1B6DEB710(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float v6 = a3->f32[2];
  float v7 = a3->f32[1];
  if (fabsf(v6) <= 0.70711)
  {
    float v11 = 1.0 / sqrtf((float)(v7 * v7) + (float)(a3->f32[0] * a3->f32[0]));
    v10.i64[1] = 0;
    v10.f32[0] = -(float)(v7 * v11);
    v10.f32[1] = a3->f32[0] * v11;
  }
  else
  {
    float v8 = 1.0 / sqrtf((float)(v6 * v6) + (float)(v7 * v7));
    float32_t v9 = -(float)(v6 * v8);
    v10.i32[0] = 0;
    v10.i32[3] = 0;
    v10.f32[1] = v9;
    v10.f32[2] = v7 * v8;
  }
  int v12 = *(_DWORD *)(a1 + 4);
  if (v12 >= 2)
  {
    uint64_t v25 = 0;
    for (uint64_t i = 0; i < v12; ++i)
    {
      BOOL v27 = *(float32x4_t **)(a1 + 16);
      float32x4_t v28 = v27[v25];
      int8x16_t v29 = (int8x16_t)vmulq_f32(v10, v28);
      float32x2_t v30 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
      float32x4_t v31 = *v27;
      int8x16_t v32 = (int8x16_t)vmulq_f32(v10, *v27);
      if (vcgt_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), v30).u8[0])
      {
        uint64_t v33 = v27[1].i64[0];
        *BOOL v27 = v28;
        v27[1].i64[0] = v27[v25 + 1].i64[0];
        uint64_t v34 = (float32x4_t *)(*(void *)(a1 + 16) + v25 * 16);
        *uint64_t v34 = v31;
        v34[1].i64[0] = v33;
        int v12 = *(_DWORD *)(a1 + 4);
      }
      v25 += 2;
    }
    uint64_t v35 = *(float32x4_t **)(a1 + 16);
    v35[1].i32[0] = -246811958;
    float32x4_t v36 = *v35;
    if (v12 >= 2)
    {
      v37.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
      v37.i64[1] = v10.i64[0];
      f32 = v35[3].f32;
      uint64_t v39 = v12 - 1;
      do
      {
        float32x4_t v40 = vsubq_f32(*(float32x4_t *)(f32 - 4), v36);
        int8x8_t v41 = (int8x8_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
        v40.i32[3] = 0;
        *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v40.f32, v41, 4uLL);
        v42.i64[1] = v40.i64[0];
        int8x16_t v43 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v42), vmulq_f32(v37, v40));
        v44.i64[0] = vextq_s8(v43, v43, 4uLL).u64[0];
        v44.i64[1] = v43.u32[0];
        int8x16_t v45 = (int8x16_t)vmulq_f32(*a3, v44);
        int8x16_t v46 = (int8x16_t)vmulq_f32(v40, v40);
        float *f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0]/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)).f32[0]);
        f32 += 8;
        --v39;
      }
      while (v39);
    }
    float32x4_t v89 = v36;
    sub_1B6DEC5DC(a1, &v89, 1, v12 - 1);
    uint64_t v47 = 0;
    int v48 = *(_DWORD *)(a2 + 4);
    char v49 = 1;
    do
    {
      char v50 = v49;
      uint64_t v51 = *(void *)(a1 + 16);
      if (v48 == *(_DWORD *)(a2 + 8))
      {
        int v52 = v48 ? 2 * v48 : 1;
        if (v48 < v52)
        {
          if (v52)
          {
            uint64_t v53 = sub_1B6E073B8(32 * v52, 16);
            int v48 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            uint64_t v53 = 0;
          }
          if (v48 >= 1)
          {
            uint64_t v54 = 0;
            uint64_t v55 = 32 * v48;
            do
            {
              uint64_t v56 = v53 + v54;
              uint64_t v57 = *(void *)(a2 + 16) + v54;
              *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
              *(void *)(v56 + 16) = *(void *)(v57 + 16);
              v54 += 32;
            }
            while (v55 != v54);
          }
          uint64_t v58 = *(void *)(a2 + 16);
          if (v58) {
            BOOL v59 = *(unsigned char *)(a2 + 24) == 0;
          }
          else {
            BOOL v59 = 1;
          }
          if (!v59) {
            sub_1B6E073C4(v58);
          }
          *(unsigned char *)(a2 + 24) = 1;
          *(void *)(a2 + 16) = v53;
          *(_DWORD *)(a2 + 8) = v52;
          int v48 = *(_DWORD *)(a2 + 4);
        }
      }
      char v49 = 0;
      uint64_t v60 = v51 + 32 * v47;
      uint64_t v61 = *(void *)(a2 + 16) + 32 * v48;
      *(_OWORD *)uint64_t v61 = *(_OWORD *)v60;
      *(void *)(v61 + 16) = *(void *)(v60 + 16);
      int v48 = *(_DWORD *)(a2 + 4) + 1;
      *(_DWORD *)(a2 + 4) = v48;
      uint64_t v47 = 1;
    }
    while ((v50 & 1) != 0);
    uint64_t v62 = *(unsigned int *)(a1 + 4);
    if (v62 != 2)
    {
      for (uint64_t j = 2; j != v62; ++j)
      {
        if (v48 >= 2)
        {
          uint64_t v64 = *(void *)(a2 + 16);
          uint64_t v65 = *(void *)(a1 + 16);
          float32x4_t v66 = (float32x4_t *)(v65 + 32 * j);
          int v67 = 2 * v48;
          uint64_t v68 = 32 * (v48 - 2);
          uint64_t v69 = 32 * (v48 - 1);
          while (1)
          {
            float32x4_t v70 = *(float32x4_t *)(v64 + v68);
            float32x4_t v71 = vsubq_f32(v70, *(float32x4_t *)(v64 + v69));
            int8x8_t v72 = (int8x8_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
            v71.i32[3] = 0;
            float32x4_t v73 = *v66;
            float32x4_t v74 = vsubq_f32(v70, *v66);
            int8x8_t v75 = (int8x8_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
            v74.i32[3] = 0;
            *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v71.f32, v72, 4uLL);
            v76.i64[1] = v71.i64[0];
            *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v74.f32, v75, 4uLL);
            v77.i64[1] = v74.i64[0];
            int8x16_t v78 = (int8x16_t)vsubq_f32(vmulq_f32(v77, v71), vmulq_f32(v76, v74));
            v71.i64[0] = vextq_s8(v78, v78, 4uLL).u64[0];
            v71.i64[1] = v78.u32[0];
            int8x16_t v79 = (int8x16_t)vmulq_f32(*a3, v71);
            if (vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)).f32[0] > 0.0)break; {
            *(_DWORD *)(a2 + 4) = --v48;
            }
            v67 -= 2;
            v68 -= 32;
            v69 -= 32;
            if ((v48 + 1) < 3) {
              goto LABEL_71;
            }
          }
          if (*(_DWORD *)(a2 + 8) == v48 && v48 < v67)
          {
            uint64_t v80 = sub_1B6E073B8(32 * v67, 16);
            uint64_t v64 = v80;
            uint64_t v81 = *(unsigned int *)(a2 + 4);
            if ((int)v81 >= 1)
            {
              uint64_t v82 = 0;
              uint64_t v83 = 32 * v81;
              do
              {
                uint64_t v84 = v80 + v82;
                uint64_t v85 = *(void *)(a2 + 16) + v82;
                *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
                *(void *)(v84 + 16) = *(void *)(v85 + 16);
                v82 += 32;
              }
              while (v83 != v82);
            }
            uint64_t v86 = *(void *)(a2 + 16);
            if (v86) {
              BOOL v87 = *(unsigned char *)(a2 + 24) == 0;
            }
            else {
              BOOL v87 = 1;
            }
            if (!v87) {
              sub_1B6E073C4(v86);
            }
            *(unsigned char *)(a2 + 24) = 1;
            *(void *)(a2 + 16) = v64;
            *(_DWORD *)(a2 + 8) = v67;
            int v48 = *(_DWORD *)(a2 + 4);
            float32x4_t v73 = *v66;
          }
          float32x4_t v88 = (float32x4_t *)(v64 + 32 * v48);
          *float32x4_t v88 = v73;
          v88[1].i64[0] = *(void *)(v65 + 32 * j + 16);
          int v48 = *(_DWORD *)(a2 + 4) + 1;
          *(_DWORD *)(a2 + 4) = v48;
LABEL_71:
          uint64_t v62 = *(unsigned int *)(a1 + 4);
        }
      }
    }
  }
  else if (v12 == 1)
  {
    int v13 = 0;
    int v14 = *(_DWORD *)(a2 + 4);
    do
    {
      uint64_t v15 = *(void *)(a1 + 16);
      if (v14 == *(_DWORD *)(a2 + 8))
      {
        int v16 = v14 ? 2 * v14 : 1;
        if (v14 < v16)
        {
          if (v16)
          {
            uint64_t v17 = sub_1B6E073B8(32 * v16, 16);
            int v14 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            uint64_t v17 = 0;
          }
          if (v14 >= 1)
          {
            uint64_t v18 = 0;
            uint64_t v19 = 32 * v14;
            do
            {
              uint64_t v20 = v17 + v18;
              uint64_t v21 = *(void *)(a2 + 16) + v18;
              *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
              *(void *)(v20 + 16) = *(void *)(v21 + 16);
              v18 += 32;
            }
            while (v19 != v18);
          }
          uint64_t v22 = *(void *)(a2 + 16);
          if (v22) {
            BOOL v23 = *(unsigned char *)(a2 + 24) == 0;
          }
          else {
            BOOL v23 = 1;
          }
          if (!v23) {
            sub_1B6E073C4(v22);
          }
          *(unsigned char *)(a2 + 24) = 1;
          *(void *)(a2 + 16) = v17;
          *(_DWORD *)(a2 + 8) = v16;
          int v14 = *(_DWORD *)(a2 + 4);
        }
      }
      uint64_t v24 = *(void *)(a2 + 16) + 32 * v14;
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v15;
      *(void *)(v24 + 16) = *(void *)(v15 + 16);
      int v14 = *(_DWORD *)(a2 + 4) + 1;
      *(_DWORD *)(a2 + 4) = v14;
      ++v13;
    }
    while (v13 < *(_DWORD *)(a1 + 4));
  }
}

uint64_t sub_1B6DEBC70@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  float32x4_t v5 = *a2;
  int8x16_t v6 = (int8x16_t)vmulq_f32(v5, v5);
  float v7 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0];
  if (v7 >= 0.0001) {
    float32x4_t v8 = vmulq_n_f32(v5, 1.0 / sqrtf(v7));
  }
  else {
    float32x4_t v8 = (float32x4_t)xmmword_1B6E4F300;
  }
  float32x4_t v23 = v8;
  float v22 = 0.0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
  if ((int)result >= 1)
  {
    int v10 = 0;
    float v11 = -1.0e18;
    do
    {
      if ((int)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1) - v10) > 127)
      {
        int v12 = 128;
      }
      else
      {
        int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1) - v10;
        if (v12 < 1)
        {
          int v13 = -1;
          float v14 = -3.4028e38;
          goto LABEL_17;
        }
      }
      uint64_t v15 = 0;
      uint64_t v16 = v12;
      uint64_t v17 = (_OWORD *)v24;
      do
        (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 216))(a1, v15++, v17++);
      while (v16 != v15);
      if ((int)v16 > 3)
      {
        int v21 = off_1EB9734A0((uint64_t)v24, (uint64_t)&v23, v16, (uint64_t)&v22);
        float v14 = v22;
        goto LABEL_19;
      }
      uint64_t v18 = 0;
      int v13 = -1;
      float v14 = -3.4028e38;
      do
      {
        int8x16_t v19 = (int8x16_t)vmulq_f32(v24[v18], v23);
        float v20 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0];
        if (v20 > v14)
        {
          float v14 = v20;
          int v13 = v18;
        }
        ++v18;
      }
      while (v16 != v18);
LABEL_17:
      float v22 = v14;
      int v21 = v13;
LABEL_19:
      if (v14 > v11)
      {
        *a3 = v24[v21];
        float v11 = v14;
      }
      v10 += 128;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
    }
    while (v10 < (int)result);
  }
  return result;
}

uint64_t sub_1B6DEBF08(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4 >= 1)
  {
    uint64_t v4 = result;
    float32x4_t v5 = (_DWORD *)(a3 + 12);
    uint64_t v6 = a4;
    uint64_t v23 = a4;
    do
    {
      *float32x4_t v5 = -581039253;
      v5 += 4;
      --v6;
    }
    while (v6);
    uint64_t v7 = 0;
    float v24 = 0.0;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 192))(v4);
      if ((int)result >= 1) {
        break;
      }
LABEL_23:
      if (++v7 == v23) {
        return result;
      }
    }
    int v8 = 0;
    float32_t v9 = (float32x4_t *)(a2 + 16 * v7);
    int v10 = (float32x4_t *)(a3 + 16 * v7);
    while (1)
    {
      if ((int)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 192))(v4) - v8) > 127)
      {
        int v11 = 128;
      }
      else
      {
        int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 192))(v4) - v8;
        if (v11 < 1)
        {
          int v12 = -1;
          float v13 = -3.4028e38;
          goto LABEL_18;
        }
      }
      uint64_t v14 = 0;
      uint64_t v15 = v11;
      uint64_t v16 = (_OWORD *)v25;
      do
        (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)v4 + 216))(v4, v14++, v16++);
      while (v15 != v14);
      if ((int)v15 > 3)
      {
        int v20 = off_1EB9734A0((uint64_t)v25, (uint64_t)v9, v15, (uint64_t)&v24);
        float v13 = v24;
        goto LABEL_20;
      }
      uint64_t v17 = 0;
      int v12 = -1;
      float v13 = -3.4028e38;
      do
      {
        int8x16_t v18 = (int8x16_t)vmulq_f32(v25[v17], *v9);
        float v19 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0];
        if (v19 > v13)
        {
          float v13 = v19;
          int v12 = v17;
        }
        ++v17;
      }
      while (v15 != v17);
LABEL_18:
      float v24 = v13;
      int v20 = v12;
LABEL_20:
      if (v13 > v10->f32[3])
      {
        *int v10 = v25[v20];
        v10->f32[3] = v13;
      }
      v8 += 128;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 192))(v4);
      if (v8 >= (int)result) {
        goto LABEL_23;
      }
    }
  }
  return result;
}

__n128 sub_1B6DEC19C(uint64_t a1, __n128 *a2, float a3)
{
  int32x2_t v13 = COERCE_INT32X2_T((*(double (**)(uint64_t))(*(void *)a1 + 96))(a1));
  v16[0] = xmmword_1B6E4F300;
  v16[1] = xmmword_1B6E4F320;
  void v16[2] = xmmword_1B6E4F2E0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(void *)a1 + 16))(a1, v16, &v15, &v14);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  int8x16_t v7 = (int8x16_t)vmulq_f32(vsubq_f32(v14, v15), v6);
  float32x4_t v8 = (float32x4_t)vextq_s8(v7, v7, 8uLL);
  v8.i32[1] = v7.i32[0];
  float32x2_t v9 = vadd_f32((float32x2_t)vdup_lane_s32(v13, 0), *(float32x2_t *)v8.f32);
  float32x2_t v10 = vadd_f32(v9, v9);
  float32x2_t v11 = vmul_f32(v10, v10);
  *(int32x2_t *)v8.f32 = vdup_lane_s32((int32x2_t)v11, 0);
  v8.f32[0] = (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                    + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]))
            * (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                    + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]));
  *(float32x2_t *)v8.f32 = vadd_f32(v11, *(float32x2_t *)v8.f32);
  v8.f32[2] = v11.f32[1]
            + (float)((float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                            + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1]))
                    * (float)((float)(*(float *)v13.i32 + *(float *)&v7.i32[1])
                            + (float)(*(float *)v13.i32 + *(float *)&v7.i32[1])));
  __n128 result = (__n128)vmulq_n_f32(v8, a3 * 0.083333);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

uint64_t sub_1B6DEC2C0(float32x4_t *a1, float32x4_t *a2)
{
  sub_1B6DE6630(a1, a2);

  return sub_1B6DEC2F8((uint64_t)a1);
}

uint64_t sub_1B6DEC2F8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1E9E48150, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_1E9E48150))
  {
    dword_1E9E480F0 = 1065353216;
    unk_1E9E480FC = 0;
    unk_1E9E480F4 = 0;
    dword_1E9E48104 = 1065353216;
    qword_1E9E48108 = 0;
    unk_1E9E48110 = 0;
    qword_1E9E48118 = 1065353216;
    dword_1E9E48120 = -1082130432;
    unk_1E9E4812C = 0;
    unk_1E9E48124 = 0;
    dword_1E9E48134 = -1082130432;
    qword_1E9E48138 = 0;
    unk_1E9E48140 = 0;
    qword_1E9E48148 = 3212836864;
    __cxa_guard_release(qword_1E9E48150);
  }
  memset(v7, 0, sizeof(v7));
  uint64_t v2 = (float *)v7;
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t))(*(void *)a1 + 152))(a1, &dword_1E9E480F0, v7, 6);
  float v4 = *(float *)(a1 + 64);
  float32x4_t v5 = (float *)(a1 + 96);
  uint64_t v6 = -48;
  do
  {
    *float32x4_t v5 = *v2 + v4;
    *(v5 - 4) = v2[12] - v4;
    ++v5;
    v2 += 5;
    v6 += 16;
  }
  while (v6);
  return result;
}

double sub_1B6DEC454(uint64_t a1)
{
  sub_1B6DE65E4(a1);
  *(void *)(v1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)uint64_t v1 = &unk_1F0FB2830;
  double result = 0.00781250185;
  *(_OWORD *)(v1 + 80) = xmmword_1B6E4F540;
  *(_OWORD *)(v1 + 96) = xmmword_1B6E50990;
  *(unsigned char *)(v1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0;
  return result;
}

float32x4_t sub_1B6DEC4A4(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  *(double *)&int32x2_t v8 = (*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v10 = a1[5];
  float32x4_t v9 = a1[6];
  float32x4_t v11 = a2[1];
  float32x4_t v12 = a2[2];
  float32x4_t v13 = (float32x4_t)vandq_s8((int8x16_t)v12, (int8x16_t)xmmword_1B6ECFDF0);
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  float32x4_t v15 = vmulq_f32(vaddq_f32(v9, v10), v14);
  int8x16_t v16 = (int8x16_t)vmulq_f32(v12, v15);
  v15.i32[3] = 0;
  float32x4_t v17 = vmulq_f32(vsubq_f32(v9, v10), v14);
  v17.i32[3] = 0;
  float32x4_t v18 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v18.i32[3] = 0;
  float32x4_t v19 = vaddq_f32(v18, v17);
  float32x4_t v20 = vmulq_f32(*a2, v15);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v11, v15);
  v16.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  float32x4_t v22 = vaddq_f32(a2[3], v20);
  float32x4_t v23 = vmulq_f32(v19, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v24 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)v11, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v25 = (int8x16_t)vmulq_f32(v19, v13);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
  float32x4_t v26 = vsubq_f32(v22, v23);
  v26.i32[3] = 0;
  *a3 = v26;
  float32x4_t result = vaddq_f32(v22, v23);
  *a4 = result;
  return result;
}

uint64_t sub_1B6DEC5CC()
{
  return 0;
}

uint64_t sub_1B6DEC5D4()
{
  return 0;
}

uint64_t sub_1B6DEC5DC(uint64_t result, float32x4_t *a2, int a3, int a4)
{
  uint64_t v7 = result;
  do
  {
    int v8 = a3;
    int v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4)) {
      ++v9;
    }
    uint64_t v10 = *(void *)(v7 + 16) + 32 * ((uint64_t)v9 >> 1);
    float32x4_t v11 = *(float32x4_t *)v10;
    float v12 = *(float *)(v10 + 16);
    int v13 = *(_DWORD *)(v10 + 20);
    int v14 = a4;
    do
    {
      float32x4_t v15 = *a2;
      float32x4_t v16 = vsubq_f32(v11, *a2);
      v16.i32[3] = 0;
      uint64_t v17 = *(void *)(v7 + 16);
      int8x16_t v18 = (int8x16_t)vmulq_f32(v16, v16);
      float32x2_t v19 = (float32x2_t)vextq_s8(v18, v18, 8uLL).u64[0];
      for (uint64_t i = v17 + 32 * a3 + 16; *(float *)i != v12; i += 32)
      {
        if (*(float *)i >= v12) {
          goto LABEL_14;
        }
LABEL_13:
        ++a3;
      }
      float32x4_t v21 = vsubq_f32(*(float32x4_t *)(i - 16), v15);
      v21.i32[3] = 0;
      int8x16_t v22 = (int8x16_t)vmulq_f32(v21, v21);
      *(float32x2_t *)v22.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      float32x2_t v23 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), v19);
      unsigned __int8 v24 = vcgt_f32(v23, *(float32x2_t *)v22.i8).u8[0];
      if (vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)v22.i8, v23)).u8[0]) {
        BOOL v25 = v24;
      }
      else {
        BOOL v25 = *(_DWORD *)(i + 4) < v13;
      }
      if (v25) {
        goto LABEL_13;
      }
LABEL_14:
      for (uint64_t j = (32 * v14) | 0x10; ; j -= 32)
      {
        uint64_t v27 = v17 + j;
        float v28 = *(float *)(v17 + j);
        if (v12 == v28) {
          break;
        }
        if (v12 >= v28) {
          goto LABEL_22;
        }
LABEL_21:
        --v14;
      }
      float32x2_t v29 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), v19);
      float32x4_t v30 = vsubq_f32(*(float32x4_t *)(v27 - 16), v15);
      v30.i32[3] = 0;
      int8x16_t v31 = (int8x16_t)vmulq_f32(v30, v30);
      *(float32x2_t *)v31.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      unsigned __int8 v32 = vcgt_f32(*(float32x2_t *)v31.i8, v29).u8[0];
      BOOL v33 = v13 < *(_DWORD *)(v27 + 4);
      if (vmvn_s8((int8x8_t)vceq_f32(v29, *(float32x2_t *)v31.i8)).u8[0]) {
        BOOL v33 = v32;
      }
      if (v33) {
        goto LABEL_21;
      }
LABEL_22:
      if (a3 <= v14)
      {
        uint64_t v34 = (void *)(v17 + j);
        long long v35 = *(_OWORD *)(i - 16);
        uint64_t v36 = *(void *)i;
        *(_OWORD *)(i - 16) = *((_OWORD *)v34 - 1);
        *(void *)uint64_t i = *v34;
        float32x4_t v37 = (void *)(*(void *)(v7 + 16) + j);
        *((_OWORD *)v37 - 1) = v35;
        *float32x4_t v37 = v36;
        ++a3;
        --v14;
      }
    }
    while (a3 <= v14);
    if (v14 > v8) {
      float32x4_t result = sub_1B6DEC5DC(v7, a2);
    }
  }
  while (a3 < a4);
  return result;
}

uint64_t sub_1B6DEC7B4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v3 = *(unsigned int *)(a2 + 4);
  if ((int)v3 < 1)
  {
    *(_DWORD *)(a1 + 4) = v3;
    return a1;
  }
  float32x4_t v5 = (_DWORD *)sub_1B6E073B8(4 * v3, 16);
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  uint64_t v7 = *(void *)(a1 + 16);
  if ((int)v6 >= 1)
  {
    int v8 = v5;
    int v9 = *(int **)(a1 + 16);
    do
    {
      int v10 = *v9++;
      *v8++ = v10;
      --v6;
    }
    while (v6);
    goto LABEL_7;
  }
  if (v7)
  {
LABEL_7:
    if (*(unsigned char *)(a1 + 24)) {
      sub_1B6E073C4(v7);
    }
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 8) = v3;
    goto LABEL_10;
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 8) = v3;
LABEL_10:
  bzero(v5, 4 * v3);
  *(_DWORD *)(a1 + 4) = v3;
  float32x4_t v11 = *(int **)(a2 + 16);
  do
  {
    int v12 = *v11++;
    *v5++ = v12;
    --v3;
  }
  while (v3);
  return a1;
}

double sub_1B6DEC8B0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = a2;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
  double result = 0.0;
  *(void *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1B6DEC8DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 && *(unsigned char *)(a1 + 56)) {
    sub_1B6E073C4(v2);
  }
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 24)) {
    sub_1B6E073C4(v3);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_1B6441B40(a1 + 32);

  return sub_1B6441B40(a1);
}

BOOL sub_1B6DEC960(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 168))(*(void *)(a1 + 72));
  if (v2 < 1)
  {
    int v5 = 42;
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = v2;
    do
    {
      (*(void (**)(void, uint64_t, _OWORD *))(**(void **)(a1 + 72) + 176))(*(void *)(a1 + 72), v3, v51);
      sub_1B6DECD7C();
      xmmword_1E9E48160[v3++ + 42] = v51[0];
    }
    while (v4 != v3);
    int v5 = v3 + 42;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)(a1 + 72);
    sub_1B6DECD7C();
    (*(void (**)(unsigned char *__return_ptr, uint64_t, long long *))(*(void *)v7 + 128))(v33, v7, &xmmword_1E9E48160[v6]);
    v51[v6++] = *(_OWORD *)v33;
  }
  while (v5 != v6);
  uint64_t v50 = 0x100000001000;
  v47[0] = 1;
  v47[1] = v5;
  int v48 = v51;
  uint64_t v49 = 0x3A83126F00000010;
  char v43 = 1;
  uint64_t v42 = 0;
  uint64_t v41 = 0;
  char v46 = 1;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  char v35 = 1;
  uint64_t v34 = 0;
  *(void *)&v33[12] = 0;
  char v39 = 1;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  v33[0] = 1;
  *(_DWORD *)&v33[4] = 0;
  uint64_t v36 = 0;
  int v10 = sub_1B6E08B40((uint64_t)v40, (uint64_t)v47, (uint64_t)v33, 0.0, v8, v9);
  if (v10 == 1) {
    goto LABEL_44;
  }
  int v11 = *(_DWORD *)&v33[4];
  int v12 = *(_DWORD *)(a1 + 4);
  int v13 = *(_DWORD *)&v33[4];
  if (v12 < *(int *)&v33[4])
  {
    int v13 = *(_DWORD *)&v33[4];
    if (*(_DWORD *)(a1 + 8) < *(int *)&v33[4])
    {
      if (*(_DWORD *)&v33[4])
      {
        uint64_t v14 = sub_1B6E073B8(16 * *(int *)&v33[4], 16);
        int v12 = *(_DWORD *)(a1 + 4);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (v12 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 16 * v12;
        do
        {
          *(_OWORD *)(v14 + v15) = *(_OWORD *)(*(void *)(a1 + 16) + v15);
          v15 += 16;
        }
        while (v16 != v15);
      }
      uint64_t v17 = *(void *)(a1 + 16);
      if (v17 && *(unsigned char *)(a1 + 24)) {
        sub_1B6E073C4(v17);
      }
      *(unsigned char *)(a1 + 24) = 1;
      *(void *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + 8) = v11;
      int v13 = *(_DWORD *)&v33[4];
    }
  }
  *(_DWORD *)(a1 + 4) = v11;
  if (v13 >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      *(_OWORD *)(*(void *)(a1 + 16) + 16 * v18) = *(_OWORD *)(v34 + 16 * v18);
      ++v18;
    }
    while (v18 < *(int *)&v33[4]);
  }
  int v19 = HIDWORD(v36);
  *(_DWORD *)(a1 + 64) = HIDWORD(v36);
  int v20 = *(_DWORD *)(a1 + 36);
  int v21 = v19;
  if (v20 <= v19)
  {
    if (v20 >= v19)
    {
LABEL_39:
      int v21 = *(_DWORD *)(a1 + 64);
      goto LABEL_40;
    }
    if (*(_DWORD *)(a1 + 40) >= v19)
    {
LABEL_38:
      bzero((void *)(*(void *)(a1 + 48) + 4 * v20), 4 * (v19 + ~v20) + 4);
      goto LABEL_39;
    }
    if (v19) {
      uint64_t v22 = sub_1B6E073B8(4 * v19, 16);
    }
    else {
      uint64_t v22 = 0;
    }
    LODWORD(v23) = *(_DWORD *)(a1 + 36);
    uint64_t v24 = *(void *)(a1 + 48);
    if ((int)v23 < 1)
    {
      if (!v24)
      {
LABEL_37:
        *(unsigned char *)(a1 + 56) = 1;
        *(void *)(a1 + 48) = v22;
        *(_DWORD *)(a1 + 40) = v19;
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v23 = v23;
      BOOL v25 = (_DWORD *)v22;
      float32x4_t v26 = *(int **)(a1 + 48);
      do
      {
        int v27 = *v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
    }
    if (*(unsigned char *)(a1 + 56)) {
      sub_1B6E073C4(v24);
    }
    goto LABEL_37;
  }
LABEL_40:
  *(_DWORD *)(a1 + 36) = v19;
  if (v21 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v38;
    uint64_t v30 = *(void *)(a1 + 48);
    do
    {
      *(_DWORD *)(v30 + 4 * v28) = *(_DWORD *)(v29 + 4 * v28);
      ++v28;
    }
    while (v28 < *(int *)(a1 + 64));
  }
  sub_1B6E098D0((uint64_t)v40, (uint64_t)v33);
LABEL_44:
  if (v38) {
    BOOL v31 = v39 == 0;
  }
  else {
    BOOL v31 = 1;
  }
  if (!v31) {
    sub_1B6E073C4(v38);
  }
  char v39 = 1;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  if (v34 && v35) {
    sub_1B6E073C4(v34);
  }
  if (v45 && v46) {
    sub_1B6E073C4(v45);
  }
  char v46 = 1;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  if (v42 && v43) {
    sub_1B6E073C4(v42);
  }
  return v10 != 1;
}

long long *sub_1B6DECD7C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1E9E48540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_1E9E48540))
  {
    xmmword_1E9E48160 = xmmword_1B6ED0010;
    *(_OWORD *)algn_1E9E48170 = xmmword_1B6ED0020;
    xmmword_1E9E48180 = xmmword_1B6ED0030;
    unk_1E9E48190 = xmmword_1B6ED0040;
    xmmword_1E9E481A0 = xmmword_1B6ED0050;
    unk_1E9E481B0 = xmmword_1B6ED0060;
    xmmword_1E9E481C0 = xmmword_1B6ED0070;
    unk_1E9E481D0 = xmmword_1B6ED0080;
    xmmword_1E9E481E0 = xmmword_1B6ED0090;
    unk_1E9E481F0 = xmmword_1B6ED00A0;
    xmmword_1E9E48200 = xmmword_1B6ED00B0;
    unk_1E9E48210 = xmmword_1B6ED00C0;
    xmmword_1E9E48220 = xmmword_1B6ED00D0;
    unk_1E9E48230 = xmmword_1B6ED00E0;
    xmmword_1E9E48240 = xmmword_1B6ED00F0;
    unk_1E9E48250 = xmmword_1B6ED0100;
    xmmword_1E9E48260 = xmmword_1B6ED0110;
    unk_1E9E48270 = xmmword_1B6ED0120;
    xmmword_1E9E48280 = xmmword_1B6ED0130;
    unk_1E9E48290 = xmmword_1B6ED0140;
    xmmword_1E9E482A0 = xmmword_1B6ED0150;
    unk_1E9E482B0 = xmmword_1B6ED0160;
    xmmword_1E9E482C0 = xmmword_1B6ED0170;
    unk_1E9E482D0 = xmmword_1B6ED0180;
    xmmword_1E9E482E0 = xmmword_1B6ED0190;
    unk_1E9E482F0 = xmmword_1B6E4F330;
    xmmword_1E9E48300 = xmmword_1B6ED01A0;
    unk_1E9E48310 = xmmword_1B6ED01B0;
    xmmword_1E9E48320 = xmmword_1B6ED01C0;
    unk_1E9E48330 = xmmword_1B6ED01D0;
    xmmword_1E9E48340 = xmmword_1B6E99E00;
    unk_1E9E48350 = xmmword_1B6ED01E0;
    xmmword_1E9E48360 = xmmword_1B6ED01F0;
    unk_1E9E48370 = xmmword_1B6ED0200;
    xmmword_1E9E48380 = xmmword_1B6ED0210;
    unk_1E9E48390 = xmmword_1B6ED0220;
    xmmword_1E9E483A0 = xmmword_1B6ED0230;
    unk_1E9E483B0 = xmmword_1B6ED0240;
    xmmword_1E9E483C0 = xmmword_1B6ED0250;
    unk_1E9E483D0 = xmmword_1B6ED0260;
    xmmword_1E9E483E0 = xmmword_1B6ED0270;
    unk_1E9E483F0 = xmmword_1B6ED0280;
    __cxa_guard_release(qword_1E9E48540);
  }
  return &xmmword_1E9E48160;
}

unint64_t sub_1B6DECF74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64) / 3uLL;
}

uint64_t sub_1B6DECF8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

void sub_1B6DECF94(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_1B6DECF9C(int a1, int a2, void *a3, int a4)
{
  if (a4 >= 1) {
    bzero(a3, 16 * a4);
  }
}

float32x4_t sub_1B6DECFB4@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  (*(void (**)(float32x4_t *__return_ptr))(*(void *)a1 + 136))(&v14);
  float32x4_t v13 = v14;
  int8x16_t v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8);
  float32x4_t v8 = (float32x4_t)vextq_s8(v6, v6, 8uLL);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32);
  v7.i32[0] = 679477248;
  float32x4_t v9 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v7, v8), 0), (int8x16_t)xmmword_1B6E50990, *(int8x16_t *)a2);
  int8x16_t v10 = (int8x16_t)vmulq_f32(v9, v9);
  float32x4_t v11 = vmulq_n_f32(vmulq_n_f32(v9, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0])), (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1));
  v11.i32[3] = 0;
  float32x4_t result = vaddq_f32(v13, v11);
  *a3 = result;
  return result;
}

float32x4_t sub_1B6DED0B0(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  unsigned int v13 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(void *)a1 + 96))(a1));
  unsigned int v12 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(void *)a1 + 96))(a1));
  *(float *)&unsigned int v8 = (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  v9.i64[0] = __PAIR64__(v12, v13);
  v9.i64[1] = v8;
  float32x4_t v10 = vsubq_f32(a2[3], v9);
  v10.i32[3] = 0;
  *a3 = v10;
  float32x4_t result = vaddq_f32(v9, a2[3]);
  *a4 = result;
  return result;
}

float sub_1B6DED19C(uint64_t a1, int32x4_t *a2, float a3)
{
  float v5 = (float)(a3 * 0.4) * (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  float result = v5 * (*(float (**)(uint64_t))(*(void *)a1 + 96))(a1);
  int32x4_t v7 = vzip1q_s32((int32x4_t)LODWORD(result), (int32x4_t)LODWORD(result));
  *(float *)&v7.i32[2] = result;
  *a2 = v7;
  return result;
}

void sub_1B6DED240(uint64_t a1)
{
  nullsub_1(a1);

  sub_1B6E073C4(v1);
}

const char *sub_1B6DED268()
{
  return "SPHERE";
}

uint64_t sub_1B6DED274(uint64_t result, float a2)
{
  *(float *)(result + 64) = a2;
  return result;
}

float sub_1B6DED27C(uint64_t a1)
{
  return *(float *)(a1 + 48) * *(float *)(a1 + 32);
}

float32x4_t sub_1B6DED28C(uint64_t a1, float32x4_t *a2, float32_t a3)
{
  float v5 = (float32x4_t *)sub_1B6DE57D0(a1);
  v5->i64[0] = (uint64_t)&unk_1F0FB15D8;
  int8x16_t v6 = (int8x16_t)vmulq_f32(*a2, *a2);
  float32x4_t result = vmulq_n_f32(*a2, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0]));
  v5[4] = result;
  v5[5].f32[0] = a3;
  v5[6].i64[0] = 0;
  v5[6].i64[1] = 0;
  v5->i32[2] = 28;
  return result;
}

void sub_1B6DED314(uint64_t a1)
{
  nullsub_1(a1);

  sub_1B6E073C4(v1);
}

double sub_1B6DED33C(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  *a3 = xmmword_1B6ECFDB0;
  double result = 5.72459157e141;
  *a4 = xmmword_1B6ECFDA0;
  return result;
}

uint64_t sub_1B6DED358(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, double a5, double a6, double a7, float32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  float32x4_t v13 = *a4;
  float32x4_t v14 = *a3;
  float v15 = a1[4].f32[2];
  if (fabsf(v15) <= 0.70711)
  {
    v22.i32[0] = a1[4].i32[0];
    float v23 = a1[4].f32[1];
    float v24 = (float)(v23 * v23) + (float)(v22.f32[0] * v22.f32[0]);
    float v25 = 1.0 / sqrtf(v24);
    v22.f32[1] = -v23;
    v26.f32[0] = -v15;
    *(float32x2_t *)a12.i8 = vmul_n_f32(v22, v25);
    float32x4_t v21 = (float32x4_t)vrev64q_s32(a12).u64[0];
    v26.i32[1] = a1[4].i32[2];
    *(float32x2_t *)a8.f32 = vmul_f32(*(float32x2_t *)a12.i8, v26);
    a8.f32[2] = v24 * v25;
  }
  else
  {
    float v17 = a1[4].f32[0];
    float v16 = a1[4].f32[1];
    float v18 = (float)(v15 * v15) + (float)(v16 * v16);
    float v19 = 1.0 / sqrtf(v18);
    float32_t v20 = -(float)(v15 * v19);
    a8.f32[0] = v18 * v19;
    v21.i32[0] = 0;
    v21.i32[3] = 0;
    v21.f32[1] = v20;
    v21.f32[2] = v16 * v19;
    a8.f32[1] = -(float)(v17 * (float)(v16 * v19));
    a8.f32[2] = v17 * v20;
  }
  float32x4_t v27 = a1[4];
  v28.i64[0] = 0x3F0000003F000000;
  v28.i64[1] = 0x3F0000003F000000;
  float32x4_t v29 = vmulq_f32(vaddq_f32(v13, v14), v28);
  float32x4_t v30 = v29;
  v30.i32[3] = 0;
  int8x16_t v31 = (int8x16_t)vmulq_f32(v27, v30);
  float32x4_t v32 = vsubq_f32(v29, vmulq_n_f32(v27, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8)).f32[0]- a1[5].f32[0]));
  v32.i32[3] = 0;
  float32x4_t v33 = vmulq_f32(vsubq_f32(v13, v14), v28);
  v33.i32[3] = 0;
  int8x16_t v34 = (int8x16_t)vmulq_f32(v33, v33);
  *(float *)v34.i32 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)).f32[0]);
  float32x4_t v35 = vmulq_n_f32(v21, *(float *)v34.i32);
  v35.i32[3] = 0;
  float32x4_t v36 = vaddq_f32(v35, v32);
  float32x4_t v37 = vmulq_n_f32(a8, *(float *)v34.i32);
  float32x4_t v38 = vsubq_f32(v36, v37);
  float32x4_t v39 = vsubq_f32(v32, v35);
  float32x4_t v40 = vsubq_f32(v39, v37);
  v37.i32[3] = 0;
  float32x4_t v44 = v37;
  v38.i32[3] = 0;
  float32x4_t v45 = vaddq_f32(v36, v37);
  float32x4_t v46 = v45;
  v39.i32[3] = 0;
  v40.i32[3] = 0;
  float32x4_t v42 = v40;
  float32x4_t v43 = v39;
  float32x4_t v47 = v38;
  float32x4_t v48 = v40;
  (*(void (**)(uint64_t, float32x4_t *, void, void))(*(void *)a2 + 16))(a2, &v46, 0, 0);
  float32x4_t v46 = v42;
  float32x4_t v47 = vaddq_f32(v44, v43);
  float32x4_t v48 = v45;
  return (*(uint64_t (**)(uint64_t, float32x4_t *, void, uint64_t))(*(void *)a2 + 16))(a2, &v46, 0, 1);
}

void sub_1B6DED574(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
}

__n128 sub_1B6DED57C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[6] = *a2;
  return result;
}

uint64_t sub_1B6DED588(uint64_t a1)
{
  return a1 + 96;
}

const char *sub_1B6DED590()
{
  return "STATICPLANE";
}

uint64_t sub_1B6DED59C()
{
  return 56;
}

const char *sub_1B6DED5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DE46E8(a1, a2, a3);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 16 + i) = *(_DWORD *)(a1 + 96 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 32 + j) = *(_DWORD *)(a1 + 64 + j);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 80);
  return "btStaticPlaneShapeData";
}

uint64_t sub_1B6DED61C(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if ((int)result >= 1)
  {
    int v5 = result;
    uint64_t v6 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v67 = 0;
    int v64 = 0;
    int v65 = 0;
    long long v62 = *(_OWORD *)(a1 + 16);
    LODWORD(v7) = *(void *)(a1 + 24);
    do
    {
      int v63 = 0;
      int v66 = 2;
      (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *, int *, uint64_t *, char *, int *, int *, _DWORD))(*(void *)a1 + 32))(a1, &v69, &v64, &v67, &v65, &v68, (char *)&v67 + 4, &v63, &v66, v6);
      if (v67 == 1)
      {
        if (v66 == 2)
        {
          float32x2_t v44 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            uint64_t v45 = 0;
            do
            {
              float32x4_t v46 = (_DWORD *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v45);
              float32x4_t v47 = (float64x2_t *)(v69 + (v65 * *v46));
              float v48 = v47[1].f64[0];
              float32x2_t v70 = vmul_f32(v44, vcvt_f32_f64(*v47));
              float v71 = v7 * v48;
              int v72 = 0;
              uint64_t v49 = (float64x2_t *)(v69 + (v46[1] * v65));
              float v50 = v49[1].f64[0];
              float32x2_t v73 = vmul_f32(v44, vcvt_f32_f64(*v49));
              float v74 = v7 * v50;
              int v75 = 0;
              uint64_t v51 = (float64x2_t *)(v69 + (v46[2] * v65));
              float v52 = v51[1].f64[0];
              float32x2_t v76 = vmul_f32(v44, vcvt_f32_f64(*v51));
              float v77 = v7 * v52;
              int v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, &v70, v6, v45);
              float32x2_t v44 = (float32x2_t)v62;
              uint64_t v45 = (v45 + 1);
            }
            while ((int)v45 < v63);
          }
        }
        else if (v66 == 3)
        {
          float32x2_t v53 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            uint64_t v54 = 0;
            do
            {
              uint64_t v55 = (unsigned __int16 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v54);
              uint64_t v56 = (float64x2_t *)(v69 + v65 * (unint64_t)*v55);
              float v57 = v56[1].f64[0];
              float32x2_t v70 = vmul_f32(v53, vcvt_f32_f64(*v56));
              float v71 = v7 * v57;
              int v72 = 0;
              uint64_t v58 = (float64x2_t *)(v69 + v65 * (unint64_t)v55[1]);
              float v59 = v58[1].f64[0];
              float32x2_t v73 = vmul_f32(v53, vcvt_f32_f64(*v58));
              float v74 = v7 * v59;
              int v75 = 0;
              uint64_t v60 = (float64x2_t *)(v69 + v65 * (unint64_t)v55[2]);
              float v61 = v60[1].f64[0];
              float32x2_t v76 = vmul_f32(v53, vcvt_f32_f64(*v60));
              float v77 = v7 * v61;
              int v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, &v70, v6, v54);
              float32x2_t v53 = (float32x2_t)v62;
              uint64_t v54 = (v54 + 1);
            }
            while ((int)v54 < v63);
          }
        }
        else
        {
          float32x2_t v17 = (float32x2_t)v62;
          if (v66 == 5 && v63 >= 1)
          {
            uint64_t v18 = 0;
            do
            {
              float v19 = (unsigned __int8 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v18);
              float32_t v20 = (float64x2_t *)(v69 + v65 * (unint64_t)*v19);
              float v21 = v20[1].f64[0];
              float32x2_t v70 = vmul_f32(v17, vcvt_f32_f64(*v20));
              float v71 = v7 * v21;
              int v72 = 0;
              float32x2_t v22 = (float64x2_t *)(v69 + v65 * (unint64_t)v19[1]);
              float v23 = v22[1].f64[0];
              float32x2_t v73 = vmul_f32(v17, vcvt_f32_f64(*v22));
              float v74 = v7 * v23;
              int v75 = 0;
              float v24 = (float64x2_t *)(v69 + v65 * (unint64_t)v19[2]);
              float v25 = v24[1].f64[0];
              float32x2_t v76 = vmul_f32(v17, vcvt_f32_f64(*v24));
              float v77 = v7 * v25;
              int v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, &v70, v6, v18);
              float32x2_t v17 = (float32x2_t)v62;
              uint64_t v18 = (v18 + 1);
            }
            while ((int)v18 < v63);
          }
        }
      }
      else if (!v67)
      {
        if (v66 == 2)
        {
          float32x2_t v26 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            uint64_t v27 = 0;
            do
            {
              float32x4_t v28 = (_DWORD *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v27);
              float32x4_t v29 = (float32x2_t *)(v69 + (v65 * *v28));
              float v30 = v7 * v29[1].f32[0];
              float32x2_t v70 = vmul_f32(v26, *v29);
              float v71 = v30;
              int v72 = 0;
              int8x16_t v31 = (float32x2_t *)(v69 + (v28[1] * v65));
              float v32 = v7 * v31[1].f32[0];
              float32x2_t v73 = vmul_f32(v26, *v31);
              float v74 = v32;
              int v75 = 0;
              float32x4_t v33 = (float32x2_t *)(v69 + (v28[2] * v65));
              float v34 = v7 * v33[1].f32[0];
              float32x2_t v76 = vmul_f32(v26, *v33);
              float v77 = v34;
              int v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, &v70, v6, v27);
              float32x2_t v26 = (float32x2_t)v62;
              uint64_t v27 = (v27 + 1);
            }
            while ((int)v27 < v63);
          }
        }
        else if (v66 == 3)
        {
          float32x2_t v35 = (float32x2_t)v62;
          if (v63 >= 1)
          {
            uint64_t v36 = 0;
            do
            {
              float32x4_t v37 = (unsigned __int16 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v36);
              float32x4_t v38 = (float32x2_t *)(v69 + v65 * (unint64_t)*v37);
              float v39 = v7 * v38[1].f32[0];
              float32x2_t v70 = vmul_f32(v35, *v38);
              float v71 = v39;
              int v72 = 0;
              float32x4_t v40 = (float32x2_t *)(v69 + v65 * (unint64_t)v37[1]);
              float v41 = v7 * v40[1].f32[0];
              float32x2_t v73 = vmul_f32(v35, *v40);
              float v74 = v41;
              int v75 = 0;
              float32x4_t v42 = (float32x2_t *)(v69 + v65 * (unint64_t)v37[2]);
              float v43 = v7 * v42[1].f32[0];
              float32x2_t v76 = vmul_f32(v35, *v42);
              float v77 = v43;
              int v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, &v70, v6, v36);
              float32x2_t v35 = (float32x2_t)v62;
              uint64_t v36 = (v36 + 1);
            }
            while ((int)v36 < v63);
          }
        }
        else
        {
          float32x2_t v8 = (float32x2_t)v62;
          if (v66 == 5 && v63 >= 1)
          {
            uint64_t v9 = 0;
            do
            {
              float32x4_t v10 = (unsigned __int8 *)(v68 + SHIDWORD(v67) * (uint64_t)(int)v9);
              float32x4_t v11 = (float32x2_t *)(v69 + v65 * (unint64_t)*v10);
              float v12 = v7 * v11[1].f32[0];
              float32x2_t v70 = vmul_f32(v8, *v11);
              float v71 = v12;
              int v72 = 0;
              float32x4_t v13 = (float32x2_t *)(v69 + v65 * (unint64_t)v10[1]);
              float v14 = v7 * v13[1].f32[0];
              float32x2_t v73 = vmul_f32(v8, *v13);
              float v74 = v14;
              int v75 = 0;
              float v15 = (float32x2_t *)(v69 + v65 * (unint64_t)v10[2]);
              float v16 = v7 * v15[1].f32[0];
              float32x2_t v76 = vmul_f32(v8, *v15);
              float v77 = v16;
              int v78 = 0;
              (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, &v70, v6, v9);
              float32x2_t v8 = (float32x2_t)v62;
              uint64_t v9 = (v9 + 1);
            }
            while ((int)v9 < v63);
          }
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v6);
      uint64_t v6 = (v6 + 1);
    }
    while (v6 != v5);
  }
  return result;
}

const char *sub_1B6DEDD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(_DWORD *)(a2 + 24) = v6;
  *(void *)a2 = 0;
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 56, v6);
    uint64_t v8 = *(void *)(v7 + 8);
    *(void *)a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v8);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = 0;
    if (v9 >= 1)
    {
      int v10 = v9;
      uint64_t v11 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t *, char *, uint64_t *, uint64_t *, uint64_t *, char *, uint64_t *, char *, _DWORD))(*(void *)a1 + 32))(a1, &v49, (char *)&v45 + 4, &v47, &v46, &v48, (char *)&v47 + 4, &v45, (char *)&v46 + 4, v11);
        int v12 = v45;
        int v13 = HIDWORD(v45);
        *(_DWORD *)(v8 + 48) = v45;
        *(_DWORD *)(v8 + 5sub_1B6DC4968((unsigned int *)this + 2) = v13;
        *(_OWORD *)uint64_t v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        *(_OWORD *)(v8 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0u;
        if (HIDWORD(v46) == 5)
        {
          if (v12)
          {
            uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 4);
            uint64_t v27 = *(void *)(v26 + 8);
            *(void *)(v8 + 3sub_1B6DC4968((unsigned int *)this + 2) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v27);
            if ((int)v45 >= 1)
            {
              uint64_t v28 = 0;
              float32x4_t v29 = (unsigned char *)(v27 + 2);
              do
              {
                float v30 = (unsigned char *)(v48 + SHIDWORD(v47) * (uint64_t)(int)v28);
                *(v29 - sub_1B6DC4968((unsigned int *)this + 2) = *v30;
                *(v29 - 1) = v30[1];
                *float32x4_t v29 = v30[2];
                v29 += 4;
                ++v28;
              }
              while (v28 < (int)v45);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)a3 + 40))(a3, v26, "btCharIndexTripletData", 1497453121, *(void *)(v26 + 8));
          }
        }
        else if (HIDWORD(v46) == 3)
        {
          if (v12)
          {
            uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 8);
            uint64_t v21 = *(void *)(v20 + 8);
            *(void *)(v8 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v21);
            uint64_t v22 = v45;
            if ((int)v45 >= 1)
            {
              uint64_t v23 = SHIDWORD(v47);
              float v24 = (_WORD *)(v48 + 4);
              float v25 = (_WORD *)(v21 + 4);
              do
              {
                *(v25 - sub_1B6DC4968((unsigned int *)this + 2) = *(v24 - 2);
                *(v25 - 1) = *(v24 - 1);
                *float v25 = *v24;
                v25 += 4;
                float v24 = (_WORD *)((char *)v24 + v23);
                --v22;
              }
              while (v22);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)a3 + 40))(a3, v20, "btShortIntIndexTripletData", 1497453121, *(void *)(v20 + 8));
          }
        }
        else if (HIDWORD(v46) == 2 && v12)
        {
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 32))(a3, 4, (3 * v12));
          uint64_t v15 = *(void *)(v14 + 8);
          *(void *)(v8 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v15);
          if ((int)v45 >= 1)
          {
            uint64_t v16 = 0;
            uint64_t v17 = v48;
            uint64_t v18 = (_DWORD *)(v15 + 8);
            do
            {
              float v19 = (_DWORD *)(v17 + SHIDWORD(v47) * (uint64_t)(int)v16);
              *(v18 - sub_1B6DC4968((unsigned int *)this + 2) = *v19;
              *(v18 - 1) = v19[1];
              *uint64_t v18 = v19[2];
              v18 += 3;
              ++v16;
            }
            while (v16 < (int)v45);
          }
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)a3 + 40))(a3, v14, "btIntIndexData", 1497453121, *(void *)(v14 + 8));
        }
        if (v47 == 1)
        {
          if (HIDWORD(v45))
          {
            uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 32);
            uint64_t v38 = *(void *)(v37 + 8);
            *(void *)(v8 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v38);
            uint64_t v39 = HIDWORD(v45);
            if (SHIDWORD(v45) >= 1)
            {
              uint64_t v40 = (int)v46;
              float v41 = (void *)(v49 + 16);
              float32x4_t v42 = (void *)(v38 + 16);
              do
              {
                *(v42 - sub_1B6DC4968((unsigned int *)this + 2) = *(v41 - 2);
                *(v42 - 1) = *(v41 - 1);
                *float32x4_t v42 = *v41;
                v42 += 4;
                float v41 = (void *)((char *)v41 + v40);
                --v39;
              }
              while (v39);
            }
            (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)a3 + 40))(a3, v37, "btVector3DoubleData", 1497453121, *(void *)(v37 + 8));
          }
        }
        else if (!v47 && HIDWORD(v45))
        {
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 16);
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v32);
          uint64_t v33 = HIDWORD(v45);
          if (SHIDWORD(v45) >= 1)
          {
            uint64_t v34 = (int)v46;
            float32x2_t v35 = (_DWORD *)(v49 + 8);
            uint64_t v36 = (_DWORD *)(v32 + 8);
            do
            {
              *(v36 - sub_1B6DC4968((unsigned int *)this + 2) = *(v35 - 2);
              *(v36 - 1) = *(v35 - 1);
              *uint64_t v36 = *v35;
              v36 += 4;
              float32x2_t v35 = (_DWORD *)((char *)v35 + v34);
              --v33;
            }
            while (v33);
          }
          (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)a3 + 40))(a3, v31, "btVector3FloatData", 1497453121, *(void *)(v31 + 8));
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v11);
        uint64_t v11 = (v11 + 1);
        v8 += 56;
      }
      while (v11 != v10);
    }
    (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)a3 + 40))(a3, v7, "btMeshPartData", 1497453121, *(void *)(v7 + 8));
  }
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 8 + i) = *(_DWORD *)(a1 + 16 + i);
  return "btStridingMeshInterfaceData";
}

double sub_1B6DEE434(void *a1)
{
  *a1 = &unk_1F0FB23F0;
  sub_1B6441B40((uint64_t)(a1 + 4));

  return nullsub_1(a1);
}

void sub_1B6DEE488(void *a1)
{
  *a1 = &unk_1F0FB23F0;
  sub_1B6441B40((uint64_t)(a1 + 4));
  nullsub_1(a1);

  sub_1B6E073C4(v2);
}

uint64_t sub_1B6DEE4E0(uint64_t result, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, void *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int a10)
{
  uint64_t v10 = *(void *)(result + 48) + 48 * a10;
  *a3 = *(_DWORD *)(v10 + 20);
  *a2 = *(void *)(v10 + 24);
  *a4 = *(_DWORD *)(v10 + 40);
  int v11 = *(_DWORD *)(v10 + 36);
  *a5 = *(_DWORD *)(v10 + 32);
  *a8 = *(_DWORD *)v10;
  *a6 = *(void *)(v10 + 8);
  *a7 = *(_DWORD *)(v10 + 16);
  *a9 = v11;
  return result;
}

uint64_t sub_1B6DEE534(uint64_t result, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, void *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int a10)
{
  uint64_t v10 = *(void *)(result + 48) + 48 * a10;
  *a3 = *(_DWORD *)(v10 + 20);
  *a2 = *(void *)(v10 + 24);
  *a4 = *(_DWORD *)(v10 + 40);
  int v11 = *(_DWORD *)(v10 + 36);
  *a5 = *(_DWORD *)(v10 + 32);
  *a8 = *(_DWORD *)v10;
  *a6 = *(void *)(v10 + 8);
  *a7 = *(_DWORD *)(v10 + 16);
  *a9 = v11;
  return result;
}

BOOL sub_1B6DEE588(uint64_t a1)
{
  return *(_DWORD *)(a1 + 72) == 1;
}

__n128 sub_1B6DEE598(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  *(_OWORD *)(a1 + 80) = *a2;
  __n128 result = *a3;
  *(__n128 *)(a1 + 96) = *a3;
  *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 1;
  return result;
}

__n128 sub_1B6DEE5B4(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  *a2 = *(_OWORD *)(a1 + 80);
  __n128 result = *(__n128 *)(a1 + 96);
  *a3 = result;
  return result;
}

uint64_t sub_1B6DEE5D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

float *sub_1B6DEE5E0(float *a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6DE57D0((uint64_t)a1);
  *(void *)uint64_t v4 = &unk_1F0FB1718;
  *(void *)(v4 + 64) = a2;
  *(_DWORD *)(v4 + 8) = 21;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 80))(a2)) {
    (*(void (**)(uint64_t, float *, float *))(*(void *)a2 + 96))(a2, a1 + 8, a1 + 12);
  }
  else {
    sub_1B6DEE69C(a1);
  }
  return a1;
}

float sub_1B6DEE69C(float *a1)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    v6[0] = 0;
    v6[1] = 0;
    *(_DWORD *)((char *)v6 + i * 4) = 1065353216;
    (*(void (**)(long long *__return_ptr, float *, void *))(*(void *)a1 + 136))(&v5, a1, v6);
    a1[i + 12] = *(float *)((char *)&v6[-2] + i * 4) + a1[6];
    *(_DWORD *)((char *)v6 + i * 4) = -1082130432;
    (*(void (**)(long long *__return_ptr, float *, void *))(*(void *)a1 + 136))(&v4, a1, v6);
    long long v5 = v4;
    float result = *(float *)((char *)&v6[-2] + i * 4) - a1[6];
    a1[i + 8] = result;
  }
  return result;
}

void sub_1B6DEE798(uint64_t a1)
{
  nullsub_1(a1);

  sub_1B6E073C4(v1);
}

float32x4_t sub_1B6DEE7C0(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v28 = a1[2];
  float32x4_t v29 = a1[3];
  unsigned int v27 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  unsigned int v26 = COERCE_UNSIGNED_INT64((*(double (**)(float32x4_t *))(a1->i64[0] + 96))(a1));
  *(float *)&unsigned int v8 = (*(float (**)(float32x4_t *))(a1->i64[0] + 96))(a1);
  float32x4_t v9 = a2[1];
  float32x4_t v10 = a2[2];
  float32x4_t v11 = (float32x4_t)vandq_s8((int8x16_t)v10, (int8x16_t)xmmword_1B6ECFDF0);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  float32x4_t v13 = vmulq_f32(vaddq_f32(a1[3], a1[2]), v12);
  int8x16_t v14 = (int8x16_t)vmulq_f32(v10, v13);
  v13.i32[3] = 0;
  float32x4_t v15 = vmulq_f32(vsubq_f32(v29, v28), v12);
  v15.i32[3] = 0;
  v16.i64[0] = __PAIR64__(v26, v27);
  v16.i64[1] = v8;
  float32x4_t v17 = vaddq_f32(v16, v15);
  int8x16_t v18 = (int8x16_t)vmulq_f32(*a2, v13);
  float32x4_t v19 = vmulq_f32(v9, v13);
  v14.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
  float32x4_t v20 = vaddq_f32(v19, a2[3]);
  float32x4_t v21 = vmulq_f32(v17, (float32x4_t)vandq_s8(*(int8x16_t *)a2, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v22 = (int8x16_t)vmulq_f32(v17, (float32x4_t)vandq_s8((int8x16_t)v9, (int8x16_t)xmmword_1B6ECFDF0));
  int8x16_t v23 = (int8x16_t)vmulq_f32(v17, v11);
  v23.i32[3] = 0;
  *(float32x2_t *)v21.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8));
  *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
  float32x4_t v24 = vsubq_f32(v20, v21);
  v24.i32[3] = 0;
  *a3 = v24;
  float32x4_t result = vaddq_f32(v20, v21);
  *a4 = result;
  return result;
}

float sub_1B6DEE964(float *a1, _OWORD *a2)
{
  *(_OWORD *)(*((void *)a1 + 8) + 16) = *a2;
  return sub_1B6DEE69C(a1);
}

uint64_t sub_1B6DEE974(uint64_t a1)
{
  return *(void *)(a1 + 64) + 16;
}

double sub_1B6DEE980(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  v6[0] = &unk_1F0FCCEE0;
  v6[1] = a2;
  long long v4 = *a4;
  long long v7 = *a3;
  long long v8 = v4;
  (*(void (**)(void, void *))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), v6);
  return nullsub_1(v6);
}

void sub_1B6DEEA00(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
}

double sub_1B6DEEA08@<D0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  long long v8 = 0uLL;
  v7[0] = &unk_1F0FB1840;
  long long v9 = xmmword_1B6E4F300;
  long long v10 = xmmword_1B6E4F320;
  long long v11 = xmmword_1B6E4F2E0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v14 = -581039253;
  float32x4_t v15 = vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B6E4F2E0, *a2, 2), vaddq_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*a2)), vmulq_lane_f32((float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)a2->f32, 1)));
  long long v5 = xmmword_1B6ECFFF0;
  long long v6 = xmmword_1B6ECFDA0;
  (*(void (**)(uint64_t, void *, long long *, long long *))(*(void *)a1 + 128))(a1, v7, &v5, &v6);
  *a3 = v8;
  return nullsub_1(v7);
}

const char *sub_1B6DEEAF8()
{
  return "TRIANGLEMESH";
}

void sub_1B6DEEB04(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DEEB3C(uint64_t result, float *a2)
{
  float v2 = *a2;
  float v3 = a2[4];
  if (*a2 >= v3) {
    float v4 = a2[4];
  }
  else {
    float v4 = *a2;
  }
  float v5 = a2[8];
  if (v4 >= v5) {
    float v4 = a2[8];
  }
  if (v4 <= *(float *)(result + 32))
  {
    BOOL v6 = v2 <= v3;
    if (v2 <= v3) {
      float v2 = a2[4];
    }
    uint64_t v7 = 4 * v6;
    if (v2 <= v5) {
      uint64_t v7 = 8;
    }
    if (a2[v7] >= *(float *)(result + 16))
    {
      long long v8 = a2 + 2;
      float v9 = a2[2];
      float v10 = a2[6];
      float v11 = a2[10];
      if (v9 >= v10) {
        float v12 = a2[6];
      }
      else {
        float v12 = a2[2];
      }
      if (v12 >= v11) {
        float v12 = a2[10];
      }
      if (v12 <= *(float *)(result + 40))
      {
        if (v9 <= v10)
        {
          float v9 = a2[6];
          long long v8 = a2 + 6;
        }
        if (v9 <= v11) {
          long long v8 = a2 + 10;
        }
        if (*v8 >= *(float *)(result + 24))
        {
          uint64_t v13 = a2 + 1;
          float v14 = a2[1];
          float v15 = a2[5];
          float v16 = a2[9];
          if (v14 >= v15) {
            float v17 = a2[5];
          }
          else {
            float v17 = a2[1];
          }
          if (v17 >= v16) {
            float v17 = a2[9];
          }
          if (v17 <= *(float *)(result + 36))
          {
            if (v14 <= v15)
            {
              float v14 = a2[5];
              uint64_t v13 = a2 + 5;
            }
            if (v14 <= v16) {
              uint64_t v13 = a2 + 9;
            }
            if (*v13 >= *(float *)(result + 20)) {
              return (*(uint64_t (**)(float))(**(void **)(result + 8) + 16))(*v13);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B6DEEC6C(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6DEECA4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  float32x4_t v3 = *(float32x4_t *)(result + 112);
  float v4 = *(float *)(result + 96);
  do
  {
    int8x16_t v5 = (int8x16_t)vmulq_f32(v3, *(float32x4_t *)(a2 + v2));
    float v6 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0];
    if (v6 > v4)
    {
      *(float *)(result + 96) = v6;
      *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + v2);
      float v4 = v6;
    }
    v2 += 16;
  }
  while (v2 != 48);
  return result;
}

void *sub_1B6DEECEC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *float32x4_t result = &unk_1F0FB24A0;
  result[1] = a4;
  result[2] = a5;
  result[3] = a2;
  result[4] = a3;
  result[5] = 0;
  return result;
}

void *sub_1B6DEED14(void *result, uint64_t a2, uint64_t a3)
{
  *float32x4_t result = &unk_1F0FB24A0;
  result[1] = 0;
  result[2] = 0;
  result[3] = a2;
  result[4] = 0;
  result[5] = a3;
  return result;
}

uint64_t sub_1B6DEED3C(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (a1[4])
  {
    double v8 = sub_1B6DF5FFC(a1[1]);
    float v9 = (_DWORD *)a1[3];
    uint64_t v10 = a1[4];
    int v11 = v9[2];
    int v12 = *(_DWORD *)(v10 + 8);
    float v13 = (*(float (**)(_DWORD *, double))(*(void *)v9 + 96))(v9, v8);
    float v14 = (*(float (**)(uint64_t))(*(void *)a1[4] + 96))(a1[4]);
    sub_1B6DF22D4((uint64_t)v74, (uint64_t)v9, v10, v11, v12, a1[1], a1[2], v13, v14);
    int v73 = 1566444395;
    float32x4_t v15 = a2[1];
    v72[0] = *a2;
    v72[1] = v15;
    float32x4_t v16 = a2[3];
    v72[2] = a2[2];
    v72[3] = v16;
    float32x4_t v17 = a3[1];
    v72[4] = *a3;
    v72[5] = v17;
    float32x4_t v18 = a3[3];
    v72[6] = a3[2];
    v72[7] = v18;
    return sub_1B6DF2324(v74, v72, a4, 0, 0);
  }
  else
  {
    uint64_t v20 = a1[3];
    uint64_t v21 = a1[5];
    float32x4_t v22 = a2[1];
    float32x4_t v23 = a2[2];
    float32x4_t v24 = a2[3];
    float32x4_t v26 = *a3;
    float32x4_t v25 = a3[1];
    float32x4_t v27 = a3[2];
    int8x16_t v28 = (int8x16_t)vtrn1q_s32(*(int32x4_t *)a3, (int32x4_t)v25);
    v29.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
    v30.i64[0] = v28.i64[0];
    v30.i64[1] = v27.u32[0];
    v28.i64[0] = 0x8000000080000000;
    v28.i64[1] = 0x8000000080000000;
    float32x4_t v31 = (float32x4_t)veorq_s8((int8x16_t)a3[3], v28);
    int8x16_t v32 = (int8x16_t)vmulq_f32(v30, v31);
    *(int32x2_t *)v33.f32 = vzip2_s32(*(int32x2_t *)a3->f32, *(int32x2_t *)v25.f32);
    *(int32x2_t *)&v33.u32[2] = vzip2_s32(*(int32x2_t *)v27.f32, 0);
    int8x16_t v34 = (int8x16_t)vmulq_f32(v33, v31);
    float32x2_t v35 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
    v29.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
    int8x16_t v36 = (int8x16_t)vmulq_f32(v29, v31);
    v36.i32[3] = 0;
    *(float32x2_t *)v32.i8 = vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v34.i8);
    float32x4_t v37 = *a2;
    v37.i32[3] = 0;
    float32x4_t v38 = v22;
    v38.i32[3] = 0;
    *(float32x2_t *)v32.i8 = vadd_f32(*(float32x2_t *)v32.i8, v35);
    float32x4_t v39 = v23;
    v39.i32[3] = 0;
    float32x4_t v40 = vmlaq_laneq_f32(vmulq_laneq_f32(v37, *a3, 2), v38, v25, 2);
    float32x4_t v70 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v37, *(float32x2_t *)a3->f32, 1), v38, *(float32x2_t *)v25.f32, 1), v39, *(float32x2_t *)v27.f32, 1);
    int8x16_t v41 = (int8x16_t)vmulq_f32(v24, v30);
    int8x16_t v42 = (int8x16_t)vmulq_f32(v24, v33);
    int8x16_t v43 = (int8x16_t)vmulq_f32(v24, v29);
    v43.i32[3] = 0;
    float32x2_t v44 = vadd_f32(*(float32x2_t *)v32.i8, vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8)));
    float32x4_t v69 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v37, COERCE_FLOAT(*a3)), v38, v25.f32[0]), v39, v27.f32[0]);
    v26.i32[3] = 0;
    v25.i32[3] = 0;
    float32x4_t v68 = vmlaq_laneq_f32(v40, v39, v27, 2);
    v27.i32[3] = 0;
    float32x4_t v45 = vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v26, *(float32x2_t *)a2->f32, 1), v25, *(float32x2_t *)v22.f32, 1), v27, *(float32x2_t *)v23.f32, 1);
    float32x4_t v46 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v26, COERCE_FLOAT(*a2)), v25, v22.f32[0]), v27, v23.f32[0]);
    float32x4_t v47 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v26, *a2, 2), v25, v22, 2), v27, v23, 2);
    float32x4_t v48 = (float32x4_t)veorq_s8(*(int8x16_t *)(v21 + 64), v28);
    int8x16_t v49 = (int8x16_t)vmulq_f32(v46, v48);
    int8x16_t v50 = (int8x16_t)vmulq_f32(v45, v48);
    int8x16_t v51 = (int8x16_t)vmulq_f32(v47, v48);
    v51.i32[3] = 0;
    *(float32x2_t *)v49.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v50.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)));
    v49.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)), 0);
    float32x2_t v52 = vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0));
    v74[0] = v49;
    (*(void (**)(float32x4_t *__return_ptr))(*(void *)v20 + 128))(v72);
    float32x4_t v53 = vmulq_f32(v69, v72[0]);
    int8x16_t v54 = (int8x16_t)vmulq_f32(v70, v72[0]);
    int8x16_t v55 = (int8x16_t)vmulq_f32(v68, v72[0]);
    v55.i32[3] = 0;
    *(float32x2_t *)v53.f32 = vadd_f32(v44, vadd_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v54.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL))));
    *(float32x2_t *)&v53.u32[2] = vadd_f32(v52, vpadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), 0));
    float32x4_t v56 = *(float32x4_t *)(v21 + 64);
    int8x16_t v57 = (int8x16_t)vmulq_f32(v56, v53);
    float32x4_t v58 = vmulq_n_f32(v56, vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0]- *(float *)(v21 + 80));
    v58.i32[3] = 0;
    float32x4_t v59 = vsubq_f32(v53, v58);
    float32x4_t v60 = a3[2];
    int8x16_t v61 = (int8x16_t)vmulq_f32(v60, v59);
    v59.i32[3] = 0;
    float32x4_t v62 = a3[1];
    int8x16_t v63 = (int8x16_t)vmulq_f32(*a3, v59);
    float32x4_t v64 = vmulq_f32(v62, v59);
    v61.i32[3] = 0;
    *(float32x2_t *)v64.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v64.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)));
    *(float32x2_t *)&v64.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)), 0);
    int8x16_t v65 = (int8x16_t)vmulq_f32(v56, *a3);
    int8x16_t v66 = (int8x16_t)vmulq_f32(v56, v62);
    int8x16_t v67 = (int8x16_t)vmulq_f32(v56, v60);
    v67.i32[3] = 0;
    *(float32x2_t *)v60.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)), vpadd_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v66.i8));
    *(float32x2_t *)&v60.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)), 0);
    v74[0] = vaddq_f32(a3[3], v64);
    float32x4_t v71 = v60;
    return (*(uint64_t (**)(uint64_t, float32x4_t *, _OWORD *))(*(void *)a4 + 32))(a4, &v71, v74);
  }
}

uint64_t sub_1B6DEF174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  float32x4_t v11 = vsubq_f32(*(float32x4_t *)(a3 + 48), *(float32x4_t *)(a2 + 48));
  v11.i32[3] = 0;
  float32x4_t v42 = v11;
  float32x4_t v51 = v11;
  v45[0].i32[0] = 0;
  sub_1B6DD6E68((_OWORD *)a2, (float32x2_t *)a3, &v55, v45[0].f32);
  float32x4_t v12 = vmulq_n_f32(v55, v45[0].f32[0]);
  v12.i32[3] = 0;
  float32x4_t v39 = v12;
  float32x4_t v50 = v12;
  float32x4_t v13 = vsubq_f32(*(float32x4_t *)(a5 + 48), *(float32x4_t *)(a4 + 48));
  v13.i32[3] = 0;
  float32x4_t v40 = v13;
  float32x4_t v49 = v13;
  v45[0].i32[0] = 0;
  sub_1B6DD6E68((_OWORD *)a4, (float32x2_t *)a5, &v55, v45[0].f32);
  float32x4_t v14 = vmulq_n_f32(v55, v45[0].f32[0]);
  v14.i32[3] = 0;
  float32x4_t v38 = v14;
  float32x4_t v48 = v14;
  float v15 = (*(float (**)(void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24));
  uint64_t v16 = *(void *)(a1 + 32);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
  }
  else {
    float v17 = 0.0;
  }
  int8x16_t v18 = (int8x16_t)vmulq_f32(v39, v39);
  int8x16_t v19 = (int8x16_t)vmulq_f32(v38, v38);
  float v20 = (float)(v17
              * sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)).f32[0]))+ (float)(sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0])* v15);
  float32x4_t v21 = vsubq_f32(v40, v42);
  v21.i32[3] = 0;
  int8x16_t v22 = (int8x16_t)vmulq_f32(v21, v21);
  if ((float)(v20
             + sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).f32[0])) != 0.0)
  {
    float32x4_t v43 = v21;
    v55.i64[0] = (uint64_t)&unk_1F0FB1128;
    strcpy((char *)v58, "k\v^]");
    sub_1B6DEED3C((uint64_t *)a1, (float32x4_t *)a2, (float32x4_t *)a4, (uint64_t)&v55);
    long long v24 = v57;
    long long v47 = v57;
    if (LOBYTE(v58[1]))
    {
      float32x4_t v25 = v56;
      int8x16_t v26 = (int8x16_t)vmulq_f32(v56, v43);
      if ((float)(v20
                 + vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)).f32[0]) > 0.00000011921)
      {
        float v27 = v58[0] + *(float *)(a6 + 192);
        float v28 = 0.0;
        if (v27 <= 0.001)
        {
LABEL_25:
          *(float *)(a6 + 176) = v28;
          uint64_t result = 1;
          *(float32x4_t *)(a6 + 144) = v25;
          *(_OWORD *)(a6 + 160) = v24;
          return result;
        }
        uint64_t v29 = 0;
        float v30 = 0.0;
        while (1)
        {
          uint64_t v31 = *(void *)(a6 + 184);
          if (v31)
          {
            v45[0] = (float32x4_t)xmmword_1B6E4F540;
            float32x4_t v41 = v25;
            (*(void (**)(uint64_t, long long *, float32x4_t *, float))(*(void *)v31 + 40))(v31, &v47, v45, 0.2);
            float32x4_t v25 = v41;
          }
          int8x16_t v32 = (int8x16_t)vmulq_f32(v25, v43);
          float v33 = v20
              + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8)).f32[0];
          if (v33 <= 0.00000011921) {
            break;
          }
          uint64_t result = 0;
          float v34 = v27 / v33;
          float v28 = v30 + v34;
          BOOL v35 = (float)(v30 + v34) > v30 && v28 <= 1.0;
          if (!v35 || v28 < 0.0) {
            return result;
          }
          sub_1B6DEF658((float32x4_t *)a2, &v51, &v50, v45, v30 + v34);
          sub_1B6DEF658((float32x4_t *)a4, &v49, &v48, v44, v28);
          uint64_t v36 = *(void *)(a6 + 184);
          if (v36)
          {
            v52[0] = xmmword_1B6E4F300;
            (*(void (**)(uint64_t, uint64_t *, _OWORD *, float))(*(void *)v36 + 40))(v36, &v46, v52, 0.2);
          }
          (**(void (***)(uint64_t, float))a6)(a6, v28);
          *(void *)&v52[0] = &unk_1F0FB1128;
          strcpy((char *)v54, "k\v^]");
          sub_1B6DEED3C((uint64_t *)a1, v45, v44, (uint64_t)v52);
          if (!LOBYTE(v54[1]))
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 16))(a6, 0xFFFFFFFFLL, v29);
            return 0;
          }
          float v37 = *(float *)(a6 + 192);
          long long v24 = v53;
          long long v47 = v53;
          if (v29 == 64)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 16))(a6, 4294967294, 65);
            return 0;
          }
          uint64_t v29 = (v29 + 1);
          float32x4_t v25 = (float32x4_t)v52[1];
          float v27 = v54[0] + v37;
          float v30 = v28;
          if ((float)(v54[0] + v37) <= 0.001) {
            goto LABEL_25;
          }
        }
      }
    }
  }
  return 0;
}

void sub_1B6DEF658(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float a5)
{
  float v6 = a5;
  float32x4_t v8 = vmulq_n_f32(*a2, a5);
  v8.i32[3] = 0;
  a4[3] = vaddq_f32(a1[3], v8);
  float32x4_t v9 = *a3;
  int8x16_t v10 = (int8x16_t)vmulq_f32(v9, v9);
  float v11 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0]);
  if ((float)(v11 * v6) <= 0.7854) {
    float v12 = v11;
  }
  else {
    float v12 = 0.7854 / v6;
  }
  if (v12 >= 0.001)
  {
    float32x4_t v27 = *a3;
    float v29 = v6;
    float v14 = sinf((float)(v12 * 0.5) * v6);
    float32x4_t v9 = v27;
    float v6 = v29;
    float v13 = v14 / v12;
  }
  else
  {
    float v13 = (float)(v12 * (float)((float)((float)((float)(v6 * v6) * v6) * -0.020833) * v12)) + (float)(v6 * 0.5);
  }
  float32x4_t v30 = vmulq_n_f32(v9, v13);
  float v15 = cosf((float)(v12 * v6) * 0.5);
  float32x4_t v16 = v30;
  v16.f32[3] = v15;
  float32x4_t v28 = v16;
  sub_1B6DD7060(a1->f32, (float32x4_t *)&v32);
  int32x2_t v17 = (int32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  float32x2_t v18 = (float32x2_t)vzip1_s32(v17, *(int32x2_t *)v30.f32);
  int32x2_t v19 = (int32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
  int32x2_t v20 = vzip1_s32(v19, *(int32x2_t *)v32.i8);
  float32x2_t v21 = (float32x2_t)vext_s8(*(int8x8_t *)v30.f32, (int8x8_t)v17, 4uLL);
  float32x2_t v22 = vmul_f32(v18, (float32x2_t)vext_s8((int8x8_t)v19, *(int8x8_t *)v32.i8, 4uLL));
  *(float32x2_t *)v23.f32 = vmul_f32(v18, (float32x2_t)vext_s8(*(int8x8_t *)v32.i8, (int8x8_t)v19, 4uLL));
  *(float32x2_t *)&v23.u32[2] = vmul_f32(v21, (float32x2_t)vrev64_s32(v20));
  *(float32x2_t *)v24.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v30.f32, (float32x4_t)v32, 3), vmul_f32(v21, (float32x2_t)v20));
  v24.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v32.i8, 1), v22);
  float32x4_t v25 = vaddq_f32(vsubq_f32(vmulq_laneq_f32((float32x4_t)v32, v28, 3), v23), (float32x4_t)veorq_s8(v24, (int8x16_t)xmmword_1B6E72E20));
  float32x4_t v26 = vmulq_f32(v25, v25);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  float32x4_t v31 = vmulq_n_f32(v25, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32).f32[0]));
  sub_1B6548938((uint64_t)a4, &v31);
}

void sub_1B6DEF7F8(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6DEF830()
{
}

uint64_t sub_1B6DEF84C(uint64_t result, _OWORD *a2, _OWORD *a3, float a4)
{
  if (*(float *)(result + 48) > a4)
  {
    *(unsigned char *)(result + 5sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(_OWORD *)(result + 16) = *a2;
    *(_OWORD *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = *a3;
    *(float *)(result + 48) = a4;
  }
  return result;
}

void *sub_1B6DEF878(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *uint64_t result = &unk_1F0FB0DE0;
  result[1] = a4;
  result[2] = a2;
  result[3] = a3;
  return result;
}

uint64_t sub_1B6DEF89C(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  sub_1B6DF5FFC(*(void *)(a1 + 8));
  float32x4_t v32 = *(float32x4_t *)(a2 + 48);
  float32x4_t v34 = a3[3];
  float32x4_t v30 = a4[3];
  float32x4_t v31 = a5[3];
  v44[0] = &unk_1F0FB1128;
  strcpy((char *)v47, "k\v^]");
  sub_1B6DF22D0((uint64_t)v43, *(_DWORD **)(a1 + 16), *(_DWORD **)(a1 + 24), *(void *)(a1 + 8), 0);
  int v42 = 1566444395;
  long long v12 = *(_OWORD *)(a2 + 16);
  v36[0] = *(_OWORD *)a2;
  v36[1] = v12;
  float32x4_t v13 = *(float32x4_t *)(a2 + 48);
  v36[2] = *(_OWORD *)(a2 + 32);
  float32x4_t v37 = v13;
  float32x4_t v14 = a4[1];
  float32x4_t v38 = *a4;
  float32x4_t v39 = v14;
  float32x4_t v15 = a4[3];
  float32x4_t v40 = a4[2];
  float32x4_t v41 = v15;
  sub_1B6DF2324(v43, v36, v44, 0, 0);
  if (LOBYTE(v47[1]))
  {
    float32x4_t v16 = vsubq_f32(vsubq_f32(v34, v32), vsubq_f32(v31, v30));
    v16.i32[3] = 0;
    float32x4_t v33 = v16;
    float v17 = v47[0];
    float32x4_t v18 = v45;
    if (v47[0] <= 0.001)
    {
      long long v27 = v46;
      float v26 = 0.0;
LABEL_16:
      int8x16_t v28 = (int8x16_t)vmulq_f32(v18, v33);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8)).f32[0] < (float)-*(float *)(a6 + 192))
      {
        *(float *)(a6 + 176) = v26;
        uint64_t result = 1;
        *(float32x4_t *)(a6 + 144) = v18;
        *(_OWORD *)(a6 + 160) = v27;
        return result;
      }
    }
    else
    {
      float v19 = 0.0;
      int v20 = 33;
      while (--v20)
      {
        uint64_t result = 0;
        int8x16_t v22 = (int8x16_t)vmulq_f32(v18, v33);
        float v23 = v19
            - (float)(v17
                    / vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8)).f32[0]);
        BOOL v24 = v23 > v19 && v23 <= 1.0;
        if (!v24 || v23 < 0.0) {
          return result;
        }
        float v35 = v23;
        (**(void (***)(uint64_t))a6)(a6);
        float32x4_t v25 = vaddq_f32(a4[3], vmulq_n_f32(vsubq_f32(a5[3], a4[3]), v35));
        float32x4_t v37 = vaddq_f32(*(float32x4_t *)(a2 + 48), vmulq_n_f32(vsubq_f32(a3[3], *(float32x4_t *)(a2 + 48)), v35));
        float32x4_t v41 = v25;
        sub_1B6DF2324(v43, v36, v44, 0, 0);
        if (!LOBYTE(v47[1])) {
          return 0;
        }
        float v17 = v47[0];
        if (v47[0] < 0.0)
        {
          *(float *)(a6 + 176) = v35;
          long long v29 = v46;
          *(float32x4_t *)(a6 + 144) = v45;
          *(_OWORD *)(a6 + 160) = v29;
          return 1;
        }
        float32x4_t v18 = v45;
        float v26 = v35;
        float v19 = v35;
        if (v47[0] <= 0.001)
        {
          long long v27 = v46;
          goto LABEL_16;
        }
      }
    }
  }
  return 0;
}

void sub_1B6DEFB4C(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

BOOL sub_1B6DEFB84(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  void (*v19)(float32x4_t *__return_ptr, void *, void);
  void *v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float v33;
  float v34;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41[8];
  void (*v42)(float32x4_t *__return_ptr, void *, void);
  uint64_t v43;
  unsigned char v44[144];
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  float32x4_t v51 = *MEMORY[0x1E4F143B8];
  sub_1B6DEFE14(a1, a2, a3, a4, a6, v41, 0);
  float32x4_t v45 = 0;
  long long v46 = 0;
  float32x4_t v50 = 2;
  uint64_t v48 = 0;
  long long v47 = 0;
  int v13 = sub_1B6DEFF10((uint64_t)v44, v41, a5, v9, v10, v11, v12);
  int v14 = v13;
  if (v13)
  {
    if (v13 == 1) {
      int v15 = 1;
    }
    else {
      int v15 = 2;
    }
    *(_DWORD *)a6 = v15;
  }
  else
  {
    uint64_t v16 = v49;
    if (*(_DWORD *)(v49 + 48))
    {
      unint64_t v17 = 0;
      float32x4_t v37 = 0u;
      float32x4_t v18 = 0uLL;
      do
      {
        float v19 = v42;
        int v20 = (void *)(v41[0].i64[0] + (v43 >> 1));
        uint64_t v36 = v18;
        float32x4_t v38 = *(float *)(v16 + 4 * v17 + 32);
        if (v43) {
          float v19 = *(void (**)(float32x4_t *__return_ptr, void *, void))(*v20 + v42);
        }
        v19(&v40, v20, *(void *)(v16 + 8 * v17));
        float32x2_t v21 = vmulq_n_f32(v40, v38);
        v21.i32[3] = 0;
        float32x4_t v37 = vaddq_f32(v37, v21);
        v22.i64[0] = 0x8000000080000000;
        v22.i64[1] = 0x8000000080000000;
        float32x4_t v39 = veorq_s8(*(int8x16_t *)*(void *)(v49 + 8 * v17), v22);
        sub_1B6DF03A8(v41, (float32x4_t *)&v39, 1, &v40);
        float v23 = vmulq_n_f32(v40, v38);
        v23.i32[3] = 0;
        float32x4_t v18 = vaddq_f32(v36, v23);
        ++v17;
        uint64_t v16 = v49;
      }
      while (v17 < *(unsigned int *)(v49 + 48));
    }
    else
    {
      float32x4_t v18 = 0uLL;
      float32x4_t v37 = 0u;
    }
    BOOL v24 = vmulq_f32(v37, *a2);
    float32x4_t v25 = (int8x16_t)vmulq_f32(v37, a2[1]);
    float v26 = (int8x16_t)vmulq_f32(v37, a2[2]);
    v26.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
    *(float32x4_t *)(a6 + 16) = vaddq_f32(v24, a2[3]);
    long long v27 = vmulq_f32(v18, *a2);
    int8x16_t v28 = (int8x16_t)vmulq_f32(v18, a2[1]);
    long long v29 = (int8x16_t)vmulq_f32(v18, a2[2]);
    v29.i32[3] = 0;
    *(float32x2_t *)v27.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v28.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)));
    *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
    float32x4_t v30 = vaddq_f32(v27, a2[3]);
    float32x4_t v31 = vsubq_f32(v37, v18);
    v31.i32[3] = 0;
    float32x4_t v32 = (int8x16_t)vmulq_f32(v31, v31);
    float32x4_t v33 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8)).f32[0]);
    *(float *)(a6 + 64) = v33;
    if (v33 <= 0.0001) {
      float32x4_t v34 = 1.0;
    }
    else {
      float32x4_t v34 = 1.0 / v33;
    }
    *(float32x4_t *)(a6 + 3sub_1B6DC4968((unsigned int *)this + 2) = v30;
    *(float32x4_t *)(a6 + 48) = vmulq_n_f32(v31, v34);
  }
  return v14 == 0;
}

uint64_t sub_1B6DEFE14(uint64_t result, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, int a7)
{
  *(_DWORD *)a5 = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  a6->i64[0] = result;
  a6->i64[1] = a3;
  float32x4_t v7 = *a2;
  float32x4_t v8 = a2[1];
  v7.i32[3] = 0;
  v8.i32[3] = 0;
  float32x4_t v9 = a2[2];
  v9.i32[3] = 0;
  float32x4_t v10 = a4[1];
  float32x4_t v11 = a4[2];
  float32x4_t v12 = vmulq_n_f32(v7, COERCE_FLOAT(*a4));
  float32x4_t v13 = vmulq_lane_f32(v7, *(float32x2_t *)a4->f32, 1);
  float32x4_t v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, *a4, 2), v8, v10, 2), v9, v11, 2);
  a6[1] = vmlaq_n_f32(vmlaq_n_f32(v12, v8, v10.f32[0]), v9, v11.f32[0]);
  a6[2] = vmlaq_lane_f32(vmlaq_lane_f32(v13, v8, *(float32x2_t *)v10.f32, 1), v9, *(float32x2_t *)v11.f32, 1);
  a6[3] = v14;
  float32x4_t v15 = *a4;
  float32x4_t v16 = a4[1];
  float32x4_t v17 = a4[2];
  float32x4_t v18 = a2[2];
  float32x4_t v19 = vsubq_f32(a4[3], a2[3]);
  v19.i32[3] = 0;
  float32x4_t v20 = *a2;
  float32x4_t v21 = a2[1];
  v15.i32[3] = 0;
  float32x4_t v22 = vmulq_lane_f32(v15, *(float32x2_t *)a2->f32, 1);
  v20.i32[3] = 0;
  v16.i32[3] = 0;
  float32x4_t v23 = vmlaq_laneq_f32(vmulq_laneq_f32(v15, *a2, 2), v16, v21, 2);
  v21.i32[3] = 0;
  v17.i32[3] = 0;
  float32x4_t v24 = vmlaq_laneq_f32(v23, v17, v18, 2);
  v18.i32[3] = 0;
  a6[4] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, COERCE_FLOAT(*a2)), v16, v21.f32[0]), v17, v18.f32[0]);
  a6[5] = vmlaq_lane_f32(vmlaq_lane_f32(v22, v16, *(float32x2_t *)v21.f32, 1), v17, *(float32x2_t *)v18.f32, 1);
  a6[6] = v24;
  a6[7] = vaddq_f32(vaddq_f32(vmulq_n_f32(v20, v19.f32[0]), vmulq_lane_f32(v21, *(float32x2_t *)v19.f32, 1)), vmulq_laneq_f32(v18, v19, 2));
  float32x4_t v25 = sub_1B6DE7D9C;
  if (a7) {
    float32x4_t v25 = sub_1B6DE824C;
  }
  a6[8].i64[0] = (uint64_t)v25;
  a6[8].i64[1] = 0;
  return result;
}

uint64_t sub_1B6DEFF10(uint64_t a1, _OWORD *a2, float32x4_t *a3, double a4, double a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 416) = a1 + 288;
  *(void *)(a1 + 424) = a1 + 320;
  *(void *)(a1 + 43sub_1B6DC4968((unsigned int *)this + 2) = a1 + 352;
  *(void *)(a1 + 440) = a1 + 384;
  *(void *)(a1 + 448) = 4;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = a2[2];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = a2[7];
  *(_OWORD *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = a2[8];
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  float32x4_t v8 = *a3;
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  *(float32x2_t *)a6.f32 = vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8);
  int8x16_t v10 = vextq_s8(v9, v9, 8uLL);
  *(float32x2_t *)a7.f32 = vadd_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)v10.i8);
  a6.i64[0] = 0;
  v10.i64[0] = 0;
  float32x4_t v53 = a7;
  int8x16_t v54 = v10;
  *(float32x4_t *)(a1 + 144) = *a3;
  v57[0] = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(a7, a6), 0), (int8x16_t)vnegq_f32(v8), (int8x16_t)xmmword_1B6E4F300);
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 448) = 3;
  *(void *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = a1 + 384;
  *(_DWORD *)(a1 + 216) = 1;
  sub_1B6DF14A0((float32x4_t *)a1, v57, a1 + 384);
  int v11 = 0;
  int v12 = 0;
  *(_DWORD *)(a1 + 200) = 1065353216;
  int8x16_t v13 = *(int8x16_t *)(*(void *)(a1 + 168) + 16);
  *(int8x16_t *)(a1 + 144) = v13;
  v57[2] = (float32x4_t)v13;
  v57[3] = (float32x4_t)v13;
  v57[0] = (float32x4_t)v13;
  v57[1] = (float32x4_t)v13;
  unsigned int v14 = *(_DWORD *)(a1 + 452);
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  float32x4_t v16 = (float32x4_t)v13;
  while (2)
  {
    unsigned int v17 = v14;
    int8x16_t v18 = (int8x16_t)vmulq_f32(v16, v16);
    float v19 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0]);
    if (v19 < 0.0001)
    {
      *(_DWORD *)(a1 + 464) = 1;
LABEL_28:
      uint64_t result = *(unsigned int *)(a1 + 464);
      unsigned int v20 = v17;
    }
    else
    {
      unsigned int v20 = 1 - v14;
      uint64_t v21 = a1 + 168 + 56 * v14;
      uint64_t v22 = a1 + 168 + 56 * (1 - v14);
      uint64_t v23 = a1 + 56 * v14;
      float32x4_t v25 = (int *)(v23 + 216);
      uint64_t v24 = *(unsigned int *)(v23 + 216);
      int8x16_t v56 = veorq_s8(v13, v15);
      *(_DWORD *)(v23 + 4 * v24 + 200) = 0;
      LODWORD(v23) = *(_DWORD *)(a1 + 448) - 1;
      *(_DWORD *)(a1 + 448) = v23;
      uint64_t v26 = *(void *)(a1 + 8 * v23 + 416);
      *(void *)(v21 + 8 * v24) = v26;
      *float32x4_t v25 = v24 + 1;
      sub_1B6DF14A0((float32x4_t *)a1, (float32x4_t *)&v56, v26);
      uint64_t v27 = 0;
      int v28 = *v25;
      float32x4_t v29 = *(float32x4_t *)(*(void *)(v21 + 8 * (*v25 - 1)) + 16);
      do
      {
        float32x4_t v30 = vsubq_f32(v29, v57[v27]);
        v30.i32[3] = 0;
        int8x16_t v31 = (int8x16_t)vmulq_f32(v30, v30);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)).f32[0] < 0.0001)goto LABEL_27; {
        ++v27;
        }
      }
      while (v27 != 4);
      int v11 = (v11 + 1) & 3;
      v57[v11] = v29;
      int8x16_t v32 = (int8x16_t)vmulq_f32(v29, *(float32x4_t *)(a1 + 144));
      float v33 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0]/ v19;
      int8x16_t v34 = v54;
      if (v33 > *(float *)v54.i32) {
        *(float *)v34.i32 = v33;
      }
      if ((float)((float)(v19 - *(float *)v34.i32) + (float)(v19 * -0.0001)) <= 0.0) {
        goto LABEL_27;
      }
      unsigned int v55 = 0;
      int8x16_t v54 = v34;
      if (v28 == 4)
      {
        v35.f32[0] = sub_1B6DF11AC((float32x4_t *)(*(void *)v21 + 16), (float32x4_t *)(*(void *)(v21 + 8) + 16), (float32x4_t *)(*(void *)(v21 + 16) + 16), (float32x4_t *)(*(void *)(v21 + 24) + 16), (uint64_t)&v56, &v55);
      }
      else if (v28 == 3)
      {
        v35.f32[0] = sub_1B6DF0E9C((float32x4_t *)(*(void *)v21 + 16), (float32x4_t *)(*(void *)(v21 + 8) + 16), (float32x4_t *)(*(void *)(v21 + 16) + 16), (uint64_t)&v56, &v55);
      }
      else
      {
        float32x4_t v35 = v53;
        if (v28 == 2) {
          *(float32x2_t *)v35.f32 = sub_1B6DF0DD8((float32x4_t *)(*(void *)v21 + 16), (float32x4_t *)(*(void *)(v21 + 8) + 16), (uint64_t)&v56, &v55);
        }
      }
      if (v35.f32[0] < 0.0)
      {
LABEL_27:
        unsigned int v17 = *(_DWORD *)(a1 + 452);
        uint64_t v48 = a1 + 56 * v17;
        unsigned int v49 = *(_DWORD *)(v48 + 216) - 1;
        *(_DWORD *)(v48 + 216) = v49;
        uint64_t v50 = *(void *)(v48 + 8 * v49 + 168);
        uint64_t v51 = *(unsigned int *)(a1 + 448);
        *(_DWORD *)(a1 + 448) = v51 + 1;
        *(void *)(a1 + 8 * v51 + 416) = v50;
        goto LABEL_28;
      }
      uint64_t v36 = a1 + 56 * v20;
      *(_DWORD *)(v36 + 216) = 0;
      float32x4_t v37 = (unsigned int *)(v36 + 216);
      int8x16_t v13 = 0uLL;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_DWORD *)(a1 + 45sub_1B6DC4968((unsigned int *)this + 2) = v20;
      uint64_t v38 = *v25;
      unsigned int v39 = v55;
      float32x4_t v16 = 0uLL;
      v15.i64[0] = 0x8000000080000000;
      v15.i64[1] = 0x8000000080000000;
      if (v38)
      {
        unsigned int v40 = 0;
        for (uint64_t i = 0; i != v38; ++i)
        {
          uint64_t v42 = *(void *)(v21 + 8 * i);
          if ((v39 >> i))
          {
            *(void *)(v22 + 8 * v40) = v42;
            float v43 = *(float *)&v56.i32[i];
            uint64_t v44 = a1 + 56 * v20 + 4 * v40++;
            *float32x4_t v37 = v40;
            *(float *)(v44 + 200) = v43;
            float32x4_t v45 = vmulq_n_f32(*(float32x4_t *)(*(void *)(v21 + 8 * i) + 16), v43);
            v45.i32[3] = 0;
            int8x16_t v13 = (int8x16_t)vaddq_f32(v16, v45);
            *(int8x16_t *)(a1 + 144) = v13;
            float32x4_t v16 = (float32x4_t)v13;
          }
          else
          {
            uint64_t v46 = *(unsigned int *)(a1 + 448);
            *(_DWORD *)(a1 + 448) = v46 + 1;
            *(void *)(a1 + 8 * v46 + 416) = v42;
          }
        }
      }
      if (v39 == 15) {
        *(_DWORD *)(a1 + 464) = 1;
      }
      if (v12 == 127)
      {
        uint64_t result = 2;
        *(_DWORD *)(a1 + 464) = 2;
        *(void *)(a1 + 456) = v22;
        return result;
      }
      float32x4_t v53 = v35;
      ++v12;
      uint64_t result = *(unsigned int *)(a1 + 464);
      unsigned int v14 = v20;
      if (!result) {
        continue;
      }
    }
    break;
  }
  *(void *)(a1 + 456) = a1 + 56 * v20 + 168;
  if (result == 1)
  {
    *(_DWORD *)(a1 + 160) = 0;
  }
  else if (!result)
  {
    int8x16_t v52 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 144), *(float32x4_t *)(a1 + 144));
    *(float *)(a1 + 160) = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).f32[0]);
  }
  return result;
}

void *sub_1B6DF03A8@<X0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, float32x4_t *a4@<X8>)
{
  void *(*v6)(float32x4_t *__return_ptr, void *, int8x16_t *);
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void *);
  uint64_t v10;
  void *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  void *result;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  float32x4_t v20;
  uint64_t vars8;

  if (a3)
  {
    float v6 = (void *(*)(float32x4_t *__return_ptr, void *, int8x16_t *))a1[8].i64[0];
    float32x4_t v7 = a1[8].i64[1];
    float32x4_t v8 = (void *)(a1->i64[1] + (v7 >> 1));
    if (v7) {
      float v6 = *(void *(**)(float32x4_t *__return_ptr, void *, int8x16_t *))(*v8 + v6);
    }
    int v12 = (int8x16_t)vmulq_f32(a1[1], *a2);
    int8x16_t v13 = (int8x16_t)vmulq_f32(*a2, a1[2]);
    unsigned int v14 = (int8x16_t)vmulq_f32(*a2, a1[3]);
    v14.i32[3] = 0;
    *(float32x2_t *)v12.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v13.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)));
    v12.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
    float v19 = v12;
    uint64_t result = v6(&v20, v8, &v19);
    float32x4_t v16 = vmulq_f32(a1[4], v20);
    unsigned int v17 = (int8x16_t)vmulq_f32(v20, a1[5]);
    int8x16_t v18 = (int8x16_t)vmulq_f32(v20, a1[6]);
    v18.i32[3] = 0;
    *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
    *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
    *a4 = vaddq_f32(v16, a1[7]);
  }
  else
  {
    int8x16_t v9 = (uint64_t (*)(void *))a1[8].i64[0];
    int8x16_t v10 = a1[8].i64[1];
    int v11 = (void *)(a1->i64[0] + (v10 >> 1));
    if (v10) {
      int8x16_t v9 = *(uint64_t (**)(void *))(*v11 + v9);
    }
    return (void *)v9(v11);
  }
  return result;
}

float sub_1B6DF052C(uint64_t a1, uint64_t a2)
{
  void (*v20)(float32x4_t *__return_ptr, void *, uint64_t);
  void *v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35[8];
  void (*v36)(float32x4_t *__return_ptr, void *, uint64_t);
  uint64_t v37;
  float32x4_t v38[3];
  unsigned int v39;
  float32x4_t v40;
  float v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  float32x4_t v46[9];
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  MEMORY[0x1F4188790](a1, a2);
  uint64_t v3 = v2;
  int8x16_t v5 = v4;
  float32x4_t v7 = v6;
  int8x16_t v52 = *MEMORY[0x1E4F143B8];
  sub_1B6DEFE14(v8, v6, v9, v10, v2, v35, v11);
  uint64_t v48 = 0;
  long long v47 = 0;
  uint64_t v51 = 2;
  uint64_t v50 = 0;
  unsigned int v49 = 0;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  v38[0] = (float32x4_t)veorq_s8(*v5, v12);
  int v15 = sub_1B6DEFF10((uint64_t)v46, v35, v38, *(double *)v38[0].i64, COERCE_DOUBLE(0x8000000080000000), v13, v14);
  if (v15 == 2)
  {
    *(_DWORD *)uint64_t v3 = 2;
  }
  else if (v15 == 1)
  {
    uint64_t v42 = 0;
    float v43 = 0;
    uint64_t v44 = 0;
    float32x4_t v45 = 0;
    sub_1B6DF1690((uint64_t)v38);
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    int8x16_t v34 = (float32x4_t)veorq_s8(*v5, v17);
    if (sub_1B6DF07CC((int *)v38, v46, (int8x16_t *)&v34) == 9)
    {
      *(_DWORD *)uint64_t v3 = 3;
    }
    else
    {
      float32x4_t v18 = 0uLL;
      if (v39)
      {
        for (unint64_t i = 0; i < v39; ++i)
        {
          unsigned int v20 = v36;
          uint64_t v21 = (void *)(v35[0].i64[0] + (v37 >> 1));
          float v33 = v18;
          if (v37) {
            unsigned int v20 = *(void (**)(float32x4_t *__return_ptr, void *, uint64_t))(*v21 + v36);
          }
          v20(&v34, v21, v38[0].i64[i + 1]);
          uint64_t v22 = vmulq_n_f32(v34, v38[2].f32[i + 2]);
          v22.i32[3] = 0;
          float32x4_t v18 = vaddq_f32(v33, v22);
        }
      }
      *(_DWORD *)uint64_t v3 = 1;
      uint64_t v23 = vmulq_f32(v18, *v7);
      uint64_t v24 = (int8x16_t)vmulq_f32(v18, v7[1]);
      float32x4_t v25 = (int8x16_t)vmulq_f32(v18, v7[2]);
      v25.i32[3] = 0;
      *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
      *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
      *(float32x4_t *)(v3 + 16) = vaddq_f32(v23, v7[3]);
      *(float *)v24.i32 = v41;
      uint64_t v26 = vmulq_n_f32(v40, v41);
      v26.i32[3] = 0;
      uint64_t v27 = vsubq_f32(v18, v26);
      int v28 = v27;
      v28.i32[3] = 0;
      float32x4_t v29 = (int8x16_t)vmulq_f32(v7[2], v27);
      float32x4_t v30 = (int8x16_t)vmulq_f32(*v7, v28);
      int8x16_t v31 = vmulq_f32(v7[1], v28);
      v29.i32[3] = 0;
      *(float32x2_t *)v31.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v31.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL)));
      *(float32x2_t *)&v31.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), 0);
      v29.i64[0] = 0x8000000080000000;
      v29.i64[1] = 0x8000000080000000;
      int8x16_t v32 = veorq_s8((int8x16_t)v40, v29);
      *(float32x4_t *)(v3 + 3sub_1B6DC4968((unsigned int *)this + 2) = vaddq_f32(v7[3], v31);
      *(int8x16_t *)(v3 + 48) = v32;
      float result = -*(float *)v24.i32;
      *(float *)(v3 + 64) = -*(float *)v24.i32;
    }
  }
  return result;
}

uint64_t sub_1B6DF07CC(int *a1, float32x4_t *a2, int8x16_t *a3)
{
  int8x16_t v5 = (float32x4_t **)a2[28].i64[1];
  if (*((_DWORD *)v5 + 12) < 2u || !sub_1B6DF16FC(a2)) {
    goto LABEL_49;
  }
  uint64_t v7 = *((void *)a1 + 1805);
  if (v7)
  {
    unsigned int v8 = a1[3612];
    unsigned int v9 = a1[3616];
    do
    {
      uint64_t v10 = *(void *)(v7 + 80);
      if (v10) {
        *(void *)(v10 + 7sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(v7 + 72);
      }
      uint64_t v11 = *(void *)(v7 + 72);
      if (v11) {
        *(void *)(v11 + 80) = *(void *)(v7 + 80);
      }
      if (*((void *)a1 + 1805) == v7) {
        *((void *)a1 + 1805) = *(void *)(v7 + 80);
      }
      *(void *)(v7 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
      *(void *)(v7 + 80) = *((void *)a1 + 1807);
      uint64_t v12 = *((void *)a1 + 1807);
      if (v12) {
        *(void *)(v12 + 7sub_1B6DC4968((unsigned int *)this + 2) = v7;
      }
      *((void *)a1 + 1807) = v7;
      ++v9;
      uint64_t v7 = *((void *)a1 + 1805);
      --v8;
    }
    while (v7);
    a1[3612] = v8;
    a1[3616] = v9;
  }
  *a1 = 0;
  a1[3608] = 0;
  float32x4_t v13 = v5[2];
  float32x4_t v14 = v5[3][1];
  float32x4_t v16 = *v5;
  int v15 = v5[1];
  _Q1 = vsubq_f32((*v5)[1], v14);
  float32x4_t v18 = vsubq_f32(v15[1], v14);
  _Q0 = vsubq_f32(v13[1], v14);
  _S4 = vmuls_lane_f32(-_Q1.f32[0], v18, 2);
  __asm { FMLA            S6, S4, V0.S[1] }
  _S3 = (float)-_Q1.f32[1] * v18.f32[0];
  __asm { FMLA            S6, S3, V0.S[2] }
  _Q1.f32[0] = vmuls_lane_f32(_Q1.f32[0], *(float32x2_t *)v18.f32, 1);
  __asm { FMLA            S6, S1, V0.S[2] }
  if (vmlas_n_f32(_S6, vmuls_lane_f32(-_Q1.f32[2], *(float32x2_t *)v18.f32, 1), _Q0.f32[0]) >= 0.0)
  {
    float32x4_t v29 = v5[1];
    int v15 = *v5;
  }
  else
  {
    *int8x16_t v5 = v15;
    v5[1] = v16;
    v5[4] = (float32x4_t *)vrev64_s32((int32x2_t)v5[4]);
    float32x4_t v29 = v16;
  }
  float32x4_t v30 = sub_1B6DF1B94((uint64_t)a1, v15, v29, v13, 1);
  int8x16_t v31 = sub_1B6DF1B94((uint64_t)a1, v5[1], *v5, v5[3], 1);
  int8x16_t v32 = sub_1B6DF1B94((uint64_t)a1, v5[2], v5[1], v5[3], 1);
  float v33 = sub_1B6DF1B94((uint64_t)a1, *v5, v5[2], v5[3], 1);
  if (a1[3612] == 4)
  {
    int8x16_t v34 = (float32x4_t *)*((void *)a1 + 1805);
    float32x4_t v35 = (float32x4_t *)v34[5].i64[0];
    if (v35)
    {
      float v36 = v34[1].f32[0] * v34[1].f32[0];
      do
      {
        if ((float)(v35[1].f32[0] * v35[1].f32[0]) < v36)
        {
          int8x16_t v34 = v35;
          float v36 = v35[1].f32[0] * v35[1].f32[0];
        }
        float32x4_t v35 = (float32x4_t *)v35[5].i64[0];
      }
      while (v35);
    }
    int v37 = 0;
    float32x4_t v38 = *v34;
    float v39 = v34[1].f32[0];
    float32x4_t v41 = (float32x4_t *)v34[1].i64[1];
    unsigned int v40 = (float32x4_t *)v34[2].i64[0];
    uint64_t v42 = (float32x4_t *)v34[2].i64[1];
    v30[5].i8[8] = 0;
    v30[3].i64[0] = (uint64_t)v31;
    v31[5].i8[8] = 0;
    v31[3].i64[0] = (uint64_t)v30;
    v30[5].i8[9] = 0;
    v30[3].i64[1] = (uint64_t)v32;
    v32[5].i8[8] = 1;
    v32[3].i64[0] = (uint64_t)v30;
    v30[5].i8[10] = 0;
    v30[4].i64[0] = (uint64_t)v33;
    v33[5].i8[8] = 2;
    v33[3].i64[0] = (uint64_t)v30;
    v31[5].i8[9] = 2;
    v31[3].i64[1] = (uint64_t)v33;
    v33[5].i8[10] = 1;
    v33[4].i64[0] = (uint64_t)v31;
    v31[5].i8[10] = 1;
    v31[4].i64[0] = (uint64_t)v32;
    *(__int16 *)((char *)&v32[5].i16[4] + 1) = 258;
    v32[3].i64[1] = (uint64_t)v31;
    v32[4].i64[0] = (uint64_t)v33;
    v33[5].i8[9] = 2;
    v33[3].i64[1] = (uint64_t)v32;
    *a1 = 0;
    while (1)
    {
      uint64_t v43 = a1[3608];
      if (v43 > 0x3F)
      {
        *a1 = 6;
        goto LABEL_57;
      }
      float v83 = v39;
      float32x4_t v84 = v38;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      unsigned int v87 = 0;
      a1[3608] = v43 + 1;
      uint64_t v44 = (float32x4_t *)&a1[8 * v43];
      float32x4_t v45 = v44 + 6;
      v34[5].i8[11] = ++v37;
      sub_1B6DF14A0(a2, v34, (uint64_t)&v44[6]);
      int8x16_t v46 = (int8x16_t)vmulq_f32(*v34, v44[7]);
      if ((float)(vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)).f32[0]- v34[1].f32[0]) <= 0.0001)
      {
        int v63 = 7;
        goto LABEL_56;
      }
      unint64_t v47 = 0;
      do
      {
        char v48 = sub_1B6DF1E04((uint64_t)a1, v37, v45, (float32x4_t *)v34[3].i64[v47], v34[5].u8[v47 + 8], &v85);
        if (v47 > 1) {
          break;
        }
        ++v47;
      }
      while ((v48 & 1) != 0);
      char v49 = v87 > 2 ? v48 : 0;
      if ((v49 & 1) == 0) {
        break;
      }
      uint64_t v50 = v85;
      uint64_t v51 = v86;
      *(unsigned char *)(v85 + 89) = 2;
      *(void *)(v50 + 56) = v51;
      *(unsigned char *)(v51 + 90) = 1;
      *(void *)(v51 + 64) = v50;
      uint64_t v52 = v34[5].i64[0];
      if (v52) {
        *(void *)(v52 + 7sub_1B6DC4968((unsigned int *)this + 2) = v34[4].i64[1];
      }
      uint64_t v53 = v34[4].i64[1];
      if (v53) {
        *(void *)(v53 + 80) = v34[5].i64[0];
      }
      if (*((float32x4_t **)a1 + 1805) == v34) {
        *((void *)a1 + 1805) = v34[5].i64[0];
      }
      --a1[3612];
      v34[4].i64[1] = 0;
      v34[5].i64[0] = *((void *)a1 + 1807);
      uint64_t v54 = *((void *)a1 + 1807);
      if (v54) {
        *(void *)(v54 + 7sub_1B6DC4968((unsigned int *)this + 2) = v34;
      }
      *((void *)a1 + 1807) = v34;
      ++a1[3616];
      int8x16_t v34 = (float32x4_t *)*((void *)a1 + 1805);
      unsigned int v55 = (float32x4_t *)v34[5].i64[0];
      if (v55)
      {
        float v56 = v34[1].f32[0] * v34[1].f32[0];
        do
        {
          if ((float)(v55[1].f32[0] * v55[1].f32[0]) < v56)
          {
            int8x16_t v34 = v55;
            float v56 = v55[1].f32[0] * v55[1].f32[0];
          }
          unsigned int v55 = (float32x4_t *)v55[5].i64[0];
        }
        while (v55);
      }
      float32x4_t v38 = *v34;
      float v39 = v34[1].f32[0];
      float32x4_t v41 = (float32x4_t *)v34[1].i64[1];
      unsigned int v40 = (float32x4_t *)v34[2].i64[0];
      uint64_t v42 = (float32x4_t *)v34[2].i64[1];
      if (v37 == 255) {
        goto LABEL_57;
      }
    }
    int v63 = 4;
LABEL_56:
    *a1 = v63;
    float v39 = v83;
    float32x4_t v38 = v84;
LABEL_57:
    float32x4_t v64 = vmulq_n_f32(v38, v39);
    v64.i32[3] = 0;
    *((float32x4_t *)a1 + 4) = v38;
    *((float *)a1 + 20) = v39;
    a1[14] = 3;
    *((void *)a1 + 1) = v41;
    *((void *)a1 + sub_1B6DC4968((unsigned int *)this + 2) = v40;
    *((void *)a1 + 3) = v42;
    float32x4_t v65 = vsubq_f32(v40[1], v64);
    int8x8_t v66 = (int8x8_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
    v65.i32[3] = 0;
    float32x4_t v67 = vsubq_f32(v42[1], v64);
    int8x8_t v68 = (int8x8_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
    v67.i32[3] = 0;
    *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v65.f32, v66, 4uLL);
    v69.i64[1] = v65.i64[0];
    *(int8x8_t *)v70.f32 = vext_s8(*(int8x8_t *)v67.f32, v68, 4uLL);
    v70.i64[1] = v67.i64[0];
    int8x16_t v71 = (int8x16_t)vsubq_f32(vmulq_f32(v70, v65), vmulq_f32(v69, v67));
    v69.i64[0] = vextq_s8(v71, v71, 4uLL).u64[0];
    v69.i64[1] = v71.u32[0];
    int8x16_t v72 = (int8x16_t)vmulq_f32(v69, v69);
    *(float *)v72.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL)).f32[0]);
    a1[10] = v72.i32[0];
    float32x4_t v73 = vsubq_f32(v42[1], v64);
    v67.i64[0] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    v73.i32[3] = 0;
    float32x4_t v74 = vsubq_f32(v41[1], v64);
    int8x8_t v75 = (int8x8_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
    v74.i32[3] = 0;
    *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v73.f32, *(int8x8_t *)v67.f32, 4uLL);
    v67.i64[1] = v73.i64[0];
    *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v74.f32, v75, 4uLL);
    v76.i64[1] = v74.i64[0];
    int8x16_t v77 = (int8x16_t)vsubq_f32(vmulq_f32(v76, v73), vmulq_f32(v67, v74));
    v67.i64[0] = vextq_s8(v77, v77, 4uLL).u64[0];
    v67.i64[1] = v77.u32[0];
    int8x16_t v78 = (int8x16_t)vmulq_f32(v67, v67);
    *(float *)v78.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)).f32[0]);
    a1[11] = v78.i32[0];
    float32x4_t v79 = vsubq_f32(v41[1], v64);
    v67.i64[0] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
    v79.i32[3] = 0;
    float32x4_t v80 = vsubq_f32(v40[1], v64);
    v74.i64[0] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
    v80.i32[3] = 0;
    *(int8x8_t *)v67.f32 = vext_s8(*(int8x8_t *)v79.f32, *(int8x8_t *)v67.f32, 4uLL);
    v67.i64[1] = v79.i64[0];
    *(int8x8_t *)v74.f32 = vext_s8(*(int8x8_t *)v80.f32, *(int8x8_t *)v74.f32, 4uLL);
    v74.i64[1] = v80.i64[0];
    int8x16_t v81 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v79), vmulq_f32(v67, v80));
    v79.i64[0] = vextq_s8(v81, v81, 4uLL).u64[0];
    v79.i64[1] = v81.u32[0];
    int8x16_t v82 = (int8x16_t)vmulq_f32(v79, v79);
    *(float *)v82.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0]);
    v79.f32[0] = (float)(*(float *)v72.i32 + *(float *)v78.i32) + *(float *)v82.i32;
    *((float *)a1 + 10) = *(float *)v72.i32 / v79.f32[0];
    *((float *)a1 + 11) = *(float *)v78.i32 / v79.f32[0];
    *((float *)a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = *(float *)v82.i32 / v79.f32[0];
    return *a1;
  }
  else
  {
LABEL_49:
    *a1 = 8;
    v57.i64[0] = 0x8000000080000000;
    v57.i64[1] = 0x8000000080000000;
    float32x4_t v58 = (float32x4_t)veorq_s8(*a3, v57);
    int8x16_t v59 = (int8x16_t)vmulq_f32(v58, v58);
    float v60 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)).f32[0]);
    if (v60 <= 0.0)
    {
      float32x4_t v61 = (float32x4_t)xmmword_1B6E4F300;
    }
    else
    {
      float32x4_t v61 = vmulq_n_f32(v58, 1.0 / v60);
      v61.i32[3] = 0;
    }
    *((float32x4_t *)a1 + 4) = v61;
    a1[20] = 0;
    a1[14] = 1;
    *((void *)a1 + 1) = *v5;
    a1[10] = 1065353216;
    return 8;
  }
}

float32x2_t sub_1B6DF0DD8(float32x4_t *a1, float32x4_t *a2, uint64_t a3, _DWORD *a4)
{
  float32x4_t v4 = vsubq_f32(*a2, *a1);
  v4.i32[3] = 0;
  int8x16_t v5 = (int8x16_t)vmulq_f32(v4, v4);
  float32x2_t v6 = vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8);
  float32x2_t result = (float32x2_t)vextq_s8(v5, v5, 8uLL).u64[0];
  float v7 = vadd_f32(v6, result).f32[0];
  result.i32[0] = -1.0;
  if (v7 > 0.0)
  {
    int8x16_t v9 = (int8x16_t)vmulq_f32(*a1, v4);
    float v10 = (float)-vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)).f32[0]/ v7;
    if (v10 >= 1.0)
    {
      *(void *)a3 = 0x3F80000000000000;
      *a4 = 2;
      float32x4_t v12 = *a2;
    }
    else if (v10 <= 0.0)
    {
      *(void *)a3 = 1065353216;
      *a4 = 1;
      float32x4_t v12 = *a1;
    }
    else
    {
      *(float *)a3 = 1.0 - v10;
      *(float *)(a3 + 4) = v10;
      *a4 = 3;
      float32x4_t v11 = vmulq_n_f32(v4, v10);
      v11.i32[3] = 0;
      float32x4_t v12 = vaddq_f32(*a1, v11);
    }
    int8x16_t v13 = (int8x16_t)vmulq_f32(v12, v12);
    return vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  }
  return result;
}

float32_t sub_1B6DF0E9C(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, _DWORD *a5)
{
  v54[3] = *MEMORY[0x1E4F143B8];
  v54[0] = a1;
  v54[1] = a2;
  float v54[2] = a3;
  float32x4_t v5 = *a1;
  float32x4_t v6 = vsubq_f32(*a1, *a2);
  int8x8_t v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  float32x4_t v16 = *a3;
  int8x16_t v8 = (int8x16_t)vsubq_f32(*a2, *a3);
  int8x8_t v9 = (int8x8_t)vextq_s8(v8, v8, 8uLL).u64[0];
  float32x4_t v10 = (float32x4_t)v8;
  v10.i32[3] = 0;
  v53[0] = v6;
  v53[1] = v10;
  float32x4_t v11 = vsubq_f32(v16, v5);
  v11.i32[3] = 0;
  *(int8x8_t *)v5.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v5.i64[1] = v6.i64[0];
  float32x4_t v46 = v10;
  float32x4_t v47 = v11;
  v53[2] = v11;
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v10.f32, v9, 4uLL);
  v11.i64[1] = v10.i64[0];
  float32x4_t v45 = v11;
  int8x16_t v12 = (int8x16_t)vsubq_f32(vmulq_f32(v11, v6), vmulq_f32(v5, v10));
  v13.i64[0] = vextq_s8(v12, v12, 4uLL).u64[0];
  v13.i64[1] = v12.u32[0];
  int8x16_t v14 = (int8x16_t)vmulq_f32(v13, v13);
  float32x2_t v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  v16.i32[0] = -1.0;
  if (v15.f32[0] > 0.0)
  {
    float32x2_t v43 = v15;
    uint64_t v21 = 0;
    uint64_t v52 = 0;
    int v51 = 0;
    v22.i64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL).u64[0];
    v22.i64[1] = v13.i64[0];
    v16.i32[0] = -1.0;
    float32x4_t v48 = v22;
    float32x4_t v49 = v13;
    do
    {
      uint64_t v23 = (float32x4_t *)v54[v21];
      float32x4_t v24 = (float32x4_t)v53[v21];
      *(int8x8_t *)v25.f32 = vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), 4uLL);
      v25.i64[1] = *(void *)&v53[v21];
      int8x16_t v26 = (int8x16_t)vsubq_f32(vmulq_f32(v22, v24), vmulq_f32(v25, v13));
      v25.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
      v25.i64[1] = v26.u32[0];
      int8x16_t v27 = (int8x16_t)vmulq_f32(*v23, v25);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0] > 0.0)
      {
        uint64_t v28 = dword_1B6ED02A0[v21];
        float32x4_t v50 = v16;
        LODWORD(v29) = sub_1B6DF0DD8(v23, (float32x4_t *)v54[v28], (uint64_t)&v52, &v51).u32[0];
        float32x4_t v22 = v48;
        float32x4_t v13 = v49;
        float32x4_t v16 = v50;
        if (v50.f32[0] < 0.0 || v29 < v50.f32[0])
        {
          *a5 = ((v51 << 31 >> 31) & (1 << v21)) + ((1 << v28) & (v51 << 30 >> 31));
          int v30 = HIDWORD(v52);
          *(_DWORD *)(a4 + 4 * v21) = v52;
          *(_DWORD *)(a4 + 4 * v28) = v30;
          *(_DWORD *)(a4 + 4 * dword_1B6ED02A0[v28]) = 0;
          v16.f32[0] = v29;
        }
      }
      ++v21;
    }
    while (v21 != 3);
    if (v16.f32[0] < 0.0)
    {
      int8x16_t v31 = (int8x16_t)vmulq_f32(*a1, v13);
      float32x4_t v32 = vmulq_n_f32(v13, vdiv_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), v43).f32[0]);
      v32.i32[3] = 0;
      *(float *)v31.i32 = sqrtf(v43.f32[0]);
      int8x16_t v33 = (int8x16_t)vmulq_f32(v32, v32);
      *a5 = 7;
      float32x4_t v34 = vsubq_f32(*a2, v32);
      int8x8_t v35 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
      v34.i32[3] = 0;
      *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v34.f32, v35, 4uLL);
      v36.i64[1] = v34.i64[0];
      float32x4_t v16 = vsubq_f32(vmulq_f32(v36, v46), vmulq_f32(v45, v34));
      v36.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
      v36.i64[1] = v16.u32[0];
      int8x16_t v37 = (int8x16_t)vmulq_f32(v36, v36);
      *(float *)v37.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)).f32[0])/ *(float *)v31.i32;
      *(_DWORD *)a4 = v37.i32[0];
      float32x4_t v38 = vsubq_f32(*a3, v32);
      v36.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
      v38.i32[3] = 0;
      v39.i64[0] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 4uLL).u64[0];
      v39.i64[1] = v47.i64[0];
      *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v38.f32, *(int8x8_t *)v36.f32, 4uLL);
      v36.i64[1] = v38.i64[0];
      int8x16_t v40 = (int8x16_t)vsubq_f32(vmulq_f32(v36, v47), vmulq_f32(v39, v38));
      v36.i64[0] = vextq_s8(v40, v40, 4uLL).u64[0];
      v36.i64[1] = v40.u32[0];
      v16.i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)).u32[0];
      int8x16_t v41 = (int8x16_t)vmulq_f32(v36, v36);
      *(float *)v31.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)).f32[0])/ *(float *)v31.i32;
      *(_DWORD *)(a4 + 4) = v31.i32[0];
      *(float *)(a4 + 8) = 1.0 - (float)(*(float *)v37.i32 + *(float *)v31.i32);
    }
  }
  return v16.f32[0];
}

float sub_1B6DF11AC(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, _DWORD *a6)
{
  v55[4] = *MEMORY[0x1E4F143B8];
  v55[0] = a1;
  v55[1] = a2;
  v55[2] = a3;
  v55[3] = a4;
  float32x4_t v6 = *a1;
  float32x4_t v7 = *a4;
  _Q4 = vsubq_f32(*a1, *a4);
  _Q4.i32[3] = 0;
  float32x4_t v9 = *a2;
  float32x4_t v10 = vsubq_f32(*a2, *a4);
  v10.i32[3] = 0;
  v54[0] = _Q4;
  v54[1] = v10;
  float32x4_t v11 = *a3;
  _Q3 = vsubq_f32(*a3, v7);
  _Q3.i32[3] = 0;
  float v54[2] = _Q3;
  _S7 = vmuls_lane_f32(-_Q4.f32[0], v10, 2);
  __asm { FMLA            S9, S7, V3.S[1] }
  _S6 = (float)-_Q4.f32[1] * v10.f32[0];
  __asm { FMLA            S9, S6, V3.S[2] }
  _Q4.f32[0] = vmuls_lane_f32(_Q4.f32[0], *(float32x2_t *)v10.f32, 1);
  __asm { FMLA            S9, S4, V3.S[2] }
  float v22 = vmlas_n_f32(_S9, vmuls_lane_f32(-_Q4.f32[2], *(float32x2_t *)v10.f32, 1), _Q3.f32[0]);
  float v23 = -1.0;
  if (v22 != 0.0)
  {
    float32x4_t v24 = vsubq_f32(v9, v11);
    int8x8_t v25 = (int8x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v24.i32[3] = 0;
    float32x4_t v26 = vsubq_f32(v6, v9);
    int8x8_t v27 = (int8x8_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    v26.i32[3] = 0;
    *(int8x8_t *)v28.f32 = vext_s8(*(int8x8_t *)v24.f32, v25, 4uLL);
    v28.i64[1] = v24.i64[0];
    *(int8x8_t *)v29.f32 = vext_s8(*(int8x8_t *)v26.f32, v27, 4uLL);
    v29.i64[1] = v26.i64[0];
    int8x16_t v30 = (int8x16_t)vsubq_f32(vmulq_f32(v29, v24), vmulq_f32(v28, v26));
    v24.i64[0] = vextq_s8(v30, v30, 4uLL).u64[0];
    v24.i64[1] = v30.u32[0];
    int8x16_t v31 = (int8x16_t)vmulq_f32(v6, v24);
    if ((float)(v22
               * vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)).f32[0]) <= 0.0)
    {
      uint64_t v36 = 0;
      int v53 = 0;
      uint64_t v52 = 0;
      int v51 = 0;
      do
      {
        uint64_t v37 = dword_1B6ED02AC[v36];
        float32x4_t v38 = (float32x4_t)v54[v36];
        float32x4_t v39 = (float32x4_t)v54[v37];
        *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), 4uLL);
        v40.i64[1] = *(void *)&v54[v36];
        *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), 4uLL);
        v41.i64[1] = *(void *)&v54[v37];
        int8x16_t v42 = (int8x16_t)vsubq_f32(vmulq_f32(v38, v41), vmulq_f32(v39, v40));
        v39.i64[0] = vextq_s8(v42, v42, 4uLL).u64[0];
        v39.i64[1] = v42.u32[0];
        int8x16_t v43 = (int8x16_t)vmulq_f32(*a4, v39);
        if ((float)(v22
                   * vadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)).f32[0]) > 0.0)
        {
          float v44 = sub_1B6DF0E9C((float32x4_t *)v55[v36], (float32x4_t *)v55[v37], a4, (uint64_t)&v52, &v51);
          if (v23 < 0.0 || v44 < v23)
          {
            *a6 = ((1 << v37) & (v51 << 30 >> 31)) + ((2 * v51) & 8) + ((v51 << 31 >> 31) & (1 << v36));
            int v45 = HIDWORD(v52);
            *(_DWORD *)(a5 + 4 * v36) = v52;
            *(_DWORD *)(a5 + 4 * v37) = v45;
            *(_DWORD *)(a5 + 4 * dword_1B6ED02AC[v37]) = 0;
            *(_DWORD *)(a5 + 1sub_1B6DC4968((unsigned int *)this + 2) = v53;
            float v23 = v44;
          }
        }
        ++v36;
      }
      while (v36 != 3);
      if (v23 < 0.0)
      {
        *a6 = 15;
        *(float *)a5 = sub_1B6DF1644(a3->f32, a2->f32, a4->f32) / v22;
        *(float *)(a5 + 4) = sub_1B6DF1644(a1->f32, a3->f32, a4->f32) / v22;
        float v46 = sub_1B6DF1644(a2->f32, a1->f32, a4->f32) / v22;
        float v47 = 1.0 - (float)(v46 + (float)(*(float *)a5 + *(float *)(a5 + 4)));
        *(float *)(a5 + 8) = v46;
        *(float *)(a5 + 1sub_1B6DC4968((unsigned int *)this + 2) = v47;
        return 0.0;
      }
    }
  }
  return v23;
}

__n128 sub_1B6DF14A0(float32x4_t *a1, float32x4_t *a2, uint64_t a3)
{
  void (*v7)(float32x4_t *__return_ptr, void *, uint64_t);
  uint64_t v8;
  void *v9;
  void (*v10)(float32x4_t *__return_ptr, void *, int8x16_t *);
  uint64_t v11;
  void *v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  __n128 result;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;

  int8x16_t v5 = (int8x16_t)vmulq_f32(*a2, *a2);
  float32x4_t v6 = vmulq_n_f32(*a2, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)).f32[0]));
  v6.i32[3] = 0;
  *(float32x4_t *)a3 = v6;
  float32x4_t v7 = (void (*)(float32x4_t *__return_ptr, void *, uint64_t))a1[8].i64[0];
  int8x16_t v8 = a1[8].i64[1];
  float32x4_t v9 = (void *)(a1->i64[0] + (v8 >> 1));
  if (v8) {
    float32x4_t v7 = *(void (**)(float32x4_t *__return_ptr, void *, uint64_t))(*v9 + v7);
  }
  v7(&v22, v9, a3);
  float32x4_t v10 = (void (*)(float32x4_t *__return_ptr, void *, int8x16_t *))a1[8].i64[0];
  float32x4_t v11 = a1[8].i64[1];
  int8x16_t v12 = (void *)(a1->i64[1] + (v11 >> 1));
  if (v11) {
    float32x4_t v10 = *(void (**)(float32x4_t *__return_ptr, void *, int8x16_t *))(*v12 + v10);
  }
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  int8x16_t v14 = (float32x4_t)veorq_s8(*(int8x16_t *)a3, v13);
  float32x2_t v15 = (int8x16_t)vmulq_f32(a1[1], v14);
  float32x4_t v16 = (int8x16_t)vmulq_f32(a1[2], v14);
  int8x16_t v17 = (int8x16_t)vmulq_f32(a1[3], v14);
  v17.i32[3] = 0;
  *(float32x2_t *)v15.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v16.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
  v15.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  float v23 = v15;
  v10(&v24, v12, &v23);
  float32x4_t v18 = vmulq_f32(a1[4], v24);
  float v19 = (int8x16_t)vmulq_f32(v24, a1[5]);
  unsigned int v20 = (int8x16_t)vmulq_f32(v24, a1[6]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  float32x2_t result = (__n128)vsubq_f32(v22, vaddq_f32(v18, a1[7]));
  result.n128_u32[3] = 0;
  *(__n128 *)(a3 + 16) = result;
  return result;
}

float sub_1B6DF1644(float *a1, float *a2, float *a3)
{
  return (float)((float)((float)((float)((float)((float)(a1[2] * *a2) * a3[1]) + (float)((float)(a1[1] * a2[2]) * *a3))
                               + (float)((float)-(float)(*a1 * a2[2]) * a3[1]))
                       + (float)((float)-(float)(a1[1] * *a2) * a3[2]))
               + (float)((float)(*a1 * a2[1]) * a3[2]))
       + (float)((float)-(float)(a1[2] * a2[1]) * *a3);
}

uint64_t sub_1B6DF1690(uint64_t result)
{
  uint64_t v1 = 0;
  *(_DWORD *)float32x2_t result = 9;
  *(_DWORD *)(result + 1443sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)(result + 80) = 0;
  int v2 = *(_DWORD *)(result + 14464);
  uint64_t v3 = 12288;
  uint64_t v4 = *(void *)(result + 14456);
  do
  {
    uint64_t v5 = result + v3;
    uint64_t v6 = result + v3 + 2048;
    *(void *)(v5 + 2120) = 0;
    *(void *)(v5 + 2sub_1B6DC7B98((uint64_t)this + 128) = v4;
    if (v4) {
      *(void *)(v4 + 7sub_1B6DC4968((unsigned int *)this + 2) = v6;
    }
    uint64_t v4 = result + 96 * (127 - v1) + 2144;
    *(void *)(result + 14456) = v6;
    ++v1;
    v3 -= 96;
  }
  while (v3);
  *(_DWORD *)(result + 14464) = v2 + 128;
  return result;
}

uint64_t sub_1B6DF16FC(float32x4_t *a1)
{
  uint64_t v1 = (float32x4_t **)a1[28].i64[1];
  switch(*((_DWORD *)v1 + 12))
  {
    case 1:
      uint64_t v3 = 0;
      LODWORD(v4) = a1[28].i32[0] - 1;
      while (1)
      {
        int8x16_t v87 = 0uLL;
        v87.i32[v3] = 1065353216;
        uint64_t v5 = a1[28].i64[1];
        uint64_t v6 = *(unsigned int *)(v5 + 48);
        *(_DWORD *)(v5 + 4 * v6 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
        a1[28].i32[0] = v4;
        uint64_t v7 = a1[26].i64[v4];
        *(void *)(v5 + 8 * v6) = v7;
        *(_DWORD *)(v5 + 48) = v6 + 1;
        __n128 v8 = sub_1B6DF14A0(a1, (float32x4_t *)&v87, v7);
        if (sub_1B6DF16FC(a1, v8)) {
          break;
        }
        uint64_t v9 = a1[28].i64[1];
        unsigned int v10 = *(_DWORD *)(v9 + 48) - 1;
        *(_DWORD *)(v9 + 48) = v10;
        uint64_t v11 = *(void *)(v9 + 8 * v10);
        uint64_t v12 = a1[28].u32[0];
        a1[26].i64[v12] = v11;
        uint64_t v13 = a1[28].i64[1];
        v14.i64[0] = 0x8000000080000000;
        v14.i64[1] = 0x8000000080000000;
        int8x16_t v86 = veorq_s8(v87, v14);
        uint64_t v15 = *(unsigned int *)(v13 + 48);
        *(_DWORD *)(v13 + 4 * v15 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
        a1[28].i32[0] = v12;
        *(void *)(v13 + 8 * v15) = v11;
        *(_DWORD *)(v13 + 48) = v15 + 1;
        __n128 v16 = sub_1B6DF14A0(a1, (float32x4_t *)&v86, v11);
        if (sub_1B6DF16FC(a1, v16)) {
          break;
        }
        uint64_t v17 = a1[28].i64[1];
        unsigned int v18 = *(_DWORD *)(v17 + 48) - 1;
        *(_DWORD *)(v17 + 48) = v18;
        uint64_t v19 = *(void *)(v17 + 8 * v18);
        uint64_t v4 = a1[28].u32[0];
        a1[28].i32[0] = v4 + 1;
        a1[26].i64[v4] = v19;
        if (++v3 == 3) {
          return 0;
        }
      }
      return 1;
    case 2:
      uint64_t v20 = 0;
      float32x4_t v22 = vsubq_f32(v1[1][1], (*v1)[1]);
      int8x8_t v21 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
      v22.i32[3] = 0;
      *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, v21, 4uLL);
      v23.i64[1] = v22.i64[0];
      float32x4_t v83 = v23;
      float32x4_t v84 = v22;
      break;
    case 3:
      float32x4_t v44 = (*v1)[1];
      float32x4_t v45 = vsubq_f32(v1[1][1], v44);
      int8x8_t v46 = (int8x8_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
      v45.i32[3] = 0;
      float32x4_t v47 = vsubq_f32(v1[2][1], v44);
      int8x8_t v48 = (int8x8_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
      v47.i32[3] = 0;
      *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v45.f32, v46, 4uLL);
      v49.i64[1] = v45.i64[0];
      *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v47.f32, v48, 4uLL);
      v50.i64[1] = v47.i64[0];
      int8x16_t v51 = (int8x16_t)vsubq_f32(vmulq_f32(v50, v45), vmulq_f32(v49, v47));
      v47.i64[0] = vextq_s8(v51, v51, 4uLL).u64[0];
      v47.i64[1] = v51.u32[0];
      int8x16_t v87 = (int8x16_t)v47;
      int8x16_t v52 = (int8x16_t)vmulq_f32(v47, v47);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).f32[0] <= 0.0)return 0; {
      *(float32x4_t **)((char *)v1 + 44) = (float32x4_t *)0x400000000;
      }
      unsigned int v53 = a1[28].i32[0] - 1;
      a1[28].i32[0] = v53;
      uint64_t v54 = a1[26].i64[v53];
      v1[3] = (float32x4_t *)v54;
      __n128 v55 = sub_1B6DF14A0(a1, (float32x4_t *)&v87, v54);
      if (sub_1B6DF16FC(a1, v55)) {
        return 1;
      }
      uint64_t v56 = a1[28].i64[1];
      unsigned int v57 = *(_DWORD *)(v56 + 48) - 1;
      *(_DWORD *)(v56 + 48) = v57;
      uint64_t v58 = *(void *)(v56 + 8 * v57);
      uint64_t v59 = a1[28].u32[0];
      a1[26].i64[v59] = v58;
      uint64_t v60 = a1[28].i64[1];
      v61.i64[0] = 0x8000000080000000;
      v61.i64[1] = 0x8000000080000000;
      int8x16_t v86 = veorq_s8(v87, v61);
      uint64_t v62 = *(unsigned int *)(v60 + 48);
      *(_DWORD *)(v60 + 4 * v62 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
      a1[28].i32[0] = v59;
      *(void *)(v60 + 8 * v6sub_1B6DC4968((unsigned int *)this + 2) = v58;
      *(_DWORD *)(v60 + 48) = v62 + 1;
      __n128 v63 = sub_1B6DF14A0(a1, (float32x4_t *)&v86, v58);
      if (sub_1B6DF16FC(a1, v63)) {
        return 1;
      }
      uint64_t v65 = a1[28].i64[1];
      unsigned int v66 = *(_DWORD *)(v65 + 48) - 1;
      *(_DWORD *)(v65 + 48) = v66;
      uint64_t v67 = *(void *)(v65 + 8 * v66);
      uint64_t v68 = a1[28].u32[0];
      a1[28].i32[0] = v68 + 1;
      a1[26].i64[v68] = v67;
      return 0;
    case 4:
      float32x4_t v69 = v1[3][1];
      _Q0 = vsubq_f32((*v1)[1], v69);
      float32x4_t v71 = vsubq_f32(v1[1][1], v69);
      _Q1 = vsubq_f32(v1[2][1], v69);
      _S4 = vmuls_lane_f32(-_Q0.f32[0], v71, 2);
      __asm { FMLA            S6, S4, V1.S[1] }
      _S3 = (float)-_Q0.f32[1] * v71.f32[0];
      __asm { FMLA            S6, S3, V1.S[2] }
      _Q0.f32[0] = vmuls_lane_f32(_Q0.f32[0], *(float32x2_t *)v71.f32, 1);
      __asm { FMLA            S6, S0, V1.S[2] }
      float v82 = vmlas_n_f32(_S6, vmuls_lane_f32(-_Q0.f32[2], *(float32x2_t *)v71.f32, 1), _Q1.f32[0]);
      uint64_t result = 1;
      if (v82 >= 0.0 && v82 <= 0.0) {
        return 0;
      }
      return result;
    default:
      return 0;
  }
  do
  {
    int8x16_t v87 = 0uLL;
    v87.i32[v20] = 1065353216;
    *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v87.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), 4uLL);
    v24.i64[1] = v87.i64[0];
    int8x16_t v25 = (int8x16_t)vsubq_f32(vmulq_f32(v24, v22), vmulq_f32(v23, (float32x4_t)v87));
    v24.i64[0] = vextq_s8(v25, v25, 4uLL).u64[0];
    v24.i64[1] = v25.u32[0];
    int8x16_t v86 = (int8x16_t)v24;
    int8x16_t v26 = (int8x16_t)vmulq_f32(v24, v24);
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)).f32[0] > 0.0)
    {
      uint64_t v27 = a1[28].i64[1];
      uint64_t v28 = *(unsigned int *)(v27 + 48);
      *(_DWORD *)(v27 + 4 * v28 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
      unsigned int v29 = a1[28].i32[0] - 1;
      a1[28].i32[0] = v29;
      uint64_t v30 = a1[26].i64[v29];
      *(void *)(v27 + 8 * v28) = v30;
      *(_DWORD *)(v27 + 48) = v28 + 1;
      __n128 v31 = sub_1B6DF14A0(a1, (float32x4_t *)&v86, v30);
      if (sub_1B6DF16FC(a1, v31)) {
        return 1;
      }
      uint64_t v32 = a1[28].i64[1];
      unsigned int v33 = *(_DWORD *)(v32 + 48) - 1;
      *(_DWORD *)(v32 + 48) = v33;
      uint64_t v34 = *(void *)(v32 + 8 * v33);
      uint64_t v35 = a1[28].u32[0];
      a1[26].i64[v35] = v34;
      uint64_t v36 = a1[28].i64[1];
      v37.i64[0] = 0x8000000080000000;
      v37.i64[1] = 0x8000000080000000;
      int8x16_t v85 = veorq_s8(v86, v37);
      uint64_t v38 = *(unsigned int *)(v36 + 48);
      *(_DWORD *)(v36 + 4 * v38 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
      a1[28].i32[0] = v35;
      *(void *)(v36 + 8 * v38) = v34;
      *(_DWORD *)(v36 + 48) = v38 + 1;
      __n128 v39 = sub_1B6DF14A0(a1, (float32x4_t *)&v85, v34);
      if (sub_1B6DF16FC(a1, v39)) {
        return 1;
      }
      uint64_t v40 = a1[28].i64[1];
      unsigned int v41 = *(_DWORD *)(v40 + 48) - 1;
      *(_DWORD *)(v40 + 48) = v41;
      uint64_t v42 = *(void *)(v40 + 8 * v41);
      uint64_t v43 = a1[28].u32[0];
      a1[28].i32[0] = v43 + 1;
      a1[26].i64[v43] = v42;
      float32x4_t v23 = v83;
      float32x4_t v22 = v84;
    }
    ++v20;
  }
  while (v20 != 3);
  return 0;
}

float32x4_t *sub_1B6DF1B94(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, char a5)
{
  uint64_t v6 = *(float32x4_t **)(a1 + 14456);
  if (!v6)
  {
    *(_DWORD *)a1 = 5;
    return v6;
  }
  uint64_t v11 = v6[5].i64[0];
  if (v11) {
    *(void *)(v11 + 7sub_1B6DC4968((unsigned int *)this + 2) = v6[4].i64[1];
  }
  uint64_t v12 = v6[4].i64[1];
  if (v12) {
    *(void *)(v12 + 80) = v6[5].i64[0];
  }
  if (*(float32x4_t **)(a1 + 14456) == v6) {
    *(void *)(a1 + 14456) = v6[5].i64[0];
  }
  --*(_DWORD *)(a1 + 14464);
  v6[4].i64[1] = 0;
  v6[5].i64[0] = *(void *)(a1 + 14440);
  uint64_t v13 = *(void *)(a1 + 14440);
  if (v13) {
    *(void *)(v13 + 7sub_1B6DC4968((unsigned int *)this + 2) = v6;
  }
  *(void *)(a1 + 14440) = v6;
  ++*(_DWORD *)(a1 + 14448);
  v6[5].i8[11] = 0;
  v6[1].i64[1] = (uint64_t)a2;
  v6[2].i64[0] = (uint64_t)a3;
  v6[2].i64[1] = (uint64_t)a4;
  float32x4_t v14 = a2[1];
  float32x4_t v15 = vsubq_f32(a3[1], v14);
  int8x8_t v16 = (int8x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v15.i32[3] = 0;
  float32x4_t v17 = vsubq_f32(a4[1], v14);
  int8x8_t v18 = (int8x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v17.i32[3] = 0;
  *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)v15.f32, v16, 4uLL);
  v19.i64[1] = v15.i64[0];
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v17.f32, v18, 4uLL);
  v20.i64[1] = v17.i64[0];
  int8x16_t v21 = (int8x16_t)vsubq_f32(vmulq_f32(v20, v15), vmulq_f32(v19, v17));
  v17.i64[0] = vextq_s8(v21, v21, 4uLL).u64[0];
  v17.i64[1] = v21.u32[0];
  *uint64_t v6 = v17;
  int8x16_t v22 = (int8x16_t)vmulq_f32(v17, v17);
  float v23 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).f32[0]);
  if (v23 <= 0.0001)
  {
    int v25 = 2;
    goto LABEL_20;
  }
  if (!sub_1B6DF1FDC(a1, (int8x8_t *)v6, a2, a3, v6[1].f32)
    && !sub_1B6DF1FDC(a1, (int8x8_t *)v6, a3, a4, v6[1].f32)
    && !sub_1B6DF1FDC(a1, (int8x8_t *)v6, a4, a2, v6[1].f32))
  {
    int8x16_t v24 = (int8x16_t)vmulq_f32(a2[1], *v6);
    v6[1].f32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0]/ v23;
  }
  *uint64_t v6 = vmulq_n_f32(*v6, 1.0 / v23);
  if ((a5 & 1) == 0 && v6[1].f32[0] < -0.00001)
  {
    int v25 = 3;
LABEL_20:
    *(_DWORD *)a1 = v25;
    uint64_t v26 = v6[5].i64[0];
    if (v26) {
      *(void *)(v26 + 7sub_1B6DC4968((unsigned int *)this + 2) = v6[4].i64[1];
    }
    uint64_t v27 = v6[4].i64[1];
    if (v27) {
      *(void *)(v27 + 80) = v6[5].i64[0];
    }
    if (*(float32x4_t **)(a1 + 14440) == v6) {
      *(void *)(a1 + 14440) = v6[5].i64[0];
    }
    --*(_DWORD *)(a1 + 14448);
    v6[4].i64[1] = 0;
    v6[5].i64[0] = *(void *)(a1 + 14456);
    uint64_t v28 = *(void *)(a1 + 14456);
    if (v28) {
      *(void *)(v28 + 7sub_1B6DC4968((unsigned int *)this + 2) = v6;
    }
    *(void *)(a1 + 14456) = v6;
    ++*(_DWORD *)(a1 + 14464);
    return 0;
  }
  return v6;
}

uint64_t sub_1B6DF1E04(uint64_t a1, int a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, uint64_t *a6)
{
  if (a4[5].u8[11] == a2) {
    return 0;
  }
  char v8 = a5;
  uint64_t v11 = a5;
  int8x16_t v12 = (int8x16_t)vmulq_f32(*a4, a3[1]);
  if ((float)(vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0]- a4[1].f32[0]) < -0.00001)
  {
    uint64_t result = (uint64_t)sub_1B6DF1B94(a1, (float32x4_t *)a4[1].i64[dword_1B6ED02B8[a5] + 1], (float32x4_t *)a4[1].i64[a5 + 1], a3, 0);
    if (!result) {
      return result;
    }
    *(unsigned char *)(result + 88) = v8;
    *(void *)(result + 48) = a4;
    a4[5].i8[v11 + 8] = 0;
    a4[3].i64[v11] = result;
    uint64_t v13 = *a6;
    if (*a6)
    {
      *(unsigned char *)(v13 + 89) = 2;
      *(void *)(v13 + 56) = result;
      *(unsigned char *)(result + 90) = 1;
      *(void *)(result + 64) = v13;
    }
    else
    {
      a6[1] = result;
    }
    *a6 = result;
    float32x4_t v17 = a6 + 2;
    goto LABEL_20;
  }
  a4[5].i8[11] = a2;
  uint64_t result = sub_1B6DF1E04(a1);
  if (result)
  {
    uint64_t result = sub_1B6DF1E04(a1);
    if (result)
    {
      uint64_t v14 = a4[5].i64[0];
      if (v14) {
        *(void *)(v14 + 7sub_1B6DC4968((unsigned int *)this + 2) = a4[4].i64[1];
      }
      uint64_t v15 = a4[4].i64[1];
      if (v15) {
        *(void *)(v15 + 80) = a4[5].i64[0];
      }
      if (*(float32x4_t **)(a1 + 14440) == a4) {
        *(void *)(a1 + 14440) = a4[5].i64[0];
      }
      --*(_DWORD *)(a1 + 14448);
      a4[4].i64[1] = 0;
      a4[5].i64[0] = *(void *)(a1 + 14456);
      uint64_t v16 = *(void *)(a1 + 14456);
      if (v16) {
        *(void *)(v16 + 7sub_1B6DC4968((unsigned int *)this + 2) = a4;
      }
      *(void *)(a1 + 14456) = a4;
      float32x4_t v17 = (_DWORD *)(a1 + 14464);
LABEL_20:
      ++*v17;
      return 1;
    }
  }
  return result;
}

BOOL sub_1B6DF1FDC(uint64_t a1, int8x8_t *a2, float32x4_t *a3, float32x4_t *a4, float *a5)
{
  float32x4_t v5 = a4[1];
  float32x4_t v6 = a3[1];
  float32x4_t v8 = vsubq_f32(v5, v6);
  int8x8_t v7 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v8.f32, v7, 4uLL);
  v9.i64[1] = v8.i64[0];
  *(int8x8_t *)v10.f32 = vext_s8(*a2, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->i8, *(int8x16_t *)a2->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v10.u32[2] = *a2;
  int8x16_t v11 = (int8x16_t)vsubq_f32(vmulq_f32(v10, v8), vmulq_f32(*(float32x4_t *)a2->i8, v9));
  v9.i64[0] = vextq_s8(v11, v11, 4uLL).u64[0];
  v9.i64[1] = v11.u32[0];
  int8x16_t v12 = (int8x16_t)vmulq_f32(v6, v9);
  float v13 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)).f32[0];
  if (v13 < 0.0)
  {
    int8x16_t v14 = (int8x16_t)vmulq_f32(v6, v8);
    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0] <= 0.0)
    {
      int8x16_t v16 = (int8x16_t)vmulq_f32(v5, v8);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8)).f32[0] >= 0.0)
      {
        int8x16_t v18 = (int8x16_t)vmulq_f32(v8, v8);
        int8x16_t v19 = (int8x16_t)vmulq_f32(v5, v6);
        *(float *)v19.i32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)).f32[0];
        int8x16_t v20 = (int8x16_t)vmulq_f32(v6, v6);
        int8x16_t v21 = (int8x16_t)vmulq_f32(v5, v5);
        float v17 = fmaxf(vmlas_n_f32((float)-*(float *)v19.i32 * *(float *)v19.i32, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8)).f32[0], vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8)).f32[0])/ vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8)).f32[0], 0.0);
        goto LABEL_8;
      }
      int8x16_t v15 = (int8x16_t)vmulq_f32(v5, v5);
    }
    else
    {
      int8x16_t v15 = (int8x16_t)vmulq_f32(v6, v6);
    }
    LODWORD(v17) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).u32[0];
LABEL_8:
    *a5 = sqrtf(v17);
  }
  return v13 < 0.0;
}

uint64_t sub_1B6DF20F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  float32x4_t v15 = vsubq_f32(a6[3], a5[3]);
  v15.i32[3] = 0;
  float32x4_t v20 = v15;
  sub_1B6DF052C(a3, (uint64_t)a5);
  uint64_t v17 = v16;
  if ((v16 & 1) != 0 || sub_1B6DEFB84(a3, a5, a4, a6, &v20, (uint64_t)v21))
  {
    long long v18 = v23;
    *a8 = v22;
    *a9 = v18;
    *a7 = v24;
  }
  return v17;
}

void sub_1B6DF21EC()
{
}

uint64_t sub_1B6DF2200(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_1F0FB1318;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F320;
  *(void *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = a5;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  int v7 = a3[2];
  *(_DWORD *)(a1 + 64) = a2[2];
  *(_DWORD *)(a1 + 68) = v7;
  *(float *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = (*(float (**)(_DWORD *))(*(void *)a2 + 96))(a2);
  *(float *)(a1 + 76) = (*(float (**)(_DWORD *))(*(void *)a3 + 96))(a3);
  *(unsigned char *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)(a1 + 100) = 0x100000001;
  return a1;
}

double sub_1B6DF22D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, float a8, float a9)
{
  *(void *)a1 = &unk_1F0FB1318;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F320;
  *(void *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = a7;
  *(void *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 64) = a4;
  *(_DWORD *)(a1 + 68) = a5;
  *(float *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = a8;
  *(float *)(a1 + 76) = a9;
  *(unsigned char *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)&double result = 0x100000001;
  *(void *)(a1 + 100) = 0x100000001;
  return result;
}

void sub_1B6DF2328(float32x4_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = 0;
  a1[5].i32[1] = 0;
  float32x4_t v108 = 0uLL;
  float32x4_t v92 = a2[1];
  float32x4_t v93 = *a2;
  v104[0] = *a2;
  v104[1] = v92;
  float32x4_t v10 = a2[2];
  float32x4_t v9 = a2[3];
  float32x4_t v89 = a2[5];
  float32x4_t v90 = a2[4];
  v102[0] = v90;
  v102[1] = v89;
  float32x4_t v12 = a2[6];
  float32x4_t v11 = a2[7];
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  float32x4_t v14 = vmulq_f32(vaddq_f32(v9, v11), v13);
  v14.i32[3] = 0;
  float32x4_t v91 = v10;
  v104[2] = v10;
  float32x4_t v105 = vsubq_f32(v9, v14);
  float32x4_t v87 = v105;
  float32x4_t v88 = v12;
  v102[2] = v12;
  float32x4_t v103 = vsubq_f32(v11, v14);
  float32x4_t v85 = v14;
  float32x4_t v86 = v103;
  if ((*(_DWORD *)(a1[3].i64[0] + 8) - 17) <= 1) {
    BOOL v8 = (*(_DWORD *)(a1[3].i64[1] + 8) - 17) < 2;
  }
  a1[1] = (float32x4_t)xmmword_1B6E4F320;
  float32x4_t v15 = a1 + 1;
  float v16 = a1[4].f32[2];
  float v17 = a1[4].f32[3];
  ++dword_1E9E4994C;
  float v18 = 0.0;
  if (a1[5].i8[0]) {
    float v17 = 0.0;
  }
  else {
    float v18 = v16;
  }
  a1[6].i32[0] = 0;
  a1[5].i64[1] = 0xFFFFFFFFLL;
  float v83 = v18;
  float v84 = v17;
  float v19 = v18 + v17;
  sub_1B6DF5FFC(a1[2].i64[1]);
  float32x4_t v21 = *v15;
  for (float i = 1.0e18; ; float i = v46)
  {
    v23.i64[0] = 0x8000000080000000;
    v23.i64[1] = 0x8000000080000000;
    float32x4_t v24 = (float32x4_t)veorq_s8((int8x16_t)v21, v23);
    float32x4_t v25 = *a2;
    float32x4_t v26 = a2[1];
    v25.i32[3] = 0;
    v26.i32[3] = 0;
    float32x4_t v27 = a2[2];
    v27.i32[3] = 0;
    float32x4_t v28 = vaddq_f32(vaddq_f32(vmulq_n_f32(v25, v24.f32[0]), vmulq_lane_f32(v26, *(float32x2_t *)v24.f32, 1)), vmulq_laneq_f32(v27, v24, 2));
    float32x4_t v29 = a2[4];
    float32x4_t v30 = a2[5];
    v29.i32[3] = 0;
    v30.i32[3] = 0;
    float32x4_t v31 = a2[6];
    v31.i32[3] = 0;
    float32x4_t v106 = vaddq_f32(vaddq_f32(vmulq_n_f32(v29, v21.f32[0]), vmulq_lane_f32(v30, *(float32x2_t *)v21.f32, 1)), vmulq_laneq_f32(v31, v21, 2));
    float32x4_t v107 = v28;
    sub_1B6DE7D9C(a1[3].i64[0], (int8x16_t *)&v107, &v101, v20);
    sub_1B6DE7D9C(a1[3].i64[1], (int8x16_t *)&v106, &v100, v32);
    float32x4_t v33 = vmulq_f32(v93, v101);
    int8x16_t v34 = (int8x16_t)vmulq_f32(v101, v92);
    int8x16_t v35 = (int8x16_t)vmulq_f32(v101, v91);
    v35.i32[3] = 0;
    *(float32x2_t *)v33.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v34.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
    *(float32x2_t *)&v33.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
    float32x4_t v36 = vaddq_f32(v33, v87);
    float32x4_t v37 = vmulq_f32(v90, v100);
    int8x16_t v38 = (int8x16_t)vmulq_f32(v100, v89);
    int8x16_t v39 = (int8x16_t)vmulq_f32(v100, v88);
    v39.i32[3] = 0;
    *(float32x2_t *)v37.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)));
    *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
    float32x4_t v40 = vaddq_f32(v37, v86);
    __n128 v98 = (__n128)v40;
    float32x4_t v99 = v36;
    if (v8)
    {
      v99.i32[2] = 0;
      v98.n128_u32[2] = 0;
      float32x4_t v40 = (float32x4_t)v98;
      float32x4_t v36 = v99;
    }
    float32x4_t v41 = vsubq_f32(v36, v40);
    v41.i32[3] = 0;
    float32x4_t v97 = v41;
    int8x16_t v42 = (int8x16_t)vmulq_f32(*v15, v41);
    float32x2_t v43 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
    if (v43.f32[0] > 0.0 && vmul_f32(v43, v43).f32[0] > (float)(i * a2[8].f32[0]))
    {
      int v48 = 10;
      goto LABEL_29;
    }
    float v94 = v43.f32[0];
    if (sub_1B6DF6B6C((float *)a1[2].i64[1], &v97))
    {
      int v48 = 1;
      goto LABEL_29;
    }
    if ((float)(i - v94) <= (float)(i * 0.000001)) {
      break;
    }
    sub_1B6DF6038((int *)a1[2].i64[1], &v97, &v99, &v98);
    sub_1B6DF6B3C((__n128 *)a1[2].i64[1], (__n128 *)&v96);
    if (!v44)
    {
      int v48 = 3;
      goto LABEL_29;
    }
    float32x4_t v21 = v96;
    int8x16_t v45 = (int8x16_t)vmulq_f32(v21, v21);
    float v46 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0];
    if (v46 < 0.000001)
    {
      *float32x4_t v15 = v96;
      int v48 = 6;
      goto LABEL_29;
    }
    if ((float)(i - v46) <= (float)(i * 0.00000011921))
    {
      int v48 = 12;
      float i = v46;
      goto LABEL_29;
    }
    a1[1] = v96;
    int v47 = a1[5].i32[3];
    a1[5].i32[3] = v47 + 1;
    if (v47 > 1000)
    {
      int v49 = 0;
      goto LABEL_34;
    }
    if (*(_DWORD *)a1[2].i64[1] == 4)
    {
      int v49 = 0;
      a1[6].i32[0] = 13;
      goto LABEL_34;
    }
  }
  if ((float)(i - v94) <= 0.0) {
    int v48 = 2;
  }
  else {
    int v48 = 11;
  }
LABEL_29:
  a1[6].i32[0] = v48;
  sub_1B6DF6C10(a1[2].i64[1], &v107, (__n128 *)&v106);
  float32x4_t v50 = a1[1];
  float32x4_t v108 = v50;
  int8x16_t v51 = (int8x16_t)vmulq_f32(v50, v50);
  float v52 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)).f32[0];
  if (v52 < 0.0001) {
    a1[6].i32[0] = 5;
  }
  if (v52 > 1.4211e-14)
  {
    float v53 = 1.0 / sqrtf(v52);
    float v54 = sqrtf(i);
    float32x4_t v55 = vmulq_n_f32(v50, v83 / v54);
    v55.i32[3] = 0;
    float32x4_t v107 = vsubq_f32(v107, v55);
    float32x4_t v108 = vmulq_n_f32(v50, v53);
    float32x4_t v56 = vmulq_n_f32(v50, v84 / v54);
    v56.i32[3] = 0;
    float32x4_t v106 = vaddq_f32(v106, v56);
    float v57 = (float)(1.0 / v53) - v19;
    int v49 = 1;
    a1[5].i32[2] = 1;
    goto LABEL_35;
  }
  int v49 = 0;
  a1[5].i32[2] = 2;
LABEL_34:
  float v57 = 0.0;
LABEL_35:
  LODWORD(v58) = a1[6].i32[1];
  if (v58)
  {
    uint64_t v58 = a1[2].i64[0];
    if (v58)
    {
      LODWORD(v58) = a1[6].i32[0];
      if (v58) {
        LODWORD(v58) = (float)(v19 + v57) < 0.01;
      }
    }
  }
  if ((!v49 || v58) && (uint64_t v59 = a1[2].i64[0]) != 0)
  {
    ++dword_1E9E49948;
    a1[1].i64[0] = 0;
    a1[1].i64[1] = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, _OWORD *, float32x4_t *, float32x4_t *, float32x4_t *, uint64_t))(*(void *)v59 + 16))(v59, a1[2].i64[1], a1[3].i64[0], a1[3].i64[1], v104, v102, a1 + 1, &v101, &v100, a4))
    {
      float32x4_t v60 = vsubq_f32(v100, v101);
      v60.i32[3] = 0;
      int8x16_t v61 = (int8x16_t)vmulq_f32(v60, v60);
      float v62 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)).f32[0];
      if (v62 <= 1.4211e-14)
      {
        float32x4_t v60 = *v15;
        int8x16_t v63 = (int8x16_t)vmulq_f32(v60, v60);
        LODWORD(v6sub_1B6DC4968((unsigned int *)this + 2) = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).u32[0];
      }
      if (v62 <= 1.4211e-14)
      {
        int v68 = 9;
        goto LABEL_60;
      }
      float32x4_t v64 = vsubq_f32(v101, v100);
      v64.i32[3] = 0;
      int8x16_t v65 = (int8x16_t)vmulq_f32(v64, v64);
      float v66 = -sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), vpadd_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v65.i8)).f32[0]);
      if (v57 <= v66) {
        char v67 = v49;
      }
      else {
        char v67 = 0;
      }
      if (v67)
      {
        int v68 = 8;
LABEL_60:
        a1[5].i32[2] = v68;
LABEL_61:
        if ((v49 & 1) == 0) {
          return;
        }
        goto LABEL_65;
      }
      float32x4_t v106 = v100;
      float32x4_t v107 = v101;
      float32x4_t v108 = vmulq_n_f32(v60, 1.0 / sqrtf(v62));
      a1[5].i32[2] = 3;
      float v57 = v66;
    }
    else
    {
      float32x4_t v69 = *v15;
      int8x16_t v70 = (int8x16_t)vmulq_f32(v69, v69);
      float v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
      if (v71 <= 0.0) {
        goto LABEL_61;
      }
      float32x4_t v72 = vsubq_f32(v101, v100);
      v72.i32[3] = 0;
      int8x16_t v73 = (int8x16_t)vmulq_f32(v72, v72);
      float v74 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0])- v19;
      if (v74 >= v57) {
        char v75 = v49;
      }
      else {
        char v75 = 0;
      }
      if (v75)
      {
        a1[5].i32[2] = 5;
      }
      else
      {
        float32x4_t v76 = vmulq_n_f32(v69, v83);
        v76.i32[3] = 0;
        float32x4_t v77 = vmulq_n_f32(v69, v84);
        v77.i32[3] = 0;
        float32x4_t v106 = vaddq_f32(v100, v77);
        float32x4_t v107 = vsubq_f32(v101, v76);
        float32x4_t v108 = vmulq_n_f32(v69, 1.0 / sqrtf(v71));
        a1[5].i32[2] = 6;
        float v57 = v74;
      }
    }
  }
  else if (!v49)
  {
    return;
  }
LABEL_65:
  if (v57 < 0.0 || (float)(v57 * v57) < a2[8].f32[0])
  {
    if (a1[6].i32[2])
    {
      (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(void *)a1[3].i64[0] + 16))(a1[3].i64[0], v104, &v101, &v100);
      v78.i64[0] = 0x3F0000003F000000;
      v78.i64[1] = 0x3F0000003F000000;
      float32x4_t v95 = vmulq_f32(vaddq_f32(v100, v101), v78);
      (*(void (**)(uint64_t, _OWORD *, float32x4_t *, float32x4_t *))(*(void *)a1[3].i64[1] + 16))(a1[3].i64[1], v102, &v101, &v100);
      v79.i64[0] = 0x3F0000003F000000;
      v79.i64[1] = 0x3F0000003F000000;
      float32x4_t v80 = vsubq_f32(v95, vmulq_f32(vaddq_f32(v101, v100), v79));
      v80.i32[3] = 0;
      float32x4_t v81 = v108;
      int8x16_t v82 = (int8x16_t)vmulq_f32(v108, v80);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0] < 0.0)
      {
        float32x4_t v81 = vnegq_f32(v108);
        float32x4_t v108 = v81;
      }
    }
    else
    {
      float32x4_t v81 = v108;
    }
    a1[1] = v81;
    a1[5].f32[1] = v57;
    float32x4_t v101 = vaddq_f32(v106, v85);
    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float))(*(void *)a3 + 32))(a3, &v108, &v101, v57);
  }
}

void sub_1B6DF2AC8()
{
}

BOOL sub_1B6DF2ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t *a9, uint64_t a10)
{
  MEMORY[0x1F4188790](a1, a2);
  float32x4_t v96 = v12;
  float32x4_t v97 = v11;
  float32x4_t v14 = v13;
  float v16 = v15;
  float v17 = v10;
  float v19 = v18;
  uint64_t v98 = v20;
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  BOOL v21 = (v18[2] - 17) <= 1 && (v10[2] - 17) < 2;
  for (uint64_t i = 0; i != 42; ++i)
  {
    sub_1B6DF31D8();
    float32x4_t v23 = (float32x4_t)xmmword_1E9E48550[i];
    float32x4_t v24 = vnegq_f32(v23);
    float32x4_t v25 = *v16;
    float32x4_t v26 = v16[1];
    v25.i32[3] = 0;
    v26.i32[3] = 0;
    float32x4_t v27 = v16[2];
    v27.i32[3] = 0;
    *(float32x4_t *)&v110[i * 16] = vaddq_f32(vaddq_f32(vmulq_n_f32(v25, v24.f32[0]), vmulq_lane_f32(v26, *(float32x2_t *)v24.f32, 1)), vmulq_laneq_f32(v27, v24, 2));
    float32x4_t v28 = *v14;
    float32x4_t v29 = v14[1];
    v28.i32[3] = 0;
    v29.i32[3] = 0;
    float32x4_t v30 = v14[2];
    v30.i32[3] = 0;
    *(float32x4_t *)&v109[i * 16] = vaddq_f32(vaddq_f32(vmulq_n_f32(v28, v23.f32[0]), vmulq_lane_f32(v29, *(float32x2_t *)v23.f32, 1)), vmulq_laneq_f32(v30, v23, 2));
  }
  int v31 = (*(uint64_t (**)(_DWORD *))(*(void *)v19 + 168))(v19);
  if (v31 < 1)
  {
    uint64_t v45 = 42;
  }
  else
  {
    uint64_t v32 = 0;
    int v33 = v31;
    do
    {
      (*(void (**)(_DWORD *, uint64_t, float32x4_t *))(*(void *)v19 + 176))(v19, v32, v112);
      int8x16_t v34 = (int8x16_t)vmulq_f32(*v16, v112[0]);
      int8x16_t v35 = (int8x16_t)vmulq_f32(v112[0], v16[1]);
      int8x16_t v36 = (int8x16_t)vmulq_f32(v112[0], v16[2]);
      v36.i32[3] = 0;
      *(float32x2_t *)v34.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v35.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)));
      v34.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
      v112[0] = (float32x4_t)v34;
      sub_1B6DF31D8();
      float32x4_t v37 = v112[0];
      xmmword_1E9E48550[v32 + 42] = (__int128)v112[0];
      float32x4_t v38 = vnegq_f32(v37);
      float32x4_t v39 = *v16;
      float32x4_t v40 = v16[1];
      v39.i32[3] = 0;
      v40.i32[3] = 0;
      float32x4_t v41 = v16[2];
      v41.i32[3] = 0;
      *(float32x4_t *)&v110[16 * v32 + 672] = vaddq_f32(vaddq_f32(vmulq_n_f32(v39, v38.f32[0]), vmulq_lane_f32(v40, *(float32x2_t *)v38.f32, 1)), vmulq_laneq_f32(v41, v38, 2));
      float32x4_t v42 = *v14;
      float32x4_t v43 = v14[1];
      v42.i32[3] = 0;
      v43.i32[3] = 0;
      float32x4_t v44 = v14[2];
      v44.i32[3] = 0;
      *(float32x4_t *)&v109[16 * v32++ + 672] = vaddq_f32(vaddq_f32(vmulq_n_f32(v42, v37.f32[0]), vmulq_lane_f32(v43, *(float32x2_t *)v37.f32, 1)), vmulq_laneq_f32(v44, v37, 2));
    }
    while (v33 != v32);
    uint64_t v45 = (v32 + 42);
  }
  int v46 = (*(uint64_t (**)(_DWORD *))(*(void *)v17 + 168))(v17);
  if (v46 >= 1)
  {
    uint64_t v47 = 0;
    int v99 = v45;
    int v48 = &v109[16 * v45];
    int v49 = &v110[16 * v45];
    float32x4_t v50 = &xmmword_1E9E48550[v45];
    int v51 = v46;
    do
    {
      (*(void (**)(_DWORD *, uint64_t, float32x4_t *))(*(void *)v17 + 176))(v17, v47, v112);
      int8x16_t v52 = (int8x16_t)vmulq_f32(*v14, v112[0]);
      int8x16_t v53 = (int8x16_t)vmulq_f32(v112[0], v14[1]);
      int8x16_t v54 = (int8x16_t)vmulq_f32(v112[0], v14[2]);
      v54.i32[3] = 0;
      *(float32x2_t *)v52.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
      v52.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
      v112[0] = (float32x4_t)v52;
      sub_1B6DF31D8();
      float32x4_t v55 = v112[0];
      v50[v47] = (__int128)v112[0];
      float32x4_t v56 = vnegq_f32(v55);
      float32x4_t v57 = *v16;
      float32x4_t v58 = v16[1];
      v57.i32[3] = 0;
      v58.i32[3] = 0;
      float32x4_t v59 = v16[2];
      v59.i32[3] = 0;
      *(float32x4_t *)&v49[16 * v47] = vaddq_f32(vaddq_f32(vmulq_n_f32(v57, v56.f32[0]), vmulq_lane_f32(v58, *(float32x2_t *)v56.f32, 1)), vmulq_laneq_f32(v59, v56, 2));
      float32x4_t v60 = *v14;
      float32x4_t v61 = v14[1];
      v60.i32[3] = 0;
      v61.i32[3] = 0;
      float32x4_t v62 = v14[2];
      v62.i32[3] = 0;
      *(float32x4_t *)&v48[16 * v47++] = vaddq_f32(vaddq_f32(vmulq_n_f32(v60, v55.f32[0]), vmulq_lane_f32(v61, *(float32x2_t *)v55.f32, 1)), vmulq_laneq_f32(v62, v55, 2));
    }
    while (v51 != v47);
    uint64_t v45 = (v99 + v47);
  }
  (*(void (**)(_DWORD *, unsigned char *, float32x4_t *, uint64_t))(*(void *)v19 + 152))(v19, v110, v112, v45);
  (*(void (**)(_DWORD *, unsigned char *, unsigned char *, uint64_t))(*(void *)v17 + 152))(v17, v109, v111, v45);
  if ((int)v45 < 1)
  {
    float32x4_t v100 = 0u;
    float v67 = 1.0e18;
  }
  else
  {
    uint64_t v63 = v45;
    float32x4_t v100 = 0u;
    float32x4_t v64 = (float32x4_t *)v111;
    int8x16_t v65 = v112;
    float v66 = (int8x16_t *)xmmword_1E9E48550;
    float v67 = 1.0e18;
    do
    {
      sub_1B6DF31D8();
      int8x16_t v68 = *v66;
      v68.i32[2] = 0;
      if (v21) {
        unsigned int v69 = -1;
      }
      else {
        unsigned int v69 = 0;
      }
      float32x4_t v70 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v69), v68, *v66);
      int8x16_t v71 = (int8x16_t)vmulq_f32(v70, v70);
      if (vadd_f32(vpadd_f32(*(float32x2_t *)v71.i8, *(float32x2_t *)v71.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)).f32[0] <= 0.01)
      {
        float32x4_t v80 = v100;
      }
      else
      {
        float32x4_t v72 = vmulq_f32(*v65, *v16);
        int8x16_t v73 = (int8x16_t)vmulq_f32(*v65, v16[1]);
        int8x16_t v74 = (int8x16_t)vmulq_f32(*v65, v16[2]);
        v74.i32[3] = 0;
        *(float32x2_t *)v72.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v73.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
        *(float32x2_t *)&v72.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v74.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)), 0);
        float32x4_t v75 = vaddq_f32(v72, v16[3]);
        float32x4_t v76 = vmulq_f32(*v64, *v14);
        int8x16_t v77 = (int8x16_t)vmulq_f32(*v64, v14[1]);
        int8x16_t v78 = (int8x16_t)vmulq_f32(*v64, v14[2]);
        v78.i32[3] = 0;
        *(float32x2_t *)v76.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v77.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)));
        *(float32x2_t *)&v76.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v78.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), 0);
        float32x4_t v79 = vaddq_f32(v76, v14[3]);
        if (v21)
        {
          v75.i32[2] = 0;
          v79.i32[2] = 0;
        }
        float32x4_t v80 = v100;
        float32x4_t v81 = vsubq_f32(v79, v75);
        v81.i32[3] = 0;
        int8x16_t v82 = (int8x16_t)vmulq_f32(v70, v81);
        float v83 = vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)).f32[0];
        if (v83 < v67)
        {
          float32x4_t v80 = v70;
          float v67 = v83;
        }
      }
      float32x4_t v100 = v80;
      ++v64;
      ++v65;
      ++v66;
      --v63;
    }
    while (v63);
  }
  sub_1B6DE82FC((uint64_t)v19);
  sub_1B6DE82FC((uint64_t)v17);
  if (v67 < 0.0) {
    return 0;
  }
  float v85 = sub_1B6DE82FC((uint64_t)v19);
  float v95 = v67 + (float)((float)(v85 + sub_1B6DE82FC((uint64_t)v17)) + 0.5);
  sub_1B6DF22D0((uint64_t)v107, v19, v17, v98, 0);
  float32x4_t v86 = vmulq_n_f32(v100, v95);
  v86.i32[3] = 0;
  float32x4_t v87 = v16[2];
  int8x16_t v88 = (int8x16_t)vaddq_f32(v16[3], v86);
  float32x4_t v89 = v16[1];
  v105[0] = *v16;
  v105[1] = v89;
  v105[2] = v87;
  v105[3] = v88;
  float32x4_t v90 = v14[1];
  v105[4] = *v14;
  v105[5] = v90;
  float32x4_t v91 = v14[3];
  v105[6] = v14[2];
  v105[7] = v91;
  int v106 = 1566444395;
  float32x4_t v101 = &unk_1F0FCCF08;
  unsigned __int8 v104 = 0;
  v88.i64[0] = 0x8000000080000000;
  v88.i64[1] = 0x8000000080000000;
  int8x16_t v108 = veorq_s8((int8x16_t)v100, v88);
  sub_1B6DF2324(v107, v105, &v101, a10, 0);
  int v92 = v104;
  if (v104)
  {
    float32x4_t v93 = v102;
    float32x4_t v94 = vsubq_f32(v102, vmulq_n_f32(v100, v95 - v103));
    v94.i32[3] = 0;
    *float32x4_t v96 = v94;
    *a9 = v93;
    *float32x4_t v97 = v100;
  }
  return v92 != 0;
}

long long *sub_1B6DF31D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48930, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9E48930))
  {
    xmmword_1E9E48550 = xmmword_1B6ED0010;
    unk_1E9E48560 = xmmword_1B6ED0020;
    xmmword_1E9E48570 = xmmword_1B6ED0030;
    unk_1E9E48580 = xmmword_1B6ED0040;
    xmmword_1E9E48590 = xmmword_1B6ED0050;
    unk_1E9E485A0 = xmmword_1B6ED0060;
    xmmword_1E9E485B0 = xmmword_1B6ED0070;
    unk_1E9E485C0 = xmmword_1B6ED0080;
    xmmword_1E9E485D0 = xmmword_1B6ED0090;
    unk_1E9E485E0 = xmmword_1B6ED00A0;
    xmmword_1E9E485F0 = xmmword_1B6ED00B0;
    unk_1E9E48600 = xmmword_1B6ED00C0;
    xmmword_1E9E48610 = xmmword_1B6ED00D0;
    unk_1E9E48620 = xmmword_1B6ED00E0;
    xmmword_1E9E48630 = xmmword_1B6ED00F0;
    unk_1E9E48640 = xmmword_1B6ED0100;
    xmmword_1E9E48650 = xmmword_1B6ED0110;
    unk_1E9E48660 = xmmword_1B6ED0120;
    xmmword_1E9E48670 = xmmword_1B6ED0130;
    unk_1E9E48680 = xmmword_1B6ED0140;
    xmmword_1E9E48690 = xmmword_1B6ED0150;
    unk_1E9E486A0 = xmmword_1B6ED0160;
    xmmword_1E9E486B0 = xmmword_1B6ED0170;
    unk_1E9E486C0 = xmmword_1B6ED0180;
    xmmword_1E9E486D0 = xmmword_1B6ED0190;
    unk_1E9E486E0 = xmmword_1B6E4F330;
    xmmword_1E9E486F0 = xmmword_1B6ED01A0;
    unk_1E9E48700 = xmmword_1B6ED01B0;
    xmmword_1E9E48710 = xmmword_1B6ED01C0;
    unk_1E9E48720 = xmmword_1B6ED01D0;
    xmmword_1E9E48730 = xmmword_1B6E99E00;
    unk_1E9E48740 = xmmword_1B6ED01E0;
    xmmword_1E9E48750 = xmmword_1B6ED01F0;
    unk_1E9E48760 = xmmword_1B6ED0200;
    xmmword_1E9E48770 = xmmword_1B6ED0210;
    unk_1E9E48780 = xmmword_1B6ED0220;
    xmmword_1E9E48790 = xmmword_1B6ED0230;
    unk_1E9E487A0 = xmmword_1B6ED0240;
    xmmword_1E9E487B0 = xmmword_1B6ED0250;
    unk_1E9E487C0 = xmmword_1B6ED0260;
    xmmword_1E9E487D0 = xmmword_1B6ED0270;
    unk_1E9E487E0 = xmmword_1B6ED0280;
    __cxa_guard_release(&qword_1E9E48930);
  }
  return &xmmword_1E9E48550;
}

void sub_1B6DF33D8()
{
}

void sub_1B6DF33EC()
{
}

uint64_t sub_1B6DF3408(uint64_t result, _OWORD *a2, _OWORD *a3, float a4)
{
  *(_OWORD *)(result + 16) = *a2;
  *(_OWORD *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = *a3;
  *(float *)(result + 48) = a4;
  *(unsigned char *)(result + 5sub_1B6DC4968((unsigned int *)this + 2) = 1;
  return result;
}

void *sub_1B6DF3428(void *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 112);
  if (v3)
  {
    double result = (void *)result[103];
    if (result)
    {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
    }
    else
    {
      if (!off_1E9E49950) {
        return result;
      }
      double result = (void *)off_1E9E49950(v3);
    }
    *(void *)(a2 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0;
  }
  return result;
}

uint64_t sub_1B6DF3498(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2 = 0;
  float v3 = a2[5].f32[0];
  f32 = a1[6].f32;
  int v5 = -1;
  do
  {
    float v6 = *f32;
    f32 += 48;
    float v7 = v6;
    if (v6 < v3)
    {
      float v3 = v7;
      int v5 = v2;
    }
    ++v2;
  }
  while (v2 != 4);
  float32x4_t v8 = *a2;
  if (byte_1E9DDA468)
  {
    if (v5)
    {
      float32x4_t v9 = a1[13];
      float32x4_t v10 = vsubq_f32(v8, v9);
      int8x8_t v11 = (int8x8_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
      v10.i32[3] = 0;
      float32x4_t v12 = a1[37];
      float32x4_t v13 = a1[25];
      float32x4_t v15 = vsubq_f32(v12, v13);
      int8x8_t v14 = (int8x8_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
      v15.i32[3] = 0;
      *(int8x8_t *)v16.f32 = vext_s8(*(int8x8_t *)v10.f32, v11, 4uLL);
      v16.i64[1] = v10.i64[0];
      *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v15.f32, v14, 4uLL);
      v17.i64[1] = v15.i64[0];
      int8x16_t v18 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v10), vmulq_f32(v16, v15));
      v16.i64[0] = vextq_s8(v18, v18, 4uLL).u64[0];
      v16.i64[1] = v18.u32[0];
      int8x16_t v19 = (int8x16_t)vmulq_f32(v16, v16);
      *(float32x2_t *)v16.f32 = vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8);
      int32x4_t v20 = (int32x4_t)vextq_s8(v19, v19, 8uLL);
      *(float32x2_t *)v20.i8 = vadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v20.i8);
      if (v5 == 1)
      {
        float32x4_t v22 = vsubq_f32(v8, a1[1]);
        int8x8_t v21 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
        v22.i32[3] = 0;
        *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, v21, 4uLL);
        v23.i64[1] = v22.i64[0];
        unsigned __int32 v24 = 0;
LABEL_18:
        float32x4_t v59 = vsubq_f32(v12, v9);
        int8x8_t v60 = (int8x8_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
        v59.i32[3] = 0;
        *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v59.f32, v60, 4uLL);
        v61.i64[1] = v59.i64[0];
        int8x16_t v62 = (int8x16_t)vsubq_f32(vmulq_f32(v61, v22), vmulq_f32(v23, v59));
        v61.i64[0] = vextq_s8(v62, v62, 4uLL).u64[0];
        v61.i64[1] = v62.u32[0];
        int8x16_t v58 = (int8x16_t)vmulq_f32(v61, v61);
        v58.i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).u32[0];
        if (v5 == 3)
        {
          v13.i32[1] = 0;
LABEL_21:
          v13.i32[0] = v24;
          goto LABEL_42;
        }
LABEL_20:
        float32x4_t v63 = vsubq_f32(v13, v9);
        int8x8_t v64 = (int8x8_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
        v63.i32[3] = 0;
        *(int8x8_t *)v65.f32 = vext_s8(*(int8x8_t *)v63.f32, v64, 4uLL);
        v65.i64[1] = v63.i64[0];
        int8x16_t v66 = (int8x16_t)vsubq_f32(vmulq_f32(v65, v22), vmulq_f32(v23, v63));
        v65.i64[0] = vextq_s8(v66, v66, 4uLL).u64[0];
        v65.i64[1] = v66.u32[0];
        int8x16_t v67 = (int8x16_t)vmulq_f32(v65, v65);
        *(float32x2_t *)v65.f32 = vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8);
        float32x4_t v13 = (float32x4_t)vextq_s8(v67, v67, 8uLL);
        *(int32x2_t *)v13.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v13.f32), 0);
        goto LABEL_21;
      }
    }
    else
    {
      float32x4_t v12 = a1[37];
      float32x4_t v13 = a1[25];
      float32x4_t v15 = vsubq_f32(v12, v13);
      int32x4_t v20 = (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
      v15.i32[3] = 0;
      *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v20.i8, 4uLL);
      v17.i64[1] = v15.i64[0];
      v20.i64[0] = 0;
    }
    float32x4_t v22 = vsubq_f32(v8, a1[1]);
    int8x8_t v55 = (int8x8_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    v22.i32[3] = 0;
    *(int8x8_t *)v23.f32 = vext_s8(*(int8x8_t *)v22.f32, v55, 4uLL);
    v23.i64[1] = v22.i64[0];
    int8x16_t v56 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v22), vmulq_f32(v23, v15));
    v57.i64[0] = vextq_s8(v56, v56, 4uLL).u64[0];
    v57.i64[1] = v56.u32[0];
    int8x16_t v58 = (int8x16_t)vmulq_f32(v57, v57);
    unsigned __int32 v24 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).u32[0];
    float32x4_t v9 = a1[13];
    v58.i32[0] = 0;
    if (v5 == 2) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v5)
  {
    float32x4_t v25 = a1[13];
    float32x4_t v26 = vsubq_f32(v8, v25);
    float32x4_t v27 = v26;
    v27.i32[3] = 0;
    float32x4_t v28 = a1[25];
    int8x16_t v29 = (int8x16_t)vsubq_f32(v8, v28);
    float32x4_t v13 = (float32x4_t)v29;
    v13.i32[3] = 0;
    float32x4_t v30 = a1[37];
    int8x16_t v31 = (int8x16_t)vsubq_f32(v8, v30);
    float32x4_t v32 = (float32x4_t)v31;
    v32.i32[3] = 0;
    float32x4_t v34 = vsubq_f32(v28, v30);
    int8x8_t v33 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v34.i32[3] = 0;
    float32x4_t v36 = vsubq_f32(v25, v30);
    int8x8_t v35 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
    v36.i32[3] = 0;
    int8x16_t v37 = (int8x16_t)vsubq_f32(v25, v28);
    float32x4_t v38 = (float32x4_t)v37;
    v38.i32[3] = 0;
    *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL);
    v39.i64[1] = v26.i64[0];
    v26.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v34.f32, v33, 4uLL);
    v40.i64[1] = v34.i64[0];
    int8x16_t v41 = (int8x16_t)vsubq_f32(vmulq_f32(v40, v27), vmulq_f32(v39, v34));
    v42.i64[0] = vextq_s8(v41, v41, 4uLL).u64[0];
    v42.i64[1] = v41.u32[0];
    *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), 4uLL);
    v43.i64[1] = v29.i64[0];
    *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v36.f32, v35, 4uLL);
    v44.i64[1] = v36.i64[0];
    float32x4_t v45 = vsubq_f32(vmulq_f32(v44, v13), vmulq_f32(v43, v36));
    v46.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL).u64[0];
    v46.i64[1] = v45.u32[0];
    *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v26.f32, 4uLL);
    v47.i64[1] = v32.i64[0];
    *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), 4uLL);
    v26.i64[1] = v37.i64[0];
    int8x16_t v48 = (int8x16_t)vsubq_f32(vmulq_f32(v26, v32), vmulq_f32(v47, v38));
    v45.i64[0] = vextq_s8(v48, v48, 4uLL).u64[0];
    v45.i64[1] = v48.u32[0];
    int8x16_t v49 = (int8x16_t)vmulq_f32(v42, v42);
    *(float32x2_t *)v37.i8 = vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8);
    int32x4_t v20 = (int32x4_t)vextq_s8(v49, v49, 8uLL);
    *(float32x2_t *)v20.i8 = vadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v20.i8);
    int8x16_t v50 = (int8x16_t)vmulq_f32(v46, v46);
    float32x2_t v51 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
    int8x16_t v52 = (int8x16_t)vmulq_f32(v45, v45);
    LODWORD(v53) = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).u32[0];
    if ((vcgt_f32(*(float32x2_t *)v20.i8, v51).u8[0] & 1) == 0) {
      *(float *)v20.i32 = v51.f32[0];
    }
    if (*(float *)v20.i32 <= v53) {
      *(float *)v20.i32 = v53;
    }
    if (v5 == 1)
    {
      float32x4_t v54 = a1[1];
      v13.i32[0] = 0;
      goto LABEL_30;
    }
  }
  else
  {
    float32x4_t v28 = a1[25];
    float32x4_t v30 = a1[37];
    float32x4_t v13 = vsubq_f32(v8, v28);
    int32x4_t v20 = (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
    v13.i32[3] = 0;
    float32x4_t v32 = vsubq_f32(v8, v30);
    int8x8_t v68 = (int8x8_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v32.i32[3] = 0;
    float32x4_t v34 = vsubq_f32(v28, v30);
    int8x8_t v69 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
    v34.i32[3] = 0;
    *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v34.f32, v69, 4uLL);
    v40.i64[1] = v34.i64[0];
    *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v13.f32, *(int8x8_t *)v20.i8, 4uLL);
    v43.i64[1] = v13.i64[0];
    *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, v68, 4uLL);
    v47.i64[1] = v32.i64[0];
    v20.i64[0] = 0;
  }
  float32x4_t v54 = a1[1];
  float32x4_t v70 = vsubq_f32(v8, v54);
  int8x8_t v71 = (int8x8_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
  v70.i32[3] = 0;
  float32x4_t v72 = vsubq_f32(v54, v30);
  int8x8_t v73 = (int8x8_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
  v72.i32[3] = 0;
  int8x16_t v74 = (int8x16_t)vsubq_f32(v54, v28);
  float32x4_t v75 = (float32x4_t)v74;
  v75.i32[3] = 0;
  *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v70.f32, v71, 4uLL);
  v76.i64[1] = v70.i64[0];
  float32x4_t v77 = vsubq_f32(vmulq_f32(v40, v70), vmulq_f32(v76, v34));
  v76.i64[0] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL).u64[0];
  v76.i64[1] = v77.u32[0];
  *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v72.f32, v73, 4uLL);
  v77.i64[1] = v72.i64[0];
  float32x4_t v78 = vsubq_f32(vmulq_f32(v77, v13), vmulq_f32(v43, v72));
  v79.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL).u64[0];
  v79.i64[1] = v78.u32[0];
  *(int8x8_t *)v78.f32 = vext_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), 4uLL);
  v78.i64[1] = v74.i64[0];
  int8x16_t v80 = (int8x16_t)vsubq_f32(vmulq_f32(v78, v32), vmulq_f32(v47, v75));
  v81.i64[0] = vextq_s8(v80, v80, 4uLL).u64[0];
  v81.i64[1] = v80.u32[0];
  int8x16_t v82 = (int8x16_t)vmulq_f32(v76, v76);
  float32x2_t v83 = vadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
  int8x16_t v84 = (int8x16_t)vmulq_f32(v79, v79);
  *(float32x2_t *)v72.f32 = vpadd_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8);
  float32x4_t v13 = (float32x4_t)vextq_s8(v84, v84, 8uLL);
  *(float32x2_t *)v13.f32 = vadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v13.f32);
  int8x16_t v85 = (int8x16_t)vmulq_f32(v81, v81);
  LODWORD(v86) = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)).u32[0];
  if ((vcgt_f32(v83, *(float32x2_t *)v13.f32).u8[0] & 1) == 0) {
    v83.f32[0] = v13.f32[0];
  }
  if (v83.f32[0] <= v86) {
    v13.f32[0] = v86;
  }
  else {
    v13.f32[0] = v83.f32[0];
  }
  v58.i32[0] = 0;
  if (v5 == 2) {
    goto LABEL_37;
  }
  float32x4_t v8 = *a2;
  float32x4_t v25 = a1[13];
  float32x4_t v30 = a1[37];
  float32x4_t v27 = vsubq_f32(*a2, v25);
  int8x8_t v87 = (int8x8_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  v27.i32[3] = 0;
  float32x4_t v32 = vsubq_f32(*a2, v30);
  int8x8_t v88 = (int8x8_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v32.i32[3] = 0;
  float32x4_t v36 = vsubq_f32(v25, v30);
  int8x8_t v89 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  v36.i32[3] = 0;
  *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v36.f32, v89, 4uLL);
  v44.i64[1] = v36.i64[0];
  *(int8x8_t *)v39.f32 = vext_s8(*(int8x8_t *)v27.f32, v87, 4uLL);
  v39.i64[1] = v27.i64[0];
  *(int8x8_t *)v47.f32 = vext_s8(*(int8x8_t *)v32.f32, v88, 4uLL);
  v47.i64[1] = v32.i64[0];
LABEL_30:
  float32x4_t v90 = vsubq_f32(v8, v54);
  int8x8_t v91 = (int8x8_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
  v90.i32[3] = 0;
  float32x4_t v92 = vsubq_f32(v54, v30);
  float32x4_t v93 = v92;
  v93.i32[3] = 0;
  float32x4_t v94 = vsubq_f32(v54, v25);
  float32x4_t v95 = v94;
  v95.i32[3] = 0;
  *(int8x8_t *)v96.f32 = vext_s8(*(int8x8_t *)v90.f32, v91, 4uLL);
  v96.i64[1] = v90.i64[0];
  float32x4_t v97 = vsubq_f32(vmulq_f32(v44, v90), vmulq_f32(v96, v36));
  v96.i64[0] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 4uLL).u64[0];
  v96.i64[1] = v97.u32[0];
  v97.i64[0] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
  *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v92.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL), 4uLL);
  v94.i64[1] = v92.i64[0];
  int8x16_t v98 = (int8x16_t)vsubq_f32(vmulq_f32(v94, v27), vmulq_f32(v39, v93));
  v92.i64[0] = vextq_s8(v98, v98, 4uLL).u64[0];
  v92.i64[1] = v98.u32[0];
  *(int8x8_t *)v97.f32 = vext_s8(*(int8x8_t *)v95.f32, *(int8x8_t *)v97.f32, 4uLL);
  v97.i64[1] = v95.i64[0];
  int8x16_t v99 = (int8x16_t)vsubq_f32(vmulq_f32(v97, v32), vmulq_f32(v47, v95));
  v100.i64[0] = vextq_s8(v99, v99, 4uLL).u64[0];
  v100.i64[1] = v99.u32[0];
  int8x16_t v58 = (int8x16_t)vmulq_f32(v96, v96);
  *(float32x2_t *)v58.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
  int8x16_t v101 = (int8x16_t)vmulq_f32(v92, v92);
  float32x2_t v102 = vadd_f32(vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL));
  int8x16_t v103 = (int8x16_t)vmulq_f32(v100, v100);
  LODWORD(v104) = vadd_f32(vpadd_f32(*(float32x2_t *)v103.i8, *(float32x2_t *)v103.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL)).u32[0];
  if ((vcgt_f32(*(float32x2_t *)v58.i8, v102).u8[0] & 1) == 0) {
    *(float *)v58.i32 = v102.f32[0];
  }
  if (*(float *)v58.i32 <= v104) {
    *(float *)v58.i32 = v104;
  }
  if (v5 == 3)
  {
    v13.i64[0] = v13.u32[0];
    goto LABEL_42;
  }
  float32x4_t v54 = a1[1];
LABEL_37:
  int8x16_t v105 = (int8x16_t)vsubq_f32(*a2, v54);
  float32x4_t v106 = (float32x4_t)v105;
  v106.i32[3] = 0;
  int8x8_t v107 = (int8x8_t)vextq_s8(v105, v105, 8uLL).u64[0];
  float32x4_t v108 = a1[13];
  float32x4_t v109 = vsubq_f32(*a2, v108);
  float32x4_t v110 = v109;
  v110.i32[3] = 0;
  float32x4_t v111 = a1[25];
  int8x16_t v112 = (int8x16_t)vsubq_f32(*a2, v111);
  float32x4_t v113 = (float32x4_t)v112;
  v113.i32[3] = 0;
  float32x4_t v114 = vsubq_f32(v108, v111);
  int8x8_t v115 = (int8x8_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
  v114.i32[3] = 0;
  float32x4_t v116 = vsubq_f32(v54, v111);
  int8x8_t v117 = (int8x8_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
  v116.i32[3] = 0;
  float32x4_t v118 = vsubq_f32(v54, v108);
  float32x4_t v119 = v118;
  v119.i32[3] = 0;
  *(int8x8_t *)v120.f32 = vext_s8(*(int8x8_t *)v106.f32, v107, 4uLL);
  v120.i64[1] = v106.i64[0];
  *(int8x8_t *)v121.f32 = vext_s8(*(int8x8_t *)v114.f32, v115, 4uLL);
  v121.i64[1] = v114.i64[0];
  float32x4_t v122 = vsubq_f32(vmulq_f32(v121, v106), vmulq_f32(v120, v114));
  v120.i64[0] = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 4uLL).u64[0];
  v120.i64[1] = v122.u32[0];
  *(int8x8_t *)v122.f32 = vext_s8(*(int8x8_t *)v109.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL), 4uLL);
  v122.i64[1] = v109.i64[0];
  *(int8x8_t *)v109.f32 = vext_s8(*(int8x8_t *)v116.f32, v117, 4uLL);
  v109.i64[1] = v116.i64[0];
  float32x4_t v123 = vsubq_f32(vmulq_f32(v109, v110), vmulq_f32(v122, v116));
  v110.i64[0] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 4uLL).u64[0];
  v110.i64[1] = v123.u32[0];
  *(int8x8_t *)v123.f32 = vext_s8(*(int8x8_t *)v112.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), 4uLL);
  v123.i64[1] = v112.i64[0];
  *(int8x8_t *)v118.f32 = vext_s8(*(int8x8_t *)v118.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), 4uLL);
  v118.i64[1] = v119.i64[0];
  int8x16_t v124 = (int8x16_t)vsubq_f32(vmulq_f32(v118, v113), vmulq_f32(v123, v119));
  v118.i64[0] = vextq_s8(v124, v124, 4uLL).u64[0];
  v118.i64[1] = v124.u32[0];
  int8x16_t v125 = (int8x16_t)vmulq_f32(v120, v120);
  float32x2_t v126 = vadd_f32(vpadd_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL));
  int8x16_t v127 = (int8x16_t)vmulq_f32(v110, v110);
  float32x2_t v128 = vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL));
  int8x16_t v129 = (int8x16_t)vmulq_f32(v118, v118);
  LODWORD(v130) = vadd_f32(vpadd_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v129.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL)).u32[0];
  if ((vcgt_f32(v126, v128).u8[0] & 1) == 0) {
    v126.f32[0] = v128.f32[0];
  }
  if (v126.f32[0] <= v130) {
    v126.f32[0] = v130;
  }
  v13.i32[1] = v126.i32[0];
LABEL_42:
  float32x4_t v131 = (float32x4_t)vzip1q_s32(v20, (int32x4_t)v13);
  v131.i32[2] = v58.i32[0];
  float32x4_t v132 = vabsq_f32(v131);
  float v133 = -1.0e18;
  if (v132.f32[0] > -1.0e18) {
    unsigned int v134 = 0;
  }
  else {
    unsigned int v134 = -1;
  }
  if (v132.f32[0] > -1.0e18) {
    float v133 = v132.f32[0];
  }
  if (v132.f32[1] > v133)
  {
    unsigned int v134 = 1;
    float v133 = v132.f32[1];
  }
  if (v132.f32[2] > v133)
  {
    unsigned int v134 = 2;
    float v133 = v132.f32[2];
  }
  if (v132.f32[3] <= v133) {
    return v134;
  }
  else {
    return 3;
  }
}

uint64_t sub_1B6DF3B7C(uint64_t result, float32x4_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 800);
  if ((int)v2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 0;
  float v4 = *(float *)(result + 804) * *(float *)(result + 804);
  int v5 = (float32x4_t *)(result + 16);
  LODWORD(result) = -1;
  do
  {
    float32x4_t v6 = *v5;
    v5 += 12;
    float32x4_t v7 = vsubq_f32(v6, *a2);
    v7.i32[3] = 0;
    int8x16_t v8 = (int8x16_t)vmulq_f32(v7, v7);
    float v9 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0];
    if (v9 >= v4) {
      double result = result;
    }
    else {
      double result = v3;
    }
    if (v9 < v4) {
      float v4 = v9;
    }
    ++v3;
  }
  while (v2 != v3);
  return result;
}

float sub_1B6DF3BE0(uint64_t a1)
{
  return *(float *)(a1 + 804);
}

uint64_t sub_1B6DF3BE8(float32x4_t *a1, uint64_t a2)
{
  int v4 = a1[50].i32[0];
  if (v4 == 4)
  {
    int v4 = sub_1B6DF3498(a1, (float32x4_t *)a2);
    sub_1B6DF3428(a1, (uint64_t)&a1[12 * v4 + 1]);
  }
  else
  {
    a1[50].i32[0] = v4 + 1;
  }
  uint64_t v5 = v4 & ~(v4 >> 31);
  f32 = (_OWORD *)a1[12 * v5].f32;
  f32[1] = *(_OWORD *)a2;
  f32[2] = *(_OWORD *)(a2 + 16);
  f32[3] = *(_OWORD *)(a2 + 32);
  f32[4] = *(_OWORD *)(a2 + 48);
  f32[5] = *(_OWORD *)(a2 + 64);
  f32[6] = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)f32 + 156) = *(_OWORD *)(a2 + 140);
  f32[8] = v8;
  f32[9] = v9;
  f32[7] = v7;
  f32[11] = *(_OWORD *)(a2 + 160);
  f32[12] = *(_OWORD *)(a2 + 176);
  uint64_t v10 = a1[51].i64[1];
  if (v10 && (*(unsigned char *)(v10 + 8) & 1) != 0) {
    (**(void (***)(uint64_t, float32x4_t *, uint64_t))v10)(v10, a1, v5);
  }
  return v5;
}

void *sub_1B6DF3CF4(void *result, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v3 = *((unsigned int *)result + 200);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = (uint64_t)result;
    unint64_t v5 = v3 + 1;
    do
    {
      float32x4_t v6 = (float32x4_t *)&result[24 * (v5 - 2)];
      float32x4_t v7 = v6[1];
      float32x4_t v8 = v6[2];
      float32x4_t v9 = vmulq_f32(*a2, v7);
      int8x16_t v10 = (int8x16_t)vmulq_f32(v7, a2[1]);
      int8x16_t v11 = (int8x16_t)vmulq_f32(v7, a2[2]);
      v11.i32[3] = 0;
      *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v10.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)));
      *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), 0);
      float32x4_t v12 = vaddq_f32(v9, a2[3]);
      uint64_t v6[4] = v12;
      float32x4_t v13 = vmulq_f32(*a3, v8);
      int8x16_t v14 = (int8x16_t)vmulq_f32(v8, a3[1]);
      int8x16_t v15 = (int8x16_t)vmulq_f32(v8, a3[2]);
      v15.i32[3] = 0;
      *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
      *(float32x2_t *)&v13.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
      float32x4_t v16 = vaddq_f32(v13, a3[3]);
      float32x4_t v17 = vsubq_f32(v12, v16);
      v17.i32[3] = 0;
      v6[3] = v16;
      int8x16_t v18 = (int8x16_t)vmulq_f32(v6[5], v17);
      v6[6].i32[0] = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).u32[0];
      ++v6[10].i32[2];
      --v5;
    }
    while (v5 > 1);
    do
    {
      uint64_t v19 = v4 + 192 * --v3;
      float v20 = *(float *)(v19 + 96);
      float v21 = *(float *)(v4 + 804);
      if (v20 <= v21
        && (float32x4_t v22 = vsubq_f32(*(float32x4_t *)(v4 + 192 * v3 + 48), vsubq_f32(*(float32x4_t *)(v4 + 192 * v3 + 64), vmulq_n_f32(*(float32x4_t *)(v4 + 192 * v3 + 80), v20))), v22.i32[3] = 0, v23 = (int8x16_t)vmulq_f32(v22, v22), vadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)).f32[0] <= (float)(v21 * v21)))
      {
        if (off_1E9E49958) {
          double result = (void *)((uint64_t (*)(uint64_t, void, void))off_1E9E49958)(v19 + 16, *(void *)(v4 + 784), *(void *)(v4 + 792));
        }
      }
      else
      {
        double result = sub_1B6DF3E94(v4, v3);
      }
    }
    while ((unint64_t)(v3 + 1) > 1);
  }
  return result;
}

void *sub_1B6DF3E94(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(unsigned char **)(a1 + 824);
  if (v4 && (v4[8] & 4) != 0) {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a1, a2);
  }
  double result = sub_1B6DF3428((void *)a1, a1 + 192 * v2 + 16);
  uint64_t v6 = *(int *)(a1 + 800) - 1;
  if (v6 != v2)
  {
    uint64_t v6 = a1 + 16 + 192 * v6;
    long long v7 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 192 * v2 + 16) = *(_OWORD *)v6;
    float32x4_t v8 = (_OWORD *)(a1 + 16 + 192 * v2);
    long long v9 = *(_OWORD *)(v6 + 32);
    long long v10 = *(_OWORD *)(v6 + 48);
    v8[1] = v7;
    _OWORD v8[2] = v9;
    long long v11 = *(_OWORD *)(v6 + 64);
    v8[3] = v10;
    void v8[4] = v11;
    long long v12 = *(_OWORD *)(v6 + 96);
    long long v13 = *(_OWORD *)(v6 + 112);
    long long v14 = *(_OWORD *)(v6 + 128);
    *(_OWORD *)((char *)v8 + 140) = *(_OWORD *)(v6 + 140);
    v8[7] = v13;
    unsigned char v8[8] = v14;
    v8[6] = v12;
    v8[5] = *(_OWORD *)(v6 + 80);
    long long v15 = *(_OWORD *)(v6 + 176);
    v8[10] = *(_OWORD *)(v6 + 160);
    v8[11] = v15;
    *(void *)(v6 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0;
    *(unsigned char *)(v6 + 120) = 0;
    *(void *)(v6 + sub_1B6DC7B98((uint64_t)this + 128) = 0;
    *(_DWORD *)(v6 + 124) = 0;
    *(_DWORD *)(v6 + 15sub_1B6DC4968((unsigned int *)this + 2) = 0;
    LODWORD(v6) = *(_DWORD *)(a1 + 800) - 1;
  }
  *(_DWORD *)(a1 + 800) = v6;
  return result;
}

void sub_1B6DF3F98(uint64_t a1, uint64_t a2, float32x4_t *a3, float a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  if ((int)v4 >= 2)
  {
    uint64_t v9 = 0;
    float32x4_t v10 = *(float32x4_t *)(*(void *)(a1 + 16) + 16 * (v4 - 1));
    int8x16_t v11 = (int8x16_t)vmulq_f32(v10, *a3);
    float v12 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]+ a4;
    while (1)
    {
      float32x4_t v13 = *(float32x4_t *)(*(void *)(a1 + 16) + 16 * v9);
      int8x16_t v14 = (int8x16_t)vmulq_f32(v13, *a3);
      float v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]+ a4;
      if (v12 < 0.0) {
        break;
      }
      if (v15 < 0.0)
      {
        int v20 = *(_DWORD *)(a2 + 4);
        if (v20 == *(_DWORD *)(a2 + 8))
        {
          int v21 = v20 ? 2 * v20 : 1;
          if (v20 < v21)
          {
            float32x4_t v41 = v10;
            float32x4_t v45 = *(float32x4_t *)(*(void *)(a1 + 16) + 16 * v9);
            if (v21)
            {
              uint64_t v22 = sub_1B6E073B8(16 * v21, 16);
              float32x4_t v10 = v41;
              float32x4_t v13 = v45;
              uint64_t v23 = v22;
              int v20 = *(_DWORD *)(a2 + 4);
            }
            else
            {
              uint64_t v23 = 0;
            }
            if (v20 >= 1)
            {
              uint64_t v28 = 0;
              uint64_t v29 = 16 * v20;
              do
              {
                *(_OWORD *)(v23 + v28) = *(_OWORD *)(*(void *)(a2 + 16) + v28);
                v28 += 16;
              }
              while (v29 != v28);
            }
            uint64_t v30 = *(void *)(a2 + 16);
            if (v30) {
              BOOL v31 = *(unsigned char *)(a2 + 24) == 0;
            }
            else {
              BOOL v31 = 1;
            }
            if (!v31)
            {
              sub_1B6E073C4(v30);
              float32x4_t v10 = v41;
              float32x4_t v13 = v45;
            }
            *(unsigned char *)(a2 + 24) = 1;
            *(void *)(a2 + 16) = v23;
            *(_DWORD *)(a2 + 8) = v21;
            int v20 = *(_DWORD *)(a2 + 4);
          }
        }
        *(float32x4_t *)(*(void *)(a2 + 16) + 16 * v20) = vaddq_f32(v10, vmulq_n_f32(vsubq_f32(v13, v10), v12 / (float)(v12 - v15)));
        int v32 = *(_DWORD *)(a2 + 8);
        int v16 = *(_DWORD *)(a2 + 4) + 1;
        *(_DWORD *)(a2 + 4) = v16;
        if (v16 == v32)
        {
          int v17 = v16 ? 2 * v16 : 1;
          if (v16 < v17)
          {
            if (v17)
            {
              float32x4_t v47 = v13;
              uint64_t v33 = sub_1B6E073B8(16 * v17, 16);
              float32x4_t v13 = v47;
              uint64_t v19 = v33;
              int v16 = *(_DWORD *)(a2 + 4);
            }
            else
            {
              uint64_t v19 = 0;
            }
            if (v16 >= 1)
            {
              uint64_t v38 = 0;
              uint64_t v39 = 16 * v16;
              do
              {
                *(_OWORD *)(v19 + v38) = *(_OWORD *)(*(void *)(a2 + 16) + v38);
                v38 += 16;
              }
              while (v39 != v38);
            }
LABEL_64:
            uint64_t v36 = *(void *)(a2 + 16);
            if (v36) {
              BOOL v40 = *(unsigned char *)(a2 + 24) == 0;
            }
            else {
              BOOL v40 = 1;
            }
            float32x4_t v24 = v13;
            if (!v40)
            {
LABEL_68:
              float32x4_t v43 = v24;
              float32x4_t v48 = v13;
              sub_1B6E073C4(v36);
              float32x4_t v24 = v43;
              float32x4_t v13 = v48;
            }
LABEL_69:
            *(unsigned char *)(a2 + 24) = 1;
            *(void *)(a2 + 16) = v19;
            *(_DWORD *)(a2 + 8) = v17;
            int v16 = *(_DWORD *)(a2 + 4);
LABEL_70:
            *(float32x4_t *)(*(void *)(a2 + 16) + 16 * v16) = v24;
            ++*(_DWORD *)(a2 + 4);
            goto LABEL_71;
          }
        }
LABEL_49:
        float32x4_t v24 = v13;
        goto LABEL_70;
      }
LABEL_71:
      ++v9;
      float v12 = v15;
      float32x4_t v10 = v13;
      if (v9 == v4) {
        return;
      }
    }
    if (v15 >= 0.0)
    {
      float32x4_t v24 = vaddq_f32(v10, vmulq_n_f32(vsubq_f32(v13, v10), v12 / (float)(v12 - v15)));
      int v16 = *(_DWORD *)(a2 + 4);
      if (v16 == *(_DWORD *)(a2 + 8))
      {
        int v17 = v16 ? 2 * v16 : 1;
        if (v16 < v17)
        {
          if (v17)
          {
            float32x4_t v42 = v24;
            float32x4_t v46 = *(float32x4_t *)(*(void *)(a1 + 16) + 16 * v9);
            uint64_t v25 = sub_1B6E073B8(16 * v17, 16);
            float32x4_t v24 = v42;
            float32x4_t v13 = v46;
            uint64_t v19 = v25;
            int v16 = *(_DWORD *)(a2 + 4);
          }
          else
          {
            uint64_t v19 = 0;
          }
          if (v16 >= 1)
          {
            uint64_t v34 = 0;
            uint64_t v35 = 16 * v16;
            do
            {
              *(_OWORD *)(v19 + v34) = *(_OWORD *)(*(void *)(a2 + 16) + v34);
              v34 += 16;
            }
            while (v35 != v34);
          }
          uint64_t v36 = *(void *)(a2 + 16);
          if (v36) {
            BOOL v37 = *(unsigned char *)(a2 + 24) == 0;
          }
          else {
            BOOL v37 = 1;
          }
          if (!v37) {
            goto LABEL_68;
          }
          goto LABEL_69;
        }
      }
      goto LABEL_70;
    }
    int v16 = *(_DWORD *)(a2 + 4);
    if (v16 == *(_DWORD *)(a2 + 8))
    {
      int v17 = v16 ? 2 * v16 : 1;
      if (v16 < v17)
      {
        if (v17)
        {
          float32x4_t v44 = *(float32x4_t *)(*(void *)(a1 + 16) + 16 * v9);
          uint64_t v18 = sub_1B6E073B8(16 * v17, 16);
          float32x4_t v13 = v44;
          uint64_t v19 = v18;
          int v16 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          uint64_t v19 = 0;
        }
        if (v16 >= 1)
        {
          uint64_t v26 = 0;
          uint64_t v27 = 16 * v16;
          do
          {
            *(_OWORD *)(v19 + v26) = *(_OWORD *)(*(void *)(a2 + 16) + v26);
            v26 += 16;
          }
          while (v27 != v26);
        }
        goto LABEL_64;
      }
    }
    goto LABEL_49;
  }
}

BOOL sub_1B6DF4308(_DWORD *a1, _DWORD *a2, float32x4_t *a3, float32x4_t *a4, float *a5, float *a6, float a7)
{
  _Q2 = *a4;
  int8x16_t v8 = (int8x16_t)vmulq_f32(*a3, *a4);
  LODWORD(v9) = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).u32[0];
  _S5 = a1[8];
  _S7 = a1[9];
  __asm
  {
    FMLA            S3, S5, V2.S[2]
    FMLA            S4, S7, V2.S[2]
  }
  _S5 = a1[10];
  __asm { FMLA            S6, S5, V2.S[2] }
  _S16 = a2[8];
  _S18 = a2[9];
  __asm
  {
    FMLA            S5, S16, V2.S[2]
    FMLA            S7, S18, V2.S[2]
  }
  _S16 = a2[10];
  __asm { FMLA            S17, S16, V2.S[2] }
  float v26 = a5[32];
  float v27 = a5[33];
  if (_S3 < 0.0) {
    float v26 = -v26;
  }
  if (_S4 < 0.0) {
    float v27 = -v27;
  }
  float v28 = a5[34];
  if (_S6 < 0.0) {
    float v28 = -v28;
  }
  float v29 = a6[32];
  float v30 = a6[33];
  if (_S5 < 0.0) {
    float v29 = -v29;
  }
  if (_S7 < 0.0) {
    float v30 = -v30;
  }
  float v31 = a6[34];
  if (_S17 < 0.0) {
    float v31 = -v31;
  }
  float v32 = (float)((float)(_S4 * v27) + (float)(v26 * _S3)) + (float)(v28 * _S6);
  float v33 = (float)((float)(_S7 * v30) + (float)(v29 * _S5)) + (float)(v31 * _S17);
  if (v32 <= a5[36]) {
    float v32 = a5[36];
  }
  if (v33 <= a6[36]) {
    float v33 = a6[36];
  }
  float v34 = v32 + v33;
  float v35 = v9 + v34;
  float v36 = v34 - v9;
  if (v35 < v36) {
    float v36 = v35;
  }
  return v36 <= a7;
}

uint64_t sub_1B6DF4440(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  float32x4_t v10 = *(float32x4_t *)(a1 + 112);
  float32x4_t v11 = vmulq_f32(*a3, v10);
  int8x16_t v12 = (int8x16_t)vmulq_f32(v10, a3[1]);
  int8x16_t v13 = (int8x16_t)vmulq_f32(v10, a3[2]);
  v13.i32[3] = 0;
  *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
  float32x4_t v14 = vaddq_f32(v11, a3[3]);
  float32x4_t v15 = *(float32x4_t *)(a2 + 112);
  float32x4_t v16 = vmulq_f32(*a4, v15);
  int8x16_t v17 = (int8x16_t)vmulq_f32(v15, a4[1]);
  float32x4_t v18 = a4[3];
  int8x16_t v19 = (int8x16_t)vmulq_f32(v15, a4[2]);
  float32x4_t v20 = (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
  v19.i32[3] = 0;
  ++dword_1E9E48938;
  *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32(*(int32x2_t *)v20.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), 0);
  float32x4_t v21 = vsubq_f32(v14, vaddq_f32(v16, v18));
  v21.i32[3] = 0;
  float32x4_t v111 = v21;
  v116[0] = v21;
  uint64_t v22 = *(unsigned int *)(a1 + 44);
  if ((int)v22 < 1)
  {
    float v27 = 3.4028e38;
  }
  else
  {
    uint64_t v23 = 0;
    int v24 = dword_1E9E49960;
    int v25 = byte_1E9DDA469;
    uint64_t v26 = 48 * v22;
    float v27 = 3.4028e38;
    do
    {
      uint64_t v28 = *(void *)(a1 + 56) + v23;
      v21.i64[0] = *(void *)(v28 + 32);
      v21.i32[2] = *(_DWORD *)(v28 + 40);
      float32x4_t v29 = v21;
      v29.i32[3] = 0;
      int8x16_t v30 = (int8x16_t)vmulq_f32(v21, a3[2]);
      int8x16_t v31 = (int8x16_t)vmulq_f32(v29, *a3);
      float32x4_t v32 = vmulq_f32(v29, a3[1]);
      v30.i32[3] = 0;
      *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)));
      float32x4_t v33 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
      *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v33.f32), 0);
      int8x16_t v34 = (int8x16_t)vmulq_f32(v32, v111);
      *(float32x2_t *)v33.f32 = vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8);
      float32x4_t v35 = (float32x4_t)vextq_s8(v34, v34, 8uLL);
      *(float32x2_t *)v35.f32 = vadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v35.f32);
      v33.i64[0] = 0;
      float32x4_t v115 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v33, v35), 0), (int8x16_t)vnegq_f32(v32), (int8x16_t)v32);
      dword_1E9E49960 = ++v24;
      if (!v25 || sub_1B6DF4308(a3, a4, v116, &v115, (float *)a1, (float *)a2, v27))
      {
        ++dword_1E9E49964;
        float v114 = 0.0;
        uint64_t result = sub_1B6DF4C48(a1, a2, a3, a4, &v115, &v114, &v113, &v112);
        if (!result) {
          return result;
        }
        float v37 = v114;
        if (v114 < v27)
        {
          *a5 = v115;
          float v27 = v37;
        }
        int v24 = dword_1E9E49960;
        int v25 = byte_1E9DDA469;
      }
      v23 += 48;
    }
    while (v26 != v23);
  }
  uint64_t v38 = *(unsigned int *)(a2 + 44);
  if ((int)v38 >= 1)
  {
    uint64_t v39 = 0;
    int v40 = dword_1E9E49960;
    int v41 = byte_1E9DDA469;
    uint64_t v42 = 48 * v38;
    do
    {
      uint64_t v43 = *(void *)(a2 + 56) + v39;
      v21.i64[0] = *(void *)(v43 + 32);
      v21.i32[2] = *(_DWORD *)(v43 + 40);
      float32x4_t v44 = v21;
      v44.i32[3] = 0;
      int8x16_t v45 = (int8x16_t)vmulq_f32(v21, a4[2]);
      int8x16_t v46 = (int8x16_t)vmulq_f32(v44, *a4);
      float32x4_t v47 = vmulq_f32(v44, a4[1]);
      v45.i32[3] = 0;
      *(float32x2_t *)v47.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL)));
      float32x4_t v48 = (float32x4_t)vextq_s8(v45, v45, 8uLL);
      *(float32x2_t *)&v47.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v48.f32), 0);
      int8x16_t v49 = (int8x16_t)vmulq_f32(v47, v111);
      *(float32x2_t *)v48.f32 = vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8);
      float32x4_t v50 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
      *(float32x2_t *)v50.f32 = vadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v50.f32);
      v48.i64[0] = 0;
      float32x4_t v115 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v48, v50), 0), (int8x16_t)vnegq_f32(v47), (int8x16_t)v47);
      dword_1E9E49960 = ++v40;
      if (!v41 || sub_1B6DF4308(a3, a4, v116, &v115, (float *)a1, (float *)a2, v27))
      {
        ++dword_1E9E49964;
        float v114 = 0.0;
        uint64_t result = sub_1B6DF4C48(a1, a2, a3, a4, &v115, &v114, &v113, &v112);
        if (!result) {
          return result;
        }
        float v51 = v114;
        if (v114 < v27)
        {
          *a5 = v115;
          float v27 = v51;
        }
        int v40 = dword_1E9E49960;
        int v41 = byte_1E9DDA469;
      }
      v39 += 48;
    }
    while (v42 != v39);
  }
  int v52 = *(_DWORD *)(a1 + 76);
  if (v52 >= 1)
  {
    uint64_t v53 = 0;
    int v54 = *(_DWORD *)(a2 + 76);
    int v105 = -1;
    int v106 = -1;
    do
    {
      if (v54 >= 1)
      {
        uint64_t v55 = 0;
        float32x4_t v56 = *(float32x4_t *)(*(void *)(a1 + 88) + 16 * v53);
        int8x16_t v57 = (int8x16_t)vmulq_f32(v56, *a3);
        int8x16_t v58 = (int8x16_t)vmulq_f32(v56, a3[1]);
        int8x16_t v59 = (int8x16_t)vmulq_f32(v56, a3[2]);
        v59.i32[3] = 0;
        *(float32x2_t *)v57.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
        *(float32x2_t *)v59.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
        *(int8x8_t *)v58.i8 = vext_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v59.i8, 4uLL);
        v58.i64[1] = v57.i64[0];
        float32x4_t v108 = (float32x4_t)v58;
        v57.i64[1] = v59.i64[0];
        float32x4_t v110 = (float32x4_t)v57;
        do
        {
          float32x4_t v60 = *(float32x4_t *)(*(void *)(a2 + 88) + 16 * v55);
          float32x4_t v61 = vmulq_f32(v60, *a4);
          float32x4_t v62 = vmulq_f32(v60, a4[1]);
          int8x16_t v63 = (int8x16_t)vmulq_f32(v60, a4[2]);
          float32x4_t v20 = (float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL);
          v63.i32[3] = 0;
          *(float32x2_t *)v64.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), *(int32x2_t *)v20.f32));
          *(float32x2_t *)v63.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
          *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v64.f32, *(int8x8_t *)v63.i8, 4uLL);
          v61.i64[1] = v64.i64[0];
          v64.i64[1] = v63.i64[0];
          int8x16_t v65 = (int8x16_t)vsubq_f32(vmulq_f32(v110, v61), vmulq_f32(v108, v64));
          v66.i64[0] = vextq_s8(v65, v65, 4uLL).u64[0];
          v66.i64[1] = v65.u32[0];
          if (fabsf(*(float *)&v65.i32[1]) > 0.000001
            || fabsf(v66.f32[1]) > 0.000001
            || fabsf(*(float *)v65.i32) > 0.000001)
          {
            float32x4_t v109 = v64;
            int8x16_t v67 = (int8x16_t)vmulq_f32(v66, v66);
            float32x4_t v68 = vmulq_n_f32(v66, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)).f32[0]));
            int8x16_t v69 = (int8x16_t)vmulq_f32(v68, v111);
            *(float32x2_t *)v62.f32 = vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8);
            float32x4_t v70 = (float32x4_t)vextq_s8(v69, v69, 8uLL);
            *(float32x2_t *)v70.f32 = vadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v70.f32);
            v62.i64[0] = 0;
            float32x4_t v115 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v62, v70), 0), (int8x16_t)vnegq_f32(v68), (int8x16_t)v68);
            ++dword_1E9E49960;
            if (!byte_1E9DDA469 || sub_1B6DF4308(a3, a4, v116, &v115, (float *)a1, (float *)a2, v27))
            {
              ++dword_1E9E49964;
              float v114 = 0.0;
              uint64_t result = sub_1B6DF4C48(a1, a2, a3, a4, &v115, &v114, &v113, &v112);
              if (!result) {
                return result;
              }
              float v71 = v114;
              if (v114 < v27)
              {
                *a5 = v115;
                float32x4_t v103 = v109;
                float32x4_t v104 = v112;
                float32x4_t v101 = v113;
                float32x4_t v102 = v110;
                int v105 = v55;
                int v106 = v53;
                float v27 = v71;
              }
              int v54 = *(_DWORD *)(a2 + 76);
            }
          }
          ++v55;
        }
        while (v55 < v54);
        int v52 = *(_DWORD *)(a1 + 76);
      }
      ++v53;
    }
    while (v53 < v52);
    if ((v106 & 0x80000000) == 0 && (v105 & 0x80000000) == 0)
    {
      float32x4_t v72 = vsubq_f32(v104, v101);
      v72.i32[3] = 0;
      int8x16_t v73 = (int8x16_t)vmulq_f32(v103, v102);
      LODWORD(_S1) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL), vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8)).u32[0];
      int8x16_t v75 = (int8x16_t)vmulq_f32(v102, v72);
      LODWORD(v76) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL), vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8)).u32[0];
      int8x16_t v77 = (int8x16_t)vmulq_f32(v103, v72);
      __asm { FMLS            S5, S1, V1.S[0] }
      float v83 = -vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8)).f32[0];
      float v84 = 0.0;
      if (_S5 != 0.0)
      {
        float v85 = (float)(v76 + (float)(v83 * _S1)) / _S5;
        float v84 = -1.0e30;
        if (v85 >= -1.0e30)
        {
          float v84 = v85;
          if (v85 > 1.0e30) {
            float v84 = 1.0e30;
          }
        }
      }
      float v86 = v83 + (float)(v84 * _S1);
      if (v86 >= -1.0e30)
      {
        if (v86 > 1.0e30)
        {
          float v88 = v76 + (float)(_S1 * 1.0e30);
          float v84 = -1.0e30;
          float v86 = 1.0e30;
          if (v88 >= -1.0e30)
          {
            float v86 = 1.0e30;
            float v84 = v88;
            if (v88 > 1.0e30)
            {
              float v84 = 1.0e30;
              float v86 = 1.0e30;
            }
          }
        }
      }
      else
      {
        float v86 = -1.0e30;
        float v87 = v76 + (float)(_S1 * -1.0e30);
        if (v87 >= -1.0e30)
        {
          float v84 = 1.0e30;
          if (v87 <= 1.0e30) {
            float v84 = v87;
          }
        }
        else
        {
          float v84 = -1.0e30;
        }
      }
      float32x4_t v89 = vmulq_n_f32(v103, v86);
      v89.i32[3] = 0;
      float32x4_t v90 = vsubq_f32(v72, vmulq_n_f32(v102, v84));
      v90.i32[3] = 0;
      float32x4_t v91 = vaddq_f32(v89, v90);
      int8x16_t v92 = (int8x16_t)vmulq_f32(v91, v91);
      float v93 = vadd_f32(vpadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)).f32[0];
      if (v93 > 0.00000011921)
      {
        float v94 = sqrtf(v93);
        float32x4_t v95 = vmulq_n_f32(v91, 1.0 / v94);
        int8x16_t v96 = (int8x16_t)vmulq_f32(v95, v111);
        *(float32x2_t *)v20.f32 = vpadd_f32(*(float32x2_t *)v96.i8, *(float32x2_t *)v96.i8);
        float32x4_t v97 = (float32x4_t)vextq_s8(v96, v96, 8uLL);
        *(float32x2_t *)v97.f32 = vadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v20.f32);
        v20.i64[0] = 0;
        float32x4_t v115 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v20, v97), 0), (int8x16_t)vnegq_f32(v95), (int8x16_t)v95);
        float32x4_t v113 = vaddq_f32(v104, v89);
        (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float))(*(void *)a6 + 32))(a6, &v115, &v113, -v94);
      }
    }
  }
  int8x16_t v98 = (int8x16_t)vmulq_f32(*a5, v111);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL)).f32[0] < 0.0)
  {
    v99.i64[0] = 0x8000000080000000;
    v99.i64[1] = 0x8000000080000000;
    *(int8x16_t *)a5 = veorq_s8(*(int8x16_t *)a5, v99);
  }
  return 1;
}

uint64_t sub_1B6DF4C48(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float *a6, float32x4_t *a7, float32x4_t *a8)
{
  uint64_t v25 = 0;
  float v24 = 0.0;
  float v23 = 0.0;
  sub_1B6DE77AC(a1, a3, a5, (float *)&v25 + 1, (float *)&v25, &v22, &v21);
  sub_1B6DE77AC(a2, a4, a5, &v24, &v23, &v20, &v19);
  uint64_t result = 0;
  if (*(float *)&v25 >= v24)
  {
    if (v23 >= *((float *)&v25 + 1))
    {
      float v15 = *(float *)&v25 - v24;
      BOOL v16 = (float)(*(float *)&v25 - v24) < (float)(v23 - *((float *)&v25 + 1));
      if ((float)(*(float *)&v25 - v24) >= (float)(v23 - *((float *)&v25 + 1))) {
        float v15 = v23 - *((float *)&v25 + 1);
      }
      *a6 = v15;
      int8x16_t v17 = &v22;
      if (v16) {
        int8x16_t v17 = &v21;
      }
      *a7 = *v17;
      float32x4_t v18 = &v19;
      if (v16) {
        float32x4_t v18 = &v20;
      }
      *a8 = *v18;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1B6DF4D44(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, float a6, float a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v15 = a4;
  char v84 = 1;
  uint64_t v83 = 0;
  int v81 = 0;
  int v82 = 0;
  uint64_t v19 = *(unsigned int *)(a4 + 4);
  if ((int)v19 >= 1)
  {
    char v84 = 1;
    uint64_t v83 = sub_1B6E073B8(16 * v19, 16);
    int v82 = v19;
  }
  uint64_t v20 = *(unsigned int *)(a2 + 44);
  if ((int)v20 >= 1)
  {
    uint64_t v21 = 0;
    float32x4_t v22 = *a3;
    float v23 = (unsigned __int32 *)(*(void *)(a2 + 56) + 40);
    unsigned int v24 = -1;
    float v25 = 3.4028e38;
    do
    {
      a12.i64[0] = *((void *)v23 - 1);
      a12.i32[2] = *v23;
      int8x16_t v26 = (int8x16_t)vmulq_f32(a12, a3[2]);
      a12.i32[3] = 0;
      int8x16_t v27 = (int8x16_t)vmulq_f32(v22, a12);
      float32x4_t v28 = vmulq_f32(a12, a3[1]);
      v26.i32[3] = 0;
      *(float32x2_t *)v28.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v28.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL)));
      *(float32x2_t *)&v28.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
      int8x16_t v29 = (int8x16_t)vmulq_f32(v28, *a1);
      *(float32x2_t *)v26.i8 = vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8);
      a12 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
      a12.f32[0] = vadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)a12.f32).f32[0];
      if (a12.f32[0] < v25)
      {
        float v25 = a12.f32[0];
        unsigned int v24 = v21;
      }
      ++v21;
      v23 += 12;
    }
    while (v20 != v21);
    if ((v24 & 0x80000000) == 0)
    {
      int8x16_t v74 = a1;
      uint64_t v75 = a5;
      uint64_t v30 = *(void *)(a2 + 56);
      uint64_t v31 = v30 + 48 * v24;
      uint64_t v32 = *(unsigned int *)(v31 + 4);
      uint64_t v73 = v30;
      if ((int)v32 < 1)
      {
        uint64_t v52 = v15;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = v30 + 48 * v24;
        float v76 = (uint64_t *)(v34 + 32);
        uint64_t v77 = a2;
        float32x4_t v35 = (__int32 *)(v34 + 40);
        float v36 = &v80;
        do
        {
          uint64_t v37 = *(void *)(v31 + 16);
          uint64_t v38 = *(void *)(v77 + 24);
          if (v32 - 1 == v33) {
            uint64_t v39 = 0;
          }
          else {
            uint64_t v39 = v33 + 1;
          }
          float32x4_t v40 = *(float32x4_t *)(v38 + 16 * *(int *)(v37 + 4 * v33));
          float32x4_t v41 = vsubq_f32(v40, *(float32x4_t *)(v38 + 16 * *(int *)(v37 + 4 * v39)));
          float32x4_t v42 = v41;
          v42.i32[3] = 0;
          float32x4_t v43 = a3[2];
          int8x16_t v44 = (int8x16_t)vmulq_f32(v43, v41);
          float32x4_t v45 = a3[1];
          int8x16_t v46 = (int8x16_t)vmulq_f32(*a3, v42);
          int8x16_t v47 = (int8x16_t)vmulq_f32(v45, v42);
          v44.i32[3] = 0;
          *(float32x2_t *)v47.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)));
          float32x4_t v48 = (float32x4_t)vextq_s8(v44, v44, 8uLL);
          *(float32x2_t *)v44.i8 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v48.f32);
          v48.i64[0] = *v76;
          v48.i32[2] = *v35;
          int8x16_t v49 = (int8x16_t)vmulq_f32(v43, v48);
          v48.i32[3] = 0;
          int8x16_t v50 = (int8x16_t)vmulq_f32(*a3, v48);
          int8x16_t v51 = (int8x16_t)vmulq_f32(v45, v48);
          uint64_t v52 = (uint64_t)v36;
          *(float32x2_t *)v44.i8 = vpadd_f32(*(float32x2_t *)v44.i8, 0);
          v49.i32[3] = 0;
          *(float32x2_t *)v51.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v51.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
          *(float32x2_t *)v49.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)), 0);
          *(int8x8_t *)v50.i8 = vext_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v44.i8, 4uLL);
          *(float32x2_t *)v44.i8 = vmul_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v51.i8);
          *(float32x2_t *)v51.i8 = vsub_f32(vmul_f32(*(float32x2_t *)v47.i8, (float32x2_t)vext_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v49.i8, 4uLL)), vmul_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v51.i8));
          *(int8x8_t *)v47.i8 = vext_s8(*(int8x8_t *)v51.i8, (int8x8_t)vsub_f32(*(float32x2_t *)v44.i8, vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v49.i8)), 4uLL);
          v47.i64[1] = v51.u32[0];
          float v36 = (char *)v15;
          v44.i64[0] = 0x8000000080000000;
          v44.i64[1] = 0x8000000080000000;
          float32x4_t v53 = (float32x4_t)veorq_s8(v47, v44);
          int8x16_t v54 = (int8x16_t)vmulq_f32(v40, *a3);
          int8x16_t v55 = (int8x16_t)vmulq_f32(v40, v45);
          int8x16_t v56 = (int8x16_t)vmulq_f32(v40, v43);
          v56.i32[3] = 0;
          *(float32x2_t *)v43.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v55.i8));
          *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), 0);
          int8x16_t v57 = (int8x16_t)vmulq_f32(vaddq_f32(v43, a3[3]), v53);
          float32x4_t v79 = v53;
          sub_1B6DF3F98(v15, v52, &v79, -vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0]);
          if ((*(_DWORD *)(v15 + 4) & 0x80000000) != 0 && (*(_DWORD *)(v15 + 8) & 0x80000000) != 0)
          {
            uint64_t v58 = *(void *)(v15 + 16);
            if (v58 && *(unsigned char *)(v15 + 24)) {
              sub_1B6E073C4(v58);
            }
            *(unsigned char *)(v15 + 24) = 1;
            *(void *)(v15 + 16) = 0;
            *(_DWORD *)(v15 + 8) = 0;
          }
          ++v33;
          *(_DWORD *)(v15 + 4) = 0;
          uint64_t v15 = v52;
        }
        while (v32 != v33);
      }
      int v59 = *(_DWORD *)(v52 + 4);
      if (v59 >= 1)
      {
        uint64_t v60 = 0;
        uint64_t v61 = v73 + 48 * v24;
        v22.i64[0] = *(void *)(v61 + 32);
        v22.i32[2] = *(_DWORD *)(v61 + 40);
        float32x4_t v62 = v22;
        v62.i32[3] = 0;
        int8x16_t v63 = (int8x16_t)vmulq_f32(v22, a3[2]);
        int8x16_t v64 = (int8x16_t)vmulq_f32(v62, *a3);
        int8x16_t v65 = (int8x16_t)vmulq_f32(v62, a3[1]);
        v63.i32[3] = 0;
        *(float32x2_t *)v66.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v65.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)));
        *(float32x2_t *)&v66.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
        int8x16_t v67 = (int8x16_t)vmulq_f32(v66, a3[3]);
        float v68 = *(float *)(v61 + 44)
            - vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL)).f32[0];
        float32x4_t v78 = v66;
        do
        {
          uint64_t v69 = *(void *)(v52 + 16);
          int8x16_t v70 = (int8x16_t)vmulq_f32(v66, *(float32x4_t *)(v69 + 16 * v60));
          float v71 = v68
              + vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
          if (v71 <= a6) {
            float v71 = a6;
          }
          if (v71 <= a7)
          {
            float32x4_t v79 = *(float32x4_t *)(v69 + 16 * v60);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(*(void *)v75 + 32))(v75, v74, &v79);
            float32x4_t v66 = v78;
            int v59 = *(_DWORD *)(v52 + 4);
          }
          ++v60;
        }
        while (v60 < v59);
      }
    }
  }
  if (v83) {
    BOOL v72 = v84 == 0;
  }
  else {
    BOOL v72 = 1;
  }
  if (!v72) {
    sub_1B6E073C4(v83);
  }
}

void sub_1B6DF5184(float32x4_t *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6, float a7, float a8, double a9, float32x4_t a10, double a11, float32x4_t a12, float32x4_t a13)
{
  int8x16_t v17 = (int8x16_t)vmulq_f32(*a1, *a1);
  *(float32x2_t *)v18.f32 = vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8);
  *(float *)v17.i32 = sqrtf(vadd_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)).f32[0]);
  v18.i32[0] = 1.0;
  float32x4_t v19 = vmulq_n_f32(*a1, 1.0 / *(float *)v17.i32);
  v59[0] = v19;
  uint64_t v20 = *(unsigned int *)(a3 + 44);
  uint64_t v21 = *(void *)(a3 + 56);
  if ((int)v20 < 1)
  {
    int v24 = -1;
  }
  else
  {
    uint64_t v22 = 0;
    float32x4_t v18 = a5[1];
    a10 = a5[2];
    float v23 = (unsigned __int32 *)(v21 + 40);
    int v24 = -1;
    LODWORD(a11) = -8388609;
    a12.i64[0] = 0;
    do
    {
      a13.i64[0] = *((void *)v23 - 1);
      a13.i32[2] = *v23;
      int8x16_t v25 = (int8x16_t)vmulq_f32(a13, a10);
      a13.i32[3] = 0;
      int8x16_t v26 = (int8x16_t)vmulq_f32(*a5, a13);
      float32x4_t v27 = vmulq_f32(a13, v18);
      v25.i32[3] = 0;
      *(float32x2_t *)v27.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v27.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)));
      *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
      int8x16_t v28 = (int8x16_t)vmulq_f32(v19, v27);
      *(float32x2_t *)v25.i8 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
      a13 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
      *(float32x2_t *)a13.f32 = vadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)a13.f32);
      if (a13.f32[0] > *(float *)&a11)
      {
        *(float *)&a11 = a13.f32[0];
        int v24 = v22;
      }
      ++v22;
      v23 += 12;
    }
    while (v20 != v22);
  }
  char v58 = 1;
  uint64_t v57 = 0;
  int v55 = 0;
  int v56 = 0;
  uint64_t v29 = v21 + 48 * v24;
  uint64_t v30 = *(unsigned int *)(v29 + 4);
  if ((int)v30 >= 1)
  {
    uint64_t v31 = 0;
    int v32 = 0;
    uint64_t v33 = 0;
    while (1)
    {
      float32x4_t v34 = *(float32x4_t *)(*(void *)(a3 + 24) + 16 * *(int *)(*(void *)(v29 + 16) + 4 * v31));
      float32x4_t v35 = *a5;
      float32x4_t v36 = a5[1];
      a10 = a5[2];
      a12 = a5[3];
      if (v32 != v31) {
        goto LABEL_24;
      }
      int v37 = v31 ? 2 * v32 : 1;
      if (v32 >= v37) {
        goto LABEL_24;
      }
      float32x4_t v52 = *(float32x4_t *)(*(void *)(a3 + 24) + 16 * *(int *)(*(void *)(v29 + 16) + 4 * v31));
      float32x4_t v53 = a5[3];
      float32x4_t v50 = a5[2];
      float32x4_t v51 = a5[1];
      float32x4_t v49 = *a5;
      if (v37)
      {
        uint64_t v38 = sub_1B6E073B8(16 * v37, 16);
        if (v31) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v38 = 0;
        if (v31)
        {
LABEL_17:
          uint64_t v39 = v32;
          float32x4_t v40 = (_OWORD *)v38;
          float32x4_t v41 = (long long *)v33;
          do
          {
            long long v42 = *v41++;
            *v40++ = v42;
            --v39;
          }
          while (v39);
LABEL_22:
          sub_1B6E073C4(v33);
          goto LABEL_23;
        }
      }
      if (v33) {
        goto LABEL_22;
      }
LABEL_23:
      uint64_t v33 = v38;
      int v32 = v37;
      float32x4_t v34 = v52;
      a12 = v53;
      a10 = v50;
      float32x4_t v36 = v51;
      float32x4_t v35 = v49;
LABEL_24:
      float32x4_t v43 = vmulq_f32(v35, v34);
      int8x16_t v44 = (int8x16_t)vmulq_f32(v34, v36);
      float32x4_t v18 = vmulq_f32(v34, a10);
      *(void *)&a11 = vextq_s8(v44, v44, 8uLL).u64[0];
      *(int32x2_t *)a10.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), *(int32x2_t *)&a11);
      v18.i32[3] = 0;
      *(float32x2_t *)v43.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8), *(float32x2_t *)a10.f32);
      *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), 0);
      *(float32x4_t *)(v33 + 16 * v31++) = vaddq_f32(v43, a12);
      if (v31 == v30) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v33 = 0;
  int v32 = 0;
  LODWORD(v31) = 0;
LABEL_27:
  int v55 = v31;
  int v56 = v32;
  uint64_t v57 = v33;
  char v58 = 1;
  if (v24 < 0)
  {
    BOOL v45 = 0;
    if (!v33) {
      return;
    }
  }
  else
  {
    sub_1B6DF4D44(v59, a2, a4, (uint64_t)v54, a6, a7, a8, *(double *)v18.i64, *(double *)a10.i64, a11, *(double *)a12.i64, a13);
    uint64_t v33 = v57;
    BOOL v45 = v58 == 0;
    if (!v57) {
      return;
    }
  }
  if (!v45) {
    sub_1B6E073C4(v33);
  }
}

__n128 sub_1B6DF5444(uint64_t a1, _OWORD *a2, __n128 *a3, int a4)
{
  *(void *)a1 = &unk_1F0FB2330;
  *(_OWORD *)(a1 + 16) = *a2;
  __n128 result = *a3;
  *(__n128 *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = *a3;
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 5sub_1B6DC4968((unsigned int *)this + 2) = 1065353216;
  return result;
}

void sub_1B6DF547C(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2 = a2[1];
  float32x4_t v3 = vsubq_f32(v2, *a2);
  int8x8_t v4 = (int8x8_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  v3.i32[3] = 0;
  float32x4_t v5 = a2[2];
  float32x4_t v6 = vsubq_f32(v5, *a2);
  int8x8_t v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  *(int8x8_t *)v8.f32 = vext_s8(*(int8x8_t *)v3.f32, v4, 4uLL);
  v8.i64[1] = v3.i64[0];
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v9.i64[1] = v6.i64[0];
  int8x16_t v10 = (int8x16_t)vsubq_f32(vmulq_f32(v9, v3), vmulq_f32(v8, v6));
  v11.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
  v11.i64[1] = v10.u32[0];
  int8x16_t v12 = (int8x16_t)vmulq_f32(*a2, v11);
  *(float32x2_t *)v12.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  float32x4_t v13 = a1[1];
  float32x4_t v14 = a1[2];
  int8x16_t v15 = (int8x16_t)vmulq_f32(v13, v11);
  float32x2_t v16 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), *(float32x2_t *)v12.i8);
  int8x16_t v17 = (int8x16_t)vmulq_f32(v14, v11);
  float32x2_t v18 = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), *(float32x2_t *)v12.i8);
  if (vmul_f32(v16, v18).f32[0] < 0.0)
  {
    __int32 v20 = a1[3].i32[0];
    if (v16.f32[0] > 0.0 || (a1[3].i32[0] & 1) == 0)
    {
      float v22 = vdiv_f32(v16, vsub_f32(v16, v18)).f32[0];
      if (v22 < a1[3].f32[1])
      {
        int8x16_t v23 = (int8x16_t)vmulq_f32(v11, v11);
        float v24 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)).f32[0];
        float32x4_t v25 = vaddq_f32(v13, vmulq_n_f32(vsubq_f32(v14, v13), v22));
        float32x4_t v27 = vsubq_f32(*a2, v25);
        int8x8_t v26 = (int8x8_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
        v27.i32[3] = 0;
        float32x4_t v29 = vsubq_f32(v2, v25);
        int8x8_t v28 = (int8x8_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
        v29.i32[3] = 0;
        *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v27.f32, v26, 4uLL);
        v30.i64[1] = v27.i64[0];
        *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)v29.f32, v28, 4uLL);
        v31.i64[1] = v29.i64[0];
        int8x16_t v32 = (int8x16_t)vsubq_f32(vmulq_f32(v31, v27), vmulq_f32(v30, v29));
        v33.i64[0] = vextq_s8(v32, v32, 4uLL).u64[0];
        v33.i64[1] = v32.u32[0];
        float v34 = -0.0001 * v24;
        int8x16_t v35 = (int8x16_t)vmulq_f32(v11, v33);
        if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0] >= (float)(-0.0001 * v24))
        {
          float32x4_t v36 = vsubq_f32(v5, v25);
          int8x8_t v37 = (int8x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
          v36.i32[3] = 0;
          *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v36.f32, v37, 4uLL);
          v38.i64[1] = v36.i64[0];
          int8x16_t v39 = (int8x16_t)vsubq_f32(vmulq_f32(v38, v29), vmulq_f32(v31, v36));
          v40.i64[0] = vextq_s8(v39, v39, 4uLL).u64[0];
          v40.i64[1] = v39.u32[0];
          int8x16_t v41 = (int8x16_t)vmulq_f32(v11, v40);
          int8x16_t v42 = (int8x16_t)vsubq_f32(vmulq_f32(v30, v36), vmulq_f32(v38, v27));
          v43.i64[0] = vextq_s8(v42, v42, 4uLL).u64[0];
          v43.i64[1] = v42.u32[0];
          int8x16_t v44 = (int8x16_t)vmulq_f32(v11, v43);
          LODWORD(v45) = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8)).u32[0];
          if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8)).f32[0] >= v34&& v45 >= v34)
          {
            int8x16_t v47 = (int8x16_t)vmulq_n_f32(v11, 1.0 / sqrtf(v24));
            int8x16_t v53 = v47;
            int v48 = v20 & 2;
            if (v16.f32[0] <= 0.0 && v48 == 0)
            {
              v51.i64[0] = 0x8000000080000000;
              v51.i64[1] = 0x8000000080000000;
              int8x16_t v52 = veorq_s8(v47, v51);
              float v50 = (*(float (**)(float32x4_t *, int8x16_t *))(a1->i64[0] + 24))(a1, &v52);
            }
            else
            {
              float v50 = (*(float (**)(float32x4_t *, int8x16_t *))(a1->i64[0] + 24))(a1, &v53);
            }
            a1[3].f32[1] = v50;
          }
        }
      }
    }
  }
}

uint64_t sub_1B6DF56CC(uint64_t result, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, float a6)
{
  *(void *)__n128 result = &unk_1F0FB2598;
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 16) = *a3;
  *(_OWORD *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = a3[1];
  *(_OWORD *)(result + 48) = a3[2];
  *(_OWORD *)(result + 64) = a3[3];
  *(_OWORD *)(result + 80) = *a4;
  *(_OWORD *)(result + 96) = a4[1];
  *(_OWORD *)(result + 11sub_1B6DC4968((unsigned int *)this + 2) = a4[2];
  *(_OWORD *)(result + sub_1B6DC7B98((uint64_t)this + 128) = a4[3];
  *(_OWORD *)(result + 144) = *a5;
  *(_OWORD *)(result + 160) = a5[1];
  *(_OWORD *)(result + 176) = a5[2];
  *(_OWORD *)(result + 19sub_1B6DC4968((unsigned int *)this + 2) = a5[3];
  *(_DWORD *)(result + 208) = 1065353216;
  *(float *)(result + 21sub_1B6DC4968((unsigned int *)this + 2) = a6;
  *(_DWORD *)(result + 216) = 0;
  return result;
}

double sub_1B6DF575C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  sub_1B6DEA398((uint64_t)&v23);
  int8x16_t v23 = &unk_1F0FB0E08;
  int v24 = 1;
  long long v8 = a2[1];
  long long v26 = *a2;
  long long v27 = v8;
  long long v28 = a2[2];
  int v25 = *(_DWORD *)(a1 + 212);
  int v21 = 953267991;
  char v22 = 0;
  float32x4_t v13 = &unk_1F0FB2600;
  sub_1B6DEECEC(v12, *(void *)(a1 + 8), (uint64_t)&v23, (uint64_t)v20, (uint64_t)&v13);
  float32x4_t v14 = &unk_1F0FB2B98;
  uint64_t v18 = 0;
  float v17 = 1.0;
  int v19 = *(_DWORD *)(a1 + 216);
  if (sub_1B6DEF174((uint64_t)v12, a1 + 16, a1 + 80, a1 + 144, a1 + 144, (uint64_t)&v14))
  {
    int8x16_t v9 = (int8x16_t)vmulq_f32(v15, v15);
    float v10 = vadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)).f32[0];
    if (v10 > 0.0001 && v17 < *(float *)(a1 + 208))
    {
      float32x4_t v15 = vmulq_n_f32(v15, 1.0 / sqrtf(v10));
      (*(void (**)(uint64_t, float32x4_t *, uint64_t *, uint64_t, uint64_t, float))(*(void *)a1 + 24))(a1, &v15, &v16, a3, a4, v17);
    }
  }
  nullsub_1(v12);
  return sub_1B6DEA3D0(&v23);
}

void *sub_1B6DF594C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *__n128 result = &unk_1F0FB1BB0;
  result[1] = a4;
  result[2] = a2;
  result[3] = a3;
  return result;
}

uint64_t sub_1B6DF5970(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6)
{
  sub_1B6DF5FFC(a1[1]);
  float32x4_t v75 = a2[3];
  float32x4_t v73 = a4[2];
  float32x4_t v74 = a4[3];
  float32x4_t v12 = *a2;
  float32x4_t v13 = a2[1];
  int8x16_t v14 = (int8x16_t)vsubq_f32(vsubq_f32(a3[3], v75), vsubq_f32(a5[3], v74));
  v14.i32[3] = 0;
  float32x4_t v64 = (float32x4_t)v14;
  float32x4_t v71 = a4[1];
  float32x4_t v72 = *a4;
  uint64_t v15 = a1[2];
  v16.i64[0] = 0x8000000080000000;
  v16.i64[1] = 0x8000000080000000;
  float32x4_t v17 = (float32x4_t)veorq_s8(v14, v16);
  float32x4_t v68 = v13;
  float32x4_t v69 = *a2;
  v12.i32[3] = 0;
  v13.i32[3] = 0;
  float32x4_t v70 = a2[2];
  float32x4_t v18 = v70;
  v18.i32[3] = 0;
  float32x4_t v66 = v13;
  float32x4_t v67 = v12;
  float32x4_t v65 = v18;
  float32x4_t v80 = vaddq_f32(vaddq_f32(vmulq_n_f32(v12, v17.f32[0]), vmulq_lane_f32(v13, *(float32x2_t *)v17.f32, 1)), vmulq_laneq_f32(v18, v17, 2));
  (*(void (**)(float32x4_t *__return_ptr))(*(void *)v15 + 128))(&v82);
  float32x4_t v19 = vmulq_f32(*a2, v82);
  int8x16_t v20 = (int8x16_t)vmulq_f32(v82, a2[1]);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v82, a2[2]);
  v21.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
  float32x4_t v81 = vaddq_f32(v19, a2[3]);
  uint64_t v22 = a1[3];
  float32x4_t v23 = *a4;
  float32x4_t v24 = a4[1];
  v23.i32[3] = 0;
  v24.i32[3] = 0;
  float32x4_t v25 = a4[2];
  v25.i32[3] = 0;
  float32x4_t v79 = vaddq_f32(vaddq_f32(vmulq_n_f32(v23, v64.f32[0]), vmulq_lane_f32(v24, *(float32x2_t *)v64.f32, 1)), vmulq_laneq_f32(v25, v64, 2));
  (*(void (**)(float32x4_t *__return_ptr))(*(void *)v22 + 128))(&v82);
  float32x4_t v26 = vmulq_f32(*a4, v82);
  int8x16_t v27 = (int8x16_t)vmulq_f32(v82, a4[1]);
  int8x16_t v28 = (int8x16_t)vmulq_f32(v82, a4[2]);
  v28.i32[3] = 0;
  *(float32x2_t *)v26.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v27.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)));
  *(float32x2_t *)&v26.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0);
  float32x4_t v80 = vaddq_f32(v26, a4[3]);
  float32x4_t v29 = vsubq_f32(v81, v80);
  v29.i32[3] = 0;
  float32x4_t v82 = v29;
  int8x16_t v30 = (int8x16_t)vmulq_f32(v29, v29);
  LODWORD(v76) = 0;
  float32x4_t v60 = 0u;
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).f32[0] > 0.0001)
  {
    float32x4_t v31 = v72;
    v31.i32[3] = 0;
    float32x4_t v63 = v31;
    float32x4_t v32 = v71;
    v32.i32[3] = 0;
    float32x4_t v62 = v32;
    float32x4_t v33 = v73;
    v33.i32[3] = 0;
    float32x4_t v61 = v33;
    float32x4_t v60 = 0u;
    long long v76 = 0u;
    int v34 = -33;
    do
    {
      if (__CFADD__(v34++, 1)) {
        break;
      }
      uint64_t v36 = a1[2];
      v37.i64[0] = 0x8000000080000000;
      v37.i64[1] = 0x8000000080000000;
      float32x4_t v38 = (float32x4_t)veorq_s8((int8x16_t)v82, v37);
      __n128 v77 = (__n128)vaddq_f32(vmulq_laneq_f32(v65, v38, 2), vaddq_f32(vmulq_n_f32(v67, v38.f32[0]), vmulq_lane_f32(v66, *(float32x2_t *)v38.f32, 1)));
      (*(void (**)(float32x4_t *__return_ptr))(*(void *)v36 + 128))(&v78);
      float32x4_t v39 = vmulq_f32(v69, v78);
      int8x16_t v40 = (int8x16_t)vmulq_f32(v68, v78);
      int8x16_t v41 = (int8x16_t)vmulq_f32(v70, v78);
      v41.i32[3] = 0;
      *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
      *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
      float32x4_t v81 = vaddq_f32(v75, v39);
      uint64_t v42 = a1[3];
      __n128 v77 = (__n128)vaddq_f32(vmulq_laneq_f32(v61, v82, 2), vaddq_f32(vmulq_n_f32(v63, v82.f32[0]), vmulq_lane_f32(v62, *(float32x2_t *)v82.f32, 1)));
      (*(void (**)(float32x4_t *__return_ptr))(*(void *)v42 + 128))(&v78);
      float32x4_t v43 = vmulq_f32(v72, v78);
      int8x16_t v44 = (int8x16_t)vmulq_f32(v71, v78);
      int8x16_t v45 = (int8x16_t)vmulq_f32(v73, v78);
      v45.i32[3] = 0;
      *(float32x2_t *)v43.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)));
      *(float32x2_t *)&v43.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), 0);
      float32x4_t v46 = vaddq_f32(v74, v43);
      float32x4_t v47 = vsubq_f32(v81, v46);
      v47.i32[3] = 0;
      float32x4_t v79 = v47;
      float32x4_t v80 = v46;
      if (*(float *)&v76 > 1.0) {
        return 0;
      }
      int8x16_t v48 = (int8x16_t)vmulq_f32(v82, v47);
      float32x2_t v49 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
      if (v49.f32[0] > 0.0)
      {
        int8x16_t v50 = (int8x16_t)vmulq_f32(v82, v64);
        float32x2_t v51 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8));
        if (v51.f32[0] >= -1.4211e-14) {
          return 0;
        }
        long long v52 = v76;
        *(float *)&long long v52 = *(float *)&v76 - vdiv_f32(v49, v51).f32[0];
        float32x4_t v75 = vaddq_f32(a2[3], vmulq_n_f32(vsubq_f32(a3[3], a2[3]), *(float *)&v52));
        long long v76 = v52;
        float32x4_t v74 = vaddq_f32(a4[3], vmulq_n_f32(vsubq_f32(a5[3], a4[3]), *(float *)&v52));
        float32x4_t v60 = v82;
      }
      if ((sub_1B6DF6B6C((float *)a1[1], &v79) & 1) == 0) {
        sub_1B6DF6038((int *)a1[1], &v79, &v81, (__n128 *)&v80);
      }
      sub_1B6DF6B3C((__n128 *)a1[1], (__n128 *)&v82);
      if (!v53) {
        break;
      }
      int8x16_t v54 = (int8x16_t)vmulq_f32(v82, v82);
    }
    while (vadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)).f32[0] > 0.0001);
  }
  *(_DWORD *)(a6 + 176) = v76;
  int8x16_t v55 = (int8x16_t)vmulq_f32(v60, v60);
  float v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).f32[0];
  float32x4_t v57 = 0uLL;
  if (v56 >= 1.4211e-14) {
    float32x4_t v57 = vmulq_n_f32(v60, 1.0 / sqrtf(v56));
  }
  *(float32x4_t *)(a6 + 144) = v57;
  int8x16_t v58 = (int8x16_t)vmulq_f32(v57, v64);
  if (vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0] >= (float)-*(float *)(a6 + 192))return 0; {
  sub_1B6DF6C10(a1[1], &v78, &v77);
  }
  *(__n128 *)(a6 + 160) = v77;
  return 1;
}

void sub_1B6DF5ED4(uint64_t a1)
{
  nullsub_1(a1);

  JUMPOUT(0x1BA9B6D80);
}

__n128 sub_1B6DF5F0C(uint64_t a1, unsigned char *a2)
{
  unsigned int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 4)
  {
    if ((*a2 & 8) == 0)
    {
      *(_DWORD *)a1 = --v2;
      uint64_t v3 = a1 + 16 * v2;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(v3 + 16);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(v3 + 96);
      __n128 result = *(__n128 *)(v3 + 176);
      *(__n128 *)(a1 + 224) = result;
    }
    goto LABEL_5;
  }
  if (v2 == 3)
  {
LABEL_5:
    if ((*a2 & 4) == 0)
    {
      *(_DWORD *)a1 = --v2;
      uint64_t v5 = a1 + 16 * v2;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(v5 + 16);
      *(_OWORD *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = *(_OWORD *)(v5 + 96);
      __n128 result = *(__n128 *)(v5 + 176);
      *(__n128 *)(a1 + 208) = result;
    }
    goto LABEL_9;
  }
  if ((int)v2 < 2)
  {
    if (v2 != 1) {
      return result;
    }
    goto LABEL_11;
  }
  unsigned int v2 = 2;
LABEL_9:
  if ((*a2 & 2) == 0)
  {
    *(_DWORD *)a1 = --v2;
    uint64_t v6 = a1 + 16 * v2;
    *(_OWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v6 + 96);
    __n128 result = *(__n128 *)(v6 + 176);
    *(__n128 *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = result;
  }
LABEL_11:
  if ((*a2 & 1) == 0)
  {
    unsigned int v7 = v2 - 1;
    *(_DWORD *)a1 = v7;
    long long v8 = *(_OWORD *)(a1 + 96 + 16 * v7);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a1 + 16 + 16 * v7);
    *(_OWORD *)(a1 + 96) = v8;
    __n128 result = *(__n128 *)(a1 + 176 + 16 * v7);
    *(__n128 *)(a1 + 176) = result;
  }
  return result;
}

double sub_1B6DF5FFC(uint64_t a1)
{
  *(unsigned char *)(a1 + 324) = 0;
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 384) = 1;
  double result = 5.72459157e141;
  *(_OWORD *)(a1 + 304) = xmmword_1B6ECFDA0;
  *(unsigned char *)(a1 + 37sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 364) = 0;
  *(void *)(a1 + 356) = 0;
  *(unsigned char *)(a1 + 352) &= 0xF0u;
  return result;
}

__n128 sub_1B6DF6038(int *a1, _OWORD *a2, _OWORD *a3, __n128 *a4)
{
  *((_OWORD *)a1 + 19) = *a2;
  *((unsigned char *)a1 + 384) = 1;
  *(_OWORD *)&a1[4 * *a1 + 4] = *a2;
  *(_OWORD *)&a1[4 * *a1 + 24] = *a3;
  __n128 result = *a4;
  *(__n128 *)&a1[4 * (*a1)++ + 44] = *a4;
  return result;
}

BOOL sub_1B6DF6088(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 384))
  {
    *(void *)(a1 + 356) = 0;
    *(void *)(a1 + 364) = 0;
    *(unsigned char *)(a1 + 37sub_1B6DC4968((unsigned int *)this + 2) = 0;
    char v2 = *(unsigned char *)(a1 + 352) & 0xF0;
    *(unsigned char *)(a1 + 35sub_1B6DC4968((unsigned int *)this + 2) = v2;
    *(unsigned char *)(a1 + 384) = 0;
    switch(*(_DWORD *)a1)
    {
      case 1:
        float32x4_t v3 = *(float32x4_t *)(a1 + 96);
        float32x4_t v4 = *(float32x4_t *)(a1 + 176);
        *(float32x4_t *)(a1 + 256) = v3;
        *(float32x4_t *)(a1 + 27sub_1B6DC4968((unsigned int *)this + 2) = v4;
        float32x4_t v5 = vsubq_f32(v3, v4);
        v5.i32[3] = 0;
        *(float32x4_t *)(a1 + 288) = v5;
        *(unsigned char *)(a1 + 37sub_1B6DC4968((unsigned int *)this + 2) = 0;
        *(_OWORD *)(a1 + 356) = xmmword_1B6E4F300;
        int v6 = 1;
        goto LABEL_24;
      case 2:
        float32x4_t v7 = *(float32x4_t *)(a1 + 16);
        float32x4_t v8 = vsubq_f32((float32x4_t)0, v7);
        v8.i32[3] = 0;
        float32x4_t v9 = vsubq_f32(*(float32x4_t *)(a1 + 32), v7);
        v9.i32[3] = 0;
        int8x16_t v10 = (int8x16_t)vmulq_f32(v8, v9);
        float32x2_t v11 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
        if (v11.f32[0] <= 0.0)
        {
          float v14 = 0.0;
          char v15 = 1;
        }
        else
        {
          int8x16_t v12 = (int8x16_t)vmulq_f32(v9, v9);
          float32x2_t v13 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), vpadd_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8));
          if (vcgt_f32(v13, v11).u8[0])
          {
            LODWORD(v14) = vdiv_f32(v11, v13).u32[0];
            char v15 = 3;
          }
          else
          {
            float v14 = 1.0;
            char v15 = 2;
          }
        }
        *(unsigned char *)(a1 + 35sub_1B6DC4968((unsigned int *)this + 2) = v2 | v15;
        *(float *)(a1 + 356) = 1.0 - v14;
        *(float *)(a1 + 360) = v14;
        *(void *)(a1 + 364) = 0;
        float32x4_t v42 = *(float32x4_t *)(a1 + 96);
        float32x4_t v43 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 112), v42), v14);
        v43.i32[3] = 0;
        float32x4_t v44 = vaddq_f32(v42, v43);
        float32x4_t v45 = *(float32x4_t *)(a1 + 176);
        float32x4_t v46 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 192), v45), v14);
        v46.i32[3] = 0;
        float32x4_t v47 = vaddq_f32(v45, v46);
        *(float32x4_t *)(a1 + 256) = v44;
        *(float32x4_t *)(a1 + 27sub_1B6DC4968((unsigned int *)this + 2) = v47;
        float32x4_t v48 = vsubq_f32(v44, v47);
        v48.i32[3] = 0;
        *(float32x4_t *)(a1 + 288) = v48;
        sub_1B6DF5F0C(a1, (unsigned char *)(a1 + 352));
        int v6 = 0;
        if (*(float *)(a1 + 356) < 0.0) {
          goto LABEL_24;
        }
        if (*(float *)(a1 + 360) < 0.0) {
          goto LABEL_22;
        }
        float v41 = *(float *)(a1 + 364);
        goto LABEL_21;
      case 3:
        float32x4_t v50 = 0uLL;
        sub_1B6DF63E8(a1, &v50, (float32x4_t *)(a1 + 16), (float32x4_t *)(a1 + 32), (float32x4_t *)(a1 + 48), (float32x4_t *)(a1 + 336));
        float v16 = *(float *)(a1 + 356);
        float32x4_t v17 = vmulq_n_f32(*(float32x4_t *)(a1 + 96), v16);
        v17.i32[3] = 0;
        float v18 = *(float *)(a1 + 360);
        float32x4_t v19 = vmulq_n_f32(*(float32x4_t *)(a1 + 112), v18);
        v19.i32[3] = 0;
        float32x4_t v20 = vaddq_f32(v17, v19);
        float v21 = *(float *)(a1 + 364);
        float32x4_t v22 = vmulq_n_f32(*(float32x4_t *)(a1 + 128), v21);
        v22.i32[3] = 0;
        float32x4_t v23 = vaddq_f32(v20, v22);
        float32x4_t v24 = vmulq_n_f32(*(float32x4_t *)(a1 + 176), v16);
        v24.i32[3] = 0;
        float32x4_t v25 = vmulq_n_f32(*(float32x4_t *)(a1 + 192), v18);
        v25.i32[3] = 0;
        float32x4_t v26 = vaddq_f32(v24, v25);
        float32x4_t v27 = vmulq_n_f32(*(float32x4_t *)(a1 + 208), v21);
        goto LABEL_11;
      case 4:
        float32x4_t v50 = 0uLL;
        if (sub_1B6DF666C(a1, &v50, (float32x4_t *)(a1 + 16), (float32x4_t *)(a1 + 32), (float32x4_t *)(a1 + 48), (float32x4_t *)(a1 + 64), a1 + 336))
        {
          float v28 = *(float *)(a1 + 356);
          float32x4_t v29 = vmulq_n_f32(*(float32x4_t *)(a1 + 96), v28);
          v29.i32[3] = 0;
          float v30 = *(float *)(a1 + 360);
          float32x4_t v31 = vmulq_n_f32(*(float32x4_t *)(a1 + 112), v30);
          v31.i32[3] = 0;
          float32x4_t v32 = vaddq_f32(v29, v31);
          v31.i32[0] = *(_DWORD *)(a1 + 364);
          float32x4_t v33 = vmulq_n_f32(*(float32x4_t *)(a1 + 128), v31.f32[0]);
          v33.i32[3] = 0;
          float32x4_t v34 = vaddq_f32(v32, v33);
          v33.i32[0] = *(_DWORD *)(a1 + 368);
          float32x4_t v35 = vmulq_n_f32(*(float32x4_t *)(a1 + 144), v33.f32[0]);
          v35.i32[3] = 0;
          float32x4_t v23 = vaddq_f32(v34, v35);
          float32x4_t v36 = vmulq_n_f32(*(float32x4_t *)(a1 + 176), v28);
          float32x4_t v37 = vmulq_n_f32(*(float32x4_t *)(a1 + 192), v30);
          float32x4_t v38 = vmulq_n_f32(*(float32x4_t *)(a1 + 208), v31.f32[0]);
          v36.i32[3] = 0;
          v37.i32[3] = 0;
          v38.i32[3] = 0;
          float32x4_t v26 = vaddq_f32(vaddq_f32(v36, v37), v38);
          float32x4_t v27 = vmulq_n_f32(*(float32x4_t *)(a1 + 224), v33.f32[0]);
LABEL_11:
          v27.i32[3] = 0;
          float32x4_t v39 = vaddq_f32(v26, v27);
          *(float32x4_t *)(a1 + 256) = v23;
          *(float32x4_t *)(a1 + 27sub_1B6DC4968((unsigned int *)this + 2) = v39;
          float32x4_t v40 = vsubq_f32(v23, v39);
          v40.i32[3] = 0;
          *(float32x4_t *)(a1 + 288) = v40;
          sub_1B6DF5F0C(a1, (unsigned char *)(a1 + 352));
          int v6 = 0;
          if (*(float *)(a1 + 356) >= 0.0)
          {
            if (*(float *)(a1 + 360) < 0.0) {
              goto LABEL_22;
            }
            float v41 = *(float *)(a1 + 364);
LABEL_21:
            if (v41 >= 0.0) {
              int v6 = *(float *)(a1 + 368) >= 0.0;
            }
            else {
LABEL_22:
            }
              int v6 = 0;
          }
LABEL_24:
          *(unsigned char *)(a1 + 324) = v6;
        }
        else if (*(unsigned char *)(a1 + 372))
        {
LABEL_16:
          int v6 = 0;
          *(unsigned char *)(a1 + 324) = 0;
        }
        else
        {
          int v6 = 1;
          *(unsigned char *)(a1 + 324) = 1;
          *(void *)(a1 + 288) = 0;
          *(void *)(a1 + 296) = 0;
        }
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
    int v6 = *(unsigned __int8 *)(a1 + 324);
  }
  return v6 != 0;
}

uint64_t sub_1B6DF63E8(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  __int8 v6 = a6[1].i8[0] & 0xF0;
  a6[1].i8[0] = v6;
  float32x4_t v7 = *a4;
  float32x4_t v8 = *a3;
  float32x4_t v9 = vsubq_f32(*a4, *a3);
  v9.i32[3] = 0;
  float32x4_t v10 = *a5;
  float32x4_t v11 = vsubq_f32(*a5, *a3);
  v11.i32[3] = 0;
  float32x4_t v12 = *a2;
  float32x4_t v13 = vsubq_f32(*a2, *a3);
  v13.i32[3] = 0;
  int8x16_t v14 = (int8x16_t)vmulq_f32(v9, v13);
  float32x2_t v15 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  int8x16_t v16 = (int8x16_t)vmulq_f32(v11, v13);
  float32x2_t v17 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  if (v15.f32[0] <= 0.0 && v17.f32[0] <= 0.0)
  {
    *a6 = v8;
    a6[1].i8[0] = v6 | 1;
    float v18 = 0.0;
    float v19 = 1.0;
LABEL_11:
    float v27 = 0.0;
    goto LABEL_12;
  }
  float32x4_t v20 = vsubq_f32(v12, v7);
  v20.i32[3] = 0;
  int8x16_t v21 = (int8x16_t)vmulq_f32(v9, v20);
  float32x2_t v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8));
  int8x16_t v23 = (int8x16_t)vmulq_f32(v11, v20);
  float32x2_t v24 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8));
  if (v22.f32[0] >= 0.0 && (vmvn_s8((int8x8_t)vcge_f32(v22, v24)).u8[0] & 1) == 0)
  {
    *a6 = v7;
    a6[1].i8[0] = v6 | 2;
    float v18 = 1.0;
    float v19 = 0.0;
    goto LABEL_11;
  }
  float v25 = (float)(v15.f32[0] * v24.f32[0]) - (float)(v22.f32[0] * v17.f32[0]);
  if (v22.f32[0] <= 0.0 && v15.f32[0] >= 0.0 && v25 <= 0.0)
  {
    float v18 = vdiv_f32(v15, vsub_f32(v15, v22)).f32[0];
    float32x4_t v26 = vmulq_n_f32(v9, v18);
    v26.i32[3] = 0;
    *a6 = vaddq_f32(v8, v26);
    a6[1].i8[0] = v6 | 3;
    float v19 = 1.0 - v18;
    goto LABEL_11;
  }
  float32x4_t v29 = vsubq_f32(v12, v10);
  v29.i32[3] = 0;
  int8x16_t v30 = (int8x16_t)vmulq_f32(v9, v29);
  float32x2_t v31 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8));
  int8x16_t v32 = (int8x16_t)vmulq_f32(v11, v29);
  float32x2_t v33 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8));
  if (v33.f32[0] >= 0.0 && (vmvn_s8((int8x8_t)vcge_f32(v33, v31)).u8[0] & 1) == 0)
  {
    *a6 = v10;
    a6[1].i8[0] = v6 | 4;
    float v27 = 1.0;
    float v19 = 0.0;
LABEL_20:
    float v18 = 0.0;
    goto LABEL_12;
  }
  float v34 = (float)(v31.f32[0] * v17.f32[0]) - (float)(v15.f32[0] * v33.f32[0]);
  if (v33.f32[0] <= 0.0 && v34 <= 0.0 && v17.f32[0] >= 0.0)
  {
    float v27 = vdiv_f32(v17, vsub_f32(v17, v33)).f32[0];
    float32x4_t v35 = vmulq_n_f32(v11, v27);
    v35.i32[3] = 0;
    *a6 = vaddq_f32(v8, v35);
    a6[1].i8[0] = v6 | 5;
    float v19 = 1.0 - v27;
    goto LABEL_20;
  }
  float v36 = (float)(v22.f32[0] * v33.f32[0]) - (float)(v31.f32[0] * v24.f32[0]);
  if (v36 <= 0.0 && (float32x2_t v37 = vsub_f32(v24, v22), v37.f32[0] >= 0.0) && (v38 = vsub_f32(v31, v33), v38.f32[0] >= 0.0))
  {
    float v27 = vdiv_f32(v37, vadd_f32(v37, v38)).f32[0];
    float32x4_t v42 = vmulq_n_f32(vsubq_f32(v10, v7), v27);
    v42.i32[3] = 0;
    *a6 = vaddq_f32(v7, v42);
    a6[1].i8[0] = v6 | 6;
    float v18 = 1.0 - v27;
    float v19 = 0.0;
  }
  else
  {
    float v39 = 1.0 / (float)(v25 + (float)(v36 + v34));
    float v18 = v34 * v39;
    float v27 = v25 * v39;
    float32x4_t v40 = vmulq_n_f32(v9, v18);
    v40.i32[3] = 0;
    float32x4_t v41 = vmulq_n_f32(v11, v27);
    v41.i32[3] = 0;
    *a6 = vaddq_f32(vaddq_f32(v8, v40), v41);
    a6[1].i8[0] = v6 | 7;
    float v19 = (float)(1.0 - v18) - v27;
  }
LABEL_12:
  a6[1].f32[1] = v19;
  a6[1].f32[2] = v18;
  a6[1].f32[3] = v27;
  a6[2].i32[0] = 0;
  return 1;
}

uint64_t sub_1B6DF666C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, uint64_t a7)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  char v80 = 0;
  *(float32x4_t *)a7 = *a2;
  char v8 = *(unsigned char *)(a7 + 16);
  *(unsigned char *)(a7 + 16) = v8 | 0xF;
  float32x4_t v9 = vsubq_f32(*a4, *a3);
  int8x8_t v10 = (int8x8_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
  v9.i32[3] = 0;
  float32x4_t v11 = vsubq_f32(*a5, *a3);
  int8x8_t v12 = (int8x8_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  v11.i32[3] = 0;
  *(int8x8_t *)v13.f32 = vext_s8(*(int8x8_t *)v9.f32, v10, 4uLL);
  v13.i64[1] = v9.i64[0];
  *(int8x8_t *)v14.f32 = vext_s8(*(int8x8_t *)v11.f32, v12, 4uLL);
  v14.i64[1] = v11.i64[0];
  int8x16_t v15 = (int8x16_t)vsubq_f32(vmulq_f32(v14, v9), vmulq_f32(v13, v11));
  v16.i64[0] = vextq_s8(v15, v15, 4uLL).u64[0];
  v16.i64[1] = v15.u32[0];
  float32x4_t v17 = vsubq_f32(*a6, *a3);
  int8x8_t v18 = (int8x8_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v17.i32[3] = 0;
  int8x16_t v19 = (int8x16_t)vmulq_f32(v17, v16);
  int32x2_t v20 = (int32x2_t)vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v17.f32, v18, 4uLL);
  v21.i64[1] = v17.i64[0];
  int8x16_t v22 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v11), vmulq_f32(v14, v17));
  v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
  v23.i64[1] = __PAIR64__(v16.u32[3], v22.u32[0]);
  int8x16_t v24 = (int8x16_t)vmulq_f32(v9, v23);
  int32x2_t v25 = (int32x2_t)vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  int8x16_t v26 = (int8x16_t)vsubq_f32(vmulq_f32(v13, v17), vmulq_f32(v21, v9));
  v27.i64[0] = vextq_s8(v26, v26, 4uLL).u64[0];
  v27.i64[1] = __PAIR64__(v16.u32[3], v26.u32[0]);
  int8x16_t v28 = (int8x16_t)vmulq_f32(v11, v27);
  float32x2_t v29 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
  float32x4_t v30 = vsubq_f32(*a6, *a4);
  int8x8_t v31 = (int8x8_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  v30.i32[3] = 0;
  float32x4_t v32 = vsubq_f32(*a5, *a4);
  v17.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  v32.i32[3] = 0;
  *(int8x8_t *)v33.f32 = vext_s8(*(int8x8_t *)v30.f32, v31, 4uLL);
  v33.i64[1] = v30.i64[0];
  *(int8x8_t *)v17.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v17.f32, 4uLL);
  v17.i64[1] = v32.i64[0];
  int8x16_t v34 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v30), vmulq_f32(v33, v32));
  v35.i64[0] = vextq_s8(v34, v34, 4uLL).u64[0];
  v35.i64[1] = v34.u32[0];
  v34.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
  float32x4_t v36 = vsubq_f32(*a3, *a4);
  v36.i32[3] = 0;
  float32x2_t v37 = vadd_f32(v29, *(float32x2_t *)v34.i8);
  int8x16_t v38 = (int8x16_t)vmulq_f32(v36, v35);
  float32x2_t v39 = vadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  *(int32x2_t *)v40.f32 = vzip1_s32(v25, v20);
  v40.i64[1] = __PAIR64__(v39.u32[0], v37.u32[0]);
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32((float32x4_t)vdupq_n_s32(0x322BCC76u), vmulq_f32(v40, v40)))))
  {
    uint64_t result = 0;
    *(unsigned char *)(a7 + 36) = 1;
  }
  else
  {
    float32x4_t v47 = vsubq_f32(*a2, *a4);
    v47.i32[3] = 0;
    int8x16_t v48 = (int8x16_t)vmulq_f32(v47, v35);
    LODWORD(v49) = vmul_f32(v39, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8))).u32[0];
    float32x4_t v50 = vsubq_f32(*a2, *a3);
    v50.i32[3] = 0;
    int8x16_t v51 = (int8x16_t)vmulq_f32(v50, v27);
    LODWORD(v5sub_1B6DC4968((unsigned int *)this + 2) = vmul_f32(v37, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8))).u32[0];
    int8x16_t v53 = (int8x16_t)vmulq_f32(v50, v23);
    LODWORD(v54) = vmul_f32((float32x2_t)v25, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8))).u32[0];
    int8x16_t v55 = (int8x16_t)vmulq_f32(v50, v16);
    float v56 = vmul_f32((float32x2_t)v20, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8))).f32[0];
    if (v56 < 0.0 || v54 < 0.0 || v52 < 0.0 || v49 < 0.0)
    {
      float v77 = v52;
      float v78 = v49;
      if (v56 >= 0.0)
      {
        float v60 = 3.4028e38;
      }
      else
      {
        float32x4_t v75 = *a2;
        float v76 = v54;
        a1 = sub_1B6DF63E8(a1, a2, a3, a4, a5, &v79);
        float v54 = v76;
        float32x4_t v57 = vsubq_f32(v79, v75);
        v57.i32[3] = 0;
        int8x16_t v58 = (int8x16_t)vmulq_f32(v57, v57);
        float v59 = vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0];
        float v60 = 3.4028e38;
        if (v59 < 3.4028e38)
        {
          *(float32x4_t *)a7 = v79;
          *(unsigned char *)(a7 + 16) = v80 & 7 | v8 & 0xF0;
          int v61 = *(_DWORD *)&v81[8];
          *(void *)(a7 + 20) = *(void *)v81;
          *(_DWORD *)(a7 + 28) = v61;
          *(_DWORD *)(a7 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
          float v60 = v59;
        }
      }
      if (v54 >= 0.0)
      {
        float v65 = v77;
      }
      else
      {
        a1 = sub_1B6DF63E8(a1, a2, a3, a5, a6, &v79);
        float32x4_t v62 = vsubq_f32(v79, *a2);
        v62.i32[3] = 0;
        int8x16_t v63 = (int8x16_t)vmulq_f32(v62, v62);
        float v64 = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)).f32[0];
        float v65 = v77;
        if (v64 < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(unsigned char *)(a7 + 16) = (2 * v80) & 0xC | v80 & 1 | *(unsigned char *)(a7 + 16) & 0xF0;
          *(_DWORD *)(a7 + 20) = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 24) = 0;
          *(void *)(a7 + 28) = *(void *)&v81[4];
          float v60 = v64;
        }
      }
      if (v65 >= 0.0)
      {
        float v66 = v78;
      }
      else
      {
        a1 = sub_1B6DF63E8(a1, a2, a3, a6, a4, &v79);
        float v66 = v78;
        float32x4_t v67 = vsubq_f32(v79, *a2);
        v67.i32[3] = 0;
        int8x16_t v68 = (int8x16_t)vmulq_f32(v67, v67);
        float v69 = vadd_f32(vpadd_f32(*(float32x2_t *)v68.i8, *(float32x2_t *)v68.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)).f32[0];
        if (v69 < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(unsigned char *)(a7 + 16) = v80 & 1 | (2 * ((v80 & 4) != 0)) & 0xF7 | (8 * ((v80 & 2) != 0)) | *(unsigned char *)(a7 + 16) & 0xF0;
          int v71 = *(_DWORD *)&v81[4];
          int v70 = *(_DWORD *)&v81[8];
          *(_DWORD *)(a7 + 20) = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 24) = v70;
          *(_DWORD *)(a7 + 28) = 0;
          *(_DWORD *)(a7 + 3sub_1B6DC4968((unsigned int *)this + 2) = v71;
          float v60 = v69;
        }
      }
      if (v66 < 0.0)
      {
        sub_1B6DF63E8(a1, a2, a4, a6, a5, &v79);
        float32x4_t v72 = vsubq_f32(v79, *a2);
        v72.i32[3] = 0;
        int8x16_t v73 = (int8x16_t)vmulq_f32(v72, v72);
        if (vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0] < v60)
        {
          *(float32x4_t *)a7 = v79;
          *(unsigned char *)(a7 + 16) = v80 & 4 | (2 * (v80 & 1)) & 0xF7 | (8 * ((v80 & 2) != 0)) | *(unsigned char *)(a7 + 16) & 0xF0;
          int v74 = *(_DWORD *)v81;
          *(_DWORD *)(a7 + 20) = 0;
          *(_DWORD *)(a7 + 24) = v74;
          *(int32x2_t *)(a7 + 28) = vrev64_s32(*(int32x2_t *)&v81[4]);
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 sub_1B6DF6B3C(__n128 *a1, __n128 *a2)
{
  sub_1B6DF6088((uint64_t)a1);
  __n128 result = a1[18];
  *a2 = result;
  return result;
}

uint64_t sub_1B6DF6B6C(float *a1, float32x4_t *a2)
{
  uint64_t v2 = *(unsigned int *)a1;
  if ((int)v2 <= 0)
  {
    char v3 = 0;
    float v4 = a2->f32[3];
  }
  else
  {
    char v3 = 0;
    LODWORD(v4) = HIDWORD(*(unsigned long long *)a2);
    float32x4_t v5 = (float32x4_t *)(a1 + 4);
    do
    {
      float32x4_t v6 = *v5++;
      float32x4_t v7 = vsubq_f32(*a2, v6);
      v7.i32[3] = 0;
      int8x16_t v8 = (int8x16_t)vmulq_f32(v7, v7);
      v3 |= vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] <= a1[80];
      --v2;
    }
    while (v2);
  }
  if (v4 == a1[79] && a2->f32[2] == a1[78] && a2->f32[1] == a1[77]) {
    v3 |= a2->f32[0] == a1[76];
  }
  return v3 & 1;
}

__n128 sub_1B6DF6C10(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  sub_1B6DF6088(a1);
  *a2 = *(_OWORD *)(a1 + 256);
  __n128 result = *(__n128 *)(a1 + 272);
  *a3 = result;
  return result;
}

double sub_1B6DF6C54(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  sub_1B6E01BF8(a1, 5, a2, a3);
  *(void *)uint64_t v7 = &unk_1F0FB18F8;
  *(_OWORD *)(v7 + 368) = *a4;
  *(_OWORD *)(v7 + 384) = a4[1];
  *(_OWORD *)(v7 + 400) = a4[2];
  *(_OWORD *)(v7 + 416) = a4[3];
  *(_OWORD *)(v7 + 43sub_1B6DC4968((unsigned int *)this + 2) = *a5;
  *(_OWORD *)(v7 + 448) = a5[1];
  *(_OWORD *)(v7 + 464) = a5[2];
  long long v8 = a5[3];
  *(unsigned char *)(v7 + 624) = 0;
  *(_DWORD *)(v7 + 59sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)(v7 + 656) = -1082130432;
  *(_OWORD *)(v7 + 480) = v8;
  *(_OWORD *)(v7 + 496) = xmmword_1B6ED02E0;
  *(_OWORD *)(v7 + 51sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6ED02F0;
  *(void *)(v7 + 688) = 0;
  *(void *)&double result = 1060320051;
  *(void *)(v7 + 696) = 1060320051;
  return result;
}

double sub_1B6DF6D1C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = sub_1B6E01AB8(a1, 5, a2);
  *(void *)uint64_t v4 = &unk_1F0FB18F8;
  long long v5 = *a3;
  *(_OWORD *)(v4 + 368) = *a3;
  long long v6 = a3[1];
  *(_OWORD *)(v4 + 384) = v6;
  long long v7 = a3[2];
  *(_OWORD *)(v4 + 400) = v7;
  *(_OWORD *)(v4 + 416) = a3[3];
  *(_OWORD *)(v4 + 43sub_1B6DC4968((unsigned int *)this + 2) = v5;
  *(_OWORD *)(v4 + 448) = v6;
  *(_OWORD *)(v4 + 464) = v7;
  *(void *)(v4 + 480) = 0;
  *(void *)(v4 + 488) = 0;
  *(_DWORD *)(v4 + 59sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(v4 + 624) = 0;
  *(_DWORD *)(v4 + 656) = -1082130432;
  *(_OWORD *)(v4 + 496) = xmmword_1B6ED02E0;
  *(_OWORD *)(v4 + 51sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6ED02F0;
  *(void *)(v4 + 688) = 0;
  *(void *)&double result = 1060320051;
  *(void *)(v4 + 696) = 1060320051;
  return result;
}

void sub_1B6DF6DC4(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned char *)(a1 + 595))
  {
    int v3 = 0;
    *a2 = 0;
LABEL_9:
    a2[1] = v3;
    return;
  }
  *(void *)a2 = 0x300000003;
  sub_1B6DF6E78(a1, (float32x4_t *)(*(void *)(a1 + 40) + 16), (float32x4_t *)(*(void *)(a1 + 48) + 16), (float32x4_t *)(*(void *)(a1 + 40) + 304), (float32x4_t *)(*(void *)(a1 + 48) + 304));
  if (*(unsigned char *)(a1 + 594))
  {
    int v5 = *a2;
    int v6 = a2[1];
    ++*a2;
    a2[1] = v6 - 1;
    float v7 = *(float *)(a1 + 524);
    if (*(float *)(a1 + 512) < v7 && *(float *)(a1 + 516) < v7)
    {
      *a2 = v5 + 2;
      a2[1] = v6 - 2;
    }
  }
  if (*(unsigned char *)(a1 + 593))
  {
    int v8 = a2[1];
    ++*a2;
    int v3 = v8 - 1;
    goto LABEL_9;
  }
}

void sub_1B6DF6E78(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  *(void *)(a1 + 568) = 0;
  *(_WORD *)(a1 + 593) = 0;
  if (!*(unsigned char *)(a1 + 624) || *(unsigned char *)(a1 + 595))
  {
    sub_1B6DD7060(a2->f32, v261);
    sub_1B6DD7060((float *)(a1 + 368), v260);
    int32x2_t v10 = (int32x2_t)vextq_s8((int8x16_t)v261[0], (int8x16_t)v261[0], 8uLL).u64[0];
    float32x2_t v11 = (float32x2_t)vzip1_s32(v10, *(int32x2_t *)v261[0].f32);
    int32x2_t v12 = (int32x2_t)vextq_s8((int8x16_t)v260[0], (int8x16_t)v260[0], 8uLL).u64[0];
    int32x2_t v13 = vzip1_s32(v12, *(int32x2_t *)v260[0].f32);
    float32x2_t v14 = (float32x2_t)vext_s8(*(int8x8_t *)v261[0].f32, (int8x8_t)v10, 4uLL);
    float32x2_t v15 = vmul_f32(v11, (float32x2_t)vext_s8((int8x8_t)v12, *(int8x8_t *)v260[0].f32, 4uLL));
    *(float32x2_t *)v16.f32 = vmul_f32(v11, (float32x2_t)vext_s8(*(int8x8_t *)v260[0].f32, (int8x8_t)v12, 4uLL));
    *(float32x2_t *)&v16.u32[2] = vmul_f32(v14, (float32x2_t)vrev64_s32(v13));
    *(float32x2_t *)v17.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v261[0].f32, v260[0], 3), vmul_f32(v14, (float32x2_t)v13));
    v17.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v261[0].f32, *(float32x2_t *)v260[0].f32, 1), v15);
    float32x4_t v257 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v260[0], v261[0], 3), v16), (float32x4_t)veorq_s8(v17, (int8x16_t)xmmword_1B6E72E20));
    sub_1B6DD7060(a3->f32, v261);
    sub_1B6DD7060((float *)(a1 + 432), v260);
    int32x2_t v19 = (int32x2_t)vextq_s8((int8x16_t)v261[0], (int8x16_t)v261[0], 8uLL).u64[0];
    float32x2_t v20 = (float32x2_t)vzip1_s32(v19, *(int32x2_t *)v261[0].f32);
    int32x2_t v21 = (int32x2_t)vextq_s8((int8x16_t)v260[0], (int8x16_t)v260[0], 8uLL).u64[0];
    int32x2_t v22 = vzip1_s32(v21, *(int32x2_t *)v260[0].f32);
    float32x2_t v23 = (float32x2_t)vext_s8(*(int8x8_t *)v261[0].f32, (int8x8_t)v19, 4uLL);
    float32x2_t v24 = vmul_f32(v20, (float32x2_t)vext_s8((int8x8_t)v21, *(int8x8_t *)v260[0].f32, 4uLL));
    *(float32x2_t *)v25.f32 = vmul_f32(v20, (float32x2_t)vext_s8(*(int8x8_t *)v260[0].f32, (int8x8_t)v21, 4uLL));
    *(float32x2_t *)&v25.u32[2] = vmul_f32(v23, (float32x2_t)vrev64_s32(v22));
    *(float32x2_t *)v26.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v261[0].f32, v260[0], 3), vmul_f32(v23, (float32x2_t)v22));
    v26.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v261[0].f32, *(float32x2_t *)v260[0].f32, 1), v24);
    float32x4_t v27 = v257;
    float32x4_t v253 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v260[0], v261[0], 3), v25), (float32x4_t)veorq_s8(v26, (int8x16_t)xmmword_1B6E72E20));
    float32x4_t v28 = (float32x4_t)veorq_s8((int8x16_t)v253, (int8x16_t)xmmword_1B6E72E30);
    int32x2_t v29 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), *(int32x2_t *)v257.f32);
    unint64_t v30 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL).u64[0];
    int32x2_t v254 = (int32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
    int32x2_t v255 = vzip1_s32(v254, *(int32x2_t *)v28.f32);
    float32x2_t v31 = (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, (int8x8_t)v254, 4uLL);
    float32x2_t v32 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL).u64[0];
    v27.i64[0] = v28.i64[0];
    *(int32x2_t *)&v27.u32[2] = v255;
    *(int32x2_t *)v33.f32 = vdup_laneq_s32((int32x4_t)v257, 3);
    v33.i64[1] = v30;
    *(float32x2_t *)v34.f32 = vmul_f32((float32x2_t)v29, v31);
    *(float32x2_t *)&v34.u32[2] = vmul_lane_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v257.f32, 1);
    float32x4_t v251 = v33;
    float32x2_t v252 = v32;
    *(float32x2_t *)v25.f32 = vmul_f32(v32, (float32x2_t)v255);
    *(float32x2_t *)&v25.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v29), v31);
    float32x4_t v256 = v28;
    float32x4_t v35 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v257, v28, 3), v25), (float32x4_t)veorq_s8((int8x16_t)vaddq_f32(v34, vmulq_f32(v33, v27)), (int8x16_t)xmmword_1B6E72E20));
    int32x2_t v36 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), *(int32x2_t *)v35.f32);
    float32x2_t v37 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL).u64[0];
    *(int32x2_t *)v38.f32 = vdup_laneq_s32((int32x4_t)v35, 3);
    v38.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL).u64[0];
    *(int32x2_t *)v39.f32 = v36;
    *(float32x2_t *)&v39.u32[2] = v37;
    *(float32x2_t *)v33.f32 = v37;
    v33.i64[1] = v35.i64[0];
    float32x4_t v40 = vaddq_f32((float32x4_t)veorq_s8((int8x16_t)vaddq_f32(vmulq_f32(v33, (float32x4_t)xmmword_1B6E4F320), vmulq_f32(v38, (float32x4_t)xmmword_1B6E4F390)), (int8x16_t)xmmword_1B6E72E20), vmulq_f32(v39, (float32x4_t)xmmword_1B6E724A0));
    float32x4_t v41 = (float32x4_t)veorq_s8((int8x16_t)v35, (int8x16_t)xmmword_1B6E72E30);
    v28.i64[0] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
    float32x2_t v42 = (float32x2_t)vzip1_s32(*(int32x2_t *)v28.f32, *(int32x2_t *)v40.f32);
    int32x2_t v43 = (int32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    float32x2_t v44 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v41.f32);
    float32x2_t v45 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL).u64[0];
    float32x2_t v46 = vmul_laneq_f32(*(float32x2_t *)v40.f32, v41, 3);
    *(float32x2_t *)v28.f32 = vmul_laneq_f32(*(float32x2_t *)v28.f32, v41, 3);
    float32x2_t v47 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v41.f32, 1);
    *(float32x2_t *)v48.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)v43, 4uLL), v42);
    *(float32x2_t *)&v48.u32[2] = vmul_lane_f32(v45, v44, 1);
    float32x4_t v49 = vmulq_laneq_f32(v41, v40, 3);
    *(float32x2_t *)v41.f32 = vadd_f32(v46, vmul_f32(v44, v45));
    *(float32x2_t *)&v41.u32[2] = vadd_f32(v47, *(float32x2_t *)v28.f32);
    float32x4_t v50 = vaddq_f32(vsubq_f32(v49, v48), v41);
    v50.i32[3] = 0;
    int8x16_t v51 = (int8x16_t)vmulq_f32(v50, v50);
    float32x4_t v52 = vmulq_n_f32(v50, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)).f32[0]));
    int8x16_t v53 = (int8x16_t)vmulq_f32(v52, (float32x4_t)xmmword_1B6E4F300);
    float v54 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)).f32[0];
    if (v54 >= -1.0)
    {
      v56.i64[0] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL).u64[0];
      v56.i64[1] = v52.i64[0];
      int8x16_t v57 = (int8x16_t)vaddq_f32(vmulq_f32(v56, (float32x4_t)xmmword_1B6E4F300), vmulq_f32(v52, (float32x4_t)xmmword_1B6E4F4F0));
      float32x4_t v58 = (float32x4_t)vextq_s8(vextq_s8(v57, v57, 0xCuLL), v57, 8uLL);
      v58.i32[3] = sqrtf((float)(v54 + 1.0) + (float)(v54 + 1.0));
      v59.i32[1] = 1056964608;
      v59.i64[1] = 0x3F0000003F000000;
      *(float *)v59.i32 = 1.0 / v58.f32[3];
      float32x4_t v60 = (float32x4_t)vzip1q_s32(v59, v59);
      v60.f32[2] = 1.0 / v58.f32[3];
      float32x4_t v55 = vmulq_f32(v58, v60);
    }
    else
    {
      float32x4_t v55 = (float32x4_t)xmmword_1B6E50A20;
    }
    float32x4_t v61 = vmulq_f32(v55, v55);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    v261[0] = vmulq_n_f32(v55, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32).f32[0]));
    float32x4_t v62 = (float32x4_t)veorq_s8((int8x16_t)v261[0], (int8x16_t)xmmword_1B6E72E30);
    v61.i64[0] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
    float32x2_t v63 = (float32x2_t)vzip1_s32(*(int32x2_t *)v61.f32, *(int32x2_t *)v62.f32);
    *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v62.f32, *(int8x8_t *)v61.f32, 4uLL);
    float32x2_t v64 = (float32x2_t)vrev64_s32(v36);
    float32x2_t v65 = vmul_lane_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v35.f32, 1);
    float32x4_t v66 = vmulq_laneq_f32(v35, v62, 3);
    *(float32x2_t *)&v62.u32[2] = v63;
    *(float32x2_t *)v67.f32 = vmul_f32((float32x2_t)v36, *(float32x2_t *)v61.f32);
    *(float32x2_t *)&v67.u32[2] = v65;
    *(float32x2_t *)v68.f32 = vmul_f32(v37, v63);
    *(float32x2_t *)&v68.u32[2] = vmul_f32(v64, *(float32x2_t *)v61.f32);
    float32x4_t v69 = vaddq_f32(vsubq_f32(v66, v68), (float32x4_t)veorq_s8((int8x16_t)vaddq_f32(v67, vmulq_f32(v38, v62)), (int8x16_t)xmmword_1B6E72E20));
    float32x4_t v70 = vmulq_f32(v69, v69);
    float32x4_t v71 = vpaddq_f32(v70, v70);
    v260[0] = vmulq_n_f32(v69, 1.0 / sqrtf(vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).f32[0]));
    float v72 = *(float *)(a1 + 512);
    float v73 = *(float *)(a1 + 524);
    if (v72 >= v73)
    {
      float v74 = *(float *)(a1 + 516);
      if (v74 >= v73)
      {
        uint64_t v258 = 0;
        sub_1B6DF95D4((float32x2_t *)a1, v261, (float *)&v258 + 1, (float32x4_t *)&v259, (float *)&v258);
        uint64_t v165 = v258;
        float v166 = *(float *)(a1 + 496);
        if (*((float *)&v258 + 1) > (float)(*(float *)&v258 * v166))
        {
          *(unsigned char *)(a1 + 594) = 1;
          float v167 = *((float *)&v165 + 1) - (float)(*(float *)&v165 * v166);
          float v168 = 1.0;
          if (*((float *)&v165 + 1) < *(float *)&v165 && v166 < 1.0) {
            float v168 = v167 / (float)(*(float *)&v165 + (float)((float)-*(float *)&v165 * v166));
          }
          *(float *)(a1 + 596) = v168;
          *(float *)(a1 + 57sub_1B6DC4968((unsigned int *)this + 2) = v167;
          if (fabsf(*(float *)&v259.i32[1]) <= 0.00000011921)
          {
            int8x16_t v171 = v259;
          }
          else
          {
            float v169 = fabsf(*(float *)&v259.i32[1]* (float)((float)(v74 / v72) * (float)((float)-*(float *)&v259.i32[2] / *(float *)&v259.i32[1])));
            if (*(float *)&v259.i32[2] < 0.0) {
              float v169 = -v169;
            }
            *(float *)&v259.i32[2] = v169;
            int8x16_t v170 = (int8x16_t)vmulq_f32((float32x4_t)v259, (float32x4_t)v259);
            int8x16_t v171 = (int8x16_t)vmulq_n_f32((float32x4_t)v259, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v170.i8, *(float32x2_t *)v170.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL)).f32[0]));
          }
          v174.i64[0] = 0x8000000080000000;
          v174.i64[1] = 0x8000000080000000;
          int8x16_t v175 = veorq_s8(v171, v174);
          int8x16_t v176 = (int8x16_t)v253;
          int32x2_t v177 = (int32x2_t)vextq_s8(v175, v175, 8uLL).u64[0];
          int32x2_t v178 = vzip1_s32(v177, *(int32x2_t *)v175.i8);
          float32x2_t v179 = (float32x2_t)vextq_s8(v176, v176, 4uLL).u64[0];
          *(float32x2_t *)v174.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL), *(int32x2_t *)v253.f32), (float32x2_t)vext_s8(*(int8x8_t *)v175.i8, (int8x8_t)v177, 4uLL));
          v174.u64[1] = (unint64_t)vmul_f32(v179, (float32x2_t)vrev64_s32(v178));
          *(float32x2_t *)v180.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v175.i8, v253, 3), vmul_f32(v179, (float32x2_t)v178));
          v180.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v175.i8, 1), vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 0xCuLL), (float32x2_t)v178));
          float32x4_t v181 = vsubq_f32((float32x4_t)veorq_s8(v180, (int8x16_t)xmmword_1B6E72E20), (float32x4_t)v174);
          *(int32x2_t *)v174.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL), *(int32x2_t *)v181.f32);
          v180.i64[0] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 4uLL).u64[0];
          float32x2_t v182 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v254, *(int8x8_t *)v256.f32, 4uLL), *(float32x2_t *)v174.i8);
          *(float32x2_t *)v174.i8 = vmul_f32(v31, *(float32x2_t *)v174.i8);
          v174.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v255), *(float32x2_t *)v180.i8);
          *(float32x2_t *)v180.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v181.f32, v256, 3), vmul_f32((float32x2_t)v255, *(float32x2_t *)v180.i8));
          v180.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v256.f32, 1), v182);
          float32x4_t v183 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v256, v181, 3), (float32x4_t)v174), (float32x4_t)v180);
          v183.i32[3] = 0;
          *(float32x4_t *)(a1 + 528) = v183;
          *(_OWORD *)(a1 + 608) = 0u;
          float32x4_t v184 = *a4;
          float32x4_t v185 = a4[1];
          v184.i32[3] = 0;
          v185.i32[3] = 0;
          float32x4_t v186 = a4[2];
          v186.i32[3] = 0;
          int8x16_t v187 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v186, v183, 2), vaddq_f32(vmulq_n_f32(v184, v183.f32[0]), vmulq_lane_f32(v185, *(float32x2_t *)v183.f32, 1))), v183);
          float32x4_t v188 = *a5;
          float32x4_t v189 = a5[1];
          v188.i32[3] = 0;
          v189.i32[3] = 0;
          float32x4_t v190 = a5[2];
          v190.i32[3] = 0;
          int8x16_t v191 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v190, v183, 2), vaddq_f32(vmulq_n_f32(v188, v183.f32[0]), vmulq_lane_f32(v189, *(float32x2_t *)v183.f32, 1))), v183);
          *(float *)(a1 + 560) = 1.0
                               / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v187.i8, *(float32x2_t *)v187.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL))).f32[0];
        }
        goto LABEL_49;
      }
    }
    v71.i32[0] = *(_DWORD *)(a1 + 368);
    v71.i32[1] = *(_DWORD *)(a1 + 384);
    v71.i32[2] = *(_DWORD *)(a1 + 400);
    float32x4_t v75 = a2[1];
    int8x16_t v76 = (int8x16_t)vmulq_f32(*a2, v71);
    int8x16_t v77 = (int8x16_t)vmulq_f32(v71, v75);
    float32x4_t v78 = a2[2];
    int8x16_t v79 = (int8x16_t)vmulq_f32(v71, v78);
    v79.i32[3] = 0;
    float32x2_t v80 = vadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v77.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)));
    float32x4_t v81 = (float32x4_t)vextq_s8(v79, v79, 8uLL);
    float32x2_t v82 = vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v81.f32), 0);
    v81.i32[0] = *(_DWORD *)(a1 + 372);
    v81.i32[1] = *(_DWORD *)(a1 + 388);
    v81.i32[2] = *(_DWORD *)(a1 + 404);
    int8x16_t v83 = (int8x16_t)vmulq_f32(*a2, v81);
    int8x16_t v84 = (int8x16_t)vmulq_f32(v75, v81);
    float32x4_t v85 = vmulq_f32(v78, v81);
    float32x4_t v86 = (float32x4_t)vextq_s8(v84, v84, 8uLL);
    v85.i32[3] = 0;
    float32x2_t v87 = vadd_f32(vpadd_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v84.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL), *(int32x2_t *)v86.f32));
    float32x2_t v88 = vpadd_f32(vpadd_f32(*(float32x2_t *)v85.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL)), 0);
    v85.i32[0] = *(_DWORD *)(a1 + 376);
    v85.i32[1] = *(_DWORD *)(a1 + 392);
    v85.i32[2] = *(_DWORD *)(a1 + 408);
    int8x16_t v89 = (int8x16_t)vmulq_f32(*a2, v85);
    int8x16_t v90 = (int8x16_t)vmulq_f32(v75, v85);
    int8x16_t v91 = (int8x16_t)vmulq_f32(v78, v85);
    v91.i32[3] = 0;
    float32x2_t v92 = vadd_f32(vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v90.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)));
    float32x4_t v93 = (float32x4_t)vextq_s8(v91, v91, 8uLL);
    float32x2_t v94 = vpadd_f32(vpadd_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v93.f32), 0);
    v93.i32[0] = *(_DWORD *)(a1 + 432);
    v93.i32[1] = *(_DWORD *)(a1 + 448);
    v93.i32[2] = *(_DWORD *)(a1 + 464);
    int8x16_t v95 = (int8x16_t)vmulq_f32(*a3, v93);
    int8x16_t v96 = (int8x16_t)vmulq_f32(v93, a3[1]);
    int8x16_t v97 = (int8x16_t)vmulq_f32(v93, a3[2]);
    v97.i32[3] = 0;
    float32x2_t v98 = vadd_f32(vpadd_f32(*(float32x2_t *)v95.i8, *(float32x2_t *)v96.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL)));
    float32x2_t v99 = vpadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL)), 0);
    *(float32x2_t *)v100.f32 = v98;
    *(float32x2_t *)&v100.u32[2] = v99;
    *(float32x2_t *)v79.i8 = vmul_f32(v80, v98);
    LODWORD(cosval) = vadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), vmul_f32(v82, v99)).u32[0];
    *(float32x2_t *)v97.i8 = vmul_f32(v87, v98);
    LODWORD(sinval) = vadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8), vmul_f32(v88, v99)).u32[0];
    *(float32x2_t *)v97.i8 = vmul_f32(v92, v98);
    LODWORD(v103) = vadd_f32(vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8), vmul_f32(v94, v99)).u32[0];
    if (v72 >= v73)
    {
      if (fabsf(cosval) < 0.00000011921 && fabsf(sinval) < 0.00000011921) {
        goto LABEL_46;
      }
      *(unsigned char *)(a1 + 594) = 1;
      if (v72 < v73) {
        goto LABEL_46;
      }
      __int32 v244 = v94.i32[0];
      float32x2_t v245 = v99;
      float32x2_t v246 = v98;
      __int32 v247 = v88.i32[0];
      float32x4_t v248 = v100;
      float32x2_t v249 = v80;
      __int32 v250 = v82.i32[0];
      float v240 = sinval;
      float v242 = cosval;
      float v111 = atan2f(sinval, cosval);
      if (v111 > v72)
      {
        __float2 v112 = __sincosf_stret(v72);
        float cosval = v112.__cosval;
        float sinval = v112.__sinval;
        float v103 = 0.0;
LABEL_44:
        float32x2_t v80 = v249;
        v82.i32[0] = v250;
        v88.i32[0] = v247;
        float32x4_t v100 = v248;
        float32x2_t v99 = v245;
        float32x2_t v98 = v246;
        v94.i32[0] = v244;
        goto LABEL_46;
      }
      float sinval = v240;
      float v192 = v242;
      float v103 = 0.0;
      if (v111 < (float)-v72)
      {
        __float2 v193 = __sincosf_stret(v72);
        float cosval = v193.__cosval;
        float v103 = 0.0;
        float sinval = -v193.__sinval;
        goto LABEL_44;
      }
    }
    else
    {
      float v104 = *(float *)(a1 + 516);
      float v105 = fabsf(v103);
      if (v104 < v73)
      {
        if (fabsf(sinval) < 0.00000011921 && v105 < 0.00000011921)
        {
LABEL_49:
          if (*(float *)(a1 + 520) >= 0.0)
          {
            sub_1B6DF96D8(v18, (int8x16_t *)v260, (float *)(a1 + 580), (float32x4_t *)&v259);
            float v203 = *(float *)(a1 + 580);
            float v204 = *(float *)(a1 + 520);
            float v205 = *(float *)(a1 + 496);
            if (v203 > (float)(v204 * v205))
            {
              *(unsigned char *)(a1 + 593) = 1;
              float v206 = v203 - (float)(v204 * v205);
              BOOL v207 = v203 < v204;
              float v208 = 1.0;
              if (v207)
              {
                float v208 = 1.0;
                if (v205 < 1.0) {
                  float v208 = v206 / (float)(v204 + (float)((float)-v204 * v205));
                }
              }
              *(float *)(a1 + 600) = v208;
              v209.i64[0] = 0x8000000080000000;
              v209.i64[1] = 0x8000000080000000;
              int8x16_t v210 = veorq_s8(v259, v209);
              int8x16_t v211 = (int8x16_t)v253;
              int32x2_t v212 = (int32x2_t)vextq_s8(v210, v210, 8uLL).u64[0];
              int32x2_t v213 = vzip1_s32(v212, *(int32x2_t *)v210.i8);
              float32x2_t v214 = (float32x2_t)vextq_s8(v211, v211, 4uLL).u64[0];
              *(float32x2_t *)v209.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL), *(int32x2_t *)v253.f32), (float32x2_t)vext_s8(*(int8x8_t *)v210.i8, (int8x8_t)v212, 4uLL));
              v209.u64[1] = (unint64_t)vmul_f32(v214, (float32x2_t)vrev64_s32(v213));
              *(float32x2_t *)v215.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v210.i8, v253, 3), vmul_f32(v214, (float32x2_t)v213));
              v215.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v210.i8, 1), vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 0xCuLL), (float32x2_t)v213));
              float32x4_t v216 = vsubq_f32((float32x4_t)veorq_s8(v215, (int8x16_t)xmmword_1B6E72E20), (float32x4_t)v209);
              *(int32x2_t *)v209.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL), *(int32x2_t *)v216.f32);
              v215.i64[0] = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 4uLL).u64[0];
              float32x2_t v217 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v254, *(int8x8_t *)v256.f32, 4uLL), *(float32x2_t *)v209.i8);
              *(float32x2_t *)v209.i8 = vmul_f32(v31, *(float32x2_t *)v209.i8);
              v209.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v255), *(float32x2_t *)v215.i8);
              *(float32x2_t *)v215.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v216.f32, v256, 3), vmul_f32((float32x2_t)v255, *(float32x2_t *)v215.i8));
              v215.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v256.f32, 1), v217);
              float32x4_t v218 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v256, v216, 3), (float32x4_t)v209), (float32x4_t)v215);
              v218.i32[3] = 0;
              *(float *)(a1 + 576) = v206;
              *(float32x4_t *)(a1 + 544) = v218;
              float32x4_t v219 = *a4;
              float32x4_t v220 = a4[1];
              v219.i32[3] = 0;
              v220.i32[3] = 0;
              float32x4_t v221 = a4[2];
              v221.i32[3] = 0;
              int8x16_t v222 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v221, v218, 2), vaddq_f32(vmulq_n_f32(v219, v218.f32[0]), vmulq_lane_f32(v220, *(float32x2_t *)v218.f32, 1))), v218);
              float32x4_t v223 = *a5;
              float32x4_t v224 = a5[1];
              v223.i32[3] = 0;
              v224.i32[3] = 0;
              float32x4_t v225 = a5[2];
              v225.i32[3] = 0;
              int8x16_t v226 = (int8x16_t)vmulq_f32(vaddq_f32(vmulq_laneq_f32(v225, v218, 2), vaddq_f32(vmulq_n_f32(v223, v218.f32[0]), vmulq_lane_f32(v224, *(float32x2_t *)v218.f32, 1))), v218);
              *(float *)(a1 + 564) = 1.0
                                   / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v222.i8, *(float32x2_t *)v222.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v226.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL))).f32[0];
            }
            if (*(unsigned char *)(a1 + 594))
            {
              v227.i64[0] = 0x8000000080000000;
              v227.i64[1] = 0x8000000080000000;
              float32x4_t v228 = (float32x4_t)veorq_s8(v259, v227);
              v227.i64[0] = vextq_s8((int8x16_t)v228, (int8x16_t)v228, 8uLL).u64[0];
              int32x2_t v229 = vzip1_s32(*(int32x2_t *)v227.i8, *(int32x2_t *)v228.f32);
              float32x2_t v230 = (float32x2_t)vrev64_s32(v229);
              *(int32x2_t *)&v228.u32[2] = v229;
              *(float32x2_t *)v231.f32 = vmul_f32(v252, (float32x2_t)v229);
              *(float32x2_t *)&v231.u32[2] = vmul_lane_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v228.f32, 1);
              *(float32x2_t *)v227.i8 = vmul_f32((float32x2_t)v29, (float32x2_t)vext_s8(*(int8x8_t *)v228.f32, *(int8x8_t *)v227.i8, 4uLL));
              v227.u64[1] = (unint64_t)vmul_f32(v252, v230);
              float32x4_t v232 = vsubq_f32((float32x4_t)veorq_s8((int8x16_t)vaddq_f32(vmulq_f32(v251, v228), v231), (int8x16_t)xmmword_1B6E72E20), (float32x4_t)v227);
              float32x4_t v233 = (float32x4_t)veorq_s8((int8x16_t)v257, (int8x16_t)xmmword_1B6E72E30);
              *(int32x2_t *)v231.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v232, (int8x16_t)v232, 8uLL), *(int32x2_t *)v232.f32);
              int32x2_t v234 = (int32x2_t)vextq_s8((int8x16_t)v233, (int8x16_t)v233, 8uLL).u64[0];
              int32x2_t v235 = vzip1_s32(v234, *(int32x2_t *)v233.f32);
              float32x2_t v236 = (float32x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 4uLL).u64[0];
              float32x2_t v237 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v234, *(int8x8_t *)v233.f32, 4uLL), *(float32x2_t *)v231.f32);
              *(float32x2_t *)v231.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v233.f32, (int8x8_t)v234, 4uLL), *(float32x2_t *)v231.f32);
              *(float32x2_t *)&v231.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v235), v236);
              *(float32x2_t *)v238.f32 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v232.f32, v233, 3), vmul_f32((float32x2_t)v235, v236));
              *(float32x2_t *)&v238.u32[2] = vadd_f32(vmul_lane_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v233.f32, 1), v237);
              float32x4_t v239 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v233, v232, 3), v231), v238);
              v239.i32[3] = 0;
              *(float32x4_t *)(a1 + 608) = v239;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 580) = 0;
          }
          return;
        }
        *(float32x2_t *)v106.f32 = v80;
        *(float32x2_t *)&v106.u32[2] = v82;
        *(int8x8_t *)v107.f32 = vext_s8((int8x8_t)v98, (int8x8_t)v99, 4uLL);
        *(float32x2_t *)&v107.u32[2] = v98;
        *(int8x8_t *)v108.f32 = vext_s8((int8x8_t)v80, (int8x8_t)v82, 4uLL);
        *(float32x2_t *)&v108.u32[2] = v80;
        int8x16_t v109 = (int8x16_t)vsubq_f32(vmulq_f32(v108, v100), vmulq_f32(v106, v107));
        v107.i64[0] = vextq_s8(v109, v109, 4uLL).u64[0];
        v107.i64[1] = v109.u32[0];
        *(unsigned char *)(a1 + 594) = 1;
        v109.i64[0] = 0x8000000080000000;
        v109.i64[1] = 0x8000000080000000;
        float32x4_t v110 = (float32x4_t)veorq_s8((int8x16_t)v107, v109);
LABEL_48:
        *(float32x4_t *)(a1 + 528) = v110;
        goto LABEL_49;
      }
      if (fabsf(cosval) < 0.00000011921 && v105 < 0.00000011921 || (*(unsigned char *)(a1 + 594) = 1, v104 < v73))
      {
LABEL_46:
        *(float32x2_t *)v86.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v87, sinval), v80, cosval), v92, v103);
        v86.i32[2] = vmlas_n_f32(vmlas_n_f32(sinval * v88.f32[0], cosval, v82.f32[0]), v103, v94.f32[0]);
        int8x16_t v195 = (int8x16_t)vmulq_f32(v86, v86);
        *(int8x8_t *)v196.f32 = vext_s8((int8x8_t)v98, (int8x8_t)v99, 4uLL);
        *(float32x2_t *)&v196.u32[2] = v98;
        float32x4_t v197 = vmulq_n_f32(v86, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v195.i8, *(float32x2_t *)v195.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL)).f32[0]));
        v198.i64[0] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 4uLL).u64[0];
        v198.i64[1] = v197.i64[0];
        int8x16_t v199 = (int8x16_t)vsubq_f32(vmulq_f32(v100, v198), vmulq_f32(v196, v197));
        v198.i64[0] = vextq_s8(v199, v199, 4uLL).u64[0];
        v198.i64[1] = v199.u32[0];
        v199.i64[0] = 0x8000000080000000;
        v199.i64[1] = 0x8000000080000000;
        float32x4_t v200 = (float32x4_t)veorq_s8((int8x16_t)v198, v199);
        *(float32x4_t *)(a1 + 528) = v200;
        int8x16_t v201 = (int8x16_t)vmulq_f32(v200, v200);
        float v202 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v201.i8, *(float32x2_t *)v201.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v201, v201, 8uLL)).f32[0]);
        *(float *)(a1 + 57sub_1B6DC4968((unsigned int *)this + 2) = v202;
        if (fabsf(v202) < 0.00000011921) {
          goto LABEL_49;
        }
        float32x4_t v110 = vmulq_n_f32(v200, 1.0 / v202);
        goto LABEL_48;
      }
      __int32 v244 = v94.i32[0];
      float32x2_t v245 = v99;
      float32x2_t v246 = v98;
      __int32 v247 = v88.i32[0];
      float32x4_t v248 = v100;
      float32x2_t v249 = v80;
      __int32 v250 = v82.i32[0];
      float v241 = v103;
      float v243 = cosval;
      float v172 = atan2f(v103, cosval);
      if (v172 > v104)
      {
        __float2 v173 = __sincosf_stret(v104);
        float cosval = v173.__cosval;
        float v103 = v173.__sinval;
        float sinval = 0.0;
        goto LABEL_44;
      }
      float v103 = v241;
      float v192 = v243;
      float sinval = 0.0;
      if (v172 < (float)-v104)
      {
        __float2 v194 = __sincosf_stret(v104);
        float cosval = v194.__cosval;
        float sinval = 0.0;
        float v103 = -v194.__sinval;
        goto LABEL_44;
      }
    }
    float32x2_t v80 = v249;
    v82.i32[0] = v250;
    v88.i32[0] = v247;
    float32x4_t v100 = v248;
    float32x2_t v99 = v245;
    float32x2_t v98 = v246;
    v94.i32[0] = v244;
    float cosval = v192;
    goto LABEL_46;
  }
  sub_1B6548938((uint64_t)v261, (float32x4_t *)(a1 + 640));
  v261[3] = 0u;
  float32x4_t v113 = *(float32x4_t *)(a1 + 368);
  float32x4_t v114 = *(float32x4_t *)(a1 + 384);
  v113.i32[3] = 0;
  v114.i32[3] = 0;
  float32x4_t v115 = a2[1];
  float32x4_t v116 = *(float32x4_t *)(a1 + 400);
  float32x4_t v117 = *(float32x4_t *)(a1 + 416);
  v116.i32[3] = 0;
  float32x4_t v118 = a2[2];
  float32x4_t v119 = vmlaq_lane_f32(vmulq_n_f32(v113, v118.f32[0]), v114, *(float32x2_t *)v118.f32, 1);
  float32x4_t v120 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v113, v115.f32[0]), v114, *(float32x2_t *)v115.f32, 1), v116, v115, 2);
  int8x16_t v121 = (int8x16_t)vmulq_f32(*a2, v117);
  int8x16_t v122 = (int8x16_t)vmulq_f32(v115, v117);
  int8x16_t v123 = (int8x16_t)vmulq_f32(v118, v117);
  v123.i32[3] = 0;
  float32x4_t v124 = vmlaq_lane_f32(vmulq_n_f32(v113, COERCE_FLOAT(*a2)), v114, *(float32x2_t *)a2->f32, 1);
  *(float32x2_t *)v114.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v122.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)));
  *(float32x2_t *)&v114.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v123.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)), 0);
  int32x4_t v125 = (int32x4_t)vmlaq_laneq_f32(v124, v116, *a2, 2);
  float32x4_t v126 = a3[1];
  float32x4_t v127 = *(float32x4_t *)(a1 + 432);
  float32x4_t v128 = *(float32x4_t *)(a1 + 448);
  v127.i32[3] = 0;
  v128.i32[3] = 0;
  float32x4_t v129 = *(float32x4_t *)(a1 + 464);
  float32x4_t v130 = *(float32x4_t *)(a1 + 480);
  v129.i32[3] = 0;
  float32x4_t v131 = vmlaq_laneq_f32(v119, v116, v118, 2);
  float32x4_t v132 = a3[2];
  float32x4_t v133 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, v126.f32[0]), v128, *(float32x2_t *)v126.f32, 1), v129, v126, 2);
  int8x16_t v134 = (int8x16_t)vmulq_f32(*a3, v130);
  int8x16_t v135 = (int8x16_t)vmulq_f32(v126, v130);
  int8x16_t v136 = (int8x16_t)vmulq_f32(v132, v130);
  v136.i32[3] = 0;
  float32x4_t v137 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, COERCE_FLOAT(*a3)), v128, *(float32x2_t *)a3->f32, 1), v129, *a3, 2);
  float32x4_t v138 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, v132.f32[0]), v128, *(float32x2_t *)v132.f32, 1), v129, v132, 2);
  *(float32x2_t *)v127.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v134.i8, *(float32x2_t *)v135.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL)));
  *(float32x2_t *)&v127.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v136.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL)), 0);
  float32x4_t v139 = v261[0];
  float32x4_t v140 = v261[1];
  v139.i32[3] = 0;
  v140.i32[3] = 0;
  float32x4_t v141 = v261[2];
  v141.i32[3] = 0;
  float32x4_t v142 = vmlaq_lane_f32(vmulq_n_f32(v139, v138.f32[0]), v140, *(float32x2_t *)v138.f32, 1);
  float32x4_t v143 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v133.f32[0]), v140, *(float32x2_t *)v133.f32, 1), v141, v133, 2);
  float32x4_t v144 = vmulq_f32(v137, (float32x4_t)0);
  int8x16_t v145 = (int8x16_t)vmulq_f32(v133, (float32x4_t)0);
  int8x16_t v146 = (int8x16_t)vmulq_f32(v138, (float32x4_t)0);
  v146.i32[3] = 0;
  *(float32x2_t *)v144.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL)), vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v145.i8));
  *(float32x2_t *)&v144.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v146.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL)), 0);
  float32x4_t v147 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v137.f32[0]), v140, *(float32x2_t *)v137.f32, 1), v141, v137, 2);
  float32x4_t v148 = vmlaq_laneq_f32(v142, v141, v138, 2);
  float32x4_t v149 = (float32x4_t)vtrn1q_s32(v125, (int32x4_t)v120);
  *(int32x2_t *)v141.f32 = vzip2_s32(*(int32x2_t *)v131.f32, 0);
  v145.i32[0] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
  v146.i64[0] = v131.u32[0];
  v131.i64[0] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u64[0];
  v149.i64[1] = v146.i64[0];
  float32x4_t v150 = vnegq_f32(vaddq_f32(a2[3], v114));
  int8x16_t v151 = (int8x16_t)vmulq_f32(v149, v150);
  *(int32x2_t *)v120.f32 = vzip2_s32(*(int32x2_t *)v125.i8, *(int32x2_t *)v120.f32);
  v120.i64[1] = v141.i64[0];
  float32x4_t v152 = vmulq_f32(v120, v150);
  v131.i64[1] = v145.u32[0];
  int8x16_t v153 = (int8x16_t)vmulq_f32(v131, v150);
  v153.i32[3] = 0;
  float32x4_t v154 = vaddq_f32(a3[3], v127);
  *(float32x2_t *)v152.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL)), vpadd_f32(*(float32x2_t *)v151.i8, *(float32x2_t *)v152.f32));
  *(float32x2_t *)&v152.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v153.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL)), 0);
  v149.i32[3] = 0;
  v120.i32[3] = 0;
  v131.i32[3] = 0;
  float32x4_t v155 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v143.f32[0]), v120, *(float32x2_t *)v143.f32, 1), v131, v143, 2);
  int8x16_t v156 = (int8x16_t)vmulq_f32(v147, v152);
  float32x4_t v157 = vmulq_f32(v143, v152);
  int8x16_t v158 = (int8x16_t)vmulq_f32(v148, v152);
  v158.i32[3] = 0;
  *(float32x2_t *)v157.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL)), vpadd_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v157.f32));
  *(float32x2_t *)&v157.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v158.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)), 0);
  v260[0] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v147.f32[0]), v120, *(float32x2_t *)v147.f32, 1), v131, v147, 2);
  v260[1] = v155;
  v260[2] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, v148.f32[0]), v120, *(float32x2_t *)v148.f32, 1), v131, v148, 2);
  v260[3] = vaddq_f32(vaddq_f32(v154, v144), v157);
  sub_1B6DD7060(v260[0].f32, (float32x4_t *)&v259);
  v159.i64[0] = v259.i64[0];
  v159.i64[1] = v259.u32[2];
  int8x16_t v160 = (int8x16_t)vmulq_f32(v159, v159);
  LODWORD(v161) = vadd_f32(vpadd_f32(*(float32x2_t *)v160.i8, *(float32x2_t *)v160.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v160, v160, 8uLL)).u32[0];
  if (fabsf(v161) >= 0.00000011921)
  {
    *(float32x4_t *)(a1 + 528) = vmulq_n_f32(v159, 1.0 / sqrtf(v161));
    float v162 = *(float *)&v259.i32[3];
    if (*(float *)&v259.i32[3] < -1.0) {
      float v162 = -1.0;
    }
    if (v162 > 1.0) {
      float v162 = 1.0;
    }
    float v163 = acosf(v162);
    float v164 = v163 + v163;
    *(float *)(a1 + 57sub_1B6DC4968((unsigned int *)this + 2) = v164;
    if (fabsf(v164) >= 0.00000011921) {
      *(unsigned char *)(a1 + 594) = 1;
    }
  }
}

uint64_t sub_1B6DF7DA4(uint64_t a1, uint64_t a2)
{
  return sub_1B6DF7DBC(a1, a2, (float32x4_t *)(*(void *)(a1 + 40) + 16), (float32x4_t *)(*(void *)(a1 + 48) + 16), (float32x4_t *)(*(void *)(a1 + 40) + 304), (float32x4_t *)(*(void *)(a1 + 48) + 304));
}

uint64_t sub_1B6DF7DBC(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  sub_1B6DF6E78(a1, a3, a4, a5, a6);
  uint64_t v10 = 0;
  float32x2_t v11 = *(_DWORD **)(a2 + 8);
  *float32x2_t v11 = 1065353216;
  uint64_t v12 = *(int *)(a2 + 40);
  v11[v12 + 1] = 1065353216;
  v11[2 * (int)v12 + 2] = 1065353216;
  float32x4_t v13 = *(float32x4_t *)(a1 + 416);
  float32x4_t v14 = vmulq_f32(*a3, v13);
  int8x16_t v15 = (int8x16_t)vmulq_f32(v13, a3[1]);
  int8x16_t v16 = (int8x16_t)vmulq_f32(v13, a3[2]);
  v16.i32[3] = 0;
  *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v15.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)));
  *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
  uint64_t v17 = *(void *)(a2 + 16);
  uint64_t v18 = v17 + 4 * v12;
  uint64_t v19 = v17 + 8 * v12;
  float32x4_t v20 = vnegq_f32(v14);
  *(_DWORD *)uint64_t v17 = 0;
  *(float *)(v17 + 4) = -v20.f32[2];
  *(_DWORD *)(v17 + 8) = v20.i32[1];
  *(_DWORD *)(v17 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)uint64_t v18 = v20.i32[2];
  *(_DWORD *)(v18 + 4) = 0;
  *(float *)(v18 + 8) = -v20.f32[0];
  *(_DWORD *)(v18 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(float *)uint64_t v19 = -v20.f32[1];
  *(_DWORD *)(v19 + 4) = v20.i32[0];
  *(void *)(v19 + 8) = 0;
  int32x2_t v21 = *(_DWORD **)(a2 + 24);
  *int32x2_t v21 = -1082130432;
  uint64_t v22 = *(int *)(a2 + 40);
  v21[v22 + 1] = -1082130432;
  v21[2 * (int)v22 + 2] = -1082130432;
  float32x4_t v66 = v14;
  float32x4_t v23 = *(float32x4_t *)(a1 + 480);
  int8x16_t v24 = (int8x16_t)vmulq_f32(*a4, v23);
  int8x16_t v25 = (int8x16_t)vmulq_f32(v23, a4[1]);
  int8x16_t v26 = (int8x16_t)vmulq_f32(v23, a4[2]);
  v26.i32[3] = 0;
  *(float32x2_t *)v24.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
  *(float32x2_t *)v26.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), 0);
  uint64_t v27 = *(void *)(a2 + 32);
  uint64_t v28 = v27 + 4 * v22;
  uint64_t v29 = v27 + 8 * v22;
  *(_DWORD *)uint64_t v27 = 0;
  *(float *)(v27 + 4) = -*(float *)v26.i32;
  *(_DWORD *)(v27 + 8) = v24.i32[1];
  *(_DWORD *)(v27 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)uint64_t v28 = v26.u32[0];
  *(float *)(v28 + 8) = -*(float *)v24.i32;
  *(_DWORD *)(v28 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(float *)uint64_t v29 = -*(float *)&v24.i32[1];
  *(_DWORD *)(v29 + 4) = v24.i32[0];
  v24.i64[1] = v26.i64[0];
  int8x16_t v65 = v24;
  *(void *)(v29 + 8) = 0;
  int v30 = *(_DWORD *)(a1 + 688);
  float32x2_t v31 = (float *)(a1 + 696);
  if ((v30 & 2) == 0) {
    float32x2_t v31 = (float *)(a2 + 4);
  }
  float v32 = *v31 * *(float *)a2;
  uint64_t v33 = *(void *)(a2 + 48);
  uint64_t v34 = *(int *)(a2 + 40);
  uint64_t v35 = 12;
  uint64_t v37 = *(void *)(a2 + 64);
  uint64_t v36 = *(void *)(a2 + 72);
  uint64_t result = 4286578687;
  do
  {
    *(float *)(v33 + v10) = v32
                          * (float)((float)((float)(*(float *)&v65.i32[v35 - 12] + a4->f32[v35]) - v66.f32[v35 - 12])
                                  - a3->f32[v35]);
    *(_DWORD *)(v37 + v10) = -8388609;
    *(_DWORD *)(v36 + v10) = 2139095039;
    if (v30) {
      *(_DWORD *)(*(void *)(a2 + 56) + v10) = *(_DWORD *)(a1 + 692);
    }
    v10 += 4 * v34;
    ++v35;
  }
  while (v35 != 15);
  int v39 = 3 * v34;
  if (*(unsigned char *)(a1 + 594))
  {
    uint64_t v40 = *(void *)(a2 + 16);
    uint64_t v41 = *(void *)(a2 + 32);
    float v42 = *(float *)(a1 + 524);
    if (*(float *)(a1 + 512) >= v42 || *(float *)(a1 + 516) >= v42)
    {
      float32x4_t v57 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 528), *(float *)(a1 + 504)), *(float *)(a1 + 504));
      *(_DWORD *)(v40 + 4 * v39) = v57.i32[0];
      uint64_t result = 12 * v34 + 4;
      *(_DWORD *)(v40 + result) = v57.i32[1];
      uint64_t v58 = 4 * v39 + 8;
      *(_DWORD *)(v40 + v58) = v57.i32[2];
      *(float *)(v41 + 4 * v39) = -v57.f32[0];
      *(float *)(v41 + result) = -v57.f32[1];
      *(float *)(v41 + v58) = -v57.f32[2];
      *(float *)(v33 + 4 * v39) = (float)(*(float *)a2 * *(float *)(a1 + 500)) * *(float *)(a1 + 572);
      if ((v30 & 4) != 0) {
        *(_DWORD *)(*(void *)(a2 + 56) + 4 * v39) = *(_DWORD *)(a1 + 700);
      }
      *(_DWORD *)(v37 + 4 * v39) = 0;
      if (!*(unsigned char *)(a1 + 624) || (float v59 = *(float *)(a1 + 656), v59 < 0.0)) {
        float v59 = 3.4028e38;
      }
      *(float *)(v36 + 4 * v39) = v59;
      int v39 = 4 * v34;
    }
    else
    {
      float32x4_t v43 = *(float32x4_t *)(a1 + 368);
      float32x4_t v44 = *(float32x4_t *)(a1 + 384);
      v43.i32[3] = 0;
      v44.i32[3] = 0;
      float32x4_t v45 = *(float32x4_t *)(a1 + 400);
      v45.i32[3] = 0;
      float32x4_t v46 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&a3[1])), v44, *(float32x2_t *)a3[1].f32, 1), v45, a3[1], 2);
      float32x4_t v47 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*a3)), v44, *(float32x2_t *)a3->f32, 1), v45, *a3, 2);
      float32x4_t v48 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&a3[2])), v44, *(float32x2_t *)a3[2].f32, 1), v45, a3[2], 2);
      v45.i64[0] = __PAIR64__(v46.u32[1], v47.u32[1]);
      v45.i64[1] = v48.u32[1];
      v49.i64[0] = __PAIR64__(v46.u32[2], v47.u32[2]);
      v49.i64[1] = v48.u32[2];
      uint64_t v50 = 4 * v39;
      *(int32x2_t *)(v40 + v50) = vzip2_s32(*(int32x2_t *)v47.f32, *(int32x2_t *)v46.f32);
      v50 += 8;
      *(_DWORD *)(v40 + v50) = v48.i32[1];
      uint64_t v51 = 16 * v34;
      *(_DWORD *)(v40 + 16 * v34) = v47.i32[2];
      unint64_t v52 = (unint64_t)(4 * (int)v34) >> 2;
      uint64_t v53 = (16 * v52) | 4;
      *(_DWORD *)(v40 + v53) = v46.i32[2];
      uint64_t result = (16 * v52) | 8;
      *(_DWORD *)(v40 + result) = v48.i32[2];
      float v54 = (float *)(v41 + 4 * v39);
      *float v54 = -v47.f32[1];
      v54[1] = -v46.f32[1];
      *(float *)(v41 + v50) = -v48.f32[1];
      *(float *)(v41 + v51) = -v47.f32[2];
      *(float *)(v41 + v53) = -v46.f32[2];
      *(float *)(v41 + result) = -v48.f32[2];
      v47.f32[0] = *(float *)a2 * *(float *)(a1 + 504);
      int8x16_t v55 = (int8x16_t)vmulq_f32(v45, *(float32x4_t *)(a1 + 528));
      *(float *)(v33 + 4 * v39) = v47.f32[0]
                                  * vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)).f32[0];
      int8x16_t v56 = (int8x16_t)vmulq_f32(v49, *(float32x4_t *)(a1 + 528));
      *(float *)(v33 + v51) = v47.f32[0]
                            * vadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)).f32[0];
      uint64_t v37 = *(void *)(a2 + 64);
      *(_DWORD *)(v37 + 4 * v39) = -8388609;
      uint64_t v36 = *(void *)(a2 + 72);
      *(_DWORD *)(v36 + 4 * v39) = 2139095039;
      *(_DWORD *)(v37 + v51) = -8388609;
      *(_DWORD *)(v36 + v51) = 2139095039;
      int v39 = 5 * v34;
    }
  }
  if (*(unsigned char *)(a1 + 593))
  {
    float32x4_t v60 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 544), *(float *)(a1 + 504)), *(float *)(a1 + 504));
    uint64_t v61 = *(void *)(a2 + 16);
    uint64_t v62 = *(void *)(a2 + 32);
    uint64_t v63 = 4 * v39;
    *(void *)(v61 + v63) = v60.i64[0];
    v63 += 8;
    *(_DWORD *)(v61 + v63) = v60.i32[2];
    float32x2_t v64 = (float *)(v62 + 4 * v39);
    *float32x2_t v64 = -v60.f32[0];
    v64[1] = -v60.f32[1];
    *(float *)(v62 + v63) = -v60.f32[2];
    *(float *)(*(void *)(a2 + 48) + 4 * v39) = (float)(*(float *)a2 * *(float *)(a1 + 500)) * *(float *)(a1 + 576);
    if ((v30 & 4) != 0) {
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * v39) = *(_DWORD *)(a1 + 700);
    }
    if (*(float *)(a1 + 520) <= 0.0)
    {
      *(_DWORD *)(v37 + 4 * v39) = -8388609;
      goto LABEL_24;
    }
    if (*(float *)(a1 + 576) > 0.0)
    {
      *(_DWORD *)(v37 + 4 * v39) = 0;
LABEL_24:
      *(_DWORD *)(v36 + 4 * v39) = 2139095039;
      return result;
    }
    *(_DWORD *)(v37 + 4 * v39) = -8388609;
    *(_DWORD *)(v36 + 4 * v39) = 0;
  }
  return result;
}

void sub_1B6DF8320(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 595))
  {
    *(_DWORD *)(a1 + 56) = 0;
    *(void *)(a1 + 584) = 0;
    *(_OWORD *)(a1 + 67sub_1B6DC4968((unsigned int *)this + 2) = 0u;
    if (!*(unsigned char *)(a1 + 592))
    {
      uint64_t v2 = *(float32x4_t **)(a1 + 40);
      int v3 = *(float32x4_t **)(a1 + 48);
      float32x4_t v4 = *(float32x4_t *)(a1 + 416);
      float32x4_t v5 = vmulq_f32(v2[1], v4);
      int8x16_t v6 = (int8x16_t)vmulq_f32(v4, v2[2]);
      int8x16_t v7 = (int8x16_t)vmulq_f32(v4, v2[3]);
      v7.i32[3] = 0;
      *(float32x2_t *)v5.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
      *(float32x2_t *)&v5.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
      float32x4_t v8 = vaddq_f32(v5, v2[4]);
      float32x4_t v9 = *(float32x4_t *)(a1 + 480);
      float32x4_t v10 = vmulq_f32(v3[1], v9);
      int8x16_t v11 = (int8x16_t)vmulq_f32(v9, v3[2]);
      int8x16_t v12 = (int8x16_t)vmulq_f32(v9, v3[3]);
      v12.i32[3] = 0;
      *(float32x2_t *)v10.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v11.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
      *(float32x2_t *)&v10.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), 0);
      float32x4_t v13 = vaddq_f32(v10, v3[4]);
      float32x4_t v14 = vsubq_f32(v13, v8);
      v14.i32[3] = 0;
      int8x16_t v15 = (int8x16_t)vmulq_f32(v14, v14);
      float v16 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).f32[0];
      if (v16 <= 0.00000011921)
      {
        long long v59 = xmmword_1B6E4F300;
        float32x2_t v18 = 0;
        v17.i32[0] = 1.0;
      }
      else
      {
        int8x16_t v17 = (int8x16_t)vmulq_n_f32(v14, 1.0 / sqrtf(v16));
        long long v59 = (__int128)v17;
        float32x2_t v18 = (float32x2_t)vextq_s8(v17, v17, 4uLL).u64[0];
      }
      uint64_t v19 = 0;
      BOOL v20 = fabsf(v18.f32[1]) <= 0.70711;
      float v21 = vmul_f32(v18, v18).f32[0] + (float)(*(float *)v17.i32 * *(float *)v17.i32);
      float v22 = 1.0 / sqrtf(v21);
      float v23 = -(float)(v18.f32[0] * v22);
      float v24 = *(float *)v17.i32 * v22;
      float v25 = -(float)(v18.f32[1] * (float)(*(float *)v17.i32 * v22));
      float v26 = v18.f32[1] * v23;
      float v27 = v21 * v22;
      float v28 = vmlas_n_f32(v18.f32[1] * v18.f32[1], v18.f32[0], v18.f32[0]);
      float v29 = sqrtf(v28);
      float v30 = -(float)(v18.f32[1] * (float)(1.0 / v29));
      float v31 = (float)(1.0 / v29) * v18.f32[0];
      float v32 = v28 * (float)(1.0 / v29);
      float v33 = -(float)(*(float *)v17.i32 * v31);
      float v34 = v30 * *(float *)v17.i32;
      if (v20)
      {
        float v30 = v24;
        float v31 = 0.0;
      }
      else
      {
        float v23 = 0.0;
      }
      if (v20) {
        float v35 = v25;
      }
      else {
        float v35 = v32;
      }
      if (v20) {
        float v36 = v26;
      }
      else {
        float v36 = v33;
      }
      float v60 = v23;
      float v61 = v30;
      if (v20) {
        float v34 = v27;
      }
      float v62 = v31;
      float v63 = v35;
      float v64 = v36;
      float v65 = v34;
      uint64_t v37 = (float32x4_t *)(a1 + 80);
      float32x4_t v53 = v13;
      float32x4_t v54 = v8;
      do
      {
        uint64_t v38 = *(void *)(a1 + 40);
        uint64_t v39 = *(void *)(a1 + 48);
        int32x4_t v40 = *(int32x4_t *)(v38 + 16);
        int32x4_t v41 = *(int32x4_t *)(v38 + 32);
        int8x16_t v42 = (int8x16_t)vtrn1q_s32(v40, v41);
        int8x16_t v43 = *(int8x16_t *)(v38 + 48);
        float32x4_t v44 = *(float32x4_t *)(v38 + 64);
        *(int32x2_t *)v40.i8 = vzip2_s32(*(int32x2_t *)v40.i8, *(int32x2_t *)v41.i8);
        v41.i64[0] = vextq_s8(v42, v42, 8uLL).u64[0];
        v42.i64[1] = v43.u32[0];
        v40.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v43.i8, 0);
        v41.i64[1] = vextq_s8(v43, v43, 8uLL).u32[0];
        v58[0] = (float32x4_t)v42;
        v58[1] = (float32x4_t)v40;
        float v58[2] = (float32x4_t)v41;
        int32x4_t v45 = *(int32x4_t *)(v39 + 16);
        int32x4_t v46 = *(int32x4_t *)(v39 + 32);
        int8x16_t v47 = (int8x16_t)vtrn1q_s32(v45, v46);
        int8x16_t v48 = *(int8x16_t *)(v39 + 48);
        float32x4_t v49 = *(float32x4_t *)(v39 + 64);
        *(int32x2_t *)v45.i8 = vzip2_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v46.i8);
        v46.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
        v47.i64[1] = v48.u32[0];
        v45.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v48.i8, 0);
        v46.i64[1] = vextq_s8(v48, v48, 8uLL).u32[0];
        v57[0] = (float32x4_t)v47;
        v57[1] = (float32x4_t)v45;
        v57[2] = (float32x4_t)v46;
        float32x4_t v50 = vsubq_f32(v8, v44);
        v50.i32[3] = 0;
        float32x4_t v56 = v50;
        float32x4_t v51 = vsubq_f32(v13, v49);
        v51.i32[3] = 0;
        float32x4_t v55 = v51;
        sub_1B6DF9BEC(v37, v58, v57, (int8x8_t *)&v56, (int8x8_t *)&v55, (float32x4_t *)((char *)&v59 + v19), (float32x4_t *)(v38 + 448), (float32x4_t *)(v39 + 448), *(float *)(v38 + 384), *(float *)(v39 + 384));
        float32x4_t v13 = v53;
        float32x4_t v8 = v54;
        v19 += 16;
        uint64_t v37 = v52 + 6;
      }
      while (v19 != 48);
    }
    sub_1B6DF6E78(a1, (float32x4_t *)(*(void *)(a1 + 40) + 16), (float32x4_t *)(*(void *)(a1 + 48) + 16), (float32x4_t *)(*(void *)(a1 + 40) + 304), (float32x4_t *)(*(void *)(a1 + 48) + 304));
  }
}

void sub_1B6DF860C(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  if (!*(unsigned char *)(a1 + 595)) {
    return;
  }
  if (!*(unsigned char *)(a1 + 592))
  {
    uint64_t v8 = 0;
    float32x4_t v10 = *(float32x4_t **)(a1 + 40);
    float32x4_t v9 = *(float32x4_t **)(a1 + 48);
    float32x4_t v11 = v9[4];
    float32x4_t v12 = *(float32x4_t *)(a1 + 480);
    int8x16_t v13 = (int8x16_t)vmulq_f32(v9[1], v12);
    int8x16_t v14 = (int8x16_t)vmulq_f32(v12, v9[2]);
    *(float32x2_t *)v15.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
    int8x16_t v16 = (int8x16_t)vmulq_f32(v12, v9[3]);
    v16.i32[3] = 0;
    *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), 0);
    float32x4_t v17 = *(float32x4_t *)(a1 + 416);
    float32x4_t v18 = vmulq_f32(v10[1], v17);
    int8x16_t v19 = (int8x16_t)vmulq_f32(v17, v10[2]);
    float32x4_t v20 = v10[4];
    int8x16_t v21 = (int8x16_t)vmulq_f32(v17, v10[3]);
    v21.i32[3] = 0;
    *(float32x2_t *)v18.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
    *(float32x2_t *)&v18.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
    float32x4_t v22 = vaddq_f32(v18, v20);
    float32x4_t v23 = vsubq_f32(v22, v20);
    v19.i64[0] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    v23.i32[3] = 0;
    float32x4_t v24 = vaddq_f32(v15, v11);
    float32x4_t v25 = vsubq_f32(v24, v11);
    v15.i64[0] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    v25.i32[3] = 0;
    float32x4_t v26 = vaddq_f32(a2[12], a2[5]);
    v27.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL).u64[0];
    v27.i64[1] = v26.i64[0];
    *(int8x8_t *)v28.f32 = vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v19.i8, 4uLL);
    v28.i64[1] = v23.i64[0];
    int8x16_t v29 = (int8x16_t)vsubq_f32(vmulq_f32(v28, v26), vmulq_f32(v27, v23));
    v26.i64[0] = vextq_s8(v29, v29, 4uLL).u64[0];
    v26.i64[1] = v29.i64[0];
    float32x4_t v30 = vaddq_f32(a3[12], a3[5]);
    v31.i64[0] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
    v31.i64[1] = v30.i64[0];
    *(int8x8_t *)v32.f32 = vext_s8(*(int8x8_t *)v25.f32, *(int8x8_t *)v15.f32, 4uLL);
    v32.i64[1] = v25.i64[0];
    int8x16_t v33 = (int8x16_t)vsubq_f32(vmulq_f32(v32, v30), vmulq_f32(v31, v25));
    v30.i64[0] = vextq_s8(v33, v33, 4uLL).u64[0];
    v30.i64[1] = v33.i64[0];
    float32x4_t v34 = vsubq_f32(vaddq_f32(vaddq_f32(a2[11], a2[4]), v26), vaddq_f32(vaddq_f32(a3[11], a3[4]), v30));
    v34.i32[3] = 0;
    float32x4_t v35 = vsubq_f32(v22, v24);
    v35.i32[3] = 0;
    do
    {
      float32x4_t v36 = *(float32x4_t *)(a1 + v8 + 80);
      int8x16_t v37 = (int8x16_t)vmulq_f32(v36, v34);
      int8x16_t v38 = (int8x16_t)vmulq_f32(v36, v35);
      float v39 = (float)((float)((float)(-0.3
                                  * vadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)).f32[0])/ a4)* (float)(1.0 / *(float *)(a1 + v8 + 160)))- (float)(vadd_f32(vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)).f32[0]* (float)(1.0 / *(float *)(a1 + v8 + 160)));
      *(float *)(a1 + 56) = *(float *)(a1 + 56) + v39;
      *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v36.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), 4uLL);
      v40.i64[1] = v36.i64[0];
      if (a2[13].i64[0])
      {
        int32x4_t v41 = *(float32x4_t **)(a1 + 40);
        int8x16_t v42 = (int8x16_t)vsubq_f32(vmulq_f32(v40, v23), vmulq_f32(v28, v36));
        v43.i64[0] = vextq_s8(v42, v42, 4uLL).u64[0];
        v43.i64[1] = v42.i64[0];
        int8x16_t v44 = (int8x16_t)vmulq_f32(v41[21], v43);
        v43.i32[3] = 0;
        int8x16_t v45 = (int8x16_t)vmulq_f32(v41[19], v43);
        float32x4_t v46 = vmulq_f32(v41[20], v43);
        v44.i32[3] = 0;
        *(float32x2_t *)v46.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v46.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL)));
        *(float32x2_t *)&v46.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)), 0);
        float32x4_t v47 = vmulq_n_f32(vmulq_n_f32(v36, v41[24].f32[0]), v39);
        v47.i32[3] = 0;
        float32x4_t v48 = vmulq_n_f32(a2[6], v39);
        v48.i32[3] = 0;
        float32x4_t v49 = vaddq_f32(a2[5], vmulq_f32(v46, v48));
        a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v47));
        a2[5] = v49;
      }
      if (a3[13].i64[0])
      {
        int8x16_t v50 = (int8x16_t)vsubq_f32(vmulq_f32(v40, v25), vmulq_f32(v32, v36));
        v51.i64[0] = vextq_s8(v50, v50, 4uLL).u64[0];
        v51.i64[1] = v50.u32[0];
        *(float *)v50.i32 = -v39;
        unint64_t v52 = *(float32x4_t **)(a1 + 48);
        float32x4_t v53 = vmulq_f32(v52[19], v51);
        int8x16_t v54 = (int8x16_t)vmulq_f32(v52[20], v51);
        *(float32x2_t *)v53.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v54.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)));
        int8x16_t v55 = (int8x16_t)vmulq_f32(v52[21], v51);
        v55.i32[3] = 0;
        *(float32x2_t *)&v53.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), 0);
        float32x4_t v56 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + v8 + 80), v52[24].f32[0]), *(float *)v50.i32);
        v56.i32[3] = 0;
        float32x4_t v57 = vmulq_n_f32(a3[6], *(float *)v50.i32);
        v57.i32[3] = 0;
        float32x4_t v58 = vaddq_f32(a3[5], vmulq_f32(v53, v57));
        a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v56));
        a3[5] = v58;
      }
      v8 += 96;
    }
    while (v8 != 288);
  }
  if (*(unsigned char *)(a1 + 624))
  {
    long long v59 = *(float32x4_t **)(a1 + 40);
    float v60 = *(float32x4_t **)(a1 + 48);
    float32x4_t v61 = v59[2];
    float32x4_t v62 = v59[3];
    float32x4_t v63 = v59[4];
    v293[0] = v59[1];
    v293[1] = v61;
    v293[2] = v62;
    float32x4_t v294 = v63;
    float32x4_t v64 = v60[2];
    v291[0] = v60[1];
    v291[1] = v64;
    float32x4_t v65 = v60[4];
    v291[2] = v60[3];
    float32x4_t v292 = v65;
    float32x4_t v66 = vaddq_f32(a2[12], a2[5]);
    float32x4_t v289 = vaddq_f32(a3[12], a3[5]);
    float32x4_t v290 = v66;
    float32x4_t v285 = (float32x4_t)xmmword_1B6E4F300;
    float32x4_t v286 = (float32x4_t)xmmword_1B6E4F320;
    float32x4_t v287 = (float32x4_t)xmmword_1B6E4F2E0;
    float32x4_t v288 = 0uLL;
    float32x4_t v284 = 0uLL;
    sub_1B6DEF658(v293, &v284, &v290, &v285, a4);
    float32x4_t v280 = (float32x4_t)xmmword_1B6E4F300;
    float32x4_t v281 = (float32x4_t)xmmword_1B6E4F320;
    float32x4_t v282 = (float32x4_t)xmmword_1B6E4F2E0;
    float32x4_t v283 = 0uLL;
    sub_1B6DEF658(v291, &v284, &v289, &v280, a4);
    sub_1B6548938((uint64_t)v279, (float32x4_t *)(a1 + 640));
    v279[3] = 0u;
    float32x4_t v68 = *(float32x4_t *)(a1 + 432);
    float32x4_t v67 = *(float32x4_t *)(a1 + 448);
    float32x4_t v69 = (float32x4_t)v279[0];
    float32x4_t v70 = (float32x4_t)v279[1];
    v69.i32[3] = 0;
    v70.i32[3] = 0;
    float32x4_t v71 = (float32x4_t)v279[2];
    v71.i32[3] = 0;
    float32x4_t v72 = *(float32x4_t *)(a1 + 464);
    float32x4_t v73 = vmlaq_lane_f32(vmulq_n_f32(v69, v72.f32[0]), v70, *(float32x2_t *)v72.f32, 1);
    float32x4_t v74 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v67.f32[0]), v70, *(float32x2_t *)v67.f32, 1), v71, v67, 2);
    int8x16_t v75 = (int8x16_t)vmulq_f32(v68, (float32x4_t)0);
    int8x16_t v76 = (int8x16_t)vmulq_f32(v67, (float32x4_t)0);
    int8x16_t v77 = (int8x16_t)vmulq_f32(v72, (float32x4_t)0);
    v77.i32[3] = 0;
    float32x4_t v78 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v68.f32[0]), v70, *(float32x2_t *)v68.f32, 1), v71, v68, 2);
    *(float32x2_t *)v68.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), vpadd_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v76.i8));
    *(float32x2_t *)&v68.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)), 0);
    int32x4_t v79 = *(int32x4_t *)(a1 + 368);
    float32x4_t v80 = *(float32x4_t *)(a1 + 384);
    float32x4_t v81 = *(float32x4_t *)(a1 + 400);
    float32x4_t v82 = (float32x4_t)vtrn1q_s32(v79, (int32x4_t)v80);
    int32x2_t v83 = vzip2_s32(*(int32x2_t *)v81.f32, 0);
    unsigned __int32 v84 = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
    v81.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
    v82.i64[1] = *(_OWORD *)(a1 + 400);
    v85.i64[0] = 0x8000000080000000;
    v85.i64[1] = 0x8000000080000000;
    float32x4_t v86 = (float32x4_t)veorq_s8(*(int8x16_t *)(a1 + 416), v85);
    int8x16_t v87 = (int8x16_t)vmulq_f32(v82, v86);
    *(int32x2_t *)v80.f32 = vzip2_s32(*(int32x2_t *)v79.i8, *(int32x2_t *)v80.f32);
    *(int32x2_t *)&v80.u32[2] = v83;
    float32x4_t v88 = vmulq_f32(v80, v86);
    v81.i64[1] = v84;
    int8x16_t v89 = (int8x16_t)vmulq_f32(v81, v86);
    v89.i32[3] = 0;
    *(float32x2_t *)v88.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v88.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL)));
    *(float32x2_t *)&v88.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)), 0);
    v82.i32[3] = 0;
    v80.i32[3] = 0;
    v81.i32[3] = 0;
    float32x4_t v90 = vmlaq_laneq_f32(v73, v71, v72, 2);
    float32x4_t v91 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v74.f32[0]), v80, *(float32x2_t *)v74.f32, 1), v81, v74, 2);
    int8x16_t v92 = (int8x16_t)vmulq_f32(v78, v88);
    float32x4_t v93 = vmulq_f32(v74, v88);
    int8x16_t v94 = (int8x16_t)vmulq_f32(v90, v88);
    v94.i32[3] = 0;
    *(float32x2_t *)v93.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL)), vpadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v93.f32));
    *(float32x2_t *)&v93.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v94.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)), 0);
    float32x4_t v95 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v78.f32[0]), v80, *(float32x2_t *)v78.f32, 1), v81, v78, 2);
    float32x4_t v96 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v90.f32[0]), v80, *(float32x2_t *)v90.f32, 1), v81, v90, 2);
    float32x4_t v97 = vaddq_f32(v68, *(float32x4_t *)(a1 + 480));
    float32x4_t v98 = (float32x4_t)vtrn1q_s32((int32x4_t)v95, (int32x4_t)v91);
    *(int32x2_t *)v68.f32 = vzip2_s32(*(int32x2_t *)v95.f32, *(int32x2_t *)v91.f32);
    v95.i32[3] = 0;
    v91.i32[3] = 0;
    v80.i64[0] = v96.u32[0];
    *(int32x2_t *)v92.i8 = vzip2_s32(*(int32x2_t *)v96.f32, 0);
    v82.i32[0] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
    v96.i32[3] = 0;
    float32x4_t v99 = vaddq_f32(v97, v93);
    int8x16_t v100 = (int8x16_t)vmulq_f32(v99, v282);
    v100.i32[3] = 0;
    float32x4_t v101 = vmlaq_lane_f32(vmulq_n_f32(v95, v282.f32[0]), v91, *(float32x2_t *)v282.f32, 1);
    float32x4_t v102 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, v281.f32[0]), v91, *(float32x2_t *)v281.f32, 1), v96, v281, 2);
    float32x4_t v103 = vmlaq_lane_f32(vmulq_n_f32(v95, v280.f32[0]), v91, *(float32x2_t *)v280.f32, 1);
    int8x16_t v104 = (int8x16_t)vmulq_f32(v99, v280);
    int8x16_t v105 = (int8x16_t)vmulq_f32(v99, v281);
    *(float32x2_t *)v97.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL)), vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v105.i8));
    *(float32x2_t *)&v97.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v100.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)), 0);
    v277[0] = vmlaq_laneq_f32(v103, v96, v280, 2);
    v277[1] = v102;
    v277[2] = vmlaq_laneq_f32(v101, v96, v282, 2);
    float32x4_t v278 = vaddq_f32(v97, v283);
    v96.i64[0] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
    v98.i64[1] = v80.i64[0];
    float32x4_t v106 = vnegq_f32(v99);
    float32x4_t v107 = vmulq_f32(v98, v106);
    v68.i64[1] = v92.i64[0];
    int8x16_t v108 = (int8x16_t)vmulq_f32(v68, v106);
    v96.i64[1] = v82.u32[0];
    int8x16_t v109 = (int8x16_t)vmulq_f32(v96, v106);
    v109.i32[3] = 0;
    *(float32x2_t *)v107.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL)), vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v108.i8));
    *(float32x2_t *)&v107.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v109.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)), 0);
    v98.i32[3] = 0;
    v68.i32[3] = 0;
    v96.i32[3] = 0;
    float32x4_t v110 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v286.f32[0]), v68, *(float32x2_t *)v286.f32, 1), v96, v286, 2);
    int8x16_t v111 = (int8x16_t)vmulq_f32(v285, v107);
    int8x16_t v112 = (int8x16_t)vmulq_f32(v107, v286);
    int8x16_t v113 = (int8x16_t)vmulq_f32(v107, v287);
    v113.i32[3] = 0;
    *(float32x2_t *)v76.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v113.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL)), 0);
    float32x4_t v114 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v285.f32[0]), v68, *(float32x2_t *)v285.f32, 1), v96, v285, 2);
    float32x4_t v115 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, v287.f32[0]), v68, *(float32x2_t *)v287.f32, 1), v96, v287, 2);
    *(float32x2_t *)v96.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL)), vpadd_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v112.i8));
    v96.i64[1] = v76.i64[0];
    v275[0] = v114;
    v275[1] = v110;
    v275[2] = v115;
    float32x4_t v276 = vaddq_f32(v96, v288);
    float32x4_t v116 = vmulq_n_f32(vsubq_f32(v278, v294), 1.0 / a4);
    v116.i32[3] = 0;
    float32x4_t v284 = v116;
    float v295 = 0.0;
    sub_1B6DD6E68(v293, (float32x2_t *)v277, &v296, &v295);
    float32x4_t v274 = vmulq_n_f32(vmulq_n_f32(v296, v295), 1.0 / a4);
    float32x4_t v117 = vmulq_n_f32(vsubq_f32(v276, v292), 1.0 / a4);
    v117.i32[3] = 0;
    float32x4_t v284 = v117;
    float v295 = 0.0;
    sub_1B6DD6E68(v291, (float32x2_t *)v275, &v296, &v295);
    float32x4_t v118 = vsubq_f32(v274, v290);
    v118.i32[3] = 0;
    float32x4_t v119 = vsubq_f32(vmulq_n_f32(vmulq_n_f32(v296, v295), 1.0 / a4), v289);
    v119.i32[3] = 0;
    int8x16_t v120 = (int8x16_t)vmulq_f32(v118, v118);
    float32x2_t v121 = vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8);
    float32x4_t v124 = (float32x4_t)vextq_s8(v120, v120, 8uLL);
    float v122 = vadd_f32(v121, *(float32x2_t *)v124.f32).f32[0];
    float v123 = 0.0;
    v124.i64[0] = 0x3400000034000000;
    float v125 = 0.0;
    if (v122 > 0.00000011921)
    {
      float32x4_t v124 = vmulq_n_f32(v118, 1.0 / sqrtf(v122));
      float32x4_t v126 = *(float32x4_t **)(a1 + 40);
      float32x4_t v127 = v126[19];
      float32x4_t v128 = v126[20];
      v127.i32[3] = 0;
      v128.i32[3] = 0;
      float32x4_t v129 = v126[21];
      v129.i32[3] = 0;
      int8x16_t v130 = (int8x16_t)vmulq_f32(v124, vaddq_f32(vaddq_f32(vmulq_n_f32(v127, v124.f32[0]), vmulq_lane_f32(v128, *(float32x2_t *)v124.f32, 1)), vmulq_laneq_f32(v129, v124, 2)));
      LODWORD(v125) = vadd_f32(vpadd_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)).u32[0];
    }
    int8x16_t v131 = (int8x16_t)vmulq_f32(v119, v119);
    float32x2_t v132 = vpadd_f32(*(float32x2_t *)v131.i8, *(float32x2_t *)v131.i8);
    float32x4_t v134 = (float32x4_t)vextq_s8(v131, v131, 8uLL);
    float v133 = vadd_f32(*(float32x2_t *)v134.f32, v132).f32[0];
    v134.i64[0] = 0x3400000034000000;
    if (v133 > 0.00000011921)
    {
      float32x4_t v134 = vmulq_n_f32(v119, 1.0 / sqrtf(v133));
      int8x16_t v135 = *(float32x4_t **)(a1 + 48);
      float32x4_t v136 = v135[19];
      float32x4_t v137 = v135[20];
      v136.i32[3] = 0;
      v137.i32[3] = 0;
      float32x4_t v138 = v135[21];
      v138.i32[3] = 0;
      int8x16_t v139 = (int8x16_t)vmulq_f32(v134, vaddq_f32(vaddq_f32(vmulq_n_f32(v136, v134.f32[0]), vmulq_lane_f32(v137, *(float32x2_t *)v134.f32, 1)), vmulq_laneq_f32(v138, v134, 2)));
      LODWORD(v123) = vadd_f32(vpadd_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL)).u32[0];
    }
    float32x4_t v140 = vmulq_n_f32(v124, v125);
    v140.i32[3] = 0;
    float32x4_t v141 = vmulq_n_f32(v134, v123);
    v141.i32[3] = 0;
    float32x4_t v142 = vaddq_f32(v140, v141);
    int8x16_t v143 = (int8x16_t)vmulq_f32(v142, v142);
    float v144 = vadd_f32(vpadd_f32(*(float32x2_t *)v143.i8, *(float32x2_t *)v143.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL)).f32[0];
    if (v144 <= 0.00000011921) {
      goto LABEL_32;
    }
    int8x16_t v145 = *(float32x4_t **)(a1 + 40);
    int8x16_t v146 = *(float32x4_t **)(a1 + 48);
    float32x4_t v147 = v145[19];
    float32x4_t v148 = v145[20];
    v147.i32[3] = 0;
    v148.i32[3] = 0;
    float32x4_t v149 = vmulq_n_f32(v142, 1.0 / sqrtf(v144));
    float32x4_t v150 = v145[21];
    v150.i32[3] = 0;
    int8x16_t v151 = (int8x16_t)vmulq_f32(v149, vaddq_f32(vaddq_f32(vmulq_n_f32(v147, v149.f32[0]), vmulq_lane_f32(v148, *(float32x2_t *)v149.f32, 1)), vmulq_laneq_f32(v150, v149, 2)));
    float32x4_t v152 = v146[19];
    float32x4_t v153 = v146[20];
    v152.i32[3] = 0;
    v153.i32[3] = 0;
    float32x2_t v154 = vadd_f32(vpadd_f32(*(float32x2_t *)v151.i8, *(float32x2_t *)v151.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL));
    float32x4_t v155 = v146[21];
    v155.i32[3] = 0;
    int8x16_t v156 = (int8x16_t)vmulq_f32(v149, vaddq_f32(vaddq_f32(vmulq_n_f32(v152, v149.f32[0]), vmulq_lane_f32(v153, *(float32x2_t *)v149.f32, 1)), vmulq_laneq_f32(v155, v149, 2)));
    *(float32x2_t *)v156.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v156.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL));
    *(float32x2_t *)v155.f32 = vadd_f32(v154, *(float32x2_t *)v156.i8);
    float32x4_t v157 = vmulq_n_f32(vsubq_f32(vmulq_n_f32(v118, v154.f32[0]), vmulq_n_f32(v119, *(float *)v156.i32)), 1.0 / vmul_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32).f32[0]);
    v157.i32[3] = 0;
    float v158 = *(float *)(a1 + 656);
    if (v158 >= 0.0)
    {
      if (!*(unsigned char *)(a1 + 625)) {
        v154.f32[0] = 1.0;
      }
      float v159 = v158 / v154.f32[0];
      float32x4_t v160 = *(float32x4_t *)(a1 + 672);
      float32x4_t v161 = vaddq_f32(v160, v157);
      int8x16_t v162 = (int8x16_t)vmulq_f32(v161, v161);
      float v163 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v162.i8, *(float32x2_t *)v162.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL)).f32[0]);
      if (v163 > v159)
      {
        float32x4_t v157 = vsubq_f32(vmulq_n_f32(vmulq_n_f32(v161, 1.0 / v163), v159), v160);
        v157.i32[3] = 0;
        float32x4_t v161 = vaddq_f32(v160, v157);
      }
      *(float32x4_t *)(a1 + 67sub_1B6DC4968((unsigned int *)this + 2) = v161;
    }
    int8x16_t v164 = (int8x16_t)vmulq_f32(v157, v157);
    float v165 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v164.i8, *(float32x2_t *)v164.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL)).f32[0]);
    float32x4_t v166 = vmulq_n_f32(v157, 1.0 / v165);
    v166.i32[3] = 0;
    if (a2[13].i64[0])
    {
      float32x4_t v167 = vmulq_f32(v145[19], v166);
      int8x16_t v168 = (int8x16_t)vmulq_f32(v145[20], v166);
      *(float32x2_t *)v167.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v168.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL)));
      int8x16_t v169 = (int8x16_t)vmulq_f32(v145[21], v166);
      v169.i32[3] = 0;
      *(float32x2_t *)&v167.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v169.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL)), 0);
      float32x4_t v170 = vmulq_n_f32((float32x4_t)0, v165);
      v170.i32[3] = 0;
      float32x4_t v171 = vmulq_n_f32(a2[6], v165);
      v171.i32[3] = 0;
      float32x4_t v172 = vaddq_f32(a2[5], vmulq_f32(v167, v171));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v170));
      a2[5] = v172;
    }
    if (!a3[13].i64[0]) {
      goto LABEL_32;
    }
    __float2 v173 = *(float32x4_t **)(a1 + 48);
    float32x4_t v174 = vmulq_f32(v173[19], v166);
    int8x16_t v175 = (int8x16_t)vmulq_f32(v173[20], v166);
    *(float32x2_t *)v174.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v175.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v175, v175, 8uLL)));
    int8x16_t v176 = (int8x16_t)vmulq_f32(v173[21], v166);
    v176.i32[3] = 0;
    *(float32x2_t *)&v174.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v176.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL)), 0);
    float v177 = -v165;
    float32x4_t v178 = vmulq_n_f32((float32x4_t)0, v177);
    v178.i32[3] = 0;
    float32x4_t v179 = vmulq_n_f32(a3[6], v177);
    v179.i32[3] = 0;
    float32x4_t v180 = vaddq_f32(a3[5], vmulq_f32(v174, v179));
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v178));
  }
  else
  {
    float v181 = *(float *)(a1 + 508);
    if (v181 <= 0.00000011921) {
      goto LABEL_32;
    }
    float32x4_t v182 = a2[5];
    float32x4_t v183 = vsubq_f32(vaddq_f32(a3[12], a3[5]), vaddq_f32(a2[12], v182));
    v183.i32[3] = 0;
    int8x16_t v184 = (int8x16_t)vmulq_f32(v183, v183);
    float v185 = vadd_f32(vpadd_f32(*(float32x2_t *)v184.i8, *(float32x2_t *)v184.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL)).f32[0];
    if (v185 <= 0.00000011921) {
      goto LABEL_32;
    }
    float32x4_t v186 = *(float32x4_t **)(a1 + 40);
    int8x16_t v187 = *(float32x4_t **)(a1 + 48);
    float32x4_t v188 = v186[19];
    v188.i32[3] = 0;
    float32x4_t v189 = v186[20];
    v189.i32[3] = 0;
    float32x4_t v190 = vmulq_n_f32(v183, 1.0 / sqrtf(v185));
    float32x4_t v191 = v186[21];
    v191.i32[3] = 0;
    int8x16_t v192 = (int8x16_t)vmulq_f32(v190, vaddq_f32(vaddq_f32(vmulq_n_f32(v188, v190.f32[0]), vmulq_lane_f32(v189, *(float32x2_t *)v190.f32, 1)), vmulq_laneq_f32(v191, v190, 2)));
    float32x4_t v193 = v187[19];
    float32x4_t v194 = v187[20];
    v193.i32[3] = 0;
    v194.i32[3] = 0;
    float32x4_t v195 = v187[21];
    v195.i32[3] = 0;
    int8x16_t v196 = (int8x16_t)vmulq_f32(v190, vaddq_f32(vaddq_f32(vmulq_n_f32(v193, v190.f32[0]), vmulq_lane_f32(v194, *(float32x2_t *)v190.f32, 1)), vmulq_laneq_f32(v195, v190, 2)));
    float32x4_t v197 = vmulq_n_f32(v183, v181* (float)(1.0/ vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v192.i8, *(float32x2_t *)v192.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v192, v192, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v196.i8, *(float32x2_t *)v196.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL))).f32[0]));
    float32x4_t v198 = v197;
    v198.i32[3] = 0;
    int8x16_t v199 = (int8x16_t)vmulq_f32(v198, v198);
    float v200 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v199.i8, *(float32x2_t *)v199.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v199, v199, 8uLL)).f32[0]);
    float32x4_t v201 = vmulq_n_f32(v197, 1.0 / v200);
    v201.i32[3] = 0;
    if (a2[13].i64[0])
    {
      int8x16_t v202 = (int8x16_t)vmulq_f32(v186[19], v201);
      float32x4_t v203 = vmulq_f32(v186[20], v201);
      *(float32x2_t *)v203.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v202.i8, *(float32x2_t *)v203.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v202, v202, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL)));
      int8x16_t v204 = (int8x16_t)vmulq_f32(v186[21], v201);
      v204.i32[3] = 0;
      *(float32x2_t *)&v203.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v204.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v204, v204, 8uLL)), 0);
      float32x4_t v205 = vmulq_n_f32((float32x4_t)0, v200);
      v205.i32[3] = 0;
      float32x4_t v206 = vmulq_n_f32(a2[6], v200);
      v206.i32[3] = 0;
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v205));
      a2[5] = vaddq_f32(v182, vmulq_f32(v203, v206));
    }
    if (!a3[13].i64[0]) {
      goto LABEL_32;
    }
    BOOL v207 = *(float32x4_t **)(a1 + 48);
    float32x4_t v208 = vmulq_f32(v207[19], v201);
    int8x16_t v209 = (int8x16_t)vmulq_f32(v207[20], v201);
    *(float32x2_t *)v208.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v209.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v209, v209, 8uLL)));
    int8x16_t v210 = (int8x16_t)vmulq_f32(v207[21], v201);
    v210.i32[3] = 0;
    *(float32x2_t *)&v208.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v210.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v210, v210, 8uLL)), 0);
    float v211 = -v200;
    float32x4_t v212 = vmulq_n_f32((float32x4_t)0, v211);
    v212.i32[3] = 0;
    float32x4_t v213 = vmulq_n_f32(a3[6], v211);
    v213.i32[3] = 0;
    float32x4_t v180 = vaddq_f32(a3[5], vmulq_f32(v208, v213));
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v212));
  }
  a3[5] = v180;
LABEL_32:
  float32x4_t v214 = vaddq_f32(a2[12], a2[5]);
  float32x4_t v215 = vaddq_f32(a3[12], a3[5]);
  if (*(unsigned char *)(a1 + 594))
  {
    float v216 = *(float *)(a1 + 596);
    float v217 = (float)((float)(v216 * *(float *)(a1 + 572)) * *(float *)(a1 + 500)) / a4;
    float32x4_t v218 = vsubq_f32(v215, v214);
    v218.i32[3] = 0;
    float32x4_t v219 = *(float32x4_t *)(a1 + 528);
    int8x16_t v220 = (int8x16_t)vmulq_f32(v219, v218);
    float v221 = vadd_f32(vpadd_f32(*(float32x2_t *)v220.i8, *(float32x2_t *)v220.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL)).f32[0];
    if (v221 > 0.0) {
      float v217 = v217 + (float)((float)(v216 * v221) * *(float *)(a1 + 504));
    }
    float v222 = *(float *)(a1 + 584);
    float v223 = fmaxf(v222 + (float)(v217 * *(float *)(a1 + 560)), 0.0);
    float32x4_t v224 = vmulq_n_f32(v219, v223 - v222);
    v224.i32[3] = 0;
    float32x4_t v225 = *(float32x4_t *)(a1 + 608);
    int8x16_t v226 = (int8x16_t)vmulq_f32(v225, v224);
    float32x4_t v227 = vmulq_n_f32(v225, vadd_f32(vpadd_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v226.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL)).f32[0]);
    v227.i32[3] = 0;
    float32x4_t v228 = vsubq_f32(v224, v227);
    float32x4_t v229 = v228;
    v229.i32[3] = 0;
    *(float *)(a1 + 584) = v223;
    int8x16_t v230 = (int8x16_t)vmulq_f32(v229, v229);
    float v231 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v230.i8, *(float32x2_t *)v230.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v230, v230, 8uLL)).f32[0]);
    float32x4_t v232 = vmulq_n_f32(v228, 1.0 / v231);
    v232.i32[3] = 0;
    if (a2[13].i64[0])
    {
      float32x4_t v233 = *(float32x4_t **)(a1 + 40);
      float32x4_t v234 = vmulq_f32(v233[19], v232);
      int8x16_t v235 = (int8x16_t)vmulq_f32(v233[20], v232);
      *(float32x2_t *)v234.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v235.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v235, v235, 8uLL)));
      int8x16_t v236 = (int8x16_t)vmulq_f32(v233[21], v232);
      v236.i32[3] = 0;
      *(float32x2_t *)&v234.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v236.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v236, v236, 8uLL)), 0);
      float32x4_t v237 = vmulq_n_f32((float32x4_t)0, v231);
      v237.i32[3] = 0;
      float32x4_t v238 = vmulq_n_f32(a2[6], v231);
      v238.i32[3] = 0;
      float32x4_t v239 = vaddq_f32(a2[5], vmulq_f32(v234, v238));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v237));
      a2[5] = v239;
    }
    if (a3[13].i64[0])
    {
      float v240 = *(float32x4_t **)(a1 + 48);
      float32x4_t v241 = vmulq_f32(v240[19], v232);
      int8x16_t v242 = (int8x16_t)vmulq_f32(v240[20], v232);
      *(float32x2_t *)v241.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v242.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL)));
      int8x16_t v243 = (int8x16_t)vmulq_f32(v240[21], v232);
      v243.i32[3] = 0;
      *(float32x2_t *)&v241.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v243.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v243, v243, 8uLL)), 0);
      float v244 = -v231;
      float32x4_t v245 = vmulq_n_f32((float32x4_t)0, v244);
      v245.i32[3] = 0;
      float32x4_t v246 = vmulq_n_f32(a3[6], v244);
      v246.i32[3] = 0;
      float32x4_t v247 = vaddq_f32(a3[5], vmulq_f32(v241, v246));
      a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v245));
      a3[5] = v247;
    }
  }
  if (*(unsigned char *)(a1 + 593))
  {
    float v248 = *(float *)(a1 + 600);
    float v249 = (float)((float)(v248 * *(float *)(a1 + 576)) * *(float *)(a1 + 500)) / a4;
    float32x4_t v250 = vsubq_f32(v215, v214);
    v250.i32[3] = 0;
    float32x4_t v251 = *(float32x4_t *)(a1 + 544);
    int8x16_t v252 = (int8x16_t)vmulq_f32(v251, v250);
    float v253 = vadd_f32(vpadd_f32(*(float32x2_t *)v252.i8, *(float32x2_t *)v252.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v252, v252, 8uLL)).f32[0];
    if (v253 > 0.0) {
      float v249 = v249 + (float)((float)(v248 * v253) * *(float *)(a1 + 504));
    }
    float v254 = v249 * *(float *)(a1 + 564);
    float v255 = *(float *)(a1 + 588);
    float v256 = fmaxf(v255 + v254, 0.0);
    *(float *)(a1 + 588) = v256;
    float v257 = v256 - v255;
    if (a2[13].i64[0])
    {
      uint64_t v258 = *(float32x4_t **)(a1 + 40);
      float32x4_t v259 = vmulq_f32(v251, v258[19]);
      int8x16_t v260 = (int8x16_t)vmulq_f32(v251, v258[20]);
      *(float32x2_t *)v259.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v259.f32, *(float32x2_t *)v260.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v259, (int8x16_t)v259, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v260, v260, 8uLL)));
      int8x16_t v261 = (int8x16_t)vmulq_f32(v251, v258[21]);
      v261.i32[3] = 0;
      *(float32x2_t *)&v259.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v261.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v261, v261, 8uLL)), 0);
      float32x4_t v262 = vmulq_n_f32((float32x4_t)0, v257);
      v262.i32[3] = 0;
      float32x4_t v263 = vmulq_n_f32(a2[6], v257);
      v263.i32[3] = 0;
      float32x4_t v264 = vaddq_f32(a2[5], vmulq_f32(v259, v263));
      a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v262));
      a2[5] = v264;
    }
    if (a3[13].i64[0])
    {
      float32x4_t v265 = *(float32x4_t **)(a1 + 48);
      float32x4_t v266 = *(float32x4_t *)(a1 + 544);
      float32x4_t v267 = vmulq_f32(v265[19], v266);
      int8x16_t v268 = (int8x16_t)vmulq_f32(v266, v265[20]);
      *(float32x2_t *)v267.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v267.f32, *(float32x2_t *)v268.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL)));
      int8x16_t v269 = (int8x16_t)vmulq_f32(v266, v265[21]);
      v269.i32[3] = 0;
      *(float32x2_t *)&v267.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v269.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL)), 0);
      float v270 = -v257;
      float32x4_t v271 = vmulq_n_f32((float32x4_t)0, v270);
      v271.i32[3] = 0;
      float32x4_t v272 = vmulq_n_f32(a3[6], v270);
      v272.i32[3] = 0;
      float32x4_t v273 = vaddq_f32(a3[5], vmulq_f32(v267, v272));
      a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v271));
      a3[5] = v273;
    }
  }
}

void sub_1B6DF95D4(float32x2_t *a1, float32x4_t *a2, float *a3, float32x4_t *a4, float *a5)
{
  float v10 = a2->f32[3];
  if (v10 < -1.0) {
    float v10 = -1.0;
  }
  if (v10 > 1.0) {
    float v10 = 1.0;
  }
  float v11 = acosf(v10);
  float v12 = v11 + v11;
  *a3 = v12;
  if (v12 > 0.00000011921)
  {
    float32x4_t v13 = *a2;
    v13.i64[1] = a2->u32[2];
    int8x16_t v14 = (int8x16_t)vmulq_f32(v13, v13);
    float32x4_t v15 = vmulq_n_f32(v13, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]));
    *a4 = v15;
    *a5 = a1[64].f32[0];
    if (fabsf(v15.f32[1]) > 0.00000011921)
    {
      __asm { FMOV            V2.2S, #1.0 }
      _D2.f32[0] = COERCE_FLOAT(vmulq_f32(v15, v15).i32[2]) / (float)(v15.f32[1] * v15.f32[1]);
      *a5 = sqrtf((float)(_D2.f32[0] + 1.0) / vaddv_f32(vdiv_f32(_D2, vmul_f32(a1[64], a1[64]))));
    }
  }
}

void sub_1B6DF96D8(uint64_t a1, int8x16_t *a2, float *a3, float32x4_t *a4)
{
  int8x16_t v16 = *a2;
  LODWORD(v7) = HIDWORD(*(unsigned long long *)a2);
  if (v7 < -1.0) {
    float v7 = -1.0;
  }
  if (v7 > 1.0) {
    float v7 = 1.0;
  }
  float v8 = acosf(v7);
  float v9 = v8 + v8;
  *a3 = v9;
  if (v9 > 3.1416)
  {
    v10.i64[0] = 0x8000000080000000;
    v10.i64[1] = 0x8000000080000000;
    int8x16_t v11 = veorq_s8(*a2, v10);
    int8x16_t v16 = v11;
    float v12 = *(float *)&v11.i32[3];
    if (*(float *)&v11.i32[3] < -1.0) {
      float v12 = -1.0;
    }
    if (v12 > 1.0) {
      float v12 = 1.0;
    }
    float v13 = acosf(v12);
    *a3 = v13 + v13;
  }
  float32x4_t v14 = (float32x4_t)v16;
  v14.i32[3] = 0;
  *a4 = v14;
  if (*a3 > 0.00000011921)
  {
    int8x16_t v15 = (int8x16_t)vmulq_f32(v14, v14);
    *a4 = vmulq_n_f32(v14, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)).f32[0]));
  }
}

__n128 sub_1B6DF97C8@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>, float a3@<S0>, unsigned int a4@<S1>)
{
  __float2 v6 = __sincosf_stret(a3);
  float v7 = *(float *)(a1 + 512);
  if (fabsf(v6.__cosval) > 0.00000011921) {
    float v7 = sqrtf((float)((float)((float)(v6.__sinval * v6.__sinval) / (float)(v6.__cosval * v6.__cosval)) + 1.0)/ (float)((float)((float)((float)(v6.__sinval * v6.__sinval) / (float)(v6.__cosval * v6.__cosval))/ (float)(v7 * v7))+ (float)(1.0 / (float)(*(float *)(a1 + 516) * *(float *)(a1 + 516)))));
  }
  v8.i32[0] = 0;
  v8.i32[3] = 0;
  v8.i32[1] = LODWORD(v6.__cosval);
  v8.f32[2] = -v6.__sinval;
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  float v10 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)).f32[0]);
  __float2 v11 = __sincosf_stret(v7 * 0.5);
  v12.i32[0] = 0;
  v12.i32[1] = LODWORD(v6.__cosval);
  *(float32x2_t *)v13.i8 = vmul_n_f32(v12, v11.__sinval / v10);
  v14.i64[0] = v13.i64[0];
  *(float *)&v14.i32[2] = -(float)(v6.__sinval * (float)(v11.__sinval / v10));
  v14.i32[3] = LODWORD(v11.__cosval);
  int32x2_t v15 = (int32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
  v16.i32[0] = 0;
  v16.i32[1] = a4;
  float32x2_t v17 = (float32x2_t)vzip1_s32(v15, *(int32x2_t *)v13.i8);
  float32x2_t v18 = (float32x2_t)vext_s8(*(int8x8_t *)v13.i8, (int8x8_t)v15, 4uLL);
  *(float32x2_t *)v19.f32 = vmul_f32(v17, 0);
  *(float32x2_t *)&v19.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v16), v18);
  *(float32x2_t *)v20.i8 = vadd_f32(vmul_laneq_f32((float32x2_t)a4, (float32x4_t)v14, 3), vmul_f32((float32x2_t)v16, v18));
  v20.u64[1] = (unint64_t)vadd_f32(vmul_f32(*(float32x2_t *)v13.i8, 0), vmul_f32((float32x2_t)v16, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v13, 0xCuLL)));
  float32x4_t v21 = vsubq_f32((float32x4_t)veorq_s8(v20, (int8x16_t)xmmword_1B6E72E20), v19);
  float32x4_t v22 = (float32x4_t)veorq_s8(v14, (int8x16_t)xmmword_1B6E72E30);
  *(int32x2_t *)v13.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), *(int32x2_t *)v21.f32);
  v14.i64[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  int32x2_t v23 = vzip1_s32(*(int32x2_t *)v14.i8, *(int32x2_t *)v22.f32);
  float32x2_t v24 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
  float32x2_t v25 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v22.f32, 4uLL), *(float32x2_t *)v13.i8);
  *(float32x2_t *)v13.i8 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v22.f32, *(int8x8_t *)v14.i8, 4uLL), *(float32x2_t *)v13.i8);
  v13.u64[1] = (unint64_t)vmul_f32((float32x2_t)vrev64_s32(v23), v24);
  *(float32x2_t *)v14.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v21.f32, v22, 3), vmul_f32((float32x2_t)v23, v24));
  v14.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.f32, 1), v25);
  __n128 result = (__n128)vaddq_f32(vsubq_f32(vmulq_laneq_f32(v22, v21, 3), (float32x4_t)v13), (float32x4_t)v14);
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

uint64_t sub_1B6DF9970(uint64_t result, int a2, unsigned int a3, float a4)
{
  if ((a2 - 3) < 2)
  {
    if (a3 > 2)
    {
      *(float *)(result + 700) = a4;
      int v4 = *(_DWORD *)(result + 688) | 4;
    }
    else
    {
      *(float *)(result + 69sub_1B6DC4968((unsigned int *)this + 2) = a4;
      int v4 = *(_DWORD *)(result + 688) | 1;
    }
  }
  else
  {
    if ((a2 - 1) > 1) {
      return result;
    }
    if (a3 > 2)
    {
      *(float *)(result + 500) = a4;
      return result;
    }
    *(float *)(result + 696) = a4;
    int v4 = *(_DWORD *)(result + 688) | 2;
  }
  *(_DWORD *)(result + 688) = v4;
  return result;
}

float sub_1B6DF99D4(float *a1, int a2, unsigned int a3)
{
  float result = 0.0;
  if ((a2 - 3) < 2)
  {
    if (a3 > 2)
    {
      if (a3 - 3 <= 2) {
        return a1[175];
      }
    }
    else
    {
      return a1[173];
    }
  }
  else if ((a2 - 1) <= 1)
  {
    if (a3 > 2)
    {
      if (a3 - 3 <= 2) {
        return a1[125];
      }
    }
    else
    {
      return a1[174];
    }
  }
  return result;
}

uint64_t sub_1B6DF9A38(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  a1[23] = *a2;
  a1[24] = a2[1];
  a1[25] = a2[2];
  a1[26] = a2[3];
  a1[27] = *a3;
  a1[28] = a3[1];
  a1[29] = a3[2];
  a1[30] = a3[3];
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void *sub_1B6DF9A9C(void *result)
{
  *float result = &unk_1F0FB13D8;
  return result;
}

void sub_1B6DF9ABC(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB13D8;
  sub_1B6E073C4(a1);
}

uint64_t sub_1B6DF9AE0()
{
  return 224;
}

const char *sub_1B6DF9AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6E01CE0(a1, a2, a3);
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 368;
  uint64_t v7 = a2 + 64;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
      *(_DWORD *)(v7 + i) = *(_DWORD *)(v6 + i);
    ++v5;
    v6 += 16;
    v7 += 16;
  }
  while (v5 != 3);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 112 + j) = *(_DWORD *)(a1 + 416 + j);
  uint64_t v10 = 0;
  uint64_t v11 = a1 + 432;
  uint64_t v12 = a2 + 128;
  do
  {
    for (uint64_t k = 0; k != 16; k += 4)
      *(_DWORD *)(v12 + k) = *(_DWORD *)(v11 + k);
    ++v10;
    v11 += 16;
    v12 += 16;
  }
  while (v10 != 3);
  for (uint64_t m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 176 + m) = *(_DWORD *)(a1 + 480 + m);
  *(_DWORD *)(a2 + 19sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + 512);
  *(void *)&long long v15 = *(void *)(a1 + 516);
  *((void *)&v15 + 1) = *(void *)(a1 + 496);
  *(_OWORD *)(a2 + 196) = v15;
  *(void *)(a2 + 21sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(a1 + 504);
  return "btConeTwistConstraintData";
}

float32_t sub_1B6DF9BEC(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int8x8_t *a4, int8x8_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, float a9, float a10)
{
  float32x4_t v10 = *a6;
  *a1 = *a6;
  *(int8x8_t *)v11.f32 = vext_s8(*a4, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4->i8, *(int8x16_t *)a4->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v11.u32[2] = *a4;
  *(int8x8_t *)v12.f32 = vext_s8(*(int8x8_t *)v10.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), 4uLL);
  v12.i64[1] = v10.i64[0];
  int8x16_t v13 = (int8x16_t)vsubq_f32(vmulq_f32(v12, *(float32x4_t *)a4->i8), vmulq_f32(v10, v11));
  v12.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
  v12.i64[1] = v13.i64[0];
  float32x4_t v14 = v12;
  v14.i32[3] = 0;
  int8x16_t v15 = (int8x16_t)vmulq_f32(a2[2], v12);
  int8x16_t v16 = (int8x16_t)vmulq_f32(*a2, v14);
  float32x4_t v17 = vmulq_f32(a2[1], v14);
  v15.i32[3] = 0;
  *(float32x2_t *)v17.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v17.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)));
  *(float32x2_t *)&v17.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  a1[1] = v17;
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  float32x4_t v18 = (float32x4_t)veorq_s8((int8x16_t)v10, v15);
  *(int8x8_t *)v19.f32 = vext_s8(*a5, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5->i8, *(int8x16_t *)a5->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v19.u32[2] = *a5;
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
  v20.i64[1] = v18.i64[0];
  int8x16_t v21 = (int8x16_t)vaddq_f32(vmulq_f32(*(float32x4_t *)a5->i8, v20), vmulq_f32(v19, v10));
  v18.i64[0] = vextq_s8(v21, v21, 4uLL).u64[0];
  v18.i64[1] = v21.i64[0];
  int8x16_t v22 = (int8x16_t)vmulq_f32(a3[2], v18);
  v18.i32[3] = 0;
  float32x4_t v23 = vmulq_f32(*a3, v18);
  int8x16_t v24 = (int8x16_t)vmulq_f32(a3[1], v18);
  v22.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  a1[2] = v23;
  float32x4_t v25 = vmulq_f32(v17, *a7);
  a1[3] = v25;
  float32x4_t v26 = vmulq_f32(*a8, v23);
  a1[4] = v26;
  int8x16_t v27 = (int8x16_t)vmulq_f32(v17, v25);
  float v28 = (float)(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)).f32[0]+ a9)+ a10;
  int8x16_t v29 = (int8x16_t)vmulq_f32(v23, v26);
  float32_t result = v28
         + vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)).f32[0];
  a1[5].f32[0] = result;
  return result;
}

uint64_t sub_1B6DF9D40()
{
  return 64;
}

float sub_1B6DF9D48(uint64_t a1, int a2)
{
  return *(float *)(a1 + 4 * a2 + 1328);
}

float32x2_t sub_1B6DF9D54(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  float32x4_t v6 = vmulq_f32(*a3, *a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(*a2, a3[1]);
  int8x16_t v8 = (int8x16_t)vmulq_f32(*a2, a3[2]);
  v8.i32[3] = 0;
  *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
  a1[1] = v6;
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  float32x4_t v10 = (float32x4_t)veorq_s8(*(int8x16_t *)a2, v9);
  float32x4_t v11 = vmulq_f32(*a4, v10);
  int8x16_t v12 = (int8x16_t)vmulq_f32(a4[1], v10);
  int8x16_t v13 = (int8x16_t)vmulq_f32(a4[2], v10);
  v13.i32[3] = 0;
  *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
  a1[2] = v11;
  float32x4_t v14 = vmulq_f32(v6, *a5);
  a1[3] = v14;
  float32x4_t v15 = vmulq_f32(v11, *a6);
  a1[4] = v15;
  int8x16_t v16 = (int8x16_t)vmulq_f32(v6, v14);
  int8x16_t v17 = (int8x16_t)vmulq_f32(v11, v15);
  float32x2_t result = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8)), vadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
  a1[5].i32[0] = result.i32[0];
  return result;
}

void sub_1B6DF9E30(uint64_t a1, _DWORD *a2, uint64_t a3, _OWORD *a4, _OWORD *a5, float32x4_t *a6, int8x8_t *a7, int a8)
{
  sub_1B6E01BF8(a1, 4, (uint64_t)a2, a3);
  *(void *)uint64_t v14 = &unk_1F0FB1340;
  *(_OWORD *)(v14 + 79sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6ED0320;
  *(_DWORD *)(v14 + 808) = 1065353216;
  *(void *)(v14 + 81sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(v14 + 820) = 0;
  *(_DWORD *)(v14 + 840) = 0x1000000;
  *(unsigned char *)(v14 + 844) = a8;
  *(_DWORD *)(v14 + 85sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_OWORD *)(v14 + 704) = *a4;
  v15.i32[0] = a2[4];
  v15.i32[1] = a2[8];
  float32x4_t v16 = v15;
  v16.i32[2] = a2[12];
  float32x4_t v17 = *a6;
  int8x16_t v18 = (int8x16_t)vmulq_f32(*a6, v16);
  float v19 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).f32[0];
  if (v19 >= 1.0)
  {
    v15.i32[0] = a2[5];
    v17.i32[0] = a2[6];
    v17.i32[1] = a2[10];
    v17.i32[2] = a2[14];
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    float32x4_t v17 = (float32x4_t)veorq_s8((int8x16_t)v17, v24);
  }
  else
  {
    if (v19 > -1.0)
    {
      v20.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL).u64[0];
      v20.i64[1] = a6->i64[0];
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), 4uLL);
      v21.i64[1] = v15.i64[0];
      int8x16_t v22 = (int8x16_t)vsubq_f32(vmulq_f32(v17, v21), vmulq_f32(v16, v20));
      v15.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
      *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v15.f32, *(int8x8_t *)v22.i8, 4uLL);
      v21.i64[1] = v15.i64[0];
      v15.i64[1] = v22.u32[0];
      int8x16_t v23 = (int8x16_t)vsubq_f32(vmulq_f32(v20, v15), vmulq_f32(v17, v21));
      v17.i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
      v17.i64[1] = v23.u32[0];
      goto LABEL_7;
    }
    v15.i32[0] = a2[5];
    v17.i32[0] = a2[6];
    v17.i32[1] = a2[10];
    v17.i32[2] = a2[14];
  }
  v15.i32[1] = a2[9];
  v15.i32[2] = a2[13];
LABEL_7:
  *(int32x2_t *)(v14 + 656) = vzip1_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v15.f32);
  *(_DWORD *)(v14 + 664) = a6->i32[0];
  *(_DWORD *)(v14 + 668) = 0;
  *(int32x2_t *)(v14 + 67sub_1B6DC4968((unsigned int *)this + 2) = vzip2_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v15.f32);
  *(_DWORD *)(v14 + 680) = a6->i32[1];
  *(_DWORD *)(v14 + 684) = 0;
  int32x2_t v25 = (int32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  *(int32x2_t *)(v14 + 688) = vzip1_s32(v25, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL));
  *(_DWORD *)(v14 + 696) = a6->i32[2];
  *(_DWORD *)(v14 + 700) = 0;
  float32x4_t v26 = *a6;
  float32x4_t v27 = *(float32x4_t *)a7->i8;
  *(int8x8_t *)v28.f32 = vext_s8(*a7, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), 4uLL);
  *(int8x8_t *)&v28.u32[2] = *a7;
  int8x16_t v29 = (int8x16_t)vmulq_f32(*a6, *(float32x4_t *)a7->i8);
  float v30 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)).f32[0];
  if (v30 >= -1.0)
  {
    v38.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL).u64[0];
    v38.i64[1] = a6->i64[0];
    int8x16_t v39 = (int8x16_t)vsubq_f32(vmulq_f32(v26, v28), vmulq_f32(v27, v38));
    float32x4_t v40 = (float32x4_t)vextq_s8(vextq_s8(v39, v39, 0xCuLL), v39, 8uLL);
    v40.i32[3] = sqrtf((float)(v30 + 1.0) + (float)(v30 + 1.0));
    v41.i32[1] = 1056964608;
    v41.i64[1] = 0x3F0000003F000000;
    *(float *)v41.i32 = 1.0 / v40.f32[3];
    float32x4_t v42 = (float32x4_t)vzip1q_s32(v41, v41);
    v42.f32[2] = 1.0 / v40.f32[3];
    float32x4_t v37 = vmulq_f32(v40, v42);
  }
  else
  {
    LODWORD(v31) = HIDWORD(a6->i64[0]);
    float v32 = 1.0 / sqrtf((float)(v31 * v31) + (float)(v26.f32[0] * v26.f32[0]));
    v26.f32[0] = v26.f32[0] * v32;
    float v33 = -(float)(v26.f32[1] * v32);
    float v34 = 1.0 / sqrtf((float)(v26.f32[2] * v26.f32[2]) + (float)(v31 * v31));
    float v35 = -(float)(v26.f32[2] * v34);
    float v36 = v26.f32[1] * v34;
    if (fabsf(v26.f32[2]) <= 0.70711)
    {
      float v35 = v26.f32[0];
      float v36 = 0.0;
    }
    else
    {
      float v33 = 0.0;
    }
    v37.i64[0] = __PAIR64__(LODWORD(v35), LODWORD(v33));
    v37.i64[1] = LODWORD(v36);
  }
  int32x2_t v43 = (int32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  float32x2_t v44 = (float32x2_t)vext_s8((int8x8_t)v43, *(int8x8_t *)v37.f32, 4uLL);
  int32x2_t v45 = vzip1_s32(v25, *(int32x2_t *)v17.f32);
  float32x2_t v46 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v37.f32);
  float32x2_t v47 = (float32x2_t)vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v43, 4uLL);
  float32x2_t v48 = vmul_f32((float32x2_t)v45, v44);
  *(float32x2_t *)v49.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), v46);
  *(float32x2_t *)&v49.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v45), v47);
  *(float32x2_t *)v50.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v17.f32, v37, 3), vmul_f32((float32x2_t)v45, v47));
  v50.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v17.f32, 1), v48);
  float32x4_t v51 = vsubq_f32((float32x4_t)veorq_s8(v50, (int8x16_t)xmmword_1B6E72E20), v49);
  float32x4_t v52 = (float32x4_t)veorq_s8((int8x16_t)v37, (int8x16_t)xmmword_1B6E72E30);
  float32x2_t v53 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), *(int32x2_t *)v51.f32);
  int32x2_t v54 = (int32x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  *(int32x2_t *)v49.f32 = vzip1_s32(v54, *(int32x2_t *)v52.f32);
  float32x2_t v55 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL).u64[0];
  float32x2_t v56 = vmul_laneq_f32(*(float32x2_t *)v51.f32, v52, 3);
  float32x2_t v57 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v54, *(int8x8_t *)v52.f32, 4uLL), v53);
  float32x2_t v58 = vmul_lane_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.f32, 1);
  *(float32x2_t *)v59.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v52.f32, (int8x8_t)v54, 4uLL), v53);
  *(float32x2_t *)&v59.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v49.f32), v55);
  float32x4_t v60 = vmulq_laneq_f32(v52, v51, 3);
  *(float32x2_t *)v52.f32 = vadd_f32(v56, vmul_f32(*(float32x2_t *)v49.f32, v55));
  *(float32x2_t *)&v52.u32[2] = vadd_f32(v58, v57);
  float32x4_t v61 = vaddq_f32(vsubq_f32(v60, v59), (float32x4_t)veorq_s8((int8x16_t)v52, (int8x16_t)xmmword_1B6E72E20));
  v60.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
  v61.i32[3] = 0;
  *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v61.f32, *(int8x8_t *)v60.f32, 4uLL);
  v60.i64[1] = v61.i64[0];
  int8x16_t v62 = (int8x16_t)vsubq_f32(vmulq_f32(v27, v60), vmulq_f32(v28, v61));
  *(_OWORD *)(v14 + 768) = *a5;
  int8x8_t v63 = vext_s8(*(int8x8_t *)v61.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), 4uLL);
  v60.i64[0] = vzip2q_s32((int32x4_t)v61, vuzp1q_s32((int32x4_t)v61, (int32x4_t)v62)).u64[0];
  v61.i32[1] = v62.i32[1];
  *(void *)(v14 + 720) = v61.i64[0];
  *(_DWORD *)(v14 + 728) = a7->i32[0];
  *(_DWORD *)(v14 + 73sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(int8x8_t *)(v14 + 736) = v63;
  *(_DWORD *)(v14 + 744) = a7->i32[1];
  *(_DWORD *)(v14 + 748) = 0;
  *(void *)(v14 + 75sub_1B6DC4968((unsigned int *)this + 2) = v60.i64[0];
  *(_DWORD *)(v14 + 760) = a7[1].i32[0];
  *(_DWORD *)(v14 + 764) = 0;
  float v64 = 1.0;
  if (a8) {
    float v64 = -1.0;
  }
  *(float *)(v14 + 836) = v64;
}

uint64_t sub_1B6DFA220(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, int a5)
{
  uint64_t result = sub_1B6E01AB8(a1, 4, a2);
  *(void *)uint64_t result = &unk_1F0FB1340;
  *(_OWORD *)(result + 79sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6ED0320;
  *(_DWORD *)(result + 808) = 1065353216;
  *(void *)(result + 81sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(result + 820) = 0;
  *(_DWORD *)(result + 840) = 0x1000000;
  *(unsigned char *)(result + 844) = a5;
  *(_DWORD *)(result + 85sub_1B6DC4968((unsigned int *)this + 2) = 0;
  float v10 = a4->f32[2];
  float v11 = a4->f32[1];
  if (fabsf(v10) <= 0.70711)
  {
    float v19 = (float)(v11 * v11) + (float)(a4->f32[0] * a4->f32[0]);
    float v20 = 1.0 / sqrtf(v19);
    v16.i64[1] = 0;
    *(float *)v16.i32 = -(float)(v11 * v20);
    *(float *)&v16.i32[1] = a4->f32[0] * v20;
    float v15 = -(float)(v10 * *(float *)&v16.i32[1]);
    float v17 = v10 * *(float *)v16.i32;
    float v18 = v19 * v20;
  }
  else
  {
    float v12 = (float)(v10 * v10) + (float)(v11 * v11);
    float v13 = 1.0 / sqrtf(v12);
    *(float *)&unsigned int v14 = v11 * v13;
    float v15 = v12 * v13;
    v16.i32[0] = 0;
    *(float *)&v16.i32[1] = -(float)(v10 * v13);
    v16.i64[1] = v14;
    float v17 = -(float)(a4->f32[0] * *(float *)&v14);
    float v18 = a4->f32[0] * *(float *)&v16.i32[1];
  }
  *(float32x4_t *)(result + 704) = *a3;
  *(_DWORD *)(result + 656) = v16.i32[0];
  *(float *)(result + 660) = v15;
  *(_DWORD *)(result + 664) = a4->i32[0];
  *(_DWORD *)(result + 668) = 0;
  *(_DWORD *)(result + 67sub_1B6DC4968((unsigned int *)this + 2) = v16.i32[1];
  *(float *)(result + 676) = v17;
  *(_DWORD *)(result + 680) = a4->i32[1];
  *(_DWORD *)(result + 688) = v16.i32[2];
  *(_DWORD *)(result + 684) = 0;
  *(float *)(result + 69sub_1B6DC4968((unsigned int *)this + 2) = v18;
  *(_DWORD *)(result + 696) = a4->i32[2];
  *(_DWORD *)(result + 700) = 0;
  float32x4_t v21 = *a4;
  float32x4_t v22 = *(float32x4_t *)(a2 + 16);
  float32x4_t v23 = *(float32x4_t *)(a2 + 32);
  int8x16_t v24 = (int8x16_t)vmulq_f32(v22, *a4);
  int8x16_t v25 = (int8x16_t)vmulq_f32(*a4, v23);
  float32x4_t v26 = *(float32x4_t *)(a2 + 48);
  int8x16_t v27 = (int8x16_t)vmulq_f32(*a4, v26);
  v27.i32[3] = 0;
  int8x8_t v28 = (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v25.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
  int8x8_t v29 = (int8x8_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  *(int8x8_t *)v30.f32 = vext_s8(v28, v29, 4uLL);
  *(int8x8_t *)&v30.u32[2] = v28;
  *(int8x8_t *)v31.f32 = v28;
  *(int8x8_t *)&v31.u32[2] = v29;
  int8x16_t v32 = (int8x16_t)vmulq_f32(*a4, v31);
  float v33 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0];
  if (v33 >= -1.0)
  {
    v43.i64[0] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
    v43.i64[1] = a4->i64[0];
    int8x16_t v44 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v30), vmulq_f32(v43, v31));
    float32x4_t v45 = (float32x4_t)vextq_s8(vextq_s8(v44, v44, 0xCuLL), v44, 8uLL);
    v45.i32[3] = sqrtf((float)(v33 + 1.0) + (float)(v33 + 1.0));
    v46.i32[1] = 1056964608;
    v46.i64[1] = 0x3F0000003F000000;
    *(float *)v46.i32 = 1.0 / v45.f32[3];
    float32x4_t v47 = (float32x4_t)vzip1q_s32(v46, v46);
    v47.f32[2] = 1.0 / v45.f32[3];
    float32x4_t v42 = vmulq_f32(v45, v47);
  }
  else
  {
    LODWORD(v34) = HIDWORD(a4->i64[0]);
    float v35 = fabsf(v21.f32[2]);
    float v36 = 1.0 / sqrtf((float)(v34 * v34) + (float)(v21.f32[0] * v21.f32[0]));
    float v37 = -(float)(v21.f32[1] * v36);
    float v38 = v21.f32[0] * v36;
    float v39 = v37;
    v21.f32[0] = 1.0 / sqrtf((float)(v21.f32[2] * v21.f32[2]) + (float)(v34 * v34));
    float v40 = v21.f32[1] * v21.f32[0];
    if (v35 <= 0.70711)
    {
      float v41 = v38;
    }
    else
    {
      float v39 = 0.0;
      float v41 = -(float)(v21.f32[2] * v21.f32[0]);
    }
    if (v35 <= 0.70711) {
      float v40 = 0.0;
    }
    v42.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v39));
    v42.i64[1] = LODWORD(v40);
  }
  int32x2_t v48 = (int32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
  float32x2_t v49 = (float32x2_t)vext_s8((int8x8_t)v48, *(int8x8_t *)v42.f32, 4uLL);
  int32x2_t v50 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(int32x2_t *)v16.i8);
  float32x2_t v51 = (float32x2_t)vzip1_s32(v48, *(int32x2_t *)v42.f32);
  float32x2_t v52 = (float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v48, 4uLL);
  *(float32x2_t *)v53.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), v51);
  *(float32x2_t *)&v53.u32[2] = vmul_f32((float32x2_t)vrev64_s32(v50), v52);
  *(float32x2_t *)v54.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v16.i8, v42, 3), vmul_f32((float32x2_t)v50, v52));
  v54.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v16.i8, 1), vmul_f32((float32x2_t)v50, v49));
  float32x4_t v55 = vsubq_f32((float32x4_t)veorq_s8(v54, (int8x16_t)xmmword_1B6E72E20), v53);
  float32x4_t v56 = (float32x4_t)veorq_s8((int8x16_t)v42, (int8x16_t)xmmword_1B6E72E30);
  float32x2_t v57 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), *(int32x2_t *)v55.f32);
  int32x2_t v58 = (int32x2_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
  *(int32x2_t *)v53.f32 = vzip1_s32(v58, *(int32x2_t *)v56.f32);
  float32x2_t v59 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL).u64[0];
  float32x2_t v60 = vmul_laneq_f32(*(float32x2_t *)v55.f32, v56, 3);
  float32x2_t v61 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v58, *(int8x8_t *)v56.f32, 4uLL), v57);
  float32x2_t v62 = vmul_lane_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v56.f32, 1);
  *(float32x2_t *)v63.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)v58, 4uLL), v57);
  *(float32x2_t *)&v63.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v53.f32), v59);
  float32x4_t v64 = vmulq_laneq_f32(v56, v55, 3);
  *(float32x2_t *)v55.f32 = vadd_f32(v60, vmul_f32(*(float32x2_t *)v53.f32, v59));
  *(float32x2_t *)&v55.u32[2] = vadd_f32(v62, v61);
  float32x4_t v65 = vaddq_f32(vsubq_f32(v64, v63), (float32x4_t)veorq_s8((int8x16_t)v55, (int8x16_t)xmmword_1B6E72E20));
  v64.i64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
  v65.i32[3] = 0;
  *(int8x8_t *)v64.f32 = vext_s8(*(int8x8_t *)v65.f32, *(int8x8_t *)v64.f32, 4uLL);
  v64.i64[1] = v65.i64[0];
  int8x16_t v66 = (int8x16_t)vsubq_f32(vmulq_f32(v31, v64), vmulq_f32(v30, v65));
  float32x4_t v67 = vmulq_f32(v22, *a3);
  int8x16_t v68 = (int8x16_t)vmulq_f32(v23, *a3);
  int8x16_t v69 = (int8x16_t)vmulq_f32(v26, *a3);
  v69.i32[3] = 0;
  *(float32x2_t *)v67.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
  *(float32x2_t *)&v67.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), 0);
  *(int8x8_t *)v69.i8 = vext_s8(*(int8x8_t *)v65.f32, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), 4uLL);
  unint64_t v70 = vzip2q_s32((int32x4_t)v65, vuzp1q_s32((int32x4_t)v65, (int32x4_t)v66)).u64[0];
  v65.i32[1] = v66.i32[1];
  *(float32x4_t *)(result + 768) = vaddq_f32(*(float32x4_t *)(a2 + 64), v67);
  *(void *)(result + 720) = v65.i64[0];
  *(_DWORD *)(result + 728) = v28.i32[0];
  *(_DWORD *)(result + 73sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(result + 736) = v69.i64[0];
  *(_DWORD *)(result + 744) = v28.i32[1];
  *(_DWORD *)(result + 748) = 0;
  *(void *)(result + 75sub_1B6DC4968((unsigned int *)this + 2) = v70;
  *(_DWORD *)(result + 760) = v29.i32[0];
  *(_DWORD *)(result + 764) = 0;
  float v71 = 1.0;
  if (a5) {
    float v71 = -1.0;
  }
  *(float *)(result + 836) = v71;
  return result;
}

void sub_1B6DFA61C(uint64_t a1, __n128 a2, double a3, double a4, double a5, __n128 a6)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 842))
  {
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 848) = 0;
    if (!*(unsigned char *)(a1 + 840))
    {
      int8x16_t v7 = *(float32x4_t **)(a1 + 40);
      int8x16_t v8 = *(float32x4_t **)(a1 + 48);
      float32x4_t v9 = *(float32x4_t *)(a1 + 704);
      int8x16_t v10 = (int8x16_t)vmulq_f32(v7[1], v9);
      float32x4_t v11 = vmulq_f32(v9, v7[2]);
      int8x16_t v12 = (int8x16_t)vmulq_f32(v9, v7[3]);
      v12.i32[3] = 0;
      *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v11.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)));
      float32x2_t v13 = 0;
      *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), 0);
      float32x4_t v14 = vaddq_f32(v11, v7[4]);
      float32x4_t v15 = *(float32x4_t *)(a1 + 768);
      float32x4_t v16 = vmulq_f32(v8[1], v15);
      int8x16_t v17 = (int8x16_t)vmulq_f32(v15, v8[2]);
      int8x16_t v18 = (int8x16_t)vmulq_f32(v15, v8[3]);
      v18.i32[3] = 0;
      *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
      *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
      float32x4_t v19 = vaddq_f32(v16, v8[4]);
      float32x4_t v20 = vsubq_f32(v19, v14);
      v20.i32[3] = 0;
      int8x16_t v21 = (int8x16_t)vmulq_f32(v20, v20);
      float v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8)).f32[0];
      if (v22 <= 0.00000011921)
      {
        long long v129 = xmmword_1B6E4F300;
        v23.i32[0] = 1.0;
      }
      else
      {
        int8x16_t v23 = (int8x16_t)vmulq_n_f32(v20, 1.0 / sqrtf(v22));
        long long v129 = (__int128)v23;
        float32x2_t v13 = (float32x2_t)vextq_s8(v23, v23, 4uLL).u64[0];
      }
      uint64_t v24 = 0;
      BOOL v25 = fabsf(v13.f32[1]) <= 0.70711;
      float v26 = vmul_f32(v13, v13).f32[0] + (float)(*(float *)v23.i32 * *(float *)v23.i32);
      float v27 = 1.0 / sqrtf(v26);
      float v28 = -(float)(v13.f32[0] * v27);
      float v29 = *(float *)v23.i32 * v27;
      float v30 = -(float)(v13.f32[1] * (float)(*(float *)v23.i32 * v27));
      float v31 = v13.f32[1] * v28;
      float v32 = v26 * v27;
      float v33 = vmlas_n_f32(v13.f32[1] * v13.f32[1], v13.f32[0], v13.f32[0]);
      float v34 = sqrtf(v33);
      float v35 = -(float)(v13.f32[1] * (float)(1.0 / v34));
      float v36 = (float)(1.0 / v34) * v13.f32[0];
      float v37 = v33 * (float)(1.0 / v34);
      float v38 = -(float)(*(float *)v23.i32 * v36);
      float v39 = v35 * *(float *)v23.i32;
      if (v25)
      {
        float v35 = v29;
        float v36 = 0.0;
      }
      else
      {
        float v28 = 0.0;
      }
      if (v25) {
        float v40 = v30;
      }
      else {
        float v40 = v37;
      }
      if (v25) {
        float v41 = v31;
      }
      else {
        float v41 = v38;
      }
      v130.i64[0] = __PAIR64__(LODWORD(v35), LODWORD(v28));
      if (v25) {
        float v39 = v32;
      }
      v130.f32[2] = v36;
      v131.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(v40));
      *(float *)&v131.i32[2] = v39;
      float32x4_t v42 = (float32x4_t *)(a1 + 80);
      float32x4_t v121 = v19;
      float32x4_t v122 = v14;
      do
      {
        uint64_t v43 = *(void *)(a1 + 40);
        uint64_t v44 = *(void *)(a1 + 48);
        int32x4_t v45 = *(int32x4_t *)(v43 + 16);
        int32x4_t v46 = *(int32x4_t *)(v43 + 32);
        int8x16_t v47 = (int8x16_t)vtrn1q_s32(v45, v46);
        int8x16_t v48 = *(int8x16_t *)(v43 + 48);
        float32x4_t v49 = *(float32x4_t *)(v43 + 64);
        *(int32x2_t *)v45.i8 = vzip2_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v46.i8);
        v46.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
        v47.i64[1] = v48.u32[0];
        v45.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v48.i8, 0);
        v46.i64[1] = vextq_s8(v48, v48, 8uLL).u32[0];
        float32x4_t v126 = (float32x4_t)v47;
        int32x4_t v127 = v45;
        int32x4_t v128 = v46;
        int32x4_t v50 = *(int32x4_t *)(v44 + 16);
        int32x4_t v51 = *(int32x4_t *)(v44 + 32);
        int8x16_t v52 = (int8x16_t)vtrn1q_s32(v50, v51);
        int8x16_t v53 = *(int8x16_t *)(v44 + 48);
        float32x4_t v54 = *(float32x4_t *)(v44 + 64);
        *(int32x2_t *)v50.i8 = vzip2_s32(*(int32x2_t *)v50.i8, *(int32x2_t *)v51.i8);
        v51.i64[0] = vextq_s8(v52, v52, 8uLL).u64[0];
        v52.i64[1] = v53.u32[0];
        v50.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v53.i8, 0);
        v51.i64[1] = vextq_s8(v53, v53, 8uLL).u32[0];
        v125[0] = (float32x4_t)v52;
        v125[1] = (float32x4_t)v50;
        v125[2] = (float32x4_t)v51;
        float32x4_t v55 = vsubq_f32(v14, v49);
        v55.i32[3] = 0;
        float32x4_t v124 = v55;
        float32x4_t v56 = vsubq_f32(v19, v54);
        v56.i32[3] = 0;
        float32x4_t v123 = v56;
        sub_1B6DF9BEC(v42, &v126, v125, (int8x8_t *)&v124, (int8x8_t *)&v123, (float32x4_t *)((char *)&v129 + v24), (float32x4_t *)(v43 + 448), (float32x4_t *)(v44 + 448), *(float *)(v43 + 384), *(float *)(v44 + 384));
        float32x4_t v19 = v121;
        float32x4_t v14 = v122;
        v24 += 16;
        float32x4_t v42 = v57 + 6;
      }
      while (v24 != 48);
    }
    a2.n128_u32[0] = *(_DWORD *)(a1 + 664);
    float v58 = *(float *)(a1 + 680);
    float v59 = *(float *)(a1 + 696);
    if (fabsf(v59) <= 0.70711)
    {
      float v63 = (float)(v58 * v58) + (float)(a2.n128_f32[0] * a2.n128_f32[0]);
      float v64 = 1.0 / sqrtf(v63);
      a6 = a2;
      a6.n128_f32[1] = -v58;
      v65.f32[0] = -v59;
      a6.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)a6.n128_u64[0], v64);
      float32x4_t v62 = (float32x4_t)vrev64q_s32((int32x4_t)a6).u64[0];
      v65.i32[1] = *(_DWORD *)(a1 + 696);
      a6.n128_u64[0] = (unint64_t)vmul_f32((float32x2_t)a6.n128_u64[0], v65);
      a6.n128_f32[2] = v63 * v64;
    }
    else
    {
      float v60 = (float)(v59 * v59) + (float)(v58 * v58);
      float v61 = 1.0 / sqrtf(v60);
      v62.i32[0] = 0;
      v62.i32[3] = 0;
      v62.f32[1] = -(float)(v59 * v61);
      v62.f32[2] = v58 * v61;
      a6.n128_f32[0] = v60 * v61;
      a6.n128_f32[1] = -(float)(a2.n128_f32[0] * (float)(v58 * v61));
      a6.n128_f32[2] = a2.n128_f32[0] * v62.f32[1];
    }
    int8x16_t v66 = *(float32x4_t **)(a1 + 40);
    uint64_t v67 = *(void *)(a1 + 48);
    float32x4_t v68 = v66[1];
    float32x4_t v69 = v66[2];
    int8x16_t v70 = (int8x16_t)vmulq_f32(v62, v68);
    int8x16_t v71 = (int8x16_t)vmulq_f32(v62, v69);
    float32x4_t v72 = v66[3];
    int8x16_t v73 = (int8x16_t)vmulq_f32(v62, v72);
    v73.i32[3] = 0;
    *(float32x2_t *)v70.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v71.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    v70.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)), 0);
    v125[0] = (float32x4_t)v70;
    float32x4_t v74 = vmulq_f32((float32x4_t)a6, v68);
    int8x16_t v75 = (int8x16_t)vmulq_f32((float32x4_t)a6, v69);
    int8x16_t v76 = (int8x16_t)vmulq_f32((float32x4_t)a6, v72);
    v76.i32[3] = 0;
    *(float32x2_t *)v74.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)), vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v75.i8));
    *(float32x2_t *)&v74.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)), 0);
    float32x4_t v124 = v74;
    v74.i64[0] = __PAIR64__(LODWORD(v58), a2.n128_u32[0]);
    v74.i64[1] = LODWORD(v59);
    int8x16_t v77 = (int8x16_t)vmulq_f32(v74, v68);
    int8x16_t v78 = (int8x16_t)vmulq_f32(v74, v69);
    int8x16_t v79 = (int8x16_t)vmulq_f32(v74, v72);
    v79.i32[3] = 0;
    *(float32x2_t *)v77.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)), vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v78.i8));
    v77.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), 0);
    float32x4_t v123 = (float32x4_t)v77;
    int8x16_t v80 = (int8x16_t)vtrn1q_s32((int32x4_t)v68, (int32x4_t)v69);
    *(int32x2_t *)v74.f32 = vzip2_s32(*(int32x2_t *)v68.f32, *(int32x2_t *)v69.f32);
    v76.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
    v80.i64[1] = v72.u32[0];
    *(int32x2_t *)&v74.u32[2] = vzip2_s32(*(int32x2_t *)v72.f32, 0);
    v76.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
    long long v129 = (__int128)v80;
    float32x4_t v130 = v74;
    int8x16_t v131 = v76;
    int32x4_t v81 = *(int32x4_t *)(v67 + 16);
    int32x4_t v82 = *(int32x4_t *)(v67 + 32);
    int8x16_t v83 = (int8x16_t)vtrn1q_s32(v81, v82);
    int8x16_t v84 = *(int8x16_t *)(v67 + 48);
    *(int32x2_t *)v81.i8 = vzip2_s32(*(int32x2_t *)v81.i8, *(int32x2_t *)v82.i8);
    v82.i64[0] = vextq_s8(v83, v83, 8uLL).u64[0];
    v83.i64[1] = v84.u32[0];
    v81.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v84.i8, 0);
    v82.i64[1] = vextq_s8(v84, v84, 8uLL).u32[0];
    float32x4_t v126 = (float32x4_t)v83;
    int32x4_t v127 = v81;
    int32x4_t v128 = v82;
    sub_1B6DF9D54((float32x4_t *)(a1 + 368), v125, (float32x4_t *)&v129, &v126, v66 + 28, (float32x4_t *)(v67 + 448));
    uint64_t v85 = *(void *)(a1 + 40);
    uint64_t v86 = *(void *)(a1 + 48);
    int32x4_t v87 = *(int32x4_t *)(v85 + 16);
    int32x4_t v88 = *(int32x4_t *)(v85 + 32);
    int8x16_t v89 = (int8x16_t)vtrn1q_s32(v87, v88);
    int8x16_t v90 = *(int8x16_t *)(v85 + 48);
    *(int32x2_t *)v87.i8 = vzip2_s32(*(int32x2_t *)v87.i8, *(int32x2_t *)v88.i8);
    v88.i64[0] = vextq_s8(v89, v89, 8uLL).u64[0];
    v89.i64[1] = v90.u32[0];
    v87.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v90.i8, 0);
    v88.i64[1] = vextq_s8(v90, v90, 8uLL).u32[0];
    long long v129 = (__int128)v89;
    float32x4_t v130 = (float32x4_t)v87;
    int8x16_t v131 = (int8x16_t)v88;
    int32x4_t v91 = *(int32x4_t *)(v86 + 16);
    int32x4_t v92 = *(int32x4_t *)(v86 + 32);
    int8x16_t v93 = (int8x16_t)vtrn1q_s32(v91, v92);
    int8x16_t v94 = *(int8x16_t *)(v86 + 48);
    *(int32x2_t *)v91.i8 = vzip2_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v92.i8);
    v92.i64[0] = vextq_s8(v93, v93, 8uLL).u64[0];
    v93.i64[1] = v94.u32[0];
    v91.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v94.i8, 0);
    v92.i64[1] = vextq_s8(v94, v94, 8uLL).u32[0];
    float32x4_t v126 = (float32x4_t)v93;
    int32x4_t v127 = v91;
    int32x4_t v128 = v92;
    sub_1B6DF9D54((float32x4_t *)(a1 + 464), &v124, (float32x4_t *)&v129, &v126, (float32x4_t *)(v85 + 448), (float32x4_t *)(v86 + 448));
    uint64_t v95 = *(void *)(a1 + 40);
    uint64_t v96 = *(void *)(a1 + 48);
    int32x4_t v97 = *(int32x4_t *)(v95 + 16);
    int32x4_t v98 = *(int32x4_t *)(v95 + 32);
    int8x16_t v99 = (int8x16_t)vtrn1q_s32(v97, v98);
    int8x16_t v100 = *(int8x16_t *)(v95 + 48);
    *(int32x2_t *)v97.i8 = vzip2_s32(*(int32x2_t *)v97.i8, *(int32x2_t *)v98.i8);
    v98.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
    v99.i64[1] = v100.u32[0];
    v97.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v100.i8, 0);
    v98.i64[1] = vextq_s8(v100, v100, 8uLL).u32[0];
    long long v129 = (__int128)v99;
    float32x4_t v130 = (float32x4_t)v97;
    int8x16_t v131 = (int8x16_t)v98;
    int32x4_t v101 = *(int32x4_t *)(v96 + 16);
    int32x4_t v102 = *(int32x4_t *)(v96 + 32);
    int8x16_t v103 = (int8x16_t)vtrn1q_s32(v101, v102);
    int8x16_t v104 = *(int8x16_t *)(v96 + 48);
    *(int32x2_t *)v101.i8 = vzip2_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v102.i8);
    v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
    v103.i64[1] = v104.u32[0];
    v101.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v104.i8, 0);
    v102.i64[1] = vextq_s8(v104, v104, 8uLL).u32[0];
    float32x4_t v126 = (float32x4_t)v103;
    int32x4_t v127 = v101;
    int32x4_t v128 = v102;
    *(float32x2_t *)v105.f32 = sub_1B6DF9D54((float32x4_t *)(a1 + 560), &v123, (float32x4_t *)&v129, &v126, (float32x4_t *)(v95 + 448), (float32x4_t *)(v96 + 448));
    *(_DWORD *)(a1 + 828) = 0;
    float v106 = sub_1B6DFBCA0(a1, (float32x4_t *)(*(void *)(a1 + 40) + 16), (float32x4_t *)(*(void *)(a1 + 48) + 16), v105);
    *(float *)(a1 + 83sub_1B6DC4968((unsigned int *)this + 2) = v106;
    sub_1B6E01F04(a1 + 792, v106);
    v107.i32[0] = *(_DWORD *)(a1 + 664);
    v107.i32[1] = *(_DWORD *)(a1 + 680);
    v107.i32[2] = *(_DWORD *)(a1 + 696);
    int8x16_t v108 = *(float32x4_t **)(a1 + 40);
    int8x16_t v109 = *(float32x4_t **)(a1 + 48);
    float32x4_t v110 = vmulq_f32(v108[1], v107);
    int8x16_t v111 = (int8x16_t)vmulq_f32(v107, v108[2]);
    int8x16_t v112 = (int8x16_t)vmulq_f32(v107, v108[3]);
    v112.i32[3] = 0;
    *(float32x2_t *)v110.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v111.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL)));
    float32x4_t v113 = v108[19];
    float32x4_t v114 = v108[20];
    v113.i32[3] = 0;
    v114.i32[3] = 0;
    float32x4_t v115 = v109[19];
    float32x4_t v116 = v109[20];
    v115.i32[3] = 0;
    v116.i32[3] = 0;
    *(float32x2_t *)&v110.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL)), 0);
    float32x4_t v117 = v108[21];
    v117.i32[3] = 0;
    int8x16_t v118 = (int8x16_t)vmulq_f32(v110, vaddq_f32(vaddq_f32(vmulq_n_f32(v113, v110.f32[0]), vmulq_lane_f32(v114, *(float32x2_t *)v110.f32, 1)), vmulq_n_f32(v117, v110.f32[2])));
    float32x4_t v119 = v109[21];
    v119.i32[3] = 0;
    int8x16_t v120 = (int8x16_t)vmulq_f32(v110, vaddq_f32(vaddq_f32(vmulq_n_f32(v115, v110.f32[0]), vmulq_lane_f32(v116, *(float32x2_t *)v110.f32, 1)), vmulq_n_f32(v119, v110.f32[2])));
    *(float *)(a1 + 824) = 1.0
                         / vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL))).f32[0];
  }
}

void sub_1B6DFACEC(uint64_t a1, _DWORD *a2, float32x4_t a3)
{
  if (*(unsigned char *)(a1 + 842))
  {
    int v4 = 0;
    *a2 = 0;
LABEL_6:
    a2[1] = v4;
    return;
  }
  a3.i64[0] = 0x100000005;
  *(void *)a2 = 0x100000005;
  float v6 = sub_1B6DFBCA0(a1, (float32x4_t *)(*(void *)(a1 + 40) + 16), (float32x4_t *)(*(void *)(a1 + 48) + 16), a3);
  *(float *)(a1 + 83sub_1B6DC4968((unsigned int *)this + 2) = v6;
  sub_1B6E01F04(a1 + 792, v6);
  if (*(unsigned char *)(a1 + 820) || *(unsigned char *)(a1 + 841))
  {
    int v7 = a2[1];
    ++*a2;
    int v4 = v7 - 1;
    goto LABEL_6;
  }
}

void sub_1B6DFAD70(float32x4_t *a1, uint64_t a2)
{
  uint64_t v2 = (float32x4_t *)a1[2].i64[1];
  int v3 = (float32x4_t *)a1[3].i64[0];
  int v4 = v2 + 1;
  uint64_t v5 = v3 + 1;
  float v6 = v2 + 23;
  int v7 = v3 + 23;
  if (a1[52].i8[11]) {
    sub_1B6DFAD94(a1, a2, v4, v5, v6, v7);
  }
  else {
    sub_1B6DFB614(a1, a2, v4, v5, v6, v7);
  }
}

void sub_1B6DFAD94(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  float32x4_t v8 = a1[41];
  float32x4_t v9 = a1[42];
  v8.i32[3] = 0;
  v9.i32[3] = 0;
  uint64_t v10 = *(int *)(a2 + 40);
  float32x4_t v11 = a1[43];
  float32x4_t v12 = a1[44];
  v11.i32[3] = 0;
  float32x4_t v13 = a3[1];
  float32x4_t v14 = a3[2];
  float32x4_t v15 = a3[3];
  float32x4_t v16 = vmlaq_lane_f32(vmulq_n_f32(v8, v14.f32[0]), v9, *(float32x2_t *)v14.f32, 1);
  float32x4_t v17 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v13.f32[0]), v9, *(float32x2_t *)v13.f32, 1), v11, v13, 2);
  int8x16_t v18 = (int8x16_t)vmulq_f32(*a3, v12);
  int8x16_t v19 = (int8x16_t)vmulq_f32(v13, v12);
  int8x16_t v20 = (int8x16_t)vmulq_f32(v14, v12);
  v20.i32[3] = 0;
  float32x4_t v21 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*a3)), v9, *(float32x2_t *)a3->f32, 1), v11, *a3, 2);
  *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0);
  float32x4_t v22 = a4[1];
  float32x4_t v23 = a1[45];
  float32x4_t v24 = a1[46];
  v23.i32[3] = 0;
  v24.i32[3] = 0;
  float32x4_t v25 = a1[47];
  float32x4_t v26 = a1[48];
  v25.i32[3] = 0;
  int8x16_t v27 = (int8x16_t)vmlaq_laneq_f32(v16, v11, v14, 2);
  float32x4_t v28 = a4[2];
  float32x4_t v29 = a4[3];
  float32x4_t v30 = vmlaq_lane_f32(vmulq_n_f32(v23, v28.f32[0]), v24, *(float32x2_t *)v28.f32, 1);
  float32x4_t v31 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v22.f32[0]), v24, *(float32x2_t *)v22.f32, 1), v25, v22, 2);
  int8x16_t v32 = (int8x16_t)vmulq_f32(*a4, v26);
  int8x16_t v33 = (int8x16_t)vmulq_f32(v22, v26);
  int8x16_t v34 = (int8x16_t)vmulq_f32(v28, v26);
  v34.i32[3] = 0;
  float32x4_t v35 = vaddq_f32(v15, v9);
  float32x4_t v36 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*a4)), v24, *(float32x2_t *)a4->f32, 1), v25, *a4, 2);
  *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0);
  int8x16_t v37 = (int8x16_t)vmlaq_laneq_f32(v30, v25, v28, 2);
  float32x4_t v38 = vaddq_f32(v29, v9);
  float32x4_t v39 = vsubq_f32(v38, v35);
  float v40 = *(float *)(a1[2].i64[1] + 384);
  float v41 = *(float *)(a1[3].i64[0] + 384);
  if ((float)(v40 + v41) <= 0.0) {
    float v42 = 0.5;
  }
  else {
    float v42 = v41 / (float)(v40 + v41);
  }
  BOOL v43 = v41 < 0.00000011921;
  float v44 = 1.0 - v42;
  v45.i32[3] = 0;
  float32x4_t v46 = (float32x4_t)__PAIR64__(v17.u32[2], v21.u32[2]);
  v46.i32[2] = v27.i32[2];
  int8x8_t v47 = (int8x8_t)__PAIR64__(v31.u32[2], v36.u32[2]);
  float32x4_t v48 = (float32x4_t)__PAIR64__(v31.u32[2], v36.u32[2]);
  v48.i32[2] = v37.i32[2];
  float32x4_t v49 = vmulq_n_f32(v46, v42);
  v49.i32[3] = 0;
  float32x4_t v50 = vmulq_n_f32(v48, 1.0 - v42);
  v50.i32[3] = 0;
  float32x4_t v51 = vaddq_f32(v49, v50);
  int8x16_t v52 = (int8x16_t)vmulq_f32(v51, v51);
  float32x4_t v53 = vmulq_n_f32(v51, 1.0/ sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v52.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)).f32[0]));
  float32x4_t v157 = v53;
  float32x4_t v54 = vsubq_f32(v38, v29);
  v54.i32[3] = 0;
  int8x16_t v55 = (int8x16_t)vmulq_f32(v53, v54);
  float32x4_t v56 = vmulq_n_f32(v53, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).f32[0]);
  v56.i32[3] = 0;
  BOOL v57 = v43 || v40 < 0.00000011921;
  float32x4_t v58 = vsubq_f32(v54, v56);
  float32x4_t v59 = vsubq_f32(v35, v15);
  v59.i32[3] = 0;
  int8x16_t v60 = (int8x16_t)vmulq_f32(v53, v59);
  float32x4_t v61 = vmulq_n_f32(v53, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)).f32[0]);
  v61.i32[3] = 0;
  float32x4_t v62 = vsubq_f32(v59, v61);
  float32x4_t v63 = vmulq_n_f32(v62, v44);
  v62.i32[3] = 0;
  float32x4_t v64 = vsubq_f32(v61, v56);
  float32x4_t v65 = vmulq_n_f32(v64, v42);
  v65.i32[3] = 0;
  float32x4_t v66 = vsubq_f32(v58, vmulq_n_f32(v64, v44));
  v66.i32[3] = 0;
  float32x4_t v67 = vaddq_f32(v62, v65);
  float32x4_t v68 = vmulq_n_f32(v58, v42);
  v68.i32[3] = 0;
  v63.i32[3] = 0;
  float32x4_t v69 = vaddq_f32(v68, v63);
  int8x16_t v70 = (int8x16_t)vmulq_f32(v69, v69);
  float v71 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
  if (v71 <= 0.00000011921)
  {
    v45.i64[0] = __PAIR64__(v17.u32[1], v21.u32[1]);
    v45.i32[2] = v27.i32[1];
  }
  else
  {
    float32x4_t v45 = vmulq_n_f32(v69, 1.0 / sqrtf(v71));
  }
  uint64_t v72 = 0;
  v39.i32[3] = 0;
  int v73 = 2 * v10;
  v74.i64[0] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL).u64[0];
  v74.i64[1] = v53.i64[0];
  v75.i64[0] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL).u64[0];
  v75.i64[1] = v45.i64[0];
  int8x16_t v76 = (int8x16_t)vsubq_f32(vmulq_f32(v53, v75), vmulq_f32(v74, v45));
  v77.i64[0] = vextq_s8(v76, v76, 4uLL).u64[0];
  v77.i64[1] = v76.u32[0];
  float32x4_t v154 = v77;
  float32x4_t v155 = v45;
  v78.i64[0] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL).u64[0];
  v78.i64[1] = v67.i64[0];
  int8x16_t v79 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v75), vmulq_f32(v78, v45));
  v80.i64[0] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL).u64[0];
  v80.i64[1] = v66.i64[0];
  int8x16_t v81 = (int8x16_t)vsubq_f32(vmulq_f32(v75, v66), vmulq_f32(v80, v45));
  v82.i64[0] = vextq_s8(v81, v81, 4uLL).u64[0];
  v82.i64[1] = v81.u32[0];
  float32x4_t v156 = v82;
  uint64_t v83 = *(void *)(a2 + 16);
  *(_DWORD *)(v83 + 8) = v79.i32[0];
  *(void *)uint64_t v83 = vextq_s8(v79, v79, 4uLL).u64[0];
  uint64_t v84 = *(void *)(a2 + 32);
  do
  {
    *(float *)(v84 + v72 * 4) = -v156.f32[v72];
    ++v72;
  }
  while (v72 != 3);
  v85.i64[0] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL).u64[0];
  v85.i64[1] = v77.i64[0];
  int8x16_t v86 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v85), vmulq_f32(v78, v77));
  v87.i64[0] = vextq_s8(v86, v86, 4uLL).u64[0];
  v87.i64[1] = v86.u32[0];
  int8x16_t v88 = (int8x16_t)vsubq_f32(vmulq_f32(v85, v66), vmulq_f32(v80, v77));
  v89.i64[0] = vextq_s8(v88, v88, 4uLL).u64[0];
  v89.i64[1] = v88.u32[0];
  float32x4_t v156 = v89;
  if (v57 && a1[51].i8[4])
  {
    float32x4_t v156 = vmulq_n_f32(v89, v44);
    float32x4_t v87 = vmulq_n_f32(v87, v42);
  }
  uint64_t v90 = 0;
  uint64_t v91 = v83 + 4 * v10;
  *(void *)uint64_t v91 = v87.i64[0];
  *(_DWORD *)(v91 + 8) = v87.i32[2];
  do
  {
    *(float *)(v84 + 4 * v10 + v90 * 4) = -v156.f32[v90];
    ++v90;
  }
  while (v90 != 3);
  int8x16_t v92 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v67), vmulq_f32(v53, v78));
  v93.i64[0] = vextq_s8(v92, v92, 4uLL).u64[0];
  v93.i64[1] = v92.u32[0];
  int8x16_t v94 = (int8x16_t)vsubq_f32(vmulq_f32(v74, v66), vmulq_f32(v53, v80));
  v95.i64[0] = vextq_s8(v94, v94, 4uLL).u64[0];
  v95.i64[1] = v94.u32[0];
  float32x4_t v156 = v95;
  if (v57)
  {
    float32x4_t v156 = vmulq_n_f32(v95, v44);
    float32x4_t v93 = vmulq_n_f32(v93, v42);
  }
  uint64_t v96 = 0;
  uint64_t v97 = v73;
  uint64_t v98 = 4 * v73;
  uint64_t v99 = v83 + v98;
  *(void *)uint64_t v99 = v93.i64[0];
  *(_DWORD *)(v99 + 8) = v93.i32[2];
  do
  {
    *(float *)(v84 + v98 + v96 * 4) = -v156.f32[v96];
    ++v96;
  }
  while (v96 != 3);
  float v100 = *(float *)(a2 + 4);
  if (a1[52].i8[8])
  {
    int32x4_t v101 = *(float **)(a2 + 48);
  }
  else
  {
    uint64_t v102 = 0;
    float v103 = *(float *)a2;
    uint64_t v104 = *(void *)(a2 + 8);
    *(void *)uint64_t v104 = v155.i64[0];
    *(_DWORD *)(v104 + 8) = v155.i32[2];
    uint64_t v105 = v104 + 4 * v10;
    *(void *)uint64_t v105 = v154.i64[0];
    *(_DWORD *)(v105 + 8) = v154.i32[2];
    float v106 = v103 * v100;
    uint64_t v107 = v104 + v98;
    *(void *)uint64_t v107 = v157.i64[0];
    *(_DWORD *)(v107 + 8) = v157.i32[2];
    uint64_t v108 = *(void *)(a2 + 24);
    do
    {
      *(float *)(v108 + v102 * 4) = -v155.f32[v102];
      ++v102;
    }
    while (v102 != 3);
    for (uint64_t i = 0; i != 3; ++i)
      *(float *)(v108 + 4 * v10 + i * 4) = -v154.f32[i];
    uint64_t v110 = 0;
    uint64_t v111 = v108 + 4 * v97;
    do
    {
      *(float *)(v111 + v110 * 4) = -v157.f32[v110];
      ++v110;
    }
    while (v110 != 3);
    int8x16_t v112 = (int8x16_t)vmulq_f32(v45, v39);
    int32x4_t v101 = *(float **)(a2 + 48);
    *int32x4_t v101 = v106
          * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), vpadd_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8)).f32[0];
    int8x16_t v113 = (int8x16_t)vmulq_f32(v39, v77);
    v101[v10] = v106
              * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL), vpadd_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8)).f32[0];
    int8x16_t v114 = (int8x16_t)vmulq_f32(v53, v39);
    v101[v97] = v106
              * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), vpadd_f32(*(float32x2_t *)v114.i8, *(float32x2_t *)v114.i8)).f32[0];
  }
  *(_DWORD *)(v83 + 12 * v10) = v45.i32[0];
  uint64_t v115 = 12 * v10 + 4;
  *(_DWORD *)(v83 + v115) = v45.i32[1];
  uint64_t v116 = 12 * v10 + 8;
  *(_DWORD *)(v83 + v116) = v45.i32[2];
  uint64_t v117 = 16 * v10;
  *(void *)(v83 + v117) = v77.i64[0];
  int v118 = (4 * v10) | 2;
  *(_DWORD *)(v83 + 4 * v118) = v77.i32[2];
  *(float *)(v84 + 12 * v10) = -v45.f32[0];
  *(float *)(v84 + v115) = -v45.f32[1];
  *(float *)(v84 + v116) = -v45.f32[2];
  *(float32x2_t *)(v84 + v117) = vneg_f32(*(float32x2_t *)v77.f32);
  *(float *)(v84 + 4 * v118) = -v77.f32[2];
  *(int8x8_t *)v119.f32 = vext_s8((int8x8_t)__PAIR64__(v17.u32[2], v21.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), 4uLL);
  v119.i64[1] = __PAIR64__(v17.u32[2], v21.u32[2]);
  *(int8x8_t *)v120.f32 = vext_s8(v47, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), 4uLL);
  *(int8x8_t *)&v120.u32[2] = v47;
  int8x16_t v121 = (int8x16_t)vsubq_f32(vmulq_f32(v46, v120), vmulq_f32(v119, v48));
  v120.i64[0] = vextq_s8(v121, v121, 4uLL).u64[0];
  v120.i64[1] = v121.u32[0];
  *(float *)v121.i32 = *(float *)a2 * *(float *)(a2 + 4);
  int8x16_t v122 = (int8x16_t)vmulq_f32(v45, v120);
  v101[3 * v10] = *(float *)v121.i32
                        * vadd_f32(vpadd_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)).f32[0];
  int8x16_t v123 = (int8x16_t)vmulq_f32(v77, v120);
  v101[(unint64_t)v117 / 4] = *(float *)v121.i32
                                   * vadd_f32(vpadd_f32(*(float32x2_t *)v123.i8, *(float32x2_t *)v123.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)).f32[0];
  int v124 = a1[51].u8[4];
  if (a1[51].i8[4])
  {
    float v125 = a5;
    float v126 = a1[50].f32[3] * a1[52].f32[1];
    if (v126 > 0.0) {
      int v127 = 1;
    }
    else {
      int v127 = 2;
    }
    BOOL v128 = a1[52].i8[9] == 0;
  }
  else
  {
    if (!a1[52].i8[9]) {
      return;
    }
    float v125 = a5;
    BOOL v128 = 0;
    int v127 = 0;
    float v126 = 0.0;
  }
  int v129 = 5 * v10;
  uint64_t v130 = 5 * (int)v10;
  *(_DWORD *)(v83 + 4 * v130) = v53.i32[0];
  uint64_t v131 = 20 * v10 + 4;
  *(_DWORD *)(v83 + v131) = v53.i32[1];
  uint64_t v132 = 4 * v130 + 8;
  *(_DWORD *)(v83 + v13sub_1B6DC4968((unsigned int *)this + 2) = v53.i32[2];
  float32x4_t v153 = v53;
  *(float *)(v84 + 4 * v129) = -v53.f32[0];
  *(float *)(v84 + v131) = -v53.f32[1];
  *(float *)(v84 + v13sub_1B6DC4968((unsigned int *)this + 2) = -v53.f32[2];
  sub_1B6E0203C(&a1[49].f32[2]);
  float v134 = v133;
  sub_1B6E01FD4(&a1[49].f32[2]);
  float v136 = v135;
  BOOL v137 = v134 != v135 || v124 == 0;
  uint64_t v138 = *(void *)(a2 + 48);
  *(_DWORD *)(v138 + 4 * v129) = 0;
  char v139 = !v137;
  __int32 v140 = a1[53].i32[1];
  f32 = a1[54].f32;
  if ((v140 & 2) == 0) {
    f32 = (float *)(a2 + 4);
  }
  float v142 = *f32;
  if (!v128 && (v139 & 1) == 0)
  {
    if ((v140 & 4) != 0) {
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * v130) = a1[53].i32[2];
    }
    float v143 = sub_1B6E01C50(a1[52].f32[0], v134, v135, a1[49].f32[0], v142 * *(float *)a2);
    uint64_t v138 = *(void *)(a2 + 48);
    *(float *)(v138 + 4 * v130) = *(float *)(v138 + 4 * v130) + (float)((float)(v143 * a1[49].f32[0]) * a1[52].f32[1]);
    *(float *)(*(void *)(a2 + 64) + 4 * v130) = -a1[49].f32[1];
    *(_DWORD *)(*(void *)(a2 + 72) + 4 * v130) = a1[49].i32[1];
  }
  if (v124)
  {
    *(float *)(v138 + 4 * v130) = *(float *)(v138 + 4 * v130) + (float)((float)(v142 * *(float *)a2) * v126);
    if (a1[53].i8[4]) {
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * v130) = a1[53].i32[3];
    }
    if (v134 == v136)
    {
      *(_DWORD *)(*(void *)(a2 + 64) + 4 * v130) = -8388609;
    }
    else
    {
      uint64_t v144 = *(void *)(a2 + 64);
      if (v127 != 1)
      {
        *(_DWORD *)(v144 + 4 * v130) = -8388609;
        int v145 = 0;
LABEL_58:
        *(_DWORD *)(*(void *)(a2 + 72) + 4 * v130) = v145;
        float v146 = a1[50].f32[2];
        if (v146 <= 0.0)
        {
          float v150 = *(float *)(v138 + 4 * v130);
        }
        else
        {
          int8x16_t v147 = (int8x16_t)vmulq_f32(*v125, v153);
          int8x16_t v148 = (int8x16_t)vmulq_f32(v153, *a6);
          LODWORD(v149) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)v147.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL))).u32[0];
          float v150 = *(float *)(v138 + 4 * v130);
          if (v127 == 1)
          {
            if (v149 >= 0.0) {
              goto LABEL_67;
            }
            float v151 = -(float)(v146 * v149);
            if (v151 <= v150) {
              goto LABEL_67;
            }
          }
          else
          {
            if (v149 <= 0.0) {
              goto LABEL_67;
            }
            float v151 = -(float)(v146 * v149);
            if (v151 >= v150) {
              goto LABEL_67;
            }
          }
          *(float *)(v138 + 4 * v130) = v151;
          float v150 = v151;
        }
LABEL_67:
        *(float *)(v138 + 4 * v130) = a1[50].f32[1] * v150;
        return;
      }
      *(_DWORD *)(v144 + 4 * v130) = 0;
    }
    int v145 = 2139095039;
    goto LABEL_58;
  }
}

void sub_1B6DFB614(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6)
{
  uint64_t v10 = *(int *)(a2 + 40);
  float32x4_t v11 = *a3;
  float32x4_t v12 = a3[1];
  float32x4_t v13 = a1[41];
  float32x4_t v14 = a1[42];
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  float32x4_t v16 = a1[43];
  float32x4_t v15 = a1[44];
  v16.i32[3] = 0;
  float32x4_t v17 = a3[2];
  float32x4_t v18 = a3[3];
  float32x4_t v19 = vmlaq_lane_f32(vmulq_n_f32(v13, v12.f32[0]), v14, *(float32x2_t *)v12.f32, 1);
  float32x4_t v20 = vmlaq_lane_f32(vmulq_n_f32(v13, v17.f32[0]), v14, *(float32x2_t *)v17.f32, 1);
  float32x4_t v21 = vmulq_f32(*a3, v15);
  int8x16_t v22 = (int8x16_t)vmulq_f32(v12, v15);
  int8x16_t v23 = (int8x16_t)vmulq_f32(v17, v15);
  v23.i32[3] = 0;
  float32x4_t v24 = vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*a3)), v14, *(float32x2_t *)a3->f32, 1);
  *(float32x2_t *)v21.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)));
  *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
  float32x4_t v25 = *a4;
  float32x4_t v26 = a4[1];
  float32x4_t v27 = a1[45];
  float32x4_t v28 = a1[46];
  v27.i32[3] = 0;
  v28.i32[3] = 0;
  float32x4_t v30 = a1[47];
  float32x4_t v29 = a1[48];
  v30.i32[3] = 0;
  float32x4_t v31 = a4[2];
  float32x4_t v32 = vmlaq_lane_f32(vmulq_n_f32(v27, v26.f32[0]), v28, *(float32x2_t *)v26.f32, 1);
  float32x4_t v33 = vmlaq_lane_f32(vmulq_n_f32(v27, v31.f32[0]), v28, *(float32x2_t *)v31.f32, 1);
  int8x16_t v34 = (int8x16_t)vmulq_f32(*a4, v29);
  int8x16_t v35 = (int8x16_t)vmulq_f32(v31, v29);
  v35.i32[3] = 0;
  int8x16_t v36 = (int8x16_t)vmulq_f32(v26, v29);
  int32x2_t v37 = (int32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
  float32x2_t v38 = vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v36.i8);
  float32x4_t v39 = vaddq_f32(v18, v21);
  float32x4_t v40 = vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(*a4)), v28, *(float32x2_t *)a4->f32, 1);
  *(float32x2_t *)v27.f32 = vadd_f32(v38, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), v37));
  *(float32x2_t *)&v27.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
  float32x4_t v41 = vaddq_f32(a4[3], v27);
  float32x4_t v112 = v41;
  float32x4_t v113 = v39;
  if (a1[52].i8[8])
  {
    int v42 = 2 * v10;
  }
  else
  {
    BOOL v43 = *(_DWORD **)(a2 + 8);
    *BOOL v43 = 1065353216;
    int v44 = v10 + 1;
    v43[v44] = 1065353216;
    int v42 = 2 * v10;
    int v45 = 2 * v10 + 2;
    v43[v45] = 1065353216;
    float32x4_t v46 = *(_DWORD **)(a2 + 24);
    *float32x4_t v46 = -1082130432;
    v46[v44] = -1082130432;
    v46[v45] = -1082130432;
    float32x4_t v18 = a3[3];
  }
  float32x4_t v47 = vmlaq_laneq_f32(v19, v16, v12, 2);
  float32x4_t v48 = vmlaq_laneq_f32(v24, v16, v11, 2);
  int8x16_t v49 = (int8x16_t)vmlaq_laneq_f32(v20, v16, v17, 2);
  float32x4_t v50 = vmlaq_laneq_f32(v32, v30, v26, 2);
  float32x4_t v51 = vmlaq_laneq_f32(v40, v30, v25, 2);
  int8x16_t v52 = (int8x16_t)vmlaq_laneq_f32(v33, v30, v31, 2);
  uint64_t v53 = *(void *)(a2 + 16);
  uint64_t v54 = v53 + 4 * v10;
  uint64_t v55 = v53 + 4 * v42;
  float32x4_t v56 = vnegq_f32(vsubq_f32(v39, v18));
  *(_DWORD *)uint64_t v53 = 0;
  *(float *)(v53 + 4) = -v56.f32[2];
  *(_DWORD *)(v53 + 8) = v56.i32[1];
  *(_DWORD *)(v53 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)uint64_t v54 = v56.i32[2];
  *(_DWORD *)(v54 + 4) = 0;
  *(float *)(v54 + 8) = -v56.f32[0];
  *(_DWORD *)(v54 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(float *)uint64_t v55 = -v56.f32[1];
  *(_DWORD *)(v55 + 4) = v56.i32[0];
  *(void *)(v55 + 8) = 0;
  float32x4_t v57 = vsubq_f32(v41, a4[3]);
  uint64_t v58 = *(void *)(a2 + 32);
  uint64_t v59 = v58 + 4 * v10;
  uint64_t v60 = v58 + 4 * v42;
  *(_DWORD *)uint64_t v58 = 0;
  *(float *)(v58 + 4) = -v57.f32[2];
  *(_DWORD *)(v58 + 8) = v57.i32[1];
  *(_DWORD *)(v58 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)uint64_t v59 = v57.i32[2];
  *(_DWORD *)(v59 + 4) = 0;
  *(float *)(v59 + 8) = -v57.f32[0];
  *(_DWORD *)(v59 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(float *)uint64_t v60 = -v57.f32[1];
  *(_DWORD *)(v60 + 4) = v57.i32[0];
  *(void *)(v60 + 8) = 0;
  float v61 = *(float *)a2 * *(float *)(a2 + 4);
  uint64_t v62 = *(void *)(a2 + 48);
  if (!a1[52].i8[8])
  {
    uint64_t v63 = 0;
    uint64_t v64 = 4 * v10;
    float32x4_t v65 = *(float **)(a2 + 48);
    do
    {
      *float32x4_t v65 = v61 * (float)(v112.f32[v63] - v113.f32[v63]);
      float32x4_t v65 = (float *)((char *)v65 + v64);
      ++v63;
    }
    while (v63 != 3);
  }
  *(int8x8_t *)v66.f32 = vext_s8((int8x8_t)__PAIR64__(v47.u32[2], v48.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), 4uLL);
  v66.i64[1] = __PAIR64__(v47.u32[2], v48.u32[2]);
  float32x4_t v67 = (float32x4_t)__PAIR64__(v47.u32[2], v48.u32[2]);
  v67.i32[2] = v49.i32[2];
  v68.i64[0] = __PAIR64__(v47.u32[0], v48.u32[0]);
  v68.i64[1] = v49.u32[0];
  v69.i64[0] = __PAIR64__(v47.u32[1], v48.u32[1]);
  v69.i64[1] = v49.u32[1];
  uint64_t v70 = *(int *)(a2 + 40);
  uint64_t v71 = *(void *)(a2 + 16);
  *(_DWORD *)(v71 + 12 * v70) = v48.i32[0];
  uint64_t v72 = 12 * v70 + 4;
  *(int32x2_t *)(v71 + v7sub_1B6DC4968((unsigned int *)this + 2) = vzip1_s32(*(int32x2_t *)v47.f32, *(int32x2_t *)v49.i8);
  uint64_t v73 = *(void *)(a2 + 32);
  *(_DWORD *)(v71 + 16 * v70) = v48.i32[1];
  unint64_t v74 = (unint64_t)(4 * (int)v70) >> 2;
  uint64_t v75 = (16 * v74) | 4;
  *(_DWORD *)(v71 + v75) = v47.i32[1];
  uint64_t v76 = (16 * v74) | 8;
  *(_DWORD *)(v71 + v76) = v49.i32[1];
  *(float *)(v73 + 12 * v70) = -v48.f32[0];
  *(float *)(v73 + v7sub_1B6DC4968((unsigned int *)this + 2) = -v47.f32[0];
  uint64_t v77 = 16 * v70;
  *(float *)(v73 + 12 * v70 + 8) = -*(float *)v49.i32;
  *(float *)(v73 + v77) = -v48.f32[1];
  *(float *)(v73 + v75) = -v47.f32[1];
  *(float *)(v73 + v76) = -*(float *)&v49.i32[1];
  *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)__PAIR64__(v50.u32[2], v51.u32[2]), (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), 4uLL);
  v50.i64[1] = __PAIR64__(v50.u32[2], v51.u32[2]);
  v78.i64[0] = v50.i64[1];
  v78.i64[1] = v52.u32[2];
  float32x4_t v111 = v67;
  int8x16_t v79 = (int8x16_t)vsubq_f32(vmulq_f32(v67, v50), vmulq_f32(v66, v78));
  v80.i64[0] = vextq_s8(v79, v79, 4uLL).u64[0];
  v80.i64[1] = v79.u32[0];
  int8x16_t v81 = (int8x16_t)vmulq_f32(v68, v80);
  *(float *)(v62 + 12 * v70) = v61
                             * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL), vpadd_f32(*(float32x2_t *)v81.i8, *(float32x2_t *)v81.i8)).f32[0];
  int8x16_t v82 = (int8x16_t)vmulq_f32(v69, v80);
  *(float *)(v62 + v77) = v61
                        * vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL), vpadd_f32(*(float32x2_t *)v82.i8, *(float32x2_t *)v82.i8)).f32[0];
  int v83 = a1[51].u8[4];
  if (a1[51].i8[4])
  {
    float v84 = a1[50].f32[3] * a1[52].f32[1];
    if (v84 > 0.0) {
      int v85 = 1;
    }
    else {
      int v85 = 2;
    }
    BOOL v86 = a1[52].i8[9] == 0;
  }
  else
  {
    if (!a1[52].i8[9]) {
      return;
    }
    BOOL v86 = 0;
    int v85 = 0;
    float v84 = 0.0;
  }
  uint64_t v87 = 5 * v70;
  *(_DWORD *)(v71 + 20 * v70) = v48.i32[2];
  uint64_t v88 = 20 * v70;
  uint64_t v89 = v88 + 4;
  *(_DWORD *)(v71 + v89) = v47.i32[2];
  v88 += 8;
  *(_DWORD *)(v71 + v88) = v49.i32[2];
  *(float *)(v73 + 4 * v87) = -v48.f32[2];
  *(float *)(v73 + v89) = -v47.f32[2];
  *(float *)(v73 + v88) = -*(float *)&v49.i32[2];
  sub_1B6E0203C(&a1[49].f32[2]);
  float v91 = v90;
  sub_1B6E01FD4(&a1[49].f32[2]);
  float v93 = v92;
  BOOL v94 = v91 != v92 || v83 == 0;
  uint64_t v95 = *(void *)(a2 + 48);
  *(_DWORD *)(v95 + 4 * v87) = 0;
  char v96 = !v94;
  __int32 v97 = a1[53].i32[1];
  f32 = a1[54].f32;
  if ((v97 & 2) == 0) {
    f32 = (float *)(a2 + 4);
  }
  float v99 = *f32;
  if (!v86 && (v96 & 1) == 0)
  {
    if ((v97 & 4) != 0) {
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * v87) = a1[53].i32[2];
    }
    float v100 = sub_1B6E01C50(a1[52].f32[0], v91, v92, a1[49].f32[0], v99 * *(float *)a2);
    uint64_t v95 = *(void *)(a2 + 48);
    *(float *)(v95 + 4 * v87) = *(float *)(v95 + 4 * v87) + (float)((float)(v100 * a1[49].f32[0]) * a1[52].f32[1]);
    *(float *)(*(void *)(a2 + 64) + 4 * v87) = -a1[49].f32[1];
    *(_DWORD *)(*(void *)(a2 + 72) + 4 * v87) = a1[49].i32[1];
  }
  if (v83)
  {
    *(float *)(v95 + 4 * v87) = *(float *)(v95 + 4 * v87) + (float)((float)(v99 * *(float *)a2) * v84);
    if (a1[53].i8[4]) {
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * v87) = a1[53].i32[3];
    }
    if (v91 == v93)
    {
      *(_DWORD *)(*(void *)(a2 + 64) + 4 * v87) = -8388609;
    }
    else
    {
      uint64_t v101 = *(void *)(a2 + 64);
      if (v85 != 1)
      {
        *(_DWORD *)(v101 + 4 * v87) = -8388609;
        int v102 = 0;
LABEL_35:
        *(_DWORD *)(*(void *)(a2 + 72) + 4 * v87) = v102;
        float v103 = a1[50].f32[2];
        if (v103 <= 0.0)
        {
          float v107 = *(float *)(v95 + 4 * v87);
        }
        else
        {
          int8x16_t v104 = (int8x16_t)vmulq_f32(v111, *a5);
          int8x16_t v105 = (int8x16_t)vmulq_f32(v111, *a6);
          LODWORD(v106) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v104.i8, *(float32x2_t *)v104.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL))).u32[0];
          float v107 = *(float *)(v95 + 4 * v87);
          if (v85 == 1)
          {
            float v108 = -(float)(v103 * v106);
            if (v106 >= 0.0 || v108 <= v107) {
              goto LABEL_49;
            }
          }
          else
          {
            float v108 = -(float)(v103 * v106);
            if (v106 <= 0.0 || v108 >= v107) {
              goto LABEL_49;
            }
          }
          *(float *)(v95 + 4 * v87) = v108;
          float v107 = v108;
        }
LABEL_49:
        *(float *)(v95 + 4 * v87) = a1[50].f32[1] * v107;
        return;
      }
      *(_DWORD *)(v101 + 4 * v87) = 0;
    }
    int v102 = 2139095039;
    goto LABEL_35;
  }
}

uint64_t sub_1B6DFBC3C(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  a1[41] = *a2;
  a1[42] = a2[1];
  a1[43] = a2[2];
  a1[44] = a2[3];
  a1[45] = *a3;
  a1[46] = a3[1];
  a1[47] = a3[2];
  a1[48] = a3[3];
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

float sub_1B6DFBCA0(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)(a1 + 656);
  a4.i32[1] = *(_DWORD *)(a1 + 672);
  a4.i32[2] = *(_DWORD *)(a1 + 688);
  float32x4_t v4 = a2[1];
  int8x16_t v5 = (int8x16_t)vmulq_f32(*a2, a4);
  int8x16_t v6 = (int8x16_t)vmulq_f32(a4, v4);
  float32x4_t v7 = a2[2];
  int8x16_t v8 = (int8x16_t)vmulq_f32(a4, v7);
  float32x4_t v9 = (float32x4_t)vextq_s8(v5, v5, 8uLL);
  v8.i32[3] = 0;
  *(float32x2_t *)v5.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32(*(int32x2_t *)v9.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
  v9.i32[0] = *(_DWORD *)(a1 + 660);
  v9.i32[1] = *(_DWORD *)(a1 + 676);
  v9.i32[2] = *(_DWORD *)(a1 + 692);
  int8x16_t v10 = (int8x16_t)vmulq_f32(*a2, v9);
  int8x16_t v11 = (int8x16_t)vmulq_f32(v4, v9);
  float32x4_t v12 = vmulq_f32(v7, v9);
  v12.i32[3] = 0;
  *(float32x2_t *)v10.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v11.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
  *(float32x2_t *)v11.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), 0);
  v12.i32[0] = *(_DWORD *)(a1 + 724);
  v12.i32[1] = *(_DWORD *)(a1 + 740);
  v12.i32[2] = *(_DWORD *)(a1 + 756);
  int8x16_t v13 = (int8x16_t)vmulq_f32(*a3, v12);
  int8x16_t v14 = (int8x16_t)vmulq_f32(v12, a3[1]);
  int8x16_t v15 = (int8x16_t)vmulq_f32(v12, a3[2]);
  v15.i32[3] = 0;
  *(float32x2_t *)v13.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v14.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
  *(float32x2_t *)v6.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  *(float32x2_t *)v5.i8 = vmul_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v13.i8);
  *(float32x2_t *)v10.i8 = vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v13.i8);
  return atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v5.i8), vmul_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0), *(float32x2_t *)v6.i8)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v6.i8)).f32[0])* *(float *)(a1 + 836);
}

uint64_t sub_1B6DFBDCC(uint64_t result, int a2, int a3, float a4)
{
  if (a3 == 5 || a3 == -1)
  {
    switch(a2)
    {
      case 4:
        *(float *)(result + 860) = a4;
        int v4 = 1;
        break;
      case 3:
        *(float *)(result + 856) = a4;
        int v4 = 4;
        break;
      case 2:
        *(float *)(result + 864) = a4;
        int v4 = 2;
        break;
      default:
        return result;
    }
    *(_DWORD *)(result + 852) |= v4;
  }
  return result;
}

float sub_1B6DFBE24(float *a1, int a2, int a3)
{
  float result = 0.0;
  if (a3 == 5 || a3 == -1)
  {
    switch(a2)
    {
      case 4:
        return a1[215];
      case 3:
        return a1[214];
      case 2:
        return a1[216];
    }
  }
  return result;
}

void *sub_1B6DFBE68(void *result)
{
  *float result = &unk_1F0FB13D8;
  return result;
}

void sub_1B6DFBE88(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB13D8;
  sub_1B6E073C4(a1);
}

uint64_t sub_1B6DFBEA8()
{
  return 232;
}

const char *sub_1B6DFBEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6E01CE0(a1, a2, a3);
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 656;
  uint64_t v7 = a2 + 64;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
      *(_DWORD *)(v7 + i) = *(_DWORD *)(v6 + i);
    ++v5;
    v6 += 16;
    v7 += 16;
  }
  while (v5 != 3);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 112 + j) = *(_DWORD *)(a1 + 704 + j);
  uint64_t v10 = 0;
  uint64_t v11 = a1 + 720;
  uint64_t v12 = a2 + 128;
  do
  {
    for (uint64_t k = 0; k != 16; k += 4)
      *(_DWORD *)(v12 + k) = *(_DWORD *)(v11 + k);
    ++v10;
    v11 += 16;
    v12 += 16;
  }
  while (v10 != 3);
  for (uint64_t m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 176 + m) = *(_DWORD *)(a1 + 768 + m);
  int v15 = *(unsigned __int8 *)(a1 + 840);
  *(_DWORD *)(a2 + 200) = *(unsigned __int8 *)(a1 + 841);
  *(void *)(a2 + 204) = *(void *)(a1 + 784);
  *(_DWORD *)(a2 + 19sub_1B6DC4968((unsigned int *)this + 2) = *(unsigned __int8 *)(a1 + 844);
  *(_DWORD *)(a2 + 196) = v15;
  sub_1B6E0203C((float *)(a1 + 792));
  *(_DWORD *)(a2 + 21sub_1B6DC4968((unsigned int *)this + 2) = v16;
  sub_1B6E01FD4((float *)(a1 + 792));
  *(_DWORD *)(a2 + 216) = v17;
  *(void *)(a2 + 220) = *(void *)(a1 + 800);
  *(_DWORD *)(a2 + 228) = *(_DWORD *)(a1 + 808);
  return "btHingeConstraintFloatData";
}

double sub_1B6DFBFE0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  sub_1B6E01BF8(a1, 3, a2, a3);
  *(void *)uint64_t v7 = &unk_1F0FB1EA0;
  *(_OWORD *)(v7 + 368) = *a4;
  *(_OWORD *)(v7 + 384) = *a5;
  *(_DWORD *)(v7 + 400) = 0;
  *(unsigned char *)(v7 + 41sub_1B6DC4968((unsigned int *)this + 2) = 0;
  double result = 0.00781250182;
  *(void *)(v7 + 416) = 0x3F8000003E99999ALL;
  *(_DWORD *)(v7 + 424) = 0;
  return result;
}

double sub_1B6DFC058(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v5 = sub_1B6E01AB8(a1, 3, a2);
  *(float32x4_t *)(v5 + 368) = *a3;
  float32x4_t v6 = vmulq_f32(*(float32x4_t *)(a2 + 16), *a3);
  int8x16_t v7 = (int8x16_t)vmulq_f32(*a3, *(float32x4_t *)(a2 + 32));
  float32x4_t v8 = *(float32x4_t *)(a2 + 64);
  int8x16_t v9 = (int8x16_t)vmulq_f32(*a3, *(float32x4_t *)(a2 + 48));
  v9.i32[3] = 0;
  *(void *)uint64_t v5 = &unk_1F0FB1EA0;
  *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
  *(float32x4_t *)(v5 + 384) = vaddq_f32(v6, v8);
  *(_DWORD *)(v5 + 400) = 0;
  *(unsigned char *)(v5 + 41sub_1B6DC4968((unsigned int *)this + 2) = 0;
  double result = 0.00781250182;
  *(void *)(v5 + 416) = 0x3F8000003E99999ALL;
  *(_DWORD *)(v5 + 424) = 0;
  return result;
}

float32x4_t *sub_1B6DFC114(float32x4_t *a1)
{
  uint64_t v2 = 0;
  a1[3].i32[2] = 0;
  float32x4_t v33 = 0uLL;
  double result = a1 + 5;
  do
  {
    v33.i32[v2] = 1065353216;
    uint64_t v4 = a1[2].i64[1];
    uint64_t v5 = a1[3].i64[0];
    int32x4_t v6 = *(int32x4_t *)(v4 + 16);
    int32x4_t v7 = *(int32x4_t *)(v4 + 32);
    int8x16_t v8 = (int8x16_t)vtrn1q_s32(v6, v7);
    float32x4_t v9 = *(float32x4_t *)(v4 + 48);
    float32x4_t v10 = *(float32x4_t *)(v4 + 64);
    unsigned __int32 v11 = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
    *(int32x2_t *)v6.i8 = vzip2_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v7.i8);
    v7.i64[0] = vextq_s8(v8, v8, 8uLL).u64[0];
    v8.i64[1] = v9.u32[0];
    v6.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v9.f32, 0);
    float32x4_t v12 = a1[23];
    float32x4_t v13 = a1[24];
    int8x16_t v14 = (int8x16_t)vmulq_f32(v9, v12);
    v7.i64[1] = v11;
    v32[0] = (float32x4_t)v8;
    v32[1] = (float32x4_t)v6;
    _OWORD v32[2] = (float32x4_t)v7;
    int32x4_t v15 = *(int32x4_t *)(v5 + 16);
    int32x4_t v16 = *(int32x4_t *)(v5 + 32);
    int8x16_t v17 = (int8x16_t)vtrn1q_s32(v15, v16);
    float32x4_t v18 = *(float32x4_t *)(v5 + 48);
    float32x4_t v19 = *(float32x4_t *)(v5 + 64);
    unsigned __int32 v20 = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
    *(int32x2_t *)v15.i8 = vzip2_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8);
    v16.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
    v17.i64[1] = v18.u32[0];
    v15.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v18.f32, 0);
    int8x16_t v21 = (int8x16_t)vmulq_f32(v18, v13);
    v16.i64[1] = v20;
    v31[0] = (float32x4_t)v17;
    v31[1] = (float32x4_t)v15;
    _OWORD v31[2] = (float32x4_t)v16;
    float32x4_t v22 = vmulq_f32(*(float32x4_t *)(v4 + 16), v12);
    int8x16_t v23 = (int8x16_t)vmulq_f32(v12, *(float32x4_t *)(v4 + 32));
    v14.i32[3] = 0;
    *(float32x2_t *)v22.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v23.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)));
    *(float32x2_t *)&v22.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 0);
    float32x4_t v24 = vsubq_f32(vaddq_f32(v10, v22), v10);
    v24.i32[3] = 0;
    float32x4_t v25 = vmulq_f32(*(float32x4_t *)(v5 + 16), v13);
    int8x16_t v26 = (int8x16_t)vmulq_f32(v13, *(float32x4_t *)(v5 + 32));
    v21.i32[3] = 0;
    *(float32x2_t *)v25.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
    *(float32x2_t *)&v25.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 0);
    float32x4_t v27 = vsubq_f32(vaddq_f32(v19, v25), v19);
    v27.i32[3] = 0;
    float32x4_t v29 = v27;
    float32x4_t v30 = v24;
    sub_1B6DF9BEC(result, v32, v31, (int8x8_t *)&v30, (int8x8_t *)&v29, &v33, (float32x4_t *)(v4 + 448), (float32x4_t *)(v5 + 448), *(float *)(v4 + 384), *(float *)(v5 + 384));
    v33.i32[v2++] = 0;
    double result = v28 + 6;
  }
  while (v2 != 3);
  return result;
}

uint64_t sub_1B6DFC2B4(uint64_t result, int *a2)
{
  if (*(unsigned char *)(result + 412)) {
    int v2 = 0;
  }
  else {
    int v2 = 3;
  }
  *a2 = v2;
  a2[1] = v2;
  return result;
}

float sub_1B6DFC2CC(float32x4_t *a1, uint64_t a2)
{
  return sub_1B6DFC2DC(a1, a2, (float32x4_t *)(a1[2].i64[1] + 16), (float32x4_t *)(a1[3].i64[0] + 16));
}

float sub_1B6DFC2DC(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  *uint64_t v5 = 1065353216;
  uint64_t v6 = *(int *)(a2 + 40);
  v5[v6 + 1] = 1065353216;
  v5[2 * (int)v6 + 2] = 1065353216;
  float32x4_t v7 = a1[23];
  int8x16_t v8 = (int8x16_t)vmulq_f32(*a3, v7);
  int8x16_t v9 = (int8x16_t)vmulq_f32(v7, a3[1]);
  int8x16_t v10 = (int8x16_t)vmulq_f32(v7, a3[2]);
  v10.i32[3] = 0;
  *(float32x2_t *)v7.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v9.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
  *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = v11 + 4 * v6;
  uint64_t v13 = v11 + 8 * v6;
  float32x4_t v14 = vnegq_f32(v7);
  *(_DWORD *)uint64_t v11 = 0;
  *(float *)(v11 + 4) = -v14.f32[2];
  *(_DWORD *)(v11 + 8) = v14.i32[1];
  *(_DWORD *)(v11 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)uint64_t v12 = v14.i32[2];
  *(_DWORD *)(v12 + 4) = 0;
  *(float *)(v12 + 8) = -v14.f32[0];
  *(_DWORD *)(v12 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(float *)uint64_t v13 = -v14.f32[1];
  *(_DWORD *)(v13 + 4) = v14.i32[0];
  *(void *)(v13 + 8) = 0;
  int32x4_t v15 = *(_DWORD **)(a2 + 24);
  *int32x4_t v15 = -1082130432;
  uint64_t v16 = *(int *)(a2 + 40);
  v15[v16 + 1] = -1082130432;
  v15[2 * (int)v16 + 2] = -1082130432;
  float32x4_t v17 = a1[24];
  int8x16_t v18 = (int8x16_t)vmulq_f32(*a4, v17);
  int8x16_t v19 = (int8x16_t)vmulq_f32(v17, a4[1]);
  int8x16_t v20 = (int8x16_t)vmulq_f32(v17, a4[2]);
  v20.i32[3] = 0;
  *(float32x2_t *)v18.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)));
  *(float *)v20.i32 = vpadd_f32(vpadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)), 0).f32[0];
  uint64_t v21 = *(void *)(a2 + 32);
  uint64_t v22 = v21 + 4 * v16;
  uint64_t v23 = v21 + 8 * v16;
  *(_DWORD *)uint64_t v21 = 0;
  *(float *)(v21 + 4) = -*(float *)v20.i32;
  *(_DWORD *)(v21 + 8) = v18.i32[1];
  *(_DWORD *)(v21 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)uint64_t v22 = v20.u32[0];
  *(float *)(v22 + 8) = -*(float *)v18.i32;
  *(_DWORD *)(v22 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(float *)uint64_t v23 = -*(float *)&v18.i32[1];
  *(_DWORD *)(v23 + 4) = v18.i32[0];
  *(void *)(v23 + 8) = 0;
  __int32 v24 = a1[25].i32[0];
  float32x4_t v25 = &a1[25].f32[1];
  if ((v24 & 1) == 0) {
    float32x4_t v25 = (float *)(a2 + 4);
  }
  float v26 = *v25 * *(float *)a2;
  float32x4_t v27 = *(float **)(a2 + 48);
  uint64_t v28 = *(int *)(a2 + 40);
  uint64_t v29 = 4 * v28;
  do
  {
    *float32x4_t v27 = v26
         * (float)((float)((float)(*(float *)((char *)v37 + v4 * 4) + a4[3].f32[v4])
                         - *(float *)((char *)&v37[1] + v4 * 4))
                 - a3[3].f32[v4]);
    float32x4_t v27 = (float *)((char *)v27 + v29);
    ++v4;
  }
  while (v4 != 3);
  if ((v24 & 2) != 0)
  {
    float32x4_t v30 = *(_DWORD **)(a2 + 56);
    uint64_t v31 = 3;
    do
    {
      *float32x4_t v30 = a1[25].i32[2];
      float32x4_t v30 = (_DWORD *)((char *)v30 + v29);
      --v31;
    }
    while (v31);
  }
  int v32 = 0;
  float v33 = a1[26].f32[2];
  int v34 = 2;
  float v35 = v33;
  while (1)
  {
    if (v35 > 0.0)
    {
      *(float *)(*(void *)(a2 + 64) + 4 * v3sub_1B6DC4968((unsigned int *)this + 2) = -v33;
      *(float *)(*(void *)(a2 + 72) + 4 * v3sub_1B6DC4968((unsigned int *)this + 2) = v33;
    }
    if (!v34) {
      break;
    }
    float v35 = a1[26].f32[2];
    --v34;
    v32 += v28;
  }
  float result = a1[26].f32[1];
  *(float *)(a2 + 9sub_1B6DC4968((unsigned int *)this + 2) = result;
  return result;
}

uint64_t sub_1B6DFC528(uint64_t result, int a2, int a3, float a4)
{
  if (a3 == -1)
  {
    if ((a2 - 3) < 2)
    {
      *(float *)(result + 408) = a4;
      int v4 = 2;
    }
    else
    {
      if ((a2 - 1) > 1) {
        return result;
      }
      *(float *)(result + 404) = a4;
      int v4 = 1;
    }
    *(_DWORD *)(result + 400) |= v4;
  }
  return result;
}

float sub_1B6DFC570(uint64_t a1, int a2, int a3)
{
  if (a3 != -1) {
    return 3.4028e38;
  }
  if ((a2 - 3) < 2) {
    return *(float *)(a1 + 408);
  }
  if ((a2 - 1) > 1) {
    return 3.4028e38;
  }
  return *(float *)(a1 + 404);
}

void *sub_1B6DFC5AC(void *result)
{
  *float result = &unk_1F0FB13D8;
  return result;
}

void sub_1B6DFC5CC(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB13D8;
  sub_1B6E073C4(a1);
}

uint64_t sub_1B6DFC5EC()
{
  return 96;
}

const char *sub_1B6DFC5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6E01CE0(a1, a2, a3);
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)(a2 + 64 + i) = *(_DWORD *)(a1 + 368 + i);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 80 + j) = *(_DWORD *)(a1 + 384 + j);
  return "btPoint2PointConstraintFloatData";
}

double sub_1B6DFC664(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2970;
  *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + 24) = 0;
  double result = 0.0;
  *(void *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 44) = 0;
  *(unsigned char *)(a1 + 96) = 1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = 1;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 160) = 1;
  *(void *)(a1 + 15sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 17sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(a1 + 224) = 1;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 204) = 0;
  *(unsigned char *)(a1 + 256) = 1;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 236) = 0;
  *(unsigned char *)(a1 + 288) = 1;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 268) = 0;
  *(void *)(a1 + 304) = 0;
  return result;
}

void *sub_1B6DFC704(void *a1)
{
  *a1 = &unk_1F0FB2970;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_1B6441B40((uint64_t)(a1 + 33));
  sub_1B6441B40((uint64_t)(a1 + 29));
  sub_1B6441B40((uint64_t)(a1 + 25));
  sub_1B6441B40((uint64_t)(a1 + 21));
  sub_1B6441B40((uint64_t)(a1 + 17));
  sub_1B6441B40((uint64_t)(a1 + 13));
  sub_1B6441B40((uint64_t)(a1 + 9));
  sub_1B6441B40((uint64_t)(a1 + 5));
  sub_1B6441B40(v2);
  return a1;
}

void sub_1B6DFC794(void *a1)
{
  uint64_t v1 = sub_1B6DFC704(a1);

  sub_1B6E073C4((uint64_t)v1);
}

float32x4_t sub_1B6DFC7BC(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float v4 = a4[6].f32[1];
  _S4 = a4[6].i32[3];
  float v6 = a4[7].f32[2];
  float32x4_t v7 = a4[1];
  int8x16_t v8 = (int8x16_t)vmulq_f32(v7, a2[4]);
  _Q5 = (int8x16_t)vmulq_f32(*a4, a2[5]);
  _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL))).u32[0];
  _Q6 = (int8x16_t)vmulq_f32(a4[3], a3[4]);
  int8x16_t v11 = (int8x16_t)vmulq_f32(a4[2], a3[5]);
  _Q6.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))).u32[0];
  __asm
  {
    FMLS            S0, S4, V5.S[0]
    FMLS            S0, S4, V6.S[0]
  }
  float v18 = v4 + result.f32[0];
  if ((float)(v4 + result.f32[0]) < v6 || (float v6 = a4[7].f32[3], v18 > v6))
  {
    result.f32[0] = v6 - v4;
    float v18 = v6;
  }
  a4[6].f32[1] = v18;
  if (a2[13].i64[0])
  {
    float32x4_t v19 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
    v19.i32[3] = 0;
    float32x4_t v20 = a2[6];
    float32x4_t v21 = a2[5];
    a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v19));
    float32x4_t v22 = vmulq_n_f32(v20, result.f32[0]);
    v22.i32[3] = 0;
    a2[5] = vaddq_f32(v21, vmulq_f32(a4[4], v22));
  }
  if (a3[13].i64[0])
  {
    float32x4_t v23 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
    v23.i32[3] = 0;
    float32x4_t v24 = a3[6];
    float32x4_t v25 = a3[5];
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v23));
    float32x4_t v26 = vmulq_n_f32(v24, result.f32[0]);
    v26.i32[3] = 0;
    float32x4_t result = vaddq_f32(v25, vmulq_f32(a4[5], v26));
    a3[5] = result;
  }
  return result;
}

float32x4_t sub_1B6DFC8E0(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float v4 = a4[6].f32[1];
  _S2 = a4[6].i32[3];
  float v6 = a4[7].f32[2];
  float32x4_t v7 = a4[1];
  int8x16_t v8 = (int8x16_t)vmulq_f32(v7, a2[4]);
  _Q5 = (int8x16_t)vmulq_f32(*a4, a2[5]);
  _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL))).u32[0];
  _Q6 = (int8x16_t)vmulq_f32(a4[3], a3[4]);
  int8x16_t v11 = (int8x16_t)vmulq_f32(a4[2], a3[5]);
  _Q6.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))).u32[0];
  __asm
  {
    FMLS            S3, S2, V5.S[0]
    FMLS            S3, S2, V6.S[0]
  }
  float v18 = v4 + _S3;
  result.f32[0] = v6 - v4;
  if (v18 >= v6) {
    result.f32[0] = _S3;
  }
  else {
    float v18 = a4[7].f32[2];
  }
  a4[6].f32[1] = v18;
  if (a2[13].i64[0])
  {
    float32x4_t v20 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
    v20.i32[3] = 0;
    float32x4_t v21 = a2[6];
    float32x4_t v22 = a2[5];
    a2[4] = vaddq_f32(a2[4], vmulq_f32(a2[7], v20));
    float32x4_t v23 = vmulq_n_f32(v21, result.f32[0]);
    v23.i32[3] = 0;
    a2[5] = vaddq_f32(v22, vmulq_f32(a4[4], v23));
  }
  if (a3[13].i64[0])
  {
    float32x4_t v24 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
    v24.i32[3] = 0;
    float32x4_t v25 = a3[6];
    float32x4_t v26 = a3[5];
    a3[4] = vaddq_f32(a3[4], vmulq_f32(a3[7], v24));
    float32x4_t v27 = vmulq_n_f32(v25, result.f32[0]);
    v27.i32[3] = 0;
    float32x4_t result = vaddq_f32(v26, vmulq_f32(a4[5], v27));
    a3[5] = result;
  }
  return result;
}

float32x4_t sub_1B6DFC9F8(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  result.i32[0] = a4[8].i32[0];
  if (result.f32[0] != 0.0)
  {
    float v5 = a4[6].f32[0];
    float v6 = a4[7].f32[2];
    float32x4_t v7 = a4[1];
    int8x16_t v8 = (int8x16_t)vmulq_f32(v7, a2[9]);
    _Q4 = (int8x16_t)vmulq_f32(*a4, a2[10]);
    _Q4.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q4.i8, *(float32x2_t *)_Q4.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q4, _Q4, 8uLL))).u32[0];
    _Q5 = (int8x16_t)vmulq_f32(a4[3], a3[9]);
    _Q6 = (int8x16_t)vmulq_f32(a4[2], a3[10]);
    ++dword_1E9E49968;
    _Q5.i32[0] = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q5, _Q5, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q6.i8, *(float32x2_t *)_Q6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q6, _Q6, 8uLL))).u32[0];
    _Q6.i32[0] = a4[6].i32[3];
    __asm
    {
      FMLS            S0, S6, V4.S[0]
      FMLS            S0, S6, V5.S[0]
    }
    float v17 = v5 + result.f32[0];
    float v18 = v6 - v5;
    if (v17 < v6) {
      result.f32[0] = v18;
    }
    else {
      float v6 = v17;
    }
    a4[6].f32[0] = v6;
    if (a2[13].i64[0])
    {
      float32x4_t v19 = vmulq_n_f32(vmulq_f32(v7, a2[8]), result.f32[0]);
      v19.i32[3] = 0;
      float32x4_t v20 = vmulq_n_f32(a2[6], result.f32[0]);
      v20.i32[3] = 0;
      a2[9] = vaddq_f32(a2[9], vmulq_f32(a2[7], v19));
      a2[10] = vaddq_f32(a2[10], vmulq_f32(a4[4], v20));
    }
    if (a3[13].i64[0])
    {
      float32x4_t v21 = vmulq_n_f32(vmulq_f32(a4[3], a3[8]), result.f32[0]);
      v21.i32[3] = 0;
      float32x4_t v22 = vmulq_n_f32(a3[6], result.f32[0]);
      v22.i32[3] = 0;
      a3[9] = vaddq_f32(a3[9], vmulq_f32(a3[7], v21));
      float32x4_t result = vaddq_f32(a3[10], vmulq_f32(a4[5], v22));
      a3[10] = result;
    }
  }
  return result;
}

uint64_t sub_1B6DFCB2C(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = (1664525 * *(_DWORD *)(a1 + 304) + 1013904223);
  *(void *)(a1 + 304) = v2;
  if (a2 <= 0x10000)
  {
    v2 ^= v2 >> 16;
    if (a2 <= 0x100)
    {
      v2 ^= v2 >> 8;
      if (a2 <= 0x10)
      {
        v2 ^= v2 >> 4;
        if (a2 <= 4)
        {
          v2 ^= v2 >> 2;
          if (a2 <= 2) {
            v2 ^= v2 >> 1;
          }
        }
      }
    }
  }
  return (v2 % (int)a2);
}

void sub_1B6DFCB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if ((*(unsigned char *)(a3 + 264) & 2) != 0) {
      uint64_t v3 = a3;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  long long v4 = 0uLL;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  if (v3)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a2 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(v3 + 64);
    float v5 = (const float *)(v3 + 384);
    float32x4_t v6 = vld1q_dup_f32(v5);
    v6.i32[3] = 0;
    *(float32x4_t *)(a2 + sub_1B6DC7B98((uint64_t)this + 128) = vmulq_f32(*(float32x4_t *)(v3 + 400), v6);
    *(void *)(a2 + 208) = v3;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v3 + 624);
    *(_OWORD *)(a2 + 11sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v3 + 400);
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(v3 + 352);
    long long v4 = *(_OWORD *)(v3 + 368);
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1B6E4F300;
    *(_OWORD *)(a2 + 16) = xmmword_1B6E4F320;
    *(_OWORD *)(a2 + 3sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E4F2E0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + sub_1B6DC7B98((uint64_t)this + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 208) = 0;
    *(_OWORD *)(a2 + 96) = xmmword_1B6E4F540;
    *(_OWORD *)(a2 + 11sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E4F540;
    *(_OWORD *)(a2 + 176) = 0uLL;
  }
  *(_OWORD *)(a2 + 19sub_1B6DC4968((unsigned int *)this + 2) = v4;
}

double sub_1B6DFCC5C(uint64_t a1, uint64_t a2, int8x16_t *a3, int a4, int a5, uint64_t a6, int8x8_t *a7, int8x8_t *a8, float a9, float a10, float a11)
{
  float32x4_t v11 = *(float32x4_t *)a3;
  *(int8x16_t *)(a2 + 16) = *a3;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  float32x4_t v13 = (float32x4_t)veorq_s8(*a3, v12);
  *(float32x4_t *)(a2 + 48) = v13;
  uint64_t v14 = *(void *)(a1 + 24);
  int32x4_t v15 = *(float32x4_t **)(v14 + 224 * a4 + 208);
  uint64_t v16 = *(float32x4_t **)(v14 + 224 * a5 + 208);
  *(_DWORD *)(a2 + 15sub_1B6DC4968((unsigned int *)this + 2) = a4;
  *(_DWORD *)(a2 + 156) = a5;
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a6 + 84);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 96) = 0;
  *(int8x8_t *)v17.f32 = vext_s8(*a7, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a7->i8, *(int8x16_t *)a7->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v17.u32[2] = *a7;
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v11.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), 4uLL);
  v18.i64[1] = v11.i64[0];
  int8x16_t v19 = (int8x16_t)vsubq_f32(vmulq_f32(v18, *(float32x4_t *)a7->i8), vmulq_f32(v11, v17));
  v20.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v20.i64[1] = v19.u32[0];
  *(float32x4_t *)a2 = v20;
  int8x16_t v21 = 0uLL;
  float32x4_t v22 = 0uLL;
  if (v15)
  {
    float32x4_t v23 = vmulq_f32(v15[19], v20);
    int8x16_t v24 = (int8x16_t)vmulq_f32(v15[20], v20);
    int8x16_t v25 = (int8x16_t)vmulq_f32(v15[21], v20);
    v25.i32[3] = 0;
    *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
    *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
    float32x4_t v22 = vmulq_f32(v23, v15[39]);
  }
  *(float32x4_t *)(a2 + 64) = v22;
  *(int8x8_t *)v26.f32 = vext_s8(*a8, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8->i8, *(int8x16_t *)a8->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v26.u32[2] = *a8;
  v27.i64[0] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL).u64[0];
  v27.i64[1] = v13.i64[0];
  int8x16_t v28 = (int8x16_t)vsubq_f32(vmulq_f32(v27, *(float32x4_t *)a8->i8), vmulq_f32(v26, v13));
  v29.i64[0] = vextq_s8(v28, v28, 4uLL).u64[0];
  v29.i64[1] = v28.u32[0];
  *(float32x4_t *)(a2 + 3sub_1B6DC4968((unsigned int *)this + 2) = v29;
  if (v16)
  {
    float32x4_t v30 = vmulq_f32(v16[19], v29);
    int8x16_t v31 = (int8x16_t)vmulq_f32(v16[20], v29);
    int8x16_t v32 = (int8x16_t)vmulq_f32(v16[21], v29);
    v32.i32[3] = 0;
    *(float32x2_t *)v30.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v31.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)));
    *(float32x2_t *)&v30.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 0);
    int8x16_t v21 = (int8x16_t)vmulq_f32(v30, v16[39]);
  }
  *(int8x16_t *)(a2 + 80) = v21;
  float v33 = 0.0;
  float v34 = 0.0;
  if (v15)
  {
    v35.i64[0] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL).u64[0];
    v35.i64[1] = v22.i64[0];
    *(int8x8_t *)v36.f32 = vext_s8(*a7, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a7->i8, *(int8x16_t *)a7->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v36.u32[2] = *a7;
    int8x16_t v37 = (int8x16_t)vsubq_f32(vmulq_f32(v22, v36), vmulq_f32(v35, *(float32x4_t *)a7->i8));
    v38.i64[0] = vextq_s8(v37, v37, 4uLL).u64[0];
    v38.i64[1] = v37.u32[0];
    int8x16_t v39 = (int8x16_t)vmulq_f32(*(float32x4_t *)a3, v38);
    float v34 = v15[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)).f32[0];
  }
  if (v16)
  {
    v40.i64[0] = 0x8000000080000000;
    v40.i64[1] = 0x8000000080000000;
    float32x4_t v41 = (float32x4_t)veorq_s8(v21, v40);
    *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), 4uLL);
    v42.i64[1] = v41.i64[0];
    *(int8x8_t *)v43.f32 = vext_s8(*a8, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a8->i8, *(int8x16_t *)a8->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v43.u32[2] = *a8;
    int8x16_t v44 = (int8x16_t)vsubq_f32(vmulq_f32(v43, v41), vmulq_f32(*(float32x4_t *)a8->i8, v42));
    v40.i64[0] = vextq_s8(v44, v44, 4uLL).u64[0];
    v40.i64[1] = v44.u32[0];
    int8x16_t v45 = (int8x16_t)vmulq_f32(*(float32x4_t *)a3, (float32x4_t)v40);
    float v33 = v16[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).f32[0];
  }
  float v46 = a9 / (float)(v34 + v33);
  *(float *)(a2 + 108) = v46;
  if (!v15)
  {
    float32x4_t v48 = 0uLL;
    int8x16_t v55 = (int8x16_t)vmulq_f32(v11, (float32x4_t)0);
    unsigned __int32 v50 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8)).u32[0];
    if (v16) {
      goto LABEL_11;
    }
LABEL_13:
    float32x4_t v52 = 0uLL;
    int8x16_t v56 = (int8x16_t)vmulq_f32(v13, (float32x4_t)0);
    unsigned __int32 v54 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8)).u32[0];
    goto LABEL_14;
  }
  float32x4_t v47 = (float32x4_t *)(v14 + 224 * a4);
  float32x4_t v48 = v47[12];
  int8x16_t v49 = (int8x16_t)vmulq_f32(v11, v47[11]);
  unsigned __int32 v50 = vadd_f32(vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)).u32[0];
  if (!v16) {
    goto LABEL_13;
  }
LABEL_11:
  float32x4_t v51 = (float32x4_t *)(v14 + 224 * a5);
  float32x4_t v52 = v51[12];
  int8x16_t v53 = (int8x16_t)vmulq_f32(v51[11], v13);
  unsigned __int32 v54 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)).u32[0];
LABEL_14:
  int8x16_t v57 = (int8x16_t)vmulq_f32(v48, v20);
  *(float *)v57.i32 = *(float *)&v50
                    + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8)).f32[0];
  int8x16_t v58 = (int8x16_t)vmulq_f32(v52, v29);
  *(float *)(a2 + 11sub_1B6DC4968((unsigned int *)this + 2) = v46
                       * (float)(a10
                               - (float)(*(float *)v57.i32
                                       + (float)(*(float *)&v54
                                               + vadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)).f32[0])));
  *(float *)(a2 + 116) = a11;
  double result = 6.08244611e77;
  *(void *)(a2 + 120) = 0x501502F900000000;
  return result;
}

uint64_t sub_1B6DFCF34(uint64_t a1, int8x16_t *a2, int a3, int a4, int a5, uint64_t a6, int8x8_t *a7, int8x8_t *a8, float a9, float a10, float a11)
{
  int v21 = *(_DWORD *)(a1 + 108);
  int v22 = v21;
  if (v21 == *(_DWORD *)(a1 + 112))
  {
    int v23 = v21 ? 2 * v21 : 1;
    if (v21 < v23)
    {
      if (v23)
      {
        int8x16_t v24 = a8;
        uint64_t v25 = sub_1B6E073B8(160 * v23, 16);
        a8 = v24;
        uint64_t v26 = v25;
        int v21 = *(_DWORD *)(a1 + 108);
      }
      else
      {
        uint64_t v26 = 0;
      }
      if (v21 >= 1)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 160 * v21;
        do
        {
          float32x4_t v29 = (_OWORD *)(v26 + v27);
          float32x4_t v30 = (_OWORD *)(*(void *)(a1 + 120) + v27);
          *float32x4_t v29 = *v30;
          v29[1] = v30[1];
          float32x4_t v29[2] = v30[2];
          v29[3] = v30[3];
          _OWORD v29[4] = v30[4];
          v29[5] = v30[5];
          long long v31 = v30[6];
          long long v32 = v30[7];
          long long v33 = v30[9];
          v29[8] = v30[8];
          v29[9] = v33;
          v29[6] = v31;
          v29[7] = v32;
          v27 += 160;
        }
        while (v28 != v27);
      }
      uint64_t v34 = *(void *)(a1 + 120);
      if (v34 && *(unsigned char *)(a1 + 128))
      {
        int8x16_t v37 = a8;
        sub_1B6E073C4(v34);
        a8 = v37;
      }
      *(unsigned char *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = 1;
      *(void *)(a1 + 120) = v26;
      *(_DWORD *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = v23;
      int v21 = *(_DWORD *)(a1 + 108);
    }
  }
  *(_DWORD *)(a1 + 108) = v21 + 1;
  uint64_t v35 = *(void *)(a1 + 120) + 160 * v22;
  *(_DWORD *)(v35 + 148) = a5;
  sub_1B6DFCC5C(a1, v35, a2, a3, a4, a6, a7, a8, a9, a10, a11);
  return v35;
}

double sub_1B6DFD0E4(uint64_t a1, uint64_t a2, int8x16_t *a3, int a4, int a5, uint64_t a6, double a7, float a8, float a9)
{
  float32x4_t v9 = 0uLL;
  *(_OWORD *)(a2 + 16) = 0u;
  v10.i64[0] = 0x8000000080000000;
  v10.i64[1] = 0x8000000080000000;
  *(int8x16_t *)(a2 + 48) = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  int8x16_t v12 = *(float32x4_t **)(v11 + 224 * a4 + 208);
  float32x4_t v13 = *(float32x4_t **)(v11 + 224 * a5 + 208);
  *(_DWORD *)(a2 + 15sub_1B6DC4968((unsigned int *)this + 2) = a4;
  *(_DWORD *)(a2 + 156) = a5;
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a6 + 88);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 96) = 0;
  float32x4_t v14 = (float32x4_t)veorq_s8(*a3, v10);
  *(float32x4_t *)a2 = v14;
  float32x4_t v15 = 0uLL;
  if (v12)
  {
    float32x4_t v16 = vmulq_f32(v12[19], v14);
    int8x16_t v17 = (int8x16_t)vmulq_f32(v12[20], v14);
    int8x16_t v18 = (int8x16_t)vmulq_f32(v12[21], v14);
    v18.i32[3] = 0;
    *(float32x2_t *)v16.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)));
    *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
    float32x4_t v15 = vmulq_f32(v16, v12[39]);
  }
  *(float32x4_t *)(a2 + 64) = v15;
  float32x4_t v19 = *(float32x4_t *)a3;
  *(int8x16_t *)(a2 + 3sub_1B6DC4968((unsigned int *)this + 2) = *a3;
  if (v13)
  {
    float32x4_t v20 = vmulq_f32(v19, v13[19]);
    int8x16_t v21 = (int8x16_t)vmulq_f32(v19, v13[20]);
    int8x16_t v22 = (int8x16_t)vmulq_f32(v19, v13[21]);
    v22.i32[3] = 0;
    *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
    *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
    float32x4_t v9 = vmulq_f32(v20, v13[39]);
  }
  *(float32x4_t *)(a2 + 80) = v9;
  float32x4_t v23 = 0uLL;
  float32x4_t v24 = 0uLL;
  if (v12)
  {
    int8x16_t v25 = (int8x16_t)vmulq_f32(v12[19], v14);
    int8x16_t v26 = (int8x16_t)vmulq_f32(v12[20], v14);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v12[21], v14);
    v27.i32[3] = 0;
    *(float32x2_t *)v24.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
    *(float32x2_t *)&v24.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  }
  if (v13)
  {
    int8x16_t v28 = (int8x16_t)vmulq_f32(v19, v13[19]);
    int8x16_t v29 = (int8x16_t)vmulq_f32(v19, v13[20]);
    int8x16_t v30 = (int8x16_t)vmulq_f32(v19, v13[21]);
    v30.i32[3] = 0;
    *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v29.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)));
    *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 0);
  }
  int8x16_t v31 = (int8x16_t)vmulq_f32(v24, v14);
  int8x16_t v32 = (int8x16_t)vmulq_f32(v19, v23);
  float v33 = 1.0
      / (float)((float)(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8)).f32[0]+ 0.0)+ vadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)).f32[0]);
  *(float *)(a2 + 108) = v33;
  if (!v12)
  {
    float v37 = vpadd_f32(0, 0).f32[0] + 0.0;
    float32x4_t v35 = 0uLL;
    if (v13) {
      goto LABEL_11;
    }
LABEL_13:
    unsigned __int32 v42 = vpadd_f32((float32x2_t)0x8000000080000000, (float32x2_t)0x8000000080000000).u32[0];
    float32x4_t v40 = 0uLL;
    goto LABEL_14;
  }
  uint64_t v34 = (float32x4_t *)(v11 + 224 * a4);
  float32x4_t v35 = v34[12];
  int8x16_t v36 = (int8x16_t)vmulq_f32(v34[11], (float32x4_t)0);
  LODWORD(v37) = vadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)).u32[0];
  if (!v13) {
    goto LABEL_13;
  }
LABEL_11:
  float32x4_t v38 = (float32x4_t *)(v11 + 224 * a5);
  v39.i64[0] = 0x8000000080000000;
  v39.i64[1] = 0x8000000080000000;
  float32x4_t v40 = v38[12];
  int8x16_t v41 = (int8x16_t)vmulq_f32(v38[11], v39);
  unsigned __int32 v42 = vadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)).u32[0];
LABEL_14:
  int8x16_t v43 = (int8x16_t)vmulq_f32(v35, v14);
  int8x16_t v44 = (int8x16_t)vmulq_f32(v19, v40);
  *(float *)(a2 + 11sub_1B6DC4968((unsigned int *)this + 2) = v33
                       * (float)(a8
                               - (float)((float)(v37
                                               + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8)).f32[0])+ (float)(*(float *)&v42+ vadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)).f32[0])));
  *(float *)(a2 + 116) = a9;
  double result = 6.08244611e77;
  *(void *)(a2 + 120) = 0x501502F900000000;
  return result;
}

uint64_t sub_1B6DFD35C(uint64_t a1, int8x16_t *a2, int a3, int a4, int a5, uint64_t a6, __n128 a7, float a8, float a9)
{
  int v17 = *(_DWORD *)(a1 + 140);
  int v18 = v17;
  if (v17 == *(_DWORD *)(a1 + 144))
  {
    int v19 = v17 ? 2 * v17 : 1;
    if (v17 < v19)
    {
      if (v19)
      {
        uint64_t v20 = sub_1B6E073B8(160 * v19, 16);
        int v17 = *(_DWORD *)(a1 + 140);
      }
      else
      {
        uint64_t v20 = 0;
      }
      if (v17 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 160 * v17;
        do
        {
          uint64_t v23 = v20 + v21;
          uint64_t v24 = *(void *)(a1 + 152) + v21;
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
          *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
          *(_OWORD *)(v23 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v23 + 48) = *(_OWORD *)(v24 + 48);
          *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
          *(_OWORD *)(v23 + 80) = *(_OWORD *)(v24 + 80);
          a7 = *(__n128 *)(v24 + 96);
          long long v25 = *(_OWORD *)(v24 + 112);
          long long v26 = *(_OWORD *)(v24 + 144);
          *(_OWORD *)(v23 + sub_1B6DC7B98((uint64_t)this + 128) = *(_OWORD *)(v24 + 128);
          *(_OWORD *)(v23 + 144) = v26;
          *(__n128 *)(v23 + 96) = a7;
          *(_OWORD *)(v23 + 11sub_1B6DC4968((unsigned int *)this + 2) = v25;
          v21 += 160;
        }
        while (v22 != v21);
      }
      uint64_t v27 = *(void *)(a1 + 152);
      if (v27 && *(unsigned char *)(a1 + 160)) {
        sub_1B6E073C4(v27);
      }
      *(unsigned char *)(a1 + 160) = 1;
      *(void *)(a1 + 15sub_1B6DC4968((unsigned int *)this + 2) = v20;
      *(_DWORD *)(a1 + 144) = v19;
      int v17 = *(_DWORD *)(a1 + 140);
    }
  }
  *(_DWORD *)(a1 + 140) = v17 + 1;
  uint64_t v28 = *(void *)(a1 + 152) + 160 * v18;
  *(_DWORD *)(v28 + 148) = a5;
  sub_1B6DFD0E4(a1, v28, a2, a3, a4, a6, a7.n128_f64[0], a8, a9);
  return v28;
}

uint64_t sub_1B6DFD4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 240);
  if ((v2 & 0x80000000) != 0)
  {
    if ((*(unsigned char *)(a2 + 264) & 2) != 0 && ((uint64_t v4 = a1, *(float *)(a2 + 384) != 0.0) || (*(unsigned char *)(a2 + 232) & 2) != 0))
    {
      uint64_t v2 = *(unsigned int *)(a1 + 12);
      int v5 = *(_DWORD *)(a1 + 12);
      if (v2 == *(_DWORD *)(a1 + 16))
      {
        int v6 = v2 ? 2 * v2 : 1;
        int v5 = *(_DWORD *)(a1 + 12);
        if ((int)v2 < v6)
        {
          if (v6) {
            uint64_t v7 = sub_1B6E073B8(224 * v6, 16);
          }
          else {
            uint64_t v7 = 0;
          }
          int v8 = *(_DWORD *)(v4 + 12);
          if (v8 >= 1)
          {
            uint64_t v9 = 0;
            uint64_t v10 = 224 * v8;
            do
            {
              uint64_t v11 = *(void *)(v4 + 24) + v9;
              uint64_t v12 = v7 + v9;
              *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
              *(_OWORD *)(v12 + 16) = *(_OWORD *)(v11 + 16);
              *(_OWORD *)(v12 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v11 + 32);
              *(_OWORD *)(v12 + 48) = *(_OWORD *)(v11 + 48);
              *(_OWORD *)(v12 + 64) = *(_OWORD *)(v11 + 64);
              *(_OWORD *)(v12 + 80) = *(_OWORD *)(v11 + 80);
              *(_OWORD *)(v12 + 96) = *(_OWORD *)(v11 + 96);
              *(_OWORD *)(v12 + 11sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v11 + 112);
              *(_OWORD *)(v12 + sub_1B6DC7B98((uint64_t)this + 128) = *(_OWORD *)(v11 + 128);
              *(_OWORD *)(v12 + 144) = *(_OWORD *)(v11 + 144);
              *(_OWORD *)(v12 + 160) = *(_OWORD *)(v11 + 160);
              *(_OWORD *)(v12 + 176) = *(_OWORD *)(v11 + 176);
              *(_OWORD *)(v12 + 19sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v11 + 192);
              *(void *)(v12 + 208) = *(void *)(v11 + 208);
              v9 += 224;
            }
            while (v10 != v9);
          }
          a1 = *(void *)(v4 + 24);
          if (a1 && *(unsigned char *)(v4 + 32)) {
            sub_1B6E073C4(a1);
          }
          *(unsigned char *)(v4 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
          *(void *)(v4 + 24) = v7;
          *(_DWORD *)(v4 + 16) = v6;
          int v5 = *(_DWORD *)(v4 + 12);
        }
      }
      *(_DWORD *)(v4 + 1sub_1B6DC4968((unsigned int *)this + 2) = v5 + 1;
      uint64_t v13 = *(void *)(v4 + 24) + 224 * (int)v2;
      *(void *)(v13 + 208) = 0;
      *(_OWORD *)(v13 + 176) = 0u;
      *(_OWORD *)(v13 + 19sub_1B6DC4968((unsigned int *)this + 2) = 0u;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_OWORD *)(v13 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0u;
      *(_OWORD *)(v13 + sub_1B6DC7B98((uint64_t)this + 128) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0u;
      *(_OWORD *)uint64_t v13 = 0u;
      sub_1B6DFCB94(a1, *(void *)(v4 + 24) + 224 * (int)v2, a2);
      *(_DWORD *)(a2 + 240) = v2;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1B6DFD6B0(uint64_t result, uint64_t a2, int a3, int a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, float *a8, float *a9, int8x8_t *a10, int8x8_t *a11)
{
  uint64_t v11 = *(void *)(result + 24);
  uint64_t v12 = (float32x4_t *)(v11 + 224 * a3);
  float32x4_t v15 = (float32x4_t *)v12[13].i64[0];
  float32x4_t v14 = v12 + 13;
  uint64_t v13 = v15;
  float32x4_t v16 = (float32x4_t *)(v11 + 224 * a4);
  int v19 = (float32x4_t *)v16[13].i64[0];
  int v18 = v16 + 13;
  int v17 = v19;
  float32x4_t v20 = vsubq_f32(a5[3], v14[-10]);
  v20.i32[3] = 0;
  *(float32x4_t *)a10->i8 = v20;
  float32x4_t v21 = vsubq_f32(a5[2], v18[-10]);
  v21.i32[3] = 0;
  *(float32x4_t *)a11->i8 = v21;
  *a9 = 1.0;
  float32x4_t v22 = a5[4];
  *(int8x8_t *)v23.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v23.u32[2] = *a10;
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v24.i64[1] = a5[4].i64[0];
  int8x16_t v25 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a10->i8, v24), vmulq_f32(v22, v23));
  v26.i64[0] = vextq_s8(v25, v25, 4uLL).u64[0];
  v26.i64[1] = v25.u32[0];
  int8x16_t v27 = 0uLL;
  float32x4_t v28 = 0uLL;
  if (v13)
  {
    float32x4_t v29 = vmulq_f32(v13[19], v26);
    int8x16_t v30 = (int8x16_t)vmulq_f32(v13[20], v26);
    int8x16_t v31 = (int8x16_t)vmulq_f32(v13[21], v26);
    v31.i32[3] = 0;
    *(float32x2_t *)v29.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)));
    *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    float32x4_t v28 = vmulq_f32(v29, v13[39]);
  }
  *(float32x4_t *)(a2 + 64) = v28;
  float32x4_t v32 = a5[4];
  *(int8x8_t *)v33.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v33.u32[2] = *a11;
  *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v32.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), 4uLL);
  v34.i64[1] = a5[4].i64[0];
  int8x16_t v35 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a11->i8, v34), vmulq_f32(v32, v33));
  v36.i64[0] = vextq_s8(v35, v35, 4uLL).u64[0];
  v36.i64[1] = v35.u32[0];
  if (v17)
  {
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    float32x4_t v38 = (float32x4_t)veorq_s8(v36, v37);
    float32x4_t v39 = vmulq_f32(v17[19], v38);
    int8x16_t v40 = (int8x16_t)vmulq_f32(v17[20], v38);
    int8x16_t v41 = (int8x16_t)vmulq_f32(v17[21], v38);
    v41.i32[3] = 0;
    *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
    *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v39, v17[39]);
  }
  *(int8x16_t *)(a2 + 80) = v27;
  float v42 = 0.0;
  float v43 = 0.0;
  if (v13)
  {
    v44.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL).u64[0];
    v44.i64[1] = v28.i64[0];
    *(int8x8_t *)v45.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v45.u32[2] = *a10;
    int8x16_t v46 = (int8x16_t)vsubq_f32(vmulq_f32(v28, v45), vmulq_f32(v44, *(float32x4_t *)a10->i8));
    v47.i64[0] = vextq_s8(v46, v46, 4uLL).u64[0];
    v47.i64[1] = v46.u32[0];
    int8x16_t v48 = (int8x16_t)vmulq_f32(a5[4], v47);
    float v43 = v13[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL)).f32[0];
  }
  if (v17)
  {
    v49.i64[0] = 0x8000000080000000;
    v49.i64[1] = 0x8000000080000000;
    float32x4_t v50 = (float32x4_t)veorq_s8(v27, v49);
    *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), 4uLL);
    v51.i64[1] = v50.i64[0];
    *(int8x8_t *)v52.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v52.u32[2] = *a11;
    int8x16_t v53 = (int8x16_t)vsubq_f32(vmulq_f32(v52, v50), vmulq_f32(*(float32x4_t *)a11->i8, v51));
    v49.i64[0] = vextq_s8(v53, v53, 4uLL).u64[0];
    v49.i64[1] = v53.u32[0];
    int8x16_t v54 = (int8x16_t)vmulq_f32(a5[4], (float32x4_t)v49);
    float v42 = v17[24].f32[0]
        + vadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)).f32[0];
  }
  *(float *)(a2 + 108) = *a9 / (float)(v43 + v42);
  *(float32x4_t *)(a2 + 16) = a5[4];
  v55.i64[0] = 0x8000000080000000;
  v55.i64[1] = 0x8000000080000000;
  int8x16_t v56 = veorq_s8((int8x16_t)a5[4], v55);
  *(float32x4_t *)a2 = v26;
  *(int8x16_t *)(a2 + 3sub_1B6DC4968((unsigned int *)this + 2) = veorq_s8(v36, v55);
  *(int8x16_t *)(a2 + 48) = v56;
  float32x4_t v57 = 0uLL;
  float32x4_t v58 = 0uLL;
  if (v13)
  {
    float32x4_t v59 = v13[23];
    *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v59.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL), 4uLL);
    v60.i64[1] = v13[23].i64[0];
    *(int8x8_t *)v61.f32 = vext_s8(*a10, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a10->i8, *(int8x16_t *)a10->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v61.u32[2] = *a10;
    int8x16_t v62 = (int8x16_t)vsubq_f32(vmulq_f32(v59, v61), vmulq_f32(*(float32x4_t *)a10->i8, v60));
    v59.i64[0] = vextq_s8(v62, v62, 4uLL).u64[0];
    v59.i64[1] = v62.u32[0];
    float32x4_t v58 = vaddq_f32(v13[22], v59);
  }
  if (v17)
  {
    float32x4_t v63 = v17[23];
    *(int8x8_t *)v64.f32 = vext_s8(*(int8x8_t *)v63.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL), 4uLL);
    v64.i64[1] = v17[23].i64[0];
    *(int8x8_t *)v65.f32 = vext_s8(*a11, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a11->i8, *(int8x16_t *)a11->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v65.u32[2] = *a11;
    int8x16_t v66 = (int8x16_t)vsubq_f32(vmulq_f32(v63, v65), vmulq_f32(*(float32x4_t *)a11->i8, v64));
    v63.i64[0] = vextq_s8(v66, v66, 4uLL).u64[0];
    v63.i64[1] = v66.u32[0];
    float32x4_t v57 = vaddq_f32(v17[22], v63);
  }
  float v67 = a5[5].f32[0];
  float v68 = *(float *)(a6 + 56);
  float32x4_t v69 = vsubq_f32(v58, v57);
  v69.i32[3] = 0;
  *a7 = v69;
  int8x16_t v70 = (int8x16_t)vmulq_f32(a5[4], v69);
  *(_DWORD *)a8 = vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).u32[0];
  *(_DWORD *)(a2 + 104) = a5[5].i32[1];
  float v71 = -(float)(*a8 * a5[5].f32[3]);
  if (v71 <= 0.0) {
    float v71 = 0.0;
  }
  if ((*(unsigned char *)(a6 + 64) & 4) != 0)
  {
    float v72 = a5[7].f32[3] * *(float *)(a6 + 60);
    *(float *)(a2 + 100) = v72;
    if (v13 && v14->i64[0])
    {
      uint64_t v73 = (float32x4_t *)(v11 + 224 * a3);
      float32x4_t v74 = vmulq_n_f32(vmulq_f32(vmulq_f32(*(float32x4_t *)(a2 + 16), v73[8]), v13[25]), v72);
      v74.i32[3] = 0;
      float32x4_t v75 = v73[6];
      float32x4_t v76 = v73[5];
      v73[4] = vaddq_f32(v73[4], vmulq_f32(v73[7], v74));
      float32x4_t v77 = vmulq_n_f32(v75, v72);
      v77.i32[3] = 0;
      v73[5] = vaddq_f32(v76, vmulq_f32(*(float32x4_t *)(a2 + 64), v77));
    }
    if (v17 && v18->i64[0])
    {
      float v78 = -*(float *)(a2 + 100);
      v79.i64[0] = 0x8000000080000000;
      v79.i64[1] = 0x8000000080000000;
      float32x4_t v80 = (float32x4_t)veorq_s8(*(int8x16_t *)(a2 + 80), v79);
      int8x16_t v81 = (float32x4_t *)(v11 + 224 * a4);
      float32x4_t v82 = vmulq_n_f32(vmulq_f32(v17[25], vmulq_f32(v81[8], (float32x4_t)veorq_s8(*(int8x16_t *)(a2 + 48), v79))), v78);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_n_f32(v81[6], v78);
      v83.i32[3] = 0;
      float32x4_t v84 = vaddq_f32(v81[5], vmulq_f32(v80, v83));
      v81[4] = vaddq_f32(v81[4], vmulq_f32(v81[7], v82));
      v81[5] = v84;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 100) = 0;
  }
  *(_DWORD *)(a2 + 96) = 0;
  if (v13)
  {
    int v85 = (float32x4_t *)(v11 + 224 * a3);
    float32x4_t v86 = v85[12];
    int8x16_t v87 = (int8x16_t)vmulq_f32(v85[11], *(float32x4_t *)(a2 + 16));
  }
  else
  {
    float32x4_t v86 = 0uLL;
    int8x16_t v87 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 16), (float32x4_t)0);
  }
  float v88 = v67 + v68;
  int8x16_t v89 = (int8x16_t)vmulq_f32(v86, *(float32x4_t *)a2);
  float v90 = vadd_f32(vpadd_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v87.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)).f32[0]+ vadd_f32(vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)).f32[0];
  if (v17)
  {
    float v91 = (float32x4_t *)(v11 + 224 * a4);
    float32x4_t v92 = v91[12];
    int8x16_t v93 = (int8x16_t)vmulq_f32(v91[11], *(float32x4_t *)(a2 + 48));
  }
  else
  {
    float32x4_t v92 = 0uLL;
    int8x16_t v93 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 48), (float32x4_t)0);
  }
  int8x16_t v94 = (int8x16_t)vmulq_f32(v92, *(float32x4_t *)(a2 + 32));
  float v95 = v71
      - (float)(v90
              + (float)(vadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v93.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)).f32[0]+ vadd_f32(vpadd_f32(*(float32x2_t *)v94.i8, *(float32x2_t *)v94.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)).f32[0]));
  BOOL v97 = v88 > *(float *)(a6 + 48) || *(_DWORD *)(a6 + 44) == 0;
  if (v88 <= 0.0)
  {
    uint64_t v99 = 36;
    if (v97) {
      uint64_t v99 = 32;
    }
    float v98 = (float)-(float)(v88 * *(float *)(a6 + v99)) / *(float *)(a6 + 12);
  }
  else
  {
    float v95 = v95 - (float)(v88 / *(float *)(a6 + 12));
    float v98 = 0.0;
  }
  float v100 = *(float *)(a2 + 108);
  float v101 = v98 * v100;
  float v102 = v95 * v100;
  float v103 = -0.0;
  if (v97) {
    float v103 = v101;
  }
  *(float *)(a2 + 11sub_1B6DC4968((unsigned int *)this + 2) = v102 + v103;
  if (v97) {
    float v104 = 0.0;
  }
  else {
    float v104 = v101;
  }
  *(float *)(a2 + sub_1B6DC7B98((uint64_t)this + 128) = v104;
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 124) = 1343554297;
  return result;
}

float32x4_t sub_1B6DFDC00(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, float32x4_t result)
{
  uint64_t v7 = *(void *)(a1 + 24);
  int v8 = *(float32x4_t **)(v7 + 224 * a3 + 208);
  uint64_t v9 = *(float32x4_t **)(v7 + 224 * a4 + 208);
  int v10 = *(_DWORD *)(a2 + 148);
  uint64_t v11 = *(void *)(a1 + 120);
  if ((*(unsigned char *)(a6 + 64) & 4) != 0)
  {
    result.f32[0] = *(float *)(a5 + 128) * *(float *)(a6 + 60);
    uint64_t v12 = v11 + 160 * v10;
    *(_DWORD *)(v12 + 100) = result.i32[0];
    uint64_t v13 = (float *)(v12 + 100);
    if (v8)
    {
      float32x4_t v14 = (float32x4_t *)(v11 + 160 * v10);
      float32x4_t v15 = vmulq_n_f32(vmulq_f32(v8[25], vmulq_n_f32(v14[1], v8[24].f32[0])), result.f32[0]);
      v15.i32[3] = 0;
      float32x4_t v16 = (float32x4_t *)(v7 + 224 * a3);
      float32x4_t v17 = v16[6];
      float32x4_t v18 = v16[5];
      v16[4] = vaddq_f32(v16[4], vmulq_f32(v16[7], v15));
      float32x4_t v19 = vmulq_n_f32(v17, result.f32[0]);
      v19.i32[3] = 0;
      double result = vaddq_f32(v18, vmulq_f32(v14[4], v19));
      _OWORD v16[5] = result;
    }
    if (v9)
    {
      float32x4_t v20 = (int8x16_t *)(v11 + 160 * v10);
      v21.i64[0] = 0x8000000080000000;
      v21.i64[1] = 0x8000000080000000;
      float32x4_t v22 = vmulq_f32(v9[25], vmulq_n_f32((float32x4_t)veorq_s8(v20[3], v21), v9[24].f32[0]));
      float32x4_t v23 = (float32x4_t)veorq_s8(v20[5], v21);
      float v24 = -*v13;
      float32x4_t v25 = vmulq_n_f32(v22, v24);
      v25.i32[3] = 0;
      float32x4_t v26 = (float32x4_t *)(v7 + 224 * a4);
      double result = vaddq_f32(v26[4], vmulq_f32(v26[7], v25));
      float32x4_t v27 = vmulq_n_f32(v26[6], v24);
      v27.i32[3] = 0;
      float32x4_t v28 = vaddq_f32(v26[5], vmulq_f32(v23, v27));
      void v26[4] = result;
      void v26[5] = v28;
    }
  }
  else
  {
    *(_DWORD *)(v11 + 160 * v10 + 100) = 0;
  }
  int v29 = *(_DWORD *)(a6 + 64);
  if ((v29 & 0x10) != 0)
  {
    uint64_t v30 = *(int *)(a2 + 148) + 1;
    uint64_t v31 = *(void *)(a1 + 120);
    if ((v29 & 4) != 0)
    {
      result.f32[0] = *(float *)(a5 + 132) * *(float *)(a6 + 60);
      uint64_t v32 = v31 + 160 * v30;
      *(_DWORD *)(v32 + 100) = result.i32[0];
      float32x4_t v33 = (float *)(v32 + 100);
      if (v8)
      {
        float32x4_t v34 = (float32x4_t *)(v31 + 160 * v30);
        float32x4_t v35 = vmulq_n_f32(vmulq_n_f32(v34[1], v8[24].f32[0]), result.f32[0]);
        v35.i32[3] = 0;
        int8x16_t v36 = (float32x4_t *)(v7 + 224 * a3);
        float32x4_t v37 = v36[6];
        float32x4_t v38 = v36[5];
        float v36[4] = vaddq_f32(v36[4], vmulq_f32(v36[7], v35));
        float32x4_t v39 = vmulq_n_f32(v37, result.f32[0]);
        v39.i32[3] = 0;
        double result = vaddq_f32(v38, vmulq_f32(v34[4], v39));
        v36[5] = result;
      }
      if (v9)
      {
        int8x16_t v40 = (int8x16_t *)(v31 + 160 * v30);
        v41.i64[0] = 0x8000000080000000;
        v41.i64[1] = 0x8000000080000000;
        float v42 = -*v33;
        float32x4_t v43 = vmulq_n_f32(vmulq_n_f32((float32x4_t)veorq_s8(v40[3], v41), v9[24].f32[0]), v42);
        v43.i32[3] = 0;
        float32x4_t v44 = (float32x4_t *)(v7 + 224 * a4);
        double result = vaddq_f32(v44[4], vmulq_f32(v44[7], v43));
        float32x4_t v45 = vmulq_n_f32(v44[6], v42);
        v45.i32[3] = 0;
        float32x4_t v46 = vaddq_f32(v44[5], vmulq_f32((float32x4_t)veorq_s8(v40[5], v41), v45));
        float32x4_t v44[4] = result;
        v44[5] = v46;
      }
    }
    else
    {
      *(_DWORD *)(v31 + 160 * v30 + 100) = 0;
    }
  }
  return result;
}

void sub_1B6DFDE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 792);
  float32x4_t v113 = *(float32x4_t **)(a2 + 784);
  int v7 = sub_1B6DFD4E4(a1, (uint64_t)v113);
  float32x4_t v112 = (float32x4_t *)v6;
  int v8 = sub_1B6DFD4E4(a1, v6);
  int v9 = v8;
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = v10 + 224 * v7;
  float v13 = *(float *)(v11 + 128);
  uint64_t v12 = v11 + 128;
  if (v13 != 0.0
    || *(float *)(v12 + 4) != 0.0
    || *(float *)(v12 + 8) != 0.0
    || (v14 = v10 + 224 * v8, v16 = *(float *)(v14 + 128), uint64_t v15 = v14 + 128, v16 != 0.0)
    || *(float *)(v15 + 4) != 0.0
    || *(float *)(v15 + 8) != 0.0)
  {
    int v17 = *(_DWORD *)(a2 + 800);
    if (v17 >= 1)
    {
      uint64_t v18 = 0;
      float32x4_t v19 = (float32x4_t *)(v10 + 224 * v7);
      float v108 = v19 + 5;
      int8x16_t v109 = v19 + 12;
      float32x4_t v20 = (float32x4_t *)(v10 + 224 * v8);
      uint64_t v110 = v20 + 13;
      float32x4_t v111 = v19 + 13;
      float v106 = v20 + 5;
      float v107 = v20 + 12;
      int v114 = 1;
      int v105 = v8;
      uint64_t v115 = a3;
      while (1)
      {
        int8x16_t v21 = (float32x4_t *)(a2 + 192 * v18);
        if (v21[6].f32[0] <= *(float *)(a2 + 808)) {
          break;
        }
LABEL_68:
        if (++v18 >= v17) {
          return;
        }
      }
      uint64_t v119 = 0;
      int v22 = *(_DWORD *)(a1 + 44);
      int v23 = v22;
      if (v22 == *(_DWORD *)(a1 + 48))
      {
        int v24 = v22 ? 2 * v22 : 1;
        int v23 = *(_DWORD *)(a1 + 44);
        if (v22 < v24)
        {
          if (v24) {
            uint64_t v25 = sub_1B6E073B8(160 * v24, 16);
          }
          else {
            uint64_t v25 = 0;
          }
          int v26 = *(_DWORD *)(a1 + 44);
          if (v26 >= 1)
          {
            uint64_t v27 = 0;
            uint64_t v28 = 160 * v26;
            do
            {
              int v29 = (_OWORD *)(v25 + v27);
              uint64_t v30 = (_OWORD *)(*(void *)(a1 + 56) + v27);
              *int v29 = *v30;
              v29[1] = v30[1];
              float32x4_t v29[2] = v30[2];
              v29[3] = v30[3];
              _OWORD v29[4] = v30[4];
              v29[5] = v30[5];
              long long v31 = v30[6];
              long long v32 = v30[7];
              long long v33 = v30[9];
              v29[8] = v30[8];
              v29[9] = v33;
              v29[6] = v31;
              v29[7] = v32;
              v27 += 160;
            }
            while (v28 != v27);
          }
          uint64_t v34 = *(void *)(a1 + 56);
          if (v34 && *(unsigned char *)(a1 + 64)) {
            sub_1B6E073C4(v34);
          }
          *(unsigned char *)(a1 + 64) = 1;
          *(void *)(a1 + 56) = v25;
          *(_DWORD *)(a1 + 48) = v24;
          int v23 = *(_DWORD *)(a1 + 44);
        }
      }
      uint64_t v35 = (uint64_t)&v21[1];
      *(_DWORD *)(a1 + 44) = v23 + 1;
      uint64_t v36 = *(void *)(a1 + 56) + 160 * v22;
      *(_DWORD *)(v36 + 15sub_1B6DC4968((unsigned int *)this + 2) = v7;
      *(_DWORD *)(v36 + 156) = v9;
      *(void *)(v36 + 136) = v21 + 1;
      uint64_t v37 = v115;
      sub_1B6DFD6B0(a1, v36, v7, v9, v21 + 1, v115, &v118, (float *)&v119, (float *)&v119 + 1, v121, v120);
      *(_DWORD *)(v36 + 148) = *(_DWORD *)(a1 + 108);
      float32x4_t v38 = 0uLL;
      float32x4_t v39 = 0uLL;
      if (v111->i64[0]) {
        float32x4_t v39 = vaddq_f32(*v109, *v108);
      }
      if (v110->i64[0]) {
        float32x4_t v38 = vaddq_f32(*v107, *v106);
      }
      if (*(float *)(a2 + 192 * v18 + 104) <= 0.0 || v114 < 1)
      {
LABEL_45:
        uint64_t v65 = a2 + 192 * v18;
        int v68 = *(unsigned __int8 *)(v65 + 136);
        float v67 = (unsigned char *)(v65 + 136);
        int v66 = v68;
        if ((*(unsigned char *)(v37 + 64) & 0x20) != 0 && v66)
        {
          float v69 = *((float *)&v119 + 1);
          sub_1B6DFCF34(a1, (int8x16_t *)(a2 + 192 * v18 + 176), v7, v9, v22, v35, v121, v120, *((float *)&v119 + 1), *(float *)(a2 + 192 * v18 + 152), *(float *)(a2 + 192 * v18 + 160));
          if ((*(unsigned char *)(v37 + 64) & 0x10) != 0) {
            sub_1B6DFCF34(a1, (int8x16_t *)(a2 + 192 * v18 + 192), v7, v9, v22, v35, v121, v120, v69, *(float *)(a2 + 192 * v18 + 156), *(float *)(a2 + 192 * v18 + 164));
          }
          sub_1B6DFDC00(a1, v36, v7, v9, v35, v37, v70);
        }
        else
        {
          uint64_t v71 = a2 + 192 * v18;
          float32x4_t v72 = *(float32x4_t *)(v71 + 80);
          float32x4_t v73 = vsubq_f32(v118, vmulq_n_f32(v72, *(float *)&v119));
          v73.i32[3] = 0;
          *(float32x4_t *)(v71 + 176) = v73;
          float32x4_t v74 = (float32x2_t *)(v71 + 176);
          int v75 = *(_DWORD *)(v37 + 64);
          if ((v75 & 0x40) != 0
            || (int8x16_t v76 = (int8x16_t)vmulq_f32(v73, v73),
                float v77 = vadd_f32(vpadd_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL)).f32[0], v77 <= 0.00000011921))
          {
            float v86 = v72.f32[1];
            int8x16_t v87 = (float32x2_t *)(a2 + 192 * v18 + 192);
            BOOL v88 = fabsf(v72.f32[2]) <= 0.70711;
            float v89 = (float)(v86 * v86) + (float)(v72.f32[0] * v72.f32[0]);
            float v90 = 1.0 / sqrtf(v89);
            float v91 = -(float)(v72.f32[1] * v90);
            float v92 = v72.f32[0] * v90;
            float v93 = -(float)(v72.f32[2] * (float)(v72.f32[0] * v90));
            float v94 = v72.f32[2] * v91;
            float v95 = v89 * v90;
            float v96 = (float)(v72.f32[2] * v72.f32[2]) + (float)(v86 * v86);
            float v97 = 1.0 / sqrtf(v96);
            float v98 = -(float)(v72.f32[2] * v97);
            float v99 = v72.f32[1] * v97;
            float v100 = v96 * v97;
            float v101 = -(float)(v72.f32[0] * (float)(v72.f32[1] * v97));
            float v102 = v98 * v72.f32[0];
            if (v88)
            {
              float v98 = v92;
              float v99 = 0.0;
            }
            else
            {
              float v91 = 0.0;
            }
            if (v88)
            {
              float v100 = v93;
              float v103 = v94;
            }
            else
            {
              float v103 = v101;
            }
            if (v88) {
              float v102 = v95;
            }
            v74->f32[0] = v91;
            v74->f32[1] = v98;
            v74[1].f32[0] = v99;
            v87->f32[0] = v100;
            *(float *)(a2 + 192 * v18 + 196) = v103;
            *(float *)(a2 + 192 * v18 + 200) = v102;
            float v104 = *((float *)&v119 + 1);
            if ((v75 & 0x10) != 0)
            {
              sub_1B6DFE6BC(v113, (float32x2_t *)(a2 + 192 * v18 + 192), 1);
              sub_1B6DFE6BC(v112, v87, 1);
              sub_1B6DFCF34(a1, (int8x16_t *)v87, v7, v9, v22, v35, v121, v120, v104, 0.0, 0.0);
            }
            sub_1B6DFE6BC(v113, v74, 1);
            sub_1B6DFE6BC(v112, v74, 1);
            sub_1B6DFCF34(a1, (int8x16_t *)v74, v7, v9, v22, v35, v121, v120, v104, 0.0, 0.0);
            if ((~*(_DWORD *)(v115 + 64) & 0x50) == 0) {
              *float v67 = 1;
            }
          }
          else
          {
            float32x4_t v78 = vmulq_n_f32(v73, 1.0 / sqrtf(v77));
            *(float32x4_t *)v74->f32 = v78;
            float v79 = *((float *)&v119 + 1);
            if ((*(unsigned char *)(v37 + 64) & 0x10) != 0)
            {
              v80.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL).u64[0];
              v80.i64[1] = v78.i64[0];
              v81.i64[0] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL).u64[0];
              v81.i64[1] = v72.i64[0];
              int8x16_t v82 = (int8x16_t)vsubq_f32(vmulq_f32(v81, v78), vmulq_f32(v72, v80));
              v83.i64[0] = vextq_s8(v82, v82, 4uLL).u64[0];
              v83.i64[1] = v82.u32[0];
              uint64_t v84 = a2 + 192 * v18;
              int8x16_t v85 = (int8x16_t)vmulq_f32(v83, v83);
              *(float32x4_t *)(v84 + 19sub_1B6DC4968((unsigned int *)this + 2) = vmulq_n_f32(v83, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8)).f32[0]));
              v84 += 192;
              sub_1B6DFE6BC(v113, (float32x2_t *)v84, 1);
              sub_1B6DFE6BC(v112, (float32x2_t *)v84, 1);
              sub_1B6DFCF34(a1, (int8x16_t *)v84, v7, v9, v22, v35, v121, v120, v79, 0.0, 0.0);
            }
            sub_1B6DFE6BC(v113, v74, 1);
            sub_1B6DFE6BC(v112, v74, 1);
            sub_1B6DFCF34(a1, (int8x16_t *)v74, v7, v9, v22, v35, v121, v120, v79, 0.0, 0.0);
          }
        }
        int v17 = *(_DWORD *)(a2 + 800);
        goto LABEL_68;
      }
      __n128 v41 = (__n128)vsubq_f32(v38, v39);
      v41.n128_u32[3] = 0;
      int8x16_t v42 = (int8x16_t)vmulq_f32((float32x4_t)v41, (float32x4_t)v41);
      float v43 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8)).f32[0]);
      if (v43 <= *(float *)(v115 + 80))
      {
        int8x16_t v48 = (float *)(a2 + 192 * v18);
        int8x16_t v49 = v48 + 20;
        sub_1B6DFD35C(a1, (int8x16_t *)v48 + 5, v7, v9, v22, v35, v41, 0.0, 0.0);
        float v50 = v48[22];
        if (fabsf(v50) <= 0.70711)
        {
          float v56 = v48[21];
          float v57 = (float)(v56 * v56) + (float)(*v49 * *v49);
          float v58 = 1.0 / sqrtf(v57);
          *(float *)&unsigned int v59 = *v49 * v58;
          v117.f32[0] = -(float)(v56 * v58);
          *(uint64_t *)((char *)v117.i64 + 4) = v59;
          v116.f32[0] = -(float)(v50 * *(float *)&v59);
          v116.f32[1] = v50 * v117.f32[0];
          float v55 = v57 * v58;
        }
        else
        {
          float v52 = *v49;
          float v51 = v48[21];
          float v53 = (float)(v50 * v50) + (float)(v51 * v51);
          float v54 = 1.0 / sqrtf(v53);
          v117.i32[0] = 0;
          v117.f32[1] = -(float)(v50 * v54);
          v117.f32[2] = v51 * v54;
          v116.f32[0] = v53 * v54;
          v116.f32[1] = -(float)(v52 * (float)(v51 * v54));
          float v55 = v117.f32[1] * v52;
        }
        uint64_t v37 = v115;
        v116.f32[2] = v55;
        sub_1B6DFE6BC(v113, (float32x2_t *)&v117, 2);
        sub_1B6DFE6BC(v112, (float32x2_t *)&v117, 2);
        sub_1B6DFE6BC(v113, (float32x2_t *)&v116, 2);
        sub_1B6DFE6BC(v112, (float32x2_t *)&v116, 2);
        int8x16_t v60 = (int8x16_t)vmulq_f32(v117, v117);
        float32x2_t v61 = vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8);
        __n128 v62 = (__n128)vextq_s8(v60, v60, 8uLL);
        v62.n128_f64[0] = sqrtf(vadd_f32(v61, (float32x2_t)v62.n128_u64[0]).f32[0]);
        int v9 = v105;
        if (v62.n128_f64[0] > 0.001) {
          sub_1B6DFD35C(a1, (int8x16_t *)&v117, v7, v105, v22, v35, v62, 0.0, 0.0);
        }
        int8x16_t v63 = (int8x16_t)vmulq_f32(v116, v116);
        float32x2_t v64 = vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8);
        __n128 v46 = (__n128)vextq_s8(v63, v63, 8uLL);
        v46.n128_f64[0] = sqrtf(vadd_f32(v64, (float32x2_t)v46.n128_u64[0]).f32[0]);
        if (v46.n128_f64[0] <= 0.001) {
          goto LABEL_44;
        }
        float32x4_t v47 = &v116;
      }
      else
      {
        float32x4_t v117 = vmulq_n_f32((float32x4_t)v41, 1.0 / v43);
        sub_1B6DFE6BC(v113, (float32x2_t *)&v117, 2);
        sub_1B6DFE6BC(v112, (float32x2_t *)&v117, 2);
        int8x16_t v44 = (int8x16_t)vmulq_f32(v117, v117);
        float32x2_t v45 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8);
        __n128 v46 = (__n128)vextq_s8(v44, v44, 8uLL);
        v46.n128_f64[0] = sqrtf(vadd_f32(v45, (float32x2_t)v46.n128_u64[0]).f32[0]);
        if (v46.n128_f64[0] <= 0.001)
        {
LABEL_44:
          int v114 = 0;
          goto LABEL_45;
        }
        float32x4_t v47 = &v117;
      }
      sub_1B6DFD35C(a1, (int8x16_t *)v47, v7, v9, v22, v35, v46, 0.0, 0.0);
      goto LABEL_44;
    }
  }
}

float32x2_t sub_1B6DFE6BC(float32x4_t *a1, float32x2_t *a2, int a3)
{
  if (a1)
  {
    if ((a1[12].i32[0] & a3) != 0)
    {
      float32x4_t v3 = a1[1];
      v3.i32[3] = 0;
      float32x4_t v4 = a1[2];
      v4.i32[3] = 0;
      float32x4_t v5 = a1[3];
      v5.i32[3] = 0;
      float32x4_t v6 = vmulq_f32(a1[11], vaddq_f32(vaddq_f32(vmulq_n_f32(v3, COERCE_FLOAT(*(_OWORD *)a2->f32)), vmulq_lane_f32(v4, *a2, 1)), vmulq_laneq_f32(v5, *(float32x4_t *)a2->f32, 2)));
      int8x16_t v7 = (int8x16_t)vmulq_f32(v6, a1[1]);
      int8x16_t v8 = (int8x16_t)vmulq_f32(v6, a1[2]);
      int8x16_t v9 = (int8x16_t)vmulq_f32(v6, a1[3]);
      v9.i32[3] = 0;
      *(float32x2_t *)v7.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
      float32x2_t result = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
      v7.u64[1] = (unint64_t)result;
      *(int8x16_t *)a2->f32 = v7;
    }
  }
  return result;
}

double sub_1B6DFE74C(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, int a5, _DWORD **a6, int a7, uint64_t a8)
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  *(_DWORD *)(a1 + 296) = 0;
  uint64_t v14 = a3;
  if (a3 >= 1)
  {
    uint64_t v15 = a3;
    float v16 = a2;
    do
    {
      uint64_t v17 = *v16++;
      *(_DWORD *)(v17 + 240) = -1;
      --v15;
    }
    while (v15);
  }
  int v18 = *(_DWORD *)(a1 + 16);
  if (v18 <= a3)
  {
    int v18 = a3 + 1;
    if (a3 == -1) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = sub_1B6E073B8(224 * v18, 16);
    }
    uint64_t v20 = *(unsigned int *)(v13 + 12);
    if ((int)v20 >= 1)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 224 * v20;
      do
      {
        uint64_t v23 = *(void *)(v13 + 24) + v21;
        uint64_t v24 = v19 + v21;
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v23;
        *(_OWORD *)(v24 + 16) = *(_OWORD *)(v23 + 16);
        *(_OWORD *)(v24 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v23 + 32);
        *(_OWORD *)(v24 + 48) = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v24 + 64) = *(_OWORD *)(v23 + 64);
        *(_OWORD *)(v24 + 80) = *(_OWORD *)(v23 + 80);
        *(_OWORD *)(v24 + 96) = *(_OWORD *)(v23 + 96);
        *(_OWORD *)(v24 + 11sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v23 + 112);
        *(_OWORD *)(v24 + sub_1B6DC7B98((uint64_t)this + 128) = *(_OWORD *)(v23 + 128);
        *(_OWORD *)(v24 + 144) = *(_OWORD *)(v23 + 144);
        *(_OWORD *)(v24 + 160) = *(_OWORD *)(v23 + 160);
        *(_OWORD *)(v24 + 176) = *(_OWORD *)(v23 + 176);
        *(_OWORD *)(v24 + 19sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v23 + 192);
        *(void *)(v24 + 208) = *(void *)(v23 + 208);
        v21 += 224;
      }
      while (v22 != v21);
    }
    uint64_t v25 = *(void *)(v13 + 24);
    if (v25 && *(unsigned char *)(v13 + 32)) {
      sub_1B6E073C4(v25);
    }
    *(unsigned char *)(v13 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(void *)(v13 + 24) = v19;
    *(_DWORD *)(v13 + 16) = v18;
  }
  uint64_t v26 = *(int *)(v13 + 12);
  if ((v26 & 0x80000000) != 0)
  {
    if (v18 < 0)
    {
      uint64_t v27 = *(void *)(v13 + 24);
      if (v27 && *(unsigned char *)(v13 + 32)) {
        sub_1B6E073C4(v27);
      }
      *(unsigned char *)(v13 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
      *(void *)(v13 + 24) = 0;
      *(_DWORD *)(v13 + 16) = 0;
    }
    uint64_t v28 = 224 * v26;
    uint64_t v29 = v26 + 1;
    do
    {
      uint64_t v30 = *(void *)(v13 + 24) + v28;
      *(void *)(v30 + 208) = 0;
      *(_OWORD *)(v30 + 176) = 0uLL;
      *(_OWORD *)(v30 + 19sub_1B6DC4968((unsigned int *)this + 2) = 0uLL;
      *(_OWORD *)(v30 + 144) = 0uLL;
      *(_OWORD *)(v30 + 160) = 0uLL;
      *(_OWORD *)(v30 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0uLL;
      *(_OWORD *)(v30 + sub_1B6DC7B98((uint64_t)this + 128) = 0uLL;
      *(_OWORD *)(v30 + 80) = 0uLL;
      *(_OWORD *)(v30 + 96) = 0uLL;
      *(_OWORD *)(v30 + 48) = 0uLL;
      *(_OWORD *)(v30 + 64) = 0uLL;
      *(_OWORD *)(v30 + 16) = 0uLL;
      *(_OWORD *)(v30 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0uLL;
      v28 += 224;
      *(_OWORD *)uint64_t v30 = 0uLL;
      LODWORD(v30) = v29++;
    }
    while (v30);
    int v18 = *(_DWORD *)(v13 + 16);
  }
  *(_DWORD *)(v13 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  if (v18)
  {
    int v31 = 0;
    uint64_t v32 = *(void *)(v13 + 24);
  }
  else
  {
    uint64_t v33 = sub_1B6E073B8(224, 16);
    uint64_t v32 = v33;
    uint64_t v34 = *(unsigned int *)(v13 + 12);
    if ((int)v34 >= 1)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 224 * v34;
      do
      {
        uint64_t v37 = *(void *)(v13 + 24) + v35;
        uint64_t v38 = v33 + v35;
        *(_OWORD *)uint64_t v38 = *(_OWORD *)v37;
        *(_OWORD *)(v38 + 16) = *(_OWORD *)(v37 + 16);
        *(_OWORD *)(v38 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v37 + 32);
        *(_OWORD *)(v38 + 48) = *(_OWORD *)(v37 + 48);
        *(_OWORD *)(v38 + 64) = *(_OWORD *)(v37 + 64);
        *(_OWORD *)(v38 + 80) = *(_OWORD *)(v37 + 80);
        *(_OWORD *)(v38 + 96) = *(_OWORD *)(v37 + 96);
        *(_OWORD *)(v38 + 11sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v37 + 112);
        *(_OWORD *)(v38 + sub_1B6DC7B98((uint64_t)this + 128) = *(_OWORD *)(v37 + 128);
        *(_OWORD *)(v38 + 144) = *(_OWORD *)(v37 + 144);
        *(_OWORD *)(v38 + 160) = *(_OWORD *)(v37 + 160);
        *(_OWORD *)(v38 + 176) = *(_OWORD *)(v37 + 176);
        *(_OWORD *)(v38 + 19sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v37 + 192);
        *(void *)(v38 + 208) = *(void *)(v37 + 208);
        v35 += 224;
      }
      while (v36 != v35);
    }
    uint64_t v39 = *(void *)(v13 + 24);
    if (v39 && *(unsigned char *)(v13 + 32)) {
      sub_1B6E073C4(v39);
    }
    *(unsigned char *)(v13 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(void *)(v13 + 24) = v32;
    *(_DWORD *)(v13 + 16) = 1;
    int v31 = *(_DWORD *)(v13 + 12);
  }
  *(_DWORD *)(v13 + 1sub_1B6DC4968((unsigned int *)this + 2) = v31 + 1;
  *(void *)(v32 + 208) = 0;
  *(_OWORD *)(v32 + 176) = 0u;
  *(_OWORD *)(v32 + 19sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)(v32 + 144) = 0u;
  *(_OWORD *)(v32 + 160) = 0u;
  *(_OWORD *)(v32 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)(v32 + sub_1B6DC7B98((uint64_t)this + 128) = 0u;
  *(_OWORD *)(v32 + 80) = 0u;
  *(_OWORD *)(v32 + 96) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 16) = 0u;
  *(_OWORD *)(v32 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)uint64_t v32 = 0u;
  uint64_t v40 = *(void *)(v13 + 24);
  *(_OWORD *)(v40 + 64) = 0u;
  *(_OWORD *)(v40 + 80) = 0u;
  *(_OWORD *)(v40 + 144) = 0u;
  *(_OWORD *)(v40 + 160) = 0u;
  *(_OWORD *)uint64_t v40 = xmmword_1B6E4F300;
  *(_OWORD *)(v40 + 16) = xmmword_1B6E4F320;
  *(_OWORD *)(v40 + 3sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E4F2E0;
  *(void *)(v40 + 48) = 0;
  *(void *)(v40 + 56) = 0;
  *(void *)(v40 + sub_1B6DC7B98((uint64_t)this + 128) = 0;
  *(void *)(v40 + 136) = 0;
  *(void *)(v40 + 208) = 0;
  *(_OWORD *)(v40 + 96) = xmmword_1B6E4F540;
  *(_OWORD *)(v40 + 11sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E4F540;
  *(_OWORD *)(v40 + 176) = 0u;
  *(_OWORD *)(v40 + 19sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  if (a3 >= 1)
  {
    do
    {
      int v41 = sub_1B6DFD4E4(v13, *v12);
      uint64_t v43 = *v12;
      if (*v12) {
        _ZF = (*(_DWORD *)(*v12 + 264) & 2) == 0;
      }
      else {
        _ZF = 1;
      }
      if (!_ZF)
      {
        float v45 = *(float *)(v43 + 384);
        if (v45 != 0.0)
        {
          int v46 = v41;
          uint64_t v47 = *(void *)(v13 + 24);
          float32x4_t v48 = 0uLL;
          if ((*(unsigned char *)(v43 + 576) & 2) != 0)
          {
            sub_1B6E06BA0(*v12, &v181, *(float *)(a8 + 76), v42);
            float32x4_t v48 = v181;
            float v45 = *(float *)(v43 + 384);
          }
          float32x4_t v49 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(v43 + 464), v45), COERCE_FLOAT(*(_OWORD *)(a8 + 12)));
          v49.i32[3] = 0;
          float v50 = (float32x4_t *)(v47 + 224 * v46);
          float32x4_t v51 = v50[12];
          v50[11] = vaddq_f32(v50[11], v49);
          float32x4_t v52 = vsubq_f32(*(float32x4_t *)(v43 + 480), v48);
          v52.i32[3] = 0;
          float32x4_t v53 = *(float32x4_t *)(v43 + 304);
          float32x4_t v54 = *(float32x4_t *)(v43 + 320);
          v53.i32[3] = 0;
          v54.i32[3] = 0;
          float32x4_t v55 = *(float32x4_t *)(v43 + 336);
          v55.i32[3] = 0;
          float32x4_t v56 = vmulq_n_f32(vaddq_f32(vmulq_laneq_f32(v55, v52, 2), vaddq_f32(vmulq_n_f32(v53, v52.f32[0]), vmulq_lane_f32(v54, *(float32x2_t *)v52.f32, 1))), COERCE_FLOAT(*(_OWORD *)(a8 + 12)));
          v56.i32[3] = 0;
          v50[12] = vaddq_f32(v51, v56);
        }
      }
      ++v12;
      --v14;
    }
    while (v14);
  }
  uint64_t v178 = a7;
  if (a7 >= 1)
  {
    uint64_t v57 = a7;
    float v58 = a6;
    do
    {
      unsigned int v59 = *v58++;
      (*(void (**)(_DWORD *))(*(void *)v59 + 16))(v59);
      v59[14] = 0;
      --v57;
    }
    while (v57);
  }
  int v60 = *(_DWORD *)(v13 + 268);
  if (v60 < a7 && *(_DWORD *)(v13 + 272) < a7)
  {
    if (a7)
    {
      uint64_t v61 = sub_1B6E073B8(8 * a7, 16);
      int v60 = *(_DWORD *)(v13 + 268);
    }
    else
    {
      uint64_t v61 = 0;
    }
    if (v60 >= 1)
    {
      uint64_t v62 = 0;
      uint64_t v63 = 8 * v60;
      do
      {
        *(void *)(v61 + v6sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(*(void *)(v13 + 280) + v62);
        v62 += 8;
      }
      while (v63 != v62);
    }
    uint64_t v64 = *(void *)(v13 + 280);
    if (v64 && *(unsigned char *)(v13 + 288)) {
      sub_1B6E073C4(v64);
    }
    *(unsigned char *)(v13 + 288) = 1;
    *(void *)(v13 + 280) = v61;
    *(_DWORD *)(v13 + 27sub_1B6DC4968((unsigned int *)this + 2) = a7;
  }
  uint64_t v179 = a8;
  uint64_t v180 = v13;
  *(_DWORD *)(v13 + 268) = a7;
  if (a7 < 1)
  {
    int v66 = 0;
  }
  else
  {
    uint64_t v65 = 0;
    int v66 = 0;
    do
    {
      uint64_t v67 = *(void *)(v13 + 280);
      int v68 = a6[v65];
      float v69 = (_OWORD *)*((void *)v68 + 8);
      if (v69)
      {
        v69[2] = 0u;
        v69[3] = 0u;
        *float v69 = 0u;
        v69[1] = 0u;
        int v68 = a6[v65];
      }
      float32x4_t v70 = (int *)(v67 + v65 * 8);
      int v71 = *((unsigned __int8 *)v68 + 28);
      if (*((unsigned char *)v68 + 28))
      {
        (*(void (**)(_DWORD *, int *))(*(void *)v68 + 32))(v68, v70);
        int v71 = *v70;
      }
      else
      {
        *(void *)float32x4_t v70 = 0;
      }
      v66 += v71;
      ++v65;
    }
    while (a7 != v65);
  }
  int v72 = *(_DWORD *)(v13 + 76);
  if (v72 < v66 && *(_DWORD *)(v13 + 80) < v66)
  {
    if (v66)
    {
      uint64_t v73 = sub_1B6E073B8(160 * v66, 16);
      int v72 = *(_DWORD *)(v13 + 76);
    }
    else
    {
      uint64_t v73 = 0;
    }
    if (v72 >= 1)
    {
      uint64_t v74 = 0;
      uint64_t v75 = 160 * v72;
      do
      {
        int8x16_t v76 = (_OWORD *)(v73 + v74);
        float v77 = (_OWORD *)(*(void *)(v13 + 88) + v74);
        *int8x16_t v76 = *v77;
        v76[1] = v77[1];
        long long v76[2] = v77[2];
        v76[3] = v77[3];
        v76[4] = v77[4];
        v76[5] = v77[5];
        long long v78 = v77[6];
        long long v79 = v77[7];
        long long v80 = v77[9];
        v76[8] = v77[8];
        v76[9] = v80;
        v76[6] = v78;
        v76[7] = v79;
        v74 += 160;
      }
      while (v75 != v74);
    }
    uint64_t v81 = *(void *)(v13 + 88);
    if (v81 && *(unsigned char *)(v13 + 96)) {
      sub_1B6E073C4(v81);
    }
    *(unsigned char *)(v13 + 96) = 1;
    *(void *)(v13 + 88) = v73;
    *(_DWORD *)(v13 + 80) = v66;
  }
  *(_DWORD *)(v13 + 76) = v66;
  if (a7 >= 1)
  {
    uint64_t v82 = 0;
    int v83 = 0;
    uint64_t v84 = *(void *)(v13 + 280);
    do
    {
      int8x16_t v85 = (int *)(v84 + 8 * v82);
      int v86 = *v85;
      if (*v85)
      {
        uint64_t v87 = *(void *)(v13 + 88);
        BOOL v88 = a6[v82];
        float v89 = (float32x4_t *)*((void *)v88 + 5);
        float v90 = (float32x4_t *)*((void *)v88 + 6);
        int v91 = sub_1B6DFD4E4(v13, (uint64_t)v89);
        int v92 = sub_1B6DFD4E4(v13, (uint64_t)v90);
        int v93 = *(_DWORD *)(v179 + 20);
        if ((int)v88[8] > 0) {
          int v93 = v88[8];
        }
        if (v93 > *(_DWORD *)(v13 + 296)) {
          *(_DWORD *)(v13 + 296) = v93;
        }
        uint64_t v94 = *(void *)(v13 + 24);
        if (*v85 >= 1)
        {
          uint64_t v95 = 0;
          float v96 = (_DWORD *)(v87 + 160 * v83 + 156);
          do
          {
            *(_OWORD *)(v96 - 11) = 0uLL;
            *(_OWORD *)(v96 - 15) = 0uLL;
            *(_OWORD *)(v96 - 3) = 0uLL;
            *(_OWORD *)(v96 - 7) = 0uLL;
            *(_OWORD *)(v96 - 19) = 0uLL;
            *(_OWORD *)(v96 - 23) = 0uLL;
            *(_OWORD *)(v96 - 27) = 0uLL;
            *(_OWORD *)(v96 - 31) = 0uLL;
            *(_OWORD *)(v96 - 35) = 0uLL;
            *(_OWORD *)(v96 - 39) = 0uLL;
            *(void *)(v96 - 9) = 0x7F7FFFFFFF7FFFFFLL;
            *(void *)(v96 - 15) = 0;
            *(v96 - 1) = v91;
            *float v96 = v92;
            *(v96 - 3) = v93;
            ++v95;
            v96 += 40;
          }
          while (v95 < *v85);
        }
        float v97 = (float32x4_t *)(v87 + 160 * v83);
        float v98 = (_OWORD *)(v94 + 224 * v91);
        float v99 = (_OWORD *)(v94 + 224 * v92);
        v98[4] = 0uLL;
        v98[5] = 0uLL;
        v98[9] = 0uLL;
        v98[10] = 0uLL;
        v99[4] = 0uLL;
        v99[5] = 0uLL;
        v99[9] = 0uLL;
        v99[10] = 0uLL;
        __int32 v100 = *(_DWORD *)(v179 + 32);
        v181.f32[0] = 1.0 / *(float *)(v179 + 12);
        v181.i32[1] = v100;
        v97[7].i32[1] = *(_DWORD *)(v179 + 40);
        v181.i64[1] = (uint64_t)&v97[1];
        float32x4_t v182 = v97;
        float32x4_t v183 = v97 + 3;
        int8x16_t v184 = v97 + 2;
        int v185 = 40;
        __int32 v191 = *(_DWORD *)(v179 + 4);
        float32x4_t v186 = v97 + 7;
        int8x16_t v187 = &v97[7].i8[4];
        float32x4_t v188 = &v97[7].i8[8];
        float32x4_t v189 = &v97[7].i8[12];
        int v190 = *(_DWORD *)(v179 + 20);
        (*(void (**)(_DWORD *, float32x4_t *))(*(void *)a6[v82] + 40))(a6[v82], &v181);
        if (*v85 >= 1)
        {
          uint64_t v101 = 0;
          do
          {
            float v102 = *((float *)a6[v82] + 6);
            if (v97[7].f32[3] >= v102) {
              v97[7].f32[3] = v102;
            }
            float v103 = -v102;
            if (v97[7].f32[2] <= v103) {
              v97[7].f32[2] = v103;
            }
            v97[8].i64[1] = (uint64_t)v88;
            float v104 = (float32x4_t *)*((void *)v88 + 5);
            float32x4_t v105 = *v97;
            float32x4_t v106 = v97[1];
            float32x4_t v107 = vmulq_f32(v104[19], *v97);
            int8x16_t v108 = (int8x16_t)vmulq_f32(*v97, v104[20]);
            int8x16_t v109 = (int8x16_t)vmulq_f32(*v97, v104[21]);
            v109.i32[3] = 0;
            *(float32x2_t *)v107.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v108.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL)));
            *(float32x2_t *)&v107.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v109.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)), 0);
            v97[4] = vmulq_f32(v107, v104[39]);
            uint64_t v110 = (float32x4_t *)*((void *)v88 + 6);
            float32x4_t v111 = v97[2];
            float32x4_t v112 = v97[3];
            float32x4_t v113 = vmulq_f32(v110[19], v111);
            int8x16_t v114 = (int8x16_t)vmulq_f32(v111, v110[20]);
            int8x16_t v115 = (int8x16_t)vmulq_f32(v111, v110[21]);
            v115.i32[3] = 0;
            *(float32x2_t *)v113.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v114.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL)));
            *(float32x2_t *)&v113.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v115.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL)), 0);
            v97[5] = vmulq_f32(v113, v110[39]);
            float32x4_t v116 = vmulq_n_f32(v106, v89[24].f32[0]);
            v116.i32[3] = 0;
            float32x4_t v117 = vmulq_f32(v105, v89[19]);
            int8x16_t v118 = (int8x16_t)vmulq_f32(v105, v89[20]);
            int8x16_t v119 = (int8x16_t)vmulq_f32(v105, v89[21]);
            v119.i32[3] = 0;
            *(float32x2_t *)v117.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v118.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL)));
            *(float32x2_t *)&v117.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v119.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)), 0);
            float32x4_t v120 = vmulq_n_f32(v112, v90[24].f32[0]);
            v120.i32[3] = 0;
            float32x4_t v121 = vmulq_f32(v111, v90[19]);
            int8x16_t v122 = (int8x16_t)vmulq_f32(v111, v90[20]);
            int8x16_t v123 = (int8x16_t)vmulq_f32(v111, v90[21]);
            v123.i32[3] = 0;
            *(float32x2_t *)v121.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v122.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)));
            *(float32x2_t *)&v121.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v123.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL)), 0);
            int8x16_t v124 = (int8x16_t)vmulq_f32(v106, v116);
            int8x16_t v125 = (int8x16_t)vmulq_f32(v105, v117);
            *(float32x2_t *)v124.i8 = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL), vpadd_f32(*(float32x2_t *)v124.i8, *(float32x2_t *)v124.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL), vpadd_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)v125.i8)));
            int8x16_t v126 = (int8x16_t)vmulq_f32(v112, v120);
            *(float32x2_t *)v124.i8 = vadd_f32(*(float32x2_t *)v124.i8, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL), vpadd_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v126.i8)));
            int8x16_t v127 = (int8x16_t)vmulq_f32(v111, v121);
            *(float *)v124.i32 = vadd_f32(*(float32x2_t *)v124.i8, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL), vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8))).f32[0];
            *(float *)v127.i32 = fabsf(*(float *)v124.i32);
            float v128 = 1.0 / *(float *)v124.i32;
            if (*(float *)v127.i32 <= 0.00000011921) {
              float v128 = 0.0;
            }
            v97[6].f32[3] = v128;
            int8x16_t v129 = (int8x16_t)vmulq_f32(v106, v89[22]);
            _Q0 = (int8x16_t)vmulq_f32(v105, v89[23]);
            *(float32x2_t *)_Q0.i8 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v129.i8, *(float32x2_t *)v129.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q0, _Q0, 8uLL)));
            _Q2 = (int8x16_t)vmulq_f32(v112, v90[22]);
            int8x16_t v132 = (int8x16_t)vmulq_f32(v111, v90[23]);
            _Q0.i32[0] = vadd_f32(*(float32x2_t *)_Q0.i8, vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q2.i8, *(float32x2_t *)_Q2.i8), (float32x2_t)*(_OWORD *)&vextq_s8(_Q2, _Q2, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v132.i8, *(float32x2_t *)v132.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL)))).u32[0];
            _Q2.i32[0] = v191;
            __asm { FMLS            S3, S2, V0.S[0] }
            v97[7].f32[0] = (float)(v128 * v97[7].f32[0]) + (float)(v128 * _S3);
            v97[6].i32[1] = 0;
            ++v101;
            v97 += 10;
          }
          while (v101 < *v85);
        }
        uint64_t v13 = v180;
        uint64_t v84 = *(void *)(v180 + 280);
        int v86 = *(_DWORD *)(v84 + 8 * v82);
      }
      v83 += v86;
      ++v82;
    }
    while (v82 != v178);
  }
  BOOL v137 = a4;
  if (a5 >= 1)
  {
    uint64_t v138 = a5;
    do
    {
      uint64_t v139 = *v137++;
      sub_1B6DFDE1C(v13, v139, v179);
      --v138;
    }
    while (v138);
  }
  uint64_t v140 = *(unsigned int *)(v13 + 76);
  uint64_t v141 = *(unsigned int *)(v13 + 44);
  uint64_t v142 = *(unsigned int *)(v13 + 108);
  LODWORD(v143) = *(_DWORD *)(v13 + 204);
  if ((int)v143 < (int)v140 && *(_DWORD *)(v13 + 208) < (int)v140)
  {
    if (v140)
    {
      uint64_t v144 = sub_1B6E073B8(4 * (int)v140, 16);
      uint64_t v145 = v180;
      LODWORD(v143) = *(_DWORD *)(v180 + 204);
    }
    else
    {
      uint64_t v144 = 0;
      uint64_t v145 = v180;
    }
    uint64_t v146 = *(void *)(v145 + 216);
    if ((int)v143 < 1)
    {
      if (!v146)
      {
LABEL_117:
        *(unsigned char *)(v180 + 224) = 1;
        *(void *)(v180 + 216) = v144;
        uint64_t v13 = v180;
        *(_DWORD *)(v180 + 208) = v140;
        goto LABEL_118;
      }
    }
    else
    {
      uint64_t v143 = v143;
      int8x16_t v147 = (_DWORD *)v144;
      int8x16_t v148 = (int *)v146;
      do
      {
        int v149 = *v148++;
        *v147++ = v149;
        --v143;
      }
      while (v143);
    }
    if (*(unsigned char *)(v180 + 224)) {
      sub_1B6E073C4(v146);
    }
    *(void *)(v180 + 216) = 0;
    goto LABEL_117;
  }
LABEL_118:
  *(_DWORD *)(v13 + 204) = v140;
  if ((*(unsigned char *)(v179 + 64) & 0x10) != 0)
  {
    int v152 = 2 * v141;
    LODWORD(v153) = *(_DWORD *)(v13 + 172);
    if ((int)v153 >= 2 * (int)v141 || *(_DWORD *)(v13 + 176) >= v152) {
      goto LABEL_148;
    }
    if (v141)
    {
      uint64_t v154 = sub_1B6E073B8(8 * (int)v141, 16);
      LODWORD(v153) = *(_DWORD *)(v13 + 172);
    }
    else
    {
      uint64_t v154 = 0;
    }
    uint64_t v159 = *(void *)(v13 + 184);
    if ((int)v153 < 1)
    {
      if (!v159)
      {
LABEL_147:
        *(unsigned char *)(v13 + 19sub_1B6DC4968((unsigned int *)this + 2) = 1;
        *(void *)(v13 + 184) = v154;
        *(_DWORD *)(v13 + 176) = v152;
LABEL_148:
        *(_DWORD *)(v13 + 17sub_1B6DC4968((unsigned int *)this + 2) = v152;
        goto LABEL_149;
      }
    }
    else
    {
      uint64_t v153 = v153;
      float32x4_t v160 = (_DWORD *)v154;
      float32x4_t v161 = *(int **)(v13 + 184);
      do
      {
        int v162 = *v161++;
        *v160++ = v162;
        --v153;
      }
      while (v153);
    }
    if (*(unsigned char *)(v13 + 192)) {
      sub_1B6E073C4(v159);
    }
    *(void *)(v13 + 184) = 0;
    goto LABEL_147;
  }
  LODWORD(v150) = *(_DWORD *)(v13 + 172);
  if ((int)v150 >= (int)v141 || *(_DWORD *)(v13 + 176) >= (int)v141) {
    goto LABEL_142;
  }
  if (v141)
  {
    uint64_t v151 = sub_1B6E073B8(4 * (int)v141, 16);
    LODWORD(v150) = *(_DWORD *)(v13 + 172);
  }
  else
  {
    uint64_t v151 = 0;
  }
  uint64_t v155 = *(void *)(v13 + 184);
  if ((int)v150 >= 1)
  {
    uint64_t v150 = v150;
    float32x4_t v156 = (_DWORD *)v151;
    float32x4_t v157 = *(int **)(v13 + 184);
    do
    {
      int v158 = *v157++;
      *v156++ = v158;
      --v150;
    }
    while (v150);
    goto LABEL_138;
  }
  if (v155)
  {
LABEL_138:
    if (*(unsigned char *)(v13 + 192)) {
      sub_1B6E073C4(v155);
    }
    *(void *)(v13 + 184) = 0;
  }
  *(unsigned char *)(v13 + 19sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(v13 + 184) = v151;
  *(_DWORD *)(v13 + 176) = v141;
LABEL_142:
  *(_DWORD *)(v13 + 17sub_1B6DC4968((unsigned int *)this + 2) = v141;
LABEL_149:
  LODWORD(v163) = *(_DWORD *)(v13 + 236);
  if ((int)v163 < (int)v142 && *(_DWORD *)(v13 + 240) < (int)v142)
  {
    if (v142)
    {
      uint64_t v164 = sub_1B6E073B8(4 * (int)v142, 16);
      LODWORD(v163) = *(_DWORD *)(v13 + 236);
    }
    else
    {
      uint64_t v164 = 0;
    }
    uint64_t v165 = *(void *)(v13 + 248);
    if ((int)v163 < 1)
    {
      if (!v165)
      {
LABEL_162:
        *(unsigned char *)(v13 + 256) = 1;
        *(void *)(v13 + 248) = v164;
        *(_DWORD *)(v13 + 240) = v142;
        goto LABEL_163;
      }
    }
    else
    {
      uint64_t v163 = v163;
      float32x4_t v166 = (_DWORD *)v164;
      float32x4_t v167 = *(int **)(v13 + 248);
      do
      {
        int v168 = *v167++;
        *v166++ = v168;
        --v163;
      }
      while (v163);
    }
    if (*(unsigned char *)(v13 + 256)) {
      sub_1B6E073C4(v165);
    }
    *(void *)(v13 + 248) = 0;
    goto LABEL_162;
  }
LABEL_163:
  *(_DWORD *)(v13 + 236) = v142;
  if ((int)v140 >= 1)
  {
    uint64_t v169 = 0;
    uint64_t v170 = *(void *)(v13 + 216);
    do
    {
      *(_DWORD *)(v170 + 4 * v169) = v169;
      ++v169;
    }
    while (v140 != v169);
  }
  if ((int)v141 >= 1)
  {
    uint64_t v171 = 0;
    uint64_t v172 = *(void *)(v13 + 184);
    do
    {
      *(_DWORD *)(v172 + 4 * v171) = v171;
      ++v171;
    }
    while (v141 != v171);
  }
  if ((int)v142 >= 1)
  {
    uint64_t v173 = 0;
    uint64_t v174 = *(void *)(v13 + 248);
    do
    {
      *(_DWORD *)(v174 + 4 * v173) = v173;
      ++v173;
    }
    while (v142 != v173);
  }
  return 0.0;
}

double sub_1B6DFF52C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8, uint64_t a9)
{
  int v9 = a8;
  uint64_t v12 = a1;
  if (*(unsigned char *)(a9 + 64))
  {
    uint64_t v13 = *(unsigned int *)(a1 + 76);
    uint64_t v14 = *(unsigned int *)(a1 + 44);
    uint64_t v15 = *(unsigned int *)(a1 + 108);
    if ((int)v13 >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(a1 + 216);
      do
      {
        int v18 = *(_DWORD *)(v17 + 4 * v16);
        a1 = sub_1B6DFCB2C(v12, (int)v16 + 1);
        uint64_t v17 = *(void *)(v12 + 216);
        *(_DWORD *)(v17 + 4 * v16) = *(_DWORD *)(v17 + 4 * (int)a1);
        *(_DWORD *)(v17 + 4 * (int)a1) = v18;
        ++v16;
      }
      while (v13 != v16);
    }
    int v9 = a8;
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if ((int)v14 >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)(v12 + 184);
        do
        {
          int v21 = *(_DWORD *)(v20 + 4 * v19);
          a1 = sub_1B6DFCB2C(v12, (int)v19 + 1);
          uint64_t v20 = *(void *)(v12 + 184);
          *(_DWORD *)(v20 + 4 * v19) = *(_DWORD *)(v20 + 4 * (int)a1);
          *(_DWORD *)(v20 + 4 * (int)a1) = v21;
          ++v19;
        }
        while (v14 != v19);
      }
      if ((int)v15 >= 1)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(v12 + 248);
        do
        {
          int v24 = *(_DWORD *)(v23 + 4 * v22);
          a1 = sub_1B6DFCB2C(v12, (int)v22 + 1);
          uint64_t v23 = *(void *)(v12 + 248);
          *(_DWORD *)(v23 + 4 * v2sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(v23 + 4 * (int)a1);
          *(_DWORD *)(v23 + 4 * (int)a1) = v24;
          ++v22;
        }
        while (v15 != v22);
      }
    }
  }
  int v25 = *(_DWORD *)(v12 + 76);
  if (*(unsigned char *)(a9 + 65))
  {
    if (v25 >= 1)
    {
      for (uint64_t i = 0; i < v25; ++i)
      {
        int v52 = *(_DWORD *)(*(void *)(v12 + 216) + 4 * i);
        uint64_t v53 = *(void *)(v12 + 88);
        if (*(_DWORD *)(v53 + 160 * v52 + 144) > a2)
        {
          sub_1B6DFC7BC(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * *(int *)(v53 + 160 * v52 + 152)), (float32x4_t *)(*(void *)(v12 + 24) + 224 * *(int *)(v53 + 160 * v52 + 156)), (float32x4_t *)(v53 + 160 * v52));
          int v25 = *(_DWORD *)(v12 + 76);
        }
      }
    }
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if (v9 >= 1)
      {
        uint64_t v54 = v9;
        do
        {
          if (*(unsigned char *)(*a7 + 28))
          {
            int v55 = sub_1B6DFD4E4(v12, *(void *)(*a7 + 40));
            int v56 = sub_1B6DFD4E4(v12, *(void *)(*a7 + 48));
            a1 = (*(uint64_t (**)(void, uint64_t, uint64_t, float))(*(void *)*a7 + 48))(*a7, *(void *)(v12 + 24) + 224 * v55, *(void *)(v12 + 24) + 224 * v56, *(float *)(a9 + 12));
          }
          ++a7;
          --v54;
        }
        while (v54);
      }
      unsigned int v57 = *(_DWORD *)(a9 + 64);
      uint64_t v58 = *(unsigned int *)(v12 + 44);
      if ((v57 & 0x200) != 0)
      {
        if ((int)v58 >= 1)
        {
          uint64_t v77 = 0;
          int v78 = (v57 >> 4) & 1;
          do
          {
            long long v79 = (float32x4_t *)(*(void *)(v12 + 56) + 160 * *(int *)(*(void *)(v12 + 184) + 4 * v77));
            sub_1B6DFC8E0(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v79[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v79[9].i32[3]), v79);
            float v80 = v79[6].f32[1];
            if (v80 > 0.0)
            {
              uint64_t v81 = (float32x4_t *)(*(void *)(v12 + 120)
                                  + 160 * *(int *)(*(void *)(v12 + 248) + 4 * (int)(v77 << v78)));
              float v82 = v81[6].f32[2];
              v81[7].f32[2] = -(float)(v82 * v80);
              v81[7].f32[3] = v80 * v82;
              sub_1B6DFC7BC(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v81[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v81[9].i32[3]), v81);
              if ((*(unsigned char *)(a9 + 64) & 0x10) != 0)
              {
                int v83 = (float32x4_t *)(*(void *)(v12 + 120)
                                    + 160 * *(int *)(*(void *)(v12 + 248) + 4 * (int)(v77 << v78) + 4));
                float v84 = v83[6].f32[2];
                v83[7].f32[2] = -(float)(v84 * v80);
                v83[7].f32[3] = v80 * v84;
                sub_1B6DFC7BC(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v83[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v83[9].i32[3]), v83);
              }
            }
            ++v77;
          }
          while (v58 != v77);
        }
      }
      else
      {
        if ((int)v58 >= 1)
        {
          uint64_t v59 = 0;
          uint64_t v60 = 4 * v58;
          do
          {
            uint64_t v61 = (float32x4_t *)(*(void *)(v12 + 56) + 160 * *(int *)(*(void *)(v12 + 184) + v59));
            sub_1B6DFC8E0(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v61[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v61[9].i32[3]), v61);
            v59 += 4;
          }
          while (v60 != v59);
        }
        uint64_t v62 = *(unsigned int *)(v12 + 108);
        if ((int)v62 >= 1)
        {
          uint64_t v63 = 0;
          uint64_t v64 = 4 * v62;
          do
          {
            int v65 = *(_DWORD *)(*(void *)(v12 + 248) + v63);
            uint64_t v66 = *(void *)(v12 + 120);
            float v67 = *(float *)(*(void *)(v12 + 56) + 160 * *(int *)(v66 + 160 * v65 + 148) + 100);
            if (v67 > 0.0)
            {
              int v68 = (float32x4_t *)(v66 + 160 * v65);
              float v69 = v68[6].f32[2];
              v68[7].f32[2] = -(float)(v69 * v67);
              v68[7].f32[3] = v67 * v69;
              sub_1B6DFC7BC(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v68[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v68[9].i32[3]), v68);
            }
            v63 += 4;
          }
          while (v64 != v63);
        }
        uint64_t v70 = *(unsigned int *)(v12 + 140);
        if ((int)v70 >= 1)
        {
          uint64_t v71 = 0;
          uint64_t v72 = 160 * v70;
          do
          {
            uint64_t v73 = (float32x4_t *)(*(void *)(v12 + 152) + v71);
            float v74 = *(float *)(*(void *)(v12 + 56) + 160 * v73[9].i32[1] + 100);
            if (v74 > 0.0)
            {
              float v75 = v73[6].f32[2];
              float v76 = v74 * v75;
              if (v76 > v75) {
                float v76 = v73[6].f32[2];
              }
              v73[7].f32[2] = -v76;
              v73[7].f32[3] = v76;
              sub_1B6DFC7BC(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v73[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v73[9].i32[3]), v73);
            }
            v71 += 160;
          }
          while (v72 != v71);
        }
      }
    }
  }
  else
  {
    if (v25 >= 1)
    {
      for (uint64_t j = 0; j < v25; ++j)
      {
        int v27 = *(_DWORD *)(*(void *)(v12 + 216) + 4 * j);
        uint64_t v28 = *(void *)(v12 + 88);
        if (*(_DWORD *)(v28 + 160 * v27 + 144) > a2)
        {
          sub_1B6DFC7BC(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * *(int *)(v28 + 160 * v27 + 152)), (float32x4_t *)(*(void *)(v12 + 24) + 224 * *(int *)(v28 + 160 * v27 + 156)), (float32x4_t *)(v28 + 160 * v27));
          int v25 = *(_DWORD *)(v12 + 76);
        }
      }
    }
    if (*(_DWORD *)(a9 + 20) > a2)
    {
      if (v9 >= 1)
      {
        uint64_t v29 = v9;
        do
        {
          if (*(unsigned char *)(*a7 + 28))
          {
            int v30 = sub_1B6DFD4E4(v12, *(void *)(*a7 + 40));
            int v31 = sub_1B6DFD4E4(v12, *(void *)(*a7 + 48));
            a1 = (*(uint64_t (**)(void, uint64_t, uint64_t, float))(*(void *)*a7 + 48))(*a7, *(void *)(v12 + 24) + 224 * v30, *(void *)(v12 + 24) + 224 * v31, *(float *)(a9 + 12));
          }
          ++a7;
          --v29;
        }
        while (v29);
      }
      uint64_t v32 = *(unsigned int *)(v12 + 44);
      if ((int)v32 >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 4 * v32;
        do
        {
          uint64_t v35 = (float32x4_t *)(*(void *)(v12 + 56) + 160 * *(int *)(*(void *)(v12 + 184) + v33));
          sub_1B6DFC8E0(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v35[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v35[9].i32[3]), v35);
          v33 += 4;
        }
        while (v34 != v33);
      }
      uint64_t v36 = *(unsigned int *)(v12 + 108);
      if ((int)v36 >= 1)
      {
        uint64_t v37 = 0;
        uint64_t v38 = 4 * v36;
        do
        {
          int v39 = *(_DWORD *)(*(void *)(v12 + 248) + v37);
          uint64_t v40 = *(void *)(v12 + 120);
          float v41 = *(float *)(*(void *)(v12 + 56) + 160 * *(int *)(v40 + 160 * v39 + 148) + 100);
          if (v41 > 0.0)
          {
            float32x4_t v42 = (float32x4_t *)(v40 + 160 * v39);
            float v43 = v42[6].f32[2];
            v42[7].f32[2] = -(float)(v43 * v41);
            v42[7].f32[3] = v41 * v43;
            sub_1B6DFC7BC(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v42[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v42[9].i32[3]), v42);
          }
          v37 += 4;
        }
        while (v38 != v37);
      }
      uint64_t v44 = *(unsigned int *)(v12 + 140);
      if ((int)v44 >= 1)
      {
        uint64_t v45 = 0;
        uint64_t v46 = 160 * v44;
        do
        {
          uint64_t v47 = (float32x4_t *)(*(void *)(v12 + 152) + v45);
          float v48 = *(float *)(*(void *)(v12 + 56) + 160 * v47[9].i32[1] + 100);
          if (v48 > 0.0)
          {
            float v49 = v47[6].f32[2];
            float v50 = v48 * v49;
            if (v50 > v49) {
              float v50 = v47[6].f32[2];
            }
            v47[7].f32[2] = -v50;
            v47[7].f32[3] = v50;
            sub_1B6DFC7BC(a1, (float32x4_t *)(*(void *)(v12 + 24) + 224 * v47[9].i32[2]), (float32x4_t *)(*(void *)(v12 + 24) + 224 * v47[9].i32[3]), v47);
          }
          v45 += 160;
        }
        while (v46 != v45);
      }
    }
  }
  return 0.0;
}

void sub_1B6DFFBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a8 + 44))
  {
    int v10 = *(_DWORD *)(a8 + 20);
    if (*(unsigned char *)(a8 + 65))
    {
      if (v10 >= 1)
      {
        for (int i = 0; i < v10; ++i)
        {
          uint64_t v17 = *(unsigned int *)(a1 + 44);
          if ((int)v17 >= 1)
          {
            uint64_t v18 = 0;
            uint64_t v19 = 4 * v17;
            do
            {
              uint64_t v20 = (float32x4_t *)(*(void *)(a1 + 56) + 160 * *(int *)(*(void *)(a1 + 184) + v18));
              sub_1B6DFC9F8(a1, (float32x4_t *)(*(void *)(a1 + 24) + 224 * v20[9].i32[2]), (float32x4_t *)(*(void *)(a1 + 24) + 224 * v20[9].i32[3]), v20);
              v18 += 4;
            }
            while (v19 != v18);
            int v10 = *(_DWORD *)(a8 + 20);
          }
        }
      }
    }
    else if (v10 >= 1)
    {
      for (int j = 0; j < v10; ++j)
      {
        uint64_t v12 = *(unsigned int *)(a1 + 44);
        if ((int)v12 >= 1)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 4 * v12;
          do
          {
            uint64_t v15 = (float32x4_t *)(*(void *)(a1 + 56) + 160 * *(int *)(*(void *)(a1 + 184) + v13));
            sub_1B6DFC9F8(a1, (float32x4_t *)(*(void *)(a1 + 24) + 224 * v15[9].i32[2]), (float32x4_t *)(*(void *)(a1 + 24) + 224 * v15[9].i32[3]), v15);
            v13 += 4;
          }
          while (v14 != v13);
          int v10 = *(_DWORD *)(a8 + 20);
        }
      }
    }
  }
}

double sub_1B6DFFCC8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7, uint64_t a8)
{
  (*(void (**)(_DWORD *))(*(void *)a1 + 48))(a1);
  if (a1[74] <= *(_DWORD *)(a8 + 20)) {
    int v16 = *(_DWORD *)(a8 + 20);
  }
  else {
    int v16 = a1[74];
  }
  if (v16 >= 1)
  {
    for (int i = 0; i != v16; ++i)
      sub_1B6DFF52C((uint64_t)a1, i, v12, v13, v14, v15, a6, a7, a8);
  }
  return 0.0;
}

double sub_1B6DFFD7C(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = *(_DWORD *)(a5 + 64);
  if ((v7 & 4) != 0)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 44);
    if ((int)v8 >= 1)
    {
      uint64_t v9 = *(void *)(a1 + 120);
      int v10 = (int *)(*(void *)(a1 + 56) + 148);
      do
      {
        uint64_t v11 = *(_DWORD **)(v10 - 3);
        int v12 = *v10;
        int v13 = *(_DWORD *)(v9 + 160 * *v10 + 100);
        v11[31] = *(v10 - 12);
        v11[32] = v13;
        if ((v7 & 0x10) != 0) {
          v11[33] = *(_DWORD *)(v9 + 160 * v12 + 260);
        }
        v10 += 40;
        --v8;
      }
      while (v8);
    }
  }
  uint64_t v14 = *(unsigned int *)(a1 + 76);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 160 * v14;
    do
    {
      uint64_t v17 = (float32x4_t *)(*(void *)(a1 + 88) + v15);
      uint64_t v18 = v17[8].i64[1];
      uint64_t v19 = *(float32x4_t **)(v18 + 64);
      if (v19)
      {
        float32x4_t v20 = vmulq_n_f32(vmulq_f32(*(float32x4_t *)(*(void *)(v18 + 40) + 400), vmulq_n_f32(v17[1], v17[6].f32[1])), 1.0 / *(float *)(a5 + 12));
        v20.i32[3] = 0;
        float32x4_t v21 = v19[1];
        *uint64_t v19 = vaddq_f32(*v19, v20);
        float32x4_t v22 = vmulq_n_f32(vmulq_f32(*(float32x4_t *)(*(void *)(v18 + 48) + 400), vmulq_n_f32(v17[3], v17[6].f32[1])), 1.0 / *(float *)(a5 + 12));
        v22.i32[3] = 0;
        float32x4_t v23 = v19[3];
        v19[2] = vaddq_f32(v19[2], v22);
        float32x4_t v24 = vmulq_n_f32(vmulq_n_f32(vmulq_f32(*v17, *(float32x4_t *)(*(void *)(v18 + 40) + 624)), v17[6].f32[1]), 1.0 / *(float *)(a5 + 12));
        v24.i32[3] = 0;
        v19[1] = vaddq_f32(v21, v24);
        float32x4_t v25 = vmulq_n_f32(vmulq_n_f32(vmulq_f32(v17[2], *(float32x4_t *)(*(void *)(v18 + 48) + 624)), v17[6].f32[1]), 1.0 / *(float *)(a5 + 12));
        v25.i32[3] = 0;
        float32x4_t v19[3] = vaddq_f32(v23, v25);
      }
      float v26 = v17[6].f32[1];
      *(float *)(v18 + 56) = v26;
      if (fabsf(v26) >= *(float *)(v18 + 24)) {
        *(unsigned char *)(v18 + 28) = 0;
      }
      v15 += 160;
    }
    while (v16 != v15);
  }
  int v27 = *(_DWORD *)(a1 + 12);
  if (v27 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = *(void *)(a1 + 24);
    do
    {
      if (*(void *)(v30 + v28 + 208))
      {
        if (*(_DWORD *)(a5 + 44))
        {
          a2.n128_u32[0] = *(_DWORD *)(a5 + 12);
          sub_1B6E0011C(v30 + v28, a2.n128_f64[0], *(float *)(a5 + 52));
        }
        else
        {
          int v31 = (float32x4_t *)(v30 + v28);
          float32x4_t v32 = vaddq_f32(v31[12], v31[5]);
          v31[11] = vaddq_f32(v31[11], v31[4]);
          v31[12] = v32;
        }
        *(_OWORD *)(*(void *)(*(void *)(a1 + 24) + v28 + 208) + 35sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(*(void *)(a1 + 24) + v28 + 176);
        uint64_t v33 = (__n128 *)(*(void *)(a1 + 24) + v28);
        a2 = v33[12];
        *(__n128 *)(v33[13].n128_u64[0] + 368) = a2;
        if (*(_DWORD *)(a5 + 44))
        {
          uint64_t v34 = *(void *)(a1 + 24) + v28;
          uint64_t v35 = *(void *)(v34 + 208);
          *(_OWORD *)(v35 + 16) = *(_OWORD *)v34;
          *(_OWORD *)(v35 + 3sub_1B6DC4968((unsigned int *)this + 2) = *(_OWORD *)(v34 + 16);
          *(_OWORD *)(v35 + 48) = *(_OWORD *)(v34 + 32);
          a2 = *(__n128 *)(v34 + 48);
          *(__n128 *)(v35 + 64) = a2;
        }
        uint64_t v30 = *(void *)(a1 + 24);
        *(_DWORD *)(*(void *)(v30 + v28 + 208) + 240) = -1;
        int v27 = *(_DWORD *)(a1 + 12);
      }
      ++v29;
      v28 += 224;
    }
    while (v29 < v27);
  }
  if ((*(_DWORD *)(a1 + 44) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 48) & 0x80000000) != 0)
  {
    uint64_t v36 = *(void *)(a1 + 56);
    if (v36 && *(unsigned char *)(a1 + 64)) {
      sub_1B6E073C4(v36);
    }
    *(unsigned char *)(a1 + 64) = 1;
    *(void *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 44) = 0;
  if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x80000000) != 0)
  {
    uint64_t v37 = *(void *)(a1 + 88);
    if (v37 && *(unsigned char *)(a1 + 96)) {
      sub_1B6E073C4(v37);
    }
    *(unsigned char *)(a1 + 96) = 1;
    *(void *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 80) = 0;
  }
  *(_DWORD *)(a1 + 76) = 0;
  if ((*(_DWORD *)(a1 + 108) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 112) & 0x80000000) != 0)
  {
    uint64_t v38 = *(void *)(a1 + 120);
    if (v38 && *(unsigned char *)(a1 + 128)) {
      sub_1B6E073C4(v38);
    }
    *(unsigned char *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = 1;
    *(void *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 0;
  }
  *(_DWORD *)(a1 + 108) = 0;
  if ((*(_DWORD *)(a1 + 140) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 144) & 0x80000000) != 0)
  {
    uint64_t v39 = *(void *)(a1 + 152);
    if (v39 && *(unsigned char *)(a1 + 160)) {
      sub_1B6E073C4(v39);
    }
    *(unsigned char *)(a1 + 160) = 1;
    *(void *)(a1 + 15sub_1B6DC4968((unsigned int *)this + 2) = 0;
    *(_DWORD *)(a1 + 144) = 0;
  }
  *(_DWORD *)(a1 + 140) = 0;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 16) & 0x80000000) != 0)
  {
    uint64_t v40 = *(void *)(a1 + 24);
    if (v40 && *(unsigned char *)(a1 + 32)) {
      sub_1B6E073C4(v40);
    }
    *(unsigned char *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  return 0.0;
}

double sub_1B6E0011C(uint64_t a1, double result, float a3)
{
  if (*(void *)(a1 + 208))
  {
    float32x4_t v4 = vaddq_f32(*(float32x4_t *)(a1 + 192), *(float32x4_t *)(a1 + 80));
    *(float32x4_t *)(a1 + 176) = vaddq_f32(*(float32x4_t *)(a1 + 176), *(float32x4_t *)(a1 + 64));
    *(float32x4_t *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = v4;
    if (*(float *)(a1 + 144) != 0.0
      || *(float *)(a1 + 148) != 0.0
      || *(float *)(a1 + 152) != 0.0
      || *(float *)(a1 + 160) != 0.0
      || *(float *)(a1 + 164) != 0.0
      || *(float *)(a1 + 168) != 0.0)
    {
      float32x4_t v5 = vmulq_n_f32(*(float32x4_t *)(a1 + 160), a3);
      v5.i32[3] = 0;
      float32x4_t v8 = v5;
      sub_1B6DEF658((float32x4_t *)a1, (float32x4_t *)(a1 + 144), &v8, v9, *(float *)&result);
      float32x4_t v6 = v9[1];
      *(float32x4_t *)a1 = v9[0];
      *(float32x4_t *)(a1 + 16) = v6;
      float32x2_t result = *(double *)&v10;
      long long v7 = v11;
      *(_OWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v10;
      *(_OWORD *)(a1 + 48) = v7;
    }
  }
  return result;
}

double sub_1B6E001DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return 0.0;
}

uint64_t sub_1B6E002EC(uint64_t result)
{
  *(void *)(result + 304) = 0;
  return result;
}

double sub_1B6E002FC(uint64_t a1)
{
  *(_OWORD *)(a1 + 21sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6E50280;
  *(_OWORD *)(a1 + 228) = xmmword_1B6ED0350;
  *(_OWORD *)(a1 + 244) = xmmword_1B6ED0350;
  *(_OWORD *)(a1 + 29sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6ED0360;
  *(_OWORD *)(a1 + 308) = xmmword_1B6ED0360;
  *(_OWORD *)(a1 + 260) = xmmword_1B6ED0360;
  *(_OWORD *)(a1 + 276) = xmmword_1B6ED0360;
  *(unsigned char *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1236) = 0;
  *(void *)(a1 + 1220) = 0;
  *(void *)(a1 + 1225) = 0;
  *(unsigned char *)(a1 + 73) = 1;
  uint64_t v1 = (float32x4_t *)(*(void *)(a1 + 40) + 16);
  uint64_t v2 = (float32x4_t *)(*(void *)(a1 + 48) + 16);
  *(void *)(a1 + 1240) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  return sub_1B6E00364((float32x4_t *)a1, v1, v2);
}

double sub_1B6E00364(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  int v3 = a1[13].u8[0];
  if (a1[13].i8[0] || !a1[4].i8[8])
  {
    float32x4_t v4 = a2[1];
    float32x4_t v5 = a1[5];
    float32x4_t v6 = a1[6];
    v5.i32[3] = 0;
    v6.i32[3] = 0;
    float32x4_t v7 = a1[7];
    float32x4_t v8 = a1[8];
    v7.i32[3] = 0;
    float32x4_t v9 = a2[2];
    float32x4_t v10 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v4.f32[0]), v6, *(float32x2_t *)v4.f32, 1), v7, v4, 2);
    int8x16_t v11 = (int8x16_t)vmulq_f32(*a2, v8);
    int8x16_t v12 = (int8x16_t)vmulq_f32(v4, v8);
    int8x16_t v13 = (int8x16_t)vmulq_f32(v9, v8);
    int32x2_t v14 = (int32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
    v13.i32[3] = 0;
    float32x2_t v15 = vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v12.i8);
    float32x4_t v33 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(*a2)), v6, *(float32x2_t *)a2->f32, 1), v7, *a2, 2);
    float32x4_t v16 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v9.f32[0]), v6, *(float32x2_t *)v9.f32, 1), v7, v9, 2);
    *(float32x2_t *)v17.f32 = vadd_f32(v15, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v14));
    *(float32x2_t *)&v17.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
    float32x4_t v18 = vaddq_f32(a2[3], v17);
    uint64_t v19 = a1 + 59;
    float32x4_t v20 = a1 + 60;
    a1[59] = v33;
    a1[60] = v10;
    float32x4_t v21 = a1 + 61;
    a1[61] = v16;
    a1[62] = v18;
    float32x4_t v22 = a3[1];
    float32x4_t v23 = a1[9];
    float32x4_t v24 = a1[10];
    v23.i32[3] = 0;
    v24.i32[3] = 0;
    float32x4_t v25 = a1[11];
    float32x4_t v26 = a1[12];
    v25.i32[3] = 0;
    float32x4_t v27 = a3[2];
    float32x4_t v28 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v22.f32[0]), v24, *(float32x2_t *)v22.f32, 1), v25, v22, 2);
    int8x16_t v29 = (int8x16_t)vmulq_f32(*a3, v26);
    int8x16_t v30 = (int8x16_t)vmulq_f32(v22, v26);
    int8x16_t v31 = (int8x16_t)vmulq_f32(v27, v26);
    v31.i32[3] = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v30.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)));
    *(float32x2_t *)&v5.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), 0);
    float32x4_t v32 = vaddq_f32(a3[3], v5);
    a1[63] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*a3)), v24, *(float32x2_t *)a3->f32, 1), v25, *a3, 2);
    a1[64] = v28;
    a1[65] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v27.f32[0]), v24, *(float32x2_t *)v27.f32, 1), v25, v27, 2);
    a1[66] = v32;
    a1[68] = v18;
    v33.i32[1] = v10.i32[0];
    a1[69] = v32;
    v33.i64[1] = v16.u32[0];
    a1[67] = v33;
    if (v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float32x4_t v34 = a3[1];
    float32x4_t v35 = a1[9];
    float32x4_t v36 = a1[10];
    v35.i32[3] = 0;
    v36.i32[3] = 0;
    float32x4_t v37 = a1[11];
    float32x4_t v38 = a1[12];
    v37.i32[3] = 0;
    float32x4_t v39 = a3[2];
    float32x4_t v40 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v34.f32[0]), v36, *(float32x2_t *)v34.f32, 1), v37, v34, 2);
    int8x16_t v41 = (int8x16_t)vmulq_f32(*a3, v38);
    int8x16_t v42 = (int8x16_t)vmulq_f32(v34, v38);
    int8x16_t v43 = (int8x16_t)vmulq_f32(v39, v38);
    int32x2_t v44 = (int32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
    v43.i32[3] = 0;
    float32x2_t v45 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8);
    float32x4_t v33 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(*a3)), v36, *(float32x2_t *)a3->f32, 1), v37, *a3, 2);
    float32x4_t v46 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v39.f32[0]), v36, *(float32x2_t *)v39.f32, 1), v37, v39, 2);
    *(float32x2_t *)v47.f32 = vadd_f32(v45, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), v44));
    *(float32x2_t *)&v47.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
    float32x4_t v18 = vaddq_f32(a3[3], v47);
    uint64_t v19 = a1 + 59;
    float32x4_t v20 = a1 + 60;
    a1[59] = v33;
    a1[60] = v40;
    float32x4_t v21 = a1 + 61;
    a1[61] = v46;
    a1[62] = v18;
    float32x4_t v48 = a2[1];
    float32x4_t v49 = a1[5];
    float32x4_t v50 = a1[6];
    v49.i32[3] = 0;
    v50.i32[3] = 0;
    float32x4_t v51 = a1[7];
    float32x4_t v52 = a1[8];
    v51.i32[3] = 0;
    float32x4_t v53 = a2[2];
    float32x4_t v54 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, v48.f32[0]), v50, *(float32x2_t *)v48.f32, 1), v51, v48, 2);
    int8x16_t v55 = (int8x16_t)vmulq_f32(*a2, v52);
    int8x16_t v56 = (int8x16_t)vmulq_f32(v48, v52);
    int8x16_t v57 = (int8x16_t)vmulq_f32(v53, v52);
    v57.i32[3] = 0;
    *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)));
    *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)), 0);
    float32x4_t v32 = vaddq_f32(a2[3], v35);
    a1[63] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, COERCE_FLOAT(*a2)), v50, *(float32x2_t *)a2->f32, 1), v51, *a2, 2);
    a1[64] = v54;
    a1[65] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v49, v53.f32[0]), v50, *(float32x2_t *)v53.f32, 1), v51, v53, 2);
    a1[66] = v32;
    a1[68] = v18;
    v33.i32[1] = v40.i32[0];
    a1[69] = v32;
    v33.i64[1] = v46.u32[0];
    a1[67] = v33;
  }
  if (!a1[4].i8[8])
  {
    float32x4_t v58 = vsubq_f32(v18, v32);
    goto LABEL_9;
  }
LABEL_7:
  float32x4_t v58 = vsubq_f32(v32, v18);
LABEL_9:
  uint64_t v59 = 0;
  v58.i32[3] = 0;
  a1[71] = v58;
  int8x16_t v60 = (int8x16_t)vmulq_f32(v33, v58);
  float32x4_t v61 = vmulq_n_f32(v33, vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)).f32[0]);
  v61.i32[3] = 0;
  float32x4_t v62 = vaddq_f32(v18, v61);
  a1[70] = v62;
  do
  {
    v62.i32[0] = v19->i32[v59];
    v62.i32[1] = v20->i32[v59];
    v62.i32[2] = v21->i32[v59];
    int8x16_t v63 = (int8x16_t)vmulq_f32(v62, v58);
    float32x2_t v64 = vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8);
    float32x4_t v62 = (float32x4_t)vextq_s8(v63, v63, 8uLL);
    *(float32x2_t *)v62.f32 = vadd_f32(v64, *(float32x2_t *)v62.f32);
    a1[72].i32[v59++] = v62.i32[0];
  }
  while (v59 != 3);
  return *(double *)v62.i64;
}

uint64_t sub_1B6E00654(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5, char a6)
{
  sub_1B6E01BF8(a1, 7, a2, a3);
  *(void *)uint64_t v10 = &unk_1F0FB1570;
  *(unsigned char *)(v10 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_OWORD *)(v10 + 80) = *a4;
  *(_OWORD *)(v10 + 96) = a4[1];
  *(_OWORD *)(v10 + 11sub_1B6DC4968((unsigned int *)this + 2) = a4[2];
  *(_OWORD *)(v10 + sub_1B6DC7B98((uint64_t)this + 128) = a4[3];
  *(_OWORD *)(v10 + 144) = *a5;
  *(_OWORD *)(v10 + 160) = a5[1];
  *(_OWORD *)(v10 + 176) = a5[2];
  *(_OWORD *)(v10 + 19sub_1B6DC4968((unsigned int *)this + 2) = a5[3];
  *(unsigned char *)(v10 + 208) = a6;
  sub_1B6E002FC(v10);
  return a1;
}

uint64_t sub_1B6E00708(uint64_t a1, uint64_t a2, float32x4_t *a3, char a4)
{
  float32x4_t v8 = sub_1B6E01B40();
  sub_1B6E01BF8(a1, 7, (uint64_t)v8, a2);
  *(void *)a1 = &unk_1F0FB1570;
  *(unsigned char *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  float32x4_t v9 = *a3;
  *(float32x4_t *)(a1 + 144) = *a3;
  float32x4_t v10 = a3[1];
  *(float32x4_t *)(a1 + 160) = v10;
  float32x4_t v11 = a3[2];
  *(float32x4_t *)(a1 + 176) = v11;
  float32x4_t v12 = a3[3];
  *(float32x4_t *)(a1 + 19sub_1B6DC4968((unsigned int *)this + 2) = v12;
  *(unsigned char *)(a1 + 208) = a4;
  float32x4_t v13 = *(float32x4_t *)(a2 + 16);
  float32x4_t v14 = *(float32x4_t *)(a2 + 32);
  float32x4_t v15 = *(float32x4_t *)(a2 + 48);
  float32x4_t v16 = vmulq_f32(v12, v13);
  int8x16_t v17 = (int8x16_t)vmulq_f32(v12, v14);
  *(float32x2_t *)v16.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v17.i8));
  int8x16_t v18 = (int8x16_t)vmulq_f32(v12, v15);
  v18.i32[3] = 0;
  *(float32x2_t *)&v16.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  v11.i32[3] = 0;
  float32x4_t v19 = vaddq_f32(*(float32x4_t *)(a2 + 64), v16);
  v10.i32[3] = 0;
  v9.i32[3] = 0;
  *(float32x4_t *)(a1 + 80) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v13.f32[0]), v10, *(float32x2_t *)v13.f32, 1), v11, v13, 2);
  *(float32x4_t *)(a1 + 96) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v14.f32[0]), v10, *(float32x2_t *)v14.f32, 1), v11, v14, 2);
  *(float32x4_t *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, v15.f32[0]), v10, *(float32x2_t *)v15.f32, 1), v11, v15, 2);
  *(float32x4_t *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = v19;
  sub_1B6E002FC(v20);
  return a1;
}

float32x4_t *sub_1B6E00820(float32x4_t *result, int32x2_t *a2)
{
  if (result[4].i8[8])
  {
    __int32 v3 = 0;
    a2->i32[0] = 0;
LABEL_9:
    a2->i32[1] = v3;
    return result;
  }
  float32x4_t v4 = result;
  *a2 = (int32x2_t)0x200000004;
  *(double *)v5.i64 = sub_1B6E00364(result, (float32x4_t *)(result[2].i64[1] + 16), (float32x4_t *)(result[3].i64[0] + 16));
  sub_1B6E008CC((uint64_t)v4, v5, v6, v7);
  float32x2_t result = (float32x4_t *)sub_1B6E00AEC((uint64_t)v4);
  if (v4[20].i8[4] || v4[76].i8[0]) {
    *a2 = vadd_s32(*a2, (int32x2_t)0xFFFFFFFF00000001);
  }
  if (v4[20].i8[5] || v4[77].i8[0])
  {
    __int32 v8 = a2->i32[1];
    ++a2->i32[0];
    __int32 v3 = v8 - 1;
    goto LABEL_9;
  }
  return result;
}

void sub_1B6E008CC(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  *(_DWORD *)(a1 + 1208) = 0;
  *(unsigned char *)(a1 + 325) = 0;
  float v4 = *(float *)(a1 + 220);
  float v5 = *(float *)(a1 + 224);
  if (v4 <= v5)
  {
    a3.i32[0] = *(_DWORD *)(a1 + 948);
    a3.i32[1] = *(_DWORD *)(a1 + 964);
    a3.i32[2] = *(_DWORD *)(a1 + 980);
    a2.i32[0] = *(_DWORD *)(a1 + 952);
    a2.i32[1] = *(_DWORD *)(a1 + 968);
    a2.i32[2] = *(_DWORD *)(a1 + 984);
    a4.i32[0] = *(_DWORD *)(a1 + 1012);
    a4.i32[1] = *(_DWORD *)(a1 + 1028);
    a4.i32[2] = *(_DWORD *)(a1 + 1044);
    int8x16_t v7 = (int8x16_t)vmulq_f32(a2, a4);
    int8x16_t v8 = (int8x16_t)vmulq_f32(a3, a4);
    float v9 = atan2f(vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0], vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0]);
    float v10 = v9;
    if (v4 < v5)
    {
      if (v9 >= v4)
      {
        if (v9 > v5)
        {
          float v12 = fmodf(v9 - v5, 6.2832);
          if (v12 >= -3.1416)
          {
            if (v12 > 3.1416) {
              float v12 = v12 + -6.2832;
            }
          }
          else
          {
            float v12 = v12 + 6.2832;
          }
          float v15 = fabsf(v12);
          float v16 = fmodf(v10 - v4, 6.2832);
          if (v16 >= -3.1416)
          {
            if (v16 > 3.1416) {
              float v16 = v16 + -6.2832;
            }
          }
          else
          {
            float v16 = v16 + 6.2832;
          }
          if (fabsf(v16) < v15) {
            float v10 = v10 + -6.2832;
          }
        }
      }
      else
      {
        float v11 = fmodf(v4 - v9, 6.2832);
        if (v11 >= -3.1416)
        {
          if (v11 > 3.1416) {
            float v11 = v11 + -6.2832;
          }
        }
        else
        {
          float v11 = v11 + 6.2832;
        }
        float v13 = fabsf(v11);
        float v14 = fmodf(v5 - v10, 6.2832);
        if (v14 >= -3.1416)
        {
          if (v14 > 3.1416) {
            float v14 = v14 + -6.2832;
          }
        }
        else
        {
          float v14 = v14 + 6.2832;
        }
        if (v13 >= fabsf(v14)) {
          float v10 = v10 + 6.2832;
        }
      }
    }
    *(float *)(a1 + 1204) = v10;
    if (v10 < v4 || (float v4 = v5, v10 > v5))
    {
      *(float *)(a1 + 1208) = v10 - v4;
      *(unsigned char *)(a1 + 325) = 1;
    }
  }
}

uint64_t sub_1B6E00AEC(uint64_t result)
{
  *(unsigned char *)(result + 324) = 0;
  float v1 = *(float *)(result + 1152);
  *(float *)(result + 1200) = v1;
  float v2 = *(float *)(result + 212);
  float v3 = *(float *)(result + 216);
  if (v2 <= v3)
  {
    if (v1 > v3)
    {
      float v4 = v1 - v3;
LABEL_6:
      *(float *)(result + 115sub_1B6DC4968((unsigned int *)this + 2) = v4;
      *(unsigned char *)(result + 324) = 1;
      return result;
    }
    if (v1 < v2)
    {
      float v4 = v1 - v2;
      goto LABEL_6;
    }
  }
  *(_DWORD *)(result + 115sub_1B6DC4968((unsigned int *)this + 2) = 0;
  return result;
}

void sub_1B6E00B38(float32x4_t *a1, uint64_t a2, double a3, double a4, double a5, float32x4_t a6, float32x4_t a7)
{
}

void sub_1B6E00B58(float32x4_t *a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float a7, float a8, double a9, float32x4_t a10, float32x4_t a11)
{
  uint64_t v15 = *(int *)(a2 + 40);
  if (a1[13].i8[0]) {
    float v16 = 1.0;
  }
  else {
    float v16 = -1.0;
  }
  BOOL v17 = a8 < 0.00000011921 || a7 < 0.00000011921;
  float v18 = a7 + a8;
  float v19 = a8 / v18;
  if (v18 <= 0.0) {
    float v19 = 0.5;
  }
  float v20 = 1.0 - v19;
  a10.i32[0] = a1[59].i32[0];
  a10.i32[1] = a1[60].i32[0];
  float32x4_t v21 = a10;
  v21.i32[2] = a1[61].i32[0];
  a11.i32[0] = a1[63].i32[0];
  a11.i32[1] = a1[64].i32[0];
  float32x4_t v22 = a11;
  v22.i32[2] = a1[65].i32[0];
  int v23 = a1[4].u8[9];
  if (a1[4].i8[9])
  {
    float32x4_t v24 = vmulq_n_f32(v21, v19);
    v24.i32[3] = 0;
    float32x4_t v25 = vmulq_n_f32(v22, v20);
    v25.i32[3] = 0;
    float32x4_t v26 = vaddq_f32(v24, v25);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v26, v26);
    _Q22 = vmulq_n_f32(v26, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)).f32[0]));
    if (fabsf(_Q22.f32[2]) <= 0.70711)
    {
      float v42 = vmlas_n_f32(vmuls_lane_f32(_Q22.f32[1], *(float32x2_t *)_Q22.f32, 1), _Q22.f32[0], _Q22.f32[0]);
      float v43 = 1.0 / sqrtf(v42);
      float v39 = -(float)(_Q22.f32[1] * v43);
      float v34 = v43 * _Q22.f32[0];
      v201.f32[0] = v39;
      *(uint64_t *)((char *)v201.i64 + 4) = COERCE_UNSIGNED_INT(v43 * _Q22.f32[0]);
      float v36 = -(float)(_Q22.f32[2] * (float)(v43 * _Q22.f32[0]));
      float v37 = _Q22.f32[2] * v39;
      v200.f32[0] = v36;
      v200.f32[1] = _Q22.f32[2] * v39;
      float v38 = v42 * v43;
      v200.f32[2] = v38;
      float v35 = 0.0;
    }
    else
    {
      _S7 = _Q22.i32[1];
      __asm { FMLA            S17, S7, V22.S[1] }
      float v33 = 1.0 / sqrtf(_S17);
      v201.i32[0] = 0;
      float v34 = -(float)(_Q22.f32[2] * v33);
      float v35 = vmuls_lane_f32(v33, *(float32x2_t *)_Q22.f32, 1);
      *(uint64_t *)((char *)v201.i64 + 4) = __PAIR64__(LODWORD(v35), LODWORD(v34));
      float v36 = _S17 * v33;
      float v37 = -(float)(_Q22.f32[0] * v35);
      v200.f32[0] = _S17 * v33;
      v200.f32[1] = v37;
      float v38 = v34 * _Q22.f32[0];
      v200.f32[2] = v34 * _Q22.f32[0];
      float v39 = 0.0;
    }
  }
  else
  {
    float v39 = a1[59].f32[1];
    float v34 = a1[60].f32[1];
    float v35 = a1[61].f32[1];
    v40.i64[0] = __PAIR64__(LODWORD(v34), LODWORD(v39));
    v40.i64[1] = LODWORD(v35);
    float v36 = a1[59].f32[2];
    float v37 = a1[60].f32[2];
    float v38 = a1[61].f32[2];
    v41.i64[0] = __PAIR64__(LODWORD(v37), LODWORD(v36));
    v41.i64[1] = LODWORD(v38);
    float32x4_t v200 = v41;
    float32x4_t v201 = v40;
    _Q22 = v21;
  }
  float32x4_t v44 = a1[66];
  float32x4_t v45 = a1[62];
  float32x4_t v46 = *(_DWORD **)(a2 + 16);
  *float32x4_t v46 = LODWORD(v39);
  v46[1] = LODWORD(v34);
  v46[2] = LODWORD(v35);
  v46[v15] = LODWORD(v36);
  int v47 = v15 + 1;
  v46[v47] = LODWORD(v37);
  *(float *)&v46[(int)v15 + 2] = v38;
  float32x4_t v48 = *(float **)(a2 + 32);
  *float32x4_t v48 = -v39;
  v48[1] = -v34;
  v48[2] = -v35;
  v48[v15] = -v36;
  v48[v47] = -v37;
  v48[(int)v15 + 2] = -v38;
  __int32 v49 = a1[20].i32[2];
  float v50 = a1[19].f32[1];
  if ((v49 & 0x80) == 0) {
    float v50 = v50 * *(float *)(a2 + 4);
  }
  float v51 = v50 * *(float *)a2;
  *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)a10.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), 4uLL);
  v52.i64[1] = a10.i64[0];
  *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)a11.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), 4uLL);
  v53.i64[1] = a11.i64[0];
  int8x16_t v54 = (int8x16_t)vsubq_f32(vmulq_f32(v21, v53), vmulq_f32(v52, v22));
  v55.i64[0] = vextq_s8(v54, v54, 4uLL).u64[0];
  v55.i64[1] = v54.u32[0];
  float32x4_t v56 = v201;
  int8x16_t v57 = (int8x16_t)vmulq_f32(v201, v55);
  float32x4_t v58 = *(float **)(a2 + 48);
  float *v58 = v51
       * vadd_f32(vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)).f32[0];
  float32x4_t v59 = v200;
  int8x16_t v60 = (int8x16_t)vmulq_f32(v200, v55);
  v58[v15] = v51
           * vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)).f32[0];
  if ((v49 & 0x40) != 0)
  {
    float32x4_t v61 = *(_DWORD **)(a2 + 56);
    *float32x4_t v61 = a1[20].i32[0];
    v61[v15] = a1[20].i32[0];
  }
  float32x4_t v62 = vsubq_f32(v44, v45);
  float32x4_t v63 = a3[3];
  float32x4_t v64 = a4[3];
  int v65 = 2 * v15;
  int v66 = 3 * v15;
  float32x4_t v199 = 0uLL;
  float v67 = &v46[2 * v15];
  int v68 = &v46[3 * v15];
  if (v23)
  {
    float32x4_t v69 = vsubq_f32(a1[66], v64);
    v69.i32[3] = 0;
    int8x16_t v70 = (int8x16_t)vmulq_f32(_Q22, v69);
    float32x4_t v71 = vmulq_n_f32(_Q22, vadd_f32(vpadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0]);
    v71.i32[3] = 0;
    float32x4_t v72 = vsubq_f32(a1[62], v63);
    v72.i32[3] = 0;
    int8x16_t v73 = (int8x16_t)vmulq_f32(_Q22, v72);
    float32x4_t v74 = vmulq_n_f32(_Q22, vadd_f32(vpadd_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)).f32[0]);
    v74.i32[3] = 0;
    float32x4_t v75 = vsubq_f32(v72, v74);
    float32x4_t v76 = v75;
    v76.i32[3] = 0;
    float32x4_t v77 = vmulq_n_f32(_Q22, a1[75].f32[0] - a1[72].f32[0]);
    v77.i32[3] = 0;
    float32x4_t v78 = vmulq_n_f32(v75, v20);
    float32x4_t v79 = vsubq_f32(vaddq_f32(v77, v74), v71);
    float32x4_t v80 = vmulq_n_f32(v79, v19);
    v80.i32[3] = 0;
    float32x4_t v81 = vsubq_f32(v69, v71);
    float32x4_t v82 = vaddq_f32(v76, v80);
    float32x4_t v83 = vsubq_f32(v81, vmulq_n_f32(v79, v20));
    v83.i32[3] = 0;
    float32x4_t v84 = vmulq_n_f32(v81, v19);
    v84.i32[3] = 0;
    v78.i32[3] = 0;
    float32x4_t v56 = vaddq_f32(v84, v78);
    int8x16_t v85 = (int8x16_t)vmulq_f32(v56, v56);
    float v86 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)).f32[0];
    if (v86 <= 0.00000011921)
    {
      v56.i32[0] = a1[59].i32[1];
      v56.i32[1] = a1[60].i32[1];
      v56.i32[2] = a1[61].i32[1];
    }
    else
    {
      float32x4_t v56 = vmulq_n_f32(v56, 1.0 / sqrtf(v86));
    }
    uint64_t v105 = 0;
    v106.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v106.i64[1] = _Q22.i64[0];
    v107.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL).u64[0];
    v107.i64[1] = v56.i64[0];
    int8x16_t v108 = (int8x16_t)vsubq_f32(vmulq_f32(_Q22, v107), vmulq_f32(v106, v56));
    v59.i64[0] = vextq_s8(v108, v108, 4uLL).u64[0];
    v59.i64[1] = v108.u32[0];
    float32x4_t v200 = v59;
    float32x4_t v201 = v56;
    v109.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0];
    v109.i64[1] = v82.i64[0];
    int8x16_t v110 = (int8x16_t)vsubq_f32(vmulq_f32(v82, v107), vmulq_f32(v109, v56));
    v111.i64[0] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL).u64[0];
    v111.i64[1] = v83.i64[0];
    int8x16_t v112 = (int8x16_t)vsubq_f32(vmulq_f32(v107, v83), vmulq_f32(v111, v56));
    v113.i64[0] = vextq_s8(v112, v112, 4uLL).u64[0];
    v113.i64[1] = v112.u32[0];
    float32x4_t v199 = v113;
    v67[2] = v110.i32[0];
    *(void *)float v67 = vextq_s8(v110, v110, 4uLL).u64[0];
    do
    {
      v48[v65 + v105] = -v199.f32[v105];
      ++v105;
    }
    while (v105 != 3);
    v114.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL).u64[0];
    v114.i64[1] = v59.i64[0];
    int8x16_t v115 = (int8x16_t)vsubq_f32(vmulq_f32(v82, v114), vmulq_f32(v109, v59));
    v116.i64[0] = vextq_s8(v115, v115, 4uLL).u64[0];
    v116.i64[1] = v115.u32[0];
    int8x16_t v117 = (int8x16_t)vsubq_f32(vmulq_f32(v114, v83), vmulq_f32(v111, v59));
    v118.i64[0] = vextq_s8(v117, v117, 4uLL).u64[0];
    v118.i64[1] = v117.u32[0];
    float32x4_t v199 = v118;
    if (v17 && a1[20].i8[5])
    {
      float32x4_t v199 = vmulq_n_f32(v118, v20);
      float32x4_t v116 = vmulq_n_f32(v116, v19);
    }
    uint64_t v119 = 0;
    *(void *)int v68 = v116.i64[0];
    _OWORD v68[2] = v116.i32[2];
    do
    {
      v48[v66 + v119] = -v199.f32[v119];
      ++v119;
    }
    while (v119 != 3);
    uint64_t v120 = 0;
    uint64_t v100 = *(void *)(a2 + 8);
    uint64_t v121 = v100 + 4 * v65;
    *(void *)uint64_t v121 = v201.i64[0];
    *(_DWORD *)(v121 + 8) = v201.i32[2];
    uint64_t v122 = v100 + 4 * v66;
    *(void *)uint64_t v122 = v200.i64[0];
    *(_DWORD *)(v122 + 8) = v200.i32[2];
    uint64_t v103 = *(void *)(a2 + 24);
    do
    {
      *(float *)(v103 + 4 * v65 + v120 * 4) = -v201.f32[v120];
      ++v120;
    }
    while (v120 != 3);
    for (uint64_t i = 0; i != 3; ++i)
      *(float *)(v103 + 4 * v66 + i * 4) = -v200.f32[i];
    float32x4_t v89 = 0uLL;
  }
  else
  {
    uint64_t v87 = 0;
    float32x4_t v89 = vsubq_f32(v64, v63);
    int8x8_t v88 = (int8x8_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
    v89.i32[3] = 0;
    *(int8x8_t *)v90.f32 = vext_s8(*(int8x8_t *)v89.f32, v88, 4uLL);
    v90.i64[1] = v89.i64[0];
    v91.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL).u64[0];
    v91.i64[1] = v56.i64[0];
    int8x16_t v92 = (int8x16_t)vsubq_f32(vmulq_f32(v91, v89), vmulq_f32(v56, v90));
    v93.i64[0] = vextq_s8(v92, v92, 4uLL).u64[0];
    v93.i64[1] = v92.u32[0];
    float32x4_t v198 = v93;
    do
    {
      *(float *)&v67[v87] = v19 * v198.f32[v87];
      ++v87;
    }
    while (v87 != 3);
    for (uint64_t j = 0; j != 3; ++j)
      v48[v65 + j] = v20 * v198.f32[j];
    uint64_t v95 = 0;
    v96.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL).u64[0];
    v96.i64[1] = v59.i64[0];
    int8x16_t v97 = (int8x16_t)vsubq_f32(vmulq_f32(v96, v89), vmulq_f32(v59, v90));
    v96.i64[0] = vextq_s8(v97, v97, 4uLL).u64[0];
    v96.i64[1] = v97.u32[0];
    float32x4_t v198 = v96;
    do
    {
      *(float *)&v68[v95] = v19 * v198.f32[v95];
      ++v95;
    }
    while (v95 != 3);
    for (uint64_t k = 0; k != 3; ++k)
      v48[v66 + k] = v20 * v198.f32[k];
    uint64_t v99 = 0;
    uint64_t v100 = *(void *)(a2 + 8);
    uint64_t v101 = v100 + 4 * v65;
    *(void *)uint64_t v101 = v201.i64[0];
    *(_DWORD *)(v101 + 8) = v201.i32[2];
    uint64_t v102 = v100 + 4 * v66;
    *(void *)uint64_t v102 = v200.i64[0];
    *(_DWORD *)(v102 + 8) = v200.i32[2];
    uint64_t v103 = *(void *)(a2 + 24);
    do
    {
      *(float *)(v103 + 4 * v65 + v99 * 4) = -v201.f32[v99];
      ++v99;
    }
    while (v99 != 3);
    for (uint64_t m = 0; m != 3; ++m)
      *(float *)(v103 + 4 * v66 + m * 4) = -v200.f32[m];
    float32x4_t v83 = 0uLL;
    float32x4_t v82 = 0uLL;
  }
  v62.i32[3] = 0;
  float v124 = a1[18].f32[1];
  if ((v49 & 0x20) == 0) {
    float v124 = v124 * *(float *)(a2 + 4);
  }
  float v125 = v124 * *(float *)a2;
  int8x16_t v126 = (int8x16_t)vmulq_f32(v56, v62);
  v58[v65] = v125
           * vadd_f32(vpadd_f32(*(float32x2_t *)v126.i8, *(float32x2_t *)v126.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL)).f32[0];
  int8x16_t v127 = (int8x16_t)vmulq_f32(v59, v62);
  v58[v66] = v125
           * vadd_f32(vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL)).f32[0];
  if ((v49 & 0x10) != 0)
  {
    uint64_t v128 = *(void *)(a2 + 56);
    *(_DWORD *)(v128 + 4 * v65) = a1[19].i32[0];
    *(_DWORD *)(v128 + 4 * v66) = a1[19].i32[0];
  }
  int v129 = a1[20].u8[4];
  float v130 = _Q22.f32[2];
  if (a1[20].i8[4])
  {
    float v131 = v16 * a1[72].f32[0];
    if (v131 <= 0.0) {
      int v132 = 1;
    }
    else {
      int v132 = 2;
    }
    int v133 = a1[76].u8[0];
  }
  else
  {
    if (!a1[76].i8[0])
    {
      int v156 = 4;
      goto LABEL_101;
    }
    int v132 = 0;
    float v131 = 0.0;
    int v133 = 1;
  }
  uint64_t v134 = 4 * (int)v15;
  uint64_t v135 = 4 * v134;
  *(void *)(v100 + v135) = _Q22.i64[0];
  uint64_t v136 = (4 * v15) | 2;
  *(_DWORD *)(v100 + 4 * v136) = _Q22.i32[2];
  *(float32x2_t *)(v103 + v135) = vneg_f32(*(float32x2_t *)_Q22.f32);
  *(float *)(v103 + 4 * v136) = -_Q22.f32[2];
  if (v23)
  {
    if (v17) {
      goto LABEL_63;
    }
    v137.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL).u64[0];
    v137.i64[1] = v82.i64[0];
    v138.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v138.i64[1] = _Q22.i64[0];
    int8x16_t v139 = (int8x16_t)vsubq_f32(vmulq_f32(v138, v82), vmulq_f32(_Q22, v137));
    v140.i64[0] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL).u64[0];
    v140.i64[1] = v83.i64[0];
    int8x16_t v141 = (int8x16_t)vsubq_f32(vmulq_f32(v138, v83), vmulq_f32(_Q22, v140));
    v140.i64[0] = vextq_s8(v141, v141, 4uLL).u64[0];
    v140.i64[1] = v141.u32[0];
    float32x4_t v199 = v140;
    *(void *)&v46[v134] = vextq_s8(v139, v139, 4uLL).u64[0];
    v46[v136] = v139.i32[0];
    *(float32x2_t *)&v48[v134] = vneg_f32(*(float32x2_t *)v140.f32);
    float v142 = -*(float *)v141.i32;
  }
  else
  {
    v143.i64[0] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL).u64[0];
    v143.i64[1] = v89.i64[0];
    v144.i64[0] = vextq_s8((int8x16_t)_Q22, (int8x16_t)_Q22, 4uLL).u64[0];
    v144.i64[1] = _Q22.i64[0];
    int8x16_t v145 = (int8x16_t)vsubq_f32(vmulq_f32(v144, v89), vmulq_f32(_Q22, v143));
    v144.i64[0] = vextq_s8(v145, v145, 4uLL).u64[0];
    *(float32x2_t *)&v46[v134] = vmul_n_f32(*(float32x2_t *)v144.f32, v19);
    *(float *)&v46[v136] = v19 * *(float *)v145.i32;
    *(float32x2_t *)&v48[v134] = vmul_n_f32(*(float32x2_t *)v144.f32, v20);
    float v142 = v20 * *(float *)v145.i32;
  }
  v48[v136] = v142;
LABEL_63:
  float v146 = a1[13].f32[1];
  float v147 = a1[13].f32[2];
  _ZF = v146 != v147 || v129 == 0;
  v58[v134] = 0.0;
  uint64_t v149 = *(void *)(a2 + 64);
  *(_DWORD *)(v149 + 4 * v134) = 0;
  uint64_t v150 = *(void *)(a2 + 72);
  *(_DWORD *)(v150 + 4 * v134) = 0;
  char v151 = !_ZF;
  int v152 = (float *)(a2 + 4);
  if ((v49 & 0x200) != 0) {
    int v152 = &a1[16].f32[1];
  }
  float v153 = *v152;
  if (v133 && (v151 & 1) == 0)
  {
    float32x4_t v196 = _Q22;
    if (v49) {
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * v134) = a1[15].i32[0];
    }
    float v154 = sub_1B6E01C50(a1[75].f32[0], a1[13].f32[1], a1[13].f32[2], a1[76].f32[1], v153 * *(float *)a2);
    float32x4_t v58 = *(float **)(a2 + 48);
    v58[v134] = v58[v134] + (float)((float)-(float)(v16 * v154) * a1[76].f32[1]);
    uint64_t v149 = *(void *)(a2 + 64);
    *(float *)(v149 + 4 * v134) = *(float *)(v149 + 4 * v134) - (float)(a1[76].f32[2] * *(float *)a2);
    uint64_t v150 = *(void *)(a2 + 72);
    *(float *)(v150 + 4 * v134) = *(float *)(v150 + 4 * v134) + (float)(a1[76].f32[2] * *(float *)a2);
    _Q22 = v196;
  }
  if (!v129) {
    goto LABEL_100;
  }
  v58[v134] = v58[v134] + (float)((float)(v153 * *(float *)a2) * v131);
  if (a1[20].i8[9]) {
    *(_DWORD *)(*(void *)(a2 + 56) + 4 * v134) = a1[17].i32[0];
  }
  if (v146 == v147)
  {
    *(_DWORD *)(v149 + 4 * v134) = -8388609;
LABEL_85:
    int v155 = 2139095039;
    goto LABEL_86;
  }
  if (v132 != 1)
  {
    *(_DWORD *)(v149 + 4 * v134) = 0;
    goto LABEL_85;
  }
  *(_DWORD *)(v149 + 4 * v134) = -8388609;
  int v155 = 0;
LABEL_86:
  *(_DWORD *)(v150 + 4 * v134) = v155;
  float v157 = a1[16].f32[3];
  if ((float)(1.0 - v157) < 0.0 || (float)(1.0 - v157) > 0.0)
  {
    float v159 = vabds_f32(1.0, v157);
    int8x16_t v160 = (int8x16_t)vmulq_f32(_Q22, *a5);
    int8x16_t v161 = (int8x16_t)vmulq_f32(_Q22, *a6);
    float v162 = v16
         * vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v160.i8, *(float32x2_t *)v160.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v160, v160, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v161.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL))).f32[0];
    float v158 = v58[v134];
    if (v132 == 1)
    {
      float v163 = -(float)(v159 * v162);
      if (v162 >= 0.0 || v163 <= v158) {
        goto LABEL_99;
      }
    }
    else
    {
      float v163 = -(float)(v159 * v162);
      if (v162 <= 0.0 || v163 >= v158) {
        goto LABEL_99;
      }
    }
    v58[v134] = v163;
    float v158 = v163;
  }
  else
  {
    float v158 = v58[v134];
  }
LABEL_99:
  v58[v134] = a1[16].f32[1] * v158;
LABEL_100:
  int v156 = 5;
LABEL_101:
  int v166 = a1[20].u8[5];
  if (a1[20].i8[5])
  {
    float v167 = a1[75].f32[2];
    if (v167 > 0.0) {
      int v168 = 1;
    }
    else {
      int v168 = 2;
    }
    BOOL v169 = a1[77].i8[0] == 0;
  }
  else
  {
    if (!a1[77].i8[0]) {
      return;
    }
    BOOL v169 = 0;
    int v168 = 0;
    float v167 = 0.0;
  }
  uint64_t v170 = *(int *)(a2 + 40) * (uint64_t)v156;
  uint64_t v171 = *(void *)(a2 + 16);
  uint64_t v172 = 4 * v170;
  *(void *)(v171 + v17sub_1B6DC4968((unsigned int *)this + 2) = _Q22.i64[0];
  uint64_t v173 = 4 * v170 + 8;
  *(_DWORD *)(v171 + v173) = _Q22.i32[2];
  uint64_t v174 = *(void *)(a2 + 32);
  *(float32x2_t *)(v174 + v17sub_1B6DC4968((unsigned int *)this + 2) = vneg_f32(*(float32x2_t *)_Q22.f32);
  *(float *)(v174 + v173) = -v130;
  float v175 = a1[13].f32[3];
  float v176 = a1[14].f32[0];
  BOOL v178 = v175 == v176 && v166 != 0;
  __int32 v179 = a1[20].i32[2];
  uint64_t v180 = (float *)(a2 + 4);
  if ((v179 & 0x800) != 0) {
    uint64_t v180 = &a1[17].f32[1];
  }
  float v181 = *v180;
  if (!v169 && !v178)
  {
    float32x4_t v197 = _Q22;
    float v182 = a1[14].f32[0];
    float v183 = a1[13].f32[3];
    if ((v179 & 4) != 0)
    {
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * v170) = a1[16].i32[0];
      float v183 = a1[13].f32[3];
      float v182 = a1[14].f32[0];
    }
    float v184 = sub_1B6E01C50(a1[75].f32[1], v183, v182, a1[77].f32[1], v181 * *(float *)a2);
    float32x4_t v58 = *(float **)(a2 + 48);
    v58[v170] = v184 * a1[77].f32[1];
    *(float *)(*(void *)(a2 + 64) + 4 * v170) = -(float)(a1[77].f32[2] * *(float *)a2);
    *(float *)(*(void *)(a2 + 72) + 4 * v170) = a1[77].f32[2] * *(float *)a2;
    _Q22 = v197;
  }
  if (v166)
  {
    v58[v170] = v58[v170] + (float)((float)(v181 * *(float *)a2) * v167);
    if ((a1[20].i8[9] & 4) != 0) {
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * v170) = a1[18].i32[0];
    }
    if (v175 == v176)
    {
      *(_DWORD *)(*(void *)(a2 + 64) + 4 * v170) = -8388609;
    }
    else
    {
      uint64_t v185 = *(void *)(a2 + 64);
      if (v168 != 1)
      {
        *(_DWORD *)(v185 + 4 * v170) = -8388609;
        int v186 = 0;
        goto LABEL_129;
      }
      *(_DWORD *)(v185 + 4 * v170) = 0;
    }
    int v186 = 2139095039;
LABEL_129:
    *(_DWORD *)(*(void *)(a2 + 72) + 4 * v170) = v186;
    float v187 = a1[17].f32[3];
    if ((float)(1.0 - v187) < 0.0 || (float)(1.0 - v187) > 0.0)
    {
      float v189 = vabds_f32(1.0, v187);
      int8x16_t v190 = (int8x16_t)vmulq_f32(_Q22, *(float32x4_t *)(a1[2].i64[1] + 368));
      int8x16_t v191 = (int8x16_t)vmulq_f32(_Q22, *(float32x4_t *)(a1[3].i64[0] + 368));
      LODWORD(v19sub_1B6DC4968((unsigned int *)this + 2) = vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v190, v190, 8uLL)), vadd_f32(vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL))).u32[0];
      float v188 = v58[v170];
      if (v168 == 1)
      {
        float v193 = -(float)(v189 * v192);
        if (v192 >= 0.0 || v193 <= v188) {
          goto LABEL_142;
        }
      }
      else
      {
        float v193 = -(float)(v189 * v192);
        if (v192 <= 0.0 || v193 >= v188) {
          goto LABEL_142;
        }
      }
      v58[v170] = v193;
      float v188 = v193;
    }
    else
    {
      float v188 = v58[v170];
    }
LABEL_142:
    v58[v170] = a1[17].f32[1] * v188;
  }
}

uint64_t sub_1B6E017C4(uint64_t result, int a2, int a3, float a4)
{
  switch(a2)
  {
    case 4:
      if (a3 <= 0)
      {
        *(float *)(result + 27sub_1B6DC4968((unsigned int *)this + 2) = a4;
        int v4 = 256;
      }
      else if (a3 > 2)
      {
        if (a3 == 3)
        {
          *(float *)(result + 288) = a4;
          int v4 = 1024;
        }
        else
        {
          if (a3 > 5) {
            return result;
          }
          *(float *)(result + 320) = a4;
          int v4 = 64;
        }
      }
      else
      {
        *(float *)(result + 304) = a4;
        int v4 = 16;
      }
      break;
    case 3:
      if (a3 <= 0)
      {
        *(float *)(result + 240) = a4;
        int v4 = 1;
      }
      else
      {
        if (a3 != 3) {
          return result;
        }
        *(float *)(result + 256) = a4;
        int v4 = 4;
      }
      break;
    case 2:
      if (a3 <= 0)
      {
        *(float *)(result + 260) = a4;
        int v4 = 512;
      }
      else if (a3 > 2)
      {
        if (a3 == 3)
        {
          *(float *)(result + 276) = a4;
          int v4 = 2048;
        }
        else
        {
          if (a3 > 5) {
            return result;
          }
          *(float *)(result + 308) = a4;
          int v4 = 128;
        }
      }
      else
      {
        *(float *)(result + 29sub_1B6DC4968((unsigned int *)this + 2) = a4;
        int v4 = 32;
      }
      break;
    default:
      return result;
  }
  *(_DWORD *)(result + 328) |= v4;
  return result;
}

float sub_1B6E018B0(float *a1, int a2, int a3)
{
  switch(a2)
  {
    case 4:
      if (a3 <= 0) {
        return a1[68];
      }
      if (a3 <= 2) {
        return a1[76];
      }
      if (a3 == 3) {
        return a1[72];
      }
      if (a3 <= 5) {
        return a1[80];
      }
      break;
    case 3:
      if (a3 <= 0) {
        return a1[60];
      }
      if (a3 == 3) {
        return a1[64];
      }
      break;
    case 2:
      if (a3 <= 0) {
        return a1[65];
      }
      if (a3 <= 2) {
        return a1[73];
      }
      if (a3 == 3) {
        return a1[69];
      }
      if (a3 <= 5) {
        return a1[77];
      }
      break;
  }
  return 3.4028e38;
}

void *sub_1B6E01974(void *result)
{
  *float32x2_t result = &unk_1F0FB13D8;
  return result;
}

void sub_1B6E01994(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB13D8;
  sub_1B6E073C4(a1);
}

uint64_t sub_1B6E019B8()
{
  return 216;
}

const char *sub_1B6E019C0(uint64_t a1, int32x4_t *a2, uint64_t a3)
{
  sub_1B6E01CE0(a1, (uint64_t)a2, a3);
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 80;
  int8x16_t v7 = a2 + 4;
  do
  {
    for (uint64_t i = 0; i != 4; ++i)
      v7->i32[i] = *(_DWORD *)(v6 + i * 4);
    ++v5;
    v6 += 16;
    ++v7;
  }
  while (v5 != 3);
  for (uint64_t j = 0; j != 4; ++j)
    a2[7].i32[j] = *(_DWORD *)(a1 + 128 + j * 4);
  uint64_t v10 = 0;
  uint64_t v11 = a1 + 144;
  float v12 = a2 + 8;
  do
  {
    for (uint64_t k = 0; k != 4; ++k)
      v12->i32[k] = *(_DWORD *)(v11 + k * 4);
    ++v10;
    v11 += 16;
    ++v12;
  }
  while (v10 != 3);
  for (uint64_t m = 0; m != 4; ++m)
    a2[11].i32[m] = *(_DWORD *)(a1 + 192 + m * 4);
  a2[12] = vrev64q_s32(*(int32x4_t *)(a1 + 212));
  __int32 v15 = *(unsigned __int8 *)(a1 + 73);
  a2[13].i32[0] = *(unsigned __int8 *)(a1 + 208);
  a2[13].i32[1] = v15;
  return "btSliderConstraintData";
}

uint64_t sub_1B6E01AB8(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = &unk_1F0FB13D8;
  *(void *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = -1;
  *(_DWORD *)(a1 + 24) = 2139095039;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = -1;
  *(void *)(a1 + 40) = a3;
  sub_1B6E01B40();
  *(void *)(a1 + 48) = &unk_1E9E48940;
  *(void *)(a1 + 56) = 0x3E99999A00000000;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void *sub_1B6E01B40()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9E48C00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9E48C00))
  {
    float32x2_t v1 = 0;
    uint64_t v2 = 0;
    sub_1B6E0672C(&unk_1E9E48940, 0, 0, &v1, 0.0);
    __cxa_atexit((void (*)(void *))sub_1B6E01EAC, &unk_1E9E48940, &dword_1B6287000);
    __cxa_guard_release(&qword_1E9E48C00);
  }
  float32x2_t v1 = 0;
  uint64_t v2 = 0;
  sub_1B6E06750((uint64_t)&unk_1E9E48940, &v1, 0.0);
  return &unk_1E9E48940;
}

double sub_1B6E01BF8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)a1 = &unk_1F0FB13D8;
  *(void *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = -1;
  *(_DWORD *)(a1 + 24) = 2139095039;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = -1;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = a4;
  double result = 0.000000381469818;
  *(void *)(a1 + 56) = 0x3E99999A00000000;
  *(void *)(a1 + 64) = 0;
  return result;
}

float sub_1B6E01C50(float a1, float a2, float a3, float a4, float a5)
{
  float v5 = 1.0;
  if (a2 <= a3)
  {
    float v5 = 0.0;
    if (a2 != a3)
    {
      float v7 = a4 / a5;
      if (v7 >= 0.0)
      {
        if (v7 <= 0.0) {
          return v5;
        }
        if (a1 > a3 || (float)(a3 - v7) >= a1)
        {
          if (a1 <= a3) {
            return 1.0;
          }
          else {
            return 0.0;
          }
        }
        float v8 = a3 - a1;
      }
      else
      {
        if (a1 < a2 || (float)(a2 - v7) <= a1)
        {
          if (a1 >= a2) {
            return 1.0;
          }
          else {
            return 0.0;
          }
        }
        float v8 = a2 - a1;
      }
      return v8 / v7;
    }
  }
  return v5;
}

const char *sub_1B6E01CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 40));
  *(void *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 56))(a3, *(void *)(a1 + 48));
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v6);
  *(void *)(a2 + 16) = v7;
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 96))(a3, v6);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a2 + 36) = *(unsigned __int8 *)(a1 + 29);
  *(_DWORD *)(a2 + 5sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 60) = *(unsigned __int8 *)(a1 + 28);
  *(void *)(a2 + 28) = *(void *)(a1 + 12);
  *(void *)(a2 + 40) = *(void *)(a1 + 56);
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(unsigned int *)(v8 + 548);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = *(void **)(v8 + 560);
    do
    {
      if (*v10 == a1) {
        *(_DWORD *)(a2 + 48) = 1;
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(unsigned int *)(v11 + 548);
  if ((int)v12 >= 1)
  {
    float v13 = *(void **)(v11 + 560);
    do
    {
      if (*v13 == a1) {
        *(_DWORD *)(a2 + 48) = 1;
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  return "btTypedConstraintData";
}

double sub_1B6E01EAC(void *a1)
{
  *a1 = &unk_1F0FB0598;
  sub_1B6441B40((uint64_t)(a1 + 68));

  return nullsub_1(a1);
}

void sub_1B6E01F04(uint64_t a1, float a2)
{
  *(void *)(a1 + 20) = 0;
  uint64_t v2 = (void *)(a1 + 20);
  *(unsigned char *)(a1 + 28) = 0;
  float v3 = *(float *)(a1 + 4);
  if (v3 >= 0.0)
  {
    float v5 = fmodf(a2 - *(float *)a1, 6.2832);
    if (v5 >= -3.1416)
    {
      if (v5 > 3.1416) {
        float v5 = v5 + -6.2832;
      }
    }
    else
    {
      float v5 = v5 + 6.2832;
    }
    if (v5 >= (float)-v3)
    {
      if (v5 <= v3) {
        return;
      }
      *(unsigned char *)(a1 + 28) = 1;
      float v6 = v3 - v5;
      __asm { FMOV            V0.2S, #-1.0 }
    }
    else
    {
      *(unsigned char *)(a1 + 28) = 1;
      float v6 = -(float)(v3 + v5);
      __asm { FMOV            V0.2S, #1.0 }
    }
    *(float *)&_D0 = v6;
    *uint64_t v2 = _D0;
  }
}

void sub_1B6E01FD4(float *a1)
{
}

void sub_1B6E0203C(float *a1)
{
}

uint64_t sub_1B6E020A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B6E02208(a1, a2, a3);
  char v7 = 0;
  *(void *)uint64_t v8 = &unk_1F0FB1D20;
  *(void *)(v8 + 29sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(v8 + 324) = 0;
  *(void *)(v8 + 380) = 0;
  *(void *)(v8 + 420) = 0;
  *(unsigned char *)(v8 + 256) = 1;
  *(void *)(v8 + 248) = 0;
  *(_DWORD *)(v8 + 236) = 0;
  *(_DWORD *)(v8 + 240) = 0;
  *(void *)(v8 + 264) = 0;
  *(void *)(v8 + 27sub_1B6DC4968((unsigned int *)this + 2) = a4;
  *(unsigned char *)(v8 + 31sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(v8 + 304) = 0;
  *(unsigned char *)(v8 + 344) = 1;
  *(void *)(v8 + 336) = 0;
  *(_OWORD *)(v8 + 35sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6ED0380;
  *(_DWORD *)(v8 + 368) = 0;
  *(_WORD *)(v8 + 374) = 0;
  *(unsigned char *)(v8 + 400) = 1;
  *(void *)(v8 + 39sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_DWORD *)(v8 + 408) = 0;
  *(unsigned char *)(v8 + 440) = 1;
  *(void *)(v8 + 43sub_1B6DC4968((unsigned int *)this + 2) = 0;
  if (!a4)
  {
    uint64_t v9 = sub_1B6E073B8(320, 16);
    sub_1B6DFC700(v9);
    *(void *)(a1 + 27sub_1B6DC4968((unsigned int *)this + 2) = v10;
    char v7 = 1;
  }
  *(unsigned char *)(a1 + 373) = v7;
  uint64_t v11 = sub_1B6E073B8(112, 16);
  *(void *)(a1 + 280) = sub_1B6DDFF64(v11);
  *(unsigned char *)(a1 + 37sub_1B6DC4968((unsigned int *)this + 2) = 1;
  uint64_t v12 = sub_1B6E073B8(152, 16);
  uint64_t v13 = *(void *)(a1 + 272);
  *(void *)uint64_t v12 = &unk_1F0FB2478;
  *(void *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = v13;
  *(void *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(v12 + 40) = 0;
  *(void *)(v12 + 48) = a2;
  *(unsigned char *)(v12 + 80) = 1;
  *(void *)(v12 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(v12 + 60) = 0;
  *(unsigned char *)(v12 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
  *(void *)(v12 + 104) = 0;
  *(void *)(v12 + 9sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(v12 + 144) = 1;
  *(void *)(v12 + 136) = 0;
  *(void *)(v12 + 124) = 0;
  *(void *)(a1 + 264) = v12;
  return a1;
}

double sub_1B6E02208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6DD289C(a1, a2, a3);
  *(void *)uint64_t v3 = &unk_1F0FB0CB8;
  *(void *)(v3 + sub_1B6DC7B98((uint64_t)this + 128) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 144) = xmmword_1B6ED0390;
  *(void *)(v3 + 160) = 0xA00000000;
  *(void *)(v3 + 184) = 0x100000000;
  *(_OWORD *)(v3 + sub_1B6DAD18C((uint64_t)this + 168) = xmmword_1B6ED03A0;
  *(_OWORD *)(v3 + 19sub_1B6DC4968((unsigned int *)this + 2) = xmmword_1B6ED03B0;
  *(void *)(v3 + 208) = 0x200000104;
  *(_DWORD *)(v3 + 216) = 128;
  double result = 5.28028251e237;
  *(void *)(v3 + 220) = 0x7149F2CA42C80000;
  *(_DWORD *)(v3 + 228) = 1065353216;
  return result;
}

uint64_t sub_1B6E022A4(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB1D20;
  if (*(unsigned char *)(a1 + 372))
  {
    (***(void (****)(void))(a1 + 280))(*(void *)(a1 + 280));
    sub_1B6E073C4(*(void *)(a1 + 280));
  }
  uint64_t v2 = *(void (****)(void))(a1 + 264);
  if (v2)
  {
    (**v2)(v2);
    sub_1B6E073C4(*(void *)(a1 + 264));
  }
  if (*(unsigned char *)(a1 + 373))
  {
    (***(void (****)(void))(a1 + 272))(*(void *)(a1 + 272));
    sub_1B6E073C4(*(void *)(a1 + 272));
  }
  sub_1B6441B40(a1 + 416);
  sub_1B6441B40(a1 + 376);
  sub_1B6441B40(a1 + 320);
  sub_1B6441B40(a1 + 288);
  sub_1B6441B40(a1 + 232);

  return sub_1B6DD2918(a1);
}

void sub_1B6E023C4(uint64_t a1)
{
  uint64_t v1 = sub_1B6E022A4(a1);

  sub_1B6E073C4(v1);
}

void sub_1B6E023EC(uint64_t a1, __n128 a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    unsigned __int32 v3 = a2.n128_u32[0];
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8 * i);
      if (v6) {
        BOOL v7 = (*(_DWORD *)(v6 + 264) & 2) == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7 && *(_DWORD *)(v6 + 244) != 2 && (*(unsigned char *)(v6 + 232) & 2) != 0)
      {
        a2.n128_u32[0] = v3;
        a2 = sub_1B6E06860(v6, a2);
        int v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
}

uint64_t sub_1B6E02470(uint64_t a1)
{
  sub_1B6DD5D84(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v2) & 0x1800) != 0)
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
      if (v3 >= 1)
      {
        unsigned int v4 = v3 + 1;
        do
        {
          uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 216))(a1, v4 - 2);
          sub_1B6E026DC(a1, v5);
          --v4;
        }
        while (v4 > 1);
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (result)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
    if ((result & 0x4003) != 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      if (result)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
        if (result)
        {
          if (*(int *)(a1 + 380) >= 1)
          {
            uint64_t v9 = 0;
            do
            {
              uint64_t v10 = *(void *)(*(void *)(a1 + 392) + 8 * v9);
              uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v10 + 24))(v10, *(void *)(a1 + 104));
              ++v9;
            }
            while (v9 < *(int *)(a1 + 380));
          }
        }
      }
    }
  }
  return result;
}

void sub_1B6E026DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __int16 v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __int16 v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
  unsigned int v10 = *(unsigned int *)(a2 + 60);
  if (*(float *)&v10 > 0.0)
  {
    __int16 v11 = v7;
    switch(*(_DWORD *)(a2 + 8))
    {
      case 3:
        float32x4_t v230 = (float32x4_t)xmmword_1B6E4F300;
        float32x4_t v231 = (float32x4_t)xmmword_1B6E4F320;
        float32x4_t v232 = (float32x4_t)xmmword_1B6E4F2E0;
        float32x4_t v97 = *(float32x4_t *)(a2 + 368);
        float v98 = *(float32x4_t **)(a2 + 40);
        float32x4_t v99 = vmulq_f32(v97, v98[1]);
        int8x16_t v100 = (int8x16_t)vmulq_f32(v97, v98[2]);
        int8x16_t v101 = (int8x16_t)vmulq_f32(v97, v98[3]);
        v101.i32[3] = 0;
        *(float32x2_t *)v99.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v100.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL)));
        *(float32x2_t *)&v99.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)), 0);
        float32x4_t v233 = vaddq_f32(v99, v98[4]);
        uint64_t v102 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v102 + 112))(v102, &v230, *(float *)&v10);
        float32x4_t v103 = *(float32x4_t *)(a2 + 384);
        float v104 = *(float32x4_t **)(a2 + 48);
        float32x4_t v105 = vmulq_f32(v103, v104[1]);
        int8x16_t v106 = (int8x16_t)vmulq_f32(v103, v104[2]);
        int8x16_t v107 = (int8x16_t)vmulq_f32(v103, v104[3]);
        v107.i32[3] = 0;
        *(float32x2_t *)v105.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v106.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL)));
        *(float32x2_t *)&v105.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL)), 0);
        float32x4_t v233 = vaddq_f32(v105, v104[4]);
        if ((v5 & 0x800) != 0)
        {
          uint64_t v108 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v108 + 112))(v108, &v230, *(float *)&v10);
        }
        break;
      case 4:
        float32x4_t v109 = *(float32x4_t **)(a2 + 40);
        float32x4_t v110 = v109[1];
        float32x4_t v111 = v109[2];
        float32x4_t v112 = *(float32x4_t *)(a2 + 656);
        float32x4_t v113 = *(float32x4_t *)(a2 + 672);
        v112.i32[3] = 0;
        v113.i32[3] = 0;
        float32x4_t v114 = *(float32x4_t *)(a2 + 688);
        float32x4_t v115 = *(float32x4_t *)(a2 + 704);
        v114.i32[3] = 0;
        float32x4_t v116 = v109[3];
        float32x4_t v117 = v109[4];
        float32x4_t v118 = vmlaq_lane_f32(vmulq_n_f32(v112, v116.f32[0]), v113, *(float32x2_t *)v116.f32, 1);
        float32x4_t v119 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v112, v111.f32[0]), v113, *(float32x2_t *)v111.f32, 1), v114, v111, 2);
        int8x16_t v120 = (int8x16_t)vmulq_f32(v110, v115);
        int8x16_t v121 = (int8x16_t)vmulq_f32(v111, v115);
        int8x16_t v122 = (int8x16_t)vmulq_f32(v116, v115);
        v122.i32[3] = 0;
        float32x4_t v123 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v112, v110.f32[0]), v113, *(float32x2_t *)v110.f32, 1), v114, v110, 2);
        *(float32x2_t *)v110.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v121.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)));
        *(float32x2_t *)&v110.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v122.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)), 0);
        float32x4_t v230 = v123;
        float32x4_t v231 = v119;
        float32x4_t v232 = vmlaq_laneq_f32(v118, v114, v116, 2);
        float32x4_t v233 = vaddq_f32(v117, v110);
        if ((v5 & 0x800) != 0)
        {
          uint64_t v185 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v185 + 112))(v185, &v230, *(float *)&v10);
          float32x4_t v186 = *(float32x4_t *)(a2 + 720);
          float32x4_t v187 = *(float32x4_t *)(a2 + 736);
          v186.i32[3] = 0;
          v187.i32[3] = 0;
          float v188 = *(float32x4_t **)(a2 + 48);
          float32x4_t v189 = *(float32x4_t *)(a2 + 752);
          float32x4_t v190 = *(float32x4_t *)(a2 + 768);
          v189.i32[3] = 0;
          float32x4_t v191 = v188[1];
          float32x4_t v192 = v188[2];
          float32x4_t v193 = v188[3];
          float32x4_t v194 = vmlaq_lane_f32(vmulq_n_f32(v186, v193.f32[0]), v187, *(float32x2_t *)v193.f32, 1);
          float32x4_t v195 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v186, v192.f32[0]), v187, *(float32x2_t *)v192.f32, 1), v189, v192, 2);
          int8x16_t v196 = (int8x16_t)vmulq_f32(v191, v190);
          int8x16_t v197 = (int8x16_t)vmulq_f32(v193, v190);
          v197.i32[3] = 0;
          int8x16_t v198 = (int8x16_t)vmulq_f32(v192, v190);
          float32x4_t v199 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v186, v191.f32[0]), v187, *(float32x2_t *)v191.f32, 1), v189, v191, 2);
          *(float32x2_t *)v187.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v196.i8, *(float32x2_t *)v198.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL)));
          *(float32x2_t *)&v187.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v197.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v197, v197, 8uLL)), 0);
          float32x4_t v200 = vaddq_f32(v188[4], v187);
          float32x4_t v230 = v199;
          float32x4_t v231 = v195;
          float32x4_t v232 = vmlaq_laneq_f32(v194, v189, v193, 2);
          float32x4_t v233 = v200;
          uint64_t v201 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v201 + 112))(v201, &v230, *(float *)&v10);
        }
        else
        {
          float v124 = *(float32x4_t **)(a2 + 48);
          float32x4_t v125 = *(float32x4_t *)(a2 + 720);
          float32x4_t v126 = *(float32x4_t *)(a2 + 736);
          v125.i32[3] = 0;
          v126.i32[3] = 0;
          float32x4_t v127 = v124[1];
          float32x4_t v128 = v124[2];
          float32x4_t v129 = *(float32x4_t *)(a2 + 752);
          float32x4_t v130 = *(float32x4_t *)(a2 + 768);
          v129.i32[3] = 0;
          float32x4_t v131 = v124[3];
          float32x4_t v132 = v124[4];
          float32x4_t v133 = vmlaq_lane_f32(vmulq_n_f32(v125, v131.f32[0]), v126, *(float32x2_t *)v131.f32, 1);
          float32x4_t v134 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v125, v128.f32[0]), v126, *(float32x2_t *)v128.f32, 1), v129, v128, 2);
          int8x16_t v135 = (int8x16_t)vmulq_f32(v127, v130);
          int8x16_t v136 = (int8x16_t)vmulq_f32(v128, v130);
          int8x16_t v137 = (int8x16_t)vmulq_f32(v131, v130);
          v137.i32[3] = 0;
          float32x4_t v138 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v125, v127.f32[0]), v126, *(float32x2_t *)v127.f32, 1), v129, v127, 2);
          *(float32x2_t *)v126.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v135.i8, *(float32x2_t *)v136.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v135, v135, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL)));
          *(float32x2_t *)&v126.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v137.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL)), 0);
          float32x4_t v230 = v138;
          float32x4_t v231 = v134;
          float32x4_t v232 = vmlaq_laneq_f32(v133, v129, v131, 2);
          float32x4_t v233 = vaddq_f32(v132, v126);
        }
        int8x16_t v202 = (float *)(a2 + 792);
        sub_1B6E0203C(v202);
        float v204 = v203;
        sub_1B6E01FD4(v202);
        if (v204 != v205 && (v11 & 0x1000) != 0)
        {
          if (v204 <= v205)
          {
            float v206 = v205;
          }
          else
          {
            float v204 = 0.0;
            float v206 = 6.2832;
          }
          v229.i64[0] = __PAIR64__(v231.u32[2], v230.u32[2]);
          v229.i64[1] = v232.u32[2];
          v228.i64[0] = __PAIR64__(v231.u32[0], v230.u32[0]);
          v228.i64[1] = v232.u32[0];
          uint64_t v207 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          float32x4_t v227 = 0uLL;
          v208.n128_u32[0] = 10.0;
          v209.n128_u32[0] = v10;
          v210.n128_u32[0] = v10;
          v211.n128_f32[0] = v204;
          v212.n128_f32[0] = v206;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(void *)v207 + 120))(v209, v210, v211, v212, v208);
        }
        break;
      case 5:
        float32x4_t v41 = *(float32x4_t **)(a2 + 40);
        float32x4_t v42 = v41[1];
        float32x4_t v43 = v41[2];
        float32x4_t v44 = *(float32x4_t *)(a2 + 368);
        float32x4_t v45 = *(float32x4_t *)(a2 + 384);
        v44.i32[3] = 0;
        v45.i32[3] = 0;
        float32x4_t v46 = *(float32x4_t *)(a2 + 400);
        float32x4_t v47 = *(float32x4_t *)(a2 + 416);
        v46.i32[3] = 0;
        float32x4_t v48 = v41[3];
        float32x4_t v49 = v41[4];
        float32x4_t v50 = vmlaq_lane_f32(vmulq_n_f32(v44, v48.f32[0]), v45, *(float32x2_t *)v48.f32, 1);
        float32x4_t v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, v43.f32[0]), v45, *(float32x2_t *)v43.f32, 1), v46, v43, 2);
        int8x16_t v52 = (int8x16_t)vmulq_f32(v42, v47);
        int8x16_t v53 = (int8x16_t)vmulq_f32(v43, v47);
        int8x16_t v54 = (int8x16_t)vmulq_f32(v48, v47);
        v54.i32[3] = 0;
        float32x4_t v55 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, v42.f32[0]), v45, *(float32x2_t *)v42.f32, 1), v46, v42, 2);
        *(float32x2_t *)v42.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
        *(float32x2_t *)&v42.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
        float32x4_t v230 = v55;
        float32x4_t v231 = v51;
        float32x4_t v232 = vmlaq_laneq_f32(v50, v46, v48, 2);
        float32x4_t v233 = vaddq_f32(v49, v42);
        if ((v5 & 0x800) != 0)
        {
          uint64_t v139 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v139 + 112))(v139, &v230, *(float *)&v10);
          float32x4_t v140 = *(float32x4_t *)(a2 + 432);
          float32x4_t v141 = *(float32x4_t *)(a2 + 448);
          v140.i32[3] = 0;
          v141.i32[3] = 0;
          float v142 = *(float32x4_t **)(a2 + 48);
          float32x4_t v143 = *(float32x4_t *)(a2 + 464);
          float32x4_t v144 = *(float32x4_t *)(a2 + 480);
          v143.i32[3] = 0;
          float32x4_t v145 = v142[1];
          float32x4_t v146 = v142[2];
          float32x4_t v147 = v142[3];
          float32x4_t v148 = vmlaq_lane_f32(vmulq_n_f32(v140, v147.f32[0]), v141, *(float32x2_t *)v147.f32, 1);
          float32x4_t v149 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v140, v146.f32[0]), v141, *(float32x2_t *)v146.f32, 1), v143, v146, 2);
          int8x16_t v150 = (int8x16_t)vmulq_f32(v145, v144);
          int8x16_t v151 = (int8x16_t)vmulq_f32(v147, v144);
          v151.i32[3] = 0;
          int8x16_t v152 = (int8x16_t)vmulq_f32(v146, v144);
          float32x4_t v153 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v140, v145.f32[0]), v141, *(float32x2_t *)v145.f32, 1), v143, v145, 2);
          *(float32x2_t *)v141.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v150.i8, *(float32x2_t *)v152.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL)));
          *(float32x2_t *)&v141.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v151.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL)), 0);
          float32x4_t v154 = vaddq_f32(v142[4], v141);
          float32x4_t v230 = v153;
          float32x4_t v231 = v149;
          float32x4_t v232 = vmlaq_laneq_f32(v148, v143, v147, 2);
          float32x4_t v233 = v154;
          uint64_t v155 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v155 + 112))(v155, &v230, *(float *)&v10);
        }
        else
        {
          float32x4_t v56 = *(float32x4_t **)(a2 + 48);
          float32x4_t v57 = *(float32x4_t *)(a2 + 432);
          float32x4_t v58 = *(float32x4_t *)(a2 + 448);
          v57.i32[3] = 0;
          v58.i32[3] = 0;
          float32x4_t v59 = v56[1];
          float32x4_t v60 = v56[2];
          float32x4_t v61 = *(float32x4_t *)(a2 + 464);
          float32x4_t v62 = *(float32x4_t *)(a2 + 480);
          v61.i32[3] = 0;
          float32x4_t v63 = v56[3];
          float32x4_t v64 = v56[4];
          float32x4_t v65 = vmlaq_lane_f32(vmulq_n_f32(v57, v63.f32[0]), v58, *(float32x2_t *)v63.f32, 1);
          float32x4_t v66 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v60.f32[0]), v58, *(float32x2_t *)v60.f32, 1), v61, v60, 2);
          int8x16_t v67 = (int8x16_t)vmulq_f32(v59, v62);
          int8x16_t v68 = (int8x16_t)vmulq_f32(v60, v62);
          int8x16_t v69 = (int8x16_t)vmulq_f32(v63, v62);
          v69.i32[3] = 0;
          float32x4_t v70 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v59.f32[0]), v58, *(float32x2_t *)v59.f32, 1), v61, v59, 2);
          *(float32x2_t *)v58.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
          *(float32x2_t *)&v58.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), 0);
          float32x4_t v230 = v70;
          float32x4_t v231 = v66;
          float32x4_t v232 = vmlaq_laneq_f32(v65, v61, v63, 2);
          float32x4_t v233 = vaddq_f32(v64, v58);
        }
        if ((v11 & 0x1000) != 0)
        {
          float32x4_t v229 = (float32x4_t)xmmword_1B6E4F4B0;
          sub_1B6DF97C8(a2, (__n128 *)&v228, 6.0868, v10);
          int v156 = 0;
          float32x4_t v157 = vmulq_f32(v230, v228);
          int8x16_t v158 = (int8x16_t)vmulq_f32(v228, v231);
          int8x16_t v159 = (int8x16_t)vmulq_f32(v228, v232);
          v159.i32[3] = 0;
          *(float32x2_t *)v157.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v158.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)));
          *(float32x2_t *)&v157.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v159.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v159, v159, 8uLL)), 0);
          float32x4_t v228 = vaddq_f32(v157, v233);
          do
          {
            sub_1B6DF97C8(a2, (__n128 *)&v227, (float)((float)v156 * 6.2832) * 0.03125, v10);
            float32x4_t v160 = vmulq_f32(v230, v227);
            int8x16_t v161 = (int8x16_t)vmulq_f32(v227, v231);
            int8x16_t v162 = (int8x16_t)vmulq_f32(v227, v232);
            v162.i32[3] = 0;
            *(float32x2_t *)v160.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v161.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL)));
            *(float32x2_t *)&v160.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v162.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL)), 0);
            float32x4_t v227 = vaddq_f32(v160, v233);
            uint64_t v163 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
            (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v163 + 16))(v163, &v228, &v227, &v229);
            if ((v156 & 3) == 0)
            {
              uint64_t v164 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
              (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v164 + 16))(v164, &v233, &v227, &v229);
            }
            float32x4_t v228 = v227;
            ++v156;
          }
          while (v156 != 32);
          float v165 = *(float *)(a2 + 520);
          float v166 = *(float *)(a2 + 580);
          float v167 = *(float32x4_t **)(a2 + 48);
          if (v167[24].f32[0] <= 0.0)
          {
            float v167 = *(float32x4_t **)(a2 + 40);
            float32x4_t v169 = v167[1];
            float32x4_t v168 = v167[2];
            float32x4_t v170 = v167[3];
            float32x4_t v171 = *(float32x4_t *)(a2 + 368);
            float32x4_t v172 = *(float32x4_t *)(a2 + 384);
            v171.i32[3] = 0;
            v172.i32[3] = 0;
            float32x4_t v174 = *(float32x4_t *)(a2 + 400);
            float32x4_t v173 = *(float32x4_t *)(a2 + 416);
          }
          else
          {
            float32x4_t v169 = v167[1];
            float32x4_t v168 = v167[2];
            float32x4_t v170 = v167[3];
            float32x4_t v171 = *(float32x4_t *)(a2 + 432);
            float32x4_t v172 = *(float32x4_t *)(a2 + 448);
            v171.i32[3] = 0;
            v172.i32[3] = 0;
            float32x4_t v174 = *(float32x4_t *)(a2 + 464);
            float32x4_t v173 = *(float32x4_t *)(a2 + 480);
          }
          v174.i32[3] = 0;
          float32x4_t v213 = vmulq_f32(v169, v173);
          int8x16_t v214 = (int8x16_t)vmulq_f32(v168, v173);
          int8x16_t v215 = (int8x16_t)vmulq_f32(v170, v173);
          v215.i32[3] = 0;
          *(float32x2_t *)v213.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v214.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL)));
          *(float32x2_t *)&v213.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v215.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v215, v215, 8uLL)), 0);
          float32x4_t v216 = vaddq_f32(v167[4], v213);
          float32x4_t v230 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v169.f32[0]), v172, *(float32x2_t *)v169.f32, 1), v174, v169, 2);
          float32x4_t v231 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v168.f32[0]), v172, *(float32x2_t *)v168.f32, 1), v174, v168, 2);
          float32x4_t v232 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v171, v170.f32[0]), v172, *(float32x2_t *)v170.f32, 1), v174, v170, 2);
          float32x4_t v233 = v216;
          float32x4_t v227 = v216;
          *(int32x2_t *)v226.i8 = vzip1_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v231.f32);
          v226.i64[1] = v232.u32[0];
          *((void *)&v225 + 1) = v232.u32[1];
          *(int32x2_t *)&long long v225 = vzip2_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v231.f32);
          uint64_t v217 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          v220.n128_u32[0] = 10.0;
          v221.n128_u32[0] = v10;
          v222.n128_u32[0] = v10;
          v218.n128_f32[0] = (float)-v166 - v165;
          v219.n128_f32[0] = v165 - v166;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(void *)v217 + 120))(v221, v222, v218, v219, v220);
        }
        break;
      case 6:
      case 9:
        float32x4_t v12 = *(float32x4_t *)(a2 + 1216);
        float32x4_t v230 = *(float32x4_t *)(a2 + 1200);
        float32x4_t v231 = v12;
        float32x4_t v13 = *(float32x4_t *)(a2 + 1248);
        float32x4_t v232 = *(float32x4_t *)(a2 + 1232);
        float32x4_t v233 = v13;
        if ((v5 & 0x800) != 0)
        {
          uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v14 + 112))(v14, &v230, *(float *)&v10);
          float32x4_t v15 = *(float32x4_t *)(a2 + 1280);
          float32x4_t v230 = *(float32x4_t *)(a2 + 1264);
          float32x4_t v231 = v15;
          float32x4_t v16 = *(float32x4_t *)(a2 + 1312);
          float32x4_t v232 = *(float32x4_t *)(a2 + 1296);
          float32x4_t v233 = v16;
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v17 + 112))(v17, &v230, *(float *)&v10);
        }
        if ((v11 & 0x1000) != 0)
        {
          int8x16_t v18 = *(int8x16_t *)(a2 + 1216);
          float32x4_t v230 = *(float32x4_t *)(a2 + 1200);
          float32x4_t v231 = (float32x4_t)v18;
          float32x4_t v19 = *(float32x4_t *)(a2 + 1248);
          float32x4_t v232 = *(float32x4_t *)(a2 + 1232);
          float32x4_t v233 = v19;
          *(int32x2_t *)v229.f32 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
          v229.i64[1] = v232.u32[2];
          *(int32x2_t *)v228.f32 = vzip1_s32(*(int32x2_t *)v230.f32, *(int32x2_t *)v18.i8);
          v228.i64[1] = v232.u32[0];
          float v20 = *(float *)(a2 + 1056);
          float v21 = *(float *)(a2 + 1060);
          float v22 = *(float *)(a2 + 1120);
          float v23 = *(float *)(a2 + 1124);
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          float32x4_t v227 = 0uLL;
          float32x4_t v25 = (float32x4_t)((__n128 (*)(uint64_t, uint64_t, float32x4_t *, float32x4_t *, float32x4_t *, float, float, float, float, float, float))*(void *)(*(void *)v24 + 128))(v24, a2 + 1312, &v229, &v228, &v227, *(float *)&v10 * 0.9, v20, v21, v22, v23, 10.0);
          v25.i64[0] = __PAIR64__(v231.u32[1], v230.u32[1]);
          v25.i32[2] = v232.i32[1];
          float32x4_t v228 = v25;
          float v26 = sub_1B6DF9D48(a2, 1);
          float v27 = sub_1B6DF9D48(a2, 2);
          __float2 v28 = __sincosf_stret(v26);
          __float2 v29 = __sincosf_stret(v27);
          v227.f32[0] = (float)((float)((float)(v28.__cosval * v29.__sinval) * v228.f32[1])
                              + (float)((float)(v28.__cosval * v29.__cosval) * v228.f32[0]))
                      - (float)(v28.__sinval * v228.f32[2]);
          v227.f32[1] = (float)(v29.__cosval * v228.f32[1]) - (float)(v29.__sinval * v228.f32[0]);
          v227.f32[2] = (float)((float)((float)(v28.__sinval * v29.__sinval) * v228.f32[1])
                              + (float)((float)(v28.__sinval * v29.__cosval) * v228.f32[0]))
                      + (float)(v28.__cosval * v228.f32[2]);
          int8x16_t v31 = *(int8x16_t *)(a2 + 1280);
          float32x4_t v230 = *(float32x4_t *)(a2 + 1264);
          v30.i64[0] = __PAIR64__(v31.u32[0], v230.u32[0]);
          float32x4_t v231 = (float32x4_t)v31;
          float32x4_t v32 = *(float32x4_t *)(a2 + 1312);
          float32x4_t v232 = *(float32x4_t *)(a2 + 1296);
          float32x4_t v233 = v32;
          v30.i64[1] = v232.u32[0];
          v31.i64[0] = 0x8000000080000000;
          v31.i64[1] = 0x8000000080000000;
          int8x16_t v226 = veorq_s8(v30, v31);
          float v33 = *(float *)(a2 + 992);
          float v34 = *(float *)(a2 + 996);
          if (v33 <= v34)
          {
            if (v33 < v34)
            {
              uint64_t v175 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
              long long v225 = 0uLL;
              v176.n128_u32[0] = 10.0;
              v177.n128_u32[0] = v10;
              v178.n128_u32[0] = v10;
              v179.n128_f32[0] = v33;
              v180.n128_f32[0] = v34;
              (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(void *)v175 + 120))(v177, v178, v179, v180, v176);
            }
          }
          else
          {
            uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
            long long v225 = 0uLL;
            v36.n128_u32[0] = -1068953637;
            v37.n128_u32[0] = 1078530011;
            v38.n128_u32[0] = 10.0;
            v39.n128_u32[0] = v10;
            v40.n128_u32[0] = v10;
            (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(void *)v35 + 120))(v39, v40, v36, v37, v38);
          }
          float32x4_t v181 = *(float32x4_t *)(a2 + 1216);
          float32x4_t v230 = *(float32x4_t *)(a2 + 1200);
          float32x4_t v231 = v181;
          float32x4_t v182 = *(float32x4_t *)(a2 + 1248);
          float32x4_t v232 = *(float32x4_t *)(a2 + 1232);
          float32x4_t v233 = v182;
          long long v183 = *(_OWORD *)(a2 + 784);
          long long v224 = *(_OWORD *)(a2 + 800);
          long long v225 = v183;
          uint64_t v184 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          v223[0] = 0;
          v223[1] = 0;
          (*(void (**)(uint64_t, long long *, long long *, float32x4_t *, void *))(*(void *)v184 + 144))(v184, &v225, &v224, &v230, v223);
        }
        break;
      case 7:
        float32x4_t v71 = *(float32x4_t *)(a2 + 960);
        float32x4_t v230 = *(float32x4_t *)(a2 + 944);
        float32x4_t v231 = v71;
        float32x4_t v72 = *(float32x4_t *)(a2 + 992);
        float32x4_t v232 = *(float32x4_t *)(a2 + 976);
        float32x4_t v233 = v72;
        if ((v5 & 0x800) != 0)
        {
          uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v73 + 112))(v73, &v230, *(float *)&v10);
          float32x4_t v74 = *(float32x4_t *)(a2 + 1024);
          float32x4_t v230 = *(float32x4_t *)(a2 + 1008);
          float32x4_t v231 = v74;
          float32x4_t v75 = *(float32x4_t *)(a2 + 1056);
          float32x4_t v232 = *(float32x4_t *)(a2 + 1040);
          float32x4_t v233 = v75;
          uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          (*(void (**)(uint64_t, float32x4_t *, float))(*(void *)v76 + 112))(v76, &v230, *(float *)&v10);
        }
        if ((v11 & 0x1000) != 0)
        {
          float32x4_t v77 = (float32x4_t *)(a2 + 944);
          uint64_t v78 = 944;
          if (!*(unsigned char *)(a2 + 208))
          {
            uint64_t v78 = 1008;
            float32x4_t v77 = (float32x4_t *)(a2 + 1008);
          }
          float32x4_t v79 = v77[1];
          float32x4_t v80 = v77[2];
          float32x4_t v230 = *(float32x4_t *)(a2 + v78);
          float32x4_t v231 = v79;
          v8.i32[0] = *(_DWORD *)(a2 + 212);
          v9.i32[0] = *(_DWORD *)(a2 + 216);
          float32x4_t v81 = vmulq_f32(v230, v8);
          int8x16_t v82 = (int8x16_t)vmulq_f32(v79, v8);
          float32x4_t v83 = v77[3];
          int8x16_t v84 = (int8x16_t)vmulq_f32(v80, v8);
          v84.i32[3] = 0;
          *(float32x2_t *)v81.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v82.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)));
          *(float32x2_t *)&v81.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v84.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)), 0);
          float32x4_t v232 = v80;
          float32x4_t v233 = v83;
          float32x4_t v85 = vmulq_f32(v230, v9);
          int8x16_t v86 = (int8x16_t)vmulq_f32(v79, v9);
          int8x16_t v87 = (int8x16_t)vmulq_f32(v80, v9);
          v87.i32[3] = 0;
          *(float32x2_t *)v85.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v86.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)));
          *(float32x2_t *)&v85.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)), 0);
          float32x4_t v228 = vaddq_f32(v83, v85);
          float32x4_t v229 = vaddq_f32(v83, v81);
          uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          float32x4_t v227 = 0uLL;
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v88 + 16))(v88, &v229, &v228, &v227);
          v227.i64[0] = __PAIR64__(v231.u32[0], v230.u32[0]);
          v227.i64[1] = v232.u32[0];
          v226.i64[0] = __PAIR64__(v231.u32[1], v230.u32[1]);
          v226.i64[1] = v232.u32[1];
          unsigned __int32 v89 = *(_DWORD *)(a2 + 220);
          unsigned __int32 v90 = *(_DWORD *)(a2 + 224);
          uint64_t v91 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          long long v225 = 0uLL;
          v92.n128_u32[0] = 10.0;
          v93.n128_u32[0] = v10;
          v94.n128_u32[0] = v10;
          v95.n128_u32[0] = v89;
          v96.n128_u32[0] = v90;
          (*(void (**)(__n128, __n128, __n128, __n128, __n128))(*(void *)v91 + 120))(v93, v94, v95, v96, v92);
        }
        break;
      default:
        return;
    }
  }
}

uint64_t sub_1B6E03898(uint64_t result)
{
  if (*(int *)(result + 324) >= 1)
  {
    uint64_t v1 = 0;
    do
    {
      uint64_t v2 = *(void *)(*(void *)(result + 336) + 8 * v1);
      *(_OWORD *)(v2 + 464) = 0uLL;
      *(_OWORD *)(v2 + 480) = 0uLL;
      ++v1;
    }
    while (v1 < *(int *)(result + 324));
  }
  return result;
}

void sub_1B6E038CC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 324);
  if (v1 >= 1)
  {
    for (uint64_t i = 0; i < v1; ++i)
    {
      uint64_t v4 = *(float32x4_t **)(*(void *)(a1 + 336) + 8 * i);
      __int32 v5 = v4[15].i32[1];
      if (v5 != 2 && v5 != 5)
      {
        sub_1B6E06B04(v4);
        int v1 = *(_DWORD *)(a1 + 324);
      }
    }
  }
}

uint64_t sub_1B6E03928(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 536))
  {
    if ((*(unsigned char *)(a2 + 232) & 3) == 0)
    {
      sub_1B6DEF658((float32x4_t *)(a2 + 80), (float32x4_t *)(a2 + 144), (float32x4_t *)(a2 + 160), v3, *(float *)(result + 368) * *(float *)(a2 + 280));
      return (*(uint64_t (**)(void, float32x4_t *))(**(void **)(a2 + 536) + 24))(*(void *)(a2 + 536), v3);
    }
  }
  return result;
}

uint64_t sub_1B6E039B4(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 374))
  {
    int v2 = *(_DWORD *)(result + 12);
    if (v2 >= 1)
    {
      for (uint64_t i = 0; i < v2; ++i)
      {
        uint64_t v4 = *(void *)(*(void *)(v1 + 24) + 8 * i);
        if (v4) {
          BOOL v5 = (*(_DWORD *)(v4 + 264) & 2) == 0;
        }
        else {
          BOOL v5 = 1;
        }
        if (!v5)
        {
          uint64_t result = sub_1B6E03928(v1, v4);
          int v2 = *(_DWORD *)(v1 + 12);
        }
      }
    }
  }
  else
  {
    int v6 = *(_DWORD *)(result + 324);
    if (v6 >= 1)
    {
      for (uint64_t j = 0; j < v6; ++j)
      {
        uint64_t v8 = *(void *)(*(void *)(v1 + 336) + 8 * j);
        int v9 = *(_DWORD *)(v8 + 244);
        if (v9 != 2 && v9 != 5)
        {
          *(unsigned char *)(v1 + 448) = 1;
          uint64_t result = sub_1B6E03928(v1, v8);
          int v6 = *(_DWORD *)(v1 + 324);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B6E03A74(uint64_t a1, int a2, float a3, float a4)
{
  *(unsigned char *)(a1 + 448) = 0;
  if (a2)
  {
    float v5 = a4;
    int v6 = a2;
    float v7 = *(float *)(a1 + 368) + a3;
    *(float *)(a1 + 368) = v7;
    if (v7 >= a4)
    {
      uint64_t v8 = (int)(float)(v7 / a4);
      *(float *)(a1 + 368) = v7 - (float)((float)(int)(float)(v7 / a4) * a4);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    *(float *)(a1 + 368) = a3;
    float v9 = fabsf(a3);
    uint64_t v8 = v9 >= 0.00000011921;
    float v5 = a3;
    int v6 = v9 >= 0.00000011921;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    byte_1E9E49970 = ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10) & 0x10) != 0;
  }
  if (v8)
  {
    if ((int)v8 < v6) {
      int v6 = v8;
    }
    (*(void (**)(uint64_t, float))(*(void *)a1 + 320))(a1, v5 * (float)v6);
    (*(void (**)(uint64_t))(*(void *)a1 + 344))(a1);
    if (v6 >= 1)
    {
      do
      {
        (*(void (**)(uint64_t, float))(*(void *)a1 + 312))(a1, v5);
        (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 240))(a1);
  return v8;
}

uint64_t sub_1B6E03CD4(uint64_t a1, __n128 a2)
{
  float v2 = a2.n128_f32[0];
  uint64_t v4 = *(void (**)(uint64_t, __n128))(a1 + 128);
  if (v4) {
    v4(a1, a2);
  }
  (*(void (**)(uint64_t, float))(*(void *)a1 + 280))(a1, v2);
  *(float *)(a1 + 48) = v2;
  *(_DWORD *)(a1 + 5sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_1B6E03EB8(a1, v2);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 296))(a1);
  *(float *)(a1 + 156) = v2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 304))(a1, a1 + 144);
  (*(void (**)(uint64_t, float))(*(void *)a1 + 288))(a1, v2);
  sub_1B6E043F8(a1, v2);
  uint64_t result = sub_1B6E04478(a1, v2);
  float v7 = *(uint64_t (**)(uint64_t, __n128))(a1 + 120);
  if (v7)
  {
    v6.n128_f32[0] = v2;
    return v7(a1, v6);
  }
  return result;
}

void sub_1B6E03EB8(uint64_t a1, float a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a1 + 420) >= 1)
  {
    uint64_t v4 = 0;
    do
      (*(void (**)(void, void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 432) + 8 * v4++));
    while (v4 < *(int *)(a1 + 420));
  }
  float v5 = (void *)(a1 + 420);
  uint64_t v6 = *(void *)(a1 + 432);
  if (v6 && *(unsigned char *)(a1 + 440)) {
    sub_1B6E073C4(v6);
  }
  *(unsigned char *)(a1 + 440) = 1;
  *(void *)(a1 + 43sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *float v5 = 0;
  if (*(int *)(a1 + 324) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = &qword_1E9E49000;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 336) + 8 * v7);
      *(_DWORD *)(v9 + 280) = 1065353216;
      int v10 = *(_DWORD *)(v9 + 244);
      if (v10 != 2 && v10 != 5 && (*(unsigned char *)(v9 + 232) & 3) == 0)
      {
        sub_1B6E06848((float32x4_t *)v9, v64, a2);
        if (*(unsigned char *)(a1 + 64))
        {
          float v12 = *(float *)(v9 + 288) * *(float *)(v9 + 288);
          if (v12 != 0.0)
          {
            float32x4_t v13 = vsubq_f32(v65, *(float32x4_t *)(v9 + 64));
            v13.i32[3] = 0;
            int8x16_t v14 = (int8x16_t)vmulq_f32(v13, v13);
            if (v12 < vadd_f32(vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0]&& *(int *)(*(void *)(v9 + 208) + 8) <= 19)
            {
              ++*((_DWORD *)v8 + 603);
              uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
              uint64_t v16 = *(void *)(a1 + 40);
              float v71 = 1.0;
              long long v72 = xmmword_1B6E50980;
              uint64_t v73 = 0;
              long long v74 = *(_OWORD *)(v9 + 64);
              float32x4_t v75 = v65;
              uint64_t v77 = 0;
              float32x4_t v70 = &unk_1F0FB2800;
              uint64_t v78 = v9;
              int v79 = 0;
              uint64_t v80 = v15;
              uint64_t v81 = v16;
              int v17 = *(_DWORD *)(v9 + 284);
              sub_1B6DE65E4((uint64_t)&v66);
              float32x4_t v66 = &unk_1F0FB07C0;
              int v67 = 8;
              int v68 = v17;
              int v69 = v17;
              int v79 = *(_DWORD *)(a1 + 84);
              uint64_t v18 = *(void *)(v9 + 200);
              long long v72 = *(_OWORD *)(v18 + 8);
              uint64_t v73 = *(void *)(v18 + 24);
              float32x4_t v61 = v64[1];
              float32x4_t v62 = v64[2];
              float32x4_t v63 = v65;
              float32x4_t v19 = *(float32x4_t *)(v9 + 32);
              long long v60 = *(_OWORD *)(v9 + 16);
              float32x4_t v61 = v19;
              float32x4_t v62 = *(float32x4_t *)(v9 + 48);
              sub_1B6DD470C(a1, (uint64_t)&v66, v9 + 16, (uint64_t)&v60, (uint64_t)&v70, 0.0);
              if (v71 < 1.0)
              {
                float v48 = v71;
                float32x4_t v45 = *(float32x4_t *)(v9 + 64);
                float32x4_t v46 = v65;
                int8x16_t v47 = v76;
                float v20 = (float32x4_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), v9, v77);
                int v21 = *(_DWORD *)(a1 + 420);
                if (v21 == *(_DWORD *)(a1 + 424))
                {
                  int v22 = v21 ? 2 * v21 : 1;
                  if (v21 < v22)
                  {
                    if (v22)
                    {
                      uint64_t v23 = sub_1B6E073B8(8 * v22, 16);
                      int v21 = *(_DWORD *)v5;
                    }
                    else
                    {
                      uint64_t v23 = 0;
                    }
                    if (v21 >= 1)
                    {
                      uint64_t v24 = 0;
                      do
                      {
                        *(void *)(v23 + v24) = *(void *)(*(void *)(a1 + 432) + v24);
                        v24 += 8;
                      }
                      while (8 * v21 != v24);
                    }
                    uint64_t v25 = *(void *)(a1 + 432);
                    if (v25)
                    {
                      if (*(unsigned char *)(a1 + 440))
                      {
                        sub_1B6E073C4(v25);
                        int v21 = *(_DWORD *)v5;
                      }
                    }
                    *(unsigned char *)(a1 + 440) = 1;
                    *(void *)(a1 + 43sub_1B6DC4968((unsigned int *)this + 2) = v23;
                    *(_DWORD *)(a1 + 424) = v22;
                    uint64_t v8 = &qword_1E9E49000;
                  }
                }
                float32x4_t v26 = vmulq_n_f32(vsubq_f32(v46, v45), v48);
                v26.i32[3] = 0;
                v27.i64[0] = 0x8000000080000000;
                v27.i64[1] = 0x8000000080000000;
                *(void *)(*(void *)(a1 + 432) + 8 * v21) = v20;
                *(_DWORD *)(a1 + 420) = v21 + 1;
                float32x4_t v28 = *(float32x4_t *)(v77 + 16);
                int32x4_t v29 = *(int32x4_t *)(v77 + 32);
                int8x16_t v30 = *(int8x16_t *)(v77 + 48);
                float32x4_t v31 = (float32x4_t)vtrn1q_s32((int32x4_t)v28, v29);
                int32x2_t v32 = vzip2_s32(*(int32x2_t *)v30.i8, 0);
                unsigned __int32 v33 = vextq_s8(v30, v30, 8uLL).u32[0];
                v34.i64[0] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
                v31.i64[1] = v30.u32[0];
                float32x4_t v35 = (float32x4_t)veorq_s8(*(int8x16_t *)(v77 + 64), v27);
                *(int32x2_t *)v28.f32 = vzip2_s32(*(int32x2_t *)v28.f32, *(int32x2_t *)v29.i8);
                *(int32x2_t *)&v28.u32[2] = v32;
                int8x16_t v36 = (int8x16_t)vmulq_f32(v31, v35);
                int8x16_t v37 = (int8x16_t)vmulq_f32(v28, v35);
                v34.i64[1] = v33;
                *(float32x2_t *)v36.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v37.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL)));
                int8x16_t v38 = (int8x16_t)vmulq_f32(v34, v35);
                v38.i32[3] = 0;
                float32x4_t v49 = vaddq_f32(*(float32x4_t *)(v9 + 64), v26);
                int8x16_t v39 = (int8x16_t)vmulq_f32(v49, v31);
                int8x16_t v40 = (int8x16_t)vmulq_f32(v49, v28);
                int8x16_t v41 = (int8x16_t)vmulq_f32(v49, v34);
                v41.i32[3] = 0;
                *(float32x2_t *)v40.i8 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL))), *(float32x2_t *)v36.i8);
                v40.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0));
                int8x16_t v42 = (int8x16_t)vmulq_f32((float32x4_t)veorq_s8(v47, v27), v26);
                v50[0] = 0;
                v50[1] = 0;
                int8x16_t v51 = v40;
                int8x16_t v52 = v76;
                unsigned __int32 v53 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)).u32[0];
                uint64_t v54 = 0;
                int v55 = 0;
                uint64_t v56 = 0;
                char v57 = 0;
                long long v58 = 0u;
                long long v59 = 0u;
                float32x4_t v43 = &v20[12 * (int)sub_1B6DF3BE8(v20, (uint64_t)v50)];
                v43[6].i32[3] = 0;
                v43[6].f32[1] = sub_1B6DDFA28(v9, v77);
                float32x4_t v44 = *(float32x4_t *)(v9 + 64);
                v43[3] = v49;
                v43[4] = v44;
              }
              nullsub_1(&v66);
            }
          }
        }
      }
      ++v7;
    }
    while (v7 < *(int *)(a1 + 324));
  }
}

uint64_t sub_1B6E043F8(uint64_t result, float a2)
{
  if (*(int *)(result + 380) >= 1)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v3 + 392) + 8 * v4);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v5 + 16))(v5, v3, a2);
      ++v4;
    }
    while (v4 < *(int *)(v3 + 380));
  }
  return result;
}

uint64_t sub_1B6E04478(uint64_t result, float a2)
{
  if (*(int *)(result + 324) >= 1)
  {
    uint64_t v3 = result;
    for (uint64_t i = 0; i < *(int *)(v3 + 324); ++i)
    {
      uint64_t v5 = *(float32x4_t **)(*(void *)(v3 + 336) + 8 * i);
      if (v5)
      {
        __int32 v6 = v5[15].i32[1];
        if (v6 != 2)
        {
          if (v6 == 4) {
            continue;
          }
          int8x16_t v7 = (int8x16_t)vmulq_f32(v5[22], v5[22]);
          if (vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)).f32[0] >= (float)(v5[32].f32[3] * v5[32].f32[3])|| (int8x16_t v8 = (int8x16_t)vmulq_f32(v5[23], v5[23]), vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v8.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)).f32[0] >= (float)(v5[33].f32[0] * v5[33].f32[0])))
          {
            v5[15].i32[2] = 0;
            uint64_t result = sub_1B6DD24CC((uint64_t)v5, 0);
            __int32 v6 = v5[15].i32[1];
            if (v6 == 4) {
              continue;
            }
          }
          else
          {
            v5[15].f32[2] = v5[15].f32[2] + a2;
          }
        }
        if (byte_1E9E49970
          || *(float *)&dword_1E9DDA46C == 0.0
          || (v6 & 0xFFFFFFFE) != 2 && v5[15].f32[2] <= *(float *)&dword_1E9DDA46C)
        {
          uint64_t v9 = (uint64_t)v5;
          int v10 = 1;
        }
        else
        {
          if ((v5[14].i8[8] & 3) == 0)
          {
            if (v6 == 1)
            {
              uint64_t result = sub_1B6DD24CC((uint64_t)v5, 3);
              __int32 v6 = v5[15].i32[1];
            }
            if (v6 == 2)
            {
              v5[22] = 0u;
              v5[23] = 0u;
            }
            continue;
          }
          uint64_t v9 = (uint64_t)v5;
          int v10 = 2;
        }
        uint64_t result = sub_1B6DD24CC(v9, v10);
      }
    }
  }
  return result;
}

void sub_1B6E045F8(float32x4_t *a1, float32x4_t *a2)
{
  a1[22] = *a2;
  int v2 = a1[20].i32[1];
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      __int32 v6 = *(float32x4_t **)(a1[21].i64[0] + 8 * i);
      __int32 v7 = v6[15].i32[1];
      BOOL v8 = v7 == 2 || v7 == 5;
      if (!v8 && (v6[36].i8[0] & 1) == 0)
      {
        sub_1B6E06940(v6, a2);
        int v2 = a1[20].i32[1];
      }
    }
  }
}

__n128 sub_1B6E0467C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[22];
  *a2 = result;
  return result;
}

uint64_t sub_1B6E0468C(uint64_t a1, uint64_t a2)
{
  if (a2 && (*(_DWORD *)(a2 + 264) & 2) != 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
  }
  else {
    return sub_1B6DD2FD0(a1, a2);
  }
}

uint64_t sub_1B6E046C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  sub_1B6DD30A4(a1 + 320, &v4);
  return sub_1B6DD2FD0(a1, v4);
}

void sub_1B6E04704(float32x4_t *a1, float32x4_t *a2)
{
  if ((a2[14].i8[8] & 3) == 0 && (a2[36].i8[0] & 1) == 0) {
    sub_1B6E06940(a2, a1 + 22);
  }
  if (a2[13].i64[0])
  {
    if (a2[14].i8[8])
    {
      sub_1B6DD24CC((uint64_t)a2, 2);
    }
    else
    {
      int v4 = a1[20].i32[1];
      if (v4 == a1[20].i32[2])
      {
        int v5 = v4 ? 2 * v4 : 1;
        if (v4 < v5)
        {
          if (v5)
          {
            uint64_t v6 = sub_1B6E073B8(8 * v5, 16);
            int v4 = a1[20].i32[1];
          }
          else
          {
            uint64_t v6 = 0;
          }
          if (v4 >= 1)
          {
            uint64_t v7 = 0;
            do
            {
              *(void *)(v6 + v7) = *(void *)(a1[21].i64[0] + v7);
              v7 += 8;
            }
            while (8 * v4 != v7);
          }
          uint64_t v8 = a1[21].i64[0];
          if (v8 && a1[21].i8[8])
          {
            sub_1B6E073C4(v8);
            int v4 = a1[20].i32[1];
          }
          a1[21].i8[8] = 1;
          a1[21].i64[0] = v6;
          a1[20].i32[2] = v5;
        }
      }
      *(void *)(a1[21].i64[0] + 8 * v4) = a2;
      a1[20].i32[1] = v4 + 1;
    }
    if ((a2[14].i32[2] & 3) != 0) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = 1;
    }
    if ((a2[14].i32[2] & 3) != 0) {
      uint64_t v10 = -3;
    }
    else {
      uint64_t v10 = -1;
    }
    __int16 v11 = *(void (**)(float32x4_t *, float32x4_t *, uint64_t, uint64_t, void))(a1->i64[0] + 72);
    v11(a1, a2, v9, v10, 0);
  }
}

void sub_1B6E04878(float32x4_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a2[14].i8[8] & 3) == 0 && (a2[36].i8[0] & 1) == 0) {
    sub_1B6E06940(a2, a1 + 22);
  }
  if (a2[13].i64[0])
  {
    if (a2[14].i8[8])
    {
      sub_1B6DD24CC((uint64_t)a2, 2);
    }
    else
    {
      int v10 = a1[20].i32[1];
      if (v10 == a1[20].i32[2])
      {
        int v11 = v10 ? 2 * v10 : 1;
        if (v10 < v11)
        {
          if (v11)
          {
            uint64_t v12 = sub_1B6E073B8(8 * v11, 16);
            int v10 = a1[20].i32[1];
          }
          else
          {
            uint64_t v12 = 0;
          }
          if (v10 >= 1)
          {
            uint64_t v13 = 0;
            do
            {
              *(void *)(v12 + v13) = *(void *)(a1[21].i64[0] + v13);
              v13 += 8;
            }
            while (8 * v10 != v13);
          }
          uint64_t v14 = a1[21].i64[0];
          if (v14 && a1[21].i8[8])
          {
            sub_1B6E073C4(v14);
            int v10 = a1[20].i32[1];
          }
          a1[21].i8[8] = 1;
          a1[21].i64[0] = v12;
          a1[20].i32[2] = v11;
        }
      }
      *(void *)(a1[21].i64[0] + 8 * v10) = a2;
      a1[20].i32[1] = v10 + 1;
    }
    uint64_t v15 = *(void (**)(float32x4_t *, float32x4_t *, uint64_t, uint64_t, uint64_t))(a1->i64[0] + 72);
    v15(a1, a2, a3, a4, a5);
  }
}

uint64_t sub_1B6E04A00(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 324);
  if (v1 >= 1)
  {
    uint64_t v2 = result;
    for (uint64_t i = 0; i < v1; ++i)
    {
      __n128 result = *(void *)(*(void *)(v2 + 336) + 8 * i);
      if (result)
      {
        __n128 result = sub_1B6DD24EC(result, 0);
        int v1 = *(_DWORD *)(v2 + 324);
      }
    }
  }
  return result;
}

void sub_1B6E04A54(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 292);
  if (v6 == *(_DWORD *)(a1 + 296))
  {
    int v7 = v6 ? 2 * v6 : 1;
    if (v6 < v7)
    {
      if (v7)
      {
        uint64_t v8 = sub_1B6E073B8(8 * v7, 16);
        int v6 = *(_DWORD *)(a1 + 292);
      }
      else
      {
        uint64_t v8 = 0;
      }
      if (v6 >= 1)
      {
        uint64_t v9 = 0;
        do
        {
          *(void *)(v8 + v9) = *(void *)(*(void *)(a1 + 304) + v9);
          v9 += 8;
        }
        while (8 * v6 != v9);
      }
      uint64_t v10 = *(void *)(a1 + 304);
      if (v10 && *(unsigned char *)(a1 + 312))
      {
        sub_1B6E073C4(v10);
        int v6 = *(_DWORD *)(a1 + 292);
      }
      *(unsigned char *)(a1 + 31sub_1B6DC4968((unsigned int *)this + 2) = 1;
      *(void *)(a1 + 304) = v8;
      *(_DWORD *)(a1 + 296) = v7;
    }
  }
  *(void *)(*(void *)(a1 + 304) + 8 * v6) = a2;
  *(_DWORD *)(a1 + 29sub_1B6DC4968((unsigned int *)this + 2) = v6 + 1;
  if (a3)
  {
    sub_1B6E06D20(*(void *)(a2 + 40), a2);
    uint64_t v11 = *(void *)(a2 + 48);
    sub_1B6E06D20(v11, a2);
  }
}

uint64_t sub_1B6E04B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  sub_1B6DD30A4(a1 + 288, &v3);
  sub_1B6E06E2C(*(void *)(v3 + 40), v3);
  return sub_1B6E06E2C(*(void *)(v3 + 48), v3);
}

void sub_1B6E04BB0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 380);
  if (v4 == *(_DWORD *)(a1 + 384))
  {
    int v5 = v4 ? 2 * v4 : 1;
    if (v4 < v5)
    {
      if (v5)
      {
        uint64_t v6 = sub_1B6E073B8(8 * v5, 16);
        int v4 = *(_DWORD *)(a1 + 380);
      }
      else
      {
        uint64_t v6 = 0;
      }
      if (v4 >= 1)
      {
        uint64_t v7 = 0;
        do
        {
          *(void *)(v6 + v7) = *(void *)(*(void *)(a1 + 392) + v7);
          v7 += 8;
        }
        while (8 * v4 != v7);
      }
      uint64_t v8 = *(void *)(a1 + 392);
      if (v8 && *(unsigned char *)(a1 + 400))
      {
        sub_1B6E073C4(v8);
        int v4 = *(_DWORD *)(a1 + 380);
      }
      *(unsigned char *)(a1 + 400) = 1;
      *(void *)(a1 + 39sub_1B6DC4968((unsigned int *)this + 2) = v6;
      *(_DWORD *)(a1 + 384) = v5;
    }
  }
  *(void *)(*(void *)(a1 + 392) + 8 * v4) = a2;
  *(_DWORD *)(a1 + 380) = v4 + 1;
}

uint64_t sub_1B6E04C80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return sub_1B6DD30A4(a1 + 376, &v3);
}

uint64_t sub_1B6E04CAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 380);
}

uint64_t sub_1B6E04CB4(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 392) + 8 * a2);
}

uint64_t sub_1B6E04CC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t sub_1B6E04CE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t sub_1B6E04D08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t sub_1B6E04D2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t sub_1B6E04D50(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 292);
  int v5 = *(_DWORD *)(a1 + 236);
  if (v5 < v4)
  {
    uint64_t v6 = v5;
    if (*(_DWORD *)(a1 + 240) < v4)
    {
      if (v4)
      {
        uint64_t v7 = sub_1B6E073B8(8 * v4, 16);
        int v5 = *(_DWORD *)(a1 + 236);
      }
      else
      {
        uint64_t v7 = 0;
      }
      if (v5 >= 1)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 8 * v5;
        do
        {
          *(void *)(v7 + v8) = *(void *)(*(void *)(a1 + 248) + v8);
          v8 += 8;
        }
        while (v9 != v8);
      }
      uint64_t v10 = *(void *)(a1 + 248);
      if (v10 && *(unsigned char *)(a1 + 256)) {
        sub_1B6E073C4(v10);
      }
      *(unsigned char *)(a1 + 256) = 1;
      *(void *)(a1 + 248) = v7;
      *(_DWORD *)(a1 + 240) = v4;
    }
    do
      *(void *)(*(void *)(a1 + 248) + 8 * v6++) = 0;
    while (v4 != v6);
  }
  *(_DWORD *)(a1 + 236) = v4;
  if ((*(int (**)(uint64_t))(*(void *)a1 + 208))(a1) >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      *(void *)(*(void *)(a1 + 248) + 8 * v11) = *(void *)(*(void *)(a1 + 304) + 8 * v11);
      ++v11;
    }
    while (v11 < (*(int (**)(uint64_t))(*(void *)a1 + 208))(a1));
  }
  int v12 = *(_DWORD *)(a1 + 236);
  if (v12 > 1) {
    sub_1B6E06314(a1 + 232, (uint64_t)&v27, 0, v12 - 1);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 208))(a1)) {
    uint64_t v13 = *(void *)(a1 + 248);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 264);
  int v15 = *(_DWORD *)(a1 + 236);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  *(void *)(v14 + 8) = a2;
  *(void *)(v14 + 24) = v13;
  *(_DWORD *)(v14 + 3sub_1B6DC4968((unsigned int *)this + 2) = v15;
  *(void *)(v14 + 40) = v16;
  uint64_t v17 = *(int *)(v14 + 60);
  if ((v17 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 64) & 0x80000000) != 0)
    {
      uint64_t v18 = *(void *)(v14 + 72);
      if (v18 && *(unsigned char *)(v14 + 80)) {
        sub_1B6E073C4(v18);
      }
      *(unsigned char *)(v14 + 80) = 1;
      *(void *)(v14 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
      *(_DWORD *)(v14 + 64) = 0;
    }
    do
      *(void *)(*(void *)(v14 + 72) + 8 * v17++) = 0;
    while (v17);
  }
  *(_DWORD *)(v14 + 60) = 0;
  uint64_t v19 = *(int *)(v14 + 92);
  if ((v19 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 96) & 0x80000000) != 0)
    {
      uint64_t v20 = *(void *)(v14 + 104);
      if (v20 && *(unsigned char *)(v14 + 112)) {
        sub_1B6E073C4(v20);
      }
      *(unsigned char *)(v14 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
      *(void *)(v14 + 104) = 0;
      *(_DWORD *)(v14 + 96) = 0;
    }
    do
      *(void *)(*(void *)(v14 + 104) + 8 * v19++) = 0;
    while (v19);
  }
  *(_DWORD *)(v14 + 9sub_1B6DC4968((unsigned int *)this + 2) = 0;
  uint64_t v21 = *(int *)(v14 + 124);
  if ((v21 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(v14 + 128) & 0x80000000) != 0)
    {
      uint64_t v22 = *(void *)(v14 + 136);
      if (v22 && *(unsigned char *)(v14 + 144)) {
        sub_1B6E073C4(v22);
      }
      *(unsigned char *)(v14 + 144) = 1;
      *(void *)(v14 + 136) = 0;
      *(_DWORD *)(v14 + sub_1B6DC7B98((uint64_t)this + 128) = 0;
    }
    do
      *(void *)(*(void *)(v14 + 136) + 8 * v21++) = 0;
    while (v21);
  }
  *(_DWORD *)(v14 + 124) = 0;
  uint64_t v23 = *(void *)(a1 + 272);
  uint64_t v24 = *(unsigned int *)(a1 + 12);
  uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 72))(*(void *)(a1 + 40));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v24, v25);
  sub_1B6DE06C4(*(void *)(a1 + 280), *(void *)(a1 + 40), a1, *(void *)(a1 + 264));
  sub_1B6E050C4(*(void *)(a1 + 264));
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 272) + 32))(*(void *)(a1 + 272), a2, *(void *)(a1 + 104));
}

void sub_1B6E050C4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 60)) {
    uint64_t v2 = *(void *)(a1 + 72);
  }
  else {
    uint64_t v2 = 0;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), v2);
  uint64_t v3 = *(int *)(a1 + 60);
  if ((v3 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 72);
      if (v4 && *(unsigned char *)(a1 + 80)) {
        sub_1B6E073C4(v4);
      }
      *(unsigned char *)(a1 + 80) = 1;
      *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
      *(_DWORD *)(a1 + 64) = 0;
    }
    do
      *(void *)(*(void *)(a1 + 72) + 8 * v3++) = 0;
    while (v3);
  }
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v5 = *(int *)(a1 + 92);
  if ((v5 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 96) & 0x80000000) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 104);
      if (v6 && *(unsigned char *)(a1 + 112)) {
        sub_1B6E073C4(v6);
      }
      *(unsigned char *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
      *(void *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 96) = 0;
    }
    do
      *(void *)(*(void *)(a1 + 104) + 8 * v5++) = 0;
    while (v5);
  }
  *(_DWORD *)(a1 + 9sub_1B6DC4968((unsigned int *)this + 2) = 0;
  uint64_t v7 = *(int *)(a1 + 124);
  if ((v7 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 128) & 0x80000000) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 136);
      if (v8 && *(unsigned char *)(a1 + 144)) {
        sub_1B6E073C4(v8);
      }
      *(unsigned char *)(a1 + 144) = 1;
      *(void *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = 0;
    }
    do
      *(void *)(*(void *)(a1 + 136) + 8 * v7++) = 0;
    while (v7);
  }
  *(_DWORD *)(a1 + 124) = 0;
}

uint64_t sub_1B6E05230(uint64_t a1)
{
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 280) + 16))(*(void *)(a1 + 280), a1, *(void *)(a1 + 40));
  int v2 = *(_DWORD *)(a1 + 420);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 432) + 8 * i);
      uint64_t v5 = *(void *)(v4 + 784);
      if (v5)
      {
        uint64_t v6 = *(void *)(v4 + 792);
        BOOL v7 = (*(unsigned char *)(v5 + 232) & 3) != 0 || v6 == 0;
        if (!v7 && (*(unsigned char *)(v6 + 232) & 3) == 0)
        {
          int v8 = *(_DWORD *)(v5 + 244);
          BOOL v9 = v8 == 5 || v8 == 2;
          if (!v9 || ((int v10 = *(_DWORD *)(v6 + 244), v10 != 2) ? (v11 = v10 == 5) : (v11 = 1), !v11))
          {
            sub_1B6DE0170(*(void *)(a1 + 280) + 8, *(unsigned int *)(v5 + 236), *(unsigned int *)(v6 + 236));
            int v2 = *(_DWORD *)(a1 + 420);
          }
        }
      }
    }
  }
  uint64_t v12 = *(unsigned int *)(a1 + 292);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 8 * v12;
    do
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 304) + v13);
      if (*(unsigned char *)(v15 + 28))
      {
        uint64_t v16 = *(void *)(v15 + 40);
        if ((*(unsigned char *)(v16 + 232) & 3) == 0)
        {
          uint64_t v17 = *(void *)(v15 + 48);
          if ((*(unsigned char *)(v17 + 232) & 3) == 0)
          {
            int v18 = *(_DWORD *)(v16 + 244);
            BOOL v19 = v18 == 5 || v18 == 2;
            if (!v19 || ((int v20 = *(_DWORD *)(v17 + 244), v20 != 2) ? (v21 = v20 == 5) : (v21 = 1), !v21)) {
              sub_1B6DE0170(*(void *)(a1 + 280) + 8, *(unsigned int *)(v16 + 236), *(unsigned int *)(v17 + 236));
            }
          }
        }
      }
      v13 += 8;
    }
    while (v14 != v13);
  }
  uint64_t v22 = *(uint64_t (**)(void))(**(void **)(a1 + 280) + 24);

  return v22();
}

void sub_1B6E053D0(uint64_t a1, float a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a1 + 324) >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(float32x4_t **)(*(void *)(a1 + 336) + 8 * v4);
      v5[17].i32[2] = 1065353216;
      __int32 v6 = v5[15].i32[1];
      BOOL v7 = v6 == 2 || v6 == 5;
      if (v7 || (v5[14].i8[8] & 3) != 0) {
        goto LABEL_16;
      }
      sub_1B6E06848(v5, v37, a2);
      if (!*(unsigned char *)(a1 + 64)) {
        goto LABEL_15;
      }
      v8.n128_f32[0] = v5[18].f32[0] * v5[18].f32[0];
      if (v8.n128_f32[0] == 0.0) {
        goto LABEL_15;
      }
      float32x4_t v9 = vsubq_f32(v38, v5[4]);
      v9.i32[3] = 0;
      int8x16_t v10 = (int8x16_t)vmulq_f32(v9, v9);
      if (v8.n128_f32[0] >= vadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)).f32[0]|| *(int *)(v5[13].i64[0] + 8) > 19)
      {
        goto LABEL_15;
      }
      ++dword_1E9E4996C;
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
      uint64_t v12 = *(void *)(a1 + 40);
      v42.i32[2] = 1065353216;
      long long v43 = xmmword_1B6E50980;
      uint64_t v44 = 0;
      float32x4_t v45 = v5[4];
      float32x4_t v46 = v38;
      uint64_t v47 = 0;
      float v48 = v5;
      v42.i64[0] = (uint64_t)&unk_1F0FB2800;
      int v49 = 0;
      uint64_t v50 = v11;
      uint64_t v51 = v12;
      __int32 v13 = v5[17].i32[3];
      sub_1B6DE65E4((uint64_t)&v39);
      v39.i64[0] = (uint64_t)&unk_1F0FB07C0;
      v39.i32[2] = 8;
      int v40 = v13;
      int v41 = v13;
      int v49 = *(_DWORD *)(a1 + 84);
      uint64_t v14 = v5[12].i64[1];
      long long v43 = *(_OWORD *)(v14 + 8);
      uint64_t v44 = *(void *)(v14 + 24);
      float32x4_t v34 = v37[1];
      float32x4_t v35 = v37[2];
      float32x4_t v36 = v38;
      float32x4_t v15 = v5[2];
      float32x4_t v33 = v5[1];
      float32x4_t v34 = v15;
      float32x4_t v35 = v5[3];
      sub_1B6DD470C(a1, (uint64_t)&v39, (uint64_t)&v5[1], (uint64_t)&v33, (uint64_t)&v42, 0.0);
      float v16 = *(float *)&v42.i32[2];
      if (*(float *)&v42.i32[2] >= 1.0) {
        break;
      }
      v5[17].i32[2] = v42.i32[2];
      sub_1B6E06848(v5, v37, v16 * a2);
      v5[17].i32[2] = 0;
      sub_1B6E06B2C(v5, v37, v17);
      nullsub_1(&v39);
LABEL_16:
      if (++v4 >= *(int *)(a1 + 324)) {
        goto LABEL_17;
      }
    }
    v8.n128_f64[0] = nullsub_1(&v39);
LABEL_15:
    sub_1B6E06B2C(v5, v37, v8);
    goto LABEL_16;
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 375))
  {
    int v18 = *(_DWORD *)(a1 + 420);
    if (v18 >= 1)
    {
      for (uint64_t i = 0; i < v18; ++i)
      {
        uint64_t v20 = *(void *)(*(void *)(a1 + 432) + 8 * i);
        if ((*(unsigned char *)(*(void *)(v20 + 784) + 264) & 2) != 0) {
          BOOL v21 = *(float32x4_t **)(v20 + 784);
        }
        else {
          BOOL v21 = 0;
        }
        if ((*(unsigned char *)(*(void *)(v20 + 792) + 264) & 2) != 0) {
          uint64_t v22 = *(float32x4_t **)(v20 + 792);
        }
        else {
          uint64_t v22 = 0;
        }
        if (*(int *)(v20 + 800) >= 1)
        {
          uint64_t v23 = 0;
          uint64_t v24 = v20 + 80;
          do
          {
            float v25 = sub_1B6DDFA50((uint64_t)v21, (uint64_t)v22);
            if (v25 > 0.0)
            {
              float v26 = *(float *)(v24 + 60);
              if (v26 != 0.0)
              {
                v27.i64[0] = 0x8000000080000000;
                v27.i64[1] = 0x8000000080000000;
                float32x4_t v28 = vmulq_n_f32(vmulq_n_f32((float32x4_t)veorq_s8(*(int8x16_t *)v24, v27), v26), v25);
                v28.i32[3] = 0;
                int8x16_t v42 = (int8x16_t)v28;
                float32x4_t v29 = vsubq_f32(*(float32x4_t *)(v24 - 16), v21[4]);
                v29.i32[3] = 0;
                float32x4_t v39 = v29;
                float32x4_t v30 = vsubq_f32(*(float32x4_t *)(v24 - 32), v22[4]);
                v30.i32[3] = 0;
                float32x4_t v33 = v30;
                sub_1B6546C78(v21, (float32x4_t *)&v42, (int8x8_t *)&v39);
                v31.i64[0] = 0x8000000080000000;
                v31.i64[1] = 0x8000000080000000;
                int8x16_t v32 = veorq_s8(v42, v31);
                sub_1B6546C78(v22, (float32x4_t *)&v32, (int8x8_t *)&v33);
              }
            }
            ++v23;
            v24 += 192;
          }
          while (v23 < *(int *)(v20 + 800));
          int v18 = *(_DWORD *)(a1 + 420);
        }
      }
    }
  }
}

void sub_1B6E0578C(uint64_t a1, float a2)
{
  int v2 = *(_DWORD *)(a1 + 324);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      __int32 v6 = *(float32x4_t **)(*(void *)(a1 + 336) + 8 * i);
      if ((v6[14].i8[8] & 3) == 0)
      {
        sub_1B6E06970(*(float32x4_t **)(*(void *)(a1 + 336) + 8 * i), a2);
        sub_1B6E06848(v6, v6 + 5, a2);
        int v2 = *(_DWORD *)(a1 + 324);
      }
    }
  }
}

void sub_1B6E05810(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 373)) {
    sub_1B6E073C4(*(void *)(a1 + 272));
  }
  *(unsigned char *)(a1 + 373) = 0;
  *(void *)(a1 + 27sub_1B6DC4968((unsigned int *)this + 2) = a2;
  *(void *)(*(void *)(a1 + 264) + 16) = a2;
}

uint64_t sub_1B6E05854(uint64_t a1)
{
  return *(void *)(a1 + 272);
}

uint64_t sub_1B6E0585C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 292);
}

uint64_t sub_1B6E05864(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 304) + 8 * a2);
}

uint64_t sub_1B6E05870(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 304) + 8 * a2);
}

uint64_t sub_1B6E0587C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; ++i)
    {
      __int32 v6 = *(unsigned char **)(*(void *)(v3 + 24) + 8 * i);
      if ((v6[264] & 2) != 0)
      {
        int v7 = (*(uint64_t (**)(void))(*(void *)v6 + 32))(*(void *)(*(void *)(v3 + 24) + 8 * i));
        uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, v7, 1);
        uint64_t v9 = (*(uint64_t (**)(unsigned char *, void, uint64_t))(*(void *)v6 + 40))(v6, *(void *)(v8 + 8), a2);
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a2 + 40))(a2, v8, v9, 1497645650, v6);
        int v4 = *(_DWORD *)(v3 + 12);
      }
    }
  }
  if (*(int *)(v3 + 292) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(v3 + 304) + 8 * v10);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 72))(v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, v12, 1);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v11 + 80))(v11, *(void *)(v13 + 8), a2);
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v13, v14, 1397641027, v11);
      ++v10;
    }
    while (v10 < *(int *)(v3 + 292));
  }
  return result;
}

uint64_t sub_1B6E05A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 104, 1);
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v4 + 8);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(void *)(v6 + 96) = 0;
  do
  {
    *(_DWORD *)(v6 + v5 + 88) = *(_DWORD *)(a1 + 352 + v5);
    v5 += 4;
  }
  while (v5 != 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)(a1 + 144);
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 160);
  *(_OWORD *)(v6 + 20) = *(_OWORD *)(a1 + 168);
  *(_DWORD *)(v6 + 36) = *(_DWORD *)(a1 + 184);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a1 + 192);
  *(void *)(v6 + 56) = *(void *)(a1 + 220);
  *(_DWORD *)(v6 + 64) = *(_DWORD *)(a1 + 164);
  *(void *)(v6 + 68) = *(void *)(a1 + 208);
  int v7 = *(_DWORD *)(a1 + 188);
  *(_DWORD *)(v6 + 76) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(v6 + 80) = v7;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)a2 + 40);

  return v8(a2, v4, "btDynamicsWorldFloatData", 1145853764);
}

uint64_t sub_1B6E05BB8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 64))(a2);
  sub_1B6E05A98(a1, a2);
  sub_1B6E0587C(a1, a2);
  sub_1B6DD6274(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 72);

  return v4(a2);
}

uint64_t sub_1B6E05C5C()
{
  return 2;
}

uint64_t sub_1B6E05C74()
{
  return 0;
}

uint64_t sub_1B6E05C7C()
{
  return 0;
}

uint64_t sub_1B6E05C84()
{
  return 0;
}

void *sub_1B6E05C9C(void *a1)
{
  *a1 = &unk_1F0FB2478;
  uint64_t v2 = (uint64_t)(a1 + 7);
  sub_1B6441B40((uint64_t)(a1 + 15));
  sub_1B6441B40((uint64_t)(a1 + 11));
  sub_1B6441B40(v2);
  return a1;
}

void sub_1B6E05CF8(void *a1)
{
  *a1 = &unk_1F0FB2478;
  uint64_t v2 = (uint64_t)(a1 + 7);
  sub_1B6441B40((uint64_t)(a1 + 15));
  sub_1B6441B40((uint64_t)(a1 + 11));
  sub_1B6441B40(v2);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6E05D74(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  if (a6 < 0) {
    goto LABEL_21;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 32);
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(a1 + 24);
    while (1)
    {
      int v13 = *(_DWORD *)(*(void *)(*(void *)v12 + 40) + 236);
      if (v13 < 0) {
        int v13 = *(_DWORD *)(*(void *)(*(void *)v12 + 48) + 236);
      }
      if (v13 == a6) {
        break;
      }
      ++v11;
      v12 += 8;
      if (v10 == v11)
      {
        uint64_t v12 = 0;
        goto LABEL_19;
      }
    }
  }
  if ((int)v11 >= (int)v10)
  {
LABEL_19:
    int v14 = 0;
  }
  else
  {
    int v14 = 0;
    uint64_t v11 = v11;
    do
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 24) + 8 * v11);
      int v16 = *(_DWORD *)(*(void *)(v15 + 40) + 236);
      if (v16 < 0) {
        int v16 = *(_DWORD *)(*(void *)(v15 + 48) + 236);
      }
      if (v16 == a6) {
        ++v14;
      }
      ++v11;
    }
    while ((int)v10 > (int)v11);
  }
  if (*(int *)(*(void *)(a1 + 8) + 72) < 2)
  {
LABEL_21:
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a2);
    return;
  }
  if (a3 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = a3;
    int v20 = *(_DWORD *)(a1 + 60);
    uint64_t v19 = *(unsigned int *)(a1 + 64);
    do
    {
      if (v20 == v19)
      {
        if (v19) {
          uint64_t v21 = (2 * v19);
        }
        else {
          uint64_t v21 = 1;
        }
        if ((int)v19 < (int)v21)
        {
          if (v21)
          {
            uint64_t v22 = sub_1B6E073B8(8 * (int)v21, 16);
            LODWORD(v19) = *(_DWORD *)(a1 + 60);
          }
          else
          {
            uint64_t v22 = 0;
          }
          if ((int)v19 >= 1)
          {
            uint64_t v23 = 0;
            do
            {
              *(void *)(v22 + v23) = *(void *)(*(void *)(a1 + 72) + v23);
              v23 += 8;
            }
            while (8 * v19 != v23);
          }
          uint64_t v24 = *(void *)(a1 + 72);
          if (v24 && *(unsigned char *)(a1 + 80))
          {
            sub_1B6E073C4(v24);
            LODWORD(v19) = *(_DWORD *)(a1 + 60);
          }
          *(unsigned char *)(a1 + 80) = 1;
          *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v22;
          int v20 = v19;
          *(_DWORD *)(a1 + 64) = v21;
          goto LABEL_42;
        }
        int v20 = v19;
      }
      uint64_t v21 = v19;
LABEL_42:
      *(void *)(*(void *)(a1 + 72) + 8 * v20++) = *(void *)(a2 + 8 * v17);
      *(_DWORD *)(a1 + 60) = v20;
      ++v17;
      uint64_t v19 = v21;
    }
    while (v17 != v18);
  }
  if (a5 >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = a5;
    int v28 = *(_DWORD *)(a1 + 92);
    uint64_t v27 = *(unsigned int *)(a1 + 96);
    do
    {
      if (v28 == v27)
      {
        if (v27) {
          uint64_t v29 = (2 * v27);
        }
        else {
          uint64_t v29 = 1;
        }
        if ((int)v27 < (int)v29)
        {
          if (v29)
          {
            uint64_t v30 = sub_1B6E073B8(8 * (int)v29, 16);
            LODWORD(v27) = *(_DWORD *)(a1 + 92);
          }
          else
          {
            uint64_t v30 = 0;
          }
          if ((int)v27 >= 1)
          {
            uint64_t v31 = 0;
            do
            {
              *(void *)(v30 + v31) = *(void *)(*(void *)(a1 + 104) + v31);
              v31 += 8;
            }
            while (8 * v27 != v31);
          }
          uint64_t v32 = *(void *)(a1 + 104);
          if (v32 && *(unsigned char *)(a1 + 112))
          {
            sub_1B6E073C4(v32);
            LODWORD(v27) = *(_DWORD *)(a1 + 92);
          }
          *(unsigned char *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = 1;
          *(void *)(a1 + 104) = v30;
          int v28 = v27;
          *(_DWORD *)(a1 + 96) = v29;
          goto LABEL_62;
        }
        int v28 = v27;
      }
      uint64_t v29 = v27;
LABEL_62:
      *(void *)(*(void *)(a1 + 104) + 8 * v28++) = *(void *)(a4 + 8 * v25);
      *(_DWORD *)(a1 + 9sub_1B6DC4968((unsigned int *)this + 2) = v28;
      ++v25;
      uint64_t v27 = v29;
    }
    while (v25 != v26);
  }
  if (v14)
  {
    uint64_t v33 = 0;
    int v35 = *(_DWORD *)(a1 + 124);
    uint64_t v34 = *(unsigned int *)(a1 + 128);
    while (1)
    {
      if (v35 == v34)
      {
        if (v34) {
          uint64_t v36 = (2 * v34);
        }
        else {
          uint64_t v36 = 1;
        }
        if ((int)v34 < (int)v36)
        {
          if (v36)
          {
            uint64_t v37 = sub_1B6E073B8(8 * (int)v36, 16);
            LODWORD(v34) = *(_DWORD *)(a1 + 124);
          }
          else
          {
            uint64_t v37 = 0;
          }
          if ((int)v34 >= 1)
          {
            uint64_t v38 = 0;
            do
            {
              *(void *)(v37 + v38) = *(void *)(*(void *)(a1 + 136) + v38);
              v38 += 8;
            }
            while (8 * v34 != v38);
          }
          uint64_t v39 = *(void *)(a1 + 136);
          if (v39 && *(unsigned char *)(a1 + 144))
          {
            sub_1B6E073C4(v39);
            LODWORD(v34) = *(_DWORD *)(a1 + 124);
          }
          *(unsigned char *)(a1 + 144) = 1;
          *(void *)(a1 + 136) = v37;
          int v35 = v34;
          *(_DWORD *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = v36;
          goto LABEL_82;
        }
        int v35 = v34;
      }
      uint64_t v36 = v34;
LABEL_82:
      *(void *)(*(void *)(a1 + 136) + 8 * v35++) = *(void *)(v12 + 8 * v33);
      *(_DWORD *)(a1 + 124) = v35;
      ++v33;
      uint64_t v34 = v36;
      if (v33 == v14) {
        goto LABEL_85;
      }
    }
  }
  int v35 = *(_DWORD *)(a1 + 124);
LABEL_85:
  if (*(_DWORD *)(a1 + 92) + v35 > *(_DWORD *)(*(void *)(a1 + 8) + 72))
  {
    sub_1B6E050C4(a1);
  }
}

void sub_1B6E061C4()
{
}

uint64_t sub_1B6E061D8(uint64_t a1, void *a2)
{
  if (*a2 != *(void *)(a1 + 120)
    && ((uint64_t v2 = a2[1], (*(void *)(a1 + 24) & v2) != 0) && (a2[2] & *(void *)(a1 + 16)) != 0
     || (*(void *)(a1 + 32) & v2) != 0))
  {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 56))();
  }
  else
  {
    return 0;
  }
}

float sub_1B6E06258(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(float32x4_t **)a2;
  float result = 1.0;
  if (*(void *)a2 != *(void *)(a1 + 120) && (v3[14].i8[8] & 4) == 0)
  {
    float32x4_t v5 = vsubq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a1 + 48));
    v5.i32[3] = 0;
    int8x16_t v6 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a2 + 16), v5);
    if (vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v6.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)).f32[0] < (float)-*(float *)(a1 + 128))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 48);
      *(void *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = v3;
      float32x4_t v7 = *(float32x4_t *)(a2 + 16);
      if (!a3)
      {
        int8x16_t v8 = (int8x16_t)vmulq_f32(v3[1], v7);
        int8x16_t v9 = (int8x16_t)vmulq_f32(v7, v3[2]);
        int8x16_t v10 = (int8x16_t)vmulq_f32(v7, v3[3]);
        v10.i32[3] = 0;
        *(float32x2_t *)v7.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v9.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
        *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
      }
      *(float32x4_t *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 32);
      return *(float *)(a2 + 48);
    }
  }
  return result;
}

uint64_t sub_1B6E06314(uint64_t a1, uint64_t a2, int a3, int a4)
{
  do
  {
    int v8 = a3;
    int v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4)) {
      ++v9;
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 16) + 8 * (v9 >> 1));
    int v11 = a4;
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      int v13 = *(_DWORD *)(*(void *)(v10 + 40) + 236);
      int v14 = (uint64_t *)(v12 + 8 * a3);
      int v15 = a3;
      do
      {
        int v16 = *(_DWORD *)(*(void *)(v10 + 40) + 236);
        if (v13 < 0) {
          int v16 = *(_DWORD *)(*(void *)(v10 + 48) + 236);
        }
        uint64_t v17 = *v14;
        int v18 = *(_DWORD *)(*(void *)(*v14 + 40) + 236);
        if (v18 < 0) {
          int v18 = *(_DWORD *)(*(void *)(v17 + 48) + 236);
        }
        ++v15;
        ++v14;
      }
      while (v18 < v16);
      a3 = v15 - 1;
      uint64_t v19 = 8 * v11;
      int v20 = v11;
      do
      {
        uint64_t v21 = *(void *)(v12 + v19);
        int v22 = *(_DWORD *)(*(void *)(v21 + 40) + 236);
        if (v22 < 0) {
          int v22 = *(_DWORD *)(*(void *)(v21 + 48) + 236);
        }
        uint64_t result = *(unsigned int *)(*(void *)(v10 + 40) + 236);
        if (v13 < 0) {
          uint64_t result = *(unsigned int *)(*(void *)(v10 + 48) + 236);
        }
        --v20;
        v19 -= 8;
      }
      while ((int)result < v22);
      int v11 = v20 + 1;
      if (a3 <= v20 + 1)
      {
        *(v14 - 1) = v21;
        *(void *)(*(void *)(a1 + 16) + v19 + 8) = v17;
        a3 = v15;
        int v11 = v20;
      }
    }
    while (a3 <= v11);
    if (v11 > v8) {
      uint64_t result = sub_1B6E06314(a1, a2);
    }
  }
  while (a3 < a4);
  return result;
}

__n128 sub_1B6E0643C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 508);
  *(_DWORD *)(a1 + 264) = 2;
  *(_OWORD *)(a1 + 35sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 624) = xmmword_1B6E4F540;
  __asm { FMOV            V1.2S, #1.0 }
  *(float32x2_t *)(a1 + 400) = _D1;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_DWORD *)(a1 + 444) = 0;
  *(_OWORD *)(a1 + 41sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(int8x8_t *)(a1 + 496) = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a2 + 112), _D1), (int8x8_t)_D1, *(int8x8_t *)(a2 + 112)), (int8x8_t)vcltz_f32(*(float32x2_t *)(a2 + 112)));
  *(void *)(a1 + 524) = *(void *)(a2 + 132);
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a1 + 536) = v10;
  *(void *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 140);
  *uint64_t v4 = *(_OWORD *)(a2 + 144);
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, a1 + 16);
    long long v11 = *(_OWORD *)(a1 + 16);
    long long v12 = *(_OWORD *)(a1 + 32);
    long long v13 = *(_OWORD *)(a1 + 48);
    long long v14 = *(_OWORD *)(a1 + 64);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    long long v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    long long v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v14;
  }
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = v13;
  *(_OWORD *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = v14;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  int v15 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 124);
  int v16 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 25sub_1B6DC4968((unsigned int *)this + 2) = v15;
  *(_DWORD *)(a1 + 256) = v16;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 24))(a1, *(void *)(a2 + 80));
  int v17 = dword_1E9E48C08++;
  *(_DWORD *)(a1 + 580) = v17;
  sub_1B6E06750(a1, (float32x2_t *)(a2 + 96), *(float *)a2);
  sub_1B6E067DC((float32x4_t *)a1);
  *(_DWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 59sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  __n128 result = (__n128)vmulq_n_f32(*(float32x4_t *)(a1 + 400), *(float *)(a1 + 384));
  result.n128_u32[3] = 0;
  *(_DWORD *)(a1 + 53sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(__n128 *)(a1 + 640) = result;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 67sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  return result;
}

uint64_t sub_1B6E065DC(uint64_t a1, uint64_t a2)
{
  sub_1B6DD2428(a1);
  *(void *)uint64_t v4 = &unk_1F0FB0598;
  *(unsigned char *)(v4 + 568) = 1;
  *(void *)(v4 + 560) = 0;
  *(void *)(v4 + 548) = 0;
  sub_1B6E0643C(v4, a2);
  return a1;
}

uint64_t sub_1B6E06640(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, float a5)
{
  sub_1B6DD2428(a1);
  *(void *)uint64_t v10 = &unk_1F0FB0598;
  *(unsigned char *)(v10 + 568) = 1;
  *(void *)(v10 + 560) = 0;
  *(void *)(v10 + 548) = 0;
  float v12 = a5;
  uint64_t v13 = a2;
  uint64_t v19 = a3;
  long long v20 = *a4;
  long long v21 = xmmword_1B6ED03E0;
  uint64_t v22 = 0x3F4CCCCD00000000;
  int v23 = 1065353216;
  char v24 = 0;
  long long v25 = xmmword_1B6E52090;
  long long v14 = xmmword_1B6E4F300;
  long long v15 = xmmword_1B6E4F320;
  long long v16 = xmmword_1B6E4F2E0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_1B6E0643C(v10, (uint64_t)&v12);
  return a1;
}

int8x8_t sub_1B6E06730(int8x8_t *a1, float32x2_t a2, float32_t a3)
{
  a2.f32[1] = a3;
  __asm { FMOV            V2.2S, #1.0 }
  int8x8_t result = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(a2, _D2), (int8x8_t)_D2, (int8x8_t)a2), (int8x8_t)vcltz_f32(a2));
  a1[62] = result;
  return result;
}

__n128 sub_1B6E06750(uint64_t a1, float32x2_t *a2, float a3)
{
  int v3 = *(_DWORD *)(a1 + 232);
  if (a3 == 0.0)
  {
    *(_DWORD *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = v3 | 1;
    float v4 = 0.0;
  }
  else
  {
    *(_DWORD *)(a1 + 23sub_1B6DC4968((unsigned int *)this + 2) = v3 & 0xFFFFFFFE;
    float v4 = 1.0 / a3;
  }
  *(float *)(a1 + 384) = v4;
  float32x4_t v5 = vmulq_n_f32(*(float32x4_t *)(a1 + 432), a3);
  v5.i32[3] = 0;
  *(float32x4_t *)(a1 + 416) = v5;
  v5.i32[0] = a2[1].i32[0];
  float v6 = 1.0 / v5.f32[0];
  _ZF = v5.f32[0] == 0.0;
  float v8 = 0.0;
  if (!_ZF) {
    float v8 = v6;
  }
  __asm { FMOV            V4.2S, #1.0 }
  *(int8x8_t *)(a1 + 448) = vbic_s8((int8x8_t)vdiv_f32(_D4, *a2), (int8x8_t)vceqz_f32(*a2));
  *(float *)(a1 + 456) = v8;
  *(_DWORD *)(a1 + 460) = 0;
  __n128 result = (__n128)vmulq_n_f32(*(float32x4_t *)(a1 + 400), v4);
  result.n128_u32[3] = 0;
  *(__n128 *)(a1 + 640) = result;
  return result;
}

float32x4_t sub_1B6E067DC(float32x4_t *a1)
{
  float32x4_t v1 = a1[28];
  float32x4_t v2 = a1[1];
  float32x4_t v3 = a1[2];
  float32x4_t v4 = a1[3];
  float32x4_t v5 = (float32x4_t)vtrn1q_s32((int32x4_t)v2, (int32x4_t)v3);
  float32x4_t v6 = (float32x4_t)vzip2q_s64((int64x2_t)v5, (int64x2_t)v4);
  v6.i32[3] = 0;
  float32x4_t v7 = vmulq_f32(v1, v4);
  *(int32x2_t *)v8.f32 = vzip2_s32(*(int32x2_t *)v2.f32, *(int32x2_t *)v3.f32);
  v8.i64[1] = vdup_lane_s32(*(int32x2_t *)v4.f32, 1).u32[0];
  v5.i64[1] = v4.u32[0];
  float32x4_t v9 = vmulq_f32(v1, v3);
  float32x4_t result = vmulq_f32(v2, v1);
  a1[19] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, result.f32[0]), v8, *(float32x2_t *)result.f32, 1), v6, result, 2);
  a1[20] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v9.f32[0]), v8, *(float32x2_t *)v9.f32, 1), v6, v9, 2);
  a1[21] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, v7.f32[0]), v8, *(float32x2_t *)v7.f32, 1), v6, v7, 2);
  return result;
}

void sub_1B6E06848(float32x4_t *a1, float32x4_t *a2, float a3)
{
}

__n128 sub_1B6E06860(uint64_t a1, __n128 result)
{
  if (result.n128_f32[0] != 0.0)
  {
    uint64_t v15 = v5;
    uint64_t v16 = v4;
    uint64_t v17 = v2;
    uint64_t v18 = v3;
    float v6 = result.n128_f32[0];
    uint64_t v8 = *(void *)(a1 + 536);
    if (v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a1 + 16);
    }
    float32x4_t v9 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a1 + 128)), 1.0 / v6);
    v9.i32[3] = 0;
    *(float32x4_t *)(a1 + 35sub_1B6DC4968((unsigned int *)this + 2) = v9;
    float v13 = 0.0;
    sub_1B6DD6E68((_OWORD *)(a1 + 80), (float32x2_t *)(a1 + 16), &v14, &v13);
    float32x4_t v10 = vmulq_n_f32(vmulq_n_f32(v14, v13), 1.0 / v6);
    v10.i32[3] = 0;
    *(float32x4_t *)(a1 + 368) = v10;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 352);
    *(float32x4_t *)(a1 + 160) = v10;
    long long v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 96) = v11;
    float32x4_t result = *(__n128 *)(a1 + 48);
    long long v12 = *(_OWORD *)(a1 + 64);
    *(__n128 *)(a1 + 11sub_1B6DC4968((unsigned int *)this + 2) = result;
    *(_OWORD *)(a1 + sub_1B6DC7B98((uint64_t)this + 128) = v12;
  }
  return result;
}

__n128 sub_1B6E06940(float32x4_t *a1, float32x4_t *a2)
{
  float v2 = a1[24].f32[0];
  if (v2 != 0.0)
  {
    float32x4_t v3 = vmulq_n_f32(*a2, 1.0 / v2);
    v3.i32[3] = 0;
    a1[26] = v3;
  }
  __n128 result = *(__n128 *)a2;
  a1[27] = *a2;
  return result;
}

void sub_1B6E06970(float32x4_t *a1, float a2)
{
  float v4 = a1[31].f32[0];
  float32x4_t v19 = vmulq_n_f32(a1[22], powf(1.0 - v4, a2));
  a1[22] = v19;
  float v5 = a1[31].f32[1];
  float32x4_t v6 = vmulq_n_f32(a1[23], powf(1.0 - v5, a2));
  a1[23] = v6;
  if (a1[31].i8[8])
  {
    int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8)).f32[0] >= a1[32].f32[1])
    {
      float32x4_t v8 = v19;
    }
    else
    {
      float32x4_t v8 = v19;
      int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
      if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), vpadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8)).f32[0] < a1[32].f32[0])
      {
        float v10 = a1[31].f32[3];
        float32x4_t v6 = vmulq_n_f32(v6, v10);
        float32x4_t v8 = vmulq_n_f32(v19, v10);
        a1[22] = v8;
        a1[23] = v6;
      }
    }
    int8x16_t v11 = (int8x16_t)vmulq_f32(v8, v8);
    float v12 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)).f32[0]);
    if (v12 < v4)
    {
      float v13 = a1 + 22;
      if (v12 <= 0.005)
      {
        v13->i64[0] = 0;
        a1[22].i64[1] = 0;
      }
      else
      {
        float32x4_t v14 = vmulq_f32(vmulq_n_f32(v8, 1.0 / v12), (float32x4_t)vdupq_n_s32(0x3BA3D70Au));
        v14.i32[3] = 0;
        *float v13 = vsubq_f32(v8, v14);
      }
    }
    int8x16_t v15 = (int8x16_t)vmulq_f32(v6, v6);
    float v16 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)).f32[0]);
    if (v16 < v5)
    {
      uint64_t v17 = a1 + 23;
      if (v16 <= 0.005)
      {
        v17->i64[0] = 0;
        a1[23].i64[1] = 0;
      }
      else
      {
        float32x4_t v18 = vmulq_f32(vmulq_n_f32(v6, 1.0 / v16), (float32x4_t)vdupq_n_s32(0x3BA3D70Au));
        v18.i32[3] = 0;
        *uint64_t v17 = vsubq_f32(v6, v18);
      }
    }
  }
}

float32x4_t sub_1B6E06B04(float32x4_t *a1)
{
  if ((a1[14].i8[8] & 3) == 0)
  {
    float32x4_t result = vaddq_f32(a1[29], vmulq_f32(a1[26], a1[25]));
    a1[29] = result;
  }
  return result;
}

double sub_1B6E06B30(float32x4_t *a1, float32x4_t *a2)
{
  if ((a1[14].i8[8] & 2) != 0)
  {
    float32x4_t v3 = a1[2];
    a1[5] = a1[1];
    a1[6] = v3;
    a1[7] = a1[3];
    float v2 = a1 + 4;
  }
  else
  {
    a1[5] = *a2;
    a1[6] = a2[1];
    a1[7] = a2[2];
    float v2 = a2 + 3;
  }
  float32x4_t v4 = a1[22];
  float32x4_t v5 = a1[23];
  a1[8] = *v2;
  a1[9] = v4;
  a1[10] = v5;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a2[2];
  a1[4] = a2[3];
  *(void *)&double result = sub_1B6E067DC(a1).u64[0];
  return result;
}

uint64_t sub_1B6E06BA0@<X0>(uint64_t result@<X0>, float32x4_t *a2@<X8>, float a3@<S0>, float32x4_t _Q2@<Q2>)
{
  __asm { FMOV            V2.2S, #1.0 }
  *(float32x2_t *)_Q2.f32 = vdiv_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(result + 448));
  _Q2.f32[2] = 1.0 / *(float *)(result + 456);
  float32x4_t v8 = *(float32x4_t *)(result + 16);
  float32x4_t v9 = *(float32x4_t *)(result + 32);
  float32x4_t v10 = *(float32x4_t *)(result + 48);
  float32x4_t v11 = vmulq_f32(_Q2, v9);
  float32x4_t v12 = (float32x4_t)vtrn1q_s32((int32x4_t)v8, (int32x4_t)v9);
  *(int32x2_t *)v9.f32 = vzip2_s32(*(int32x2_t *)v8.f32, *(int32x2_t *)v9.f32);
  float32x4_t v13 = vmulq_f32(_Q2, v10);
  float32x4_t v14 = (float32x4_t)vzip2q_s64((int64x2_t)v12, (int64x2_t)v10);
  v9.i64[1] = vdup_lane_s32(*(int32x2_t *)v10.f32, 1).u32[0];
  float32x4_t v15 = vmulq_f32(v8, _Q2);
  v12.i64[1] = v10.u32[0];
  v14.i32[3] = 0;
  float32x4_t v16 = vmulq_n_f32(v12, v11.f32[0]);
  float32x4_t v17 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v15.f32[0]), v9, *(float32x2_t *)v15.f32, 1), v14, v15, 2);
  float32x4_t v18 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, v13.f32[0]), v9, *(float32x2_t *)v13.f32, 1), v14, v13, 2);
  float32x4_t v19 = *(float32x4_t *)(result + 368);
  float32x4_t v20 = vmulq_f32(v17, v19);
  int8x16_t v21 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v16, v9, *(float32x2_t *)v11.f32, 1), v14, v11, 2), v19);
  int8x16_t v22 = (int8x16_t)vmulq_f32(v18, v19);
  v22.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)v21.i8 = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v20.f32, *(int8x8_t *)v21.i8, 4uLL);
  v11.i64[1] = v20.i64[0];
  *(float32x2_t *)v20.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), 4uLL), *(float32x2_t *)v20.f32);
  *(float32x2_t *)&v20.u32[2] = vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v21.i8);
  int8x16_t v23 = (int8x16_t)vsubq_f32(vmulq_f32(v19, v11), v20);
  v24.i64[0] = vextq_s8(v23, v23, 4uLL).u64[0];
  v24.i64[1] = v23.u32[0];
  int8x16_t v25 = (int8x16_t)vmulq_f32(v24, v24);
  float v26 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)).f32[0];
  if (v26 > (float)(a3 * a3)) {
    float32x4_t v24 = vmulq_n_f32(v24, (float)(1.0 / sqrtf(v26)) * a3);
  }
  *a2 = v24;
  return result;
}

BOOL sub_1B6E06CB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = 1;
  if ((*(unsigned char *)(a2 + 264) & 2) != 0)
  {
    if (a2)
    {
      unint64_t v3 = *(unsigned int *)(a1 + 548);
      if ((int)v3 >= 1)
      {
        uint64_t v4 = 0;
        BOOL v2 = 0;
        do
        {
          uint64_t v5 = *(void *)(*(void *)(a1 + 560) + 8 * v4);
          if (*(unsigned char *)(v5 + 28) && (*(void *)(v5 + 40) == a2 || *(void *)(v5 + 48) == a2)) {
            break;
          }
          BOOL v2 = ++v4 >= v3;
        }
        while (v3 != v4);
      }
    }
  }
  return v2;
}

void sub_1B6E06D20(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 548);
  if (v4 < 1) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void **)(a1 + 560);
  uint64_t v6 = *(unsigned int *)(a1 + 548);
  while (*v5 != a2)
  {
    ++v5;
    if (!--v6) {
      goto LABEL_7;
    }
  }
  if (!v6)
  {
LABEL_7:
    if (v4 == *(_DWORD *)(a1 + 552))
    {
      int v7 = v4 ? 2 * v4 : 1;
      if (v4 < v7)
      {
        if (v7)
        {
          uint64_t v8 = sub_1B6E073B8(8 * v7, 16);
          int v4 = *(_DWORD *)(a1 + 548);
        }
        else
        {
          uint64_t v8 = 0;
        }
        if (v4 >= 1)
        {
          uint64_t v9 = 0;
          do
          {
            *(void *)(v8 + v9) = *(void *)(*(void *)(a1 + 560) + v9);
            v9 += 8;
          }
          while (8 * v4 != v9);
        }
        uint64_t v10 = *(void *)(a1 + 560);
        if (v10 && *(unsigned char *)(a1 + 568))
        {
          sub_1B6E073C4(v10);
          int v4 = *(_DWORD *)(a1 + 548);
        }
        *(unsigned char *)(a1 + 568) = 1;
        *(void *)(a1 + 560) = v8;
        *(_DWORD *)(a1 + 55sub_1B6DC4968((unsigned int *)this + 2) = v7;
      }
    }
    *(void *)(*(void *)(a1 + 560) + 8 * v4) = a2;
    *(_DWORD *)(a1 + 548) = v4 + 1;
  }
  *(_DWORD *)(a1 + 29sub_1B6DC4968((unsigned int *)this + 2) = 1;
}

uint64_t sub_1B6E06E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = sub_1B6DD30A4(a1 + 544, &v4);
  *(_DWORD *)(a1 + 29sub_1B6DC4968((unsigned int *)this + 2) = *(_DWORD *)(a1 + 548) > 0;
  return result;
}

uint64_t sub_1B6E06E74()
{
  return 504;
}

const char *sub_1B6E06E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (_OWORD *)(a2 + 468);
  uint64_t v6 = a1 + 508;
  sub_1B6DD2520(a1, a2, a3);
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 304;
  uint64_t v9 = a2 + 272;
  do
  {
    for (uint64_t i = 0; i != 16; i += 4)
      *(_DWORD *)(v9 + i) = *(_DWORD *)(v8 + i);
    ++v7;
    v8 += 16;
    v9 += 16;
  }
  while (v7 != 3);
  for (uint64_t j = 0; j != 16; j += 4)
    *(_DWORD *)(a2 + 320 + j) = *(_DWORD *)(a1 + 352 + j);
  for (uint64_t k = 0; k != 16; k += 4)
    *(_DWORD *)(a2 + 336 + k) = *(_DWORD *)(a1 + 368 + k);
  uint64_t v13 = 0;
  *(_DWORD *)(a2 + 464) = *(_DWORD *)(a1 + 384);
  do
  {
    *(_DWORD *)(a2 + 352 + v13) = *(_DWORD *)(a1 + 624 + v13);
    v13 += 4;
  }
  while (v13 != 16);
  for (uint64_t m = 0; m != 16; m += 4)
    *(_DWORD *)(a2 + 368 + m) = *(_DWORD *)(a1 + 400 + m);
  for (uint64_t n = 0; n != 16; n += 4)
    *(_DWORD *)(a2 + 384 + n) = *(_DWORD *)(a1 + 416 + n);
  for (iuint64_t i = 0; ii != 16; ii += 4)
    *(_DWORD *)(a2 + 400 + ii) = *(_DWORD *)(a1 + 432 + ii);
  for (juint64_t j = 0; jj != 16; jj += 4)
    *(_DWORD *)(a2 + 416 + jj) = *(_DWORD *)(a1 + 448 + jj);
  for (kuint64_t k = 0; kk != 16; kk += 4)
    *(_DWORD *)(a2 + 432 + kk) = *(_DWORD *)(a1 + 464 + kk);
  for (muint64_t m = 0; mm != 16; mm += 4)
    *(_DWORD *)(a2 + 448 + mm) = *(_DWORD *)(a1 + 480 + mm);
  *(void *)&long long v20 = *(void *)(a1 + 496);
  *(_DWORD *)(a2 + 500) = *(unsigned __int8 *)(a1 + 504);
  *((void *)&v20 + 1) = *(void *)v6;
  *uint64_t v5 = v20;
  v5[1] = *(_OWORD *)(v6 + 8);
  return "btRigidBodyFloatData";
}

uint64_t sub_1B6E0703C(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, v4, 1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 40))(a1, *(void *)(v5 + 8), a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40);

  return v7(a2, v5, v6, 1497645650, a1);
}

void sub_1B6E07138(void *a1)
{
  *a1 = &unk_1F0FB0598;
  sub_1B6441B40((uint64_t)(a1 + 68));
  nullsub_1(a1);

  sub_1B6E073C4(v2);
}

uint64_t sub_1B6E07194(uint64_t a1)
{
  return 0;
}

void sub_1B6E0728C()
{
}

void sub_1B6E072A0()
{
}

float sub_1B6E072B4(float32x4_t *a1, uint64_t a2, int a3)
{
  a1->i32[2] = *(_DWORD *)(a2 + 32);
  unint64_t v3 = *(float32x4_t **)a2;
  a1[1].i64[0] = *(void *)a2;
  float32x4_t v4 = *(float32x4_t *)(a2 + 16);
  if (!a3)
  {
    int8x16_t v5 = (int8x16_t)vmulq_f32(v3[1], v4);
    int8x16_t v6 = (int8x16_t)vmulq_f32(v4, v3[2]);
    int8x16_t v7 = (int8x16_t)vmulq_f32(v4, v3[3]);
    v7.i32[3] = 0;
    *(float32x2_t *)v4.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v5.i8, *(float32x2_t *)v6.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)));
    *(float32x2_t *)&v4.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 0);
  }
  a1[6] = v4;
  a1[7] = vaddq_f32(a1[4], vmulq_n_f32(vsubq_f32(a1[5], a1[4]), *(float *)(a2 + 32)));
  return *(float *)(a2 + 32);
}

uint64_t sub_1B6E07338(uint64_t a1, int a2)
{
  unint64_t v3 = off_1EC56B788(a1 + a2 - 1 + 8);
  uint64_t v4 = 0;
  if (v3)
  {
    uint64_t v4 = ((unint64_t)v3 + a2 + 7) & -(uint64_t)a2;
    *(void *)(v4 - 8) = v3;
  }
  return v4;
}

void sub_1B6E07390(uint64_t a1)
{
  if (a1) {
    off_1EC56B790(*(void **)(a1 - 8));
  }
}

void *sub_1B6E073A8(size_t a1)
{
  return malloc_type_malloc(a1, 0x7DDD96CuLL);
}

uint64_t sub_1B6E073B8(uint64_t a1, int a2)
{
  return off_1EC56B778(a1, a2);
}

void sub_1B6E073C4(uint64_t a1)
{
  if (a1) {
    off_1EC56B780(a1);
  }
}

BOOL sub_1B6E073D8(uint64_t a1, int *a2, float32x4_t *a3, float32_t a4)
{
  float32x4_t v4 = *(float32x4_t *)(a1 + 16 * a2[1]);
  float32x4_t v5 = *(float32x4_t *)(a1 + 16 * *a2);
  float32x4_t v6 = vsubq_f32(v4, v5);
  int8x8_t v7 = (int8x8_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i32[3] = 0;
  float32x4_t v8 = vsubq_f32(*(float32x4_t *)(a1 + 16 * a2[2]), v4);
  int8x8_t v9 = (int8x8_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v8.i32[3] = 0;
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v6.f32, v7, 4uLL);
  v10.i64[1] = v6.i64[0];
  *(int8x8_t *)v11.f32 = vext_s8(*(int8x8_t *)v8.f32, v9, 4uLL);
  v11.i64[1] = v8.i64[0];
  int8x16_t v12 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v10, v8)), v6, v11);
  v13.i64[0] = vextq_s8(v12, v12, 4uLL).u64[0];
  v13.i64[1] = v12.u32[0];
  int8x16_t v14 = (int8x16_t)vmulq_f32(v13, v13);
  float v15 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0]);
  if (v15 == 0.0)
  {
    float32x4_t v16 = (float32x4_t)xmmword_1B6E4F300;
  }
  else
  {
    float32x4_t v16 = vmulq_n_f32(v13, 1.0 / v15);
    v16.i32[3] = 0;
  }
  float32x4_t v17 = vsubq_f32(*a3, v5);
  v17.i32[3] = 0;
  int8x16_t v18 = (int8x16_t)vmulq_f32(v16, v17);
  return vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8)).f32[0] > a4;
}

uint64_t sub_1B6E0748C(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 0;
  float32x4_t v4 = &unk_1E9DDA470;
  while (1)
  {
    uint64_t v5 = v3 + 1;
    unsigned int v6 = v3 == 2 ? 0 : v3 + 1;
    int v7 = *(_DWORD *)(a1 + 4 * v3);
    if (v7 == a2 && *(_DWORD *)(a1 + 4 * v6) == a3) {
      break;
    }
    if (v7 == a3 && *(_DWORD *)(a1 + 4 * v6) == a2) {
      break;
    }
    ++v3;
    if (v5 == 3) {
      return (uint64_t)v4;
    }
  }
  unsigned int v8 = v3 + 2;
  unsigned int v9 = v3 - 1;
  if (v8 >= 3) {
    unsigned int v8 = v9;
  }
  return a1 + 4 * (int)v8 + 12;
}

_DWORD *sub_1B6E07500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = -3;
  do
  {
    unsigned int v7 = v6 + 4;
    int v8 = v6 + 1;
    if (v6 == -1) {
      unsigned int v7 = 0;
    }
    if (v6 == -3) {
      int v9 = 2;
    }
    else {
      int v9 = v6 + 2;
    }
    int v10 = *(_DWORD *)(a2 + 4 * v7);
    int v11 = *(_DWORD *)(a2 + 4 * v9);
    int v12 = *(_DWORD *)sub_1B6E0748C(a3, v11, v10);
    float32x4_t v13 = (int *)sub_1B6E0748C(a2, v10, v11);
    *(_DWORD *)sub_1B6E0748C(*(void *)(v5 + 8 * *v13), v11, v10) = v12;
    int v14 = *(_DWORD *)sub_1B6E0748C(a2, v10, v11);
    float v15 = (int *)sub_1B6E0748C(a3, v11, v10);
    uint64_t result = (_DWORD *)sub_1B6E0748C(*(void *)(v5 + 8 * *v15), v10, v11);
    *uint64_t result = v14;
    int v6 = v8;
  }
  while (v8);
  return result;
}

void sub_1B6E075E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B6E07500(a1, a2, a3);
  *(void *)(*(void *)(a1 + 16) + 8 * *(int *)(a2 + 2sub_1B6DBC5D4((uint64_t)(this + 4)) = 0;
  sub_1B6E073C4(a2);
  *(void *)(*(void *)(a1 + 16) + 8 * *(int *)(a3 + 2sub_1B6DBC5D4((uint64_t)(this + 4)) = 0;

  sub_1B6E073C4(a3);
}

uint64_t sub_1B6E07650(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8 = sub_1B6E073B8(36, 16);
  *(_DWORD *)uint64_t v8 = a2;
  *(_DWORD *)(v8 + 4) = a3;
  *(_DWORD *)(v8 + 8) = a4;
  *(void *)(v8 + 1sub_1B6DC4968((unsigned int *)this + 2) = -1;
  *(void *)(v8 + 28) = 0xFFFFFFFFLL;
  int v9 = *(_DWORD *)(a1 + 4);
  int v10 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v8 + 20) = -1;
  *(_DWORD *)(v8 + 24) = v9;
  if (v9 == v10)
  {
    int v11 = v9 ? 2 * v9 : 1;
    if (v9 < v11)
    {
      if (v11)
      {
        uint64_t v12 = sub_1B6E073B8(8 * v11, 16);
        int v9 = *(_DWORD *)(a1 + 4);
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (v9 >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          *(void *)(v12 + v13) = *(void *)(*(void *)(a1 + 16) + v13);
          v13 += 8;
        }
        while (8 * v9 != v13);
      }
      uint64_t v14 = *(void *)(a1 + 16);
      if (v14 && *(unsigned char *)(a1 + 24))
      {
        sub_1B6E073C4(v14);
        int v9 = *(_DWORD *)(a1 + 4);
      }
      *(unsigned char *)(a1 + 24) = 1;
      *(void *)(a1 + 16) = v12;
      *(_DWORD *)(a1 + 8) = v11;
    }
  }
  *(void *)(*(void *)(a1 + 16) + 8 * v9) = v8;
  *(_DWORD *)(a1 + 4) = v9 + 1;
  return v8;
}

void sub_1B6E0775C(uint64_t a1, int *a2, int a3)
{
  int v6 = *a2;
  int v7 = a2[1];
  int v8 = a2[2];
  int v9 = *(_DWORD *)(a1 + 4);
  int v10 = (_DWORD *)sub_1B6E07650(a1, a3, v7, v8);
  int v11 = v9 + 2;
  unsigned __int16 v10[3] = a2[3];
  unsigned char v10[4] = v9 + 1;
  v10[5] = v9 + 2;
  *(_DWORD *)sub_1B6E0748C(*(void *)(*(void *)(a1 + 16) + 8 * a2[3]), v7, v8) = v9;
  uint64_t v12 = (_DWORD *)sub_1B6E07650(a1, a3, v8, v6);
  v12[3] = a2[4];
  v12[4] = v9 + 2;
  uint64_t v22 = (uint64_t)v12;
  void v12[5] = v9;
  *(_DWORD *)sub_1B6E0748C(*(void *)(*(void *)(a1 + 16) + 8 * a2[4]), v8, v6) = v9 + 1;
  uint64_t v13 = (_DWORD *)sub_1B6E07650(a1, a3, v6, v7);
  _OWORD v13[3] = a2[5];
  v13[4] = v9;
  void v13[5] = v9 + 1;
  uint64_t v14 = *(void *)(a1 + 16);
  *(_DWORD *)sub_1B6E0748C(*(void *)(v14 + 8 * a2[5]), v6, v7) = v11;
  float v15 = *(_DWORD **)(v14 + 8 * (int)v10[3]);
  if (*v15 == a3 || v15[1] == a3 || v15[2] == a3)
  {
    sub_1B6E075E8(a1, (uint64_t)v10, (uint64_t)v15);
    uint64_t v14 = *(void *)(a1 + 16);
  }
  int8x16_t v18 = *(_DWORD **)(v14 + 8 * *(int *)(v22 + 12));
  if (*v18 == a3 || v18[1] == a3 || v18[2] == a3)
  {
    sub_1B6E075E8(a1, v22, (uint64_t)v18);
    uint64_t v14 = *(void *)(a1 + 16);
  }
  int8x16_t v21 = *(_DWORD **)(v14 + 8 * (int)v13[3]);
  if (*v21 == a3 || v21[1] == a3 || v21[2] == a3)
  {
    sub_1B6E075E8(a1, (uint64_t)v13, (uint64_t)v21);
    uint64_t v14 = *(void *)(a1 + 16);
  }
  *(void *)(v14 + 8 * a2[6]) = 0;

  sub_1B6E073C4((uint64_t)a2);
}

uint64_t sub_1B6E07934(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  do
  {
    uint64_t v6 = *v5;
    if (!result || v6 && *(float *)(result + 32) < *(float *)(v6 + 32)) {
      uint64_t result = *v5;
    }
    ++v5;
    --v2;
  }
  while (v2);
  if (result && *(float *)(result + 32) <= a2) {
    return 0;
  }
  return result;
}

unint64_t sub_1B6E07994(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v39 = xmmword_1B6ED0400;
  signed int v7 = sub_1B6E07D34(a2, a3, (int8x8_t *)&v39, a4);
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  int8x16_t v38 = veorq_s8((int8x16_t)v39, v8);
  uint64_t v9 = sub_1B6E07D34(a2, a3, (int8x8_t *)&v38, a4);
  float32x4_t v10 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v7), *(float32x4_t *)(a2 + 16 * (int)v9));
  v10.i32[3] = 0;
  long long v39 = (__int128)v10;
  if (v7 == v9
    || (uint64_t v11 = v9,
        v12.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0],
        int32x2_t v13 = vceqz_f32(*(float32x2_t *)v12.f32),
        (v13.i8[4] & 1) != 0)
    && (v13.i8[0] & 1) != 0
    && v10.f32[0] == 0.0)
  {
    unsigned int v14 = -1;
LABEL_6:
    uint64_t v15 = 0xFFFFFFFFLL;
    return v14 | (unint64_t)(v15 << 32);
  }
  v12.i64[1] = v10.i64[0];
  int8x16_t v17 = (int8x16_t)vmlaq_f32(vmulq_f32(v10, (float32x4_t)xmmword_1B6ED0420), (float32x4_t)xmmword_1B6ED0410, v12);
  v18.i64[0] = vextq_s8(v17, v17, 4uLL).u64[0];
  v18.i64[1] = v17.u32[0];
  int8x16_t v19 = (int8x16_t)vmlaq_f32(vmulq_f32(v10, (float32x4_t)xmmword_1B6ED0440), (float32x4_t)xmmword_1B6ED0430, v12);
  v20.i64[0] = vextq_s8(v19, v19, 4uLL).u64[0];
  v20.i64[1] = v19.u32[0];
  int8x16_t v21 = (int8x16_t)vmulq_f32(v18, v18);
  *(float32x2_t *)v17.i8 = vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8);
  float32x4_t v22 = (float32x4_t)vextq_s8(v21, v21, 8uLL);
  *(float32x2_t *)v22.f32 = vadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v22.f32);
  v22.f32[0] = sqrtf(v22.f32[0]);
  int8x16_t v23 = (int8x16_t)vmulq_f32((float32x4_t)v20, (float32x4_t)v20);
  float32x2_t v24 = vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8);
  float32x4_t v25 = (float32x4_t)vextq_s8(v23, v23, 8uLL);
  *(float32x2_t *)v25.f32 = vadd_f32(v24, *(float32x2_t *)v25.f32);
  v25.f32[0] = sqrtf(v25.f32[0]);
  int8x16_t v40 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v22, v25), 0), (int8x16_t)v18, v20), 1.0 / fmaxf(v22.f32[0], v25.f32[0]));
  float32x4_t v41 = (float32x4_t)v20;
  int v26 = sub_1B6E07D34(a2, a3, (int8x8_t *)&v40, a4);
  if (v26 == v7 || (int v27 = v26, v26 == v11))
  {
    v28.i64[0] = 0x8000000080000000;
    v28.i64[1] = 0x8000000080000000;
    int8x16_t v38 = veorq_s8(v40, v28);
    int v27 = sub_1B6E07D34(a2, a3, (int8x8_t *)&v38, a4);
  }
  unsigned int v14 = -1;
  if (v27 == v7) {
    goto LABEL_6;
  }
  uint64_t v15 = 0xFFFFFFFFLL;
  if (v27 == v11) {
    return v14 | (unint64_t)(v15 << 32);
  }
  float32x4_t v29 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v27), *(float32x4_t *)(a2 + 16 * v7));
  int8x8_t v30 = (int8x8_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v29.i32[3] = 0;
  *(int8x8_t *)v31.f32 = vext_s8(*(int8x8_t *)v29.f32, v30, 4uLL);
  v31.i64[1] = v29.i64[0];
  *(int8x8_t *)v32.f32 = vext_s8(*(int8x8_t *)&v39, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), 4uLL);
  v32.i64[1] = v39;
  int8x16_t v33 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v31, (float32x4_t)v39)), v29, v32);
  v34.i64[0] = vextq_s8(v33, v33, 4uLL).u64[0];
  v34.i64[1] = v33.u32[0];
  int8x16_t v35 = (int8x16_t)vmulq_f32(v34, v34);
  int8x16_t v40 = (int8x16_t)v29;
  float32x4_t v41 = vmulq_n_f32(v34, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0]));
  int v36 = sub_1B6E07D34(a2, a3, (int8x8_t *)&v41, a4);
  if (v36 == v27 || v36 == v7 || v36 == v11)
  {
    v37.i64[0] = 0x8000000080000000;
    v37.i64[1] = 0x8000000080000000;
    int8x16_t v38 = veorq_s8((int8x16_t)v41, v37);
    int v36 = sub_1B6E07D34(a2, a3, (int8x8_t *)&v38, a4);
  }
  unsigned int v14 = -1;
  if (v36 == v27 || v36 == v7) {
    goto LABEL_6;
  }
  uint64_t v15 = 0xFFFFFFFFLL;
  if (v36 != v11)
  {
    unsigned int v14 = v7;
    uint64_t v15 = v11;
  }
  return v14 | (unint64_t)(v15 << 32);
}

uint64_t sub_1B6E07D34(uint64_t a1, int a2, int8x8_t *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  float32x4_t v8 = (float32x4_t)xmmword_1B6E4F320;
  float32x4_t v9 = (float32x4_t)xmmword_1B6E724A0;
  float32x4_t v10 = (float32x4_t)xmmword_1B6E4F390;
  uint64_t v11 = a2;
  float32x4_t v51 = (float32x4_t)vdupq_n_s32(0x3CCCCCCDu);
LABEL_2:
  if (a2 < 1)
  {
    int v14 = -1;
  }
  else
  {
    uint64_t v12 = 0;
    float32x4_t v13 = *(float32x4_t *)a3->i8;
    int v14 = -1;
    do
    {
      if (*(_DWORD *)(v7 + 4 * v12))
      {
        if (v14 == -1
          || (int8x16_t v15 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v12), v13),
              int8x16_t v16 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v14), v13),
              (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vpadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8))).u8[0] & 1) != 0))
        {
          int v14 = v12;
        }
      }
      ++v12;
    }
    while (v11 != v12);
  }
  uint64_t v17 = v14;
  if (*(_DWORD *)(v7 + 4 * v14) != 3)
  {
    int v18 = 0;
    *(int8x8_t *)v19.f32 = vext_s8(*a3, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), 4uLL);
    *(int8x8_t *)&v19.u32[2] = *a3;
    int8x16_t v20 = (int8x16_t)vmlaq_f32(vmulq_f32(v19, v9), v8, *(float32x4_t *)a3->i8);
    v21.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
    v21.i64[1] = v20.u32[0];
    int8x16_t v22 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v19, v8)), v10, *(float32x4_t *)a3->i8);
    v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
    v23.i64[1] = v22.u32[0];
    int8x16_t v24 = (int8x16_t)vmulq_f32(v21, v21);
    float32x2_t v25 = vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8);
    float32x4_t v26 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
    *(float32x2_t *)v26.f32 = vadd_f32(*(float32x2_t *)v26.f32, v25);
    v26.f32[0] = sqrtf(v26.f32[0]);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v23, v23);
    float32x2_t v28 = vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8);
    float32x4_t v29 = (float32x4_t)vextq_s8(v27, v27, 8uLL);
    *(float32x2_t *)v29.f32 = vadd_f32(*(float32x2_t *)v29.f32, v28);
    v29.f32[0] = sqrtf(v29.f32[0]);
    float32x4_t v30 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v26, v29), 0), (int8x16_t)v21, (int8x16_t)v23), 1.0 / fmaxf(v26.f32[0], v29.f32[0]));
    v26.i64[0] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL).u64[0];
    v26.i64[1] = v30.i64[0];
    float32x4_t v53 = v30;
    float32x4_t v54 = *(float32x4_t *)a3->i8;
    int8x16_t v31 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v26, *(float32x4_t *)a3->i8)), v19, v30);
    v19.i64[0] = vextq_s8(v31, v31, 4uLL).u64[0];
    v19.i64[1] = v31.u32[0];
    float32x4_t v52 = v19;
    int v32 = -1;
    while (1)
    {
      int v33 = v32;
      float v34 = (float)v18;
      __float2 v35 = __sincosf_stret((float)v18 * 0.017453);
      if (a2 < 1)
      {
        int v32 = -1;
      }
      else
      {
        uint64_t v36 = 0;
        float32x4_t v37 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(v52, v35.__cosval), v53, v35.__sinval), v51);
        v37.i32[3] = 0;
        float32x4_t v38 = vaddq_f32(v54, v37);
        int v32 = -1;
        do
        {
          if (*(_DWORD *)(v7 + 4 * v36))
          {
            if (v32 == -1
              || (int8x16_t v39 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v36), v38),
                  int8x16_t v40 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v32), v38),
                  (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8))).u8[0] & 1) != 0))
            {
              int v32 = v36;
            }
          }
          ++v36;
        }
        while (v11 != v36);
      }
      if (v33 == v17 && v32 == v17) {
        break;
      }
      if (v33 != -1 && v33 != v32)
      {
        for (float i = v34 + -40.0; i <= v34; v33 = v46)
        {
          __float2 v42 = __sincosf_stret(i * 0.017453);
          if (a2 < 1)
          {
            if ((v33 & v17) == 0xFFFFFFFF) {
              goto LABEL_43;
            }
            int v46 = -1;
          }
          else
          {
            uint64_t v43 = 0;
            float32x4_t v44 = vmulq_f32(vmlaq_n_f32(vmulq_n_f32(v52, v42.__cosval), v53, v42.__sinval), v51);
            v44.i32[3] = 0;
            float32x4_t v45 = vaddq_f32(v54, v44);
            int v46 = -1;
            do
            {
              if (*(_DWORD *)(v7 + 4 * v43))
              {
                if (v46 == -1
                  || (int8x16_t v47 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v43), v45),
                      int8x16_t v48 = (int8x16_t)vmulq_f32(*(float32x4_t *)(a1 + 16 * v46), v45),
                      (vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8)), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8))).u8[0] & 1) != 0))
                {
                  int v46 = v43;
                }
              }
              ++v43;
            }
            while (v11 != v43);
            if (v33 == v17 && v46 == v17) {
              goto LABEL_43;
            }
          }
          float i = i + 5.0;
        }
      }
      BOOL v49 = v18 >= 0x13C;
      v18 += 45;
      if (v49)
      {
        *(_DWORD *)(v7 + 4 * v17) = 0;
        float32x4_t v9 = (float32x4_t)xmmword_1B6E724A0;
        float32x4_t v8 = (float32x4_t)xmmword_1B6E4F320;
        float32x4_t v10 = (float32x4_t)xmmword_1B6E4F390;
        goto LABEL_2;
      }
    }
LABEL_43:
    *(_DWORD *)(v7 + 4 * v17) = 3;
  }
  return v17;
}

uint64_t sub_1B6E080D0(uint64_t a1, float32x4_t *a2, uint64_t a3, int a4)
{
  if ((int)a3 < 4) {
    return 0;
  }
  int v106 = a4 - 4;
  float32x4_t v112 = *a2;
  uint64_t v8 = 4 * a3;
  uint64_t v9 = a3;
  uint64_t v10 = sub_1B6E073B8(v8, 16);
  int v119 = 0;
  uint64_t v11 = sub_1B6E073B8(v8, 16);
  float32x4_t v12 = v112;
  uint64_t v13 = v11;
  uint64_t v14 = 0;
  char v122 = 1;
  uint64_t v121 = v11;
  int v120 = a3;
  float32x4_t v15 = v112;
  int v108 = a3;
  uint64_t v16 = a3;
  do
  {
    uint64_t v17 = v119;
    if (v119 == v120)
    {
      int v18 = v119 ? 2 * v119 : 1;
      if (v119 < v18)
      {
        float32x4_t v109 = v15;
        float32x4_t v113 = v12;
        if (v18)
        {
          uint64_t v11 = sub_1B6E073B8(4 * v18, 16);
          uint64_t v19 = v11;
        }
        else
        {
          uint64_t v19 = 0;
        }
        if (v119 < 1)
        {
          if (!v13)
          {
LABEL_18:
            char v122 = 1;
            uint64_t v121 = v19;
            int v120 = v18;
            uint64_t v13 = v19;
            LODWORD(v17) = v119;
            float32x4_t v15 = v109;
            float32x4_t v12 = v113;
            goto LABEL_19;
          }
        }
        else
        {
          int8x16_t v20 = (_DWORD *)v19;
          float32x4_t v21 = (int *)v13;
          do
          {
            int v22 = *v21++;
            *v20++ = v22;
            --v17;
          }
          while (v17);
        }
        sub_1B6E073C4(v13);
        goto LABEL_18;
      }
    }
LABEL_19:
    *(_DWORD *)(v13 + 4 * (int)v17) = 1;
    ++v119;
    if (v14 != v16 || (!v14 ? (uint64_t v23 = 1) : (uint64_t v23 = (2 * v14)), (int)v16 >= (int)v23))
    {
      uint64_t v23 = v16;
      goto LABEL_34;
    }
    float32x4_t v110 = v15;
    float32x4_t v114 = v12;
    if (v23)
    {
      uint64_t v11 = sub_1B6E073B8(4 * v23, 16);
      uint64_t v24 = v11;
      if (v14) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v24 = 0;
      if (v14)
      {
LABEL_26:
        for (uint64_t i = 0; i != v14; ++i)
          *(_DWORD *)(v24 + 4 * i) = *(_DWORD *)(v10 + 4 * i);
        goto LABEL_32;
      }
    }
    if (!v10)
    {
      uint64_t v23 = 1;
      goto LABEL_33;
    }
LABEL_32:
    sub_1B6E073C4(v10);
LABEL_33:
    uint64_t v10 = v24;
    float32x4_t v15 = v110;
    float32x4_t v12 = v114;
LABEL_34:
    *(_DWORD *)(v10 + 4 * v14) = 0;
    float32x4_t v26 = a2[v14];
    float32x4_t v12 = vminq_f32(v12, v26);
    float32x4_t v15 = vmaxq_f32(v15, v26);
    ++v14;
    uint64_t v16 = v23;
  }
  while (v14 != v9);
  float32x4_t v111 = v15;
  float32x4_t v115 = v12;
  int64_t v27 = sub_1B6E07994(v11, (uint64_t)a2, v108, (uint64_t)v118);
  uint64_t v29 = v27;
  if (v27 == -1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    int v30 = v28;
    unint64_t v31 = HIDWORD(v28);
    uint64_t v32 = v28 >> 32;
    __asm { FMOV            V1.4S, #0.25 }
    float32x4_t v37 = vmulq_f32(vaddq_f32(vaddq_f32(a2[v27 >> 32], a2[(int)v27]), vaddq_f32(a2[(int)v28], a2[v28 >> 32])), _Q1);
    v37.i32[3] = 0;
    float32x4_t v117 = v37;
    uint64_t v38 = sub_1B6E07650(a1, v28, SHIDWORD(v28), SHIDWORD(v27));
    *(void *)(v38 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0x300000002;
    *(_DWORD *)(v38 + 20) = 1;
    uint64_t v39 = sub_1B6E07650(a1, v31, v30, v29);
    *(void *)(v39 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0x200000003;
    *(_DWORD *)(v39 + 20) = 0;
    uint64_t v40 = sub_1B6E07650(a1, v29, SHIDWORD(v29), v31);
    *(void *)(v40 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0x100000000;
    *(_DWORD *)(v40 + 20) = 3;
    uint64_t v41 = sub_1B6E07650(a1, SHIDWORD(v29), v29, v30);
    *(void *)(v41 + 1sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(_DWORD *)(v41 + 20) = 2;
    *(_DWORD *)(v10 + 4 * v3sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(_DWORD *)(v10 + 4 * v30) = 1;
    *(_DWORD *)(v10 + 4 * (v29 >> 32)) = 1;
    *(_DWORD *)(v10 + 4 * (int)v29) = 1;
    if (*(int *)(a1 + 4) >= 1)
    {
      uint64_t v42 = 0;
      do
      {
        uint64_t v43 = *(int **)(*(void *)(a1 + 16) + 8 * v42);
        float32x4_t v44 = a2[v43[1]];
        float32x4_t v45 = vsubq_f32(v44, a2[*v43]);
        int8x8_t v46 = (int8x8_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
        v45.i32[3] = 0;
        float32x4_t v47 = vsubq_f32(a2[v43[2]], v44);
        int8x8_t v48 = (int8x8_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
        v47.i32[3] = 0;
        *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v45.f32, v46, 4uLL);
        v49.i64[1] = v45.i64[0];
        *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v47.f32, v48, 4uLL);
        v50.i64[1] = v47.i64[0];
        int8x16_t v51 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v49, v47)), v45, v50);
        v52.i64[0] = vextq_s8(v51, v51, 4uLL).u64[0];
        v52.i64[1] = v51.u32[0];
        int8x16_t v53 = (int8x16_t)vmulq_f32(v52, v52);
        float v54 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), vpadd_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8)).f32[0]);
        float32x4_t v55 = (float32x4_t)xmmword_1B6E4F300;
        if (v54 != 0.0)
        {
          float32x4_t v55 = vmulq_n_f32(v52, 1.0 / v54);
          v55.i32[3] = 0;
        }
        float32x4_t v116 = v55;
        int v56 = sub_1B6E07D34((uint64_t)a2, v108, (int8x8_t *)&v116, (uint64_t)v118);
        v43[7] = v56;
        float32x4_t v57 = vsubq_f32(a2[v56], a2[*v43]);
        v57.i32[3] = 0;
        int8x16_t v58 = (int8x16_t)vmulq_f32(v116, v57);
        v43[8] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vpadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8)).u32[0];
        ++v42;
      }
      while (v42 < *(int *)(a1 + 4));
    }
    if (a4) {
      int v59 = v106;
    }
    else {
      int v59 = 999999996;
    }
    if (v59 >= 1)
    {
      float32x4_t v60 = vsubq_f32(v111, v115);
      v60.i32[3] = 0;
      int8x16_t v61 = (int8x16_t)vmulq_f32(v60, v60);
      *(float *)v61.i32 = sqrtf(vadd_f32(vpadd_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)).f32[0]);
      float v62 = *(float *)v61.i32 * 0.001;
      float v63 = *(float *)v61.i32 * 0.00001;
      float v64 = (float)(*(float *)v61.i32 * 0.0001) * (float)(*(float *)v61.i32 * 0.001);
      while (1)
      {
        uint64_t v65 = sub_1B6E07934(a1, v62);
        if (!v65) {
          goto LABEL_82;
        }
        uint64_t v66 = *(int *)(v65 + 28);
        *(_DWORD *)(v10 + 4 * v66) = 1;
        uint64_t v67 = *(int *)(a1 + 4);
        if (!v67) {
          goto LABEL_80;
        }
        uint64_t v68 = v67 - 1;
        do
        {
          int v69 = *(int **)(*(void *)(a1 + 16) + 8 * v68);
          if (v69)
          {
            v116.i64[0] = *(void *)v69;
            v116.i32[2] = v69[2];
            if (sub_1B6E073D8((uint64_t)a2, (int *)&v116, &a2[v66], v63)) {
              sub_1B6E0775C(a1, v69, v66);
            }
          }
        }
        while (v68--);
        int v71 = *(_DWORD *)(a1 + 4);
        if (!v71) {
          goto LABEL_80;
        }
        int v72 = *(_DWORD *)(a1 + 4);
        while (1)
        {
          --v72;
          uint64_t v73 = *(void *)(a1 + 16);
          long long v74 = *(_DWORD **)(v73 + 8 * v72);
          if (v74) {
            break;
          }
LABEL_69:
          if (!v72) {
            goto LABEL_70;
          }
        }
        _ZF = *v74 == v66 || v74[1] == v66;
        if (_ZF || v74[2] == v66) {
          break;
        }
LABEL_70:
        if (v71)
        {
          uint64_t v86 = v71 - 1;
          do
          {
            int8x16_t v87 = *(int **)(*(void *)(a1 + 16) + 8 * v86);
            if (v87)
            {
              if ((v87[7] & 0x80000000) == 0) {
                break;
              }
              float32x4_t v88 = a2[v87[1]];
              float32x4_t v89 = vsubq_f32(v88, a2[*v87]);
              int8x8_t v90 = (int8x8_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
              v89.i32[3] = 0;
              float32x4_t v91 = vsubq_f32(a2[v87[2]], v88);
              int8x8_t v92 = (int8x8_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
              v91.i32[3] = 0;
              *(int8x8_t *)v93.f32 = vext_s8(*(int8x8_t *)v89.f32, v90, 4uLL);
              v93.i64[1] = v89.i64[0];
              *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v91.f32, v92, 4uLL);
              v94.i64[1] = v91.i64[0];
              int8x16_t v95 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v93, v91)), v89, v94);
              v96.i64[0] = vextq_s8(v95, v95, 4uLL).u64[0];
              v96.i64[1] = v95.u32[0];
              int8x16_t v97 = (int8x16_t)vmulq_f32(v96, v96);
              float v98 = sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL), vpadd_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8)).f32[0]);
              float32x4_t v99 = (float32x4_t)xmmword_1B6E4F300;
              if (v98 != 0.0)
              {
                float32x4_t v99 = vmulq_n_f32(v96, 1.0 / v98);
                v99.i32[3] = 0;
              }
              float32x4_t v116 = v99;
              int v100 = sub_1B6E07D34((uint64_t)a2, v108, (int8x8_t *)&v116, (uint64_t)v118);
              v87[7] = v100;
              if (*(_DWORD *)(v10 + 4 * v100))
              {
                v87[7] = -1;
              }
              else
              {
                float32x4_t v101 = vsubq_f32(a2[v100], a2[*v87]);
                v101.i32[3] = 0;
                int8x16_t v102 = (int8x16_t)vmulq_f32(v116, v101);
                v87[8] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL), vpadd_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8)).u32[0];
              }
            }
          }
          while (v86--);
        }
LABEL_80:
        _VF = __OFSUB__(v59--, 1);
        if ((v59 < 0) ^ _VF | (v59 == 0)) {
          goto LABEL_82;
        }
      }
      v116.i64[0] = *(void *)v74;
      v116.i32[2] = v74[2];
      if (sub_1B6E073D8((uint64_t)a2, (int *)&v116, &v117, v63)) {
        goto LABEL_68;
      }
      float32x4_t v77 = a2[v116.i32[1]];
      float32x4_t v78 = vsubq_f32(v77, a2[v116.i32[0]]);
      int8x8_t v79 = (int8x8_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
      v78.i32[3] = 0;
      float32x4_t v80 = vsubq_f32(a2[v116.i32[2]], v77);
      int8x8_t v81 = (int8x8_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
      v80.i32[3] = 0;
      *(int8x8_t *)v82.f32 = vext_s8(*(int8x8_t *)v78.f32, v79, 4uLL);
      v82.i64[1] = v78.i64[0];
      *(int8x8_t *)v83.f32 = vext_s8(*(int8x8_t *)v80.f32, v81, 4uLL);
      v83.i64[1] = v80.i64[0];
      int8x16_t v84 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v82, v80)), v78, v83);
      v78.i64[0] = vextq_s8(v84, v84, 4uLL).u64[0];
      v78.i64[1] = v84.u32[0];
      int8x16_t v85 = (int8x16_t)vmulq_f32(v78, v78);
      if (sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), vpadd_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8)).f32[0]) < v64)
      {
LABEL_68:
        sub_1B6E0775C(a1, *(int **)(v73 + 8 * (int)v74[3]), v66);
        int v71 = *(_DWORD *)(a1 + 4);
        int v72 = v71;
      }
      goto LABEL_69;
    }
LABEL_82:
    uint64_t v4 = 1;
  }
  if (v121) {
    BOOL v104 = v122 == 0;
  }
  else {
    BOOL v104 = 1;
  }
  if (!v104) {
    sub_1B6E073C4(v121);
  }
  if (v10) {
    sub_1B6E073C4(v10);
  }
  return v4;
}

uint64_t sub_1B6E08828(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, int *a5, int a6)
{
  uint64_t result = sub_1B6E080D0(a1, a2, a3, a6);
  if (!result) {
    return result;
  }
  uint64_t v39 = a5;
  int v10 = *(_DWORD *)(a1 + 4);
  if (v10 < 1)
  {
    int v14 = 0;
    uint64_t v12 = 0;
    goto LABEL_26;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  int v14 = 0;
  do
  {
    if (!*(void *)(*(void *)(a1 + 16) + 8 * v11)) {
      goto LABEL_23;
    }
    uint64_t v15 = 0;
    uint64_t v16 = v14;
    do
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 16) + 8 * v11);
      if (v13 == v16)
      {
        int v18 = v16 ? 2 * v13 : 1;
        if (v13 < v18)
        {
          if (v18) {
            uint64_t v19 = sub_1B6E073B8(4 * v18, 16);
          }
          else {
            uint64_t v19 = 0;
          }
          if (v16 < 1)
          {
            if (!v12)
            {
LABEL_20:
              int v13 = v18;
              uint64_t v12 = v19;
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v20 = v13;
            float32x4_t v21 = (_DWORD *)v19;
            int v22 = (int *)v12;
            do
            {
              int v23 = *v22++;
              *v21++ = v23;
              --v20;
            }
            while (v20);
          }
          sub_1B6E073C4(v12);
          goto LABEL_20;
        }
      }
LABEL_21:
      *(_DWORD *)(v12 + 4 * v16++) = *(_DWORD *)(v17 + 4 * v15++);
    }
    while (v15 != 3);
    uint64_t v24 = *(void *)(a1 + 16);
    uint64_t v25 = *(void *)(v24 + 8 * v11);
    *(void *)(v24 + 8 * *(int *)(v25 + 2sub_1B6DBC5D4((uint64_t)(this + 4)) = 0;
    sub_1B6E073C4(v25);
    int v10 = *(_DWORD *)(a1 + 4);
    int v14 = v16;
LABEL_23:
    ++v11;
  }
  while (v11 < v10);
LABEL_26:
  *uint64_t v39 = v14 / 3;
  int v26 = *(_DWORD *)(a4 + 4);
  if (v26 < v14)
  {
    if (*(_DWORD *)(a4 + 8) < v14)
    {
      if (v14) {
        uint64_t v27 = sub_1B6E073B8(4 * v14, 16);
      }
      else {
        uint64_t v27 = 0;
      }
      LODWORD(v28) = *(_DWORD *)(a4 + 4);
      uint64_t v29 = *(void *)(a4 + 16);
      if ((int)v28 >= 1)
      {
        uint64_t v28 = v28;
        int v30 = (_DWORD *)v27;
        unint64_t v31 = *(int **)(a4 + 16);
        do
        {
          int v32 = *v31++;
          *v30++ = v32;
          --v28;
        }
        while (v28);
        goto LABEL_36;
      }
      if (v29)
      {
LABEL_36:
        if (*(unsigned char *)(a4 + 24)) {
          sub_1B6E073C4(v29);
        }
      }
      *(unsigned char *)(a4 + 24) = 1;
      *(void *)(a4 + 16) = v27;
      *(_DWORD *)(a4 + 8) = v14;
    }
    bzero((void *)(*(void *)(a4 + 16) + 4 * v26), 4 * (v14 + ~v26) + 4);
  }
  *(_DWORD *)(a4 + 4) = v14;
  if (v14 >= 1)
  {
    int v33 = *(_DWORD **)(a4 + 16);
    uint64_t v34 = v14;
    __float2 v35 = (int *)v12;
    do
    {
      int v36 = *v35++;
      *v33++ = v36;
      --v34;
    }
    while (v34);
  }
  uint64_t v37 = *(int *)(a1 + 4);
  if ((v37 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
    {
      uint64_t v38 = *(void *)(a1 + 16);
      if (v38 && *(unsigned char *)(a1 + 24)) {
        sub_1B6E073C4(v38);
      }
      *(unsigned char *)(a1 + 24) = 1;
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    do
      *(void *)(*(void *)(a1 + 16) + 8 * v37++) = 0;
    while (v37);
  }
  *(_DWORD *)(a1 + 4) = 0;
  if (v12) {
    sub_1B6E073C4(v12);
  }
  return 1;
}

BOOL sub_1B6E08ACC(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, int a5)
{
  int v7 = a2;
  int v11 = 0;
  int v8 = sub_1B6E08828(a1, a3, a2, a4 + 24, &v11, a5);
  if (v8)
  {
    int v9 = v11;
    *(_DWORD *)(a4 + 8) = v11;
    *(void *)(a4 + 16) = a3;
    *(_DWORD *)a4 = v7;
    *(_DWORD *)(a4 + 4) = 3 * v9;
  }
  return v8 != 0;
}

uint64_t sub_1B6E08B40(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  char v69 = 1;
  float32x2_t __src = 0;
  HIDWORD(v9) = 0;
  uint64_t v67 = 0;
  uint64_t v64 = 0;
  int v65 = 0;
  uint64_t v66 = 0;
  unsigned int v10 = *(_DWORD *)(a2 + 4);
  if (v10 <= 8) {
    unsigned int v11 = 8;
  }
  else {
    unsigned int v11 = v10;
  }
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = (float32x4_t *)sub_1B6E073B8(16 * v11, 16);
    unsigned int v10 = *(_DWORD *)(a2 + 4);
  }
  unsigned int v61 = 0;
  LODWORD(v9) = *(_DWORD *)(a2 + 20);
  if (!sub_1B6E090A4(a1, v10, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16), &v61, v12->f32, (uint64_t)&v62, v9, a5, a6)) {
    goto LABEL_14;
  }
  uint64_t v13 = v61;
  if (v61)
  {
    int v14 = 0;
    float32x2_t v15 = v62;
    float v16 = v63;
    do
    {
      uint64_t v17 = (float32x2_t *)&v12[v14];
      *uint64_t v17 = vmul_f32(*v17, v15);
      v17[1].f32[0] = v17[1].f32[0] * v16;
      ++v14;
    }
    while (v13 != v14);
  }
  if (!sub_1B6E08ACC(a1, v13, v12, (uint64_t)&v64, *(_DWORD *)(a2 + 24)))
  {
LABEL_14:
    uint64_t v20 = 1;
    if (!v12) {
      goto LABEL_16;
    }
LABEL_15:
    sub_1B6E073C4((uint64_t)v12);
    goto LABEL_16;
  }
  unsigned int v18 = v64;
  if ((int)v64 < 1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = (const void *)sub_1B6E073B8(16 * v64, 16);
  }
  sub_1B6E096EC(a1, v66, v18, (uint64_t)v19, &v61, (uint64_t)__src, SHIDWORD(v64));
  if ((*(unsigned char *)a2 & 1) == 0)
  {
    *(unsigned char *)a3 = 1;
    uint64_t v22 = v61;
    *(_DWORD *)(a3 + 4) = v61;
    int v23 = *(_DWORD *)(a3 + 12);
    if (v23 < (int)v22 && *(_DWORD *)(a3 + 16) < (int)v22)
    {
      if (v22)
      {
        uint64_t v24 = sub_1B6E073B8(16 * (int)v22, 16);
        int v23 = *(_DWORD *)(a3 + 12);
      }
      else
      {
        uint64_t v24 = 0;
      }
      if (v23 >= 1)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 16 * v23;
        do
        {
          *(_OWORD *)(v24 + v28) = *(_OWORD *)(*(void *)(a3 + 24) + v28);
          v28 += 16;
        }
        while (v29 != v28);
      }
      uint64_t v30 = *(void *)(a3 + 24);
      if (v30) {
        BOOL v31 = *(unsigned char *)(a3 + 32) == 0;
      }
      else {
        BOOL v31 = 1;
      }
      if (!v31) {
        sub_1B6E073C4(v30);
      }
      *(unsigned char *)(a3 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
      *(void *)(a3 + 24) = v24;
      *(_DWORD *)(a3 + 16) = v22;
    }
    *(_DWORD *)(a3 + 1sub_1B6DC4968((unsigned int *)this + 2) = v22;
    int v32 = v65;
    int v33 = HIDWORD(v64) + v65;
    *(_DWORD *)(a3 + 40) = v65;
    *(_DWORD *)(a3 + 44) = v33;
    int v34 = *(_DWORD *)(a3 + 52);
    if (v34 >= v33) {
      goto LABEL_73;
    }
    if (*(_DWORD *)(a3 + 56) >= v33)
    {
LABEL_72:
      bzero((void *)(*(void *)(a3 + 64) + 4 * v34), 4 * (v33 + ~v34) + 4);
LABEL_73:
      *(_DWORD *)(a3 + 5sub_1B6DC4968((unsigned int *)this + 2) = v33;
      memcpy(*(void **)(a3 + 24), v19, 16 * v22);
      float v54 = (char *)__src;
      if (v32)
      {
        float32x4_t v55 = (_DWORD *)(*(void *)(a3 + 64) + 8);
        int v56 = __src;
        do
        {
          *(v55 - sub_1B6DC4968((unsigned int *)this + 2) = 3;
          if ((*(unsigned char *)a2 & 2) != 0)
          {
            *(v55 - 1) = v56[2];
            _DWORD *v55 = v56[1];
            float32x4_t v57 = v56;
          }
          else
          {
            *(v55 - 1) = *v56;
            _DWORD *v55 = v56[1];
            float32x4_t v57 = v56 + 2;
          }
          v55[1] = *v57;
          v56 += 3;
          v55 += 4;
          --v32;
        }
        while (v32);
      }
      goto LABEL_90;
    }
    if (v33) {
      uint64_t v35 = sub_1B6E073B8(4 * v33, 16);
    }
    else {
      uint64_t v35 = 0;
    }
    LODWORD(v36) = *(_DWORD *)(a3 + 52);
    uint64_t v46 = *(void *)(a3 + 64);
    if ((int)v36 < 1)
    {
      if (!v46)
      {
LABEL_71:
        *(unsigned char *)(a3 + 7sub_1B6DC4968((unsigned int *)this + 2) = 1;
        *(void *)(a3 + 64) = v35;
        *(_DWORD *)(a3 + 56) = v33;
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v36 = v36;
      float32x4_t v47 = (_DWORD *)v35;
      int8x8_t v48 = *(int **)(a3 + 64);
      do
      {
        int v49 = *v48++;
        *v47++ = v49;
        --v36;
      }
      while (v36);
    }
    if (*(unsigned char *)(a3 + 72)) {
      sub_1B6E073C4(v46);
    }
    goto LABEL_71;
  }
  *(unsigned char *)a3 = 0;
  uint64_t v25 = v61;
  *(_DWORD *)(a3 + 4) = v61;
  int v26 = *(_DWORD *)(a3 + 12);
  if (v26 < (int)v25 && *(_DWORD *)(a3 + 16) < (int)v25)
  {
    if (v25)
    {
      uint64_t v27 = sub_1B6E073B8(16 * (int)v25, 16);
      int v26 = *(_DWORD *)(a3 + 12);
    }
    else
    {
      uint64_t v27 = 0;
    }
    if (v26 >= 1)
    {
      uint64_t v37 = 0;
      uint64_t v38 = 16 * v26;
      do
      {
        *(_OWORD *)(v27 + v37) = *(_OWORD *)(*(void *)(a3 + 24) + v37);
        v37 += 16;
      }
      while (v38 != v37);
    }
    uint64_t v39 = *(void *)(a3 + 24);
    if (v39) {
      BOOL v40 = *(unsigned char *)(a3 + 32) == 0;
    }
    else {
      BOOL v40 = 1;
    }
    if (!v40) {
      sub_1B6E073C4(v39);
    }
    *(unsigned char *)(a3 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(void *)(a3 + 24) = v27;
    *(_DWORD *)(a3 + 16) = v25;
  }
  *(_DWORD *)(a3 + 1sub_1B6DC4968((unsigned int *)this + 2) = v25;
  uint64_t v42 = HIDWORD(v64);
  int v41 = v65;
  *(_DWORD *)(a3 + 40) = v65;
  *(_DWORD *)(a3 + 44) = v42;
  int v43 = *(_DWORD *)(a3 + 52);
  if (v43 < (int)v42)
  {
    if (*(_DWORD *)(a3 + 56) >= (int)v42)
    {
LABEL_84:
      bzero((void *)(*(void *)(a3 + 64) + 4 * v43), 4 * (v42 + ~v43) + 4);
      goto LABEL_85;
    }
    if (v42) {
      uint64_t v44 = sub_1B6E073B8(4 * (int)v42, 16);
    }
    else {
      uint64_t v44 = 0;
    }
    LODWORD(v45) = *(_DWORD *)(a3 + 52);
    uint64_t v50 = *(void *)(a3 + 64);
    if ((int)v45 < 1)
    {
      if (!v50)
      {
LABEL_83:
        *(unsigned char *)(a3 + 7sub_1B6DC4968((unsigned int *)this + 2) = 1;
        *(void *)(a3 + 64) = v44;
        *(_DWORD *)(a3 + 56) = v42;
        goto LABEL_84;
      }
    }
    else
    {
      uint64_t v45 = v45;
      int8x16_t v51 = (_DWORD *)v44;
      float32x4_t v52 = *(int **)(a3 + 64);
      do
      {
        int v53 = *v52++;
        *v51++ = v53;
        --v45;
      }
      while (v45);
    }
    if (*(unsigned char *)(a3 + 72)) {
      sub_1B6E073C4(v50);
    }
    goto LABEL_83;
  }
LABEL_85:
  *(_DWORD *)(a3 + 5sub_1B6DC4968((unsigned int *)this + 2) = v42;
  memcpy(*(void **)(a3 + 24), v19, 16 * v25);
  if ((*(unsigned char *)a2 & 2) != 0)
  {
    float v54 = (char *)__src;
    if (v41)
    {
      uint64_t v58 = 0;
      uint64_t v59 = *(void *)(a3 + 64);
      do
      {
        float32x4_t v60 = (_DWORD *)(v59 + v58);
        *float32x4_t v60 = *(_DWORD *)&v54[v58 + 8];
        v60[1] = *(_DWORD *)&v54[v58 + 4];
        v60[2] = *(_DWORD *)&v54[v58];
        v58 += 12;
        --v41;
      }
      while (v41);
    }
  }
  else
  {
    float v54 = (char *)__src;
    memcpy(*(void **)(a3 + 64), __src, 4 * v42);
  }
LABEL_90:
  if (v67)
  {
    if (v54 && v69) {
      sub_1B6E073C4((uint64_t)v54);
    }
    char v69 = 1;
    float32x2_t __src = 0;
  }
  if (v19) {
    sub_1B6E073C4((uint64_t)v19);
  }
  uint64_t v20 = 0;
  if (v12) {
    goto LABEL_15;
  }
LABEL_16:
  if (__src && v69) {
    sub_1B6E073C4((uint64_t)__src);
  }
  return v20;
}

BOOL sub_1B6E090A4(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, _DWORD *a5, float *a6, uint64_t a7, double a8, double a9, double a10)
{
  unsigned int v10 = a2;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return v10 != 0;
  }
  uint64_t v17 = *(int *)(a1 + 36);
  double v103 = a8;
  if ((v17 & 0x80000000) != 0)
  {
    if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
    {
      uint64_t v18 = *(void *)(a1 + 48);
      if (v18 && *(unsigned char *)(a1 + 56)) {
        sub_1B6E073C4(v18);
      }
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 40) = 0;
    }
    bzero((void *)(*(void *)(a1 + 48) + 4 * v17), 4 * ~v17 + 4);
    a8 = v103;
  }
  int v19 = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *a5 = 0;
  __asm { FMOV            V6.2S, #1.0 }
  *(float32x2_t *)a7 = _D6;
  *(_DWORD *)(a7 + 8) = 1065353216;
  *(void *)float32x4_t v105 = 0x7F7FFFFF7F7FFFFFLL;
  *(_DWORD *)&_OWORD v105[8] = 2139095039;
  *(_DWORD *)&v104[8] = -8388609;
  *(void *)BOOL v104 = 0xFF7FFFFFFF7FFFFFLL;
  uint64_t v24 = a3;
  do
  {
    for (uint64_t i = 0; i != 12; i += 4)
    {
      float v26 = *(float *)(v24 + i);
      if (v26 < *(float *)&v105[i]) {
        *(float *)&v105[i] = v26;
      }
      if (v26 > *(float *)&v104[i]) {
        *(float *)&v104[i] = v26;
      }
    }
    v24 += a4;
    ++v19;
  }
  while (v19 != v10);
  float v27 = *(float *)v104 - *(float *)v105;
  *(float *)&a10 = *(float *)v105 + (float)((float)(*(float *)v104 - *(float *)v105) * 0.5);
  float32x2_t v28 = vsub_f32(*(float32x2_t *)&v104[4], *(float32x2_t *)&v105[4]);
  float32x2_t v29 = vmla_f32(*(float32x2_t *)&v105[4], (float32x2_t)0x3F0000003F000000, v28);
  if (v10 >= 3 && v27 >= 0.000001 && v28.f32[0] >= 0.000001 && v28.f32[1] >= 0.000001)
  {
    int v30 = 0;
    *(float *)a7 = v27;
    *(float32x2_t *)(a7 + 4) = v28;
    float v31 = 1.0 / v27;
    float32x2_t v32 = vdiv_f32(_D6, v28);
    *(float *)&a10 = *(float *)&a10 * (float)(1.0 / v27);
    float32x2_t v33 = vmul_f32(v29, v32);
    float32x2_t v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0);
    float32x2_t v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
    uint64_t v36 = (float32x2_t *)(a6 + 1);
    unsigned int v102 = v10;
    while (1)
    {
      float v37 = *(float *)a3 * v31;
      float32x2_t v38 = vmul_f32(*(float32x2_t *)(a3 + 4), v32);
      uint64_t v39 = *a5;
      if (v39)
      {
        uint64_t v40 = 0;
        int v41 = v36;
        while (1)
        {
          if (vabds_f32(v41[-1].f32[1], v37) < *(float *)&a8)
          {
            int32x2_t v42 = vcgt_f32(v35, vabd_f32(*v41, v38));
            if (v42.i8[0] & 1) != 0 && (v42.i8[4]) {
              break;
            }
          }
          ++v40;
          v41 += 2;
          if (v39 == v40)
          {
            LODWORD(v40) = *a5;
            goto LABEL_33;
          }
        }
        v43.f32[0] = *(float *)a3 * v31;
        v43.i32[1] = v41[-1].i32[1];
        float32x2_t v44 = vsub_f32(v43, v34);
        float32x2_t v45 = vsub_f32(v38, v33);
        int32x2_t v46 = (int32x2_t)vmul_f32(v45, v45);
        float32x2_t v47 = vsub_f32(*v41, v33);
        int32x2_t v48 = (int32x2_t)vmul_f32(v47, v47);
        int32x2_t v49 = (int32x2_t)vadd_f32(vmla_f32((float32x2_t)vzip1_s32(v46, v48), v44, v44), (float32x2_t)vzip2_s32(v46, v48));
        if (vcgt_f32((float32x2_t)v49, (float32x2_t)vdup_lane_s32(v49, 1)).u8[0])
        {
          v41[-1].f32[1] = v37;
          *int v41 = v38;
        }
      }
      else
      {
        LODWORD(v40) = 0;
      }
      if (v40 == v39)
      {
LABEL_33:
        uint64_t v50 = &a6[4 * v39];
        *uint64_t v50 = v37;
        *(float32x2_t *)(v50 + 1) = v38;
        *a5 = v39 + 1;
      }
      LODWORD(v51) = *(_DWORD *)(a1 + 36);
      if (v51 != *(_DWORD *)(a1 + 40)) {
        goto LABEL_50;
      }
      int v52 = v51 ? 2 * v51 : 1;
      if ((int)v51 >= v52) {
        goto LABEL_50;
      }
      int v53 = a6;
      float v54 = a5;
      float32x4_t v55 = v36;
      if (v52)
      {
        uint64_t v56 = sub_1B6E073B8(4 * v52, 16);
        LODWORD(v51) = *(_DWORD *)(a1 + 36);
      }
      else
      {
        uint64_t v56 = 0;
      }
      uint64_t v57 = *(void *)(a1 + 48);
      if ((int)v51 >= 1) {
        break;
      }
      if (v57) {
        goto LABEL_47;
      }
LABEL_49:
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 48) = v56;
      *(_DWORD *)(a1 + 40) = v52;
      LODWORD(v51) = *(_DWORD *)(a1 + 36);
      LODWORD(a8) = LODWORD(v103);
      uint64_t v36 = v55;
      a5 = v54;
      a6 = v53;
      unsigned int v10 = v102;
LABEL_50:
      *(_DWORD *)(*(void *)(a1 + 48) + 4 * (int)v51) = v40;
      a3 += a4;
      ++*(_DWORD *)(a1 + 36);
      if (++v30 == v10)
      {
        *(_DWORD *)&_OWORD v105[8] = 2139095039;
        *(void *)float32x4_t v105 = 0x7F7FFFFF7F7FFFFFLL;
        *(_DWORD *)&v104[8] = -8388609;
        *(void *)BOOL v104 = 0xFF7FFFFFFF7FFFFFLL;
        uint64_t v61 = *a5;
        if (v61)
        {
          uint64_t v62 = 0;
          float v63 = a6;
          do
          {
            for (unint64_t j = 0; j != 12; j += 4)
            {
              float v65 = v63[j / 4];
              if (v65 < *(float *)&v105[j]) {
                *(float *)&v105[j] = v65;
              }
              if (v65 > *(float *)&v104[j]) {
                *(float *)&v104[j] = v65;
              }
            }
            ++v62;
            v63 += 4;
          }
          while (v62 != v61);
          float v66 = *(float *)&v104[4];
          float v67 = *(float *)v104;
          float v68 = *(float *)&v105[4];
          float v69 = *(float *)v105;
          float v70 = *(float *)&v104[8];
          float v71 = *(float *)&v105[8];
        }
        else
        {
          float v70 = -3.4028e38;
          float v71 = 3.4028e38;
          float v68 = 3.4028e38;
          float v66 = -3.4028e38;
          float v69 = 3.4028e38;
          float v67 = -3.4028e38;
        }
        float v79 = v67 - v69;
        float v80 = v66 - v68;
        float v81 = v70 - v71;
        if (v61 < 3 || v79 < 0.000001 || v80 < 0.000001 || v81 < 0.000001)
        {
          float v82 = v69 + (float)(v79 * 0.5);
          float v83 = v68 + (float)(v80 * 0.5);
          float v84 = v71 + (float)(v81 * 0.5);
          if (v79 >= 3.4028e38 || v79 < 0.000001) {
            float v86 = 3.4028e38;
          }
          else {
            float v86 = v79;
          }
          if (v80 < v86 && v80 >= 0.000001) {
            float v86 = v80;
          }
          if (v81 < v86 && v81 >= 0.000001) {
            float v86 = v81;
          }
          if (v86 == 3.4028e38)
          {
            float v79 = 0.01;
            float v80 = 0.01;
            float v89 = 0.01;
          }
          else
          {
            float v89 = v86 * 0.05;
            if (v79 < 0.000001) {
              float v79 = v89;
            }
            if (v80 < 0.000001) {
              float v80 = v89;
            }
            if (v81 >= 0.000001) {
              float v89 = v81;
            }
          }
          float v96 = v82 - v79;
          float v97 = v79 + v82;
          float v98 = v83 - v80;
          *a6 = v96;
          a6[1] = v83 - v80;
          float v99 = v80 + v83;
          float v100 = v84 - v89;
          a6[2] = v84 - v89;
          float v95 = v89 + v84;
          a6[4] = v97;
          a6[5] = v98;
          a6[6] = v100;
          a6[8] = v97;
          a6[9] = v99;
          a6[10] = v100;
          a6[12] = v96;
          a6[13] = v99;
          a6[14] = v100;
          a6[16] = v96;
          a6[17] = v98;
          a6[18] = v95;
          a6[20] = v97;
          a6[21] = v98;
          a6[22] = v95;
          a6[24] = v97;
          a6[25] = v99;
          a6[26] = v95;
          a6[28] = v96;
          a6[29] = v99;
          goto LABEL_118;
        }
        return v10 != 0;
      }
    }
    uint64_t v51 = v51;
    uint64_t v58 = (_DWORD *)v56;
    uint64_t v59 = *(int **)(a1 + 48);
    do
    {
      int v60 = *v59++;
      *v58++ = v60;
      --v51;
    }
    while (v51);
LABEL_47:
    if (*(unsigned char *)(a1 + 56)) {
      sub_1B6E073C4(v57);
    }
    goto LABEL_49;
  }
  if (v27 >= 3.4028e38 || v27 <= 0.000001) {
    float v73 = 3.4028e38;
  }
  else {
    float v73 = *(float *)v104 - *(float *)v105;
  }
  if (v28.f32[0] < v73 && v28.f32[0] > 0.000001) {
    float v73 = v28.f32[0];
  }
  if (v28.f32[1] < v73 && v28.f32[1] > 0.000001) {
    float v73 = v28.f32[1];
  }
  if (v73 == 3.4028e38)
  {
    float v76 = 0.01;
    float v77 = 0.01;
    float v78 = 0.01;
  }
  else
  {
    float v76 = v73 * 0.05;
    if (v27 >= 0.000001) {
      float v78 = *(float *)v104 - *(float *)v105;
    }
    else {
      float v78 = v76;
    }
    if (v28.f32[0] >= 0.000001) {
      float v77 = v28.f32[0];
    }
    else {
      float v77 = v76;
    }
    if (v28.f32[1] >= 0.000001) {
      float v76 = v28.f32[1];
    }
  }
  float v90 = *(float *)&a10 - v78;
  float v91 = v78 + *(float *)&a10;
  float v92 = v29.f32[0] - v77;
  *a6 = v90;
  a6[1] = v29.f32[0] - v77;
  float v93 = v77 + v29.f32[0];
  float v94 = v29.f32[1] - v76;
  a6[2] = v29.f32[1] - v76;
  float v95 = v76 + v29.f32[1];
  a6[4] = v91;
  a6[5] = v92;
  a6[6] = v94;
  a6[8] = v91;
  a6[9] = v93;
  a6[10] = v94;
  a6[12] = v90;
  a6[13] = v93;
  a6[14] = v94;
  a6[16] = v90;
  a6[17] = v92;
  a6[18] = v95;
  a6[20] = v91;
  a6[21] = v92;
  a6[22] = v95;
  a6[24] = v91;
  a6[25] = v93;
  a6[26] = v95;
  a6[28] = v90;
  a6[29] = v93;
LABEL_118:
  a6[30] = v95;
  *a5 = 8;
  return v10 != 0;
}

void sub_1B6E096EC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, int a7)
{
  uint64_t v14 = *(unsigned int *)(a1 + 36);
  if ((int)v14 < 1)
  {
    float v16 = 0;
  }
  else
  {
    size_t v15 = 4 * v14;
    float v16 = (void *)sub_1B6E073B8(4 * v14, 16);
    bzero(v16, v15);
    if (*(int *)(a1 + 36) >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)(a1 + 48);
      do
      {
        *((_DWORD *)v16 + v17) = *(_DWORD *)(v18 + 4 * v17);
        ++v17;
      }
      while (v17 < *(int *)(a1 + 36));
    }
  }
  if ((int)a3 < 1)
  {
    int v19 = 0;
  }
  else
  {
    int v19 = (void *)sub_1B6E073B8(4 * a3, 16);
    bzero(v19, 4 * a3);
  }
  bzero(v19, 4 * a3);
  *a5 = 0;
  if (a7 < 1)
  {
    if (!v19) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(int *)(a6 + 4 * v20);
      int v22 = *((_DWORD *)v19 + v21);
      if (v22)
      {
        *(_DWORD *)(a6 + 4 * v20) = v22 - 1;
      }
      else
      {
        *(_DWORD *)(a6 + 4 * v20) = *a5;
        int v23 = (_DWORD *)(a2 + 16 * v21);
        uint64_t v24 = *a5;
        uint64_t v25 = (_DWORD *)(a4 + 16 * v24);
        *uint64_t v25 = *v23;
        v25[1] = v23[1];
        v25[2] = v23[2];
        int v26 = *(_DWORD *)(a1 + 36);
        if (v26 >= 1)
        {
          for (uint64_t i = 0; i < v26; ++i)
          {
            if (*((_DWORD *)v16 + i) == v21)
            {
              *(_DWORD *)(*(void *)(a1 + 48) + 4 * i) = *a5;
              int v26 = *(_DWORD *)(a1 + 36);
            }
          }
          LODWORD(v24) = *a5;
        }
        *a5 = v24 + 1;
        *((_DWORD *)v19 + v21) = v24 + 1;
      }
      ++v20;
    }
    while (v20 != a7);
  }
  sub_1B6E073C4((uint64_t)v19);
LABEL_25:
  if (v16)
  {
    sub_1B6E073C4((uint64_t)v16);
  }
}

uint64_t sub_1B6E098D0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 12))
  {
    *(_DWORD *)(a2 + 4) = 0;
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3) {
      BOOL v4 = *(unsigned char *)(a2 + 32) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4) {
      sub_1B6E073C4(v3);
    }
    *(unsigned char *)(a2 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  if (*(_DWORD *)(a2 + 52))
  {
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v5 = *(void *)(a2 + 64);
    if (v5) {
      BOOL v6 = *(unsigned char *)(a2 + 72) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      sub_1B6E073C4(v5);
    }
    *(unsigned char *)(a2 + 7sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(void *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 5sub_1B6DC4968((unsigned int *)this + 2) = 0;
    *(_DWORD *)(a2 + 56) = 0;
  }
  return 0;
}

unint64_t sub_1B6E0995C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  BOOL v3 = v2 >= 0;
  if (v2 >= 0) {
    uint64_t v4 = *a1;
  }
  else {
    uint64_t v4 = -*a1;
  }
  BOOL v5 = v2 < 0;
  if (a2 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = -a2;
  }
  if (a2 >= 0) {
    BOOL v7 = v5;
  }
  else {
    BOOL v7 = v3;
  }
  unint64_t result = sub_1B6E099D4(v4, v6);
  if (v7) {
    return -(uint64_t)result;
  }
  return result;
}

unint64_t sub_1B6E099D4(uint64_t a1, uint64_t a2)
{
  return a2 * (unint64_t)a1
       + (((HIDWORD(a2) * a1) + (unint64_t)(a2 * HIDWORD(a1))) << 32);
}

unint64_t sub_1B6E09A14(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 >= 0;
  if (a1 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = -a1;
  }
  if (a2 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = -a2;
  }
  if (a2 >= 0) {
    BOOL v2 = a1 < 0;
  }
  unint64_t v5 = v4 * (unint64_t)v3
     + (((HIDWORD(v4) * v3) + (unint64_t)(v4 * HIDWORD(v3))) << 32);
  if (v2) {
    return -(uint64_t)v5;
  }
  else {
    return v5;
  }
}

uint64_t sub_1B6E09A88(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t result = (v3 - v4);
  if (v3 == v4)
  {
    if (v3)
    {
      unint64_t v7 = sub_1B6E099D4(*(void *)a1, *(void *)(a2 + 8));
      unint64_t v9 = v8;
      unint64_t v10 = sub_1B6E099D4(*(void *)(a1 + 8), *(void *)a2);
      if (v7 >= v10) {
        int v12 = v7 > v10;
      }
      else {
        int v12 = -1;
      }
      if (v9 <= v11) {
        int v13 = v12;
      }
      else {
        int v13 = 1;
      }
      if (v9 >= v11) {
        int v14 = v13;
      }
      else {
        int v14 = -1;
      }
      return (v14 * v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B6E09B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a1 + 32);
  int v3 = *(_DWORD *)(a2 + 32);
  if (v2 != v3) {
    return (v2 - v3);
  }
  if (!v2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 36)) {
    return -sub_1B6E09C24(a2, *(void *)a1 * v2);
  }
  sub_1B6E09CE4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), &v14, &v12);
  sub_1B6E09CE4(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), &v10, &v8);
  if (v13 < v9) {
    goto LABEL_8;
  }
  if (v13 > v9)
  {
LABEL_10:
    int v7 = 1;
    return (*(_DWORD *)(a1 + 32) * v7);
  }
  if (v12 >= v8)
  {
    if (v12 > v8) {
      goto LABEL_10;
    }
    if (v15 >= v11)
    {
      if (v15 <= v11)
      {
        int v7 = v14 > v10;
        if (v14 < v10) {
          int v7 = -1;
        }
        return (*(_DWORD *)(a1 + 32) * v7);
      }
      goto LABEL_10;
    }
  }
LABEL_8:
  int v7 = -1;
  return (*(_DWORD *)(a1 + 32) * v7);
}

uint64_t sub_1B6E09C24(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    uint64_t v3 = *(void *)a1 * *(int *)(a1 + 32);
    BOOL v4 = v3 <= a2;
    if (v3 >= a2) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = -1;
    }
    if (v4) {
      return v5;
    }
    else {
      return 1;
    }
  }
  else
  {
    if (a2 < 1)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 32);
      if ((a2 & 0x8000000000000000) == 0) {
        return v6;
      }
      if ((v6 & 0x80000000) == 0) {
        return 1;
      }
      a2 = -a2;
    }
    else
    {
      LODWORD(v6) = *(_DWORD *)(a1 + 32);
      if ((int)v6 < 1) {
        return 0xFFFFFFFFLL;
      }
    }
    unint64_t v7 = sub_1B6E0995C((uint64_t *)(a1 + 16), a2);
    unint64_t v9 = *(void *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v9 > v8)
      {
        int v10 = 1;
      }
      else
      {
        int v10 = *(void *)a1 > v7;
        if (*(void *)a1 < v7) {
          int v10 = -1;
        }
      }
    }
    else
    {
      int v10 = -1;
    }
    return (v6 * v10);
  }
}

unint64_t sub_1B6E09CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void *a6)
{
  unint64_t v12 = sub_1B6E099D4(a1, a3);
  uint64_t v14 = v13;
  unint64_t v15 = sub_1B6E099D4(a1, a4);
  uint64_t v17 = v16;
  unint64_t v18 = sub_1B6E099D4(a2, a3);
  uint64_t v20 = v19;
  unint64_t result = sub_1B6E099D4(a2, a4);
  uint64_t v23 = result + v17;
  BOOL v24 = __CFADD__(result, v17);
  BOOL v25 = __CFADD__(__CFADD__(v18, v15), v23);
  uint64_t v26 = __CFADD__(v18, v15) + v23;
  v25 |= __CFADD__(v20, v26);
  v26 += v20;
  BOOL v27 = v24 + v25 + v22;
  uint64_t v28 = v26 + 1;
  BOOL v29 = __CFADD__(v18 + v15, v14);
  if (!__CFADD__(v18 + v15, v14)) {
    uint64_t v28 = v26;
  }
  BOOL v30 = v26 == -1 && v29;
  *a5 = v12;
  a5[1] = v18 + v15 + v14;
  *a6 = v28;
  a6[1] = v27 + v30;
  return result;
}

uint64_t sub_1B6E09DB4(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)(a1 + 16);
  sub_1B6E09E3C((uint64_t)(a1 + 16));
  uint64_t v8 = v7;
  sub_1B6E09E3C(v6);
  int v9 = a1[40];
  *(_DWORD *)(v8 + 40) = v9;
  *(_DWORD *)(v10 + 40) = v9;
  *(void *)(v8 + 16) = v10;
  *(void *)(v8 + 24) = a3;
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = a2;
  *(void *)(v8 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(void *)(v10 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  int v11 = a1[44];
  int v12 = a1[45];
  a1[44] = v11 + 1;
  if (v11 >= v12) {
    a1[45] = v11 + 1;
  }
  return v8;
}

double sub_1B6E09E3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 8) = *(void *)(v3 + 16);
      uint64_t v2 = *(void *)v3;
    }
    else
    {
      uint64_t v3 = sub_1B6E073B8(24, 16);
      uint64_t v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(void *)(v3 + 16) = 0;
      uint64_t v2 = sub_1B6E073B8(48 * v4, 16);
      *(void *)uint64_t v3 = v2;
      *(void *)(v3 + 16) = *(void *)a1;
      *(void *)a1 = v3;
    }
    uint64_t v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      unint64_t v6 = 0;
      uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      int32x2_t v8 = (int32x2_t)0x100000000;
      int v9 = (void *)(v2 + 48);
      do
      {
        int32x2_t v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1B6E4F270)));
        int32x2_t v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if (v10.i8[0])
        {
          if (v11.i32[0] >= (int)v5) {
            int v12 = 0;
          }
          else {
            int v12 = v9;
          }
          *(v9 - 6) = v12;
        }
        if (v10.i8[4])
        {
          uint64_t v13 = v9 + 6;
          if (v11.i32[1] >= (int)v5) {
            uint64_t v13 = 0;
          }
          *int v9 = v13;
        }
        v6 += 2;
        int32x2_t v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 12;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(void *)(a1 + 16) = *(void *)v2;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  return result;
}

uint64_t sub_1B6E09F64(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t ***a4, uint64_t **a5)
{
  uint64_t v5 = a2[3];
  unint64_t v6 = a3[2];
  if (*(_DWORD *)(v5 + 104) == *((_DWORD *)v6 + 26) && *(_DWORD *)(v5 + 108) == *((_DWORD *)v6 + 27))
  {
    uint64x2_t v7 = (uint64_t *)v6[1];
    if (v7 == v6)
    {
      *a4 = (uint64_t **)v5;
      uint64_t v68 = v6[2];
      uint64_t result = 0;
      if (v68) {
        unint64_t v6 = *(uint64_t **)(v68 + 24);
      }
      goto LABEL_78;
    }
    int32x2_t v8 = (uint64_t *)*v6;
    uint64_t *v7 = *v6;
    v8[1] = (uint64_t)v7;
    if (v6 == *a3)
    {
      int v9 = *((_DWORD *)v8 + 26);
      int v10 = *((_DWORD *)v7 + 26);
      int32x2_t v11 = v8;
      if (v9 >= v10)
      {
        if (v9 != v10 || (int32x2_t v11 = v8, *((_DWORD *)v8 + 27) >= *((_DWORD *)v7 + 27))) {
          int32x2_t v11 = v7;
        }
      }
      *a3 = v11;
    }
    if (v6 == a3[1])
    {
      int v12 = *((_DWORD *)v8 + 26);
      int v13 = *((_DWORD *)v7 + 26);
      if (v12 <= v13 && (v12 != v13 || *((_DWORD *)v8 + 27) <= *((_DWORD *)v7 + 27))) {
        int32x2_t v8 = v7;
      }
      a3[1] = v8;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v17 = *a2;
  uint64_t v16 = a2[1];
  uint64_t v19 = *a3;
  unint64_t v18 = a3[1];
  char v20 = 1;
  int v21 = 1;
  uint64_t v22 = v18;
  uint64_t v23 = v16;
  do
  {
    BOOL v24 = (uint64_t **)v15;
    unint64_t v6 = v14;
    char v25 = v20;
    int v26 = *(_DWORD *)(v23 + 104);
    int v27 = (*((_DWORD *)v22 + 26) - v26) * v21;
    if (v27 < 1)
    {
      if (v27 < 0)
      {
        uint64_t v14 = v22;
        while (1)
        {
          uint64_t v15 = v23;
          int v52 = *(_DWORD *)(v23 + 108);
          int v53 = v27;
          while (1)
          {
            int v54 = *((_DWORD *)v14 + 27);
            int v55 = v54 - v52;
            uint64_t v56 = v14 + 1;
            if (v25) {
              uint64_t v56 = v14;
            }
            uint64_t v57 = (uint64_t *)*v56;
            if (v57 == v14) {
              break;
            }
            int v58 = *((_DWORD *)v57 + 27) - v54;
            if (v58 < 0) {
              break;
            }
            int v59 = *((_DWORD *)v57 + 26);
            int v60 = *((_DWORD *)v14 + 26);
            if (v59 != v60)
            {
              int v61 = (v59 - v60) * v21;
              if ((v61 & 0x80000000) == 0 || v58 * v53 > v61 * v55) {
                break;
              }
            }
            int v53 = (v59 - *(_DWORD *)(v15 + 104)) * v21;
            uint64_t v14 = v57;
          }
          uint64_t v62 = (uint64_t *)(v15 + 8);
          if (v25) {
            uint64_t v62 = (uint64_t *)v15;
          }
          uint64_t v23 = *v62;
          if (v23 == v15) {
            break;
          }
          int v63 = *(_DWORD *)(v23 + 104);
          int v27 = (*((_DWORD *)v14 + 26) - v63) * v21;
          if ((v27 & 0x80000000) == 0) {
            break;
          }
          int v64 = *(_DWORD *)(v23 + 108) - v52;
          if (v64 < 1) {
            break;
          }
          int v65 = *(_DWORD *)(v15 + 104);
          if (v63 != v65)
          {
            int v66 = (v63 - v65) * v21;
            if ((v66 & 0x80000000) == 0 || v64 * v53 >= v66 * v55) {
              break;
            }
          }
        }
      }
      else
      {
        int v45 = *(_DWORD *)(v23 + 108);
        uint64_t v46 = v23;
        do
        {
          uint64_t v15 = v46;
          float32x2_t v47 = (uint64_t *)(v46 + 8);
          if ((v25 & 1) == 0) {
            float32x2_t v47 = (uint64_t *)v15;
          }
          uint64_t v46 = *v47;
          if (v46 == v23) {
            break;
          }
          if (*(_DWORD *)(v46 + 104) != v26) {
            break;
          }
          BOOL v48 = *(_DWORD *)(v46 + 108) <= v45;
          int v45 = *(_DWORD *)(v46 + 108);
        }
        while (v48);
        int v49 = *((_DWORD *)v22 + 27);
        uint64_t v50 = v22;
        do
        {
          uint64_t v14 = v50;
          uint64_t v51 = v50 + 1;
          if (v25) {
            uint64_t v51 = v14;
          }
          uint64_t v50 = (uint64_t *)*v51;
          if (v50 == v22) {
            break;
          }
          if (*((_DWORD *)v50 + 26) != v26) {
            break;
          }
          BOOL v48 = *((_DWORD *)v50 + 27) < v49;
          int v49 = *((_DWORD *)v50 + 27);
        }
        while (!v48);
      }
    }
    else
    {
LABEL_18:
      int v28 = *(_DWORD *)(v23 + 108);
      BOOL v29 = (uint64_t *)(v23 + 8);
      if ((v25 & 1) == 0) {
        BOOL v29 = (uint64_t *)v23;
      }
      uint64_t v30 = *v29;
      float v31 = v22;
      while (1)
      {
        int v32 = v27;
        uint64_t v22 = v31;
        int v33 = *((_DWORD *)v31 + 27);
        int v34 = v33 - v28;
        if (v30 != v23)
        {
          int v35 = *(_DWORD *)(v30 + 108);
          int v36 = v35 - v28;
          if (v35 <= v28)
          {
            int v37 = *(_DWORD *)(v30 + 104);
            int v38 = *(_DWORD *)(v23 + 104);
            if (v37 == v38 || (int v39 = (v37 - v38) * v21, v39 < 0) && v36 * v32 <= v39 * v34)
            {
              int v27 = (*((_DWORD *)v22 + 26) - v37) * v21;
              uint64_t v23 = v30;
              goto LABEL_18;
            }
          }
        }
        uint64_t v40 = v22 + 1;
        if ((v25 & 1) == 0) {
          uint64_t v40 = v22;
        }
        float v31 = (uint64_t *)*v40;
        if ((uint64_t *)*v40 == v22) {
          break;
        }
        int v41 = *((_DWORD *)v31 + 26);
        int v27 = (v41 - *(_DWORD *)(v23 + 104)) * v21;
        if (v27 < 1) {
          break;
        }
        int v42 = *((_DWORD *)v31 + 27) - v33;
        if ((v42 & 0x80000000) == 0) {
          break;
        }
        int v43 = *((_DWORD *)v22 + 26);
        if (v41 != v43)
        {
          int v44 = (v41 - v43) * v21;
          if ((v44 & 0x80000000) == 0 || v42 * v32 >= v44 * v34) {
            break;
          }
        }
      }
      uint64_t v15 = v23;
      uint64_t v14 = v22;
    }
    char v20 = 0;
    int v21 = -1;
    uint64_t v22 = *a3;
    uint64_t v23 = *a2;
  }
  while ((v25 & 1) != 0);
  *(void *)(v15 + 8) = v14;
  uint64_t *v14 = v15;
  *BOOL v24 = v6;
  v6[1] = (uint64_t)v24;
  if (*((_DWORD *)v19 + 26) < *(_DWORD *)(v17 + 104)) {
    *a2 = (uint64_t)v19;
  }
  if (*((_DWORD *)v18 + 26) >= *(_DWORD *)(v16 + 104)) {
    a2[1] = (uint64_t)v18;
  }
  a2[3] = (uint64_t)a3[3];
  *a4 = v24;
  uint64_t result = 1;
LABEL_78:
  *a5 = v6;
  return result;
}

void sub_1B6E0A358(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v5 = a3 - a2;
  if (a3 == a2)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else if (v5 == 2)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 144) + 8 * a2);
    uint64_t v8 = v7 + 128;
    int v10 = *(_DWORD *)(v7 + 104);
    int v9 = *(_DWORD *)(v7 + 108);
    int v12 = *(_DWORD *)(v7 + 232);
    int v11 = *(_DWORD *)(v7 + 236);
    if (v10 == v12 && v9 == v11)
    {
      int v37 = *(_DWORD *)(v7 + 112);
      int v38 = *(_DWORD *)(v7 + 240);
      BOOL v39 = v37 <= v38;
      if (v37 == v38) {
        goto LABEL_5;
      }
      uint64_t v40 = v37 > v38;
      if (v39) {
        uint64_t v24 = *(void *)(*(void *)(a1 + 144) + 8 * a2);
      }
      else {
        uint64_t v24 = v7 + 128;
      }
      *(void *)(v7 + ((unint64_t)v40 << 7)) = v7 + (v40 << 7);
      *(void *)(v24 + 8) = v24;
      if (!v39) {
        uint64_t v8 = v7;
      }
      *(void *)a4 = v24;
      *(void *)(a4 + 8) = v24;
      uint64_t v25 = v24;
      uint64_t v7 = v24;
    }
    else
    {
      BOOL v14 = v10 == v12;
      BOOL v15 = v10 != v12;
      if (v9 != v11) {
        BOOL v15 = 0;
      }
      if (v9 >= v11) {
        BOOL v14 = 0;
      }
      BOOL v16 = v10 < v12;
      int v17 = v10 < v12 || v14;
      BOOL v18 = v16 && v15;
      *(void *)uint64_t v7 = v8;
      *(void *)(v7 + 8) = v8;
      *(void *)(v7 + sub_1B6DC7B98((uint64_t)this + 128) = v7;
      *(void *)(v7 + 136) = v7;
      int v19 = v9 < v11 || v18;
      BOOL v20 = v17 == 0;
      if (v17) {
        uint64_t v21 = v7;
      }
      else {
        uint64_t v21 = v7 + 128;
      }
      if (v20) {
        uint64_t v22 = v7;
      }
      else {
        uint64_t v22 = v7 + 128;
      }
      *(void *)a4 = v21;
      *(void *)(a4 + 8) = v22;
      BOOL v23 = v19 == 0;
      if (v19) {
        uint64_t v24 = v7;
      }
      else {
        uint64_t v24 = v7 + 128;
      }
      if (v23) {
        uint64_t v25 = v7;
      }
      else {
        uint64_t v25 = v7 + 128;
      }
    }
    *(void *)(a4 + 16) = v24;
    *(void *)(a4 + 24) = v25;
    int v41 = (void *)sub_1B6E09DB4((_DWORD *)a1, v7, v8);
    *int v41 = v41;
    v41[1] = v41;
    *(void *)(v7 + 16) = v41;
    int v42 = (void *)v41[2];
    *int v42 = v42;
    v42[1] = v42;
    *(void *)(v8 + 16) = v42;
  }
  else
  {
    if (v5 == 1)
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 144) + 8 * a2);
LABEL_5:
      *(void *)(v7 + 8) = v7;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = v7;
      *(void *)a4 = v7;
      *(void *)(a4 + 8) = v7;
      *(void *)(a4 + 16) = v7;
      *(void *)(a4 + 24) = v7;
      return;
    }
    int v27 = v5 + (v5 < 0);
    int v28 = a2 + (a3 - a2) / 2;
    if (v28 < a3)
    {
      int v29 = v27 >> 1;
      uint64_t v30 = *(void *)(a1 + 144);
      float v31 = *(_DWORD **)(v30 + 8 * (v28 - 1));
      int v32 = v31[26];
      int v33 = v31[27];
      int v34 = v31[28];
      uint64_t v35 = v29 + (uint64_t)a2;
      do
      {
        int v36 = *(_DWORD **)(v30 + 8 * v35);
        if (v36[26] != v32) {
          break;
        }
        if (v36[27] != v33) {
          break;
        }
        if (v36[28] != v34) {
          break;
        }
        ++v35;
      }
      while (v35 < a3);
    }
    sub_1B6E0A358(a1);
    memset(v43, 0, sizeof(v43));
    sub_1B6E0A358(a1);
    sub_1B6E0A554((_DWORD *)a1, a4, (uint64_t)v43);
  }
}

void sub_1B6E0A554(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 8)) {
    return;
  }
  if (!*(void *)(a2 + 8))
  {
    long long v31 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v31;
    return;
  }
  --a1[40];
  float32x4_t v117 = 0;
  float32x4_t v118 = 0;
  if (sub_1B6E09F64((uint64_t)a1, (uint64_t *)a2, (uint64_t **)a3, &v118, &v117))
  {
    int v101 = *((_DWORD *)v117 + 27);
    int v102 = *((_DWORD *)v117 + 26);
    uint64_t v5 = *((int *)v118 + 26);
    uint64_t v4 = *((int *)v118 + 27);
    uint64_t v6 = v102 - v5;
    uint64_t v7 = v101;
    uint64_t v8 = v101 - v4;
    float v90 = (int *)v118;
    float v92 = v117;
    int v87 = *((_DWORD *)v117 + 28);
    uint64_t v9 = *((int *)v118 + 28);
    uint64_t v10 = v87 - v9;
    uint64_t v11 = v5 - v102;
    uint64_t v12 = v10 * v6;
    unint64_t v113 = (v102 - v5) | ((unint64_t)v8 << 32);
    unint64_t v114 = v10 | 0xFFFFFFFF00000000;
    uint64_t v13 = v8 * v10;
    uint64_t v14 = -(v6 * (int)v6) - v8 * v8;
    BOOL v15 = v118[2];
    uint64_t v108 = 0;
    BOOL v16 = &unk_1B6E72000;
    uint64_t v97 = v12;
    uint64_t v17 = 0;
    if (v15)
    {
      BOOL v18 = v15;
      float v94 = v15;
      do
      {
        int v19 = (int *)v18[3];
        uint64_t v20 = v19[26] - v5;
        uint64_t v21 = v19[27] - v4;
        if (!(v21 * v11 + v8 * v20) && v20 * v12 + v13 * v21 + v14 * (v19[28] - v9) >= 1)
        {
          if (!v17) {
            goto LABEL_11;
          }
          long long v111 = xmmword_1B6E729A0;
          uint64_t v22 = v14;
          uint64_t v23 = v13;
          uint64_t v24 = v9;
          uint64_t v25 = v8;
          uint64_t v26 = v11;
          uint64_t v27 = v4;
          int v28 = sub_1B6E0ACEC((void *)v17, (uint64_t)v18, &v113, &v111);
          uint64_t v4 = v27;
          uint64_t v11 = v26;
          uint64_t v8 = v25;
          uint64_t v9 = v24;
          uint64_t v13 = v23;
          uint64_t v14 = v22;
          uint64_t v12 = v97;
          uint64_t v7 = v101;
          BOOL v77 = v28 == 1;
          BOOL v15 = v94;
          if (v77) {
LABEL_11:
          }
            uint64_t v17 = (uint64_t)v18;
        }
        BOOL v18 = (uint64_t *)*v18;
      }
      while (v18 != v15);
      uint64_t v108 = v17;
      int v29 = v92;
      uint64_t v30 = v102;
      BOOL v16 = (_OWORD *)&unk_1B6E72000;
    }
    else
    {
      int v29 = v117;
      uint64_t v30 = v102;
    }
    int v34 = (void *)v29[2];
    uint64_t v105 = 0;
    uint64_t v35 = 0;
    if (v34)
    {
      long long v95 = v16[154];
      int v36 = v34;
      do
      {
        int v37 = (int *)v36[3];
        uint64_t v38 = v37[26] - v30;
        uint64_t v39 = v37[27] - v7;
        if (!(v39 * v11 + v8 * v38) && v38 * v12 + v13 * v39 + v14 * (v37[28] - (uint64_t)v87) >= 1)
        {
          if (!v35
            || (long long v111 = v95,
                int v40 = sub_1B6E0ACEC((void *)v35, (uint64_t)v36, &v113, &v111),
                uint64_t v12 = v97,
                uint64_t v7 = v101,
                v40 == 2))
          {
            uint64_t v35 = (uint64_t)v36;
          }
        }
        int v36 = (void *)*v36;
      }
      while (v36 != v34);
      uint64_t v105 = v35;
      int v29 = v92;
    }
    int v32 = (uint64_t **)v90;
    if (!(v17 | v35)) {
      goto LABEL_31;
    }
    sub_1B6E0AF80((uint64_t)a1, v90, (int *)v29, &v108, &v105, 0, 0);
    if (v108)
    {
      int v32 = *(uint64_t ***)(v108 + 24);
      float32x4_t v118 = v32;
    }
    if (v105)
    {
      int v29 = *(uint64_t **)(v105 + 24);
      float32x4_t v117 = v29;
      int v102 = *((_DWORD *)v29 + 26);
      int v101 = *((_DWORD *)v29 + 27);
      int v41 = *((_DWORD *)v29 + 28);
    }
    else
    {
LABEL_31:
      int v41 = v87;
    }
    uint64_t v33 = (v41 + 1);
  }
  else
  {
    int v29 = v117;
    int v32 = v118;
    uint64_t v33 = *((unsigned int *)v117 + 28);
    int v101 = *((_DWORD *)v117 + 27);
    int v102 = *((_DWORD *)v117 + 26) + 1;
  }
  int v42 = 0;
  float v98 = 0;
  float v99 = 0;
  float32x4_t v88 = 0;
  uint64_t v89 = 0;
  float v100 = 0;
  int v43 = 0;
  float v93 = v29;
  uint64_t v96 = 0;
  char v44 = 1;
  float v91 = v32;
  int v45 = v29;
  while (1)
  {
    uint64_t v46 = *((int *)v32 + 26);
    uint64_t v47 = *((int *)v32 + 27);
    uint64_t v48 = *((int *)v45 + 26) - v46;
    uint64_t v49 = *((int *)v45 + 27) - v47;
    uint64_t v50 = *((int *)v32 + 28);
    uint64_t v51 = *((int *)v45 + 28) - v50;
    LODWORD(v46) = v102 - v46;
    LODWORD(v47) = v101 - v47;
    uint64_t v52 = v33;
    LODWORD(v50) = v33 - v50;
    v116[0] = v48 | ((unint64_t)v49 << 32);
    v116[1] = v51 | 0xFFFFFFFF00000000;
    unint64_t v113 = (int)v51 * (int)v47 - (int)v49 * (int)v50;
    unint64_t v114 = (int)v48 * (int)v50 - (int)v51 * (int)v46;
    uint64_t v115 = (int)v49 * (int)v46 - (int)v48 * (int)v47;
    *(void *)&long long v111 = v115 * v49 - v114 * v51;
    *((void *)&v111 + 1) = v113 * v51 - v115 * v48;
    unint64_t v112 = v114 * v48 - v113 * v49;
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    int v110 = 0;
    uint64_t v53 = (uint64_t)sub_1B6E0ADC0((uint64_t)a1, 0, (uint64_t)v32, v116, &v113, &v111, (uint64_t)&v108);
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    int v107 = 0;
    uint64_t v54 = (uint64_t)sub_1B6E0ADC0((uint64_t)a1, 1, (uint64_t)v45, v116, &v113, &v111, (uint64_t)&v105);
    if (!(v53 | v54))
    {
      float v78 = (uint64_t *)sub_1B6E09DB4(a1, (uint64_t)v32, (uint64_t)v45);
      *float v78 = (uint64_t)v78;
      v78[1] = (uint64_t)v78;
      _OWORD v32[2] = v78;
      float v79 = (void *)v78[2];
      *float v79 = v79;
      v79[1] = v79;
      v45[2] = (uint64_t)v79;
      return;
    }
    uint64_t v55 = v54;
    if (v53) {
      int v56 = -1;
    }
    else {
      int v56 = 1;
    }
    if (v53 && v54) {
      int v56 = sub_1B6E09A88((uint64_t)&v108, (uint64_t)&v105);
    }
    if (v44) {
      goto LABEL_42;
    }
    if ((v56 & 0x80000000) == 0)
    {
      if ((v107 & 0x80000000) == 0 || v106)
      {
LABEL_42:
        uint64_t v57 = v43;
        int v58 = (uint64_t *)sub_1B6E09DB4(a1, (uint64_t)v32, (uint64_t)v45);
        int v59 = v58;
        int v60 = (uint64_t **)v58;
        if (v42)
        {
          v42[1] = (uint64_t)v58;
          int v60 = v57;
        }
        uint64_t *v58 = (uint64_t)v42;
        int v61 = (uint64_t *)v58[2];
        uint64_t v62 = v61;
        if (v100)
        {
          uint64_t *v100 = (uint64_t)v61;
          uint64_t v62 = v99;
        }
        v61[1] = (uint64_t)v100;
        int v63 = v62;
      }
      else
      {
        int v60 = v43;
        int v59 = v42;
        int v63 = v99;
        int v61 = v100;
      }
      uint64_t v103 = v55;
      uint64_t v104 = v53;
      uint64_t v64 = v55;
      if (v56)
      {
        if (v56 < 0) {
          goto LABEL_61;
        }
      }
      else
      {
        int v65 = v60;
        sub_1B6E0AF80((uint64_t)a1, (int *)v118, (int *)v117, &v104, &v103, 0, 0);
        int v60 = v65;
        uint64_t v64 = v103;
      }
      if (!v64)
      {
LABEL_61:
        float v100 = v61;
LABEL_69:
        float v69 = v91;
        goto LABEL_70;
      }
      if (v98)
      {
        int v66 = v60;
        float v67 = *v98;
        if (*v98 != (uint64_t *)v55)
        {
          do
          {
            uint64_t v68 = (uint64_t *)*v67;
            sub_1B6E0B974((uint64_t)a1, v67);
            float v67 = v68;
          }
          while (v68 != (uint64_t *)v55);
        }
        int v60 = v66;
        if (!v61)
        {
          uint64_t v55 = v89;
LABEL_68:
          int v102 = *((_DWORD *)v117 + 26);
          uint64_t v52 = *((unsigned int *)v117 + 28);
          float v100 = 0;
          int v101 = *((_DWORD *)v117 + 27);
          float v98 = *(uint64_t ***)(v64 + 16);
          float32x4_t v117 = *(uint64_t **)(v64 + 24);
          uint64_t v89 = v55;
          goto LABEL_69;
        }
      }
      else
      {
        if (!v61) {
          goto LABEL_68;
        }
        float v98 = *(uint64_t ***)(v55 + 8);
        uint64_t v89 = (uint64_t)v63;
      }
      float32x4_t *v98 = v63;
      v63[1] = (uint64_t)v98;
      int v63 = 0;
      *int v61 = v55;
      *(void *)(v55 + 8) = v61;
      uint64_t v55 = v89;
      uint64_t v64 = v103;
      goto LABEL_68;
    }
    if ((v110 & 0x80000000) == 0 || v109) {
      goto LABEL_42;
    }
    uint64_t v104 = v53;
    int v60 = v43;
    int v59 = v42;
    float v69 = v91;
    int v63 = v99;
LABEL_70:
    if (v56 > 0 || (uint64_t v70 = v104) == 0)
    {
      int v32 = v118;
      float32x4_t v75 = v93;
      uint64_t v33 = v52;
      goto LABEL_84;
    }
    if (v96)
    {
      float v71 = v60;
      float v73 = (uint64_t ***)(v96 + 8);
      int v72 = *(void **)(v96 + 8);
      if (v72 != (void *)v53)
      {
        do
        {
          long long v74 = (void *)v72[1];
          sub_1B6E0B974((uint64_t)a1, v72);
          int v72 = v74;
        }
        while (v74 != (void *)v53);
      }
      if (!v59)
      {
        float32x4_t v75 = v93;
        int v60 = v71;
        goto LABEL_83;
      }
      int v60 = v71;
      float32x4_t *v71 = (uint64_t *)v96;
    }
    else
    {
      if (!v59)
      {
        float32x4_t v88 = (void *)v53;
        goto LABEL_81;
      }
      float v76 = *(uint64_t **)v53;
      *int v60 = *(uint64_t **)v53;
      float v73 = (uint64_t ***)(v76 + 1);
      float32x4_t v88 = v60;
    }
    *float v73 = v60;
    *(void *)uint64_t v53 = v59;
    v59[1] = v53;
    uint64_t v70 = v104;
    int v60 = 0;
LABEL_81:
    float32x4_t v75 = v93;
LABEL_83:
    int v59 = 0;
    int v102 = *((_DWORD *)v118 + 26);
    uint64_t v33 = *((unsigned int *)v118 + 28);
    int v101 = *((_DWORD *)v118 + 27);
    int v32 = *(uint64_t ***)(v70 + 24);
    uint64_t v96 = *(void *)(v70 + 16);
    float32x4_t v118 = v32;
LABEL_84:
    int v45 = v117;
    BOOL v77 = v32 == v69 && v117 == v75;
    if (v77) {
      break;
    }
    float v99 = v63;
    char v44 = 0;
    int v42 = v59;
    int v43 = v60;
  }
  if (v96)
  {
    float v80 = v60;
    float v81 = *(void **)(v96 + 8);
    float v82 = v100;
    if (v81 != v88)
    {
      do
      {
        float v83 = (void *)v81[1];
        sub_1B6E0B974((uint64_t)a1, v81);
        float v81 = v83;
      }
      while (v83 != v88);
    }
    float v84 = (uint64_t *)v89;
    if (v59)
    {
      *float v80 = (uint64_t *)v96;
      *(void *)(v96 + 8) = v80;
      *float32x4_t v88 = v59;
      v59[1] = (uint64_t)v88;
    }
  }
  else
  {
    *int v60 = v59;
    v59[1] = (uint64_t)v60;
    v118[2] = v59;
    float v84 = (uint64_t *)v89;
    float v82 = v100;
  }
  if (v98)
  {
    int8x16_t v85 = *v98;
    if (*v98 != v84)
    {
      do
      {
        float v86 = (uint64_t *)*v85;
        sub_1B6E0B974((uint64_t)a1, v85);
        int8x16_t v85 = v86;
      }
      while (v86 != v84);
    }
    if (v82)
    {
      float32x4_t *v98 = v63;
      v63[1] = (uint64_t)v98;
      *float v82 = v84;
      v84[1] = (uint64_t)v82;
    }
  }
  else
  {
    *float v82 = v63;
    v63[1] = (uint64_t)v82;
    v117[2] = (uint64_t)v82;
  }
}

uint64_t sub_1B6E0ACEC(void *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a1[1];
  if (*a1 != a2) {
    return v4 == a2;
  }
  if (v4 != a2) {
    return 2;
  }
  int v7 = a3[1];
  int v6 = a3[2];
  int v9 = a4[1];
  int v8 = a4[2];
  int v10 = v6 * v9 - v7 * v8;
  int v11 = *a3 * v8 - *a4 * v6;
  int v12 = *a4 * v7 - *a3 * v9;
  uint64_t v13 = (_DWORD *)a1[3];
  uint64_t v14 = *(_DWORD **)(a2 + 24);
  BOOL v15 = *(_DWORD **)(*(void *)(a2 + 16) + 24);
  int v16 = v15[26];
  int v17 = v15[27];
  LODWORD(v15) = v15[28];
  if (((v14[28] - (int)v15) * (v13[27] - v17) - (v14[27] - v17) * (v13[28] - (int)v15)) * (uint64_t)v10
     + ((v14[27] - v17) * (v13[26] - v16) - (v14[26] - v16) * (v13[27] - v17)) * (uint64_t)v12
     + ((v14[26] - v16) * (v13[28] - (int)v15) - (v14[28] - (int)v15) * (v13[26] - v16)) * (uint64_t)v11 <= 0)
    return 1;
  else {
    return 2;
  }
}

void *sub_1B6E0ADC0(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    BOOL v15 = 0;
    uint64_t v16 = *(void *)(a3 + 16);
    while (*(_DWORD *)(v16 + 40) <= *(_DWORD *)(a1 + 160))
    {
LABEL_19:
      uint64_t v16 = *(void *)v16;
      if (v16 == v7) {
        return v15;
      }
    }
    int v17 = *(int **)(v16 + 24);
    uint64_t v18 = v17[26] - (uint64_t)*(int *)(a3 + 104);
    uint64_t v19 = v17[27] - (uint64_t)*(int *)(a3 + 108);
    uint64_t v20 = v17[28] - (uint64_t)*(int *)(a3 + 112);
    v29[0] = v18 | ((unint64_t)v19 << 32);
    v29[1] = v20 | 0xFFFFFFFF00000000;
    uint64_t v21 = *a6 * v18 + a6[1] * v19 + a6[2] * v20;
    if (v21 < 1)
    {
      if (v21 < 0)
      {
        char v22 = 0;
        int v28 = -1;
        uint64_t v21 = -v21;
        int v23 = 1;
      }
      else
      {
        uint64_t v21 = 0;
        int v23 = 0;
        int v28 = 0;
        char v22 = 1;
      }
    }
    else
    {
      char v22 = 0;
      int v28 = 1;
      int v23 = -1;
    }
    uint64_t v24 = *a5 * v18 + a5[1] * v19 + a5[2] * v20;
    *(void *)&long long v27 = v21;
    if (v24 <= 0)
    {
      if ((v24 & 0x8000000000000000) == 0)
      {
        *((void *)&v27 + 1) = 0;
        if (v22)
        {
LABEL_18:
          uint64_t v7 = *(void *)(a3 + 16);
          goto LABEL_19;
        }
LABEL_11:
        if (!v15 || (int v25 = sub_1B6E09A88((uint64_t)&v27, a7), v25 < 0))
        {
          *(_OWORD *)a7 = v27;
          *(_DWORD *)(a7 + 16) = v28;
          BOOL v15 = (void *)v16;
        }
        else if (!v25 && (sub_1B6E0ACEC(v15, v16, a4, v29) != 2) != a2)
        {
          BOOL v15 = (void *)v16;
        }
        goto LABEL_18;
      }
      int v28 = v23;
      uint64_t v24 = -v24;
    }
    *((void *)&v27 + 1) = v24;
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_1B6E0AF80(uint64_t a1, int *a2, int *a3, uint64_t *a4, uint64_t *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v9 = *a5;
  int v10 = (unsigned int *)a2;
  if (*a4) {
    int v10 = *(unsigned int **)(*a4 + 24);
  }
  uint64_t v147 = *a4;
  uint64_t v11 = v10[26];
  uint64_t v12 = v10[27];
  uint64_t v13 = v10[28];
  uint64_t v14 = (unsigned int *)a3;
  if (v9) {
    uint64_t v14 = *(unsigned int **)(v9 + 24);
  }
  uint64_t v15 = v14[26];
  signed int v16 = v14[27];
  uint64_t v17 = v14[28];
  uint64_t v18 = a2[26];
  uint64_t v19 = a2[27];
  uint64_t v20 = a3[26] - v18;
  uint64_t v21 = a3[27] - v19;
  uint64_t v22 = a2[28];
  uint64_t v23 = a3[28] - v22;
  if (v147) {
    uint64_t v24 = *a4;
  }
  else {
    uint64_t v24 = v9;
  }
  int v25 = *(_DWORD **)(v24 + 24);
  int v26 = v25[26] - v18;
  int v27 = v25[27] - v19;
  LODWORD(v25) = v25[28] - v22;
  uint64_t v28 = v27 * (int)v23 - (int)v25 * (int)v21;
  uint64_t v29 = (int)v25 * (int)v20 - v26 * (int)v23;
  uint64_t v30 = v26 * (int)v21 - v27 * (int)v20;
  uint64_t v31 = (int)v22 * v30 + (int)v18 * v28 + (int)v19 * v29;
  uint64_t v32 = v30 * v21 - v29 * v23;
  uint64_t v33 = v28 * v23 - v30 * v20;
  uint64_t v34 = v29 * v20 - v28 * v21;
  uint64_t v35 = v32 * (int)v11 + v33 * (int)v12 + v34 * (int)v13;
  uint64_t v156 = v34;
  float32x4_t v146 = a5;
  if (!v147 || *(unsigned int **)(v147 + 24) == a6)
  {
    uint64_t v42 = v9;
  }
  else
  {
    uint64_t v36 = *(void *)(*(void *)(v147 + 16) + 8);
    uint64_t v38 = *(int **)(v36 + 24);
    int v37 = (unsigned int **)(v36 + 24);
    uint64_t v39 = v38[26];
    uint64_t v40 = v38[27];
    uint64_t v41 = v38[28];
    if ((int)v39 * (uint64_t)(int)v28 + (int)v40 * (uint64_t)(int)v29 + (int)v41 * (uint64_t)(int)v30 >= v31)
    {
      int v94 = *(_DWORD *)(a1 + 160);
      do
      {
        uint64_t v95 = v32 * v39 + v33 * v40 + v34 * v41;
        if (*(_DWORD *)(v36 + 40) == v94 || v95 <= v35) {
          break;
        }
        uint64_t v35 = v95;
        *a4 = v36;
        uint64_t v97 = *v37;
        uint64_t v11 = v97[26];
        uint64_t v12 = v97[27];
        uint64_t v13 = v97[28];
        if (v97 == a6) {
          break;
        }
        uint64_t v36 = *(void *)(*(void *)(v36 + 16) + 8);
        int v37 = (unsigned int **)(v36 + 24);
        float v98 = *(int **)(v36 + 24);
        uint64_t v39 = v98[26];
        uint64_t v40 = v98[27];
        uint64_t v41 = v98[28];
      }
      while ((int)v39 * (uint64_t)(int)v28 + (int)v40 * (uint64_t)(int)v29 + (int)v41 * (uint64_t)(int)v30 >= v31);
    }
    uint64_t v42 = *a5;
    uint64_t v34 = v29 * v20 - v28 * v21;
  }
  uint64_t v43 = v32 * (int)v15 + v33 * v16 + v34 * (int)v17;
  if (v42)
  {
    if (*(unsigned int **)(v42 + 24) == a7
      || (uint64_t v44 = **(void **)(v42 + 16),
          uint64_t v46 = *(int **)(v44 + 24),
          int v45 = (unsigned int **)(v44 + 24),
          uint64_t v47 = v46[26],
          uint64_t v48 = v46[27],
          uint64_t v49 = v46[28],
          (int)v47 * (uint64_t)(int)v28 + (int)v48 * (uint64_t)(int)v29 + (int)v49 * (uint64_t)(int)v30 < v31))
    {
LABEL_16:
      uint64_t result = v42;
    }
    else
    {
      int v99 = *(_DWORD *)(a1 + 160);
      do
      {
        uint64_t result = v42;
        uint64_t v42 = v44;
        if (*(_DWORD *)(v44 + 40) == v99 || v32 * v47 + v33 * v48 + v34 * v49 <= v43) {
          break;
        }
        uint64_t v43 = v32 * v47 + v33 * v48 + v34 * v49;
        *float32x4_t v146 = v44;
        int v101 = *v45;
        uint64_t v15 = v101[26];
        signed int v16 = v101[27];
        uint64_t v17 = v101[28];
        if (v101 == a7) {
          goto LABEL_16;
        }
        uint64_t v44 = **(void **)(v44 + 16);
        uint64_t v102 = **(void **)(v42 + 16);
        uint64_t v103 = *(int **)(v102 + 24);
        int v45 = (unsigned int **)(v102 + 24);
        uint64_t v47 = v103[26];
        uint64_t v48 = v103[27];
        uint64_t v49 = v103[28];
        uint64_t result = v42;
      }
      while ((int)v47 * (uint64_t)(int)v28 + (int)v48 * (uint64_t)(int)v29 + (int)v49 * (uint64_t)(int)v30 >= v31);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v51 = v43 - v35;
  int v152 = v21;
  int v153 = v20;
  uint64_t v150 = v30 * v21 - v29 * v23;
  int v151 = v23;
  int v144 = v29;
  int v145 = v28;
  int v143 = v30;
  uint64_t v149 = v28 * v23 - v30 * v20;
  if (v43 - v35 < 1)
  {
    if ((v51 & 0x8000000000000000) == 0) {
      return result;
    }
    int v104 = v15;
    int v105 = v17;
    signed int v106 = v16;
    uint64_t v107 = v43 - v35;
    uint64_t v142 = v9;
LABEL_97:
    int v158 = v105;
    int v160 = v104;
    signed int v155 = v106;
    while (1)
    {
      uint64_t v108 = (v104 - (int)v11) * (int)v20 + (v106 - (int)v12) * (int)v21 + (v105 - (int)v13) * (int)v23;
      if (result)
      {
        if (*(unsigned int **)(result + 24) != a7)
        {
          uint64_t v109 = *(void *)(*(void *)(result + 8) + 16);
          if (*(_DWORD *)(v109 + 40) > *(_DWORD *)(a1 + 160))
          {
            int v110 = *(_DWORD **)(v109 + 24);
            int v111 = v110[26];
            signed int v112 = v110[27];
            int v113 = v110[28];
            uint64_t v114 = v32 * (v111 - v104) + v33 * (v112 - v106) + v34 * (v113 - v105);
            unint64_t v115 = (v111 - v104) * (int)v20 + (v112 - v106) * (int)v21 + (v113 - v105) * (int)v23;
            if (v114)
            {
              if (v114 < 0)
              {
                BOOL v116 = (int)v115 <= 0;
                if ((v115 & 0x80000000) != 0) {
                  uint64_t v117 = -(uint64_t)v115;
                }
                else {
                  uint64_t v117 = 0;
                }
                uint64_t v118 = (v115 >> 31) & 1;
                if ((int)v115 <= 0) {
                  unint64_t v115 = v117;
                }
                if (v116) {
                  int v119 = v118;
                }
                else {
                  int v119 = -1;
                }
                int v169 = v119;
                unint64_t v167 = v115;
                uint64_t v168 = -v114;
                int v148 = v111;
                if ((int)v108 < 1)
                {
                  if ((v108 & 0x80000000) != 0)
                  {
                    int v166 = -1;
                    uint64_t v121 = -v108;
                    int v120 = 1;
                  }
                  else
                  {
                    uint64_t v121 = 0;
                    int v120 = 0;
                    int v166 = 0;
                  }
                }
                else
                {
                  int v166 = 1;
                  int v120 = -1;
                  uint64_t v121 = (v104 - (int)v11) * (int)v20 + (v106 - (int)v12) * (int)v21 + (v105 - (int)v13) * (int)v23;
                }
                uint64_t v122 = result;
                uint64_t v164 = v121;
                uint64_t v123 = v107;
                if (v107 <= 0)
                {
                  if (v107 < 0)
                  {
                    int v166 = v120;
                    uint64_t v123 = -v107;
                  }
                  else
                  {
                    uint64_t v123 = 0;
                  }
                }
                uint64_t v165 = v123;
                BOOL v65 = (int)sub_1B6E09A88((uint64_t)&v167, (uint64_t)&v164) < 1;
                LODWORD(v21) = v152;
                LODWORD(v20) = v153;
                uint64_t v32 = v150;
                LODWORD(v23) = v151;
                uint64_t v33 = v149;
                uint64_t v34 = v156;
                int v105 = v158;
                int v104 = v160;
                signed int v106 = v155;
                uint64_t result = v122;
                int v111 = v148;
                if (v65)
                {
LABEL_151:
                  uint64_t v107 = v32 * (v111 - (int)v11) + v33 * (v112 - (int)v12) + v34 * (v113 - (int)v13);
                  if (result == v142) {
                    uint64_t result = 0;
                  }
                  else {
                    uint64_t result = v109;
                  }
                  *float32x4_t v146 = result;
                  int v104 = v111;
                  signed int v106 = v112;
                  int v105 = v113;
                  goto LABEL_97;
                }
              }
            }
            else if ((int)v115 > 0)
            {
              goto LABEL_151;
            }
          }
        }
      }
      uint64_t v124 = *a4;
      if (!*a4) {
        return result;
      }
      if (*(unsigned int **)(v124 + 24) == a6) {
        return result;
      }
      uint64_t v125 = *(void *)(*(void *)(v124 + 16) + 8);
      if (*(_DWORD *)(v125 + 40) <= *(_DWORD *)(a1 + 160)) {
        return result;
      }
      float32x4_t v126 = *(_DWORD **)(v125 + 24);
      int v127 = v126[26];
      int v128 = v126[27];
      int v129 = v127 - v11;
      int v130 = v128 - v12;
      int v131 = v126[28];
      if (v145 * (uint64_t)(v127 - (int)v11) + v144 * (uint64_t)(v128 - (int)v12) + v143 * (uint64_t)(v131 - (int)v13)) {
        return result;
      }
      uint64_t v132 = v32 * (v104 - v127) + v33 * (v106 - v128) + v34 * (v105 - v131);
      if ((v132 & 0x8000000000000000) == 0) {
        return result;
      }
      uint64_t v133 = v32 * v129 + v33 * v130 + v34 * (v131 - (int)v13);
      unint64_t v134 = v129 * (int)v20 + v130 * (int)v21 + (v131 - (int)v13) * (int)v23;
      if (v133)
      {
        if ((v133 & 0x8000000000000000) == 0) {
          return result;
        }
        BOOL v135 = (int)v134 <= 0;
        if ((v134 & 0x80000000) != 0) {
          uint64_t v136 = -(uint64_t)v134;
        }
        else {
          uint64_t v136 = 0;
        }
        uint64_t v137 = (v134 >> 31) & 1;
        if ((int)v134 <= 0) {
          unint64_t v134 = v136;
        }
        if (v135) {
          int v138 = v137;
        }
        else {
          int v138 = -1;
        }
        int v169 = v138;
        unint64_t v167 = v134;
        uint64_t v168 = -v133;
        if ((int)v108 < 1)
        {
          if ((v108 & 0x80000000) != 0)
          {
            int v166 = -1;
            uint64_t v108 = -v108;
            int v139 = 1;
          }
          else
          {
            uint64_t v108 = 0;
            int v139 = 0;
            int v166 = 0;
          }
        }
        else
        {
          int v166 = 1;
          int v139 = -1;
        }
        uint64_t v164 = v108;
        if (v107 <= 0)
        {
          if (v107 < 0)
          {
            int v166 = v139;
            uint64_t v107 = -v107;
          }
          else
          {
            uint64_t v107 = 0;
          }
        }
        uint64_t v165 = v107;
        uint64_t result = sub_1B6E09A88((uint64_t)&v167, (uint64_t)&v164);
        LODWORD(v21) = v152;
        LODWORD(v20) = v153;
        uint64_t v32 = v150;
        LODWORD(v23) = v151;
        uint64_t v33 = v149;
        uint64_t v34 = v156;
        int v105 = v158;
        int v104 = v160;
        signed int v106 = v155;
        if ((result & 0x80000000) == 0) {
          return result;
        }
      }
      else if ((int)v134 <= 0)
      {
        return result;
      }
      *a4 = v125;
      float32x4_t v140 = *(_DWORD **)(v125 + 24);
      LODWORD(v11) = v140[26];
      LODWORD(v1sub_1B6DC4968((unsigned int *)this + 2) = v140[27];
      LODWORD(v13) = v140[28];
      uint64_t result = *v146;
      uint64_t v107 = v132;
    }
  }
  float32x4_t v141 = a7;
  uint64_t v52 = v15;
  uint64_t v53 = v17;
  unsigned int v54 = v16;
  uint64_t v55 = (void *)v147;
  while (1)
  {
    int v56 = (void *)*a4;
    unsigned int v154 = v54;
    while (1)
    {
      uint64_t v57 = (int)((v52 - v11) * v20 + (v54 - v12) * v21 + (v53 - v13) * v23);
      if (!v56) {
        break;
      }
      if ((unsigned int *)v56[3] == a6) {
        break;
      }
      uint64_t v58 = *(void *)(*v56 + 16);
      if (*(_DWORD *)(v58 + 40) <= *(_DWORD *)(a1 + 160)) {
        break;
      }
      int v59 = *(unsigned int **)(v58 + 24);
      uint64_t v60 = v59[26];
      uint64_t v61 = v59[27];
      uint64_t v62 = v59[28];
      uint64_t v63 = v32 * ((int)v60 - (int)v11) + v33 * ((int)v61 - (int)v12) + v34 * ((int)v62 - (int)v13);
      unint64_t v64 = ((int)v60 - (int)v11) * (int)v20 + ((int)v61 - (int)v12) * (int)v21 + ((int)v62 - (int)v13) * (int)v23;
      if (v63)
      {
        if ((v63 & 0x8000000000000000) == 0) {
          break;
        }
        uint64_t v157 = v12;
        uint64_t v159 = v13;
        BOOL v65 = (int)v64 <= 0;
        if ((v64 & 0x80000000) != 0) {
          uint64_t v66 = -(uint64_t)v64;
        }
        else {
          uint64_t v66 = 0;
        }
        uint64_t v67 = (v64 >> 31) & 1;
        if ((int)v64 <= 0) {
          unint64_t v64 = v66;
        }
        if (v65) {
          int v68 = v67;
        }
        else {
          int v68 = -1;
        }
        int v169 = v68;
        unint64_t v167 = v64;
        uint64_t v168 = -v63;
        uint64_t v69 = v11;
        if ((int)v57 < 1)
        {
          if ((v57 & 0x80000000) != 0)
          {
            int v166 = -1;
            uint64_t v71 = -v57;
            int v70 = 1;
          }
          else
          {
            uint64_t v71 = 0;
            int v70 = 0;
            int v166 = 0;
          }
        }
        else
        {
          int v166 = 1;
          int v70 = -1;
          uint64_t v71 = v57;
        }
        uint64_t v72 = v53;
        uint64_t v73 = v52;
        uint64_t v164 = v71;
        uint64_t v74 = v51;
        if (v51 <= 0)
        {
          if (v51 < 0)
          {
            int v166 = v70;
            uint64_t v74 = -v51;
          }
          else
          {
            uint64_t v74 = 0;
          }
        }
        uint64_t v165 = v74;
        uint64_t v75 = v51;
        int v76 = sub_1B6E09A88((uint64_t)&v167, (uint64_t)&v164);
        uint64_t v51 = v75;
        LODWORD(v21) = v152;
        LODWORD(v20) = v153;
        uint64_t v32 = v150;
        LODWORD(v23) = v151;
        uint64_t v52 = v73;
        uint64_t v11 = v69;
        uint64_t v34 = v156;
        uint64_t v12 = v157;
        uint64_t v13 = v159;
        unsigned int v54 = v154;
        uint64_t v53 = v72;
        uint64_t v55 = (void *)v147;
        uint64_t v33 = v149;
        if (v76 < 0) {
          break;
        }
      }
      else if ((v64 & 0x80000000) == 0)
      {
        break;
      }
      uint64_t v51 = v32 * ((int)v52 - (int)v60) + v33 * (int)(v54 - v61) + v34 * ((int)v53 - (int)v62);
      if (v56 == v55) {
        int v56 = 0;
      }
      else {
        int v56 = (void *)v58;
      }
      *a4 = (uint64_t)v56;
      uint64_t v11 = v60;
      uint64_t v12 = v61;
      uint64_t v13 = v62;
    }
    uint64_t result = v51;
    uint64_t v77 = *v146;
    if (!*v146) {
      return result;
    }
    if (*(unsigned int **)(v77 + 24) == v141) {
      return result;
    }
    uint64_t v78 = **(void **)(v77 + 16);
    if (*(_DWORD *)(v78 + 40) <= *(_DWORD *)(a1 + 160)) {
      return result;
    }
    float v79 = *(_DWORD **)(v78 + 24);
    int v80 = v79[26];
    int v81 = v79[27];
    int v82 = v80 - v52;
    int v83 = v81 - v54;
    int v84 = v79[28];
    if (v145 * (uint64_t)v82 + v144 * (uint64_t)(int)(v81 - v54) + v143 * (uint64_t)(v84 - (int)v53)) {
      return result;
    }
    uint64_t v85 = v32 * (v80 - (int)v11) + v33 * (v81 - (int)v12) + v34 * (v84 - (int)v13);
    if (v85 < 1) {
      return result;
    }
    uint64_t v86 = v32 * v82 + v33 * v83 + v34 * (v84 - (int)v53);
    unint64_t v87 = v82 * (int)v20 + v83 * (int)v21 + (v84 - (int)v53) * (int)v23;
    if (!v86)
    {
      if ((v87 & 0x80000000) != 0) {
        goto LABEL_77;
      }
      return result;
    }
    if ((v86 & 0x8000000000000000) == 0) {
      return result;
    }
    BOOL v88 = (int)v87 <= 0;
    if ((v87 & 0x80000000) != 0) {
      uint64_t v89 = -(uint64_t)v87;
    }
    else {
      uint64_t v89 = 0;
    }
    uint64_t v90 = (v87 >> 31) & 1;
    if ((int)v87 <= 0) {
      unint64_t v87 = v89;
    }
    if (v88) {
      int v91 = v90;
    }
    else {
      int v91 = -1;
    }
    int v169 = v91;
    unint64_t v167 = v87;
    uint64_t v168 = -v86;
    if ((int)v57 < 1)
    {
      if ((v57 & 0x80000000) != 0)
      {
        int v166 = -1;
        uint64_t v57 = -v57;
        int v92 = 1;
      }
      else
      {
        uint64_t v57 = 0;
        int v92 = 0;
        int v166 = 0;
      }
    }
    else
    {
      int v166 = 1;
      int v92 = -1;
    }
    uint64_t v164 = v57;
    if (v51 <= 0)
    {
      if (v51 < 0)
      {
        int v166 = v92;
        uint64_t result = -v51;
      }
      else
      {
        uint64_t result = 0;
      }
    }
    uint64_t v165 = result;
    uint64_t result = sub_1B6E09A88((uint64_t)&v167, (uint64_t)&v164);
    LODWORD(v21) = v152;
    LODWORD(v20) = v153;
    uint64_t v32 = v150;
    LODWORD(v23) = v151;
    uint64_t v33 = v149;
    uint64_t v34 = v156;
    if ((int)result <= 0) {
      return result;
    }
LABEL_77:
    *float32x4_t v146 = v78;
    float v93 = *(unsigned int **)(v78 + 24);
    uint64_t v52 = v93[26];
    unsigned int v54 = v93[27];
    uint64_t v53 = v93[28];
    uint64_t v51 = v85;
  }
}

double sub_1B6E0B974(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = (uint64_t *)a2[2];
  if ((void *)*a2 == a2)
  {
    uint64_t v2 = 0;
  }
  else
  {
    v2[1] = a2[1];
    *(void *)a2[1] = v2;
  }
  *(void *)(v3[3] + 16) = v2;
  uint64_t v4 = (uint64_t *)*v3;
  if ((uint64_t *)*v3 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    v4[1] = v3[1];
    *(void *)v3[1] = v4;
  }
  *(void *)(a2[3] + 16) = v4;
  double result = 0.0;
  a2[4] = 0;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *a2 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = a2;
  float32x4_t v3[4] = 0;
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  uint64_t *v3 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v3;
  --*(_DWORD *)(a1 + 176);
  return result;
}

void sub_1B6E0BA0C(uint64_t a1, uint64_t a2, char a3, int a4, int a5, double a6, double a7, double a8, int32x4_t a9, int32x4_t a10)
{
  if (a3)
  {
    if (a5 >= 1)
    {
      float32x4_t v15 = (float32x4_t)xmmword_1B6ED0480;
      float32x4_t v16 = (float32x4_t)xmmword_1B6ED0470;
      uint64_t v17 = (unint64_t *)(a2 + 16);
      int v18 = a5;
      do
      {
        *(float32x2_t *)v19.f32 = vcvt_f32_f64(*((float64x2_t *)v17 - 1));
        a9.i64[0] = *v17;
        *(float *)a9.i32 = *(double *)v17;
        v19.i64[1] = a9.u32[0];
        float32x4_t v16 = vminq_f32(v16, v19);
        float32x4_t v15 = vmaxq_f32(v15, v19);
        uint64_t v17 = (unint64_t *)((char *)v17 + a4);
        --v18;
      }
      while (v18);
      goto LABEL_11;
    }
  }
  else if (a5 >= 1)
  {
    float32x4_t v15 = (float32x4_t)xmmword_1B6ED0480;
    float32x4_t v16 = (float32x4_t)xmmword_1B6ED0470;
    uint64_t v20 = (__int32 *)(a2 + 8);
    int v21 = a5;
    do
    {
      v22.i64[0] = *((void *)v20 - 1);
      v22.i32[2] = *v20;
      uint64_t v20 = (__int32 *)((char *)v20 + a4);
      v22.i64[1] = v22.u32[2];
      float32x4_t v16 = vminq_f32(v16, v22);
      float32x4_t v15 = vmaxq_f32(v15, v22);
      --v21;
    }
    while (v21);
    goto LABEL_11;
  }
  float32x4_t v16 = (float32x4_t)xmmword_1B6ED0470;
  float32x4_t v15 = (float32x4_t)xmmword_1B6ED0480;
LABEL_11:
  float32x4_t v23 = vsubq_f32(v15, v16);
  float v24 = v23.f32[1];
  if (v23.f32[0] >= v23.f32[1]) {
    float v25 = v23.f32[0];
  }
  else {
    float v25 = v23.f32[1];
  }
  if (v23.f32[0] < v23.f32[1]) {
    float v24 = v23.f32[0];
  }
  v23.i32[3] = 0;
  int v26 = v23.f32[0] >= v23.f32[1];
  unsigned __int32 v27 = v23.f32[0] < v23.f32[1];
  if (v25 < v23.f32[2]) {
    unsigned __int32 v27 = 2;
  }
  if (v24 >= v23.f32[2]) {
    int v26 = 2;
  }
  if (v27 + 1 < 3) {
    int v28 = v27 + 1;
  }
  else {
    int v28 = v27 - 2;
  }
  if (v26 == v27) {
    int v26 = v28;
  }
  *(_DWORD *)(a1 + 164) = v26;
  *(_DWORD *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = 3 - (v26 + v27);
  *(_DWORD *)(a1 + 17sub_1B6DC4968((unsigned int *)this + 2) = v27;
  a9.i32[0] = (int)(4 - (v26 + v27)) % 3;
  a10.i32[0] = v27;
  float32x4_t v29 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a9, a10), 0), (int8x16_t)vdupq_n_s32(0x38CD47F8u), (int8x16_t)vdupq_n_s32(0xB8CD47F8)), v23);
  *(float32x4_t *)a1 = v29;
  v23.i64[0] = 0;
  int8x16_t v30 = (int8x16_t)v29;
  *(float *)v30.i32 = 1.0 / v29.f32[0];
  float32x4_t v31 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v29, v23)), 0), v30, (int8x16_t)v29);
  if (v31.f32[1] != 0.0) {
    v31.f32[1] = 1.0 / v31.f32[1];
  }
  if (v31.f32[2] != 0.0) {
    v31.f32[2] = 1.0 / v31.f32[2];
  }
  float32x4_t v32 = vaddq_f32(v16, v15);
  v33.i64[0] = 0x3F0000003F000000;
  v33.i64[1] = 0x3F0000003F000000;
  float32x4_t v34 = vmulq_f32(v32, v33);
  v34.i32[3] = 0;
  *(float32x4_t *)(a1 + 16) = v34;
  char v64 = 1;
  uint64_t v63 = 0;
  HIDWORD(v6sub_1B6DC4968((unsigned int *)this + 2) = 0;
  if (a5 < 0)
  {
    uint64_t v35 = 0;
  }
  else
  {
    if (!a5)
    {
      LODWORD(v6sub_1B6DC4968((unsigned int *)this + 2) = 0;
      goto LABEL_44;
    }
    float32x4_t v59 = v31;
    uint64_t v35 = sub_1B6E073B8(16 * a5, 16);
    float32x4_t v31 = v59;
    char v64 = 1;
    uint64_t v63 = v35;
    HIDWORD(v6sub_1B6DC4968((unsigned int *)this + 2) = a5;
  }
  LODWORD(v6sub_1B6DC4968((unsigned int *)this + 2) = a5;
  if (a3)
  {
    if (a5 < 1) {
      goto LABEL_44;
    }
    uint64_t v36 = 0;
    uint64_t v38 = *(int *)(a1 + 168);
    uint64_t v37 = *(int *)(a1 + 172);
    uint64_t v39 = *(int *)(a1 + 164);
    uint64_t v40 = (double *)(a2 + 16);
    uint64_t v41 = (_DWORD *)(v35 + 8);
    do
    {
      *(float *)&unsigned int v42 = *v40;
      *(float32x2_t *)v60.f32 = vcvt_f32_f64(*(float64x2_t *)(v40 - 2));
      v60.i64[1] = v42;
      float32x4_t v43 = vsubq_f32(v60, *(float32x4_t *)(a1 + 16));
      v43.i32[3] = 0;
      float32x4_t v60 = vmulq_f32(v31, v43);
      *(v41 - sub_1B6DC4968((unsigned int *)this + 2) = (int)v60.f32[v38];
      *(v41 - 1) = (int)v60.f32[v37];
      *uint64_t v41 = (int)v60.f32[v39];
      v41[1] = v36;
      v41 += 4;
      ++v36;
      uint64_t v40 = (double *)((char *)v40 + a4);
    }
    while (a5 != v36);
  }
  else
  {
    if (a5 < 1) {
      goto LABEL_44;
    }
    uint64_t v44 = 0;
    uint64_t v46 = *(int *)(a1 + 168);
    uint64_t v45 = *(int *)(a1 + 172);
    uint64_t v47 = *(int *)(a1 + 164);
    uint64_t v48 = (unsigned int *)(a2 + 8);
    uint64_t v49 = (_DWORD *)(v35 + 8);
    do
    {
      v60.i64[0] = *((void *)v48 - 1);
      v60.i64[1] = *v48;
      float32x4_t v50 = vsubq_f32(v60, *(float32x4_t *)(a1 + 16));
      v50.i32[3] = 0;
      float32x4_t v60 = vmulq_f32(v31, v50);
      *(v49 - sub_1B6DC4968((unsigned int *)this + 2) = (int)v60.f32[v46];
      *(v49 - 1) = (int)v60.f32[v45];
      *uint64_t v49 = (int)v60.f32[v47];
      v49[1] = v44;
      v49 += 4;
      ++v44;
      uint64_t v48 = (unsigned int *)((char *)v48 + a4);
    }
    while (a5 != v44);
  }
  if (a5 >= 2) {
    sub_1B6E0E8F4((uint64_t)v61, (uint64_t)&v60, 0, a5 - 1);
  }
LABEL_44:
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = a5;
  int v51 = *(_DWORD *)(a1 + 132);
  if (v51 < a5)
  {
    uint64_t v52 = v51;
    if (*(_DWORD *)(a1 + 136) < a5)
    {
      if (a5)
      {
        uint64_t v53 = sub_1B6E073B8(8 * a5, 16);
        int v51 = *(_DWORD *)(a1 + 132);
      }
      else
      {
        uint64_t v53 = 0;
      }
      if (v51 >= 1)
      {
        uint64_t v54 = 0;
        uint64_t v55 = 8 * v51;
        do
        {
          *(void *)(v53 + v54) = *(void *)(*(void *)(a1 + 144) + v54);
          v54 += 8;
        }
        while (v55 != v54);
      }
      uint64_t v56 = *(void *)(a1 + 144);
      if (v56 && *(unsigned char *)(a1 + 152)) {
        sub_1B6E073C4(v56);
      }
      *(unsigned char *)(a1 + 15sub_1B6DC4968((unsigned int *)this + 2) = 1;
      *(void *)(a1 + 144) = v53;
      *(_DWORD *)(a1 + 136) = a5;
    }
    do
      *(void *)(*(void *)(a1 + 144) + 8 * v52++) = 0;
    while (a5 != v52);
  }
  *(_DWORD *)(a1 + 13sub_1B6DC4968((unsigned int *)this + 2) = a5;
  if (a5 >= 1)
  {
    uint64_t v57 = 0;
    do
    {
      sub_1B6E0BF18(a1 + 32);
      *(void *)(v58 + 16) = 0;
      *(_OWORD *)(v58 + 104) = *(_OWORD *)(v63 + 16 * v57);
      *(_DWORD *)(v58 + 120) = -1;
      *(void *)(*(void *)(a1 + 144) + 8 * v57++) = v58;
    }
    while (v57 != a5);
  }
  if (v63 && v64) {
    sub_1B6E073C4(v63);
  }
  char v64 = 1;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  *(void *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(a1 + 64);
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 6 * a5;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 160) = -3;
  memset(&v60, 0, 32);
  sub_1B6E0A358(a1, 0, a5, (uint64_t)&v60);
  *(void *)(a1 + 184) = v60.i64[0];
  if (v63)
  {
    if (v64) {
      sub_1B6E073C4(v63);
    }
  }
}

double sub_1B6E0BF18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 8) = *(void *)(v3 + 16);
      uint64_t v2 = *(void *)v3;
    }
    else
    {
      uint64_t v3 = sub_1B6E073B8(24, 16);
      uint64_t v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(void *)(v3 + 16) = 0;
      uint64_t v2 = sub_1B6E073B8(v4 << 7, 16);
      *(void *)uint64_t v3 = v2;
      *(void *)(v3 + 16) = *(void *)a1;
      *(void *)a1 = v3;
    }
    uint64_t v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      unint64_t v6 = 0;
      uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      int32x2_t v8 = (int32x2_t)0x100000000;
      uint64_t v9 = (void *)(v2 + 128);
      do
      {
        int32x2_t v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1B6E4F270)));
        int32x2_t v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if (v10.i8[0])
        {
          if (v11.i32[0] >= (int)v5) {
            uint64_t v12 = 0;
          }
          else {
            uint64_t v12 = v9;
          }
          *(v9 - 16) = v12;
        }
        if (v10.i8[4])
        {
          uint64_t v13 = v9 + 16;
          if (v11.i32[1] >= (int)v5) {
            uint64_t v13 = 0;
          }
          *uint64_t v9 = v13;
        }
        v6 += 2;
        int32x2_t v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 32;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(void *)(a1 + 16) = *(void *)v2;
  double result = 0.0;
  *(void *)(v2 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 120) = -1;
  return result;
}

float32x4_t sub_1B6E0C044@<Q0>(float32x4_t *a1@<X0>, int *a2@<X1>, float32x4_t *a3@<X8>)
{
  int v3 = a2[11];
  uint64_t v5 = a1[10].i32[1];
  uint64_t v4 = a1[10].i32[2];
  v16.f32[v4] = (float)a2[10];
  uint64_t v6 = a1[10].i32[3];
  v16.f32[v6] = (float)v3;
  v16.f32[v5] = (float)a2[12];
  float32x4_t v7 = *a1;
  float32x4_t v8 = vmulq_f32(*a1, v16);
  int v9 = a2[15];
  v16.f32[v4] = (float)a2[14];
  v16.f32[v6] = (float)v9;
  v16.f32[v5] = (float)a2[16];
  float32x4_t v10 = vmulq_f32(v16, v7);
  v11.i64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL).u64[0];
  v11.i64[1] = v8.i64[0];
  v12.i64[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
  v12.i64[1] = v10.i64[0];
  int8x16_t v13 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v10, v11)), v8, v12);
  v8.i64[0] = vextq_s8(v13, v13, 4uLL).u64[0];
  v8.i64[1] = v13.u32[0];
  int8x16_t v14 = (int8x16_t)vmulq_f32(v8, v8);
  float32x4_t result = vmulq_n_f32(v8, 1.0/ sqrtf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8)).f32[0]));
  *a3 = result;
  return result;
}

void sub_1B6E0C0FC(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
  {
    sub_1B6E0CA20((unint64_t *)(a1 + 40));
    sub_1B6E0CA20((unint64_t *)(a1 + 88));
  }
}

void sub_1B6E0C150(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
  {
    sub_1B6E0CA20((unint64_t *)(a1 + 56));
    sub_1B6E0CA20((unint64_t *)(a1 + 88));
  }
}

void sub_1B6E0C1A4(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
  {
    sub_1B6E0CA20((unint64_t *)(a1 + 72));
    sub_1B6E0CA20((unint64_t *)(a1 + 88));
  }
}

float sub_1B6E0C1F8(float32x4_t *a1, float a2, float a3)
{
  uint64_t v3 = a1[11].i64[1];
  if (!v3) {
    return 0.0;
  }
  int v7 = a1[10].i32[0] - 1;
  a1[10].i32[0] = v7;
  char v122 = 1;
  unint64_t v120 = 0;
  *(_DWORD *)(v3 + 120) = v7;
  float32x4_t v8 = (uint64_t *)sub_1B6E073B8(8, 16);
  int v9 = 1;
  uint64_t v10 = 0;
  int v87 = 0;
  int v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v99 = 0;
  unint64_t v100 = 0;
  uint64_t v102 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v121 = v8;
  *float32x4_t v8 = a1[11].i64[1];
  uint64_t v17 = (_DWORD *)a1[11].i64[1];
  int v18 = v17[26];
  int v19 = v17[27];
  int v20 = v17[28];
  unint64_t v117 = 0;
  unint64_t v118 = 0;
  unint64_t v115 = 0;
  uint64_t v116 = 0;
  unint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v85 = a1;
  uint64_t v86 = (uint64_t)&a1[6];
  unint64_t v111 = 0;
  unint64_t v112 = 0;
  int v97 = 1;
  do
  {
    uint64_t v21 = v121[--v9];
    float32x4_t v22 = *(uint64_t **)(v21 + 16);
    if (v22)
    {
      uint64_t v23 = v10;
      while (1)
      {
        uint64_t v24 = v22[3];
        if (*(_DWORD *)(v24 + 120) == v7) {
          goto LABEL_23;
        }
        *(_DWORD *)(v24 + 120) = v7;
        LODWORD(v24) = v97;
        if (v9 == v97)
        {
          int v25 = v97 ? 2 * v97 : 1;
          LODWORD(v24) = v97;
          if (v97 < v25) {
            break;
          }
        }
        int v25 = v24;
LABEL_22:
        v121[v9++] = v22[3];
        int v97 = v25;
LABEL_23:
        if (*((_DWORD *)v22 + 10) != v7)
        {
          uint64_t v91 = v23;
          unint64_t v94 = v15;
          int v89 = v9;
          int v96 = v11;
          float32x4_t v32 = sub_1B6E0C880(v86);
          sub_1B6E0C9A4((uint64_t)v32, v22[3], *(_DWORD **)(*(void *)(v22[2] + 8) + 24), (_DWORD *)v21);
          int v33 = v96;
          if (v96 == v87)
          {
            int v34 = 2 * v96;
            if (!v96) {
              int v34 = 1;
            }
            unint64_t v15 = v94;
            uint64_t v35 = v91;
            if (v96 >= v34)
            {
              int v87 = v96;
              uint64_t v10 = v91;
            }
            else
            {
              int v87 = v34;
              if (v34)
              {
                uint64_t v36 = sub_1B6E073B8(8 * v34, 16);
                int v33 = v96;
                uint64_t v10 = v36;
                uint64_t v35 = v91;
              }
              else
              {
                uint64_t v10 = 0;
              }
              if (v33 < 1)
              {
                if (v35) {
                  goto LABEL_39;
                }
              }
              else
              {
                uint64_t v37 = v33;
                uint64_t v38 = (void *)v10;
                uint64_t v39 = (uint64_t *)v35;
                do
                {
                  uint64_t v40 = *v39++;
                  *v38++ = v40;
                  --v37;
                }
                while (v37);
LABEL_39:
                uint64_t v92 = v10;
                sub_1B6E073C4(v35);
                uint64_t v10 = v92;
                int v33 = v96;
              }
LABEL_40:
              unint64_t v15 = v94;
            }
            uint64_t v41 = 0;
            unsigned int v42 = 0;
            *(void *)(v10 + 8 * v33) = v32;
            float32x4_t v43 = v22;
            do
            {
              if (v41 && v42)
              {
                int v44 = v41[26];
                int v45 = v41[27];
                int v46 = v41[28];
                int v47 = v42[26];
                int v48 = v42[27];
                int v49 = v42[28];
                int v50 = *(_DWORD *)(v21 + 104);
                int v51 = *(_DWORD *)(v21 + 108);
                int v52 = *(_DWORD *)(v21 + 112);
                uint64_t v53 = ((v49 - v20) * (v45 - v19) - (v48 - v19) * (v46 - v20)) * (uint64_t)(v50 - v18)
                    + ((v48 - v19) * (v44 - v18) - (v47 - v18) * (v45 - v19)) * (uint64_t)(v52 - v20)
                    + ((v47 - v18) * (v46 - v20) - (v49 - v20) * (v44 - v18)) * (uint64_t)(v51 - v19);
                unint64_t v13 = (v53 * (v50 + v18 + v44 + v47) + __PAIR128__(v13, v12)) >> 64;
                v12 += v53 * (v50 + v18 + v44 + v47);
                uint64_t v54 = v53 * (v51 + v19 + v45 + v48);
                BOOL v55 = __CFADD__(v14, v54);
                v14 += v54;
                uint64_t v56 = v99 + v55 + (v54 >> 63);
                uint64_t v57 = v53 * (v52 + v20 + v46 + v49);
                BOOL v55 = __CFADD__(v100, v57);
                uint64_t v99 = v56;
                v100 += v57;
                v102 += v55 + (v57 >> 63);
                unint64_t v16 = (__PAIR128__(v16, v15) + v53) >> 64;
                v15 += v53;
              }
              *((_DWORD *)v43 + 10) = v7;
              v43[4] = (uint64_t)v32;
              uint64_t v41 = v42;
              unsigned int v42 = (_DWORD *)v43[3];
              float32x4_t v43 = *(uint64_t **)(v43[2] + 8);
            }
            while (v43 != v22);
            int v11 = v33 + 1;
            uint64_t v23 = v10;
            int v9 = v89;
            goto LABEL_47;
          }
          uint64_t v10 = v91;
          goto LABEL_40;
        }
        uint64_t v10 = v23;
LABEL_47:
        float32x4_t v22 = (uint64_t *)*v22;
        if (v22 == *(uint64_t **)(v21 + 16)) {
          goto LABEL_48;
        }
      }
      int v95 = v11;
      int v88 = v9;
      unint64_t v93 = v15;
      uint64_t v90 = v23;
      if (v25)
      {
        uint64_t v26 = sub_1B6E073B8(8 * v25, 16);
        LODWORD(v24) = v97;
        uint64_t v27 = v26;
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v28 = (uint64_t)v121;
      if ((int)v24 < 1)
      {
        if (!v121)
        {
LABEL_21:
          uint64_t v121 = (uint64_t *)v27;
          int v11 = v95;
          int v9 = v88;
          unint64_t v15 = v93;
          uint64_t v23 = v90;
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v24 = v24;
        float32x4_t v29 = (void *)v27;
        int8x16_t v30 = v121;
        do
        {
          uint64_t v31 = *v30++;
          *v29++ = v31;
          --v24;
        }
        while (v24);
      }
      uint64_t v98 = v27;
      sub_1B6E073C4(v28);
      uint64_t v27 = v98;
      goto LABEL_21;
    }
LABEL_48:
    ;
  }
  while (v9 > 0);
  unint64_t v120 = __PAIR64__(v97, v9);
  char v122 = 1;
  unint64_t v117 = v12;
  unint64_t v118 = v13;
  unint64_t v115 = v14;
  uint64_t v116 = v99;
  unint64_t v113 = v100;
  uint64_t v114 = v102;
  float v58 = 0.0;
  unint64_t v111 = v15;
  unint64_t v112 = v16;
  if ((v16 & 0x8000000000000000) == 0 && v16 | v15)
  {
    float32x4_t v59 = (int **)v10;
    int v60 = v11;
    v110.f32[v85[10].i32[2]] = sub_1B6E0CA20(&v117);
    v110.f32[v85[10].i32[3]] = sub_1B6E0CA20(&v115);
    v110.f32[v85[10].i32[1]] = sub_1B6E0CA20(&v113);
    float v61 = sub_1B6E0CA20(&v111);
    float32x4_t v62 = *v85;
    float32x4_t v63 = vmulq_f32(vmulq_n_f32(v110, 0.25 / v61), *v85);
    float32x4_t v110 = v63;
    if (a3 <= 0.0)
    {
      unsigned int v64 = v60;
      uint64_t v10 = (uint64_t)v59;
    }
    else
    {
      unsigned int v64 = v60;
      if (v60 < 1)
      {
        float v69 = 3.4028e38;
        uint64_t v10 = (uint64_t)v59;
      }
      else
      {
        uint64_t v66 = v85[10].i32[2];
        uint64_t v65 = v85[10].i32[3];
        uint64_t v67 = v85[10].i32[1];
        uint64_t v68 = v60;
        float v69 = 3.4028e38;
        float32x4_t v101 = vnegq_f32(v63);
        float32x4_t v103 = v62;
        int v70 = v59;
        do
        {
          sub_1B6E0C044(v85, *v70, &v109);
          uint64_t v71 = *v70++;
          float v72 = (float)v71[7];
          v123.f32[v66] = (float)v71[6];
          v123.f32[v65] = v72;
          v123.f32[v67] = (float)v71[8];
          float32x4_t v73 = vmlaq_f32(v101, v103, v123);
          v73.i32[3] = 0;
          int8x16_t v74 = (int8x16_t)vmulq_f32(v109, v73);
          float v69 = fminf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8)).f32[0], v69);
          --v68;
        }
        while (v68);
        float v58 = 0.0;
        unsigned int v64 = v60;
        uint64_t v10 = (uint64_t)v59;
        if (v69 <= 0.0) {
          goto LABEL_76;
        }
      }
      a2 = fminf(v69 * a3, a2);
    }
    if ((int)v64 < 1)
    {
      float v58 = a2;
    }
    else
    {
      uint64_t v75 = v64;
      unsigned int v76 = 243703;
      uint64_t v77 = v64;
      uint64_t v78 = (uint64_t *)v10;
      do
      {
        uint64_t v79 = *v78;
        *v78++ = *(void *)(v10 + 8 * (int)(v76 % v64));
        *(void *)(v10 + 8 * (int)(v76 % v6sub_1B6DBC5D4((uint64_t)(this + 4)) = v79;
        unsigned int v76 = 1664525 * v76 + 1013904223;
        --v77;
      }
      while (v77);
      int v80 = (int **)v10;
      while (1)
      {
        int v81 = *v80;
        sub_1B644520C((uint64_t)v104, (uint64_t)v119);
        char v82 = sub_1B6E0CA84(v85, v81, (uint64_t)v104, a2);
        if (v107) {
          BOOL v83 = v108 == 0;
        }
        else {
          BOOL v83 = 1;
        }
        if (!v83) {
          sub_1B6E073C4(v107);
        }
        char v108 = 1;
        uint64_t v107 = 0;
        int v105 = 0;
        int v106 = 0;
        if ((v82 & 1) == 0) {
          break;
        }
        ++v80;
        if (!--v75)
        {
          float v58 = a2;
          goto LABEL_75;
        }
      }
      float v58 = -a2;
LABEL_75:
      uint64_t v10 = (uint64_t)v59;
    }
  }
LABEL_76:
  if (v10) {
    sub_1B6E073C4(v10);
  }
  if (v121 && v122) {
    sub_1B6E073C4((uint64_t)v121);
  }
  return v58;
}

void *sub_1B6E0C880(uint64_t a1)
{
  float32x4_t result = *(void **)(a1 + 16);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 8) = *(void *)(v3 + 16);
      float32x4_t result = *(void **)v3;
    }
    else
    {
      uint64_t v3 = sub_1B6E073B8(24, 16);
      uint64_t v4 = *(int *)(a1 + 24);
      *(_DWORD *)(v3 + 8) = v4;
      *(void *)(v3 + 16) = 0;
      float32x4_t result = (void *)sub_1B6E073B8(72 * v4, 16);
      *(void *)uint64_t v3 = result;
      *(void *)(v3 + 16) = *(void *)a1;
      *(void *)a1 = v3;
    }
    uint64_t v5 = *(unsigned int *)(v3 + 8);
    if ((int)v5 >= 1)
    {
      unint64_t v6 = 0;
      uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(v5 - 1);
      int32x2_t v8 = (int32x2_t)0x100000000;
      int v9 = result + 9;
      do
      {
        int32x2_t v10 = vmovn_s64((int64x2_t)vcgeq_u64(v7, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1B6E4F270)));
        int32x2_t v11 = vadd_s32(v8, (int32x2_t)0x100000001);
        if (v10.i8[0])
        {
          if (v11.i32[0] >= (int)v5) {
            unint64_t v12 = 0;
          }
          else {
            unint64_t v12 = v9;
          }
          *(v9 - 9) = v12;
        }
        if (v10.i8[4])
        {
          unint64_t v13 = v9 + 9;
          if (v11.i32[1] >= (int)v5) {
            unint64_t v13 = 0;
          }
          *int v9 = v13;
        }
        v6 += 2;
        int32x2_t v8 = vadd_s32(v8, (int32x2_t)0x200000002);
        v9 += 18;
      }
      while (((v5 + 1) & 0x1FFFFFFFELL) != v6);
    }
  }
  *(void *)(a1 + 16) = *result;
  result[1] = 0;
  result[2] = 0;
  *float32x4_t result = 0;
  return result;
}

uint64_t sub_1B6E0C9A4(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  *(void *)(result + 8) = a2;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 104);
  unint64_t v4 = (a3[28] - *(_DWORD *)(a2 + 112)) | 0xFFFFFFFF00000000;
  *(void *)(result + 40) = (a3[26] - *(_DWORD *)(a2 + 104)) | ((unint64_t)(a3[27] - *(_DWORD *)(a2 + 108)) << 32);
  *(void *)(result + 48) = v4;
  unint64_t v5 = (a4[28] - *(_DWORD *)(a2 + 112)) | 0xFFFFFFFF00000000;
  *(void *)(result + 56) = (a4[26] - *(_DWORD *)(a2 + 104)) | ((unint64_t)(a4[27] - *(_DWORD *)(a2 + 108)) << 32);
  *(void *)(result + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6) {
    uint64x2_t v7 = (void *)(v6 + 16);
  }
  else {
    uint64x2_t v7 = (void *)(a2 + 24);
  }
  void *v7 = result;
  *(void *)(a2 + 3sub_1B6DC4968((unsigned int *)this + 2) = result;
  return result;
}

float sub_1B6E0CA20(unint64_t *a1)
{
  unint64_t v1 = a1[1];
  if ((v1 & 0x8000000000000000) == 0) {
    return (float)*a1 + (float)((float)v1 * 1.8447e19);
  }
  if (*a1) {
    unint64_t v3 = ~v1;
  }
  else {
    unint64_t v3 = -(uint64_t)v1;
  }
  v4[0] = -(uint64_t)*a1;
  v4[1] = v3;
  return -sub_1B6E0CA20(v4);
}

uint64_t sub_1B6E0CA84(float32x4_t *a1, int *a2, uint64_t a3, float a4)
{
  uint64x2_t v7 = a2;
  sub_1B6E0C044(a1, a2, &v276);
  float32x4_t v8 = vmulq_n_f32(v276, -a4);
  v8.i32[3] = 0;
  float32x4_t v281 = v8;
  if (a1->f32[0] != 0.0) {
    v281.f32[0] = v8.f32[0] / a1->f32[0];
  }
  float v9 = a1->f32[1];
  if (v9 != 0.0) {
    v281.f32[1] = v8.f32[1] / v9;
  }
  float v10 = a1->f32[2];
  if (v10 != 0.0) {
    v281.f32[2] = v8.f32[2] / v10;
  }
  int v11 = (int)v281.f32[a1[10].i32[2]];
  int v12 = (int)v281.f32[a1[10].i32[3]];
  int v13 = (int)v281.f32[a1[10].i32[1]];
  if (v11) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v12 == 0;
  }
  if (v14 && v13 == 0) {
    return 1;
  }
  int v17 = v7[15];
  int v16 = v7[16];
  int v19 = v7[11];
  int v18 = v7[12];
  int v20 = v7[14];
  int v21 = v7[10];
  uint64_t v278 = v16 * v19 - v17 * v18;
  uint64_t v279 = v20 * v18 - v21 * v16;
  uint64_t v280 = v21 * v17 - v20 * v19;
  uint64_t v22 = v7[6];
  uint64_t v23 = v7[7];
  uint64_t v24 = v7[8];
  uint64_t v259 = v22 + v11;
  uint64_t v260 = v24 + v13;
  uint64_t v261 = v23 + v12;
  uint64_t v25 = v259 * v278 + v261 * v279 + v260 * v280;
  if (v25 >= (int)v22 * v278 + (int)v23 * v279 + (int)v24 * v280) {
    return 0;
  }
  uint64_t v26 = *((void *)v7 + 1);
  uint64_t v27 = *(void **)(v26 + 16);
  sub_1B6E0DE60(v26, &v278, (uint64_t)&v276);
  int v28 = sub_1B6E09C24((uint64_t)&v276, v25);
  if ((v28 & 0x80000000) == 0)
  {
    int v29 = v28;
    int8x16_t v30 = v27;
    while (1)
    {
      sub_1B6E0DE60(v27[3], &v278, (uint64_t)&v274);
      if ((sub_1B6E09B20((uint64_t)&v274, (uint64_t)&v276) & 0x80000000) != 0)
      {
        int v31 = sub_1B6E09C24((uint64_t)&v274, v25);
        *(void *)&v277[13] = *(void *)&v275[13];
        float32x4_t v276 = v274;
        *(_OWORD *)int8x16_t v277 = *(_OWORD *)v275;
        uint64_t v27 = (void *)v27[2];
        if (v31 < 0)
        {
          if (v27)
          {
            if (!v29) {
              goto LABEL_186;
            }
            goto LABEL_32;
          }
          return 0;
        }
        int v29 = v31;
        int8x16_t v30 = v27;
      }
      uint64_t v27 = (void *)v27[1];
      if (v27 == v30) {
        return 0;
      }
    }
  }
  int v33 = v27;
  while (1)
  {
    sub_1B6E0DE60(v27[3], &v278, (uint64_t)&v274);
    if ((int)sub_1B6E09B20((uint64_t)&v274, (uint64_t)&v276) >= 1) {
      break;
    }
LABEL_26:
    uint64_t v27 = (void *)v27[1];
    if (v27 == v33) {
      return 1;
    }
  }
  int v34 = sub_1B6E09C24((uint64_t)&v274, v25);
  if (v34 < 0)
  {
    *(void *)&v277[13] = *(void *)&v275[13];
    float32x4_t v276 = v274;
    *(_OWORD *)int8x16_t v277 = *(_OWORD *)v275;
    uint64_t v27 = (void *)v27[2];
    int v33 = v27;
    goto LABEL_26;
  }
  int v29 = v34;
  if (!v34)
  {
LABEL_186:
    long long v183 = *(void **)v27[2];
    while (1)
    {
      sub_1B6E0DE60(v183[3], &v278, (uint64_t)&v274);
      if ((int)sub_1B6E09C24((uint64_t)&v274, v25) > 0) {
        break;
      }
      long long v183 = (void *)*v183;
      if (v183 == (void *)v27[2]) {
        return 1;
      }
    }
  }
LABEL_32:
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  float v257 = 0;
  uint64_t v258 = v7;
  uint64_t v236 = v25;
  while (2)
  {
    uint64_t v37 = v36;
    float32x4_t v272 = v36;
    int v271 = v29;
    if (v29
      || (uint64_t v38 = *(void **)v27[2],
          sub_1B6E0DE60(v38[3], &v278, (uint64_t)&v274),
          (sub_1B6E09C24((uint64_t)&v274, v25) & 0x80000000) == 0))
    {
LABEL_39:
      unsigned int v42 = v27;
      int v43 = v29;
      if (v257)
      {
        if (v27 == v257)
        {
          if (v29 < 1)
          {
            int v186 = *(_DWORD *)(a3 + 4);
            if (v35 != (void *)v37[2])
            {
              int v187 = *(_DWORD *)(a3 + 8);
              if (v186 == v187)
              {
                if (v186) {
                  int v187 = 2 * v186;
                }
                else {
                  int v187 = 1;
                }
                if (v186 >= v187)
                {
                  int v187 = *(_DWORD *)(a3 + 4);
                }
                else
                {
                  if (v187)
                  {
                    uint64_t v188 = sub_1B6E073B8(8 * v187, 16);
                    int v186 = *(_DWORD *)(a3 + 4);
                  }
                  else
                  {
                    uint64_t v188 = 0;
                  }
                  if (v186 >= 1)
                  {
                    uint64_t v189 = 0;
                    do
                    {
                      *(void *)(v188 + v189) = *(void *)(*(void *)(a3 + 16) + v189);
                      v189 += 8;
                    }
                    while (8 * v186 != v189);
                  }
                  uint64_t v190 = *(void *)(a3 + 16);
                  if (v190 && *(unsigned char *)(a3 + 24))
                  {
                    sub_1B6E073C4(v190);
                    int v186 = *(_DWORD *)(a3 + 4);
                  }
                  *(unsigned char *)(a3 + 24) = 1;
                  *(void *)(a3 + 16) = v188;
                  *(_DWORD *)(a3 + 8) = v187;
                  uint64_t v37 = v36;
                }
              }
              *(void *)(*(void *)(a3 + 16) + 8 * v186) = v37[3];
              int v191 = v186 + 1;
              *(_DWORD *)(a3 + 4) = v186 + 1;
              float32x4_t v192 = (void *)*v35;
              if (*v35 != v37[2])
              {
                do
                {
                  uint64_t v193 = v192[3];
                  sub_1B6E0B974((uint64_t)a1, v192);
                  int v194 = *(_DWORD *)(a3 + 4);
                  int v195 = *(_DWORD *)(a3 + 8);
                  if (v194 == v195)
                  {
                    if (v194) {
                      int v195 = 2 * v194;
                    }
                    else {
                      int v195 = 1;
                    }
                    if (v194 >= v195)
                    {
                      int v195 = *(_DWORD *)(a3 + 4);
                    }
                    else
                    {
                      if (v195)
                      {
                        uint64_t v196 = sub_1B6E073B8(8 * v195, 16);
                        int v194 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        uint64_t v196 = 0;
                      }
                      if (v194 >= 1)
                      {
                        uint64_t v197 = 0;
                        do
                        {
                          *(void *)(v196 + v197) = *(void *)(*(void *)(a3 + 16) + v197);
                          v197 += 8;
                        }
                        while (8 * v194 != v197);
                      }
                      uint64_t v198 = *(void *)(a3 + 16);
                      if (v198 && *(unsigned char *)(a3 + 24))
                      {
                        sub_1B6E073C4(v198);
                        int v194 = *(_DWORD *)(a3 + 4);
                      }
                      *(unsigned char *)(a3 + 24) = 1;
                      *(void *)(a3 + 16) = v196;
                      *(_DWORD *)(a3 + 8) = v195;
                      uint64_t v37 = v36;
                    }
                  }
                  *(void *)(*(void *)(a3 + 16) + 8 * v194) = v193;
                  int v191 = v194 + 1;
                  *(_DWORD *)(a3 + 4) = v191;
                  float32x4_t v192 = (void *)*v35;
                }
                while (*v35 != v37[2]);
                int v187 = v195;
              }
              if (v191 == v187)
              {
                if (v187) {
                  int v199 = 2 * v187;
                }
                else {
                  int v199 = 1;
                }
                if (v187 < v199)
                {
                  if (v199)
                  {
                    uint64_t v200 = sub_1B6E073B8(8 * v199, 16);
                    int v187 = *(_DWORD *)(a3 + 4);
                  }
                  else
                  {
                    uint64_t v200 = 0;
                  }
                  if (v187 >= 1)
                  {
                    uint64_t v201 = 0;
                    do
                    {
                      *(void *)(v200 + v201) = *(void *)(*(void *)(a3 + 16) + v201);
                      v201 += 8;
                    }
                    while (8 * v187 != v201);
                  }
                  uint64_t v202 = *(void *)(a3 + 16);
                  if (v202 && *(unsigned char *)(a3 + 24))
                  {
                    sub_1B6E073C4(v202);
                    int v187 = *(_DWORD *)(a3 + 4);
                  }
                  *(unsigned char *)(a3 + 24) = 1;
                  *(void *)(a3 + 16) = v200;
                  *(_DWORD *)(a3 + 8) = v199;
                }
                int v191 = v187;
              }
              *(void *)(*(void *)(a3 + 16) + 8 * v191) = 0;
              int v186 = v191 + 1;
              *(_DWORD *)(a3 + 4) = v191 + 1;
            }
          }
          else
          {
            *(void *)(v35[2] + 24) = v37[3];
            uint64_t v184 = (void *)v257[2];
            *uint64_t v184 = v35;
            v35[1] = v184;
            uint64_t v185 = v37[2];
            *uint64_t v35 = v185;
            *(void *)(v185 + 8) = v35;
            int v186 = *(_DWORD *)(a3 + 4);
          }
          a1[11].i64[1] = **(void **)(a3 + 16);
          if (v186 >= 1)
          {
            LODWORD(v203) = 0;
            do
            {
              int v273 = v186;
              do
              {
                float v204 = (uint64_t *)(*(void *)(a3 + 16) + 8 * (int)v203);
                LODWORD(v203) = v203 + 2;
                float v205 = (void *)v204[1];
                if (v205)
                {
                  char v206 = 0;
                  uint64_t v207 = *v204;
                  uint64_t v208 = *v204 + 24;
                  uint64_t v203 = (int)v203;
LABEL_250:
                  uint64_t v209 = v203;
                  do
                  {
                    __n128 v210 = v205 + 3;
                    uint64_t v211 = *(void *)(v207 + 32);
                    if (v211) {
                      __n128 v212 = (void *)(v211 + 16);
                    }
                    else {
                      __n128 v212 = (void *)v208;
                    }
                    *__n128 v212 = v205[3];
                    uint64_t v213 = v205[4];
                    if (v213) {
                      *(void *)(v207 + 3sub_1B6DC4968((unsigned int *)this + 2) = v213;
                    }
                    for (uint64_t i = *v210; i; uint64_t i = *(void *)(i + 16))
                      *(void *)(i + 8) = v207;
                    *__n128 v210 = 0;
                    v205[4] = 0;
                    uint64_t v215 = v205[2];
                    if (v215)
                    {
                      if ((v206 & 1) == 0)
                      {
                        int v217 = *(_DWORD *)(a3 + 4);
                        if (v217 == *(_DWORD *)(a3 + 8))
                        {
                          int v218 = v217 ? 2 * v217 : 1;
                          if (v217 < v218)
                          {
                            if (v218)
                            {
                              uint64_t v219 = sub_1B6E073B8(8 * v218, 16);
                              int v217 = *(_DWORD *)(a3 + 4);
                            }
                            else
                            {
                              uint64_t v219 = 0;
                            }
                            if (v217 >= 1)
                            {
                              uint64_t v220 = 0;
                              do
                              {
                                *(void *)(v219 + v220) = *(void *)(*(void *)(a3 + 16) + v220);
                                v220 += 8;
                              }
                              while (8 * v217 != v220);
                            }
                            uint64_t v221 = *(void *)(a3 + 16);
                            if (v221 && *(unsigned char *)(a3 + 24))
                            {
                              sub_1B6E073C4(v221);
                              int v217 = *(_DWORD *)(a3 + 4);
                            }
                            *(unsigned char *)(a3 + 24) = 1;
                            *(void *)(a3 + 16) = v219;
                            *(_DWORD *)(a3 + 8) = v218;
                          }
                        }
                        *(void *)(*(void *)(a3 + 16) + 8 * v217) = v207;
                        *(_DWORD *)(a3 + 4) = v217 + 1;
                        uint64_t v215 = v205[2];
                      }
                      do
                      {
                        int v222 = *(_DWORD *)(a3 + 4);
                        if (v222 == *(_DWORD *)(a3 + 8))
                        {
                          int v223 = v222 ? 2 * v222 : 1;
                          if (v222 < v223)
                          {
                            if (v223)
                            {
                              uint64_t v224 = sub_1B6E073B8(8 * v223, 16);
                              int v222 = *(_DWORD *)(a3 + 4);
                            }
                            else
                            {
                              uint64_t v224 = 0;
                            }
                            if (v222 >= 1)
                            {
                              uint64_t v225 = 0;
                              do
                              {
                                *(void *)(v224 + v225) = *(void *)(*(void *)(a3 + 16) + v225);
                                v225 += 8;
                              }
                              while (8 * v222 != v225);
                            }
                            uint64_t v226 = *(void *)(a3 + 16);
                            if (v226 && *(unsigned char *)(a3 + 24))
                            {
                              sub_1B6E073C4(v226);
                              int v222 = *(_DWORD *)(a3 + 4);
                            }
                            *(unsigned char *)(a3 + 24) = 1;
                            *(void *)(a3 + 16) = v224;
                            *(_DWORD *)(a3 + 8) = v223;
                          }
                        }
                        *(void *)(*(void *)(a3 + 16) + 8 * v22sub_1B6DC4968((unsigned int *)this + 2) = *(void *)(v215 + 24);
                        *(_DWORD *)(a3 + 4) = v222 + 1;
                        sub_1B6E0B974((uint64_t)a1, (void *)v205[2]);
                        uint64_t v215 = v205[2];
                      }
                      while (v215);
                      uint64_t v203 = v209 + 1;
                      uint64_t v216 = *(void *)(a3 + 16);
                      float v205 = *(void **)(v216 + 8 * v209);
                      char v206 = 1;
                      if (!v205)
                      {
                        int v186 = v273;
                        goto LABEL_297;
                      }
                      goto LABEL_250;
                    }
                    LODWORD(v203) = v209 + 1;
                    uint64_t v216 = *(void *)(a3 + 16);
                    float v205 = *(void **)(v216 + 8 * v209++);
                  }
                  while (v205);
                  int v186 = v273;
                  if ((v206 & 1) == 0) {
                    continue;
                  }
LABEL_297:
                  int v227 = *(_DWORD *)(a3 + 4);
                  if (v227 == *(_DWORD *)(a3 + 8))
                  {
                    int v228 = v227 ? 2 * v227 : 1;
                    if (v227 < v228)
                    {
                      if (v228)
                      {
                        uint64_t v216 = sub_1B6E073B8(8 * v228, 16);
                        int v227 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        uint64_t v216 = 0;
                      }
                      if (v227 >= 1)
                      {
                        uint64_t v229 = 0;
                        do
                        {
                          *(void *)(v216 + v229) = *(void *)(*(void *)(a3 + 16) + v229);
                          v229 += 8;
                        }
                        while (8 * v227 != v229);
                      }
                      uint64_t v230 = *(void *)(a3 + 16);
                      if (v230 && *(unsigned char *)(a3 + 24))
                      {
                        sub_1B6E073C4(v230);
                        int v227 = *(_DWORD *)(a3 + 4);
                      }
                      *(unsigned char *)(a3 + 24) = 1;
                      *(void *)(a3 + 16) = v216;
                      *(_DWORD *)(a3 + 8) = v228;
                    }
                  }
                  *(void *)(v216 + 8 * v227) = 0;
                  *(_DWORD *)(a3 + 4) = v227 + 1;
                }
              }
              while ((int)v203 < v186);
              int v186 = *(_DWORD *)(a3 + 4);
            }
            while ((int)v203 < v186);
            float32x4_t v231 = v258;
            uint64_t v233 = v261 << 32;
            unint64_t v232 = v260 | 0xFFFFFFFF00000000;
            if (v186 <= 0)
            {
LABEL_319:
              if (v186 < 0)
              {
                if ((*(_DWORD *)(a3 + 8) & 0x80000000) != 0)
                {
                  uint64_t v234 = *(void *)(a3 + 16);
                  if (v234 && *(unsigned char *)(a3 + 24)) {
                    sub_1B6E073C4(v234);
                  }
                  *(unsigned char *)(a3 + 24) = 1;
                  *(void *)(a3 + 16) = 0;
                  *(_DWORD *)(a3 + 8) = 0;
                }
                uint64_t v235 = v186;
                do
                  *(void *)(*(void *)(a3 + 16) + 8 * v235++) = 0;
                while (v235);
              }
            }
            *(_DWORD *)(a3 + 4) = 0;
            *((void *)v231 + 3) = v233 | v259;
            *((void *)v231 + 4) = v232;
            return 1;
          }
          float32x4_t v231 = v258;
          uint64_t v233 = v261 << 32;
          unint64_t v232 = v260 | 0xFFFFFFFF00000000;
          goto LABEL_319;
        }
        unsigned int v42 = v257;
      }
      float v257 = v42;
      float v270 = v27;
      uint64_t v27 = (void *)v27[2];
      do
      {
        uint64_t v27 = *(void **)(v27[2] + 8);
        sub_1B6E0DE60(v27[3], &v278, (uint64_t)&v274);
        int v44 = sub_1B6E09C24((uint64_t)&v274, v25);
      }
      while (v44 < 0);
      int v29 = v44;
      if (!v44)
      {
LABEL_115:
        uint64_t v158 = v27[3];
        if (!(v29 | v43))
        {
          uint64_t v36 = *(void **)v270[2];
          if (v36[3] == v158)
          {
LABEL_126:
            if (v37)
            {
              uint64_t v165 = (void *)v37[2];
              if (v43 < 1)
              {
                if (v36 != v165)
                {
                  int v166 = *(_DWORD *)(a3 + 4);
                  int v167 = *(_DWORD *)(a3 + 8);
                  if (v166 == v167)
                  {
                    if (v166) {
                      int v167 = 2 * v166;
                    }
                    else {
                      int v167 = 1;
                    }
                    if (v166 >= v167)
                    {
                      int v167 = *(_DWORD *)(a3 + 4);
                    }
                    else
                    {
                      if (v167)
                      {
                        uint64_t v168 = sub_1B6E073B8(8 * v167, 16);
                        int v166 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        uint64_t v168 = 0;
                      }
                      if (v166 >= 1)
                      {
                        uint64_t v169 = 0;
                        do
                        {
                          *(void *)(v168 + v169) = *(void *)(*(void *)(a3 + 16) + v169);
                          v169 += 8;
                        }
                        while (8 * v166 != v169);
                      }
                      uint64_t v170 = *(void *)(a3 + 16);
                      if (v170 && *(unsigned char *)(a3 + 24))
                      {
                        sub_1B6E073C4(v170);
                        int v166 = *(_DWORD *)(a3 + 4);
                      }
                      *(unsigned char *)(a3 + 24) = 1;
                      *(void *)(a3 + 16) = v168;
                      *(_DWORD *)(a3 + 8) = v167;
                      uint64_t v37 = v272;
                    }
                  }
                  *(void *)(*(void *)(a3 + 16) + 8 * v166) = v37[3];
                  int v171 = v166 + 1;
                  *(_DWORD *)(a3 + 4) = v171;
                  float32x4_t v172 = (void *)*v36;
                  if (*v36 != v37[2])
                  {
                    do
                    {
                      uint64_t v173 = v172[3];
                      sub_1B6E0B974((uint64_t)a1, v172);
                      int v174 = *(_DWORD *)(a3 + 4);
                      int v175 = *(_DWORD *)(a3 + 8);
                      if (v174 == v175)
                      {
                        if (v174) {
                          int v175 = 2 * v174;
                        }
                        else {
                          int v175 = 1;
                        }
                        if (v174 >= v175)
                        {
                          int v175 = *(_DWORD *)(a3 + 4);
                        }
                        else
                        {
                          if (v175)
                          {
                            uint64_t v176 = sub_1B6E073B8(8 * v175, 16);
                            int v174 = *(_DWORD *)(a3 + 4);
                          }
                          else
                          {
                            uint64_t v176 = 0;
                          }
                          if (v174 >= 1)
                          {
                            uint64_t v177 = 0;
                            do
                            {
                              *(void *)(v176 + v177) = *(void *)(*(void *)(a3 + 16) + v177);
                              v177 += 8;
                            }
                            while (8 * v174 != v177);
                          }
                          uint64_t v178 = *(void *)(a3 + 16);
                          if (v178 && *(unsigned char *)(a3 + 24))
                          {
                            sub_1B6E073C4(v178);
                            int v174 = *(_DWORD *)(a3 + 4);
                          }
                          *(unsigned char *)(a3 + 24) = 1;
                          *(void *)(a3 + 16) = v176;
                          *(_DWORD *)(a3 + 8) = v175;
                          uint64_t v37 = v272;
                        }
                      }
                      *(void *)(*(void *)(a3 + 16) + 8 * v174) = v173;
                      int v171 = v174 + 1;
                      *(_DWORD *)(a3 + 4) = v171;
                      float32x4_t v172 = (void *)*v36;
                    }
                    while (*v36 != v37[2]);
                    int v167 = v175;
                    uint64x2_t v7 = v258;
                  }
                  if (v171 == v167)
                  {
                    if (v167) {
                      int v179 = 2 * v167;
                    }
                    else {
                      int v179 = 1;
                    }
                    if (v167 >= v179)
                    {
                      int v171 = v167;
                    }
                    else
                    {
                      if (v179)
                      {
                        uint64_t v180 = sub_1B6E073B8(8 * v179, 16);
                        int v167 = *(_DWORD *)(a3 + 4);
                      }
                      else
                      {
                        uint64_t v180 = 0;
                      }
                      if (v167 >= 1)
                      {
                        uint64_t v181 = 0;
                        do
                        {
                          *(void *)(v180 + v181) = *(void *)(*(void *)(a3 + 16) + v181);
                          v181 += 8;
                        }
                        while (8 * v167 != v181);
                      }
                      uint64_t v182 = *(void *)(a3 + 16);
                      if (v182 && *(unsigned char *)(a3 + 24))
                      {
                        sub_1B6E073C4(v182);
                        int v167 = *(_DWORD *)(a3 + 4);
                      }
                      *(unsigned char *)(a3 + 24) = 1;
                      *(void *)(a3 + 16) = v180;
                      int v171 = v167;
                      *(_DWORD *)(a3 + 8) = v179;
                    }
                    uint64x2_t v7 = v258;
                  }
                  *(void *)(*(void *)(a3 + 16) + 8 * v171) = 0;
                  *(_DWORD *)(a3 + 4) = v171 + 1;
                }
              }
              else
              {
                *uint64_t v36 = v165;
                v165[1] = v36;
              }
            }
            float v36[4] = v7;
            *(void *)(v36[2] + 3sub_1B6DC4968((unsigned int *)this + 2) = v27[4];
            if (!v35) {
              uint64_t v35 = v36;
            }
            continue;
          }
        }
        uint64_t v159 = (void *)sub_1B6E09DB4(a1, v270[3], v158);
        if (v43)
        {
          uint64_t v36 = v159;
          if (!v37)
          {
LABEL_122:
            if (v29)
            {
              int8x16_t v162 = (void *)v36[2];
              uint64_t v163 = v27[2];
            }
            else
            {
              uint64_t v163 = v27[2];
              uint64_t v164 = *(void **)(v163 + 8);
              int8x16_t v162 = (void *)v36[2];
              void *v164 = v162;
              v162[1] = v164;
            }
            *int8x16_t v162 = v163;
            *(void *)(v163 + 8) = v162;
            goto LABEL_126;
          }
          int v160 = (uint64_t *)v270[2];
        }
        else
        {
          int v160 = (uint64_t *)v270[2];
          uint64_t v161 = *v160;
          *uint64_t v159 = *v160;
          *(void *)(v161 + 8) = v159;
          uint64_t v36 = v159;
        }
        *int v160 = (uint64_t)v36;
        v36[1] = v160;
        goto LABEL_122;
      }
      int v46 = (void *)v27[2];
      uint64_t v45 = v27[3];
      int v47 = (void *)v46[1];
      float32x4_t v238 = v35;
      if (v47 == v46)
      {
        int v47 = 0;
      }
      else
      {
        uint64_t v48 = *v46;
        *int v47 = *v46;
        *(void *)(v48 + 8) = v47;
        *int v46 = v46;
        v46[1] = v46;
      }
      uint64_t v237 = v45;
      *(void *)(v45 + 16) = v47;
      int v49 = (int *)v27[4];
      int v51 = v49[15];
      int v50 = v49[16];
      int v53 = v49[11];
      int v52 = v49[12];
      int v54 = v49[14];
      int v55 = v49[10];
      uint64_t v56 = v50 * v53 - v51 * v52;
      uint64_t v57 = v54 * v52 - v55 * v50;
      uint64_t v58 = v55 * v51 - v54 * v53;
      float32x4_t v59 = (int *)v46[4];
      int v60 = v59[15];
      int v61 = v59[16];
      float v254 = v46;
      int v62 = v59[10];
      int v63 = v59[11];
      int v64 = v59[12];
      int v65 = v59[14];
      uint64_t v66 = v61 * v63 - v60 * v64;
      uint64_t v67 = v65 * v64 - v62 * v61;
      uint64_t v68 = v62 * v60 - v65 * v63;
      int v69 = v7[10];
      int v70 = v7[11];
      int v71 = v7[12];
      int v72 = v7[14];
      int v73 = v7[15];
      int v74 = v7[16];
      uint64_t v75 = v72 * v56 + v73 * v57 + v74 * v58;
      uint64_t v265 = v75;
      uint64_t v76 = v69 * v66 + v70 * v67 + v71 * v68;
      uint64_t v267 = v76;
      uint64_t v268 = v69 * v56 + v70 * v57 + v71 * v58;
      uint64_t v262 = (v49[6] - (uint64_t)(int)v259) * v56
           + (v49[7] - (uint64_t)(int)v261) * v57
           + (v49[8] - (uint64_t)(int)v260) * v58;
      uint64_t v263 = (v59[6] - (uint64_t)(int)v259) * v66
           + (v59[7] - (uint64_t)(int)v261) * v67
           + (v59[8] - (uint64_t)(int)v260) * v68;
      uint64_t v77 = v72 * v66 + v73 * v67 + v74 * v68;
      uint64_t v255 = v77;
      unint64_t v78 = sub_1B6E09A14(v268, v77);
      uint64_t v80 = v79;
      unint64_t v81 = sub_1B6E09A14(v75, v76);
      uint64_t v83 = v80 + ~v82;
      if (!v81) {
        uint64_t v83 = v80 - v82;
      }
      unint64_t v253 = v78 - v81;
      if (v78 - v81 < v78) {
        ++v83;
      }
      v274.i64[0] = v78 - v81;
      v274.i64[1] = v83;
      sub_1B6E0BF18((uint64_t)&a1[2]);
      uint64_t v252 = v84;
      *(void *)(v84 + 116) = -1;
      uint64_t v85 = v7[10];
      unint64_t v248 = sub_1B6E09A14(v262 * v85, v77);
      uint64_t v250 = v86;
      unint64_t v87 = sub_1B6E09A14(v263 * v85, v265);
      int v88 = v7;
      uint64_t v90 = v89;
      uint64_t v246 = ~v89;
      unint64_t v91 = v248 - v87;
      uint64_t v92 = v88[14];
      unint64_t v93 = sub_1B6E09A14(v263 * v92, v268);
      uint64_t v241 = v94;
      unint64_t v243 = v93;
      unint64_t v95 = sub_1B6E09A14(v262 * v92, v267);
      uint64_t v97 = v96;
      unint64_t v98 = sub_1B6E0995C((uint64_t *)&v274, v259);
      uint64_t v100 = v250 - v90;
      if (v87) {
        uint64_t v100 = v250 + v246;
      }
      uint64_t v101 = v100 + v241;
      uint64_t v102 = v101 - v97;
      uint64_t v103 = v101 + ~v97;
      if (v91 < v248) {
        uint64_t v103 = v102;
      }
      uint64_t v249 = (__PAIR128__((__PAIR128__(v103 + v99, v243) + __PAIR128__(v95 == 0, v91)) >> 64, v98)
            + __PAIR128__(v243 + v91 >= v95, v243 + v91 - v95)) >> 64;
      unint64_t v251 = v98 + v243 + v91 - v95;
      uint64_t v104 = v258[11];
      unint64_t v244 = sub_1B6E09A14(v262 * v104, v255);
      uint64_t v247 = v105;
      unint64_t v106 = sub_1B6E09A14(v263 * v104, v265);
      uint64_t v108 = v107;
      uint64_t v240 = ~v107;
      unint64_t v242 = v244 - v106;
      uint64_t v109 = v258[15];
      unint64_t v110 = sub_1B6E09A14(v263 * v109, v268);
      uint64_t v239 = v111;
      unint64_t v112 = sub_1B6E09A14(v262 * v109, v267);
      uint64_t v114 = v113;
      unint64_t v115 = sub_1B6E0995C((uint64_t *)&v274, v261);
      uint64_t v117 = v247 - v108;
      if (v106) {
        uint64_t v117 = v247 + v240;
      }
      uint64_t v118 = v117 + v239;
      uint64_t v119 = v118 - v114;
      uint64_t v120 = v118 + ~v114;
      if (v242 < v244) {
        uint64_t v120 = v119;
      }
      unsigned long long v245 = __PAIR128__((__PAIR128__(v120 + v116, v110) + __PAIR128__(v112 == 0, v242)) >> 64, v115)
           + __PAIR128__(v110 + v242 >= v112, v110 + v242 - v112);
      uint64_t v121 = v258[12];
      unint64_t v122 = sub_1B6E09A14(v262 * v121, v255);
      uint64_t v256 = v123;
      unint64_t v124 = sub_1B6E09A14(v263 * v121, v265);
      uint64_t v126 = v125;
      uint64_t v266 = ~v125;
      uint64_t v127 = v258[16];
      unint64_t v269 = sub_1B6E09A14(v263 * v127, v268);
      uint64_t v264 = v128;
      unint64_t v129 = sub_1B6E09A14(v262 * v127, v267);
      uint64_t v131 = v130;
      unint64_t v132 = sub_1B6E0995C((uint64_t *)&v274, v260);
      uint64_t v134 = v256 - v126;
      if (v124) {
        uint64_t v134 = v256 + v266;
      }
      uint64_t v135 = v134 + v264;
      uint64_t v136 = v135 - v131;
      uint64_t v137 = v135 + ~v131;
      if (v122 - v124 < v122) {
        uint64_t v137 = v136;
      }
      uint64_t v138 = v274.i64[1];
      *(void *)(v252 + 40) = v251;
      *(void *)(v252 + 48) = v249;
      *(void *)(v252 + 56) = v245;
      *(void *)(v252 + 7sub_1B6DC4968((unsigned int *)this + 2) = v132 + v269 + v122 - v124 - v129;
      *(void *)(v252 + 64) = *((void *)&v245 + 1);
      *(void *)(v252 + 80) = (__PAIR128__((__PAIR128__(v129 == 0, v269) + __PAIR128__(v137 + v133, v122 - v124)) >> 64, v132)+ __PAIR128__(v269 + v122 - v124 >= v129, v269 + v122 - v124 - v129)) >> 64;
      *(void *)(v252 + 88) = v253;
      *(void *)(v252 + 96) = v138;
      float v139 = sub_1B6E0CA20((unint64_t *)(v252 + 40));
      *(_DWORD *)(v252 + 104) = (int)(float)(v139 / sub_1B6E0CA20((unint64_t *)(v252 + 88)));
      float v140 = sub_1B6E0CA20((unint64_t *)(v252 + 56));
      *(_DWORD *)(v252 + 108) = (int)(float)(v140 / sub_1B6E0CA20((unint64_t *)(v252 + 88)));
      float v141 = sub_1B6E0CA20((unint64_t *)(v252 + 72));
      *(_DWORD *)(v252 + 11sub_1B6DC4968((unsigned int *)this + 2) = (int)(float)(v141 / sub_1B6E0CA20((unint64_t *)(v252 + 88)));
      void v27[3] = v252;
      *(void *)(v252 + 16) = v254;
      int v142 = *(_DWORD *)(a3 + 4);
      int v143 = *(_DWORD *)(a3 + 8);
      if (v142 == v143)
      {
        if (v142) {
          int v143 = 2 * v142;
        }
        else {
          int v143 = 1;
        }
        if (v142 < v143)
        {
          uint64_t v144 = v237;
          uint64_t v35 = v238;
          uint64_t v25 = v236;
          if (v143)
          {
            uint64_t v145 = sub_1B6E073B8(8 * v143, 16);
            int v142 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            uint64_t v145 = 0;
          }
          if (v142 >= 1)
          {
            uint64_t v146 = 0;
            do
            {
              *(void *)(v145 + v146) = *(void *)(*(void *)(a3 + 16) + v146);
              v146 += 8;
            }
            while (8 * v142 != v146);
          }
          uint64_t v147 = *(void *)(a3 + 16);
          if (v147 && *(unsigned char *)(a3 + 24))
          {
            sub_1B6E073C4(v147);
            int v142 = *(_DWORD *)(a3 + 4);
          }
          *(unsigned char *)(a3 + 24) = 1;
          *(void *)(a3 + 16) = v145;
          *(_DWORD *)(a3 + 8) = v143;
          goto LABEL_81;
        }
        int v143 = *(_DWORD *)(a3 + 4);
      }
      uint64_t v144 = v237;
      uint64_t v35 = v238;
      uint64_t v25 = v236;
LABEL_81:
      uint64_t v37 = v272;
      *(void *)(*(void *)(a3 + 16) + 8 * v14sub_1B6DC4968((unsigned int *)this + 2) = v252;
      int v148 = v142 + 1;
      *(_DWORD *)(a3 + 4) = v148;
      if (v148 == v143)
      {
        if (v143) {
          int v149 = 2 * v143;
        }
        else {
          int v149 = 1;
        }
        if (v143 >= v149)
        {
          int v149 = v143;
          int v148 = v143;
        }
        else
        {
          if (v149)
          {
            uint64_t v150 = sub_1B6E073B8(8 * v149, 16);
            int v143 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            uint64_t v150 = 0;
          }
          if (v143 >= 1)
          {
            uint64_t v151 = 0;
            do
            {
              *(void *)(v150 + v151) = *(void *)(*(void *)(a3 + 16) + v151);
              v151 += 8;
            }
            while (8 * v143 != v151);
          }
          uint64_t v152 = *(void *)(a3 + 16);
          if (v152 && *(unsigned char *)(a3 + 24))
          {
            sub_1B6E073C4(v152);
            int v143 = *(_DWORD *)(a3 + 4);
          }
          *(unsigned char *)(a3 + 24) = 1;
          *(void *)(a3 + 16) = v150;
          int v148 = v143;
          *(_DWORD *)(a3 + 8) = v149;
          uint64_t v37 = v272;
        }
      }
      else
      {
        int v149 = v143;
      }
      *(void *)(*(void *)(a3 + 16) + 8 * v148) = v144;
      int v153 = v148 + 1;
      *(_DWORD *)(a3 + 4) = v153;
      if (v153 == v149)
      {
        if (v149) {
          int v154 = 2 * v149;
        }
        else {
          int v154 = 1;
        }
        if (v149 >= v154)
        {
          int v153 = v149;
        }
        else
        {
          if (v154)
          {
            uint64_t v155 = sub_1B6E073B8(8 * v154, 16);
            int v149 = *(_DWORD *)(a3 + 4);
          }
          else
          {
            uint64_t v155 = 0;
          }
          if (v149 >= 1)
          {
            uint64_t v156 = 0;
            do
            {
              *(void *)(v155 + v156) = *(void *)(*(void *)(a3 + 16) + v156);
              v156 += 8;
            }
            while (8 * v149 != v156);
          }
          uint64_t v157 = *(void *)(a3 + 16);
          if (v157 && *(unsigned char *)(a3 + 24))
          {
            sub_1B6E073C4(v157);
            int v149 = *(_DWORD *)(a3 + 4);
          }
          *(unsigned char *)(a3 + 24) = 1;
          *(void *)(a3 + 16) = v155;
          int v153 = v149;
          *(_DWORD *)(a3 + 8) = v154;
          uint64_t v37 = v272;
        }
      }
      *(void *)(*(void *)(a3 + 16) + 8 * v153) = 0;
      *(_DWORD *)(a3 + 4) = v153 + 1;
      uint64x2_t v7 = v258;
      int v43 = v271;
      goto LABEL_115;
    }
    break;
  }
  uint64_t v39 = v38;
  while (1)
  {
    uint64_t v40 = (void *)*v39;
    if ((void *)*v39 == v38) {
      return 1;
    }
    uint64_t v27 = (void *)v39[2];
    sub_1B6E0DE60(v40[3], &v278, (uint64_t)&v274);
    int v41 = sub_1B6E09C24((uint64_t)&v274, v25);
    uint64_t v39 = v40;
    if ((v41 & 0x80000000) == 0)
    {
      uint64_t v37 = v36;
      goto LABEL_39;
    }
  }
}

void sub_1B6E0DE60(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(_DWORD *)(a1 + 116) & 0x80000000) != 0)
  {
    unint64_t v7 = sub_1B6E0995C((uint64_t *)(a1 + 40), *a2);
    uint64_t v9 = v8;
    unint64_t v10 = sub_1B6E0995C((uint64_t *)(a1 + 56), a2[1]);
    BOOL v12 = __CFADD__(v10, v7);
    unint64_t v13 = v10 + v7;
    uint64_t v14 = v12;
    uint64_t v15 = v11 + v9;
    unint64_t v16 = sub_1B6E0995C((uint64_t *)(a1 + 72), a2[2]);
    unsigned long long v18 = __PAIR128__(v15 + v17, v16) + __PAIR128__(v14, v13);
    sub_1B6E0E818(a3, &v18, (_OWORD *)(a1 + 88));
  }
  else
  {
    uint64_t v6 = *a2 * *(int *)(a1 + 104) + a2[1] * *(int *)(a1 + 108) + a2[2] * *(int *)(a1 + 112);
    sub_1B6E0E7C0(a3, v6);
  }
}

float sub_1B6E0DF48(uint64_t a1, uint64_t a2, char a3, int a4, int a5, double a6, double a7, double a8, int32x4_t a9, int32x4_t a10)
{
  if (a5 > 0)
  {
    float v11 = *(float *)&a7;
    float v12 = *(float *)&a6;
    memset(v103, 0, sizeof(v103));
    int v104 = 256;
    char v112 = 1;
    memset(v105, 0, sizeof(v105));
    int v106 = 256;
    memset(v107, 0, sizeof(v107));
    uint64_t v111 = 0;
    int v109 = 0;
    int v110 = 0;
    int v108 = 256;
    sub_1B6E0BA0C((uint64_t)&v101, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    float v13 = 0.0;
    if (v12 > 0.0)
    {
      float v13 = sub_1B6E0C1F8(&v101, v12, v11);
      if (v13 < 0.0)
      {
        uint64_t v14 = *(void *)(a1 + 16);
        if (v14 && *(unsigned char *)(a1 + 24)) {
          sub_1B6E073C4(v14);
        }
        *(unsigned char *)(a1 + 24) = 1;
        *(void *)(a1 + 16) = 0;
        *(_DWORD *)(a1 + 4) = 0;
        *(_DWORD *)(a1 + 8) = 0;
        uint64_t v15 = *(void *)(a1 + 48);
        if (v15 && *(unsigned char *)(a1 + 56)) {
          sub_1B6E073C4(v15);
        }
        *(unsigned char *)(a1 + 56) = 1;
        *(void *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 36) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        uint64_t v16 = *(void *)(a1 + 80);
        if (v16 && *(unsigned char *)(a1 + 88)) {
          sub_1B6E073C4(v16);
        }
        *(unsigned char *)(a1 + 88) = 1;
        *(void *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 68) = 0;
        *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
        goto LABEL_131;
      }
    }
    if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0 && (*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
    {
      uint64_t v17 = *(void *)(a1 + 16);
      if (v17 && *(unsigned char *)(a1 + 24)) {
        sub_1B6E073C4(v17);
      }
      *(unsigned char *)(a1 + 24) = 1;
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 4) = 0;
    uint64_t v18 = *(int *)(a1 + 36);
    if ((v18 & 0x80000000) != 0)
    {
      if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
      {
        uint64_t v19 = *(void *)(a1 + 48);
        if (v19 && *(unsigned char *)(a1 + 56)) {
          sub_1B6E073C4(v19);
        }
        *(unsigned char *)(a1 + 56) = 1;
        *(void *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 40) = 0;
      }
      uint64_t v20 = 12 * v18;
      uint64_t v21 = v18 + 1;
      do
      {
        uint64_t v22 = *(void *)(a1 + 48) + v20;
        *(_DWORD *)(v22 + 8) = 0;
        *(void *)uint64_t v22 = 0;
        v20 += 12;
        LODWORD(v2sub_1B6DC4968((unsigned int *)this + 2) = v21++;
      }
      while (v22);
    }
    *(_DWORD *)(a1 + 36) = 0;
    uint64_t v23 = *(int *)(a1 + 68);
    if ((v23 & 0x80000000) != 0)
    {
      if ((*(_DWORD *)(a1 + 72) & 0x80000000) != 0)
      {
        uint64_t v24 = *(void *)(a1 + 80);
        if (v24 && *(unsigned char *)(a1 + 88)) {
          sub_1B6E073C4(v24);
        }
        *(unsigned char *)(a1 + 88) = 1;
        *(void *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
      }
      bzero((void *)(*(void *)(a1 + 80) + 4 * v23), 4 * ~v23 + 4);
    }
    *(_DWORD *)(a1 + 68) = 0;
    char v100 = 1;
    uint64_t v99 = 0;
    int v97 = 0;
    int v98 = 0;
    sub_1B6E0E6CC(v116, (uint64_t)v96);
    int v25 = v97;
    if (v97 <= 0)
    {
      uint64_t v74 = v99;
      if (!v99) {
        goto LABEL_131;
      }
    }
    else
    {
      uint64_t v26 = 0;
      do
      {
        uint64_t v27 = *(void *)(v99 + 8 * v26);
        sub_1B6E0C0FC(v27);
        v117.i32[v114] = v28;
        sub_1B6E0C150(v27);
        v117.i32[v115] = v29;
        sub_1B6E0C1A4(v27);
        v117.i32[v113] = v30;
        float32x4_t v31 = v117;
        float32x4_t v33 = v101;
        float32x4_t v32 = v102;
        int v34 = *(_DWORD *)(a1 + 4);
        if (v34 == *(_DWORD *)(a1 + 8))
        {
          int v35 = v34 ? 2 * v34 : 1;
          if (v34 < v35)
          {
            float32x4_t v93 = v102;
            float32x4_t v94 = v101;
            float32x4_t v95 = v117;
            if (v35)
            {
              uint64_t v36 = sub_1B6E073B8(16 * v35, 16);
              float32x4_t v33 = v94;
              float32x4_t v31 = v95;
              uint64_t v37 = v36;
              int v34 = *(_DWORD *)(a1 + 4);
            }
            else
            {
              uint64_t v37 = 0;
            }
            if (v34 >= 1)
            {
              uint64_t v38 = 0;
              uint64_t v39 = 16 * v34;
              do
              {
                *(_OWORD *)(v37 + v38) = *(_OWORD *)(*(void *)(a1 + 16) + v38);
                v38 += 16;
              }
              while (v39 != v38);
            }
            uint64_t v40 = *(void *)(a1 + 16);
            if (v40 && *(unsigned char *)(a1 + 24))
            {
              sub_1B6E073C4(v40);
              float32x4_t v33 = v94;
              float32x4_t v31 = v95;
            }
            *(unsigned char *)(a1 + 24) = 1;
            *(void *)(a1 + 16) = v37;
            *(_DWORD *)(a1 + 8) = v35;
            int v34 = *(_DWORD *)(a1 + 4);
            float32x4_t v32 = v93;
          }
        }
        *(float32x4_t *)(*(void *)(a1 + 16) + 16 * v34) = vmlaq_f32(v32, v31, v33);
        ++*(_DWORD *)(a1 + 4);
        int v41 = *(uint64_t **)(v27 + 16);
        if (v41)
        {
          uint64_t v42 = 0xFFFFFFFFLL;
          int v43 = -1;
          int v44 = *(uint64_t **)(v27 + 16);
          do
          {
            if ((v44[5] & 0x80000000) != 0)
            {
              int v45 = *(_DWORD *)(a1 + 36);
              int v46 = v45;
              if (v45 == *(_DWORD *)(a1 + 40))
              {
                int v47 = v45 ? 2 * v45 : 1;
                int v46 = *(_DWORD *)(a1 + 36);
                if (v45 < v47)
                {
                  if (v47) {
                    uint64_t v48 = sub_1B6E073B8(12 * v47, 16);
                  }
                  else {
                    uint64_t v48 = 0;
                  }
                  int v49 = *(_DWORD *)(a1 + 36);
                  if (v49 >= 1)
                  {
                    uint64_t v50 = 0;
                    uint64_t v51 = 12 * v49;
                    do
                    {
                      uint64_t v52 = v48 + v50;
                      int v53 = (uint64_t *)(*(void *)(a1 + 48) + v50);
                      uint64_t v54 = *v53;
                      *(_DWORD *)(v52 + 8) = *((_DWORD *)v53 + 2);
                      *(void *)uint64_t v52 = v54;
                      v50 += 12;
                    }
                    while (v51 != v50);
                  }
                  uint64_t v55 = *(void *)(a1 + 48);
                  if (v55 && *(unsigned char *)(a1 + 56)) {
                    sub_1B6E073C4(v55);
                  }
                  *(unsigned char *)(a1 + 56) = 1;
                  *(void *)(a1 + 48) = v48;
                  *(_DWORD *)(a1 + 40) = v47;
                  int v46 = *(_DWORD *)(a1 + 36);
                }
              }
              uint64_t v56 = *(void *)(a1 + 48) + 12 * v46;
              *(_DWORD *)(v56 + 8) = 0;
              *(void *)uint64_t v56 = 0;
              int v57 = *(_DWORD *)(a1 + 40);
              int v58 = *(_DWORD *)(a1 + 36) + 1;
              *(_DWORD *)(a1 + 36) = v58;
              if (v58 == v57)
              {
                int v59 = v58 ? 2 * v58 : 1;
                if (v58 < v59)
                {
                  if (v59)
                  {
                    uint64_t v60 = sub_1B6E073B8(12 * v59, 16);
                    int v58 = *(_DWORD *)(a1 + 36);
                  }
                  else
                  {
                    uint64_t v60 = 0;
                  }
                  if (v58 >= 1)
                  {
                    uint64_t v61 = 0;
                    uint64_t v62 = 12 * v58;
                    do
                    {
                      uint64_t v63 = v60 + v61;
                      int v64 = (uint64_t *)(*(void *)(a1 + 48) + v61);
                      uint64_t v65 = *v64;
                      *(_DWORD *)(v63 + 8) = *((_DWORD *)v64 + 2);
                      *(void *)uint64_t v63 = v65;
                      v61 += 12;
                    }
                    while (v62 != v61);
                  }
                  uint64_t v66 = *(void *)(a1 + 48);
                  if (v66 && *(unsigned char *)(a1 + 56)) {
                    sub_1B6E073C4(v66);
                  }
                  *(unsigned char *)(a1 + 56) = 1;
                  *(void *)(a1 + 48) = v60;
                  *(_DWORD *)(a1 + 40) = v59;
                  int v58 = *(_DWORD *)(a1 + 36);
                }
              }
              uint64_t v67 = *(void *)(a1 + 48) + 12 * v58;
              *(_DWORD *)(v67 + 8) = 0;
              *(void *)uint64_t v67 = 0;
              ++*(_DWORD *)(a1 + 36);
              uint64_t v68 = *(void *)(a1 + 48);
              int v69 = v45 + 1;
              *((_DWORD *)v44 + 10) = v45;
              *(_DWORD *)(v44[2] + 40) = v45 + 1;
              uint64_t v70 = v68 + 12 * v45;
              *(_DWORD *)(v70 + 4) = 1;
              uint64_t v71 = v68 + 12 * v69;
              *(_DWORD *)(v71 + 4) = -1;
              *(_DWORD *)(v70 + 8) = sub_1B6E0E6CC(v44[3], (uint64_t)v96);
              *(_DWORD *)(v71 + 8) = v26;
            }
            unsigned int v72 = *((_DWORD *)v44 + 10);
            uint64_t v73 = v72;
            if ((v43 & 0x80000000) == 0)
            {
              *(_DWORD *)(*(void *)(a1 + 48) + 12 * (int)v7sub_1B6DC4968((unsigned int *)this + 2) = v43 - v72;
              uint64_t v73 = v42;
            }
            int v44 = (uint64_t *)*v44;
            uint64_t v42 = v73;
            int v43 = v72;
          }
          while (v44 != v41);
          *(_DWORD *)(*(void *)(a1 + 48) + 12 * (int)v73) = v72 - v73;
          int v25 = v97;
        }
        ++v26;
      }
      while (v26 < v25);
      uint64_t v74 = v99;
      uint64_t v75 = v26;
      if (v26)
      {
        uint64_t v76 = 0;
        while (1)
        {
          uint64_t v77 = *(void *)(v74 + 8 * v76);
          unint64_t v78 = *(uint64_t **)(v77 + 16);
          if (v78) {
            break;
          }
LABEL_115:
          if (++v76 == v75) {
            goto LABEL_116;
          }
        }
        uint64_t v79 = *(uint64_t **)(v77 + 16);
        while (1)
        {
          int v80 = *((_DWORD *)v79 + 10);
          if ((v80 & 0x80000000) == 0) {
            break;
          }
LABEL_114:
          uint64_t v79 = (uint64_t *)*v79;
          if (v79 == v78) {
            goto LABEL_115;
          }
        }
        LODWORD(v81) = *(_DWORD *)(a1 + 68);
        if (v81 != *(_DWORD *)(a1 + 72) || (!v81 ? (int v82 = 1) : (int v82 = 2 * v81), (int)v81 >= v82))
        {
LABEL_112:
          *(_DWORD *)(*(void *)(a1 + 80) + 4 * (int)v81) = v80;
          ++*(_DWORD *)(a1 + 68);
          int v88 = v79;
          do
          {
            *((_DWORD *)v88 + 10) = -1;
            int v88 = *(uint64_t **)(v88[2] + 8);
          }
          while (v88 != v79);
          goto LABEL_114;
        }
        if (v82)
        {
          uint64_t v83 = sub_1B6E073B8(4 * v82, 16);
          LODWORD(v81) = *(_DWORD *)(a1 + 68);
        }
        else
        {
          uint64_t v83 = 0;
        }
        uint64_t v84 = *(void *)(a1 + 80);
        if ((int)v81 < 1)
        {
          if (!v84)
          {
LABEL_111:
            *(unsigned char *)(a1 + 88) = 1;
            *(void *)(a1 + 80) = v83;
            *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = v82;
            LODWORD(v81) = *(_DWORD *)(a1 + 68);
            int v80 = *((_DWORD *)v79 + 10);
            goto LABEL_112;
          }
        }
        else
        {
          uint64_t v81 = v81;
          uint64_t v85 = (_DWORD *)v83;
          uint64_t v86 = *(int **)(a1 + 80);
          do
          {
            int v87 = *v86++;
            *v85++ = v87;
            --v81;
          }
          while (v81);
        }
        if (*(unsigned char *)(a1 + 88)) {
          sub_1B6E073C4(v84);
        }
        goto LABEL_111;
      }
LABEL_116:
      if (!v74)
      {
LABEL_131:
        if (v111 && v112) {
          sub_1B6E073C4(v111);
        }
        char v112 = 1;
        uint64_t v111 = 0;
        int v109 = 0;
        int v110 = 0;
        sub_1B6E0E8A8(v107);
        sub_1B6E0E8A8(v105);
        sub_1B6E0E8A8(v103);
        return v13;
      }
    }
    if (v100) {
      sub_1B6E073C4(v74);
    }
    goto LABEL_131;
  }
  uint64_t v89 = *(void *)(a1 + 16);
  if (v89 && *(unsigned char *)(a1 + 24)) {
    sub_1B6E073C4(v89);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v90 = *(void *)(a1 + 48);
  if (v90 && *(unsigned char *)(a1 + 56)) {
    sub_1B6E073C4(v90);
  }
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v91 = *(void *)(a1 + 80);
  if (v91 && *(unsigned char *)(a1 + 88)) {
    sub_1B6E073C4(v91);
  }
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0;
  return 0.0;
}

uint64_t sub_1B6E0E6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if ((v2 & 0x80000000) != 0)
  {
    uint64_t v2 = *(unsigned int *)(a2 + 4);
    int v5 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 120) = v2;
    int v6 = v2;
    if (v2 == v5)
    {
      int v7 = v2 ? 2 * v2 : 1;
      int v6 = v2;
      if ((int)v2 < v7)
      {
        if (v7)
        {
          uint64_t v8 = sub_1B6E073B8(8 * v7, 16);
          int v6 = *(_DWORD *)(a2 + 4);
        }
        else
        {
          uint64_t v8 = 0;
          int v6 = v2;
        }
        if (v6 >= 1)
        {
          uint64_t v9 = 0;
          do
          {
            *(void *)(v8 + v9) = *(void *)(*(void *)(a2 + 16) + v9);
            v9 += 8;
          }
          while (8 * v6 != v9);
        }
        uint64_t v10 = *(void *)(a2 + 16);
        if (v10) {
          BOOL v11 = *(unsigned char *)(a2 + 24) == 0;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
          sub_1B6E073C4(v10);
          int v6 = *(_DWORD *)(a2 + 4);
        }
        *(unsigned char *)(a2 + 24) = 1;
        *(void *)(a2 + 16) = v8;
        *(_DWORD *)(a2 + 8) = v7;
      }
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v6) = a1;
    *(_DWORD *)(a2 + 4) = v6 + 1;
  }
  return v2;
}

double sub_1B6E0E7C0(uint64_t a1, uint64_t a2)
{
  if (a2 < 1)
  {
    if (a2 < 0)
    {
      *(_DWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = -1;
      *(void *)a1 = -a2;
      *(void *)(a1 + 8) = a2 > 0;
    }
    else
    {
      *(_DWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 3sub_1B6DC4968((unsigned int *)this + 2) = 1;
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = (unint64_t)a2 >> 63;
  }
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E50D30;
  *(unsigned char *)(a1 + 36) = 1;
  return result;
}

uint64_t sub_1B6E0E818(uint64_t result, void *a2, _OWORD *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3 < 0)
  {
    int v4 = -1;
    *(_DWORD *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = -1;
    uint64_t v5 = a2[1];
    if (*a2) {
      uint64_t v6 = ~v5;
    }
    else {
      uint64_t v6 = -v5;
    }
    *(void *)double result = -*a2;
    *(void *)(result + 8) = v6;
  }
  else
  {
    if (v3) {
      int v4 = 1;
    }
    else {
      int v4 = *(void *)result != 0;
    }
    *(_DWORD *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = v4;
    *(_OWORD *)double result = *(_OWORD *)a2;
  }
  uint64_t v7 = *(void *)(result + 24);
  if (v7 < 0)
  {
    *(_DWORD *)(result + 3sub_1B6DC4968((unsigned int *)this + 2) = -v4;
    uint64_t v8 = *(void *)(result + 16);
    uint64_t v9 = -v8;
    if (v8) {
      uint64_t v10 = ~v7;
    }
    else {
      uint64_t v10 = -v7;
    }
    *(void *)(result + 16) = v9;
    *(void *)(result + 24) = v10;
  }
  else
  {
    *(_OWORD *)(result + 16) = *a3;
  }
  *(unsigned char *)(result + 36) = 0;
  return result;
}

uint64_t **sub_1B6E0E8A8(uint64_t **a1)
{
  for (uint64_t i = *a1; *a1; uint64_t i = *a1)
  {
    *a1 = (uint64_t *)i[2];
    sub_1B6E073C4(*i);
    sub_1B6E073C4((uint64_t)i);
  }
  return a1;
}

uint64_t sub_1B6E0E8F4(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = result;
  do
  {
    int v8 = a3;
    int v9 = a3 + a4;
    if (a3 + a4 < 0 != __OFADD__(a3, a4)) {
      ++v9;
    }
    uint64_t v10 = (int *)(*(void *)(v7 + 16) + 16 * (v9 >> 1));
    int v11 = *v10;
    int v12 = v10[1];
    int v13 = v10[2];
    int v14 = a4;
    do
    {
      uint64_t v15 = *(void *)(v7 + 16);
      for (uint64_t i = (_DWORD *)(v15 + 16 * a3); ; i += 4)
      {
        int v17 = i[1];
        if (v17 >= v12 && (v17 != v12 || *i >= v11 && (*i != v11 || i[2] >= v13))) {
          break;
        }
        ++a3;
      }
      for (uint64_t j = 16 * v14; ; j -= 16)
      {
        int v19 = *(_DWORD *)(v15 + j + 4);
        if (v12 >= v19)
        {
          if (v12 != v19) {
            break;
          }
          int v20 = *(_DWORD *)(v15 + j);
          if (v11 >= v20 && (v11 != v20 || v13 >= *(_DWORD *)(v15 + j + 8))) {
            break;
          }
        }
        --v14;
      }
      if (a3 <= v14)
      {
        long long v21 = *(_OWORD *)i;
        *(_OWORD *)uint64_t i = *(_OWORD *)(v15 + j);
        *(_OWORD *)(*(void *)(v7 + 16) + j) = v21;
        ++a3;
        --v14;
      }
    }
    while (a3 <= v14);
    if (v14 > v8) {
      double result = sub_1B6E0E8F4(v7, a2);
    }
  }
  while (a3 < a4);
  return result;
}

void sub_1B6E0EA24(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v45 = 2;
    uint64_t v44 = 1;
    do
    {
      uint64_t v43 = v5 + 1;
      if (v5 + 1 < v2)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        uint64_t v7 = v44;
        uint64_t v47 = v45;
        do
        {
          uint64_t v46 = v7 + 1;
          if ((int)v2 > (int)v7 + 1)
          {
            uint64_t v48 = *(void *)(a1 + 16);
            uint64_t v8 = v47;
            do
            {
              float32x4_t v9 = *(float32x4_t *)(v6 + 16 * v5);
              float32x4_t v10 = vsubq_f32(*(float32x4_t *)(v48 + 16 * v7), v9);
              int8x8_t v11 = (int8x8_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
              v10.i32[3] = 0;
              float32x4_t v12 = vsubq_f32(*(float32x4_t *)(*(void *)(a1 + 16) + 16 * v8), v9);
              int8x8_t v13 = (int8x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
              v12.i32[3] = 0;
              *(int8x8_t *)v14.f32 = vext_s8(*(int8x8_t *)v10.f32, v11, 4uLL);
              v14.i64[1] = v10.i64[0];
              *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v12.f32, v13, 4uLL);
              v15.i64[1] = v12.i64[0];
              int8x16_t v16 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v14, v12)), v10, v15);
              v17.i64[0] = vextq_s8(v16, v16, 4uLL).u64[0];
              v17.i64[1] = v16.u32[0];
              float v18 = 1.0;
              char v19 = 1;
              float32x4_t v49 = v17;
              do
              {
                float32x4_t v20 = vmulq_n_f32(v17, v18);
                v20.i32[3] = 0;
                char v21 = v19;
                int8x16_t v22 = (int8x16_t)vmulq_f32(v20, v20);
                float v23 = vadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)).f32[0];
                if (v23 > 0.0001)
                {
                  float32x4_t v24 = vmulq_n_f32(v20, 1.0 / sqrtf(v23));
                  unint64_t v25 = *(unsigned int *)(a2 + 4);
                  if ((int)v25 < 1) {
                    goto LABEL_14;
                  }
                  uint64_t v26 = 0;
                  BOOL v27 = 0;
                  do
                  {
                    int8x16_t v28 = (int8x16_t)vmulq_f32(*(float32x4_t *)(*(void *)(a2 + 16) + 16 * v26), v24);
                    if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8)).f32[0] > 0.999)break; {
                    BOOL v27 = ++v26 >= v25;
                    }
                  }
                  while (v25 != v26);
                  if (v27)
                  {
LABEL_14:
                    int8x16_t v29 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + 16 * v5), v24);
                    float v30 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8)).f32[0];
                    v24.f32[3] = -v30;
                    unint64_t v31 = *(unsigned int *)(a1 + 4);
                    if ((int)v31 < 1) {
                      goto LABEL_23;
                    }
                    uint64_t v32 = 0;
                    BOOL v33 = 0;
                    float v34 = -0.01 - v30;
                    do
                    {
                      int8x16_t v35 = (int8x16_t)vmulq_f32(*(float32x4_t *)(*(void *)(a1 + 16) + 16 * v32), v24);
                      if ((float)(v34
                                 + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8)).f32[0]) > 0.0)break;
                      BOOL v33 = ++v32 >= v31;
                    }
                    while (v31 != v32);
                    if (v33)
                    {
LABEL_23:
                      if (v25 == *(_DWORD *)(a2 + 8))
                      {
                        int v36 = v25 ? 2 * v25 : 1;
                        if ((int)v25 < v36)
                        {
                          float32x4_t v50 = v24;
                          if (v36)
                          {
                            uint64_t v37 = sub_1B6E073B8(16 * v36, 16);
                            float32x4_t v17 = v49;
                            float32x4_t v24 = v50;
                            uint64_t v38 = v37;
                            LODWORD(v25) = *(_DWORD *)(a2 + 4);
                          }
                          else
                          {
                            uint64_t v38 = 0;
                          }
                          if ((int)v25 >= 1)
                          {
                            uint64_t v39 = 0;
                            uint64_t v40 = 16 * v25;
                            do
                            {
                              *(_OWORD *)(v38 + v39) = *(_OWORD *)(*(void *)(a2 + 16) + v39);
                              v39 += 16;
                            }
                            while (v40 != v39);
                          }
                          uint64_t v41 = *(void *)(a2 + 16);
                          if (v41) {
                            BOOL v42 = *(unsigned char *)(a2 + 24) == 0;
                          }
                          else {
                            BOOL v42 = 1;
                          }
                          if (!v42)
                          {
                            sub_1B6E073C4(v41);
                            float32x4_t v17 = v49;
                            float32x4_t v24 = v50;
                          }
                          *(unsigned char *)(a2 + 24) = 1;
                          *(void *)(a2 + 16) = v38;
                          *(_DWORD *)(a2 + 8) = v36;
                          LODWORD(v25) = *(_DWORD *)(a2 + 4);
                        }
                      }
                      *(float32x4_t *)(*(void *)(a2 + 16) + 16 * (int)v25) = v24;
                      ++*(_DWORD *)(a2 + 4);
                    }
                  }
                }
                char v19 = 0;
                float v18 = -1.0;
              }
              while ((v21 & 1) != 0);
              ++v8;
            }
            while ((int)v2 > (int)v8);
          }
          ++v47;
          ++v7;
        }
        while (v46 != v2);
      }
      ++v44;
      ++v45;
      ++v5;
    }
    while (v43 != v2);
  }
}

void sub_1B6E0ED4C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 4);
  if ((int)v2 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v45 = 2;
    uint64_t v44 = 1;
    do
    {
      uint64_t v43 = v5 + 1;
      if (v5 + 1 < v2)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        uint64_t v8 = v44;
        uint64_t v7 = v45;
        do
        {
          uint64_t v9 = v8 + 1;
          if ((int)v2 > (int)v8 + 1)
          {
            uint64_t v10 = *(void *)(a1 + 16);
            uint64_t v11 = v7;
            do
            {
              uint64_t v12 = *(void *)(a1 + 16);
              float32x4_t v13 = *(float32x4_t *)(v10 + 16 * v8);
              float32x4_t v14 = *(float32x4_t *)(v12 + 16 * v11);
              *(int8x8_t *)v15.f32 = vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), 4uLL);
              v15.i64[1] = *(void *)(v10 + 16 * v8);
              *(int8x8_t *)v16.f32 = vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), 4uLL);
              v16.i64[1] = *(void *)(v12 + 16 * v11);
              int8x16_t v17 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v15, v14)), v13, v16);
              v18.i64[0] = vextq_s8(v17, v17, 4uLL).u64[0];
              v18.i64[1] = v17.u32[0];
              int8x16_t v19 = (int8x16_t)vmulq_f32(v18, v18);
              if (vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)).f32[0] > 0.0001)
              {
                float32x4_t v20 = *(float32x4_t *)(v6 + 16 * v5);
                *(int8x8_t *)v21.f32 = vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), 4uLL);
                v21.i64[1] = *(void *)(v6 + 16 * v5);
                int8x16_t v22 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v16, v20)), v14, v21);
                v23.i64[0] = vextq_s8(v22, v22, 4uLL).u64[0];
                v23.i64[1] = v22.u32[0];
                int8x16_t v24 = (int8x16_t)vmulq_f32(v23, v23);
                if (vadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)).f32[0] > 0.0001)
                {
                  int8x16_t v25 = (int8x16_t)vmlaq_f32(vnegq_f32(vmulq_f32(v21, v13)), v20, v15);
                  v26.i64[0] = vextq_s8(v25, v25, 4uLL).u64[0];
                  v26.i64[1] = v25.u32[0];
                  int8x16_t v27 = (int8x16_t)vmulq_f32(v26, v26);
                  if (vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0] > 0.0001)
                  {
                    int8x16_t v28 = (int8x16_t)vmulq_f32(v20, v18);
                    LODWORD(v29) = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).u32[0];
                    if (fabsf(v29) > 0.000001)
                    {
                      float32x4_t v30 = vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v18, v20, 3), v23, v13, 3), v26, v14, 3), -1.0 / v29);
                      unint64_t v31 = *(unsigned int *)(a1 + 4);
                      if ((int)v31 < 1) {
                        goto LABEL_16;
                      }
                      uint64_t v32 = 0;
                      BOOL v33 = 0;
                      do
                      {
                        int8x16_t v34 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v12 + 16 * v32), v30);
                        if ((float)((float)(COERCE_FLOAT(HIDWORD(*(_OWORD *)(v12 + 16 * v32))) + -0.01)
                                   + vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)).f32[0]) > 0.0)break;
                        BOOL v33 = ++v32 >= v31;
                      }
                      while (v31 != v32);
                      if (v33)
                      {
LABEL_16:
                        int v35 = *(_DWORD *)(a2 + 4);
                        if (v35 == *(_DWORD *)(a2 + 8))
                        {
                          int v36 = 2 * v35;
                          if (!v35) {
                            int v36 = 1;
                          }
                          if (v35 < v36)
                          {
                            int v46 = v36;
                            uint64_t v47 = v9;
                            float32x4_t v48 = v30;
                            if (v36)
                            {
                              uint64_t v37 = sub_1B6E073B8(16 * v36, 16);
                              float32x4_t v30 = v48;
                              uint64_t v38 = v37;
                              int v35 = *(_DWORD *)(a2 + 4);
                            }
                            else
                            {
                              uint64_t v38 = 0;
                            }
                            if (v35 >= 1)
                            {
                              uint64_t v39 = 0;
                              uint64_t v40 = 16 * v35;
                              do
                              {
                                *(_OWORD *)(v38 + v39) = *(_OWORD *)(*(void *)(a2 + 16) + v39);
                                v39 += 16;
                              }
                              while (v40 != v39);
                            }
                            uint64_t v41 = *(void *)(a2 + 16);
                            if (v41) {
                              BOOL v42 = *(unsigned char *)(a2 + 24) == 0;
                            }
                            else {
                              BOOL v42 = 1;
                            }
                            if (!v42)
                            {
                              sub_1B6E073C4(v41);
                              float32x4_t v30 = v48;
                            }
                            *(unsigned char *)(a2 + 24) = 1;
                            *(void *)(a2 + 16) = v38;
                            uint64_t v9 = v47;
                            *(_DWORD *)(a2 + 8) = v46;
                            int v35 = *(_DWORD *)(a2 + 4);
                          }
                        }
                        *(float32x4_t *)(*(void *)(a2 + 16) + 16 * v35) = v30;
                        ++*(_DWORD *)(a2 + 4);
                      }
                    }
                  }
                }
              }
              ++v11;
            }
            while ((int)v2 > (int)v11);
          }
          ++v7;
          uint64_t v8 = v9;
        }
        while (v9 != v2);
      }
      ++v44;
      ++v45;
      ++v5;
    }
    while (v43 != v2);
  }
}

uint64_t sub_1B6E0F054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((byte_1E9E48C10 & 1) == 0)
  {
    int v11 = 0;
    size_t v10 = 4;
    if (!sysctlbyname("hw.optional.neon_hpfp", &v11, &v10, 0, 0) && v11) {
      dword_1E9E48C0C |= 0x2000u;
    }
    byte_1E9E48C10 = 1;
  }
  uint64_t v8 = (uint64_t (*)())sub_1B6E0F134;
  if (dword_1E9E48C0C < 0x2000) {
    uint64_t v8 = (uint64_t (*)())sub_1B6E0F380;
  }
  off_1EB9734A0 = v8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1, a2, a3, a4);
}

float sub_1B6E0F134(long long *a1, int32x4_t *a2, unint64_t a3, _DWORD *a4)
{
  float32x4_t v4 = *(float32x4_t *)a2;
  float32x4_t v5 = (float32x4_t)vdupq_lane_s64(a2->i64[0], 0);
  float32x4_t v6 = (float32x4_t)vdupq_laneq_s32(*a2, 2);
  if (a3 >= 8)
  {
    int32x4_t v8 = (int32x4_t)xmmword_1B6E4B1A0;
    v10.i64[0] = 0x7F0000007FLL;
    v10.i64[1] = 0x7F0000007FLL;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    unint64_t v11 = 8;
    v12.i64[0] = 0x400000004;
    v12.i64[1] = 0x400000004;
    v13.i64[0] = 0x800000008;
    v13.i64[1] = 0x800000008;
    do
    {
      int32x4_t v14 = (int32x4_t)a1[1];
      v15.i64[0] = *(void *)a1;
      int32x4_t v16 = (int32x4_t)a1[3];
      v15.i64[1] = *((void *)a1 + 2);
      v17.i64[0] = *((void *)a1 + 4);
      v17.i64[1] = *((void *)a1 + 6);
      v14.i32[0] = *((void *)a1 + 1);
      v16.i32[0] = *((void *)a1 + 5);
      int32x4_t v18 = (int32x4_t)vmulq_f32(v15, v5);
      int32x4_t v19 = (int32x4_t)vmulq_f32(v17, v5);
      float32x4_t v20 = (float32x4_t)vuzp1q_s32(v14, v16);
      int32x4_t v21 = (int32x4_t)a1[5];
      v17.i64[0] = *((void *)a1 + 8);
      v17.i64[1] = *((void *)a1 + 10);
      v21.i32[0] = *((void *)a1 + 9);
      int32x4_t v22 = (int32x4_t)a1[7];
      v23.i64[0] = *((void *)a1 + 12);
      v23.i64[1] = *((void *)a1 + 14);
      v22.i32[0] = *((void *)a1 + 13);
      float32x4_t v24 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v18, v19), (float32x4_t)vuzp2q_s32(v18, v19)), v6, v20);
      int8x16_t v25 = (int8x16_t)vcgtq_f32(v24, v10);
      a1 += 8;
      int32x4_t v26 = (int32x4_t)vmulq_f32(v17, v5);
      int32x4_t v27 = (int32x4_t)vmulq_f32(v23, v5);
      float32x4_t v28 = (float32x4_t)vbslq_s8(v25, (int8x16_t)v24, (int8x16_t)v10);
      float32x4_t v29 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v26, v27), (float32x4_t)vuzp2q_s32(v26, v27)), v6, (float32x4_t)vuzp1q_s32(v21, v22));
      int8x16_t v30 = (int8x16_t)vcgtq_f32(v29, v28);
      float32x4_t v10 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v29, (int8x16_t)v28);
      int8x16_t v9 = vbslq_s8(v30, (int8x16_t)vaddq_s32(v8, v12), vbslq_s8(v25, (int8x16_t)v8, v9));
      int32x4_t v8 = vaddq_s32(v8, v13);
      v11 += 8;
    }
    while (v11 <= a3);
    unint64_t v7 = v11 - 8;
  }
  else
  {
    unint64_t v7 = 0;
    int32x4_t v8 = (int32x4_t)xmmword_1B6E4B1A0;
    v9.i64[0] = -1;
    v9.i64[1] = -1;
    v10.i64[0] = 0x7F0000007FLL;
    v10.i64[1] = 0x7F0000007FLL;
  }
  unint64_t v31 = v7 | 4;
  if (v31 <= a3)
  {
    v32.i64[0] = 0x400000004;
    v32.i64[1] = 0x400000004;
    do
    {
      long long v33 = *a1;
      int32x4_t v34 = (int32x4_t)a1[1];
      long long v35 = a1[2];
      int32x4_t v36 = (int32x4_t)a1[3];
      v37.i64[0] = *(void *)a1;
      v37.i64[1] = *((void *)a1 + 2);
      v38.i64[0] = *((void *)a1 + 4);
      v38.i64[1] = *((void *)a1 + 6);
      a1 += 4;
      v34.i32[0] = DWORD2(v33);
      v36.i32[0] = DWORD2(v35);
      int32x4_t v39 = (int32x4_t)vmulq_f32(v37, v5);
      int32x4_t v40 = (int32x4_t)vmulq_f32(v38, v5);
      float32x4_t v41 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v39, v40), (float32x4_t)vuzp2q_s32(v39, v40)), v6, (float32x4_t)vuzp1q_s32(v34, v36));
      int8x16_t v42 = (int8x16_t)vcgtq_f32(v41, v10);
      float32x4_t v10 = (float32x4_t)vbslq_s8(v42, (int8x16_t)v41, (int8x16_t)v10);
      int8x16_t v9 = vbslq_s8(v42, (int8x16_t)v8, v9);
      int32x4_t v8 = vaddq_s32(v8, v32);
      v31 += 4;
    }
    while (v31 <= a3);
  }
  unint64_t v43 = a3 & 3;
  switch(v43)
  {
    case 1uLL:
      int32x4_t v51 = (int32x4_t)vmulq_f32(*(float32x4_t *)a1, v4);
      float32x4_t v52 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 1)), (float32x4_t)vdupq_laneq_s32(v51, 2));
LABEL_15:
      int8x16_t v56 = (int8x16_t)vcgtq_f32(v52, v10);
      float32x4_t v10 = (float32x4_t)vbslq_s8(v56, (int8x16_t)v52, (int8x16_t)v10);
      int8x16_t v9 = vbslq_s8(v56, (int8x16_t)v8, v9);
      break;
    case 2uLL:
      float32x4_t v53 = (float32x4_t)*a1;
      int32x2_t v54 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
      v53.i64[1] = *((void *)a1 + 2);
      int32x4_t v55 = (int32x4_t)vmulq_f32(v53, v5);
      *(int32x2_t *)v53.f32 = vzip1_s32(v54, (int32x2_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)a1 + 1), *((int8x16_t *)a1 + 1), 8uLL));
      v53.i64[1] = v53.i64[0];
      float32x4_t v52 = vaddq_f32(vmlaq_f32((float32x4_t)vuzp2q_s32(v55, v55), v6, v53), (float32x4_t)vuzp1q_s32(v55, v55));
      goto LABEL_15;
    case 3uLL:
      int32x4_t v44 = (int32x4_t)a1[1];
      float32x4_t v45 = (float32x4_t)a1[2];
      v46.i64[0] = *(void *)a1;
      v46.i64[1] = *((void *)a1 + 2);
      v44.i32[0] = *((void *)a1 + 1);
      int32x4_t v47 = (int32x4_t)vmulq_f32(v46, v5);
      int32x4_t v48 = (int32x4_t)vdupq_lane_s64(vmulq_f32(v45, v4).i64[0], 0);
      float32x4_t v49 = vmlaq_f32(vaddq_f32((float32x4_t)vuzp1q_s32(v47, v48), (float32x4_t)vuzp2q_s32(v47, v48)), v6, (float32x4_t)vuzp1q_s32(v44, vdupq_laneq_s32((int32x4_t)v45, 2)));
      int8x16_t v50 = (int8x16_t)vcgtq_f32(v49, v10);
      float32x4_t v10 = (float32x4_t)vbslq_s8(v50, (int8x16_t)v49, (int8x16_t)v10);
      int8x16_t v9 = vbslq_s8(v50, (int8x16_t)v8, v9);
      break;
  }
  float32x2_t v57 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  int8x8_t v58 = (int8x8_t)vcgt_f32(v57, *(float32x2_t *)v10.f32);
  float32x2_t v59 = (float32x2_t)vbsl_s8(v58, (int8x8_t)v57, *(int8x8_t *)v10.f32);
  int32x2_t v60 = (int32x2_t)vbsl_s8(v58, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), *(int8x8_t *)v9.i8);
  float32x2_t v61 = (float32x2_t)vdup_lane_s32((int32x2_t)v59, 1);
  int8x8_t v62 = (int8x8_t)vcgt_f32(v61, v59);
  LODWORD(result) = vbsl_s8(v62, (int8x8_t)vdup_lane_s32(v60, 1), (int8x8_t)v60).u32[0];
  *a4 = vbsl_s8(v62, (int8x8_t)v61, (int8x8_t)v59).u32[0];
  return result;
}

float sub_1B6E0F380(int8x16_t *a1, int32x4_t *a2, unint64_t a3, _DWORD *a4)
{
  float32x4_t v4 = *(float32x4_t *)a2;
  float32x2_t v5 = (float32x2_t)vdup_laneq_s32(*a2, 2);
  if (a3 >= 8)
  {
    int8x8_t v11 = (int8x8_t)-1;
    int32x2_t v8 = (int32x2_t)0x300000002;
    int32x2_t v7 = (int32x2_t)0x100000000;
    float32x2_t v12 = (float32x2_t)0x7F0000007FLL;
    unint64_t v13 = 8;
    float32x2_t v10 = (float32x2_t)0x7F0000007FLL;
    int8x8_t v9 = (int8x8_t)-1;
    do
    {
      int8x16_t v14 = a1[1];
      int8x16_t v15 = a1[2];
      int8x16_t v16 = a1[3];
      float32x2_t v17 = vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v4.f32);
      float32x2_t v18 = vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v4.f32);
      float32x2_t v19 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
      *(int32x2_t *)v14.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      *(float32x2_t *)v15.i8 = vmla_f32(vpadd_f32(vmul_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)v4.f32), v17), v5, v19);
      *(float32x2_t *)v16.i8 = vmla_f32(vpadd_f32(v18, vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v14.i8);
      int8x8_t v20 = (int8x8_t)vcgt_f32(*(float32x2_t *)v15.i8, v12);
      *(int32x2_t *)v14.i8 = vcgt_f32(*(float32x2_t *)v16.i8, v10);
      float32x2_t v21 = (float32x2_t)vbsl_s8(v20, *(int8x8_t *)v15.i8, (int8x8_t)v12);
      float32x2_t v22 = (float32x2_t)vbsl_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v16.i8, (int8x8_t)v10);
      int8x16_t v23 = a1[4];
      int8x16_t v24 = a1[5];
      int8x16_t v25 = a1[6];
      int8x16_t v26 = a1[7];
      a1 += 8;
      float32x2_t v27 = vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v4.f32);
      float32x2_t v28 = vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v4.f32);
      float32x2_t v29 = vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v4.f32);
      *(int32x2_t *)v23.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
      *(int32x2_t *)v24.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
      *(float32x2_t *)v25.i8 = vmla_f32(vpadd_f32(v27, v28), v5, *(float32x2_t *)v23.i8);
      *(float32x2_t *)v26.i8 = vmla_f32(vpadd_f32(v29, vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v24.i8);
      *(int32x2_t *)v23.i8 = vcgt_f32(*(float32x2_t *)v25.i8, v21);
      *(int32x2_t *)v24.i8 = vcgt_f32(*(float32x2_t *)v26.i8, v22);
      float32x2_t v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v25.i8, (int8x8_t)v21);
      float32x2_t v10 = (float32x2_t)vbsl_s8(*(int8x8_t *)v24.i8, *(int8x8_t *)v26.i8, (int8x8_t)v22);
      int8x8_t v11 = vbsl_s8(*(int8x8_t *)v23.i8, (int8x8_t)vadd_s32(v7, (int32x2_t)0x400000004), vbsl_s8(v20, (int8x8_t)v7, v11));
      int8x8_t v9 = vbsl_s8(*(int8x8_t *)v24.i8, (int8x8_t)vadd_s32(v8, (int32x2_t)0x400000004), vbsl_s8(*(int8x8_t *)v14.i8, (int8x8_t)v8, v9));
      int32x2_t v7 = vadd_s32(v7, (int32x2_t)0x800000008);
      int32x2_t v8 = vadd_s32(v8, (int32x2_t)0x800000008);
      v13 += 8;
    }
    while (v13 <= a3);
    unint64_t v6 = v13 - 8;
  }
  else
  {
    unint64_t v6 = 0;
    int32x2_t v7 = (int32x2_t)0x100000000;
    int32x2_t v8 = (int32x2_t)0x300000002;
    int8x8_t v9 = (int8x8_t)-1;
    float32x2_t v10 = (float32x2_t)0x7F0000007FLL;
    int8x8_t v11 = (int8x8_t)-1;
    float32x2_t v12 = (float32x2_t)0x7F0000007FLL;
  }
  for (unint64_t i = v6 | 4; i <= a3; i += 4)
  {
    int8x16_t v31 = *a1;
    int8x16_t v32 = a1[1];
    int8x16_t v33 = a1[2];
    int8x16_t v34 = a1[3];
    a1 += 4;
    float32x2_t v35 = vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v4.f32);
    float32x2_t v36 = vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v4.f32);
    float32x2_t v37 = vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v4.f32);
    *(int32x2_t *)v31.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    *(int32x2_t *)v32.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
    *(float32x2_t *)v33.i8 = vmla_f32(vpadd_f32(v35, v36), v5, *(float32x2_t *)v31.i8);
    *(float32x2_t *)v34.i8 = vmla_f32(vpadd_f32(v37, vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v4.f32)), v5, *(float32x2_t *)v32.i8);
    *(int32x2_t *)v31.i8 = vcgt_f32(*(float32x2_t *)v33.i8, v12);
    *(int32x2_t *)v32.i8 = vcgt_f32(*(float32x2_t *)v34.i8, v10);
    float32x2_t v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v31.i8, *(int8x8_t *)v33.i8, (int8x8_t)v12);
    float32x2_t v10 = (float32x2_t)vbsl_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v34.i8, (int8x8_t)v10);
    int8x8_t v11 = vbsl_s8(*(int8x8_t *)v31.i8, (int8x8_t)v7, v11);
    int8x8_t v9 = vbsl_s8(*(int8x8_t *)v32.i8, (int8x8_t)v8, v9);
    int32x2_t v7 = vadd_s32(v7, (int32x2_t)0x400000004);
    int32x2_t v8 = vadd_s32(v8, (int32x2_t)0x400000004);
  }
  unint64_t v38 = a3 & 3;
  switch(v38)
  {
    case 1uLL:
      int32x4_t v46 = (int32x4_t)vmulq_f32(*(float32x4_t *)a1, v4);
      *(float32x2_t *)v46.i8 = vadd_f32((float32x2_t)vdup_laneq_s32(v46, 2), vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8));
      int8x8_t v47 = (int8x8_t)vcgt_f32(*(float32x2_t *)v46.i8, v12);
      float32x2_t v12 = (float32x2_t)vbsl_s8(v47, *(int8x8_t *)v46.i8, (int8x8_t)v12);
      int8x8_t v11 = vbsl_s8(v47, (int8x8_t)v7, v11);
      break;
    case 2uLL:
      float32x2_t v48 = vmla_f32(vpadd_f32(vmul_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)v4.f32), vmul_f32(*(float32x2_t *)a1[1].i8, *(float32x2_t *)v4.f32)), v5, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a1[1], a1[1], 8uLL)));
      int8x8_t v49 = (int8x8_t)vcgt_f32(v48, v12);
      float32x2_t v12 = (float32x2_t)vbsl_s8(v49, (int8x8_t)v48, (int8x8_t)v12);
      int8x8_t v11 = vbsl_s8(v49, (int8x8_t)v7, v11);
      break;
    case 3uLL:
      int8x16_t v39 = a1[1];
      float32x2_t v40 = vmul_f32(*(float32x2_t *)a1->i8, *(float32x2_t *)v4.f32);
      float32x2_t v41 = vmul_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v4.f32);
      int32x4_t v42 = (int32x4_t)vmulq_f32((float32x4_t)a1[2], v4);
      float32x2_t v43 = vmla_f32(vpadd_f32(v40, v41), v5, (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(*a1, *a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)));
      float32x2_t v44 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), (float32x2_t)vdup_laneq_s32(v42, 2));
      *(int32x2_t *)v42.i8 = vcgt_f32(v43, v12);
      int8x8_t v45 = (int8x8_t)vcgt_f32(v44, v10);
      float32x2_t v12 = (float32x2_t)vbsl_s8(*(int8x8_t *)v42.i8, (int8x8_t)v43, (int8x8_t)v12);
      float32x2_t v10 = (float32x2_t)vbsl_s8(v45, (int8x8_t)v44, (int8x8_t)v10);
      int8x8_t v11 = vbsl_s8(*(int8x8_t *)v42.i8, (int8x8_t)v7, v11);
      int8x8_t v9 = vbsl_s8(v45, (int8x8_t)v8, v9);
      break;
  }
  int8x8_t v50 = (int8x8_t)vcgt_f32(v10, v12);
  float32x2_t v51 = (float32x2_t)vbsl_s8(v50, (int8x8_t)v10, (int8x8_t)v12);
  int32x2_t v52 = (int32x2_t)vbsl_s8(v50, v9, v11);
  float32x2_t v53 = (float32x2_t)vdup_lane_s32((int32x2_t)v51, 1);
  int8x8_t v54 = (int8x8_t)vcgt_f32(v53, v51);
  LODWORD(result) = vbsl_s8(v54, (int8x8_t)vdup_lane_s32(v52, 1), (int8x8_t)v52).u32[0];
  *a4 = vbsl_s8(v54, (int8x8_t)v53, (int8x8_t)v51).u32[0];
  return result;
}

double sub_1B6E0F61C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFE00 | 0x14;
  *(_WORD *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 7sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 15sub_1B6DC4968((unsigned int *)this + 2) = 0u;
  *(_OWORD *)(a1 + sub_1B6DAD18C((uint64_t)this + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return result;
}

void *sub_1B6E0F678(void *a1)
{
  unint64_t v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[21];
  if (v3)
  {
    a1[22] = v3;
    operator delete(v3);
  }
  float32x4_t v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  float32x2_t v5 = (void *)a1[15];
  if (v5)
  {
    a1[16] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[12];
  if (v6)
  {
    a1[13] = v6;
    operator delete(v6);
  }
  int32x2_t v7 = (void *)a1[9];
  if (v7)
  {
    a1[10] = v7;
    operator delete(v7);
  }
  int32x2_t v8 = (void *)a1[6];
  if (v8)
  {
    a1[7] = v8;
    operator delete(v8);
  }
  int8x8_t v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_1B6E0F720(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 8) = *a2;
  return result;
}

void sub_1B6E0F72C(void *a1)
{
  sub_1B642863C((uint64_t)(a1 + 3), (int)((uint64_t)(*(void *)(*a1 + 56) - *(void *)(*a1 + 48)) >> 2));
  uint64_t v2 = a1[6];
  char v8 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = *(int *)(*a1 + 4);
  unint64_t v5 = a1[7] - v2;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      a1[7] = v2 + v4;
    }
  }
  else
  {
    sub_1B6E10C30(a1 + 6, v4 - v5, &v8);
    uint64_t v3 = *a1;
  }
  sub_1B6459120((uint64_t)(a1 + 9), *(int *)(v3 + 8));
  sub_1B642863C((uint64_t)(a1 + 12), *(int *)(*a1 + 8));
  unint64_t v6 = (int)((uint64_t)(*(void *)(*a1 + 296) - *(void *)(*a1 + 288)) >> 2);
  __int16 v7 = 0;
  sub_1B6E0F7E8((uint64_t)(a1 + 15), v6, &v7);
}

void sub_1B6E0F7E8(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_1B6E10D58((void **)a1, a2 - v3, a3);
  }
}

void sub_1B6E0F818(uint64_t a1, int a2)
{
  unint64_t v3 = a2;
  sub_1B642863C(a1 + 144, a2);
  char v6 = 0;
  uint64_t v4 = *(void *)(a1 + 168);
  unint64_t v5 = *(void *)(a1 + 176) - v4;
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *(void *)(a1 + 176) = v4 + v3;
    }
  }
  else
  {
    sub_1B6E10C30((void *)(a1 + 168), v3 - v5, &v6);
  }
  if (!*(unsigned char *)(a1 + 13)) {
    sub_1B6E0F894(a1 + 192, v3);
  }
}

void sub_1B6E0F894(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1B6E10E70((void **)a1, a2 - v2);
  }
}

uint64_t sub_1B6E0F8C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void sub_1B6E0F8CC(uint64_t a1, int a2)
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  unsigned int v4 = v3 >> 2;
  int v5 = (v3 >> 2) & 7;
  if (v5) {
    BOOL v6 = (v3 & 3) != 2;
  }
  else {
    BOOL v6 = 0;
  }
  BOOL v130 = v6;
  *(unsigned char *)(a1 + 1sub_1B6DC4968((unsigned int *)this + 2) = v5 == 5;
  int v134 = v5;
  unsigned int v131 = v5 - 3;
  BOOL v7 = v5 == 3;
  *(unsigned char *)(a1 + 13) = (v4 & 6) == 4;
  *(unsigned char *)(a1 + 14) = (v4 & 6) == 2;
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 8);
  float v140 = 0;
  uint64_t v141 = 0;
  if ((v4 & 6) == 4) {
    BOOL v7 = 1;
  }
  BOOL v129 = v7;
  float v139 = 0;
  if (v9)
  {
    sub_1B6E10F80(&v139, v9);
    float32x2_t v10 = (char *)v140;
    bzero(v140, 2 * v9);
    float v140 = &v10[2 * v9];
    uint64_t v8 = *(void *)a1;
  }
  unint64_t v11 = (int)((uint64_t)(*(void *)(v8 + 296) - *(void *)(v8 + 288)) >> 2);
  LOWORD(v14sub_1B6DC4968((unsigned int *)this + 2) = 0;
  unint64_t v132 = (void *)(a1 + 120);
  sub_1B6E0F7E8(a1 + 120, v11, &v142);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(unsigned int *)(*(void *)a1 + 20);
  uint64_t v157 = (__int32 *)&v160;
  int v158 = v13;
  int v159 = 16;
  uint64_t v161 = 0;
  if (v13 <= 0x10)
  {
    int8x16_t v14 = (__int32 *)v155;
    uint64_t v151 = 0;
    __s = (__int32 *)v155;
    int v153 = v13;
    int v154 = 16;
    uint64_t v156 = 0;
    uint64_t v135 = (__int16 *)v150;
    __p = 0;
    uint64_t v147 = (__int16 *)v150;
    int v148 = v13;
    int v149 = 16;
    int v142 = v145;
    int v143 = v13;
    int v144 = 16;
  }
  else
  {
    uint64_t v161 = (__int32 *)operator new(4 * v13);
    uint64_t v157 = v161;
    int v159 = v13;
    __s = (__int32 *)v155;
    int v153 = v13;
    int v154 = 16;
    uint64_t v156 = 0;
    uint64_t v156 = operator new(4 * v13);
    uint64_t v151 = 0;
    __s = (__int32 *)v156;
    int v154 = v13;
    uint64_t v147 = (__int16 *)v150;
    int v148 = v13;
    int v149 = 16;
    uint64_t v151 = operator new(2 * v13);
    __p = 0;
    uint64_t v147 = (__int16 *)v151;
    int v149 = v13;
    int v142 = v145;
    int v143 = v13;
    int v144 = 16;
    __p = operator new(10 * v13);
    int v142 = __p;
    int v144 = v13;
    int8x16_t v14 = __s;
    uint64_t v135 = v147;
    uint64_t v12 = *(void *)a1;
  }
  if (*(int *)(v12 + 8) >= 1)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    while (1)
    {
      uint64_t v17 = (2 * v15) | 1;
      uint64_t v18 = *(void *)(v12 + 264);
      uint64_t v19 = *(unsigned int *)(v18 + 8 * v15);
      int8x8_t v20 = v157;
      if ((int)v19 >= 1)
      {
        uint64_t v21 = *(int *)(v18 + 4 * v17);
        float32x2_t v22 = (int *)(*(void *)(v12 + 288) + 4 * v21);
        int8x16_t v23 = (unsigned __int16 *)(*(void *)(v12 + 312) + 2 * v21);
        uint64_t v24 = *(void *)(v12 + 24);
        uint64_t v25 = *(void *)(a1 + 24);
        uint64_t v26 = v19;
        float32x2_t v27 = v157;
        do
        {
          uint64_t v28 = *v22++;
          int v29 = *(_DWORD *)(v24 + 8 * v28 + 4);
          LODWORD(v28) = *v23++;
          *v27++ = *(_DWORD *)(v25 + 4 * (v29 + (int)v28));
          --v26;
        }
        while (v26);
      }
      uint64_t v30 = *(void *)(v12 + 336);
      uint64_t v31 = *(int *)(v30 + 4 * v17);
      int8x16_t v32 = (int *)(*(void *)(v12 + 360) + 4 * v31);
      uint64_t v33 = *(unsigned int *)(v30 + 8 * v15);
      unint64_t v34 = *(unsigned __int16 *)(*(void *)(v12 + 432) + 2 * v15);
      if (v34)
      {
        if ((int)v19 >= 1 && (int)v33 >= 1)
        {
          uint64_t v43 = 0;
          uint64_t v44 = *(void *)(v12 + 384) + 2 * v31;
          do
          {
            uint64_t v45 = v32[v43];
            int32x4_t v46 = *(void **)a1;
            uint64_t v47 = *(void *)(*(void *)a1 + 144);
            uint64_t v48 = *(unsigned int *)(v47 + 8 * v45);
            if ((int)v48 >= 2)
            {
              uint64_t v49 = 0;
              int v50 = 0;
              uint64_t v51 = *(int *)(v47 + 8 * v45 + 4);
              int32x2_t v52 = (int *)(v46[15] + 8 * v45);
              while (v48 != v49)
              {
                uint64_t v53 = *(int *)(v46[21] + 4 * v51 + 4 * v49);
                int v54 = 2 * v53;
                uint64_t v55 = v46[3];
                uint64_t v56 = *(int *)(v55 + 8 * v53 + 4);
                uint64_t v57 = v46[6] + 4 * v56;
                int v58 = *(_DWORD *)(v55 + 4 * v54);
                uint64_t v59 = *(unsigned __int16 *)(v46[24] + 2 * v51 + 2 * v49);
                uint64_t v60 = *(void *)(a1 + 24) + 4 * v56;
                uint64_t v61 = *v52;
                if (*(_WORD *)(v44 + 2 * v43) == (v61 != *(_DWORD *)(v57 + 4 * v59))) {
                  unsigned int v62 = *(unsigned __int16 *)(v46[24] + 2 * v51 + 2 * v49);
                }
                else {
                  unsigned int v62 = v59 + 1;
                }
                if (v62 == v58) {
                  unsigned int v63 = 0;
                }
                else {
                  unsigned int v63 = v62;
                }
                int v64 = *(_DWORD *)(v60 + 4 * v63);
                if (v49)
                {
                  ++v49;
                  if (v64 != v50)
                  {
                    uint64_t v65 = v139;
                    *((_WORD *)v139 + v61) = 1;
                    v65[v52[1]] = 1;
                    uint64_t v66 = *(void *)(a1 + 48);
                    char v67 = *(unsigned char *)(v66 + v45) & 0xFD | (2 * (v15 == v61));
                    *(unsigned char *)(v66 + v45) = v67;
                    char v68 = v67 & 0xFB | (4 * (v15 == v52[1])) | 1;
                    *(unsigned char *)(v66 + v45) = v68;
                    *(unsigned char *)(v66 + v45) = v68 & 0xF7 | (8 * *(unsigned char *)(a1 + 13));
                    break;
                  }
                }
                else
                {
                  uint64_t v49 = 1;
                  int v50 = v64;
                }
              }
            }
            ++v43;
          }
          while (v43 != v33);
        }
      }
      else if ((int)v19 > (v34 & 4) >> 2)
      {
        uint64_t v35 = (v34 >> 2) & 1;
        do
        {
          if (v35) {
            int v36 = v35;
          }
          else {
            int v36 = v19;
          }
          if (v20[v35] != v20[v36 - 1])
          {
            uint64_t v37 = v32[v35];
            uint64_t v38 = *(void *)(*(void *)a1 + 120) + 8 * v37;
            uint64_t v39 = *(unsigned int *)v38;
            float32x2_t v40 = v139;
            *((_WORD *)v139 + (int)v39) = 1;
            v40[*(int *)(v38 + 4)] = 1;
            uint64_t v41 = *(void *)(a1 + 48);
            LOBYTE(v39) = *(unsigned char *)(v41 + v37) & 0xFD | (2 * (v15 == v39));
            *(unsigned char *)(v41 + v37) = v39;
            LOBYTE(v38) = v39 & 0xFB | (4 * (v15 == *(_DWORD *)(v38 + 4))) | 1;
            *(unsigned char *)(v41 + v37) = v38;
            *(unsigned char *)(v41 + v37) = v38 & 0xF7 | (8 * *(unsigned char *)(a1 + 13));
          }
          ++v35;
        }
        while (v19 != v35);
      }
      int v137 = v16;
      char v136 = v34;
      if ((v34 & 4) != 0 && !*((_WORD *)v139 + v15))
      {
        if (*(unsigned char *)(a1 + 13))
        {
          if ((int)v19 < 1) {
            goto LABEL_72;
          }
          *((_WORD *)v139 + v15) = 1;
          if (v34)
          {
            if ((int)v33 >= 1)
            {
              do
              {
                uint64_t v84 = *v32++;
                uint64_t v83 = v84;
                if ((*(unsigned char *)(*(void *)(*(void *)a1 + 240) + v84) & 2) != 0) {
                  *(unsigned char *)(*(void *)(a1 + 48) + v83) |= 8u;
                }
                --v33;
              }
              while (v33);
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(a1 + 48) + *v32) |= 8u;
            uint64_t v78 = v32[(int)v33 - 1];
            *(unsigned char *)(*(void *)(a1 + 48) + v78) |= 8u;
          }
        }
        else
        {
          BOOL v79 = v130;
          if (v19 != 1) {
            BOOL v79 = 0;
          }
          if (v79)
          {
            *((_WORD *)v139 + v15) = 1;
LABEL_72:
            __int32 *v14 = *v20;
            *uint64_t v135 = 0;
            goto LABEL_73;
          }
        }
      }
      __int32 *v14 = *v20;
      *uint64_t v135 = 0;
      if ((int)v19 > 1)
      {
        int v69 = v20 + 1;
        uint64_t v70 = v19 - 1;
        int v71 = 1;
        unsigned int v72 = v135 + 1;
        while (1)
        {
          __int32 v73 = *v69;
          if (*v69 == *(v69 - 1))
          {
            *unsigned int v72 = *(v72 - 1);
          }
          else
          {
            *unsigned int v72 = v71;
            if (v71 == 2)
            {
              if (*v14 == v73)
              {
LABEL_55:
                uint64_t v74 = &v14[v71];
                uint64_t v75 = wmemchr(v14, v73, v71);
                if (v75) {
                  uint64_t v76 = v75;
                }
                else {
                  uint64_t v76 = &v14[v71];
                }
                uint64_t v77 = (char *)v76 - (char *)v14;
                if (v71 == v77 >> 2)
                {
                  ++v71;
                  *uint64_t v74 = *v69;
                }
                else
                {
                  *unsigned int v72 = (unint64_t)v77 >> 2;
                }
                goto LABEL_62;
              }
              _OWORD v14[2] = v73;
              int v71 = 3;
            }
            else
            {
              if (v71 != 1) {
                goto LABEL_55;
              }
              v14[1] = v73;
              int v71 = 2;
            }
          }
LABEL_62:
          ++v72;
          ++v69;
          if (!--v70) {
            goto LABEL_74;
          }
        }
      }
LABEL_73:
      int v71 = 1;
LABEL_74:
      if ((v136 & 1) != 0 && !*((_WORD *)v139 + v15)) {
        *((_WORD *)v139 + v15) = v71 > 1;
      }
      *(_WORD *)(*(void *)(a1 + 72) + 2 * v15) = v71;
      *(_DWORD *)(*(void *)(a1 + 96) + 4 * v15) = v137;
      uint64_t v12 = *(void *)a1;
      if (v71 >= 2 && (int)v19 >= 1)
      {
        int v80 = (_WORD *)(*v132 + 2 * *(int *)(*(void *)(v12 + 264) + 4 * ((2 * v15) | 1)));
        uint64_t v81 = v135;
        do
        {
          __int16 v82 = *v81++;
          *v80++ = v82;
          --v19;
        }
        while (v19);
      }
      int v16 = v71 + v137;
      if (++v15 >= *(int *)(v12 + 8)) {
        goto LABEL_89;
      }
    }
  }
  int v16 = 0;
LABEL_89:
  sub_1B6E0F818(a1, v16);
  uint64_t v85 = *(void **)a1;
  if (*(int *)(*(void *)a1 + 8) >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(*(void *)a1 + 8); ++i)
    {
      uint64_t v87 = (2 * i) | 1;
      uint64_t v88 = v85[33];
      uint64_t v89 = *(int *)(v88 + 4 * v87);
      uint64_t v90 = v85[36];
      uint64_t v91 = *(unsigned int *)(v88 + 8 * i);
      uint64_t v92 = v85[39];
      if ((int)v91 < 1) {
        int v93 = 0;
      }
      else {
        int v93 = *(_DWORD *)(*(void *)(a1 + 24)
      }
                        + 4
                        * (*(_DWORD *)(v85[3] + 8 * *(int *)(v90 + 4 * v89) + 4) + *(unsigned __int16 *)(v92 + 2 * v89)));
      uint64_t v94 = *(unsigned __int16 *)(*(void *)(a1 + 72) + 2 * i);
      uint64_t v95 = *(void *)(a1 + 96);
      uint64_t v96 = (_DWORD *)(*(void *)(a1 + 144) + 4 * *(int *)(v95 + 4 * i));
      *uint64_t v96 = v93;
      if (!*((_WORD *)v139 + i)) {
        goto LABEL_168;
      }
      if (v94 >= 2 && (int)v91 >= 2)
      {
        uint64_t v97 = *(int *)(v88 + 4 * v87);
        int v98 = (unsigned __int16 *)(v92 + 2 * v89 + 2);
        uint64_t v99 = (int *)(v90 + 4 * v89 + 4);
        char v100 = (unsigned __int16 *)(*v132 + 2 * v97 + 2);
        uint64_t v101 = v91 - 1;
        int v102 = 1;
        do
        {
          int v103 = *v100++;
          if (v102 == v103) {
            v96[v102++] = *(_DWORD *)(*(void *)(a1 + 24) + 4 * (*(_DWORD *)(v85[3] + 8 * *v99 + 4) + *v98));
          }
          ++v98;
          ++v99;
          --v101;
        }
        while (v101);
      }
      uint64_t v138 = *(int *)(v95 + 4 * i);
      uint64_t v104 = *(void *)(a1 + 168);
      __int16 v105 = *(_WORD *)(v85[54] + 2 * i);
      char v106 = 1;
      if (!*(unsigned char *)(a1 + 13) && (v105 & 0x10) == 0 && (v105 & 1) == 0)
      {
        if (*(unsigned char *)(a1 + 14))
        {
          char v106 = v94 > 2;
          char v108 = !v129;
          if (v94 > 2) {
            char v108 = 1;
          }
          if (v108) {
            goto LABEL_116;
          }
          if (v94 != 1)
          {
            char v106 = 0;
            goto LABEL_116;
          }
        }
        else
        {
          char v106 = 0;
          if (v131 > 2 || v94 != 1) {
            goto LABEL_116;
          }
        }
        char v106 = (v105 & 4) == 0;
      }
LABEL_116:
      int v109 = (unsigned __int16 *)v142;
      bzero(v142, 10 * v94);
      sub_1B6E10400((void *)a1, i, (uint64_t)v109);
      if ((v106 & 1) == 0 && v94 == 2 && *(unsigned char *)(a1 + 14))
      {
        int v110 = a2;
        char v106 = v109[4] || v109[9] || v109[2] || v109[7] != 0;
        if (v134 == 3)
        {
          int v111 = *v109;
          if (v111 != 1) {
            LOBYTE(v111) = v109[5] == 1;
          }
          v106 |= v111;
        }
        int v112 = (v109[3] != 0) ^ (v109[8] != 0);
LABEL_130:
        int v113 = (unsigned char *)(v104 + v138);
        if (v112) {
          char v114 = 48;
        }
        else {
          char v114 = 8;
        }
        uint64_t v115 = 2;
        while (2)
        {
          unsigned char *v113 = 1;
          if (v109[2])
          {
            unsigned char *v113 = 5;
            goto LABEL_136;
          }
          if ((v106 & 1) != 0 || v109[4])
          {
            int v116 = *v109;
            BOOL v117 = v116 == 1;
            if (v116 == v110) {
              unsigned int v118 = 1;
            }
            else {
              unsigned int v118 = 3;
            }
            BOOL v119 = 1;
            goto LABEL_144;
          }
          BOOL v119 = v134 != 0;
          int v122 = *v109;
          BOOL v117 = v122 == 1;
          if (v122 != 1) {
            BOOL v119 = 0;
          }
          int v120 = 3;
          if (v122 == v110) {
            unsigned int v118 = 1;
          }
          else {
            unsigned int v118 = 3;
          }
          if (v119) {
LABEL_144:
          }
            int v120 = 1;
          if (v117) {
            unsigned int v118 = v120;
          }
          unsigned char *v113 = v118;
          unsigned int v121 = v118 | ((v109[4] != 0) << 6);
          unsigned char *v113 = v121;
          if (v109[4])
          {
            LOBYTE(v121) = v121 | ((*v109 - v109[4] > 1) << 7);
            unsigned char *v113 = v121;
            if (!v119) {
              goto LABEL_160;
            }
          }
          else if (v119)
          {
            unsigned char *v113 = v121 | ((*v109 > 1u) << 7);
          }
          else
          {
            unsigned int v121 = v121 & 0xFFFFFF7F | (((v118 >> 1) & 1) << 7);
            unsigned char *v113 = v121;
LABEL_160:
            if (v109[3] | v105 & 0x20) {
              char v123 = 16;
            }
            else {
              char v123 = v114;
            }
            unsigned char *v113 = v121 | v123;
            if (!*(unsigned char *)(a1 + 13))
            {
              uint64_t v124 = *(int *)(*(void *)(a1 + 96) + 4 * i);
              uint64_t v125 = *(void *)(a1 + 192);
              uint64_t v126 = v125 + 4 * v124;
              int v127 = v109[1];
              *(_WORD *)(v126 + v115 - sub_1B6DC4968((unsigned int *)this + 2) = v127;
              __int16 v128 = *v109;
              if (v115 == 2 && v127) {
                *(_WORD *)(v125 + 4 * v124 + sub_1B6DC4968((unsigned int *)this + 2) = v127 + ~(_WORD)v91 + v128;
              }
              else {
                *(_WORD *)(v126 + v115) = v127 + v128 - 1;
              }
            }
          }
LABEL_136:
          v115 += 4;
          v109 += 5;
          ++v113;
          if (!--v94) {
            goto LABEL_168;
          }
          continue;
        }
      }
      int v110 = a2;
      if (v94)
      {
        int v112 = 0;
        goto LABEL_130;
      }
LABEL_168:
      uint64_t v85 = *(void **)a1;
    }
  }
  operator delete(__p);
  operator delete(v151);
  operator delete(v156);
  operator delete(v161);
  if (v139)
  {
    float v140 = v139;
    operator delete(v139);
  }
}

void *sub_1B6E10400(void *result, int a2, uint64_t a3)
{
  unsigned int v3 = (void *)*result;
  uint64_t v4 = *(unsigned __int16 *)(result[9] + 2 * a2);
  if (*(_WORD *)(*(void *)(*result + 432) + 2 * a2))
  {
    if (*(_WORD *)(result[9] + 2 * a2))
    {
      uint64_t v19 = (_WORD *)(a3 + 4);
      do
      {
        *(v19 - sub_1B6DC4968((unsigned int *)this + 2) = 0;
        *uint64_t v19 = 1;
        v19 += 5;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    uint64_t v5 = v3[45];
    uint64_t v6 = v3[42];
    unint64_t v7 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    uint64_t v8 = *(int *)(v6 + v7);
    uint64_t v9 = 8 * a2;
    uint64_t v10 = *(unsigned int *)(v6 + v9);
    unint64_t v11 = (int *)(v5 + 4 * v8);
    uint64_t v12 = v3[33];
    uint64_t v13 = *(unsigned int *)(v12 + v9);
    if (v4 != 1 || (int)v10 > (int)v13)
    {
      uint64_t v15 = result[15] + 2 * *(int *)(v12 + v7);
      *(_DWORD *)a3 = 1;
      if ((int)v10 > (int)v13 || *(_WORD *)(v15 + 2 * ((int)v13 - 1))) {
        goto LABEL_33;
      }
      uint64_t v16 = *v11;
      if (*(unsigned char *)(result[6] + v16))
      {
        uint64_t v18 = (_WORD *)(a3 + 4);
      }
      else
      {
        char v17 = *(unsigned char *)(v3[30] + v16);
        if ((v17 & 4) != 0)
        {
          uint64_t v18 = (_WORD *)(a3 + 8);
        }
        else
        {
          if ((v17 & 8) == 0)
          {
LABEL_33:
            if ((int)v13 >= 2)
            {
              uint64_t v25 = 0;
              uint64_t v26 = v5 + 4 * v8 + 4;
              do
              {
                float32x2_t v27 = (unsigned __int16 *)(v15 + 2 * v25);
                unsigned int v28 = v27[1];
                if (v28 == *v27)
                {
                  uint64_t v29 = *(int *)(v26 + 4 * v25);
                  if (*(unsigned char *)(result[6] + v29))
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                  }
                  else
                  {
                    char v30 = *(unsigned char *)(v3[30] + v29);
                    if ((v30 & 4) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 8);
                    }
                    else if ((v30 & 8) != 0)
                    {
                      ++*(_WORD *)(a3 + 10 * v27[1] + 6);
                    }
                  }
                }
                else
                {
                  if (*(_WORD *)(a3 + 10 * v27[1]))
                  {
                    ++*(_WORD *)(a3 + 10 * v27[1] + 4);
                    unsigned int v28 = v27[1];
                  }
                  *(_WORD *)(a3 + 10 * v28 + sub_1B6DC4968((unsigned int *)this + 2) = v25 + 1;
                }
                ++*(_WORD *)(a3 + 10 * v27[1]);
                ++v25;
              }
              while (v13 - 1 != v25);
            }
            if (!*(_WORD *)(v15 + 2 * ((int)v13 - 1)) && (int)v10 <= (int)v13) {
              --*(_WORD *)(a3 + 4);
            }
            return result;
          }
          uint64_t v18 = (_WORD *)(a3 + 6);
        }
      }
      ++*v18;
      goto LABEL_33;
    }
    *(_DWORD *)a3 = 0;
    if ((int)v10 > 0)
    {
      int v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = result[6];
      do
      {
        uint64_t v23 = v11[v21];
        if (*(unsigned char *)(v22 + v23))
        {
          if (v20)
          {
            *(_WORD *)(a3 + 4) = 1;
            break;
          }
          *(_WORD *)a3 = v13;
          *(_WORD *)(a3 + sub_1B6DC4968((unsigned int *)this + 2) = v21;
          int v20 = (unsigned __int16)v13;
        }
        else
        {
          char v24 = *(unsigned char *)(v3[30] + v23);
          if ((v24 & 4) != 0)
          {
            ++*(_WORD *)(a3 + 8);
          }
          else if ((v24 & 8) != 0)
          {
            ++*(_WORD *)(a3 + 6);
          }
        }
        ++v21;
      }
      while (v10 != v21);
    }
    *(_WORD *)a3 = v13;
  }
  return result;
}

void *sub_1B6E1066C(void *result, int a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v4 = *(int *)(*(void *)(*result + 264) + 8 * a2 + 4);
  uint64_t v5 = *(void *)(*result + 288) + 4 * v4;
  uint64_t v6 = *(void *)(*result + 312) + 2 * v4;
  unint64_t v7 = (unsigned __int16 *)(result[24] + 4 * *(int *)(result[12] + 4 * a2) + 4 * a3);
  uint64_t v8 = *v7;
  uint64_t v9 = *(int *)(v5 + 4 * v8);
  uint64_t v10 = v7[1];
  uint64_t v11 = *(void *)(*result + 24);
  int v12 = *(_DWORD *)(v11 + 8 * v9);
  uint64_t v13 = *(int *)(v11 + 4 * (int)((2 * v9) | 1));
  uint64_t v14 = result[3];
  uint64_t v15 = *(int *)(v5 + 4 * v10);
  int v16 = *(_DWORD *)(v11 + 8 * v15);
  uint64_t v17 = v14 + 4 * *(int *)(v11 + 4 * (int)((2 * v15) | 1));
  int v18 = *(unsigned __int16 *)(v6 + 2 * v8);
  int v19 = *(unsigned __int16 *)(v6 + 2 * v10);
  if (!v19) {
    int v19 = v16;
  }
  if (v12 - 1 == v18) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = v18 + 1;
  }
  *a4 = *(_DWORD *)(v14 + 4 * v13 + 4 * v20);
  a4[1] = *(_DWORD *)(v17 + 4 * (v19 - 1));
  return result;
}

void *sub_1B6E10718(void **a1)
{
  return memcpy(a1[3], *((const void **)*a1 + 6), ((uint64_t)((*((void *)*a1 + 7) - *((void *)*a1 + 6)) << 30) >> 30) & 0xFFFFFFFFFFFFFFFCLL);
}

void *sub_1B6E10734(void *result)
{
  uint64_t v1 = *result;
  unint64_t v2 = *(int **)(*result + 48);
  unint64_t v3 = *(void *)(*result + 56) - (void)v2;
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v4 = result[12];
    uint64_t v5 = (_DWORD *)result[3];
    uint64_t v6 = (v3 >> 2);
    do
    {
      uint64_t v7 = *v2++;
      *v5++ = *(_DWORD *)(v4 + 4 * v7);
      --v6;
    }
    while (v6);
  }
  int v8 = *(_DWORD *)(v1 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = result[9];
    do
    {
      if (*(unsigned __int16 *)(v10 + 2 * v9) >= 2u)
      {
        uint64_t v11 = (unsigned int *)(*(void *)(v1 + 264) + 8 * v9);
        uint64_t v12 = *v11;
        if ((int)v12 >= 1)
        {
          uint64_t v13 = (int)v11[1];
          uint64_t v14 = (int *)(*(void *)(v1 + 288) + 4 * v13);
          uint64_t v15 = (unsigned __int16 *)(*(void *)(v1 + 312) + 2 * v13);
          int v16 = (unsigned __int16 *)(result[15] + 2 * v13);
          do
          {
            int v18 = *v16++;
            int v17 = v18;
            if (v18)
            {
              int v19 = *(_DWORD *)(*(void *)(v1 + 24) + 8 * *v14 + 4) + *v15;
              *(_DWORD *)(result[3] + 4 * v19) += v17;
            }
            ++v15;
            ++v14;
            --v12;
          }
          while (v12);
          int v8 = *(_DWORD *)(v1 + 8);
        }
      }
      ++v9;
    }
    while (v9 < v8);
  }
  return result;
}

void *sub_1B6E10810(void *result, int a2, int a3, _DWORD *a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = (int *)(*(void *)(*result + 120) + 8 * a2);
  uint64_t v6 = *v5;
  if (*(unsigned __int16 *)(result[9] + 2 * v5[1]) + *(unsigned __int16 *)(result[9] + 2 * v6) < 3)
  {
    if (*(int *)(v4 + 12) < 1)
    {
      uint64_t v19 = result[12];
      uint64_t v20 = result[18];
      *a4 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 4 * v6));
      int v18 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 4 * v5[1]));
    }
    else
    {
      uint64_t v17 = result[12];
      *a4 = *(_DWORD *)(v17 + 4 * v6);
      int v18 = *(_DWORD *)(v17 + 4 * v5[1]);
    }
    a4[1] = v18;
  }
  else
  {
    uint64_t v7 = *(int *)(*(void *)(v4 + 144) + ((8 * a2) | 4));
    uint64_t v8 = *(int *)(*(void *)(v4 + 168) + 4 * v7 + 4 * a3);
    uint64_t v9 = *(unsigned __int16 *)(*(void *)(v4 + 192) + 2 * v7 + 2 * a3);
    uint64_t v10 = *(void *)(v4 + 24);
    int v11 = *(_DWORD *)(v10 + 8 * v8);
    int v12 = (2 * v8) | 1;
    uint64_t v13 = result[3] + 4 * *(int *)(v10 + 4 * v12);
    int v14 = *(_DWORD *)(v13 + 4 * v9);
    *a4 = v14;
    if ((int)v9 + 1 < v11) {
      unsigned int v15 = v9 + 1;
    }
    else {
      unsigned int v15 = 0;
    }
    int v16 = *(_DWORD *)(v13 + 4 * v15);
    a4[1] = v16;
    if (*v5 != *(_DWORD *)(*(void *)(v4 + 48) + 4 * *(int *)(v10 + 4 * v12) + 4 * v9))
    {
      *a4 = v16;
      a4[1] = v14;
    }
  }
  return result;
}

void *sub_1B6E10910(void *result, int a2, _DWORD *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = *(void *)(*result + 336);
  uint64_t v5 = *(unsigned int *)(v4 + 8 * a2);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    uint64_t v7 = *(int *)(v4 + v6);
    uint64_t v8 = (int *)(*(void *)(v3 + 360) + 4 * v7);
    uint64_t v9 = (unsigned __int16 *)(*(void *)(v3 + 384) + 2 * v7);
    uint64_t v10 = *(int *)(*(void *)(v3 + 264) + v6);
    uint64_t v11 = *(void *)(v3 + 288) + 4 * v10;
    uint64_t v12 = *(void *)(v3 + 312) + 2 * v10;
    __int16 v13 = *(_WORD *)(*(void *)(v3 + 432) + 2 * a2);
    int v14 = *(_DWORD *)(v3 + 12);
    uint64_t v15 = *(void *)(v3 + 120);
    uint64_t v16 = (v5 - 1);
    uint64_t v17 = v16 - 1;
    uint64_t v18 = result[9];
    uint64_t v19 = (int *)v11;
    uint64_t v20 = (unsigned __int16 *)v12;
    uint64_t v21 = v16;
    uint64_t v22 = a3;
    do
    {
      uint64_t v24 = *v8++;
      int v23 = v24;
      uint64_t v25 = v15 + 8 * v24;
      LODWORD(v24) = *v9++;
      uint64_t v26 = *(int *)(v25 + 4 * (v24 == 0));
      if (*(_WORD *)(v18 + 2 * v26) == 1)
      {
        float32x2_t v27 = (int *)(result[12] + 4 * v26);
        if (!v14) {
          float32x2_t v27 = (int *)(result[18] + 4 * *v27);
        }
        int v28 = *v27;
      }
      else if (v13)
      {
        uint64_t v34 = *(int *)(*(void *)(v3 + 144) + 4 * ((2 * v23) | 1));
        uint64_t v35 = *(int *)(*(void *)(v3 + 168) + 4 * v34);
        uint64_t v36 = *(unsigned __int16 *)(*(void *)(v3 + 192) + 2 * v34);
        uint64_t v37 = *(void *)(v3 + 24);
        uint64_t v38 = *(int *)(v37 + 8 * v35 + 4);
        uint64_t v39 = *(void *)(v3 + 48) + 4 * v38;
        uint64_t v40 = result[3] + 4 * v38;
        if (v26 == *(_DWORD *)(v39 + 4 * v36))
        {
          int v28 = *(_DWORD *)(v40 + 4 * v36);
        }
        else
        {
          if (*(_DWORD *)(v37 + 8 * v35) - 1 == v36) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = v36 + 1;
          }
          int v28 = *(_DWORD *)(v40 + 4 * v47);
        }
      }
      else
      {
        if ((v13 & 4) != 0 && !v21)
        {
          uint64_t v29 = *(int *)(v11 + 4 * v17);
          uint64_t v30 = *(void *)(v3 + 24);
          int v31 = *(_DWORD *)(v30 + 8 * v29);
          uint64_t v32 = result[3] + 4 * *(int *)(v30 + 4 * (int)((2 * v29) | 1));
          int v33 = *(unsigned __int16 *)(v12 + 2 * v17);
          if (!*(_WORD *)(v12 + 2 * v17)) {
            int v33 = v31;
          }
          a3[v16] = *(_DWORD *)(v32 + 4 * (v33 - 1));
          goto LABEL_24;
        }
        uint64_t v41 = *v19;
        uint64_t v42 = *(void *)(v3 + 24);
        int v43 = *(_DWORD *)(v42 + 8 * v41);
        uint64_t v44 = result[3] + 4 * *(int *)(v42 + 4 * (int)((2 * v41) | 1));
        int v45 = *v20;
        if (v43 - 1 == v45) {
          unsigned int v46 = 0;
        }
        else {
          unsigned int v46 = v45 + 1;
        }
        int v28 = *(_DWORD *)(v44 + 4 * v46);
      }
      *uint64_t v22 = v28;
LABEL_24:
      ++v22;
      --v21;
      ++v20;
      ++v19;
      --v5;
    }
    while (v5);
  }
  return result;
}