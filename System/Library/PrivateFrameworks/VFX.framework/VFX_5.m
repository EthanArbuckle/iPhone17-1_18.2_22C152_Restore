float sub_1B655A03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(float *)(a1 + 208);
}

float sub_1B655A088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(float *)(a1 + 212);
}

float sub_1B655A0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(float *)(a1 + 216);
}

void sub_1B655A120(_DWORD *a1)
{
  sub_1B655CC4C((uint64_t)a1, 0, 1.0);
  sub_1B655CC4C((uint64_t)a1, 1, 1.0);
  sub_1B655CC4C((uint64_t)a1, 2, 1.0);
  sub_1B655CC4C((uint64_t)a1, 3, 0.0);
  if (a1[62] != 1)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[62] = 1;
  }
  if (a1[63] != 1)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[63] = 1;
  }
  if (a1[64] != 1)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[64] = 1;
  }
  if (a1[65] != 10)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[65] = 10;
  }
}

uint64_t sub_1B655A1EC(_DWORD *a1, _DWORD *a2)
{
  *a2 = 1;
  a2[1] = a1[69];
  a2[2] = a1[52];
  a2[3] = a1[53];
  a2[4] = a1[54];
  a2[5] = a1[56];
  a2[6] = a1[62];
  a2[7] = a1[63];
  a2[8] = a1[64];
  a2[9] = a1[65];
  a2[10] = a1[71];
  return 44;
}

double sub_1B655A24C(uint64_t a1, uint64_t a2, int32x4_t a3, float a4, float a5)
{
  if (a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    int32x4_t v6 = a3;
    *(float *)&v6.i32[1] = a5;
    *(float32x2_t *)v6.i8 = vmul_f32(*(float32x2_t *)v6.i8, (float32x2_t)0xBF000000BF000000);
    *(_DWORD *)(a1 + 8) = v6.i32[1];
    *(void *)a1 = vzip1q_s32(v6, a3).u32[0];
    *(float *)a3.i32 = *(float *)a3.i32 * 0.5;
    *(float *)&a3.i32[1] = a4;
    *(float *)(a2 + 8) = a5 * 0.5;
    *(void *)a2 = a3.i64[0];
  }
  return *(double *)a3.i64;
}

float sub_1B655A2A0(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9, int32x4_t a10)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (a2) {
    BOOL v13 = a3 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    a9.i32[0] = a1[54];
    a10.i32[0] = a1[52];
    *(float *)&uint64_t v14 = *(float *)a10.i32 * 0.5;
    a10.i32[1] = a9.i32[0];
    *(float32x2_t *)a10.i8 = vmul_f32(*(float32x2_t *)a10.i8, (float32x2_t)0xBF000000BF000000);
    HIDWORD(v14) = a1[53];
    *(_DWORD *)(a2 + 8) = a10.i32[1];
    *(void *)a2 = vzip1q_s32(a10, a9).u32[0];
    *(float *)a9.i32 = *(float *)a9.i32 * 0.5;
    *(_DWORD *)(a3 + 8) = a9.i32[0];
    *(void *)a3 = v14;
  }
  return *(float *)a9.i32;
}

BOOL sub_1B655A34C(int32x4_t *a1, int32x4_t a2, double a3, float a4)
{
  if (a1)
  {
    HIDWORD(a3) = sqrtf((float)((float)(*(float *)&a3 * *(float *)&a3) + (float)(*(float *)a2.i32 * *(float *)a2.i32))+ (float)(a4 * a4));
    *(float32x2_t *)a2.i8 = vmul_f32(*(float32x2_t *)&a3, (float32x2_t)0x3F0000003F000000);
    *a1 = vtrn1q_s32((int32x4_t)0, vzip1q_s32(a2, a2));
  }
  return a1 != 0;
}

BOOL sub_1B655A388(uint64_t a1, int32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  if (!a1)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
    if (!a2) {
      return a2 != 0;
    }
    goto LABEL_3;
  }
  if (a2)
  {
LABEL_3:
    v11.i32[0] = *(_DWORD *)(a1 + 212);
    v11.i32[1] = sqrtf((float)((float)(v11.f32[0] * v11.f32[0]) + (float)(*(float *)(a1 + 208) * *(float *)(a1 + 208)))+ (float)(*(float *)(a1 + 216) * *(float *)(a1 + 216)));
    *(float32x2_t *)a9.i8 = vmul_f32(v11, (float32x2_t)0x3F0000003F000000);
    *a2 = vtrn1q_s32((int32x4_t)0, vzip1q_s32(a9, a9));
  }
  return a2 != 0;
}

void sub_1B655A41C(float *cf, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, float32x4_t a15, uint64_t a16)
{
  int v20 = a6;
  v22 = (__n128 *)a4;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (!cf) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  float v27 = cf[52];
  float v26 = cf[53];
  float v28 = cf[54];
  v29.f32[0] = v27 * 0.5;
  float v30 = v28 * 0.5;
  if (v20)
  {
    if (v20 == 2)
    {
      sub_1B63CEAAC(cf, a2, a3, (uint64_t)v22, a5, 2, a7, a8, a16);
    }
    else if (v20 == 1 && a2 >= 1)
    {
      v31 = (__n128 *)a5;
      do
      {
        unsigned int v32 = 214013 * *a3 + 2531011;
        a15.f32[0] = (double)HIWORD(v32) * 0.0000152590219;
        float32_t v33 = v26 * a15.f32[0];
        a15.f32[0] = v26 - (float)(v26 * a15.f32[0]);
        float v34 = (float)(v29.f32[0] * a15.f32[0]) / v26;
        float v35 = (float)(v30 * a15.f32[0]) / v26;
        unsigned int v36 = 214013 * v32 + 2531011;
        a15.f32[0] = (double)HIWORD(v36) * 0.0000152590219;
        a15.f32[0] = (a15.f32[0] * 2.0 + -1.0) * v34;
        unsigned int v37 = 214013 * v36 + 2531011;
        *a3 = v37;
        float v38 = (double)HIWORD(v37) * 0.0000152590219;
        float32_t v39 = (v38 * 2.0 + -1.0) * v35;
        a15.f32[1] = v33;
        a15.f32[2] = v39;
        __n128 *v22 = (__n128)a15;
        if (a5)
        {
          int32x4_t v40 = (int32x4_t)vmulq_f32(a15, a15);
          v40.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))).u32[0];
          float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
          float32x2_t v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
          a15 = vmulq_n_f32(a15, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
          __n128 *v31 = (__n128)a15;
        }
        ++v31;
        ++v22;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    uint64_t v43 = 0;
    v46.i32[1] = 0;
    v46.i32[3] = 0;
    v47.i32[3] = 0;
    v47.i64[0] = v29.u32[0];
    float32x4_t v29 = (float32x4_t)v29.u32[0];
    v29.f32[2] = v28 * 0.5;
    v44.i32[0] = 0;
    v44.i32[3] = 0;
    *(uint64_t *)((char *)v44.i64 + 4) = *((unsigned int *)cf + 53);
    v46.f32[0] = -(float)(v27 * 0.5);
    float32x4_t v45 = (float32x4_t)v46.u32[0];
    v45.f32[2] = v28 * 0.5;
    v46.f32[2] = -(float)(v28 * 0.5);
    v47.f32[2] = v46.f32[2];
    float32x4_t v48 = vsubq_f32(v29, v45);
    float32x4_t v49 = vsubq_f32(v47, v29);
    float32x4_t v50 = vsubq_f32(v46, v47);
    float32x4_t v51 = vsubq_f32(v45, v46);
    float32x4_t v52 = vsubq_f32((float32x4_t)v44.u64[0], v45);
    float32x4_t v53 = vsubq_f32((float32x4_t)v44.u64[0], v47);
    float32x4_t v54 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
    int8x16_t v55 = (int8x16_t)vmlaq_f32(vmulq_f32(v54, vnegq_f32(v49)), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
    int8x16_t v56 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), v55, 0xCuLL);
    float32x4_t v57 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
    float32x4_t v58 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL);
    float32x4_t v59 = vnegq_f32(v51);
    int8x16_t v60 = (int8x16_t)vmlaq_f32(vmulq_f32(v58, v59), v52, v57);
    int8x16_t v61 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), v60, 0xCuLL);
    int8x16_t v62 = (int8x16_t)vmlaq_f32(vmulq_f32(v54, vnegq_f32(v50)), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL));
    int8x16_t v63 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), v62, 0xCuLL);
    int8x16_t v64 = (int8x16_t)vmlaq_f32(vmulq_f32(v58, vnegq_f32(v48)), v52, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL));
    int8x16_t v65 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), v64, 0xCuLL);
    do
    {
      float32x4_t v66 = v16;
      float32x4_t v67 = v17;
      float32x4_t v68 = v19;
      __int32 v69 = v18.i32[3];
      float v85 = 0.16667;
      long long v84 = xmmword_1B6E72278;
      uint64_t v70 = 4;
      float v71 = 0.33333;
      do
      {
        float v71 = v71 + *(float *)((char *)&v84 + v70);
        *(float *)((char *)&v84 + v70) = v71;
        v70 += 4;
      }
      while (v70 != 20);
      unsigned int v72 = 214013 * *a3 + 2531011;
      float v73 = (double)HIWORD(v72) * 0.0000152590219;
      float32x4_t v16 = v45;
      float32x4_t v17 = v59;
      float32x4_t v19 = v48;
      float32x4_t v18 = (float32x4_t)xmmword_1B6E4F330;
      if (v73 >= 0.33333)
      {
        float32x4_t v16 = v44;
        float32x4_t v17 = v29;
        float32x4_t v19 = v45;
        float32x4_t v18 = (float32x4_t)v65;
        if (*((float *)&v84 + 1) <= v73)
        {
          float32x4_t v16 = v44;
          float32x4_t v17 = v46;
          float32x4_t v19 = v47;
          float32x4_t v18 = (float32x4_t)v63;
          if (*((float *)&v84 + 2) <= v73)
          {
            float32x4_t v16 = v46;
            float32x4_t v17 = v44;
            float32x4_t v19 = v45;
            float32x4_t v18 = (float32x4_t)v61;
            if (*((float *)&v84 + 3) <= v73)
            {
              if (v85 <= v73)
              {
                v18.i64[0] = 0;
                v18.i32[2] = 0;
                v18.i32[3] = v69;
                float32x4_t v16 = v66;
                float32x4_t v17 = v67;
                float32x4_t v19 = v68;
              }
              else
              {
                float32x4_t v16 = v47;
                float32x4_t v17 = v29;
                float32x4_t v19 = v44;
                float32x4_t v18 = (float32x4_t)v56;
              }
            }
          }
        }
      }
      unsigned int v74 = 214013 * v72 + 2531011;
      float v75 = (double)HIWORD(v74) * 0.0000152590219;
      unsigned int v76 = 214013 * v74 + 2531011;
      *a3 = v76;
      float v77 = (double)HIWORD(v76) * 0.0000152590219;
      if (v73 >= 0.33333)
      {
        unsigned int v79 = 214013 * v76 + 2531011;
        *a3 = v79;
        float v80 = (double)HIWORD(v79) * 0.0000152590219;
        float32x4_t v78 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v17, (float)(1.0 / (float)((float)(v75 + v77) + v80)) * v77), v19, (float)(1.0 / (float)((float)(v75 + v77) + v80)) * v75), v16, (float)(1.0 / (float)((float)(v75 + v77) + v80)) * v80);
      }
      else
      {
        float32x4_t v78 = vaddq_f32(v16, vmlaq_n_f32(vmulq_n_f32(v17, v77), v19, v75));
      }
      v22[v43] = (__n128)v78;
      if (a5)
      {
        int32x4_t v81 = (int32x4_t)vmulq_f32(v18, v18);
        v81.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v81, 2), vadd_f32(*(float32x2_t *)v81.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 1))).u32[0];
        float32x2_t v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        float32x2_t v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        *(float32x4_t *)(a5 + 16 * v43) = vmulq_n_f32(v18, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
      }
      ++v43;
    }
    while (v43 != a2);
  }
}

uint64_t sub_1B655A930(uint64_t a1)
{
  return sub_1B6524370(*(char *)(a1 + 68), *(int *)(a1 + 40), *(_DWORD *)(a1 + 44), *(int *)(a1 + 48), *(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8));
}

void sub_1B655A94C(_DWORD *a1)
{
  sub_1B655CC4C((uint64_t)a1, 0, 1.0);
  sub_1B655CC4C((uint64_t)a1, 1, 1.0);
  sub_1B655CC4C((uint64_t)a1, 2, 1.0);
  if (a1[62] != 1)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[62] = 1;
  }
  if (a1[63] != 1)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[63] = 1;
  }
  if (a1[64] != 1)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[64] = 1;
  }
}

uint64_t sub_1B655A9EC(_DWORD *a1, _DWORD *a2)
{
  *a2 = 2;
  a2[1] = a1[69];
  a2[2] = a1[52];
  a2[3] = a1[53];
  a2[4] = a1[54];
  a2[5] = a1[62];
  a2[6] = a1[63];
  a2[7] = a1[64];
  a2[8] = a1[71];
  return 36;
}

uint64_t sub_1B655AA3C(uint64_t a1)
{
  return sub_1B6522AAC(*(char *)(a1 + 68), *(int *)(a1 + 36), *(_DWORD *)(a1 + 72), *(float *)(a1 + 12), *(float *)(a1 + 32));
}

float sub_1B655AA58(uint64_t a1, uint64_t a2, double a3, double a4)
{
  if (a1) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    *(float *)&a4 = -*(float *)&a3;
    *(float *)(a1 + 8) = -*(float *)&a3;
    *(void *)a1 = vdupq_lane_s32(*(int32x2_t *)&a4, 0).u64[0];
    *(_DWORD *)(a2 + 8) = LODWORD(a3);
    *(void *)a2 = vdupq_lane_s32(*(int32x2_t *)&a3, 0).u64[0];
  }
  return *(float *)&a3;
}

float sub_1B655AA8C(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  if (a2) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    LODWORD(a4) = *(_DWORD *)(a1 + 220);
    *(float *)&a5 = -*(float *)&a4;
    *(float *)(a2 + 8) = -*(float *)&a4;
    *(void *)a2 = vdupq_lane_s32(*(int32x2_t *)&a5, 0).u64[0];
    *(_DWORD *)(a3 + 8) = LODWORD(a4);
    *(void *)a3 = vdupq_lane_s32(*(int32x2_t *)&a4, 0).u64[0];
  }
  return *(float *)&a4;
}

BOOL sub_1B655AAC4(_OWORD *a1, float a2)
{
  if (a1)
  {
    *(void *)&long long v2 = 0;
    DWORD2(v2) = 0;
    *((float *)&v2 + 3) = a2;
    *a1 = v2;
  }
  return a1 != 0;
}

BOOL sub_1B655AAE0(uint64_t a1, _OWORD *a2)
{
  if (a2)
  {
    *(void *)&long long v2 = 0;
    DWORD2(v2) = 0;
    HIDWORD(v2) = *(_DWORD *)(a1 + 220);
    *a2 = v2;
  }
  return a2 != 0;
}

void sub_1B655AB00(_DWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  v12 = (float32x4_t *)a4;
  uint64_t v14 = a2;
  LODWORD(a9) = a1[55];
  if (a6)
  {
    if (a6 == 2)
    {
      sub_1B63CEAAC(a1, a2, a3, a4, a5, a6, a7, a8, a10);
    }
    else if (a6 == 1 && a2 >= 1)
    {
      uint64_t v15 = 0;
      float32x2_t v16 = (float32x2_t)vdup_n_s32(0x37800080u);
      __asm { FMOV            V3.2S, #-1.0 }
      do
      {
        unsigned int v22 = *a3;
        do
        {
          int v23 = 214013 * v22 + 2531011;
          v10.i32[0] = v23;
          v10.i32[1] = 214013 * v23 + 2531011;
          *(float32x2_t *)v10.f32 = vmla_f32(_D3, (float32x2_t)0x4000000040000000, vmul_f32(vcvt_f32_u32(vshr_n_u32(*(uint32x2_t *)v10.f32, 0x10uLL)), v16));
          unsigned int v22 = 214013 * (214013 * v23 + 2531011) + 2531011;
          v10.f32[2] = (float)((float)((float)HIWORD(v22) * 0.000015259) * 2.0) + -1.0;
          float32x4_t v24 = vmulq_f32(v10, v10);
          int32x2_t v25 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).u64[0];
          *(float *)v25.i32 = sqrtf(*(float *)v25.i32);
        }
        while (*(float *)v25.i32 > 1.0);
        *a3 = v22;
        if (a5) {
          *(float32x4_t *)(a5 + 16 * v15) = vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(v25, 0));
        }
        float32x4_t v10 = vaddq_f32(vmulq_n_f32(v10, *(float *)&a9), (float32x4_t)0);
        *(float32x4_t *)(a4 + 16 * v15++) = v10;
      }
      while (v15 != a2);
    }
  }
  else if (a2 >= 1)
  {
    float32x4_t v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
    float v26 = (_OWORD *)a5;
    do
    {
      unsigned int v27 = 214013 * *a3 + 2531011;
      float32_t v33 = (float)((float)((float)HIWORD(v27) * 0.000015259) * 2.0) + -1.0;
      unsigned int v28 = 214013 * v27 + 2531011;
      *a3 = v28;
      float v29 = (float)((float)((float)HIWORD(v28) * 0.000015259) + (float)((float)HIWORD(v28) * 0.000015259)) * 3.14159265;
      __float2 v30 = __sincosf_stret(v29);
      *(float32x2_t *)v31.f32 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v30.__sinval), LODWORD(v30.__cosval)), sqrtf(1.0 - (float)(v33 * v33)));
      v31.f32[2] = v33;
      float32x4_t *v12 = vmlaq_f32((float32x4_t)0, v32, v31);
      if (a5) {
        *float v26 = v31;
      }
      ++v26;
      ++v12;
      --v14;
    }
    while (v14);
  }
}

uint64_t sub_1B655AD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 280) != 3)
  {
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 280) = 3;
  }
  sub_1B655CC4C(a1, 4, 0.5);
  if (*(_DWORD *)(a1 + 244) != 48)
  {
    sub_1B6558D54(a1, v9, v10, v11, v12, v13, v14, v15);
    *(_DWORD *)(a1 + 244) = 48;
  }

  return sub_1B655CC4C(a1, 18, 1.0);
}

uint64_t sub_1B655ADE4(_DWORD *a1, _DWORD *a2)
{
  *a2 = 3;
  a2[1] = a1[69];
  a2[2] = a1[70];
  a2[3] = a1[55];
  a2[4] = a1[61];
  a2[5] = a1[60];
  a2[6] = a1[71];
  return 28;
}

uint64_t sub_1B655AE24(uint64_t a1)
{
  return sub_1B6522F4C(*(char *)(a1 + 68), *(_DWORD *)(a1 + 56), *(int *)(a1 + 44), *(float *)(a1 + 12), *(float *)(a1 + 4), *(float *)(a1 + 32));
}

float sub_1B655AE44(uint64_t a1, uint64_t a2, float result, float a4)
{
  if (a1) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    *(float *)&uint64_t v5 = -result;
    *(float *)(a1 + 8) = -result;
    *((float *)&v5 + 1) = a4 * -0.5;
    *(void *)a1 = v5;
    *(float *)&uint64_t v5 = result;
    *((float *)&v5 + 1) = a4 * 0.5;
    *(float *)(a2 + 8) = result;
    *(void *)a2 = v5;
  }
  return result;
}

float sub_1B655AE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (a2) {
    BOOL v12 = a3 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    float v13 = *(float *)(a1 + 212);
    LODWORD(v14) = *(_DWORD *)(a1 + 220);
    *(float *)&uint64_t v15 = -*(float *)&v14;
    *(float *)(a2 + 8) = -*(float *)&v14;
    *((float *)&v15 + 1) = v13 * -0.5;
    *(void *)a2 = v15;
    float result = v13 * 0.5;
    *(_DWORD *)(a3 + 8) = v14;
    *((float *)&v14 + 1) = result;
    *(void *)a3 = v14;
  }
  return result;
}

float sub_1B655AF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(float *)(a1 + 220);
}

BOOL sub_1B655AF74(_OWORD *a1, float a2, float a3)
{
  if (a1)
  {
    float v3 = sqrt((float)(a2 * a2) + a3 * 0.25 * a3);
    *(void *)&long long v4 = 0;
    DWORD2(v4) = 0;
    *((float *)&v4 + 3) = v3;
    *a1 = v4;
  }
  return a1 != 0;
}

BOOL sub_1B655AFB0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
    if (!a2) {
      return a2 != 0;
    }
    goto LABEL_3;
  }
  if (a2)
  {
LABEL_3:
    float v10 = sqrt((float)(*(float *)(a1 + 220) * *(float *)(a1 + 220)) + *(float *)(a1 + 212) * 0.25 * *(float *)(a1 + 212));
    *(void *)&long long v11 = 0;
    DWORD2(v11) = 0;
    *((float *)&v11 + 3) = v10;
    *a2 = v11;
  }
  return a2 != 0;
}

void sub_1B655B044(float *cf, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = a6;
  long long v11 = (_OWORD *)a4;
  if (!cf) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  float v15 = cf[55];
  float v16 = cf[53];
  if (v9)
  {
    if (v9 == 2)
    {
      sub_1B63CEAAC(cf, a2, a3, (uint64_t)v11, a5, 2, a7, a8, a9);
    }
    else if (v9 == 1 && a2 >= 1)
    {
      float32x4_t v17 = (_OWORD *)a5;
      do
      {
        unsigned int v18 = 214013 * *a3 + 2531011;
        float v19 = (double)HIWORD(v18) * 0.0000152590219;
        __double2 v20 = __sincos_stret((float)(v19 + v19) * 3.14159265);
        float sinval = v20.__sinval;
        float cosval = v20.__cosval;
        unsigned int v23 = 214013 * v18 + 2531011;
        float v24 = (double)HIWORD(v23) * 0.0000152590219;
        float v25 = v15 * v24;
        *(float *)&long long v26 = v25 * cosval;
        unsigned int v27 = 214013 * v23 + 2531011;
        *a3 = v27;
        float v28 = (double)HIWORD(v27) * 0.0000152590219;
        float v29 = (float)(v16 * v28) + -v16 * 0.5;
        *((float *)&v26 + 1) = v29;
        *((float *)&v26 + 2) = v25 * sinval;
        *long long v11 = v26;
        if (a5)
        {
          *(void *)&long long v30 = LODWORD(cosval);
          *((void *)&v30 + 1) = LODWORD(sinval);
          *float32x4_t v17 = v30;
        }
        ++v17;
        ++v11;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    float32x4_t v31 = (_OWORD *)a5;
    do
    {
      unsigned int v32 = 214013 * *a3 + 2531011;
      float v33 = (double)HIWORD(v32) * 0.0000152590219;
      __double2 v34 = __sincos_stret((float)(v33 + v33) * 3.14159265);
      unsigned int v35 = 214013 * v32 + 2531011;
      float v36 = v34.__sinval;
      float v37 = v34.__cosval;
      *(float *)&long long v38 = v15 * v37;
      *a3 = v35;
      float v39 = (double)HIWORD(v35) * 0.0000152590219;
      float v40 = (float)(v16 * v39) + -v16 * 0.5;
      *((float *)&v38 + 1) = v40;
      *((float *)&v38 + 2) = v15 * v36;
      *long long v11 = v38;
      if (a5)
      {
        *(void *)&long long v41 = LODWORD(v37);
        *((void *)&v41 + 1) = LODWORD(v36);
        _OWORD *v31 = v41;
      }
      ++v31;
      ++v11;
      --a2;
    }
    while (a2);
  }
}

uint64_t sub_1B655B2E8(uint64_t a1)
{
  sub_1B655CC4C(a1, 4, 0.5);
  sub_1B655CC4C(a1, 1, 1.0);
  if (*(_DWORD *)(a1 + 264) != 48)
  {
    sub_1B6558D54(a1, v2, v3, v4, v5, v6, v7, v8);
    *(_DWORD *)(a1 + 264) = 48;
  }
  if (*(_DWORD *)(a1 + 252) != 1)
  {
    sub_1B6558D54(a1, v2, v3, v4, v5, v6, v7, v8);
    *(_DWORD *)(a1 + 252) = 1;
  }

  return sub_1B655CC4C(a1, 18, 1.0);
}

uint64_t sub_1B655B378(_DWORD *a1, _DWORD *a2)
{
  *a2 = 4;
  a2[1] = a1[69];
  a2[2] = a1[55];
  a2[3] = a1[53];
  a2[4] = a1[66];
  a2[5] = a1[63];
  a2[6] = a1[60];
  a2[7] = a1[71];
  return 32;
}

uint64_t sub_1B655B3C0(uint64_t a1)
{
  return sub_1B65233C8(*(char *)(a1 + 68), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 44), *(float *)(a1 + 20), *(float *)(a1 + 12), *(float *)(a1 + 4));
}

__n64 sub_1B655B3E0(uint64_t a1, __n64 *a2, __n64 result, float a4, float a5)
{
  if (a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (result.n64_f32[0] <= a4) {
      result.n64_f32[0] = a4;
    }
    *(float *)&uint64_t v6 = -result.n64_f32[0];
    *(float *)(a1 + 8) = -result.n64_f32[0];
    *((float *)&v6 + 1) = a5 * -0.5;
    *(void *)a1 = v6;
    a2[1].n64_u32[0] = result.n64_u32[0];
    result.n64_f32[1] = a5 * 0.5;
    a2->n64_u64[0] = result.n64_u64[0];
  }
  return result;
}

float sub_1B655B42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float result)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (a2) {
    BOOL v12 = a3 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    float v13 = *(float *)(a1 + 212);
    LODWORD(v14) = *(_DWORD *)(a1 + 220);
    if (*(float *)(a1 + 228) > *(float *)&v14) {
      LODWORD(v14) = *(_DWORD *)(a1 + 228);
    }
    *(float *)&uint64_t v15 = -*(float *)&v14;
    *(float *)(a2 + 8) = -*(float *)&v14;
    *((float *)&v15 + 1) = v13 * -0.5;
    *(void *)a2 = v15;
    float result = v13 * 0.5;
    *(_DWORD *)(a3 + 8) = v14;
    *((float *)&v14 + 1) = result;
    *(void *)a3 = v14;
  }
  return result;
}

float sub_1B655B4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(float *)(a1 + 228);
}

BOOL sub_1B655B520(_OWORD *a1, float a2, float a3, float a4)
{
  if (a1)
  {
    if (a2 <= a3) {
      a2 = a3;
    }
    float v4 = sqrt((float)(a2 * a2) + a4 * 0.25 * a4);
    *(void *)&long long v5 = 0;
    DWORD2(v5) = 0;
    *((float *)&v5 + 3) = v4;
    *a1 = v5;
  }
  return a1 != 0;
}

BOOL sub_1B655B564(float *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (!a2) {
      return a2 != 0;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
    if (!a2) {
      return a2 != 0;
    }
  }
  float v10 = a1[55];
  if (a1[57] > v10) {
    float v10 = a1[57];
  }
  float v11 = sqrt((float)(v10 * v10) + a1[53] * 0.25 * a1[53]);
  *(void *)&long long v12 = 0;
  DWORD2(v12) = 0;
  *((float *)&v12 + 3) = v11;
  *a2 = v12;
  return a2 != 0;
}

void sub_1B655B604(float *cf, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = a6;
  float v11 = (_OWORD *)a4;
  if (!cf) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  float v15 = cf[57];
  float v16 = cf[55];
  float v17 = cf[53];
  if (v9)
  {
    if (v9 == 2)
    {
      sub_1B63CEAAC(cf, a2, a3, (uint64_t)v11, a5, 2, a7, a8, a9);
    }
    else if (v9 == 1 && a2 >= 1)
    {
      float v18 = v15 - v16;
      float v19 = (_OWORD *)a5;
      do
      {
        unsigned int v20 = 214013 * *a3 + 2531011;
        float v21 = (double)HIWORD(v20) * 0.0000152590219;
        __double2 v22 = __sincos_stret((float)(v21 + v21) * 3.14159265);
        float sinval = v22.__sinval;
        float cosval = v22.__cosval;
        unsigned int v25 = 214013 * v20 + 2531011;
        float v26 = (double)HIWORD(v25) * 0.0000152590219;
        unsigned int v27 = 214013 * v25 + 2531011;
        *a3 = v27;
        float v28 = (double)HIWORD(v27) * 0.0000152590219;
        float v29 = (float)(v16 + (float)(v26 * v18)) * v28;
        *(float *)&long long v30 = v29 * cosval;
        float v31 = (float)(v17 * v26) + -v17 * 0.5;
        *((float *)&v30 + 1) = v31;
        *((float *)&v30 + 2) = v29 * sinval;
        *float v11 = v30;
        if (a5)
        {
          *(void *)&long long v32 = LODWORD(cosval);
          *((void *)&v32 + 1) = LODWORD(sinval);
          *float v19 = v32;
        }
        ++v19;
        ++v11;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    float v33 = v15 - v16;
    __double2 v34 = (_OWORD *)a5;
    do
    {
      unsigned int v35 = 214013 * *a3 + 2531011;
      float v36 = (double)HIWORD(v35) * 0.0000152590219;
      __double2 v37 = __sincos_stret((float)(v36 + v36) * 3.14159265);
      float v38 = v37.__sinval;
      float v39 = v37.__cosval;
      unsigned int v40 = 214013 * v35 + 2531011;
      *a3 = v40;
      float v41 = (double)HIWORD(v40) * 0.0000152590219;
      float v42 = v16 + (float)(v41 * v33);
      *(float *)&long long v43 = v42 * v39;
      float v44 = (float)(v17 * v41) + -v17 * 0.5;
      *((float *)&v43 + 1) = v44;
      *((float *)&v43 + 2) = v42 * v38;
      *float v11 = v43;
      if (a5)
      {
        *(void *)&long long v45 = LODWORD(v39);
        *((void *)&v45 + 1) = LODWORD(v38);
        *__double2 v34 = v45;
      }
      ++v34;
      ++v11;
      --a2;
    }
    while (a2);
  }
}

void sub_1B655B8C8(uint64_t a1)
{
  sub_1B655CC4C(a1, 5, 0.0);
  sub_1B655CC4C(a1, 4, 0.5);
  sub_1B655CC4C(a1, 1, 1.0);
  if (*(_DWORD *)(a1 + 264) != 48)
  {
    sub_1B6558D54(a1, v2, v3, v4, v5, v6, v7, v8);
    *(_DWORD *)(a1 + 264) = 48;
  }
  if (*(_DWORD *)(a1 + 252) != 1)
  {
    sub_1B6558D54(a1, v2, v3, v4, v5, v6, v7, v8);
    *(_DWORD *)(a1 + 252) = 1;
  }
}

uint64_t sub_1B655B94C(_DWORD *a1, _DWORD *a2)
{
  *a2 = 5;
  a2[1] = a1[69];
  a2[2] = a1[57];
  a2[3] = a1[55];
  a2[4] = a1[53];
  a2[5] = a1[66];
  a2[6] = a1[63];
  a2[7] = a1[71];
  return 32;
}

uint64_t sub_1B655B994(uint64_t a1)
{
  return sub_1B65235F8(*(char *)(a1 + 68), *(_DWORD *)(a1 + 56), *(int *)(a1 + 44), *(float *)(a1 + 24), *(float *)(a1 + 12), *(float *)(a1 + 4), *(float *)(a1 + 32));
}

float sub_1B655B9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    float v4 = *(float *)(a1 + 212);
    LODWORD(v5) = *(_DWORD *)(a1 + 220);
    *(float *)&uint64_t v6 = -*(float *)&v5;
    *(float *)(a2 + 8) = -*(float *)&v5;
    *((float *)&v6 + 1) = v4 * -0.5;
    *(void *)a2 = v6;
    float result = v4 * 0.5;
    *(_DWORD *)(a3 + 8) = v5;
    *((float *)&v5 + 1) = result;
    *(void *)a3 = v5;
  }
  return result;
}

BOOL sub_1B655BA04(uint64_t a1, _OWORD *a2)
{
  if (a2)
  {
    float v2 = sqrt((float)(*(float *)(a1 + 220) * *(float *)(a1 + 220)) + *(float *)(a1 + 212) * 0.25 * *(float *)(a1 + 212));
    *(void *)&long long v3 = 0;
    DWORD2(v3) = 0;
    *((float *)&v3 + 3) = v2;
    *a2 = v3;
  }
  return a2 != 0;
}

void sub_1B655BA48(float *cf, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = a6;
  float v11 = (_OWORD *)a4;
  if (!cf) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  float v15 = cf[55];
  float v16 = cf[58];
  float v17 = cf[53];
  if (v9)
  {
    if (v9 == 2)
    {
      sub_1B63CEAAC(cf, a2, a3, (uint64_t)v11, a5, 2, a7, a8, a9);
    }
    else if (v9 == 1 && a2 >= 1)
    {
      float v18 = v15 - v16;
      float v19 = (_OWORD *)a5;
      do
      {
        unsigned int v20 = 214013 * *a3 + 2531011;
        float v21 = (double)HIWORD(v20) * 0.0000152590219;
        __double2 v22 = __sincos_stret((float)(v21 + v21) * 3.14159265);
        float sinval = v22.__sinval;
        float cosval = v22.__cosval;
        unsigned int v25 = 214013 * v20 + 2531011;
        float v26 = (double)HIWORD(v25) * 0.0000152590219;
        float v27 = v16 + (float)(v18 * v26);
        *(float *)&long long v28 = v27 * cosval;
        unsigned int v29 = 214013 * v25 + 2531011;
        *a3 = v29;
        float v30 = (double)HIWORD(v29) * 0.0000152590219;
        float v31 = (float)(v17 * v30) + -v17 * 0.5;
        *((float *)&v28 + 1) = v31;
        *((float *)&v28 + 2) = v27 * sinval;
        *float v11 = v28;
        if (a5)
        {
          if (v26 > 0.5)
          {
            float cosval = -cosval;
            float sinval = -sinval;
          }
          *(void *)&long long v32 = LODWORD(cosval);
          *((void *)&v32 + 1) = LODWORD(sinval);
          *float v19 = v32;
        }
        ++v19;
        ++v11;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    float v33 = (_OWORD *)a5;
    do
    {
      unsigned int v34 = 214013 * *a3 + 2531011;
      float v35 = (double)HIWORD(v34) * 0.0000152590219;
      __double2 v37 = __sincos_stret((float)(v35 + v35) * 3.14159265);
      float v38 = v37.__sinval;
      float v39 = v37.__cosval;
      unsigned int v40 = 214013 * v34 + 2531011;
      float v41 = (double)HIWORD(v40) * 0.0000152590219;
      if (v41 <= 0.5) {
        float v42 = v15;
      }
      else {
        float v42 = v16;
      }
      *(float *)&v36.__float sinval = v42 * v39;
      unsigned int v43 = 214013 * v40 + 2531011;
      *a3 = v43;
      float v44 = (double)HIWORD(v43) * 0.0000152590219;
      float v45 = (float)(v17 * v44) + -v17 * 0.5;
      *((float *)&v36.__sinval + 1) = v45;
      *(float *)&v36.__float cosval = v42 * v38;
      *float v11 = v36;
      if (a5)
      {
        if (v41 > 0.5)
        {
          float v39 = -v39;
          float v38 = -v38;
        }
        *(void *)&long long v46 = LODWORD(v39);
        *((void *)&v46 + 1) = LODWORD(v38);
        *float v33 = v46;
      }
      ++v33;
      ++v11;
      --a2;
    }
    while (a2);
  }
}

uint64_t sub_1B655BD4C(uint64_t a1)
{
  sub_1B655CC4C(a1, 6, 0.25);
  sub_1B655CC4C(a1, 4, 0.5);
  sub_1B655CC4C(a1, 1, 1.0);
  if (*(_DWORD *)(a1 + 264) != 48)
  {
    sub_1B6558D54(a1, v2, v3, v4, v5, v6, v7, v8);
    *(_DWORD *)(a1 + 264) = 48;
  }
  if (*(_DWORD *)(a1 + 252) != 1)
  {
    sub_1B6558D54(a1, v2, v3, v4, v5, v6, v7, v8);
    *(_DWORD *)(a1 + 252) = 1;
  }

  return sub_1B655CC4C(a1, 18, 1.0);
}

uint64_t sub_1B655BDEC(_DWORD *a1, _DWORD *a2)
{
  *a2 = 6;
  a2[1] = a1[69];
  a2[2] = a1[58];
  a2[3] = a1[55];
  a2[4] = a1[53];
  a2[5] = a1[66];
  a2[6] = a1[63];
  a2[7] = a1[60];
  a2[8] = a1[71];
  return 36;
}

uint64_t sub_1B655BE3C(uint64_t a1)
{
  return sub_1B6523AC4(*(char *)(a1 + 68), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 64), *(float *)(a1 + 12), *(float *)(a1 + 4));
}

float sub_1B655BE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (a2) {
    BOOL v12 = a3 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    float v13 = *(float *)(a1 + 212);
    LODWORD(v14) = *(_DWORD *)(a1 + 220);
    *(float *)&uint64_t v15 = -*(float *)&v14;
    *(float *)(a2 + 8) = -*(float *)&v14;
    *((float *)&v15 + 1) = v13 * -0.5;
    *(void *)a2 = v15;
    float result = v13 * 0.5;
    *(_DWORD *)(a3 + 8) = v14;
    *((float *)&v14 + 1) = result;
    *(void *)a3 = v14;
  }
  return result;
}

BOOL sub_1B655BEF8(_OWORD *a1, double a2, float a3)
{
  if (a1)
  {
    float v3 = a3 * 0.5;
    *(void *)&long long v4 = 0;
    DWORD2(v4) = 0;
    *((float *)&v4 + 3) = v3;
    *a1 = v4;
  }
  return a1 != 0;
}

BOOL sub_1B655BF1C(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v12, v13, v14, v15, v16, v17, (uint64_t)"parametricGeometry");
    if (!a2) {
      return a2 != 0;
    }
    goto LABEL_3;
  }
  if (a2)
  {
LABEL_3:
    *(void *)&long long v10 = 0;
    DWORD2(v10) = 0;
    *((float *)&v10 + 3) = *(float *)(a1 + 212) * 0.5;
    *a2 = v10;
  }
  return a2 != 0;
}

void sub_1B655BFB0(float *cf, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10, uint64_t a11)
{
  int v11 = a6;
  uint64_t v13 = (_OWORD *)a4;
  if (!cf) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  float v17 = cf[55];
  float v18 = cf[53];
  float v19 = v18 * 0.5;
  *(float *)a10.i32 = (float)(v18 * 0.5) - v17;
  int8x16_t v54 = a10;
  if (v11)
  {
    if (v11 == 2)
    {
      sub_1B63CEAAC(cf, a2, a3, (uint64_t)v13, a5, 2, a7, a8, a11);
    }
    else if (v11 == 1 && a2 >= 1)
    {
      float v20 = -v19;
      float v21 = (_OWORD *)a5;
      do
      {
        unsigned int v22 = 214013 * *a3 + 2531011;
        float v23 = (double)HIWORD(v22) * 0.0000152590219;
        __double2 v25 = __sincos_stret((float)(v23 + v23) * 3.14159265);
        float sinval = v25.__sinval;
        *(float *)&long long v27 = v25.__cosval;
        unsigned int v28 = 214013 * v22 + 2531011;
        float v29 = (double)HIWORD(v28) * 0.0000152590219;
        *(float *)v30.i32 = v20 + (float)(v29 * v18);
        unsigned int v31 = 214013 * v28 + 2531011;
        *a3 = v31;
        float v32 = (double)HIWORD(v31) * 0.0000152590219;
        float v33 = v17 * v32;
        *(float *)v34.i32 = fabsf(*(float *)v30.i32) - *(float *)v54.i32;
        if (*(float *)v34.i32 <= 0.0)
        {
          *(void *)&v38.__float sinval = v27;
          *(void *)&v38.__float cosval = LODWORD(sinval);
          *(float *)&long long v27 = v33 * *(float *)&v27;
        }
        else
        {
          *(float *)v34.i32 = *(float *)v34.i32 / v17;
          v35.i64[0] = 0x8000000080000000;
          v35.i64[1] = 0x8000000080000000;
          float v36 = *(float *)vbslq_s8(v35, v34, v30).i32;
          float v37 = sqrtf(1.0 - (float)(v36 * v36));
          *(float *)&v24.__float sinval = v37 * *(float *)&v27;
          float sinval = v37 * sinval;
          *(float *)&long long v27 = v33 * (float)(v37 * *(float *)&v27);
          __double2 v38 = v24;
          *((float *)&v38.__sinval + 1) = v36;
          *(float *)&v38.__float cosval = sinval;
          *(float *)v30.i32 = *(float *)vbslq_s8(v35, v54, v30).i32 + (float)(v36 * v33);
        }
        DWORD1(v27) = v30.i32[0];
        *((float *)&v27 + 2) = v33 * sinval;
        *uint64_t v13 = v27;
        if (a5) {
          *float v21 = v38;
        }
        ++v21;
        ++v13;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    float v39 = -v19;
    unsigned int v40 = (_OWORD *)a5;
    do
    {
      unsigned int v41 = 214013 * *a3 + 2531011;
      float v42 = (double)HIWORD(v41) * 0.0000152590219;
      __double2 v44 = __sincos_stret((float)(v42 + v42) * 3.14159265);
      float v45 = v44.__sinval;
      *(float *)&long long v46 = v44.__cosval;
      unsigned int v47 = 214013 * v41 + 2531011;
      *a3 = v47;
      *(double *)v48.i64 = (double)HIWORD(v47) * 0.0000152590219;
      *(float *)v48.i32 = *(double *)v48.i64;
      *(float *)v48.i32 = v39 + (float)(*(float *)v48.i32 * v18);
      *(float *)v49.i32 = fabsf(*(float *)v48.i32) - *(float *)v54.i32;
      if (*(float *)v49.i32 <= 0.0)
      {
        *(void *)&v53.__float sinval = v46;
        *(void *)&v53.__float cosval = LODWORD(v45);
        *(float *)&long long v46 = v17 * *(float *)&v46;
      }
      else
      {
        *(float *)v49.i32 = *(float *)v49.i32 / v17;
        v50.i64[0] = 0x8000000080000000;
        v50.i64[1] = 0x8000000080000000;
        float v51 = *(float *)vbslq_s8(v50, v49, v48).i32;
        float v52 = sqrtf(1.0 - (float)(v51 * v51));
        *(float *)&v43.__float sinval = v52 * *(float *)&v46;
        float v45 = v52 * v45;
        *(float *)&long long v46 = v17 * (float)(v52 * *(float *)&v46);
        __double2 v53 = v43;
        *((float *)&v53.__sinval + 1) = v51;
        *(float *)&v53.__float cosval = v45;
        *(float *)v48.i32 = *(float *)vbslq_s8(v50, v54, v48).i32 + (float)(v51 * v17);
      }
      DWORD1(v46) = v48.i32[0];
      *((float *)&v46 + 2) = v17 * v45;
      *uint64_t v13 = v46;
      if (a5) {
        *unsigned int v40 = v53;
      }
      ++v40;
      ++v13;
      --a2;
    }
    while (a2);
  }
}

void sub_1B655C2E4(_DWORD *a1)
{
  sub_1B655CC4C((uint64_t)a1, 4, 0.5);
  sub_1B655CC4C((uint64_t)a1, 1, 2.0);
  if (a1[66] != 48)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[66] = 48;
  }
  if (a1[61] != 24)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[61] = 24;
  }
  if (a1[63] != 1)
  {
    sub_1B6558D54((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    a1[63] = 1;
  }
}

uint64_t sub_1B655C374(_DWORD *a1, _DWORD *a2)
{
  *a2 = 7;
  a2[1] = a1[69];
  a2[2] = a1[55];
  a2[3] = a1[53];
  a2[4] = a1[66];
  a2[5] = a1[68];
  a2[6] = a1[63];
  a2[7] = a1[71];
  return 32;
}

uint64_t sub_1B655C3BC(uint64_t a1)
{
  return sub_1B6523BD4(*(char *)(a1 + 68), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(float *)(a1 + 12), *(float *)(a1 + 28), *(float *)(a1 + 32));
}

__n64 sub_1B655C3D4(uint64_t a1, __n64 *a2, __n64 result, float a4)
{
  if (a1) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    result.n64_f32[0] = result.n64_f32[0] + a4;
    v5.i64[0] = __PAIR64__(LODWORD(a4), result.n64_u32[0]);
    *(__n64 *)&v5.u32[2] = result;
    float32x4_t v6 = vnegq_f32(v5);
    *(_DWORD *)(a1 + 8) = v6.i32[2];
    *(void *)a1 = v6.i64[0];
    a2[1].n64_u32[0] = result.n64_u32[0];
    result.n64_f32[1] = a4;
    a2->n64_u64[0] = result.n64_u64[0];
  }
  return result;
}

float sub_1B655C418(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  if (a2) {
    BOOL v5 = a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    float result = *(float *)(a1 + 236);
    *(float *)&a5 = result + *(float *)(a1 + 220);
    v7.f32[0] = *(float *)&a5;
    v7.f32[1] = result;
    *(double *)&v7.i64[1] = a5;
    float32x4_t v8 = vnegq_f32(v7);
    *(_DWORD *)(a2 + 8) = v8.i32[2];
    *(void *)a2 = v8.i64[0];
    *(_DWORD *)(a3 + 8) = LODWORD(a5);
    *((float *)&a5 + 1) = result;
    *(double *)a3 = a5;
  }
  return result;
}

BOOL sub_1B655C464(_OWORD *a1, float a2, float a3)
{
  if (a1)
  {
    float v3 = a2 + a3;
    *(void *)&long long v4 = 0;
    DWORD2(v4) = 0;
    *((float *)&v4 + 3) = v3;
    *a1 = v4;
  }
  return a1 != 0;
}

BOOL sub_1B655C484(uint64_t a1, _OWORD *a2)
{
  if (a2)
  {
    *(void *)&long long v2 = 0;
    DWORD2(v2) = 0;
    *((float *)&v2 + 3) = *(float *)(a1 + 236) + *(float *)(a1 + 220);
    *a2 = v2;
  }
  return a2 != 0;
}

void sub_1B655C4AC(float *cf, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t a10)
{
  int v10 = a6;
  uint64_t v12 = (_OWORD *)a4;
  if (!cf) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  float v16 = cf[55];
  a9.n128_f32[0] = cf[59];
  __n128 v45 = a9;
  if (v10)
  {
    if (v10 == 2)
    {
      sub_1B63CEAAC(cf, a2, a3, (uint64_t)v12, a5, 2, a7, a8, a10);
    }
    else if (v10 == 1 && a2 >= 1)
    {
      float v17 = (_OWORD *)a5;
      do
      {
        unsigned int v18 = 214013 * *a3 + 2531011;
        float v19 = (double)HIWORD(v18) * 0.0000152590219;
        __double2 v20 = __sincos_stret((float)(v19 + v19) * 3.14159265);
        float cosval = v20.__cosval;
        unsigned int v22 = 214013 * v18 + 2531011;
        *(double *)&long long v23 = (double)HIWORD(v22) * 0.0000152590219;
        *(float *)&long long v23 = *(double *)&v23;
        *(float *)&long long v23 = v45.n128_f32[0] * sqrtf(*(float *)&v23);
        long long v43 = v23;
        *(float *)&unsigned int v42 = v16 + (float)(cosval * *(float *)&v23);
        unsigned int v24 = 214013 * v22 + 2531011;
        *a3 = v24;
        *(float *)&long long v23 = (double)HIWORD(v24) * 0.0000152590219;
        __double2 v26 = __sincos_stret((float)(*(float *)&v23 + *(float *)&v23) * 3.14159265);
        double v25 = v26.__cosval;
        float sinval = v26.__sinval;
        v28.f64[1] = v20.__sinval;
        *(float32x2_t *)&v28.f64[0] = vcvt_f32_f64(v28);
        HIDWORD(v29) = HIDWORD(v43);
        *(float32x2_t *)&long long v29 = vmul_f32((float32x2_t)__PAIR64__(v43, v42), *(float32x2_t *)&v28.f64[0]);
        *((float *)&v29 + 2) = *(float *)&v42 * sinval;
        _OWORD *v12 = v29;
        if (a5)
        {
          *(float *)v28.f64 = cosval * *(float *)v28.f64;
          *(float *)&v28.f64[1] = cosval * sinval;
          *float v17 = v28;
        }
        ++v17;
        ++v12;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    int8x16_t v30 = (_OWORD *)a5;
    do
    {
      unsigned int v31 = 214013 * *a3 + 2531011;
      float v32 = (double)HIWORD(v31) * 0.0000152590219;
      __double2 v33 = __sincos_stret((float)(v32 + v32) * 3.14159265);
      float v34 = v33.__cosval;
      __n128 v35 = v45;
      v35.n128_f32[0] = v16 + (float)(v34 * v45.n128_f32[0]);
      __n128 v44 = v35;
      unsigned int v36 = 214013 * v31 + 2531011;
      *a3 = v36;
      v35.n128_f32[0] = (double)HIWORD(v36) * 0.0000152590219;
      __double2 v38 = __sincos_stret((float)(v35.n128_f32[0] + v35.n128_f32[0]) * 3.14159265);
      double v37 = v38.__cosval;
      float v39 = v38.__sinval;
      __n128 v40 = v44;
      v41.f64[1] = v33.__sinval;
      *(float32x2_t *)&v41.f64[0] = vcvt_f32_f64(v41);
      v40.n128_u32[1] = v45.n128_u32[0];
      v40.n128_u64[0] = (unint64_t)vmul_f32((float32x2_t)v40.n128_u64[0], *(float32x2_t *)&v41.f64[0]);
      v40.n128_f32[2] = v44.n128_f32[0] * v39;
      _OWORD *v12 = v40;
      if (a5)
      {
        *(float *)v41.f64 = v34 * *(float *)v41.f64;
        *(float *)&v41.f64[1] = v34 * v39;
        *int8x16_t v30 = v41;
      }
      ++v30;
      ++v12;
      --a2;
    }
    while (a2);
  }
}

float sub_1B655C784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(float *)(a1 + 236);
}

uint64_t sub_1B655C7D0(uint64_t a1)
{
  sub_1B655CC4C(a1, 4, 0.5);
  sub_1B655CC4C(a1, 7, 0.25);
  if (*(_DWORD *)(a1 + 264) != 48)
  {
    sub_1B6558D54(a1, v2, v3, v4, v5, v6, v7, v8);
    *(_DWORD *)(a1 + 264) = 48;
  }
  if (*(_DWORD *)(a1 + 268) != 24)
  {
    sub_1B6558D54(a1, v2, v3, v4, v5, v6, v7, v8);
    *(_DWORD *)(a1 + 268) = 24;
  }

  return sub_1B655CC4C(a1, 18, 1.0);
}

uint64_t sub_1B655C860(_DWORD *a1, _DWORD *a2)
{
  *a2 = 8;
  a2[1] = a1[69];
  a2[2] = a1[55];
  a2[3] = a1[59];
  a2[4] = a1[66];
  a2[5] = a1[67];
  a2[6] = a1[60];
  a2[7] = a1[71];
  return 32;
}

uint64_t sub_1B655C8BC(_OWORD *a1, long long *a2, int a3)
{
  if (qword_1EB9955B0 != -1) {
    dispatch_once(&qword_1EB9955B0, &unk_1F0FB5D88);
  }
  uint64_t v6 = sub_1B63C8D44(qword_1EB9955B8, 0x148uLL);
  sub_1B63CDA84(v6);
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v6 + 208) = _Q0;
  *(_OWORD *)(v6 + 224) = xmmword_1B6E72240;
  *(_OWORD *)(v6 + 244) = xmmword_1B6E72250;
  *(_OWORD *)(v6 + 260) = xmmword_1B6E72260;
  *(_DWORD *)(v6 + 240) = 1065353216;
  *(_DWORD *)(v6 + 280) = 3;
  if (a3)
  {
    uint64_t v12 = (void *)sub_1B64AF438();
    sub_1B63CE298(v6, v12, v13, v14, v15, v16, v17, v18);
    CFRelease(v12);
  }
  sub_1B63CE3B8(v6, (uint64_t)sub_1B6558A80);
  if (a2)
  {
    long long v26 = *a2;
    long long v27 = a2[2];
    *(_OWORD *)(v6 + 304) = a2[1];
    *(_OWORD *)(v6 + 320) = v27;
  }
  else
  {
    long long v26 = 0uLL;
    *(_OWORD *)(v6 + 304) = 0u;
    *(_OWORD *)(v6 + 320) = 0u;
  }
  *(_OWORD *)(v6 + 288) = v26;
  if (*(_DWORD *)(v6 + 276))
  {
    sub_1B6558D54(v6, v19, v20, v21, v22, v23, v24, v25);
    *(_DWORD *)(v6 + 276) = 0;
  }
  if (a1)
  {
    *(_OWORD *)(v6 + 208) = *a1;
    long long v28 = a1[1];
    long long v29 = a1[2];
    long long v30 = a1[4];
    *(_OWORD *)(v6 + 256) = a1[3];
    *(_OWORD *)(v6 + 272) = v30;
    *(_OWORD *)(v6 + 224) = v28;
    *(_OWORD *)(v6 + 240) = v29;
  }
  else if (a2)
  {
    (*(void (**)(uint64_t))(v6 + 312))(v6);
  }
  return v6;
}

void sub_1B655CA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B63CDCE8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(void *)(a1 + 288))
  {
    long long v10 = *(_OWORD *)(a1 + 288);
    long long v11 = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a2 + 304) = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a2 + 320) = v11;
    *(_OWORD *)(a2 + 288) = v10;
  }
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 208);
  long long v12 = *(_OWORD *)(a1 + 224);
  long long v13 = *(_OWORD *)(a1 + 240);
  long long v14 = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(a2 + 272) = v14;
  *(_OWORD *)(a2 + 224) = v12;
  *(_OWORD *)(a2 + 240) = v13;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1E9DDB5A0);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = *(const void **)(a1 + 336);
  if ((v21 != 0) == (v22 == 0)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. A parametric geometry with a mesh must also have a hash", v15, v16, v17, v18, v19, v20, (uint64_t)"hasMesh == (hash != NULL)");
  }
  if (v21)
  {
    sub_1B63CDBD0(a2, v21, v15, v16, v17, v18, v19, v20);
    uint64_t v23 = (void *)CFRetain(v22);
    *(void *)(a2 + 336) = v23;
    sub_1B655CB04(v23);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E9DDB5A0);
}

void sub_1B655CB04(void *key)
{
  Value = (char *)CFDictionaryGetValue((CFDictionaryRef)qword_1E9DDB5B0, key);
  if (!Value) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. inconsistency in _CFXParametricGeometryCacheIncrRetainCount", v2, v3, v4, v5, v6, v7, (uint64_t)"retainCount != 0");
  }
  int v9 = (__CFDictionary *)qword_1E9DDB5B0;

  CFDictionarySetValue(v9, key, Value + 1);
}

uint64_t sub_1B655CB84(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      uint64_t result = a1 + 208;
      break;
    case 1:
      uint64_t result = a1 + 212;
      break;
    case 2:
      uint64_t result = a1 + 216;
      break;
    case 3:
      uint64_t result = a1 + 224;
      break;
    case 4:
      uint64_t result = a1 + 220;
      break;
    case 5:
      uint64_t result = a1 + 228;
      break;
    case 6:
      uint64_t result = a1 + 232;
      break;
    case 7:
      uint64_t result = a1 + 236;
      break;
    case 18:
      uint64_t result = a1 + 240;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B655CC4C(uint64_t a1, int a2, float a3)
{
  uint64_t result = sub_1B655CB84(a1, a2);
  if (result)
  {
    long long v13 = (float *)result;
    if (*(float *)result == a3)
    {
      return 0;
    }
    else
    {
      sub_1B6558D54(a1, v6, v7, v8, v9, v10, v11, v12);
      *long long v13 = a3;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1B655CCA8(int *a1, int a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 8:
      uint64_t v3 = a1 + 61;
      goto LABEL_11;
    case 9:
      uint64_t v3 = a1 + 62;
      goto LABEL_11;
    case 10:
      uint64_t v3 = a1 + 63;
      goto LABEL_11;
    case 11:
      uint64_t v3 = a1 + 64;
      goto LABEL_11;
    case 12:
      uint64_t v3 = a1 + 65;
      goto LABEL_11;
    case 13:
      uint64_t v3 = a1 + 66;
      goto LABEL_11;
    case 15:
      uint64_t v3 = a1 + 67;
      goto LABEL_11;
    case 17:
      uint64_t v3 = a1 + 69;
      goto LABEL_11;
    case 19:
      uint64_t v3 = a1 + 70;
LABEL_11:
      uint64_t v2 = *v3;
      break;
    default:
      return v2;
  }
  return v2;
}

BOOL sub_1B655CD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricgeometry");
  }
  return *(_DWORD *)(a1 + 280) == 2;
}

void sub_1B655CDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricgeometry");
  }
  if (v8) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)(a1 + 280) = v10;

  sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL sub_1B655CE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricgeometry");
  }
  return *(_DWORD *)(a1 + 280) == 1;
}

void sub_1B655CE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricgeometry");
  }
  *(_DWORD *)(a1 + 280) = v8;

  sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B655CED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 224) != a9)
  {
    *(float *)(a1 + 224) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655CF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(unsigned int *)(a1 + 260);
}

void sub_1B655CFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(_DWORD *)(a1 + 260) != v8)
  {
    *(_DWORD *)(a1 + 260) = v8;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B655D02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 212) != a9)
  {
    *(float *)(a1 + 212) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655D0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(unsigned int *)(a1 + 252);
}

void sub_1B655D104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(_DWORD *)(a1 + 252) != v8)
  {
    *(_DWORD *)(a1 + 252) = v8;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B655D184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 216) != a9)
  {
    *(float *)(a1 + 216) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655D210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(unsigned int *)(a1 + 256);
}

void sub_1B655D25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(_DWORD *)(a1 + 256) != v8)
  {
    *(_DWORD *)(a1 + 256) = v8;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655D2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(char *)(a1 + 276);
}

void sub_1B655D328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(_DWORD *)(a1 + 276) != v8)
  {
    *(_DWORD *)(a1 + 276) = v8;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B655D3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 208) != a9)
  {
    *(float *)(a1 + 208) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655D434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(unsigned int *)(a1 + 248);
}

void sub_1B655D480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(_DWORD *)(a1 + 248) != v8)
  {
    *(_DWORD *)(a1 + 248) = v8;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655D500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(unsigned int *)(a1 + 272);
}

void sub_1B655D54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  int v10 = v8 & ~(v8 >> 31);
  if (v10 != *(_DWORD *)(a1 + 272))
  {
    *(_DWORD *)(a1 + 272) = v10;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655D5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(unsigned int *)(a1 + 264);
}

void sub_1B655D61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(_DWORD *)(a1 + 264) != v8)
  {
    *(_DWORD *)(a1 + 264) = v8;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B655D69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 228) != a9)
  {
    *(float *)(a1 + 228) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B655D728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(float *)(a1 + 240);
}

void sub_1B655D774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 240) != a9)
  {
    *(float *)(a1 + 240) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B655D800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 220) != a9)
  {
    *(float *)(a1 + 220) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655D88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(unsigned int *)(a1 + 244);
}

void sub_1B655D8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(_DWORD *)(a1 + 244) != v8)
  {
    *(_DWORD *)(a1 + 244) = v8;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B655D958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 236) != a9)
  {
    *(float *)(a1 + 236) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B655D9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  return *(unsigned int *)(a1 + 268);
}

void sub_1B655DA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(_DWORD *)(a1 + 268) != v8)
  {
    *(_DWORD *)(a1 + 268) = v8;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B655DAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"parametricGeometry");
  }
  if (*(float *)(a1 + 232) != a9)
  {
    *(float *)(a1 + 232) = a9;
    sub_1B6558D54(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B655DB3C()
{
  if (!qword_1E9DDB5A8)
  {
    CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    qword_1E9DDB5A8 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    qword_1E9DDB5B0 = (uint64_t)CFDictionaryCreateMutable(v0, 0, v1, 0);
  }
}

void sub_1B655DBB8(uint64_t a1)
{
  sub_1B655DB3C();
  uint64_t v2 = *(const void **)(a1 + 336);
  if (v2)
  {
    Value = (char *)CFDictionaryGetValue((CFDictionaryRef)qword_1E9DDB5B0, *(const void **)(a1 + 336));
    int v10 = Value;
    if (Value)
    {
      if (Value == (char *)1)
      {
        CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1E9DDB5A8, v2);
        CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1E9DDB5B0, v2);
LABEL_7:
        CFRelease(*(CFTypeRef *)(a1 + 336));
        *(void *)(a1 + 336) = 0;
        return;
      }
    }
    else
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. inconsistency in _CFXParametricGeometryReleaseCachedMesh", v4, v5, v6, v7, v8, v9, (uint64_t)"retainCount>0");
    }
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1E9DDB5B0, v2, v10 - 1);
    goto LABEL_7;
  }
}

id sub_1B655DC70(void *a1)
{
  if (a1[42])
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1E9DDB5A0);
    sub_1B655DBB8((uint64_t)a1);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E9DDB5A0);
  }

  return sub_1B63CCC14(a1);
}

__CFString *sub_1B655DCD0(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  }
  long long v9 = a1[19];
  __s1[0] = a1[18];
  __s1[1] = v9;
  __s1[2] = a1[20];
  if (!memcmp(__s1, &xmmword_1F0FB86B0, 0x30uLL))
  {
    int v10 = @"Box";
  }
  else if (!memcmp(__s1, &xmmword_1F0FB9418, 0x30uLL))
  {
    int v10 = @"Pyramid";
  }
  else if (!memcmp(__s1, &xmmword_1F0FB8D58, 0x30uLL))
  {
    int v10 = @"Cylinder";
  }
  else if (!memcmp(__s1, &xmmword_1F0FB8BA8, 0x30uLL))
  {
    int v10 = @"Cone";
  }
  else if (!memcmp(__s1, &xmmword_1F0FB9928, 0x30uLL))
  {
    int v10 = @"Tube";
  }
  else if (!memcmp(__s1, &xmmword_1F0FB8B78, 0x30uLL))
  {
    int v10 = @"Capsule";
  }
  else if (!memcmp(__s1, &xmmword_1F0FB9838, 0x30uLL))
  {
    int v10 = @"Torus";
  }
  else if (!memcmp(__s1, &xmmword_1F0FB96E8, 0x30uLL))
  {
    int v10 = @"Sphere";
  }
  else if (!memcmp(__s1, &xmmword_1F0FB9388, 0x30uLL))
  {
    int v10 = @"Plane";
  }
  else
  {
    int v10 = @"Unknown";
  }
  CFTypeID v11 = CFGetTypeID(a1);
  CFStringRef v12 = CFCopyTypeIDDescription(v11);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v21 = sub_1B63CCE0C((uint64_t)a1, v14, v15, v16, v17, v18, v19, v20);
  CFStringAppendFormat(Mutable, 0, @"<%@<%@>:%p \"%@\"\n", v12, v10, a1, v21);
  uint64_t v29 = sub_1B63CCE68((uint64_t)a1, v22, v23, v24, v25, v26, v27, v28);
  CFStringAppendFormat(Mutable, 0, @"  mesh: %@\n", v29);
  if ((uint64_t)sub_1B63CCEC4((uint64_t)a1, v30, v31, v32, v33, v34, v35, v36) >= 1)
  {
    uint64_t v43 = 0;
    do
    {
      CFArrayRef v44 = sub_1B63CCF34((uint64_t)a1, v43, v37, v38, v39, v40, v41, v42);
      CFStringAppendFormat(Mutable, 0, @"  mat%d: %@\n", v43++, v44);
    }
    while (v43 < (uint64_t)sub_1B63CCEC4((uint64_t)a1, v45, v46, v47, v48, v49, v50, v51));
  }
  CFStringAppend(Mutable, @">");
  CFRelease(v12);
  return Mutable;
}

uint64_t sub_1B655DF5C(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4 = *(float32x4_t **)(a1 + 104);
  if (v4)
  {
    *a3 = vsubq_f32(*v4, v4[1]);
    *a4 = vaddq_f32(*(float32x4_t *)*(void *)(a1 + 104), *(float32x4_t *)(*(void *)(a1 + 104) + 16));
    return 1;
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(void))(a1 + 296);
    if (v6) {
      return v6();
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1B655DFA4(uint64_t a1)
{
  v1 = *(uint64_t (**)(void))(a1 + 304);
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

void sub_1B655DFBC(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  memcpy(__dst, __src, __n);

  sub_1B6558D54(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B655E004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  }
  uint64_t v9 = sub_1B655C8BC((_OWORD *)(a1 + 208), 0, 0);
  sub_1B655CA18(a1, v9, v10, v11, v12, v13, v14, v15);
  return v9;
}

void sub_1B655FBC4(uint64_t *a1, uint64_t a2, void *a3, int __e, int a5)
{
  double v9 = ldexp(1.0, __e);
  uint64_t v17 = (const float *)sub_1B641D478(a2, v10, v11, v12, v13, v14, v15, v16);
  __int16 v19 = WORD2(v18);
  uint64_t v32 = sub_1B641D8A0(a2, v18, v20, v21, v22, v23, v24, v25);
  int8x16_t v56 = a3;
  if (v32 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 2)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Morph target has a vertex count different from the base geometry", v26, v27, v28, v29, v30, v31, (uint64_t)"vertexCount == CFIndex(baseMesh.pointCount())");
  }
  uint64_t v33 = 3 * v32;
  uint64_t v34 = a1[1] - *a1;
  sub_1B642863C((uint64_t)a1, 3 * v32 + (v34 >> 2));
  if (v32 >= 1)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = v34 >> 2;
    int v47 = v19;
    float v48 = v9;
    uint64_t v49 = HIBYTE(v19);
    uint64_t v50 = 4 * (v34 >> 2);
    float v57 = v48;
    do
    {
      *(double *)v41.i64 = sub_1B65D6198(v47, v17, v35, v36, v37, v38, v39, v40, v41, *(float *)v42.i32, *(float *)v43.i32);
      if (a5)
      {
        uint64_t v51 = v45 + v46;
        uint64_t v52 = *a1;
        float v53 = v57;
        int32x2_t v42 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(*(float32x2_t *)v41.f32, v57)));
        *(int32x2_t *)(*a1 + v50 + v44) = v42;
        float v54 = v41.f32[2];
      }
      else
      {
        int8x16_t v55 = (float32x2_t *)(*v56 + v44);
        v42.i32[0] = v55[1].i32[0];
        uint64_t v51 = v46 + v45;
        uint64_t v52 = *a1;
        float v53 = v57;
        int32x2_t v43 = vcvt_s32_f32(vrnda_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)v41.f32, *v55), v57)));
        *(int32x2_t *)(*a1 + v50 + v44) = v43;
        float v54 = v41.f32[2] - *(float *)v42.i32;
      }
      v41.f32[0] = v54 * v53;
      *(_DWORD *)(v52 + 4 * v51 + 8) = llroundf(v41.f32[0]);
      uint64_t v17 = (const float *)((char *)v17 + v49);
      v45 += 3;
      v44 += 12;
    }
    while (v45 < v33);
  }
}

uint64_t sub_1B655FD68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_1B64ACF7C(a2, 0, a3, a4, a5, a6, a7, a8);
  int64_t v18 = sub_1B641D8A0((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  sub_1B6560ABC(a1, v18);
  uint64_t v26 = sub_1B641D478((uint64_t)v10, v19, v20, v21, v22, v23, v24, v25);
  if (v18 >= 1)
  {
    uint64_t v38 = (const float *)v26;
    uint64_t v39 = 0;
    int v40 = v27;
    uint64_t v41 = v28;
    do
    {
      *(double *)v35.i64 = sub_1B65D6198(v40, v38, v29, v30, v31, v32, v33, v34, v35, v36, v37);
      uint64_t v42 = *a1 + v39;
      *(void *)uint64_t v42 = v35.i64[0];
      *(_DWORD *)(v42 + 8) = v35.i32[2];
      uint64_t v38 = (const float *)((char *)v38 + v41);
      v39 += 12;
      --v18;
    }
    while (v18);
  }
  uint64_t v43 = sub_1B64ACE9C(a2, 0, 0, v30, v31, v32, v33, v34);
  CFArrayRef v56 = sub_1B64ABD08(a2, v44, v45, v46, v47, v48, v49, v50);
  uint64_t v108 = 0;
  v109 = &v108;
  uint64_t v110 = 0x2020000000;
  uint64_t v111 = 0;
  uint64_t v104 = 0;
  v105 = &v104;
  uint64_t v106 = 0x2020000000;
  uint64_t v107 = 0;
  float v57 = &unk_1B6E4F000;
  if ((uint64_t)v56 < 1)
  {
    unint64_t v72 = 0;
  }
  else
  {
    for (CFIndex i = 0; (const __CFArray *)i != v56; ++i)
    {
      float32x4_t v59 = sub_1B64ABD78(a2, i, 0, v51, v52, v53, v54, v55);
      uint64_t v103 = 0;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v100 = 0u;
      sub_1B63D11F0((uint64_t)v59, v43, v60, v61, v62, v63, v64, v65, (uint64_t)&v100);
      v98[0] = v100;
      v98[1] = v101;
      v98[2] = v102;
      uint64_t v99 = v103;
      v97[0] = MEMORY[0x1E4F143A8];
      v97[1] = 3221225472;
      v97[2] = sub_1B6560074;
      v97[3] = &unk_1E6144478;
      v97[4] = &v108;
      v97[5] = &v104;
      sub_1B63D1BEC((uint64_t *)v98, (uint64_t)v97, v66, v67, v68, v69, v70, v71);
    }
    unint64_t v72 = v109[3];
    float v57 = (void *)&unk_1B6E4F000;
  }
  sub_1B642863C((uint64_t)(a1 + 3), v72);
  sub_1B642863C((uint64_t)(a1 + 6), v105[3]);
  v109[3] = 0;
  v105[3] = 0;
  if ((uint64_t)v56 >= 1)
  {
    CFIndex v78 = 0;
    uint64_t v79 = v57[80];
    do
    {
      float v80 = sub_1B64ABD78(a2, v78, 0, v73, v74, v75, v76, v77);
      uint64_t v103 = 0;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v100 = 0u;
      sub_1B63D11F0((uint64_t)v80, v43, v81, v82, v83, v84, v85, v86, (uint64_t)&v100);
      v95[0] = v100;
      v95[1] = v101;
      v95[2] = v102;
      uint64_t v96 = v103;
      v94[0] = MEMORY[0x1E4F143A8];
      v94[1] = v79;
      v94[2] = sub_1B65600A8;
      v94[3] = &unk_1E61444A0;
      v94[5] = &v104;
      v94[6] = a1;
      v94[4] = &v108;
      sub_1B63D1BEC((uint64_t *)v95, (uint64_t)v94, v87, v88, v89, v90, v91, v92);
      ++v78;
    }
    while (v56 != (const __CFArray *)v78);
  }
  _Block_object_dispose(&v104, 8);
  _Block_object_dispose(&v108, 8);
  return 1;
}

void sub_1B6560040(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6560074(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
    *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) += a4;
  }
  return result;
}

void *sub_1B65600A8(void *result, uint64_t a2, int *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = result[6];
    uint64_t v5 = *(void *)(result[4] + 8);
    uint64_t v6 = *(void *)(v5 + 24);
    *(void *)(v5 + 24) = v6 + 1;
    *(_DWORD *)(*(void *)(v4 + 24) + 4 * v6) = a4;
    uint64_t v7 = *(void *)(v4 + 48);
    uint64_t v8 = a4;
    do
    {
      uint64_t v9 = *(void *)(result[5] + 8);
      uint64_t v10 = *(void *)(v9 + 24);
      *(void *)(v9 + 24) = v10 + 1;
      int v11 = *a3++;
      *(_DWORD *)(v7 + 4 * v10) = v11;
      --v8;
    }
    while (v8);
  }
  return result;
}

BOOL sub_1B6560100(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_nodeRef(a2, (const char *)a2, a3, a4);
  uint64_t v13 = sub_1B64A14EC(v5, v6, v7, v8, v9, v10, v11, v12);
  uint64_t v21 = sub_1B6588E20(v13, v14, v15, v16, v17, v18, v19, v20);
  uint64_t v29 = sub_1B63CCE68(v21, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v35 = sub_1B64ACE9C(v29, 0, 0, v30, v31, v32, v33, v34);
  uint64_t v42 = sub_1B64ACF7C(v29, 0, v36, v37, v38, v39, v40, v41);
  uint64_t v50 = sub_1B641D8A0((uint64_t)v42, v43, v44, v45, v46, v47, v48, v49);
  uint64_t v170 = 0;
  long long v168 = 0u;
  *(_OWORD *)v169 = 0u;
  *(_OWORD *)v166 = 0u;
  *(_OWORD *)v167 = 0u;
  sub_1B655FD68((uint64_t *)v166, v29, v51, v52, v53, v54, v55, v56);
  uint64_t v57 = sub_1B63CD09C(v13);
  CFArrayRef v58 = (const __CFArray *)sub_1B63CD09C(v57);
  CFIndex Count = CFArrayGetCount(v58);
  char v165 = 5;
  int64_t v157 = (char *)v166[1] - (char *)v166[0];
  BOOL v164 = sub_1B65873F4(v57) == 1;
  __p = 0;
  v162 = 0;
  uint64_t v163 = 0;
  sub_1B6427A50(&__p, 3 * Count * 0xAAAAAAAAAAAAAAABLL * (v157 >> 2));
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v58, i);
      uint64_t v69 = sub_1B63CCE68((uint64_t)ValueAtIndex, v62, v63, v64, v65, v66, v67, v68);
      uint64_t v76 = sub_1B64ACF7C(v69, 0, v70, v71, v72, v73, v74, v75);
      uint64_t v84 = (uint64_t)v76;
      if (v76)
      {
        if (sub_1B641D8A0((uint64_t)v76, v77, v78, v79, v80, v81, v82, v83) == v50)
        {
          sub_1B655FBC4((uint64_t *)&__p, v84, v166, 5, v164);
        }
        else
        {
          if ((sub_1B65880A4(v57, v85, v86, v87, v88, v89, v90, v91) & 1) == 0)
          {
            uint64_t v101 = objc_msgSend_name(a2, v94, v95, v96);
            sub_1B63F2F54(16, @"Error: Internal consistency error, %@'s (%p) morph %p is not sparse", v102, v103, v104, v105, v106, v107, v101);
          }
          uint64_t v108 = sub_1B64ABD78(v69, 0, 0, v96, v97, v98, v99, v100);
          v113 = (const void *)sub_1B641DD34(v84, (uint64_t)v108, v50, v35, v109, v110, v111, v112);
          sub_1B655FBC4((uint64_t *)&__p, (uint64_t)v113, v166, 5, v164);
          if (v113) {
            CFRelease(v113);
          }
        }
      }
      else
      {
        uint64_t v92 = v162 - (unsigned char *)__p;
        sub_1B642863C((uint64_t)&__p, (v157 >> 2) + ((v162 - (unsigned char *)__p) >> 2));
        v93 = (char *)__p + 4 * (v92 >> 2);
        if (v162 - v93 >= 1) {
          bzero(v93, 4 * (((unint64_t)(v162 - v93) >> 2) - ((unint64_t)(v162 - v93) > 3)) + 4);
        }
      }
    }
  }
  v114 = v167[1];
  uint64_t v115 = v168;
  v116 = (int *)v169[0];
  v117 = v169[1];
  id v118 = objc_alloc(MEMORY[0x1E4F1CA58]);
  v121 = objc_msgSend_initWithLength_(v118, v119, v157 * Count + 1024, v120);
  uint64_t v125 = objc_msgSend_mutableBytes(v121, v122, v123, v124);
  uint64_t v158 = 0;
  uint64_t v159 = 0;
  int v133 = sub_1B6E2FB38((uint64_t)&v160, (uint64_t)v114, v116, (uint64_t)__p, 3, 0xAAAAAAAAAAAAAAABLL * (v157 >> 2), (v115 - (uint64_t)v114) >> 2, (v117 - (unsigned char *)v116) >> 2, Count, v125, v157 * Count + 1024, &v159, &v158);
  if (v133)
  {
    sub_1B63F2F54(16, @"Error: AnimCodec - Failed to compress mesh", v127, v128, v129, v130, v131, v132, v155);
  }
  else
  {
    objc_msgSend_setLength_(v121, v126, v159, v128);
    objc_msgSend_encodeObject_forKey_(a1, v134, (uint64_t)v121, @"morpherCompressedData");

    id v135 = objc_alloc(MEMORY[0x1E4F1CA58]);
    v138 = objc_msgSend_initWithCapacity_(v135, v136, 32 * Count, v137);
    objc_msgSend_appendBytes_length_(v138, v139, (uint64_t)&v165, 1);
    objc_msgSend_appendBytes_length_(v138, v140, (uint64_t)&v164, 1);
    if (Count >= 1)
    {
      for (CFIndex j = 0; j != Count; ++j)
      {
        v143 = CFArrayGetValueAtIndex(v58, j);
        CFStringRef v151 = (const __CFString *)sub_1B6583470((uint64_t)v143, v144, v145, v146, v147, v148, v149, v150);
        CFStringGetCString(v151, buffer, 512, 0x600u);
        size_t v152 = strlen(buffer);
        objc_msgSend_appendBytes_length_(v138, v153, (uint64_t)buffer, v152 + 1);
      }
    }
    objc_msgSend_encodeObject_forKey_(a1, v141, (uint64_t)v138, @"morpherMetaData");
  }
  if (__p)
  {
    v162 = __p;
    operator delete(__p);
  }
  if (v169[0])
  {
    v169[1] = v169[0];
    operator delete(v169[0]);
  }
  if (v167[1])
  {
    *(void **)&long long v168 = v167[1];
    operator delete(v167[1]);
  }
  if (v166[0])
  {
    v166[1] = v166[0];
    operator delete(v166[0]);
  }
  return v133 == 0;
}

void sub_1B6560524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1B640A148((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6560594(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  v36[1] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  unint64_t v13 = (v11 - *a2) / 12;
  unint64_t v14 = v13 * a4;
  long double v15 = ldexp(1.0, -a5);
  *(float *)&long double v15 = v15;
  int32x2_t v35 = *(int32x2_t *)&v15;
  uint64_t v16 = (char *)malloc_type_malloc(4 * v14, 0xB81148E8uLL);
  if (a6)
  {
    if (v11 != v12)
    {
      uint64_t v18 = 0;
      if (v13 <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = v13;
      }
      uint64_t v20 = *a1 + 4 * v14 * a3;
      do
      {
        uint64_t v21 = (float32x2_t *)&v16[v18];
        *uint64_t v21 = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v20 + v18)), *(float *)v35.i32);
        v21[1].f32[0] = *(float *)v35.i32 * (float)*(int *)(v20 + v18 + 8);
        v18 += 4 * a4;
        --v19;
      }
      while (v19);
    }
  }
  else if (v11 != v12)
  {
    uint64_t v22 = 0;
    if (v13 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v13;
    }
    float32x2_t v24 = (float32x2_t)vdup_lane_s32(v35, 0);
    uint64_t v25 = *a1 + 4 * v14 * a3;
    uint64_t v26 = (float *)(*a2 + 8);
    do
    {
      float v27 = *v26;
      uint64_t v28 = (float32x2_t *)&v16[v22];
      *uint64_t v28 = vmla_f32(*(float32x2_t *)(v26 - 2), v24, vcvt_f32_s32(*(int32x2_t *)(v25 + v22)));
      v28[1].f32[0] = v27 + (float)((float)*(int *)(v25 + v22 + 8) * *(float *)v35.i32);
      v22 += 4 * a4;
      v26 += 3;
      --v23;
    }
    while (v23);
  }
  uint64_t v29 = objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E4F1C9B8], v17, (uint64_t)v16, 4 * v14, 1);
  v36[0] = objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v30, v29, @"kGeometrySourceSemanticPosition", v13, 1, a4, 4, 0, 0);
  uint64_t v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v31, (uint64_t)v36, 1);
  return objc_msgSend_meshWithSources_elements_(VFXMesh, v33, v32, MEMORY[0x1E4F1CBF0]);
}

void *sub_1B65607B4(void *a1, void *a2)
{
  uint64_t v4 = objc_opt_class();
  uint64_t v6 = objc_msgSend_decodeObjectOfClass_forKey_(a1, v5, v4, @"morpherCompressedData");
  if (!v6) {
    return 0;
  }
  uint64_t v10 = (void *)v6;
  uint64_t v11 = objc_msgSend_model(a2, v7, v8, v9);
  uint64_t v15 = objc_msgSend_geometryRef(v11, v12, v13, v14);
  uint64_t v102 = 0;
  long long v100 = 0u;
  *(_OWORD *)uint64_t v101 = 0u;
  *(_OWORD *)uint64_t v98 = 0u;
  *(_OWORD *)uint64_t v99 = 0u;
  uint64_t v23 = sub_1B63CCE68(v15, v16, v17, v18, v19, v20, v21, v22);
  sub_1B655FD68((uint64_t *)v98, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v33 = objc_msgSend_bytes(v10, v30, v31, v32);
  unint64_t v37 = objc_msgSend_length(v10, v34, v35, v36);
  if (!sub_1B6E2D218(v33, v37, (uint64_t)v95))
  {
    uint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v98[1] - (char *)v98[0]) >> 2);
    uint64_t v46 = v99[1];
    uint64_t v47 = v100;
    uint64_t v48 = (int *)v101[0];
    uint64_t v49 = v101[1];
    uint64_t v50 = v96;
    __p = 0;
    v93 = 0;
    uint64_t v94 = 0;
    sub_1B642863C((uint64_t)&__p, 3 * v45 * v96);
    uint64_t v54 = objc_msgSend_bytes(v10, v51, v52, v53);
    unint64_t v58 = objc_msgSend_length(v10, v55, v56, v57);
    if (sub_1B6E2D3C8((uint64_t)&v97, v54, v58, (uint64_t)v46, v48, 3, v45, (v47 - (uint64_t)v46) >> 2, (v49 - (unsigned char *)v48) >> 2, (uint64_t)__p))
    {
      sub_1B63F2F54(16, @"Error: AnimCodec - Failed to decompress animation", v59, v60, v61, v62, v63, v64, v91);
    }
    else
    {
      uint64_t v66 = objc_opt_class();
      uint64_t v68 = objc_msgSend_decodeObjectOfClass_forKey_(a1, v67, v66, @"morpherMetaData");
      if (v68)
      {
        uint64_t v76 = (unsigned char *)objc_msgSend_bytes(v68, v69, v70, v71);
        char v77 = *v76;
        char v78 = v76[1];
        uint64_t v44 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v79, v50, v80);
        if (v50)
        {
          uint64_t v81 = 0;
          uint64_t v82 = v76 + 2;
          CFAllocatorRef v83 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          do
          {
            uint64_t v84 = (void *)sub_1B6560594(&__p, v98, v81, 3, v77, v78);
            objc_msgSend_addObject_(v44, v85, (uint64_t)v84, v86);
            CFStringRef v87 = CFStringCreateWithCString(v83, v82, 0x8000100u);
            objc_msgSend_setName_(v84, v88, (uint64_t)v87, v89);
            if (v87) {
              CFRelease(v87);
            }
            v82 += strlen(v82) + 1;
            ++v81;
          }
          while (v50 != v81);
        }
        goto LABEL_8;
      }
      sub_1B63F2F54(16, @"Error: AnimCodec - Can't decode metadata", v70, v71, v72, v73, v74, v75, v91);
    }
    uint64_t v44 = 0;
LABEL_8:
    if (__p)
    {
      v93 = __p;
      operator delete(__p);
    }
    goto LABEL_10;
  }
  sub_1B63F2F54(16, @"Error: AnimCodec - Failed to parse header", v38, v39, v40, v41, v42, v43, v90);
  uint64_t v44 = 0;
LABEL_10:
  if (v101[0])
  {
    v101[1] = v101[0];
    operator delete(v101[0]);
  }
  if (v99[1])
  {
    *(void **)&long long v100 = v99[1];
    operator delete(v99[1]);
  }
  if (v98[0])
  {
    v98[1] = v98[0];
    operator delete(v98[0]);
  }
  return v44;
}

void sub_1B6560A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1B640A148((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1B6560ABC(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1B6560AF8(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void sub_1B6560AF8(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_1B6560D34(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    __p = v12;
    uint64_t v16 = &v12[12 * v8];
    uint64_t v18 = &v12[12 * v11];
    size_t v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_1B6560CCC(a1, &__p);
    if (v17 != v16) {
      uint64_t v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B6560C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B6560CCC(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1B6560D34(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_1B63C8620();
  }
  return operator new(12 * a2);
}

uint64_t sub_1B6560D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, CFX::CrossFrameResourceManager *a5, uint64_t *a6)
{
  uint64_t v10 = *a6;
  v83[0] = (uint64_t)"HybridCompositePass";
  v83[1] = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDB5C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v72 = a3;
    uint64_t v73 = a2;
    int v74 = __cxa_guard_acquire(&qword_1E9DDB5C0);
    a2 = v73;
    a3 = v72;
    if (v74)
    {
      byte_1E9DDB5B8 = 1;
      __cxa_guard_release(&qword_1E9DDB5C0);
      a2 = v73;
      a3 = v72;
    }
  }
  if (byte_1E9DDB5B8) {
    uint64_t v11 = 0x2E8422031D6ACA49;
  }
  else {
    uint64_t v11 = 0;
  }
  sub_1B653860C(a1, a2, a3, v83, v11, 0);
  *(void *)a1 = &unk_1F0FB4010;
  memcpy((void *)(a1 + 376), a6, 0x108uLL);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  uint64_t v19 = (void *)sub_1B6445900(*(void *)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
  *(void *)(a1 + 672) = v19;
  *(void *)(a1 + 680) = objc_msgSend_resourceManager(v19, v20, v21, v22);
  uint64_t v30 = sub_1B644558C(*(void *)(a1 + 368), v23, v24, v25, v26, v27, v28, v29);
  LOBYTE(v83[0]) = 0;
  uint64_t v33 = sub_1B64B27BC(v30, 0);
  if (v33) {
    LOBYTE(v83[0]) = objc_msgSend_textureForMaterialProperty_(*(void **)(a1 + 672), v31, v33, v32) != 0;
  }
  BOOL v82 = *(void *)(a1 + 560) != 0;
  BOOL v81 = *(void *)(a1 + 568) != 0;
  BOOL v80 = *(void *)(a1 + 576) != 0;
  BOOL v79 = *(void *)(a1 + 584) != 0;
  BOOL v78 = *(void *)(a1 + 624) != 0;
  unint64_t v34 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  unint64_t v35 = 0x9DDFEA08EB382D69
      * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v33)));
  unint64_t v36 = 0x9DDFEA08EB382D69 * (v35 ^ (v35 >> 47));
  unint64_t v37 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v82)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v82)))) ^ ((0x9DDFEA08EB382D69 * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ v82)) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ v82)))) >> 47));
  unint64_t v38 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v37 ^ ((0x9DDFEA08EB382D69 * (v37 ^ v81)) >> 47) ^ (0x9DDFEA08EB382D69 * (v37 ^ v81)))) ^ ((0x9DDFEA08EB382D69 * (v37 ^ ((0x9DDFEA08EB382D69 * (v37 ^ v81)) >> 47) ^ (0x9DDFEA08EB382D69 * (v37 ^ v81)))) >> 47));
  unint64_t v39 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v80)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v80)))) ^ ((0x9DDFEA08EB382D69 * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v80)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v80)))) >> 47));
  unint64_t v40 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v79)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v79)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v79)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v79)))) >> 47));
  uint64_t v41 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v78)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v78)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v78)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v78)))) >> 47));
  uint64_t v42 = CFX::CrossFrameResourceManager::get(a5, v41);
  uint64_t v43 = (uint64_t *)(a1 + 640);
  *(void *)(a1 + 640) = v42;
  if (!v42)
  {
    *(void *)(a1 + 640) = sub_1B6561290(a5, v41);
    uint64_t v51 = (void *)sub_1B6445900(*(void *)(a1 + 368), v44, v45, v46, v47, v48, v49, v50);
    uint64_t v55 = objc_msgSend_resourceManager(v51, v52, v53, v54);
    id v56 = objc_alloc_init(MEMORY[0x1E4F35228]);
    objc_msgSend_setConstantValue_type_withName_(v56, v57, (uint64_t)v83, 53, @"has_background");
    objc_msgSend_setConstantValue_type_withName_(v56, v58, (uint64_t)&v82, 53, @"has_directLightings");
    objc_msgSend_setConstantValue_type_withName_(v56, v59, (uint64_t)&v81, 53, @"has_indirectDiffuse");
    objc_msgSend_setConstantValue_type_withName_(v56, v60, (uint64_t)&v80, 53, @"has_specular");
    objc_msgSend_setConstantValue_type_withName_(v56, v61, (uint64_t)&v79, 53, @"has_clearcoat");
    objc_msgSend_setConstantValue_type_withName_(v56, v62, (uint64_t)&v78, 53, @"has_subsurface");
    uint64_t v63 = *v43;
    uint64_t v66 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v55, v64, @"vfx_hybrid_composite", (uint64_t)v56);
    uint64_t v67 = *(void **)(v63 + 16);
    if (v67 != (void *)v66)
    {
      if (v67) {

      }
      *(void *)(v63 + 16) = v66;
    }
    uint64_t v68 = *v43;
    uint64_t v69 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v55, v65, @"vfx_hybrid_opacity_filter", (uint64_t)v56);
    uint64_t v70 = *(void **)(v68 + 24);
    if (v70 != (void *)v69)
    {
      if (v70) {

      }
      *(void *)(v68 + 24) = v69;
    }
  }
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(a1 + 384), MTLPixelFormatRGBA16Float, (uint64_t)v77);
  *(void *)(a1 + 648) = sub_1B63CFDE4(a4, (uint64_t)"HybridCompositeTmp", v77);
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(a1 + 384), MTLPixelFormatRGBA16Float, (uint64_t)v76);
  *(void *)(a1 + 656) = sub_1B63CFDE4(a4, (uint64_t)"HybridCompositePassOutput", v76);
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(a1 + 384), MTLPixelFormatRGBA16Float, (uint64_t)v75);
  *(void *)(a1 + 664) = sub_1B63CFDE4(a4, (uint64_t)"HybridCompositePassOutput", v75);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 544));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 552));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 560));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 568));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 576));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 584));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 608));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 632));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 624));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 616));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 648));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 648));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 664));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 656));
  return a1;
}

void sub_1B6561264(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6561290(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

void *sub_1B656131C(void *result, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  if (*(void *)(result[80] + 16))
  {
    unint64_t v9 = result;
    uint64_t v10 = *a3;
    uint64_t v11 = sub_1B644558C(result[46], a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[68]);
    id v13 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[75]);
    id v14 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[69]);
    id v15 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[74]);
    id v16 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[79]);
    uint64_t v20 = objc_msgSend_resourceManager((void *)v9[84], v17, v18, v19);
    uint64_t v23 = objc_msgSend_specularDFGDiffuseHammonTextureWithRenderContext_(v20, v21, v9[84], v22);
    objc_msgSend_setTexture_atIndex_(v10, v24, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v10, v25, (uint64_t)v14, 1);
    objc_msgSend_setTexture_atIndex_(v10, v26, (uint64_t)v13, 7);
    objc_msgSend_setTexture_atIndex_(v10, v27, (uint64_t)v16, 9);
    objc_msgSend_setTexture_atIndex_(v10, v28, (uint64_t)v15, 6);
    objc_msgSend_setTexture_atIndex_(v10, v29, v23, 10);
    uint64_t v30 = (const CFX::RG::Resource *)v9[70];
    if (v30)
    {
      id v31 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v30);
      objc_msgSend_setTexture_atIndex_(v10, v32, (uint64_t)v31, 2);
    }
    uint64_t v33 = (const CFX::RG::Resource *)v9[71];
    if (v33)
    {
      id v34 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v33);
      objc_msgSend_setTexture_atIndex_(v10, v35, (uint64_t)v34, 3);
    }
    unint64_t v36 = (const CFX::RG::Resource *)v9[72];
    if (v36)
    {
      id v37 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v36);
      objc_msgSend_setTexture_atIndex_(v10, v38, (uint64_t)v37, 4);
    }
    unint64_t v39 = (const CFX::RG::Resource *)v9[73];
    if (v39)
    {
      id v40 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v39);
      id v41 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[76]);
      objc_msgSend_setTexture_atIndex_(v10, v42, (uint64_t)v40, 5);
      objc_msgSend_setTexture_atIndex_(v10, v43, (uint64_t)v41, 8);
    }
    uint64_t v44 = (const CFX::RG::Resource *)v9[78];
    if (v44)
    {
      id v45 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v44);
      id v46 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[77]);
      objc_msgSend_setTexture_atIndex_(v10, v47, (uint64_t)v45, 12);
      objc_msgSend_setTexture_atIndex_(v10, v48, (uint64_t)v46, 13);
    }
    uint64_t v49 = sub_1B64B27BC(v11, 0);
    if (v49)
    {
      uint64_t v57 = objc_msgSend_textureForMaterialProperty_((void *)v9[84], v50, v49, v52);
      if (v57) {
        objc_msgSend_setTexture_atIndex_(v10, v50, v57, 11);
      }
    }
    uint64_t result = sub_1B6446564((uint64_t *)v9[46], (uint64_t)v50, v51, v52, v53, v54, v55, v56);
    if (result)
    {
      uint64_t result = sub_1B64A3B48((uint64_t)result, v58, v59, v60, v61, v62, v63, v64);
      if (result)
      {
        uint64_t v72 = sub_1B6446564((uint64_t *)v9[46], v65, v66, v67, v68, v69, v70, v71);
        sub_1B63E0460((uint64_t)v72, (uint64_t)v140, v73, v74, v75, v76, v77, v78);
        BOOL v79 = (simd_float4 *)sub_1B6447988(v9[46], 1);
        simd_float4 v137 = v79[1];
        simd_float4 v138 = *v79;
        simd_float4 v135 = v79[3];
        simd_float4 v136 = v79[2];
        __n128 v139 = sub_1B64471F4(v9[46], 0, v80, v81, v82, v83, v84, v85);
        memset(v147, 0, sizeof(v147));
        v149.columns[1] = v137;
        v149.columns[0] = v138;
        v141[0] = v138;
        v141[1] = v137;
        v149.columns[3] = v135;
        v149.columns[2] = v136;
        v141[2] = v136;
        v141[3] = v135;
        simd_float4x4 v142 = __invert_f4(v149);
        uint64_t v92 = sub_1B649CD50(v140, (uint64_t)&v139, v86, v87, v88, v89, v90, v91);
        long long v93 = *((_OWORD *)v92 + 1);
        long long v94 = *((_OWORD *)v92 + 2);
        long long v95 = *((_OWORD *)v92 + 3);
        long long v143 = *(_OWORD *)v92;
        long long v144 = v93;
        long long v145 = v94;
        long long v146 = v95;
        objc_msgSend_setBytes_length_atIndex_(v10, v96, (uint64_t)v141, 272, 8);
        id v97 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[81]);
        objc_msgSend_setTexture_atIndex_(v10, v98, (uint64_t)v97, 16);
        uint64_t v105 = v9[80];
        uint64_t v106 = *(void *)(v105 + 16);
        if (!v106)
        {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v99, v100, v101, v102, v103, v104, (uint64_t)"_ptr != NULL");
          uint64_t v106 = *(void *)(v105 + 16);
        }
        uint64_t v107 = sub_1B653EFB8(v106);
        objc_msgSend_dispatch_onTexture2D_(v10, v108, v107, (uint64_t)v97);
        id v109 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[82]);
        objc_msgSend_setTexture_atIndex_(v10, v110, (uint64_t)v109, 17);
        uint64_t v117 = v9[80];
        uint64_t v118 = *(void *)(v117 + 16);
        if (!v118)
        {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v111, v112, v113, v114, v115, v116, (uint64_t)"_ptr != NULL");
          uint64_t v118 = *(void *)(v117 + 16);
        }
        uint64_t v119 = sub_1B653EFB8(v118);
        objc_msgSend_dispatch_onTexture2D_(v10, v120, v119, (uint64_t)v109);
        id v121 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), (const CFX::RG::Resource *)v9[83]);
        objc_msgSend_setTexture_atIndex_(v10, v122, (uint64_t)v16, 0);
        objc_msgSend_setTexture_atIndex_(v10, v123, (uint64_t)v97, 1);
        objc_msgSend_setTexture_atIndex_(v10, v124, (uint64_t)v121, 2);
        uint64_t v131 = v9[80];
        uint64_t v132 = *(void *)(v131 + 24);
        if (!v132)
        {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v125, v126, v127, v128, v129, v130, (uint64_t)"_ptr != NULL");
          uint64_t v132 = *(void *)(v131 + 24);
        }
        uint64_t v133 = sub_1B653EFB8(v132);
        return objc_msgSend_dispatch_onTexture2D_(v10, v134, v133, (uint64_t)v121);
      }
    }
  }
  return result;
}

uint64_t sub_1B656177C(uint64_t a1)
{
  return *(void *)(a1 + 664);
}

uint64_t sub_1B6561784(uint64_t a1)
{
  return *(void *)(a1 + 656);
}

uint64_t sub_1B656178C(uint64_t *a1, CFX::CrossFrameResourceManager *a2, uint64_t *a3)
{
  return sub_1B656179C(a1, a1, a2, a3);
}

uint64_t sub_1B656179C(uint64_t *a1, uint64_t *a2, CFX::CrossFrameResourceManager *a3, uint64_t *a4)
{
  uint64_t v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[0] = sub_1B6561904(v9[0], v7, v9, a2, a3, a4);
  sub_1B63C88CC(a1 + 18, v9);
  return v9[0];
}

void sub_1B65617FC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B6561834(void *a1)
{
  *a1 = &unk_1F0FB3FF0;
  uint64_t v2 = (void *)a1[3];
  if (v2) {

  }
  uint64_t v3 = (void *)a1[2];
  if (v3) {

  }
  return a1;
}

void sub_1B656188C(void *a1)
{
  *a1 = &unk_1F0FB3FF0;
  uint64_t v2 = (void *)a1[3];
  if (v2) {

  }
  uint64_t v3 = (void *)a1[2];
  if (v3) {

  }
  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6561904(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, CFX::CrossFrameResourceManager *a5, uint64_t *a6)
{
  v12[0] = a1;
  v12[1] = a2;
  uint64_t v10 = sub_1B63C8330(v12, 0x2B0u, 8u);
  return sub_1B6560D7C(v10, *a3, a3[1], a4, a5, a6);
}

uint64_t sub_1B656196C(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B656199C()
{
  if (qword_1E9DDB5D0 != -1) {
    dispatch_once_f(&qword_1E9DDB5D0, &qword_1E9DDB5C8, (dispatch_function_t)sub_1B656196C);
  }
  uint64_t v0 = sub_1B63C8D44(qword_1E9DDB5C8, 0x20uLL);
  *(void *)(v0 + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  uint64_t v1 = sub_1B63F2FB8(2);
  if (v1) {
    uint64_t v8 = v1;
  }
  else {
    uint64_t v8 = 1000;
  }
  sub_1B6561A48(v0, v8, v2, v3, v4, v5, v6, v7);
  return v0;
}

void *sub_1B6561A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 32)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Can't change max batch size while in batch", a3, a4, a5, a6, a7, a8, (uint64_t)"dynamicBatchingSystem->_currentBatchInstancesCount == 0");
  }
  if (a2 <= 1) {
    a2 = 1;
  }
  free(*(void **)(a1 + 24));
  uint64_t result = malloc_type_malloc(8 * a2, 0x2004093837F09uLL);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1B6561AC8(uint64_t result)
{
  *(void *)(result + 32) = 0;
  return result;
}

BOOL sub_1B6561AD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  if (v8 >= v9)
  {
    sub_1B63F2F54(0, @"Warning: overflow the max batch size boundary", a3, a4, a5, a6, a7, a8, vars0);
    return 0;
  }
  else
  {
    uint64_t v10 = a1[3];
    a1[4] = v8 + 1;
    *(void *)(v10 + 8 * v8) = a2;
    return v8 + 1 < v9;
  }
}

uint64_t sub_1B6561B20(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t result = *(void *)(a1 + 24);
  *a2 = *(void *)(v3 + 8);
  return result;
}

void sub_1B6561B30(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 24);

  free(v2);
}

CFStringRef sub_1B6561B6C(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXDynamicBatchingSystem %p>", a1);
}

CFStringRef sub_1B6561BAC(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXDynamicBatchingSystem %p>", a1);
}

double sub_1B6561BEC@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _OWORD *a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v32 = a5;
  *((void *)&v32 + 1) = a6;
  uint64_t v14 = *(void *)(a4 + 40);
  if (!v14)
  {
    uint64_t v14 = -1;
    *(void *)(a4 + 40) = -1;
  }
  v33[0] = *(unsigned char *)(a4 + 1) ^ 1;
  v33[1] = 0;
  long long v34 = *(_OWORD *)(a4 + 16);
  uint64_t v35 = *(void *)(a4 + 32);
  uint64_t v36 = v14;
  uint64_t v37 = *(void *)(a4 + 48);
  sub_1B64E3F20(v31, a3, v35);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v15 = sub_1B63CF704(a1, a2, a3, (uint64_t)v33, v31, (uint64_t)&v27, &v32, a7);
  uint64_t v19 = *((void *)&v27 + 1);
  uint64_t v18 = v27;
  if (*(unsigned char *)(a4 + 2))
  {
    long long v22 = v27;
    uint64_t v23 = v28;
    long long v24 = v29;
    uint64_t v25 = *((void *)&v28 + 1);
    uint64_t v26 = v15;
    uint64_t v21 = 0;
    id v15 = sub_1B640D920((CFX::RG *)a1, (CFX::RG::RenderGraphContext *)a2, (CFX::RG::Resource *)a3, (uint64_t)v31, (uint64_t)&v22, (uint64_t)&v21, v16, v17);
    if (v21) {
      uint64_t v18 = v21;
    }
  }
  double result = 0.0;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 104) = 0u;
  *(_OWORD *)(a8 + 88) = 0u;
  *(_OWORD *)(a8 + 72) = 0u;
  *(_OWORD *)(a8 + 56) = 0u;
  *(_OWORD *)(a8 + 40) = 0u;
  *(_OWORD *)(a8 + 24) = 0u;
  *(void *)a8 = v15;
  *(void *)(a8 + 8) = v18;
  *(void *)(a8 + 16) = v19;
  return result;
}

double sub_1B6561D5C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  v10[0] = a2;
  v10[1] = a4;
  uint64_t v7 = sub_1B6610D08(a1, a3, (uint64_t)v10, a6);
  *(void *)(a5 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  uint64_t v9 = v7[50];
  *(void *)a5 = v7;
  *(void *)(a5 + 8) = v9;
  return result;
}

double sub_1B6561DB8@<D0>(uint64_t *a1@<X0>, CFX::RG::RenderGraphContext *a2@<X1>, uint64_t a3@<X2>, const CFX::RG::Resource *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v21[0] = a3;
  v21[1] = 0;
  v21[2] = a4;
  uint64_t v10 = (long long *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, a4);
  long long v22 = *v10;
  long long v11 = v10[3];
  long long v12 = v10[4];
  long long v13 = v10[2];
  long long v23 = v10[1];
  long long v24 = v13;
  long long v25 = v11;
  long long v26 = v12;
  uint64_t v18 = sub_1B63C7980(a1, (uint64_t)a2, (uint64_t)v21, a5, v14, v15, v16, v17);
  double result = 0.0;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(void *)(a6 + 128) = 0;
  uint64_t v20 = v18[93];
  *(void *)a6 = v18;
  *(void *)(a6 + 8) = v20;
  return result;
}

double sub_1B6561E54@<D0>(CFX::RG::Resource *this@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v24 = a4;
  uint64_t v10 = (_OWORD *)CFX::RG::Resource::constTextureDesc(this);
  CFX::RG::TextureDescriptorReference::withSampleCount(v10, 1, (uint64_t)v22);
  long long v11 = sub_1B63CFDE4(a2, (uint64_t)"Custom subgraph published texture", v22);
  long long v23 = v11;
  *(void *)&long long v19 = this;
  DWORD2(v19) = 0;
  uint64_t v20 = v11;
  uint64_t v21 = 0x100000000;
  uint64_t CopyPass = CFX::RG::makeCopyPass(a2, (uint64_t)"Copy to final", &v19);
  CFX::RG::ResourceIdentifier::ResourceIdentifier(&v19, a3);
  if (a4)
  {
    long long v13 = (uint64_t *)sub_1B6561F84(a2, &v23, &v24);
    CFX::RG::Pass::readFrom(v13, v23);
    unint64_t v14 = v19;
    uint64_t v15 = v23;
    uint64_t v16 = (uint64_t)a2;
    uint64_t v17 = (uint64_t)v13;
  }
  else
  {
    unint64_t v14 = v19;
    uint64_t v16 = (uint64_t)a2;
    uint64_t v15 = v11;
    uint64_t v17 = CopyPass;
  }
  CFX::RG::RenderGraphBuilder::publishResourceReference(v16, v14, (unint64_t)v15, v17);
  double result = 0.0;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 8) = 0u;
  *(void *)a5 = CopyPass;
  return result;
}

uint64_t sub_1B6561F84(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B65622D4(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

CFX::RG::Resource *sub_1B6561FDC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v11 = (void *)sub_1B6445900(a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  memset(v20, 0, sizeof(v20));
  RGTextureDescriptorMake2D(COERCE_FLOAT(a2[2]), COERCE_FLOAT(HIDWORD(a2[2])), a2[3], (uint64_t)v20);
  *((void *)&v21 + 1) = a2[4];
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v24, v20);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1B6562274;
  v19[3] = &unk_1E61444E8;
  v19[4] = a3;
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v25, v24, v19, 0);
  Finalid Texture = objc_msgSend_requireLoadFinalTexture(v11, v12, v13, v14);
  CFX::RG::ExternalResourceDesc::setRequireLoad((uint64_t)v25, FinalTexture);
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc((uint64_t)v18, (long long *)v25);
  uint64_t v16 = sub_1B63FB710(a1, (uint64_t)"DRAWABLE", (long long *)v18);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v18);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v25);
  return v16;
}

void sub_1B6562114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc((id *)va);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc((id *)(v2 - 240));
  _Unwind_Resume(a1);
}

double sub_1B6562138@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, uint64_t a4@<X8>)
{
  RGTextureDescriptorFromMTLTexture(a3, (uint64_t)&v12);
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v15, &v12);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1B656226C;
  v11[3] = &unk_1E61444C8;
  v11[4] = a3;
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v16, v15, v11, 0);
  uint64_t v8 = sub_1B63FB710(a1, (uint64_t)"Copy to External", (long long *)v16);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v16);
  *(void *)&long long v12 = a2;
  DWORD2(v12) = 0;
  uint64_t v13 = v8;
  uint64_t v14 = 0x100000000;
  uint64_t CopyPass = CFX::RG::makeCopyPass(a1, (uint64_t)"Copy", &v12);
  *(void *)(a4 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)a4 = CopyPass;
  *(void *)(a4 + 8) = v8;
  return result;
}

void sub_1B6562258(_Unwind_Exception *a1)
{
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc((id *)(v1 - 240));
  _Unwind_Resume(a1);
}

uint64_t sub_1B656226C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1B6562274(uint64_t a1)
{
  prof_beginFlame((uint64_t)"Get drawable", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/RenderGraphLibrary.mm", 276);
  uint64_t v9 = (void *)sub_1B6445900(*(void *)(a1 + 32), v2, v3, v4, v5, v6, v7, v8);
  uint64_t v13 = objc_msgSend__finalRenderTexture(v9, v10, v11, v12);
  prof_endFlame();
  return v13;
}

void sub_1B65622C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1B65622D4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x178u, 8u);
  return CFX::RG::RegisterResourcePass::RegisterResourcePass(v8, *a3, a3[1], *a4, *a5);
}

uint64_t sub_1B6562334()
{
  if (qword_1E9DDB5E0 != -1) {
    dispatch_once(&qword_1E9DDB5E0, &unk_1F0FB5DA8);
  }
  return qword_1E9DDB5D8;
}

void sub_1B6562378()
{
  if (!qword_1E9DDB5D8)
  {
    qword_1E9DDB5D8 = sub_1B63C8D10(&qword_1E9DDB5D8);
    qword_1EB9757B0 = (uint64_t)sub_1B6562DB8;
  }
}

uint64_t sub_1B65623D0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2 || a1 && !sub_1B63CA534(a1, a2, a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  if (qword_1E9DDB5E0 != -1) {
    dispatch_once(&qword_1E9DDB5E0, &unk_1F0FB5DA8);
  }
  uint64_t v10 = sub_1B63C8D44(qword_1E9DDB5D8, 0x18uLL);
  uint64_t v18 = v10;
  *(unsigned char *)(v10 + 18) = 0;
  *(_WORD *)(v10 + 16) = a1;
  *(void *)(v10 + 32) = a2;
  if (a1)
  {
    size_t v19 = sub_1B6562484(v10, v11, v12, v13, v14, v15, v16, v17);
    *(void *)(v18 + 24) = malloc_type_calloc(v19, 1uLL, 0x10AF9C92uLL);
  }
  return v18;
}

uint64_t sub_1B6562484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  }
  return *(void *)(a1 + 32) * sub_1B63CA534(*(__int16 *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B65624DC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_1B65623D0(a1, 1, a3, a4, a5, a6, a7, a8);
  uint64_t v16 = v9;
  if (a1 == 10)
  {
    if (!v9) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v10, v11, v12, v13, v14, v15, (uint64_t)"value");
    }
    uint64_t v17 = *(_OWORD **)(v16 + 24);
    *uint64_t v17 = xmmword_1B6E4F300;
    v17[1] = xmmword_1B6E4F320;
    v17[2] = xmmword_1B6E4F2E0;
    v17[3] = xmmword_1B6E4F370;
  }
  return v16;
}

uint64_t sub_1B6562568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  }
  return *(void *)(a1 + 24);
}

uint64_t sub_1B65625B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  }
  return *(__int16 *)(a1 + 16);
}

uint64_t sub_1B6562600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  }
  return *(char *)(a1 + 18);
}

CFTypeRef sub_1B656264C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  }
  if (*(unsigned char *)(a1 + 18) == 1)
  {
    uint64_t v10 = *(CFTypeRef **)(a1 + 24);
    if (*v10)
    {
      CFRelease(*v10);
      *uint64_t v10 = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *uint64_t v10 = result;
  }
  else
  {
    size_t v12 = sub_1B6562484(a1, (uint64_t)cf, a3, a4, a5, a6, a7, a8);
    uint64_t v13 = *(void **)(a1 + 24);
    return memcpy(v13, cf, v12);
  }
  return result;
}

size_t sub_1B6562704(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v16 = sub_1B6562484(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v10, v11, v12, v13, v14, v15, (uint64_t)"value");
  }
  memcpy(a2, *(const void **)(a1 + 24), v16);
  return v16;
}

void sub_1B6562774(const char *a1, int *a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = sub_1B63CB55C(a1);
    if (a3 >= 1)
    {
      uint64_t v6 = v5;
      uint64_t v7 = 0;
      uint64_t v8 = MEMORY[0x1E4F14390];
      while (1)
      {
        uint64_t v17 = 0;
        *(float *)&int v9 = strtod(v6, &v17);
        a2[v7] = v9;
        if (v6 == v17) {
          break;
        }
        uint64_t v10 = v17 - 1;
        do
        {
          unsigned int v11 = v10[1];
          if ((v11 & 0x80000000) != 0) {
            int v12 = __maskrune(v10[1], 0x4000uLL);
          }
          else {
            int v12 = *(_DWORD *)(v8 + 4 * v11 + 60) & 0x4000;
          }
          ++v10;
        }
        while (v12);
        if (v11 == 44) {
          uint64_t v6 = v10 + 1;
        }
        else {
          uint64_t v6 = v10;
        }
        if (++v7 == a3) {
          return;
        }
      }
      if (v7 == 1 && a3 >= 2)
      {
        int v14 = *a2;
        uint64_t v13 = a2 + 1;
        int v15 = v14;
        uint64_t v16 = a3 - 1;
        do
        {
          *v13++ = v15;
          --v16;
        }
        while (v16);
      }
    }
  }
}

char *sub_1B6562870(char *result, uint64_t a2, int a3)
{
  if (!a3) {
    return result;
  }
  CFTypeRef result = (char *)sub_1B63CB55C(result);
  uint64_t v10 = result;
  if (a3 < 1) {
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a3;
  uint64_t v7 = MEMORY[0x1E4F14390];
  do
  {
    *(double *)(a2 + 8 * v5) = strtod(v10, &v10);
    for (CFIndex i = v10 + 1; ; ++i)
    {
      unsigned int v9 = *(i - 1);
      if ((v9 & 0x80000000) != 0) {
        break;
      }
      CFTypeRef result = (char *)(*(_DWORD *)(v7 + 4 * v9 + 60) & 0x4000);
      if (!result) {
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v10 = i;
    }
    CFTypeRef result = (char *)__maskrune(*(i - 1), 0x4000uLL);
    if (result) {
      goto LABEL_9;
    }
LABEL_10:
    if (v9 == 44) {
      uint64_t v10 = i;
    }
    ++v5;
  }
  while (v5 != v6);
  return result;
}

CFStringRef sub_1B656293C(const __CFString *a1, const __CFString *a2)
{
  CFRange v3 = CFStringFind(a1, a2, 0);
  if (v3.location == -1) {
    return 0;
  }
  v4.length = CFStringGetLength(a1) - (v3.location + v3.length);
  if (v4.length < 1) {
    return 0;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  v4.location = v3.location + v3.length;
  return CFStringCreateWithSubstring(v5, a1, v4);
}

uint64_t sub_1B65629C8(uint64_t a1, CFStringRef str, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  }
  int v10 = *(__int16 *)(a1 + 16) - 1;
  uint64_t v11 = *(void *)(a1 + 24);
  switch(v10)
  {
    case 0:
      float DoubleValue = CFStringGetDoubleValue(str);
      *(float *)uint64_t v11 = DoubleValue;
      goto LABEL_22;
    case 1:
      *(_DWORD *)uint64_t v11 = CFStringGetIntValue(str);
      goto LABEL_22;
    case 2:
      if (CFStringCompare(str, @"true", 0))
      {
        BOOL v13 = 1;
      }
      else if (CFStringCompare(str, @"false", 0))
      {
        BOOL v13 = 0;
      }
      else
      {
        BOOL v13 = CFStringGetIntValue(str) != 0;
      }
      *(unsigned char *)uint64_t v11 = v13;
      goto LABEL_22;
    case 6:
      uint64_t v15 = 0;
      *(void *)&long long v22 = 0;
      uint64_t v16 = (const char *)sub_1B656293C(str, @"vec2(");
      if (v16)
      {
        uint64_t v17 = v16;
        sub_1B6562774(v16, (int *)&v22, 2);
        CFRelease(v17);
        uint64_t v15 = v22;
      }
      *(void *)uint64_t v11 = v15;
      goto LABEL_22;
    case 7:
      long long v22 = 0uLL;
      uint64_t v18 = (const char *)sub_1B656293C(str, @"vec3(");
      if (v18)
      {
        size_t v19 = v18;
        sub_1B6562774(v18, (int *)&v22, 3);
        CFRelease(v19);
      }
      *(void *)uint64_t v11 = v22;
      *(_DWORD *)(v11 + 8) = DWORD2(v22);
      goto LABEL_22;
    case 8:
      long long v22 = 0uLL;
      uint64_t v20 = (const char *)sub_1B656293C(str, @"vec4(");
      if (v20)
      {
        long long v21 = v20;
        sub_1B6562774(v20, (int *)&v22, 4);
        CFRelease(v21);
      }
      *(_OWORD *)uint64_t v11 = v22;
LABEL_22:
      uint64_t result = 1;
      break;
    default:
      sub_1B63F2F54(17, @"Assertion '%s' failed. string to type conversion not supported", a3, a4, a5, a6, a7, a8, (uint64_t)"0");
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1B6562BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"a");
    if (a2)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
LABEL_18:
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"output");
      if (a1) {
        goto LABEL_5;
      }
      goto LABEL_19;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"b");
  if (!a3) {
    goto LABEL_18;
  }
LABEL_4:
  if (a1) {
    goto LABEL_5;
  }
LABEL_19:
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
LABEL_5:
  int v12 = *(unsigned __int16 *)(a1 + 16);
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  }
  if (v12 != *(unsigned __int16 *)(a2 + 16)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. CFXValueAdd - invalid arguments", a3, a4, a5, a6, a7, a8, (uint64_t)"type == CFXValueGetType(b)");
  }
  if (!a3) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  }
  if (v12 != *(unsigned __int16 *)(a3 + 16)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. CFXValueAdd - invalid arguments", a3, a4, a5, a6, a7, a8, (uint64_t)"type == CFXValueGetType(output)");
  }
  BOOL v13 = *(_OWORD **)(a1 + 24);
  int v14 = *(float32x4_t **)(a2 + 24);
  uint64_t v15 = *(_OWORD **)(a3 + 24);

  sub_1B63CB1C0((__int16)v12, v13, v14, v15, a5, a6, a7, a8, a9);
}

void sub_1B6562D54(uint64_t a1)
{
}

CFStringRef sub_1B6562D60(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  int v10 = sub_1B63CA8A4(*(__int16 *)(a1 + 16), v3, v4, v5, v6, v7, v8, v9);
  return CFStringCreateWithFormat(v2, 0, @"<CFXValue %p - %@ ptr:%p >", a1, v10, *(void *)(a1 + 24));
}

__CFArray *sub_1B6562DB8(uint64_t a1)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v18 = 0;
  int valuePtr = 2;
  uint64_t v17 = a1 + 16;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v18);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &v17);
  CFDictionarySetValue(v3, @"name", @"baseType");
  CFDictionarySetValue(v3, @"type", v4);
  CFDictionarySetValue(v3, @"address", v6);
  CFDictionarySetValue(v3, @"semantic", v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  uint64_t v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v18 = 0;
  int valuePtr = 2;
  uint64_t v17 = a1 + 32;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v18);
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberLongType, &v17);
  CFDictionarySetValue(v7, @"name", @"count");
  CFDictionarySetValue(v7, @"type", v8);
  CFDictionarySetValue(v7, @"address", v10);
  CFDictionarySetValue(v7, @"semantic", v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  uint64_t v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v12 = *(__int16 *)(a1 + 16);
  int v18 = 0;
  int valuePtr = v12;
  uint64_t v17 = *(void *)(a1 + 24);
  CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v18);
  CFNumberRef v15 = CFNumberCreate(0, kCFNumberLongType, &v17);
  CFDictionarySetValue(v11, @"name", @"value");
  CFDictionarySetValue(v11, @"type", v13);
  CFDictionarySetValue(v11, @"address", v15);
  CFDictionarySetValue(v11, @"semantic", v14);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v14);
  CFRelease(v11);
  CFRelease(v15);
  CFRelease(v13);
  return Mutable;
}

CFStringRef sub_1B65636B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v12 = *(const __CFString **)(a1 + 40);

  return sub_1B65834BC(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B6563ABC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
  if ((sub_1B65005BC(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 40));
    objc_msgSend_removeObjectForKey_(*(void **)(*(void *)(a1 + 40) + 48), v10, *(void *)(a1 + 48), v11);
    CFStringRef v12 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 40);
    os_unfair_lock_unlock(v12);
  }
}

void sub_1B6563CD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6563D98(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6563E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6563F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6564498(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v24 = objc_alloc_init(CFXBinding);
  uint64_t v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(void *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(void *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(void *)(a1 + 64), v17);
  sub_1B65844C0(v5, v24, v18, v19, v20, v21, v22, v23);
}

void sub_1B65645F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v12 = *(const __CFString **)(a1 + 40);

  sub_1B6584728(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B65646D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFNumberRef v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);

  sub_1B658469C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void *sub_1B6564BF0(void *a1, const char *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v13 = 0;
  uint64_t v8 = objc_msgSend_newLibraryWithSource_options_error_(a1, a2, a3, a4, &v13);
  id v9 = v13;
  uint64_t v10 = v9;
  if (v8)
  {
    if (*a5) {
      *a5 = v9;
    }
    id v11 = v8;
  }
  else if (a6)
  {
    *a6 = v9;
  }

  return v8;
}

void sub_1B6564E18(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3)
  {
    CFRelease(v3);
    a1[2] = 0;
  }
  CFNumberRef v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
}

void sub_1B6564E68()
{
  if (!qword_1E9DDB5E8)
  {
    qword_1E9DDB5E8 = sub_1B63C8D10(&qword_1E9DDB5E8);
    qword_1EB974F40 = (uint64_t)sub_1B65650E4;
  }
}

uint64_t sub_1B6564EC0()
{
  if (qword_1E9DDB5F0 != -1) {
    dispatch_once(&qword_1E9DDB5F0, &unk_1F0FB5DC8);
  }
  CFTypeID v0 = qword_1E9DDB5E8;

  return sub_1B63C8D44(v0, 0x18uLL);
}

uint64_t sub_1B6564F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"sampler");
  }
  return *(void *)(a1 + 16);
}

CFTypeRef sub_1B6564F64(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"sampler");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 24);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 24) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 24) = result;
  }
  return result;
}

uint64_t sub_1B6564FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"sampler");
  }
  return *(void *)(a1 + 24);
}

uint64_t sub_1B656502C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"sampler");
  }
  return *(void *)(a1 + 32);
}

CFStringRef sub_1B656507C(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXFXSampler>");
}

CFStringRef sub_1B65650B0(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXFXSampler>");
}

__CFArray *sub_1B65650E4(uint64_t a1)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v13 = 2;
  int valuePtr = 5;
  uint64_t v12 = a1 + 16;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v13);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &v12);
  CFDictionarySetValue(v3, @"name", @"sampler");
  CFDictionarySetValue(v3, @"type", v4);
  CFDictionarySetValue(v3, @"address", v6);
  CFDictionarySetValue(v3, @"semantic", v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  uint64_t v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v13 = 2;
  int valuePtr = 5;
  uint64_t v12 = a1 + 24;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v13);
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberLongType, &v12);
  CFDictionarySetValue(v7, @"name", @"image");
  CFDictionarySetValue(v7, @"type", v8);
  CFDictionarySetValue(v7, @"address", v10);
  CFDictionarySetValue(v7, @"semantic", v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  return Mutable;
}

uint64_t sub_1B656544C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = objc_msgSend_nodeRef(*(void **)(a1 + 40), a2, a3, a4);
  uint64_t v10 = objc_msgSend_nodeRef(*(void **)(a1 + 48), v7, v8, v9);

  return MEMORY[0x1F4181798](v5, sel_initParametersIfNeededWithDrivingNodeRef_deformedNodeRef_, v6, v10);
}

uint64_t sub_1B65655B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = objc_msgSend_nodeRef(*(void **)(a1 + 40), a2, a3, a4);
  uint64_t v10 = objc_msgSend_nodeRef(*(void **)(a1 + 48), v7, v8, v9);
  objc_msgSend_nodeRef(*(void **)(a1 + 56), v11, v12, v13);

  return MEMORY[0x1F4181798](v5, sel_initParametersIfNeededWithInnerLayerNodeRef_outerLayerNodeRef_deformedNodeRef_, v6, v10);
}

unsigned char *sub_1B65669B0(void *a1, void *a2, void *a3, void *a4, uint64_t a5, int a6, void *a7)
{
  if (!a1) {
    return 0;
  }
  v79.receiver = a1;
  v79.super_class = (Class)VFXModelWrapDeformerInstance;
  CFNumberRef v14 = objc_msgSendSuper2(&v79, sel_init);
  if (v14)
  {
    objc_msgSend_initParametersIfNeededForDeformedNode_(a4, v12, (uint64_t)a2, v13);
    uint64_t v15 = a4[3];
    v14[256] = 1;
    *((void *)v14 + 1) = *(void *)(v15 + 16);
    *((void *)v14 + 44) = objc_msgSend_nodeRef(a3, v16, v17, v18);
    *((void *)v14 + 22) = objc_msgSend_nodeRef(a2, v19, v20, v21);
    *((_DWORD *)v14 + 68) = a6;
    unint64_t v22 = *(void *)(v15 + 32);
    unint64_t v23 = *(void *)(v15 + 56);
    long long v27 = objc_msgSend_device(a7, v24, v25, v26);
    if (sub_1B64D9854(v27, v28, v29, v30))
    {
      unint64_t v22 = (*(void *)(v15 + 32) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v23 = (*(void *)(v15 + 56) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    v77[0] = MEMORY[0x1E4F143A8];
    v77[1] = 3221225472;
    v77[2] = sub_1B6567084;
    v77[3] = &unk_1E61445A0;
    v77[4] = a7;
    v77[5] = v15;
    v77[7] = v22;
    v77[8] = v23;
    v77[6] = v14;
    long long v78 = xmmword_1B6E722B0;
    uint64_t v31 = *((void *)v14 + 1);
    long long v32 = @"deformer_wrap_legacy_relative";
    if (v31 != 1) {
      long long v32 = 0;
    }
    if (v31) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = @"deformer_wrap_legacy_absolute";
    }
    id v34 = objc_alloc_init(MEMORY[0x1E4F35310]);
    uint64_t v38 = objc_msgSend__currentResourceManager(a7, v35, v36, v37);
    *((void *)v14 + 24) = (id)objc_msgSend_computePipelineStateForKernel_withStageDescriptor_stageDescriptorUpdateBlock_constants_constantsHash_(v38, v39, (uint64_t)v33, (uint64_t)v34, v77, 0, 0);

    if (v22 == *(void *)(v15 + 32))
    {
      uint64_t v43 = objc_msgSend_device(a7, v40, v41, v42);
      uint64_t v45 = objc_msgSend_newBufferWithBytes_length_options_(v43, v44, *(void *)(v15 + 24), *(void *)(v15 + 32) * *(unsigned int *)(v15 + 8), 0);
      uint64_t v49 = 0;
    }
    else
    {
      size_t v50 = v22 * *(unsigned int *)(v15 + 8);
      uint64_t v51 = (char *)malloc_type_realloc(0, v50, 0xB79CB148uLL);
      uint64_t v49 = v51;
      if (*(_DWORD *)(v15 + 8))
      {
        unint64_t v55 = 0;
        uint64_t v56 = v51;
        do
        {
          memcpy(v56, (const void *)(*(void *)(v15 + 24) + *(void *)(v15 + 32) * v55++), *(void *)(v15 + 32));
          v56 += v22;
        }
        while (v55 < *(unsigned int *)(v15 + 8));
      }
      uint64_t v57 = objc_msgSend_device(a7, v52, v53, v54);
      uint64_t v45 = objc_msgSend_newBufferWithBytes_length_options_(v57, v58, (uint64_t)v49, v50, 0);
    }
    *((void *)v14 + 25) = v45;
    if (v23 == *(void *)(v15 + 56))
    {
      uint64_t v59 = objc_msgSend_device(a7, v46, v47, v48);
      uint64_t v61 = objc_msgSend_newBufferWithBytes_length_options_(v59, v60, *(void *)(v15 + 48), *(void *)(v15 + 56) * *(unsigned int *)(v15 + 8), 0);
    }
    else
    {
      size_t v65 = v23 * *(unsigned int *)(v15 + 8);
      uint64_t v66 = (char *)malloc_type_realloc(v49, v65, 0x768E44ABuLL);
      uint64_t v49 = v66;
      if (*(_DWORD *)(v15 + 8))
      {
        unint64_t v70 = 0;
        uint64_t v71 = v66;
        do
        {
          memcpy(v71, (const void *)(*(void *)(v15 + 48) + *(void *)(v15 + 56) * v70++), *(void *)(v15 + 56));
          v71 += v23;
        }
        while (v70 < *(unsigned int *)(v15 + 8));
      }
      uint64_t v72 = objc_msgSend_device(a7, v67, v68, v69);
      uint64_t v61 = objc_msgSend_newBufferWithBytes_length_options_(v72, v73, (uint64_t)v49, v65, 0);
    }
    *((void *)v14 + 26) = v61;
    uint64_t v74 = objc_msgSend_device(a7, v62, v63, v64);
    *((void *)v14 + 45) = objc_msgSend_newBufferWithBytes_length_options_(v74, v75, *(void *)(v15 + 136), *(void *)(v15 + 144), 0);
    free(v49);
  }
  return v14;
}

void *sub_1B6566CD8(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, int a7, void *a8)
{
  if (!a1) {
    return 0;
  }
  v113.receiver = a1;
  v113.super_class = (Class)VFXModelWrapDeformerInstance;
  uint64_t v16 = objc_msgSendSuper2(&v113, sel_init);
  if (v16)
  {
    objc_msgSend_initParametersIfNeededForDeformedNode_(a5, v14, (uint64_t)a2, v15);
    uint64_t v17 = a5[3];
    v16[1] = *(void *)(v17 + 16);
    v16[20] = objc_msgSend_nodeRef(a3, v18, v19, v20);
    v16[21] = objc_msgSend_nodeRef(a4, v21, v22, v23);
    v16[22] = objc_msgSend_nodeRef(a2, v24, v25, v26);
    *((_DWORD *)v16 + 4) = a7;
    unint64_t v27 = *(void *)(v17 + 32);
    unint64_t v28 = *(void *)(v17 + 56);
    long long v32 = objc_msgSend_device(a8, v29, v30, v31);
    if (sub_1B64D9854(v32, v33, v34, v35))
    {
      unint64_t v27 = (*(void *)(v17 + 32) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v28 = (*(void *)(v17 + 56) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    uint64_t v102 = MEMORY[0x1E4F143A8];
    uint64_t v103 = 3221225472;
    uint64_t v104 = sub_1B65672AC;
    uint64_t v105 = &unk_1E61445C8;
    uint64_t v106 = a8;
    uint64_t v107 = v17;
    unint64_t v109 = v27;
    unint64_t v110 = v28;
    uint64_t v108 = v16;
    long long v111 = xmmword_1B6E722C0;
    uint64_t v112 = 36;
    uint64_t v36 = v16[1];
    uint64_t v37 = @"deformer_wrap_relative";
    if (v36 != 1) {
      uint64_t v37 = 0;
    }
    if (v36) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = @"deformer_wrap_absolute";
    }
    id v39 = objc_alloc_init(MEMORY[0x1E4F35310]);
    uint64_t v43 = objc_msgSend__currentResourceManager(a8, v40, v41, v42, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112);
    id v16[24] = (id)objc_msgSend_computePipelineStateForKernel_withStageDescriptor_stageDescriptorUpdateBlock_constants_constantsHash_(v43, v44, (uint64_t)v38, (uint64_t)v39, &v102, 0, 0);

    if (v27 == *(void *)(v17 + 32))
    {
      uint64_t v48 = objc_msgSend_device(a8, v45, v46, v47);
      uint64_t v50 = objc_msgSend_newBufferWithBytes_length_options_(v48, v49, *(void *)(v17 + 24), *(void *)(v17 + 32) * *(unsigned int *)(v17 + 8), 0);
      uint64_t v54 = 0;
    }
    else
    {
      size_t v55 = v27 * *(unsigned int *)(v17 + 8);
      uint64_t v56 = (char *)malloc_type_realloc(0, v55, 0x2EFE224FuLL);
      uint64_t v54 = v56;
      if (*(_DWORD *)(v17 + 8))
      {
        unint64_t v60 = 0;
        uint64_t v61 = v56;
        do
        {
          memcpy(v61, (const void *)(*(void *)(v17 + 24) + *(void *)(v17 + 32) * v60++), *(void *)(v17 + 32));
          v61 += v27;
        }
        while (v60 < *(unsigned int *)(v17 + 8));
      }
      uint64_t v62 = objc_msgSend_device(a8, v57, v58, v59);
      uint64_t v50 = objc_msgSend_newBufferWithBytes_length_options_(v62, v63, (uint64_t)v54, v55, 0);
    }
    v16[25] = v50;
    if (v28 == *(void *)(v17 + 56))
    {
      uint64_t v64 = objc_msgSend_device(a8, v51, v52, v53);
      uint64_t v66 = objc_msgSend_newBufferWithBytes_length_options_(v64, v65, *(void *)(v17 + 48), *(void *)(v17 + 56) * *(unsigned int *)(v17 + 8), 0);
    }
    else
    {
      size_t v70 = v28 * *(unsigned int *)(v17 + 8);
      uint64_t v71 = (char *)malloc_type_realloc(v54, v70, 0x2CECB42AuLL);
      uint64_t v54 = v71;
      if (*(_DWORD *)(v17 + 8))
      {
        unint64_t v75 = 0;
        uint64_t v76 = v71;
        do
        {
          memcpy(v76, (const void *)(*(void *)(v17 + 48) + *(void *)(v17 + 56) * v75++), *(void *)(v17 + 56));
          v76 += v28;
        }
        while (v75 < *(unsigned int *)(v17 + 8));
      }
      uint64_t v77 = objc_msgSend_device(a8, v72, v73, v74);
      uint64_t v66 = objc_msgSend_newBufferWithBytes_length_options_(v77, v78, (uint64_t)v54, v70, 0);
    }
    v16[26] = v66;
    objc_super v79 = objc_msgSend_device(a8, v67, v68, v69);
    v16[27] = objc_msgSend_newBufferWithBytes_length_options_(v79, v80, *(void *)(v17 + 72), *(void *)(v17 + 80), 0);
    if (v16[1] == 1)
    {
      uint64_t v84 = objc_msgSend_device(a8, v81, v82, v83);
      v16[28] = objc_msgSend_newBufferWithBytes_length_options_(v84, v85, *(void *)(v17 + 88), *(void *)(v17 + 104), 0);
      uint64_t v89 = objc_msgSend_device(a8, v86, v87, v88);
      v16[29] = objc_msgSend_newBufferWithBytes_length_options_(v89, v90, *(void *)(v17 + 96), *(void *)(v17 + 104), 0);
      long long v94 = objc_msgSend_device(a8, v91, v92, v93);
      v16[30] = objc_msgSend_newBufferWithBytes_length_options_(v94, v95, *(void *)(v17 + 112), *(void *)(v17 + 128), 0);
      uint64_t v99 = objc_msgSend_device(a8, v96, v97, v98);
      v16[31] = objc_msgSend_newBufferWithBytes_length_options_(v99, v100, *(void *)(v17 + 120), *(void *)(v17 + 128), 0);
    }
    free(v54);
  }
  return v16;
}

uint64_t sub_1B6567084(uint64_t a1, const char *a2, void *a3)
{
  objc_msgSend_configureStageInputOutputDescriptor_withDeformerFunction_(*(void **)(a1 + 32), a2, (uint64_t)a3, (uint64_t)a2);
  uint64_t v8 = objc_msgSend_attributes(a3, v5, v6, v7);
  id v11 = objc_msgSend_objectAtIndexedSubscript_(v8, v9, 6, v10);
  objc_msgSend_setFormat_(v11, v12, *(void *)(*(void *)(a1 + 40) + 40), v13);
  objc_msgSend_setOffset_(v11, v14, 0, v15);
  objc_msgSend_setBufferIndex_(v11, v16, 3, v17);
  uint64_t v21 = objc_msgSend_layouts(a3, v18, v19, v20);
  uint64_t v24 = objc_msgSend_objectAtIndexedSubscript_(v21, v22, 3, v23);
  objc_msgSend_setStepFunction_(v24, v25, 5, v26);
  objc_msgSend_setStride_(v24, v27, *(void *)(a1 + 56), v28);
  long long v32 = objc_msgSend_attributes(a3, v29, v30, v31);
  uint64_t v35 = objc_msgSend_objectAtIndexedSubscript_(v32, v33, 7, v34);
  objc_msgSend_setFormat_(v35, v36, *(void *)(*(void *)(a1 + 40) + 64), v37);
  objc_msgSend_setOffset_(v35, v38, 0, v39);
  objc_msgSend_setBufferIndex_(v35, v40, 4, v41);
  uint64_t v45 = objc_msgSend_layouts(a3, v42, v43, v44);
  uint64_t v48 = objc_msgSend_objectAtIndexedSubscript_(v45, v46, 4, v47);
  objc_msgSend_setStepFunction_(v48, v49, 5, v50);
  objc_msgSend_setStride_(v48, v51, *(void *)(a1 + 64), v52);
  uint64_t v53 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v57 = objc_msgSend_attributes(a3, v54, v55, v56);
  if (v53)
  {
    unint64_t v60 = objc_msgSend_objectAtIndexedSubscript_(v57, v58, 11, v59);
    objc_msgSend_setFormat_(v60, v61, 31, v62);
    objc_msgSend_setOffset_(v60, v63, 0, v64);
    objc_msgSend_setBufferIndex_(v60, v65, 6, v66);
    size_t v70 = objc_msgSend_attributes(a3, v67, v68, v69);
    uint64_t v73 = objc_msgSend_objectAtIndexedSubscript_(v70, v71, 12, v72);
    objc_msgSend_setFormat_(v73, v74, 31, v75);
    objc_msgSend_setOffset_(v73, v76, 16, v77);
    objc_msgSend_setBufferIndex_(v73, v78, 6, v79);
    uint64_t v83 = objc_msgSend_attributes(a3, v80, v81, v82);
    uint64_t v86 = objc_msgSend_objectAtIndexedSubscript_(v83, v84, 13, v85);
    objc_msgSend_setFormat_(v86, v87, 31, v88);
    objc_msgSend_setOffset_(v86, v89, 32, v90);
    objc_msgSend_setBufferIndex_(v86, v91, 6, v92);
    unsigned int v96 = objc_msgSend_layouts(a3, v93, v94, v95);
    uint64_t v99 = objc_msgSend_objectAtIndexedSubscript_(v96, v97, 6, v98);
    objc_msgSend_setStepFunction_(v99, v100, 5, v101);
    uint64_t v104 = (uint64_t *)(a1 + 80);
  }
  else
  {
    uint64_t v105 = objc_msgSend_objectAtIndexedSubscript_(v57, v58, 9, v59);
    objc_msgSend_setFormat_(v105, v106, 30, v107);
    objc_msgSend_setOffset_(v105, v108, 0, v109);
    objc_msgSend_setBufferIndex_(v105, v110, 6, v111);
    uint64_t v115 = objc_msgSend_layouts(a3, v112, v113, v114);
    uint64_t v99 = objc_msgSend_objectAtIndexedSubscript_(v115, v116, 6, v117);
    objc_msgSend_setStepFunction_(v99, v118, 5, v119);
    uint64_t v104 = (uint64_t *)(a1 + 72);
  }
  uint64_t v120 = *v104;

  return objc_msgSend_setStride_(v99, v102, v120, v103);
}

uint64_t sub_1B65672AC(uint64_t a1, const char *a2, void *a3)
{
  objc_msgSend_configureStageInputOutputDescriptor_withDeformerFunction_(*(void **)(a1 + 32), a2, (uint64_t)a3, (uint64_t)a2);
  uint64_t v8 = objc_msgSend_attributes(a3, v5, v6, v7);
  id v11 = objc_msgSend_objectAtIndexedSubscript_(v8, v9, 6, v10);
  objc_msgSend_setFormat_(v11, v12, *(void *)(*(void *)(a1 + 40) + 40), v13);
  objc_msgSend_setOffset_(v11, v14, 0, v15);
  objc_msgSend_setBufferIndex_(v11, v16, 3, v17);
  uint64_t v21 = objc_msgSend_layouts(a3, v18, v19, v20);
  uint64_t v24 = objc_msgSend_objectAtIndexedSubscript_(v21, v22, 3, v23);
  objc_msgSend_setStepFunction_(v24, v25, 5, v26);
  objc_msgSend_setStride_(v24, v27, *(void *)(a1 + 56), v28);
  long long v32 = objc_msgSend_attributes(a3, v29, v30, v31);
  uint64_t v35 = objc_msgSend_objectAtIndexedSubscript_(v32, v33, 7, v34);
  objc_msgSend_setFormat_(v35, v36, *(void *)(*(void *)(a1 + 40) + 64), v37);
  objc_msgSend_setOffset_(v35, v38, 0, v39);
  objc_msgSend_setBufferIndex_(v35, v40, 4, v41);
  uint64_t v45 = objc_msgSend_layouts(a3, v42, v43, v44);
  uint64_t v48 = objc_msgSend_objectAtIndexedSubscript_(v45, v46, 4, v47);
  objc_msgSend_setStepFunction_(v48, v49, 5, v50);
  objc_msgSend_setStride_(v48, v51, *(void *)(a1 + 64), v52);
  uint64_t v56 = objc_msgSend_attributes(a3, v53, v54, v55);
  uint64_t v59 = objc_msgSend_objectAtIndexedSubscript_(v56, v57, 8, v58);
  objc_msgSend_setFormat_(v59, v60, 28, v61);
  objc_msgSend_setOffset_(v59, v62, 0, v63);
  objc_msgSend_setBufferIndex_(v59, v64, 5, v65);
  uint64_t v69 = objc_msgSend_layouts(a3, v66, v67, v68);
  uint64_t v72 = objc_msgSend_objectAtIndexedSubscript_(v69, v70, 5, v71);
  objc_msgSend_setStepFunction_(v72, v73, 5, v74);
  uint64_t result = objc_msgSend_setStride_(v72, v75, *(void *)(a1 + 72), v76);
  if (*(void *)(*(void *)(a1 + 48) + 8) == 1)
  {
    uint64_t v81 = objc_msgSend_attributes(a3, v78, v79, v80);
    uint64_t v84 = objc_msgSend_objectAtIndexedSubscript_(v81, v82, 9, v83);
    objc_msgSend_setFormat_(v84, v85, 30, v86);
    objc_msgSend_setOffset_(v84, v87, 0, v88);
    objc_msgSend_setBufferIndex_(v84, v89, 6, v90);
    uint64_t v94 = objc_msgSend_layouts(a3, v91, v92, v93);
    uint64_t v97 = objc_msgSend_objectAtIndexedSubscript_(v94, v95, 6, v96);
    objc_msgSend_setStepFunction_(v97, v98, 5, v99);
    objc_msgSend_setStride_(v97, v100, *(void *)(a1 + 80), v101);
    uint64_t v105 = objc_msgSend_attributes(a3, v102, v103, v104);
    uint64_t v108 = objc_msgSend_objectAtIndexedSubscript_(v105, v106, 10, v107);
    objc_msgSend_setFormat_(v108, v109, 30, v110);
    objc_msgSend_setOffset_(v108, v111, 0, v112);
    objc_msgSend_setBufferIndex_(v108, v113, 7, v114);
    uint64_t v118 = objc_msgSend_layouts(a3, v115, v116, v117);
    id v121 = objc_msgSend_objectAtIndexedSubscript_(v118, v119, 7, v120);
    objc_msgSend_setStepFunction_(v121, v122, 5, v123);
    objc_msgSend_setStride_(v121, v124, *(void *)(a1 + 80), v125);
    uint64_t v129 = objc_msgSend_attributes(a3, v126, v127, v128);
    uint64_t v132 = objc_msgSend_objectAtIndexedSubscript_(v129, v130, 11, v131);
    objc_msgSend_setFormat_(v132, v133, 30, v134);
    objc_msgSend_setOffset_(v132, v135, 0, v136);
    objc_msgSend_setBufferIndex_(v132, v137, 8, v138);
    simd_float4x4 v142 = objc_msgSend_attributes(a3, v139, v140, v141);
    long long v145 = objc_msgSend_objectAtIndexedSubscript_(v142, v143, 12, v144);
    objc_msgSend_setFormat_(v145, v146, 30, v147);
    objc_msgSend_setOffset_(v145, v148, 12, v149);
    objc_msgSend_setBufferIndex_(v145, v150, 8, v151);
    uint64_t v155 = objc_msgSend_attributes(a3, v152, v153, v154);
    uint64_t v158 = objc_msgSend_objectAtIndexedSubscript_(v155, v156, 13, v157);
    objc_msgSend_setFormat_(v158, v159, 30, v160);
    objc_msgSend_setOffset_(v158, v161, 24, v162);
    objc_msgSend_setBufferIndex_(v158, v163, 8, v164);
    long long v168 = objc_msgSend_layouts(a3, v165, v166, v167);
    v171 = objc_msgSend_objectAtIndexedSubscript_(v168, v169, 8, v170);
    objc_msgSend_setStepFunction_(v171, v172, 5, v173);
    objc_msgSend_setStride_(v171, v174, *(void *)(a1 + 88), v175);
    v179 = objc_msgSend_attributes(a3, v176, v177, v178);
    v182 = objc_msgSend_objectAtIndexedSubscript_(v179, v180, 14, v181);
    objc_msgSend_setFormat_(v182, v183, 30, v184);
    objc_msgSend_setOffset_(v182, v185, 0, v186);
    objc_msgSend_setBufferIndex_(v182, v187, 9, v188);
    v192 = objc_msgSend_attributes(a3, v189, v190, v191);
    v195 = objc_msgSend_objectAtIndexedSubscript_(v192, v193, 15, v194);
    objc_msgSend_setFormat_(v195, v196, 30, v197);
    objc_msgSend_setOffset_(v195, v198, 12, v199);
    objc_msgSend_setBufferIndex_(v195, v200, 9, v201);
    v205 = objc_msgSend_attributes(a3, v202, v203, v204);
    v208 = objc_msgSend_objectAtIndexedSubscript_(v205, v206, 16, v207);
    objc_msgSend_setFormat_(v208, v209, 30, v210);
    objc_msgSend_setOffset_(v208, v211, 24, v212);
    objc_msgSend_setBufferIndex_(v208, v213, 9, v214);
    v218 = objc_msgSend_layouts(a3, v215, v216, v217);
    v221 = objc_msgSend_objectAtIndexedSubscript_(v218, v219, 9, v220);
    objc_msgSend_setStepFunction_(v221, v222, 5, v223);
    uint64_t v226 = *(void *)(a1 + 88);
    return objc_msgSend_setStride_(v221, v224, v226, v225);
  }
  return result;
}

void sub_1B6567B18(uint64_t a1, __CFSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 != -1)
  {
    uint64_t v9 = sub_1B64AC5F8(a1, 3, a3, 1, a5, a6, a7, a8);
    if (v9)
    {
      CFSetSetValue(a2, v9);
    }
  }
}

uint64_t sub_1B6567B74(__n128 *a1, CFDictionaryRef theDict, int *a3, float *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!theDict
    || (CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"kWorldSourceConvertToYUpIfNeeded")) == 0)
  {
    BOOL v14 = 0;
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  BOOL v14 = CFBooleanGetValue(Value) != 0;
  if (a3) {
LABEL_6:
  }
    *a3 = 0;
LABEL_7:
  if (a4) {
    *a4 = 1.0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (v14)
  {
    v29.n128_u32[2] = 0;
    v29.n128_u64[0] = 0;
    sub_1B64B2438(a1, &v29, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    uint64_t v15 = v29.n128_f32[1] <= 0.0001;
    if (a3 && v29.n128_f32[1] <= 0.0001)
    {
      if (v29.n128_f32[0] <= 0.0001) {
        int v16 = 1;
      }
      else {
        int v16 = 2;
      }
      *a3 = v16;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  v29.n128_u32[0] = 0;
  if (theDict)
  {
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"kWorldSourceConvertToUnit");
    if (v17)
    {
      CFNumberGetValue(v17, kCFNumberFloatType, &v29);
      if (v29.n128_f32[0] != 0.0)
      {
        if (a5) {
          *a5 = v29.n128_u32[0];
        }
        float v25 = sub_1B64B23EC((uint64_t)a1, v18, v19, v20, v21, v22, v23, v24);
        if (v25 != 0.0 && v29.n128_f32[0] != 0.0)
        {
          float v26 = v25 / v29.n128_f32[0];
          double v27 = fabs(v26 + -1.0);
          if (v27 > 0.0001) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = v15;
          }
          if (a4 && v27 > 0.0001)
          {
            *a4 = v26;
            return 1;
          }
        }
      }
    }
  }
  return v15;
}

void sub_1B6567CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v983 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)a2;
  uint64_t v9 = (__n128 *)a1;
  uint64_t v10 = sub_1B64B1FBC(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10) {
    sub_1B64A18A4(v10, (uint64_t)&unk_1F0FB5DE8);
  }
  BOOL v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (v8)
  {
    CFBooleanRef Value = CFDictionaryGetValue(v8, @"kWorldSourceRemoveColorArrays");
    if (Value)
    {
      if (CFEqual(*v14, Value))
      {
        uint64_t v23 = sub_1B64B1FBC((uint64_t)v9, v16, v17, v18, v19, v20, v21, v22);
        if (v23)
        {
          CFArrayRef v29 = sub_1B64A2A88(v23, @"model", 0, v24, v25, v26, v27, v28);
          if (v29)
          {
            CFArrayRef v30 = v29;
            CFIndex Count = CFArrayGetCount(v29);
            if (Count >= 1)
            {
              CFIndex v32 = Count;
              for (CFIndex i = 0; i != v32; ++i)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v30, i);
                uint64_t v42 = sub_1B649F5F4((uint64_t)ValueAtIndex, v35, v36, v37, v38, v39, v40, v41);
                uint64_t v50 = sub_1B63CCE68(v42, v43, v44, v45, v46, v47, v48, v49);
                sub_1B64AC980(v50, 2, v51, v52, v53, v54, v55, v56);
              }
            }
            CFRelease(v30);
          }
        }
      }
    }
    uint64_t v57 = CFDictionaryGetValue(v8, @"kWorldSourceRemoveAllLights");
    if (v57)
    {
      if (CFEqual(*v14, v57))
      {
        uint64_t v65 = sub_1B64B1FBC((uint64_t)v9, v58, v59, v60, v61, v62, v63, v64);
        if (v65)
        {
          CFArrayRef v71 = sub_1B64A2A88(v65, @"kLightKey", 0, v66, v67, v68, v69, v70);
          if (v71)
          {
            CFArrayRef v72 = v71;
            CFIndex v73 = CFArrayGetCount(v71);
            if (v73 >= 1)
            {
              CFIndex v74 = v73;
              for (CFIndex j = 0; j != v74; ++j)
              {
                uint64_t v76 = CFArrayGetValueAtIndex(v72, j);
                sub_1B64A1D58(v76, v77, v78, v79, v80, v81, v82, v83);
              }
            }
            CFRelease(v72);
          }
        }
      }
    }
    uint64_t v84 = CFDictionaryGetValue(v8, @"kWorldSourceCleanupMeshes");
    if (v84)
    {
      if (CFEqual(*v14, v84))
      {
        uint64_t v92 = sub_1B64B1FBC((uint64_t)v9, v85, v86, v87, v88, v89, v90, v91);
        if (v92)
        {
          CFArrayRef v98 = sub_1B64A2A88(v92, @"model", 0, v93, v94, v95, v96, v97);
          if (v98)
          {
            CFArrayRef v99 = v98;
            CFIndex v949 = CFArrayGetCount(v98);
            if (v949 <= 0)
            {
              CFRelease(v99);
            }
            else
            {
              CFDictionaryRef v946 = v8;
              v947 = v9;
              CFIndex v100 = 0;
              CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFArrayRef v948 = v99;
              CFIndex v101 = v949;
              do
              {
                CFIndex v951 = v100;
                uint64_t v102 = CFArrayGetValueAtIndex(v99, v100);
                uint64_t v110 = sub_1B649F5F4((uint64_t)v102, v103, v104, v105, v106, v107, v108, v109);
                CFDictionaryRef v118 = sub_1B64A3D8C((uint64_t)v102, v111, v112, v113, v114, v115, v116, v117);
                uint64_t v126 = sub_1B64A16A0((uint64_t)v102, v119, v120, v121, v122, v123, v124, v125);
                uint64_t v134 = (void *)sub_1B63CCE68(v110, v127, v128, v129, v130, v131, v132, v133);
                simd_float4 v135 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
                theSet = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
                Mutable = CFSetCreateMutable(0, 0, v135);
                valuePtr.i32[0] = 0;
                if (v118)
                {
                  CFNumberRef v143 = (const __CFNumber *)CFDictionaryGetValue(v118, @"uv_set");
                  if (v143)
                  {
                    CFNumberGetValue(v143, kCFNumberIntType, &valuePtr);
                    unsigned __int32 v144 = valuePtr.i32[0];
                  }
                  else
                  {
                    unsigned __int32 v144 = 1;
                    valuePtr.i32[0] = 1;
                  }
                  unsigned __int32 v145 = sub_1B64AD020((uint64_t)v134, 3);
                  unsigned __int32 v152 = valuePtr.i32[0];
                  if (v144 >= v145)
                  {
                    sub_1B63F2F54(0, @"Warning: light_map uv_set:%d is pointing to an invalid uv_set(no corresponding source) and was reset to 1", v146, v147, v148, v149, v150, v151, valuePtr.u32[0]);
                    unsigned __int32 v152 = 1;
                    valuePtr.i32[0] = 1;
                  }
                  uint64_t v153 = sub_1B64AC5F8((uint64_t)v134, 3, v152, 0, v148, v149, v150, v151);
                  if (v153) {
                    CFSetSetValue(theSet, v153);
                  }
                }
                CFArrayRef v154 = sub_1B63CCEC4(v110, v136, v137, v138, v139, v140, v141, v142);
                if ((uint64_t)v154 >= 1)
                {
                  CFArrayRef v161 = v154;
                  for (uint64_t k = 0; (const __CFArray *)k != v161; ++k)
                  {
                    CFArrayRef v163 = sub_1B63CCF34(v110, k, v155, v156, v157, v158, v159, v160);
                    uint64_t v171 = sub_1B64AF43C((uint64_t)v163, v164, v165, v166, v167, v168, v169, v170);
                    if (v171)
                    {
                      uint64_t v172 = v171;
                      uint64_t v173 = sub_1B6476488(v171, 0, v155, v156, v157, v158, v159, v160);
                      sub_1B6567B18((uint64_t)v134, theSet, v173, v174, v175, v176, v177, v178);
                      uint64_t v185 = sub_1B6476488(v172, 1, v179, v180, v181, v182, v183, v184);
                      sub_1B6567B18((uint64_t)v134, theSet, v185, v186, v187, v188, v189, v190);
                      uint64_t v197 = sub_1B6476488(v172, 2, v191, v192, v193, v194, v195, v196);
                      sub_1B6567B18((uint64_t)v134, theSet, v197, v198, v199, v200, v201, v202);
                      uint64_t v209 = sub_1B6476488(v172, 4, v203, v204, v205, v206, v207, v208);
                      sub_1B6567B18((uint64_t)v134, theSet, v209, v210, v211, v212, v213, v214);
                      uint64_t v221 = sub_1B6476488(v172, 6, v215, v216, v217, v218, v219, v220);
                      sub_1B6567B18((uint64_t)v134, theSet, v221, v222, v223, v224, v225, v226);
                      uint64_t v233 = sub_1B6476488(v172, 7, v227, v228, v229, v230, v231, v232);
                      sub_1B6567B18((uint64_t)v134, theSet, v233, v234, v235, v236, v237, v238);
                      uint64_t v245 = sub_1B6476488(v172, 8, v239, v240, v241, v242, v243, v244);
                      sub_1B6567B18((uint64_t)v134, theSet, v245, v246, v247, v248, v249, v250);
                      uint64_t v257 = sub_1B6476488(v172, 9, v251, v252, v253, v254, v255, v256);
                      sub_1B6567B18((uint64_t)v134, theSet, v257, v258, v259, v260, v261, v262);
                      uint64_t v269 = sub_1B6476488(v172, 10, v263, v264, v265, v266, v267, v268);
                      sub_1B6567B18((uint64_t)v134, theSet, v269, v270, v271, v272, v273, v274);
                      uint64_t v281 = sub_1B6476488(v172, 11, v275, v276, v277, v278, v279, v280);
                      sub_1B6567B18((uint64_t)v134, theSet, v281, v282, v283, v284, v285, v286);
                      uint64_t v293 = sub_1B6476488(v172, 12, v287, v288, v289, v290, v291, v292);
                      sub_1B6567B18((uint64_t)v134, theSet, v293, v294, v295, v296, v297, v298);
                      uint64_t v305 = sub_1B6476488(v172, 13, v299, v300, v301, v302, v303, v304);
                      sub_1B6567B18((uint64_t)v134, theSet, v305, v306, v307, v308, v309, v310);
                      uint64_t v317 = sub_1B6476488(v172, 14, v311, v312, v313, v314, v315, v316);
                      sub_1B6567B18((uint64_t)v134, theSet, v317, v318, v319, v320, v321, v322);
                      uint64_t v329 = sub_1B6476488(v172, 15, v323, v324, v325, v326, v327, v328);
                      sub_1B6567B18((uint64_t)v134, theSet, v329, v330, v331, v332, v333, v334);
                      uint64_t v341 = sub_1B6476488(v172, 16, v335, v336, v337, v338, v339, v340);
                      sub_1B6567B18((uint64_t)v134, theSet, v341, v342, v343, v344, v345, v346);
                      uint64_t v353 = sub_1B6476488(v172, 17, v347, v348, v349, v350, v351, v352);
                      sub_1B6567B18((uint64_t)v134, theSet, v353, v354, v355, v356, v357, v358);
                    }
                  }
                }
                uint64_t v359 = sub_1B64AD020((uint64_t)v134, 3);
                if (v359 >= 1)
                {
                  uint64_t v364 = v359;
                  for (uint64_t m = 0; m != v364; ++m)
                  {
                    v366 = sub_1B64AC5F8((uint64_t)v134, 3, m, 0, v360, v361, v362, v363);
                    if (v366)
                    {
                      v367 = v366;
                      if (!CFSetContainsValue(theSet, v366)) {
                        CFSetSetValue(Mutable, v367);
                      }
                    }
                  }
                }
                v368 = Mutable;
                CFSetApplyFunction(Mutable, (CFSetApplierFunction)sub_1B6569074, v134);
                uint64_t v376 = sub_1B63CCE68(v110, v369, v370, v371, v372, v373, v374, v375);
                if (!v126)
                {
                  uint64_t v383 = v376;
                  v384 = sub_1B64ACF7C(v376, 1, v377, v378, v379, v380, v381, v382);
                  CFArrayRef v391 = sub_1B64ACF8C(v383, 1, v385, v386, v387, v388, v389, v390);
                  uint64_t v399 = sub_1B641D8A0((uint64_t)v384, v392, v393, v394, v395, v396, v397, v398);
                  v400 = malloc_type_malloc(8 * v399, 0x100004000313F17uLL);
                  v954 = (uint64_t *)malloc_type_malloc(8 * v399, 0x100004000313F17uLL);
                  uint64_t v955 = v383;
                  uint64_t v401 = v383;
                  v959 = v400;
                  if (v399 < 1)
                  {
                    uint64_t v403 = 0;
                  }
                  else
                  {
                    memset(v400, 255, 8 * v399);
                    uint64_t v402 = 0;
                    uint64_t v403 = 0;
                    uint64_t v957 = v399;
                    do
                    {
                      if (v399 <= v402 + 1) {
                        uint64_t v404 = v402 + 1;
                      }
                      else {
                        uint64_t v404 = v399;
                      }
                      while (*((void *)v400 + v402) != -1)
                      {
                        if (v404 == ++v402)
                        {
                          uint64_t v402 = v404 + 1;
                          goto LABEL_66;
                        }
                      }
                      *((void *)v400 + v402) = v403;
                      uint64_t v405 = v402 + 1;
                      for (uint64_t n = v403; v405 < v399; ++v405)
                      {
                        if (*((void *)v400 + v405) == -1)
                        {
                          CFIndex v406 = CFArrayGetCount(v391);
                          if (v406 < 1) {
                            goto LABEL_63;
                          }
                          CFIndex v407 = v406;
                          BOOL v408 = 0;
                          for (iCFIndex i = 0; ii != v407; v408 = ii >= v407)
                          {
                            v410 = CFArrayGetValueAtIndex(v391, ii);
                            uint64_t v418 = sub_1B641E1A8((uint64_t)v410, v411, v412, v413, v414, v415, v416, v417);
                            if (v418)
                            {
                              v419 = (void *)v418;
                              int v420 = sub_1B6534654(v418);
                              uint64_t v428 = sub_1B63CA534(v420, v421, v422, v423, v424, v425, v426, v427);
                              v435 = sub_1B6534808(v419, v402, v429, v430, v431, v432, v433, v434);
                              v442 = sub_1B6534808(v419, v405, v436, v437, v438, v439, v440, v441);
                              uint64_t v443 = sub_1B653465C((uint64_t)v419);
                              if (memcmp(v435, v442, v443 * v428)) {
                                break;
                              }
                            }
                            ++ii;
                          }
                          uint64_t v399 = v957;
                          v400 = v959;
                          uint64_t v403 = n;
                          if (v408) {
LABEL_63:
                          }
                            *((void *)v400 + v405) = v403;
                        }
                      }
                      uint64_t v401 = v955;
                      v954[v403++] = v402++;
LABEL_66:
                      ;
                    }
                    while (v402 < v399);
                  }
                  if (CFArrayGetCount(v391) >= 1)
                  {
                    CFIndex v451 = 0;
                    uint64_t v962 = v403;
                    do
                    {
                      v452 = CFArrayGetValueAtIndex(v391, v451);
                      uint64_t v958 = sub_1B64AC4DC(v401, v452, 1, v453, v454, v455, v456, v457);
                      v465 = (void *)sub_1B641E1A8((uint64_t)v452, v458, v459, v460, v461, v462, v463, v464);
                      int v466 = sub_1B6534654((uint64_t)v465);
                      uint64_t v474 = sub_1B63CA534(v466, v467, v468, v469, v470, v471, v472, v473);
                      size_t v481 = sub_1B653465C((uint64_t)v465) * v474;
                      CFIndex v482 = v481 * v403;
                      unsigned int v956 = v466;
                      if (v481 * v403) {
                        v483 = (UInt8 *)malloc_type_malloc(v481 * v403, 0xE64776CBuLL);
                      }
                      else {
                        v483 = 0;
                      }
                      if (v403 >= 1)
                      {
                        v484 = v954;
                        v485 = v483;
                        uint64_t v486 = v962;
                        do
                        {
                          uint64_t v487 = *v484++;
                          v488 = sub_1B6534808(v465, v487, v475, v476, v477, v478, v479, v480);
                          memcpy(v485, v488, v481);
                          v485 += v481;
                          --v486;
                        }
                        while (v486);
                      }
                      CFDataRef v489 = CFDataCreate(allocator, v483, v482);
                      __int16 v497 = sub_1B641D56C((uint64_t)v452, v490, v491, v492, v493, v494, v495, v496);
                      uint64_t v498 = sub_1B653465C((uint64_t)v465);
                      uint64_t v499 = sub_1B65349B8((uint64_t)v465);
                      uint64_t v507 = sub_1B6534BD0((uint64_t)v465, v500, v501, v502, v503, v504, v505, v506);
                      uint64_t v403 = v962;
                      v509 = (const void *)sub_1B641D00C(v497, v489, v956, v498, v962, v499, v507, v508);
                      CFRelease(v489);
                      free(v483);
                      uint64_t v401 = v955;
                      sub_1B64AC4D0(v955, v509, v958, v510, v511, v512, v513, v514);
                      CFRelease(v509);
                      ++v451;
                      v400 = v959;
                    }
                    while (v451 < CFArrayGetCount(v391));
                  }
                  CFArrayRef v99 = v948;
                  CFIndex v101 = v949;
                  if ((uint64_t)sub_1B64ABD08(v401, v444, v445, v446, v447, v448, v449, v450) >= 1)
                  {
                    CFIndex v520 = 0;
                    do
                    {
                      v521 = sub_1B64ABD78(v401, v520, 1, v515, v516, v517, v518, v519);
                      LODWORD(v970) = 0;
                      CFDataRef v522 = (const __CFData *)sub_1B63D0F38((uint64_t)v521, &v970);
                      uint64_t v523 = sub_1B63D11E8((uint64_t)v521);
                      uint64_t v537 = sub_1B63D0DCC((uint64_t)v521, v524, v525, v526, v527, v528, v529, v530) * v523;
                      switch(v970)
                      {
                        case 4:
                          BytePtr = (UInt8 *)CFDataGetBytePtr(v522);
                          if (v537 >= 1)
                          {
                            do
                            {
                              *(_DWORD *)BytePtr = *((void *)v400 + *(unsigned int *)BytePtr);
                              BytePtr += 4;
                              --v537;
                            }
                            while (v537);
                          }
                          break;
                        case 2:
                          v546 = (UInt8 *)CFDataGetBytePtr(v522);
                          if (v537 >= 1)
                          {
                            do
                            {
                              *(_WORD *)v546 = *((void *)v400 + *(unsigned __int16 *)v546);
                              v546 += 2;
                              --v537;
                            }
                            while (v537);
                          }
                          break;
                        case 1:
                          v538 = (UInt8 *)CFDataGetBytePtr(v522);
                          if (v537 >= 1)
                          {
                            do
                            {
                              UInt8 *v538 = *((void *)v400 + *v538);
                              ++v538;
                              --v537;
                            }
                            while (v537);
                          }
                          break;
                        default:
                          sub_1B63F2F54(16, @"Unreachable code: __OptimizeMesh:bytesPerIndex != 1, 2, or 4 during conversion, this should not happen !!", v531, v532, v533, v534, v535, v536, v945);
                          break;
                      }
                      ++v520;
                    }
                    while (v520 < (uint64_t)sub_1B64ABD08(v401, v539, v540, v541, v542, v543, v544, v545));
                  }
                  CFRelease(v391);
                  free(v400);
                  free(v954);
                  v368 = Mutable;
                }
                CFRelease(v368);
                CFRelease(theSet);
                CFIndex v100 = v951 + 1;
              }
              while (v951 + 1 != v101);
              CFRelease(v99);
              CFDictionaryRef v8 = v946;
              uint64_t v9 = v947;
              BOOL v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
            }
          }
        }
      }
    }
    v548 = CFDictionaryGetValue(v8, @"kWorldSourceCreateCameraIfAbsent");
    if (v548)
    {
      if (CFEqual(*v14, v548))
      {
        uint64_t v556 = sub_1B64B1FBC((uint64_t)v9, v549, v550, v551, v552, v553, v554, v555);
        if (v556)
        {
          CFArrayRef v562 = sub_1B64A2A88(v556, @"kCameraKey", 1, v557, v558, v559, v560, v561);
          if (!v562 || (CFArrayRef v569 = v562, v570 = CFArrayGetCount(v562), CFRelease(v569), v570 <= 0))
          {
            uint64_t v571 = sub_1B63DF96C(v9, 1, v563, v564, v565, v566, v567, v568);
            if (v571)
            {
              v579 = (const void *)v571;
              uint64_t v580 = sub_1B64B1FBC((uint64_t)v9, v572, v573, v574, v575, v576, v577, v578);
              sub_1B64A107C(v580, v579, v581, v582, v583, v584, v585, v586);
              CFRelease(v579);
            }
          }
        }
      }
    }
    CFBooleanRef v587 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"kWorldSourceCreateLightIfAbsent");
    if (v587 && CFBooleanGetValue(v587))
    {
      uint64_t v595 = sub_1B64B1FBC((uint64_t)v9, v588, v589, v590, v591, v592, v593, v594);
      if (v595)
      {
        CFArrayRef v601 = sub_1B64A2A88(v595, @"kLightKey", 0, v596, v597, v598, v599, v600);
        if (v601)
        {
          CFArrayRef v602 = v601;
          CFIndex v603 = CFArrayGetCount(v601);
          if (v603 >= 1)
          {
            CFIndex v604 = v603;
            uint64_t v605 = 1;
            do
            {
              v606 = CFArrayGetValueAtIndex(v602, v605 - 1);
              CFDictionaryRef v614 = sub_1B649F640((uint64_t)v606, v607, v608, v609, v610, v611, v612, v613);
              int v622 = sub_1B6496680((uint64_t)v614, v615, v616, v617, v618, v619, v620, v621);
              if (v605 >= v604) {
                break;
              }
              ++v605;
            }
            while (!v622);
            if (!v622)
            {
              for (jCFIndex j = 0; jj != v604; ++jj)
              {
                v624 = CFArrayGetValueAtIndex(v602, jj);
                v632 = (float32x4_t *)sub_1B649F640((uint64_t)v624, v625, v626, v627, v628, v629, v630, v631);
                v640 = (float *)sub_1B649553C((uint64_t)v632, v633, v634, v635, v636, v637, v638, v639);
                if ((float)((float)(*v640 + v640[1]) + v640[2]) >= 1.5)
                {
                  long long v970 = 0uLL;
                  sub_1B63C8F2C((float *)&v970, 0.0, 0.0, 0.0, 0.0);
                  sub_1B6494CAC(v632, (float *)&v970, v641, v642, v643, v644, v645, v646, v945);
                }
              }
            }
          }
          CFRelease(v602);
        }
      }
      sub_1B64B1DDC((CFTypeRef *)v9, @"defaultLight", (const __CFDictionary *)*v14, v596, v597, v598, v599, v600);
    }
    v647 = CFDictionaryGetValue(v8, @"kWorldSourceCreateNormalsIfAbsent");
    if (v647)
    {
      if (CFEqual(*v14, v647))
      {
        uint64_t v655 = sub_1B64B1FBC((uint64_t)v9, v648, v649, v650, v651, v652, v653, v654);
        if (v655) {
          sub_1B64A18A4(v655, (uint64_t)&unk_1F0FB66C8);
        }
      }
    }
    v656 = CFDictionaryGetValue(v8, @"kWorldSourceAdjustInvalidClippingPlanes");
    if (v656)
    {
      if (CFEqual(*v14, v656))
      {
        uint64_t v664 = sub_1B64B1FBC((uint64_t)v9, v657, v658, v659, v660, v661, v662, v663);
        if (v664)
        {
          v670 = (const void *)v664;
          CFArrayRef v671 = sub_1B64A2A88(v664, @"kCameraKey", 0, v665, v666, v667, v668, v669);
          if (v671)
          {
            CFArrayRef v672 = v671;
            CFIndex v673 = CFArrayGetCount(v671);
            if (v673 > 0)
            {
              CFIndex v674 = v673;
              CFDictionaryRef v675 = v8;
              CFIndex v676 = 0;
              char v677 = 0;
              while (1)
              {
                long long v979 = 0u;
                long long v980 = 0u;
                long long v977 = 0u;
                long long v978 = 0u;
                long long v975 = 0u;
                long long v976 = 0u;
                long long v973 = 0u;
                long long v974 = 0u;
                long long v971 = 0u;
                long long v972 = 0u;
                long long v970 = 0u;
                v678 = CFArrayGetValueAtIndex(v672, v676);
                if (!v678) {
                  goto LABEL_144;
                }
                uint64_t v685 = (uint64_t)v678;
                if (!sub_1B63E0460((uint64_t)v678, (uint64_t)&v970, v679, v680, v681, v682, v683, v684)) {
                  goto LABEL_144;
                }
                float v693 = sub_1B649CC68((uint64_t)&v970, v686, v687, v688, v689, v690, v691, v692);
                if (v693 <= sub_1B649CC1C((uint64_t)&v970, v694, v695, v696, v697, v698, v699, v700)) {
                  break;
                }
                if ((v677 & 1) == 0
                  && !sub_1B63F493C(v670, 1, (uint64_t)&v981, (uint64_t)&v982, v704, v705, v706, v707))
                {
                  goto LABEL_143;
                }
                float32x4_t v968 = 0u;
                float32x4_t v969 = 0u;
                float32x4_t v966 = 0u;
                float32x4_t v967 = 0u;
                float32x4_t valuePtr = 0u;
                float32x4_t v965 = 0u;
                sub_1B63E0138(v685, &valuePtr, v702, v703, v704, v705, v706, v707, (__n128)xmmword_1B6E4F360);
                float32x4_t v708 = v981;
                float32x4_t v709 = v982;
                v708.i32[3] = 1.0;
                v709.i32[3] = 1.0;
                v710.i64[0] = 0x3F0000003F000000;
                v710.i64[1] = 0x3F0000003F000000;
                v963[2] = v966;
                v963[3] = v967;
                v963[4] = v968;
                v963[5] = v969;
                v963[0] = valuePtr;
                v963[1] = v965;
                if (vfx_frustum_classify_aabb(v963, vmulq_f32(vaddq_f32(v708, v709), v710), vmulq_f32(vsubq_f32(v709, v708), v710)) == 1)
                {
                  sub_1B63F2F54(0, @"Warning: invalid zRange detected (whole world clipped)", v711, v712, v713, v714, v715, v716, v945);
LABEL_139:
                  CFDictionaryRef v717 = sub_1B64A3B48(v685, v701, v702, v703, v704, v705, v706, v707);
                  if (v717)
                  {
                    uint64_t v725 = sub_1B649D3DC((uint64_t)v717, v718, v719, v720, v721, v722, v723, v724);
                    if (v725)
                    {
                      uint64_t v732 = v725;
                      valuePtr.i32[2] = 0;
                      valuePtr.i64[0] = 0;
                      sub_1B64A1EC8(v685, (__n128 *)&valuePtr, v726, v727, v728, v729, v730, v731);
                      v733.i64[0] = 0xBF000000BF000000;
                      v733.i64[1] = 0xBF000000BF000000;
                      float32x4_t v734 = vsubq_f32(v981, v982);
                      float32x4_t v735 = vmulq_f32(v734, v734);
                      float32x4_t v736 = vaddq_f32(valuePtr, vmulq_f32(vaddq_f32(v981, v982), v733));
                      float32x4_t v737 = vmulq_f32(v736, v736);
                      float v738 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v735, 2), vaddq_f32(v735, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v735.f32, 1))).f32[0])+ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v737, 2), vaddq_f32(v737, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v737.f32, 1))).f32[0]);
                      sub_1B649C9C0(v732, v738, v739, v740, v741, v742, v743, v744, v745);
                      sub_1B649CAA8(v732, v738 / 250.0, v746, v747, v748, v749, v750, v751, v752);
                    }
                  }
                }
                char v677 = 1;
LABEL_144:
                if (v674 == ++v676)
                {
                  CFRelease(v672);
                  CFDictionaryRef v8 = v675;
                  BOOL v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
                  goto LABEL_147;
                }
              }
              if ((v677 & 1) == 0
                && !sub_1B63F493C(v670, 1, (uint64_t)&v981, (uint64_t)&v982, v704, v705, v706, v707))
              {
LABEL_143:
                char v677 = 0;
                goto LABEL_144;
              }
              goto LABEL_139;
            }
            CFRelease(v672);
          }
        }
      }
    }
LABEL_147:
    CFBooleanRef v753 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"kWorldSourceMakeSourcesCheaper");
    if (v753)
    {
      if (CFBooleanGetValue(v753))
      {
        uint64_t v758 = sub_1B64B1FBC((uint64_t)v9, v754, v755, v756, v757, v11, v12, v13);
        if (v758)
        {
          CFArrayRef v761 = sub_1B64A2A88(v758, @"model", 0, v759, v760, v11, v12, v13);
          if (v761)
          {
            CFArrayRef v762 = v761;
            v763 = v14;
            CFIndex v764 = CFArrayGetCount(v761);
            if (v764 >= 1)
            {
              CFIndex v765 = v764;
              for (kuint64_t k = 0; kk != v765; ++kk)
              {
                v767 = CFArrayGetValueAtIndex(v762, kk);
                uint64_t v775 = sub_1B649F5F4((uint64_t)v767, v768, v769, v770, v771, v772, v773, v774);
                CFDictionaryRef v783 = sub_1B64A3D8C((uint64_t)v767, v776, v777, v778, v779, v780, v781, v782);
                sub_1B63DF7DC(v775, (uint64_t)v783, v784, v785, v786, v787, v788, v789);
              }
            }
            CFRelease(v762);
            BOOL v14 = v763;
          }
        }
      }
    }
  }
  LODWORD(v970) = 0;
  valuePtr.i32[0] = 0;
  v963[0].i32[0] = 0;
  if (sub_1B6567B74(v9, v8, (int *)&v970, valuePtr.f32, v963, v11, v12, v13))
  {
    BOOL v796 = valuePtr.f32[0] == 1.0 && v970 == 0;
    BOOL v797 = !v796;
    if (a4 == 1 && v797) {
      sub_1B63F2F54(0, @"Info: VFXWorldLoaderConvertUnitsToMetersKey and VFXWorldLoaderConvertToYUpKey have no effect on compressed assets. Use Xcode's compression options instead", v790, v791, v792, v793, v794, v795, v945);
    }
  }
  if (!v8)
  {
    if (+[VFXView _isMetalSupported]_0()) {
      return;
    }
    goto LABEL_182;
  }
  v798 = CFDictionaryGetValue(v8, @"kWorldSourceFlattenWorld");
  if (v798)
  {
    if (CFEqual(*v14, v798))
    {
      uint64_t v806 = sub_1B64B2008((uint64_t)v9, v799, v800, v801, v802, v803, v804, v805);
      if (!v806 || sub_1B6423178(v806, v807, v808, v809, v810, v811, v812, v813))
      {
        v814 = (void *)sub_1B64B1FBC((uint64_t)v9, v807, v808, v809, v810, v811, v812, v813);
        v815 = sub_1B64A2D84(v814, (uint64_t)&unk_1F0FB69E8, 1);
        CFIndex v816 = CFArrayGetCount(v815);
        CFRelease(v815);
        if (v816 <= 0)
        {
          v821 = v14;
          v822 = (void *)sub_1B63DB064((uint64_t)v814, 1, 1, 0, v817, v818, v819, v820);
          v823 = (uint64_t *)sub_1B64A0828();
          v824 = sub_1B64A2D84(v814, (uint64_t)&unk_1F0FB6B68, 1);
          long long v972 = 0u;
          long long v973 = 0u;
          long long v970 = 0u;
          long long v971 = 0u;
          CFIndex v825 = CFArrayGetCount(v824);
          if (v825 >= 1)
          {
            CFIndex v826 = v825;
            for (muint64_t m = 0; mm != v826; ++mm)
            {
              v828 = CFArrayGetValueAtIndex(v824, mm);
              sub_1B64A27C4((uint64_t)v828, (uint64_t)&v970, v829, v830, v831, v832, v833, v834);
              sub_1B64A2614((uint64_t)v828, (uint64_t)&v970);
              v841 = (const void *)sub_1B64A0F4C((uint64_t)v828, 0, v835, v836, v837, v838, v839, v840);
              sub_1B64A107C((uint64_t)v823, v841, v842, v843, v844, v845, v846, v847);
              CFRelease(v841);
            }
          }
          v848 = (float32x4_t *)sub_1B64A0828();
          sub_1B64A0D6C(v848, v822, v849, v850, v851, v852, v853, v854);
          CFRelease(v822);
          sub_1B64A2F04((uint64_t)v848, @"nodeFromflattenedMesh", v855, v856, v857, v858, v859, v860);
          sub_1B64A107C((uint64_t)v823, v848, v861, v862, v863, v864, v865, v866);
          CFRelease(v848);
          v867 = (const void *)sub_1B64B1BE8();
          sub_1B64B1DE0((uint64_t)v867, v823, v868, v869, v870, v871, v872, v873);
          CFRelease(v823);
          CFRelease(v824);
          BOOL v14 = v821;
          if (v867)
          {
            v881 = (void *)sub_1B64B1FBC((uint64_t)v867, v874, v875, v876, v877, v878, v879, v880);
            CFRetain(v881);
            sub_1B64B1DE0((uint64_t)v867, 0, v882, v883, v884, v885, v886, v887);
            sub_1B64B1DE0((uint64_t)v9, (uint64_t *)v881, v888, v889, v890, v891, v892, v893);
            CFRelease(v881);
            CFRelease(v867);
          }
        }
      }
    }
  }
  v894 = CFDictionaryGetValue(v8, @"kWorldSourceSplitMeshesForGLES");
  char isMetal = +[VFXView _isMetalSupported]_0();
  if (v894)
  {
    if (!CFEqual(*v14, v894)) {
      goto LABEL_183;
    }
LABEL_182:
    uint64_t v903 = sub_1B64B1FBC((uint64_t)v9, v896, v897, v898, v899, v900, v901, v902);
    sub_1B63DC3E8(v903, 0xFFFFLL, v904, v905, v906, v907, v908, v909);
    if (!v8) {
      return;
    }
    goto LABEL_183;
  }
  if ((isMetal & 1) == 0) {
    goto LABEL_182;
  }
LABEL_183:
  CFBooleanRef v910 = (const __CFBoolean *)CFDictionaryGetValue(v8, @"kWorldSourceInterleaveSources");
  if (v910)
  {
    if (CFBooleanGetValue(v910))
    {
      uint64_t v918 = sub_1B64B1FBC((uint64_t)v9, v911, v912, v913, v914, v915, v916, v917);
      if (v918)
      {
        CFArrayRef v924 = sub_1B64A2A88(v918, @"model", 0, v919, v920, v921, v922, v923);
        if (v924)
        {
          CFArrayRef v925 = v924;
          CFIndex v926 = CFArrayGetCount(v924);
          if (v926 >= 1)
          {
            CFIndex v927 = v926;
            for (CFIndex nn = 0; nn != v927; ++nn)
            {
              v929 = CFArrayGetValueAtIndex(v925, nn);
              uint64_t v937 = sub_1B649F5F4((uint64_t)v929, v930, v931, v932, v933, v934, v935, v936);
              sub_1B6568F48(v937, v938, v939, v940, v941, v942, v943, v944);
            }
          }
          CFRelease(v925);
        }
      }
    }
  }
}

void sub_1B6568F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_1B63CCE68(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v17 = sub_1B63DF358(v9, v10, v11, v12, v13, v14, v15, v16);
  if (v17)
  {
    uint64_t v24 = (const void *)v17;
    sub_1B63CDBD0(a1, v17, v18, v19, v20, v21, v22, v23);
    CFRelease(v24);
  }
}

uint64_t sub_1B6568FA4(const __CFURL *a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"kWorldSourceCheckConsistency");
    if (Value) {
      return CFBooleanGetValue(Value) != 0;
    }
  }
  int v5 = sub_1B63CC128(a1);
  int v6 = v5;
  if (a1
    && (v5 & 1) == 0
    && (CFStringRef v7 = CFURLCopyPath(a1)) != 0
    && (CFStringRef v8 = v7, HasPrefix = CFStringHasPrefix(v7, @"/System"), CFRelease(v8), HasPrefix))
  {
    return 0;
  }
  else
  {
    return v6 ^ 1u;
  }
}

uint64_t sub_1B6569048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1B649F5F4(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v8) {
    sub_1B63DF1D8(v8, 1, v9, v10, v11, v12, v13, v14);
  }
  return 0;
}

void sub_1B6569074(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B6569084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1B649F5F4(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v16 = v8;
    if (!sub_1B647F3B0(v8, v9, v10, v11, v12, v13, v14, v15))
    {
      uint64_t v24 = sub_1B63CCE68(v16, v17, v18, v19, v20, v21, v22, v23);
      if (v24)
      {
        uint64_t v31 = v24;
        if (!sub_1B64AD1C4(v24, 0, v25, v26, v27, v28, v29, v30))
        {
          if (sub_1B64ACF7C(v31, 0, v32, v33, v34, v35, v36, v37))
          {
            uint64_t v43 = sub_1B63DE310(v31, 0, 0, v38, v39, v40, v41, v42);
            if (v43)
            {
              uint64_t v49 = (const void *)v43;
              unsigned __int8 v50 = sub_1B64ACE9C(v31, 0, 0, v44, v45, v46, v47, v48);
              sub_1B64AC4C8(v31, v49, 0, v50, v51, v52, v53, v54);
              CFRelease(v49);
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL sub_1B656912C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B64A16A0(a2, a2, a3, a4, a5, a6, a7, a8) || sub_1B64A14EC(a2, v9, v10, v11, v12, v13, v14, v15) != 0;
}

BOOL sub_1B6569170(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B64A3B48(a2, a2, a3, a4, a5, a6, a7, a8) || sub_1B649F640(a2, v9, v10, v11, v12, v13, v14, v15) != 0;
}

void sub_1B65691B4()
{
  if (qword_1E9DDB5F8 != -1) {
    dispatch_once(&qword_1E9DDB5F8, &unk_1F0FB5E08);
  }
}

void *sub_1B65691DC()
{
  sub_1B6E240C4(sub_1B6569224);

  return sub_1B6E240D0(sub_1B6569254);
}

void sub_1B6569224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6569254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B6569284(int a1, uint64_t a2, unsigned int a3)
{
  if (a1 == 4) {
    unsigned int v3 = a3;
  }
  else {
    unsigned int v3 = 0;
  }
  if (a2) {
    unsigned int v3 = 0;
  }
  if ((a1 & 0xFE) == 2) {
    unsigned int v3 = 1;
  }
  if (a1) {
    return v3;
  }
  else {
    return a2 == 0;
  }
}

uint64_t sub_1B65692BC(uint64_t a1)
{
  sub_1B6569528(a1);
  uint64_t v2 = *(void *)(a1 + 168);
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 0x40000000;
  CFArrayRef v71 = sub_1B6569E0C;
  CFArrayRef v72 = &unk_1E6144688;
  uint64_t v73 = v2;
  uint64_t v10 = sub_1B63CCE68(a1, v3, v4, v5, v6, v7, v8, v9);
  uint64_t v15 = v10;
  uint64_t v16 = *(void *)(v2 + 80);
  uint64_t v17 = *(void *)(v2 + 88);
  if (v16 == v17)
  {
LABEL_9:
    int v69 = 0;
    goto LABEL_10;
  }
  char v18 = -1;
  while (1)
  {
    if (*(_DWORD *)(v16 + 12) == 3)
    {
      if (v18 == -1)
      {
        char v18 = *(unsigned char *)(v16 + 8);
        goto LABEL_8;
      }
      if (*(unsigned __int8 *)(v16 + 8) != v18) {
        break;
      }
    }
LABEL_8:
    v16 += 16;
    if (v16 == v17) {
      goto LABEL_9;
    }
  }
  int v69 = 1;
LABEL_10:
  uint64_t v19 = sub_1B64AC5F8(v10, 2, 0, 0, v11, v12, v13, v14);
  int v20 = v69 & 0xFFFFFFF9 | (2 * (((uint64_t (*)(void *, const void *))v71)(v70, v19) & 3));
  uint64_t v25 = sub_1B64AC5F8(v15, 3, 0, 0, v21, v22, v23, v24);
  int v26 = v20 & 0xFFFFFFE7 | (8 * (((uint64_t (*)(void *, const void *))v71)(v70, v25) & 3));
  uint64_t v31 = sub_1B64AC5F8(v15, 3, 1, 0, v27, v28, v29, v30);
  int v32 = v26 & 0xFFFFFF9F | (32 * (((uint64_t (*)(void *, const void *))v71)(v70, v31) & 3));
  uint64_t v37 = sub_1B64AC5F8(v15, 3, 2, 0, v33, v34, v35, v36);
  int v38 = v32 & 0xFFFFFE7F | ((((uint64_t (*)(void *, const void *))v71)(v70, v37) & 3) << 7);
  uint64_t v43 = sub_1B64AC5F8(v15, 3, 3, 0, v39, v40, v41, v42);
  char v44 = ((uint64_t (*)(void *, const void *))v71)(v70, v43);
  uint64_t v49 = sub_1B64AC5F8(v15, 3, 4, 0, v45, v46, v47, v48);
  char v50 = ((uint64_t (*)(void *, const void *))v71)(v70, v49);
  uint64_t v55 = sub_1B64AC5F8(v15, 3, 5, 0, v51, v52, v53, v54);
  int v56 = (((uint64_t (*)(void *, const void *))v71)(v70, v55) & 3) << 13;
  uint64_t v61 = sub_1B64AC5F8(v15, 3, 6, 0, v57, v58, v59, v60);
  int v62 = (((uint64_t (*)(void *, const void *))v71)(v70, v61) & 3) << 15;
  uint64_t v67 = sub_1B64AC5F8(v15, 3, 7, 0, v63, v64, v65, v66);
  return v38 & 0xFFFFE1FF | ((v44 & 3) << 9) & 0xE7FF | ((v50 & 3) << 11) | v56 | v62 | ((((uint64_t (*)(void *, const void *))v71)(v70, v67) & 3) << 17);
}

uint64_t sub_1B6569528(uint64_t result)
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  if (*(void *)(result + 168)) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = (char *)malloc_type_calloc(1uLL, 0xD8uLL, 0x10F004000FC2A7CuLL);
  *(void *)(v1 + 168) = v2;
  uint64_t v10 = sub_1B63CCE68(v1, v3, v4, v5, v6, v7, v8, v9);
  if (sub_1B64AD020(v10, 0) != 1) {
    sub_1B63F2F54(16, @"Unreachable code: Trying to subdivide a mesh that does not have exactly 1 position source.", v11, v12, v13, v14, v15, v16, v195);
  }
  uint64_t v17 = sub_1B64AC5F8(v10, 0, 0, 0, v13, v14, v15, v16);
  uint64_t v25 = sub_1B641D478((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
  uint64_t v27 = v26;
  unint64_t v28 = v26;
  uint64_t v196 = v26;
  int v197 = v26;
  if (sub_1B64ACDD4(v10, 0))
  {
    if (*(unsigned char *)(v1 + 130))
    {
      if (sub_1B63CF130(v1, v29, v30, v31, v32, v33, v34, v35))
      {
        *uint64_t v2 = 2;
        uint64_t v203 = 0;
        uint64_t v204 = 0;
        uint64_t v202 = (uint64_t *)&v203;
        if (v27)
        {
          uint64_t v45 = 0;
          int v46 = BYTE4(v27);
          int v47 = BYTE5(v27);
          do
          {
            *(double *)v48.i64 = sub_1B65D6198(v46, (const float *)(v25 + (v47 * v45)), v36, v37, v38, v39, v40, v41, v42, v43, v44);
            float32x4_t v205 = v48;
            int v206 = v204;
            uint64_t v49 = sub_1B658116C(&v202, &v205, (uint64_t)&v205);
            v205.i8[0] = v50 ^ 1;
            int v51 = *((_DWORD *)v49 + 12);
            uint64_t v53 = (char *)*((void *)v2 + 2);
            unint64_t v52 = *((void *)v2 + 3);
            if ((unint64_t)v53 >= v52)
            {
              int v56 = (char *)*((void *)v2 + 1);
              uint64_t v57 = (v53 - v56) >> 2;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62) {
                goto LABEL_145;
              }
              uint64_t v59 = v52 - (void)v56;
              if (v59 >> 1 > v58) {
                unint64_t v58 = v59 >> 1;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                uint64_t v61 = (char *)sub_1B64282E0((uint64_t)(v2 + 24), v60);
                int v56 = (char *)*((void *)v2 + 1);
                uint64_t v53 = (char *)*((void *)v2 + 2);
              }
              else
              {
                uint64_t v61 = 0;
              }
              int v62 = &v61[4 * v57];
              *(_DWORD *)int v62 = v51;
              uint64_t v54 = v62 + 4;
              if (v53 == v56)
              {
                uint64_t v55 = v196;
              }
              else
              {
                uint64_t v55 = v196;
                do
                {
                  int v63 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *((_DWORD *)v62 - 1) = v63;
                  v62 -= 4;
                }
                while (v53 != v56);
              }
              *((void *)v2 + 1) = v62;
              *((void *)v2 + 2) = v54;
              *((void *)v2 + 3) = &v61[4 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v53 = v51;
              uint64_t v54 = v53 + 4;
              uint64_t v55 = v196;
            }
            *((void *)v2 + 2) = v54;
            sub_1B656A070((uint64_t)(v2 + 56), &v205);
            if (v205.i8[0])
            {
              *uint64_t v2 = 3;
            }
            else
            {
              uint64_t v65 = (char *)*((void *)v2 + 5);
              unint64_t v64 = *((void *)v2 + 6);
              if ((unint64_t)v65 >= v64)
              {
                uint64_t v67 = (char *)*((void *)v2 + 4);
                uint64_t v68 = (v65 - v67) >> 2;
                unint64_t v69 = v68 + 1;
                if ((unint64_t)(v68 + 1) >> 62) {
                  goto LABEL_145;
                }
                uint64_t v70 = v64 - (void)v67;
                if (v70 >> 1 > v69) {
                  unint64_t v69 = v70 >> 1;
                }
                if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v71 = v69;
                }
                if (v71)
                {
                  CFArrayRef v72 = (char *)sub_1B64282E0((uint64_t)(v2 + 48), v71);
                  uint64_t v67 = (char *)*((void *)v2 + 4);
                  uint64_t v65 = (char *)*((void *)v2 + 5);
                }
                else
                {
                  CFArrayRef v72 = 0;
                }
                uint64_t v73 = &v72[4 * v68];
                *(_DWORD *)uint64_t v73 = v45;
                uint64_t v66 = v73 + 4;
                while (v65 != v67)
                {
                  int v74 = *((_DWORD *)v65 - 1);
                  v65 -= 4;
                  *((_DWORD *)v73 - 1) = v74;
                  v73 -= 4;
                }
                *((void *)v2 + 4) = v73;
                *((void *)v2 + 5) = v66;
                *((void *)v2 + 6) = &v72[4 * v71];
                if (v67) {
                  operator delete(v67);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v65 = v45;
                uint64_t v66 = v65 + 4;
              }
              *((void *)v2 + 5) = v66;
            }
            ++v45;
          }
          while (v45 != v55);
          uint64_t v75 = v203;
        }
        else
        {
          uint64_t v75 = 0;
        }
        unint64_t v28 = (uint64_t)(*((void *)v2 + 5) - *((void *)v2 + 4)) >> 2;
        sub_1B643670C((uint64_t)&v202, v75);
        goto LABEL_124;
      }
      if ((byte_1E9DDB600 & 1) == 0)
      {
        byte_1E9DDB600 = 1;
        sub_1B63F2F54(16, @"Warning: Subdivision process might lead to gaps in surface because vertex welding is disabled when subdividing on the GPU", v36, v37, v38, v39, v40, v41, v195);
      }
    }
    *uint64_t v2 = 1;
    uint64_t v106 = (void **)(v2 + 32);
    uint64_t v107 = (void **)(v2 + 8);
    sub_1B6427A50((void **)v2 + 1, v28);
    sub_1B6427A50((void **)v2 + 4, v28);
    if (v27)
    {
      unint64_t v28 = v10;
      int v108 = 0;
      do
      {
        uint64_t v110 = (char *)*((void *)v2 + 2);
        unint64_t v109 = *((void *)v2 + 3);
        if ((unint64_t)v110 >= v109)
        {
          uint64_t v112 = (char *)*v107;
          uint64_t v113 = (v110 - (unsigned char *)*v107) >> 2;
          unint64_t v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 62) {
            goto LABEL_145;
          }
          uint64_t v115 = v109 - (void)v112;
          if (v115 >> 1 > v114) {
            unint64_t v114 = v115 >> 1;
          }
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v116 = v114;
          }
          if (v116)
          {
            uint64_t v117 = (char *)sub_1B64282E0((uint64_t)(v2 + 24), v116);
            uint64_t v112 = (char *)*((void *)v2 + 1);
            uint64_t v110 = (char *)*((void *)v2 + 2);
          }
          else
          {
            uint64_t v117 = 0;
          }
          CFDictionaryRef v118 = &v117[4 * v113];
          *(_DWORD *)CFDictionaryRef v118 = v108;
          uint64_t v111 = v118 + 4;
          while (v110 != v112)
          {
            int v119 = *((_DWORD *)v110 - 1);
            v110 -= 4;
            *((_DWORD *)v118 - 1) = v119;
            v118 -= 4;
          }
          *((void *)v2 + 1) = v118;
          *((void *)v2 + 2) = v111;
          *((void *)v2 + 3) = &v117[4 * v116];
          if (v112) {
            operator delete(v112);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v110 = v108;
          uint64_t v111 = v110 + 4;
        }
        *((void *)v2 + 2) = v111;
        uint64_t v121 = (char *)*((void *)v2 + 5);
        unint64_t v120 = *((void *)v2 + 6);
        if ((unint64_t)v121 >= v120)
        {
          uint64_t v123 = (char *)*v106;
          uint64_t v124 = (v121 - (unsigned char *)*v106) >> 2;
          unint64_t v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 62) {
            goto LABEL_145;
          }
          uint64_t v126 = v120 - (void)v123;
          if (v126 >> 1 > v125) {
            unint64_t v125 = v126 >> 1;
          }
          if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v127 = v125;
          }
          if (v127)
          {
            uint64_t v128 = (char *)sub_1B64282E0((uint64_t)(v2 + 48), v127);
            uint64_t v123 = (char *)*((void *)v2 + 4);
            uint64_t v121 = (char *)*((void *)v2 + 5);
          }
          else
          {
            uint64_t v128 = 0;
          }
          uint64_t v129 = &v128[4 * v124];
          *(_DWORD *)uint64_t v129 = v108;
          uint64_t v122 = v129 + 4;
          while (v121 != v123)
          {
            int v130 = *((_DWORD *)v121 - 1);
            v121 -= 4;
            *((_DWORD *)v129 - 1) = v130;
            v129 -= 4;
          }
          *((void *)v2 + 4) = v129;
          *((void *)v2 + 5) = v122;
          *((void *)v2 + 6) = &v128[4 * v127];
          if (v123) {
            operator delete(v123);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v121 = v108;
          uint64_t v122 = v121 + 4;
        }
        *((void *)v2 + 5) = v122;
        ++v108;
      }
      while (v108 != v197);
LABEL_121:
      uint64_t v10 = v28;
      LODWORD(v28) = v196;
    }
  }
  else
  {
    *uint64_t v2 = 0;
    uint64_t v76 = (void **)(v2 + 32);
    uint64_t v77 = (void **)(v2 + 8);
    sub_1B6427A50((void **)v2 + 1, v28);
    sub_1B6427A50((void **)v2 + 4, v28);
    if (v27)
    {
      unint64_t v28 = v10;
      int v83 = 0;
      do
      {
        uint64_t v85 = (char *)*((void *)v2 + 2);
        unint64_t v84 = *((void *)v2 + 3);
        if ((unint64_t)v85 >= v84)
        {
          uint64_t v87 = (char *)*v77;
          uint64_t v88 = (v85 - (unsigned char *)*v77) >> 2;
          unint64_t v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 62) {
            goto LABEL_145;
          }
          uint64_t v90 = v84 - (void)v87;
          if (v90 >> 1 > v89) {
            unint64_t v89 = v90 >> 1;
          }
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v91 = v89;
          }
          if (v91)
          {
            uint64_t v92 = (char *)sub_1B64282E0((uint64_t)(v2 + 24), v91);
            uint64_t v87 = (char *)*((void *)v2 + 1);
            uint64_t v85 = (char *)*((void *)v2 + 2);
          }
          else
          {
            uint64_t v92 = 0;
          }
          uint64_t v93 = &v92[4 * v88];
          *(_DWORD *)uint64_t v93 = v83;
          uint64_t v86 = v93 + 4;
          while (v85 != v87)
          {
            int v94 = *((_DWORD *)v85 - 1);
            v85 -= 4;
            *((_DWORD *)v93 - 1) = v94;
            v93 -= 4;
          }
          *((void *)v2 + 1) = v93;
          *((void *)v2 + 2) = v86;
          *((void *)v2 + 3) = &v92[4 * v91];
          if (v87) {
            operator delete(v87);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v85 = v83;
          uint64_t v86 = v85 + 4;
        }
        *((void *)v2 + 2) = v86;
        uint64_t v96 = (char *)*((void *)v2 + 5);
        unint64_t v95 = *((void *)v2 + 6);
        if ((unint64_t)v96 >= v95)
        {
          CFArrayRef v98 = (char *)*v76;
          uint64_t v99 = (v96 - (unsigned char *)*v76) >> 2;
          unint64_t v100 = v99 + 1;
          if ((unint64_t)(v99 + 1) >> 62) {
LABEL_145:
          }
            abort();
          uint64_t v101 = v95 - (void)v98;
          if (v101 >> 1 > v100) {
            unint64_t v100 = v101 >> 1;
          }
          if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v102 = v100;
          }
          if (v102)
          {
            uint64_t v103 = (char *)sub_1B64282E0((uint64_t)(v2 + 48), v102);
            CFArrayRef v98 = (char *)*((void *)v2 + 4);
            uint64_t v96 = (char *)*((void *)v2 + 5);
          }
          else
          {
            uint64_t v103 = 0;
          }
          uint64_t v104 = &v103[4 * v99];
          *(_DWORD *)uint64_t v104 = v83;
          uint64_t v97 = v104 + 4;
          while (v96 != v98)
          {
            int v105 = *((_DWORD *)v96 - 1);
            v96 -= 4;
            *((_DWORD *)v104 - 1) = v105;
            v104 -= 4;
          }
          *((void *)v2 + 4) = v104;
          *((void *)v2 + 5) = v97;
          *((void *)v2 + 6) = &v103[4 * v102];
          if (v98) {
            operator delete(v98);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v96 = v83;
          uint64_t v97 = v96 + 4;
        }
        *((void *)v2 + 5) = v97;
        ++v83;
      }
      while (v83 != v197);
      goto LABEL_121;
    }
  }
LABEL_124:
  v201[0] = MEMORY[0x1E4F143A8];
  v201[1] = 0x40000000;
  v201[2] = sub_1B656A114;
  v201[3] = &unk_1E61446A8;
  v201[4] = v2;
  sub_1B64AAFB4(v10, 0, (uint64_t)v201, v78, v79, v80, v81, v82);
  *((_DWORD *)v2 + 26) = v28;
  CFArrayRef v143 = sub_1B64ABD08(v10, v131, v132, v133, v134, v135, v136, v137);
  if ((uint64_t)v143 < 1)
  {
    int v145 = 0;
  }
  else
  {
    CFIndex v144 = 0;
    int v145 = 0;
    do
    {
      uint64_t v146 = sub_1B64ABD78(v10, v144, 0, v138, v139, v140, v141, v142);
      char v154 = sub_1B63D0C08((uint64_t)v146, v147, v148, v149, v150, v151, v152, v153);
      if (sub_1B63D0E64(v154)) {
        v145 += sub_1B63D10A4((uint64_t)v146);
      }
      ++v144;
    }
    while (v143 != (const __CFArray *)v144);
  }
  *((_DWORD *)v2 + 27) = v145;
  uint64_t v160 = malloc_type_malloc(4 * v145, 0x100004052888210uLL);
  *((_DWORD *)v2 + 52) = 0;
  v2[212] = 1;
  v205.i32[0] = 0;
  if ((uint64_t)v143 < 1)
  {
    size_t v171 = 0;
  }
  else
  {
    for (CFIndex i = 0; (const __CFArray *)i != v143; ++i)
    {
      uint64_t v162 = sub_1B64ABD78(v10, i, 0, v155, v156, v157, v158, v159);
      char v170 = sub_1B63D0C08((uint64_t)v162, v163, v164, v165, v166, v167, v168, v169);
      if (sub_1B63D0E64(v170))
      {
        v200[0] = MEMORY[0x1E4F143A8];
        v200[1] = 0x40000000;
        v200[2] = sub_1B656A278;
        v200[3] = &unk_1E61446C8;
        v200[4] = v162;
        v200[5] = v160;
        v200[6] = &v205;
        v200[7] = v2;
        sub_1B63D10E0((uint64_t)v162, (uint64_t)v200);
      }
    }
    size_t v171 = 4 * *((unsigned int *)v2 + 52);
  }
  *((void *)v2 + 14) = v160;
  uint64_t v172 = malloc_type_malloc(v171, 0x100004052888210uLL);
  uint64_t v173 = v10;
  uint64_t result = sub_1B64ACE9C(v10, 0, 0, v174, v175, v176, v177, v178);
  LODWORD(v202) = 0;
  if ((uint64_t)v143 >= 1)
  {
    uint64_t v184 = result;
    for (CFIndex j = 0; (const __CFArray *)j != v143; ++j)
    {
      uint64_t v186 = sub_1B64ABD78(v173, j, 0, v179, v180, v181, v182, v183);
      char v194 = sub_1B63D0C08((uint64_t)v186, v187, v188, v189, v190, v191, v192, v193);
      uint64_t result = sub_1B63D0E64(v194);
      if (result)
      {
        v198[0] = MEMORY[0x1E4F143A8];
        v198[1] = 0x40000000;
        v198[2] = sub_1B656A2D4;
        v198[3] = &unk_1E61446E8;
        v198[4] = v186;
        v198[5] = v184;
        int v199 = v197;
        v198[6] = v2;
        v198[7] = v172;
        v198[8] = &v202;
        uint64_t result = sub_1B63D10E0((uint64_t)v186, (uint64_t)v198);
      }
    }
  }
  *((void *)v2 + 15) = v172;
  return result;
}

uint64_t sub_1B6569E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 88);
  while (1)
  {
    if (v9 == v10)
    {
      sub_1B63F2F54(16, @"Unreachable code: Could not find mesh source indexing info for source %p", a3, a4, a5, a6, a7, a8, a2);
      return 0;
    }
    if (*(void *)v9 == a2) {
      break;
    }
    v9 += 16;
  }
  return *(unsigned int *)(v9 + 12);
}

uint64_t sub_1B6569E7C(unsigned int a1)
{
  return (a1 >> 1) & 3;
}

uint64_t sub_1B6569E84(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 0u:
      uint64_t result = (a1 >> 3) & 3;
      break;
    case 1u:
      uint64_t result = (a1 >> 5) & 3;
      break;
    case 2u:
      uint64_t result = (a1 >> 7) & 3;
      break;
    case 3u:
      uint64_t result = (a1 >> 9) & 3;
      break;
    case 4u:
      uint64_t result = (a1 >> 11) & 3;
      break;
    case 5u:
      uint64_t result = (a1 >> 13) & 3;
      break;
    case 6u:
      uint64_t result = (a1 >> 15) & 3;
      break;
    case 7u:
      uint64_t result = (a1 >> 17) & 3;
      break;
    default:
      sub_1B63F2F54(16, @"Unreachable code: Unssuported texture coordinates channel (%d)", a3, a4, a5, a6, a7, a8, a2);
      uint64_t result = 0;
      break;
  }
  return result;
}

BOOL sub_1B6569F48(char a1)
{
  return (a1 & 6) == 4;
}

uint64_t sub_1B6569F58(unsigned int a1)
{
  int v1 = (a1 & 0x18) == 16;
  if ((a1 & 0x18) == 0x10) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  if ((a1 & 0x60) == 0x40) {
    int v1 = v2;
  }
  int32x4_t v3 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a1), (int8x16_t)xmmword_1B6E72300), (int32x4_t)xmmword_1B6E72310), (int8x16_t)xmmword_1B6E50330);
  v3.i32[0] = vaddvq_s32(v3) & 0xF;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v3.i8);
  v4.i16[0] = vaddlv_u8(v4);
  __int32 v5 = v4.i32[0];
  if ((a1 & 0x18000) == 0x10000) {
    __int32 v5 = v4.i32[0] + 1;
  }
  if ((a1 & 0x60000) == 0x40000) {
    ++v1;
  }
  return (v5 + v1);
}

BOOL sub_1B6569FDC(int a1)
{
  return (~a1 & 6) == 0;
}

uint64_t sub_1B6569FEC(unsigned int a1)
{
  int v1 = (~a1 & 0x18) == 0;
  if ((~a1 & 0x18) != 0) {
    int v2 = 1;
  }
  else {
    int v2 = 2;
  }
  if ((~a1 & 0x60) == 0) {
    int v1 = v2;
  }
  int32x4_t v3 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a1), (int8x16_t)xmmword_1B6E72300), (int32x4_t)xmmword_1B6E72300), (int8x16_t)xmmword_1B6E50330);
  v3.i32[0] = vaddvq_s32(v3) & 0xF;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v3.i8);
  v4.i16[0] = vaddlv_u8(v4);
  __int32 v5 = v4.i32[0];
  if ((~a1 & 0x18000) == 0) {
    __int32 v5 = v4.i32[0] + 1;
  }
  if ((~a1 & 0x60000) == 0) {
    ++v1;
  }
  return (v5 + v1);
}

uint64_t sub_1B656A068(char a1)
{
  return a1 & 1;
}

void sub_1B656A070(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      abort();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_1B656D5D0((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void sub_1B656A114(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  if (a3)
  {
    if ((a3 & 0xFE) != 2) {
      return;
    }
    unint64_t v7 = *(void **)(a1 + 32);
    unsigned int v8 = *(unsigned __int8 *)v7;
    if (v8 >= 2)
    {
      if (v8 == 2)
      {
        int v9 = 2;
        goto LABEL_11;
      }
      if (v8 != 3)
      {
        int v9 = 0;
        goto LABEL_11;
      }
    }
    int v9 = 3;
  }
  else
  {
    if (a4) {
      return;
    }
    unint64_t v7 = *(void **)(a1 + 32);
    int v9 = 1;
  }
LABEL_11:
  unint64_t v10 = v7[12];
  unint64_t v11 = v7[11];
  if (v11 >= v10)
  {
    uint64_t v13 = v7[10];
    uint64_t v14 = (uint64_t)(v11 - v13) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      abort();
    }
    uint64_t v16 = v10 - v13;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17) {
      uint64_t v18 = (char *)sub_1B6427C8C((uint64_t)(v7 + 12), v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v18[16 * v14];
    uint64_t v20 = &v18[16 * v17];
    *(void *)uint64_t v19 = a2;
    v19[8] = a5;
    *(_WORD *)(v19 + 9) = 0;
    v19[11] = 0;
    *((_DWORD *)v19 + 3) = v9;
    uint64_t v12 = v19 + 16;
    uint64_t v22 = (char *)v7[10];
    uint64_t v21 = (char *)v7[11];
    if (v21 != v22)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v21 - 1);
        v19 -= 16;
        v21 -= 16;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)v7[10];
    }
    v7[10] = v19;
    v7[11] = v12;
    v7[12] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(void *)unint64_t v11 = a2;
    *(unsigned char *)(v11 + 8) = a5;
    *(_WORD *)(v11 + 9) = 0;
    *(unsigned char *)(v11 + 11) = 0;
    uint64_t v12 = (char *)(v11 + 16);
    *(_DWORD *)(v11 + 12) = v9;
  }
  v7[11] = v12;
}

uint64_t sub_1B656A278(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B63D1304(a1[4], a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = a1[5];
  unint64_t v11 = (_DWORD *)a1[6];
  uint64_t v12 = *v11;
  *unint64_t v11 = v12 + 1;
  *(_DWORD *)(v10 + 4 * v12) = result;
  uint64_t v13 = a1[7];
  *(_DWORD *)(v13 + 208) += result;
  if (result != 4) {
    *(unsigned char *)(v13 + 212) = 0;
  }
  return result;
}

uint64_t sub_1B656A2D4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t result = sub_1B63D1304(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  if (result >= 1)
  {
    uint64_t v15 = result;
    for (uint64_t i = 0; i != v15; ++i)
    {
      uint64_t result = sub_1B63D14A0(*(void *)(a1 + 32), v9, i, *(void *)(a1 + 40), v11, v12, v13, v14);
      int v17 = *(_DWORD *)(a1 + 72) - 1;
      if (v17 >= (int)result) {
        int v17 = result;
      }
      uint64_t v18 = *(void *)(a1 + 48);
      if (*(unsigned char *)v18 == 3) {
        int v17 = *(_DWORD *)(*(void *)(v18 + 8) + 4 * v17);
      }
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(_DWORD **)(a1 + 64);
      uint64_t v21 = *v20;
      *uint64_t v20 = v21 + 1;
      *(_DWORD *)(v19 + 4 * v21) = v17;
    }
  }
  return result;
}

void sub_1B656A374(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1[5];
  if (!v9) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"topologyInfo");
  }
  if (*(int *)(v9 + 128) <= 0 && *(int *)(v9 + 152) <= 0)
  {
    uint64_t v10 = a1[2];
    if (v10)
    {
      uint64_t v11 = a1[1];
      if (v11)
      {
        CFArrayRef v19 = sub_1B64ABD08(a2, a2, a3, a4, a5, a6, a7, a8);
        uint64_t v125 = v11;
        if ((uint64_t)v19 < 1)
        {
          BOOL v132 = 0;
        }
        else
        {
          CFIndex v20 = 0;
          BOOL v132 = 1;
          do
          {
            uint64_t v21 = sub_1B64ABD78(a2, v20, 0, v14, v15, v16, v17, v18);
            char v29 = sub_1B63D0C08((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28);
            if (sub_1B63D0E64(v29) && sub_1B63D0F4C((uint64_t)v21) != -1) {
              break;
            }
            BOOL v132 = ++v20 < (uint64_t)v19;
          }
          while (v19 != (const __CFArray *)v20);
        }
        uint64_t v126 = (void *)sub_1B641E1A8(v10, v12, v13, v14, v15, v16, v17, v18);
        uint64_t v30 = v125;
        uint64_t v31 = sub_1B63D11E8(v125);
        int v130 = malloc_type_malloc(4 * v31, 0x100004052888210uLL);
        uint64_t v128 = (char *)malloc_type_malloc(8 * v31, 0x100004052888210uLL);
        if (sub_1B63D11A8(v125) != 1) {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Found crease element with more than 1 channel", v32, v33, a5, a6, a7, a8, (uint64_t)"CFXMeshElementGetIndicesChannelCount(creasesElement) == 1");
        }
        if (v31 < 1)
        {
          LODWORD(v35) = 0;
        }
        else
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v124 = v31;
          do
          {
            int v36 = sub_1B63D14A0(v30, v34, 0, 0, a5, a6, a7, a8);
            int v43 = sub_1B63D14A0(v30, v34, 1, 0, v37, v38, v39, v40);
            if (!v132) {
              goto LABEL_25;
            }
            uint64_t v144 = 0;
            int v145 = &v144;
            uint64_t v146 = 0x2000000000;
            char v147 = 0;
            unsigned __int8 v44 = sub_1B64ACE9C(a2, 0, 0, v42, a5, a6, a7, a8);
            if ((uint64_t)v19 >= 1)
            {
              CFIndex v50 = 0;
              uint64_t v51 = v44;
              do
              {
                unint64_t v52 = sub_1B64ABD78(a2, v50, 0, v45, v46, v47, v48, v49);
                char v60 = sub_1B63D0C08((uint64_t)v52, v53, v54, v55, v56, v57, v58, v59);
                if (sub_1B63D0E64(v60))
                {
                  uint64_t v143 = 0;
                  long long v141 = 0u;
                  long long v142 = 0u;
                  long long v140 = 0u;
                  sub_1B63D11F0((uint64_t)v52, v51, v61, v45, v46, v47, v48, v49, (uint64_t)&v140);
                  v138[0] = v140;
                  v138[1] = v141;
                  v138[2] = v142;
                  uint64_t v139 = v143;
                  v135[0] = MEMORY[0x1E4F143A8];
                  v135[1] = 0x40000000;
                  v135[2] = sub_1B656A840;
                  v135[3] = &unk_1E6144710;
                  int v136 = v36;
                  int v137 = v43;
                  v135[4] = &v144;
                  sub_1B63D2A6C((uint64_t)v138, (uint64_t)v135, v62, v63, v64, v65, v66, v67);
                }
                ++v50;
              }
              while (v19 != (const __CFArray *)v50);
            }
            int v68 = *((unsigned __int8 *)v145 + 24);
            _Block_object_dispose(&v144, 8);
            uint64_t v31 = v124;
            uint64_t v30 = v125;
            if (v68)
            {
LABEL_25:
              if (*(unsigned char *)v9 == 3)
              {
                uint64_t v69 = *(void *)(v9 + 8);
                int v36 = *(_DWORD *)(v69 + 4 * v36);
                int v43 = *(_DWORD *)(v69 + 4 * v43);
              }
              uint64_t v70 = &v128[8 * v35];
              *(_DWORD *)uint64_t v70 = v36;
              *((_DWORD *)v70 + 1) = v43;
              v130[v35++] = *(_DWORD *)sub_1B6534808(v126, v34, v41, v42, a5, a6, a7, a8);
            }
            ++v34;
          }
          while (v34 != v31);
        }
        *(_DWORD *)(v9 + 128) = v35;
        *(void *)(v9 + 136) = v128;
        *(void *)(v9 + 144) = v130;
      }
    }
    unint64_t v71 = sub_1B64AC5F8(a2, 7, 0, 0, a5, a6, a7, a8);
    if (v71)
    {
      uint64_t v79 = (void *)sub_1B641E1A8((uint64_t)v71, v72, v73, v74, v75, v76, v77, v78);
      size_t v80 = *(void *)(v9 + 40) - *(void *)(v9 + 32);
      uint64_t v81 = malloc_type_malloc(v80, 0x100004052888210uLL);
      size_t v127 = v80;
      uint64_t v82 = malloc_type_malloc(v80, 0x100004052888210uLL);
      uint64_t v88 = sub_1B64ACE9C(a2, 7, 0, v83, v84, v85, v86, v87);
      CFArrayRef v129 = sub_1B64ABD08(a2, v89, v90, v91, v92, v93, v94, v95);
      if ((uint64_t)v129 >= 1)
      {
        CFIndex v101 = 0;
        do
        {
          CFIndex v131 = v101;
          unint64_t v102 = sub_1B64ABD78(a2, v101, 0, v96, v97, v98, v99, v100);
          char v110 = sub_1B63D0C08((uint64_t)v102, v103, v104, v105, v106, v107, v108, v109);
          if (sub_1B63D0E64(v110))
          {
            uint64_t v133 = sub_1B63D11E8((uint64_t)v102);
            if (v133 >= 1)
            {
              for (uint64_t i = 0; i != v133; ++i)
              {
                uint64_t v113 = sub_1B63D1304((uint64_t)v102, i, v111, v96, v97, v98, v99, v100);
                if (v113 >= 1)
                {
                  uint64_t v114 = v113;
                  for (uint64_t j = 0; j != v114; ++j)
                  {
                    int v116 = sub_1B63D14A0((uint64_t)v102, i, j, v88, v97, v98, v99, v100);
                    int v123 = v116;
                    if (*(unsigned char *)v9 == 3) {
                      int v123 = *(_DWORD *)(*(void *)(v9 + 8) + 4 * v116);
                    }
                    v81[v123] = *(_DWORD *)sub_1B6534808(v79, v116, v117, v118, v119, v120, v121, v122);
                    v82[v123] = v123;
                  }
                }
              }
            }
          }
          CFIndex v101 = v131 + 1;
        }
        while ((const __CFArray *)(v131 + 1) != v129);
      }
      *(_DWORD *)(v9 + 152) = v127 >> 2;
      *(void *)(v9 + 160) = v82;
      *(void *)(v9 + 168) = v81;
    }
  }
}

uint64_t sub_1B656A840(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v4 = 0;
    int v5 = *(_DWORD *)(result + 40);
    do
    {
      int v6 = *(_DWORD *)(a3 + 4 * v4);
      if (a4 - 1 == v4) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = v4 + 1;
      }
      int v8 = *(_DWORD *)(a3 + 4 * v7);
      if (v5 == v6 && *(_DWORD *)(result + 44) == v8 || v5 == v8 && *(_DWORD *)(result + 44) == v6) {
        *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      }
      ++v4;
    }
    while (a4 != v4);
  }
  return result;
}

void sub_1B656A8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a1 + 40)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"topologyInfo");
  }

  sub_1B656A9A8();
}

void sub_1B656A9A8()
{
}

void sub_1B656AA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a2 + 40);
  if (!v11) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"topologyInfo");
  }
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 0x40000000;
  v47[2] = sub_1B656ACA8;
  v47[3] = &unk_1E6144730;
  v47[4] = a2;
  v47[5] = a1;
  sub_1B64AAFB4(a3, 0, (uint64_t)v47, a4, a5, a6, a7, a8);
  unint64_t v19 = *(void *)(a1 + 56) - *(void *)(a1 + 48);
  unsigned int v20 = (v19 >> 5);
  if ((v19 >> 5))
  {
    if (!*(_DWORD *)(v11 + 196))
    {
      uint64_t v21 = (char *)malloc_type_malloc((v19 >> 1) & 0xFF0, 0x105004037B82EA9uLL);
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(unsigned int *)(v11 + 208);
        *(_DWORD *)&v21[v22] = v23;
        *(void *)&v21[v22 + 8] = malloc_type_malloc(4 * v23, 0x100004052888210uLL);
        v22 += 16;
      }
      while (16 * v20 != v22);
      *(_DWORD *)(v11 + 196) = v20;
      *(void *)(v11 + 200) = v21;
    }
    uint64_t v24 = 0;
    if (v20 <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v20;
    }
    uint64_t v42 = v25;
    uint64_t v43 = a1;
    do
    {
      uint64_t v26 = *(void *)(a1 + 48) + 32 * v24;
      uint64_t v28 = *(void *)(v26 + 8);
      uint64_t v27 = *(void *)(v26 + 16);
      int v46 = 0;
      CFArrayRef v29 = sub_1B64ABD08(a3, v12, v13, v14, v15, v16, v17, v18);
      if ((uint64_t)v29 >= 1)
      {
        CFArrayRef v30 = v29;
        CFIndex v31 = 0;
        uint64_t v32 = (v27 - v28) >> 3;
        do
        {
          uint64_t v33 = sub_1B64ABD78(a3, v31, 0, v14, v15, v16, v17, v18);
          char v41 = sub_1B63D0C08((uint64_t)v33, v34, v35, v36, v37, v38, v39, v40);
          if (sub_1B63D0E64(v41))
          {
            v44[0] = MEMORY[0x1E4F143A8];
            v44[1] = 0x40000000;
            v44[2] = sub_1B656AFA8;
            v44[3] = &unk_1E6144750;
            v44[4] = v33;
            v44[5] = v32;
            v44[6] = v26;
            v44[7] = v11;
            char v45 = v24;
            v44[8] = &v46;
            sub_1B63D10E0((uint64_t)v33, (uint64_t)v44);
          }
          ++v31;
        }
        while (v30 != (const __CFArray *)v31);
      }
      if (v46 != *(_DWORD *)(v11 + 208)) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Error while building face-varying channel.", v13, v14, v15, v16, v17, v18, (uint64_t)"currentIndex == topologyInfo->totalIndexCount");
      }
      ++v24;
      a1 = v43;
    }
    while (v24 != v42);
  }
  else
  {
    *(_DWORD *)(v11 + 196) = 0;
    *(void *)(v11 + 200) = 0;
  }
}

void sub_1B656ACA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v12 = a3;
  if (!a3) {
    goto LABEL_4;
  }
  if ((a3 & 0xFE) != 2)
  {
    if (a3 != 4) {
      return;
    }
LABEL_4:
    if (a4) {
      return;
    }
  }
  sub_1B641D478(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v13 && sub_1B63CA9F0(BYTE4(v13), v13, v14, v15, v16, v17, v18, v19))
  {
    if (v12)
    {
      if ((v12 & 0xFE) != 2 && (v12 != 4 || a4)) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Semantic %d can not be a primvar", v20, v21, v22, v23, v24, v25, (uint64_t)"CFXSubdivSourceSemanticCanBePrimvar(semantic, inputSet, isCPUSubdiv)");
      }
      uint64_t v26 = *(void *)(a1 + 40);
      uint64_t v28 = *(unsigned __int8 **)(v26 + 48);
      CFArrayRef v29 = *(unsigned __int8 **)(v26 + 56);
      uint64_t v27 = (uint64_t *)(v26 + 48);
      while (v28 != v29)
      {
        if (*v28 == v8)
        {
          CFIndex v31 = (void **)(v28 + 8);
          goto LABEL_23;
        }
        v28 += 32;
      }
      *(_OWORD *)__p = 0u;
      long long v46 = 0u;
      sub_1B656AE94(v27, (char *)__p);
      if (__p[1])
      {
        *(void **)&long long v46 = __p[1];
        operator delete(__p[1]);
      }
      uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 56);
      *(unsigned char *)(v30 - 32) = v8;
      CFIndex v31 = (void **)(v30 - 24);
    }
    else
    {
      if (a4) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Semantic %d can not be a primvar", v20, v21, v22, v23, v24, v25, (uint64_t)"CFXSubdivSourceSemanticCanBePrimvar(semantic, inputSet, isCPUSubdiv)");
      }
      CFIndex v31 = *(void ***)(a1 + 40);
    }
LABEL_23:
    unint64_t v32 = (unint64_t)v31[2];
    uint64_t v33 = (uint64_t *)v31[1];
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v35 = ((char *)v33 - (unsigned char *)*v31) >> 3;
      if ((unint64_t)(v35 + 1) >> 61) {
        abort();
      }
      uint64_t v36 = v32 - (void)*v31;
      uint64_t v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
        uint64_t v37 = v35 + 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        uint64_t v39 = (char *)sub_1B64285D4((uint64_t)(v31 + 2), v38);
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v40 = (uint64_t *)&v39[8 * v35];
      char v41 = &v39[8 * v38];
      *uint64_t v40 = a2;
      uint64_t v34 = v40 + 1;
      uint64_t v43 = (char *)*v31;
      uint64_t v42 = (char *)v31[1];
      if (v42 != *v31)
      {
        do
        {
          uint64_t v44 = *((void *)v42 - 1);
          v42 -= 8;
          *--uint64_t v40 = v44;
        }
        while (v42 != v43);
        uint64_t v42 = (char *)*v31;
      }
      const void *v31 = v40;
      v31[1] = v34;
      v31[2] = v41;
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      *uint64_t v33 = a2;
      uint64_t v34 = v33 + 1;
    }
    v31[1] = v34;
  }
}

uint64_t sub_1B656AE94(uint64_t *a1, char *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      abort();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)sub_1B656D950(result, v12);
    uint64_t v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v15];
    *uint64_t v14 = *a2;
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 1) = 0;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *((void *)v14 + 3) = *((void *)a2 + 3);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    v16[2] = v14 + 32;
    sub_1B656D8BC(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = sub_1B656D988((uint64_t)v16);
  }
  else
  {
    *(unsigned char *)unint64_t v7 = *a2;
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 8) = 0;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *((void *)a2 + 3);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v8 = v7 + 32;
  }
  a1[1] = v8;
  return result;
}

uint64_t sub_1B656AFA8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t result = sub_1B63D1304(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  if (result >= 1)
  {
    uint64_t v15 = result;
    uint64_t v16 = 0;
    unint64_t v17 = *(void *)(a1 + 40);
    do
    {
      if (v17)
      {
        for (unint64_t i = 0; i < v17; ++i)
        {
          uint64_t v19 = sub_1B63D14A0(*(void *)(a1 + 32), v9, v16, **(unsigned __int8 **)(a1 + 48), v11, v12, v13, v14);
          uint64_t result = sub_1B641D8A0(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 8 * i), v20, v21, v22, v23, v24, v25, v26);
          int v27 = result - 1;
          if (v19 < result - 1) {
            int v27 = v19;
          }
          uint64_t v28 = *(_DWORD **)(a1 + 64);
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 200) + 16 * *(unsigned __int8 *)(a1 + 72) + 8)
                    + 4 * *v28) = v27;
          unint64_t v17 = *(void *)(a1 + 40);
        }
      }
      else
      {
        uint64_t v28 = *(_DWORD **)(a1 + 64);
      }
      ++*v28;
      ++v16;
    }
    while (v16 != v15);
  }
  return result;
}

void sub_1B656B088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(uint64_t **)a1;
  uint64_t v12 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v12)
  {
    do
    {
      uint64_t v13 = *v11++;
      sub_1B656B1AC(a2, a3, v13, 0, (uint64_t *)(a1 + 72), 0, a7, a8);
    }
    while (v11 != v12);
  }
  uint64_t v14 = *(uint64_t **)(a1 + 24);
  uint64_t v15 = *(uint64_t **)(a1 + 32);
  while (v14 != v15)
  {
    uint64_t v16 = *v14++;
    sub_1B656B1AC(a2, a3, v16, 0, (uint64_t *)(a1 + 144), 1, a7, a8);
  }
  unint64_t v17 = *(void *)(a1 + 56) - *(void *)(a1 + 48);
  unint64_t v18 = (v17 >> 5);
  sub_1B656B318((uint64_t *)(a1 + 216), v18);
  if ((v17 & 0x1FE0) != 0)
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = *(void *)(a1 + 48) + 32 * v21;
      uint64_t v23 = *(uint64_t **)(v22 + 8);
      uint64_t v24 = *(uint64_t **)(v22 + 16);
      if (v23 != v24)
      {
        uint64_t v25 = (uint64_t *)(*(void *)(a1 + 216) + 72 * v21);
        do
        {
          uint64_t v26 = *v23++;
          sub_1B656B1AC(a2, a3, v26, v21, v25, 2, v19, v20);
        }
        while (v23 != v24);
      }
      ++v21;
    }
    while (v21 != v18);
  }
}

void sub_1B656B1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(void *)(a1 + 40);
  if (!v13) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"topologyInfo");
  }
  sub_1B641D478(a3, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if ((v14 & 0xFE00000000) == 0x1600000000) {
    int v21 = 4;
  }
  else {
    int v21 = HIBYTE(v14);
  }
  switch(v21)
  {
    case 4:
      sub_1B656DEEC((uint64_t)v22, a3, v13, a2, a4, a6, v19, v20);
      sub_1B656DA1C(a5 + 6, (uint64_t)v22);
      break;
    case 3:
      sub_1B656DEEC((uint64_t)v22, a3, v13, a2, a4, a6, v19, v20);
      sub_1B656DA1C(a5 + 3, (uint64_t)v22);
      break;
    case 2:
      sub_1B656DB3C((uint64_t)v22, a3, v13, a2, a4, a6, v19, v20);
      sub_1B656DA1C(a5, (uint64_t)v22);
      break;
    default:
      sub_1B63F2F54(16, @"Unreachable code: Can not subdivide primvar data with %d values per component", v15, v16, v17, v18, v19, v20, HIBYTE(v14));
      return;
  }
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_1B656B318(uint64_t *a1, unint64_t a2)
{
  int32x4_t v3 = (void **)a1[1];
  unint64_t v4 = 0x8E38E38E38E38E39 * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1B656E0AC(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 72 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 9;
      sub_1B6539AC0(v3);
    }
    a1[1] = v7;
  }
}

void sub_1B656B3B8(uint64_t a1, double a2, float32x4_t a3, float32x4_t a4, uint64_t a5, uint64_t a6, int **a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_1B656B450((void *)(a1 + 72), a6, a7, a2, a3, a4, (uint64_t)a7, a8, a9, a10, a11);
  sub_1B656B450((void *)(a1 + 144), a6, a7, v19, v20, v21, v14, v15, v16, v17, v18);
  int v30 = *(_DWORD *)(a1 + 48);
  if (((*(_DWORD *)(a1 + 56) - v30) >> 5))
  {
    uint64_t v31 = 0;
    uint64_t v32 = 72 * ((*(_DWORD *)(a1 + 56) - v30) >> 5);
    do
    {
      sub_1B656B450((void *)(*(void *)(a1 + 216) + v31), a6, a7, v27, v28, v29, v22, v23, v24, v25, v26);
      v31 += 72;
    }
    while (v32 != v31);
  }
}

void sub_1B656B450(void *a1, uint64_t a2, int **a3, double a4, float32x4_t a5, float32x4_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((*(unsigned char *)(a2 + 8) & 0x3C) != 0)
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = a1[1] - *a1;
      if (v15)
      {
        uint64_t v16 = 0;
        unint64_t v17 = v15 / 112;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        do
        {
          sub_1B656E3D0(*a1 + v16, v14 + 1, a3, a2, a8, a9, a10, a11, a4, *(double *)a5.i64);
          v16 += 112;
          --v18;
        }
        while (v18);
      }
      uint64_t v19 = a1[4] - a1[3];
      if (v19)
      {
        uint64_t v20 = 0;
        unint64_t v21 = v19 / 112;
        if (v21 <= 1) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = v21;
        }
        do
        {
          sub_1B656E590(a1[3] + v20, v14 + 1, a3, a2, a8, a9, a10, a11, a4, *(double *)a5.i64, a6);
          v20 += 112;
          --v22;
        }
        while (v22);
      }
      uint64_t v23 = a1[7] - a1[6];
      if (v23)
      {
        uint64_t v24 = 0;
        unint64_t v25 = v23 / 112;
        if (v25 <= 1) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = v25;
        }
        do
        {
          sub_1B656EA34(a1[6] + v24, v14 + 1, a3, a2, a8, a9, a10, a11, a4, a5);
          v24 += 112;
          --v26;
        }
        while (v26);
      }
      ++v14;
    }
    while (v14 < (((unint64_t)*(unsigned __int8 *)(a2 + 8) >> 2) & 0xF));
  }
}

void sub_1B656B5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a2 + 40);
  if (!v11) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"topologyInfo");
  }
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v137[0] = MEMORY[0x1E4F143A8];
  v137[1] = 0x40000000;
  v137[2] = sub_1B656BC68;
  v137[3] = &unk_1E6144770;
  v137[4] = a2;
  v137[5] = a1;
  uint64_t v125 = a3;
  sub_1B64AAFB4(a3, 0, (uint64_t)v137, a4, a5, a6, a7, a8);
  uint64_t v119 = *(void *)(a1 + 8);
  uint64_t v120 = *(void *)(a1 + 16);
  uint64_t v117 = *(void *)(a1 + 64);
  uint64_t v118 = *(void *)(a1 + 72);
  uint64_t v128 = (void **)(a1 + 32);
  sub_1B656C00C((void **)(a1 + 32), (*(_DWORD *)(v11 + 208) * *(_DWORD *)a1));
  size_t v127 = (void **)(a1 + 88);
  sub_1B656C00C((void **)(a1 + 88), (*(_DWORD *)(v11 + 208) * *(_DWORD *)(a1 + 56)));
  uint64_t v19 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  while (v19 != v20)
  {
    sub_1B656C00C((void **)(v19 + 40), (*(_DWORD *)(v11 + 208) * *(_DWORD *)(v19 + 8)));
    v19 += 64;
  }
  uint64_t v122 = v11;
  if (*(_DWORD *)(v11 + 104))
  {
    uint64_t v21 = 0;
    uint64_t v22 = (void *)(a1 + 48);
    uint64_t v23 = (void *)(a1 + 104);
    if ((unint64_t)((v120 - v119) >> 4) <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = (v120 - v119) >> 4;
    }
    if ((unint64_t)((v118 - v117) >> 4) <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = (v118 - v117) >> 4;
    }
    uint64_t v123 = v25;
    uint64_t v124 = v24;
    do
    {
      uint64_t v121 = v21;
      int v126 = *(_DWORD *)(*(void *)(v11 + 32) + 4 * v21);
      if (v120 != v119)
      {
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = *(void *)(a1 + 8) + 16 * v26;
          unsigned int v28 = *(_DWORD *)(v27 + 4);
          uint64_t v35 = sub_1B641D478(*(void *)(v27 + 8), v12, v13, v14, v15, v16, v17, v18);
          __int16 v40 = WORD2(v39);
          unint64_t v41 = HIBYTE(v39);
          if (HIBYTE(v39) >= 5) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. Primvar data size is too big (cannot fit %d floats in a float4)", v29, v30, v31, v32, v33, v34, (uint64_t)"srcContent.componentCount <= 4");
          }
          *(double *)v42.i64 = sub_1B65D6198(v40, (const float *)(v35 + HIBYTE(v40) * v126), v29, v30, v31, v32, v33, v34, v36, v37, v38);
          if (v28)
          {
            unsigned __int8 v43 = 0;
            v44.i32[0] = 0;
            v44.i32[1] = v41;
            int32x4_t v45 = vzip1q_s32((int32x4_t)(unint64_t)v44, vdupq_lane_s32(v44, 1));
            v46.i64[0] = v41 | 0x100000000;
            v46.i64[1] = 0x300000002;
            unsigned __int16 v47 = vmovn_s32(vceqq_s32(v45, v46)).u16[0];
            *(int16x4_t *)v45.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v45, (uint32x4_t)v46));
            v45.i16[0] = v47;
            int8x16_t v48 = (int8x16_t)xmmword_1B6E4F370;
            v48.i32[0] = v42.i32[0];
            v42.i32[0] = 0;
            int8x16_t v49 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v45.i8), v42, v48);
            CFIndex v50 = *(char **)(a1 + 40);
            int8x16_t v129 = v49;
            do
            {
              int8x16_t v133 = v49;
              int v51 = *(_DWORD *)((unint64_t)&v133 & 0xFFFFFFFFFFFFFFF3 | (4 * (v43 & 3)));
              if ((unint64_t)v50 >= *v22)
              {
                uint64_t v53 = (char *)*v128;
                uint64_t v54 = (v50 - (unsigned char *)*v128) >> 2;
                unint64_t v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 62) {
LABEL_84:
                }
                  abort();
                uint64_t v56 = *v22 - (void)v53;
                if (v56 >> 1 > v55) {
                  unint64_t v55 = v56 >> 1;
                }
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v12 = v55;
                }
                if (v12)
                {
                  uint64_t v57 = (char *)sub_1B64282E0(a1 + 48, v12);
                  uint64_t v53 = *(char **)(a1 + 32);
                  CFIndex v50 = *(char **)(a1 + 40);
                }
                else
                {
                  uint64_t v57 = 0;
                }
                uint64_t v58 = &v57[4 * v54];
                *(_DWORD *)uint64_t v58 = v51;
                unint64_t v52 = v58 + 4;
                while (v50 != v53)
                {
                  int v59 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v58 - 1) = v59;
                  v58 -= 4;
                }
                *(void *)(a1 + 32) = v58;
                *(void *)(a1 + 40) = v52;
                *(void *)(a1 + 48) = &v57[4 * v12];
                if (v53) {
                  operator delete(v53);
                }
                int8x16_t v49 = v129;
              }
              else
              {
                *(_DWORD *)CFIndex v50 = v51;
                unint64_t v52 = v50 + 4;
              }
              *(void *)(a1 + 40) = v52;
              ++v43;
              CFIndex v50 = v52;
            }
            while (v28 > v43);
          }
          ++v26;
        }
        while (v26 != v124);
      }
      if (v118 != v117)
      {
        uint64_t v60 = 0;
        do
        {
          uint64_t v61 = *(void *)(a1 + 64) + 16 * v60;
          unsigned int v62 = *(_DWORD *)(v61 + 4);
          uint64_t v69 = sub_1B641D478(*(void *)(v61 + 8), v12, v13, v14, v15, v16, v17, v18);
          __int16 v74 = WORD2(v73);
          unint64_t v75 = HIBYTE(v73);
          if (HIBYTE(v73) >= 5) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. Primvar data size is too big (cannot fit %d floats in a float4)", v63, v64, v65, v66, v67, v68, (uint64_t)"srcContent.componentCount <= 4");
          }
          *(double *)v76.i64 = sub_1B65D6198(v74, (const float *)(v69 + HIBYTE(v74) * v126), v63, v64, v65, v66, v67, v68, v70, v71, v72);
          if (v62)
          {
            unsigned __int8 v77 = 0;
            v78.i32[0] = 0;
            v78.i32[1] = v75;
            int32x4_t v79 = vzip1q_s32((int32x4_t)(unint64_t)v78, vdupq_lane_s32(v78, 1));
            v80.i64[0] = v75 | 0x100000000;
            v80.i64[1] = 0x300000002;
            unsigned __int16 v81 = vmovn_s32(vceqq_s32(v79, v80)).u16[0];
            *(int16x4_t *)v79.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v79, (uint32x4_t)v80));
            v79.i16[0] = v81;
            int8x16_t v82 = (int8x16_t)xmmword_1B6E4F370;
            v82.i32[0] = v76.i32[0];
            v76.i32[0] = 0;
            int8x16_t v83 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v79.i8), v76, v82);
            uint64_t v84 = *(char **)(a1 + 96);
            int8x16_t v130 = v83;
            do
            {
              int8x16_t v132 = v83;
              int v85 = *(_DWORD *)((unint64_t)&v132 & 0xFFFFFFFFFFFFFFF3 | (4 * (v77 & 3)));
              if ((unint64_t)v84 >= *v23)
              {
                uint64_t v87 = (char *)*v127;
                uint64_t v88 = (v84 - (unsigned char *)*v127) >> 2;
                unint64_t v89 = v88 + 1;
                if ((unint64_t)(v88 + 1) >> 62) {
                  goto LABEL_84;
                }
                uint64_t v90 = *v23 - (void)v87;
                if (v90 >> 1 > v89) {
                  unint64_t v89 = v90 >> 1;
                }
                if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v12 = v89;
                }
                if (v12)
                {
                  uint64_t v91 = (char *)sub_1B64282E0(a1 + 104, v12);
                  uint64_t v87 = *(char **)(a1 + 88);
                  uint64_t v84 = *(char **)(a1 + 96);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                uint64_t v92 = &v91[4 * v88];
                *(_DWORD *)uint64_t v92 = v85;
                uint64_t v86 = v92 + 4;
                while (v84 != v87)
                {
                  int v93 = *((_DWORD *)v84 - 1);
                  v84 -= 4;
                  *((_DWORD *)v92 - 1) = v93;
                  v92 -= 4;
                }
                *(void *)(a1 + 88) = v92;
                *(void *)(a1 + 96) = v86;
                *(void *)(a1 + 104) = &v91[4 * v12];
                if (v87) {
                  operator delete(v87);
                }
                int8x16_t v83 = v130;
              }
              else
              {
                *(_DWORD *)uint64_t v84 = v85;
                uint64_t v86 = v84 + 4;
              }
              *(void *)(a1 + 96) = v86;
              ++v77;
              uint64_t v84 = v86;
            }
            while (v62 > v77);
          }
          ++v60;
        }
        while (v60 != v123);
      }
      uint64_t v11 = v122;
      uint64_t v21 = v121 + 1;
    }
    while (v121 + 1 < (unint64_t)*(unsigned int *)(v122 + 104));
  }
  unint64_t v94 = *(void *)(a1 + 120) - *(void *)(a1 + 112);
  unsigned int v95 = (v94 >> 6);
  if ((v94 >> 6))
  {
    if (!*(_DWORD *)(v11 + 196))
    {
      uint64_t v96 = (char *)malloc_type_malloc((v94 >> 2) & 0xFF0, 0x105004037B82EA9uLL);
      uint64_t v97 = 0;
      do
      {
        uint64_t v98 = *(unsigned int *)(v11 + 208);
        *(_DWORD *)&v96[v97] = v98;
        *(void *)&v96[v97 + 8] = malloc_type_malloc(4 * v98, 0x100004052888210uLL);
        v97 += 16;
      }
      while (16 * v95 != v97);
      *(_DWORD *)(v11 + 196) = v95;
      *(void *)(v11 + 200) = v96;
    }
    uint64_t v99 = 0;
    if (v95 <= 1) {
      uint64_t v100 = 1;
    }
    else {
      uint64_t v100 = v95;
    }
    uint64_t v131 = v100;
    do
    {
      uint64_t v101 = *(void *)(a1 + 112) + (v99 << 6);
      uint64_t v103 = *(void *)(v101 + 16);
      uint64_t v102 = *(void *)(v101 + 24);
      int v136 = 0;
      CFArrayRef v104 = sub_1B64ABD08(v125, v12, v13, v14, v15, v16, v17, v18);
      if ((uint64_t)v104 >= 1)
      {
        CFArrayRef v105 = v104;
        CFIndex v106 = 0;
        uint64_t v107 = (v102 - v103) >> 4;
        do
        {
          uint64_t v108 = sub_1B64ABD78(v125, v106, 0, v14, v15, v16, v17, v18);
          char v116 = sub_1B63D0C08((uint64_t)v108, v109, v110, v111, v112, v113, v114, v115);
          if (sub_1B63D0E64(v116))
          {
            v134[0] = MEMORY[0x1E4F143A8];
            v134[1] = 0x40000000;
            v134[2] = sub_1B656C0B0;
            v134[3] = &unk_1E6144790;
            v134[4] = v108;
            v134[5] = v107;
            v134[6] = v101;
            v134[7] = v122;
            char v135 = v99;
            v134[8] = &v136;
            sub_1B63D10E0((uint64_t)v108, (uint64_t)v134);
          }
          ++v106;
        }
        while (v105 != (const __CFArray *)v106);
      }
      if (v136 != *(_DWORD *)(v122 + 208)) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Error while building face-varying channel.", v13, v14, v15, v16, v17, v18, (uint64_t)"overallVertexIndex == topologyInfo->totalIndexCount");
      }
      ++v99;
    }
    while (v99 != v131);
  }
  else
  {
    *(_DWORD *)(v11 + 196) = 0;
    *(void *)(v11 + 200) = 0;
  }
}

void sub_1B656BC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v10 = a3;
  if (a3)
  {
    if ((a3 & 0xFFFFFFFE) != 2) {
      return;
    }
  }
  else if (a4)
  {
    return;
  }
  sub_1B641D478(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v13)
  {
    unint64_t v20 = sub_1B63CA9F0(BYTE4(v13), v13, v14, v15, v16, v17, v18, v19);
    if (v20)
    {
      if (v10 == 3)
      {
        int v29 = 2;
      }
      else
      {
        if (v10 != 2)
        {
          if (v10)
          {
            uint64_t v30 = sub_1B641CDD4(v10);
            sub_1B63F2F54(16, @"Unreachable code: Invalid GPU primvar semantic '%@'", v31, v32, v33, v34, v35, v36, (uint64_t)v30);
            int v29 = 0;
            uint64_t v28 = *(void *)(a1 + 32);
          }
          else
          {
            uint64_t v28 = *(void *)(a1 + 32);
            int v29 = 3;
            if (!a4)
            {
LABEL_17:
              uint64_t v37 = *(void *)(v28 + 40);
              if (!v37) {
                sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v22, v23, v24, v25, v26, v27, (uint64_t)"topologyInfo");
              }
              for (uint64_t i = *(void *)(v37 + 80); ; i += 16)
              {
                if (i == *(void *)(v37 + 88))
                {
                  sub_1B63F2F54(16, @"Unreachable code: Could not find mesh source indexing info for source %p", v22, v23, v24, v25, v26, v27, a2);
LABEL_51:
                  sub_1B6E308D8(v20, v21, v22, v23, v24, v25, v26, v27);
                }
                if (*(void *)i == a2) {
                  break;
                }
              }
              switch(*(_DWORD *)(i + 12))
              {
                case 1:
                  uint64_t v39 = *(void *)(a1 + 40);
                  goto LABEL_32;
                case 2:
                  uint64_t v39 = *(void *)(a1 + 40) + 56;
                  goto LABEL_32;
                case 3:
                  uint64_t v40 = *(void *)(a1 + 40);
                  int8x16_t v42 = *(unsigned __int8 **)(v40 + 112);
                  unsigned __int8 v43 = *(unsigned __int8 **)(v40 + 120);
                  unint64_t v41 = (uint64_t *)(v40 + 112);
                  break;
                default:
                  goto LABEL_51;
              }
              while (1)
              {
                if (v42 == v43)
                {
                  memset(v59, 0, sizeof(v59));
                  sub_1B656BF38(v41, (uint64_t)v59);
                  sub_1B656BFC8(v59);
                  uint64_t v44 = *(void *)(*(void *)(a1 + 40) + 120);
                  *(_DWORD *)(v44 - 56) = 0;
                  uint64_t v39 = v44 - 56;
                  *(unsigned char *)(v39 - 8) = v8;
                  goto LABEL_32;
                }
                if (*v42 == v8) {
                  break;
                }
                v42 += 64;
              }
              uint64_t v39 = (uint64_t)(v42 + 8);
LABEL_32:
              int v45 = *(_DWORD *)v39;
              unint64_t v46 = *(void *)(v39 + 16);
              unint64_t v47 = *(void *)(v39 + 24);
              if (v46 >= v47)
              {
                uint64_t v49 = *(void *)(v39 + 8);
                uint64_t v50 = (uint64_t)(v46 - v49) >> 4;
                unint64_t v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 60) {
                  abort();
                }
                uint64_t v52 = v47 - v49;
                if (v52 >> 3 > v51) {
                  unint64_t v51 = v52 >> 3;
                }
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v53 = v51;
                }
                if (v53) {
                  uint64_t v54 = (char *)sub_1B6427C8C(v39 + 24, v53);
                }
                else {
                  uint64_t v54 = 0;
                }
                unint64_t v55 = &v54[16 * v50];
                uint64_t v56 = &v54[16 * v53];
                *(_DWORD *)unint64_t v55 = v45;
                *((_DWORD *)v55 + 1) = v29;
                *((void *)v55 + 1) = a2;
                int8x16_t v48 = v55 + 16;
                uint64_t v58 = *(char **)(v39 + 8);
                uint64_t v57 = *(char **)(v39 + 16);
                if (v57 != v58)
                {
                  do
                  {
                    *((_OWORD *)v55 - 1) = *((_OWORD *)v57 - 1);
                    v55 -= 16;
                    v57 -= 16;
                  }
                  while (v57 != v58);
                  uint64_t v57 = *(char **)(v39 + 8);
                }
                *(void *)(v39 + 8) = v55;
                *(void *)(v39 + 16) = v48;
                *(void *)(v39 + 24) = v56;
                if (v57) {
                  operator delete(v57);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v46 = v45;
                *(_DWORD *)(v46 + 4) = v29;
                int8x16_t v48 = (char *)(v46 + 16);
                *(void *)(v46 + 8) = a2;
              }
              *(void *)(v39 + 16) = v48;
              *(_DWORD *)v39 += v29;
              return;
            }
          }
          sub_1B63F2F54(17, @"Assertion '%s' failed. Semantic %d can not be a primvar", v22, v23, v24, v25, v26, v27, (uint64_t)"CFXSubdivSourceSemanticCanBePrimvar(semantic, inputSet, isCPUSubdiv)");
          goto LABEL_17;
        }
        int v29 = 4;
      }
      uint64_t v28 = *(void *)(a1 + 32);
      goto LABEL_17;
    }
  }
}

uint64_t sub_1B656BF38(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_1B657B2A4(a1, (char *)a2);
  }
  else
  {
    *(unsigned char *)unint64_t v3 = *(unsigned char *)a2;
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(v3 + 24) = 0;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 16) = 0;
    *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(v3 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(v3 + 56) = *(void *)(a2 + 56);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    uint64_t result = v3 + 64;
  }
  a1[1] = result;
  return result;
}

void *sub_1B656BFC8(void *a1)
{
  int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1B656C00C(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_1B64282E0(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1B656C0B0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v71 = a2;
  uint64_t v70 = sub_1B63D1304(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  if (v70 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = *(void *)(a1 + 40);
    do
    {
      if (v14)
      {
        for (unint64_t i = 0; i < v14; ++i)
        {
          uint64_t v16 = sub_1B63D14A0(*(void *)(a1 + 32), v71, v13, **(unsigned __int8 **)(a1 + 48), v9, v10, v11, v12);
          uint64_t v24 = sub_1B641D8A0(*(void *)(*(void *)(*(void *)(a1 + 48) + 16) + 16 * i + 8), v17, v18, v19, v20, v21, v22, v23);
          uint64_t v32 = *(void *)(a1 + 48);
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 200) + 16 * *(unsigned __int8 *)(a1 + 72) + 8)
                    + 4 * **(unsigned int **)(a1 + 64)) = **(_DWORD **)(a1 + 64);
          if (v16 >= v24 - 1) {
            int v33 = v24 - 1;
          }
          else {
            int v33 = v16;
          }
          uint64_t v34 = *(void *)(v32 + 16) + 16 * i;
          unsigned int v35 = *(_DWORD *)(v34 + 4);
          uint64_t v42 = sub_1B641D478(*(void *)(v34 + 8), v25, v26, v27, v28, v29, v30, v31);
          __int16 v47 = WORD2(v46);
          unint64_t v48 = HIBYTE(v46);
          if (HIBYTE(v46) >= 5) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. Primvar data size is too big (cannot fit %d floats in a float4)", v36, v37, v38, v39, v40, v41, (uint64_t)"srcContent.componentCount <= 4");
          }
          *(double *)v49.i64 = sub_1B65D6198(v47, (const float *)(v42 + HIBYTE(v47) * v33), v36, v37, v38, v39, v40, v41, v43, v44, v45);
          if (v35)
          {
            unsigned __int8 v50 = 0;
            v51.i32[0] = 0;
            v51.i32[1] = v48;
            v52.i64[0] = v48 | 0x100000000;
            int32x4_t v53 = vzip1q_s32((int32x4_t)(unint64_t)v51, vdupq_lane_s32(v51, 1));
            v52.i64[1] = 0x300000002;
            unsigned __int16 v54 = vmovn_s32(vceqq_s32(v53, v52)).u16[0];
            *(int16x4_t *)v53.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v53, (uint32x4_t)v52));
            v53.i16[0] = v54;
            int8x16_t v55 = (int8x16_t)xmmword_1B6E4F370;
            v55.i32[0] = v49.i32[0];
            v49.i32[0] = 0;
            int8x16_t v56 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v53.i8), v49, v55);
            int8x16_t v72 = v56;
            do
            {
              uint64_t v57 = *(void **)(a1 + 48);
              int8x16_t v73 = v56;
              int v58 = *(_DWORD *)((unint64_t)&v73 & 0xFFFFFFFFFFFFFFF3 | (4 * (v50 & 3)));
              int v59 = (char *)v57[6];
              unint64_t v60 = v57[7];
              if ((unint64_t)v59 >= v60)
              {
                unsigned int v62 = (char *)v57[5];
                uint64_t v63 = (v59 - v62) >> 2;
                unint64_t v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62) {
                  abort();
                }
                uint64_t v65 = v60 - (void)v62;
                if (v65 >> 1 > v64) {
                  unint64_t v64 = v65 >> 1;
                }
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v66 = v64;
                }
                if (v66)
                {
                  uint64_t v67 = (char *)sub_1B64282E0((uint64_t)(v57 + 7), v66);
                  unsigned int v62 = (char *)v57[5];
                  int v59 = (char *)v57[6];
                }
                else
                {
                  uint64_t v67 = 0;
                }
                uint64_t v68 = &v67[4 * v63];
                *(_DWORD *)uint64_t v68 = v58;
                uint64_t v61 = v68 + 4;
                while (v59 != v62)
                {
                  int v69 = *((_DWORD *)v59 - 1);
                  v59 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                v57[5] = v68;
                v57[6] = v61;
                v57[7] = &v67[4 * v66];
                if (v62) {
                  operator delete(v62);
                }
                int8x16_t v56 = v72;
              }
              else
              {
                *(_DWORD *)int v59 = v58;
                uint64_t v61 = v59 + 4;
              }
              v57[6] = v61;
              ++v50;
            }
            while (v35 > v50);
          }
          unint64_t v14 = *(void *)(a1 + 40);
        }
      }
      ++**(_DWORD **)(a1 + 64);
      ++v13;
    }
    while (v13 != v70);
  }
}

void sub_1B656C358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __p = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v14 = sub_1B64ABD08(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v14)
  {
    CFIndex v15 = 0;
    int v16 = 0;
    do
    {
      uint64_t v17 = sub_1B64ABD78(a2, v15, 0, v9, v10, v11, v12, v13);
      char v25 = sub_1B63D0C08((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
      if (sub_1B63D0E64(v25))
      {
        v16 += sub_1B63D10A4((uint64_t)v17);
        uint64_t v26 = v37;
        if (v37 >= v38)
        {
          uint64_t v28 = __p;
          uint64_t v29 = (v37 - __p) >> 2;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            abort();
          }
          uint64_t v31 = v38 - __p;
          if ((v38 - __p) >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            int v33 = (char *)sub_1B64282E0((uint64_t)&v38, v32);
            uint64_t v28 = __p;
            uint64_t v26 = v37;
          }
          else
          {
            int v33 = 0;
          }
          uint64_t v34 = &v33[4 * v29];
          *(_DWORD *)uint64_t v34 = v16;
          uint64_t v27 = v34 + 4;
          while (v26 != v28)
          {
            int v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          __p = v34;
          uint64_t v38 = &v33[4 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v37 = v16;
          uint64_t v27 = v37 + 4;
        }
        uint64_t v37 = v27;
      }
      ++v15;
    }
    while (v15 != v14);
  }
  operator new();
}

uint64_t sub_1B656C77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v66 = 0;
  uint64_t v67 = &v66;
  uint64_t v68 = 0x2000000000;
  int v69 = 0;
  uint64_t v63 = 0;
  unint64_t v64 = 0;
  uint64_t v65 = 0;
  unsigned __int8 v10 = sub_1B64ABD08(a3, a2, a3, a4, a5, a6, a7, a8);
  if ((v10 & 0xFE) == 0) {
    goto LABEL_34;
  }
  CFIndex v16 = 0;
  uint64_t v17 = v10;
  do
  {
    uint64_t v18 = sub_1B64ABD78(a3, v16, 0, v11, v12, v13, v14, v15);
    unsigned int v26 = sub_1B63D0C08((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25);
    if (!sub_1B63D0E64(v26)) {
      goto LABEL_27;
    }
    if (v26 >= 2)
    {
      if (v26 == 4)
      {
        unsigned __int8 v29 = sub_1B64ACE9C(a3, 0, 0, v11, v12, v13, v14, v15);
        uint64_t v59 = 0;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v56 = 0u;
        sub_1B63D11F0((uint64_t)v18, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v56);
        v61[0] = v56;
        v61[1] = v57;
        v61[2] = v58;
        uint64_t v62 = v59;
        v60[0] = MEMORY[0x1E4F143A8];
        v60[1] = 0x40000000;
        v60[2] = sub_1B656CD4C;
        v60[3] = &unk_1E61447B8;
        v60[4] = &v66;
        sub_1B63D2A6C((uint64_t)v61, (uint64_t)v60, v36, v37, v38, v39, v40, v41);
        goto LABEL_10;
      }
      if (v26 != 5)
      {
        sub_1B63F2F54(16, @"Unreachable code: Internal consistency error - Unexpected element type", v27, v11, v12, v13, v14, v15, v54);
        goto LABEL_10;
      }
    }
    int v28 = sub_1B63D10A4((uint64_t)v18);
    *((_DWORD *)v67 + 6) += 3 * v28;
LABEL_10:
    uint64_t v42 = v67;
    float32x4_t v43 = v64;
    if (v64 >= v65)
    {
      float v45 = v63;
      uint64_t v46 = (v64 - v63) >> 2;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 62) {
        abort();
      }
      uint64_t v48 = v65 - v63;
      if ((v65 - v63) >> 1 > v47) {
        unint64_t v47 = v48 >> 1;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        unsigned __int8 v50 = (char *)sub_1B64282E0((uint64_t)&v65, v49);
        float v45 = v63;
        float32x4_t v43 = v64;
      }
      else
      {
        unsigned __int8 v50 = 0;
      }
      int32x2_t v51 = &v50[4 * v46];
      *(_DWORD *)int32x2_t v51 = *((_DWORD *)v42 + 6);
      float v44 = v51 + 4;
      while (v43 != v45)
      {
        int v52 = *((_DWORD *)v43 - 1);
        v43 -= 4;
        *((_DWORD *)v51 - 1) = v52;
        v51 -= 4;
      }
      uint64_t v63 = v51;
      unint64_t v64 = v44;
      uint64_t v65 = &v50[4 * v49];
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v64 = *((_DWORD *)v67 + 6);
      float v44 = v43 + 4;
    }
    unint64_t v64 = v44;
LABEL_27:
    ++v16;
  }
  while (v16 != v17);
  if (((unint64_t)(v64 - v63) >> 2) >= 2)
  {
    sub_1B6E1646C(&v56, a2);
    sub_1B657B548(v55, ((*((void *)&v56 + 1) - (void)v56) >> 4));
    operator new();
  }
  if (v63)
  {
    unint64_t v64 = v63;
    operator delete(v63);
  }
LABEL_34:
  _Block_object_dispose(&v66, 8);
  return 0;
}

uint64_t sub_1B656CD4C(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 4) {
    int v4 = 1;
  }
  else {
    int v4 = a4;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) += v4;
  return result;
}

void sub_1B656CD6C(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (uint64_t *)(*(void *)(a3 + 88) + 24 * (((unint64_t)*(unsigned __int8 *)(a3 + 8) >> 2) & 0xF));
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  sub_1B656D314(a2, a4, v13, a1 + 9, 0, (void **)&v39, a7, a8);
  sub_1B656D314(a2, a4, v13, a1 + 18, 0, (void **)&v39, v14, v15);
  uint64_t v20 = (void *)a1[27];
  uint64_t v21 = (void *)a1[28];
  while (v20 != v21)
  {
    sub_1B656D314(a2, a4, v13, v20, 1, (void **)&v39, v18, v19);
    v20 += 9;
  }
  uint64_t v36 = (uint64_t)&v36;
  CFIndex v22 = (-85 * ((v40 - v39) >> 3));
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v37 = (char *)&v36 - v23;
  CFAllocatorRef v38 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
  Mutable = CFArrayCreateMutable(v38, v22, MEMORY[0x1E4F1D510]);
  if (v22)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 24 * v22;
    uint64_t v33 = v37;
    do
    {
      uint64_t v34 = (const void **)&v39[v31];
      if (v39[v31]) {
        char v35 = v39[v31 + 1] + 1;
      }
      else {
        char v35 = 0;
      }
      *v33++ = v35;
      CFArrayAppendValue(Mutable, v34[2]);
      CFRelease(v34[2]);
      v31 += 24;
    }
    while (v32 != v31);
  }
  sub_1B656C358(a3, a5, v24, v25, v26, v27, v28, v29);
}

void sub_1B656D314(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = a4[1] - *a4;
  if (v14)
  {
    uint64_t v15 = 0;
    unint64_t v16 = v14 / 112;
    if (v16 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
    do
    {
      sub_1B657B7C0(*a4 + v15, a3, a2, a5, a1 + 2, a6, a7, a8);
      v15 += 112;
      --v17;
    }
    while (v17);
  }
  uint64_t v18 = a4[4] - a4[3];
  if (v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v18 / 112;
    if (v20 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v20;
    }
    do
    {
      sub_1B657BDFC(a4[3] + v19, a3, a2, a5, a1 + 2, a6, a7, a8);
      v19 += 112;
      --v21;
    }
    while (v21);
  }
  uint64_t v22 = a4[7] - a4[6];
  if (v22)
  {
    uint64_t v23 = 0;
    unint64_t v24 = v22 / 112;
    uint64_t v25 = a1 + 2;
    if (v24 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v24;
    }
    do
    {
      sub_1B657C4A4(a4[6] + v23, a3, a2, a5, v25, a6, a7, a8);
      v23 += 112;
      --v26;
    }
    while (v26);
  }
}

void sub_1B656D494(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 168);
  if (v1)
  {
    free(*(void **)(v1 + 136));
    free(*(void **)(v1 + 144));
    free(*(void **)(v1 + 160));
    free(*(void **)(v1 + 168));
    *(_DWORD *)(v1 + 128) = 0;
    *(void *)(v1 + 136) = 0;
    *(void *)(v1 + 144) = 0;
    *(_DWORD *)(v1 + 152) = 0;
    *(void *)(v1 + 160) = 0;
    *(void *)(v1 + 168) = 0;
  }
}

void sub_1B656D4E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 168);
  if (v1)
  {
    if (*(int *)(v1 + 196) >= 1)
    {
      int v3 = 0;
      do
        free(*(void **)(*(void *)(v1 + 200) + 16 * v3++ + 8));
      while (*(_DWORD *)(v1 + 196) > (int)v3);
    }
    free(*(void **)(v1 + 200));
    free(*(void **)(v1 + 112));
    free(*(void **)(v1 + 120));
    free(*(void **)(v1 + 136));
    free(*(void **)(v1 + 144));
    free(*(void **)(v1 + 160));
    free(*(void **)(v1 + 168));
    free(*(void **)(v1 + 184));
    int v4 = *(void **)(v1 + 80);
    if (v4)
    {
      *(void *)(v1 + 88) = v4;
      operator delete(v4);
    }
    int64_t v5 = *(void **)(v1 + 56);
    if (v5) {
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(v1 + 32);
    if (v6)
    {
      *(void *)(v1 + 40) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(v1 + 8);
    if (v7)
    {
      *(void *)(v1 + 16) = v7;
      operator delete(v7);
    }
    free(*(void **)(a1 + 168));
    *(void *)(a1 + 168) = 0;
  }
}

void sub_1B656D5D0(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      abort();
    }
    unsigned __int8 v10 = 0;
    long long v11 = 0uLL;
    sub_1B656D674(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_1B656D6B8(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    int v4 = *a1;
    *a1 = v10;
    unsigned __int8 v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void *sub_1B656D674(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    abort();
  }
  uint64_t result = sub_1B64285D4((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_1B656D6B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_1B656D75C(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_1B656D75C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  sub_1B656D7EC((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_1B656D7EC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t *sub_1B656D8BC(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(unsigned char *)(v6 - 32) = *(unsigned char *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_1B656D950(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_1B63C8620();
  }
  return operator new(32 * a2);
}

uint64_t sub_1B656D988(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B656D9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void sub_1B656DA1C(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 4);
    if ((unint64_t)(v9 + 1) > 0x249249249249249) {
      abort();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x124924924924924) {
      unint64_t v12 = 0x249249249249249;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      int v13 = (char *)sub_1B656DE50(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = v13;
    int v15 = &v13[112 * v9];
    int v17 = &v13[112 * v12];
    sub_1B656DCFC((uint64_t)v15, a2);
    uint64_t v16 = v15 + 112;
    sub_1B656DDC8(a1, &v14);
    uint64_t v8 = a1[1];
    sub_1B656DE9C((uint64_t)&v14);
  }
  else
  {
    sub_1B656DCFC(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 112;
  }
  a1[1] = v8;
}

uint64_t sub_1B656DB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 72) = a5;
  unint64_t v11 = ((unint64_t)*(unsigned __int8 *)(a4 + 8) >> 2) & 0xF;
  *(_DWORD *)(a1 + 76) = v11;
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = a6;
  unint64_t v12 = *(uint64_t **)(a4 + 88);
  int v13 = &v12[3 * v11];
  if (a6 == 2)
  {
    unint64_t v14 = sub_1B641D8A0(a2, a2, a3, a4, a5, a6, a7, a8);
    unint64_t v15 = (int)sub_1B6E1BBA4(*v13, *(unsigned __int8 *)(a1 + 72));
    int v16 = sub_1B6E2B834(a4, *(unsigned __int8 *)(a1 + 72));
    unint64_t v17 = (int)(v16 - sub_1B6E1BBA4(*v12, *(unsigned __int8 *)(a1 + 72))) - v15;
    sub_1B6428494(a1, v14);
    uint64_t v25 = sub_1B641D478(a2, v18, v19, v20, v21, v22, v23, v24);
    if (v14)
    {
      uint64_t v37 = v25;
      int v38 = 0;
      int v39 = 0;
      int v40 = v26;
      int v41 = v27;
      do
      {
        *(double *)v34.i64 = sub_1B65D6198(v40, (const float *)(v37 + v38), v28, v29, v30, v31, v32, v33, v34, v35, v36);
        *(void *)(*(void *)a1 + 8 * v39++) = v34.i64[0];
        v38 += v41;
      }
      while (v14 != v39);
    }
  }
  else
  {
    unint64_t v43 = *(int *)(*v12 + 8);
    unint64_t v15 = *(int *)(*v13 + 8);
    unint64_t v17 = *(int *)(a4 + 20) - v43 - v15;
    sub_1B6428494(a1, v43);
    uint64_t v51 = sub_1B641D478(a2, v44, v45, v46, v47, v48, v49, v50);
    if (v43)
    {
      uint64_t v63 = v51;
      uint64_t v64 = 0;
      int v65 = v43;
      int v66 = v52;
      int v67 = v53;
      do
      {
        *(double *)v60.i64 = sub_1B65D6198(v66, (const float *)(v63 + *(int *)(*(void *)(a3 + 32) + 4 * v64) * (uint64_t)v67), v54, v55, v56, v57, v58, v59, v60, v61, v62);
        *(void *)(*(void *)a1 + 8 * (int)v64++) = v60.i64[0];
      }
      while (v65 != v64);
    }
  }
  sub_1B6428494(a1 + 24, v17);
  sub_1B6428494(a1 + 48, v15);
  uint64_t v68 = *(void *)(a1 + 24);
  *(void *)(a1 + 96) = *(void *)a1;
  *(void *)(a1 + 104) = v68;
  return a1;
}

double sub_1B656DCFC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v3;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v6;
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v7;
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v8;
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v9;
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v10;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 96) = *(void *)a1;
  *(void *)(a1 + 104) = v11;
  return result;
}

void sub_1B656DDC8(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 112;
    sub_1B656DCFC(v6 - 112, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *sub_1B656DE50(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_1B63C8620();
  }
  return operator new(112 * a2);
}

uint64_t sub_1B656DE9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    sub_1B6539B98(i - 112);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1B656DEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 72) = a5;
  unint64_t v11 = ((unint64_t)*(unsigned __int8 *)(a4 + 8) >> 2) & 0xF;
  *(_DWORD *)(a1 + 76) = v11;
  *(void *)(a1 + 80) = a2;
  *(unsigned char *)(a1 + 88) = a6;
  unint64_t v12 = *(uint64_t **)(a4 + 88);
  int v13 = &v12[3 * v11];
  if (a6 == 2)
  {
    unint64_t v14 = sub_1B641D8A0(a2, a2, a3, a4, a5, a6, a7, a8);
    unint64_t v15 = (int)sub_1B6E1BBA4(*v13, *(unsigned __int8 *)(a1 + 72));
    int v16 = sub_1B6E2B834(a4, *(unsigned __int8 *)(a1 + 72));
    unint64_t v17 = (int)(v16 - sub_1B6E1BBA4(*v12, *(unsigned __int8 *)(a1 + 72))) - v15;
    sub_1B64590F0(a1, v14);
    uint64_t v25 = sub_1B641D478(a2, v18, v19, v20, v21, v22, v23, v24);
    if (v14)
    {
      uint64_t v37 = v25;
      int v38 = 0;
      int v39 = 0;
      int v40 = v26;
      int v41 = v27;
      do
      {
        *(double *)v34.i64 = sub_1B65D6198(v40, (const float *)(v37 + v38), v28, v29, v30, v31, v32, v33, v34, v35, v36);
        *(float32x4_t *)(*(void *)a1 + 16 * v39++) = v34;
        v38 += v41;
      }
      while (v14 != v39);
    }
  }
  else
  {
    unint64_t v43 = *(int *)(*v12 + 8);
    unint64_t v15 = *(int *)(*v13 + 8);
    unint64_t v17 = *(int *)(a4 + 20) - v43 - v15;
    sub_1B64590F0(a1, v43);
    uint64_t v51 = sub_1B641D478(a2, v44, v45, v46, v47, v48, v49, v50);
    if (v43)
    {
      uint64_t v63 = v51;
      uint64_t v64 = 0;
      int v65 = v43;
      int v66 = v52;
      int v67 = v53;
      do
      {
        *(double *)v60.i64 = sub_1B65D6198(v66, (const float *)(v63 + *(int *)(*(void *)(a3 + 32) + 4 * v64) * (uint64_t)v67), v54, v55, v56, v57, v58, v59, v60, v61, v62);
        *(float32x4_t *)(*(void *)a1 + 16 * (int)v64++) = v60;
      }
      while (v65 != v64);
    }
  }
  sub_1B64590F0(a1 + 24, v17);
  sub_1B64590F0(a1 + 48, v15);
  uint64_t v68 = *(void *)(a1 + 24);
  *(void *)(a1 + 96) = *(void *)a1;
  *(void *)(a1 + 104) = v68;
  return a1;
}

void sub_1B656E0AC(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL) {
      abort();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_1B656E2D0(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    int v16 = &v12[72 * v8];
    uint64_t v18 = &v12[72 * v11];
    size_t v14 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    sub_1B656E23C(a1, &v15);
    sub_1B656E380((uint64_t)&v15);
  }
}

void sub_1B656E23C(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (void *)a2[1];
  while (v4 != v5)
  {
    v6 -= 9;
    v4 -= 72;
    sub_1B656E31C(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *sub_1B656E2D0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_1B63C8620();
  }
  return operator new(72 * a2);
}

__n128 sub_1B656E31C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  __n128 result = *(__n128 *)(a2 + 48);
  *((__n128 *)a1 + 3) = result;
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return result;
}

uint64_t sub_1B656E380(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    sub_1B6539AC0((void **)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B656E3D0(uint64_t a1, int a2, int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  int v14 = *(_DWORD *)(a1 + 76);
  if (v14 < a2)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Can't subdivide further", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"level <= _finalLevel");
    int v14 = *(_DWORD *)(a1 + 76);
  }
  int v15 = *(unsigned __int8 *)(a1 + 88);
  if (v14 != a2)
  {
    if (v15 == 2)
    {
      sub_1B656F248(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104), *(unsigned __int8 *)(a1 + 72));
    }
    else if (v15 == 1)
    {
      sub_1B656EF24((uint64_t)a3, a2, (void *)(a1 + 96), (void *)(a1 + 104), a9, a10);
    }
    else
    {
      if (*(unsigned char *)(a1 + 88))
      {
LABEL_21:
        uint64_t v16 = *(void *)(a1 + 104);
        uint64_t v17 = v16 + 8 * *(int *)(*(void *)(*(void *)(a4 + 88) + 24 * a2) + 8);
        *(void *)(a1 + 96) = v16;
        *(void *)(a1 + 104) = v17;
        return;
      }
      sub_1B656EBF4((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104));
    }
    if (*(unsigned char *)(a1 + 88) == 2)
    {
      *(void *)(a1 + 96) = *(void *)(a1 + 104);
      *(void *)(a1 + 104) += 8
                             * (int)sub_1B6E1BBA4(*(void *)(*(void *)(a4 + 88) + 24 * a2), *(unsigned __int8 *)(a1 + 72));
      return;
    }
    goto LABEL_21;
  }
  if (v15 == 2)
  {
    sub_1B656F0B4(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
  }
  else if (v15 == 1)
  {
    sub_1B656EF24((uint64_t)a3, a2, (void *)(a1 + 96), (void *)(a1 + 48), a9, a10);
  }
  else if (!*(unsigned char *)(a1 + 88))
  {
    sub_1B656EBF4((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48));
  }
  sub_1B6428494(a1, 0);

  sub_1B6428494(a1 + 24, 0);
}

void sub_1B656E590(uint64_t a1, int a2, int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, float32x4_t a11)
{
  int v15 = *(_DWORD *)(a1 + 76);
  if (v15 < a2)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Can't subdivide further", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"level <= _finalLevel");
    int v15 = *(_DWORD *)(a1 + 76);
  }
  int v16 = *(unsigned __int8 *)(a1 + 88);
  if (v15 != a2)
  {
    if (v16 == 2)
    {
      sub_1B6574018(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104), *(unsigned __int8 *)(a1 + 72));
    }
    else if (v16 == 1)
    {
      uint64_t v35 = *(void *)(*((void *)*a3 + 8) + 8 * a2 - 8);
      float v36 = *(int **)(v35 + 8);
      if (*(int *)(v35 + 52) >= 1 && *v36 >= 1)
      {
        uint64_t v37 = 0;
        do
        {
          uint64_t v38 = *(int *)(*(void *)(v35 + 168) + 4 * v37);
          if (v38 != -1)
          {
            uint64_t v39 = *((void *)v36 + 6);
            uint64_t v40 = *(unsigned int *)(*((void *)v36 + 3) + 8 * v37);
            uint64_t v41 = *(int *)(*((void *)v36 + 3) + 8 * v37 + 4);
            *(_OWORD *)(*(void *)(a1 + 104) + 16 * v38) = 0uLL;
            if ((int)v40 >= 1)
            {
              uint64_t v42 = (int *)(v39 + 4 * v41);
              a11.f32[0] = 1.0 / (float)(int)v40;
              a11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a11.f32, 0);
              do
              {
                uint64_t v43 = *v42++;
                *(float32x4_t *)(*(void *)(a1 + 104) + 16 * v38) = vmlaq_f32(*(float32x4_t *)(*(void *)(a1 + 104) + 16 * v38), *(float32x4_t *)(*(void *)(a1 + 96) + 16 * v43), a11);
                --v40;
              }
              while (v40);
            }
          }
          ++v37;
        }
        while (v37 < *v36);
      }
      int v44 = v36[1];
      if (v44 >= 1)
      {
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        v47.i64[0] = 0x3F0000003F000000;
        v47.i64[1] = 0x3F0000003F000000;
        do
        {
          uint64_t v48 = *(int *)(*(void *)(v35 + 216) + 4 * v46);
          if (v48 != -1)
          {
            uint64_t v49 = (int *)(*((void *)v36 + 15) + v45);
            *(_OWORD *)(*(void *)(a1 + 104) + 16 * v48) = 0uLL;
            *(float32x4_t *)(*(void *)(a1 + 104) + 16 * v48) = vmlaq_f32(*(float32x4_t *)(*(void *)(a1 + 104) + 16 * v48), v47, *(float32x4_t *)(*(void *)(a1 + 96) + 16 * *v49));
            *(float32x4_t *)(*(void *)(a1 + 104) + 16 * v48) = vmlaq_f32(*(float32x4_t *)(*(void *)(a1 + 104) + 16 * v48), v47, *(float32x4_t *)(*(void *)(a1 + 96) + 16 * v49[1]));
            int v44 = v36[1];
          }
          ++v46;
          v45 += 8;
        }
        while (v46 < v44);
      }
      int v50 = v36[2];
      if (v50 >= 1)
      {
        for (uint64_t i = 0; i < v50; ++i)
        {
          uint64_t v52 = *(int *)(*(void *)(v35 + 240) + 4 * i);
          if (v52 != -1)
          {
            *(_OWORD *)(*(void *)(a1 + 104) + 16 * v52) = 0uLL;
            *(float32x4_t *)(*(void *)(a1 + 104) + 16 * v52) = vaddq_f32(*(float32x4_t *)(*(void *)(a1 + 96) + 16 * i), *(float32x4_t *)(*(void *)(a1 + 104) + 16 * v52));
            int v50 = v36[2];
          }
        }
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 88))
      {
LABEL_55:
        uint64_t v53 = *(void *)(a1 + 104);
        uint64_t v54 = v53 + 16 * *(int *)(*(void *)(*(void *)(a4 + 88) + 24 * a2) + 8);
        *(void *)(a1 + 96) = v53;
        *(void *)(a1 + 104) = v54;
        return;
      }
      sub_1B6573B54((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104));
    }
    if (*(unsigned char *)(a1 + 88) == 2)
    {
      *(void *)(a1 + 96) = *(void *)(a1 + 104);
      *(void *)(a1 + 104) += 16
                             * (int)sub_1B6E1BBA4(*(void *)(*(void *)(a4 + 88) + 24 * a2), *(unsigned __int8 *)(a1 + 72));
      return;
    }
    goto LABEL_55;
  }
  if (v16 == 2)
  {
    sub_1B6573E84(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
  }
  else if (v16 == 1)
  {
    uint64_t v17 = *(void *)(*((void *)*a3 + 8) + 8 * a2 - 8);
    uint64_t v18 = *(int **)(v17 + 8);
    if (*(int *)(v17 + 52) >= 1 && *v18 >= 1)
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = *(int *)(*(void *)(v17 + 168) + 4 * v19);
        if (v20 != -1)
        {
          uint64_t v21 = *((void *)v18 + 6);
          uint64_t v22 = *(unsigned int *)(*((void *)v18 + 3) + 8 * v19);
          uint64_t v23 = *(int *)(*((void *)v18 + 3) + 8 * v19 + 4);
          *(_OWORD *)(*(void *)(a1 + 48) + 16 * v20) = 0uLL;
          if ((int)v22 >= 1)
          {
            uint64_t v24 = (int *)(v21 + 4 * v23);
            a11.f32[0] = 1.0 / (float)(int)v22;
            a11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a11.f32, 0);
            do
            {
              uint64_t v25 = *v24++;
              *(float32x4_t *)(*(void *)(a1 + 48) + 16 * v20) = vmlaq_f32(*(float32x4_t *)(*(void *)(a1 + 48) + 16 * v20), *(float32x4_t *)(*(void *)(a1 + 96) + 16 * v25), a11);
              --v22;
            }
            while (v22);
          }
        }
        ++v19;
      }
      while (v19 < *v18);
    }
    int v26 = v18[1];
    if (v26 >= 1)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      v29.i64[0] = 0x3F0000003F000000;
      v29.i64[1] = 0x3F0000003F000000;
      do
      {
        uint64_t v30 = *(int *)(*(void *)(v17 + 216) + 4 * v28);
        if (v30 != -1)
        {
          uint64_t v31 = (int *)(*((void *)v18 + 15) + v27);
          *(_OWORD *)(*(void *)(a1 + 48) + 16 * v30) = 0uLL;
          *(float32x4_t *)(*(void *)(a1 + 48) + 16 * v30) = vmlaq_f32(*(float32x4_t *)(*(void *)(a1 + 48) + 16 * v30), v29, *(float32x4_t *)(*(void *)(a1 + 96) + 16 * *v31));
          *(float32x4_t *)(*(void *)(a1 + 48) + 16 * v30) = vmlaq_f32(*(float32x4_t *)(*(void *)(a1 + 48) + 16 * v30), v29, *(float32x4_t *)(*(void *)(a1 + 96) + 16 * v31[1]));
          int v26 = v18[1];
        }
        ++v28;
        v27 += 8;
      }
      while (v28 < v26);
    }
    int v32 = v18[2];
    if (v32 >= 1)
    {
      for (uint64_t j = 0; j < v32; ++j)
      {
        uint64_t v34 = *(int *)(*(void *)(v17 + 240) + 4 * j);
        if (v34 != -1)
        {
          *(_OWORD *)(*(void *)(a1 + 48) + 16 * v34) = 0uLL;
          *(float32x4_t *)(*(void *)(a1 + 48) + 16 * v34) = vaddq_f32(*(float32x4_t *)(*(void *)(a1 + 96) + 16 * j), *(float32x4_t *)(*(void *)(a1 + 48) + 16 * v34));
          int v32 = v18[2];
        }
      }
    }
  }
  else if (!*(unsigned char *)(a1 + 88))
  {
    sub_1B6573B54((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48));
  }
  sub_1B64590F0(a1, 0);

  sub_1B64590F0(a1 + 24, 0);
}

void sub_1B656EA34(uint64_t a1, int a2, int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float32x4_t a10)
{
  int v14 = *(_DWORD *)(a1 + 76);
  if (v14 < a2)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Can't subdivide further", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"level <= _finalLevel");
    int v14 = *(_DWORD *)(a1 + 76);
  }
  int v15 = *(unsigned __int8 *)(a1 + 88);
  if (v14 != a2)
  {
    if (v15 == 2)
    {
      sub_1B6577C88(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104), *(unsigned __int8 *)(a1 + 72));
    }
    else if (v15 == 1)
    {
      sub_1B6577964((uint64_t)a3, a2, (void *)(a1 + 96), (void *)(a1 + 104), a9, a10);
    }
    else
    {
      if (*(unsigned char *)(a1 + 88))
      {
LABEL_21:
        uint64_t v16 = *(void *)(a1 + 104);
        uint64_t v17 = v16 + 16 * *(int *)(*(void *)(*(void *)(a4 + 88) + 24 * a2) + 8);
        *(void *)(a1 + 96) = v16;
        *(void *)(a1 + 104) = v17;
        return;
      }
      sub_1B6577634((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104));
    }
    if (*(unsigned char *)(a1 + 88) == 2)
    {
      *(void *)(a1 + 96) = *(void *)(a1 + 104);
      *(void *)(a1 + 104) += 16
                             * (int)sub_1B6E1BBA4(*(void *)(*(void *)(a4 + 88) + 24 * a2), *(unsigned __int8 *)(a1 + 72));
      return;
    }
    goto LABEL_21;
  }
  if (v15 == 2)
  {
    sub_1B6577AF4(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
  }
  else if (v15 == 1)
  {
    sub_1B6577964((uint64_t)a3, a2, (void *)(a1 + 96), (void *)(a1 + 48), a9, a10);
  }
  else if (!*(unsigned char *)(a1 + 88))
  {
    sub_1B6577634((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48));
  }
  sub_1B64590F0(a1, 0);

  sub_1B64590F0(a1 + 24, 0);
}

void sub_1B656EBF4(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v8 = *(_DWORD *)*a1;
  if (v8)
  {
    if (v8 == 2)
    {
      sub_1B656F3DC((uint64_t)a1, a2, a3, a4);
      sub_1B656FAAC(a1, a2, a3, a4);
      sub_1B656FD48(a1, a2, a3, a4);
    }
    else if (v8 == 1)
    {
      sub_1B656F3DC((uint64_t)a1, a2, a3, a4);
      sub_1B656F570(a1, a2, a3, a4);
      sub_1B656F80C(a1, a2, a3, a4);
    }
  }
  else
  {
    sub_1B656F3DC((uint64_t)a1, a2, a3, a4);
    uint64_t v9 = 0;
    int v10 = a2 - 1;
    uint64_t v11 = *(void *)(*(void *)(*a1 + 64) + 8 * (a2 - 1));
    uint64_t v12 = *(void *)(v11 + 8);
    uint64_t v13 = *(unsigned int *)(v12 + 16);
    __p = 0;
    if (v13 >= 9)
    {
      uint64_t v9 = operator new(4 * v13);
      __p = v9;
    }
    int v14 = *(_DWORD *)(v12 + 4);
    if (v14 >= 1)
    {
      uint64_t v15 = 0;
      for (uint64_t i = 0; i < v14; ++i)
      {
        uint64_t v17 = *(int *)(*(void *)(v11 + 216) + 4 * i);
        if (v17 != -1)
        {
          uint64_t v18 = (int *)(*(void *)(v12 + 120) + v15);
          *(void *)(*a4 + 8 * v17) = 0;
          *(float32x2_t *)(*a4 + 8 * v17) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v17), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * *v18));
          *(float32x2_t *)(*a4 + 8 * v17) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v17), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v18[1]));
          int v14 = *(_DWORD *)(v12 + 4);
        }
        v15 += 8;
      }
      uint64_t v9 = __p;
    }
    operator delete(v9);
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(*(void *)(*a1 + 64) + 8 * v10);
    uint64_t v21 = *(void *)(v20 + 8);
    int v26 = 0;
    if ((2 * *(_DWORD *)(v21 + 20)) >= 0x21)
    {
      uint64_t v19 = operator new(4 * (2 * *(_DWORD *)(v21 + 20)));
      int v26 = v19;
    }
    int v22 = *(_DWORD *)(v21 + 8);
    if (v22 >= 1)
    {
      for (uint64_t j = 0; j < v22; ++j)
      {
        uint64_t v24 = *(int *)(*(void *)(v20 + 240) + 4 * j);
        if (v24 != -1)
        {
          *(void *)(*a4 + 8 * v24) = 0;
          *(float32x2_t *)(*a4 + 8 * v24) = vadd_f32(*(float32x2_t *)(*a3 + 8 * j), *(float32x2_t *)(*a4 + 8 * v24));
          int v22 = *(_DWORD *)(v21 + 8);
        }
      }
      uint64_t v19 = v26;
    }
    operator delete(v19);
  }
}

uint64_t sub_1B656EF24(uint64_t result, int a2, void *a3, void *a4, double a5, double a6)
{
  uint64_t v6 = *(void *)(*(void *)(*(void *)result + 64) + 8 * (a2 - 1));
  uint64_t v7 = *(int **)(v6 + 8);
  if (*(int *)(v6 + 52) >= 1 && *v7 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(int *)(*(void *)(v6 + 168) + 4 * v8);
      if (v9 != -1)
      {
        uint64_t v10 = *((void *)v7 + 6);
        uint64_t v11 = *(unsigned int *)(*((void *)v7 + 3) + 8 * v8);
        uint64_t v12 = *(int *)(*((void *)v7 + 3) + 8 * v8 + 4);
        *(void *)(*a4 + 8 * v9) = 0;
        if ((int)v11 >= 1)
        {
          uint64_t v13 = (int *)(v10 + 4 * v12);
          *(float *)&a6 = 1.0 / (float)(int)v11;
          a6 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a6, 0));
          do
          {
            uint64_t v14 = *v13++;
            *(float32x2_t *)(*a4 + 8 * v9) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v9), *(float32x2_t *)(*a3 + 8 * v14), *(float32x2_t *)&a6);
            --v11;
          }
          while (v11);
        }
      }
      ++v8;
    }
    while (v8 < *v7);
  }
  int v15 = v7[1];
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    for (uint64_t i = 0; i < v15; ++i)
    {
      uint64_t v18 = *(int *)(*(void *)(v6 + 216) + 4 * i);
      if (v18 != -1)
      {
        uint64_t v19 = (int *)(*((void *)v7 + 15) + v16);
        *(void *)(*a4 + 8 * v18) = 0;
        *(float32x2_t *)(*a4 + 8 * v18) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v18), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * *v19));
        *(float32x2_t *)(*a4 + 8 * v18) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v18), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v19[1]));
        int v15 = v7[1];
      }
      v16 += 8;
    }
  }
  int v20 = v7[2];
  if (v20 >= 1)
  {
    for (uint64_t j = 0; j < v20; ++j)
    {
      uint64_t v22 = *(int *)(*(void *)(v6 + 240) + 4 * j);
      if (v22 != -1)
      {
        *(void *)(*a4 + 8 * v22) = 0;
        *(float32x2_t *)(*a4 + 8 * v22) = vadd_f32(*(float32x2_t *)(*a3 + 8 * j), *(float32x2_t *)(*a4 + 8 * v22));
        int v20 = v7[2];
      }
    }
  }
  return result;
}

void sub_1B656F0B4(int **a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      sub_1B6571294((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6571D94((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6572170((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      sub_1B6571294((uint64_t)a1, a2, a3, a4, a5);
      sub_1B657144C((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6571828((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    sub_1B6571294((uint64_t)a1, a2, a3, a4, a5);
    sub_1B65726DC((uint64_t)a1, a2, a3, a4, a5);
    sub_1B657291C((uint64_t)a1, a2, a3, a4, a5);
  }
}

void sub_1B656F248(int **a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      sub_1B6571294((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6571D94((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6573238((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      sub_1B6571294((uint64_t)a1, a2, a3, a4, a5);
      sub_1B657144C((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6572CCC((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    sub_1B6571294((uint64_t)a1, a2, a3, a4, a5);
    sub_1B65726DC((uint64_t)a1, a2, a3, a4, a5);
    sub_1B65737A4((uint64_t)a1, a2, a3, a4, a5);
  }
}

void sub_1B656F3DC(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v4 + 52))
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(int **)(v4 + 8);
    uint64_t v9 = v8[5];
    uint64_t v19 = (float *)&v20;
    __p = 0;
    if (v9 >= 0x11)
    {
      uint64_t v7 = operator new(4 * v9);
      __p = v7;
      uint64_t v19 = (float *)v7;
    }
    if (*v8 >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(int *)(*(void *)(v4 + 168) + 4 * v10);
        if (v11 != -1)
        {
          uint64_t v12 = (unsigned int *)(*((void *)v8 + 3) + 8 * v10);
          uint64_t v13 = *v12;
          if ((int)v13 < 1)
          {
            *(void *)(*a4 + 8 * v11) = 0;
          }
          else
          {
            uint64_t v14 = *((void *)v8 + 6) + 4 * (int)v12[1];
            int v15 = v19;
            uint64_t v16 = v13;
            do
            {
              *v15++ = 1.0 / (float)(int)v13;
              --v16;
            }
            while (v16);
            *(void *)(*a4 + 8 * v11) = 0;
            unint64_t v17 = 0;
            uint64_t v18 = 4 * v13;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v11) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v11), *(float32x2_t *)(*a3 + 8 * *(int *)(v14 + v17)), v19[v17 / 4]);
              v17 += 4;
            }
            while (v18 != v17);
          }
        }
        ++v10;
      }
      while (v10 < *v8);
      uint64_t v7 = __p;
    }
    operator delete(v7);
  }
}

void sub_1B656F570(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = 0;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v10 = v9[1];
  uint64_t v32 = v9[2];
  int v36 = *(_DWORD *)(v8 + 4);
  uint64_t v11 = *(unsigned int *)(v10 + 16);
  uint64_t v37 = (float *)&v40;
  int v38 = v11;
  int v39 = 8;
  uint64_t v34 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    uint64_t v7 = operator new(4 * v11);
    __p = v7;
    uint64_t v37 = (float *)v7;
    int v39 = v11;
  }
  int v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *(int *)(v9[27] + 4 * i);
      if (v14 != -1)
      {
        int v15 = (int *)(*(void *)(v10 + 120) + 8 * i);
        uint64_t v16 = *(void *)(v10 + 168);
        unint64_t v17 = (unsigned int *)(*(void *)(v10 + 144) + 8 * i);
        uint64_t v18 = *v17;
        uint64_t v19 = (int)v17[1];
        v33[0] = v42;
        v33[1] = 0;
        v33[2] = v37;
        memset(&v33[3], 0, 13);
        int v35 = i;
        if (*(float *)(*(void *)(v10 + 216) + 4 * i) <= 0.0) {
          int v20 = 1;
        }
        else {
          int v20 = 4;
        }
        sub_1B656FFE8(&v36, (int *)&v34, (uint64_t)v33, v20, (*(unsigned __int16 *)(*(void *)(v32 + 432) + 2 * v14) >> 7) & 0xF);
        *(void *)(*a4 + 8 * v14) = 0;
        *(float32x2_t *)(*a4 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v14), *(float32x2_t *)(*a3 + 8 * *v15), v42[0]);
        *(float32x2_t *)(*a4 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v14), *(float32x2_t *)(*a3 + 8 * v15[1]), v42[1]);
        if (SLODWORD(v33[4]) >= 1 && (int)v18 >= 1)
        {
          for (uint64_t j = 0; j != v18; ++j)
          {
            uint64_t v22 = *(int *)(v16 + 4 * v19 + 4 * j);
            if (BYTE4(v33[4]))
            {
              uint64_t v23 = (int *)(v9[21] + 4 * v22);
              uint64_t v24 = *a4;
              uint64_t v25 = *a4;
            }
            else
            {
              uint64_t v26 = 0;
              uint64_t v27 = *(void *)(v10 + 24);
              uint64_t v28 = *(int *)(v27 + 8 * v22 + 4);
              int v29 = *(_DWORD *)(v27 + 8 * v22);
              do
                uint64_t v30 = *(unsigned int *)(*(void *)(v10 + 72) + 4 * v28 + 4 * v26++);
              while (i != v30);
              uint64_t v31 = *(void *)(v10 + 48) + 4 * v28;
              if ((int)v26 + 1 < v29) {
                int v29 = 0;
              }
              uint64_t v23 = (int *)(v31 + 4 * ((int)v26 - v29 + 1));
              uint64_t v25 = *a4;
              uint64_t v24 = *a3;
            }
            *(float32x2_t *)(v25 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(v25 + 8 * v14), *(float32x2_t *)(v24 + 8 * *v23), v37[j]);
          }
        }
        int v12 = *(_DWORD *)(v10 + 4);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B656F80C(uint64_t *a1, int a2, void *a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v11 = v9[1];
  uint64_t v10 = v9[2];
  int v45 = *(_DWORD *)(v8 + 4);
  unsigned int v12 = 2 * *(_DWORD *)(v11 + 20);
  uint64_t v46 = &v49;
  unsigned int v47 = v12;
  int v48 = 32;
  v40[0] = v11;
  v40[1] = v10;
  uint64_t v33 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    uint64_t v7 = operator new(4 * v12);
    __p = v7;
    uint64_t v46 = (uint64_t *)v7;
    int v48 = v12;
  }
  int v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (uint64_t i = 0; i < v13; ++i)
    {
      int v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        uint64_t v16 = v15;
        uint64_t v36 = *(void *)(v11 + 360);
        uint64_t v17 = *(void *)(v11 + 336);
        uint64_t v18 = (8 * i) | 4;
        uint64_t v35 = *(int *)(v17 + v18);
        uint64_t v19 = *(int *)(v17 + 8 * i);
        uint64_t v20 = *(void *)(v11 + 264);
        uint64_t v34 = *(int *)(v20 + v18);
        uint64_t v21 = *(unsigned int *)(v20 + 8 * i);
        float v39 = 0.0;
        uint64_t v22 = v46;
        uint64_t v23 = (_DWORD *)v46 + v19;
        int v37 = v19;
        v38[0] = &v39;
        v38[1] = v46;
        v38[2] = v23;
        memset(&v38[3], 0, 13);
        int v41 = i;
        int v42 = v15;
        int v43 = *(_DWORD *)(*(void *)(v40[0] + 336) + 8 * i);
        int v44 = *(_DWORD *)(*(void *)(v40[0] + 264) + 8 * i);
        uint64_t v24 = *(void *)(v11 + 288);
        sub_1B65703B8(&v45, (uint64_t)v40, (uint64_t)v38, (*(unsigned __int16 *)(*(void *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v33 + 432) + 2 * v15) >> 7) & 0xF);
        *(void *)(*a4 + 8 * v16) = 0;
        if (SLODWORD(v38[4]) >= 1 && (int)v21 >= 1)
        {
          uint64_t v25 = (int *)(v24 + 4 * v34);
          do
          {
            uint64_t v26 = *v25++;
            uint64_t v27 = *(int *)(v9[21] + 4 * v26);
            LODWORD(v26) = *v23++;
            *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a4 + 8 * v27), *(float *)&v26);
            --v21;
          }
          while (v21);
        }
        uint64_t v28 = v37;
        if (SHIDWORD(v38[3]) >= 1 && v37 >= 1)
        {
          uint64_t v30 = (int *)(v36 + 4 * v35);
          do
          {
            uint64_t v31 = *v30++;
            uint64_t v32 = (_DWORD *)(*(void *)(v11 + 120) + 8 * v31);
            LODWORD(v31) = *(_DWORD *)v22;
            uint64_t v22 = (uint64_t *)((char *)v22 + 4);
            *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a3 + 8 * (int)v32[i == *v32]), *(float *)&v31);
            --v28;
          }
          while (v28);
        }
        *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a3 + 8 * i), v39);
        int v13 = *(_DWORD *)(v11 + 8);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B656FAAC(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = 0;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v10 = v9[1];
  uint64_t v32 = v9[2];
  int v36 = *(_DWORD *)(v8 + 4);
  uint64_t v11 = *(unsigned int *)(v10 + 16);
  int v37 = (float *)&v40;
  int v38 = v11;
  int v39 = 8;
  uint64_t v34 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    uint64_t v7 = operator new(4 * v11);
    __p = v7;
    int v37 = (float *)v7;
    int v39 = v11;
  }
  int v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *(int *)(v9[27] + 4 * i);
      if (v14 != -1)
      {
        int v15 = (int *)(*(void *)(v10 + 120) + 8 * i);
        uint64_t v16 = *(void *)(v10 + 168);
        uint64_t v17 = (unsigned int *)(*(void *)(v10 + 144) + 8 * i);
        uint64_t v18 = *v17;
        uint64_t v19 = (int)v17[1];
        v33[0] = v42;
        v33[1] = 0;
        v33[2] = v37;
        memset(&v33[3], 0, 13);
        int v35 = i;
        if (*(float *)(*(void *)(v10 + 216) + 4 * i) <= 0.0) {
          int v20 = 1;
        }
        else {
          int v20 = 4;
        }
        sub_1B6570AAC(&v36, (int *)&v34, (uint64_t)v33, v20, (*(unsigned __int16 *)(*(void *)(v32 + 432) + 2 * v14) >> 7) & 0xF);
        *(void *)(*a4 + 8 * v14) = 0;
        *(float32x2_t *)(*a4 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v14), *(float32x2_t *)(*a3 + 8 * *v15), v42[0]);
        *(float32x2_t *)(*a4 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v14), *(float32x2_t *)(*a3 + 8 * v15[1]), v42[1]);
        if (SLODWORD(v33[4]) >= 1 && (int)v18 >= 1)
        {
          for (uint64_t j = 0; j != v18; ++j)
          {
            uint64_t v22 = *(int *)(v16 + 4 * v19 + 4 * j);
            if (BYTE4(v33[4]))
            {
              uint64_t v23 = (int *)(v9[21] + 4 * v22);
              uint64_t v24 = *a4;
              uint64_t v25 = *a4;
            }
            else
            {
              uint64_t v26 = 0;
              uint64_t v27 = *(void *)(v10 + 24);
              uint64_t v28 = *(int *)(v27 + 8 * v22 + 4);
              int v29 = *(_DWORD *)(v27 + 8 * v22);
              do
                uint64_t v30 = *(unsigned int *)(*(void *)(v10 + 72) + 4 * v28 + 4 * v26++);
              while (i != v30);
              uint64_t v31 = *(void *)(v10 + 48) + 4 * v28;
              if ((int)v26 + 1 < v29) {
                int v29 = 0;
              }
              uint64_t v23 = (int *)(v31 + 4 * ((int)v26 - v29 + 1));
              uint64_t v25 = *a4;
              uint64_t v24 = *a3;
            }
            *(float32x2_t *)(v25 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(v25 + 8 * v14), *(float32x2_t *)(v24 + 8 * *v23), v37[j]);
          }
        }
        int v12 = *(_DWORD *)(v10 + 4);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B656FD48(uint64_t *a1, int a2, void *a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v11 = v9[1];
  uint64_t v10 = v9[2];
  int v45 = *(_DWORD *)(v8 + 4);
  unsigned int v12 = 2 * *(_DWORD *)(v11 + 20);
  uint64_t v46 = &v49;
  unsigned int v47 = v12;
  int v48 = 32;
  v40[0] = v11;
  v40[1] = v10;
  uint64_t v33 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    uint64_t v7 = operator new(4 * v12);
    __p = v7;
    uint64_t v46 = (uint64_t *)v7;
    int v48 = v12;
  }
  int v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (uint64_t i = 0; i < v13; ++i)
    {
      int v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        uint64_t v16 = v15;
        uint64_t v36 = *(void *)(v11 + 360);
        uint64_t v17 = *(void *)(v11 + 336);
        uint64_t v18 = (8 * i) | 4;
        uint64_t v35 = *(int *)(v17 + v18);
        uint64_t v19 = *(int *)(v17 + 8 * i);
        uint64_t v20 = *(void *)(v11 + 264);
        uint64_t v34 = *(int *)(v20 + v18);
        uint64_t v21 = *(unsigned int *)(v20 + 8 * i);
        float v39 = 0.0;
        uint64_t v22 = v46;
        uint64_t v23 = (_DWORD *)v46 + v19;
        int v37 = v19;
        v38[0] = &v39;
        v38[1] = v46;
        v38[2] = v23;
        memset(&v38[3], 0, 13);
        int v41 = i;
        int v42 = v15;
        int v43 = *(_DWORD *)(*(void *)(v40[0] + 336) + 8 * i);
        int v44 = *(_DWORD *)(*(void *)(v40[0] + 264) + 8 * i);
        uint64_t v24 = *(void *)(v11 + 288);
        sub_1B6570C90(&v45, (uint64_t)v40, (uint64_t)v38, (*(unsigned __int16 *)(*(void *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v33 + 432) + 2 * v15) >> 7) & 0xF);
        *(void *)(*a4 + 8 * v16) = 0;
        if (SLODWORD(v38[4]) >= 1 && (int)v21 >= 1)
        {
          uint64_t v25 = (int *)(v24 + 4 * v34);
          do
          {
            uint64_t v26 = *v25++;
            uint64_t v27 = *(int *)(v9[21] + 4 * v26);
            LODWORD(v26) = *v23++;
            *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a4 + 8 * v27), *(float *)&v26);
            --v21;
          }
          while (v21);
        }
        uint64_t v28 = v37;
        if (SHIDWORD(v38[3]) >= 1 && v37 >= 1)
        {
          uint64_t v30 = (int *)(v36 + 4 * v35);
          do
          {
            uint64_t v31 = *v30++;
            uint64_t v32 = (_DWORD *)(*(void *)(v11 + 120) + 8 * v31);
            LODWORD(v31) = *(_DWORD *)v22;
            uint64_t v22 = (uint64_t *)((char *)v22 + 4);
            *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a3 + 8 * (int)v32[i == *v32]), *(float *)&v31);
            --v28;
          }
          while (v28);
        }
        *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a3 + 8 * i), v39);
        int v13 = *(_DWORD *)(v11 + 8);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

int *sub_1B656FFE8(int *result, int *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = a2[2];
    if (*(float *)(*(void *)(*(void *)a2 + 216) + 4 * v8) <= 0.0) {
      goto LABEL_13;
    }
LABEL_5:
    if (a5)
    {
      if (a5 != 4)
      {
        uint64_t v9 = *(void *)a2;
        LODWORD(v10) = a2[2];
        goto LABEL_8;
      }
    }
    else if (a4 != 4)
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = a2[2];
      float v23 = *(float *)(*(void *)(*(void *)a2 + 216) + 4 * v10);
      if (v23 < 1.0 && ((*result & 0x60) == 0 || (float)(v23 + -1.0) <= 0.0))
      {
LABEL_8:
        uint64_t v11 = *(unsigned int *)(*(void *)(v9 + 144) + 8 * v10);
        *(void *)(a3 + 24) = 2;
        *(_DWORD *)(a3 + 32) = v11;
        *(unsigned char *)(a3 + 36) = 1;
        if ((*(_WORD *)result & 0x180) == 0x80)
        {
          if (v11 == 2)
          {
            __n128 result = sub_1B657036C(a2, &v43);
            if (v43 == 3 || v44 == 3)
            {
              float v37 = 0.47;
              if (v44 == 3) {
                float v38 = 0.47;
              }
              else {
                float v38 = 0.25;
              }
              if (v43 != 3) {
                float v37 = 0.25;
              }
              float v29 = (float)(v37 + v38) * 0.5;
              float32_t v39 = (float)((float)(v29 * -2.0) + 1.0) * 0.5;
              unsigned int v12 = *(float32x2_t **)a3;
              v12->f32[0] = v39;
              v12->f32[1] = v39;
              uint64_t v28 = *(float **)(a3 + 16);
              *uint64_t v28 = v29;
              goto LABEL_50;
            }
            unsigned int v12 = *(float32x2_t **)a3;
            __asm { FMOV            V0.2S, #0.25 }
            **(void **)a3 = _D0;
LABEL_32:
            uint64_t v28 = *(float **)(a3 + 16);
            *uint64_t v28 = 0.25;
            float v29 = 0.25;
LABEL_50:
            v28[1] = v29;
            uint64_t v9 = *(void *)a2;
            LODWORD(v11) = *(_DWORD *)(a3 + 32);
LABEL_51:
            float v40 = *(float *)(*(void *)(v9 + 216) + 4 * a2[2]);
            float32x2_t *v12 = vmla_n_f32(vmul_n_f32(*v12, 1.0 - v40), (float32x2_t)0x3F0000003F000000, v40);
            if ((int)v11 >= 1)
            {
              int v41 = *(float **)(a3 + 16);
              uint64_t v42 = v11;
              do
              {
                *int v41 = (float)(1.0 - v40) * *v41;
                ++v41;
                --v42;
              }
              while (v42);
            }
            return result;
          }
          unsigned int v12 = *(float32x2_t **)a3;
          __asm { FMOV            V0.2S, #0.25 }
          **(void **)a3 = _D0;
        }
        else
        {
          unsigned int v12 = *(float32x2_t **)a3;
          __asm { FMOV            V0.2S, #0.25 }
          **(void **)a3 = _D0;
          if (v11 == 2) {
            goto LABEL_32;
          }
        }
        if ((int)v11 >= 1)
        {
          uint64_t v35 = *(float **)(a3 + 16);
          uint64_t v36 = v11;
          do
          {
            *v35++ = 0.5 / (float)(int)v11;
            --v36;
          }
          while (v36);
        }
        goto LABEL_51;
      }
    }
    *(_DWORD *)(a3 + 24) = 2;
    *(void *)(a3 + 28) = 0;
    *(unsigned char *)(a3 + 36) = 0;
    uint64_t v21 = *(float **)a3;
    **(_DWORD **)a3 = 1056964608;
    float v22 = 0.5;
    goto LABEL_25;
  }
  if (a4 != 1) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)a2;
  LODWORD(v8) = a2[2];
LABEL_13:
  uint64_t v18 = *(unsigned int *)(*(void *)(v7 + 144) + 8 * v8);
  *(void *)(a3 + 24) = 2;
  *(_DWORD *)(a3 + 32) = v18;
  *(unsigned char *)(a3 + 36) = 1;
  if ((*(_WORD *)result & 0x180) == 0x80)
  {
    if (v18 == 2)
    {
      __n128 result = sub_1B657036C(a2, &v43);
      if (v43 == 3 || v44 == 3)
      {
        float v30 = 0.47;
        if (v44 == 3) {
          float v31 = 0.47;
        }
        else {
          float v31 = 0.25;
        }
        if (v43 != 3) {
          float v30 = 0.25;
        }
        float v22 = (float)(v30 + v31) * 0.5;
        float v32 = (float)((float)(v22 * -2.0) + 1.0) * 0.5;
        uint64_t v33 = *(float **)a3;
        *uint64_t v33 = v32;
        v33[1] = v32;
        uint64_t v21 = *(float **)(a3 + 16);
        *uint64_t v21 = v22;
        goto LABEL_25;
      }
      __asm { FMOV            V0.2S, #0.25 }
      **(void **)a3 = _D0;
      goto LABEL_19;
    }
    __asm { FMOV            V0.2S, #0.25 }
    **(void **)a3 = _D0;
  }
  else
  {
    __asm { FMOV            V0.2S, #0.25 }
    **(void **)a3 = _D0;
    if (v18 == 2)
    {
LABEL_19:
      uint64_t v21 = *(float **)(a3 + 16);
      *uint64_t v21 = 0.25;
      float v22 = 0.25;
LABEL_25:
      v21[1] = v22;
      return result;
    }
  }
  if ((int)v18 >= 1)
  {
    float v25 = 0.5 / (float)(int)v18;
    uint64_t v26 = *(float **)(a3 + 16);
    do
    {
      *v26++ = v25;
      --v18;
    }
    while (v18);
  }
  return result;
}

int *sub_1B657036C(int *result, _DWORD *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = result[2];
  uint64_t v4 = *(void *)(*(void *)result + 144);
  uint64_t v5 = *(unsigned int *)(v4 + 8 * v3);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (int *)(*(void *)(v2 + 168) + 4 * *(int *)(v4 + 8 * v3 + 4));
    uint64_t v7 = *(void *)(v2 + 24);
    do
    {
      uint64_t v8 = *v6++;
      *a2++ = *(_DWORD *)(v7 + 8 * v8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1B65703B8(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v8;
    *(_DWORD *)(a3 + 32) = v8;
    *(unsigned char *)(a3 + 36) = 1;
    **(float **)a3 = (float)(v8 - 2) / (float)(int)v8;
    if ((int)v8 >= 1)
    {
      float v9 = 1.0 / (float)(v8 * v8);
      uint64_t v10 = *(float **)(a3 + 8);
      uint64_t v11 = *(float **)(a3 + 16);
      do
      {
        *v10++ = v9;
        *v11++ = v9;
        --v8;
      }
      while (v8);
    }
    return;
  }
  int v12 = a4;
  if (a5) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = a4 == 0;
  }
  if (v14) {
    int v15 = a5;
  }
  else {
    int v15 = a4;
  }
  uint64_t v16 = *(int *)(a2 + 24);
  uint64_t v17 = *(unsigned int *)(a2 + 24);
  uint64_t v18 = 4 * v16;
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v19 = &v80[-((4 * v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v19, 4 * v16);
  if ((v12 | 4) != 4 && v15 == v12)
  {
    uint64_t v19 = 0;
    float v24 = 0.0;
LABEL_25:
    if (v12 == 4)
    {
      int v81 = v15;
      uint64_t v82 = v17;
      uint64_t v34 = 0xFFFFFFFF00000000;
      uint64_t v35 = (float *)v19;
      do
      {
        float v36 = *v35++;
        v34 += 0x100000000;
      }
      while (v36 <= 0.0);
      uint64_t v37 = v16 << 32;
      float v38 = (float *)&v19[4 * v16 - 4];
      do
      {
        float v39 = *v38--;
        v37 -= 0x100000000;
      }
      while (v39 <= 0.0);
      uint64_t v40 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = v40;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1061158912;
      uint64_t v41 = *(void *)(a3 + 8);
      if ((int)v40 >= 1) {
        bzero(*(void **)(a3 + 8), 4 * v40);
      }
      *(_DWORD *)(v41 + (v34 >> 30)) = 1040187392;
      *(_DWORD *)(v41 + (v37 >> 30)) = 1040187392;
      uint64_t v17 = v82;
      int v15 = v81;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v15 != v12)
    {
      int v83 = *a1;
      MEMORY[0x1F4188790](v20, v21);
      bzero(&v80[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)], 4 * v16);
      uint64_t v42 = sub_1B65709A8((int *)a2, &v83, (float *)&v80[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)]);
      int v43 = v42;
      uint64_t v44 = *(int *)(a2 + 20);
      uint64_t v45 = *(void *)(*(void *)(a2 + 8) + 408);
      float v46 = *(float *)(v45 + 4 * v44);
      if (v15
        || (uint64_t v42 = (float *)sub_1B6E18720(*(float *)(v45 + 4 * v44), (uint64_t)&v83, v16, v42),
            int v15 = (int)v42,
            v42 != v12))
      {
        MEMORY[0x1F4188790](v42, 4 * (int)((2 * v17) | 1));
        int v48 = (float *)&v80[-v47];
        bzero(&v80[-v47], v49);
        int v50 = v48 + 1;
        if ((v15 - 1) > 1)
        {
          if (v15 == 4)
          {
            uint64_t v82 = v17;
            uint64_t v17 = 0xFFFFFFFF00000000;
            uint64_t v57 = v43;
            do
            {
              float v58 = *v57++;
              v17 += 0x100000000;
            }
            while (v58 <= 0.0);
            uint64_t v59 = v16 << 32;
            float32x4_t v60 = &v43[v16 - 1];
            do
            {
              float v61 = *v60--;
              v59 -= 0x100000000;
            }
            while (v61 <= 0.0);
            uint64_t v56 = *(unsigned int *)(a2 + 24);
            *int v48 = 0.75;
            if ((int)v56 >= 1) {
              bzero(v48 + 1, 4 * v56);
            }
            LODWORD(v51) = 0;
            *(_DWORD *)((char *)v50 + (v17 >> 30)) = 1040187392;
            uint64_t v62 = v59 >> 30;
            char v55 = 0;
            *(_DWORD *)((char *)v50 + v62) = 1040187392;
            LODWORD(v17) = v82;
          }
          else
          {
            char v55 = 0;
            LODWORD(v51) = 0;
            LODWORD(v56) = 0;
            *int v48 = 1.0;
          }
        }
        else
        {
          uint64_t v51 = *(unsigned int *)(a2 + 28);
          *int v48 = (float)(v51 - 2) / (float)(int)v51;
          if ((int)v51 >= 1)
          {
            float v52 = 1.0 / (float)(v51 * v51);
            uint64_t v53 = v48 + 1;
            uint64_t v54 = v51;
            do
            {
              *uint64_t v53 = v52;
              v53[v16] = v52;
              ++v53;
              --v54;
            }
            while (v54);
          }
          char v55 = 1;
          LODWORD(v56) = v51;
        }
        double v63 = sub_1B6E18774(&v83, v17, (float *)v19, v43, v24, v46);
        float v64 = 1.0 - *(float *)&v63;
        **(float **)a3 = (float)((float)(1.0 - *(float *)&v63) * *v48) + (float)(*(float *)&v63 * **(float **)a3);
        if (v56)
        {
          if (*(_DWORD *)(a3 + 28))
          {
            if ((int)v56 >= 1)
            {
              int v65 = *(float **)(a3 + 8);
              uint64_t v66 = v56;
              int v67 = v48 + 1;
              do
              {
                float v68 = *v67++;
                *int v65 = (float)(v64 * v68) + (float)(*(float *)&v63 * *v65);
                ++v65;
                --v66;
              }
              while (v66);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 28) = v56;
            if ((int)v56 >= 1)
            {
              int v69 = *(float **)(a3 + 8);
              uint64_t v70 = v56;
              uint64_t v71 = v48 + 1;
              do
              {
                float v72 = *v71++;
                *v69++ = v64 * v72;
                --v70;
              }
              while (v70);
            }
          }
        }
        if (v51)
        {
          int8x16_t v73 = (float *)&v50[v16];
          if (*(_DWORD *)(a3 + 32))
          {
            if ((int)v51 >= 1)
            {
              __int16 v74 = *(float **)(a3 + 16);
              uint64_t v75 = v51;
              do
              {
                float v76 = *v73++;
                *__int16 v74 = (float)(v64 * v76) + (float)(*(float *)&v63 * *v74);
                ++v74;
                --v75;
              }
              while (v75);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 32) = v51;
            *(unsigned char *)(a3 + 36) = v55;
            if ((int)v51 >= 1)
            {
              unsigned __int8 v77 = *(float **)(a3 + 16);
              uint64_t v78 = v51;
              do
              {
                float v79 = *v73++;
                *v77++ = v64 * v79;
                --v78;
              }
              while (v78);
            }
          }
        }
      }
    }
    return;
  }
  float v22 = *(void **)a2;
  uint64_t v23 = *(int *)(a2 + 16);
  float v24 = *(float *)(*(void *)(*(void *)a2 + 408) + 4 * v23);
  if ((int)v16 >= 1)
  {
    float v25 = (int *)(v22[45] + 4 * *(int *)(v22[42] + 8 * v23 + 4));
    uint64_t v26 = v22[27];
    uint64_t v27 = &v80[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v28 = v17;
    do
    {
      uint64_t v29 = *v25++;
      *v27++ = *(_DWORD *)(v26 + 4 * v29);
      --v28;
    }
    while (v28);
  }
  if (!v12)
  {
    int v83 = *a1;
    uint64_t v20 = sub_1B6E18720(v24, (uint64_t)&v83, v17, (float *)&v80[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    int v12 = v20;
    unsigned int v7 = v20 - 1;
  }
  if (v7 > 1) {
    goto LABEL_25;
  }
  uint64_t v30 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 28) = v30;
  *(_DWORD *)(a3 + 32) = v30;
  *(unsigned char *)(a3 + 36) = 1;
  **(float **)a3 = (float)(v30 - 2) / (float)(int)v30;
  if ((int)v30 >= 1)
  {
    float v31 = 1.0 / (float)(v30 * v30);
    float v32 = *(float **)(a3 + 8);
    uint64_t v33 = *(float **)(a3 + 16);
    do
    {
      *v32++ = v31;
      *v33++ = v31;
      --v30;
    }
    while (v30);
  }
}

float *sub_1B65709A8(int *a1, _WORD *a2, float *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[6];
  unsigned int v7 = &v14;
  __p = 0;
  if (v6 >= 0x11)
  {
    unsigned int v7 = (uint64_t *)operator new(4 * v6);
    __p = v7;
    LODWORD(v6) = a1[6];
  }
  if ((int)v6 >= 1)
  {
    uint64_t v8 = (int *)(*(void *)(*(void *)a1 + 360)
               + 4 * *(int *)(*(void *)(*(void *)a1 + 336) + 8 * a1[4] + 4));
    uint64_t v9 = *(void *)(*(void *)a1 + 216);
    uint64_t v10 = v6;
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v8++;
      *(_DWORD *)uint64_t v11 = *(_DWORD *)(v9 + 4 * v12);
      uint64_t v11 = (uint64_t *)((char *)v11 + 4);
      --v10;
    }
    while (v10);
  }
  sub_1B6E18920(a2, v6, (float *)v7, a3);
  operator delete(__p);
  return a3;
}

_DWORD *sub_1B6570AAC(_DWORD *result, int *a2, uint64_t a3, int a4, int a5)
{
  if (!a4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = a2[2];
    if (*(float *)(*(void *)(*(void *)a2 + 216) + 4 * v6) <= 0.0) {
      goto LABEL_10;
    }
LABEL_5:
    if (a5)
    {
      if (a5 != 4)
      {
        uint64_t v7 = *(void *)a2;
        LODWORD(v8) = a2[2];
LABEL_8:
        uint64_t v9 = (int)v8;
        uint64_t v10 = *(unsigned int *)(*(void *)(v7 + 144) + 8 * (int)v8);
        *(void *)(a3 + 24) = 2;
        *(_DWORD *)(a3 + 32) = v10;
        *(unsigned char *)(a3 + 36) = 0;
        uint64_t v11 = *(float32x2_t **)a3;
        __asm { FMOV            V0.2S, #0.375 }
        **(void **)a3 = _D0;
        if (v10 == 2)
        {
          **(void **)(a3 + 16) = 0x3E0000003E000000;
        }
        else if ((int)v10 >= 1)
        {
          float v24 = *(float **)(a3 + 16);
          uint64_t v25 = v10;
          do
          {
            *v24++ = (float)(2.0 / (float)(int)v10) * 0.125;
            --v25;
          }
          while (v25);
        }
        float v26 = *(float *)(*(void *)(v7 + 216) + 4 * v9);
        *uint64_t v11 = vmla_n_f32(vmul_n_f32(*v11, 1.0 - v26), (float32x2_t)0x3F0000003F000000, v26);
        if ((int)v10 >= 1)
        {
          uint64_t v27 = *(float **)(a3 + 16);
          do
          {
            *uint64_t v27 = (float)(1.0 - v26) * *v27;
            ++v27;
            --v10;
          }
          while (v10);
        }
        return result;
      }
    }
    else if (a4 != 4)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = a2[2];
      float v23 = *(float *)(*(void *)(*(void *)a2 + 216) + 4 * v8);
      if (v23 < 1.0 && ((*result & 0x60) == 0 || (float)(v23 + -1.0) <= 0.0)) {
        goto LABEL_8;
      }
    }
    *(_DWORD *)(a3 + 24) = 2;
    *(void *)(a3 + 28) = 0;
    *(unsigned char *)(a3 + 36) = 0;
    uint64_t v19 = *(float32x2_t **)a3;
    **(_DWORD **)a3 = 1056964608;
    float v20 = 0.5;
    goto LABEL_21;
  }
  if (a4 != 1) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)a2;
  LODWORD(v6) = a2[2];
LABEL_10:
  uint64_t v17 = *(unsigned int *)(*(void *)(v5 + 144) + 8 * v6);
  *(void *)(a3 + 24) = 2;
  *(_DWORD *)(a3 + 32) = v17;
  *(unsigned char *)(a3 + 36) = 0;
  __asm { FMOV            V0.2S, #0.375 }
  **(void **)a3 = _D0;
  if (v17 == 2)
  {
    uint64_t v19 = *(float32x2_t **)(a3 + 16);
    v19->i32[0] = 1040187392;
    float v20 = 0.125;
LABEL_21:
    v19->f32[1] = v20;
    return result;
  }
  if ((int)v17 >= 1)
  {
    float v21 = (float)(2.0 / (float)(int)v17) * 0.125;
    float v22 = *(float **)(a3 + 16);
    do
    {
      *v22++ = v21;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_1B6570C90(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 28) = v8;
    *(unsigned char *)(a3 + 36) = 0;
    if (v8 == 6)
    {
      **(_DWORD **)a3 = 1059061760;
      float v9 = 0.0625;
    }
    else
    {
      float v30 = 1.0 / (float)(int)v8;
      float v31 = cosf(v30 * 6.2832);
      float v9 = v30 * (float)(0.625 - (float)((float)((float)(v31 * 0.25) + 0.375) * (float)((float)(v31 * 0.25) + 0.375)));
      **(float **)a3 = 1.0 - (float)(v9 * (float)(int)v8);
      if ((int)v8 < 1) {
        return;
      }
    }
    float v32 = *(float **)(a3 + 8);
    do
    {
      *v32++ = v9;
      --v8;
    }
    while (v8);
    return;
  }
  int v10 = a4;
  if (a5) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a4 == 0;
  }
  if (v12) {
    int v13 = a5;
  }
  else {
    int v13 = a4;
  }
  uint64_t v14 = *(int *)(a2 + 24);
  uint64_t v15 = *(unsigned int *)(a2 + 24);
  uint64_t v16 = 4 * v14;
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v17 = &v72[-((4 * v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v17, 4 * v14);
  if ((v10 | 4) != 4 && v13 == v10)
  {
    uint64_t v17 = 0;
    float v22 = 0.0;
    goto LABEL_25;
  }
  float v20 = *(void **)a2;
  uint64_t v21 = *(int *)(a2 + 16);
  float v22 = *(float *)(*(void *)(*(void *)a2 + 408) + 4 * v21);
  if ((int)v14 >= 1)
  {
    float v23 = (int *)(v20[45] + 4 * *(int *)(v20[42] + 8 * v21 + 4));
    uint64_t v24 = v20[27];
    uint64_t v25 = &v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v26 = v15;
    do
    {
      uint64_t v27 = *v23++;
      *v25++ = *(_DWORD *)(v24 + 4 * v27);
      --v26;
    }
    while (v26);
  }
  if (!v10)
  {
    int v75 = *a1;
    uint64_t v18 = sub_1B6E18720(v22, (uint64_t)&v75, v15, (float *)&v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    int v10 = v18;
    unsigned int v7 = v18 - 1;
  }
  if (v7 > 1)
  {
LABEL_25:
    if (v10 == 4)
    {
      int v73 = v13;
      uint64_t v74 = v15;
      uint64_t v15 = 0xFFFFFFFF00000000;
      uint64_t v33 = (float *)v17;
      do
      {
        float v34 = *v33++;
        v15 += 0x100000000;
      }
      while (v34 <= 0.0);
      uint64_t v35 = v14 << 32;
      float v36 = (float *)&v17[4 * v14 - 4];
      do
      {
        float v37 = *v36--;
        v35 -= 0x100000000;
      }
      while (v37 <= 0.0);
      uint64_t v38 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = v38;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1061158912;
      uint64_t v39 = *(void *)(a3 + 8);
      if ((int)v38 >= 1) {
        bzero(*(void **)(a3 + 8), 4 * v38);
      }
      *(_DWORD *)(v39 + (v15 >> 30)) = 1040187392;
      *(_DWORD *)(v39 + (v35 >> 30)) = 1040187392;
      LODWORD(v15) = v74;
      int v13 = v73;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v13 == v10) {
      return;
    }
    int v75 = *a1;
    MEMORY[0x1F4188790](v18, v19);
    bzero(&v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)], 4 * v14);
    uint64_t v40 = sub_1B65709A8((int *)a2, &v75, (float *)&v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    uint64_t v41 = v40;
    uint64_t v42 = *(int *)(a2 + 20);
    uint64_t v43 = *(void *)(*(void *)(a2 + 8) + 408);
    float v44 = *(float *)(v43 + 4 * v42);
    if (!v13)
    {
      uint64_t v40 = (float *)sub_1B6E18720(*(float *)(v43 + 4 * v42), (uint64_t)&v75, v14, v40);
      int v13 = (int)v40;
      if (v40 == v10) {
        return;
      }
    }
    MEMORY[0x1F4188790](v40, 4 * (int)((2 * v15) | 1));
    float v46 = (float *)&v72[-v45];
    bzero(&v72[-v45], v47);
    int v48 = v46 + 1;
    if ((v13 - 1) > 1)
    {
      if (v13 == 4)
      {
        int v54 = v15;
        uint64_t v15 = 0xFFFFFFFF00000000;
        char v55 = v41;
        do
        {
          float v56 = *v55++;
          v15 += 0x100000000;
        }
        while (v56 <= 0.0);
        uint64_t v57 = v14 << 32;
        float v58 = &v41[v14 - 1];
        do
        {
          float v59 = *v58--;
          v57 -= 0x100000000;
        }
        while (v59 <= 0.0);
        uint64_t v49 = *(unsigned int *)(a2 + 24);
        *float v46 = 0.75;
        if ((int)v49 >= 1) {
          bzero(v46 + 1, 4 * v49);
        }
        *(float *)((char *)v48 + (v15 >> 30)) = 0.125;
        *(float *)((char *)v48 + (v57 >> 30)) = 0.125;
        LODWORD(v15) = v54;
      }
      else
      {
        LODWORD(v49) = 0;
        *float v46 = 1.0;
      }
      goto LABEL_57;
    }
    uint64_t v49 = *(unsigned int *)(a2 + 28);
    if (v49 == 6)
    {
      *float v46 = 0.625;
      float v50 = 0.0625;
    }
    else
    {
      float v60 = 1.0 / (float)(int)v49;
      float v61 = cosf(v60 * 6.2832);
      float v50 = v60 * (float)(0.625 - (float)((float)((float)(v61 * 0.25) + 0.375) * (float)((float)(v61 * 0.25) + 0.375)));
      *float v46 = 1.0 - (float)(v50 * (float)(int)v49);
      if ((int)v49 < 1) {
        goto LABEL_57;
      }
    }
    uint64_t v62 = v46 + 1;
    uint64_t v63 = v49;
    do
    {
      *v62++ = v50;
      --v63;
    }
    while (v63);
LABEL_57:
    double v64 = sub_1B6E18774(&v75, v15, (float *)v17, v41, v22, v44);
    float v65 = 1.0 - *(float *)&v64;
    **(float **)a3 = (float)((float)(1.0 - *(float *)&v64) * *v46) + (float)(*(float *)&v64 * **(float **)a3);
    if (v49)
    {
      if (*(_DWORD *)(a3 + 28))
      {
        if ((int)v49 >= 1)
        {
          uint64_t v66 = *(float **)(a3 + 8);
          uint64_t v67 = v49;
          do
          {
            float v68 = *v48++;
            *uint64_t v66 = (float)(v65 * v68) + (float)(*(float *)&v64 * *v66);
            ++v66;
            --v67;
          }
          while (v67);
        }
      }
      else
      {
        *(_DWORD *)(a3 + 28) = v49;
        if ((int)v49 >= 1)
        {
          int v69 = *(float **)(a3 + 8);
          uint64_t v70 = v49;
          do
          {
            float v71 = *v48++;
            *v69++ = v65 * v71;
            --v70;
          }
          while (v70);
        }
      }
    }
    return;
  }
  uint64_t v28 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 28) = v28;
  *(unsigned char *)(a3 + 36) = 0;
  if (v28 == 6)
  {
    **(_DWORD **)a3 = 1059061760;
    float v29 = 0.0625;
  }
  else
  {
    float v51 = 1.0 / (float)(int)v28;
    float v52 = cosf(v51 * 6.2832);
    float v29 = v51 * (float)(0.625 - (float)((float)((float)(v52 * 0.25) + 0.375) * (float)((float)(v52 * 0.25) + 0.375)));
    **(float **)a3 = 1.0 - (float)(v29 * (float)(int)v28);
    if ((int)v28 < 1) {
      return;
    }
  }
  uint64_t v53 = *(float **)(a3 + 8);
  do
  {
    *v53++ = v29;
    --v28;
  }
  while (v28);
}

void sub_1B6571294(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v5 + 52))
  {
    uint64_t v8 = 0;
    float v9 = *(int **)(v5 + 8);
    int v10 = *(void **)(*((void *)v9 + 57) + 8 * a5);
    uint64_t v11 = *(void *)(*(void *)(*(void *)(v5 + 16) + 456) + 8 * a5);
    uint64_t v12 = v9[5];
    float v23 = (float *)&v24;
    __p = 0;
    if (v12 >= 0x11)
    {
      uint64_t v8 = operator new(4 * v12);
      __p = v8;
      float v23 = (float *)v8;
    }
    if (*v9 >= 1)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = *(int *)(*(void *)(v5 + 168) + 4 * v13);
        if (v14 != -1)
        {
          uint64_t v15 = *(int *)(*(void *)(v11 + 96) + 4 * v14);
          uint64_t v16 = (unsigned int *)(*(void *)(*v10 + 24) + 8 * v13);
          uint64_t v17 = *v16;
          if ((int)v17 < 1)
          {
            *(void *)(*a4 + 8 * v15) = 0;
          }
          else
          {
            uint64_t v18 = v10[3] + 4 * (int)v16[1];
            uint64_t v19 = v23;
            uint64_t v20 = v17;
            do
            {
              *v19++ = 1.0 / (float)(int)v17;
              --v20;
            }
            while (v20);
            *(void *)(*a4 + 8 * v15) = 0;
            unint64_t v21 = 0;
            uint64_t v22 = 4 * v17;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v15) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v15), *(float32x2_t *)(*a3 + 8 * *(int *)(v18 + v21)), v23[v21 / 4]);
              v21 += 4;
            }
            while (v22 != v21);
          }
        }
        ++v13;
      }
      while (v13 < *v9);
      uint64_t v8 = __p;
    }
    operator delete(v8);
  }
}

void sub_1B657144C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v46 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v9 = v8[1];
  uint64_t v10 = *(void *)(v8[60] + 8 * a5);
  uint64_t v11 = *(void *)(*(void *)(v9 + 456) + 8 * a5);
  uint64_t v39 = v8[2];
  uint64_t v12 = *(void **)(*(void *)(v39 + 456) + 8 * a5);
  uint64_t v42 = v9;
  uint64_t v13 = *(unsigned int *)(v9 + 16);
  uint64_t v14 = v52;
  uint64_t v49 = v52;
  int v50 = v13;
  int v51 = 8;
  __p = 0;
  if (v13 < 9)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = operator new(4 * v13);
    __p = v15;
    uint64_t v49 = v15;
    int v51 = v13;
    uint64_t v14 = v15;
  }
  v45[0] = v54;
  v45[1] = 0;
  v45[2] = v14;
  memset(&v45[3], 0, 13);
  if (*(unsigned char *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v45[3]) = 2;
    LODWORD(v45[4]) = 0;
    v54[0] = 0x3F0000003F000000;
    char v40 = 1;
  }
  else
  {
    char v40 = 0;
  }
  uint64_t v43 = v42;
  if (*(int *)(v42 + 4) >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v41 = v8;
    do
    {
      uint64_t v17 = *(int *)(v8[27] + 4 * v16);
      if (v17 != -1)
      {
        uint64_t v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if (*(unsigned char *)(v12[21] + *v18))
        {
          uint64_t v35 = v12[9];
          uint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v17);
          if (*(_WORD *)(v35 + 2 * v17))
          {
            uint64_t v37 = 0;
            do
            {
              sub_1B6E10810((void *)v11, v16, *(unsigned __int16 *)(*(void *)(v10 + 40)+ 2 * (v37 + *(int *)(*(void *)(*(void *)(v10 + 32) + 96) + 4 * v17))), &v47);
              uint64_t v38 = v18[v37];
              *(void *)(*a4 + 8 * v38) = 0;
              *(float32x2_t *)(*a4 + 8 * v38) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v38), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v47));
              *(float32x2_t *)(*a4 + 8 * v38) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v38), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v48));
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          if ((v40 & 1) == 0)
          {
            int v44 = v16;
            if (*(float *)(*(void *)(v42 + 216) + 4 * v16) <= 0.0) {
              int v19 = 1;
            }
            else {
              int v19 = 4;
            }
            sub_1B656FFE8(&v46, (int *)&v43, (uint64_t)v45, v19, (*(unsigned __int16 *)(*(void *)(v39 + 432) + 2 * v17) >> 7) & 0xF);
          }
          sub_1B6E10810((void *)v11, v16, 0, &v47);
          uint64_t v20 = *v18;
          *(void *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * v20) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v20), *(float32x2_t *)(*a3 + 8 * v47), *(float *)v54);
          *(float32x2_t *)(*a4 + 8 * v20) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v20), *(float32x2_t *)(*a3 + 8 * v48), *((float *)v54 + 1));
          if (SLODWORD(v45[4]) >= 1)
          {
            unint64_t v21 = (unsigned int *)(*(void *)(v42 + 144) + 8 * v16);
            uint64_t v22 = *v21;
            if ((int)v22 >= 1)
            {
              uint64_t v23 = 0;
              uint64_t v24 = *(void *)(v42 + 168) + 4 * (int)v21[1];
              do
              {
                uint64_t v25 = *(int *)(v24 + 4 * v23);
                if (BYTE4(v45[4]))
                {
                  uint64_t v26 = (int *)(v12[12] + 4 * *(int *)(v41[21] + 4 * v25));
                  uint64_t v27 = *a4;
                  uint64_t v28 = *a4;
                }
                else
                {
                  uint64_t v29 = 0;
                  uint64_t v30 = (2 * (int)v25) | 1;
                  uint64_t v31 = *(void *)(v42 + 24);
                  uint64_t v32 = *(void *)(v42 + 72) + 4 * *(int *)(v31 + 4 * v30);
                  int v33 = *(_DWORD *)(v31 + 8 * v25);
                  do
                    uint64_t v34 = *(unsigned int *)(v32 + 4 * v29++);
                  while (v16 != v34);
                  if ((int)v29 + 1 < v33) {
                    int v33 = 0;
                  }
                  uint64_t v26 = (int *)(*(void *)(v11 + 24)
                              + 4 * *(int *)(*(void *)(*(void *)v11 + 24) + 4 * v30)
                              + 4 * ((int)v29 - v33 + 1));
                  uint64_t v28 = *a4;
                  uint64_t v27 = *a3;
                }
                *(float32x2_t *)(v28 + 8 * v20) = vmla_n_f32(*(float32x2_t *)(v28 + 8 * v20), *(float32x2_t *)(v27 + 8 * *v26), *(float *)&v49[4 * v23++]);
              }
              while (v23 != v22);
            }
          }
        }
      }
      ++v16;
      uint64_t v8 = v41;
    }
    while (v16 < *(int *)(v42 + 4));
    uint64_t v15 = __p;
  }
  operator delete(v15);
}

void sub_1B6571828(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v54 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v66 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v57 = v54[1];
  uint64_t v49 = v54[2];
  uint64_t v58 = *(void *)(*(void *)(v57 + 456) + 8 * a5);
  if (*(unsigned char *)(v58 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v53 = v7;
  float v56 = *(void **)(v54[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v49 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v57 + 20);
  int v73 = &v76;
  int v74 = 2 * v9;
  int v75 = 32;
  unsigned __int8 v77 = 0;
  if (2 * v9 >= 0x21)
  {
    unsigned __int8 v77 = (uint64_t *)operator new(8 * v9);
    int v73 = v77;
    int v75 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v57 + 20);
  }
  uint64_t v10 = 0;
  float v68 = &v71;
  unsigned int v69 = v9;
  int v70 = 16;
  float v72 = 0;
  if (v9 >= 0x11)
  {
    uint64_t v10 = operator new(4 * v9);
    float v72 = v10;
    float v68 = (uint64_t *)v10;
    int v70 = v9;
  }
  v61[0] = v57;
  v61[1] = v49;
  if (*(int *)(v57 + 8) >= 1)
  {
    int v50 = v8;
    uint64_t v11 = 0;
    uint64_t v13 = v54;
    uint64_t v12 = a3;
    BOOL v14 = v53;
    uint64_t v15 = v56;
    do
    {
      int v59 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v59 != -1)
      {
        uint64_t v16 = *(int *)(*(void *)(v58 + 96) + 4 * v11);
        uint64_t v17 = (int *)(*(void *)(v58 + 144) + 4 * v16);
        uint64_t v18 = *(int *)(v50[12] + 4 * v59);
        int v19 = (int *)(v50[18] + 4 * v18);
        uint64_t v20 = *v19;
        uint64_t v21 = v50[21];
        if ((*(unsigned char *)(v21 + v20) & 1) == 0 && v14)
        {
          *(void *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * *v19) = vadd_f32(*(float32x2_t *)(*v12 + 8 * *v17), *(float32x2_t *)(*a4 + 8 * *v19));
        }
        else if (*(unsigned char *)(v21 + v20))
        {
          uint64_t v34 = v50[9];
          uint64_t v35 = *(unsigned __int16 *)(v34 + 2 * v59);
          if (*(_WORD *)(v34 + 2 * v59))
          {
            uint64_t v36 = 0;
            uint64_t v51 = *(void *)(v58 + 144) + 4 * v16;
            uint64_t v52 = *(void *)(v58 + 168) + v16;
            uint64_t v37 = v21 + v18;
            do
            {
              uint64_t v38 = *(unsigned __int16 *)(v15[5] + 2 * (v36 + *(int *)(*(void *)(v15[4] + 96) + 4 * v59)));
              uint64_t v39 = v17[v38];
              uint64_t v40 = v19[v36];
              *(void *)(*a4 + 8 * v40) = 0;
              if (!v14 && (*(unsigned char *)(v37 + v36) & 8) != 0)
              {
                uint64_t v41 = v37;
                sub_1B6E1066C((void *)v58, v11, v38, v67);
                if ((*(unsigned char *)(v52 + v38) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v52 + v38) & 0x20) != 0)
                  {
                    unsigned int v46 = v38 == 0;
                    int v44 = v56;
                    int v45 = v11;
                  }
                  else
                  {
                    int v44 = v56;
                    int v45 = v11;
                    unsigned int v46 = v38;
                  }
                  float v47 = sub_1B6E24EC4(v44, v45, v46, v59);
                  float v48 = 1.0 - v47;
                  float v43 = v47 + (float)((float)(1.0 - v47) * 0.75);
                  float v42 = v48 * 0.125;
                }
                else
                {
                  float v42 = 0.125;
                  float v43 = 0.75;
                }
                uint64_t v13 = v54;
                uint64_t v12 = a3;
                BOOL v14 = v53;
                uint64_t v15 = v56;
                uint64_t v37 = v41;
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * SLODWORD(v67[0])), v42);
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * SHIDWORD(v67[0])), v42);
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * v39), v43);
                uint64_t v17 = (int *)v51;
              }
              else
              {
                *(float32x2_t *)(*a4 + 8 * v40) = vadd_f32(*(float32x2_t *)(*v12 + 8 * v39), *(float32x2_t *)(*a4 + 8 * v40));
              }
              ++v36;
            }
            while (v35 != v36);
          }
        }
        else
        {
          uint64_t v23 = *(int *)(*(void *)(v57 + 336) + 8 * v11);
          float v60 = 0.0;
          uint64_t v24 = v73;
          uint64_t v25 = (_DWORD *)v73 + v23;
          v67[0] = &v60;
          v67[1] = v73;
          v67[2] = v25;
          memset(&v67[3], 0, 13);
          int v62 = v11;
          int v63 = v59;
          int v64 = *(_DWORD *)(*(void *)(v61[0] + 336) + 8 * v11);
          int v65 = *(_DWORD *)(*(void *)(v61[0] + 264) + 8 * v11);
          sub_1B65703B8(&v66, (uint64_t)v61, (uint64_t)v67, (*(unsigned __int16 *)(*(void *)(v57 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v49 + 432) + 2 * v59) >> 7) & 0xF);
          uint64_t v13 = v54;
          uint64_t v26 = *v17;
          uint64_t v27 = *v19;
          *(void *)(*a4 + 8 * v27) = 0;
          if (SLODWORD(v67[4]) >= 1)
          {
            uint64_t v28 = *(void *)(v57 + 264);
            uint64_t v29 = *(unsigned int *)(v28 + 8 * v11);
            if ((int)v29 >= 1)
            {
              uint64_t v30 = (int *)(*(void *)(v57 + 288) + 4 * *(int *)(v28 + ((8 * v11) | 4)));
              do
              {
                uint64_t v31 = *v30++;
                uint64_t v32 = *(int *)(v50[12] + 4 * *(int *)(v54[21] + 4 * v31));
                LODWORD(v31) = *v25++;
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a4 + 8 * v32), *(float *)&v31);
                --v29;
              }
              while (v29);
            }
          }
          uint64_t v12 = a3;
          if (SHIDWORD(v67[3]) >= 1)
          {
            sub_1B6E10910((void *)v58, v11, v68);
            uint64_t v13 = v54;
            uint64_t v12 = a3;
            if ((int)v23 >= 1)
            {
              uint64_t v33 = 0;
              do
              {
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a3 + 8 * *(int *)((char *)v68 + v33)), *(float *)((char *)v24 + v33));
                v33 += 4;
              }
              while (4 * v23 != v33);
            }
          }
          *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*v12 + 8 * v26), v60);
          BOOL v14 = v53;
          uint64_t v15 = v56;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v57 + 8));
    uint64_t v10 = v72;
  }
  operator delete(v10);
  operator delete(v77);
}

void sub_1B6571D94(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v46 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v9 = v8[1];
  uint64_t v10 = *(void *)(v8[60] + 8 * a5);
  uint64_t v11 = *(void *)(*(void *)(v9 + 456) + 8 * a5);
  uint64_t v39 = v8[2];
  uint64_t v12 = *(void **)(*(void *)(v39 + 456) + 8 * a5);
  uint64_t v42 = v9;
  uint64_t v13 = *(unsigned int *)(v9 + 16);
  BOOL v14 = v52;
  uint64_t v49 = v52;
  int v50 = v13;
  int v51 = 8;
  __p = 0;
  if (v13 < 9)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = operator new(4 * v13);
    __p = v15;
    uint64_t v49 = v15;
    int v51 = v13;
    BOOL v14 = v15;
  }
  v45[0] = v54;
  v45[1] = 0;
  v45[2] = v14;
  memset(&v45[3], 0, 13);
  if (*(unsigned char *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v45[3]) = 2;
    LODWORD(v45[4]) = 0;
    v54[0] = 0x3F0000003F000000;
    char v40 = 1;
  }
  else
  {
    char v40 = 0;
  }
  uint64_t v43 = v42;
  if (*(int *)(v42 + 4) >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v41 = v8;
    do
    {
      uint64_t v17 = *(int *)(v8[27] + 4 * v16);
      if (v17 != -1)
      {
        uint64_t v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if (*(unsigned char *)(v12[21] + *v18))
        {
          uint64_t v35 = v12[9];
          uint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v17);
          if (*(_WORD *)(v35 + 2 * v17))
          {
            uint64_t v37 = 0;
            do
            {
              sub_1B6E10810((void *)v11, v16, *(unsigned __int16 *)(*(void *)(v10 + 40)+ 2 * (v37 + *(int *)(*(void *)(*(void *)(v10 + 32) + 96) + 4 * v17))), &v47);
              uint64_t v38 = v18[v37];
              *(void *)(*a4 + 8 * v38) = 0;
              *(float32x2_t *)(*a4 + 8 * v38) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v38), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v47));
              *(float32x2_t *)(*a4 + 8 * v38) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v38), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v48));
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          if ((v40 & 1) == 0)
          {
            int v44 = v16;
            if (*(float *)(*(void *)(v42 + 216) + 4 * v16) <= 0.0) {
              int v19 = 1;
            }
            else {
              int v19 = 4;
            }
            sub_1B6570AAC(&v46, (int *)&v43, (uint64_t)v45, v19, (*(unsigned __int16 *)(*(void *)(v39 + 432) + 2 * v17) >> 7) & 0xF);
          }
          sub_1B6E10810((void *)v11, v16, 0, &v47);
          uint64_t v20 = *v18;
          *(void *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * v20) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v20), *(float32x2_t *)(*a3 + 8 * v47), *(float *)v54);
          *(float32x2_t *)(*a4 + 8 * v20) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v20), *(float32x2_t *)(*a3 + 8 * v48), *((float *)v54 + 1));
          if (SLODWORD(v45[4]) >= 1)
          {
            uint64_t v21 = (unsigned int *)(*(void *)(v42 + 144) + 8 * v16);
            uint64_t v22 = *v21;
            if ((int)v22 >= 1)
            {
              uint64_t v23 = 0;
              uint64_t v24 = *(void *)(v42 + 168) + 4 * (int)v21[1];
              do
              {
                uint64_t v25 = *(int *)(v24 + 4 * v23);
                if (BYTE4(v45[4]))
                {
                  uint64_t v26 = (int *)(v12[12] + 4 * *(int *)(v41[21] + 4 * v25));
                  uint64_t v27 = *a4;
                  uint64_t v28 = *a4;
                }
                else
                {
                  uint64_t v29 = 0;
                  uint64_t v30 = (2 * (int)v25) | 1;
                  uint64_t v31 = *(void *)(v42 + 24);
                  uint64_t v32 = *(void *)(v42 + 72) + 4 * *(int *)(v31 + 4 * v30);
                  int v33 = *(_DWORD *)(v31 + 8 * v25);
                  do
                    uint64_t v34 = *(unsigned int *)(v32 + 4 * v29++);
                  while (v16 != v34);
                  if ((int)v29 + 1 < v33) {
                    int v33 = 0;
                  }
                  uint64_t v26 = (int *)(*(void *)(v11 + 24)
                              + 4 * *(int *)(*(void *)(*(void *)v11 + 24) + 4 * v30)
                              + 4 * ((int)v29 - v33 + 1));
                  uint64_t v28 = *a4;
                  uint64_t v27 = *a3;
                }
                *(float32x2_t *)(v28 + 8 * v20) = vmla_n_f32(*(float32x2_t *)(v28 + 8 * v20), *(float32x2_t *)(v27 + 8 * *v26), *(float *)&v49[4 * v23++]);
              }
              while (v23 != v22);
            }
          }
        }
      }
      ++v16;
      uint64_t v8 = v41;
    }
    while (v16 < *(int *)(v42 + 4));
    uint64_t v15 = __p;
  }
  operator delete(v15);
}

void sub_1B6572170(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v54 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v66 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v57 = v54[1];
  uint64_t v49 = v54[2];
  uint64_t v58 = *(void *)(*(void *)(v57 + 456) + 8 * a5);
  if (*(unsigned char *)(v58 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v53 = v7;
  float v56 = *(void **)(v54[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v49 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v57 + 20);
  int v73 = &v76;
  int v74 = 2 * v9;
  int v75 = 32;
  unsigned __int8 v77 = 0;
  if (2 * v9 >= 0x21)
  {
    unsigned __int8 v77 = (uint64_t *)operator new(8 * v9);
    int v73 = v77;
    int v75 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v57 + 20);
  }
  uint64_t v10 = 0;
  float v68 = &v71;
  unsigned int v69 = v9;
  int v70 = 16;
  float v72 = 0;
  if (v9 >= 0x11)
  {
    uint64_t v10 = operator new(4 * v9);
    float v72 = v10;
    float v68 = (uint64_t *)v10;
    int v70 = v9;
  }
  v61[0] = v57;
  v61[1] = v49;
  if (*(int *)(v57 + 8) >= 1)
  {
    int v50 = v8;
    uint64_t v11 = 0;
    uint64_t v13 = v54;
    uint64_t v12 = a3;
    BOOL v14 = v53;
    uint64_t v15 = v56;
    do
    {
      int v59 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v59 != -1)
      {
        uint64_t v16 = *(int *)(*(void *)(v58 + 96) + 4 * v11);
        uint64_t v17 = (int *)(*(void *)(v58 + 144) + 4 * v16);
        uint64_t v18 = *(int *)(v50[12] + 4 * v59);
        int v19 = (int *)(v50[18] + 4 * v18);
        uint64_t v20 = *v19;
        uint64_t v21 = v50[21];
        if ((*(unsigned char *)(v21 + v20) & 1) == 0 && v14)
        {
          *(void *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * *v19) = vadd_f32(*(float32x2_t *)(*v12 + 8 * *v17), *(float32x2_t *)(*a4 + 8 * *v19));
        }
        else if (*(unsigned char *)(v21 + v20))
        {
          uint64_t v34 = v50[9];
          uint64_t v35 = *(unsigned __int16 *)(v34 + 2 * v59);
          if (*(_WORD *)(v34 + 2 * v59))
          {
            uint64_t v36 = 0;
            uint64_t v51 = *(void *)(v58 + 144) + 4 * v16;
            uint64_t v52 = *(void *)(v58 + 168) + v16;
            uint64_t v37 = v21 + v18;
            do
            {
              uint64_t v38 = *(unsigned __int16 *)(v15[5] + 2 * (v36 + *(int *)(*(void *)(v15[4] + 96) + 4 * v59)));
              uint64_t v39 = v17[v38];
              uint64_t v40 = v19[v36];
              *(void *)(*a4 + 8 * v40) = 0;
              if (!v14 && (*(unsigned char *)(v37 + v36) & 8) != 0)
              {
                uint64_t v41 = v37;
                sub_1B6E1066C((void *)v58, v11, v38, v67);
                if ((*(unsigned char *)(v52 + v38) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v52 + v38) & 0x20) != 0)
                  {
                    unsigned int v46 = v38 == 0;
                    int v44 = v56;
                    int v45 = v11;
                  }
                  else
                  {
                    int v44 = v56;
                    int v45 = v11;
                    unsigned int v46 = v38;
                  }
                  float v47 = sub_1B6E24EC4(v44, v45, v46, v59);
                  float v48 = 1.0 - v47;
                  float v43 = v47 + (float)((float)(1.0 - v47) * 0.75);
                  float v42 = v48 * 0.125;
                }
                else
                {
                  float v42 = 0.125;
                  float v43 = 0.75;
                }
                uint64_t v13 = v54;
                uint64_t v12 = a3;
                BOOL v14 = v53;
                uint64_t v15 = v56;
                uint64_t v37 = v41;
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * SLODWORD(v67[0])), v42);
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * SHIDWORD(v67[0])), v42);
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * v39), v43);
                uint64_t v17 = (int *)v51;
              }
              else
              {
                *(float32x2_t *)(*a4 + 8 * v40) = vadd_f32(*(float32x2_t *)(*v12 + 8 * v39), *(float32x2_t *)(*a4 + 8 * v40));
              }
              ++v36;
            }
            while (v35 != v36);
          }
        }
        else
        {
          uint64_t v23 = *(int *)(*(void *)(v57 + 336) + 8 * v11);
          float v60 = 0.0;
          uint64_t v24 = v73;
          uint64_t v25 = (_DWORD *)v73 + v23;
          v67[0] = &v60;
          v67[1] = v73;
          v67[2] = v25;
          memset(&v67[3], 0, 13);
          int v62 = v11;
          int v63 = v59;
          int v64 = *(_DWORD *)(*(void *)(v61[0] + 336) + 8 * v11);
          int v65 = *(_DWORD *)(*(void *)(v61[0] + 264) + 8 * v11);
          sub_1B6570C90(&v66, (uint64_t)v61, (uint64_t)v67, (*(unsigned __int16 *)(*(void *)(v57 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v49 + 432) + 2 * v59) >> 7) & 0xF);
          uint64_t v13 = v54;
          uint64_t v26 = *v17;
          uint64_t v27 = *v19;
          *(void *)(*a4 + 8 * v27) = 0;
          if (SLODWORD(v67[4]) >= 1)
          {
            uint64_t v28 = *(void *)(v57 + 264);
            uint64_t v29 = *(unsigned int *)(v28 + 8 * v11);
            if ((int)v29 >= 1)
            {
              uint64_t v30 = (int *)(*(void *)(v57 + 288) + 4 * *(int *)(v28 + ((8 * v11) | 4)));
              do
              {
                uint64_t v31 = *v30++;
                uint64_t v32 = *(int *)(v50[12] + 4 * *(int *)(v54[21] + 4 * v31));
                LODWORD(v31) = *v25++;
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a4 + 8 * v32), *(float *)&v31);
                --v29;
              }
              while (v29);
            }
          }
          uint64_t v12 = a3;
          if (SHIDWORD(v67[3]) >= 1)
          {
            sub_1B6E10910((void *)v58, v11, v68);
            uint64_t v13 = v54;
            uint64_t v12 = a3;
            if ((int)v23 >= 1)
            {
              uint64_t v33 = 0;
              do
              {
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a3 + 8 * *(int *)((char *)v68 + v33)), *(float *)((char *)v24 + v33));
                v33 += 4;
              }
              while (4 * v23 != v33);
            }
          }
          *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*v12 + 8 * v26), v60);
          BOOL v14 = v53;
          uint64_t v15 = v56;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v57 + 8));
    uint64_t v10 = v72;
  }
  operator delete(v10);
  operator delete(v77);
}

void sub_1B65726DC(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v8 = 0;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v22 = v21[1];
  uint64_t v9 = *(void *)(v21[60] + 8 * a5);
  uint64_t v10 = *(void **)(*(void *)(v22 + 456) + 8 * a5);
  uint64_t v11 = *(void **)(*(void *)(v21[2] + 456) + 8 * a5);
  uint64_t v12 = *(unsigned int *)(v22 + 16);
  uint64_t v25 = &v28;
  int v26 = v12;
  int v27 = 8;
  __p = 0;
  if (v12 >= 9)
  {
    uint64_t v8 = operator new(4 * v12);
    __p = v8;
    uint64_t v25 = (uint64_t *)v8;
    int v27 = v12;
  }
  if (*(int *)(v22 + 4) >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(int *)(v21[27] + 4 * v13);
      if (v14 != -1)
      {
        uint64_t v15 = (int *)(v11[18] + 4 * *(int *)(v11[12] + 4 * v14));
        if (*(unsigned char *)(v11[21] + *v15))
        {
          uint64_t v17 = v11[9];
          uint64_t v18 = *(unsigned __int16 *)(v17 + 2 * v14);
          if (*(_WORD *)(v17 + 2 * v14))
          {
            uint64_t v19 = 0;
            do
            {
              sub_1B6E10810(v10, v13, *(unsigned __int16 *)(*(void *)(v9 + 40)+ 2 * (v19 + *(int *)(*(void *)(*(void *)(v9 + 32) + 96) + 4 * v14))), &v23);
              uint64_t v20 = v15[v19];
              *(void *)(*a4 + 8 * v20) = 0;
              *(float32x2_t *)(*a4 + 8 * v20) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v20), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v23));
              *(float32x2_t *)(*a4 + 8 * v20) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v20), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v24));
              ++v19;
            }
            while (v18 != v19);
          }
        }
        else
        {
          sub_1B6E10810(v10, v13, 0, &v23);
          uint64_t v16 = *v15;
          *(void *)(*a4 + 8 * v16) = 0;
          *(float32x2_t *)(*a4 + 8 * v16) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v16), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v23));
          *(float32x2_t *)(*a4 + 8 * v16) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v16), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v24));
        }
      }
      ++v13;
    }
    while (v13 < *(int *)(v22 + 4));
    uint64_t v8 = __p;
  }
  operator delete(v8);
}

void sub_1B657291C(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v7 = v6[2];
  float v47 = v6;
  uint64_t v48 = v6[1];
  uint64_t v8 = v6[60];
  uint64_t v9 = *(void *)(v7 + 456);
  uint64_t v49 = *(void *)(*(void *)(v48 + 456) + 8 * a5);
  if (*(unsigned char *)(v49 + 12)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = **(_DWORD **)a1 == 0;
  }
  BOOL v42 = v10;
  uint64_t v11 = *(void **)(v8 + 8 * a5);
  uint64_t v41 = *(void **)(v9 + 8 * a5);
  unsigned int v12 = *(_DWORD *)(v48 + 20);
  float v56 = &v59;
  int v57 = 2 * v12;
  int v58 = 32;
  float v60 = 0;
  if (2 * v12 >= 0x21)
  {
    float v60 = operator new(8 * v12);
    float v56 = (uint64_t *)v60;
    int v58 = 2 * v12;
    unsigned int v12 = *(_DWORD *)(v48 + 20);
  }
  uint64_t v13 = 0;
  uint64_t v51 = &v54;
  unsigned int v52 = v12;
  int v53 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    uint64_t v13 = operator new(4 * v12);
    __p = v13;
    uint64_t v51 = (uint64_t *)v13;
    int v53 = v12;
  }
  if (*(int *)(v48 + 8) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a3;
    BOOL v16 = v42;
    while (1)
    {
      uint64_t v17 = *(int *)(v47[30] + 4 * v14);
      if (v17 != -1)
      {
        uint64_t v18 = *(int *)(*(void *)(v49 + 96) + 4 * v14);
        uint64_t v19 = (int *)(*(void *)(v49 + 144) + 4 * v18);
        uint64_t v20 = *(int *)(v41[12] + 4 * v17);
        uint64_t v21 = (int *)(v41[18] + 4 * v20);
        uint64_t v22 = *v21;
        uint64_t v23 = v41[21];
        if ((*(unsigned char *)(v23 + v22) & 1) == 0 && v16)
        {
          *(void *)(*a4 + 8 * v22) = 0;
          uint64_t v25 = (float32x2_t *)(*a4 + 8 * *v21);
          int v26 = *v19;
        }
        else
        {
          if (*(unsigned char *)(v23 + v22))
          {
            uint64_t v27 = v41[9];
            uint64_t v28 = *(unsigned __int16 *)(v27 + 2 * v17);
            if (*(_WORD *)(v27 + 2 * v17))
            {
              uint64_t v29 = 0;
              uint64_t v45 = *(void *)(v49 + 168) + v18;
              uint64_t v46 = *(unsigned __int16 *)(v27 + 2 * v17);
              uint64_t v30 = v23 + v20;
              uint64_t v44 = v30;
              do
              {
                uint64_t v31 = *(unsigned __int16 *)(v11[5] + 2 * (v29 + *(int *)(*(void *)(v11[4] + 96) + 4 * v17)));
                uint64_t v32 = v19[v31];
                uint64_t v33 = v21[v29];
                *(void *)(*a4 + 8 * v33) = 0;
                if (!v16 && (*(unsigned char *)(v30 + v29) & 8) != 0)
                {
                  sub_1B6E1066C((void *)v49, v14, v31, v50);
                  if ((*(unsigned char *)(v45 + v31) & 0x10) != 0)
                  {
                    if ((*(unsigned char *)(v45 + v31) & 0x20) != 0)
                    {
                      unsigned int v38 = v31 == 0;
                      uint64_t v36 = v11;
                      int v37 = v14;
                    }
                    else
                    {
                      uint64_t v36 = v11;
                      int v37 = v14;
                      unsigned int v38 = v31;
                    }
                    float v39 = sub_1B6E24EC4(v36, v37, v38, v17);
                    float v40 = 1.0 - v39;
                    float v35 = v39 + (float)((float)(1.0 - v39) * 0.75);
                    float v34 = v40 * 0.125;
                  }
                  else
                  {
                    float v34 = 0.125;
                    float v35 = 0.75;
                  }
                  uint64_t v15 = a3;
                  uint64_t v30 = v44;
                  BOOL v16 = v42;
                  uint64_t v28 = v46;
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v50[0]), v34);
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v50[1]), v34);
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v32), v35);
                }
                else
                {
                  *(float32x2_t *)(*a4 + 8 * v33) = vadd_f32(*(float32x2_t *)(*v15 + 8 * v32), *(float32x2_t *)(*a4 + 8 * v33));
                }
                ++v29;
              }
              while (v28 != v29);
            }
            goto LABEL_19;
          }
          int v26 = *v19;
          *(void *)(*a4 + 8 * v22) = 0;
          uint64_t v25 = (float32x2_t *)(*a4 + 8 * v22);
        }
        *uint64_t v25 = vadd_f32(*(float32x2_t *)(*v15 + 8 * v26), *v25);
      }
LABEL_19:
      if (++v14 >= *(int *)(v48 + 8))
      {
        uint64_t v13 = __p;
        break;
      }
    }
  }
  operator delete(v13);
  operator delete(v60);
}

void sub_1B6572CCC(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v54 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v66 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v57 = v54[1];
  uint64_t v49 = v54[2];
  uint64_t v58 = *(void *)(*(void *)(v57 + 456) + 8 * a5);
  if (*(unsigned char *)(v58 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v53 = v7;
  float v56 = *(void **)(v54[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v49 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v57 + 20);
  int v73 = &v76;
  int v74 = 2 * v9;
  int v75 = 32;
  unsigned __int8 v77 = 0;
  if (2 * v9 >= 0x21)
  {
    unsigned __int8 v77 = (uint64_t *)operator new(8 * v9);
    int v73 = v77;
    int v75 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v57 + 20);
  }
  BOOL v10 = 0;
  float v68 = &v71;
  unsigned int v69 = v9;
  int v70 = 16;
  float v72 = 0;
  if (v9 >= 0x11)
  {
    BOOL v10 = operator new(4 * v9);
    float v72 = v10;
    float v68 = (uint64_t *)v10;
    int v70 = v9;
  }
  v61[0] = v57;
  v61[1] = v49;
  if (*(int *)(v57 + 8) >= 1)
  {
    int v50 = v8;
    uint64_t v11 = 0;
    uint64_t v13 = v54;
    unsigned int v12 = a3;
    BOOL v14 = v53;
    uint64_t v15 = v56;
    do
    {
      int v59 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v59 != -1)
      {
        uint64_t v16 = *(int *)(*(void *)(v58 + 96) + 4 * v11);
        uint64_t v17 = (int *)(*(void *)(v58 + 144) + 4 * v16);
        uint64_t v18 = *(int *)(v50[12] + 4 * v59);
        uint64_t v19 = (int *)(v50[18] + 4 * v18);
        uint64_t v20 = *v19;
        uint64_t v21 = v50[21];
        if ((*(unsigned char *)(v21 + v20) & 1) == 0 && v14)
        {
          *(void *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * *v19) = vadd_f32(*(float32x2_t *)(*v12 + 8 * *v17), *(float32x2_t *)(*a4 + 8 * *v19));
        }
        else if (*(unsigned char *)(v21 + v20))
        {
          uint64_t v34 = v50[9];
          uint64_t v35 = *(unsigned __int16 *)(v34 + 2 * v59);
          if (*(_WORD *)(v34 + 2 * v59))
          {
            uint64_t v36 = 0;
            uint64_t v51 = *(void *)(v58 + 144) + 4 * v16;
            uint64_t v52 = *(void *)(v58 + 168) + v16;
            uint64_t v37 = v21 + v18;
            do
            {
              uint64_t v38 = *(unsigned __int16 *)(v15[5] + 2 * (v36 + *(int *)(*(void *)(v15[4] + 96) + 4 * v59)));
              uint64_t v39 = v17[v38];
              uint64_t v40 = v19[v36];
              *(void *)(*a4 + 8 * v40) = 0;
              if (!v14 && (*(unsigned char *)(v37 + v36) & 8) != 0)
              {
                uint64_t v41 = v37;
                sub_1B6E1066C((void *)v58, v11, v38, v67);
                if ((*(unsigned char *)(v52 + v38) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v52 + v38) & 0x20) != 0)
                  {
                    unsigned int v46 = v38 == 0;
                    uint64_t v44 = v56;
                    int v45 = v11;
                  }
                  else
                  {
                    uint64_t v44 = v56;
                    int v45 = v11;
                    unsigned int v46 = v38;
                  }
                  float v47 = sub_1B6E24EC4(v44, v45, v46, v59);
                  float v48 = 1.0 - v47;
                  float v43 = v47 + (float)((float)(1.0 - v47) * 0.75);
                  float v42 = v48 * 0.125;
                }
                else
                {
                  float v42 = 0.125;
                  float v43 = 0.75;
                }
                uint64_t v13 = v54;
                unsigned int v12 = a3;
                BOOL v14 = v53;
                uint64_t v15 = v56;
                uint64_t v37 = v41;
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * SLODWORD(v67[0])), v42);
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * SHIDWORD(v67[0])), v42);
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * v39), v43);
                uint64_t v17 = (int *)v51;
              }
              else
              {
                *(float32x2_t *)(*a4 + 8 * v40) = vadd_f32(*(float32x2_t *)(*v12 + 8 * v39), *(float32x2_t *)(*a4 + 8 * v40));
              }
              ++v36;
            }
            while (v35 != v36);
          }
        }
        else
        {
          uint64_t v23 = *(int *)(*(void *)(v57 + 336) + 8 * v11);
          float v60 = 0.0;
          int v24 = v73;
          uint64_t v25 = (_DWORD *)v73 + v23;
          v67[0] = &v60;
          v67[1] = v73;
          v67[2] = v25;
          memset(&v67[3], 0, 13);
          int v62 = v11;
          int v63 = v59;
          int v64 = *(_DWORD *)(*(void *)(v61[0] + 336) + 8 * v11);
          int v65 = *(_DWORD *)(*(void *)(v61[0] + 264) + 8 * v11);
          sub_1B65703B8(&v66, (uint64_t)v61, (uint64_t)v67, (*(unsigned __int16 *)(*(void *)(v57 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v49 + 432) + 2 * v59) >> 7) & 0xF);
          uint64_t v13 = v54;
          uint64_t v26 = *v17;
          uint64_t v27 = *v19;
          *(void *)(*a4 + 8 * v27) = 0;
          if (SLODWORD(v67[4]) >= 1)
          {
            uint64_t v28 = *(void *)(v57 + 264);
            uint64_t v29 = *(unsigned int *)(v28 + 8 * v11);
            if ((int)v29 >= 1)
            {
              uint64_t v30 = (int *)(*(void *)(v57 + 288) + 4 * *(int *)(v28 + ((8 * v11) | 4)));
              do
              {
                uint64_t v31 = *v30++;
                uint64_t v32 = *(int *)(v50[12] + 4 * *(int *)(v54[21] + 4 * v31));
                LODWORD(v31) = *v25++;
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a4 + 8 * v32), *(float *)&v31);
                --v29;
              }
              while (v29);
            }
          }
          unsigned int v12 = a3;
          if (SHIDWORD(v67[3]) >= 1)
          {
            sub_1B6E10910((void *)v58, v11, v68);
            uint64_t v13 = v54;
            unsigned int v12 = a3;
            if ((int)v23 >= 1)
            {
              uint64_t v33 = 0;
              do
              {
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a3 + 8 * *(int *)((char *)v68 + v33)), *(float *)((char *)v24 + v33));
                v33 += 4;
              }
              while (4 * v23 != v33);
            }
          }
          *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*v12 + 8 * v26), v60);
          BOOL v14 = v53;
          uint64_t v15 = v56;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v57 + 8));
    BOOL v10 = v72;
  }
  operator delete(v10);
  operator delete(v77);
}

void sub_1B6573238(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  uint64_t v54 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v66 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v57 = v54[1];
  uint64_t v49 = v54[2];
  uint64_t v58 = *(void *)(*(void *)(v57 + 456) + 8 * a5);
  if (*(unsigned char *)(v58 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v53 = v7;
  float v56 = *(void **)(v54[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v49 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v57 + 20);
  int v73 = &v76;
  int v74 = 2 * v9;
  int v75 = 32;
  unsigned __int8 v77 = 0;
  if (2 * v9 >= 0x21)
  {
    unsigned __int8 v77 = (uint64_t *)operator new(8 * v9);
    int v73 = v77;
    int v75 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v57 + 20);
  }
  BOOL v10 = 0;
  float v68 = &v71;
  unsigned int v69 = v9;
  int v70 = 16;
  float v72 = 0;
  if (v9 >= 0x11)
  {
    BOOL v10 = operator new(4 * v9);
    float v72 = v10;
    float v68 = (uint64_t *)v10;
    int v70 = v9;
  }
  v61[0] = v57;
  v61[1] = v49;
  if (*(int *)(v57 + 8) >= 1)
  {
    int v50 = v8;
    uint64_t v11 = 0;
    uint64_t v13 = v54;
    unsigned int v12 = a3;
    BOOL v14 = v53;
    uint64_t v15 = v56;
    do
    {
      int v59 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v59 != -1)
      {
        uint64_t v16 = *(int *)(*(void *)(v58 + 96) + 4 * v11);
        uint64_t v17 = (int *)(*(void *)(v58 + 144) + 4 * v16);
        uint64_t v18 = *(int *)(v50[12] + 4 * v59);
        uint64_t v19 = (int *)(v50[18] + 4 * v18);
        uint64_t v20 = *v19;
        uint64_t v21 = v50[21];
        if ((*(unsigned char *)(v21 + v20) & 1) == 0 && v14)
        {
          *(void *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * *v19) = vadd_f32(*(float32x2_t *)(*v12 + 8 * *v17), *(float32x2_t *)(*a4 + 8 * *v19));
        }
        else if (*(unsigned char *)(v21 + v20))
        {
          uint64_t v34 = v50[9];
          uint64_t v35 = *(unsigned __int16 *)(v34 + 2 * v59);
          if (*(_WORD *)(v34 + 2 * v59))
          {
            uint64_t v36 = 0;
            uint64_t v51 = *(void *)(v58 + 144) + 4 * v16;
            uint64_t v52 = *(void *)(v58 + 168) + v16;
            uint64_t v37 = v21 + v18;
            do
            {
              uint64_t v38 = *(unsigned __int16 *)(v15[5] + 2 * (v36 + *(int *)(*(void *)(v15[4] + 96) + 4 * v59)));
              uint64_t v39 = v17[v38];
              uint64_t v40 = v19[v36];
              *(void *)(*a4 + 8 * v40) = 0;
              if (!v14 && (*(unsigned char *)(v37 + v36) & 8) != 0)
              {
                uint64_t v41 = v37;
                sub_1B6E1066C((void *)v58, v11, v38, v67);
                if ((*(unsigned char *)(v52 + v38) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v52 + v38) & 0x20) != 0)
                  {
                    unsigned int v46 = v38 == 0;
                    uint64_t v44 = v56;
                    int v45 = v11;
                  }
                  else
                  {
                    uint64_t v44 = v56;
                    int v45 = v11;
                    unsigned int v46 = v38;
                  }
                  float v47 = sub_1B6E24EC4(v44, v45, v46, v59);
                  float v48 = 1.0 - v47;
                  float v43 = v47 + (float)((float)(1.0 - v47) * 0.75);
                  float v42 = v48 * 0.125;
                }
                else
                {
                  float v42 = 0.125;
                  float v43 = 0.75;
                }
                uint64_t v13 = v54;
                unsigned int v12 = a3;
                BOOL v14 = v53;
                uint64_t v15 = v56;
                uint64_t v37 = v41;
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * SLODWORD(v67[0])), v42);
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * SHIDWORD(v67[0])), v42);
                *(float32x2_t *)(*a4 + 8 * v40) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v40), *(float32x2_t *)(*a3 + 8 * v39), v43);
                uint64_t v17 = (int *)v51;
              }
              else
              {
                *(float32x2_t *)(*a4 + 8 * v40) = vadd_f32(*(float32x2_t *)(*v12 + 8 * v39), *(float32x2_t *)(*a4 + 8 * v40));
              }
              ++v36;
            }
            while (v35 != v36);
          }
        }
        else
        {
          uint64_t v23 = *(int *)(*(void *)(v57 + 336) + 8 * v11);
          float v60 = 0.0;
          int v24 = v73;
          uint64_t v25 = (_DWORD *)v73 + v23;
          v67[0] = &v60;
          v67[1] = v73;
          v67[2] = v25;
          memset(&v67[3], 0, 13);
          int v62 = v11;
          int v63 = v59;
          int v64 = *(_DWORD *)(*(void *)(v61[0] + 336) + 8 * v11);
          int v65 = *(_DWORD *)(*(void *)(v61[0] + 264) + 8 * v11);
          sub_1B6570C90(&v66, (uint64_t)v61, (uint64_t)v67, (*(unsigned __int16 *)(*(void *)(v57 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v49 + 432) + 2 * v59) >> 7) & 0xF);
          uint64_t v13 = v54;
          uint64_t v26 = *v17;
          uint64_t v27 = *v19;
          *(void *)(*a4 + 8 * v27) = 0;
          if (SLODWORD(v67[4]) >= 1)
          {
            uint64_t v28 = *(void *)(v57 + 264);
            uint64_t v29 = *(unsigned int *)(v28 + 8 * v11);
            if ((int)v29 >= 1)
            {
              uint64_t v30 = (int *)(*(void *)(v57 + 288) + 4 * *(int *)(v28 + ((8 * v11) | 4)));
              do
              {
                uint64_t v31 = *v30++;
                uint64_t v32 = *(int *)(v50[12] + 4 * *(int *)(v54[21] + 4 * v31));
                LODWORD(v31) = *v25++;
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a4 + 8 * v32), *(float *)&v31);
                --v29;
              }
              while (v29);
            }
          }
          unsigned int v12 = a3;
          if (SHIDWORD(v67[3]) >= 1)
          {
            sub_1B6E10910((void *)v58, v11, v68);
            uint64_t v13 = v54;
            unsigned int v12 = a3;
            if ((int)v23 >= 1)
            {
              uint64_t v33 = 0;
              do
              {
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a3 + 8 * *(int *)((char *)v68 + v33)), *(float *)((char *)v24 + v33));
                v33 += 4;
              }
              while (4 * v23 != v33);
            }
          }
          *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*v12 + 8 * v26), v60);
          BOOL v14 = v53;
          uint64_t v15 = v56;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v57 + 8));
    BOOL v10 = v72;
  }
  operator delete(v10);
  operator delete(v77);
}

void sub_1B65737A4(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v7 = v6[2];
  float v47 = v6;
  uint64_t v48 = v6[1];
  uint64_t v8 = v6[60];
  uint64_t v9 = *(void *)(v7 + 456);
  uint64_t v49 = *(void *)(*(void *)(v48 + 456) + 8 * a5);
  if (*(unsigned char *)(v49 + 12)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = **(_DWORD **)a1 == 0;
  }
  BOOL v42 = v10;
  uint64_t v11 = *(void **)(v8 + 8 * a5);
  uint64_t v41 = *(void **)(v9 + 8 * a5);
  unsigned int v12 = *(_DWORD *)(v48 + 20);
  float v56 = &v59;
  int v57 = 2 * v12;
  int v58 = 32;
  float v60 = 0;
  if (2 * v12 >= 0x21)
  {
    float v60 = operator new(8 * v12);
    float v56 = (uint64_t *)v60;
    int v58 = 2 * v12;
    unsigned int v12 = *(_DWORD *)(v48 + 20);
  }
  uint64_t v13 = 0;
  uint64_t v51 = &v54;
  unsigned int v52 = v12;
  int v53 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    uint64_t v13 = operator new(4 * v12);
    __p = v13;
    uint64_t v51 = (uint64_t *)v13;
    int v53 = v12;
  }
  if (*(int *)(v48 + 8) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a3;
    BOOL v16 = v42;
    while (1)
    {
      uint64_t v17 = *(int *)(v47[30] + 4 * v14);
      if (v17 != -1)
      {
        uint64_t v18 = *(int *)(*(void *)(v49 + 96) + 4 * v14);
        uint64_t v19 = (int *)(*(void *)(v49 + 144) + 4 * v18);
        uint64_t v20 = *(int *)(v41[12] + 4 * v17);
        uint64_t v21 = (int *)(v41[18] + 4 * v20);
        uint64_t v22 = *v21;
        uint64_t v23 = v41[21];
        if ((*(unsigned char *)(v23 + v22) & 1) == 0 && v16)
        {
          *(void *)(*a4 + 8 * v22) = 0;
          uint64_t v25 = (float32x2_t *)(*a4 + 8 * *v21);
          int v26 = *v19;
        }
        else
        {
          if (*(unsigned char *)(v23 + v22))
          {
            uint64_t v27 = v41[9];
            uint64_t v28 = *(unsigned __int16 *)(v27 + 2 * v17);
            if (*(_WORD *)(v27 + 2 * v17))
            {
              uint64_t v29 = 0;
              uint64_t v45 = *(void *)(v49 + 168) + v18;
              uint64_t v46 = *(unsigned __int16 *)(v27 + 2 * v17);
              uint64_t v30 = v23 + v20;
              uint64_t v44 = v30;
              do
              {
                uint64_t v31 = *(unsigned __int16 *)(v11[5] + 2 * (v29 + *(int *)(*(void *)(v11[4] + 96) + 4 * v17)));
                uint64_t v32 = v19[v31];
                uint64_t v33 = v21[v29];
                *(void *)(*a4 + 8 * v33) = 0;
                if (!v16 && (*(unsigned char *)(v30 + v29) & 8) != 0)
                {
                  sub_1B6E1066C((void *)v49, v14, v31, v50);
                  if ((*(unsigned char *)(v45 + v31) & 0x10) != 0)
                  {
                    if ((*(unsigned char *)(v45 + v31) & 0x20) != 0)
                    {
                      unsigned int v38 = v31 == 0;
                      uint64_t v36 = v11;
                      int v37 = v14;
                    }
                    else
                    {
                      uint64_t v36 = v11;
                      int v37 = v14;
                      unsigned int v38 = v31;
                    }
                    float v39 = sub_1B6E24EC4(v36, v37, v38, v17);
                    float v40 = 1.0 - v39;
                    float v35 = v39 + (float)((float)(1.0 - v39) * 0.75);
                    float v34 = v40 * 0.125;
                  }
                  else
                  {
                    float v34 = 0.125;
                    float v35 = 0.75;
                  }
                  uint64_t v15 = a3;
                  uint64_t v30 = v44;
                  BOOL v16 = v42;
                  uint64_t v28 = v46;
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v50[0]), v34);
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v50[1]), v34);
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v32), v35);
                }
                else
                {
                  *(float32x2_t *)(*a4 + 8 * v33) = vadd_f32(*(float32x2_t *)(*v15 + 8 * v32), *(float32x2_t *)(*a4 + 8 * v33));
                }
                ++v29;
              }
              while (v28 != v29);
            }
            goto LABEL_19;
          }
          int v26 = *v19;
          *(void *)(*a4 + 8 * v22) = 0;
          uint64_t v25 = (float32x2_t *)(*a4 + 8 * v22);
        }
        *uint64_t v25 = vadd_f32(*(float32x2_t *)(*v15 + 8 * v26), *v25);
      }
LABEL_19:
      if (++v14 >= *(int *)(v48 + 8))
      {
        uint64_t v13 = __p;
        break;
      }
    }
  }
  operator delete(v13);
  operator delete(v60);
}

void sub_1B6573B54(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v8 = *(_DWORD *)*a1;
  if (v8)
  {
    if (v8 == 2)
    {
      sub_1B65741AC((uint64_t)a1, a2, a3, a4);
      sub_1B6574874(a1, a2, a3, a4);
      sub_1B6574B0C(a1, a2, a3, a4);
    }
    else if (v8 == 1)
    {
      sub_1B65741AC((uint64_t)a1, a2, a3, a4);
      sub_1B657433C(a1, a2, a3, a4);
      sub_1B65745D4(a1, a2, a3, a4);
    }
  }
  else
  {
    sub_1B65741AC((uint64_t)a1, a2, a3, a4);
    uint64_t v9 = 0;
    int v10 = a2 - 1;
    uint64_t v11 = *(void *)(*(void *)(*a1 + 64) + 8 * (a2 - 1));
    uint64_t v12 = *(void *)(v11 + 8);
    uint64_t v13 = *(unsigned int *)(v12 + 16);
    __p = 0;
    if (v13 >= 9)
    {
      uint64_t v9 = operator new(4 * v13);
      __p = v9;
    }
    int v14 = *(_DWORD *)(v12 + 4);
    if (v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      v17.i64[0] = 0x3F0000003F000000;
      v17.i64[1] = 0x3F0000003F000000;
      do
      {
        uint64_t v18 = *(int *)(*(void *)(v11 + 216) + 4 * v16);
        if (v18 != -1)
        {
          uint64_t v19 = (int *)(*(void *)(v12 + 120) + v15);
          *(_OWORD *)(*a4 + 16 * v18) = 0uLL;
          *(float32x4_t *)(*a4 + 16 * v18) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v18), v17, *(float32x4_t *)(*a3 + 16 * *v19));
          *(float32x4_t *)(*a4 + 16 * v18) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v18), v17, *(float32x4_t *)(*a3 + 16 * v19[1]));
          int v14 = *(_DWORD *)(v12 + 4);
        }
        ++v16;
        v15 += 8;
      }
      while (v16 < v14);
      uint64_t v9 = __p;
    }
    operator delete(v9);
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(*(void *)(*a1 + 64) + 8 * v10);
    uint64_t v22 = *(void *)(v21 + 8);
    uint64_t v27 = 0;
    if ((2 * *(_DWORD *)(v22 + 20)) >= 0x21)
    {
      uint64_t v20 = operator new(4 * (2 * *(_DWORD *)(v22 + 20)));
      uint64_t v27 = v20;
    }
    int v23 = *(_DWORD *)(v22 + 8);
    if (v23 >= 1)
    {
      for (uint64_t i = 0; i < v23; ++i)
      {
        uint64_t v25 = *(int *)(*(void *)(v21 + 240) + 4 * i);
        if (v25 != -1)
        {
          *(_OWORD *)(*a4 + 16 * v25) = 0uLL;
          *(float32x4_t *)(*a4 + 16 * v25) = vaddq_f32(*(float32x4_t *)(*a3 + 16 * i), *(float32x4_t *)(*a4 + 16 * v25));
          int v23 = *(_DWORD *)(v22 + 8);
        }
      }
      uint64_t v20 = v27;
    }
    operator delete(v20);
  }
}

void sub_1B6573E84(int **a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      sub_1B6574DAC((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6575898((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6575C60((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      sub_1B6574DAC((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6574F60((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6575328((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    sub_1B6574DAC((uint64_t)a1, a2, a3, a4, a5);
    sub_1B65761D0((uint64_t)a1, a2, a3, a4, a5);
    sub_1B6576404((uint64_t)a1, a2, a3, a4, a5);
  }
}

void sub_1B6574018(int **a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      sub_1B6574DAC((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6575898((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6576D1C((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      sub_1B6574DAC((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6574F60((uint64_t)a1, a2, a3, a4, a5);
      sub_1B65767AC((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    sub_1B6574DAC((uint64_t)a1, a2, a3, a4, a5);
    sub_1B65761D0((uint64_t)a1, a2, a3, a4, a5);
    sub_1B657728C((uint64_t)a1, a2, a3, a4, a5);
  }
}

void sub_1B65741AC(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v4 + 52))
  {
    uint64_t v7 = 0;
    int v8 = *(int **)(v4 + 8);
    uint64_t v9 = v8[5];
    uint64_t v19 = (float *)&v20;
    __p = 0;
    if (v9 >= 0x11)
    {
      uint64_t v7 = operator new(4 * v9);
      __p = v7;
      uint64_t v19 = (float *)v7;
    }
    if (*v8 >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(int *)(*(void *)(v4 + 168) + 4 * v10);
        if (v11 != -1)
        {
          uint64_t v12 = (unsigned int *)(*((void *)v8 + 3) + 8 * v10);
          uint64_t v13 = *v12;
          if ((int)v13 < 1)
          {
            *(_OWORD *)(*a4 + 16 * v11) = 0uLL;
          }
          else
          {
            uint64_t v14 = *((void *)v8 + 6) + 4 * (int)v12[1];
            uint64_t v15 = v19;
            uint64_t v16 = v13;
            do
            {
              *v15++ = 1.0 / (float)(int)v13;
              --v16;
            }
            while (v16);
            *(_OWORD *)(*a4 + 16 * v11) = 0uLL;
            unint64_t v17 = 0;
            uint64_t v18 = 4 * v13;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v11) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v11), *(float32x4_t *)(*a3 + 16 * *(int *)(v14 + v17)), v19[v17 / 4]);
              v17 += 4;
            }
            while (v18 != v17);
          }
        }
        ++v10;
      }
      while (v10 < *v8);
      uint64_t v7 = __p;
    }
    operator delete(v7);
  }
}

void sub_1B657433C(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = 0;
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v10 = v9[1];
  uint64_t v33 = v9[2];
  int v37 = *(_DWORD *)(v8 + 4);
  uint64_t v11 = *(unsigned int *)(v10 + 16);
  unsigned int v38 = (float *)&v41;
  int v39 = v11;
  int v40 = 8;
  uint64_t v35 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    uint64_t v7 = operator new(4 * v11);
    __p = v7;
    unsigned int v38 = (float *)v7;
    int v40 = v11;
  }
  int v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *(int *)(v9[27] + 4 * i);
      if (v14 != -1)
      {
        uint64_t v15 = (int *)(*(void *)(v10 + 120) + 8 * i);
        uint64_t v16 = *(void *)(v10 + 168);
        unint64_t v17 = (unsigned int *)(*(void *)(v10 + 144) + 8 * i);
        uint64_t v18 = *v17;
        uint64_t v19 = (int)v17[1];
        v34[0] = v43;
        v34[1] = 0;
        v34[2] = v38;
        memset(&v34[3], 0, 13);
        int v36 = i;
        if (*(float *)(*(void *)(v10 + 216) + 4 * i) <= 0.0) {
          int v20 = 1;
        }
        else {
          int v20 = 4;
        }
        sub_1B656FFE8(&v37, (int *)&v35, (uint64_t)v34, v20, (*(unsigned __int16 *)(*(void *)(v33 + 432) + 2 * v14) >> 7) & 0xF);
        *(_OWORD *)(*a4 + 16 * v14) = 0u;
        float32x2_t v21 = (float32x2_t)v43[0];
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * *v15), *(float *)v43);
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * v15[1]), v21, 1);
        if (SLODWORD(v34[4]) >= 1 && (int)v18 >= 1)
        {
          for (uint64_t j = 0; j != v18; ++j)
          {
            uint64_t v23 = *(int *)(v16 + 4 * v19 + 4 * j);
            if (BYTE4(v34[4]))
            {
              int v24 = (int *)(v9[21] + 4 * v23);
              uint64_t v25 = *a4;
              uint64_t v26 = *a4;
            }
            else
            {
              uint64_t v27 = 0;
              uint64_t v28 = *(void *)(v10 + 24);
              uint64_t v29 = *(int *)(v28 + 8 * v23 + 4);
              int v30 = *(_DWORD *)(v28 + 8 * v23);
              do
                uint64_t v31 = *(unsigned int *)(*(void *)(v10 + 72) + 4 * v29 + 4 * v27++);
              while (i != v31);
              uint64_t v32 = *(void *)(v10 + 48) + 4 * v29;
              if ((int)v27 + 1 < v30) {
                int v30 = 0;
              }
              int v24 = (int *)(v32 + 4 * ((int)v27 - v30 + 1));
              uint64_t v26 = *a4;
              uint64_t v25 = *a3;
            }
            *(float32x4_t *)(v26 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(v26 + 16 * v14), *(float32x4_t *)(v25 + 16 * *v24), v38[j]);
          }
        }
        int v12 = *(_DWORD *)(v10 + 4);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B65745D4(uint64_t *a1, int a2, void *a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v11 = v9[1];
  uint64_t v10 = v9[2];
  int v45 = *(_DWORD *)(v8 + 4);
  unsigned int v12 = 2 * *(_DWORD *)(v11 + 20);
  uint64_t v46 = &v49;
  unsigned int v47 = v12;
  int v48 = 32;
  v40[0] = v11;
  v40[1] = v10;
  uint64_t v33 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    uint64_t v7 = operator new(4 * v12);
    __p = v7;
    uint64_t v46 = (uint64_t *)v7;
    int v48 = v12;
  }
  int v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (uint64_t i = 0; i < v13; ++i)
    {
      int v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        uint64_t v16 = v15;
        uint64_t v36 = *(void *)(v11 + 360);
        uint64_t v17 = *(void *)(v11 + 336);
        uint64_t v18 = (8 * i) | 4;
        uint64_t v35 = *(int *)(v17 + v18);
        uint64_t v19 = *(int *)(v17 + 8 * i);
        uint64_t v20 = *(void *)(v11 + 264);
        uint64_t v34 = *(int *)(v20 + v18);
        uint64_t v21 = *(unsigned int *)(v20 + 8 * i);
        float v39 = 0.0;
        uint64_t v22 = v46;
        uint64_t v23 = (_DWORD *)v46 + v19;
        int v37 = v19;
        v38[0] = &v39;
        v38[1] = v46;
        v38[2] = v23;
        memset(&v38[3], 0, 13);
        int v41 = i;
        int v42 = v15;
        int v43 = *(_DWORD *)(*(void *)(v40[0] + 336) + 8 * i);
        int v44 = *(_DWORD *)(*(void *)(v40[0] + 264) + 8 * i);
        uint64_t v24 = *(void *)(v11 + 288);
        sub_1B65703B8(&v45, (uint64_t)v40, (uint64_t)v38, (*(unsigned __int16 *)(*(void *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v33 + 432) + 2 * v15) >> 7) & 0xF);
        *(_OWORD *)(*a4 + 16 * v16) = 0u;
        if (SLODWORD(v38[4]) >= 1 && (int)v21 >= 1)
        {
          uint64_t v25 = (int *)(v24 + 4 * v34);
          do
          {
            uint64_t v26 = *v25++;
            uint64_t v27 = *(int *)(v9[21] + 4 * v26);
            LODWORD(v26) = *v23++;
            *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a4 + 16 * v27), *(float *)&v26);
            --v21;
          }
          while (v21);
        }
        uint64_t v28 = v37;
        if (SHIDWORD(v38[3]) >= 1 && v37 >= 1)
        {
          int v30 = (int *)(v36 + 4 * v35);
          do
          {
            uint64_t v31 = *v30++;
            uint64_t v32 = (_DWORD *)(*(void *)(v11 + 120) + 8 * v31);
            LODWORD(v31) = *(_DWORD *)v22;
            uint64_t v22 = (uint64_t *)((char *)v22 + 4);
            *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * (int)v32[i == *v32]), *(float *)&v31);
            --v28;
          }
          while (v28);
        }
        *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * i), v39);
        int v13 = *(_DWORD *)(v11 + 8);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B6574874(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = 0;
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v10 = v9[1];
  uint64_t v33 = v9[2];
  int v37 = *(_DWORD *)(v8 + 4);
  uint64_t v11 = *(unsigned int *)(v10 + 16);
  unsigned int v38 = (float *)&v41;
  int v39 = v11;
  int v40 = 8;
  uint64_t v35 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    uint64_t v7 = operator new(4 * v11);
    __p = v7;
    unsigned int v38 = (float *)v7;
    int v40 = v11;
  }
  int v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *(int *)(v9[27] + 4 * i);
      if (v14 != -1)
      {
        int v15 = (int *)(*(void *)(v10 + 120) + 8 * i);
        uint64_t v16 = *(void *)(v10 + 168);
        uint64_t v17 = (unsigned int *)(*(void *)(v10 + 144) + 8 * i);
        uint64_t v18 = *v17;
        uint64_t v19 = (int)v17[1];
        v34[0] = v43;
        v34[1] = 0;
        v34[2] = v38;
        memset(&v34[3], 0, 13);
        int v36 = i;
        if (*(float *)(*(void *)(v10 + 216) + 4 * i) <= 0.0) {
          int v20 = 1;
        }
        else {
          int v20 = 4;
        }
        sub_1B6570AAC(&v37, (int *)&v35, (uint64_t)v34, v20, (*(unsigned __int16 *)(*(void *)(v33 + 432) + 2 * v14) >> 7) & 0xF);
        *(_OWORD *)(*a4 + 16 * v14) = 0u;
        float32x2_t v21 = (float32x2_t)v43[0];
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * *v15), *(float *)v43);
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * v15[1]), v21, 1);
        if (SLODWORD(v34[4]) >= 1 && (int)v18 >= 1)
        {
          for (uint64_t j = 0; j != v18; ++j)
          {
            uint64_t v23 = *(int *)(v16 + 4 * v19 + 4 * j);
            if (BYTE4(v34[4]))
            {
              uint64_t v24 = (int *)(v9[21] + 4 * v23);
              uint64_t v25 = *a4;
              uint64_t v26 = *a4;
            }
            else
            {
              uint64_t v27 = 0;
              uint64_t v28 = *(void *)(v10 + 24);
              uint64_t v29 = *(int *)(v28 + 8 * v23 + 4);
              int v30 = *(_DWORD *)(v28 + 8 * v23);
              do
                uint64_t v31 = *(unsigned int *)(*(void *)(v10 + 72) + 4 * v29 + 4 * v27++);
              while (i != v31);
              uint64_t v32 = *(void *)(v10 + 48) + 4 * v29;
              if ((int)v27 + 1 < v30) {
                int v30 = 0;
              }
              uint64_t v24 = (int *)(v32 + 4 * ((int)v27 - v30 + 1));
              uint64_t v26 = *a4;
              uint64_t v25 = *a3;
            }
            *(float32x4_t *)(v26 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(v26 + 16 * v14), *(float32x4_t *)(v25 + 16 * *v24), v38[j]);
          }
        }
        int v12 = *(_DWORD *)(v10 + 4);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B6574B0C(uint64_t *a1, int a2, void *a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v11 = v9[1];
  uint64_t v10 = v9[2];
  int v45 = *(_DWORD *)(v8 + 4);
  unsigned int v12 = 2 * *(_DWORD *)(v11 + 20);
  uint64_t v46 = &v49;
  unsigned int v47 = v12;
  int v48 = 32;
  v40[0] = v11;
  v40[1] = v10;
  uint64_t v33 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    uint64_t v7 = operator new(4 * v12);
    __p = v7;
    uint64_t v46 = (uint64_t *)v7;
    int v48 = v12;
  }
  int v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (uint64_t i = 0; i < v13; ++i)
    {
      int v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        uint64_t v16 = v15;
        uint64_t v36 = *(void *)(v11 + 360);
        uint64_t v17 = *(void *)(v11 + 336);
        uint64_t v18 = (8 * i) | 4;
        uint64_t v35 = *(int *)(v17 + v18);
        uint64_t v19 = *(int *)(v17 + 8 * i);
        uint64_t v20 = *(void *)(v11 + 264);
        uint64_t v34 = *(int *)(v20 + v18);
        uint64_t v21 = *(unsigned int *)(v20 + 8 * i);
        float v39 = 0.0;
        uint64_t v22 = v46;
        uint64_t v23 = (_DWORD *)v46 + v19;
        int v37 = v19;
        v38[0] = &v39;
        v38[1] = v46;
        v38[2] = v23;
        memset(&v38[3], 0, 13);
        int v41 = i;
        int v42 = v15;
        int v43 = *(_DWORD *)(*(void *)(v40[0] + 336) + 8 * i);
        int v44 = *(_DWORD *)(*(void *)(v40[0] + 264) + 8 * i);
        uint64_t v24 = *(void *)(v11 + 288);
        sub_1B6570C90(&v45, (uint64_t)v40, (uint64_t)v38, (*(unsigned __int16 *)(*(void *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v33 + 432) + 2 * v15) >> 7) & 0xF);
        *(_OWORD *)(*a4 + 16 * v16) = 0u;
        if (SLODWORD(v38[4]) >= 1 && (int)v21 >= 1)
        {
          uint64_t v25 = (int *)(v24 + 4 * v34);
          do
          {
            uint64_t v26 = *v25++;
            uint64_t v27 = *(int *)(v9[21] + 4 * v26);
            LODWORD(v26) = *v23++;
            *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a4 + 16 * v27), *(float *)&v26);
            --v21;
          }
          while (v21);
        }
        uint64_t v28 = v37;
        if (SHIDWORD(v38[3]) >= 1 && v37 >= 1)
        {
          int v30 = (int *)(v36 + 4 * v35);
          do
          {
            uint64_t v31 = *v30++;
            uint64_t v32 = (_DWORD *)(*(void *)(v11 + 120) + 8 * v31);
            LODWORD(v31) = *(_DWORD *)v22;
            uint64_t v22 = (uint64_t *)((char *)v22 + 4);
            *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * (int)v32[i == *v32]), *(float *)&v31);
            --v28;
          }
          while (v28);
        }
        *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * i), v39);
        int v13 = *(_DWORD *)(v11 + 8);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B6574DAC(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v5 + 52))
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(int **)(v5 + 8);
    uint64_t v10 = *(void **)(*((void *)v9 + 57) + 8 * a5);
    uint64_t v11 = *(void *)(*(void *)(*(void *)(v5 + 16) + 456) + 8 * a5);
    uint64_t v12 = v9[5];
    uint64_t v23 = (float *)&v24;
    __p = 0;
    if (v12 >= 0x11)
    {
      uint64_t v8 = operator new(4 * v12);
      __p = v8;
      uint64_t v23 = (float *)v8;
    }
    if (*v9 >= 1)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = *(int *)(*(void *)(v5 + 168) + 4 * v13);
        if (v14 != -1)
        {
          uint64_t v15 = *(int *)(*(void *)(v11 + 96) + 4 * v14);
          uint64_t v16 = (unsigned int *)(*(void *)(*v10 + 24) + 8 * v13);
          uint64_t v17 = *v16;
          if ((int)v17 < 1)
          {
            *(_OWORD *)(*a4 + 16 * v15) = 0uLL;
          }
          else
          {
            uint64_t v18 = v10[3] + 4 * (int)v16[1];
            uint64_t v19 = v23;
            uint64_t v20 = v17;
            do
            {
              *v19++ = 1.0 / (float)(int)v17;
              --v20;
            }
            while (v20);
            *(_OWORD *)(*a4 + 16 * v15) = 0uLL;
            unint64_t v21 = 0;
            uint64_t v22 = 4 * v17;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v15) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v15), *(float32x4_t *)(*a3 + 16 * *(int *)(v18 + v21)), v23[v21 / 4]);
              v21 += 4;
            }
            while (v22 != v21);
          }
        }
        ++v13;
      }
      while (v13 < *v9);
      uint64_t v8 = __p;
    }
    operator delete(v8);
  }
}

void sub_1B6574F60(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  v58[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v50 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v9 = v8[1];
  uint64_t v10 = *(void *)(v8[60] + 8 * a5);
  uint64_t v11 = *(void *)(*(void *)(v9 + 456) + 8 * a5);
  uint64_t v43 = v8[2];
  uint64_t v12 = *(void **)(*(void *)(v43 + 456) + 8 * a5);
  uint64_t v46 = v9;
  uint64_t v13 = *(unsigned int *)(v9 + 16);
  uint64_t v14 = v56;
  int v53 = v56;
  int v54 = v13;
  int v55 = 8;
  __p = 0;
  if (v13 < 9)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = operator new(4 * v13);
    __p = v15;
    int v53 = v15;
    int v55 = v13;
    uint64_t v14 = v15;
  }
  v49[0] = v58;
  v49[1] = 0;
  v49[2] = v14;
  memset(&v49[3], 0, 13);
  if (*(unsigned char *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v49[3]) = 2;
    LODWORD(v49[4]) = 0;
    v58[0] = 0x3F0000003F000000;
    char v44 = 1;
  }
  else
  {
    char v44 = 0;
  }
  uint64_t v47 = v46;
  if (*(int *)(v46 + 4) >= 1)
  {
    uint64_t v16 = 0;
    int v45 = v8;
    do
    {
      uint64_t v17 = *(int *)(v8[27] + 4 * v16);
      if (v17 != -1)
      {
        uint64_t v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if (*(unsigned char *)(v12[21] + *v18))
        {
          uint64_t v37 = v12[9];
          uint64_t v38 = *(unsigned __int16 *)(v37 + 2 * v17);
          if (*(_WORD *)(v37 + 2 * v17))
          {
            uint64_t v39 = 0;
            do
            {
              sub_1B6E10810((void *)v11, v16, *(unsigned __int16 *)(*(void *)(v10 + 40)+ 2 * (v39 + *(int *)(*(void *)(*(void *)(v10 + 32) + 96) + 4 * v17))), &v51);
              v40.i64[0] = 0x3F0000003F000000;
              v40.i64[1] = 0x3F0000003F000000;
              uint64_t v41 = v18[v39];
              *(_OWORD *)(*a4 + 16 * v41) = 0u;
              uint64_t v42 = v52;
              *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v41), v40, *(float32x4_t *)(*a3 + 16 * v51));
              *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v41), v40, *(float32x4_t *)(*a3 + 16 * v42));
              ++v39;
            }
            while (v38 != v39);
          }
        }
        else
        {
          if ((v44 & 1) == 0)
          {
            int v48 = v16;
            if (*(float *)(*(void *)(v46 + 216) + 4 * v16) <= 0.0) {
              int v19 = 1;
            }
            else {
              int v19 = 4;
            }
            sub_1B656FFE8(&v50, (int *)&v47, (uint64_t)v49, v19, (*(unsigned __int16 *)(*(void *)(v43 + 432) + 2 * v17) >> 7) & 0xF);
          }
          sub_1B6E10810((void *)v11, v16, 0, &v51);
          uint64_t v20 = *v18;
          *(_OWORD *)(*a4 + 16 * v20) = 0u;
          uint64_t v21 = v52;
          float32x2_t v22 = (float32x2_t)v58[0];
          *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v20), *(float32x4_t *)(*a3 + 16 * v51), *(float *)v58);
          *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v20), *(float32x4_t *)(*a3 + 16 * v21), v22, 1);
          if (SLODWORD(v49[4]) >= 1)
          {
            uint64_t v23 = (unsigned int *)(*(void *)(v46 + 144) + 8 * v16);
            uint64_t v24 = *v23;
            if ((int)v24 >= 1)
            {
              uint64_t v25 = 0;
              uint64_t v26 = *(void *)(v46 + 168) + 4 * (int)v23[1];
              do
              {
                uint64_t v27 = *(int *)(v26 + 4 * v25);
                if (BYTE4(v49[4]))
                {
                  uint64_t v28 = (int *)(v12[12] + 4 * *(int *)(v45[21] + 4 * v27));
                  uint64_t v29 = *a4;
                  uint64_t v30 = *a4;
                }
                else
                {
                  uint64_t v31 = 0;
                  uint64_t v32 = (2 * (int)v27) | 1;
                  uint64_t v33 = *(void *)(v46 + 24);
                  uint64_t v34 = *(void *)(v46 + 72) + 4 * *(int *)(v33 + 4 * v32);
                  int v35 = *(_DWORD *)(v33 + 8 * v27);
                  do
                    uint64_t v36 = *(unsigned int *)(v34 + 4 * v31++);
                  while (v16 != v36);
                  if ((int)v31 + 1 < v35) {
                    int v35 = 0;
                  }
                  uint64_t v28 = (int *)(*(void *)(v11 + 24)
                              + 4 * *(int *)(*(void *)(*(void *)v11 + 24) + 4 * v32)
                              + 4 * ((int)v31 - v35 + 1));
                  uint64_t v30 = *a4;
                  uint64_t v29 = *a3;
                }
                *(float32x4_t *)(v30 + 16 * v20) = vmlaq_n_f32(*(float32x4_t *)(v30 + 16 * v20), *(float32x4_t *)(v29 + 16 * *v28), *(float *)&v53[4 * v25++]);
              }
              while (v25 != v24);
            }
          }
        }
      }
      ++v16;
      uint64_t v8 = v45;
    }
    while (v16 < *(int *)(v46 + 4));
    uint64_t v15 = __p;
  }
  operator delete(v15);
}

void sub_1B6575328(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v55 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v67 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v58 = v55[1];
  uint64_t v50 = v55[2];
  uint64_t v59 = *(void *)(*(void *)(v58 + 456) + 8 * a5);
  if (*(unsigned char *)(v59 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v54 = v7;
  int v57 = *(void **)(v55[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v50 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v58 + 20);
  int v74 = &v77;
  int v75 = 2 * v9;
  int v76 = 32;
  uint64_t v78 = 0;
  if (2 * v9 >= 0x21)
  {
    uint64_t v78 = (uint64_t *)operator new(8 * v9);
    int v74 = v78;
    int v76 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v58 + 20);
  }
  uint64_t v10 = 0;
  unsigned int v69 = &v72;
  unsigned int v70 = v9;
  int v71 = 16;
  int v73 = 0;
  if (v9 >= 0x11)
  {
    uint64_t v10 = operator new(4 * v9);
    int v73 = v10;
    unsigned int v69 = (uint64_t *)v10;
    int v71 = v9;
  }
  v62[0] = v58;
  v62[1] = v50;
  if (*(int *)(v58 + 8) >= 1)
  {
    int v51 = v8;
    uint64_t v11 = 0;
    long long v12 = 0uLL;
    uint64_t v14 = v55;
    uint64_t v13 = a3;
    BOOL v15 = v54;
    uint64_t v16 = v57;
    do
    {
      int v60 = *(_DWORD *)(v14[30] + 4 * v11);
      if (v60 != -1)
      {
        uint64_t v17 = *(int *)(*(void *)(v59 + 96) + 4 * v11);
        uint64_t v18 = (int *)(*(void *)(v59 + 144) + 4 * v17);
        uint64_t v19 = *(int *)(v51[12] + 4 * v60);
        uint64_t v20 = (int *)(v51[18] + 4 * v19);
        uint64_t v21 = *v20;
        uint64_t v22 = v51[21];
        if ((*(unsigned char *)(v22 + v21) & 1) == 0 && v15)
        {
          *(_OWORD *)(*a4 + 16 * v21) = v12;
          *(float32x4_t *)(*a4 + 16 * *v20) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * *v18), *(float32x4_t *)(*a4 + 16 * *v20));
        }
        else if (*(unsigned char *)(v22 + v21))
        {
          uint64_t v35 = v51[9];
          uint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v60);
          if (*(_WORD *)(v35 + 2 * v60))
          {
            uint64_t v37 = 0;
            uint64_t v52 = *(void *)(v59 + 144) + 4 * v17;
            uint64_t v53 = *(void *)(v59 + 168) + v17;
            uint64_t v38 = v22 + v19;
            do
            {
              uint64_t v39 = *(unsigned __int16 *)(v16[5] + 2 * (v37 + *(int *)(*(void *)(v16[4] + 96) + 4 * v60)));
              uint64_t v40 = v18[v39];
              uint64_t v41 = v20[v37];
              *(_OWORD *)(*a4 + 16 * v41) = v12;
              if (!v15 && (*(unsigned char *)(v38 + v37) & 8) != 0)
              {
                uint64_t v42 = v38;
                sub_1B6E1066C((void *)v59, v11, v39, v68);
                if ((*(unsigned char *)(v53 + v39) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v53 + v39) & 0x20) != 0)
                  {
                    unsigned int v47 = v39 == 0;
                    int v45 = v57;
                    int v46 = v11;
                  }
                  else
                  {
                    int v45 = v57;
                    int v46 = v11;
                    unsigned int v47 = v39;
                  }
                  float v48 = sub_1B6E24EC4(v45, v46, v47, v60);
                  float v49 = 1.0 - v48;
                  float v44 = v48 + (float)((float)(1.0 - v48) * 0.75);
                  float v43 = v49 * 0.125;
                }
                else
                {
                  float v43 = 0.125;
                  float v44 = 0.75;
                }
                uint64_t v14 = v55;
                uint64_t v13 = a3;
                BOOL v15 = v54;
                uint64_t v16 = v57;
                long long v12 = 0uLL;
                uint64_t v38 = v42;
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * SLODWORD(v68[0])), v43);
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * SHIDWORD(v68[0])), v43);
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * v40), v44);
                uint64_t v18 = (int *)v52;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v41) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * v40), *(float32x4_t *)(*a4 + 16 * v41));
              }
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          uint64_t v24 = *(int *)(*(void *)(v58 + 336) + 8 * v11);
          float v61 = 0.0;
          uint64_t v25 = v74;
          uint64_t v26 = (_DWORD *)v74 + v24;
          v68[0] = &v61;
          v68[1] = v74;
          v68[2] = v26;
          memset(&v68[3], 0, 13);
          int v63 = v11;
          int v64 = v60;
          int v65 = *(_DWORD *)(*(void *)(v62[0] + 336) + 8 * v11);
          int v66 = *(_DWORD *)(*(void *)(v62[0] + 264) + 8 * v11);
          sub_1B65703B8(&v67, (uint64_t)v62, (uint64_t)v68, (*(unsigned __int16 *)(*(void *)(v58 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v50 + 432) + 2 * v60) >> 7) & 0xF);
          long long v12 = 0uLL;
          uint64_t v14 = v55;
          uint64_t v27 = *v18;
          uint64_t v28 = *v20;
          *(_OWORD *)(*a4 + 16 * v28) = 0u;
          if (SLODWORD(v68[4]) >= 1)
          {
            uint64_t v29 = *(void *)(v58 + 264);
            uint64_t v30 = *(unsigned int *)(v29 + 8 * v11);
            if ((int)v30 >= 1)
            {
              uint64_t v31 = (int *)(*(void *)(v58 + 288) + 4 * *(int *)(v29 + ((8 * v11) | 4)));
              do
              {
                uint64_t v32 = *v31++;
                uint64_t v33 = *(int *)(v51[12] + 4 * *(int *)(v55[21] + 4 * v32));
                LODWORD(v32) = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * v33), *(float *)&v32);
                --v30;
              }
              while (v30);
            }
          }
          uint64_t v13 = a3;
          if (SHIDWORD(v68[3]) >= 1)
          {
            sub_1B6E10910((void *)v59, v11, v69);
            long long v12 = 0uLL;
            uint64_t v14 = v55;
            uint64_t v13 = a3;
            if ((int)v24 >= 1)
            {
              uint64_t v34 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * *(int *)((char *)v69 + v34)), *(float *)((char *)v25 + v34));
                v34 += 4;
              }
              while (4 * v24 != v34);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v13 + 16 * v27), v61);
          BOOL v15 = v54;
          uint64_t v16 = v57;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v58 + 8));
    uint64_t v10 = v73;
  }
  operator delete(v10);
  operator delete(v78);
}

void sub_1B6575898(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  v58[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v50 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v9 = v8[1];
  uint64_t v10 = *(void *)(v8[60] + 8 * a5);
  uint64_t v11 = *(void *)(*(void *)(v9 + 456) + 8 * a5);
  uint64_t v43 = v8[2];
  long long v12 = *(void **)(*(void *)(v43 + 456) + 8 * a5);
  uint64_t v46 = v9;
  uint64_t v13 = *(unsigned int *)(v9 + 16);
  uint64_t v14 = v56;
  uint64_t v53 = v56;
  int v54 = v13;
  int v55 = 8;
  __p = 0;
  if (v13 < 9)
  {
    BOOL v15 = 0;
  }
  else
  {
    BOOL v15 = operator new(4 * v13);
    __p = v15;
    uint64_t v53 = v15;
    int v55 = v13;
    uint64_t v14 = v15;
  }
  v49[0] = v58;
  v49[1] = 0;
  v49[2] = v14;
  memset(&v49[3], 0, 13);
  if (*(unsigned char *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v49[3]) = 2;
    LODWORD(v49[4]) = 0;
    v58[0] = 0x3F0000003F000000;
    char v44 = 1;
  }
  else
  {
    char v44 = 0;
  }
  uint64_t v47 = v46;
  if (*(int *)(v46 + 4) >= 1)
  {
    uint64_t v16 = 0;
    int v45 = v8;
    do
    {
      uint64_t v17 = *(int *)(v8[27] + 4 * v16);
      if (v17 != -1)
      {
        uint64_t v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if (*(unsigned char *)(v12[21] + *v18))
        {
          uint64_t v37 = v12[9];
          uint64_t v38 = *(unsigned __int16 *)(v37 + 2 * v17);
          if (*(_WORD *)(v37 + 2 * v17))
          {
            uint64_t v39 = 0;
            do
            {
              sub_1B6E10810((void *)v11, v16, *(unsigned __int16 *)(*(void *)(v10 + 40)+ 2 * (v39 + *(int *)(*(void *)(*(void *)(v10 + 32) + 96) + 4 * v17))), &v51);
              v40.i64[0] = 0x3F0000003F000000;
              v40.i64[1] = 0x3F0000003F000000;
              uint64_t v41 = v18[v39];
              *(_OWORD *)(*a4 + 16 * v41) = 0u;
              uint64_t v42 = v52;
              *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v41), v40, *(float32x4_t *)(*a3 + 16 * v51));
              *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v41), v40, *(float32x4_t *)(*a3 + 16 * v42));
              ++v39;
            }
            while (v38 != v39);
          }
        }
        else
        {
          if ((v44 & 1) == 0)
          {
            int v48 = v16;
            if (*(float *)(*(void *)(v46 + 216) + 4 * v16) <= 0.0) {
              int v19 = 1;
            }
            else {
              int v19 = 4;
            }
            sub_1B6570AAC(&v50, (int *)&v47, (uint64_t)v49, v19, (*(unsigned __int16 *)(*(void *)(v43 + 432) + 2 * v17) >> 7) & 0xF);
          }
          sub_1B6E10810((void *)v11, v16, 0, &v51);
          uint64_t v20 = *v18;
          *(_OWORD *)(*a4 + 16 * v20) = 0u;
          uint64_t v21 = v52;
          float32x2_t v22 = (float32x2_t)v58[0];
          *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v20), *(float32x4_t *)(*a3 + 16 * v51), *(float *)v58);
          *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v20), *(float32x4_t *)(*a3 + 16 * v21), v22, 1);
          if (SLODWORD(v49[4]) >= 1)
          {
            uint64_t v23 = (unsigned int *)(*(void *)(v46 + 144) + 8 * v16);
            uint64_t v24 = *v23;
            if ((int)v24 >= 1)
            {
              uint64_t v25 = 0;
              uint64_t v26 = *(void *)(v46 + 168) + 4 * (int)v23[1];
              do
              {
                uint64_t v27 = *(int *)(v26 + 4 * v25);
                if (BYTE4(v49[4]))
                {
                  uint64_t v28 = (int *)(v12[12] + 4 * *(int *)(v45[21] + 4 * v27));
                  uint64_t v29 = *a4;
                  uint64_t v30 = *a4;
                }
                else
                {
                  uint64_t v31 = 0;
                  uint64_t v32 = (2 * (int)v27) | 1;
                  uint64_t v33 = *(void *)(v46 + 24);
                  uint64_t v34 = *(void *)(v46 + 72) + 4 * *(int *)(v33 + 4 * v32);
                  int v35 = *(_DWORD *)(v33 + 8 * v27);
                  do
                    uint64_t v36 = *(unsigned int *)(v34 + 4 * v31++);
                  while (v16 != v36);
                  if ((int)v31 + 1 < v35) {
                    int v35 = 0;
                  }
                  uint64_t v28 = (int *)(*(void *)(v11 + 24)
                              + 4 * *(int *)(*(void *)(*(void *)v11 + 24) + 4 * v32)
                              + 4 * ((int)v31 - v35 + 1));
                  uint64_t v30 = *a4;
                  uint64_t v29 = *a3;
                }
                *(float32x4_t *)(v30 + 16 * v20) = vmlaq_n_f32(*(float32x4_t *)(v30 + 16 * v20), *(float32x4_t *)(v29 + 16 * *v28), *(float *)&v53[4 * v25++]);
              }
              while (v25 != v24);
            }
          }
        }
      }
      ++v16;
      uint64_t v8 = v45;
    }
    while (v16 < *(int *)(v46 + 4));
    BOOL v15 = __p;
  }
  operator delete(v15);
}

void sub_1B6575C60(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v55 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v67 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v58 = v55[1];
  uint64_t v50 = v55[2];
  uint64_t v59 = *(void *)(*(void *)(v58 + 456) + 8 * a5);
  if (*(unsigned char *)(v59 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v54 = v7;
  int v57 = *(void **)(v55[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v50 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v58 + 20);
  int v74 = &v77;
  int v75 = 2 * v9;
  int v76 = 32;
  uint64_t v78 = 0;
  if (2 * v9 >= 0x21)
  {
    uint64_t v78 = (uint64_t *)operator new(8 * v9);
    int v74 = v78;
    int v76 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v58 + 20);
  }
  uint64_t v10 = 0;
  unsigned int v69 = &v72;
  unsigned int v70 = v9;
  int v71 = 16;
  int v73 = 0;
  if (v9 >= 0x11)
  {
    uint64_t v10 = operator new(4 * v9);
    int v73 = v10;
    unsigned int v69 = (uint64_t *)v10;
    int v71 = v9;
  }
  v62[0] = v58;
  v62[1] = v50;
  if (*(int *)(v58 + 8) >= 1)
  {
    int v51 = v8;
    uint64_t v11 = 0;
    long long v12 = 0uLL;
    uint64_t v14 = v55;
    uint64_t v13 = a3;
    BOOL v15 = v54;
    uint64_t v16 = v57;
    do
    {
      int v60 = *(_DWORD *)(v14[30] + 4 * v11);
      if (v60 != -1)
      {
        uint64_t v17 = *(int *)(*(void *)(v59 + 96) + 4 * v11);
        uint64_t v18 = (int *)(*(void *)(v59 + 144) + 4 * v17);
        uint64_t v19 = *(int *)(v51[12] + 4 * v60);
        uint64_t v20 = (int *)(v51[18] + 4 * v19);
        uint64_t v21 = *v20;
        uint64_t v22 = v51[21];
        if ((*(unsigned char *)(v22 + v21) & 1) == 0 && v15)
        {
          *(_OWORD *)(*a4 + 16 * v21) = v12;
          *(float32x4_t *)(*a4 + 16 * *v20) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * *v18), *(float32x4_t *)(*a4 + 16 * *v20));
        }
        else if (*(unsigned char *)(v22 + v21))
        {
          uint64_t v35 = v51[9];
          uint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v60);
          if (*(_WORD *)(v35 + 2 * v60))
          {
            uint64_t v37 = 0;
            uint64_t v52 = *(void *)(v59 + 144) + 4 * v17;
            uint64_t v53 = *(void *)(v59 + 168) + v17;
            uint64_t v38 = v22 + v19;
            do
            {
              uint64_t v39 = *(unsigned __int16 *)(v16[5] + 2 * (v37 + *(int *)(*(void *)(v16[4] + 96) + 4 * v60)));
              uint64_t v40 = v18[v39];
              uint64_t v41 = v20[v37];
              *(_OWORD *)(*a4 + 16 * v41) = v12;
              if (!v15 && (*(unsigned char *)(v38 + v37) & 8) != 0)
              {
                uint64_t v42 = v38;
                sub_1B6E1066C((void *)v59, v11, v39, v68);
                if ((*(unsigned char *)(v53 + v39) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v53 + v39) & 0x20) != 0)
                  {
                    unsigned int v47 = v39 == 0;
                    int v45 = v57;
                    int v46 = v11;
                  }
                  else
                  {
                    int v45 = v57;
                    int v46 = v11;
                    unsigned int v47 = v39;
                  }
                  float v48 = sub_1B6E24EC4(v45, v46, v47, v60);
                  float v49 = 1.0 - v48;
                  float v44 = v48 + (float)((float)(1.0 - v48) * 0.75);
                  float v43 = v49 * 0.125;
                }
                else
                {
                  float v43 = 0.125;
                  float v44 = 0.75;
                }
                uint64_t v14 = v55;
                uint64_t v13 = a3;
                BOOL v15 = v54;
                uint64_t v16 = v57;
                long long v12 = 0uLL;
                uint64_t v38 = v42;
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * SLODWORD(v68[0])), v43);
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * SHIDWORD(v68[0])), v43);
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * v40), v44);
                uint64_t v18 = (int *)v52;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v41) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * v40), *(float32x4_t *)(*a4 + 16 * v41));
              }
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          uint64_t v24 = *(int *)(*(void *)(v58 + 336) + 8 * v11);
          float v61 = 0.0;
          uint64_t v25 = v74;
          uint64_t v26 = (_DWORD *)v74 + v24;
          v68[0] = &v61;
          v68[1] = v74;
          v68[2] = v26;
          memset(&v68[3], 0, 13);
          int v63 = v11;
          int v64 = v60;
          int v65 = *(_DWORD *)(*(void *)(v62[0] + 336) + 8 * v11);
          int v66 = *(_DWORD *)(*(void *)(v62[0] + 264) + 8 * v11);
          sub_1B6570C90(&v67, (uint64_t)v62, (uint64_t)v68, (*(unsigned __int16 *)(*(void *)(v58 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v50 + 432) + 2 * v60) >> 7) & 0xF);
          long long v12 = 0uLL;
          uint64_t v14 = v55;
          uint64_t v27 = *v18;
          uint64_t v28 = *v20;
          *(_OWORD *)(*a4 + 16 * v28) = 0u;
          if (SLODWORD(v68[4]) >= 1)
          {
            uint64_t v29 = *(void *)(v58 + 264);
            uint64_t v30 = *(unsigned int *)(v29 + 8 * v11);
            if ((int)v30 >= 1)
            {
              uint64_t v31 = (int *)(*(void *)(v58 + 288) + 4 * *(int *)(v29 + ((8 * v11) | 4)));
              do
              {
                uint64_t v32 = *v31++;
                uint64_t v33 = *(int *)(v51[12] + 4 * *(int *)(v55[21] + 4 * v32));
                LODWORD(v32) = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * v33), *(float *)&v32);
                --v30;
              }
              while (v30);
            }
          }
          uint64_t v13 = a3;
          if (SHIDWORD(v68[3]) >= 1)
          {
            sub_1B6E10910((void *)v59, v11, v69);
            long long v12 = 0uLL;
            uint64_t v14 = v55;
            uint64_t v13 = a3;
            if ((int)v24 >= 1)
            {
              uint64_t v34 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * *(int *)((char *)v69 + v34)), *(float *)((char *)v25 + v34));
                v34 += 4;
              }
              while (4 * v24 != v34);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v13 + 16 * v27), v61);
          BOOL v15 = v54;
          uint64_t v16 = v57;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v58 + 8));
    uint64_t v10 = v73;
  }
  operator delete(v10);
  operator delete(v78);
}

void sub_1B65761D0(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v8 = 0;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v26 = v25[1];
  uint64_t v9 = *(void *)(v25[60] + 8 * a5);
  uint64_t v10 = *(void **)(*(void *)(v26 + 456) + 8 * a5);
  uint64_t v11 = *(void **)(*(void *)(v25[2] + 456) + 8 * a5);
  uint64_t v12 = *(unsigned int *)(v26 + 16);
  uint64_t v29 = &v32;
  int v30 = v12;
  int v31 = 8;
  __p = 0;
  if (v12 >= 9)
  {
    uint64_t v8 = operator new(4 * v12);
    __p = v8;
    uint64_t v29 = (uint64_t *)v8;
    int v31 = v12;
  }
  if (*(int *)(v26 + 4) >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(int *)(v25[27] + 4 * v13);
      if (v14 != -1)
      {
        BOOL v15 = (int *)(v11[18] + 4 * *(int *)(v11[12] + 4 * v14));
        if (*(unsigned char *)(v11[21] + *v15))
        {
          uint64_t v19 = v11[9];
          uint64_t v20 = *(unsigned __int16 *)(v19 + 2 * v14);
          if (*(_WORD *)(v19 + 2 * v14))
          {
            uint64_t v21 = 0;
            do
            {
              sub_1B6E10810(v10, v13, *(unsigned __int16 *)(*(void *)(v9 + 40)+ 2 * (v21 + *(int *)(*(void *)(*(void *)(v9 + 32) + 96) + 4 * v14))), &v27);
              v22.i64[0] = 0x3F0000003F000000;
              v22.i64[1] = 0x3F0000003F000000;
              uint64_t v23 = v15[v21];
              *(_OWORD *)(*a4 + 16 * v23) = 0u;
              uint64_t v24 = v28;
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v23), v22, *(float32x4_t *)(*a3 + 16 * v27));
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v23), v22, *(float32x4_t *)(*a3 + 16 * v24));
              ++v21;
            }
            while (v20 != v21);
          }
        }
        else
        {
          sub_1B6E10810(v10, v13, 0, &v27);
          v16.i64[0] = 0x3F0000003F000000;
          v16.i64[1] = 0x3F0000003F000000;
          uint64_t v17 = *v15;
          *(_OWORD *)(*a4 + 16 * v17) = 0u;
          uint64_t v18 = v28;
          *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v17), v16, *(float32x4_t *)(*a3 + 16 * v27));
          *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v17), v16, *(float32x4_t *)(*a3 + 16 * v18));
        }
      }
      ++v13;
    }
    while (v13 < *(int *)(v26 + 4));
    uint64_t v8 = __p;
  }
  operator delete(v8);
}

void sub_1B6576404(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v7 = v6[2];
  float v49 = v6;
  uint64_t v50 = v6[1];
  uint64_t v8 = v6[60];
  uint64_t v9 = *(void *)(v7 + 456);
  uint64_t v51 = *(void *)(*(void *)(v50 + 456) + 8 * a5);
  if (*(unsigned char *)(v51 + 12)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = **(_DWORD **)a1 == 0;
  }
  BOOL v44 = v10;
  uint64_t v11 = *(void **)(v8 + 8 * a5);
  float v43 = *(void **)(v9 + 8 * a5);
  unsigned int v12 = *(_DWORD *)(v50 + 20);
  uint64_t v58 = &v61;
  int v59 = 2 * v12;
  int v60 = 32;
  int v62 = 0;
  if (2 * v12 >= 0x21)
  {
    int v62 = operator new(8 * v12);
    uint64_t v58 = (uint64_t *)v62;
    int v60 = 2 * v12;
    unsigned int v12 = *(_DWORD *)(v50 + 20);
  }
  uint64_t v13 = 0;
  uint64_t v53 = &v56;
  unsigned int v54 = v12;
  int v55 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    uint64_t v13 = operator new(4 * v12);
    __p = v13;
    uint64_t v53 = (uint64_t *)v13;
    int v55 = v12;
  }
  if (*(int *)(v50 + 8) >= 1)
  {
    uint64_t v14 = 0;
    long long v15 = 0uLL;
    float32x4_t v16 = a3;
    BOOL v17 = v44;
    while (1)
    {
      uint64_t v18 = *(int *)(v49[30] + 4 * v14);
      if (v18 != -1)
      {
        uint64_t v19 = *(int *)(*(void *)(v51 + 96) + 4 * v14);
        uint64_t v20 = (int *)(*(void *)(v51 + 144) + 4 * v19);
        uint64_t v21 = *(int *)(v43[12] + 4 * v18);
        float32x4_t v22 = (int *)(v43[18] + 4 * v21);
        uint64_t v23 = *v22;
        uint64_t v24 = v43[21];
        if ((*(unsigned char *)(v24 + v23) & 1) == 0 && v17)
        {
          *(_OWORD *)(*a4 + 16 * v23) = v15;
          uint64_t v26 = (float32x4_t *)(*a4 + 16 * *v22);
          int v27 = *v20;
        }
        else
        {
          if (*(unsigned char *)(v24 + v23))
          {
            uint64_t v28 = v43[9];
            uint64_t v29 = *(unsigned __int16 *)(v28 + 2 * v18);
            if (*(_WORD *)(v28 + 2 * v18))
            {
              uint64_t v30 = 0;
              uint64_t v47 = *(void *)(v51 + 168) + v19;
              uint64_t v48 = *(unsigned __int16 *)(v28 + 2 * v18);
              uint64_t v31 = v24 + v21;
              uint64_t v46 = v24 + v21;
              do
              {
                uint64_t v32 = *(unsigned __int16 *)(v11[5] + 2 * (v30 + *(int *)(*(void *)(v11[4] + 96) + 4 * v18)));
                uint64_t v33 = v20[v32];
                uint64_t v34 = v22[v30];
                *(_OWORD *)(*a4 + 16 * v34) = v15;
                if (!v17 && (*(unsigned char *)(v31 + v30) & 8) != 0)
                {
                  sub_1B6E1066C((void *)v51, v14, v32, v52);
                  if ((*(unsigned char *)(v47 + v32) & 0x10) != 0)
                  {
                    if ((*(unsigned char *)(v47 + v32) & 0x20) != 0)
                    {
                      unsigned int v39 = v32 == 0;
                      uint64_t v37 = v11;
                      int v38 = v14;
                    }
                    else
                    {
                      uint64_t v37 = v11;
                      int v38 = v14;
                      unsigned int v39 = v32;
                    }
                    float v40 = sub_1B6E24EC4(v37, v38, v39, v18);
                    float v41 = 1.0 - v40;
                    float v36 = v40 + (float)((float)(1.0 - v40) * 0.75);
                    float v35 = v41 * 0.125;
                  }
                  else
                  {
                    float v35 = 0.125;
                    float v36 = 0.75;
                  }
                  float32x4_t v16 = a3;
                  uint64_t v31 = v46;
                  BOOL v17 = v44;
                  long long v15 = 0uLL;
                  uint64_t v29 = v48;
                  uint64_t v42 = v52[1];
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v52[0]), v35);
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v42), v35);
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v33), v36);
                }
                else
                {
                  *(float32x4_t *)(*a4 + 16 * v34) = vaddq_f32(*(float32x4_t *)(*v16 + 16 * v33), *(float32x4_t *)(*a4 + 16 * v34));
                }
                ++v30;
              }
              while (v29 != v30);
            }
            goto LABEL_19;
          }
          int v27 = *v20;
          *(_OWORD *)(*a4 + 16 * v23) = v15;
          uint64_t v26 = (float32x4_t *)(*a4 + 16 * v23);
        }
        *uint64_t v26 = vaddq_f32(*(float32x4_t *)(*v16 + 16 * v27), *v26);
      }
LABEL_19:
      if (++v14 >= *(int *)(v50 + 8))
      {
        uint64_t v13 = __p;
        break;
      }
    }
  }
  operator delete(v13);
  operator delete(v62);
}

void sub_1B65767AC(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v55 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v67 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v58 = v55[1];
  uint64_t v50 = v55[2];
  uint64_t v59 = *(void *)(*(void *)(v58 + 456) + 8 * a5);
  if (*(unsigned char *)(v59 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v54 = v7;
  int v57 = *(void **)(v55[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v50 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v58 + 20);
  int v74 = &v77;
  int v75 = 2 * v9;
  int v76 = 32;
  uint64_t v78 = 0;
  if (2 * v9 >= 0x21)
  {
    uint64_t v78 = (uint64_t *)operator new(8 * v9);
    int v74 = v78;
    int v76 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v58 + 20);
  }
  BOOL v10 = 0;
  unsigned int v69 = &v72;
  unsigned int v70 = v9;
  int v71 = 16;
  int v73 = 0;
  if (v9 >= 0x11)
  {
    BOOL v10 = operator new(4 * v9);
    int v73 = v10;
    unsigned int v69 = (uint64_t *)v10;
    int v71 = v9;
  }
  v62[0] = v58;
  v62[1] = v50;
  if (*(int *)(v58 + 8) >= 1)
  {
    uint64_t v51 = v8;
    uint64_t v11 = 0;
    long long v12 = 0uLL;
    uint64_t v14 = v55;
    uint64_t v13 = a3;
    BOOL v15 = v54;
    float32x4_t v16 = v57;
    do
    {
      int v60 = *(_DWORD *)(v14[30] + 4 * v11);
      if (v60 != -1)
      {
        uint64_t v17 = *(int *)(*(void *)(v59 + 96) + 4 * v11);
        uint64_t v18 = (int *)(*(void *)(v59 + 144) + 4 * v17);
        uint64_t v19 = *(int *)(v51[12] + 4 * v60);
        uint64_t v20 = (int *)(v51[18] + 4 * v19);
        uint64_t v21 = *v20;
        uint64_t v22 = v51[21];
        if ((*(unsigned char *)(v22 + v21) & 1) == 0 && v15)
        {
          *(_OWORD *)(*a4 + 16 * v21) = v12;
          *(float32x4_t *)(*a4 + 16 * *v20) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * *v18), *(float32x4_t *)(*a4 + 16 * *v20));
        }
        else if (*(unsigned char *)(v22 + v21))
        {
          uint64_t v35 = v51[9];
          uint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v60);
          if (*(_WORD *)(v35 + 2 * v60))
          {
            uint64_t v37 = 0;
            uint64_t v52 = *(void *)(v59 + 144) + 4 * v17;
            uint64_t v53 = *(void *)(v59 + 168) + v17;
            uint64_t v38 = v22 + v19;
            do
            {
              uint64_t v39 = *(unsigned __int16 *)(v16[5] + 2 * (v37 + *(int *)(*(void *)(v16[4] + 96) + 4 * v60)));
              uint64_t v40 = v18[v39];
              uint64_t v41 = v20[v37];
              *(_OWORD *)(*a4 + 16 * v41) = v12;
              if (!v15 && (*(unsigned char *)(v38 + v37) & 8) != 0)
              {
                uint64_t v42 = v38;
                sub_1B6E1066C((void *)v59, v11, v39, v68);
                if ((*(unsigned char *)(v53 + v39) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v53 + v39) & 0x20) != 0)
                  {
                    unsigned int v47 = v39 == 0;
                    int v45 = v57;
                    int v46 = v11;
                  }
                  else
                  {
                    int v45 = v57;
                    int v46 = v11;
                    unsigned int v47 = v39;
                  }
                  float v48 = sub_1B6E24EC4(v45, v46, v47, v60);
                  float v49 = 1.0 - v48;
                  float v44 = v48 + (float)((float)(1.0 - v48) * 0.75);
                  float v43 = v49 * 0.125;
                }
                else
                {
                  float v43 = 0.125;
                  float v44 = 0.75;
                }
                uint64_t v14 = v55;
                uint64_t v13 = a3;
                BOOL v15 = v54;
                float32x4_t v16 = v57;
                long long v12 = 0uLL;
                uint64_t v38 = v42;
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * SLODWORD(v68[0])), v43);
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * SHIDWORD(v68[0])), v43);
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * v40), v44);
                uint64_t v18 = (int *)v52;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v41) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * v40), *(float32x4_t *)(*a4 + 16 * v41));
              }
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          uint64_t v24 = *(int *)(*(void *)(v58 + 336) + 8 * v11);
          float v61 = 0.0;
          uint64_t v25 = v74;
          uint64_t v26 = (_DWORD *)v74 + v24;
          v68[0] = &v61;
          v68[1] = v74;
          v68[2] = v26;
          memset(&v68[3], 0, 13);
          int v63 = v11;
          int v64 = v60;
          int v65 = *(_DWORD *)(*(void *)(v62[0] + 336) + 8 * v11);
          int v66 = *(_DWORD *)(*(void *)(v62[0] + 264) + 8 * v11);
          sub_1B65703B8(&v67, (uint64_t)v62, (uint64_t)v68, (*(unsigned __int16 *)(*(void *)(v58 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v50 + 432) + 2 * v60) >> 7) & 0xF);
          long long v12 = 0uLL;
          uint64_t v14 = v55;
          uint64_t v27 = *v18;
          uint64_t v28 = *v20;
          *(_OWORD *)(*a4 + 16 * v28) = 0u;
          if (SLODWORD(v68[4]) >= 1)
          {
            uint64_t v29 = *(void *)(v58 + 264);
            uint64_t v30 = *(unsigned int *)(v29 + 8 * v11);
            if ((int)v30 >= 1)
            {
              uint64_t v31 = (int *)(*(void *)(v58 + 288) + 4 * *(int *)(v29 + ((8 * v11) | 4)));
              do
              {
                uint64_t v32 = *v31++;
                uint64_t v33 = *(int *)(v51[12] + 4 * *(int *)(v55[21] + 4 * v32));
                LODWORD(v32) = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * v33), *(float *)&v32);
                --v30;
              }
              while (v30);
            }
          }
          uint64_t v13 = a3;
          if (SHIDWORD(v68[3]) >= 1)
          {
            sub_1B6E10910((void *)v59, v11, v69);
            long long v12 = 0uLL;
            uint64_t v14 = v55;
            uint64_t v13 = a3;
            if ((int)v24 >= 1)
            {
              uint64_t v34 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * *(int *)((char *)v69 + v34)), *(float *)((char *)v25 + v34));
                v34 += 4;
              }
              while (4 * v24 != v34);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v13 + 16 * v27), v61);
          BOOL v15 = v54;
          float32x4_t v16 = v57;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v58 + 8));
    BOOL v10 = v73;
  }
  operator delete(v10);
  operator delete(v78);
}

void sub_1B6576D1C(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v55 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v67 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v58 = v55[1];
  uint64_t v50 = v55[2];
  uint64_t v59 = *(void *)(*(void *)(v58 + 456) + 8 * a5);
  if (*(unsigned char *)(v59 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v54 = v7;
  int v57 = *(void **)(v55[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v50 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v58 + 20);
  int v74 = &v77;
  int v75 = 2 * v9;
  int v76 = 32;
  uint64_t v78 = 0;
  if (2 * v9 >= 0x21)
  {
    uint64_t v78 = (uint64_t *)operator new(8 * v9);
    int v74 = v78;
    int v76 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v58 + 20);
  }
  BOOL v10 = 0;
  unsigned int v69 = &v72;
  unsigned int v70 = v9;
  int v71 = 16;
  int v73 = 0;
  if (v9 >= 0x11)
  {
    BOOL v10 = operator new(4 * v9);
    int v73 = v10;
    unsigned int v69 = (uint64_t *)v10;
    int v71 = v9;
  }
  v62[0] = v58;
  v62[1] = v50;
  if (*(int *)(v58 + 8) >= 1)
  {
    uint64_t v51 = v8;
    uint64_t v11 = 0;
    long long v12 = 0uLL;
    uint64_t v14 = v55;
    uint64_t v13 = a3;
    BOOL v15 = v54;
    float32x4_t v16 = v57;
    do
    {
      int v60 = *(_DWORD *)(v14[30] + 4 * v11);
      if (v60 != -1)
      {
        uint64_t v17 = *(int *)(*(void *)(v59 + 96) + 4 * v11);
        uint64_t v18 = (int *)(*(void *)(v59 + 144) + 4 * v17);
        uint64_t v19 = *(int *)(v51[12] + 4 * v60);
        uint64_t v20 = (int *)(v51[18] + 4 * v19);
        uint64_t v21 = *v20;
        uint64_t v22 = v51[21];
        if ((*(unsigned char *)(v22 + v21) & 1) == 0 && v15)
        {
          *(_OWORD *)(*a4 + 16 * v21) = v12;
          *(float32x4_t *)(*a4 + 16 * *v20) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * *v18), *(float32x4_t *)(*a4 + 16 * *v20));
        }
        else if (*(unsigned char *)(v22 + v21))
        {
          uint64_t v35 = v51[9];
          uint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v60);
          if (*(_WORD *)(v35 + 2 * v60))
          {
            uint64_t v37 = 0;
            uint64_t v52 = *(void *)(v59 + 144) + 4 * v17;
            uint64_t v53 = *(void *)(v59 + 168) + v17;
            uint64_t v38 = v22 + v19;
            do
            {
              uint64_t v39 = *(unsigned __int16 *)(v16[5] + 2 * (v37 + *(int *)(*(void *)(v16[4] + 96) + 4 * v60)));
              uint64_t v40 = v18[v39];
              uint64_t v41 = v20[v37];
              *(_OWORD *)(*a4 + 16 * v41) = v12;
              if (!v15 && (*(unsigned char *)(v38 + v37) & 8) != 0)
              {
                uint64_t v42 = v38;
                sub_1B6E1066C((void *)v59, v11, v39, v68);
                if ((*(unsigned char *)(v53 + v39) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v53 + v39) & 0x20) != 0)
                  {
                    unsigned int v47 = v39 == 0;
                    int v45 = v57;
                    int v46 = v11;
                  }
                  else
                  {
                    int v45 = v57;
                    int v46 = v11;
                    unsigned int v47 = v39;
                  }
                  float v48 = sub_1B6E24EC4(v45, v46, v47, v60);
                  float v49 = 1.0 - v48;
                  float v44 = v48 + (float)((float)(1.0 - v48) * 0.75);
                  float v43 = v49 * 0.125;
                }
                else
                {
                  float v43 = 0.125;
                  float v44 = 0.75;
                }
                uint64_t v14 = v55;
                uint64_t v13 = a3;
                BOOL v15 = v54;
                float32x4_t v16 = v57;
                long long v12 = 0uLL;
                uint64_t v38 = v42;
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * SLODWORD(v68[0])), v43);
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * SHIDWORD(v68[0])), v43);
                *(float32x4_t *)(*a4 + 16 * v41) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v41), *(float32x4_t *)(*a3 + 16 * v40), v44);
                uint64_t v18 = (int *)v52;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v41) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * v40), *(float32x4_t *)(*a4 + 16 * v41));
              }
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          uint64_t v24 = *(int *)(*(void *)(v58 + 336) + 8 * v11);
          float v61 = 0.0;
          uint64_t v25 = v74;
          uint64_t v26 = (_DWORD *)v74 + v24;
          v68[0] = &v61;
          v68[1] = v74;
          v68[2] = v26;
          memset(&v68[3], 0, 13);
          int v63 = v11;
          int v64 = v60;
          int v65 = *(_DWORD *)(*(void *)(v62[0] + 336) + 8 * v11);
          int v66 = *(_DWORD *)(*(void *)(v62[0] + 264) + 8 * v11);
          sub_1B6570C90(&v67, (uint64_t)v62, (uint64_t)v68, (*(unsigned __int16 *)(*(void *)(v58 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v50 + 432) + 2 * v60) >> 7) & 0xF);
          long long v12 = 0uLL;
          uint64_t v14 = v55;
          uint64_t v27 = *v18;
          uint64_t v28 = *v20;
          *(_OWORD *)(*a4 + 16 * v28) = 0u;
          if (SLODWORD(v68[4]) >= 1)
          {
            uint64_t v29 = *(void *)(v58 + 264);
            uint64_t v30 = *(unsigned int *)(v29 + 8 * v11);
            if ((int)v30 >= 1)
            {
              uint64_t v31 = (int *)(*(void *)(v58 + 288) + 4 * *(int *)(v29 + ((8 * v11) | 4)));
              do
              {
                uint64_t v32 = *v31++;
                uint64_t v33 = *(int *)(v51[12] + 4 * *(int *)(v55[21] + 4 * v32));
                LODWORD(v32) = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * v33), *(float *)&v32);
                --v30;
              }
              while (v30);
            }
          }
          uint64_t v13 = a3;
          if (SHIDWORD(v68[3]) >= 1)
          {
            sub_1B6E10910((void *)v59, v11, v69);
            long long v12 = 0uLL;
            uint64_t v14 = v55;
            uint64_t v13 = a3;
            if ((int)v24 >= 1)
            {
              uint64_t v34 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * *(int *)((char *)v69 + v34)), *(float *)((char *)v25 + v34));
                v34 += 4;
              }
              while (4 * v24 != v34);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v13 + 16 * v27), v61);
          BOOL v15 = v54;
          float32x4_t v16 = v57;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v58 + 8));
    BOOL v10 = v73;
  }
  operator delete(v10);
  operator delete(v78);
}

void sub_1B657728C(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v7 = v6[2];
  float v49 = v6;
  uint64_t v50 = v6[1];
  uint64_t v8 = v6[60];
  uint64_t v9 = *(void *)(v7 + 456);
  uint64_t v51 = *(void *)(*(void *)(v50 + 456) + 8 * a5);
  if (*(unsigned char *)(v51 + 12)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = **(_DWORD **)a1 == 0;
  }
  BOOL v44 = v10;
  uint64_t v11 = *(void **)(v8 + 8 * a5);
  float v43 = *(void **)(v9 + 8 * a5);
  unsigned int v12 = *(_DWORD *)(v50 + 20);
  uint64_t v58 = &v61;
  int v59 = 2 * v12;
  int v60 = 32;
  int v62 = 0;
  if (2 * v12 >= 0x21)
  {
    int v62 = operator new(8 * v12);
    uint64_t v58 = (uint64_t *)v62;
    int v60 = 2 * v12;
    unsigned int v12 = *(_DWORD *)(v50 + 20);
  }
  uint64_t v13 = 0;
  uint64_t v53 = &v56;
  unsigned int v54 = v12;
  int v55 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    uint64_t v13 = operator new(4 * v12);
    __p = v13;
    uint64_t v53 = (uint64_t *)v13;
    int v55 = v12;
  }
  if (*(int *)(v50 + 8) >= 1)
  {
    uint64_t v14 = 0;
    long long v15 = 0uLL;
    float32x4_t v16 = a3;
    BOOL v17 = v44;
    while (1)
    {
      uint64_t v18 = *(int *)(v49[30] + 4 * v14);
      if (v18 != -1)
      {
        uint64_t v19 = *(int *)(*(void *)(v51 + 96) + 4 * v14);
        uint64_t v20 = (int *)(*(void *)(v51 + 144) + 4 * v19);
        uint64_t v21 = *(int *)(v43[12] + 4 * v18);
        uint64_t v22 = (int *)(v43[18] + 4 * v21);
        uint64_t v23 = *v22;
        uint64_t v24 = v43[21];
        if ((*(unsigned char *)(v24 + v23) & 1) == 0 && v17)
        {
          *(_OWORD *)(*a4 + 16 * v23) = v15;
          uint64_t v26 = (float32x4_t *)(*a4 + 16 * *v22);
          int v27 = *v20;
        }
        else
        {
          if (*(unsigned char *)(v24 + v23))
          {
            uint64_t v28 = v43[9];
            uint64_t v29 = *(unsigned __int16 *)(v28 + 2 * v18);
            if (*(_WORD *)(v28 + 2 * v18))
            {
              uint64_t v30 = 0;
              uint64_t v47 = *(void *)(v51 + 168) + v19;
              uint64_t v48 = *(unsigned __int16 *)(v28 + 2 * v18);
              uint64_t v31 = v24 + v21;
              uint64_t v46 = v24 + v21;
              do
              {
                uint64_t v32 = *(unsigned __int16 *)(v11[5] + 2 * (v30 + *(int *)(*(void *)(v11[4] + 96) + 4 * v18)));
                uint64_t v33 = v20[v32];
                uint64_t v34 = v22[v30];
                *(_OWORD *)(*a4 + 16 * v34) = v15;
                if (!v17 && (*(unsigned char *)(v31 + v30) & 8) != 0)
                {
                  sub_1B6E1066C((void *)v51, v14, v32, v52);
                  if ((*(unsigned char *)(v47 + v32) & 0x10) != 0)
                  {
                    if ((*(unsigned char *)(v47 + v32) & 0x20) != 0)
                    {
                      unsigned int v39 = v32 == 0;
                      uint64_t v37 = v11;
                      int v38 = v14;
                    }
                    else
                    {
                      uint64_t v37 = v11;
                      int v38 = v14;
                      unsigned int v39 = v32;
                    }
                    float v40 = sub_1B6E24EC4(v37, v38, v39, v18);
                    float v41 = 1.0 - v40;
                    float v36 = v40 + (float)((float)(1.0 - v40) * 0.75);
                    float v35 = v41 * 0.125;
                  }
                  else
                  {
                    float v35 = 0.125;
                    float v36 = 0.75;
                  }
                  float32x4_t v16 = a3;
                  uint64_t v31 = v46;
                  BOOL v17 = v44;
                  long long v15 = 0uLL;
                  uint64_t v29 = v48;
                  uint64_t v42 = v52[1];
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v52[0]), v35);
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v42), v35);
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v33), v36);
                }
                else
                {
                  *(float32x4_t *)(*a4 + 16 * v34) = vaddq_f32(*(float32x4_t *)(*v16 + 16 * v33), *(float32x4_t *)(*a4 + 16 * v34));
                }
                ++v30;
              }
              while (v29 != v30);
            }
            goto LABEL_19;
          }
          int v27 = *v20;
          *(_OWORD *)(*a4 + 16 * v23) = v15;
          uint64_t v26 = (float32x4_t *)(*a4 + 16 * v23);
        }
        *uint64_t v26 = vaddq_f32(*(float32x4_t *)(*v16 + 16 * v27), *v26);
      }
LABEL_19:
      if (++v14 >= *(int *)(v50 + 8))
      {
        uint64_t v13 = __p;
        break;
      }
    }
  }
  operator delete(v13);
  operator delete(v62);
}

void sub_1B6577634(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v8 = *(_DWORD *)*a1;
  if (v8)
  {
    if (v8 == 2)
    {
      sub_1B6577E1C((uint64_t)a1, a2, a3, a4);
      sub_1B65784E8(a1, a2, a3, a4);
      sub_1B6578780(a1, a2, a3, a4);
    }
    else if (v8 == 1)
    {
      sub_1B6577E1C((uint64_t)a1, a2, a3, a4);
      sub_1B6577FB0(a1, a2, a3, a4);
      sub_1B6578248(a1, a2, a3, a4);
    }
  }
  else
  {
    sub_1B6577E1C((uint64_t)a1, a2, a3, a4);
    uint64_t v9 = 0;
    int v10 = a2 - 1;
    uint64_t v11 = *(void *)(*(void *)(*a1 + 64) + 8 * (a2 - 1));
    uint64_t v12 = *(void *)(v11 + 8);
    uint64_t v13 = *(unsigned int *)(v12 + 16);
    __p = 0;
    if (v13 >= 9)
    {
      uint64_t v9 = operator new(4 * v13);
      __p = v9;
    }
    int v14 = *(_DWORD *)(v12 + 4);
    if (v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      v17.i64[0] = 0x3F0000003F000000;
      v17.i64[1] = 0x3F0000003F000000;
      do
      {
        uint64_t v18 = *(int *)(*(void *)(v11 + 216) + 4 * v16);
        if (v18 != -1)
        {
          uint64_t v19 = (int *)(*(void *)(v12 + 120) + v15);
          uint64_t v20 = (void *)(*a4 + 16 * v18);
          *uint64_t v20 = 0;
          v20[1] = 0;
          *(float32x4_t *)(*a4 + 16 * v18) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v18), v17, *(float32x4_t *)(*a3 + 16 * *v19));
          *(float32x4_t *)(*a4 + 16 * v18) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v18), v17, *(float32x4_t *)(*a3 + 16 * v19[1]));
          int v14 = *(_DWORD *)(v12 + 4);
        }
        ++v16;
        v15 += 8;
      }
      while (v16 < v14);
      uint64_t v9 = __p;
    }
    operator delete(v9);
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)(*(void *)(*a1 + 64) + 8 * v10);
    uint64_t v23 = *(void *)(v22 + 8);
    uint64_t v29 = 0;
    if ((2 * *(_DWORD *)(v23 + 20)) >= 0x21)
    {
      uint64_t v21 = operator new(4 * (2 * *(_DWORD *)(v23 + 20)));
      uint64_t v29 = v21;
    }
    int v24 = *(_DWORD *)(v23 + 8);
    if (v24 >= 1)
    {
      for (uint64_t i = 0; i < v24; ++i)
      {
        uint64_t v26 = *(int *)(*(void *)(v22 + 240) + 4 * i);
        if (v26 != -1)
        {
          int v27 = (void *)(*a4 + 16 * v26);
          *int v27 = 0;
          v27[1] = 0;
          *(float32x4_t *)(*a4 + 16 * v26) = vaddq_f32(*(float32x4_t *)(*a3 + 16 * i), *(float32x4_t *)(*a4 + 16 * v26));
          int v24 = *(_DWORD *)(v23 + 8);
        }
      }
      uint64_t v21 = v29;
    }
    operator delete(v21);
  }
}

uint64_t sub_1B6577964(uint64_t result, int a2, void *a3, void *a4, double a5, float32x4_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(*(void *)result + 64) + 8 * (a2 - 1));
  uint64_t v7 = *(int **)(v6 + 8);
  if (*(int *)(v6 + 52) >= 1 && *v7 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(int *)(*(void *)(v6 + 168) + 4 * v8);
      if (v9 != -1)
      {
        uint64_t v10 = *((void *)v7 + 6);
        uint64_t v11 = *(unsigned int *)(*((void *)v7 + 3) + 8 * v8);
        uint64_t v12 = *(int *)(*((void *)v7 + 3) + 8 * v8 + 4);
        uint64_t v13 = (void *)(*a4 + 16 * v9);
        *uint64_t v13 = 0;
        v13[1] = 0;
        if ((int)v11 >= 1)
        {
          int v14 = (int *)(v10 + 4 * v12);
          a6.f32[0] = 1.0 / (float)(int)v11;
          a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
          do
          {
            uint64_t v15 = *v14++;
            *(float32x4_t *)(*a4 + 16 * v9) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v9), *(float32x4_t *)(*a3 + 16 * v15), a6);
            --v11;
          }
          while (v11);
        }
      }
      ++v8;
    }
    while (v8 < *v7);
  }
  int v16 = v7[1];
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    v19.i64[0] = 0x3F0000003F000000;
    v19.i64[1] = 0x3F0000003F000000;
    do
    {
      uint64_t v20 = *(int *)(*(void *)(v6 + 216) + 4 * v18);
      if (v20 != -1)
      {
        uint64_t v21 = (int *)(*((void *)v7 + 15) + v17);
        uint64_t v22 = (void *)(*a4 + 16 * v20);
        void *v22 = 0;
        v22[1] = 0;
        *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v20), v19, *(float32x4_t *)(*a3 + 16 * *v21));
        *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v20), v19, *(float32x4_t *)(*a3 + 16 * v21[1]));
        int v16 = v7[1];
      }
      ++v18;
      v17 += 8;
    }
    while (v18 < v16);
  }
  int v23 = v7[2];
  if (v23 >= 1)
  {
    for (uint64_t i = 0; i < v23; ++i)
    {
      uint64_t v25 = *(int *)(*(void *)(v6 + 240) + 4 * i);
      if (v25 != -1)
      {
        uint64_t v26 = (void *)(*a4 + 16 * v25);
        *uint64_t v26 = 0;
        v26[1] = 0;
        *(float32x4_t *)(*a4 + 16 * v25) = vaddq_f32(*(float32x4_t *)(*a3 + 16 * i), *(float32x4_t *)(*a4 + 16 * v25));
        int v23 = v7[2];
      }
    }
  }
  return result;
}

void sub_1B6577AF4(int **a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      sub_1B6578A20((uint64_t)a1, a2, a3, a4, a5);
      sub_1B657950C((uint64_t)a1, a2, a3, a4, a5);
      sub_1B65798D4((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      sub_1B6578A20((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6578BD8((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6578FA0((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    sub_1B6578A20((uint64_t)a1, a2, a3, a4, a5);
    sub_1B6579E40((uint64_t)a1, a2, a3, a4, a5);
    sub_1B657A074((uint64_t)a1, a2, a3, a4, a5);
  }
}

void sub_1B6577C88(int **a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      sub_1B6578A20((uint64_t)a1, a2, a3, a4, a5);
      sub_1B657950C((uint64_t)a1, a2, a3, a4, a5);
      sub_1B657A98C((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      sub_1B6578A20((uint64_t)a1, a2, a3, a4, a5);
      sub_1B6578BD8((uint64_t)a1, a2, a3, a4, a5);
      sub_1B657A420((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    sub_1B6578A20((uint64_t)a1, a2, a3, a4, a5);
    sub_1B6579E40((uint64_t)a1, a2, a3, a4, a5);
    sub_1B657AEF8((uint64_t)a1, a2, a3, a4, a5);
  }
}

void sub_1B6577E1C(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v4 + 52))
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(int **)(v4 + 8);
    uint64_t v9 = v8[5];
    uint64_t v21 = (float *)&v22;
    __p = 0;
    if (v9 >= 0x11)
    {
      uint64_t v7 = operator new(4 * v9);
      __p = v7;
      uint64_t v21 = (float *)v7;
    }
    if (*v8 >= 1)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(int *)(*(void *)(v4 + 168) + 4 * v10);
        if (v11 != -1)
        {
          uint64_t v12 = (unsigned int *)(*((void *)v8 + 3) + 8 * v10);
          uint64_t v13 = *v12;
          if ((int)v13 < 1)
          {
            uint64_t v20 = (void *)(*a4 + 16 * v11);
            *uint64_t v20 = 0;
            v20[1] = 0;
          }
          else
          {
            uint64_t v14 = *((void *)v8 + 6) + 4 * (int)v12[1];
            uint64_t v15 = v21;
            uint64_t v16 = v13;
            do
            {
              *v15++ = 1.0 / (float)(int)v13;
              --v16;
            }
            while (v16);
            uint64_t v17 = (void *)(*a4 + 16 * v11);
            *uint64_t v17 = 0;
            v17[1] = 0;
            unint64_t v18 = 0;
            uint64_t v19 = 4 * v13;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v11) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v11), *(float32x4_t *)(*a3 + 16 * *(int *)(v14 + v18)), v21[v18 / 4]);
              v18 += 4;
            }
            while (v19 != v18);
          }
        }
        ++v10;
      }
      while (v10 < *v8);
      uint64_t v7 = __p;
    }
    operator delete(v7);
  }
}

void sub_1B6577FB0(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = 0;
  v44[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v10 = v9[1];
  uint64_t v34 = v9[2];
  int v38 = *(_DWORD *)(v8 + 4);
  uint64_t v11 = *(unsigned int *)(v10 + 16);
  unsigned int v39 = (float *)&v42;
  int v40 = v11;
  int v41 = 8;
  uint64_t v36 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    uint64_t v7 = operator new(4 * v11);
    __p = v7;
    unsigned int v39 = (float *)v7;
    int v41 = v11;
  }
  int v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *(int *)(v9[27] + 4 * i);
      if (v14 != -1)
      {
        uint64_t v15 = (int *)(*(void *)(v10 + 120) + 8 * i);
        uint64_t v16 = *(void *)(v10 + 168);
        uint64_t v17 = (unsigned int *)(*(void *)(v10 + 144) + 8 * i);
        uint64_t v18 = *v17;
        uint64_t v19 = (int)v17[1];
        v35[0] = v44;
        v35[1] = 0;
        v35[2] = v39;
        memset(&v35[3], 0, 13);
        int v37 = i;
        if (*(float *)(*(void *)(v10 + 216) + 4 * i) <= 0.0) {
          int v20 = 1;
        }
        else {
          int v20 = 4;
        }
        sub_1B656FFE8(&v38, (int *)&v36, (uint64_t)v35, v20, (*(unsigned __int16 *)(*(void *)(v34 + 432) + 2 * v14) >> 7) & 0xF);
        uint64_t v21 = (void *)(*a4 + 16 * v14);
        *uint64_t v21 = 0;
        v21[1] = 0;
        float32x2_t v22 = (float32x2_t)v44[0];
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * *v15), *(float *)v44);
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * v15[1]), v22, 1);
        if (SLODWORD(v35[4]) >= 1 && (int)v18 >= 1)
        {
          for (uint64_t j = 0; j != v18; ++j)
          {
            uint64_t v24 = *(int *)(v16 + 4 * v19 + 4 * j);
            if (BYTE4(v35[4]))
            {
              uint64_t v25 = (int *)(v9[21] + 4 * v24);
              uint64_t v26 = *a4;
              uint64_t v27 = *a4;
            }
            else
            {
              uint64_t v28 = 0;
              uint64_t v29 = *(void *)(v10 + 24);
              uint64_t v30 = *(int *)(v29 + 8 * v24 + 4);
              int v31 = *(_DWORD *)(v29 + 8 * v24);
              do
                uint64_t v32 = *(unsigned int *)(*(void *)(v10 + 72) + 4 * v30 + 4 * v28++);
              while (i != v32);
              uint64_t v33 = *(void *)(v10 + 48) + 4 * v30;
              if ((int)v28 + 1 < v31) {
                int v31 = 0;
              }
              uint64_t v25 = (int *)(v33 + 4 * ((int)v28 - v31 + 1));
              uint64_t v27 = *a4;
              uint64_t v26 = *a3;
            }
            *(float32x4_t *)(v27 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(v27 + 16 * v14), *(float32x4_t *)(v26 + 16 * *v25), v39[j]);
          }
        }
        int v12 = *(_DWORD *)(v10 + 4);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B6578248(uint64_t *a1, int a2, void *a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v11 = v9[1];
  uint64_t v10 = v9[2];
  int v46 = *(_DWORD *)(v8 + 4);
  unsigned int v12 = 2 * *(_DWORD *)(v11 + 20);
  uint64_t v47 = &v50;
  unsigned int v48 = v12;
  int v49 = 32;
  v41[0] = v11;
  v41[1] = v10;
  uint64_t v34 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    uint64_t v7 = operator new(4 * v12);
    __p = v7;
    uint64_t v47 = (uint64_t *)v7;
    int v49 = v12;
  }
  int v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (uint64_t i = 0; i < v13; ++i)
    {
      int v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        uint64_t v16 = v15;
        uint64_t v37 = *(void *)(v11 + 360);
        uint64_t v17 = *(void *)(v11 + 336);
        uint64_t v18 = (8 * i) | 4;
        uint64_t v36 = *(int *)(v17 + v18);
        uint64_t v19 = *(int *)(v17 + 8 * i);
        uint64_t v20 = *(void *)(v11 + 264);
        uint64_t v35 = *(int *)(v20 + v18);
        uint64_t v21 = *(unsigned int *)(v20 + 8 * i);
        float v40 = 0.0;
        float32x2_t v22 = v47;
        int v23 = (_DWORD *)v47 + v19;
        int v38 = v19;
        v39[0] = &v40;
        v39[1] = v47;
        v39[2] = v23;
        memset(&v39[3], 0, 13);
        int v42 = i;
        int v43 = v15;
        int v44 = *(_DWORD *)(*(void *)(v41[0] + 336) + 8 * i);
        int v45 = *(_DWORD *)(*(void *)(v41[0] + 264) + 8 * i);
        uint64_t v24 = *(void *)(v11 + 288);
        sub_1B65703B8(&v46, (uint64_t)v41, (uint64_t)v39, (*(unsigned __int16 *)(*(void *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v34 + 432) + 2 * v15) >> 7) & 0xF);
        uint64_t v25 = (void *)(*a4 + 16 * v16);
        *uint64_t v25 = 0;
        v25[1] = 0;
        if (SLODWORD(v39[4]) >= 1 && (int)v21 >= 1)
        {
          uint64_t v26 = (int *)(v24 + 4 * v35);
          do
          {
            uint64_t v27 = *v26++;
            uint64_t v28 = *(int *)(v9[21] + 4 * v27);
            LODWORD(v27) = *v23++;
            *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a4 + 16 * v28), *(float *)&v27);
            --v21;
          }
          while (v21);
        }
        uint64_t v29 = v38;
        if (SHIDWORD(v39[3]) >= 1 && v38 >= 1)
        {
          int v31 = (int *)(v37 + 4 * v36);
          do
          {
            uint64_t v32 = *v31++;
            uint64_t v33 = (_DWORD *)(*(void *)(v11 + 120) + 8 * v32);
            LODWORD(v32) = *(_DWORD *)v22;
            float32x2_t v22 = (uint64_t *)((char *)v22 + 4);
            *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * (int)v33[i == *v33]), *(float *)&v32);
            --v29;
          }
          while (v29);
        }
        *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * i), v40);
        int v13 = *(_DWORD *)(v11 + 8);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B65784E8(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = 0;
  v44[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v10 = v9[1];
  uint64_t v34 = v9[2];
  int v38 = *(_DWORD *)(v8 + 4);
  uint64_t v11 = *(unsigned int *)(v10 + 16);
  unsigned int v39 = (float *)&v42;
  int v40 = v11;
  int v41 = 8;
  uint64_t v36 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    uint64_t v7 = operator new(4 * v11);
    __p = v7;
    unsigned int v39 = (float *)v7;
    int v41 = v11;
  }
  int v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (uint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *(int *)(v9[27] + 4 * i);
      if (v14 != -1)
      {
        int v15 = (int *)(*(void *)(v10 + 120) + 8 * i);
        uint64_t v16 = *(void *)(v10 + 168);
        uint64_t v17 = (unsigned int *)(*(void *)(v10 + 144) + 8 * i);
        uint64_t v18 = *v17;
        uint64_t v19 = (int)v17[1];
        v35[0] = v44;
        v35[1] = 0;
        v35[2] = v39;
        memset(&v35[3], 0, 13);
        int v37 = i;
        if (*(float *)(*(void *)(v10 + 216) + 4 * i) <= 0.0) {
          int v20 = 1;
        }
        else {
          int v20 = 4;
        }
        sub_1B6570AAC(&v38, (int *)&v36, (uint64_t)v35, v20, (*(unsigned __int16 *)(*(void *)(v34 + 432) + 2 * v14) >> 7) & 0xF);
        uint64_t v21 = (void *)(*a4 + 16 * v14);
        *uint64_t v21 = 0;
        v21[1] = 0;
        float32x2_t v22 = (float32x2_t)v44[0];
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * *v15), *(float *)v44);
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * v15[1]), v22, 1);
        if (SLODWORD(v35[4]) >= 1 && (int)v18 >= 1)
        {
          for (uint64_t j = 0; j != v18; ++j)
          {
            uint64_t v24 = *(int *)(v16 + 4 * v19 + 4 * j);
            if (BYTE4(v35[4]))
            {
              uint64_t v25 = (int *)(v9[21] + 4 * v24);
              uint64_t v26 = *a4;
              uint64_t v27 = *a4;
            }
            else
            {
              uint64_t v28 = 0;
              uint64_t v29 = *(void *)(v10 + 24);
              uint64_t v30 = *(int *)(v29 + 8 * v24 + 4);
              int v31 = *(_DWORD *)(v29 + 8 * v24);
              do
                uint64_t v32 = *(unsigned int *)(*(void *)(v10 + 72) + 4 * v30 + 4 * v28++);
              while (i != v32);
              uint64_t v33 = *(void *)(v10 + 48) + 4 * v30;
              if ((int)v28 + 1 < v31) {
                int v31 = 0;
              }
              uint64_t v25 = (int *)(v33 + 4 * ((int)v28 - v31 + 1));
              uint64_t v27 = *a4;
              uint64_t v26 = *a3;
            }
            *(float32x4_t *)(v27 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(v27 + 16 * v14), *(float32x4_t *)(v26 + 16 * *v25), v39[j]);
          }
        }
        int v12 = *(_DWORD *)(v10 + 4);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B6578780(uint64_t *a1, int a2, void *a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  uint64_t v9 = *(void **)(*(void *)(v8 + 64) + 8 * (a2 - 1));
  uint64_t v11 = v9[1];
  uint64_t v10 = v9[2];
  int v46 = *(_DWORD *)(v8 + 4);
  unsigned int v12 = 2 * *(_DWORD *)(v11 + 20);
  uint64_t v47 = &v50;
  unsigned int v48 = v12;
  int v49 = 32;
  v41[0] = v11;
  v41[1] = v10;
  uint64_t v34 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    uint64_t v7 = operator new(4 * v12);
    __p = v7;
    uint64_t v47 = (uint64_t *)v7;
    int v49 = v12;
  }
  int v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (uint64_t i = 0; i < v13; ++i)
    {
      int v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        uint64_t v16 = v15;
        uint64_t v37 = *(void *)(v11 + 360);
        uint64_t v17 = *(void *)(v11 + 336);
        uint64_t v18 = (8 * i) | 4;
        uint64_t v36 = *(int *)(v17 + v18);
        uint64_t v19 = *(int *)(v17 + 8 * i);
        uint64_t v20 = *(void *)(v11 + 264);
        uint64_t v35 = *(int *)(v20 + v18);
        uint64_t v21 = *(unsigned int *)(v20 + 8 * i);
        float v40 = 0.0;
        float32x2_t v22 = v47;
        int v23 = (_DWORD *)v47 + v19;
        int v38 = v19;
        v39[0] = &v40;
        v39[1] = v47;
        v39[2] = v23;
        memset(&v39[3], 0, 13);
        int v42 = i;
        int v43 = v15;
        int v44 = *(_DWORD *)(*(void *)(v41[0] + 336) + 8 * i);
        int v45 = *(_DWORD *)(*(void *)(v41[0] + 264) + 8 * i);
        uint64_t v24 = *(void *)(v11 + 288);
        sub_1B6570C90(&v46, (uint64_t)v41, (uint64_t)v39, (*(unsigned __int16 *)(*(void *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v34 + 432) + 2 * v15) >> 7) & 0xF);
        uint64_t v25 = (void *)(*a4 + 16 * v16);
        *uint64_t v25 = 0;
        v25[1] = 0;
        if (SLODWORD(v39[4]) >= 1 && (int)v21 >= 1)
        {
          uint64_t v26 = (int *)(v24 + 4 * v35);
          do
          {
            uint64_t v27 = *v26++;
            uint64_t v28 = *(int *)(v9[21] + 4 * v27);
            LODWORD(v27) = *v23++;
            *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a4 + 16 * v28), *(float *)&v27);
            --v21;
          }
          while (v21);
        }
        uint64_t v29 = v38;
        if (SHIDWORD(v39[3]) >= 1 && v38 >= 1)
        {
          int v31 = (int *)(v37 + 4 * v36);
          do
          {
            uint64_t v32 = *v31++;
            uint64_t v33 = (_DWORD *)(*(void *)(v11 + 120) + 8 * v32);
            LODWORD(v32) = *(_DWORD *)v22;
            float32x2_t v22 = (uint64_t *)((char *)v22 + 4);
            *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * (int)v33[i == *v33]), *(float *)&v32);
            --v29;
          }
          while (v29);
        }
        *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * i), v40);
        int v13 = *(_DWORD *)(v11 + 8);
      }
    }
    uint64_t v7 = __p;
  }
  operator delete(v7);
}

void sub_1B6578A20(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v5 + 52))
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(int **)(v5 + 8);
    uint64_t v10 = *(void **)(*((void *)v9 + 57) + 8 * a5);
    uint64_t v11 = *(void *)(*(void *)(*(void *)(v5 + 16) + 456) + 8 * a5);
    uint64_t v12 = v9[5];
    uint64_t v25 = (float *)&v26;
    __p = 0;
    if (v12 >= 0x11)
    {
      uint64_t v8 = operator new(4 * v12);
      __p = v8;
      uint64_t v25 = (float *)v8;
    }
    if (*v9 >= 1)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = *(int *)(*(void *)(v5 + 168) + 4 * v13);
        if (v14 != -1)
        {
          uint64_t v15 = *(int *)(*(void *)(v11 + 96) + 4 * v14);
          uint64_t v16 = (unsigned int *)(*(void *)(*v10 + 24) + 8 * v13);
          uint64_t v17 = *v16;
          if ((int)v17 < 1)
          {
            uint64_t v24 = (void *)(*a4 + 16 * v15);
            *uint64_t v24 = 0;
            v24[1] = 0;
          }
          else
          {
            uint64_t v18 = v10[3] + 4 * (int)v16[1];
            uint64_t v19 = v25;
            uint64_t v20 = v17;
            do
            {
              *v19++ = 1.0 / (float)(int)v17;
              --v20;
            }
            while (v20);
            uint64_t v21 = (void *)(*a4 + 16 * v15);
            *uint64_t v21 = 0;
            v21[1] = 0;
            unint64_t v22 = 0;
            uint64_t v23 = 4 * v17;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v15) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v15), *(float32x4_t *)(*a3 + 16 * *(int *)(v18 + v22)), v25[v22 / 4]);
              v22 += 4;
            }
            while (v23 != v22);
          }
        }
        ++v13;
      }
      while (v13 < *v9);
      uint64_t v8 = __p;
    }
    operator delete(v8);
  }
}

void sub_1B6578BD8(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  v60[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v52 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v9 = v8[1];
  uint64_t v10 = *(void *)(v8[60] + 8 * a5);
  uint64_t v11 = *(void *)(*(void *)(v9 + 456) + 8 * a5);
  uint64_t v45 = v8[2];
  uint64_t v12 = *(void **)(*(void *)(v45 + 456) + 8 * a5);
  uint64_t v48 = v9;
  uint64_t v13 = *(unsigned int *)(v9 + 16);
  uint64_t v14 = v58;
  int v55 = v58;
  int v56 = v13;
  int v57 = 8;
  __p = 0;
  if (v13 < 9)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = operator new(4 * v13);
    __p = v15;
    int v55 = v15;
    int v57 = v13;
    uint64_t v14 = v15;
  }
  v51[0] = v60;
  v51[1] = 0;
  v51[2] = v14;
  memset(&v51[3], 0, 13);
  if (*(unsigned char *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v51[3]) = 2;
    LODWORD(v51[4]) = 0;
    v60[0] = 0x3F0000003F000000;
    char v46 = 1;
  }
  else
  {
    char v46 = 0;
  }
  uint64_t v49 = v48;
  if (*(int *)(v48 + 4) >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v47 = v8;
    do
    {
      uint64_t v17 = *(int *)(v8[27] + 4 * v16);
      if (v17 != -1)
      {
        uint64_t v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if (*(unsigned char *)(v12[21] + *v18))
        {
          uint64_t v38 = v12[9];
          uint64_t v39 = *(unsigned __int16 *)(v38 + 2 * v17);
          if (*(_WORD *)(v38 + 2 * v17))
          {
            uint64_t v40 = 0;
            do
            {
              sub_1B6E10810((void *)v11, v16, *(unsigned __int16 *)(*(void *)(v10 + 40)+ 2 * (v40 + *(int *)(*(void *)(*(void *)(v10 + 32) + 96) + 4 * v17))), &v53);
              v41.i64[0] = 0x3F0000003F000000;
              v41.i64[1] = 0x3F0000003F000000;
              uint64_t v42 = v18[v40];
              int v43 = (void *)(*a4 + 16 * v42);
              *int v43 = 0;
              v43[1] = 0;
              uint64_t v44 = v54;
              *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v42), v41, *(float32x4_t *)(*a3 + 16 * v53));
              *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v42), v41, *(float32x4_t *)(*a3 + 16 * v44));
              ++v40;
            }
            while (v39 != v40);
          }
        }
        else
        {
          if ((v46 & 1) == 0)
          {
            int v50 = v16;
            if (*(float *)(*(void *)(v48 + 216) + 4 * v16) <= 0.0) {
              int v19 = 1;
            }
            else {
              int v19 = 4;
            }
            sub_1B656FFE8(&v52, (int *)&v49, (uint64_t)v51, v19, (*(unsigned __int16 *)(*(void *)(v45 + 432) + 2 * v17) >> 7) & 0xF);
          }
          sub_1B6E10810((void *)v11, v16, 0, &v53);
          uint64_t v20 = *v18;
          uint64_t v21 = (void *)(*a4 + 16 * v20);
          *uint64_t v21 = 0;
          v21[1] = 0;
          uint64_t v22 = v54;
          float32x2_t v23 = (float32x2_t)v60[0];
          *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v20), *(float32x4_t *)(*a3 + 16 * v53), *(float *)v60);
          *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v20), *(float32x4_t *)(*a3 + 16 * v22), v23, 1);
          if (SLODWORD(v51[4]) >= 1)
          {
            uint64_t v24 = (unsigned int *)(*(void *)(v48 + 144) + 8 * v16);
            uint64_t v25 = *v24;
            if ((int)v25 >= 1)
            {
              uint64_t v26 = 0;
              uint64_t v27 = *(void *)(v48 + 168) + 4 * (int)v24[1];
              do
              {
                uint64_t v28 = *(int *)(v27 + 4 * v26);
                if (BYTE4(v51[4]))
                {
                  uint64_t v29 = (int *)(v12[12] + 4 * *(int *)(v47[21] + 4 * v28));
                  uint64_t v30 = *a4;
                  uint64_t v31 = *a4;
                }
                else
                {
                  uint64_t v32 = 0;
                  uint64_t v33 = (2 * (int)v28) | 1;
                  uint64_t v34 = *(void *)(v48 + 24);
                  uint64_t v35 = *(void *)(v48 + 72) + 4 * *(int *)(v34 + 4 * v33);
                  int v36 = *(_DWORD *)(v34 + 8 * v28);
                  do
                    uint64_t v37 = *(unsigned int *)(v35 + 4 * v32++);
                  while (v16 != v37);
                  if ((int)v32 + 1 < v36) {
                    int v36 = 0;
                  }
                  uint64_t v29 = (int *)(*(void *)(v11 + 24)
                              + 4 * *(int *)(*(void *)(*(void *)v11 + 24) + 4 * v33)
                              + 4 * ((int)v32 - v36 + 1));
                  uint64_t v31 = *a4;
                  uint64_t v30 = *a3;
                }
                *(float32x4_t *)(v31 + 16 * v20) = vmlaq_n_f32(*(float32x4_t *)(v31 + 16 * v20), *(float32x4_t *)(v30 + 16 * *v29), *(float *)&v55[4 * v26++]);
              }
              while (v26 != v25);
            }
          }
        }
      }
      ++v16;
      uint64_t v8 = v47;
    }
    while (v16 < *(int *)(v48 + 4));
    uint64_t v15 = __p;
  }
  operator delete(v15);
}

void sub_1B6578FA0(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v57 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v69 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v60 = v57[1];
  uint64_t v52 = v57[2];
  uint64_t v61 = *(void *)(*(void *)(v60 + 456) + 8 * a5);
  if (*(unsigned char *)(v61 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v56 = v7;
  int v59 = *(void **)(v57[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v52 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v60 + 20);
  int v76 = &v79;
  int v77 = 2 * v9;
  int v78 = 32;
  int32x4_t v80 = 0;
  if (2 * v9 >= 0x21)
  {
    int32x4_t v80 = (uint64_t *)operator new(8 * v9);
    int v76 = v80;
    int v78 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v60 + 20);
  }
  uint64_t v10 = 0;
  int v71 = &v74;
  unsigned int v72 = v9;
  int v73 = 16;
  int v75 = 0;
  if (v9 >= 0x11)
  {
    uint64_t v10 = operator new(4 * v9);
    int v75 = v10;
    int v71 = (uint64_t *)v10;
    int v73 = v9;
  }
  v64[0] = v60;
  v64[1] = v52;
  if (*(int *)(v60 + 8) >= 1)
  {
    int v53 = v8;
    uint64_t v11 = 0;
    uint64_t v13 = v57;
    uint64_t v12 = a3;
    BOOL v14 = v56;
    uint64_t v15 = v59;
    do
    {
      int v62 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v62 != -1)
      {
        uint64_t v16 = *(int *)(*(void *)(v61 + 96) + 4 * v11);
        uint64_t v17 = (int *)(*(void *)(v61 + 144) + 4 * v16);
        uint64_t v18 = *(int *)(v53[12] + 4 * v62);
        int v19 = (int *)(v53[18] + 4 * v18);
        uint64_t v20 = *v19;
        uint64_t v21 = v53[21];
        if ((*(unsigned char *)(v21 + v20) & 1) == 0 && v14)
        {
          float32x2_t v23 = (void *)(*a4 + 16 * v20);
          *float32x2_t v23 = 0;
          v23[1] = 0;
          *(float32x4_t *)(*a4 + 16 * *v19) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * *v17), *(float32x4_t *)(*a4 + 16 * *v19));
        }
        else if (*(unsigned char *)(v21 + v20))
        {
          uint64_t v36 = v53[9];
          uint64_t v37 = *(unsigned __int16 *)(v36 + 2 * v62);
          if (*(_WORD *)(v36 + 2 * v62))
          {
            uint64_t v38 = 0;
            uint64_t v54 = *(void *)(v61 + 144) + 4 * v16;
            uint64_t v55 = *(void *)(v61 + 168) + v16;
            uint64_t v39 = v21 + v18;
            do
            {
              uint64_t v40 = *(unsigned __int16 *)(v15[5] + 2 * (v38 + *(int *)(*(void *)(v15[4] + 96) + 4 * v62)));
              uint64_t v41 = v17[v40];
              uint64_t v42 = v19[v38];
              int v43 = (void *)(*a4 + 16 * v42);
              *int v43 = 0;
              v43[1] = 0;
              if (!v14 && (*(unsigned char *)(v39 + v38) & 8) != 0)
              {
                uint64_t v44 = v39;
                sub_1B6E1066C((void *)v61, v11, v40, v70);
                if ((*(unsigned char *)(v55 + v40) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v55 + v40) & 0x20) != 0)
                  {
                    unsigned int v49 = v40 == 0;
                    uint64_t v47 = v59;
                    int v48 = v11;
                  }
                  else
                  {
                    uint64_t v47 = v59;
                    int v48 = v11;
                    unsigned int v49 = v40;
                  }
                  float v50 = sub_1B6E24EC4(v47, v48, v49, v62);
                  float v51 = 1.0 - v50;
                  float v46 = v50 + (float)((float)(1.0 - v50) * 0.75);
                  float v45 = v51 * 0.125;
                }
                else
                {
                  float v45 = 0.125;
                  float v46 = 0.75;
                }
                uint64_t v13 = v57;
                uint64_t v12 = a3;
                BOOL v14 = v56;
                uint64_t v15 = v59;
                uint64_t v39 = v44;
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * SLODWORD(v70[0])), v45);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * SHIDWORD(v70[0])), v45);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v41), v46);
                uint64_t v17 = (int *)v54;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v42) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * v41), *(float32x4_t *)(*a4 + 16 * v42));
              }
              ++v38;
            }
            while (v37 != v38);
          }
        }
        else
        {
          uint64_t v24 = *(int *)(*(void *)(v60 + 336) + 8 * v11);
          float v63 = 0.0;
          uint64_t v25 = v76;
          uint64_t v26 = (_DWORD *)v76 + v24;
          v70[0] = &v63;
          v70[1] = v76;
          void v70[2] = v26;
          memset(&v70[3], 0, 13);
          int v65 = v11;
          int v66 = v62;
          int v67 = *(_DWORD *)(*(void *)(v64[0] + 336) + 8 * v11);
          int v68 = *(_DWORD *)(*(void *)(v64[0] + 264) + 8 * v11);
          sub_1B65703B8(&v69, (uint64_t)v64, (uint64_t)v70, (*(unsigned __int16 *)(*(void *)(v60 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v52 + 432) + 2 * v62) >> 7) & 0xF);
          uint64_t v13 = v57;
          uint64_t v27 = *v17;
          uint64_t v28 = *v19;
          uint64_t v29 = (void *)(*a4 + 16 * v28);
          *uint64_t v29 = 0;
          v29[1] = 0;
          if (SLODWORD(v70[4]) >= 1)
          {
            uint64_t v30 = *(void *)(v60 + 264);
            uint64_t v31 = *(unsigned int *)(v30 + 8 * v11);
            if ((int)v31 >= 1)
            {
              uint64_t v32 = (int *)(*(void *)(v60 + 288) + 4 * *(int *)(v30 + ((8 * v11) | 4)));
              do
              {
                uint64_t v33 = *v32++;
                uint64_t v34 = *(int *)(v53[12] + 4 * *(int *)(v57[21] + 4 * v33));
                LODWORD(v33) = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * v34), *(float *)&v33);
                --v31;
              }
              while (v31);
            }
          }
          uint64_t v12 = a3;
          if (SHIDWORD(v70[3]) >= 1)
          {
            sub_1B6E10910((void *)v61, v11, v71);
            uint64_t v13 = v57;
            uint64_t v12 = a3;
            if ((int)v24 >= 1)
            {
              uint64_t v35 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * *(int *)((char *)v71 + v35)), *(float *)((char *)v25 + v35));
                v35 += 4;
              }
              while (4 * v24 != v35);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v12 + 16 * v27), v63);
          BOOL v14 = v56;
          uint64_t v15 = v59;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v60 + 8));
    uint64_t v10 = v75;
  }
  operator delete(v10);
  operator delete(v80);
}

void sub_1B657950C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, int a5)
{
  v60[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v52 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v9 = v8[1];
  uint64_t v10 = *(void *)(v8[60] + 8 * a5);
  uint64_t v11 = *(void *)(*(void *)(v9 + 456) + 8 * a5);
  uint64_t v45 = v8[2];
  uint64_t v12 = *(void **)(*(void *)(v45 + 456) + 8 * a5);
  uint64_t v48 = v9;
  uint64_t v13 = *(unsigned int *)(v9 + 16);
  BOOL v14 = v58;
  uint64_t v55 = v58;
  int v56 = v13;
  int v57 = 8;
  __p = 0;
  if (v13 < 9)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = operator new(4 * v13);
    __p = v15;
    uint64_t v55 = v15;
    int v57 = v13;
    BOOL v14 = v15;
  }
  v51[0] = v60;
  v51[1] = 0;
  v51[2] = v14;
  memset(&v51[3], 0, 13);
  if (*(unsigned char *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v51[3]) = 2;
    LODWORD(v51[4]) = 0;
    v60[0] = 0x3F0000003F000000;
    char v46 = 1;
  }
  else
  {
    char v46 = 0;
  }
  uint64_t v49 = v48;
  if (*(int *)(v48 + 4) >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v47 = v8;
    do
    {
      uint64_t v17 = *(int *)(v8[27] + 4 * v16);
      if (v17 != -1)
      {
        uint64_t v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if (*(unsigned char *)(v12[21] + *v18))
        {
          uint64_t v38 = v12[9];
          uint64_t v39 = *(unsigned __int16 *)(v38 + 2 * v17);
          if (*(_WORD *)(v38 + 2 * v17))
          {
            uint64_t v40 = 0;
            do
            {
              sub_1B6E10810((void *)v11, v16, *(unsigned __int16 *)(*(void *)(v10 + 40)+ 2 * (v40 + *(int *)(*(void *)(*(void *)(v10 + 32) + 96) + 4 * v17))), &v53);
              v41.i64[0] = 0x3F0000003F000000;
              v41.i64[1] = 0x3F0000003F000000;
              uint64_t v42 = v18[v40];
              int v43 = (void *)(*a4 + 16 * v42);
              *int v43 = 0;
              v43[1] = 0;
              uint64_t v44 = v54;
              *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v42), v41, *(float32x4_t *)(*a3 + 16 * v53));
              *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v42), v41, *(float32x4_t *)(*a3 + 16 * v44));
              ++v40;
            }
            while (v39 != v40);
          }
        }
        else
        {
          if ((v46 & 1) == 0)
          {
            int v50 = v16;
            if (*(float *)(*(void *)(v48 + 216) + 4 * v16) <= 0.0) {
              int v19 = 1;
            }
            else {
              int v19 = 4;
            }
            sub_1B6570AAC(&v52, (int *)&v49, (uint64_t)v51, v19, (*(unsigned __int16 *)(*(void *)(v45 + 432) + 2 * v17) >> 7) & 0xF);
          }
          sub_1B6E10810((void *)v11, v16, 0, &v53);
          uint64_t v20 = *v18;
          uint64_t v21 = (void *)(*a4 + 16 * v20);
          *uint64_t v21 = 0;
          v21[1] = 0;
          uint64_t v22 = v54;
          float32x2_t v23 = (float32x2_t)v60[0];
          *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v20), *(float32x4_t *)(*a3 + 16 * v53), *(float *)v60);
          *(float32x4_t *)(*a4 + 16 * v20) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v20), *(float32x4_t *)(*a3 + 16 * v22), v23, 1);
          if (SLODWORD(v51[4]) >= 1)
          {
            uint64_t v24 = (unsigned int *)(*(void *)(v48 + 144) + 8 * v16);
            uint64_t v25 = *v24;
            if ((int)v25 >= 1)
            {
              uint64_t v26 = 0;
              uint64_t v27 = *(void *)(v48 + 168) + 4 * (int)v24[1];
              do
              {
                uint64_t v28 = *(int *)(v27 + 4 * v26);
                if (BYTE4(v51[4]))
                {
                  uint64_t v29 = (int *)(v12[12] + 4 * *(int *)(v47[21] + 4 * v28));
                  uint64_t v30 = *a4;
                  uint64_t v31 = *a4;
                }
                else
                {
                  uint64_t v32 = 0;
                  uint64_t v33 = (2 * (int)v28) | 1;
                  uint64_t v34 = *(void *)(v48 + 24);
                  uint64_t v35 = *(void *)(v48 + 72) + 4 * *(int *)(v34 + 4 * v33);
                  int v36 = *(_DWORD *)(v34 + 8 * v28);
                  do
                    uint64_t v37 = *(unsigned int *)(v35 + 4 * v32++);
                  while (v16 != v37);
                  if ((int)v32 + 1 < v36) {
                    int v36 = 0;
                  }
                  uint64_t v29 = (int *)(*(void *)(v11 + 24)
                              + 4 * *(int *)(*(void *)(*(void *)v11 + 24) + 4 * v33)
                              + 4 * ((int)v32 - v36 + 1));
                  uint64_t v31 = *a4;
                  uint64_t v30 = *a3;
                }
                *(float32x4_t *)(v31 + 16 * v20) = vmlaq_n_f32(*(float32x4_t *)(v31 + 16 * v20), *(float32x4_t *)(v30 + 16 * *v29), *(float *)&v55[4 * v26++]);
              }
              while (v26 != v25);
            }
          }
        }
      }
      ++v16;
      uint64_t v8 = v47;
    }
    while (v16 < *(int *)(v48 + 4));
    uint64_t v15 = __p;
  }
  operator delete(v15);
}

void sub_1B65798D4(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v57 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v69 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v60 = v57[1];
  uint64_t v52 = v57[2];
  uint64_t v61 = *(void *)(*(void *)(v60 + 456) + 8 * a5);
  if (*(unsigned char *)(v61 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v56 = v7;
  int v59 = *(void **)(v57[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v52 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v60 + 20);
  int v76 = &v79;
  int v77 = 2 * v9;
  int v78 = 32;
  int32x4_t v80 = 0;
  if (2 * v9 >= 0x21)
  {
    int32x4_t v80 = (uint64_t *)operator new(8 * v9);
    int v76 = v80;
    int v78 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v60 + 20);
  }
  uint64_t v10 = 0;
  int v71 = &v74;
  unsigned int v72 = v9;
  int v73 = 16;
  int v75 = 0;
  if (v9 >= 0x11)
  {
    uint64_t v10 = operator new(4 * v9);
    int v75 = v10;
    int v71 = (uint64_t *)v10;
    int v73 = v9;
  }
  v64[0] = v60;
  v64[1] = v52;
  if (*(int *)(v60 + 8) >= 1)
  {
    int v53 = v8;
    uint64_t v11 = 0;
    uint64_t v13 = v57;
    uint64_t v12 = a3;
    BOOL v14 = v56;
    uint64_t v15 = v59;
    do
    {
      int v62 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v62 != -1)
      {
        uint64_t v16 = *(int *)(*(void *)(v61 + 96) + 4 * v11);
        uint64_t v17 = (int *)(*(void *)(v61 + 144) + 4 * v16);
        uint64_t v18 = *(int *)(v53[12] + 4 * v62);
        int v19 = (int *)(v53[18] + 4 * v18);
        uint64_t v20 = *v19;
        uint64_t v21 = v53[21];
        if ((*(unsigned char *)(v21 + v20) & 1) == 0 && v14)
        {
          float32x2_t v23 = (void *)(*a4 + 16 * v20);
          *float32x2_t v23 = 0;
          v23[1] = 0;
          *(float32x4_t *)(*a4 + 16 * *v19) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * *v17), *(float32x4_t *)(*a4 + 16 * *v19));
        }
        else if (*(unsigned char *)(v21 + v20))
        {
          uint64_t v36 = v53[9];
          uint64_t v37 = *(unsigned __int16 *)(v36 + 2 * v62);
          if (*(_WORD *)(v36 + 2 * v62))
          {
            uint64_t v38 = 0;
            uint64_t v54 = *(void *)(v61 + 144) + 4 * v16;
            uint64_t v55 = *(void *)(v61 + 168) + v16;
            uint64_t v39 = v21 + v18;
            do
            {
              uint64_t v40 = *(unsigned __int16 *)(v15[5] + 2 * (v38 + *(int *)(*(void *)(v15[4] + 96) + 4 * v62)));
              uint64_t v41 = v17[v40];
              uint64_t v42 = v19[v38];
              int v43 = (void *)(*a4 + 16 * v42);
              *int v43 = 0;
              v43[1] = 0;
              if (!v14 && (*(unsigned char *)(v39 + v38) & 8) != 0)
              {
                uint64_t v44 = v39;
                sub_1B6E1066C((void *)v61, v11, v40, v70);
                if ((*(unsigned char *)(v55 + v40) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v55 + v40) & 0x20) != 0)
                  {
                    unsigned int v49 = v40 == 0;
                    uint64_t v47 = v59;
                    int v48 = v11;
                  }
                  else
                  {
                    uint64_t v47 = v59;
                    int v48 = v11;
                    unsigned int v49 = v40;
                  }
                  float v50 = sub_1B6E24EC4(v47, v48, v49, v62);
                  float v51 = 1.0 - v50;
                  float v46 = v50 + (float)((float)(1.0 - v50) * 0.75);
                  float v45 = v51 * 0.125;
                }
                else
                {
                  float v45 = 0.125;
                  float v46 = 0.75;
                }
                uint64_t v13 = v57;
                uint64_t v12 = a3;
                BOOL v14 = v56;
                uint64_t v15 = v59;
                uint64_t v39 = v44;
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * SLODWORD(v70[0])), v45);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * SHIDWORD(v70[0])), v45);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v41), v46);
                uint64_t v17 = (int *)v54;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v42) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * v41), *(float32x4_t *)(*a4 + 16 * v42));
              }
              ++v38;
            }
            while (v37 != v38);
          }
        }
        else
        {
          uint64_t v24 = *(int *)(*(void *)(v60 + 336) + 8 * v11);
          float v63 = 0.0;
          uint64_t v25 = v76;
          uint64_t v26 = (_DWORD *)v76 + v24;
          v70[0] = &v63;
          v70[1] = v76;
          void v70[2] = v26;
          memset(&v70[3], 0, 13);
          int v65 = v11;
          int v66 = v62;
          int v67 = *(_DWORD *)(*(void *)(v64[0] + 336) + 8 * v11);
          int v68 = *(_DWORD *)(*(void *)(v64[0] + 264) + 8 * v11);
          sub_1B6570C90(&v69, (uint64_t)v64, (uint64_t)v70, (*(unsigned __int16 *)(*(void *)(v60 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v52 + 432) + 2 * v62) >> 7) & 0xF);
          uint64_t v13 = v57;
          uint64_t v27 = *v17;
          uint64_t v28 = *v19;
          uint64_t v29 = (void *)(*a4 + 16 * v28);
          *uint64_t v29 = 0;
          v29[1] = 0;
          if (SLODWORD(v70[4]) >= 1)
          {
            uint64_t v30 = *(void *)(v60 + 264);
            uint64_t v31 = *(unsigned int *)(v30 + 8 * v11);
            if ((int)v31 >= 1)
            {
              uint64_t v32 = (int *)(*(void *)(v60 + 288) + 4 * *(int *)(v30 + ((8 * v11) | 4)));
              do
              {
                uint64_t v33 = *v32++;
                uint64_t v34 = *(int *)(v53[12] + 4 * *(int *)(v57[21] + 4 * v33));
                LODWORD(v33) = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * v34), *(float *)&v33);
                --v31;
              }
              while (v31);
            }
          }
          uint64_t v12 = a3;
          if (SHIDWORD(v70[3]) >= 1)
          {
            sub_1B6E10910((void *)v61, v11, v71);
            uint64_t v13 = v57;
            uint64_t v12 = a3;
            if ((int)v24 >= 1)
            {
              uint64_t v35 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * *(int *)((char *)v71 + v35)), *(float *)((char *)v25 + v35));
                v35 += 4;
              }
              while (4 * v24 != v35);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v12 + 16 * v27), v63);
          BOOL v14 = v56;
          uint64_t v15 = v59;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v60 + 8));
    uint64_t v10 = v75;
  }
  operator delete(v10);
  operator delete(v80);
}

void sub_1B6579E40(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v8 = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v28 = v27[1];
  uint64_t v9 = *(void *)(v27[60] + 8 * a5);
  uint64_t v10 = *(void **)(*(void *)(v28 + 456) + 8 * a5);
  uint64_t v11 = *(void **)(*(void *)(v27[2] + 456) + 8 * a5);
  uint64_t v12 = *(unsigned int *)(v28 + 16);
  uint64_t v31 = &v34;
  int v32 = v12;
  int v33 = 8;
  __p = 0;
  if (v12 >= 9)
  {
    uint64_t v8 = operator new(4 * v12);
    __p = v8;
    uint64_t v31 = (uint64_t *)v8;
    int v33 = v12;
  }
  if (*(int *)(v28 + 4) >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(int *)(v27[27] + 4 * v13);
      if (v14 != -1)
      {
        uint64_t v15 = (int *)(v11[18] + 4 * *(int *)(v11[12] + 4 * v14));
        if (*(unsigned char *)(v11[21] + *v15))
        {
          uint64_t v20 = v11[9];
          uint64_t v21 = *(unsigned __int16 *)(v20 + 2 * v14);
          if (*(_WORD *)(v20 + 2 * v14))
          {
            uint64_t v22 = 0;
            do
            {
              sub_1B6E10810(v10, v13, *(unsigned __int16 *)(*(void *)(v9 + 40)+ 2 * (v22 + *(int *)(*(void *)(*(void *)(v9 + 32) + 96) + 4 * v14))), &v29);
              v23.i64[0] = 0x3F0000003F000000;
              v23.i64[1] = 0x3F0000003F000000;
              uint64_t v24 = v15[v22];
              uint64_t v25 = (void *)(*a4 + 16 * v24);
              *uint64_t v25 = 0;
              v25[1] = 0;
              uint64_t v26 = v30;
              *(float32x4_t *)(*a4 + 16 * v24) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v24), v23, *(float32x4_t *)(*a3 + 16 * v29));
              *(float32x4_t *)(*a4 + 16 * v24) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v24), v23, *(float32x4_t *)(*a3 + 16 * v26));
              ++v22;
            }
            while (v21 != v22);
          }
        }
        else
        {
          sub_1B6E10810(v10, v13, 0, &v29);
          v16.i64[0] = 0x3F0000003F000000;
          v16.i64[1] = 0x3F0000003F000000;
          uint64_t v17 = *v15;
          uint64_t v18 = (void *)(*a4 + 16 * v17);
          *uint64_t v18 = 0;
          v18[1] = 0;
          uint64_t v19 = v30;
          *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v17), v16, *(float32x4_t *)(*a3 + 16 * v29));
          *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v17), v16, *(float32x4_t *)(*a3 + 16 * v19));
        }
      }
      ++v13;
    }
    while (v13 < *(int *)(v28 + 4));
    uint64_t v8 = __p;
  }
  operator delete(v8);
}

void sub_1B657A074(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v7 = v6[2];
  float v51 = v6;
  uint64_t v52 = v6[1];
  uint64_t v8 = v6[60];
  uint64_t v9 = *(void *)(v7 + 456);
  uint64_t v53 = *(void *)(*(void *)(v52 + 456) + 8 * a5);
  if (*(unsigned char *)(v53 + 12)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = **(_DWORD **)a1 == 0;
  }
  BOOL v46 = v10;
  uint64_t v11 = *(void **)(v8 + 8 * a5);
  float v45 = *(void **)(v9 + 8 * a5);
  unsigned int v12 = *(_DWORD *)(v52 + 20);
  uint64_t v60 = &v63;
  int v61 = 2 * v12;
  int v62 = 32;
  int v64 = 0;
  if (2 * v12 >= 0x21)
  {
    int v64 = operator new(8 * v12);
    uint64_t v60 = (uint64_t *)v64;
    int v62 = 2 * v12;
    unsigned int v12 = *(_DWORD *)(v52 + 20);
  }
  uint64_t v13 = 0;
  uint64_t v55 = &v58;
  unsigned int v56 = v12;
  int v57 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    uint64_t v13 = operator new(4 * v12);
    __p = v13;
    uint64_t v55 = (uint64_t *)v13;
    int v57 = v12;
  }
  if (*(int *)(v52 + 8) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a3;
    BOOL v16 = v46;
    while (1)
    {
      uint64_t v17 = *(int *)(v51[30] + 4 * v14);
      if (v17 != -1)
      {
        uint64_t v18 = *(int *)(*(void *)(v53 + 96) + 4 * v14);
        uint64_t v19 = (int *)(*(void *)(v53 + 144) + 4 * v18);
        uint64_t v20 = *(int *)(v45[12] + 4 * v17);
        uint64_t v21 = (int *)(v45[18] + 4 * v20);
        uint64_t v22 = *v21;
        uint64_t v23 = v45[21];
        if ((*(unsigned char *)(v23 + v22) & 1) == 0 && v16)
        {
          uint64_t v25 = (void *)(*a4 + 16 * v22);
          *uint64_t v25 = 0;
          v25[1] = 0;
          uint64_t v26 = (float32x4_t *)(*a4 + 16 * *v21);
          int v27 = *v19;
        }
        else
        {
          if (*(unsigned char *)(v23 + v22))
          {
            uint64_t v29 = v45[9];
            uint64_t v30 = *(unsigned __int16 *)(v29 + 2 * v17);
            if (*(_WORD *)(v29 + 2 * v17))
            {
              uint64_t v31 = 0;
              uint64_t v49 = *(void *)(v53 + 168) + v18;
              uint64_t v50 = *(unsigned __int16 *)(v29 + 2 * v17);
              uint64_t v32 = v23 + v20;
              uint64_t v48 = v32;
              do
              {
                uint64_t v33 = *(unsigned __int16 *)(v11[5] + 2 * (v31 + *(int *)(*(void *)(v11[4] + 96) + 4 * v17)));
                uint64_t v34 = v19[v33];
                uint64_t v35 = v21[v31];
                uint64_t v36 = (void *)(*a4 + 16 * v35);
                *uint64_t v36 = 0;
                v36[1] = 0;
                if (!v16 && (*(unsigned char *)(v32 + v31) & 8) != 0)
                {
                  sub_1B6E1066C((void *)v53, v14, v33, v54);
                  if ((*(unsigned char *)(v49 + v33) & 0x10) != 0)
                  {
                    if ((*(unsigned char *)(v49 + v33) & 0x20) != 0)
                    {
                      unsigned int v41 = v33 == 0;
                      uint64_t v39 = v11;
                      int v40 = v14;
                    }
                    else
                    {
                      uint64_t v39 = v11;
                      int v40 = v14;
                      unsigned int v41 = v33;
                    }
                    float v42 = sub_1B6E24EC4(v39, v40, v41, v17);
                    float v43 = 1.0 - v42;
                    float v38 = v42 + (float)((float)(1.0 - v42) * 0.75);
                    float v37 = v43 * 0.125;
                  }
                  else
                  {
                    float v37 = 0.125;
                    float v38 = 0.75;
                  }
                  uint64_t v15 = a3;
                  uint64_t v32 = v48;
                  BOOL v16 = v46;
                  uint64_t v30 = v50;
                  uint64_t v44 = v54[1];
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v54[0]), v37);
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v44), v37);
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v34), v38);
                }
                else
                {
                  *(float32x4_t *)(*a4 + 16 * v35) = vaddq_f32(*(float32x4_t *)(*v15 + 16 * v34), *(float32x4_t *)(*a4 + 16 * v35));
                }
                ++v31;
              }
              while (v30 != v31);
            }
            goto LABEL_19;
          }
          int v27 = *v19;
          uint64_t v28 = (void *)(*a4 + 16 * v22);
          *uint64_t v28 = 0;
          v28[1] = 0;
          uint64_t v26 = (float32x4_t *)(*a4 + 16 * v22);
        }
        *uint64_t v26 = vaddq_f32(*(float32x4_t *)(*v15 + 16 * v27), *v26);
      }
LABEL_19:
      if (++v14 >= *(int *)(v52 + 8))
      {
        uint64_t v13 = __p;
        break;
      }
    }
  }
  operator delete(v13);
  operator delete(v64);
}

void sub_1B657A420(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v57 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v69 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v60 = v57[1];
  uint64_t v52 = v57[2];
  uint64_t v61 = *(void *)(*(void *)(v60 + 456) + 8 * a5);
  if (*(unsigned char *)(v61 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v56 = v7;
  int v59 = *(void **)(v57[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v52 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v60 + 20);
  int v76 = &v79;
  int v77 = 2 * v9;
  int v78 = 32;
  int32x4_t v80 = 0;
  if (2 * v9 >= 0x21)
  {
    int32x4_t v80 = (uint64_t *)operator new(8 * v9);
    int v76 = v80;
    int v78 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v60 + 20);
  }
  BOOL v10 = 0;
  int v71 = &v74;
  unsigned int v72 = v9;
  int v73 = 16;
  int v75 = 0;
  if (v9 >= 0x11)
  {
    BOOL v10 = operator new(4 * v9);
    int v75 = v10;
    int v71 = (uint64_t *)v10;
    int v73 = v9;
  }
  v64[0] = v60;
  v64[1] = v52;
  if (*(int *)(v60 + 8) >= 1)
  {
    uint64_t v53 = v8;
    uint64_t v11 = 0;
    uint64_t v13 = v57;
    unsigned int v12 = a3;
    BOOL v14 = v56;
    uint64_t v15 = v59;
    do
    {
      int v62 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v62 != -1)
      {
        uint64_t v16 = *(int *)(*(void *)(v61 + 96) + 4 * v11);
        uint64_t v17 = (int *)(*(void *)(v61 + 144) + 4 * v16);
        uint64_t v18 = *(int *)(v53[12] + 4 * v62);
        uint64_t v19 = (int *)(v53[18] + 4 * v18);
        uint64_t v20 = *v19;
        uint64_t v21 = v53[21];
        if ((*(unsigned char *)(v21 + v20) & 1) == 0 && v14)
        {
          uint64_t v23 = (void *)(*a4 + 16 * v20);
          *uint64_t v23 = 0;
          v23[1] = 0;
          *(float32x4_t *)(*a4 + 16 * *v19) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * *v17), *(float32x4_t *)(*a4 + 16 * *v19));
        }
        else if (*(unsigned char *)(v21 + v20))
        {
          uint64_t v36 = v53[9];
          uint64_t v37 = *(unsigned __int16 *)(v36 + 2 * v62);
          if (*(_WORD *)(v36 + 2 * v62))
          {
            uint64_t v38 = 0;
            uint64_t v54 = *(void *)(v61 + 144) + 4 * v16;
            uint64_t v55 = *(void *)(v61 + 168) + v16;
            uint64_t v39 = v21 + v18;
            do
            {
              uint64_t v40 = *(unsigned __int16 *)(v15[5] + 2 * (v38 + *(int *)(*(void *)(v15[4] + 96) + 4 * v62)));
              uint64_t v41 = v17[v40];
              uint64_t v42 = v19[v38];
              float v43 = (void *)(*a4 + 16 * v42);
              *float v43 = 0;
              v43[1] = 0;
              if (!v14 && (*(unsigned char *)(v39 + v38) & 8) != 0)
              {
                uint64_t v44 = v39;
                sub_1B6E1066C((void *)v61, v11, v40, v70);
                if ((*(unsigned char *)(v55 + v40) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v55 + v40) & 0x20) != 0)
                  {
                    unsigned int v49 = v40 == 0;
                    uint64_t v47 = v59;
                    int v48 = v11;
                  }
                  else
                  {
                    uint64_t v47 = v59;
                    int v48 = v11;
                    unsigned int v49 = v40;
                  }
                  float v50 = sub_1B6E24EC4(v47, v48, v49, v62);
                  float v51 = 1.0 - v50;
                  float v46 = v50 + (float)((float)(1.0 - v50) * 0.75);
                  float v45 = v51 * 0.125;
                }
                else
                {
                  float v45 = 0.125;
                  float v46 = 0.75;
                }
                uint64_t v13 = v57;
                unsigned int v12 = a3;
                BOOL v14 = v56;
                uint64_t v15 = v59;
                uint64_t v39 = v44;
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * SLODWORD(v70[0])), v45);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * SHIDWORD(v70[0])), v45);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v41), v46);
                uint64_t v17 = (int *)v54;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v42) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * v41), *(float32x4_t *)(*a4 + 16 * v42));
              }
              ++v38;
            }
            while (v37 != v38);
          }
        }
        else
        {
          uint64_t v24 = *(int *)(*(void *)(v60 + 336) + 8 * v11);
          float v63 = 0.0;
          uint64_t v25 = v76;
          uint64_t v26 = (_DWORD *)v76 + v24;
          v70[0] = &v63;
          v70[1] = v76;
          void v70[2] = v26;
          memset(&v70[3], 0, 13);
          int v65 = v11;
          int v66 = v62;
          int v67 = *(_DWORD *)(*(void *)(v64[0] + 336) + 8 * v11);
          int v68 = *(_DWORD *)(*(void *)(v64[0] + 264) + 8 * v11);
          sub_1B65703B8(&v69, (uint64_t)v64, (uint64_t)v70, (*(unsigned __int16 *)(*(void *)(v60 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v52 + 432) + 2 * v62) >> 7) & 0xF);
          uint64_t v13 = v57;
          uint64_t v27 = *v17;
          uint64_t v28 = *v19;
          uint64_t v29 = (void *)(*a4 + 16 * v28);
          *uint64_t v29 = 0;
          v29[1] = 0;
          if (SLODWORD(v70[4]) >= 1)
          {
            uint64_t v30 = *(void *)(v60 + 264);
            uint64_t v31 = *(unsigned int *)(v30 + 8 * v11);
            if ((int)v31 >= 1)
            {
              uint64_t v32 = (int *)(*(void *)(v60 + 288) + 4 * *(int *)(v30 + ((8 * v11) | 4)));
              do
              {
                uint64_t v33 = *v32++;
                uint64_t v34 = *(int *)(v53[12] + 4 * *(int *)(v57[21] + 4 * v33));
                LODWORD(v33) = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * v34), *(float *)&v33);
                --v31;
              }
              while (v31);
            }
          }
          unsigned int v12 = a3;
          if (SHIDWORD(v70[3]) >= 1)
          {
            sub_1B6E10910((void *)v61, v11, v71);
            uint64_t v13 = v57;
            unsigned int v12 = a3;
            if ((int)v24 >= 1)
            {
              uint64_t v35 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * *(int *)((char *)v71 + v35)), *(float *)((char *)v25 + v35));
                v35 += 4;
              }
              while (4 * v24 != v35);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v12 + 16 * v27), v63);
          BOOL v14 = v56;
          uint64_t v15 = v59;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v60 + 8));
    BOOL v10 = v75;
  }
  operator delete(v10);
  operator delete(v80);
}

void sub_1B657A98C(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)a1;
  int v57 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  int v69 = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v60 = v57[1];
  uint64_t v52 = v57[2];
  uint64_t v61 = *(void *)(*(void *)(v60 + 456) + 8 * a5);
  if (*(unsigned char *)(v61 + 12)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *v6 == 0;
  }
  BOOL v56 = v7;
  int v59 = *(void **)(v57[60] + 8 * a5);
  uint64_t v8 = *(void **)(*(void *)(v52 + 456) + 8 * a5);
  unsigned int v9 = *(_DWORD *)(v60 + 20);
  int v76 = &v79;
  int v77 = 2 * v9;
  int v78 = 32;
  int32x4_t v80 = 0;
  if (2 * v9 >= 0x21)
  {
    int32x4_t v80 = (uint64_t *)operator new(8 * v9);
    int v76 = v80;
    int v78 = 2 * v9;
    unsigned int v9 = *(_DWORD *)(v60 + 20);
  }
  BOOL v10 = 0;
  int v71 = &v74;
  unsigned int v72 = v9;
  int v73 = 16;
  int v75 = 0;
  if (v9 >= 0x11)
  {
    BOOL v10 = operator new(4 * v9);
    int v75 = v10;
    int v71 = (uint64_t *)v10;
    int v73 = v9;
  }
  v64[0] = v60;
  v64[1] = v52;
  if (*(int *)(v60 + 8) >= 1)
  {
    uint64_t v53 = v8;
    uint64_t v11 = 0;
    uint64_t v13 = v57;
    unsigned int v12 = a3;
    BOOL v14 = v56;
    uint64_t v15 = v59;
    do
    {
      int v62 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v62 != -1)
      {
        uint64_t v16 = *(int *)(*(void *)(v61 + 96) + 4 * v11);
        uint64_t v17 = (int *)(*(void *)(v61 + 144) + 4 * v16);
        uint64_t v18 = *(int *)(v53[12] + 4 * v62);
        uint64_t v19 = (int *)(v53[18] + 4 * v18);
        uint64_t v20 = *v19;
        uint64_t v21 = v53[21];
        if ((*(unsigned char *)(v21 + v20) & 1) == 0 && v14)
        {
          uint64_t v23 = (void *)(*a4 + 16 * v20);
          *uint64_t v23 = 0;
          v23[1] = 0;
          *(float32x4_t *)(*a4 + 16 * *v19) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * *v17), *(float32x4_t *)(*a4 + 16 * *v19));
        }
        else if (*(unsigned char *)(v21 + v20))
        {
          uint64_t v36 = v53[9];
          uint64_t v37 = *(unsigned __int16 *)(v36 + 2 * v62);
          if (*(_WORD *)(v36 + 2 * v62))
          {
            uint64_t v38 = 0;
            uint64_t v54 = *(void *)(v61 + 144) + 4 * v16;
            uint64_t v55 = *(void *)(v61 + 168) + v16;
            uint64_t v39 = v21 + v18;
            do
            {
              uint64_t v40 = *(unsigned __int16 *)(v15[5] + 2 * (v38 + *(int *)(*(void *)(v15[4] + 96) + 4 * v62)));
              uint64_t v41 = v17[v40];
              uint64_t v42 = v19[v38];
              float v43 = (void *)(*a4 + 16 * v42);
              *float v43 = 0;
              v43[1] = 0;
              if (!v14 && (*(unsigned char *)(v39 + v38) & 8) != 0)
              {
                uint64_t v44 = v39;
                sub_1B6E1066C((void *)v61, v11, v40, v70);
                if ((*(unsigned char *)(v55 + v40) & 0x10) != 0)
                {
                  if ((*(unsigned char *)(v55 + v40) & 0x20) != 0)
                  {
                    unsigned int v49 = v40 == 0;
                    uint64_t v47 = v59;
                    int v48 = v11;
                  }
                  else
                  {
                    uint64_t v47 = v59;
                    int v48 = v11;
                    unsigned int v49 = v40;
                  }
                  float v50 = sub_1B6E24EC4(v47, v48, v49, v62);
                  float v51 = 1.0 - v50;
                  float v46 = v50 + (float)((float)(1.0 - v50) * 0.75);
                  float v45 = v51 * 0.125;
                }
                else
                {
                  float v45 = 0.125;
                  float v46 = 0.75;
                }
                uint64_t v13 = v57;
                unsigned int v12 = a3;
                BOOL v14 = v56;
                uint64_t v15 = v59;
                uint64_t v39 = v44;
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * SLODWORD(v70[0])), v45);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * SHIDWORD(v70[0])), v45);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v41), v46);
                uint64_t v17 = (int *)v54;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v42) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * v41), *(float32x4_t *)(*a4 + 16 * v42));
              }
              ++v38;
            }
            while (v37 != v38);
          }
        }
        else
        {
          uint64_t v24 = *(int *)(*(void *)(v60 + 336) + 8 * v11);
          float v63 = 0.0;
          uint64_t v25 = v76;
          uint64_t v26 = (_DWORD *)v76 + v24;
          v70[0] = &v63;
          v70[1] = v76;
          void v70[2] = v26;
          memset(&v70[3], 0, 13);
          int v65 = v11;
          int v66 = v62;
          int v67 = *(_DWORD *)(*(void *)(v64[0] + 336) + 8 * v11);
          int v68 = *(_DWORD *)(*(void *)(v64[0] + 264) + 8 * v11);
          sub_1B6570C90(&v69, (uint64_t)v64, (uint64_t)v70, (*(unsigned __int16 *)(*(void *)(v60 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(void *)(v52 + 432) + 2 * v62) >> 7) & 0xF);
          uint64_t v13 = v57;
          uint64_t v27 = *v17;
          uint64_t v28 = *v19;
          uint64_t v29 = (void *)(*a4 + 16 * v28);
          *uint64_t v29 = 0;
          v29[1] = 0;
          if (SLODWORD(v70[4]) >= 1)
          {
            uint64_t v30 = *(void *)(v60 + 264);
            uint64_t v31 = *(unsigned int *)(v30 + 8 * v11);
            if ((int)v31 >= 1)
            {
              uint64_t v32 = (int *)(*(void *)(v60 + 288) + 4 * *(int *)(v30 + ((8 * v11) | 4)));
              do
              {
                uint64_t v33 = *v32++;
                uint64_t v34 = *(int *)(v53[12] + 4 * *(int *)(v57[21] + 4 * v33));
                LODWORD(v33) = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * v34), *(float *)&v33);
                --v31;
              }
              while (v31);
            }
          }
          unsigned int v12 = a3;
          if (SHIDWORD(v70[3]) >= 1)
          {
            sub_1B6E10910((void *)v61, v11, v71);
            uint64_t v13 = v57;
            unsigned int v12 = a3;
            if ((int)v24 >= 1)
            {
              uint64_t v35 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * *(int *)((char *)v71 + v35)), *(float *)((char *)v25 + v35));
                v35 += 4;
              }
              while (4 * v24 != v35);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v12 + 16 * v27), v63);
          BOOL v14 = v56;
          uint64_t v15 = v59;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v60 + 8));
    BOOL v10 = v75;
  }
  operator delete(v10);
  operator delete(v80);
}

void sub_1B657AEF8(uint64_t a1, int a2, void *a3, void *a4, int a5)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void **)(*(void *)(*(void *)a1 + 64) + 8 * (a2 - 1));
  uint64_t v7 = v6[2];
  float v51 = v6;
  uint64_t v52 = v6[1];
  uint64_t v8 = v6[60];
  uint64_t v9 = *(void *)(v7 + 456);
  uint64_t v53 = *(void *)(*(void *)(v52 + 456) + 8 * a5);
  if (*(unsigned char *)(v53 + 12)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = **(_DWORD **)a1 == 0;
  }
  BOOL v46 = v10;
  uint64_t v11 = *(void **)(v8 + 8 * a5);
  float v45 = *(void **)(v9 + 8 * a5);
  unsigned int v12 = *(_DWORD *)(v52 + 20);
  uint64_t v60 = &v63;
  int v61 = 2 * v12;
  int v62 = 32;
  int v64 = 0;
  if (2 * v12 >= 0x21)
  {
    int v64 = operator new(8 * v12);
    uint64_t v60 = (uint64_t *)v64;
    int v62 = 2 * v12;
    unsigned int v12 = *(_DWORD *)(v52 + 20);
  }
  uint64_t v13 = 0;
  uint64_t v55 = &v58;
  unsigned int v56 = v12;
  int v57 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    uint64_t v13 = operator new(4 * v12);
    __p = v13;
    uint64_t v55 = (uint64_t *)v13;
    int v57 = v12;
  }
  if (*(int *)(v52 + 8) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a3;
    BOOL v16 = v46;
    while (1)
    {
      uint64_t v17 = *(int *)(v51[30] + 4 * v14);
      if (v17 != -1)
      {
        uint64_t v18 = *(int *)(*(void *)(v53 + 96) + 4 * v14);
        uint64_t v19 = (int *)(*(void *)(v53 + 144) + 4 * v18);
        uint64_t v20 = *(int *)(v45[12] + 4 * v17);
        uint64_t v21 = (int *)(v45[18] + 4 * v20);
        uint64_t v22 = *v21;
        uint64_t v23 = v45[21];
        if ((*(unsigned char *)(v23 + v22) & 1) == 0 && v16)
        {
          uint64_t v25 = (void *)(*a4 + 16 * v22);
          *uint64_t v25 = 0;
          v25[1] = 0;
          uint64_t v26 = (float32x4_t *)(*a4 + 16 * *v21);
          int v27 = *v19;
        }
        else
        {
          if (*(unsigned char *)(v23 + v22))
          {
            uint64_t v29 = v45[9];
            uint64_t v30 = *(unsigned __int16 *)(v29 + 2 * v17);
            if (*(_WORD *)(v29 + 2 * v17))
            {
              uint64_t v31 = 0;
              uint64_t v49 = *(void *)(v53 + 168) + v18;
              uint64_t v50 = *(unsigned __int16 *)(v29 + 2 * v17);
              uint64_t v32 = v23 + v20;
              uint64_t v48 = v32;
              do
              {
                uint64_t v33 = *(unsigned __int16 *)(v11[5] + 2 * (v31 + *(int *)(*(void *)(v11[4] + 96) + 4 * v17)));
                uint64_t v34 = v19[v33];
                uint64_t v35 = v21[v31];
                uint64_t v36 = (void *)(*a4 + 16 * v35);
                *uint64_t v36 = 0;
                v36[1] = 0;
                if (!v16 && (*(unsigned char *)(v32 + v31) & 8) != 0)
                {
                  sub_1B6E1066C((void *)v53, v14, v33, v54);
                  if ((*(unsigned char *)(v49 + v33) & 0x10) != 0)
                  {
                    if ((*(unsigned char *)(v49 + v33) & 0x20) != 0)
                    {
                      unsigned int v41 = v33 == 0;
                      uint64_t v39 = v11;
                      int v40 = v14;
                    }
                    else
                    {
                      uint64_t v39 = v11;
                      int v40 = v14;
                      unsigned int v41 = v33;
                    }
                    float v42 = sub_1B6E24EC4(v39, v40, v41, v17);
                    float v43 = 1.0 - v42;
                    float v38 = v42 + (float)((float)(1.0 - v42) * 0.75);
                    float v37 = v43 * 0.125;
                  }
                  else
                  {
                    float v37 = 0.125;
                    float v38 = 0.75;
                  }
                  uint64_t v15 = a3;
                  uint64_t v32 = v48;
                  BOOL v16 = v46;
                  uint64_t v30 = v50;
                  uint64_t v44 = v54[1];
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v54[0]), v37);
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v44), v37);
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v34), v38);
                }
                else
                {
                  *(float32x4_t *)(*a4 + 16 * v35) = vaddq_f32(*(float32x4_t *)(*v15 + 16 * v34), *(float32x4_t *)(*a4 + 16 * v35));
                }
                ++v31;
              }
              while (v30 != v31);
            }
            goto LABEL_19;
          }
          int v27 = *v19;
          uint64_t v28 = (void *)(*a4 + 16 * v22);
          *uint64_t v28 = 0;
          v28[1] = 0;
          uint64_t v26 = (float32x4_t *)(*a4 + 16 * v22);
        }
        *uint64_t v26 = vaddq_f32(*(float32x4_t *)(*v15 + 16 * v27), *v26);
      }
LABEL_19:
      if (++v14 >= *(int *)(v52 + 8))
      {
        uint64_t v13 = __p;
        break;
      }
    }
  }
  operator delete(v13);
  operator delete(v64);
}

uint64_t sub_1B657B2A4(uint64_t *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v9 = v8 - v2;
  if (v9 >> 5 > v4) {
    unint64_t v4 = v9 >> 5;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  v16[4] = v7;
  uint64_t v11 = (char *)sub_1B6470904(v7, v10);
  unsigned int v12 = &v11[64 * v3];
  v16[0] = v11;
  v16[1] = v12;
  v16[3] = &v11[64 * v13];
  char *v12 = *a2;
  *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 2) = 0;
  *((_OWORD *)v12 + 1) = *((_OWORD *)a2 + 1);
  *((void *)v12 + 4) = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)v12 + 6) = 0;
  *((void *)v12 + 7) = 0;
  *((void *)v12 + 5) = 0;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v12 + 7) = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  v16[2] = v12 + 64;
  sub_1B657B3A4(a1, v16);
  uint64_t v14 = a1[1];
  sub_1B657B4A0((uint64_t)v16);
  return v14;
}

void sub_1B657B3A4(uint64_t *a1, void *a2)
{
  sub_1B657B41C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 sub_1B657B41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(unsigned char *)(v8 - 64) = *(unsigned char *)(a3 + v7 - 64);
      *(_DWORD *)(v8 - 56) = *(_DWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v8 - 32) = *(void *)(a3 + v7 - 32);
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_1B657B4A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    sub_1B657B4F0((void *)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B657B4F0(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

void *sub_1B657B548(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B657B5C8(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

char *sub_1B657B5C8(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  __n128 result = (char *)sub_1B6428204((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_1B657B618(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B657B5C8(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *uint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_1B657B6B0(v6, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void *sub_1B657B6B0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1B657B5C8(result, a4);
    __n128 result = (void *)v6[1];
    while (a2 != a3)
    {
      uint64_t v7 = sub_1B6581104(result, a2);
      a2 += 24;
      __n128 result = v7 + 3;
    }
    v6[1] = result;
  }
  return result;
}

uint64_t sub_1B657B714(uint64_t a1)
{
  uint64_t v8 = (void **)(a1 + 168);
  sub_1B639030C(&v8);
  uint64_t v8 = (void **)(a1 + 144);
  sub_1B639030C(&v8);
  uint64_t v8 = (void **)(a1 + 120);
  sub_1B639030C(&v8);
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  size_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_1B657B7C0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  uint64_t v11 = sub_1B657CAE0(a1, a2, a4, *(void *)(a1 + 80), a6, (uint64_t)a6, a7, a8);
  if (!v11) {
    return;
  }
  uint64_t v19 = v11;
  if (sub_1B641D56C(v11, v12, v13, v14, v15, v16, v17, v18)) {
    return;
  }
  uint64_t v33 = sub_1B641D478(v19, v20, v21, v22, v23, v24, v25, v26);
  __int16 v35 = v34;
  uint64_t v37 = v36;
  if (*(unsigned char *)(a1 + 88)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Position sources must use the 'vertex' interpolation mode", v27, v28, v29, v30, v31, v32, (uint64_t)"_interpolationMode == kCFXSubdivPrimvarDataInterpolationModeInterpolateVertex");
  }
  unsigned int v38 = *(unsigned __int8 *)(a5 + 3);
  if (v38 >= 2)
  {
    if (v38 != 2) {
      return;
    }
    if (v37 != *(_DWORD *)(*(void *)(*(void *)(*a3 + 88)
                                      + 24 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                          + 8))
      sub_1B63F2F54(17, @"Assertion '%s' failed. Number of normals at limit surface is not equal to number of vertex positions", v27, v28, v29, v30, v31, v32, (uint64_t)"subdividedDataCount == refiner.GetLevel(refiner.GetMaxLevel()).GetNumVertices()");
    BOOL v46 = (const UInt8 *)malloc_type_malloc(12 * v37, 0x100004052888210uLL);
    uint64_t v106 = *(void *)(a1 + 48);
    uint64_t v107 = *(void *)(a1 + 56);
    uint64_t v108 = (void *)(a1 + 48);
    uint64_t v146 = 0;
    char v147 = 0;
    uint64_t v148 = 0;
    int64_t v109 = v107 - v106;
    if (v107 == v106)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      __p = 0;
      long long v141 = 0;
      uint64_t v142 = 0;
    }
    else
    {
      sub_1B646FFE4(&v146, v109 >> 3);
      uint64_t v110 = v147;
      bzero(v147, v109);
      char v147 = &v110[v109];
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      sub_1B646FFE4(&v143, v109 >> 3);
      uint64_t v111 = (char *)v144;
      bzero(v144, v109);
      uint64_t v144 = &v111[v109];
      __p = 0;
      long long v141 = 0;
      uint64_t v142 = 0;
      sub_1B646FFE4(&__p, v109 >> 3);
      uint64_t v112 = (char *)v141;
      bzero(v141, v109);
      long long v141 = &v112[v109];
    }
    if (((*(void *)(*(void *)(*(void *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 368)
         - *(void *)(*(void *)(*(void *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 360)) & 0x3FFFFFFFCLL) != 0)
    {
      int v113 = *(_DWORD *)*a3;
      if (v113)
      {
        if (v113 == 2)
        {
          sub_1B657D304(a3, v108, &v146, &v143, &__p);
        }
        else if (v113 == 1)
        {
          sub_1B657CDB0(a3, v108, &v146, &v143, &__p);
        }
      }
      else
      {
        sub_1B657D858((uint64_t)a3, v108, &v146, &v143, &__p);
      }
    }
    else
    {
      sub_1B6E240DC(4, (uint64_t)"Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.", v100, v101, v102, v103, v104, v105, v131);
    }
    if (v37)
    {
      uint64_t v114 = v37;
      do
      {
        sub_1B63F2F54(16, @"Unreachable code: Does not make sense", v100, v101, v102, v103, v104, v105, v131);
        --v114;
      }
      while (v114);
    }
    if (__p)
    {
      long long v141 = __p;
      operator delete(__p);
    }
    if (v143)
    {
      uint64_t v144 = v143;
      operator delete(v143);
    }
    if (v146)
    {
      char v147 = v146;
      operator delete(v146);
    }
LABEL_42:
    if (!v46) {
      return;
    }
    goto LABEL_43;
  }
  uint64_t v132 = v37;
  int8x16_t v133 = v8;
  size_t v39 = *(int *)(*a2 + 8);
  BOOL v46 = (const UInt8 *)malloc_type_calloc(v39, 0xCuLL, 0x100004052888210uLL);
  uint64_t v134 = *(unsigned int *)*a2;
  if ((int)v134 >= 1)
  {
    for (uint64_t i = 0; i != v134; ++i)
    {
      float v51 = (int *)(*(void *)(*a2 + 48) + 4 * *(int *)(*(void *)(*a2 + 24) + 8 * i + 4));
      int v52 = v51[1];
      int v53 = v51[2];
      int v54 = v51[3];
      *(double *)v55.i64 = sub_1B65D6198(v35, (const float *)(v33 + *v51 * (unint64_t)HIBYTE(v35)), v40, v41, v42, v43, v44, v45, v47, v48, v49);
      float32x4_t v139 = v55;
      *(double *)v64.i64 = sub_1B65D6198(v35, (const float *)(v33 + v52 * (unint64_t)HIBYTE(v35)), v56, v57, v58, v59, v60, v61, v55, v62, v63);
      float32x4_t v138 = v64;
      *(double *)v73.i64 = sub_1B65D6198(v35, (const float *)(v33 + v53 * (unint64_t)HIBYTE(v35)), v65, v66, v67, v68, v69, v70, v64, v71, v72);
      float32x4_t v137 = v73;
      *(double *)v82.i64 = sub_1B65D6198(v35, (const float *)(v33 + v54 * (unint64_t)HIBYTE(v35)), v74, v75, v76, v77, v78, v79, v73, v80, v81);
      if (*(unsigned char *)(a5 + 3))
      {
        float32x4_t v83 = vsubq_f32(v137, v139);
        float32x4_t v84 = vsubq_f32(v82, v138);
        float32x4_t v85 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), (int8x16_t)v84, 0xCuLL), vnegq_f32(v83)), v84, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL));
        float32x4_t v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL);
        int32x4_t v87 = (int32x4_t)vmulq_f32(v85, v85);
      }
      else
      {
        float32x4_t v88 = vsubq_f32(v138, v139);
        float32x4_t v89 = vsubq_f32(v137, v139);
        float32x4_t v90 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), vnegq_f32(v88)), v89, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL));
        float32x4_t v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL);
        int32x4_t v87 = (int32x4_t)vmulq_f32(v90, v90);
      }
      unsigned __int32 v91 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v87, 2), *(float32x2_t *)v87.i8)).u32[0];
      float32x2_t v92 = vrsqrte_f32((float32x2_t)v91);
      float32x2_t v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)v91, vmul_f32(v92, v92)));
      uint64_t v94 = 0;
      float32x4_t v47 = vmulq_n_f32(v86, vmul_f32(v93, vrsqrts_f32((float32x2_t)v91, vmul_f32(v93, v93))).f32[0]);
      float v48 = v47.f32[2];
      do
      {
        int v95 = 3 * v51[v94];
        *(float32x2_t *)&v46[12 * v51[v94]] = vadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)&v46[12 * v51[v94]]);
        v95 += 2;
        float v49 = v47.f32[2] + *(float *)&v46[4 * v95];
        *(float *)&v46[4 * v95] = v49;
        ++v94;
      }
      while (v94 != 4);
    }
  }
  if ((int)v39 < 1)
  {
    uint64_t v37 = v132;
    uint64_t v8 = v133;
    goto LABEL_42;
  }
  uint64_t v96 = v46 + 8;
  uint64_t v37 = v132;
  uint64_t v8 = v133;
  do
  {
    v47.i64[0] = *((void *)v96 - 1);
    v47.i32[2] = *v96;
    int32x4_t v97 = (int32x4_t)vmulq_f32(v47, v47);
    v97.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), vadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1))).u32[0];
    float32x2_t v98 = vrsqrte_f32((float32x2_t)v97.u32[0]);
    float32x2_t v99 = vmul_f32(v98, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v98, v98)));
    float32x4_t v47 = vmulq_n_f32(v47, vmul_f32(v99, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v99, v99))).f32[0]);
    *((void *)v96 - 1) = v47.i64[0];
    *uint64_t v96 = v47.i32[2];
    v96 += 3;
    --v39;
  }
  while (v39);
LABEL_43:
  CFDataRef v115 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v46, 12 * v37, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  uint64_t v117 = sub_1B641D00C(1, v115, 1, 3, v37, 12, 0, v116);
  CFRelease(v115);
  unint64_t v118 = (unint64_t)v8[2];
  uint64_t v119 = v8[1];
  if ((unint64_t)v119 >= v118)
  {
    unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (unsigned char *)*v8) >> 3);
    unint64_t v122 = v121 + 1;
    if (v121 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - (void)*v8) >> 3);
    if (2 * v123 > v122) {
      unint64_t v122 = 2 * v123;
    }
    if (v123 >= 0x555555555555555) {
      unint64_t v124 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v124 = v122;
    }
    if (v124) {
      uint64_t v125 = (char *)sub_1B6428204((uint64_t)(v8 + 2), v124);
    }
    else {
      uint64_t v125 = 0;
    }
    int v126 = &v125[24 * v121];
    size_t v127 = &v125[24 * v124];
    *(void *)int v126 = 0;
    *((void *)v126 + 1) = 0;
    *((void *)v126 + 2) = v117;
    uint64_t v120 = v126 + 24;
    int8x16_t v129 = (char *)*v8;
    uint64_t v128 = (char *)v8[1];
    if (v128 != *v8)
    {
      do
      {
        long long v130 = *(_OWORD *)(v128 - 24);
        *((void *)v126 - 1) = *((void *)v128 - 1);
        *(_OWORD *)(v126 - 24) = v130;
        v126 -= 24;
        v128 -= 24;
      }
      while (v128 != v129);
      uint64_t v128 = (char *)*v8;
    }
    *uint64_t v8 = v126;
    v8[1] = v120;
    v8[2] = v127;
    if (v128) {
      operator delete(v128);
    }
  }
  else
  {
    void *v119 = 0;
    v119[1] = 0;
    uint64_t v120 = v119 + 3;
    v119[2] = v117;
  }
  v8[1] = v120;
}

void sub_1B657BDFC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  uint64_t v11 = sub_1B657EFD0(a1, a2, a4, *(void *)(a1 + 80), a6, (uint64_t)a6, a7, a8);
  if (!v11) {
    return;
  }
  uint64_t v19 = v11;
  if (sub_1B641D56C(v11, v12, v13, v14, v15, v16, v17, v18)) {
    return;
  }
  uint64_t v33 = sub_1B641D478(v19, v20, v21, v22, v23, v24, v25, v26);
  __int16 v35 = v34;
  uint64_t v37 = v36;
  if (*(unsigned char *)(a1 + 88)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Position sources must use the 'vertex' interpolation mode", v27, v28, v29, v30, v31, v32, (uint64_t)"_interpolationMode == kCFXSubdivPrimvarDataInterpolationModeInterpolateVertex");
  }
  unsigned int v38 = *(unsigned __int8 *)(a5 + 3);
  if (v38 >= 2)
  {
    if (v38 != 2) {
      return;
    }
    if (v37 != *(_DWORD *)(*(void *)(*(void *)(*a3 + 88)
                                      + 24 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                          + 8))
      sub_1B63F2F54(17, @"Assertion '%s' failed. Number of normals at limit surface is not equal to number of vertex positions", v27, v28, v29, v30, v31, v32, (uint64_t)"subdividedDataCount == refiner.GetLevel(refiner.GetMaxLevel()).GetNumVertices()");
    BOOL v46 = (const UInt8 *)malloc_type_malloc(12 * v37, 0x100004052888210uLL);
    uint64_t v106 = *(void *)(a1 + 48);
    uint64_t v107 = *(void *)(a1 + 56);
    uint64_t v108 = (void *)(a1 + 48);
    uint64_t v157 = 0;
    uint64_t v158 = 0;
    uint64_t v159 = 0;
    int64_t v109 = v107 - v106;
    if (v107 == v106)
    {
      char v154 = 0;
      uint64_t v155 = 0;
      uint64_t v156 = 0;
      __p = 0;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
    }
    else
    {
      sub_1B657F2A0(&v157, v109 >> 4);
      uint64_t v110 = v158;
      bzero(v158, v109);
      uint64_t v158 = &v110[v109];
      char v154 = 0;
      uint64_t v155 = 0;
      uint64_t v156 = 0;
      sub_1B657F2A0(&v154, v109 >> 4);
      uint64_t v111 = (char *)v155;
      bzero(v155, v109);
      uint64_t v155 = &v111[v109];
      __p = 0;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      sub_1B657F2A0(&__p, v109 >> 4);
      uint64_t v112 = (char *)v152;
      bzero(v152, v109);
      uint64_t v152 = &v112[v109];
    }
    if (((*(void *)(*(void *)(*(void *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 368)
         - *(void *)(*(void *)(*(void *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 360)) & 0x3FFFFFFFCLL) != 0)
    {
      int v113 = *(_DWORD *)*a3;
      if (v113)
      {
        if (v113 == 2)
        {
          sub_1B657F824(a3, v108, &v157, &v154, &__p);
        }
        else if (v113 == 1)
        {
          sub_1B657F2E0(a3, v108, &v157, &v154, &__p);
        }
      }
      else
      {
        sub_1B657FD68((uint64_t)a3, v108, &v157, &v154, &__p);
      }
    }
    else
    {
      sub_1B6E240DC(4, (uint64_t)"Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.", v100, v101, v102, v103, v104, v105, v143);
    }
    uint64_t v114 = __p;
    if (v37)
    {
      CFDataRef v115 = (float32x4_t *)v154;
      uint64_t v116 = v46 + 8;
      uint64_t v117 = v37;
      unint64_t v118 = (float32x4_t *)__p;
      do
      {
        float32x4_t v119 = *v115++;
        float32x4_t v120 = v119;
        float32x4_t v121 = *v118++;
        float32x4_t v122 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v121, (int32x4_t)v121), (int8x16_t)v121, 0xCuLL), vnegq_f32(v120)), v121, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v120, (int32x4_t)v120), (int8x16_t)v120, 0xCuLL));
        int32x4_t v123 = (int32x4_t)vmulq_f32(v122, v122);
        v123.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v123, 2), *(float32x2_t *)v123.i8)).u32[0];
        float32x2_t v124 = vrsqrte_f32((float32x2_t)v123.u32[0]);
        float32x2_t v125 = vmul_f32(v124, vrsqrts_f32((float32x2_t)v123.u32[0], vmul_f32(v124, v124)));
        float32x4_t v126 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v122, (int32x4_t)v122), (int8x16_t)v122, 0xCuLL), vmul_f32(v125, vrsqrts_f32((float32x2_t)v123.u32[0], vmul_f32(v125, v125))).f32[0]);
        *((void *)v116 - 1) = v126.i64[0];
        _DWORD *v116 = v126.i32[2];
        v116 += 3;
        --v117;
      }
      while (v117);
    }
    else if (!__p)
    {
LABEL_39:
      if (v154)
      {
        uint64_t v155 = v154;
        operator delete(v154);
      }
      if (v157)
      {
        uint64_t v158 = v157;
        operator delete(v157);
      }
LABEL_43:
      if (!v46) {
        return;
      }
      goto LABEL_44;
    }
    uint64_t v152 = v114;
    operator delete(v114);
    goto LABEL_39;
  }
  uint64_t v144 = v8;
  size_t v39 = *(int *)(*a2 + 8);
  BOOL v46 = (const UInt8 *)malloc_type_calloc(v39, 0xCuLL, 0x100004052888210uLL);
  uint64_t v145 = *(unsigned int *)*a2;
  if ((int)v145 >= 1)
  {
    for (uint64_t i = 0; i != v145; ++i)
    {
      float v51 = (int *)(*(void *)(*a2 + 48) + 4 * *(int *)(*(void *)(*a2 + 24) + 8 * i + 4));
      int v52 = v51[1];
      int v53 = v51[2];
      int v54 = v51[3];
      *(double *)v55.i64 = sub_1B65D6198(v35, (const float *)(v33 + *v51 * (unint64_t)HIBYTE(v35)), v40, v41, v42, v43, v44, v45, v47, v48, v49);
      float32x4_t v150 = v55;
      *(double *)v64.i64 = sub_1B65D6198(v35, (const float *)(v33 + v52 * (unint64_t)HIBYTE(v35)), v56, v57, v58, v59, v60, v61, v55, v62, v63);
      float32x4_t v149 = v64;
      *(double *)v73.i64 = sub_1B65D6198(v35, (const float *)(v33 + v53 * (unint64_t)HIBYTE(v35)), v65, v66, v67, v68, v69, v70, v64, v71, v72);
      float32x4_t v148 = v73;
      *(double *)v82.i64 = sub_1B65D6198(v35, (const float *)(v33 + v54 * (unint64_t)HIBYTE(v35)), v74, v75, v76, v77, v78, v79, v73, v80, v81);
      if (*(unsigned char *)(a5 + 3))
      {
        float32x4_t v83 = vsubq_f32(v148, v150);
        float32x4_t v84 = vsubq_f32(v82, v149);
        float32x4_t v85 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), (int8x16_t)v84, 0xCuLL), vnegq_f32(v83)), v84, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL));
        float32x4_t v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL);
        int32x4_t v87 = (int32x4_t)vmulq_f32(v85, v85);
      }
      else
      {
        float32x4_t v88 = vsubq_f32(v149, v150);
        float32x4_t v89 = vsubq_f32(v148, v150);
        float32x4_t v90 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), vnegq_f32(v88)), v89, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL));
        float32x4_t v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL);
        int32x4_t v87 = (int32x4_t)vmulq_f32(v90, v90);
      }
      unsigned __int32 v91 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v87, 2), *(float32x2_t *)v87.i8)).u32[0];
      float32x2_t v92 = vrsqrte_f32((float32x2_t)v91);
      float32x2_t v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)v91, vmul_f32(v92, v92)));
      uint64_t v94 = 0;
      float32x4_t v47 = vmulq_n_f32(v86, vmul_f32(v93, vrsqrts_f32((float32x2_t)v91, vmul_f32(v93, v93))).f32[0]);
      float v48 = v47.f32[2];
      do
      {
        int v95 = 3 * v51[v94];
        *(float32x2_t *)&v46[12 * v51[v94]] = vadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)&v46[12 * v51[v94]]);
        v95 += 2;
        float v49 = v47.f32[2] + *(float *)&v46[4 * v95];
        *(float *)&v46[4 * v95] = v49;
        ++v94;
      }
      while (v94 != 4);
    }
  }
  if ((int)v39 < 1)
  {
    uint64_t v8 = v144;
    goto LABEL_43;
  }
  uint64_t v96 = v46 + 8;
  uint64_t v8 = v144;
  do
  {
    v47.i64[0] = *((void *)v96 - 1);
    v47.i32[2] = *v96;
    int32x4_t v97 = (int32x4_t)vmulq_f32(v47, v47);
    v97.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), vadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1))).u32[0];
    float32x2_t v98 = vrsqrte_f32((float32x2_t)v97.u32[0]);
    float32x2_t v99 = vmul_f32(v98, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v98, v98)));
    float32x4_t v47 = vmulq_n_f32(v47, vmul_f32(v99, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v99, v99))).f32[0]);
    *((void *)v96 - 1) = v47.i64[0];
    *uint64_t v96 = v47.i32[2];
    v96 += 3;
    --v39;
  }
  while (v39);
LABEL_44:
  CFDataRef v127 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v46, 12 * v37, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  uint64_t v129 = sub_1B641D00C(1, v127, 1, 3, v37, 12, 0, v128);
  CFRelease(v127);
  unint64_t v130 = (unint64_t)v8[2];
  uint64_t v131 = v8[1];
  if ((unint64_t)v131 >= v130)
  {
    unint64_t v133 = 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (unsigned char *)*v8) >> 3);
    unint64_t v134 = v133 + 1;
    if (v133 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130 - (void)*v8) >> 3);
    if (2 * v135 > v134) {
      unint64_t v134 = 2 * v135;
    }
    if (v135 >= 0x555555555555555) {
      unint64_t v136 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v136 = v134;
    }
    if (v136) {
      float32x4_t v137 = (char *)sub_1B6428204((uint64_t)(v8 + 2), v136);
    }
    else {
      float32x4_t v137 = 0;
    }
    float32x4_t v138 = &v137[24 * v133];
    float32x4_t v139 = &v137[24 * v136];
    *(void *)float32x4_t v138 = 0;
    *((void *)v138 + 1) = 0;
    *((void *)v138 + 2) = v129;
    uint64_t v132 = v138 + 24;
    long long v141 = (char *)*v8;
    long long v140 = (char *)v8[1];
    if (v140 != *v8)
    {
      do
      {
        long long v142 = *(_OWORD *)(v140 - 24);
        *((void *)v138 - 1) = *((void *)v140 - 1);
        *(_OWORD *)(v138 - 24) = v142;
        v138 -= 24;
        v140 -= 24;
      }
      while (v140 != v141);
      long long v140 = (char *)*v8;
    }
    *uint64_t v8 = v138;
    v8[1] = v132;
    v8[2] = v139;
    if (v140) {
      operator delete(v140);
    }
  }
  else
  {
    *uint64_t v131 = 0;
    v131[1] = 0;
    uint64_t v132 = v131 + 3;
    v131[2] = v129;
  }
  v8[1] = v132;
}

void sub_1B657C4A4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  uint64_t v11 = sub_1B6580080(a1, a2, a4, *(void *)(a1 + 80), a6, (uint64_t)a6, a7, a8);
  if (!v11) {
    return;
  }
  uint64_t v19 = v11;
  if (sub_1B641D56C(v11, v12, v13, v14, v15, v16, v17, v18)) {
    return;
  }
  uint64_t v33 = sub_1B641D478(v19, v20, v21, v22, v23, v24, v25, v26);
  __int16 v35 = v34;
  uint64_t v37 = v36;
  if (*(unsigned char *)(a1 + 88)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Position sources must use the 'vertex' interpolation mode", v27, v28, v29, v30, v31, v32, (uint64_t)"_interpolationMode == kCFXSubdivPrimvarDataInterpolationModeInterpolateVertex");
  }
  unsigned int v38 = *(unsigned __int8 *)(a5 + 3);
  if (v38 >= 2)
  {
    if (v38 != 2) {
      return;
    }
    if (v37 != *(_DWORD *)(*(void *)(*(void *)(*a3 + 88)
                                      + 24 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                          + 8))
      sub_1B63F2F54(17, @"Assertion '%s' failed. Number of normals at limit surface is not equal to number of vertex positions", v27, v28, v29, v30, v31, v32, (uint64_t)"subdividedDataCount == refiner.GetLevel(refiner.GetMaxLevel()).GetNumVertices()");
    BOOL v46 = (const UInt8 *)malloc_type_malloc(12 * v37, 0x100004052888210uLL);
    uint64_t v106 = *(void *)(a1 + 48);
    uint64_t v107 = *(void *)(a1 + 56);
    uint64_t v108 = (void *)(a1 + 48);
    uint64_t v146 = 0;
    char v147 = 0;
    uint64_t v148 = 0;
    int64_t v109 = v107 - v106;
    if (v107 == v106)
    {
      char v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      __p = 0;
      long long v141 = 0;
      uint64_t v142 = 0;
    }
    else
    {
      sub_1B657F2A0(&v146, v109 >> 4);
      uint64_t v110 = v147;
      bzero(v147, v109);
      char v147 = &v110[v109];
      char v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      sub_1B657F2A0(&v143, v109 >> 4);
      uint64_t v111 = (char *)v144;
      bzero(v144, v109);
      uint64_t v144 = &v111[v109];
      __p = 0;
      long long v141 = 0;
      uint64_t v142 = 0;
      sub_1B657F2A0(&__p, v109 >> 4);
      uint64_t v112 = (char *)v141;
      bzero(v141, v109);
      long long v141 = &v112[v109];
    }
    if (((*(void *)(*(void *)(*(void *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 368)
         - *(void *)(*(void *)(*(void *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 360)) & 0x3FFFFFFFCLL) != 0)
    {
      int v113 = *(_DWORD *)*a3;
      if (v113)
      {
        if (v113 == 2)
        {
          sub_1B6580898(a3, v108, &v146, &v143, &__p);
        }
        else if (v113 == 1)
        {
          sub_1B658034C(a3, v108, &v146, &v143, &__p);
        }
      }
      else
      {
        sub_1B6580DE4((uint64_t)a3, v108, &v146, &v143, &__p);
      }
    }
    else
    {
      sub_1B6E240DC(4, (uint64_t)"Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.", v100, v101, v102, v103, v104, v105, v131);
    }
    if (v37)
    {
      uint64_t v114 = v37;
      do
      {
        sub_1B63F2F54(16, @"Unreachable code: Does not make sense", v100, v101, v102, v103, v104, v105, v131);
        --v114;
      }
      while (v114);
    }
    if (__p)
    {
      long long v141 = __p;
      operator delete(__p);
    }
    if (v143)
    {
      uint64_t v144 = v143;
      operator delete(v143);
    }
    if (v146)
    {
      char v147 = v146;
      operator delete(v146);
    }
LABEL_42:
    if (!v46) {
      return;
    }
    goto LABEL_43;
  }
  uint64_t v132 = v37;
  unint64_t v133 = v8;
  size_t v39 = *(int *)(*a2 + 8);
  BOOL v46 = (const UInt8 *)malloc_type_calloc(v39, 0xCuLL, 0x100004052888210uLL);
  uint64_t v134 = *(unsigned int *)*a2;
  if ((int)v134 >= 1)
  {
    for (uint64_t i = 0; i != v134; ++i)
    {
      float v51 = (int *)(*(void *)(*a2 + 48) + 4 * *(int *)(*(void *)(*a2 + 24) + 8 * i + 4));
      int v52 = v51[1];
      int v53 = v51[2];
      int v54 = v51[3];
      *(double *)v55.i64 = sub_1B65D6198(v35, (const float *)(v33 + *v51 * (unint64_t)HIBYTE(v35)), v40, v41, v42, v43, v44, v45, v47, v48, v49);
      float32x4_t v139 = v55;
      *(double *)v64.i64 = sub_1B65D6198(v35, (const float *)(v33 + v52 * (unint64_t)HIBYTE(v35)), v56, v57, v58, v59, v60, v61, v55, v62, v63);
      float32x4_t v138 = v64;
      *(double *)v73.i64 = sub_1B65D6198(v35, (const float *)(v33 + v53 * (unint64_t)HIBYTE(v35)), v65, v66, v67, v68, v69, v70, v64, v71, v72);
      float32x4_t v137 = v73;
      *(double *)v82.i64 = sub_1B65D6198(v35, (const float *)(v33 + v54 * (unint64_t)HIBYTE(v35)), v74, v75, v76, v77, v78, v79, v73, v80, v81);
      if (*(unsigned char *)(a5 + 3))
      {
        float32x4_t v83 = vsubq_f32(v137, v139);
        float32x4_t v84 = vsubq_f32(v82, v138);
        float32x4_t v85 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), (int8x16_t)v84, 0xCuLL), vnegq_f32(v83)), v84, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL));
        float32x4_t v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL);
        int32x4_t v87 = (int32x4_t)vmulq_f32(v85, v85);
      }
      else
      {
        float32x4_t v88 = vsubq_f32(v138, v139);
        float32x4_t v89 = vsubq_f32(v137, v139);
        float32x4_t v90 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), vnegq_f32(v88)), v89, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL));
        float32x4_t v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL);
        int32x4_t v87 = (int32x4_t)vmulq_f32(v90, v90);
      }
      unsigned __int32 v91 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v87, 2), *(float32x2_t *)v87.i8)).u32[0];
      float32x2_t v92 = vrsqrte_f32((float32x2_t)v91);
      float32x2_t v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)v91, vmul_f32(v92, v92)));
      uint64_t v94 = 0;
      float32x4_t v47 = vmulq_n_f32(v86, vmul_f32(v93, vrsqrts_f32((float32x2_t)v91, vmul_f32(v93, v93))).f32[0]);
      float v48 = v47.f32[2];
      do
      {
        int v95 = 3 * v51[v94];
        *(float32x2_t *)&v46[12 * v51[v94]] = vadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)&v46[12 * v51[v94]]);
        v95 += 2;
        float v49 = v47.f32[2] + *(float *)&v46[4 * v95];
        *(float *)&v46[4 * v95] = v49;
        ++v94;
      }
      while (v94 != 4);
    }
  }
  if ((int)v39 < 1)
  {
    uint64_t v37 = v132;
    uint64_t v8 = v133;
    goto LABEL_42;
  }
  uint64_t v96 = v46 + 8;
  uint64_t v37 = v132;
  uint64_t v8 = v133;
  do
  {
    v47.i64[0] = *((void *)v96 - 1);
    v47.i32[2] = *v96;
    int32x4_t v97 = (int32x4_t)vmulq_f32(v47, v47);
    v97.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), vadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1))).u32[0];
    float32x2_t v98 = vrsqrte_f32((float32x2_t)v97.u32[0]);
    float32x2_t v99 = vmul_f32(v98, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v98, v98)));
    float32x4_t v47 = vmulq_n_f32(v47, vmul_f32(v99, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v99, v99))).f32[0]);
    *((void *)v96 - 1) = v47.i64[0];
    *uint64_t v96 = v47.i32[2];
    v96 += 3;
    --v39;
  }
  while (v39);
LABEL_43:
  CFDataRef v115 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v46, 12 * v37, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  uint64_t v117 = sub_1B641D00C(1, v115, 1, 3, v37, 12, 0, v116);
  CFRelease(v115);
  unint64_t v118 = (unint64_t)v8[2];
  float32x4_t v119 = v8[1];
  if ((unint64_t)v119 >= v118)
  {
    unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (unsigned char *)*v8) >> 3);
    unint64_t v122 = v121 + 1;
    if (v121 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v118 - (void)*v8) >> 3);
    if (2 * v123 > v122) {
      unint64_t v122 = 2 * v123;
    }
    if (v123 >= 0x555555555555555) {
      unint64_t v124 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v124 = v122;
    }
    if (v124) {
      float32x2_t v125 = (char *)sub_1B6428204((uint64_t)(v8 + 2), v124);
    }
    else {
      float32x2_t v125 = 0;
    }
    float32x4_t v126 = &v125[24 * v121];
    CFDataRef v127 = &v125[24 * v124];
    *(void *)float32x4_t v126 = 0;
    *((void *)v126 + 1) = 0;
    *((void *)v126 + 2) = v117;
    float32x4_t v120 = v126 + 24;
    uint64_t v129 = (char *)*v8;
    uint64_t v128 = (char *)v8[1];
    if (v128 != *v8)
    {
      do
      {
        long long v130 = *(_OWORD *)(v128 - 24);
        *((void *)v126 - 1) = *((void *)v128 - 1);
        *(_OWORD *)(v126 - 24) = v130;
        v126 -= 24;
        v128 -= 24;
      }
      while (v128 != v129);
      uint64_t v128 = (char *)*v8;
    }
    *uint64_t v8 = v126;
    v8[1] = v120;
    v8[2] = v127;
    if (v128) {
      operator delete(v128);
    }
  }
  else
  {
    void *v119 = 0;
    v119[1] = 0;
    float32x4_t v120 = v119 + 3;
    v119[2] = v117;
  }
  v8[1] = v120;
}

uint64_t sub_1B657CAE0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = a3;
  sub_1B641D478(a4, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  unint64_t v14 = v13;
  uint64_t v15 = BYTE4(v13);
  uint64_t v22 = sub_1B63CA534(BYTE4(v13), v13, v16, v17, v18, v19, v20, v21);
  int v37 = sub_1B641D56C(a4, v23, v24, v25, v26, v27, v28, v29);
  if (v37 || HIBYTE(v14) >= 3 && (sub_1B63CA9F0(BYTE6(v14), v30, v31, v32, v33, v34, v35, v36) & 1) != 0)
  {
    uint64_t v72 = a4;
    if (v10)
    {
      int v38 = sub_1B6E1BBA4(*a2, *(unsigned __int8 *)(a1 + 72));
      malloc_type_id_t v39 = 1175024481;
    }
    else
    {
      int v38 = *(_DWORD *)(*a2 + 8);
      malloc_type_id_t v39 = 995483109;
    }
    uint64_t v41 = v38;
    size_t v42 = v22 * v38;
    uint64_t v43 = (const UInt8 *)malloc_type_malloc(v42, v39);
    uint64_t v50 = v43;
    if (v38 >= 1)
    {
      uint64_t v51 = 0;
      uint64_t v52 = (uint64_t)v43;
      do
      {
        v53.i64[0] = *(void *)(*(void *)(a1 + 48) + v51);
        v53.i64[1] = v53.i64[0];
        sub_1B65D6678(v15, v52, v44, v45, v46, v47, v48, v49, v53);
        v52 += (unsigned __int16)v22;
        v51 += 8;
      }
      while (8 * v41 != v51);
    }
    CFDataRef v54 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v50, v42, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
    uint64_t v40 = sub_1B641D00C(v37, v54, v15, 1, v41, v22, 0, v55);
    CFRelease(v54);
    BOOL v56 = *(unsigned char *)(a1 + 88) == 2;
    char v57 = *(unsigned char *)(a1 + 72);
    uint64_t v58 = (BOOL *)a5[2];
    uint64_t v59 = (BOOL *)a5[1];
    if (v59 >= v58)
    {
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((v59 - (unsigned char *)*a5) >> 3);
      unint64_t v62 = v61 + 1;
      if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v58 - (unsigned char *)*a5) >> 3);
      if (2 * v63 > v62) {
        unint64_t v62 = 2 * v63;
      }
      if (v63 >= 0x555555555555555) {
        unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64) {
        uint64_t v65 = (char *)sub_1B6428204((uint64_t)(a5 + 2), v64);
      }
      else {
        uint64_t v65 = 0;
      }
      uint64_t v66 = (BOOL *)&v65[24 * v61];
      uint64_t v67 = &v65[24 * v64];
      *uint64_t v66 = v56;
      v66[1] = v57;
      *(_DWORD *)(v66 + 2) = 0;
      *((_WORD *)v66 + 3) = 0;
      *((void *)v66 + 1) = v72;
      *((void *)v66 + 2) = v40;
      uint64_t v60 = (char *)(v66 + 24);
      uint64_t v69 = (char *)*a5;
      uint64_t v68 = (char *)a5[1];
      if (v68 != *a5)
      {
        do
        {
          long long v70 = *(_OWORD *)(v68 - 24);
          *((void *)v66 - 1) = *((void *)v68 - 1);
          *(_OWORD *)(v66 - 24) = v70;
          v66 -= 24;
          v68 -= 24;
        }
        while (v68 != v69);
        uint64_t v68 = (char *)*a5;
      }
      *a5 = v66;
      a5[1] = v60;
      a5[2] = v67;
      if (v68) {
        operator delete(v68);
      }
    }
    else
    {
      *uint64_t v59 = v56;
      v59[1] = v57;
      *(_DWORD *)(v59 + 2) = 0;
      *((_WORD *)v59 + 3) = 0;
      uint64_t v60 = (char *)(v59 + 24);
      *((void *)v59 + 1) = v72;
      *((void *)v59 + 2) = v40;
    }
    a5[1] = v60;
  }
  else
  {
    sub_1B63F2F54(16, @"Error: Position must be float3 to be subdivided. Actual type is %d", v31, v32, v33, v34, v35, v36, BYTE4(v14));
    return 0;
  }
  return v40;
}

void sub_1B657CDB0(uint64_t *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  int v72 = *(_DWORD *)(*a1 + 4);
  int v10 = *(void **)(*(void *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  uint64_t v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4) {
    BOOL v12 = a5 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = v12;
  if (v12) {
    int v14 = 1;
  }
  else {
    int v14 = 3;
  }
  uint64_t v78 = &v81;
  int v79 = v11;
  int v80 = 33;
  float32x4_t v82 = 0;
  uint64_t v60 = v10;
  char v59 = v13;
  if (v11 >= 0x22)
  {
    uint64_t v15 = operator new(4 * v11);
    char v13 = v59;
    int v10 = v60;
    float32x4_t v82 = v15;
    uint64_t v78 = (uint64_t *)v15;
    int v80 = v11;
  }
  unsigned int v16 = v11 * v14;
  uint64_t v17 = (float *)v76;
  float32x4_t v73 = v76;
  unsigned int v74 = v16;
  int v75 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = operator new(4 * v16);
    char v13 = v59;
    int v10 = v60;
    __p = v18;
    float32x4_t v73 = v18;
    int v75 = v16;
    uint64_t v17 = (float *)v18;
  }
  uint64_t v19 = v17 + 1;
  uint64_t v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  uint64_t v21 = (uint64_t)&v17[v11 + 1];
  v71[0] = v17;
  v71[1] = v17 + 1;
  uint64_t v22 = v20 + 4 * v11;
  v71[2] = v20;
  memset(&v71[3], 0, 13);
  float32x4_t v53 = &v17[v11 + v11];
  CFDataRef v54 = &v17[v11];
  v70[0] = v54;
  v70[1] = v21;
  void v70[2] = v22;
  memset(&v70[3], 0, 13);
  v68[0] = v53;
  v68[1] = v21 + 4 * v11;
  v68[2] = v22 + 4 * v11;
  v69[0] = 0;
  *(void *)((char *)v69 + 5) = 0;
  v63[0] = v10;
  v63[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v57 = (uint64_t)&v17[v11 + 1];
    uint64_t v58 = v17;
    uint64_t v56 = v21 + 4 * v11;
    uint64_t v55 = v22 + 4 * v11;
    do
    {
      unsigned int v24 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v24 & 0x800) != 0 || (v25 = v10[42], (int v26 = *(_DWORD *)(v25 + 8 * v23)) == 0))
      {
        *(void *)(*a3 + 8 * v23) = 0;
        *(float32x2_t *)(*a3 + 8 * v23) = vadd_f32(*(float32x2_t *)(*a2 + 8 * v23), *(float32x2_t *)(*a3 + 8 * v23));
        if ((v13 & 1) == 0)
        {
          *(void *)(*a4 + 8 * v23) = 0;
          *(void *)(*a5 + 8 * v23) = 0;
        }
      }
      else
      {
        uint64_t v27 = (2 * v23) | 1;
        uint64_t v61 = *(int *)(v25 + 4 * v27);
        uint64_t v62 = v10[45];
        int v64 = v23;
        int v65 = v23;
        int v28 = (v24 >> 7) & 0xF;
        int v66 = *(_DWORD *)(*(void *)(v63[0] + 336) + 8 * v23);
        int v67 = *(_DWORD *)(*(void *)(v63[0] + 264) + 8 * v23);
        if (v13) {
          sub_1B657DF14((uint64_t)&v72, (unsigned int *)v63, (uint64_t)v71, v28);
        }
        else {
          sub_1B657DB78((uint64_t)&v72, (int *)v63, (uint64_t)v71, (uint64_t)v70, (uint64_t)v68, v28);
        }
        uint64_t v29 = v78;
        int v10 = v60;
        if (v26 >= 1)
        {
          uint64_t v30 = (int *)(v62 + 4 * v61);
          uint64_t v31 = v60[15];
          uint64_t v32 = v26;
          uint64_t v33 = v78;
          do
          {
            uint64_t v34 = *v30++;
            *(_DWORD *)uint64_t v33 = *(_DWORD *)(v31 + 8 * v34 + 4 * (v23 == *(_DWORD *)(v31 + 8 * v34)));
            uint64_t v33 = (uint64_t *)((char *)v33 + 4);
            --v32;
          }
          while (v32);
        }
        uint64_t v35 = (char *)v29 + 4 * v26;
        char v13 = v59;
        if (LODWORD(v71[4]) || (!LODWORD(v70[4]) ? (char v36 = 1) : (char v36 = v59), (v36 & 1) == 0))
        {
          uint64_t v37 = v60[33];
          uint64_t v38 = *(unsigned int *)(v37 + 8 * v23);
          if ((int)v38 >= 1)
          {
            uint64_t v39 = *(int *)(v37 + 4 * v27);
            uint64_t v40 = (int *)(v60[36] + 4 * v39);
            uint64_t v41 = (_WORD *)(v60[39] + 2 * v39);
            uint64_t v42 = v60[3];
            uint64_t v43 = v60[6];
            uint64_t v44 = (_DWORD *)v29 + v26;
            do
            {
              uint64_t v45 = *v40++;
              uint64_t v46 = v43 + 4 * *(int *)(v42 + 8 * v45 + 4);
              int v47 = *(_DWORD *)(v42 + 8 * v45);
              LOWORD(v45) = *v41++;
              __int16 v48 = v45 + 2;
              if (v47 > (unsigned __int16)(v45 + 2)) {
                LOWORD(v47) = 0;
              }
              *v44++ = *(_DWORD *)(v46 + 4 * (unsigned __int16)(v48 - v47));
              --v38;
            }
            while (v38);
          }
        }
        *(void *)(*a3 + 8 * v23) = 0;
        if (SLODWORD(v71[4]) >= 1)
        {
          uint64_t v49 = 0;
          do
          {
            *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v35[4 * v49]), *(float *)(v20 + 4 * v49));
            ++v49;
          }
          while (v49 < SLODWORD(v71[4]));
        }
        if (SHIDWORD(v71[3]) >= 1)
        {
          uint64_t v50 = 0;
          do
          {
            *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v29 + v50)), *(float *)&v19[4 * v50]);
            ++v50;
          }
          while (v50 < SHIDWORD(v71[3]));
        }
        *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v58);
        if ((v59 & 1) == 0)
        {
          *(void *)(*a4 + 8 * v23) = 0;
          *(void *)(*a5 + 8 * v23) = 0;
          if (SLODWORD(v70[4]) >= 1)
          {
            uint64_t v51 = 0;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v35[4 * v51]), *(float *)(v20 + 4 * v11 + 4 * v51));
              *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v35[4 * v51]), *(float *)(v55 + 4 * v51));
              ++v51;
            }
            while (v51 < SLODWORD(v70[4]));
          }
          if (SHIDWORD(v70[3]) >= 1)
          {
            uint64_t v52 = 0;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v29 + v52)), *(float *)(v57 + 4 * v52));
              *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v29 + v52)), *(float *)(v56 + 4 * v52));
              ++v52;
            }
            while (v52 < SHIDWORD(v70[3]));
          }
          *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v54);
          *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v53);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    uint64_t v18 = __p;
  }
  operator delete(v18);
  operator delete(v82);
}

void sub_1B657D304(uint64_t *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  int v72 = *(_DWORD *)(*a1 + 4);
  int v10 = *(void **)(*(void *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  uint64_t v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4) {
    BOOL v12 = a5 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = v12;
  if (v12) {
    int v14 = 1;
  }
  else {
    int v14 = 3;
  }
  uint64_t v78 = &v81;
  int v79 = v11;
  int v80 = 33;
  float32x4_t v82 = 0;
  uint64_t v60 = v10;
  char v59 = v13;
  if (v11 >= 0x22)
  {
    uint64_t v15 = operator new(4 * v11);
    char v13 = v59;
    int v10 = v60;
    float32x4_t v82 = v15;
    uint64_t v78 = (uint64_t *)v15;
    int v80 = v11;
  }
  unsigned int v16 = v11 * v14;
  uint64_t v17 = (float *)v76;
  float32x4_t v73 = v76;
  unsigned int v74 = v16;
  int v75 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = operator new(4 * v16);
    char v13 = v59;
    int v10 = v60;
    __p = v18;
    float32x4_t v73 = v18;
    int v75 = v16;
    uint64_t v17 = (float *)v18;
  }
  uint64_t v19 = v17 + 1;
  uint64_t v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  uint64_t v21 = (uint64_t)&v17[v11 + 1];
  v71[0] = v17;
  v71[1] = v17 + 1;
  uint64_t v22 = v20 + 4 * v11;
  v71[2] = v20;
  memset(&v71[3], 0, 13);
  float32x4_t v53 = &v17[v11 + v11];
  CFDataRef v54 = &v17[v11];
  v70[0] = v54;
  v70[1] = v21;
  void v70[2] = v22;
  memset(&v70[3], 0, 13);
  v68[0] = v53;
  v68[1] = v21 + 4 * v11;
  v68[2] = v22 + 4 * v11;
  v69[0] = 0;
  *(void *)((char *)v69 + 5) = 0;
  v63[0] = v10;
  v63[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v57 = (uint64_t)&v17[v11 + 1];
    uint64_t v58 = v17;
    uint64_t v56 = v21 + 4 * v11;
    uint64_t v55 = v22 + 4 * v11;
    do
    {
      unsigned int v24 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v24 & 0x800) != 0 || (v25 = v10[42], (int v26 = *(_DWORD *)(v25 + 8 * v23)) == 0))
      {
        *(void *)(*a3 + 8 * v23) = 0;
        *(float32x2_t *)(*a3 + 8 * v23) = vadd_f32(*(float32x2_t *)(*a2 + 8 * v23), *(float32x2_t *)(*a3 + 8 * v23));
        if ((v13 & 1) == 0)
        {
          *(void *)(*a4 + 8 * v23) = 0;
          *(void *)(*a5 + 8 * v23) = 0;
        }
      }
      else
      {
        uint64_t v27 = (2 * v23) | 1;
        uint64_t v61 = *(int *)(v25 + 4 * v27);
        uint64_t v62 = v10[45];
        int v64 = v23;
        int v65 = v23;
        int v28 = (v24 >> 7) & 0xF;
        int v66 = *(_DWORD *)(*(void *)(v63[0] + 336) + 8 * v23);
        int v67 = *(_DWORD *)(*(void *)(v63[0] + 264) + 8 * v23);
        if (v13) {
          sub_1B657EAB0((uint64_t)&v72, (unsigned int *)v63, (uint64_t)v71, v28);
        }
        else {
          sub_1B657E6A0((uint64_t)&v72, (int *)v63, (uint64_t)v71, (uint64_t)v70, (uint64_t)v68, v28);
        }
        uint64_t v29 = v78;
        int v10 = v60;
        if (v26 >= 1)
        {
          uint64_t v30 = (int *)(v62 + 4 * v61);
          uint64_t v31 = v60[15];
          uint64_t v32 = v26;
          uint64_t v33 = v78;
          do
          {
            uint64_t v34 = *v30++;
            *(_DWORD *)uint64_t v33 = *(_DWORD *)(v31 + 8 * v34 + 4 * (v23 == *(_DWORD *)(v31 + 8 * v34)));
            uint64_t v33 = (uint64_t *)((char *)v33 + 4);
            --v32;
          }
          while (v32);
        }
        uint64_t v35 = (char *)v29 + 4 * v26;
        char v13 = v59;
        if (LODWORD(v71[4]) || (!LODWORD(v70[4]) ? (char v36 = 1) : (char v36 = v59), (v36 & 1) == 0))
        {
          uint64_t v37 = v60[33];
          uint64_t v38 = *(unsigned int *)(v37 + 8 * v23);
          if ((int)v38 >= 1)
          {
            uint64_t v39 = *(int *)(v37 + 4 * v27);
            uint64_t v40 = (int *)(v60[36] + 4 * v39);
            uint64_t v41 = (_WORD *)(v60[39] + 2 * v39);
            uint64_t v42 = v60[3];
            uint64_t v43 = v60[6];
            uint64_t v44 = (_DWORD *)v29 + v26;
            do
            {
              uint64_t v45 = *v40++;
              uint64_t v46 = v43 + 4 * *(int *)(v42 + 8 * v45 + 4);
              int v47 = *(_DWORD *)(v42 + 8 * v45);
              LOWORD(v45) = *v41++;
              __int16 v48 = v45 + 2;
              if (v47 > (unsigned __int16)(v45 + 2)) {
                LOWORD(v47) = 0;
              }
              *v44++ = *(_DWORD *)(v46 + 4 * (unsigned __int16)(v48 - v47));
              --v38;
            }
            while (v38);
          }
        }
        *(void *)(*a3 + 8 * v23) = 0;
        if (SLODWORD(v71[4]) >= 1)
        {
          uint64_t v49 = 0;
          do
          {
            *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v35[4 * v49]), *(float *)(v20 + 4 * v49));
            ++v49;
          }
          while (v49 < SLODWORD(v71[4]));
        }
        if (SHIDWORD(v71[3]) >= 1)
        {
          uint64_t v50 = 0;
          do
          {
            *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v29 + v50)), *(float *)&v19[4 * v50]);
            ++v50;
          }
          while (v50 < SHIDWORD(v71[3]));
        }
        *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v58);
        if ((v59 & 1) == 0)
        {
          *(void *)(*a4 + 8 * v23) = 0;
          *(void *)(*a5 + 8 * v23) = 0;
          if (SLODWORD(v70[4]) >= 1)
          {
            uint64_t v51 = 0;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v35[4 * v51]), *(float *)(v20 + 4 * v11 + 4 * v51));
              *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v35[4 * v51]), *(float *)(v55 + 4 * v51));
              ++v51;
            }
            while (v51 < SLODWORD(v70[4]));
          }
          if (SHIDWORD(v70[3]) >= 1)
          {
            uint64_t v52 = 0;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v29 + v52)), *(float *)(v57 + 4 * v52));
              *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v29 + v52)), *(float *)(v56 + 4 * v52));
              ++v52;
            }
            while (v52 < SHIDWORD(v70[3]));
          }
          *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v54);
          *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v53);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    uint64_t v18 = __p;
  }
  operator delete(v18);
  operator delete(v82);
}

void sub_1B657D858(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 40)
                 + 8 * (((unint64_t)*(unsigned __int8 *)(*(void *)a1 + 8) >> 2) & 0xF));
  uint64_t v10 = (2 * *(int *)(v9 + 20)) | 1;
  if (a4) {
    BOOL v11 = a5 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (v11) {
    int v13 = 1;
  }
  else {
    int v13 = 3;
  }
  uint64_t v39 = (int *)&v42;
  int v40 = v10;
  int v41 = 33;
  uint64_t v43 = 0;
  if (v10 >= 0x22)
  {
    uint64_t v43 = (int *)operator new(4 * v10);
    uint64_t v39 = v43;
    int v41 = v10;
  }
  unsigned int v14 = v10 * v13;
  uint64_t v15 = (float *)&v37;
  __p = 0;
  if (v14 < 0x64)
  {
    unsigned int v16 = 0;
  }
  else
  {
    unsigned int v16 = operator new(4 * v14);
    __p = v16;
    uint64_t v15 = (float *)v16;
  }
  if (*(int *)(v9 + 8) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &v15[v10];
    uint64_t v20 = &v19[v10];
    do
    {
      if ((*(_WORD *)(*(void *)(v9 + 432) + 2 * v17) & 0x800) != 0
        || (v21 = (unsigned int *)(*(void *)(v9 + 336) + 8 * v17), uint64_t v22 = *v21, !v22))
      {
        *(void *)(*a3 + 8 * v17) = 0;
        *(float32x2_t *)(*a3 + 8 * v17) = vadd_f32(*(float32x2_t *)(*a2 + 8 * v17), *(float32x2_t *)(*a3 + 8 * v17));
        if ((v12 & 1) == 0)
        {
          *(void *)(*a4 + 8 * v17) = 0;
          *(void *)(*a5 + 8 * v17) = 0;
        }
      }
      else
      {
        uint64_t v23 = *(void *)(v9 + 360);
        uint64_t v24 = (int)v21[1];
        uint64_t v25 = v15;
        if ((v12 & 1) == 0)
        {
          *uint64_t v15 = 1.0;
          *(void *)uint64_t v19 = 0x3F800000BF800000;
          v19[2] = 0.0;
          uint64_t v25 = &v19[v10 + 2];
          uint64_t v18 = 2;
          *(void *)uint64_t v20 = 3212836864;
        }
        *uint64_t v25 = 1.0;
        int v26 = v39;
        if ((int)v22 >= 1)
        {
          uint64_t v27 = (int *)(v23 + 4 * v24);
          uint64_t v28 = *(void *)(v9 + 120);
          uint64_t v29 = v39;
          do
          {
            uint64_t v30 = *v27++;
            *v29++ = *(_DWORD *)(v28 + 8 * v30 + 4 * (v17 == *(_DWORD *)(v28 + 8 * v30)));
            --v22;
          }
          while (v22);
        }
        *(void *)(*a3 + 8 * v17) = 0;
        *(float32x2_t *)(*a3 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v17), *(float32x2_t *)(*a2 + 8 * v17), *v15);
        if ((v12 & 1) == 0)
        {
          *(void *)(*a4 + 8 * v17) = 0;
          *(void *)(*a5 + 8 * v17) = 0;
          uint64_t v31 = v18;
          uint64_t v32 = v19 + 1;
          uint64_t v33 = &v19[v10 + 1];
          if ((int)v18 >= 1)
          {
            do
            {
              float v34 = *v32++;
              *(float32x2_t *)(*a4 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v17), *(float32x2_t *)(*a2 + 8 * *v26), v34);
              uint64_t v36 = *v26++;
              uint64_t v35 = v36;
              *(float *)&uint64_t v36 = *v33++;
              *(float32x2_t *)(*a5 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v17), *(float32x2_t *)(*a2 + 8 * v35), *(float *)&v36);
              --v31;
            }
            while (v31);
          }
          *(float32x2_t *)(*a4 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v17), *(float32x2_t *)(*a2 + 8 * v17), *v19);
          *(float32x2_t *)(*a5 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v17), *(float32x2_t *)(*a2 + 8 * v17), *v20);
        }
      }
      ++v17;
    }
    while (v17 < *(int *)(v9 + 8));
    unsigned int v16 = __p;
  }
  operator delete(v16);
  operator delete(v43);
}

void sub_1B657DB78(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if ((a6 - 1) > 1)
  {
    if (a6 == 4)
    {
      uint64_t v12 = a2[6];
      uint64_t v13 = a2[6];
      MEMORY[0x1F4188790](a1, 4 * v12);
      uint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v15, v14);
      if ((int)v12 >= 1)
      {
        unsigned int v16 = (int *)(*(void *)(*(void *)a2 + 360)
                    + 4 * *(int *)(*(void *)(*(void *)a2 + 336) + 8 * a2[4] + 4));
        uint64_t v17 = *(void *)(*(void *)a2 + 216);
        uint64_t v18 = v15;
        uint64_t v19 = v13;
        do
        {
          uint64_t v20 = *v16++;
          *v18++ = *(_DWORD *)(v17 + 4 * v20);
          --v19;
        }
        while (v19);
      }
      uint64_t v21 = 0xFFFFFFFF00000000;
      int v22 = -1;
      uint64_t v23 = (float *)v15;
      do
      {
        float v24 = *v23++;
        v21 += 0x100000000;
        ++v22;
      }
      while (v24 <= 0.0);
      uint64_t v25 = 0;
      v38[0] = v22;
      uint64_t v26 = v12 << 32;
      do
      {
        float v27 = *(float *)&v15[4 * v12 - 4 + 4 * v25];
        v26 -= 0x100000000;
        --v25;
      }
      while (v27 <= 0.0);
      v38[1] = v13 + v25;
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 28) = v13;
      *(_DWORD *)(a3 + 32) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1059760811;
      uint64_t v28 = *(char **)(a3 + 8);
      if ((int)v13 >= 1) {
        bzero(v28, 4 * v12);
      }
      *(_DWORD *)&v28[v21 >> 30] = 1042983595;
      *(_DWORD *)&v28[v26 >> 30] = 1042983595;
      sub_1B657E3DC(a1, (uint64_t)a2, a4, a5, v38);
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
      uint64_t v29 = a2[6];
      *(_DWORD *)(a4 + 24) = 1;
      *(void *)(a4 + 28) = v29;
      *(unsigned char *)(a4 + 36) = 0;
      *(_DWORD *)(a5 + 24) = 1;
      *(void *)(a5 + 28) = v29;
      *(unsigned char *)(a5 + 36) = 0;
      **(_DWORD **)a4 = -1082130432;
      uint64_t v30 = *(void **)(a4 + 8);
      *uint64_t v30 = 1065353216;
      **(_DWORD **)a5 = -1082130432;
      uint64_t v31 = *(void **)(a5 + 8);
      void *v31 = 0x3F80000000000000;
      if ((int)v29 >= 3)
      {
        uint64_t v32 = v29 - 2;
        uint64_t v33 = v31 + 1;
        float v34 = v30 + 1;
        do
        {
          *v34++ = 0;
          *v33++ = 0;
          --v32;
        }
        while (v32);
      }
    }
  }
  else
  {
    uint64_t v11 = a2[7];
    *(_DWORD *)(a3 + 24) = 1;
    if (v11 == 2)
    {
      *(unsigned char *)(a3 + 36) = 0;
      *(void *)(a3 + 28) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    else
    {
      *(_DWORD *)(a3 + 28) = v11;
      *(_DWORD *)(a3 + 32) = v11;
      *(unsigned char *)(a3 + 36) = 0;
      if (v11 == 4)
      {
        **(_DWORD **)a3 = 1055100473;
        *(int32x4_t *)*(void *)(a3 + 8) = vdupq_n_s32(0x3DE38E39u);
        *(int32x4_t *)*(void *)(a3 + 16) = vdupq_n_s32(0x3CE38E39u);
      }
      else
      {
        float v35 = 1.0 / (float)((float)((float)(int)v11 + 5.0) * (float)(int)v11);
        **(float **)a3 = 1.0 - (float)((float)(int)v11 * (float)(v35 + (float)(v35 * 4.0)));
        if ((int)v11 >= 1)
        {
          uint64_t v36 = *(float **)(a3 + 8);
          uint64_t v37 = *(float **)(a3 + 16);
          do
          {
            *v36++ = v35 * 4.0;
            *v37++ = v35;
            --v11;
          }
          while (v11);
        }
      }
    }
    sub_1B657E180(a1, (uint64_t)a2, a4, a5);
  }
}

void sub_1B657DF14(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  if ((a4 - 1) > 1)
  {
    if (a4 != 4)
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      goto LABEL_18;
    }
    uint64_t v7 = a2[6];
    MEMORY[0x1F4188790](a1, 4 * (int)v7);
    uint64_t v9 = (char *)v28 - v8;
    bzero((char *)v28 - v8, v10);
    if ((int)v7 >= 1)
    {
      uint64_t v11 = (int *)(*(void *)(*(void *)a2 + 360)
                  + 4 * *(int *)(*(void *)(*(void *)a2 + 336) + 8 * (int)a2[4] + 4));
      uint64_t v12 = *(void *)(*(void *)a2 + 216);
      uint64_t v13 = v9;
      uint64_t v14 = v7;
      do
      {
        uint64_t v15 = *v11++;
        *v13++ = *(_DWORD *)(v12 + 4 * v15);
        --v14;
      }
      while (v14);
    }
    uint64_t v16 = 0xFFFFFFFF00000000;
    uint64_t v17 = (float *)v9;
    do
    {
      float v18 = *v17++;
      v16 += 0x100000000;
    }
    while (v18 <= 0.0);
    uint64_t v19 = (uint64_t)(int)v7 << 32;
    uint64_t v20 = (float *)&v9[4 * (int)v7 - 4];
    do
    {
      float v21 = *v20--;
      v19 -= 0x100000000;
    }
    while (v21 <= 0.0);
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v7;
    *(_DWORD *)(a3 + 32) = 0;
    *(unsigned char *)(a3 + 36) = 0;
    int v22 = *(float **)a3;
    uint64_t v23 = *(char **)(a3 + 8);
    float *v22 = 0.66667;
    if ((int)v7 >= 1) {
      bzero(v23, 4 * v7);
    }
    *(_DWORD *)&v23[v16 >> 30] = 1042983595;
    *(_DWORD *)&v23[v19 >> 30] = 1042983595;
  }
  else
  {
    uint64_t v6 = a2[7];
    *(_DWORD *)(a3 + 24) = 1;
    if (v6 == 2)
    {
      *(unsigned char *)(a3 + 36) = 0;
      *(void *)(a3 + 28) = 0;
LABEL_18:
      **(_DWORD **)a3 = 1065353216;
      return;
    }
    *(_DWORD *)(a3 + 28) = v6;
    *(_DWORD *)(a3 + 32) = v6;
    *(unsigned char *)(a3 + 36) = 0;
    if (v6 == 4)
    {
      float v24 = *(int32x4_t **)(a3 + 8);
      **(_DWORD **)a3 = 1055100473;
      *float v24 = vdupq_n_s32(0x3DE38E39u);
      *(int32x4_t *)*(void *)(a3 + 16) = vdupq_n_s32(0x3CE38E39u);
    }
    else
    {
      float v25 = 1.0 / (float)((float)((float)(int)v6 + 5.0) * (float)(int)v6);
      **(float **)a3 = 1.0 - (float)((float)(int)v6 * (float)(v25 + (float)(v25 * 4.0)));
      if ((int)v6 >= 1)
      {
        uint64_t v26 = *(float **)(a3 + 8);
        float v27 = *(float **)(a3 + 16);
        do
        {
          *v26++ = v25 * 4.0;
          *v27++ = v25;
          --v6;
        }
        while (v6);
      }
    }
  }
}

void sub_1B657E180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned int *)(a2 + 28);
  if (v6 == 2)
  {
    uint64_t v7 = *(unsigned int *)(a2 + 24);
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 28) = v7;
    *(unsigned char *)(a3 + 36) = 0;
    *(_DWORD *)(a4 + 24) = 1;
    *(void *)(a4 + 28) = v7;
    *(unsigned char *)(a4 + 36) = 0;
    uint64_t v8 = *(void **)(a3 + 8);
    **(_DWORD **)a3 = -1082130432;
    *uint64_t v8 = 1065353216;
    uint64_t v9 = *(void **)(a4 + 8);
    **(_DWORD **)a4 = -1082130432;
    *uint64_t v9 = 0x3F80000000000000;
    if ((int)v7 >= 3)
    {
      uint64_t v10 = v7 - 2;
      uint64_t v11 = v9 + 1;
      uint64_t v12 = v8 + 1;
      do
      {
        *v12++ = 0;
        *v11++ = 0;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v6;
    *(_DWORD *)(a3 + 32) = v6;
    *(unsigned char *)(a3 + 36) = 0;
    **(_DWORD **)a3 = 0;
    if (v6 == 4)
    {
      uint64_t v13 = *(_OWORD **)(a3 + 16);
      *(_OWORD *)*(void *)(a3 + 8) = xmmword_1B6E72320;
      *uint64_t v13 = xmmword_1B6E72330;
      *(void *)(a4 + 24) = 0x400000001;
      *(_DWORD *)(a4 + 32) = 4;
      *(unsigned char *)(a4 + 36) = 0;
      uint64_t v14 = *(_OWORD **)(a4 + 8);
      **(_DWORD **)a4 = 0;
      *uint64_t v14 = xmmword_1B6E72340;
      *(_OWORD *)*(void *)(a4 + 16) = xmmword_1B6E72350;
    }
    else
    {
      double v15 = 6.28318531 / (double)(int)v6;
      double v16 = cos(v15);
      double v17 = cos(v15 * 0.5);
      int v18 = v6 - 1;
      if ((int)v6 >= 1)
      {
        uint64_t v19 = 0;
        double v20 = 1.0 / (((v16 + v17 * sqrt(v16 + 9.0 + v16 + 9.0)) * 0.0625 + 0.3125) * 4.0 + -1.0);
        uint64_t v21 = *(void *)(a3 + 8);
        uint64_t v22 = *(void *)(a3 + 16);
        do
        {
          double v23 = cos(v15 * (double)(int)v19);
          long double v24 = cos(v15 * (double)((int)v19 + 1));
          float v25 = v23 * 4.0;
          *(float *)(v21 + 4 * v19) = v25;
          *(float *)&long double v24 = v20 * (v23 + v24);
          *(_DWORD *)(v22 + 4 * v19++) = LODWORD(v24);
        }
        while (v6 != v19);
      }
      *(_DWORD *)(a4 + 24) = 1;
      *(_DWORD *)(a4 + 28) = v6;
      *(_DWORD *)(a4 + 32) = v6;
      *(unsigned char *)(a4 + 36) = 0;
      uint64_t v26 = *(_DWORD **)(a4 + 8);
      **(_DWORD **)a4 = 0;
      float v27 = *(int **)(a3 + 8);
      uint64_t v28 = *(int **)(a3 + 16);
      *uint64_t v26 = v27[v18];
      uint64_t v29 = *(_DWORD **)(a4 + 16);
      *uint64_t v29 = v28[v18];
      if ((int)v6 > 1)
      {
        uint64_t v30 = v29 + 1;
        uint64_t v31 = v26 + 1;
        uint64_t v32 = v6 - 1;
        do
        {
          int v33 = *v27++;
          *v31++ = v33;
          int v34 = *v28++;
          *v30++ = v34;
          --v32;
        }
        while (v32);
      }
    }
  }
}

void sub_1B657E3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  uint64_t v9 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 28) = v8;
  *(_DWORD *)(a3 + 32) = v9;
  *(unsigned char *)(a3 + 36) = 0;
  **(_DWORD **)a3 = 0;
  if ((int)v8 >= 1) {
    bzero(*(void **)(a3 + 8), 4 * v8);
  }
  if ((int)v9 >= 1) {
    bzero(*(void **)(a3 + 16), 4 * v9);
  }
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = a5[1];
  *(_DWORD *)(v10 + 4 * *a5) = 1056964608;
  *(_DWORD *)(v10 + 4 * v11) = -1090519040;
  *(_DWORD *)(a4 + 24) = 1;
  *(_DWORD *)(a4 + 28) = v8;
  *(_DWORD *)(a4 + 32) = v9;
  *(unsigned char *)(a4 + 36) = 0;
  int v12 = *a5;
  if (*a5 >= 1)
  {
    uint64_t v13 = *(_DWORD **)(a4 + 8);
    uint64_t v14 = *(_DWORD **)(a4 + 16);
    uint64_t v15 = *a5;
    do
    {
      *v13++ = 0;
      *v14++ = 0;
      --v15;
    }
    while (v15);
  }
  uint64_t v16 = v12;
  uint64_t v17 = a5[1];
  int v18 = v17 - v12;
  if (v17 - v12 == 2)
  {
    uint64_t v19 = *(void *)(a4 + 8);
    **(_DWORD **)a4 = -1087722837;
    *(_DWORD *)(v19 + 4 * v12) = -1104500053;
    int v20 = v12 + 1;
    *(_DWORD *)(v19 + 4 * v20) = 1059760811;
    *(_DWORD *)(v19 + 4 * v17) = -1104500053;
    uint64_t v21 = *(void *)(a4 + 16);
    *(_DWORD *)(v21 + 4 * v12) = 1042983595;
    *(_DWORD *)(v21 + 4 * v20) = 1042983595;
  }
  else if (v18 < 3)
  {
    uint64_t v19 = *(void *)(a4 + 8);
    **(_DWORD **)a4 = -1061158912;
    *(_DWORD *)(v19 + 4 * v12) = 1077936128;
    *(_DWORD *)(v19 + 4 * v17) = 1077936128;
    uint64_t v21 = *(void *)(a4 + 16);
    *(_DWORD *)(v21 + 4 * v12) = 0;
  }
  else
  {
    double v22 = (double)v18;
    double v23 = 3.14159265 / (double)v18;
    __double2 v24 = __sincos_stret(v23);
    double sinval = v24.__sinval;
    double v26 = 1.0 / ((v24.__cosval + 3.0) * v22);
    double v27 = (v24.__cosval + 1.0) / v24.__sinval;
    float v28 = v26 * ((v24.__cosval + -1.0) * (v27 * 4.0));
    uint64_t v19 = *(void *)(a4 + 8);
    **(float **)a4 = v28;
    *(float *)&double v27 = -(v27 * (v24.__cosval * 2.0 + 1.0)) * v26;
    uint64_t v29 = (_DWORD *)(v19 + 4 * v16);
    *uint64_t v29 = LODWORD(v27);
    *(_DWORD *)(v19 + 4 * v17) = LODWORD(v27);
    *(float *)&double v27 = v24.__sinval * v26;
    uint64_t v21 = *(void *)(a4 + 16);
    uint64_t v30 = (_DWORD *)(v21 + 4 * v16);
    *uint64_t v30 = LODWORD(v27);
    uint64_t v31 = 1;
    do
    {
      double v32 = (double)((int)v31 + 1);
      long double v33 = sin(v23 * v32);
      float v34 = v26 * (sinval * 4.0);
      *(float *)&v29[v31] = v34;
      float v35 = v26 * (sinval + v33);
      *(float *)&v30[v31++] = v35;
      double sinval = v33;
    }
    while (v32 < v22);
  }
  if ((int)v17 < (int)v9) {
    bzero((void *)(v21 + 4 * v17), 4 * (v9 + ~v17) + 4);
  }
  if ((int)v17 + 1 < (int)v8)
  {
    bzero((void *)(v19 + 4 * ((int)v17 + 1)), 4 * (v8 - v17 - 2) + 4);
  }
}

void sub_1B657E6A0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if ((a6 - 1) > 1)
  {
    if (a6 == 4)
    {
      uint64_t v14 = a2[6];
      uint64_t v15 = a2[6];
      MEMORY[0x1F4188790](a1, 4 * v14);
      uint64_t v17 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v17, v16);
      if ((int)v14 >= 1)
      {
        int v18 = (int *)(*(void *)(*(void *)a2 + 360)
                    + 4 * *(int *)(*(void *)(*(void *)a2 + 336) + 8 * a2[4] + 4));
        uint64_t v19 = *(void *)(*(void *)a2 + 216);
        int v20 = v17;
        uint64_t v21 = v15;
        do
        {
          uint64_t v22 = *v18++;
          *v20++ = *(_DWORD *)(v19 + 4 * v22);
          --v21;
        }
        while (v21);
      }
      uint64_t v23 = 0xFFFFFFFF00000000;
      unsigned int v24 = -1;
      float v25 = (float *)v17;
      do
      {
        float v26 = *v25++;
        v23 += 0x100000000;
        ++v24;
      }
      while (v26 <= 0.0);
      uint64_t v27 = 0;
      v51[0] = v24;
      uint64_t v28 = v14 << 32;
      do
      {
        float v29 = *(float *)&v17[4 * v14 - 4 + 4 * v27];
        v28 -= 0x100000000;
        --v27;
      }
      while (v29 <= 0.0);
      v51[1] = v15 + v27;
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 28) = v15;
      *(_DWORD *)(a3 + 32) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1059760811;
      uint64_t v30 = *(char **)(a3 + 8);
      if ((int)v15 >= 1) {
        bzero(v30, 4 * v14);
      }
      *(_DWORD *)&v30[v23 >> 30] = 1042983595;
      *(_DWORD *)&v30[v28 >> 30] = 1042983595;
      sub_1B657ED24(a1, (uint64_t)a2, a4, a5, v51);
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
      uint64_t v38 = a2[6];
      *(_DWORD *)(a4 + 24) = 1;
      *(void *)(a4 + 28) = v38;
      *(unsigned char *)(a4 + 36) = 0;
      *(_DWORD *)(a5 + 24) = 1;
      *(void *)(a5 + 28) = v38;
      *(unsigned char *)(a5 + 36) = 0;
      **(_DWORD **)a4 = -1069547520;
      uint64_t v39 = *(void **)(a4 + 8);
      *uint64_t v39 = 1077936128;
      **(_DWORD **)a5 = -1069547520;
      int v40 = *(void **)(a5 + 8);
      *int v40 = 0x4040000000000000;
      if ((int)v38 >= 3)
      {
        uint64_t v41 = v38 - 2;
        uint64_t v42 = v40 + 1;
        uint64_t v43 = v39 + 1;
        do
        {
          *v43++ = 0;
          *v42++ = 0;
          --v41;
        }
        while (v41);
      }
    }
  }
  else
  {
    uint64_t v10 = a2[7];
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 28) = v10;
    *(unsigned char *)(a3 + 36) = 0;
    if (v10 == 6)
    {
      **(_DWORD **)a3 = 1056964608;
      uint64_t v11 = *(int32x4_t **)(a3 + 8);
      int32x4_t v12 = vdupq_n_s32(0x3DAAAAABu);
      *uint64_t v11 = v12;
      v11[1].i64[0] = v12.i64[0];
    }
    else
    {
      float v31 = 1.0 / (float)(int)v10;
      float v32 = cosf(v31 * 6.2832);
      float v33 = 1.0
          / (float)((float)(3.0
                          / (float)((float)(v31
                                          * (float)(0.625
                                                  - (float)((float)((float)(v32 * 0.25) + 0.375)
                                                          * (float)((float)(v32 * 0.25) + 0.375))))
                                  * 8.0))
                  + (float)(int)v10);
      **(float **)a3 = 1.0 - (float)(v33 * (float)(int)v10);
      if ((int)v10 >= 1)
      {
        float v34 = *(float **)(a3 + 8);
        uint64_t v35 = v10;
        do
        {
          *v34++ = v33;
          --v35;
        }
        while (v35);
      }
    }
    *(_DWORD *)(a4 + 24) = 1;
    *(_DWORD *)(a4 + 28) = v10;
    *(_DWORD *)(a4 + 32) = 0;
    *(unsigned char *)(a4 + 36) = 0;
    *(_DWORD *)(a5 + 24) = 1;
    *(_DWORD *)(a5 + 28) = v10;
    *(_DWORD *)(a5 + 32) = 0;
    *(unsigned char *)(a5 + 36) = 0;
    **(_DWORD **)a4 = 0;
    **(_DWORD **)a5 = 0;
    if (v10 == 6)
    {
      uint64_t v36 = *(void *)(a4 + 8);
      *(_OWORD *)uint64_t v36 = xmmword_1B6E72360;
      *(void *)(v36 + 16) = 0x3F000000BF000000;
      uint64_t v37 = *(void *)(a5 + 8);
      *(_OWORD *)uint64_t v37 = xmmword_1B6E72370;
      *(int32x2_t *)(v37 + 16) = vdup_n_s32(0xBF5DB3D7);
    }
    else if ((int)v10 >= 1)
    {
      uint64_t v44 = 0;
      uint64_t v46 = *(void *)(a4 + 8);
      uint64_t v47 = *(void *)(a5 + 8);
      do
      {
        float v45 = 6.28318531 / (double)(int)v10;
        __double2 v48 = __sincos_stret((float)(v45 * (float)(int)v44));
        float cosval = v48.__cosval;
        *(float *)(v46 + 4 * v44) = cosval;
        float sinval = v48.__sinval;
        *(float *)(v47 + 4 * v44++) = sinval;
      }
      while (v10 != v44);
    }
  }
}

void sub_1B657EAB0(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  if ((a4 - 1) > 1)
  {
    if (a4 == 4)
    {
      uint64_t v9 = a2[6];
      MEMORY[0x1F4188790](a1, 4 * (int)v9);
      uint64_t v11 = (char *)v30 - v10;
      bzero((char *)v30 - v10, v12);
      if ((int)v9 >= 1)
      {
        uint64_t v13 = (int *)(*(void *)(*(void *)a2 + 360)
                    + 4 * *(int *)(*(void *)(*(void *)a2 + 336) + 8 * (int)a2[4] + 4));
        uint64_t v14 = *(void *)(*(void *)a2 + 216);
        uint64_t v15 = v11;
        uint64_t v16 = v9;
        do
        {
          uint64_t v17 = *v13++;
          *v15++ = *(_DWORD *)(v14 + 4 * v17);
          --v16;
        }
        while (v16);
      }
      uint64_t v18 = 0xFFFFFFFF00000000;
      uint64_t v19 = (float *)v11;
      do
      {
        float v20 = *v19++;
        v18 += 0x100000000;
      }
      while (v20 <= 0.0);
      uint64_t v21 = (uint64_t)(int)v9 << 32;
      uint64_t v22 = (float *)&v11[4 * (int)v9 - 4];
      do
      {
        float v23 = *v22--;
        v21 -= 0x100000000;
      }
      while (v23 <= 0.0);
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 28) = v9;
      *(_DWORD *)(a3 + 32) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      unsigned int v24 = *(float **)a3;
      float v25 = *(char **)(a3 + 8);
      *unsigned int v24 = 0.66667;
      if ((int)v9 >= 1) {
        bzero(v25, 4 * v9);
      }
      *(_DWORD *)&v25[v18 >> 30] = 1042983595;
      *(_DWORD *)&v25[v21 >> 30] = 1042983595;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
  }
  else
  {
    uint64_t v6 = a2[7];
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 28) = v6;
    *(unsigned char *)(a3 + 36) = 0;
    if (v6 == 6)
    {
      uint64_t v7 = *(int32x4_t **)(a3 + 8);
      **(_DWORD **)a3 = 1056964608;
      int32x4_t v8 = vdupq_n_s32(0x3DAAAAABu);
      *uint64_t v7 = v8;
      v7[1].i64[0] = v8.i64[0];
    }
    else
    {
      float v26 = 1.0 / (float)(int)v6;
      float v27 = cosf(v26 * 6.2832);
      float v28 = 1.0
          / (float)((float)(3.0
                          / (float)((float)(v26
                                          * (float)(0.625
                                                  - (float)((float)((float)(v27 * 0.25) + 0.375)
                                                          * (float)((float)(v27 * 0.25) + 0.375))))
                                  * 8.0))
                  + (float)(int)v6);
      **(float **)a3 = 1.0 - (float)(v28 * (float)(int)v6);
      if ((int)v6 >= 1)
      {
        float v29 = *(float **)(a3 + 8);
        do
        {
          *v29++ = v28;
          --v6;
        }
        while (v6);
      }
    }
  }
}

void sub_1B657ED24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 28) = v7;
  *(unsigned char *)(a3 + 36) = 0;
  int32x4_t v8 = *(void **)(a3 + 8);
  **(_DWORD **)a3 = 0;
  if ((int)v7 >= 1) {
    bzero(v8, 4 * v7);
  }
  uint64_t v9 = (int)a5[1];
  *((_DWORD *)v8 + (int)*a5) = 1069547520;
  *((_DWORD *)v8 + v9) = -1077936128;
  *(_DWORD *)(a4 + 24) = 1;
  *(_DWORD *)(a4 + 28) = v7;
  *(_DWORD *)(a4 + 32) = 0;
  *(unsigned char *)(a4 + 36) = 0;
  uint64_t v10 = *a5;
  uint64_t v11 = (int)v10;
  if ((int)v10 >= 1) {
    bzero(*(void **)(a4 + 8), 4 * v10);
  }
  uint64_t v12 = (int)a5[1];
  uint64_t v13 = (v12 - v10);
  if (v13 == 3)
  {
    uint64_t v14 = *(_DWORD **)a4;
    uint64_t v15 = *(void *)(a4 + 8);
    *uint64_t v14 = -1075989545;
    *(_DWORD *)(v15 + 4 * (int)v10) = -1084378153;
    *(_DWORD *)(v15 + 4 * v12) = -1084378153;
    int v16 = 1071494103;
    *(_DWORD *)(v15 + 4 * ((int)v10 + 1)) = 1071494103;
    int v17 = v10 + 2;
LABEL_17:
    *(_DWORD *)(v15 + 4 * v17) = v16;
    goto LABEL_18;
  }
  if ((int)v13 < 4)
  {
    float v32 = *(_DWORD **)a4;
    if (v13 == 2)
    {
      *float v32 = -1069547520;
      uint64_t v15 = *(void *)(a4 + 8);
      *(_DWORD *)(v15 + 4 * (int)v10) = 0;
      *(_DWORD *)(v15 + 4 * v12) = 0;
      int v17 = v10 + 1;
      int v16 = 1077936128;
      goto LABEL_17;
    }
    *float v32 = -1061158912;
    uint64_t v15 = *(void *)(a4 + 8);
    *(_DWORD *)(v15 + 4 * (int)v10) = 1077936128;
    *(_DWORD *)(v15 + 4 * v12) = 1077936128;
  }
  else
  {
    double v34 = 3.14159265 / (double)(int)v13;
    __double2 v18 = __sincos_stret(v34);
    unint64_t v19 = 0;
    float cosval = v18.__cosval;
    uint64_t v21 = *(_DWORD **)a4;
    uint64_t v15 = *(void *)(a4 + 8);
    *uint64_t v21 = 0;
    uint64x2_t v33 = (uint64x2_t)vdupq_n_s64(v13 - 2);
    float sinval = v18.__sinval;
    float v23 = sinval * -3.0;
    float v24 = (float)((float)(cosval * 2.0) + -2.0) * -3.0;
    float v25 = (float *)(v15 + 4 * v11);
    *float v25 = v23;
    *(float *)(v15 + 4 * v12) = v23;
    uint64_t v26 = v13 & 0xFFFFFFFE;
    float v27 = v25 + 2;
    do
    {
      int32x2_t v37 = vmovn_s64((int64x2_t)vcgeq_u64(v33, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v19), (int8x16_t)xmmword_1B6E4F270)));
      v28.i64[0] = (int)(v19 | 1);
      v28.i64[1] = vadd_s32(vdup_lane_s32((int32x2_t)v19, 0), (int32x2_t)0x200000002).i32[1];
      float64x2_t __x = vmulq_n_f64(vcvtq_f64_s64(v28), v34);
      double v36 = sin(__x.f64[1]);
      double v29 = sin(__x.f64[0]);
      if (v37.i8[0])
      {
        float v30 = v29;
        *(v27 - 1) = v24 * v30;
      }
      if (v37.i8[4])
      {
        float v31 = v36;
        *float v27 = v24 * v31;
      }
      v19 += 2;
      v27 += 2;
    }
    while (v26 != v19);
  }
LABEL_18:
  if ((int)v12 + 1 < (int)v7)
  {
    bzero((void *)(v15 + 4 * ((int)v12 + 1)), 4 * (v7 - v12 - 2) + 4);
  }
}

uint64_t sub_1B657EFD0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = a3;
  sub_1B641D478(a4, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  unint64_t v14 = v13;
  uint64_t v15 = BYTE4(v13);
  uint64_t v22 = sub_1B63CA534(BYTE4(v13), v13, v16, v17, v18, v19, v20, v21);
  int v37 = sub_1B641D56C(a4, v23, v24, v25, v26, v27, v28, v29);
  if (v37 || HIBYTE(v14) >= 3 && (sub_1B63CA9F0(BYTE6(v14), v30, v31, v32, v33, v34, v35, v36) & 1) != 0)
  {
    uint64_t v73 = a4;
    if (v10)
    {
      int v38 = sub_1B6E1BBA4(*a2, *(unsigned __int8 *)(a1 + 72));
      malloc_type_id_t v39 = 1175024481;
    }
    else
    {
      int v38 = *(_DWORD *)(*a2 + 8);
      malloc_type_id_t v39 = 995483109;
    }
    uint64_t v41 = v38;
    size_t v42 = v22 * v38;
    uint64_t v43 = (const UInt8 *)malloc_type_malloc(v42, v39);
    uint64_t v50 = v43;
    if (v38 >= 1)
    {
      uint64_t v51 = 0;
      uint64_t v52 = (uint64_t)v43;
      do
      {
        uint64_t v53 = *(void *)(a1 + 48);
        float32x4_t v54 = *(float32x4_t *)(v53 + v51);
        v54.i32[3] = *(void *)(v53 + v51 + 8);
        sub_1B65D6678(v15, v52, v44, v45, v46, v47, v48, v49, v54);
        v52 += (unsigned __int16)v22;
        v51 += 16;
      }
      while (16 * v41 != v51);
    }
    CFDataRef v55 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v50, v42, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
    uint64_t v40 = sub_1B641D00C(v37, v55, v15, 1, v41, v22, 0, v56);
    CFRelease(v55);
    BOOL v57 = *(unsigned char *)(a1 + 88) == 2;
    char v58 = *(unsigned char *)(a1 + 72);
    char v59 = (BOOL *)a5[2];
    uint64_t v60 = (BOOL *)a5[1];
    if (v60 >= v59)
    {
      unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((v60 - (unsigned char *)*a5) >> 3);
      unint64_t v63 = v62 + 1;
      if (v62 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v59 - (unsigned char *)*a5) >> 3);
      if (2 * v64 > v63) {
        unint64_t v63 = 2 * v64;
      }
      if (v64 >= 0x555555555555555) {
        unint64_t v65 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65) {
        int v66 = (char *)sub_1B6428204((uint64_t)(a5 + 2), v65);
      }
      else {
        int v66 = 0;
      }
      int v67 = (BOOL *)&v66[24 * v62];
      uint64_t v68 = &v66[24 * v65];
      *int v67 = v57;
      v67[1] = v58;
      *(_DWORD *)(v67 + 2) = 0;
      *((_WORD *)v67 + 3) = 0;
      *((void *)v67 + 1) = v73;
      *((void *)v67 + 2) = v40;
      uint64_t v61 = (char *)(v67 + 24);
      long long v70 = (char *)*a5;
      uint64_t v69 = (char *)a5[1];
      if (v69 != *a5)
      {
        do
        {
          long long v71 = *(_OWORD *)(v69 - 24);
          *((void *)v67 - 1) = *((void *)v69 - 1);
          *(_OWORD *)(v67 - 24) = v71;
          v67 -= 24;
          v69 -= 24;
        }
        while (v69 != v70);
        uint64_t v69 = (char *)*a5;
      }
      *a5 = v67;
      a5[1] = v61;
      a5[2] = v68;
      if (v69) {
        operator delete(v69);
      }
    }
    else
    {
      *uint64_t v60 = v57;
      v60[1] = v58;
      *(_DWORD *)(v60 + 2) = 0;
      *((_WORD *)v60 + 3) = 0;
      uint64_t v61 = (char *)(v60 + 24);
      *((void *)v60 + 1) = v73;
      *((void *)v60 + 2) = v40;
    }
    a5[1] = v61;
  }
  else
  {
    sub_1B63F2F54(16, @"Error: Position must be float3 to be subdivided. Actual type is %d", v31, v32, v33, v34, v35, v36, BYTE4(v14));
    return 0;
  }
  return v40;
}

char *sub_1B657F2A0(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  __n128 result = (char *)sub_1B6427C8C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_1B657F2E0(uint64_t *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  int v73 = *(_DWORD *)(*a1 + 4);
  int v10 = *(void **)(*(void *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  uint64_t v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4) {
    BOOL v12 = a5 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = v12;
  if (v12) {
    int v14 = 1;
  }
  else {
    int v14 = 3;
  }
  int v79 = &v82;
  int v80 = v11;
  int v81 = 33;
  uint64_t v83 = 0;
  uint64_t v61 = v10;
  char v60 = v13;
  if (v11 >= 0x22)
  {
    uint64_t v15 = operator new(4 * v11);
    char v13 = v60;
    int v10 = v61;
    uint64_t v83 = v15;
    int v79 = (uint64_t *)v15;
    int v81 = v11;
  }
  unsigned int v16 = v11 * v14;
  uint64_t v17 = (float *)v77;
  unsigned int v74 = v77;
  unsigned int v75 = v16;
  int v76 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = operator new(4 * v16);
    char v13 = v60;
    int v10 = v61;
    __p = v18;
    unsigned int v74 = v18;
    int v76 = v16;
    uint64_t v17 = (float *)v18;
  }
  uint64_t v19 = v17 + 1;
  uint64_t v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  uint64_t v21 = (uint64_t)&v17[v11 + 1];
  v72[0] = v17;
  v72[1] = v17 + 1;
  uint64_t v22 = v20 + 4 * v11;
  v72[2] = v20;
  memset(&v72[3], 0, 13);
  float32x4_t v54 = &v17[v11 + v11];
  CFDataRef v55 = &v17[v11];
  v71[0] = v55;
  v71[1] = v21;
  v71[2] = v22;
  memset(&v71[3], 0, 13);
  v69[0] = v54;
  v69[1] = v21 + 4 * v11;
  void v69[2] = v22 + 4 * v11;
  v70[0] = 0;
  *(void *)((char *)v70 + 5) = 0;
  v64[0] = v10;
  v64[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    uint64_t v23 = 0;
    long long v24 = 0uLL;
    uint64_t v58 = (uint64_t)&v17[v11 + 1];
    char v59 = v17;
    uint64_t v57 = v21 + 4 * v11;
    uint64_t v56 = v22 + 4 * v11;
    do
    {
      unsigned int v25 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v25 & 0x800) != 0 || (uint64_t v26 = v10[42], (v27 = *(_DWORD *)(v26 + 8 * v23)) == 0))
      {
        *(_OWORD *)(*a3 + 16 * v23) = v24;
        *(float32x4_t *)(*a3 + 16 * v23) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v23), *(float32x4_t *)(*a3 + 16 * v23));
        if ((v13 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = v24;
          *(_OWORD *)(*a5 + 16 * v23) = v24;
        }
      }
      else
      {
        uint64_t v28 = (2 * v23) | 1;
        uint64_t v62 = *(int *)(v26 + 4 * v28);
        uint64_t v63 = v10[45];
        int v65 = v23;
        int v66 = v23;
        int v29 = (v25 >> 7) & 0xF;
        int v67 = *(_DWORD *)(*(void *)(v64[0] + 336) + 8 * v23);
        int v68 = *(_DWORD *)(*(void *)(v64[0] + 264) + 8 * v23);
        if (v13) {
          sub_1B657DF14((uint64_t)&v73, (unsigned int *)v64, (uint64_t)v72, v29);
        }
        else {
          sub_1B657DB78((uint64_t)&v73, (int *)v64, (uint64_t)v72, (uint64_t)v71, (uint64_t)v69, v29);
        }
        uint64_t v30 = v79;
        int v10 = v61;
        long long v24 = 0uLL;
        if (v27 >= 1)
        {
          uint64_t v31 = (int *)(v63 + 4 * v62);
          uint64_t v32 = v61[15];
          uint64_t v33 = v27;
          uint64_t v34 = v79;
          do
          {
            uint64_t v35 = *v31++;
            *(_DWORD *)uint64_t v34 = *(_DWORD *)(v32 + 8 * v35 + 4 * (v23 == *(_DWORD *)(v32 + 8 * v35)));
            uint64_t v34 = (uint64_t *)((char *)v34 + 4);
            --v33;
          }
          while (v33);
        }
        uint64_t v36 = (char *)v30 + 4 * v27;
        char v13 = v60;
        if (LODWORD(v72[4]) || (!LODWORD(v71[4]) ? (char v37 = 1) : (char v37 = v60), (v37 & 1) == 0))
        {
          uint64_t v38 = v61[33];
          uint64_t v39 = *(unsigned int *)(v38 + 8 * v23);
          if ((int)v39 >= 1)
          {
            uint64_t v40 = *(int *)(v38 + 4 * v28);
            uint64_t v41 = (int *)(v61[36] + 4 * v40);
            size_t v42 = (_WORD *)(v61[39] + 2 * v40);
            uint64_t v43 = v61[3];
            uint64_t v44 = v61[6];
            uint64_t v45 = (_DWORD *)v30 + v27;
            do
            {
              uint64_t v46 = *v41++;
              uint64_t v47 = v44 + 4 * *(int *)(v43 + 8 * v46 + 4);
              int v48 = *(_DWORD *)(v43 + 8 * v46);
              LOWORD(v46) = *v42++;
              __int16 v49 = v46 + 2;
              if (v48 > (unsigned __int16)(v46 + 2)) {
                LOWORD(v48) = 0;
              }
              *v45++ = *(_DWORD *)(v47 + 4 * (unsigned __int16)(v49 - v48));
              --v39;
            }
            while (v39);
          }
        }
        *(_OWORD *)(*a3 + 16 * v23) = 0uLL;
        if (SLODWORD(v72[4]) >= 1)
        {
          uint64_t v50 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v50]), *(float *)(v20 + 4 * v50));
            ++v50;
          }
          while (v50 < SLODWORD(v72[4]));
        }
        if (SHIDWORD(v72[3]) >= 1)
        {
          uint64_t v51 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v51)), *(float *)&v19[4 * v51]);
            ++v51;
          }
          while (v51 < SHIDWORD(v72[3]));
        }
        *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v59);
        if ((v60 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v23) = 0uLL;
          if (SLODWORD(v71[4]) >= 1)
          {
            uint64_t v52 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v52]), *(float *)(v20 + 4 * v11 + 4 * v52));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v52]), *(float *)(v56 + 4 * v52));
              ++v52;
            }
            while (v52 < SLODWORD(v71[4]));
          }
          if (SHIDWORD(v71[3]) >= 1)
          {
            uint64_t v53 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v53)), *(float *)(v58 + 4 * v53));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v53)), *(float *)(v57 + 4 * v53));
              ++v53;
            }
            while (v53 < SHIDWORD(v71[3]));
          }
          *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v55);
          *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v54);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    uint64_t v18 = __p;
  }
  operator delete(v18);
  operator delete(v83);
}

void sub_1B657F824(uint64_t *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  int v73 = *(_DWORD *)(*a1 + 4);
  int v10 = *(void **)(*(void *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  uint64_t v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4) {
    BOOL v12 = a5 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = v12;
  if (v12) {
    int v14 = 1;
  }
  else {
    int v14 = 3;
  }
  int v79 = &v82;
  int v80 = v11;
  int v81 = 33;
  uint64_t v83 = 0;
  uint64_t v61 = v10;
  char v60 = v13;
  if (v11 >= 0x22)
  {
    uint64_t v15 = operator new(4 * v11);
    char v13 = v60;
    int v10 = v61;
    uint64_t v83 = v15;
    int v79 = (uint64_t *)v15;
    int v81 = v11;
  }
  unsigned int v16 = v11 * v14;
  uint64_t v17 = (float *)v77;
  unsigned int v74 = v77;
  unsigned int v75 = v16;
  int v76 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = operator new(4 * v16);
    char v13 = v60;
    int v10 = v61;
    __p = v18;
    unsigned int v74 = v18;
    int v76 = v16;
    uint64_t v17 = (float *)v18;
  }
  uint64_t v19 = v17 + 1;
  uint64_t v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  uint64_t v21 = (uint64_t)&v17[v11 + 1];
  v72[0] = v17;
  v72[1] = v17 + 1;
  uint64_t v22 = v20 + 4 * v11;
  v72[2] = v20;
  memset(&v72[3], 0, 13);
  float32x4_t v54 = &v17[v11 + v11];
  CFDataRef v55 = &v17[v11];
  v71[0] = v55;
  v71[1] = v21;
  v71[2] = v22;
  memset(&v71[3], 0, 13);
  v69[0] = v54;
  v69[1] = v21 + 4 * v11;
  void v69[2] = v22 + 4 * v11;
  v70[0] = 0;
  *(void *)((char *)v70 + 5) = 0;
  v64[0] = v10;
  v64[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    uint64_t v23 = 0;
    long long v24 = 0uLL;
    uint64_t v58 = (uint64_t)&v17[v11 + 1];
    char v59 = v17;
    uint64_t v57 = v21 + 4 * v11;
    uint64_t v56 = v22 + 4 * v11;
    do
    {
      unsigned int v25 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v25 & 0x800) != 0 || (uint64_t v26 = v10[42], (v27 = *(_DWORD *)(v26 + 8 * v23)) == 0))
      {
        *(_OWORD *)(*a3 + 16 * v23) = v24;
        *(float32x4_t *)(*a3 + 16 * v23) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v23), *(float32x4_t *)(*a3 + 16 * v23));
        if ((v13 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = v24;
          *(_OWORD *)(*a5 + 16 * v23) = v24;
        }
      }
      else
      {
        uint64_t v28 = (2 * v23) | 1;
        uint64_t v62 = *(int *)(v26 + 4 * v28);
        uint64_t v63 = v10[45];
        int v65 = v23;
        int v66 = v23;
        int v29 = (v25 >> 7) & 0xF;
        int v67 = *(_DWORD *)(*(void *)(v64[0] + 336) + 8 * v23);
        int v68 = *(_DWORD *)(*(void *)(v64[0] + 264) + 8 * v23);
        if (v13) {
          sub_1B657EAB0((uint64_t)&v73, (unsigned int *)v64, (uint64_t)v72, v29);
        }
        else {
          sub_1B657E6A0((uint64_t)&v73, (int *)v64, (uint64_t)v72, (uint64_t)v71, (uint64_t)v69, v29);
        }
        uint64_t v30 = v79;
        int v10 = v61;
        long long v24 = 0uLL;
        if (v27 >= 1)
        {
          uint64_t v31 = (int *)(v63 + 4 * v62);
          uint64_t v32 = v61[15];
          uint64_t v33 = v27;
          uint64_t v34 = v79;
          do
          {
            uint64_t v35 = *v31++;
            *(_DWORD *)uint64_t v34 = *(_DWORD *)(v32 + 8 * v35 + 4 * (v23 == *(_DWORD *)(v32 + 8 * v35)));
            uint64_t v34 = (uint64_t *)((char *)v34 + 4);
            --v33;
          }
          while (v33);
        }
        uint64_t v36 = (char *)v30 + 4 * v27;
        char v13 = v60;
        if (LODWORD(v72[4]) || (!LODWORD(v71[4]) ? (char v37 = 1) : (char v37 = v60), (v37 & 1) == 0))
        {
          uint64_t v38 = v61[33];
          uint64_t v39 = *(unsigned int *)(v38 + 8 * v23);
          if ((int)v39 >= 1)
          {
            uint64_t v40 = *(int *)(v38 + 4 * v28);
            uint64_t v41 = (int *)(v61[36] + 4 * v40);
            size_t v42 = (_WORD *)(v61[39] + 2 * v40);
            uint64_t v43 = v61[3];
            uint64_t v44 = v61[6];
            uint64_t v45 = (_DWORD *)v30 + v27;
            do
            {
              uint64_t v46 = *v41++;
              uint64_t v47 = v44 + 4 * *(int *)(v43 + 8 * v46 + 4);
              int v48 = *(_DWORD *)(v43 + 8 * v46);
              LOWORD(v46) = *v42++;
              __int16 v49 = v46 + 2;
              if (v48 > (unsigned __int16)(v46 + 2)) {
                LOWORD(v48) = 0;
              }
              *v45++ = *(_DWORD *)(v47 + 4 * (unsigned __int16)(v49 - v48));
              --v39;
            }
            while (v39);
          }
        }
        *(_OWORD *)(*a3 + 16 * v23) = 0uLL;
        if (SLODWORD(v72[4]) >= 1)
        {
          uint64_t v50 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v50]), *(float *)(v20 + 4 * v50));
            ++v50;
          }
          while (v50 < SLODWORD(v72[4]));
        }
        if (SHIDWORD(v72[3]) >= 1)
        {
          uint64_t v51 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v51)), *(float *)&v19[4 * v51]);
            ++v51;
          }
          while (v51 < SHIDWORD(v72[3]));
        }
        *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v59);
        if ((v60 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v23) = 0uLL;
          if (SLODWORD(v71[4]) >= 1)
          {
            uint64_t v52 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v52]), *(float *)(v20 + 4 * v11 + 4 * v52));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v52]), *(float *)(v56 + 4 * v52));
              ++v52;
            }
            while (v52 < SLODWORD(v71[4]));
          }
          if (SHIDWORD(v71[3]) >= 1)
          {
            uint64_t v53 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v53)), *(float *)(v58 + 4 * v53));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v53)), *(float *)(v57 + 4 * v53));
              ++v53;
            }
            while (v53 < SHIDWORD(v71[3]));
          }
          *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v55);
          *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v54);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    uint64_t v18 = __p;
  }
  operator delete(v18);
  operator delete(v83);
}

void sub_1B657FD68(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 40)
                 + 8 * (((unint64_t)*(unsigned __int8 *)(*(void *)a1 + 8) >> 2) & 0xF));
  uint64_t v10 = (2 * *(int *)(v9 + 20)) | 1;
  if (a4) {
    BOOL v11 = a5 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (v11) {
    int v13 = 1;
  }
  else {
    int v13 = 3;
  }
  uint64_t v39 = (int *)&v42;
  int v40 = v10;
  int v41 = 33;
  uint64_t v43 = 0;
  if (v10 >= 0x22)
  {
    uint64_t v43 = (int *)operator new(4 * v10);
    uint64_t v39 = v43;
    int v41 = v10;
  }
  unsigned int v14 = v10 * v13;
  uint64_t v15 = (float *)&v37;
  __p = 0;
  if (v14 < 0x64)
  {
    unsigned int v16 = 0;
  }
  else
  {
    unsigned int v16 = operator new(4 * v14);
    __p = v16;
    uint64_t v15 = (float *)v16;
  }
  if (*(int *)(v9 + 8) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &v15[v10];
    uint64_t v20 = &v19[v10];
    do
    {
      if ((*(_WORD *)(*(void *)(v9 + 432) + 2 * v17) & 0x800) != 0
        || (v21 = (unsigned int *)(*(void *)(v9 + 336) + 8 * v17), uint64_t v22 = *v21, !v22))
      {
        *(_OWORD *)(*a3 + 16 * v17) = 0uLL;
        *(float32x4_t *)(*a3 + 16 * v17) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v17), *(float32x4_t *)(*a3 + 16 * v17));
        if ((v12 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v17) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v17) = 0uLL;
        }
      }
      else
      {
        uint64_t v23 = *(void *)(v9 + 360);
        uint64_t v24 = (int)v21[1];
        unsigned int v25 = v15;
        if ((v12 & 1) == 0)
        {
          *uint64_t v15 = 1.0;
          *(void *)uint64_t v19 = 0x3F800000BF800000;
          v19[2] = 0.0;
          unsigned int v25 = &v19[v10 + 2];
          uint64_t v18 = 2;
          *(void *)uint64_t v20 = 3212836864;
        }
        *unsigned int v25 = 1.0;
        uint64_t v26 = v39;
        if ((int)v22 >= 1)
        {
          int v27 = (int *)(v23 + 4 * v24);
          uint64_t v28 = *(void *)(v9 + 120);
          int v29 = v39;
          do
          {
            uint64_t v30 = *v27++;
            *v29++ = *(_DWORD *)(v28 + 8 * v30 + 4 * (v17 == *(_DWORD *)(v28 + 8 * v30)));
            --v22;
          }
          while (v22);
        }
        *(_OWORD *)(*a3 + 16 * v17) = 0uLL;
        *(float32x4_t *)(*a3 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v15);
        if ((v12 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v17) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v17) = 0uLL;
          uint64_t v31 = v18;
          uint64_t v32 = v19 + 1;
          uint64_t v33 = &v19[v10 + 1];
          if ((int)v18 >= 1)
          {
            do
            {
              float v34 = *v32++;
              *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v17), *(float32x4_t *)(*a2 + 16 * *v26), v34);
              uint64_t v36 = *v26++;
              uint64_t v35 = v36;
              *(float *)&uint64_t v36 = *v33++;
              *(float32x4_t *)(*a5 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v35), *(float *)&v36);
              --v31;
            }
            while (v31);
          }
          *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v19);
          *(float32x4_t *)(*a5 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v20);
        }
      }
      ++v17;
    }
    while (v17 < *(int *)(v9 + 8));
    unsigned int v16 = __p;
  }
  operator delete(v16);
  operator delete(v43);
}

uint64_t sub_1B6580080(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = a3;
  sub_1B641D478(a4, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  unint64_t v14 = v13;
  uint64_t v15 = BYTE4(v13);
  uint64_t v22 = sub_1B63CA534(BYTE4(v13), v13, v16, v17, v18, v19, v20, v21);
  int v37 = sub_1B641D56C(a4, v23, v24, v25, v26, v27, v28, v29);
  if (v37 || HIBYTE(v14) >= 3 && (sub_1B63CA9F0(BYTE6(v14), v30, v31, v32, v33, v34, v35, v36) & 1) != 0)
  {
    uint64_t v71 = a4;
    if (v10)
    {
      int v38 = sub_1B6E1BBA4(*a2, *(unsigned __int8 *)(a1 + 72));
      malloc_type_id_t v39 = 1175024481;
    }
    else
    {
      int v38 = *(_DWORD *)(*a2 + 8);
      malloc_type_id_t v39 = 995483109;
    }
    uint64_t v41 = v38;
    size_t v42 = v22 * v38;
    uint64_t v43 = (const UInt8 *)malloc_type_malloc(v42, v39);
    uint64_t v50 = v43;
    if (v38 >= 1)
    {
      uint64_t v51 = 0;
      uint64_t v52 = (uint64_t)v43;
      do
      {
        sub_1B65D6678(v15, v52, v44, v45, v46, v47, v48, v49, *(float32x4_t *)(*(void *)(a1 + 48) + v51));
        v52 += (unsigned __int16)v22;
        v51 += 16;
      }
      while (16 * v41 != v51);
    }
    CFDataRef v53 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v50, v42, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
    uint64_t v40 = sub_1B641D00C(v37, v53, v15, 1, v41, v22, 0, v54);
    CFRelease(v53);
    BOOL v55 = *(unsigned char *)(a1 + 88) == 2;
    char v56 = *(unsigned char *)(a1 + 72);
    uint64_t v57 = (BOOL *)a5[2];
    uint64_t v58 = (BOOL *)a5[1];
    if (v58 >= v57)
    {
      unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((v58 - (unsigned char *)*a5) >> 3);
      unint64_t v61 = v60 + 1;
      if (v60 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (unsigned char *)*a5) >> 3);
      if (2 * v62 > v61) {
        unint64_t v61 = 2 * v62;
      }
      if (v62 >= 0x555555555555555) {
        unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63) {
        unint64_t v64 = (char *)sub_1B6428204((uint64_t)(a5 + 2), v63);
      }
      else {
        unint64_t v64 = 0;
      }
      int v65 = (BOOL *)&v64[24 * v60];
      int v66 = &v64[24 * v63];
      *int v65 = v55;
      v65[1] = v56;
      *(_DWORD *)(v65 + 2) = 0;
      *((_WORD *)v65 + 3) = 0;
      *((void *)v65 + 1) = v71;
      *((void *)v65 + 2) = v40;
      char v59 = (char *)(v65 + 24);
      int v68 = (char *)*a5;
      int v67 = (char *)a5[1];
      if (v67 != *a5)
      {
        do
        {
          long long v69 = *(_OWORD *)(v67 - 24);
          *((void *)v65 - 1) = *((void *)v67 - 1);
          *(_OWORD *)(v65 - 24) = v69;
          v65 -= 24;
          v67 -= 24;
        }
        while (v67 != v68);
        int v67 = (char *)*a5;
      }
      *a5 = v65;
      a5[1] = v59;
      a5[2] = v66;
      if (v67) {
        operator delete(v67);
      }
    }
    else
    {
      *uint64_t v58 = v55;
      v58[1] = v56;
      *(_DWORD *)(v58 + 2) = 0;
      *((_WORD *)v58 + 3) = 0;
      char v59 = (char *)(v58 + 24);
      *((void *)v58 + 1) = v71;
      *((void *)v58 + 2) = v40;
    }
    a5[1] = v59;
  }
  else
  {
    sub_1B63F2F54(16, @"Error: Position must be float3 to be subdivided. Actual type is %d", v31, v32, v33, v34, v35, v36, BYTE4(v14));
    return 0;
  }
  return v40;
}

void sub_1B658034C(uint64_t *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  int v74 = *(_DWORD *)(*a1 + 4);
  int v10 = *(void **)(*(void *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  uint64_t v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4) {
    BOOL v12 = a5 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = v12;
  if (v12) {
    int v14 = 1;
  }
  else {
    int v14 = 3;
  }
  int v80 = &v83;
  int v81 = v11;
  int v82 = 33;
  uint64_t v84 = 0;
  unint64_t v62 = v10;
  char v61 = v13;
  if (v11 >= 0x22)
  {
    uint64_t v15 = operator new(4 * v11);
    char v13 = v61;
    int v10 = v62;
    uint64_t v84 = v15;
    int v80 = (uint64_t *)v15;
    int v82 = v11;
  }
  unsigned int v16 = v11 * v14;
  uint64_t v17 = (float *)v78;
  unsigned int v75 = v78;
  unsigned int v76 = v16;
  int v77 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = operator new(4 * v16);
    char v13 = v61;
    int v10 = v62;
    __p = v18;
    unsigned int v75 = v18;
    int v77 = v16;
    uint64_t v17 = (float *)v18;
  }
  uint64_t v19 = v17 + 1;
  uint64_t v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  uint64_t v21 = (uint64_t)&v17[v11 + 1];
  v73[0] = v17;
  v73[1] = v17 + 1;
  uint64_t v22 = v20 + 4 * v11;
  v73[2] = v20;
  memset(&v73[3], 0, 13);
  BOOL v55 = &v17[v11 + v11];
  char v56 = &v17[v11];
  v72[0] = v56;
  v72[1] = v21;
  v72[2] = v22;
  memset(&v72[3], 0, 13);
  v70[0] = v55;
  v70[1] = v21 + 4 * v11;
  void v70[2] = v22 + 4 * v11;
  v71[0] = 0;
  *(void *)((char *)v71 + 5) = 0;
  v65[0] = v10;
  v65[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v59 = (uint64_t)&v17[v11 + 1];
    unint64_t v60 = v17;
    uint64_t v58 = v21 + 4 * v11;
    uint64_t v57 = v22 + 4 * v11;
    do
    {
      unsigned int v24 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v24 & 0x800) != 0 || (v25 = v10[42], (int v26 = *(_DWORD *)(v25 + 8 * v23)) == 0))
      {
        uint64_t v29 = (void *)(*a3 + 16 * v23);
        *uint64_t v29 = 0;
        v29[1] = 0;
        *(float32x4_t *)(*a3 + 16 * v23) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v23), *(float32x4_t *)(*a3 + 16 * v23));
        if ((v13 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = 0u;
          *(_OWORD *)(*a5 + 16 * v23) = 0u;
        }
      }
      else
      {
        uint64_t v27 = (2 * v23) | 1;
        uint64_t v63 = *(int *)(v25 + 4 * v27);
        uint64_t v64 = v10[45];
        int v66 = v23;
        int v67 = v23;
        int v28 = (v24 >> 7) & 0xF;
        int v68 = *(_DWORD *)(*(void *)(v65[0] + 336) + 8 * v23);
        int v69 = *(_DWORD *)(*(void *)(v65[0] + 264) + 8 * v23);
        if (v13) {
          sub_1B657DF14((uint64_t)&v74, (unsigned int *)v65, (uint64_t)v73, v28);
        }
        else {
          sub_1B657DB78((uint64_t)&v74, (int *)v65, (uint64_t)v73, (uint64_t)v72, (uint64_t)v70, v28);
        }
        uint64_t v30 = v80;
        int v10 = v62;
        if (v26 >= 1)
        {
          uint64_t v31 = (int *)(v64 + 4 * v63);
          uint64_t v32 = v62[15];
          uint64_t v33 = v26;
          uint64_t v34 = v80;
          do
          {
            uint64_t v35 = *v31++;
            *(_DWORD *)uint64_t v34 = *(_DWORD *)(v32 + 8 * v35 + 4 * (v23 == *(_DWORD *)(v32 + 8 * v35)));
            uint64_t v34 = (uint64_t *)((char *)v34 + 4);
            --v33;
          }
          while (v33);
        }
        uint64_t v36 = (char *)v30 + 4 * v26;
        char v13 = v61;
        if (LODWORD(v73[4]) || (!LODWORD(v72[4]) ? (char v37 = 1) : (char v37 = v61), (v37 & 1) == 0))
        {
          uint64_t v38 = v62[33];
          uint64_t v39 = *(unsigned int *)(v38 + 8 * v23);
          if ((int)v39 >= 1)
          {
            uint64_t v40 = *(int *)(v38 + 4 * v27);
            uint64_t v41 = (int *)(v62[36] + 4 * v40);
            size_t v42 = (_WORD *)(v62[39] + 2 * v40);
            uint64_t v43 = v62[3];
            uint64_t v44 = v62[6];
            uint64_t v45 = (_DWORD *)v30 + v26;
            do
            {
              uint64_t v46 = *v41++;
              uint64_t v47 = v44 + 4 * *(int *)(v43 + 8 * v46 + 4);
              int v48 = *(_DWORD *)(v43 + 8 * v46);
              LOWORD(v46) = *v42++;
              __int16 v49 = v46 + 2;
              if (v48 > (unsigned __int16)(v46 + 2)) {
                LOWORD(v48) = 0;
              }
              *v45++ = *(_DWORD *)(v47 + 4 * (unsigned __int16)(v49 - v48));
              --v39;
            }
            while (v39);
          }
        }
        uint64_t v50 = (void *)(*a3 + 16 * v23);
        *uint64_t v50 = 0;
        v50[1] = 0;
        if (SLODWORD(v73[4]) >= 1)
        {
          uint64_t v51 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v51]), *(float *)(v20 + 4 * v51));
            ++v51;
          }
          while (v51 < SLODWORD(v73[4]));
        }
        if (SHIDWORD(v73[3]) >= 1)
        {
          uint64_t v52 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v52)), *(float *)&v19[4 * v52]);
            ++v52;
          }
          while (v52 < SHIDWORD(v73[3]));
        }
        *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v60);
        if ((v61 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = 0u;
          *(_OWORD *)(*a5 + 16 * v23) = 0u;
          if (SLODWORD(v72[4]) >= 1)
          {
            uint64_t v53 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v53]), *(float *)(v20 + 4 * v11 + 4 * v53));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v53]), *(float *)(v57 + 4 * v53));
              ++v53;
            }
            while (v53 < SLODWORD(v72[4]));
          }
          if (SHIDWORD(v72[3]) >= 1)
          {
            uint64_t v54 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v54)), *(float *)(v59 + 4 * v54));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v54)), *(float *)(v58 + 4 * v54));
              ++v54;
            }
            while (v54 < SHIDWORD(v72[3]));
          }
          *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v56);
          *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v55);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    uint64_t v18 = __p;
  }
  operator delete(v18);
  operator delete(v84);
}

void sub_1B6580898(uint64_t *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  int v74 = *(_DWORD *)(*a1 + 4);
  int v10 = *(void **)(*(void *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  uint64_t v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4) {
    BOOL v12 = a5 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = v12;
  if (v12) {
    int v14 = 1;
  }
  else {
    int v14 = 3;
  }
  int v80 = &v83;
  int v81 = v11;
  int v82 = 33;
  uint64_t v84 = 0;
  unint64_t v62 = v10;
  char v61 = v13;
  if (v11 >= 0x22)
  {
    uint64_t v15 = operator new(4 * v11);
    char v13 = v61;
    int v10 = v62;
    uint64_t v84 = v15;
    int v80 = (uint64_t *)v15;
    int v82 = v11;
  }
  unsigned int v16 = v11 * v14;
  uint64_t v17 = (float *)v78;
  unsigned int v75 = v78;
  unsigned int v76 = v16;
  int v77 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = operator new(4 * v16);
    char v13 = v61;
    int v10 = v62;
    __p = v18;
    unsigned int v75 = v18;
    int v77 = v16;
    uint64_t v17 = (float *)v18;
  }
  uint64_t v19 = v17 + 1;
  uint64_t v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  uint64_t v21 = (uint64_t)&v17[v11 + 1];
  v73[0] = v17;
  v73[1] = v17 + 1;
  uint64_t v22 = v20 + 4 * v11;
  v73[2] = v20;
  memset(&v73[3], 0, 13);
  BOOL v55 = &v17[v11 + v11];
  char v56 = &v17[v11];
  v72[0] = v56;
  v72[1] = v21;
  v72[2] = v22;
  memset(&v72[3], 0, 13);
  v70[0] = v55;
  v70[1] = v21 + 4 * v11;
  void v70[2] = v22 + 4 * v11;
  v71[0] = 0;
  *(void *)((char *)v71 + 5) = 0;
  v65[0] = v10;
  v65[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v59 = (uint64_t)&v17[v11 + 1];
    unint64_t v60 = v17;
    uint64_t v58 = v21 + 4 * v11;
    uint64_t v57 = v22 + 4 * v11;
    do
    {
      unsigned int v24 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v24 & 0x800) != 0 || (v25 = v10[42], (int v26 = *(_DWORD *)(v25 + 8 * v23)) == 0))
      {
        uint64_t v29 = (void *)(*a3 + 16 * v23);
        *uint64_t v29 = 0;
        v29[1] = 0;
        *(float32x4_t *)(*a3 + 16 * v23) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v23), *(float32x4_t *)(*a3 + 16 * v23));
        if ((v13 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = 0u;
          *(_OWORD *)(*a5 + 16 * v23) = 0u;
        }
      }
      else
      {
        uint64_t v27 = (2 * v23) | 1;
        uint64_t v63 = *(int *)(v25 + 4 * v27);
        uint64_t v64 = v10[45];
        int v66 = v23;
        int v67 = v23;
        int v28 = (v24 >> 7) & 0xF;
        int v68 = *(_DWORD *)(*(void *)(v65[0] + 336) + 8 * v23);
        int v69 = *(_DWORD *)(*(void *)(v65[0] + 264) + 8 * v23);
        if (v13) {
          sub_1B657EAB0((uint64_t)&v74, (unsigned int *)v65, (uint64_t)v73, v28);
        }
        else {
          sub_1B657E6A0((uint64_t)&v74, (int *)v65, (uint64_t)v73, (uint64_t)v72, (uint64_t)v70, v28);
        }
        uint64_t v30 = v80;
        int v10 = v62;
        if (v26 >= 1)
        {
          uint64_t v31 = (int *)(v64 + 4 * v63);
          uint64_t v32 = v62[15];
          uint64_t v33 = v26;
          uint64_t v34 = v80;
          do
          {
            uint64_t v35 = *v31++;
            *(_DWORD *)uint64_t v34 = *(_DWORD *)(v32 + 8 * v35 + 4 * (v23 == *(_DWORD *)(v32 + 8 * v35)));
            uint64_t v34 = (uint64_t *)((char *)v34 + 4);
            --v33;
          }
          while (v33);
        }
        uint64_t v36 = (char *)v30 + 4 * v26;
        char v13 = v61;
        if (LODWORD(v73[4]) || (!LODWORD(v72[4]) ? (char v37 = 1) : (char v37 = v61), (v37 & 1) == 0))
        {
          uint64_t v38 = v62[33];
          uint64_t v39 = *(unsigned int *)(v38 + 8 * v23);
          if ((int)v39 >= 1)
          {
            uint64_t v40 = *(int *)(v38 + 4 * v27);
            uint64_t v41 = (int *)(v62[36] + 4 * v40);
            size_t v42 = (_WORD *)(v62[39] + 2 * v40);
            uint64_t v43 = v62[3];
            uint64_t v44 = v62[6];
            uint64_t v45 = (_DWORD *)v30 + v26;
            do
            {
              uint64_t v46 = *v41++;
              uint64_t v47 = v44 + 4 * *(int *)(v43 + 8 * v46 + 4);
              int v48 = *(_DWORD *)(v43 + 8 * v46);
              LOWORD(v46) = *v42++;
              __int16 v49 = v46 + 2;
              if (v48 > (unsigned __int16)(v46 + 2)) {
                LOWORD(v48) = 0;
              }
              *v45++ = *(_DWORD *)(v47 + 4 * (unsigned __int16)(v49 - v48));
              --v39;
            }
            while (v39);
          }
        }
        uint64_t v50 = (void *)(*a3 + 16 * v23);
        *uint64_t v50 = 0;
        v50[1] = 0;
        if (SLODWORD(v73[4]) >= 1)
        {
          uint64_t v51 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v51]), *(float *)(v20 + 4 * v51));
            ++v51;
          }
          while (v51 < SLODWORD(v73[4]));
        }
        if (SHIDWORD(v73[3]) >= 1)
        {
          uint64_t v52 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v52)), *(float *)&v19[4 * v52]);
            ++v52;
          }
          while (v52 < SHIDWORD(v73[3]));
        }
        *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v60);
        if ((v61 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = 0u;
          *(_OWORD *)(*a5 + 16 * v23) = 0u;
          if (SLODWORD(v72[4]) >= 1)
          {
            uint64_t v53 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v53]), *(float *)(v20 + 4 * v11 + 4 * v53));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v36[4 * v53]), *(float *)(v57 + 4 * v53));
              ++v53;
            }
            while (v53 < SLODWORD(v72[4]));
          }
          if (SHIDWORD(v72[3]) >= 1)
          {
            uint64_t v54 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v54)), *(float *)(v59 + 4 * v54));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v30 + v54)), *(float *)(v58 + 4 * v54));
              ++v54;
            }
            while (v54 < SHIDWORD(v72[3]));
          }
          *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v56);
          *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v55);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    uint64_t v18 = __p;
  }
  operator delete(v18);
  operator delete(v84);
}

void sub_1B6580DE4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 40)
                 + 8 * (((unint64_t)*(unsigned __int8 *)(*(void *)a1 + 8) >> 2) & 0xF));
  uint64_t v10 = (2 * *(int *)(v9 + 20)) | 1;
  if (a4) {
    BOOL v11 = a5 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (v11) {
    int v13 = 1;
  }
  else {
    int v13 = 3;
  }
  uint64_t v41 = (int *)&v44;
  int v42 = v10;
  int v43 = 33;
  uint64_t v45 = 0;
  if (v10 >= 0x22)
  {
    uint64_t v45 = (int *)operator new(4 * v10);
    uint64_t v41 = v45;
    int v43 = v10;
  }
  unsigned int v14 = v10 * v13;
  uint64_t v15 = (float *)&v39;
  __p = 0;
  if (v14 < 0x64)
  {
    unsigned int v16 = 0;
  }
  else
  {
    unsigned int v16 = operator new(4 * v14);
    __p = v16;
    uint64_t v15 = (float *)v16;
  }
  if (*(int *)(v9 + 8) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &v15[v10];
    uint64_t v20 = &v19[v10];
    do
    {
      if ((*(_WORD *)(*(void *)(v9 + 432) + 2 * v17) & 0x800) != 0
        || (v21 = (unsigned int *)(*(void *)(v9 + 336) + 8 * v17), uint64_t v22 = *v21, !v22))
      {
        uint64_t v38 = (void *)(*a3 + 16 * v17);
        *uint64_t v38 = 0;
        v38[1] = 0;
        *(float32x4_t *)(*a3 + 16 * v17) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v17), *(float32x4_t *)(*a3 + 16 * v17));
        if ((v12 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v17) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v17) = 0uLL;
        }
      }
      else
      {
        uint64_t v23 = *(void *)(v9 + 360);
        uint64_t v24 = (int)v21[1];
        uint64_t v25 = v15;
        if ((v12 & 1) == 0)
        {
          *uint64_t v15 = 1.0;
          *(void *)uint64_t v19 = 0x3F800000BF800000;
          v19[2] = 0.0;
          uint64_t v25 = &v19[v10 + 2];
          uint64_t v18 = 2;
          *(void *)uint64_t v20 = 3212836864;
        }
        *uint64_t v25 = 1.0;
        int v26 = v41;
        if ((int)v22 >= 1)
        {
          uint64_t v27 = (int *)(v23 + 4 * v24);
          uint64_t v28 = *(void *)(v9 + 120);
          uint64_t v29 = v41;
          do
          {
            uint64_t v30 = *v27++;
            *v29++ = *(_DWORD *)(v28 + 8 * v30 + 4 * (v17 == *(_DWORD *)(v28 + 8 * v30)));
            --v22;
          }
          while (v22);
        }
        uint64_t v31 = (void *)(*a3 + 16 * v17);
        void *v31 = 0;
        v31[1] = 0;
        *(float32x4_t *)(*a3 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v15);
        if ((v12 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v17) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v17) = 0uLL;
          uint64_t v32 = v18;
          uint64_t v33 = v19 + 1;
          uint64_t v34 = &v19[v10 + 1];
          if ((int)v18 >= 1)
          {
            do
            {
              float v35 = *v33++;
              *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v17), *(float32x4_t *)(*a2 + 16 * *v26), v35);
              uint64_t v37 = *v26++;
              uint64_t v36 = v37;
              *(float *)&uint64_t v37 = *v34++;
              *(float32x4_t *)(*a5 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v36), *(float *)&v37);
              --v32;
            }
            while (v32);
          }
          *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v19);
          *(float32x4_t *)(*a5 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v20);
        }
      }
      ++v17;
    }
    while (v17 < *(int *)(v9 + 8));
    unsigned int v16 = __p;
  }
  operator delete(v16);
  operator delete(v45);
}

void *sub_1B6581104(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_1B657F2A0(a1, v5 >> 4);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

_OWORD *sub_1B658116C(uint64_t **a1, float32x4_t *a2, uint64_t a3)
{
  int64_t v5 = sub_1B65811F8((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_DWORD *)v6 + 12) = *(_DWORD *)(a3 + 16);
    sub_1B644FF08(a1, (uint64_t)v9, v7, (uint64_t *)v6);
  }
  return v6;
}

float32x4_t **sub_1B65811F8(uint64_t a1, float32x4_t ***a2, float32x4_t *a3)
{
  int64_t v5 = *(float32x4_t **)(a1 + 8);
  __n128 result = (float32x4_t **)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    float32x4_t v6 = *a3;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (float32x4_t **)v4;
        float32x4_t v8 = v4[2];
        int32x4_t v9 = vceqq_f32(v6, v8);
        uint32x4_t v10 = (uint32x4_t)v9;
        v10.i32[3] = v9.i32[2];
        if ((vminvq_u32(v10) & 0x80000000) != 0) {
          goto LABEL_28;
        }
        int32x4_t v11 = vcgtq_f32(v8, v6);
        if (!v11.i32[0]) {
          break;
        }
LABEL_5:
        uint64_t v4 = *v7;
        __n128 result = v7;
        if (!*v7) {
          goto LABEL_28;
        }
      }
      if (v9.i32[0])
      {
        if (v11.i32[1]) {
          goto LABEL_5;
        }
        __int32 v12 = v9.i32[1];
        if (v9.i32[1] && v11.i32[2] != 0) {
          goto LABEL_5;
        }
        int32x4_t v14 = vcgtq_f32(v6, v8);
        int32x2_t v15 = vceqz_s32(vrev64_s32(*(int32x2_t *)v14.i8));
        if (v12) {
          BOOL v16 = v14.i32[2] == 0;
        }
        else {
          BOOL v16 = 1;
        }
        int v17 = !v16;
        if ((v15.i8[4] & 1) != 0 && (v15.i8[0] & 1) != 0 && !v17) {
          goto LABEL_28;
        }
      }
      else if ((vmovn_s32(vcgtq_f32(v6, v8)).u8[0] & 1) == 0)
      {
        goto LABEL_28;
      }
      __n128 result = v7 + 1;
      uint64_t v4 = v7[1];
      if (!v4) {
        goto LABEL_28;
      }
    }
  }
  uint64_t v7 = result;
LABEL_28:
  *a2 = v7;
  return result;
}

uint64_t sub_1B65812C4(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  if (!sub_1B6E2CB2C(a1, a2)
    || !sub_1B6E1762C(a1, v7, v8, v9, v10, v11, v12, v13)
    || !sub_1B6E2CC74(a1, (uint64_t)a2)
    || !sub_1B6E177D4(a1, a4 & 1, (void (*)(uint64_t, char *, uint64_t))sub_1B6E2CF28, (uint64_t)a2, v14, v15, v16, v17)|| !sub_1B6E2CD28(a1, (uint64_t)a2)|| !sub_1B6E178AC(a1)|| !sub_1B6E2CF54(a1, (uint64_t)a2))
  {
    return 0;
  }

  return sub_1B6E17D40(a1);
}

__CFDictionary *sub_1B6581390(CFDictionaryRef theDict, const __CFURL *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (theDict) {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  }
  else {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  int64_t v5 = MutableCopy;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"kWorldSourceAssetDirectoryURLs");
  if (Value) {
    CFMutableArrayRef Mutable = CFArrayCreateMutableCopy(v3, 0, Value);
  }
  else {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFMutableArrayRef v8 = Mutable;
  CFDictionarySetValue(v5, @"kWorldSourceAssetDirectoryURLs", Mutable);
  CFRelease(v8);
  CFStringRef v9 = CFURLCopyScheme(a2);
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, a2);
  if (PathComponent)
  {
    CFURLRef v11 = PathComponent;
    CFDictionarySetValue(v5, @"kEnclosingDirectoryURL", PathComponent);
    v13.length = CFArrayGetCount(v8);
    v13.locatiouint64_t n = 0;
    if (!CFArrayContainsValue(v8, v13, v11)) {
      CFArrayAppendValue(v8, v11);
    }
    CFRelease(v11);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v5;
}

void sub_1B658213C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void **sub_1B658215C(uint64_t a1)
{
  __n128 result = (void **)objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    int64_t v5 = result;
    uint64_t v6 = objc_msgSend_currentDrawable(result[1], v2, v3, v4);
    uint64_t v10 = objc_msgSend_currentRenderPassDescriptor(v5[1], v7, v8, v9);
    return (void **)MEMORY[0x1F4181798](v5, sel__drawInRenderingQueueWithDrawable_renderPassDescriptor_, v6, v10);
  }
  return result;
}

id sub_1B658325C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B65832C8((void *)a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v10 = *(const void **)(a1 + 24);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 24) = 0;
  }
  CFURLRef v11 = *(const void **)(a1 + 32);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 32) = 0;
  }

  return objc_storeWeak((id *)(a1 + 16), 0);
}

void sub_1B65832C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  uint64_t v9 = sub_1B63F4F08((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v17 = v9;
  if (v9)
  {
    uint64_t v18 = sub_1B64B2008(v9, v10, v11, v12, v13, v14, v15, v16);
    if (v18) {
      sub_1B64239A4(v18, a1, v19, v12, v13, v14, v15, v16);
    }
  }
  CFDictionaryRef v20 = sub_1B6583F08((uint64_t)a1, @"kAnimationsKey", 0, v12, v13, v14, v15, v16);
  if (v20)
  {
    sub_1B64FD41C((uint64_t)v20, (uint64_t)sub_1B658426C, v17);
    sub_1B65837D4((CFTypeRef *)a1, @"kAnimationsKey", 0, 1, v21, v22, v23, v24);
  }
}

void sub_1B65833A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B65833B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B65833C8()
{
  if (qword_1EB995458 != -1) {
    dispatch_once(&qword_1EB995458, &unk_1F0FB5E28);
  }
  return qword_1EB995460;
}

double sub_1B658340C()
{
  if (!qword_1EB995460)
  {
    qword_1EB995460 = sub_1B63C8D10(&qword_1EB995460);
    double result = *(double *)&xmmword_1F0FB87F8;
    unk_1EB983BA8 = xmmword_1F0FB87F8;
    unk_1EB983BB8 = *(_OWORD *)off_1F0FB8808;
    qword_1EB983BC8 = qword_1F0FB8818;
  }
  return result;
}

uint64_t sub_1B6583470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  return *(void *)(a1 + 32);
}

CFStringRef sub_1B65834BC(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  CFStringRef result = *(CFStringRef *)(a1 + 32);
  if (result != theString)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 32) = 0;
    }
    if (theString) {
      CFStringRef result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString);
    }
    else {
      CFStringRef result = 0;
    }
    *(void *)(a1 + 32) = result;
  }
  return result;
}

uint64_t sub_1B6583544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  return *(void *)(a1 + 24);
}

id sub_1B6583590(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  id result = *(id *)(a1 + 24);
  if (!result)
  {
    uint64_t v10 = objc_msgSend_UUID(MEMORY[0x1E4F29128], a2, a3, a4);
    id result = (id)objc_msgSend_UUIDString(v10, v11, v12, v13);
    *(void *)(a1 + 24) = result;
  }
  return result;
}

CFTypeRef sub_1B65835F8(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 24);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 24) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 24) = result;
  }
  return result;
}

id *sub_1B6583674(id *result)
{
  if (result) {
    return (id *)objc_loadWeak(result + 2);
  }
  return result;
}

id sub_1B6583684(uint64_t a1, id obj, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }

  return objc_storeWeak((id *)(a1 + 16), obj);
}

uint64_t sub_1B65836E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  return *(void *)(a1 + 40);
}

CFDictionaryRef sub_1B6583734(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (key) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (key) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"name");
LABEL_3:
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 40);
  if (result)
  {
    return (const __CFDictionary *)CFDictionaryGetValue(result, key);
  }
  return result;
}

void sub_1B65837D4(CFTypeRef *a1, void *key, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  if (a1)
  {
    if (key) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  if (!key) {
LABEL_3:
  }
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"name");
LABEL_4:
  if (sub_1B6583734((uint64_t)a1, key, (uint64_t)a3, a4, a5, a6, a7, a8) == a3) {
    return;
  }
  CFMutableArrayRef Mutable = (__CFDictionary *)a1[5];
  if (!Mutable)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    a1[5] = Mutable;
  }
  if (a3)
  {
    CFDictionarySetValue(Mutable, key, a3);
    if (!v8) {
      return;
    }
  }
  else
  {
    CFDictionaryRemoveValue(Mutable, key);
    if (CFDictionaryGetCount((CFDictionaryRef)a1[5]))
    {
      if (!v8) {
        return;
      }
    }
    else
    {
      CFRelease(a1[5]);
      a1[5] = 0;
      if (!v8) {
        return;
      }
    }
  }

  sub_1B6595A0C(@"kCFXNotificationEntityAttributeDidChange", a1, (const __CFDictionary *)key, 1u);
}

void sub_1B6583914(CFTypeRef *a1, void *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

CFDictionaryRef sub_1B658391C(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (key) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (key) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"name");
LABEL_3:
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 40);
  if (result) {
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, key) != 0);
  }
  return result;
}

void sub_1B65839A8(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  uint64_t v10 = *(const void **)(a1 + 40);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 40) = 0;
  }
  if (theDict)
  {
    if (CFDictionaryGetCount(theDict)) {
      *(void *)(a1 + 40) = CFDictionaryCreateMutableCopy(0, 0, theDict);
    }
  }
}

void sub_1B6583A28(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_8:
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"dst");
    if (a1) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  if (!a2) {
    goto LABEL_8;
  }
LABEL_3:
  if (a1) {
    goto LABEL_4;
  }
LABEL_9:
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
LABEL_4:
  sub_1B65834BC((uint64_t)a2, *(CFStringRef *)(a1 + 32), a3, a4, a5, a6, a7, a8);
  sub_1B65839A8((uint64_t)a2, *(CFDictionaryRef *)(a1 + 40), v10, v11, v12, v13, v14, v15);
  sub_1B65837D4(a2, @"_kvc", 0, 1, v16, v17, v18, v19);

  sub_1B65837D4(a2, @"kAnimationsKey", 0, 1, v20, v21, v22, v23);
}

const void *sub_1B6583B18(const void *result)
{
  if (result)
  {
    uint64_t v1 = (const void *)CFGetTypeID(result);
    if (qword_1EB995298 != -1) {
      dispatch_once(&qword_1EB995298, &unk_1F0FB6408);
    }
    return (const void *)(CFDictionaryGetValue((CFDictionaryRef)qword_1EB995290, v1) != 0);
  }
  return result;
}

CFDictionaryRef sub_1B6583B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  keys[52] = *(void **)MEMORY[0x1E4F143B8];
  if (qword_1EB995290) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. CFTypeIsCFXEntity - dispatched twice", a3, a4, a5, a6, a7, a8, (uint64_t)"_cfTypeRegistry == NULL");
  }
  keys[0] = (void *)sub_1B63CD970();
  keys[1] = (void *)sub_1B64AB0F8();
  keys[2] = (void *)sub_1B6420D4C();
  keys[3] = (void *)sub_1B6540E1C();
  keys[4] = (void *)sub_1B654DC68();
  keys[5] = (void *)sub_1B6437D6C();
  keys[6] = (void *)sub_1B64AEBD0();
  keys[7] = (void *)sub_1B6439F58();
  keys[8] = (void *)sub_1B63D0278();
  keys[9] = (void *)sub_1B64A06D4();
  keys[10] = (void *)sub_1B649A134();
  keys[11] = (void *)sub_1B6494820();
  keys[12] = (void *)sub_1B6530CAC();
  keys[13] = (void *)sub_1B652460C();
  keys[14] = (void *)sub_1B65362E4();
  keys[15] = (void *)sub_1B641CE9C();
  keys[16] = (void *)sub_1B6586A68();
  keys[17] = (void *)sub_1B6588A68();
  keys[18] = (void *)sub_1B64B19F4();
  keys[19] = (void *)sub_1B6559034();
  keys[20] = (void *)sub_1B662AA9C();
  keys[21] = (void *)sub_1B662ABD4();
  keys[22] = (void *)sub_1B651930C();
  keys[23] = (void *)sub_1B6514638();
  keys[24] = (void *)sub_1B64504F0();
  keys[25] = (void *)sub_1B647B0FC();
  keys[26] = (void *)sub_1B66051A0();
  keys[27] = (void *)sub_1B66050C4();
  keys[28] = (void *)sub_1B660526C();
  keys[29] = (void *)sub_1B660514C();
  keys[30] = (void *)sub_1B66075D4();
  keys[31] = (void *)sub_1B6605108();
  keys[32] = (void *)sub_1B66051E4();
  keys[33] = (void *)sub_1B6461474();
  keys[34] = (void *)sub_1B6605228();
  keys[35] = (void *)sub_1B6463150();
  keys[36] = (void *)sub_1B653569C();
  keys[37] = (void *)sub_1B6620A78();
  keys[38] = (void *)sub_1B65D28D4();
  keys[39] = (void *)sub_1B65291AC();
  keys[40] = (void *)sub_1B652950C();
  keys[41] = (void *)sub_1B65296E0();
  keys[42] = (void *)sub_1B6529A5C();
  keys[43] = (void *)sub_1B652A078();
  keys[44] = (void *)sub_1B652AB90();
  keys[45] = (void *)sub_1B652B638();
  keys[46] = (void *)sub_1B652B7D4();
  keys[47] = (void *)sub_1B652B080();
  keys[48] = (void *)sub_1B652B9C8();
  keys[49] = (void *)sub_1B652BC7C();
  keys[50] = (void *)sub_1B652C5A0();
  int v8 = (void *)sub_1B652C884();
  uint64_t v9 = 0;
  keys[51] = v8;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)values = 0u;
  long long v13 = 0u;
  int64x2_t v10 = vdupq_n_s64(1uLL);
  do
  {
    *(int64x2_t *)&values[v9] = v10;
    v9 += 2;
  }
  while (v9 != 52);
  CFDictionaryRef result = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 52, 0, 0);
  qword_1EB995290 = (uint64_t)result;
  return result;
}

BOOL sub_1B6583E2C(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!cf) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  CFTypeID v9 = CFGetTypeID(cf);
  return sub_1B63CEA1C(v9) || v9 == sub_1B64AEBD0();
}

CFDictionaryRef sub_1B6583E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }

  return sub_1B6583F08(a1, @"kAnimationsKey", 0, a4, a5, a6, a7, a8);
}

CFDictionaryRef sub_1B6583F08(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 40);
  if (v11)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, key);
    if (Value) {
      return Value;
    }
  }
  else
  {
    CFDictionaryRef Value = 0;
  }
  if (v8)
  {
    CFDictionaryRef Value = (const __CFDictionary *)sub_1B64FD428();
    sub_1B65837D4((CFTypeRef *)a1, key, Value, 1, v13, v14, v15, v16);
    if (CFGetRetainCount(Value) <= 1) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. CFXEntitySetAttribute failed to cache attribute", v17, v18, v19, v20, v21, v22, (uint64_t)"CFGetRetainCount(dict) >= 2");
    }
    CFRelease(Value);
  }
  return Value;
}

void sub_1B6583FDC(void *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  if (a3) {
    goto LABEL_4;
  }
LABEL_10:
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_4:
  sub_1B6584118(a1, a3, 1, a4, a5, a6, a7, a8);
  CFDictionaryRef v16 = sub_1B6583F08((uint64_t)a1, @"kAnimationsKey", 1, v11, v12, v13, v14, v15);
  sub_1B64FD40C(v16, (const char *)a3, (uint64_t)a2);
  uint64_t v24 = sub_1B63F4F54(a1, v17, v18, v19, v20, v21, v22, v23);
  if (v24)
  {
    uint64_t v32 = v24;
    uint64_t v33 = sub_1B64B2008(v24, v25, v26, v27, v28, v29, v30, v31);
    sub_1B63F4CCC(a2, v32, v34, v35, v36, v37, v38, v39);
    sub_1B6423368(v33, (uint64_t)a2, a1, a3, v40, v41, v42, v43);
  }
}

void sub_1B6584118(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_3:
  CFDictionaryRef v11 = sub_1B6583F08((uint64_t)a1, @"kAnimationsKey", 0, a4, a5, a6, a7, a8);
  if (v11)
  {
    CFDictionaryRef v12 = v11;
    CFRetain(v11);
    uint64_t v20 = sub_1B63F4F54(a1, v13, v14, v15, v16, v17, v18, v19);
    uint64_t v28 = v20;
    if (v20)
    {
      uint64_t v29 = sub_1B64B2008(v20, v21, v22, v23, v24, v25, v26, v27);
      if (v8) {
        sub_1B6423FE4(v29, a1, a2, v30, v31, v32, v33, v34);
      }
      else {
        sub_1B6422150(v29, a1, a2, v30, v31, v32, v33, v34);
      }
    }
    uint64_t v35 = (void *)sub_1B64FD404(v12, (const char *)a2, v22, v23);
    if (v35)
    {
      sub_1B63F4AAC(v35, v28, v36, v37, v38, v39, v40, v41);
      sub_1B64FD414(v12, (const char *)a2, v42, v43);
      if ((v8 & 1) == 0 && !j__objc_msgSend_count(v12, v44, v45, v46)) {
        sub_1B65837D4((CFTypeRef *)a1, @"kAnimationsKey", 0, 1, v47, v48, v49, v50);
      }
    }
    CFRelease(v12);
  }
}

void sub_1B658426C(int a1, void *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6584278(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  uint64_t v11 = sub_1B63F4F08((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v19 = v11;
  if (v11)
  {
    uint64_t v20 = sub_1B64B2008(v11, v12, v13, v14, v15, v16, v17, v18);
    if (v20) {
      sub_1B6423C84(v20, a1, v21, v14, v15, v16, v17, v18, a9);
    }
  }
  CFDictionaryRef v22 = sub_1B6583F08((uint64_t)a1, @"kAnimationsKey", 0, v14, v15, v16, v17, v18);
  if (v22)
  {
    sub_1B64FD41C((uint64_t)v22, (uint64_t)sub_1B658426C, v19);
    sub_1B65837D4((CFTypeRef *)a1, @"kAnimationsKey", 0, 1, v23, v24, v25, v26);
  }
}

void sub_1B658436C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  if (!a2) {
LABEL_3:
  }
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_4:
  CFDictionaryRef v12 = sub_1B6583F08((uint64_t)a1, @"kAnimationsKey", 0, a4, a5, a6, a7, a8);
  if (v12)
  {
    CFDictionaryRef v13 = v12;
    CFRetain(v12);
    uint64_t v21 = sub_1B63F4F54(a1, v14, v15, v16, v17, v18, v19, v20);
    uint64_t v29 = v21;
    if (v21)
    {
      uint64_t v30 = sub_1B64B2008(v21, v22, v23, v24, v25, v26, v27, v28);
      sub_1B6423E40(v30, a1, a2, v31, v32, v33, v34, v35, a9);
    }
    uint64_t v36 = (void *)sub_1B64FD404(v13, (const char *)a2, v23, v24);
    if (v36)
    {
      sub_1B63F4AAC(v36, v29, v37, v38, v39, v40, v41, v42);
      sub_1B64FD414(v13, (const char *)a2, v43, v44);
      if (!j__objc_msgSend_count(v13, v45, v46, v47)) {
        sub_1B65837D4((CFTypeRef *)a1, @"kAnimationsKey", 0, 1, v48, v49, v50, v51);
      }
    }
    CFRelease(v13);
  }
}

uint64_t sub_1B65844C0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"b");
LABEL_3:
  int64x2_t v10 = sub_1B65845E4((uint64_t)a1, @"kBindingsKey", 1, a4, a5, a6, a7, a8);
  CFArrayAppendValue(v10, a2);
  uint64_t result = sub_1B63F4F54(a1, v11, v12, v13, v14, v15, v16, v17);
  if (result)
  {
    uint64_t v26 = sub_1B64B2008(result, v19, v20, v21, v22, v23, v24, v25);
    CFStringRef v30 = (const __CFString *)objc_msgSend_keyPathDst(a2, v27, v28, v29);
    uint64_t v34 = objc_msgSend_sourceObject(a2, v31, v32, v33);
    CFStringRef v38 = (const __CFString *)objc_msgSend_keyPathSrc(a2, v35, v36, v37);
    uint64_t v42 = objc_msgSend_options(a2, v39, v40, v41);
    return sub_1B64247DC(v26, a1, v30, v34, v38, v42);
  }
  return result;
}

CFDictionaryRef sub_1B65845E4(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 40);
  if (v11)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, key);
    if (Value) {
      return Value;
    }
  }
  else
  {
    CFDictionaryRef Value = 0;
  }
  if (v8)
  {
    CFDictionaryRef Value = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    sub_1B65837D4((CFTypeRef *)a1, key, Value, 1, v13, v14, v15, v16);
    CFRelease(Value);
  }
  return Value;
}

void sub_1B658469C(CFTypeRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  uint64_t v9 = sub_1B63F4F54(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    uint64_t v17 = sub_1B64B2008(v9, v10, v11, v12, v13, v14, v15, v16);
    if (v17) {
      sub_1B6424AFC(v17, (uint64_t)a1);
    }
  }

  sub_1B65837D4(a1, @"kBindingsKey", 0, 1, v13, v14, v15, v16);
}

void sub_1B6584728(CFTypeRef *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"keyPath");
LABEL_3:
  CFDictionaryRef v10 = sub_1B65845E4((uint64_t)a1, @"kBindingsKey", 0, a4, a5, a6, a7, a8);
  if (v10)
  {
    CFDictionaryRef v11 = v10;
    CFDictionaryRef v12 = v10;
    uint64_t v20 = sub_1B63F4F54(a1, v13, v14, v15, v16, v17, v18, v19);
    if (v20)
    {
      uint64_t v28 = sub_1B64B2008(v20, (uint64_t)v21, v22, v23, v24, v25, v26, v27);
      sub_1B64249DC(v28, a1, a2);
    }
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v29 = (id)objc_msgSend_copy(v11, v21, v22, v23);
    uint64_t v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v46, (uint64_t)v50, 16);
    if (v31)
    {
      uint64_t v35 = v31;
      uint64_t v36 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v35; ++i)
        {
          if (*(void *)v47 != v36) {
            objc_enumerationMutation(v29);
          }
          CFStringRef v38 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          uint64_t v39 = objc_msgSend_keyPathDst(v38, v32, v33, v34);
          if (objc_msgSend_isEqualToString_(v39, v40, (uint64_t)a2, v41)) {
            objc_msgSend_removeObject_(v11, v32, (uint64_t)v38, v34);
          }
        }
        uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v32, (uint64_t)&v46, (uint64_t)v50, 16);
      }
      while (v35);
    }
    if (!objc_msgSend_count(v11, v32, v33, v34)) {
      sub_1B65837D4(a1, @"kBindingsKey", 0, 1, v42, v43, v44, v45);
    }
  }
}

void sub_1B65848F8(CFTypeRef *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  sub_1B65837D4(a1, @"kShaderModifiers", a2, 1, a5, a6, a7, a8);
  CFTypeID v10 = CFGetTypeID(a1);
  if (sub_1B63CEA1C(v10))
  {
    sub_1B63CE8F0(a1, v11, v12, v13, v14, v15, v16, v17);
  }
  else if (v10 == sub_1B64AEBD0())
  {
    sub_1B64AFC88((uint64_t)a1, v18, v19, v20, v21, v22, v23, v24);
  }
}

CFDictionaryRef sub_1B65849C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }

  return sub_1B6583734(a1, @"kShaderModifiers", a3, a4, a5, a6, a7, a8);
}

CFArrayRef sub_1B6584A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  CFArrayRef result = sub_1B65849C8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    CFArrayRef v11 = result;
    CFIndex Count = CFArrayGetCount(result);
    CFIndex v13 = Count - 1;
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v14 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v11, v14);
        BOOL v23 = sub_1B660412C((uint64_t)ValueAtIndex, v16, v17, v18, v19, v20, v21, v22) == v8;
        CFArrayRef result = (const __CFArray *)v23;
        BOOL v23 = v23 || v13 == v14++;
      }
      while (!v23);
    }
  }
  return result;
}

void sub_1B6584AD0(CFTypeRef *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }

  sub_1B65837D4(a1, @"kShadableMinimumMTLLanguageVersionKey", a2, 1, a5, a6, a7, a8);
}

CFDictionaryRef sub_1B6584B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }

  return sub_1B6583734(a1, @"kShadableMinimumMTLLanguageVersionKey", a3, a4, a5, a6, a7, a8);
}

void sub_1B6584BAC(uint64_t a1, void *a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"propertyName");
LABEL_3:
  CFDictionaryRef v11 = sub_1B6584C50(a1, 1);

  sub_1B6620EA4((uint64_t)v11, a2, a3);
}

CFDictionaryRef sub_1B6584C50(uint64_t a1, int a2)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 40);
  if (v4)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"_kvc");
    if (Value) {
      return Value;
    }
  }
  else
  {
    CFDictionaryRef Value = 0;
  }
  if (a2)
  {
    CFDictionaryRef Value = (const __CFDictionary *)sub_1B6620B14();
    sub_1B65837D4((CFTypeRef *)a1, @"_kvc", Value, 1, v6, v7, v8, v9);
    CFRelease(Value);
  }
  return Value;
}

void sub_1B6584CD4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"propertyName");
LABEL_3:
  CFDictionaryRef v10 = sub_1B6584C50(a1, 1);

  sub_1B6620DE4((uint64_t)v10, a2);
}

const void *sub_1B6584D68(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (a2) {
      goto LABEL_3;
    }
LABEL_10:
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"propertyName");
    goto LABEL_3;
  }
  if (!a2) {
    goto LABEL_10;
  }
LABEL_3:
  CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 40);
  if (!v10) {
    return 0;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(v10, @"_kvc");
  if (!Value) {
    return 0;
  }

  return sub_1B6620DDC((uint64_t)Value, a2);
}

CFDictionaryRef sub_1B6584E1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 40);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"_kvc");
    if (result)
    {
      return (const __CFDictionary *)sub_1B662103C((uint64_t)result, a2, v11, v12);
    }
  }
  return result;
}

CFDictionaryRef sub_1B6584EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
  }
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 40);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"_kvc");
    if (result)
    {
      return (const __CFDictionary *)sub_1B66210BC((uint64_t)result, a2, v11, v12);
    }
  }
  return result;
}

uint64_t sub_1B6584F2C(uint64_t a1, const __CFArray *a2, int a3, uint64_t a4)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 40);
  if (!v4) {
    return 0;
  }
  CFDictionaryRef Value = (CFDictionaryRef *)CFDictionaryGetValue(v4, @"_kvc");
  if (!Value) {
    return 0;
  }

  return sub_1B6620B90(Value, a2, a3, a4);
}

uint64_t sub_1B6584FA4(void *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)a1[5];
  if (v2 && (CFDictionaryRef Value = CFDictionaryGetValue(v2, @"_kvc")) != 0) {
    uint64_t v4 = sub_1B6621034((uint64_t)Value);
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeID v5 = CFGetTypeID(a1);
  if (v5 == sub_1B64AEBD0()) {
    return sub_1B64AFE74((uint64_t)a1, v6, v7, v8, v9, v10, v11, v12) + v4;
  }
  return v4;
}

CFStringRef sub_1B658501C(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<CFXEntity:%p>", a1);
}

CFStringRef sub_1B658505C(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<CFXEntity:%p>", a1);
}

CFDictionaryRef sub_1B65850A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFDictionaryRef result = sub_1B6583F08(a1, @"kAnimationsKey", 0, a4, a5, a6, a7, a8);
  if (result)
  {
    return (const __CFDictionary *)sub_1B64FD41C((uint64_t)result, (uint64_t)sub_1B658426C, a2);
  }
  return result;
}

void *sub_1B658510C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v49[16] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"entity");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"world");
LABEL_3:
  uint64_t v10 = sub_1B64B2008(a2, a2, a3, a4, a5, a6, a7, a8);
  CFDictionaryRef v16 = sub_1B6583F08((uint64_t)a1, @"kAnimationsKey", 0, v11, v12, v13, v14, v15);
  if (v16)
  {
    v49[0] = a1;
    v49[1] = v10;
    v49[2] = a2;
    sub_1B64FD41C((uint64_t)v16, (uint64_t)sub_1B65852F4, (uint64_t)v49);
  }
  CFDictionaryRef result = sub_1B65845E4((uint64_t)a1, @"kBindingsKey", 0, v17, v18, v19, v20, v21);
  if (result)
  {
    uint64_t v24 = result;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    CFDictionaryRef result = objc_msgSend_countByEnumeratingWithState_objects_count_(result, v23, (uint64_t)&v45, (uint64_t)v49, 16);
    if (result)
    {
      uint64_t v28 = result;
      uint64_t v29 = *(void *)v46;
      do
      {
        CFStringRef v30 = 0;
        do
        {
          if (*(void *)v46 != v29) {
            objc_enumerationMutation(v24);
          }
          uint64_t v31 = *(void **)(*((void *)&v45 + 1) + 8 * (void)v30);
          CFStringRef v32 = (const __CFString *)objc_msgSend_keyPathDst(v31, v25, v26, v27);
          uint64_t v36 = objc_msgSend_sourceObject(v31, v33, v34, v35);
          CFStringRef v40 = (const __CFString *)objc_msgSend_keyPathSrc(v31, v37, v38, v39);
          uint64_t v44 = objc_msgSend_options(v31, v41, v42, v43);
          sub_1B64247DC(v10, a1, v32, v36, v40, v44);
          CFStringRef v30 = (char *)v30 + 1;
        }
        while (v28 != v30);
        CFDictionaryRef result = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v45, (uint64_t)v49, 16);
        uint64_t v28 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1B65852F4(void *a1, uint64_t *cf, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (void *)*a3;
  uint64_t v10 = a3[1];
  sub_1B63F4CCC(cf, a3[2], (uint64_t)a3, a4, a5, a6, a7, a8);

  sub_1B6423368(v10, (uint64_t)cf, v11, a1, v12, v13, v14, v15);
}

uint64_t sub_1B6585350(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B6585380(uint64_t a1)
{
  if (qword_1E9DDB610 != -1) {
    dispatch_once_f(&qword_1E9DDB610, &qword_1E9DDB608, (dispatch_function_t)sub_1B6585350);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1E9DDB608, 0x30uLL);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  *(void *)(v2 + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  *(void *)(v2 + 24) = CFDictionaryCreateMutable(v3, 0, 0, v4);
  *(void *)(v2 + 56) = a1;
  *(_DWORD *)(v2 + 32) = 0;
  return v2;
}

void sub_1B65854A8(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t v8 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  if (a3)
  {
    if (a1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v9, v10, v11, v12, v13, v14, (uint64_t)"object");
    if (a1) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v9, v10, v11, v12, v13, v14, (uint64_t)"notificationQueue");
LABEL_3:
  uint64_t v15 = (const void *)CFGetTypeID(a3);
  if (sub_1B63CEA1C((uint64_t)v15)) {
    uint64_t v15 = (const void *)sub_1B63CD970();
  }
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v15);
  if (!Value)
  {
    CFDictionaryRef Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v15, Value);
    CFRelease(Value);
  }
  unsigned int v17 = CFDictionaryGetValue((CFDictionaryRef)Value, a3);
  unsigned int v24 = v17;
  switch(a2)
  {
    case 0:
      if ((v17 & 0x200) != 0) {
        sub_1B63F2F54(0, @"Warning: adding a node that was just removed %p", v18, v19, v20, v21, v22, v23, (uint64_t)a3);
      }
      uint64_t v25 = (const void *)(v24 & 0xFFF7FF00 | 0x80001);
      goto LABEL_24;
    case 2:
      if (!a4)
      {
        sub_1B63F2F54(17, @"Assertion '%s' failed. missing attribute", v18, v19, v20, v21, v22, v23, (uint64_t)"nil");
        goto LABEL_25;
      }
      if (CFEqual(a4, @"model"))
      {
        uint64_t v26 = v24 & 0xFFFFEF00;
        uint64_t v27 = 4097;
      }
      else if (CFEqual(a4, @"kCameraKey"))
      {
        uint64_t v26 = v24 & 0xFFFFDF00;
        uint64_t v27 = 8193;
      }
      else if (CFEqual(a4, @"kLightKey"))
      {
        uint64_t v26 = v24 & 0xFFFFBF00;
        uint64_t v27 = 16385;
      }
      else
      {
        if (!CFEqual(a4, @"kDeformerStackKey")) {
          goto LABEL_25;
        }
        uint64_t v26 = v24 & 0xFFFEFF00;
        uint64_t v27 = 65537;
      }
LABEL_23:
      uint64_t v25 = (const void *)(v26 | v27);
LABEL_24:
      CFDictionarySetValue((CFMutableDictionaryRef)Value, a3, v25);
LABEL_25:
      if (!*(unsigned char *)(a1 + 48))
      {
        *(unsigned char *)(a1 + 48) = 1;
        sub_1B65857EC(a1);
      }
      os_unfair_lock_unlock(v8);
      return;
    case 3:
      uint64_t v26 = v17 & 0xFFFFFD00;
      uint64_t v27 = 514;
      goto LABEL_23;
    case 4:
      uint64_t v26 = v17 & 0xFFFFFB00;
      uint64_t v27 = 1025;
      goto LABEL_23;
    case 5:
      uint64_t v26 = v17 & 0xFFFFFF00;
      uint64_t v27 = 2049;
      goto LABEL_23;
    case 6:
      uint64_t v26 = v17 & 0xFFFFFB00;
      uint64_t v27 = 1027;
      goto LABEL_23;
    case 7:
      uint64_t v26 = v17 & 0xFFFFFF00;
      uint64_t v27 = 2051;
      goto LABEL_23;
    case 8:
      uint64_t v25 = (const void *)((v17 & 0xFFFBFF00) + 262145);
      goto LABEL_24;
    case 9:
      uint64_t v26 = v17 & 0xFFFFFD00;
      uint64_t v27 = 516;
      goto LABEL_23;
    default:
      goto LABEL_25;
  }
}

void sub_1B65857EC(uint64_t a1)
{
  if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16)))
  {
    uint64_t v2 = objc_alloc_init(CFXEngineNotificationQueueTransientWrapper);
    objc_msgSend_setEngineNotificationQueue_(v2, v3, a1, v4);
    dispatch_time_t v5 = dispatch_time(0, 1000000000);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_1B6585C1C;
    v6[3] = &unk_1E6143468;
    v6[4] = v2;
    v6[5] = a1;
    dispatch_after(v5, MEMORY[0x1E4F14428], v6);
  }
}

void sub_1B65858A4(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"queue");
  }
  sub_1B6595954(a1, (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_1B6585920, @"kCFXNotificationEntityAttributeDidChange", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  a1[49] = 1;
}

void sub_1B6585920(int a1, uint64_t a2, CFTypeRef cf1, void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (CFEqual(cf1, @"kCFXNotificationEntityAttributeDidChange"))
  {
    uint64_t v19 = sub_1B63F4F54(a4, v12, v13, v14, v15, v16, v17, v18);
    uint64_t v20 = *(void *)(a2 + 56);
    if (v19 == v20 && v20 != 0)
    {
      sub_1B65854A8(a2, 2, a4, a5);
    }
  }
  else
  {
    sub_1B63F2F54(16, @"Error: unknown notification name", v13, v14, v15, v16, v17, v18, a9);
  }
}

void sub_1B65859DC(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"queue");
  }
  if (a1[49])
  {
    sub_1B65959BC(a1, @"kCFXNotificationEntityAttributeDidChange", 0);
  }
}

void sub_1B6585A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"notificationQueue");
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 24));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  *(int8x16_t *)(a1 + 16) = vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
  *(unsigned char *)(a1 + 50) = 0;
  *(CFTimeInterval *)(a1 + 40) = CACurrentMediaTime();
}

void sub_1B6585ADC(uint64_t a1, const void *a2, void (__cdecl *a3)(const void *, const void *, void *), void *a4)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  if (Value)
  {
    CFDictionaryApplyFunction(Value, a3, a4);
  }
}

uint64_t sub_1B6585B30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 50);
}

void sub_1B6585B3C(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  CFAllocatorRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 24) = 0;
  }

  os_unfair_lock_unlock(v2);
}

CFStringRef sub_1B6585B9C(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXEngineNotificationQueue %p>", a1);
}

CFStringRef sub_1B6585BDC(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXEngineNotificationQueue %p>", a1);
}

void sub_1B6585C1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_engineNotificationQueue(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    uint64_t v6 = v5;
    CFTimeInterval v7 = CACurrentMediaTime() - *(double *)(v5 + 40);
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 32));
    if (v7 >= 1.0)
    {
      *(unsigned char *)(v6 + 48) = 0;
      CFDictionaryRef v9 = *(const __CFDictionary **)(v6 + 16);
      *(void *)(v6 + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
      if (CFDictionaryGetCount(v9) >= 1) {
        *(unsigned char *)(v6 + 50) = 1;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 32));
      CFRelease(v9);
    }
    else
    {
      sub_1B65857EC(v6);
      uint64_t v8 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 32);
      os_unfair_lock_unlock(v8);
    }
  }
}

_DWORD *sub_1B6585D2C(uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (a3 - 2);
  if (a3 <= 2)
  {
    uint64_t v10 = 0;
    *a4 = 0;
    return v10;
  }
  unsigned int v11 = a3;
  uint64_t v12 = a2;
  if (a3 == 4)
  {
    uint64_t v10 = malloc_type_malloc(0x18uLL, 0x100004052888210uLL);
    *uint64_t v10 = *v12;
    v10[1] = v12[1];
    void v10[2] = v12[2];
    v10[3] = *v12;
    v10[4] = v12[2];
    v10[5] = v12[3];
    int v13 = 6;
    goto LABEL_7;
  }
  if (a3 == 3)
  {
    uint64_t v10 = malloc_type_malloc(0xCuLL, 0x100004052888210uLL);
    *uint64_t v10 = *v12;
    v10[1] = v12[1];
    void v10[2] = v12[2];
    int v13 = 3;
LABEL_7:
    *a4 = v13;
    return v10;
  }
  *(double *)v15.i64 = sub_1B641E208(a1, *a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  float32x4_t v95 = v15;
  *(double *)v28.i64 = sub_1B641E208(a1, v12[1], v16, v17, v18, v19, v20, v21);
  BOOL v29 = 0;
  char v30 = 0;
  float32x4_t v31 = vsubq_f32(v28, v95);
  int32x4_t v32 = (int32x4_t)vmulq_f32(v31, v31);
  v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
  float32x2_t v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
  float32x2_t v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
  float32x4_t v90 = vmulq_n_f32(v31, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
  float32x4_t v91 = 0u;
  uint64_t v35 = 2;
  float32x4_t v92 = vnegq_f32(v90);
  float32x4_t v93 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL);
  do
  {
    *(double *)v36.i64 = sub_1B641E208(a1, v12[v35], v22, v23, v24, v25, v26, v27);
    float32x4_t v37 = vsubq_f32(v36, v95);
    float32x4_t v38 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), v92), v37, v93);
    float32x4_t v39 = vmulq_f32(v38, v38);
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), v39)).f32[0] != 0.0)
    {
      float32x4_t v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL);
      float32x4_t v41 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL), v92), v40, v93);
      float32x4_t v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL);
      int32x4_t v43 = (int32x4_t)vmulq_f32(v41, v41);
      v43.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), *(float32x2_t *)v43.i8)).u32[0];
      float32x2_t v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
      float32x2_t v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
      float32x4_t v46 = vmulq_n_f32(v42, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).f32[0]);
      if (v30)
      {
        float32x4_t v47 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL), vnegq_f32(v91)), v46, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v91, (int32x4_t)v91), (int8x16_t)v91, 0xCuLL));
        float32x4_t v48 = vmulq_f32(v47, v47);
        char v30 = 1;
        if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), v48)).f32[0] > 0.00001)break; {
      }
        }
      else
      {
        char v30 = 1;
        float32x4_t v91 = v46;
      }
    }
    BOOL v29 = ++v35 >= (unint64_t)v11;
  }
  while (v11 != v35);
  if (v29 && (v30 & 1) != 0)
  {
    BOOL v55 = (char *)malloc_type_malloc(80 * v11, 0x1000040B1CE3FD8uLL);
    uint64_t v56 = 0;
    double v57 = 0.0;
    long long v94 = *MEMORY[0x1E4F1DAD8];
    double v58 = 0.0;
    double v59 = 0.0;
    double v60 = 0.0;
    do
    {
      *(double *)v61.i64 = sub_1B641E208(a1, *v12, v49, v50, v51, v52, v53, v54);
      float32x4_t v62 = vsubq_f32(v61, v95);
      float32x4_t v63 = vmulq_f32(v90, v62);
      double v64 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0];
      float32x4_t v65 = vmulq_f32(v91, v62);
      double v66 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0];
      int v67 = (double *)&v55[v56];
      int v68 = *v12++;
      *int v67 = v64;
      v67[1] = v66;
      *((_OWORD *)v67 + 1) = v94;
      *((_OWORD *)v67 + 2) = v94;
      *((_OWORD *)v67 + 3) = v94;
      *((_DWORD *)v67 + 16) = 0;
      *((unsigned char *)v67 + 68) = 0;
      *((_DWORD *)v67 + 18) = v68;
      double v69 = fmin(v60, v64);
      double v70 = fmin(v58, v66);
      double v71 = fmax(v59, v64);
      double v72 = fmax(v57, v66);
      if (v56) {
        double v60 = v69;
      }
      else {
        double v60 = v64;
      }
      if (v56) {
        double v59 = v71;
      }
      else {
        double v59 = v64;
      }
      if (v56) {
        double v58 = v70;
      }
      else {
        double v58 = v66;
      }
      if (v56) {
        double v57 = v72;
      }
      else {
        double v57 = v66;
      }
      v56 += 80;
    }
    while (80 * v11 != v56);
    uint64_t v109 = 0;
    uint64_t v102 = v55;
    unsigned int v103 = v11;
    unsigned int v104 = v11;
    float v73 = v60 + -1.0;
    float v74 = v59 + 1.0;
    float v105 = v73;
    float v106 = v74;
    float v75 = v58 + -1.0;
    float v76 = v57 + 1.0;
    float v107 = v75;
    float v108 = v76;
    int v77 = sub_1B65DB7C8((unsigned int *)&v102);
    if (v77 != 2) {
      sub_1B65DB844(&v102);
    }
    unsigned int v101 = 0;
    uint64_t v96 = &v102;
    int v97 = 1;
    uint64_t v99 = 0;
    uint64_t v98 = 0;
    int v100 = 0;
    uint64_t v78 = sub_1B65DECE8((uint64_t)&v96, &v101);
    int v79 = malloc_type_malloc(12 * v101, 0x100004052888210uLL);
    uint64_t v10 = v79;
    if (v101)
    {
      unint64_t v80 = 0;
      uint64_t v81 = 1;
      if (v77 == 2) {
        uint64_t v82 = 1;
      }
      else {
        uint64_t v82 = 2;
      }
      if (v77 == 2) {
        uint64_t v81 = 2;
      }
      unsigned int v83 = 2;
      uint64_t v84 = v78;
      do
      {
        v79[v83 - 2] = *(_DWORD *)(*v84 + 72);
        v79[v83 - 1] = *(_DWORD *)(v84[v82] + 72);
        v79[v83] = *(_DWORD *)(v84[v81] + 72);
        ++v80;
        v83 += 3;
        v84 += 7;
      }
      while (v80 < v101);
    }
    else if (!v78)
    {
LABEL_47:
      free(v55);
      *a4 = (int)v78;
      return v10;
    }
    free(v78);
    LODWORD(v78) = 3 * v101;
    goto LABEL_47;
  }
  uint64_t v85 = malloc_type_malloc(4 * (3 * v9), 0x100004052888210uLL);
  uint64_t v10 = v85;
  uint64_t v86 = 0;
  unsigned int v87 = 2;
  do
  {
    v85[v87 - 2] = *v12;
    float32x4_t v88 = &v12[v86];
    v85[v87 - 1] = v88[1];
    v85[v87] = v88[2];
    v87 += 3;
    ++v86;
  }
  while (v9 != v86);
  *a4 = 3 * v9;
  return v10;
}

uint64_t sub_1B6586274(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v9 = objc_msgSend__handle(a2, (const char *)a2, (uint64_t)a3, a4);
  unsigned int v10 = *(_DWORD *)(a1 + 8);
  *(void *)&long long v16 = *(void *)a1;
  *((void *)&v16 + 1) = v10;
  if (a3)
  {
    uint64_t v11 = objc_msgSend__handle(a3, v6, v7, v8);
    unsigned int v12 = *(_DWORD *)(a1 + 24);
    *(void *)&long long v15 = *(void *)(a1 + 16);
    *((void *)&v15 + 1) = v12;
    uint64_t v13 = sub_1B6E073B8(432, 16);
    sub_1B6DFBFE0(v13, v9, v11, &v16, &v15);
  }
  else
  {
    uint64_t v13 = sub_1B6E073B8(432, 16);
    sub_1B6DFC110(v13, v9, &v16);
  }
  return v13;
}

void sub_1B6586354(_Unwind_Exception *a1)
{
  sub_1B6E073C4(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1B658660C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (__n128 *)objc_msgSend__ballSocketConstraint(*(void **)(a1 + 48), a2, a3, a4);
  if (v5)
  {
    __n128 result = *(__n128 *)(a1 + 32);
    result.n128_u32[3] = 0;
    v5[23] = result;
  }
  return result;
}

__n128 sub_1B65866F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (__n128 *)objc_msgSend__ballSocketConstraint(*(void **)(a1 + 48), a2, a3, a4);
  if (v5)
  {
    __n128 result = *(__n128 *)(a1 + 32);
    result.n128_u32[3] = 0;
    v5[24] = result;
  }
  return result;
}

uint64_t sub_1B6586A68()
{
  if (qword_1EB995580 != -1) {
    dispatch_once(&qword_1EB995580, &unk_1F0FB5E48);
  }
  return qword_1EB995588;
}

double sub_1B6586AAC()
{
  if (!qword_1EB995588)
  {
    qword_1EB995588 = sub_1B63C8D10(&qword_1EB995588);
    qword_1EB9847A0 = (uint64_t)sub_1B6588660;
    double result = *(double *)&xmmword_1F0FB8970;
    unk_1EB984778 = xmmword_1F0FB8970;
    qword_1EB984760 = (uint64_t)sub_1B65886D0;
    unk_1EB984788 = unk_1F0FB8980;
    qword_1EB984798 = qword_1F0FB8990;
    qword_1EB9847B0 = (uint64_t)sub_1B65888B8;
  }
  return result;
}

uint64_t sub_1B6586B40()
{
  if (qword_1EB995580 != -1) {
    dispatch_once(&qword_1EB995580, &unk_1F0FB5E48);
  }
  uint64_t result = sub_1B63C8D44(qword_1EB995588, 0xC0uLL);
  *(unsigned char *)(result + 192) = 1;
  *(void *)(result + 184) = 0x13C23D70ALL;
  return result;
}

uint64_t sub_1B6586BA4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 200) = a2;
  return result;
}

uint64_t sub_1B6586BAC(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 64) != a2)
  {
    *(_DWORD *)(result + 64) = a2;
    ++*(_DWORD *)(result + 188);
    uint64_t result = *(void *)(result + 200);
    if (result) {
      return sub_1B6588C84(result);
    }
  }
  return result;
}

float sub_1B6586BD8(uint64_t a1)
{
  return *(float *)(a1 + 184);
}

__n128 sub_1B6586BE0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 112);
  *(void *)(a2 + 32) = *(void *)(a1 + 120);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 128);
  *(void *)(a2 + 48) = *(void *)(a1 + 136);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 144);
  __n128 result = *(__n128 *)(a1 + 152);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void sub_1B6586C24(uint64_t a1, CFTypeRef cf, uint64_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = __n;
  int v11 = *(_DWORD *)(a1 + 88);
  CFTypeRef v12 = *(CFTypeRef *)(a1 + 72);
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 72) = 0;
    }
    if (cf) {
      CFTypeRef v14 = CFRetain(cf);
    }
    else {
      CFTypeRef v14 = 0;
    }
    *(void *)(a1 + 72) = v14;
  }
  ++*(_DWORD *)(a1 + 188);
  *(unsigned char *)(a1 + 193) = v9;
  int v15 = *(_DWORD *)a4;
  int v16 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)a4;
  if (v16)
  {
    int v17 = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a1 + 92) = v16;
    size_t v18 = (4 * v15);
    if (v15 != v11)
    {
      uint64_t v19 = *(void **)(a1 + 96);
      if (v15)
      {
        uint64_t v20 = malloc_type_realloc(v19, (4 * v15), 0xE2BDCFEDuLL);
      }
      else
      {
        free(v19);
        uint64_t v20 = 0;
      }
      *(void *)(a1 + 96) = v20;
    }
    if (*(_DWORD *)a4) {
      memcpy(*(void **)(a1 + 96), *(const void **)(a4 + 8), v18);
    }
    int v21 = *(_DWORD *)(a4 + 4);
    size_t v22 = (4 * v21);
    if (v21 != v17)
    {
      uint64_t v23 = *(void **)(a1 + 104);
      if (v21)
      {
        uint64_t v24 = malloc_type_realloc(v23, (4 * v21), 0x5D9D022uLL);
      }
      else
      {
        free(v23);
        uint64_t v24 = 0;
      }
      *(void *)(a1 + 104) = v24;
      int v17 = *(_DWORD *)(a4 + 4);
    }
    if (v17) {
      memcpy(*(void **)(a1 + 104), *(const void **)(a4 + 16), v22);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 92) = 0;
    free(*(void **)(a1 + 96));
    *(void *)(a1 + 96) = 0;
    free(*(void **)(a1 + 104));
    *(void *)(a1 + 104) = 0;
  }
  int v25 = *(_DWORD *)(a1 + 112);
  int v26 = *(_DWORD *)(a4 + 24);
  *(_DWORD *)(a1 + 112) = v26;
  if (v26)
  {
    size_t v27 = (4 * v26);
    int v28 = v25;
    if (v26 != v25)
    {
      *(void *)(a1 + 120) = malloc_type_realloc(*(void **)(a1 + 120), (4 * v26), 0x7471ADA2uLL);
      int v28 = *(_DWORD *)(a4 + 24);
    }
    if (v28) {
      memcpy(*(void **)(a1 + 120), *(const void **)(a4 + 32), v27);
    }
    int v29 = *(_DWORD *)(a1 + 128);
    int v30 = *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a1 + 128) = v30;
    size_t v31 = (4 * v30);
    if (v30 != v29)
    {
      int32x4_t v32 = *(void **)(a1 + 136);
      if (v30)
      {
        float32x2_t v33 = malloc_type_realloc(v32, (4 * v30), 0x576811FuLL);
      }
      else
      {
        free(v32);
        float32x2_t v33 = 0;
      }
      *(void *)(a1 + 136) = v33;
      int v29 = *(_DWORD *)(a4 + 40);
    }
    if (v29) {
      memcpy(*(void **)(a1 + 136), *(const void **)(a4 + 48), v31);
    }
    int v34 = *(_DWORD *)(a4 + 56);
    if (v34)
    {
      int v35 = *(_DWORD *)(a1 + 144);
      *(_DWORD *)(a1 + 144) = v34;
      int v36 = *(_DWORD *)(a4 + 24);
      size_t v37 = (4 * v36);
      if (v36 != v25)
      {
        float32x4_t v38 = *(void **)(a1 + 152);
        if (v36)
        {
          float32x4_t v39 = malloc_type_realloc(v38, (4 * v36), 0x2C0EC2E3uLL);
        }
        else
        {
          free(v38);
          float32x4_t v39 = 0;
        }
        *(void *)(a1 + 152) = v39;
      }
      if (*(_DWORD *)a4) {
        memcpy(*(void **)(a1 + 152), *(const void **)(a4 + 64), v37);
      }
      int v40 = *(_DWORD *)(a4 + 56);
      size_t v41 = (4 * v40);
      if (v40 != v35)
      {
        float32x4_t v42 = *(void **)(a1 + 160);
        if (*(_DWORD *)(a4 + 4))
        {
          int32x4_t v43 = malloc_type_realloc(v42, v41, 0xE92057CCuLL);
        }
        else
        {
          free(v42);
          int32x4_t v43 = 0;
        }
        *(void *)(a1 + 160) = v43;
        int v35 = *(_DWORD *)(a4 + 56);
      }
      if (v35) {
        memcpy(*(void **)(a1 + 160), *(const void **)(a4 + 72), v41);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 144) = 0;
      free(*(void **)(a1 + 152));
      *(void *)(a1 + 152) = 0;
      free(*(void **)(a1 + 160));
      *(void *)(a1 + 160) = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    free(*(void **)(a1 + 120));
    *(void *)(a1 + 120) = 0;
    free(*(void **)(a1 + 136));
    *(void *)(a1 + 136) = 0;
    free(*(void **)(a1 + 152));
    *(void *)(a1 + 152) = 0;
    free(*(void **)(a1 + 160));
    *(void *)(a1 + 160) = 0;
    if (!v16)
    {
      free(*(void **)(a1 + 168));
      *(void *)(a1 + 168) = 0;
    }
  }
  float32x2_t v44 = *(void **)(a1 + 80);
  if (v44)
  {
    sub_1B63F4AAC(*(void **)(a1 + 80), *(void *)(a1 + 48), __n, a4, a5, a6, a7, a8);
    *(void *)(a1 + 80) = 0;
    sub_1B6586F84(a1, v44);
    sub_1B6536D14((uint64_t)v44, 0, v45, v46, v47, v48, v49, v50);
    CFRelease(v44);
  }
  uint64_t v51 = *(const void **)(a1 + 176);
  if (v51)
  {
    CFRelease(v51);
    *(void *)(a1 + 176) = 0;
  }
}

void sub_1B6586F84(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  if (v2)
  {
    CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4 * v2);
    CFDataSetLength(Mutable, 4 * v2);
    if (a2) {
      a2 = (void *)sub_1B6536C44((uint64_t)a2, v6, v7, v8, v9, v10, v11, v12);
    }
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    for (uint64_t i = 0; i != v2; ++i)
    {
      int v15 = 0;
      if (a2 && sub_1B6534800((uint64_t)a2) > i) {
        int v15 = *(_DWORD *)sub_1B6534808(a2, i, v16, v17, v18, v19, v20, v21);
      }
      *(_DWORD *)&MutableBytePtr[4 * i] = v15;
    }
    size_t v22 = (const void *)sub_1B6534714(1, 1, v2, 0, 0);
    int v29 = (void *)sub_1B65364F4(v22, 0, v23, v24, v25, v26, v27, v28);
    sub_1B65365A8((uint64_t)v29, Mutable, v30, v31, v32, v33, v34, v35);
    sub_1B6534974((uint64_t)v22, (uint64_t)v29);
    CFRelease(v22);
    CFRelease(Mutable);
    sub_1B6587144(a1, v29, v36, v37, v38, v39, v40, v41);
    CFRelease(v29);
  }
}

void sub_1B65870C8(uint64_t a1, CFArrayRef theArray, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (theArray) {
    int Count = CFArrayGetCount(theArray);
  }
  else {
    int Count = 0;
  }
  memset(v16, 0, sizeof(v16));
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  int v12 = Count;
  sub_1B6586C24(a1, theArray, a3, (uint64_t)&v12, a5, a6, a7, a8);
}

void sub_1B6587144(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 80);
  if ((void *)v9 == a2) {
    return;
  }
  uint64_t v10 = a2;
  if (v9)
  {
    sub_1B6536D14(v9, 0, a3, a4, a5, a6, a7, a8);
    sub_1B63F4AAC(*(void **)(a1 + 80), *(void *)(a1 + 48), v11, v12, v13, v14, v15, v16);
    uint64_t v17 = *(const void **)(a1 + 80);
    if (v17 != v10)
    {
      if (v17)
      {
        CFRelease(v17);
        *(void *)(a1 + 80) = 0;
      }
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if (a2)
  {
LABEL_10:
    uint64_t v10 = (void *)CFRetain(v10);
LABEL_11:
    *(void *)(a1 + 80) = v10;
  }
  if (v10)
  {
    sub_1B63F4CCC((uint64_t *)v10, *(void *)(a1 + 48), a3, a4, a5, a6, a7, a8);
    uint64_t v18 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v18 = 0;
  }
  sub_1B6536D14(v18, a1, a3, a4, a5, a6, a7, a8);

  sub_1B6587204(a1, v19, v20, v21, v22, v23, v24, v25);
}

void sub_1B6587204(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ++*(_DWORD *)(a1 + 188);
  if (*(void *)(a1 + 168))
  {
    uint64_t v9 = *(void *)(a1 + 80);
    if (!v9)
    {
      sub_1B6586F84(a1, 0);
      uint64_t v9 = *(void *)(a1 + 80);
    }
    uint64_t v10 = sub_1B65368E4(v9, a2, a3, a4, a5, a6, a7, a8);
    int v18 = *(_DWORD *)(a1 + 112);
    if (*(_DWORD *)(a1 + 88) == v11)
    {
      uint64_t v19 = v10;
      uint64_t v20 = (*(_DWORD *)(a1 + 92) + v11 + v18 + *(_DWORD *)(a1 + 144));
      uint64_t v33 = 0;
      if (v11)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 4 * v11;
        do
        {
          if (*(_DWORD *)(a1 + 92)) {
            uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 96) + v21);
          }
          else {
            uint64_t v23 = 0;
          }
          sub_1B65888BC(*(void *)(a1 + 168), (_DWORD *)&v33 + 1, (unsigned int *)&v33, v23, *(void *)(a1 + 104), v20, v16, v17, *(float *)&v19[v21]);
          v21 += 4;
        }
        while (v22 != v21);
        int v18 = *(_DWORD *)(a1 + 112);
      }
      unsigned int v32 = 0;
      if (v18)
      {
        unint64_t v24 = 0;
        unsigned int v25 = 0;
        do
        {
          int v26 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v24);
          if (v26)
          {
            float v27 = 3.4028e38;
            int v28 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v24);
            unsigned int v29 = v25;
            do
            {
              uint64_t v30 = *(unsigned int *)(*(void *)(a1 + 136) + 4 * v29++);
              float v27 = fminf(v27, *(float *)&v19[4 * v30]);
              --v28;
            }
            while (v28);
            v25 += v26;
          }
          else
          {
            float v27 = 3.4028e38;
          }
          if (*(_DWORD *)(a1 + 144)) {
            uint64_t v31 = *(unsigned int *)(*(void *)(a1 + 152) + 4 * v24);
          }
          else {
            uint64_t v31 = 0;
          }
          sub_1B65888BC(*(void *)(a1 + 168), (_DWORD *)&v33 + 1, &v32, v31, *(void *)(a1 + 160), v20, v16, v17, v27);
          ++v24;
        }
        while (v24 < *(unsigned int *)(a1 + 112));
      }
      if (HIDWORD(v33) != v20) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Morpher failed to update all its runtime weights", v12, v13, v14, v15, v16, v17, (uint64_t)"overallRuntimeTargetIndex == totalMorphTargetCount");
      }
    }
    else
    {
      sub_1B63F2F54(16, @"Error: Morpher has %d targets weights, but has %d main targets (note: there are %d in-betweens and %d correctives)", v12, v13, v14, v15, v16, v17, v11);
    }
  }
}

uint64_t sub_1B65873BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 80);
  if (!result)
  {
    sub_1B6586F84(a1, 0);
    return *(void *)(a1 + 80);
  }
  return result;
}

uint64_t sub_1B65873F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

__CFArray *sub_1B65873FC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 92))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *(unsigned int *)(a1 + 88), MEMORY[0x1E4F1D510]);
    if (*(_DWORD *)(a1 + 88))
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
      do
      {
        v4 += *(unsigned int *)(*(void *)(a1 + 96) + 4 * v3);
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v4 - 1);
        CFArrayAppendValue(Mutable, ValueAtIndex);
        ++v3;
      }
      while (v3 < *(unsigned int *)(a1 + 88));
    }
    return Mutable;
  }
  if (*(_DWORD *)(a1 + 112))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, *(unsigned int *)(a1 + 88), MEMORY[0x1E4F1D510]);
    if (*(_DWORD *)(a1 + 88))
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
        CFArrayAppendValue(Mutable, v7);
        ++v6;
      }
      while (v6 < *(unsigned int *)(a1 + 88));
    }
    return Mutable;
  }
  uint64_t v8 = *(const void **)(a1 + 72);
  if (!v8) {
    return 0;
  }

  return (__CFArray *)CFRetain(v8);
}

uint64_t sub_1B6587514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morph");
  }
  uint64_t v9 = *(void *)(a1 + 80);
  if (!v9)
  {
    sub_1B6586F84(a1, 0);
    uint64_t v9 = *(void *)(a1 + 80);
    if (!v9)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"source");
      uint64_t v9 = 0;
    }
  }
  uint64_t result = sub_1B6536C44(v9, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    return sub_1B6534800(result);
  }
  return result;
}

float sub_1B65875C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morph");
  }
  uint64_t v10 = *(void *)(a1 + 80);
  if (!v10)
  {
    sub_1B6586F84(a1, 0);
    uint64_t v10 = *(void *)(a1 + 80);
    if (!v10)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"source");
      uint64_t v10 = 0;
    }
  }
  uint64_t v11 = (void *)sub_1B6536C44(v10, a2, a3, a4, a5, a6, a7, a8);
  float v18 = 0.0;
  if (sub_1B6534800((uint64_t)v11) > a2)
  {
    uint64_t v19 = sub_1B6534808(v11, a2, v12, v13, v14, v15, v16, v17);
    if (v19) {
      return *(float *)v19;
    }
  }
  return v18;
}

void sub_1B6587680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morph");
  }
  uint64_t v12 = *(void *)(a1 + 80);
  if (!v12)
  {
    sub_1B6586F84(a1, 0);
    uint64_t v12 = *(void *)(a1 + 80);
    if (!v12)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"source");
      uint64_t v12 = 0;
    }
  }
  uint64_t v13 = (void *)sub_1B6536C44(v12, a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B6534800((uint64_t)v13) > a2)
  {
    uint64_t v20 = sub_1B6534884(v13, a2, v14, v15, v16, v17, v18, v19);
    if (v20)
    {
      if (*(float *)v20 != a9)
      {
        *(float *)uint64_t v20 = a9;
        sub_1B6587204(a1, v21, v22, v23, v24, v25, v26, v27);
      }
    }
  }
}

uint64_t sub_1B658777C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morph");
  }
  uint64_t v16 = sub_1B6586B40();
  *(_DWORD *)(v16 + 64) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(v16 + 184) = *(_DWORD *)(a1 + 184);
  *(_WORD *)(v16 + 192) = *(_WORD *)(a1 + 192);
  uint64_t v17 = *(void *)(a1 + 80);
  if (v17)
  {
    uint64_t v18 = (void *)sub_1B65369E4(v17, v9, v10, v11, v12, v13, v14, v15);
    sub_1B6587144(v16, v18, v19, v20, v21, v22, v23, v24);
    if (v18) {
      CFRelease(v18);
    }
  }
  CFArrayRef v25 = *(const __CFArray **)(a1 + 72);
  if (v25) {
    *(void *)(v16 + 72) = CFArrayCreateMutableCopy(0, 0, v25);
  }
  *(void *)(v16 + 88) = *(void *)(a1 + 88);
  *(_DWORD *)(v16 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v16 + 128) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(v16 + 144) = *(_DWORD *)(a1 + 144);
  if (*(void *)(a1 + 96))
  {
    size_t v26 = 4 * *(unsigned int *)(a1 + 88);
    uint64_t v27 = malloc_type_malloc(v26, 0x3AE75981uLL);
    *(void *)(v16 + 96) = v27;
    memcpy(v27, *(const void **)(a1 + 96), v26);
  }
  if (*(void *)(a1 + 104))
  {
    size_t v28 = 4 * *(unsigned int *)(a1 + 92);
    unsigned int v29 = malloc_type_malloc(v28, 0x8EF6AA48uLL);
    *(void *)(v16 + 104) = v29;
    memcpy(v29, *(const void **)(a1 + 104), v28);
  }
  if (*(void *)(a1 + 120))
  {
    size_t v30 = 4 * *(unsigned int *)(a1 + 112);
    uint64_t v31 = malloc_type_malloc(v30, 0x5A1509EEuLL);
    *(void *)(v16 + 120) = v31;
    memcpy(v31, *(const void **)(a1 + 120), v30);
  }
  if (*(void *)(a1 + 136))
  {
    size_t v32 = 4 * *(unsigned int *)(a1 + 128);
    uint64_t v33 = malloc_type_malloc(v32, 0xE7FF1B31uLL);
    *(void *)(v16 + 136) = v33;
    memcpy(v33, *(const void **)(a1 + 136), v32);
  }
  if (*(void *)(a1 + 152))
  {
    size_t v34 = 4 * *(unsigned int *)(a1 + 112);
    uint64_t v35 = malloc_type_malloc(v34, 0xFD710948uLL);
    *(void *)(v16 + 152) = v35;
    memcpy(v35, *(const void **)(a1 + 152), v34);
  }
  if (*(void *)(a1 + 160))
  {
    size_t v36 = 4 * *(unsigned int *)(a1 + 144);
    uint64_t v37 = malloc_type_malloc(v36, 0xEDE5D889uLL);
    *(void *)(v16 + 160) = v37;
    memcpy(v37, *(const void **)(a1 + 160), v36);
  }
  if (*(void *)(a1 + 168))
  {
    size_t v38 = 4
        * (*(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 92) + *(_DWORD *)(a1 + 144) + *(_DWORD *)(a1 + 88));
    uint64_t v39 = malloc_type_malloc(v38, 0x563F591uLL);
    *(void *)(v16 + 168) = v39;
    memcpy(v39, *(const void **)(a1 + 168), v38);
  }
  sub_1B6583A28(a1, (CFTypeRef *)v16, (uint64_t)v25, v11, v12, v13, v14, v15);
  return v16;
}

uint64_t sub_1B65879C0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 192) = a2;
  return result;
}

uint64_t sub_1B65879C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192);
}

void sub_1B65879D0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 72);
    if (v3)
    {
      CFIndex Count = CFArrayGetCount(v3);
      CFIndex v6 = Count - 1;
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        CFIndex v8 = 0;
        char v9 = 0;
        do
        {
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v8);
            if (!ValueAtIndex) {
              break;
            }
            uint64_t v17 = (uint64_t)ValueAtIndex;
            if (sub_1B64AD1C4((uint64_t)ValueAtIndex, 1, v11, v12, v13, v14, v15, v16)) {
              break;
            }
            char v9 = 1;
            sub_1B63DE908(v17, a2, 1, 1, v13, v14, v15, v16);
            if (v6 == v8++) {
              goto LABEL_13;
            }
          }
          ++v8;
        }
        while (v7 != v8);
        if ((v9 & 1) == 0) {
          return;
        }
LABEL_13:
        sub_1B63DE908(a2, a2, 1, 1, v13, v14, v15, v16);
      }
    }
  }
}

void sub_1B6587ACC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  char v100 = a3;
  if (*(unsigned __int8 *)(a1 + 193) != a3)
  {
    uint64_t v9 = a1;
    *(unsigned char *)(a1 + 193) = a3;
    if (a3) {
      sub_1B6587E98(a1, a2, 1, a4, a5, a6, a7, a8, v95);
    }
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v9 + 72));
    if (Count >= 1)
    {
      CFIndex v10 = 0;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v98 = v9;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 72), v10);
        unsigned int v104 = 0;
        float v105 = 0;
        unsigned int v104 = sub_1B64ACF7C((uint64_t)ValueAtIndex, 0, v12, v13, v14, v15, v16, v17);
        uint64_t v24 = sub_1B64AD1C4((uint64_t)ValueAtIndex, 0, v18, v19, v20, v21, v22, v23);
        float v105 = v24;
        if (v104)
        {
          uint64_t v32 = sub_1B64ACE9C((uint64_t)ValueAtIndex, 0, 0, v27, v28, v29, v30, v31);
          uint64_t v24 = v105;
        }
        else
        {
          uint64_t v32 = -1;
        }
        uint64_t v102 = v32;
        if (v24)
        {
          uint64_t v33 = sub_1B64ACE9C((uint64_t)ValueAtIndex, 1, 0, v27, v28, v29, v30, v31);
          uint64_t v103 = v33;
          if (v105) {
            uint64_t v34 = 2;
          }
          else {
            uint64_t v34 = 1;
          }
          if (v105 && v33 != v32) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. It doesn't make sense to call CFXMeshElementCreateIntervalList for sources with different channels", v26, v27, v28, v29, v30, v31, (uint64_t)"channels[i] == channels[0]");
          }
        }
        else
        {
          uint64_t v103 = -1;
          uint64_t v34 = 1;
        }
        if (v100)
        {
          values = 0;
          uint64_t v41 = (void *)sub_1B63E0F4C((uint64_t)&v104, v34, 1);
          values = v41;
          if (v41)
          {
            CFArrayRef v42 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
            sub_1B64AD458((uint64_t)ValueAtIndex, v42, v43, v44, v45, v46, v47, v48);
            CFRelease(v42);
            CFRelease(values);
            for (uint64_t i = 0; i != v34; ++i)
            {
              uint64_t v55 = sub_1B641D8FC((uint64_t)*(&v104 + i), (uint64_t)values, *(&v102 + i), v49, v50, v51, v52, v53);
              if (v55)
              {
                float32x4_t v62 = (const void *)v55;
                if (a4) {
                  (*(void (**)(uint64_t, const void *, void, uint64_t))(a4 + 16))(a4, ValueAtIndex, *(&v104 + i), v55);
                }
                sub_1B64AC4C8((uint64_t)ValueAtIndex, v62, 0, 255, v58, v59, v60, v61);
                CFRelease(v62);
              }
              else
              {
                sub_1B63F2F54(16, @"Error: Failed to create packed source %d for sparse morph target %d", v56, v57, v58, v59, v60, v61, i);
              }
            }
          }
          else
          {
            sub_1B63F2F54(16, @"Error: Could not create intervals for sparse morph target %d (this morph target is useless)", v35, v36, v37, v38, v39, v40, v10);
            sub_1B64AD458((uint64_t)ValueAtIndex, 0, v82, v83, v84, v85, v86, v87);
            float32x4_t v88 = &v104;
            do
            {
              float32x4_t v89 = *v88++;
              sub_1B64AC8AC((uint64_t)ValueAtIndex, v89, v63, v49, v50, v51, v52, v53);
              --v34;
            }
            while (v34);
          }
          if (!v41) {
            goto LABEL_45;
          }
        }
        else
        {
          if (sub_1B64ABD08((uint64_t)ValueAtIndex, v25, v26, v27, v28, v29, v30, v31) != (const __CFArray *)1) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. sparse target should only contain 1 mesh element", v64, v65, v66, v67, v68, v69, (uint64_t)"CFXMeshGetElementsCount(targetMesh) == 1");
          }
          if (*(_DWORD *)(v9 + 64) != 1) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. sparse targets should be in additive mode", v64, v65, v66, v67, v68, v69, (uint64_t)"morph->_calculationMode == kCFXMorpherCalculationModeAdditive");
          }
          double v70 = sub_1B64ABD78((uint64_t)ValueAtIndex, 0, 0, v65, v66, v67, v68, v69);
          int v77 = sub_1B64ACF7C(a2, 0, v71, v72, v73, v74, v75, v76);
          if (v77) {
            uint64_t v81 = sub_1B641D8A0((uint64_t)v77, v78, v79, v80, v50, v51, v52, v53);
          }
          else {
            uint64_t v81 = 0;
          }
          float32x4_t v90 = &v102;
          float32x4_t v91 = (uint64_t *)&v104;
          do
          {
            uint64_t v92 = *v90++;
            uint64_t v93 = sub_1B641DD34(*v91, (uint64_t)v70, v81, v92, v50, v51, v52, v53);
            if (v93)
            {
              long long v94 = (const void *)v93;
              if (a4) {
                (*(void (**)(uint64_t, const void *, uint64_t, uint64_t))(a4 + 16))(a4, ValueAtIndex, *v91, v93);
              }
              sub_1B64AC4C8((uint64_t)ValueAtIndex, v94, 0, 255, v50, v51, v52, v53);
              CFRelease(v94);
            }
            ++v91;
            --v34;
          }
          while (v34);
        }
        sub_1B6583684((uint64_t)ValueAtIndex, 0, v63, v49, v50, v51, v52, v53);
LABEL_45:
        ++v10;
        uint64_t v9 = v98;
      }
      while (v10 != Count);
    }
  }
}

void sub_1B6587E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 64) != a3)
  {
    int v10 = a3;
    *(_DWORD *)(a1 + 64) = a3;
    uint64_t v13 = sub_1B64ACF7C(a2, 0, a3, a4, a5, a6, a7, a8);
    uint64_t v20 = sub_1B64AD1C4(a2, 0, v14, v15, v16, v17, v18, v19);
    uint64_t v64 = (uint64_t)v13;
    if (v13)
    {
      uint64_t v27 = (uint64_t)v20;
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
      if (Count >= 1)
      {
        for (CFIndex i = 0; Count != i; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
          uint64_t v36 = sub_1B64ACF7C((uint64_t)ValueAtIndex, 0, v30, v31, v32, v33, v34, v35);
          uint64_t v49 = sub_1B64AD1C4((uint64_t)ValueAtIndex, 0, v37, v38, v39, v40, v41, v42);
          if (v49) {
            BOOL v50 = v27 == 0;
          }
          else {
            BOOL v50 = 1;
          }
          int v51 = !v50;
          if (v10 == 1)
          {
            uint64_t v58 = (const void *)sub_1B641D168(v64, (uint64_t)v36, v43, v44, v45, v46, v47, v48);
            if (v51)
            {
              uint64_t v59 = sub_1B641D168(v27, (uint64_t)v49, v52, v53, v54, v55, v56, v57);
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t v58 = (const void *)sub_1B641D5B8(v64, (uint64_t)v36, v43, v44, v45, v46, v47, v48);
            if (v51)
            {
              uint64_t v59 = sub_1B641D5B8(v27, (uint64_t)v49, v60, v61, v54, v55, v56, v57);
LABEL_16:
              float32x4_t v62 = (const void *)v59;
              if (v58) {
                goto LABEL_19;
              }
              goto LABEL_22;
            }
          }
          float32x4_t v62 = 0;
          if (v58)
          {
LABEL_19:
            if (a4) {
              (*(void (**)(uint64_t, const void *, const void *, const void *))(a4 + 16))(a4, ValueAtIndex, v36, v58);
            }
            sub_1B64AC4C8((uint64_t)ValueAtIndex, v58, 0, 255, v54, v55, v56, v57);
            CFRelease(v58);
          }
LABEL_22:
          if (v62)
          {
            if (a4) {
              (*(void (**)(uint64_t, const void *, const void *, const void *))(a4 + 16))(a4, ValueAtIndex, v49, v62);
            }
            sub_1B64AC4C8((uint64_t)ValueAtIndex, v62, 0, 255, v54, v55, v56, v57);
            CFRelease(v62);
          }
        }
      }
    }
    else
    {
      sub_1B63F2F54(16, @"Error: CFXMorphConvertToCalculationMode: no base source", v21, v22, v23, v24, v25, v26, a9);
    }
  }
}

uint64_t sub_1B65880A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morph");
  }
  return *(unsigned __int8 *)(a1 + 193);
}

uint64_t sub_1B65880F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

const UInt8 *sub_1B65880F8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(const UInt8 **)(a1 + 168);
  if (result
    || (int v11 = *(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 92) + *(_DWORD *)(a1 + 144)) != 0
    && (*(void *)(a1 + 168) = malloc_type_malloc(4 * (*(_DWORD *)(a1 + 88) + v11), 0x100004052888210uLL), sub_1B6587204(a1, v12, v13, v14, v15, v16, v17, v18), (uint64_t result = *(const UInt8 **)(a1 + 168)) != 0))
  {
    *a2 = *(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 92) + *(_DWORD *)(a1 + 144) + *(_DWORD *)(a1 + 88);
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 80);
    if (!v19)
    {
      sub_1B6586F84(a1, 0);
      uint64_t v19 = *(void *)(a1 + 80);
    }
    uint64_t v20 = (void *)sub_1B6536C44(v19, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    *a2 = sub_1B6534800((uint64_t)v20);
    return sub_1B6534808(v20, 0, v21, v22, v23, v24, v25, v26);
  }
  return result;
}

uint64_t sub_1B65881D8(uint64_t a1, void *key)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 176);
  if (!v4)
  {
    uint64_t v5 = sub_1B65873FC(a1);
    if (!v5) {
      return -1;
    }
    CFArrayRef v6 = v5;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      int v10 = (char *)Count;
      for (CFIndex i = 0; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, (CFIndex)i);
        uint64_t v26 = (const void *)sub_1B64AD910((uint64_t)ValueAtIndex, v13, v14, v15, v16, v17, v18, v19);
        if (!v26) {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v20, v21, v22, v23, v24, v25, (uint64_t)"name");
        }
        CFDictionaryAddValue(Mutable, v26, i);
      }
    }
    *(void *)(a1 + 176) = CFDictionaryCreateCopy(v7, Mutable);
    CFRelease(Mutable);
    CFRelease(v6);
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 176);
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v4, key, (const void **)&value)) {
    return (uint64_t)value;
  }
  else {
    return -1;
  }
}

uint64_t sub_1B6588318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morph");
  }
  return *(unsigned __int8 *)(a1 + 194);
}

void sub_1B6588364(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morph");
  }
  *(unsigned char *)(a1 + 194) = a2;
}

float sub_1B65883B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morph");
  }
  return *(float *)(a1 + 184);
}

void sub_1B6588400(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"morph");
  }
  *(float *)(a1 + 184) = a2;
}

id sub_1B658845C(uint64_t a1)
{
  sub_1B6595A0C(@"kCFXNotificationMorphWillDie", (const void *)a1, 0, 1u);
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8) {
    sub_1B6536D14(v8, 0, v2, v3, v4, v5, v6, v7);
  }
  uint64_t v9 = *(const void **)(a1 + 72);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 72) = 0;
  }
  int v10 = *(const void **)(a1 + 80);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 80) = 0;
  }
  int v11 = *(const void **)(a1 + 176);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 176) = 0;
  }
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 152));
  free(*(void **)(a1 + 160));

  return sub_1B658325C(a1, v12, v13, v14, v15, v16, v17, v18);
}

__CFString *sub_1B6588528(uint64_t a1)
{
  uint64_t v2 = sub_1B65873FC(a1);
  CFArrayRef v3 = v2;
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v13 = sub_1B6583470(a1, v6, v7, v8, v9, v10, v11, v12);
  CFStringAppendFormat(Mutable, 0, @"<CFXMorph %p \"%@\"\n", a1, v13);
  CFStringAppendFormat(Mutable, 0, @"  calc:%d morphNrm:%d targets:%ld\n", *(unsigned int *)(a1 + 64), *(unsigned __int8 *)(a1 + 192), Count);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
      float v22 = sub_1B65875C0(a1, i, v16, v17, v18, v19, v20, v21);
      CFStringAppendFormat(Mutable, 0, @"[%ld] weight:%f %@\n", i, v22, ValueAtIndex);
    }
  }
  CFStringAppend(Mutable, @">");
  if (v3) {
    CFRelease(v3);
  }
  return Mutable;
}

uint64_t sub_1B6588660(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (const void *)sub_1B6583544(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B63C47F8(v10, a2)) {
    return a1;
  }
  uint64_t v12 = *(const void **)(a1 + 80);
  if (!v12)
  {
    sub_1B6586F84(a1, 0);
    uint64_t v12 = *(const void **)(a1 + 80);
  }

  return sub_1B63F4FC8(v12, (uint64_t)a2);
}

__CFArray *sub_1B65886D0(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v3 = *(const __CFArray **)(a1 + 72);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
        CFStringRef v15 = (const __CFString *)sub_1B63CCE0C((uint64_t)ValueAtIndex, v8, v9, v10, v11, v12, v13, v14);
        if (v15)
        {
          CFStringRef v16 = v15;
          CFRetain(v15);
        }
        else
        {
          CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"<unnamed %d>", i);
        }
        uint64_t v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        int v23 = 1;
        int valuePtr = 5;
        float v22 = ValueAtIndex;
        CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
        CFNumberRef v20 = CFNumberCreate(0, kCFNumberLongType, &v22);
        CFDictionarySetValue(v17, @"name", v16);
        CFDictionarySetValue(v17, @"type", v18);
        CFDictionarySetValue(v17, @"address", v20);
        CFDictionarySetValue(v17, @"semantic", v19);
        CFArrayAppendValue(Mutable, v17);
        CFRelease(v19);
        CFRelease(v17);
        CFRelease(v20);
        CFRelease(v18);
        CFRelease(v16);
      }
    }
  }
  return Mutable;
}

uint64_t sub_1B6588894(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 80);
    if (v2) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
    }
  }
  return result;
}

void sub_1B65888BC(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v9 = *a2;
  unsigned int v10 = *a3;
  if (a4 >= 2)
  {
    uint64_t v11 = 0;
    char v12 = 0;
    int v13 = a6 - v9;
    if (a6 < v9) {
      int v13 = 0;
    }
    uint64_t v14 = a1 + 4 * v9;
    while (1)
    {
      if (v13 == v11)
      {
        sub_1B63F2F54(16, @"Error: Internal consistency error. There should be %d runtime morph target weights, but we the current morph weight index is %d.", (uint64_t)a3, a4, a5, a6, a7, a8, a6);
        return;
      }
      int v15 = v11 - a4;
      if (v12)
      {
        *(_DWORD *)(v14 + 4 * v11) = 0;
      }
      else if (a9 >= 1.0)
      {
        if (v15 != -1) {
          goto LABEL_16;
        }
        *(float *)(v14 + 4 * v11) = a9;
      }
      else
      {
        if (v15 == -1) {
          float v16 = 1.0;
        }
        else {
          float v16 = *(float *)(a5 + 4 * v10);
        }
        if (v16 < a9)
        {
LABEL_16:
          char v12 = 0;
          *(_DWORD *)(v14 + 4 * v11) = 0;
          goto LABEL_17;
        }
        if (v11)
        {
          float v17 = *(float *)(a5 + 4 * (v10 - 1));
          float v18 = (float)(a9 - v17) / (float)(v16 - v17);
          *(float *)(a1 + 4 * (v9 - 1 + v11)) = 1.0 - v18;
        }
        else
        {
          float v18 = a9 / v16;
        }
        *(float *)(v14 + 4 * v11) = v18;
      }
      char v12 = 1;
LABEL_17:
      if (v15 != -1) {
        ++v10;
      }
      if (++v11 == a4)
      {
        int v19 = v9 + v11;
        goto LABEL_27;
      }
    }
  }
  int v19 = v9 + 1;
  *(float *)(a1 + 4 * v9) = a9;
LABEL_27:
  *a2 = v19;
  *a3 = v10;
}

CFArrayRef sub_1B65889E4(uint64_t a1)
{
  CFArrayRef result = (const __CFArray *)sub_1B63CD09C(*(void *)(a1 + 72));
  if (result)
  {
    CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    unsigned int v3 = result;
  }
  else
  {
    unsigned int v3 = 0;
  }
  if (v3 != *(_DWORD *)(a1 + 96))
  {
    free(*(void **)(a1 + 88));
    if (v3) {
      CFArrayRef result = (const __CFArray *)malloc_type_calloc(v3, 4uLL, 0x100004052888210uLL);
    }
    else {
      CFArrayRef result = 0;
    }
    *(void *)(a1 + 88) = result;
    *(_DWORD *)(a1 + 96) = v3;
    *(_DWORD *)(a1 + 80) = 0;
  }
  return result;
}

uint64_t sub_1B6588A68()
{
  if (qword_1EB995590 != -1) {
    dispatch_once(&qword_1EB995590, &unk_1F0FB5E68);
  }
  return qword_1EB995598;
}

double sub_1B6588AAC()
{
  if (!qword_1EB995598)
  {
    qword_1EB995598 = sub_1B63C8D10(&qword_1EB995598);
    double result = *(double *)&xmmword_1F0FB8998;
    unk_1EB984850 = xmmword_1F0FB8998;
    unk_1EB984860 = unk_1F0FB89A8;
    qword_1EB984870 = qword_1F0FB89B8;
    unk_1EB984878 = sub_1B6589048;
    qword_1EB984838 = (uint64_t)sub_1B65890C4;
  }
  return result;
}

uint64_t sub_1B6588B2C(const void *a1)
{
  if (qword_1EB995590 != -1) {
    dispatch_once(&qword_1EB995590, &unk_1F0FB5E68);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1EB995598, 0x58uLL);
  uint64_t v16 = sub_1B63F4F08(v2, v3, v4, v5, v6, v7, v8, v9);
  if (v16)
  {
    float v17 = *(void **)(v2 + 72);
    if (v17) {
      sub_1B63F4AAC(v17, v16, v10, v11, v12, v13, v14, v15);
    }
  }
  uint64_t v18 = *(void *)(v2 + 72);
  if (!v18)
  {
    if (!a1) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  sub_1B6586BA4(v18, 0);
  int v19 = *(const void **)(v2 + 72);
  if (v19 == a1) {
    goto LABEL_15;
  }
  if (v19)
  {
    CFRelease(v19);
    *(void *)(v2 + 72) = 0;
  }
  if (a1)
  {
LABEL_13:
    CFTypeRef v20 = CFRetain(a1);
    goto LABEL_14;
  }
  CFTypeRef v20 = 0;
LABEL_14:
  *(void *)(v2 + 72) = v20;
LABEL_15:
  free(*(void **)(v2 + 88));
  *(void *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 100) = 0;
  if (a1)
  {
    sub_1B6586BA4((uint64_t)a1, v2);
    sub_1B65889E4(v2);
  }
  if (v16)
  {
    uint64_t v27 = *(uint64_t **)(v2 + 72);
    if (v27) {
      sub_1B63F4CCC(v27, v16, v21, v22, v23, v24, v25, v26);
    }
  }
  return v2;
}

CFTypeRef *sub_1B6588C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (const void *)sub_1B658777C(*(void *)(a1 + 72), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = (CFTypeRef *)sub_1B6588B2C(v9);
  CFRelease(v9);
  sub_1B6583A28(a1, v10, v11, v12, v13, v14, v15, v16);
  return v10;
}

uint64_t sub_1B6588C84(uint64_t result)
{
  *(_DWORD *)(result + 100) = 0;
  return result;
}

uint64_t sub_1B6588C8C(uint64_t a1, int a2, void *a3, const UInt8 **a4, _DWORD *a5, float *a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (uint64_t)"morpher");
  }
  uint64_t v14 = *(void *)(a1 + 72);
  if (!v14) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (uint64_t)"morph");
  }
  int v15 = *(_DWORD *)(a1 + 100);
  int v16 = sub_1B65880F0(v14);
  if (v15 != a2 || v15 == 0)
  {
    uint64_t v18 = 2;
LABEL_14:
    *(_DWORD *)(a1 + 80) = v16;
    sub_1B65889E4(a1);
    *a3 = *(void *)(a1 + 88);
    int v26 = 0;
    *a4 = sub_1B65880F8(v14, &v26, v19, v20, v21, v22, v23, v24);
    *a5 = v26;
    *a6 = sub_1B6586BD8(v14);
    return v18;
  }
  if (*(_DWORD *)(a1 + 80) != v16)
  {
    uint64_t v18 = 1;
    goto LABEL_14;
  }
  return 0;
}

uint64_t sub_1B6588D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v14 = 0;
  uint64_t v9 = (float *)sub_1B65880F8(*(void *)(a1 + 72), &v14, a3, a4, a5, a6, a7, a8);
  float v10 = sub_1B6586BD8(*(void *)(a1 + 72));
  uint64_t v11 = v14;
  if (v14)
  {
    uint64_t v12 = *(float **)(a1 + 88);
    do
    {
      if (vabds_f32(*v9, *v12) > v10) {
        float *v12 = *v9;
      }
      ++v9;
      ++v12;
      --v11;
    }
    while (v11);
  }
  uint64_t result = (*(_DWORD *)(a1 + 100) + 1);
  *(_DWORD *)(a1 + 100) = result;
  return result;
}

uint64_t sub_1B6588E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"morpher");
  }
  return *(void *)(a1 + 64);
}

void sub_1B6588E6C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    uint64_t v10 = sub_1B63CCE68((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11) {
    uint64_t v11 = sub_1B63CCE68(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v10 != v11)
  {
    uint64_t v12 = *(const void **)(a1 + 64);
    if (v12 != a2)
    {
      if (v12)
      {
        CFRelease(v12);
        *(void *)(a1 + 64) = 0;
      }
      if (a2) {
        CFTypeRef v13 = CFRetain(a2);
      }
      else {
        CFTypeRef v13 = 0;
      }
      *(void *)(a1 + 64) = v13;
    }
    *(_DWORD *)(a1 + 80) = 0;
    if (v10)
    {
      BOOL v14 = sub_1B63CF130((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (sub_1B64AC77C(v10, 1, v14, 0, v15, v16, v17, v18))
      {
        uint64_t v19 = *(void *)(a1 + 72);
        sub_1B65879D0(v19, v10);
      }
    }
  }
}

id sub_1B6588F48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    sub_1B6586BA4(v2, 0);
    CFRelease(*(CFTypeRef *)(a1 + 72));
  }
  free(*(void **)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  uint64_t v10 = *(const void **)(a1 + 64);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 64) = 0;
  }

  return sub_1B658325C(a1, v3, v4, v5, v6, v7, v8, v9);
}

__CFString *sub_1B6588FB8(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<CFXMorpher %p baseGeom:%p state:%d\n", a1, *(void *)(a1 + 64), *(unsigned int *)(a1 + 80));
  CFStringAppendFormat(Mutable, 0, @"  morph:%@\n", *(void *)(a1 + 72));
  CFStringAppend(Mutable, @">");
  return Mutable;
}

uint64_t sub_1B6589048(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (const void *)sub_1B6583544(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B63C47F8(v10, a2)) {
    return a1;
  }
  uint64_t v12 = *(const void **)(a1 + 72);

  return sub_1B63F4FC8(v12, (uint64_t)a2);
}

uint64_t sub_1B65890A4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 72);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
  }
  return result;
}

__CFArray *sub_1B65890C4(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v9 = 2;
  int valuePtr = 5;
  uint64_t v8 = a1 + 72;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v9);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &v8);
  CFDictionarySetValue(v3, @"name", @"morph");
  CFDictionarySetValue(v3, @"type", v4);
  CFDictionarySetValue(v3, @"address", v6);
  CFDictionarySetValue(v3, @"semantic", v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  return Mutable;
}

uint64_t sub_1B6589618(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v14 = 0;
  if (a2) {
    uint64_t v5 = objc_msgSend_newFunctionWithName_constantValues_error_(a3, a2, a1, (uint64_t)a2, &v14);
  }
  else {
    uint64_t v5 = objc_msgSend_newFunctionWithName_(a3, 0, a1, a4);
  }
  uint64_t v12 = v5;
  if (!v5) {
  return v12;
  }
}

id sub_1B6589690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_1B6589618(*(void *)(a1 + 296), *(const char **)(a1 + 280), *(void **)(a1 + 104), a4);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = (void *)v5;
  uint64_t v8 = sub_1B6589618(*(void *)(a1 + 304), *(const char **)(a1 + 280), *(void **)(a1 + 104), v6);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)v8;
  id v10 = objc_alloc_init(MEMORY[0x1E4F352F0]);
  objc_msgSend_setVertexFunction_(v10, v11, (uint64_t)v7, v12);

  objc_msgSend_setFragmentFunction_(v10, v13, (uint64_t)v9, v14);
  for (uint64_t i = 0; i != 8; ++i)
  {
    uint64_t v19 = *(void *)(a1 + 112 + 8 * i);
    uint64_t v20 = objc_msgSend_colorAttachments(v10, v15, v16, v17);
    uint64_t v23 = objc_msgSend_objectAtIndexedSubscript_(v20, v21, i, v22);
    objc_msgSend_setPixelFormat_(v23, v24, v19, v25);
  }
  if (*(unsigned char *)(a1 + 323))
  {
    for (uint64_t j = 0; j != 8; ++j)
    {
      uint64_t v31 = *(void *)(a1 + 208 + 8 * j);
      uint64_t v32 = objc_msgSend_colorAttachments(v10, v15, v16, v17);
      uint64_t v35 = objc_msgSend_objectAtIndexedSubscript_(v32, v33, j, v34);
      objc_msgSend_setWriteMask_(v35, v36, v31, v37);
    }
  }
  uint64_t v38 = *(void *)(a1 + 200);
  if (v38) {
    sub_1B6539FF8(v38, v10, v16, v17, v26, v27, v28, v29);
  }
  objc_msgSend_setVertexDescriptor_(v10, v15, *(void *)(a1 + 288), v17);
  if (*(unsigned __int8 *)(a1 + 192) <= 1u) {
    objc_msgSend_setRasterSampleCount_(v10, v39, 1, v40);
  }
  else {
    objc_msgSend_setRasterSampleCount_(v10, v39, *(unsigned __int8 *)(a1 + 192), v40);
  }
  objc_msgSend_setDepthAttachmentPixelFormat_(v10, v41, *(void *)(a1 + 176), v42);
  objc_msgSend_setStencilAttachmentPixelFormat_(v10, v43, *(void *)(a1 + 184), v44);
  unint64_t v47 = *(unsigned __int8 *)(a1 + 67);
  if (v47 >= 2) {
    objc_msgSend_setMaxVertexAmplificationCount_(v10, v45, v47, v46);
  }
  uint64_t v48 = *(void *)(a1 + 312);
  if (v48) {
    (*(void (**)(uint64_t, id))(v48 + 16))(v48, v10);
  }
  if (!objc_msgSend_vertexFunction(v10, v45, v47, v46))
  {
    sub_1B63F2F54(0, @"Info: Shaders without a vertex function are not allowed", v50, v51, v52, v53, v54, v55, v57);
    return 0;
  }
  objc_msgSend_setInputPrimitiveTopology_(v10, v49, *(unsigned __int8 *)(a1 + 272), v51);
  return v10;
}

void sub_1B6589B08(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  if (!a2 && a3)
  {
    uint64_t v6 = *(void *)(a1 + 104);
    objc_msgSend_description(a3, 0, (uint64_t)a3, a4);
    sub_1B63F2F54(16, @"Error: Compiler error while building render pipeline state for node %@:\n%@", v7, v8, v9, v10, v11, v12, v6);
  }
  objc_msgSend_setState_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
  uint64_t v13 = *(void *)(a1 + 32) + 32;
  long long v15 = *(_OWORD *)(a1 + 208);
  long long v14 = *(_OWORD *)(a1 + 224);
  long long v16 = *(_OWORD *)(a1 + 192);
  *(void *)(v13 + 80) = *(void *)(a1 + 240);
  *(_OWORD *)(v13 + 48) = v15;
  *(_OWORD *)(v13 + 64) = v14;
  *(_OWORD *)(v13 + 32) = v16;
  long long v17 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v13 + 16) = v17;
  uint64_t v21 = objc_msgSend_vertexDescriptor(*(void **)(a1 + 40), v18, v19, v20);
  objc_msgSend_setVertexDescriptor_(*(void **)(a1 + 32), v22, v21, v23);
  uint64_t v27 = objc_msgSend_vertexFunction(*(void **)(a1 + 40), v24, v25, v26);
  objc_msgSend_setVertexFunction_(*(void **)(a1 + 32), v28, v27, v29);
  uint64_t v33 = objc_msgSend_fragmentFunction(*(void **)(a1 + 40), v30, v31, v32);
  objc_msgSend_setFragmentFunction_(*(void **)(a1 + 32), v34, v33, v35);
  *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(a1 + 48);
  uint64_t v43 = *(void **)(a1 + 104);
  if (v43) {
    uint64_t v43 = (void *)sub_1B63F4F54(v43, v36, v37, v38, v39, v40, v41, v42);
  }
  *(void *)(*(void *)(a1 + 32) + 16) = v43;
  memcpy(__dst, (const void *)(a1 + 48), sizeof(__dst));
  sub_1B659B810((uint64_t)__dst);
}

void sub_1B6589C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(a1 + 64);
  memcpy(__dst, (const void *)(a1 + 64), sizeof(__dst));
  sub_1B659B79C((uint64_t)__dst);
  uint64_t v12 = objc_msgSend_deviceQueue(*(void **)(*(void *)(a1 + 32) + 32), v9, v10, v11);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1B6589D30;
  block[3] = &unk_1E61448C0;
  block[4] = a4;
  block[5] = a2;
  long long v14 = *(_OWORD *)(a1 + 32);
  uint64_t v15 = a3;
  memcpy(v17, v8, sizeof(v17));
  long long v16 = *(_OWORD *)(a1 + 48);
  dispatch_async(v12, block);
}

void sub_1B6589D30(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  if (*(void *)(a1 + 40))
  {
    objc_msgSend_generateBindingsForPipeline_withReflection_program_material_geometry_pass_(*(void **)(*(void *)(a1 + 48) + 40), v2, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112));
    objc_msgSend_setState_(*(void **)(a1 + 56), v4, *(void *)(a1 + 40), v5);
  }
  else
  {
    objc_msgSend_setState_(*(void **)(a1 + 56), v2, 0, v3);
  }
  memcpy(__dst, (const void *)(a1 + 88), sizeof(__dst));
  sub_1B659B810((uint64_t)__dst);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_1B6589DD0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(NSObject **)(a1 + 32);

  dispatch_group_leave(v2);
}

void sub_1B6589FB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (const void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 104);
  long long v78 = *(_OWORD *)(a1 + 88);
  long long v79 = v7;
  long long v8 = *(_OWORD *)(a1 + 136);
  long long v80 = *(_OWORD *)(a1 + 120);
  long long v81 = v8;
  long long v9 = *(_OWORD *)(a1 + 72);
  long long v76 = *(_OWORD *)(a1 + 56);
  long long v77 = v9;
  long long v10 = *(_OWORD *)(a1 + 176);
  long long v70 = *(_OWORD *)(a1 + 160);
  long long v71 = v10;
  long long v11 = *(_OWORD *)(a1 + 192);
  long long v12 = *(_OWORD *)(a1 + 208);
  long long v13 = *(_OWORD *)(a1 + 224);
  uint64_t v14 = *(void *)(a1 + 248);
  uint64_t v75 = *(void *)(a1 + 240);
  long long v73 = v12;
  long long v74 = v13;
  long long v72 = v11;
  long long v15 = *(_OWORD *)(a1 + 304);
  long long v67 = *(_OWORD *)(a1 + 288);
  long long v68 = v15;
  long long v16 = *(_OWORD *)(a1 + 256);
  long long v17 = *(_OWORD *)(a1 + 272);
  uint64_t v18 = *(void *)(a1 + 328);
  uint64_t v69 = *(void *)(a1 + 320);
  long long v65 = v16;
  long long v66 = v17;
  uint64_t v20 = *(void *)(a1 + 336);
  uint64_t v19 = *(void *)(a1 + 344);
  uint64_t v21 = *(void *)(a1 + 352);
  long long v64 = *(_OWORD *)(a1 + 360);
  uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32);
  if (a2)
  {
    uint64_t v23 = (uint64_t)a2;
    if ((const char *)objc_msgSend_commonProfileCacheLibrary(v22, a2, a3, a4) == a2 && v6)
    {
      uint64_t v19 = sub_1B6450C34(v6, 0, v25, v26, v27, v28, v29, v30);
      uint64_t v21 = sub_1B6450C34(v6, 1, v31, v32, v33, v34, v35, v36);
    }
  }
  else
  {
    uint64_t v23 = objc_msgSend_frameworkLibrary(v22, 0, a3, a4);
    uint64_t v6 = objc_msgSend_defaultProgramUsingTessellation_(*(void **)(a1 + 32), v37, *(void *)(a1 + 360) != 0, v38);
    uint64_t v19 = sub_1B6450C34(v6, 0, v39, v40, v41, v42, v43, v44);
    uint64_t v21 = sub_1B6450C34(v6, 1, v45, v46, v47, v48, v49, v50);
    uint64_t v18 = sub_1B6450F30(v6, v51, v52, v53, v54, v55, v56, v57);
    uint64_t v14 = 0;
  }
  *(void *)__dst = v6;
  *(_OWORD *)&__dst[40] = v78;
  *(_OWORD *)&__dst[56] = v79;
  *(_OWORD *)&__dst[72] = v80;
  *(_OWORD *)&__dst[88] = v81;
  *(_OWORD *)&__dst[8] = v76;
  *(_OWORD *)&__dst[24] = v77;
  *(void *)&__dst[104] = v23;
  *(_OWORD *)&__dst[128] = v71;
  *(_OWORD *)&__dst[112] = v70;
  *(_OWORD *)&__dst[176] = v74;
  *(_OWORD *)&__dst[160] = v73;
  *(_OWORD *)&__dst[144] = v72;
  *(void *)&__dst[192] = v75;
  *(void *)&__dst[200] = v14;
  *(_OWORD *)&__dst[256] = v68;
  *(_OWORD *)&__dst[240] = v67;
  *(_OWORD *)&__dst[208] = v65;
  *(_OWORD *)&__dst[224] = v66;
  *(void *)&__dst[272] = v69;
  *(void *)&__dst[280] = v18;
  *(void *)&__dst[288] = v20;
  *(void *)&__dst[296] = v19;
  *(void *)&__dst[304] = v21;
  *(_OWORD *)&__dst[312] = v64;
  id v58 = sub_1B6589690((uint64_t)__dst, v24, v25, v26);
  if (v58)
  {
    uint64_t v60 = (uint64_t)v58;
    uint64_t v61 = *(void **)(a1 + 32);
    uint64_t v62 = *(void *)(a1 + 40);
    *(void *)__dst = v6;
    *(_OWORD *)&__dst[40] = v78;
    *(_OWORD *)&__dst[56] = v79;
    *(_OWORD *)&__dst[72] = v80;
    *(_OWORD *)&__dst[88] = v81;
    *(_OWORD *)&__dst[8] = v76;
    *(_OWORD *)&__dst[24] = v77;
    *(void *)&__dst[104] = v23;
    *(_OWORD *)&__dst[128] = v71;
    *(_OWORD *)&__dst[112] = v70;
    *(_OWORD *)&__dst[176] = v74;
    *(_OWORD *)&__dst[160] = v73;
    *(_OWORD *)&__dst[144] = v72;
    *(void *)&__dst[192] = v75;
    *(void *)&__dst[200] = v14;
    *(_OWORD *)&__dst[256] = v68;
    *(_OWORD *)&__dst[240] = v67;
    *(_OWORD *)&__dst[208] = v65;
    *(_OWORD *)&__dst[224] = v66;
    *(void *)&__dst[272] = v69;
    *(void *)&__dst[280] = v18;
    *(void *)&__dst[288] = v20;
    *(void *)&__dst[296] = v19;
    *(void *)&__dst[304] = v21;
    *(_OWORD *)&__dst[312] = v64;
    objc_msgSend__createPipelineStateWithDescriptor_desc_pipeline_(v61, v59, v60, (uint64_t)__dst, v62);
  }
  memcpy(__dst, v5, sizeof(__dst));
  sub_1B659B810((uint64_t)__dst);
}

void sub_1B658BA84(uint64_t a1)
{
}

void sub_1B658BB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658BF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658C090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658C1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658C338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658C484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658C5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658C72C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658C894(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658CA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658CB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658CC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B658CDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

CFStringRef sub_1B658CEEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v12 = *(const __CFString **)(a1 + 40);

  return sub_1B65834BC(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B658D2F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
  if ((sub_1B65005BC(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160));
    objc_msgSend_removeObjectForKey_(*(void **)(*(void *)(a1 + 40) + 168), v10, *(void *)(a1 + 48), v11);
    CFStringRef v12 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 160);
    os_unfair_lock_unlock(v12);
  }
}

void sub_1B658D504(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B658D5CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B658D6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B658D78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B658DCCC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v24 = objc_alloc_init(CFXBinding);
  uint64_t v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(void *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(void *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(void *)(a1 + 64), v17);
  sub_1B65844C0(v5, v24, v18, v19, v20, v21, v22, v23);
}

void sub_1B658DE28(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v12 = *(const __CFString **)(a1 + 40);

  sub_1B6584728(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B658DF04(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFNumberRef v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);

  sub_1B658469C(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B658E530(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_reset(*(void **)(a1 + 16), a2, a3, a4);
  uint64_t v8 = objc_msgSend_engine(*(void **)(a1 + 16), v5, v6, v7);
  objc_msgSend_disconnectNodeInput_(v8, v9, *(void *)(a1 + 16), v10);
  uint64_t v14 = objc_msgSend_engine(*(void **)(a1 + 16), v11, v12, v13);
  objc_msgSend_disconnectNodeOutput_(v14, v15, *(void *)(a1 + 16), v16);
  uint64_t v20 = objc_msgSend_engine(*(void **)(a1 + 16), v17, v18, v19);
  objc_msgSend_detachNode_(v20, v21, *(void *)(a1 + 16), v22);

  uint64_t v23 = *(void **)(a1 + 32);
  if (v23 != (void *)(a1 + 40))
  {
    do
    {
      uint64_t v24 = (const void *)v23[4];
      if (v24) {
        CFRelease(v24);
      }
      uint64_t v25 = (void *)v23[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)v23[2];
          BOOL v27 = *v26 == (void)v23;
          uint64_t v23 = v26;
        }
        while (!v27);
      }
      uint64_t v23 = v26;
    }
    while (v26 != (void *)(a1 + 40));
  }
  sub_1B643670C(a1 + 32, *(void **)(a1 + 40));
  return a1;
}

void sub_1B658E600(_Unwind_Exception *a1)
{
  sub_1B643670C(v1 + 32, *(void **)(v1 + 40));
  _Unwind_Resume(a1);
}

id **sub_1B658E61C(id **result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (!result[2])
  {
    CFNumberRef v4 = result;
    objc_msgSend_lock((*result)[1], a2, a3, a4);
    uint64_t v8 = *v4;
    if (!v4[2])
    {
      id v9 = sub_1B658E728(v8, v5, v6, v7);
      if (objc_msgSend_mainMixerNode(v9, v10, v11, v12))
      {
        uint64_t v19 = (id *)objc_alloc_init(MEMORY[0x1E4F15388]);
        v4[2] = v19;
        objc_msgSend_attachNode_(v9, v20, (uint64_t)v19, v21);
        id v22 = objc_alloc(MEMORY[0x1E4F153A0]);
        inited = objc_msgSend_initStandardFormatWithSampleRate_channels_(v22, v23, 2, v24, 44100.0);
        uint64_t v26 = (uint64_t)v4[2];
        uint64_t v30 = objc_msgSend_mainMixerNode(v9, v27, v28, v29);
        objc_msgSend_connect_to_format_(v9, v31, v26, v30, inited);
      }
      else
      {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v13, v14, v15, v16, v17, v18, (uint64_t)"mainMixerNode");
      }
      uint64_t v8 = *v4;
    }
    id v32 = v8[1];
    return (id **)objc_msgSend_unlock(v32, v5, v6, v7);
  }
  return result;
}

id sub_1B658E728(id *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1B658EF4C;
  block[3] = &unk_1E6143EB8;
  block[4] = a1;
  if (qword_1E9DDB620 != -1) {
    dispatch_once(&qword_1E9DDB620, block);
  }
  objc_msgSend_lock(a1[1], a2, a3, a4);
  if ((objc_msgSend_isRunning(*a1, v5, v6, v7) & 1) == 0)
  {
    uint64_t v19 = 0;
    if ((objc_msgSend_startAndReturnError_(*a1, v8, (uint64_t)&v19, v10) & 1) == 0)
    {
      uint64_t v11 = objc_msgSend_description(v19, v8, v9, v10);
      sub_1B63F2F54(16, @"Error: Error starting the audio engine: %@", v12, v13, v14, v15, v16, v17, v11);

      *a1 = 0;
    }
  }
  objc_msgSend_unlock(a1[1], v8, v9, v10);
  return *a1;
}

uint64_t sub_1B658E818(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B658E61C((id **)a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_audioPlayer(a2, v6, v7, v8);
  if ((objc_msgSend_customAudioNode(a2, v10, v11, v12) & 1) == 0)
  {
    id v16 = sub_1B658E728(*(id **)a1, v13, v14, v15);
    if ((id)objc_msgSend_engine(v9, v17, v18, v19) != v16)
    {
      uint64_t v23 = objc_msgSend_engine(v9, v20, v21, v22);
      objc_msgSend_detachNode_(v23, v24, (uint64_t)v9, v25);
      objc_msgSend_attachNode_(v16, v26, (uint64_t)v9, v27);
    }
    uint64_t v28 = *(void *)(a1 + 16);
    uint64_t v29 = objc_msgSend_audioBufferFormat(a2, v20, v21, v22);
    objc_msgSend_connect_to_format_(v16, v30, (uint64_t)v9, v28, v29);
    if (v9) {
      objc_msgSend_play(a2, v13, v14, v15);
    }
  }
  uint64_t v31 = (const void *)objc_msgSend_nodeRef(a2, v13, v14, v15);
  uint64_t v39 = v31;
  objc_msgSend_lock(*(void **)(*(void *)a1 + 8), v32, v33, v34);
  if (v31) {
    CFRetain(v31);
  }
  sub_1B658F690((uint64_t **)(a1 + 32), (unint64_t *)&v39, (uint64_t *)&v39);
  return objc_msgSend_unlock(*(void **)(*(void *)a1 + 8), v35, v36, v37);
}

uint64_t sub_1B658E930(id **a1, void *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = (CFTypeRef)objc_msgSend_nodeRef(a2, (const char *)a2, a3, a4);
  id v9 = sub_1B658E728(*a1, v6, v7, v8);
  uint64_t v13 = objc_msgSend_audioNode(a2, v10, v11, v12);
  uint64_t result = objc_msgSend_detachNode_(v9, v14, v13, v15);
  if (cf)
  {
    objc_msgSend_lock((*a1)[1], v17, v18, v19);
    sub_1B658F74C((uint64_t)(a1 + 4), (unint64_t *)&cf);
    if (cf) {
      CFRelease(cf);
    }
    return objc_msgSend_unlock((*a1)[1], v20, v21, v22);
  }
  return result;
}

uint64_t sub_1B658E9CC(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(result + 16))
  {
    uint64_t v8 = result;
    id v9 = *(const void **)(result + 24);
    if (v9 || (id v9 = sub_1B644678C(*(uint64_t **)(v8 + 8), (uint64_t)a2, a3, a4, a5, a6, a7, a8)) != 0)
    {
      uint64_t v10 = (float32x2_t *)sub_1B64A01D4((uint64_t)v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      uint64_t v11 = *(void **)(v8 + 16);
      LODWORD(v12) = v10[6].i32[0];
      LODWORD(v13) = v10[6].i32[1];
      LODWORD(v14) = v10[7].i32[0];
      objc_msgSend_setListenerPosition_(v11, v15, v16, v17, v12, v13, v14);
      float v18 = -v10[5].f32[0];
      __int32 v19 = v10[3].i32[0];
      float32x2_t v34 = vneg_f32(v10[4]);
      float v35 = v18;
      float32x2_t v36 = v10[2];
      __int32 v37 = v19;
      objc_msgSend_setListenerVectorOrientation_(v11, v20, (uint64_t)&v34, v21);
    }
    objc_msgSend_lock(*(void **)(*(void *)v8 + 8), a2, a3, a4);
    uint64_t v29 = *(void **)(v8 + 32);
    if (v29 != (void *)(v8 + 40))
    {
      do
      {
        uint64_t v30 = v29[4];
        if (v30) {
          sub_1B64A44A8(v30, (uint64_t)v22, v23, v24, v25, v26, v27, v28);
        }
        uint64_t v31 = (void *)v29[1];
        if (v31)
        {
          do
          {
            id v32 = v31;
            uint64_t v31 = (void *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            id v32 = (void *)v29[2];
            BOOL v33 = *v32 == (void)v29;
            uint64_t v29 = v32;
          }
          while (!v33);
        }
        uint64_t v29 = v32;
      }
      while (v32 != (void *)(v8 + 40));
    }
    return objc_msgSend_unlock(*(void **)(*(void *)v8 + 8), v22, v23, v24);
  }
  return result;
}

void *sub_1B658EAD4(void *a1)
{
  *a1 = 0;
  a1[3] = 0;
  a1[2] = a1 + 3;
  a1[4] = 0;
  a1[6] = 0;
  a1[5] = a1 + 6;
  a1[7] = 0;
  a1[1] = objc_alloc_init(MEMORY[0x1E4F28FD0]);
  return a1;
}

void sub_1B658EB44(_Unwind_Exception *a1)
{
  sub_1B643670C(v2, *v4);
  sub_1B658F7C8(v1, *v3);
  _Unwind_Resume(a1);
}

void sub_1B658EB68()
{
}

void sub_1B658EBAC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x10A0C40AC8DBCBCLL);
  _Unwind_Resume(a1);
}

unint64_t sub_1B658EBD0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v13 = sub_1B644558C(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v13)
  {
    objc_msgSend_lock(*(void **)(a1 + 8), v10, v11, v12, v13, a2);
    uint64_t v17 = *(void **)(a1 + 24);
    if (!v17) {
      goto LABEL_24;
    }
    float v18 = (void *)(a1 + 24);
    do
    {
      unint64_t v19 = v17[4];
      BOOL v20 = v19 >= v13;
      if (v19 >= v13) {
        uint64_t v21 = v17;
      }
      else {
        uint64_t v21 = v17 + 1;
      }
      if (v20) {
        float v18 = v17;
      }
      uint64_t v17 = (void *)*v21;
    }
    while (*v21);
    if (v18 == (void *)(a1 + 24)) {
      goto LABEL_24;
    }
    if (v13 < v18[4]) {
      goto LABEL_24;
    }
    uint64_t v24 = (void *)v18[6];
    uint64_t v22 = v18 + 6;
    uint64_t v23 = v24;
    if (!v24) {
      goto LABEL_24;
    }
    uint64_t v25 = v22;
    do
    {
      unint64_t v26 = v23[4];
      BOOL v27 = v26 >= a2;
      if (v26 >= a2) {
        uint64_t v28 = v23;
      }
      else {
        uint64_t v28 = v23 + 1;
      }
      if (v27) {
        uint64_t v25 = v23;
      }
      uint64_t v23 = (void *)*v28;
    }
    while (*v28);
    if (v25 == v22 || v25[4] > a2) {
LABEL_24:
    }
      operator new();
    unint64_t v13 = v25[5];
    objc_msgSend_unlock(*(void **)(a1 + 8), v14, v15, v16);
  }
  return v13;
}

uint64_t sub_1B658ED38(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = sub_1B644558C(a2, a2, a3, a4, a5, a6, a7, a8);
  objc_msgSend_lock(*(void **)(a1 + 8), v11, v12, v13);
  if (v10)
  {
    uint64_t v17 = *(void **)(a1 + 24);
    if (v17)
    {
      uint64_t v18 = a1 + 24;
      do
      {
        unint64_t v19 = v17[4];
        BOOL v20 = v19 >= v10;
        if (v19 >= v10) {
          uint64_t v21 = v17;
        }
        else {
          uint64_t v21 = v17 + 1;
        }
        if (v20) {
          uint64_t v18 = (uint64_t)v17;
        }
        uint64_t v17 = (void *)*v21;
      }
      while (*v21);
      if (v18 != a1 + 24 && v10 >= *(void *)(v18 + 32))
      {
        uint64_t v22 = *(void **)(v18 + 48);
        if (v22)
        {
          uint64_t v23 = (uint64_t *)(v18 + 48);
          do
          {
            unint64_t v24 = v22[4];
            BOOL v25 = v24 >= a2;
            if (v24 >= a2) {
              unint64_t v26 = v22;
            }
            else {
              unint64_t v26 = v22 + 1;
            }
            if (v25) {
              uint64_t v23 = v22;
            }
            uint64_t v22 = (void *)*v26;
          }
          while (*v26);
          if (v23 != (uint64_t *)(v18 + 48) && v23[4] <= a2)
          {
            uint64_t v27 = v23[5];
            if (v27)
            {
              uint64_t v28 = sub_1B658E530(v27, v14, v15, v16);
              MEMORY[0x1BA9B6D80](v28, 0x10A0C406E04462DLL);
            }
            sub_1B64500F8((uint64_t **)(v18 + 40), v23);
            operator delete(v23);
          }
        }
        if (!*(void *)(v18 + 56)) {
          sub_1B658F8F4((uint64_t **)(a1 + 16), v18);
        }
      }
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a1 + 16);
    if (v29 != a1 + 24)
    {
      do
      {
        uint64_t v30 = *(void **)(v29 + 48);
        if (v30)
        {
          uint64_t v31 = (uint64_t *)(v29 + 48);
          do
          {
            unint64_t v32 = v30[4];
            BOOL v33 = v32 >= a2;
            if (v32 >= a2) {
              float32x2_t v34 = v30;
            }
            else {
              float32x2_t v34 = v30 + 1;
            }
            if (v33) {
              uint64_t v31 = v30;
            }
            uint64_t v30 = (void *)*v34;
          }
          while (*v34);
          if (v31 != (uint64_t *)(v29 + 48) && v31[4] <= a2)
          {
            uint64_t v35 = v31[5];
            if (v35)
            {
              uint64_t v36 = sub_1B658E530(v35, v14, v15, v16);
              MEMORY[0x1BA9B6D80](v36, 0x10A0C406E04462DLL);
            }
            sub_1B64500F8((uint64_t **)(v29 + 40), v31);
            operator delete(v31);
          }
        }
        if (*(void *)(v29 + 56))
        {
          __int32 v37 = *(uint64_t **)(v29 + 8);
          if (v37)
          {
            do
            {
              uint64_t v38 = v37;
              __int32 v37 = (uint64_t *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              uint64_t v38 = *(uint64_t **)(v29 + 16);
              BOOL v39 = *v38 == v29;
              uint64_t v29 = (uint64_t)v38;
            }
            while (!v39);
          }
        }
        else
        {
          uint64_t v38 = sub_1B658F8F4((uint64_t **)(a1 + 16), v29);
        }
        uint64_t v29 = (uint64_t)v38;
      }
      while (v38 != (uint64_t *)(a1 + 24));
    }
  }
  uint64_t v40 = *(void **)(a1 + 8);

  return objc_msgSend_unlock(v40, v14, v15, v16);
}

void sub_1B658EF4C(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 32);
  const void *v1 = objc_alloc_init(MEMORY[0x1E4F15380]);
  id v10 = objc_alloc_init(MEMORY[0x1E4F153D0]);
  objc_msgSend_attachNode_(*v1, v2, (uint64_t)v10, v3);
  CFNumberRef v4 = *v1;
  uint64_t v8 = objc_msgSend_mainMixerNode(v4, v5, v6, v7);
  objc_msgSend_connect_to_format_(v4, v9, (uint64_t)v10, v8, 0);
}

uint64_t sub_1B658EFD4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_audioPlayer(a2, (const char *)a2, a3, a4);
  uint64_t result = objc_msgSend_customAudioNode(a2, v6, v7, v8);
  if ((result & 1) == 0)
  {
    objc_opt_class();
    uint64_t result = objc_opt_isKindOfClass();
    if ((result & 1) == 0)
    {
      objc_msgSend_lock(*(void **)(a1 + 8), v10, v11, v12);
      unint64_t v25 = objc_msgSend_world(a2, v13, v14, v15);
      unint64_t v26 = &v25;
      uint64_t v16 = sub_1B658F828((uint64_t **)(a1 + 16), &v25, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v26);
      BOOL v20 = (uint64_t *)v16[5];
      uint64_t v21 = v16 + 6;
      if (v20 != v16 + 6)
      {
        do
        {
          sub_1B658E818(v20[5], (char *)a2, v18, v19);
          uint64_t v22 = (uint64_t *)v20[1];
          if (v22)
          {
            do
            {
              uint64_t v23 = v22;
              uint64_t v22 = (uint64_t *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              uint64_t v23 = (uint64_t *)v20[2];
              BOOL v24 = *v23 == (void)v20;
              BOOL v20 = v23;
            }
            while (!v24);
          }
          BOOL v20 = v23;
        }
        while (v23 != v21);
      }
      return objc_msgSend_unlock(*(void **)(a1 + 8), v17, v18, v19);
    }
  }
  return result;
}

uint64_t sub_1B658F0D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend_customAudioNode(a2, (const char *)a2, a3, a4);
  if ((result & 1) == 0)
  {
    objc_msgSend_lock(*(void **)(a1 + 8), v7, v8, v9);
    unint64_t v22 = objc_msgSend_world(a2, v10, v11, v12);
    uint64_t v23 = &v22;
    uint64_t v13 = sub_1B658F828((uint64_t **)(a1 + 16), &v22, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v23);
    uint64_t v17 = (uint64_t *)v13[5];
    uint64_t v18 = v13 + 6;
    if (v17 != v13 + 6)
    {
      do
      {
        sub_1B658E930((id **)v17[5], a2, v15, v16);
        uint64_t v19 = (uint64_t *)v17[1];
        if (v19)
        {
          do
          {
            BOOL v20 = v19;
            uint64_t v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            BOOL v20 = (uint64_t *)v17[2];
            BOOL v21 = *v20 == (void)v17;
            uint64_t v17 = v20;
          }
          while (!v21);
        }
        uint64_t v17 = v20;
      }
      while (v20 != v18);
    }
    return objc_msgSend_unlock(*(void **)(a1 + 8), v14, v15, v16);
  }
  return result;
}

uint64_t sub_1B658F1AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v13 = *(_OWORD *)(a2 + 48);
  CFNumberRef v4 = objc_msgSend_audioNode(a1, (const char *)a2, a3, a4);
  uint64_t result = objc_msgSend_conformsToProtocol_(v4, v5, (uint64_t)&unk_1F108B500, v6);
  if (result)
  {
    LODWORD(v12) = DWORD2(v13);
    LODWORD(v11) = DWORD1(v13);
    return objc_msgSend_setPosition_(v4, v8, v9, v10, *(double *)&v13, v11, v12);
  }
  return result;
}

uint64_t sub_1B658F220(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_audioPlayer(a1, a2, a3, a4);
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    uint64_t v9 = objc_msgSend_audioPlayer(a1, v6, v7, v8);
    uint64_t result = objc_msgSend_engine(v9, v10, v11, v12);
    if (result) {
      return objc_msgSend_play(v9, v13, v14, v15);
    }
  }
  return result;
}

uint64_t sub_1B658F2AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1EB995F58 != -1) {
    dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
  }
  uint64_t v5 = qword_1EB995700;

  return sub_1B658EFD4(v5, a1, a3, a4);
}

uint64_t sub_1B658F310(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1EB995F58 != -1) {
    dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
  }
  uint64_t v5 = qword_1EB995700;

  return sub_1B658F0D4(v5, a1, a3, a4);
}

unint64_t sub_1B658F374(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1EB995F58 != -1) {
    dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
  }
  unint64_t result = sub_1B658EBD0(qword_1EB995700, a1, a3, a4, a5, a6, a7, a8);
  if (result) {
    *(void *)(result + 24) = a2;
  }
  return result;
}

unint64_t sub_1B658F3D8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1EB995F58 != -1) {
    dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
  }
  unint64_t result = sub_1B658EBD0(qword_1EB995700, a1, a3, a4, a5, a6, a7, a8);
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

unint64_t sub_1B658F438(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1EB995F58 != -1) {
    dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
  }
  unint64_t result = sub_1B658EBD0(qword_1EB995700, a1, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    return sub_1B658E9CC(result, v10, v11, v12, v13, v14, v15, v16);
  }
  return result;
}

id sub_1B658F4B0(char a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (qword_1EB995F58 != -1) {
      dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
    }
    CFNumberRef v4 = (id *)qword_1EB995700;
    return sub_1B658E728(v4, a2, a3, a4);
  }
  else if (qword_1EB995700)
  {
    if (qword_1EB995F58 != -1) {
      dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
    }
    return *(id *)qword_1EB995700;
  }
  else
  {
    return 0;
  }
}

id **sub_1B658F560(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1EB995F58 != -1) {
    dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
  }
  unint64_t result = (id **)sub_1B658EBD0(qword_1EB995700, a1, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v13 = result;
    sub_1B658E61C(result, v10, v11, v12);
    return (id **)v13[2];
  }
  return result;
}

unint64_t sub_1B658F5C8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1EB995F58 != -1) {
    dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
  }
  uint64_t v9 = qword_1EB995700;

  return sub_1B658EBD0(v9, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B658F62C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1EB995F58 != -1) {
    dispatch_once(&qword_1EB995F58, &unk_1F0FB5E88);
  }
  uint64_t v9 = qword_1EB995700;

  return sub_1B658ED38(v9, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t *sub_1B658F690(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1B644FF08(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1B658F74C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  CFNumberRef v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      CFNumberRef v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_1B64500F8((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void sub_1B658F7C8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1B658F7C8(a1, *a2);
    sub_1B658F7C8(a1, a2[1]);
    sub_1B643670C((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *sub_1B658F828(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    void v11[5] = (uint64_t)(v11 + 6);
    sub_1B644FF08(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1B658F8F4(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_1B64500F8(a1, (uint64_t *)a2);
  sub_1B643670C(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

void sub_1B65903EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B6590404(uint64_t a1, uint64_t a2)
{
}

void sub_1B6590414(uint64_t a1)
{
}

uint64_t sub_1B6590420(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v7 = objc_msgSend_asset(a2, (const char *)a2, (uint64_t)a3, a4);
  uint64_t v11 = objc_msgSend_name(v7, v8, v9, v10);
  uint64_t result = objc_msgSend_isEqualToString_(v11, v12, *(void *)(a1 + 32), v13);
  if (result)
  {
    *a3 = 1;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = a2;
  }
  return result;
}

void sub_1B6590544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B659055C(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v7 = objc_msgSend_name(a2, (const char *)a2, (uint64_t)a3, a4);
  uint64_t result = objc_msgSend_isEqualToString_(v7, v8, *(void *)(a1 + 32), v9);
  if (result)
  {
    *a3 = 1;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = a2;
  }
  return result;
}

uint64_t sub_1B6590C18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_setRegistry_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
}

uint64_t sub_1B6590F48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addWorldReference_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
}

uint64_t sub_1B659101C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_removeWorldReference_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
}

uint64_t sub_1B6591F70(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = sub_1B63CD09C(a2);
  if (!sub_1B65879C8(v3)) {
    return 1;
  }
  if (sub_1B63F3214(7)) {
    return 1;
  }
  return 3;
}

void *sub_1B6591FC8(void *a1, const void *a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  v16.receiver = a1;
  v16.super_class = (Class)VFXMTLMorphDeformer;
  uint64_t v13 = objc_msgSendSuper2(&v16, sel_init);
  if (v13)
  {
    if (a2) {
      CFTypeRef v14 = CFRetain(a2);
    }
    else {
      CFTypeRef v14 = 0;
    }
    v13[1] = v14;
    *((unsigned char *)v13 + 32) = (a3 & 2) != 0;
    *((unsigned char *)v13 + 16) = a4;
    v13[3] = a5;
    *((_DWORD *)v13 + 14) = -1;
    objc_msgSend_setupMorphTargetsWithComputeContext_(v13, v11, a6, v12);
  }
  return v13;
}

uint64_t sub_1B6592134(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 56) = -1;
  }
  return result;
}

void sub_1B6592D5C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  uint64_t v18 = sub_1B64AC5F8(a3, 0, 0, 0, a5, a6, a7, a8);
  if (*(unsigned char *)(*(void *)(a1 + 32) + 32))
  {
    uint64_t v19 = sub_1B64AC5F8(v8, 1, 0, 0, v14, v15, v16, v17);
    if (!v19)
    {
      uint64_t v19 = (const void *)sub_1B63DE824(v8, *(void *)(a1 + 40), 0, v13, v14, v15, v16, v17);
      if (!v19) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v20, v21, v22, v23, v24, v25, (uint64_t)"originalNormalSource");
      }
      CFAutorelease(v19);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  int v26 = *(unsigned __int8 *)(a1 + 84);
  if (*(unsigned char *)(a1 + 84)) {
    BOOL v27 = v18 == 0;
  }
  else {
    BOOL v27 = 0;
  }
  if (v27)
  {
    if (!sub_1B64ABD08(v8, v11, v12, v13, v14, v15, v16, v17)) {
      return;
    }
    int v26 = *(unsigned __int8 *)(a1 + 84);
  }
  uint64_t v28 = *(void *)(a1 + 32);
  if (v26)
  {
    if (*(void *)(v28 + 40) != 1)
    {
      uint64_t v29 = sub_1B64ABD78(v8, 0, 0, v13, v14, v15, v16, v17);
      uint64_t v37 = sub_1B641D8A0(*(void *)(a1 + 48), v30, v31, v32, v33, v34, v35, v36);
      uint64_t v43 = sub_1B64ACE9C(*(void *)(a1 + 40), 0, 0, v38, v39, v40, v41, v42);
      uint64_t v18 = (const void *)sub_1B641DD34((uint64_t)v18, (uint64_t)v29, v37, v43, v44, v45, v46, v47);
      CFAutorelease(v18);
      uint64_t v28 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v28 + 32))
      {
        uint64_t v50 = sub_1B641D8A0(*(void *)(a1 + 56), v48, v49, v13, v14, v15, v16, v17);
        uint64_t v56 = sub_1B64ACE9C(*(void *)(a1 + 40), 1, 0, v51, v52, v53, v54, v55);
        uint64_t v19 = (const void *)sub_1B641DD34((uint64_t)v19, (uint64_t)v29, v50, v56, v57, v58, v59, v60);
        CFAutorelease(v19);
        uint64_t v28 = *(void *)(a1 + 32);
      }
    }
  }
  if (*(unsigned char *)(v28 + 17) == 1 && (uint64_t v61 = *(void *)(a1 + 64)) != 0)
  {
    uint64_t v69 = (const void *)sub_1B65931B8((uint64_t)v18, *(unsigned int *)(a1 + 80), v61, v13, v14, v15, v16, v17);
    if (*(unsigned char *)(*(void *)(a1 + 32) + 32))
    {
      uint64_t v70 = sub_1B65931B8((uint64_t)v19, *(unsigned int *)(a1 + 80), *(void *)(a1 + 64), v64, v65, v66, v67, v68);
LABEL_24:
      long long v71 = (const void *)v70;
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v69 = CFRetain(v18);
    if (*(unsigned char *)(*(void *)(a1 + 32) + 32))
    {
      uint64_t v70 = (uint64_t)CFRetain(v19);
      goto LABEL_24;
    }
  }
  long long v71 = 0;
LABEL_26:
  if (*(unsigned char *)(a1 + 85))
  {
    uint64_t v72 = sub_1B641D168(*(void *)(a1 + 48), (uint64_t)v69, v63, v64, v65, v66, v67, v68);
    if (!v72) {
      return;
    }
    long long v73 = (const void *)v72;
    CFRelease(v69);
    if (*(unsigned char *)(*(void *)(a1 + 32) + 32))
    {
      uint64_t v74 = sub_1B641D168(*(void *)(a1 + 56), (uint64_t)v71, v63, v64, v65, v66, v67, v68);
      if (!v74) {
        return;
      }
      uint64_t v75 = (const void *)v74;
      CFRelease(v71);
      long long v71 = v75;
    }
  }
  else
  {
    long long v73 = v69;
  }
  if (*(void *)(*(void *)(a1 + 32) + 40) != 1)
  {
    unsigned int v122 = sub_1B641D8A0((uint64_t)v73, v62, v63, v64, v65, v66, v67, v68);
    if (*(_DWORD *)(*(void *)(a1 + 32) + 64) != v122) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Internal consistency error - unexpected sparse moprh target", v116, v117, v118, v119, v120, v121, (uint64_t)"vertexCount == _vertexCountForComputeKernel");
    }
    uint64_t v123 = v122;
    goto LABEL_49;
  }
  uint64_t v83 = sub_1B641D478((uint64_t)v73, v62, v63, v64, v65, v66, v67, v68);
  uint64_t v87 = v76;
  if (v71)
  {
    uint64_t v88 = sub_1B641D478((uint64_t)v71, v76, v77, v78, v79, v80, v81, v82);
    uint64_t v100 = v87;
    if (!v87)
    {
      CFRelease(v73);
LABEL_53:
      uint64_t v131 = v71;
LABEL_55:
      CFRelease(v131);
      return;
    }
    uint64_t v101 = v88;
    CFTypeRef cf = v73;
    unint64_t v136 = v71;
    uint64_t v132 = a1;
    int v133 = a2;
    uint64_t v134 = v8;
    unsigned int v102 = 0;
    unsigned int v103 = 0;
    unsigned int v104 = 0;
    LODWORD(v87) = v89;
    int v105 = v90;
    do
    {
      *(double *)v106.i64 = sub_1B65D6198(BYTE4(v87), (const float *)(v83 + v102), v91, v92, v93, v94, v95, v96, v97, v98, v99.f32[0]);
      float32x4_t v137 = v106;
      *(double *)v97.i64 = sub_1B65D6198(v87, (const float *)(v101 + v103), v107, v108, v109, v110, v111, v112, v106, v113, v114);
      v99.i64[0] = 0x3400000034000000;
      v99.i64[1] = 0x3400000034000000;
      float v98 = COERCE_FLOAT(vminvq_u32((uint32x4_t)vcgeq_f32(v99, (float32x4_t)(*(_OWORD *)&v137 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
      if ((LODWORD(v98) & 0x80000000) != 0)
      {
        float32x4_t v97 = (float32x4_t)vcgeq_f32(v99, vabsq_f32(v97));
        v97.i32[0] = vminvq_u32((uint32x4_t)v97);
        int v115 = v97.i32[0] >= 0;
      }
      else
      {
        int v115 = 1;
      }
      v104 += v115;
      v103 += v105;
      v102 += BYTE5(v87);
      --v100;
    }
    while (v100);
  }
  else
  {
    uint64_t v124 = v76;
    if (!v76)
    {
      uint64_t v131 = v73;
      goto LABEL_55;
    }
    CFTypeRef cf = v73;
    unint64_t v136 = 0;
    uint64_t v132 = a1;
    int v133 = a2;
    uint64_t v134 = v8;
    unsigned int v125 = 0;
    unsigned int v104 = 0;
    do
    {
      v126.i64[0] = COERCE_UNSIGNED_INT64(sub_1B65D6198(BYTE4(v87), (const float *)(v83 + v125), v77, v78, v79, v80, v81, v82, v84, v85.f32[0], v86)) & 0x7FFFFFFF7FFFFFFFLL;
      v126.i64[1] &= 0x7FFFFFFF7FFFFFFFuLL;
      v85.i64[0] = 0x3400000034000000;
      v85.i64[1] = 0x3400000034000000;
      float32x4_t v84 = (float32x4_t)vcgeq_f32(v85, v126);
      v84.i32[0] = vminvq_u32((uint32x4_t)v84);
      v104 += v84.i32[0] >= 0;
      v125 += BYTE5(v87);
      --v124;
    }
    while (v124);
  }
  if (v104)
  {
    uint64_t v123 = v104;
    a2 = v133;
    uint64_t v8 = v134;
    a1 = v132;
    long long v73 = cf;
    long long v71 = v136;
LABEL_49:
    uint64_t v127 = *(void *)(a1 + 72);
    uint64_t v128 = *(void *)(a1 + 32);
    unsigned int v129 = *(_DWORD *)(v128 + 68);
    *(_DWORD *)(v128 + 68) = v129 + 1;
    uint64_t v130 = v127 + 40 * v129;
    *(_DWORD *)uint64_t v130 = a2;
    *(_DWORD *)(v130 + 4) = 0;
    *(void *)(v130 + 8) = v8;
    *(void *)(v130 + 16) = v73;
    *(void *)(v130 + 24) = v71;
    *(void *)(v130 + 32) = v123;
    return;
  }
  CFRelease(cf);
  long long v71 = v136;
  if (v136) {
    goto LABEL_53;
  }
}

uint64_t sub_1B65931B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (unsigned int *)a3;
  unsigned int v9 = a2;
  uint64_t v11 = sub_1B641D478(a1, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v13 = v12;
  size_t v14 = BYTE5(v12);
  uint64_t v15 = v9;
  unint64_t v16 = BYTE5(v12) * (unint64_t)v9;
  uint64_t v17 = (const UInt8 *)malloc_type_malloc(v16, 0x735ECC95uLL);
  uint64_t v18 = v17;
  if (v9)
  {
    uint64_t v19 = v9;
    uint64_t v20 = (UInt8 *)v17;
    do
    {
      unsigned int v21 = *v8++;
      memcpy(v20, (const void *)(v11 + v14 * (unint64_t)v21), v14);
      v20 += v14;
      --v19;
    }
    while (v19);
  }
  CFDataRef v22 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v18, v16, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
  __int16 v30 = sub_1B641D56C(a1, v23, v24, v25, v26, v27, v28, v29);
  uint64_t v32 = sub_1B641D00C(v30, v22, BYTE6(v13), HIBYTE(v13), v15, v14, 0, v31);
  CFRelease(v22);
  return v32;
}

void sub_1B65932B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B65944C4()
{
  return 0;
}

uint64_t sub_1B65948C0(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a3) {
    return 0;
  }
  long long v18 = xmmword_1F0FBAD20;
  uint64_t v4 = sub_1B6451D68();
  sub_1B6451F1C(v4, &v18, v5, v6, v7, v8, v9, v10);
  sub_1B6451E98(v4, a3, v11, v12, v13, v14, v15, v16);
  return v4;
}

BOOL sub_1B6594924(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = objc_msgSend_player(a1, a2, a3, a4);
  uint64_t v8 = objc_msgSend_currentItem(v4, v5, v6, v7);
  uint64_t v12 = objc_msgSend_asset(v8, v9, v10, v11);
  uint64_t v15 = objc_msgSend_tracksWithMediaCharacteristic_(v12, v13, *MEMORY[0x1E4F15B10], v14);
  return objc_msgSend_count(v15, v16, v17, v18) == 0;
}

uint64_t sub_1B6594960()
{
  return 1;
}

uint64_t sub_1B6594DB0()
{
  return 0;
}

uint64_t sub_1B6594DB8(uint64_t result, unsigned char *a2, void *a3, void *a4)
{
  *a2 = *(unsigned char *)(result + 64);
  *a3 = *(void *)(result + 72);
  *a4 = *(void *)(result + 80);
  return result;
}

void sub_1B6595194(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B659529C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B659544C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_containsAlpha(a1, a2, a3, a4) ^ 1;
}

uint64_t sub_1B6595468(uint64_t result, unsigned char *a2, void *a3, void *a4)
{
  *a2 = *(unsigned char *)(result + 49);
  *a3 = *(void *)(result + 56);
  *a4 = *(void *)(result + 64);
  return result;
}

void sub_1B6595710(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B6595850(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B659593C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B6595954(const void *a1, void (__cdecl *a2)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef), const __CFString *a3, const void *a4, CFNotificationSuspensionBehavior a5)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterAddObserver(LocalCenter, a1, a2, a3, a4, a5);
}

void sub_1B65959BC(const void *a1, const __CFString *a2, const void *a3)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterRemoveObserver(LocalCenter, a1, a2, a3);
}

void sub_1B6595A0C(const __CFString *a1, const void *a2, const __CFDictionary *a3, Boolean a4)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();

  CFNotificationCenterPostNotification(LocalCenter, a1, a2, a3, a4);
}

uint64_t sub_1B6595A64(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_1B6DABD0C(a1, "CustomAuthoring");
  *(void *)uint64_t v8 = &unk_1F0FB2EF8;
  *(void *)(v8 + 24) = a2;
  *(_DWORD *)(v8 + 32) = 0;
  uint64_t v9 = v8 + 32;
  *(_DWORD *)(v8 + 36) = 0;
  *(void *)(v8 + 48) = a3;
  *(void *)(v8 + 40) = v8 + 48;
  *(void *)(v8 + 56) = a4;
  CFRetain(a3);
  CFRetain(*(CFTypeRef *)(a1 + 56));
  id v10 = sub_1B68BF84C();
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v21, (uint64_t)v25, 16);
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v10);
        }
        uint64_t v18 = (const char *)objc_msgSend_UTF8String(*(void **)(*((void *)&v21 + 1) + 8 * v17), v12, v13, v14);
        CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)&v20, v18);
        sub_1B63D0190(v9, &v20);
        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v12, (uint64_t)&v21, (uint64_t)v25, 16);
    }
    while (v15);
  }
  return a1;
}

void sub_1B6595BD8(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 36)) {
    free(*(void **)(v1 + 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6595C0C(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2EF8;
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 56));
  if (*(_DWORD *)(a1 + 36)) {
    free(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_1B6595C6C(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 36)) {
    free(*(void **)(v1 + 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B6595C8C(uint64_t a1)
{
  sub_1B6595C0C(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6595CC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = a2 + 16;
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3)
  {
    sub_1B63D00C4((unsigned int *)a2, v3, 1);
    uint64_t v5 = *(unsigned int *)(a1 + 32);
    if (v5)
    {
      uint64_t v6 = *(void **)(a1 + 40);
      uint64_t v7 = 8 * v5;
      do
      {
        sub_1B63D0190(a2, v6++);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

void sub_1B6595D34(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 4)) {
    free(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6595D54@<X0>(CFX::RG::ResourceIdentifier *a1@<X0>, uint64_t a2@<X8>)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = CFX::RG::ResourceIdentifier::finalColor(a1);
  return sub_1B63D0050(a2, v4, 1);
}

unint64_t sub_1B6595DC0(uint64_t a1)
{
  unint64_t v1 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * *(void *)(a1 + 48)) ^ ((0x9DDFEA08EB382D69 * *(void *)(a1 + 48)) >> 47));
  return 0x9DDFEA08EB382D69 * (v1 ^ (v1 >> 47));
}

uint64_t sub_1B6595DEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (void *)sub_1B644689C(a1[3], a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = a1[6];
  uint64_t v13 = (void *)a1[7];
  uint64_t v14 = a1[3];
  uint64_t v18 = objc_msgSend_commandQueue(v11, v15, v16, v17);

  return sub_1B68BE9C8(a2, a3, v12, v13, v14, v18);
}

uint64_t sub_1B6595E60(uint64_t a1)
{
  return a1 + 32;
}

void sub_1B65961DC(uint64_t a1)
{
}

CFStringRef sub_1B65962B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v12 = *(const __CFString **)(a1 + 40);

  return sub_1B65834BC(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B6596694(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
  if ((sub_1B65005BC(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 32));
    objc_msgSend_removeObjectForKey_(*(void **)(*(void *)(a1 + 40) + 40), v10, *(void *)(a1 + 48), v11);
    CFStringRef v12 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 32);
    os_unfair_lock_unlock(v12);
  }
}

void sub_1B65968A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6596970(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6596A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6596B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6597070(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  long long v24 = objc_alloc_init(CFXBinding);
  uint64_t v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(void *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(void *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(void *)(a1 + 64), v17);
  sub_1B65844C0(v5, v24, v18, v19, v20, v21, v22, v23);
}

void sub_1B65971CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v12 = *(const __CFString **)(a1 + 40);

  sub_1B6584728(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B65972A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);

  sub_1B658469C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void *sub_1B6597690(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v6 = objc_msgSend_count(a1, v3, v4, v5);
  uint64_t v9 = objc_msgSend_initWithCapacity_(v2, v7, v6, v8);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v10, (uint64_t)&v19, (uint64_t)v23, 16);
  if (v11)
  {
    uint64_t v14 = v11;
    uint64_t v15 = *(void *)v20;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v20 != v15) {
          objc_enumerationMutation(a1);
        }
        uint64_t v17 = objc_msgSend_meshWithMeshRef_(VFXMesh, v12, *(void *)(*((void *)&v19 + 1) + 8 * v16), v13);
        if (v17) {
          objc_msgSend_addObject_(v9, v12, v17, v13);
        }
        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v12, (uint64_t)&v19, (uint64_t)v23, 16);
    }
    while (v14);
  }
  return v9;
}

void *sub_1B65977C0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  unint64_t v5 = (unint64_t)a2;
  uint64_t v7 = &a2[a3];
  if ((unint64_t)&a2[a3] > objc_msgSend_count(a1, a2, a3, a4)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Invalid range", v8, v9, v10, v11, v12, v13, (uint64_t)"range.location + range.length <= targets.count");
  }
  id v14 = objc_alloc(MEMORY[0x1E4F1CA48]);
  long long v19 = objc_msgSend_initWithCapacity_(v14, v15, v4, v16);
  if (v5 < (unint64_t)v7)
  {
    do
    {
      uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(a1, v17, v5, v18);
      uint64_t v23 = objc_msgSend_meshWithMeshRef_(VFXMesh, v21, v20, v22);
      if (v23) {
        objc_msgSend_addObject_(v19, v17, v23, v18);
      }
      ++v5;
      --v4;
    }
    while (v4);
  }
  return v19;
}

void sub_1B6597A10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayRef v12 = (const __CFArray *)sub_1B6597A8C(*(void **)(a1 + 40));
    sub_1B65870C8(v6, v12, *(unsigned __int8 *)(*(void *)(a1 + 32) + 161), v7, v8, v9, v10, v11);
  }
}

void *sub_1B6597A8C(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v6 = objc_msgSend_count(a1, v3, v4, v5);
  uint64_t v9 = objc_msgSend_initWithCapacity_(v2, v7, v6, v8);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v10, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v11)
  {
    uint64_t v15 = v11;
    uint64_t v16 = *(void *)v23;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v23 != v16) {
          objc_enumerationMutation(a1);
        }
        uint64_t v18 = objc_msgSend_meshRef(*(void **)(*((void *)&v22 + 1) + 8 * v17), v12, v13, v14);
        objc_msgSend_addObject_(v9, v19, v18, v20);
        ++v17;
      }
      while (v15 != v17);
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v12, (uint64_t)&v22, (uint64_t)v26, 16);
    }
    while (v15);
  }
  return v9;
}

void sub_1B6597ED8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    uint64_t v9 = v5;
    uint64_t v10 = objc_msgSend_count(*(void **)(a1 + 40), v6, v7, v8);
    if (v10 >= 1)
    {
      uint64_t v13 = v10;
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v15 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v11, i, v12);
        objc_msgSend_floatValue(v15, v16, v17, v18);
        sub_1B6587680(v9, i, v19, v20, v21, v22, v23, v24, v25);
      }
    }
  }
}

uint64_t sub_1B659821C()
{
  for (uint64_t i = 0; i != 128; ++i)
  {
    id v1 = [NSString alloc];
    uint64_t result = objc_msgSend_initWithFormat_(v1, v2, @"weights[%d]", v3, i);
    qword_1E9DDB628[i] = result;
  }
  return result;
}

void sub_1B6598428(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    float v13 = *(float *)(a1 + 48);
    sub_1B6587680(v5, v12, v6, v7, v8, v9, v10, v11, v13);
  }
}

BOOL sub_1B65991C8(BOOL result, char *a2, void *a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, a2, (uint64_t)&v36, (uint64_t)v40, 16);
    if (v6)
    {
      uint64_t v10 = v6;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)v37;
      while (2)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v37 != v13) {
            objc_enumerationMutation(a3);
          }
          uint64_t v15 = objc_msgSend_unsignedIntegerValue(*(void **)(*((void *)&v36 + 1) + 8 * i), v7, v8, v9);
          v11 += v15;
          if (v11 - 1 >= (unint64_t)objc_msgSend_count(a2, v16, v17, v18)) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. Invalid in-between count (out of bounds) passed to morpher initialization", v20, v21, v22, v23, v24, v25, (uint64_t)"inBetweenIndex < targetsAndInBetweens.count");
          }
          if (v11 - 1 >= (unint64_t)objc_msgSend_count(a2, v19, v20, v21)) {
            return 0;
          }
          uint64_t v12 = v12 + v15 - 1;
        }
        uint64_t v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v7, (uint64_t)&v36, (uint64_t)v40, 16);
        if (v10) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (objc_msgSend_count(a4, v7, v8, v9) != v12)
    {
      objc_msgSend_count(a4, v26, v27, v28);
      sub_1B63F2F54(17, @"Assertion '%s' failed. Expected %u in-betweens but found %u", v29, v30, v31, v32, v33, v34, (uint64_t)"inBetweenWeights.count == inBetweenCountValidation");
    }
    return objc_msgSend_count(a4, v26, v27, v28) == v12;
  }
  return result;
}

id sub_1B6599380(id result, const char *a2, void **a3, void **a4)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v7 = *(void **)a2;
    uint64_t v8 = *a3;
    uint64_t v9 = *a4;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    obuint64_t j = v8;
    uint64_t v96 = v7;
    uint64_t result = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v8, a2, (uint64_t)&v106, (uint64_t)v112, 16);
    if (result)
    {
      id v13 = result;
      uint64_t v88 = (char *)a2;
      unsigned __int8 v89 = a3;
      unsigned __int8 v90 = a4;
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)v107;
      char v16 = 1;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v107 != v15) {
            objc_enumerationMutation(obj);
          }
          unint64_t v18 = objc_msgSend_unsignedIntegerValue(*(void **)(*((void *)&v106 + 1) + 8 * (void)v17), v10, v11, v12, v88, v89, v90);
          if (v18 >= 2)
          {
            unint64_t v19 = v18 - 1;
            float v20 = 0.0;
            uint64_t v21 = v14;
            unint64_t v22 = v18 - 1;
            while (1)
            {
              uint64_t v23 = objc_msgSend_objectAtIndexedSubscript_(v9, v10, v21, v12);
              objc_msgSend_floatValue(v23, v24, v25, v26);
              if (v20 > v27) {
                break;
              }
              ++v21;
              float v20 = v27;
              if (!--v22) {
                goto LABEL_13;
              }
            }
            char v16 = 0;
LABEL_13:
            v14 += v19;
          }
          uint64_t v17 = (char *)v17 + 1;
        }
        while (v17 != v13);
        uint64_t result = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v106, (uint64_t)v112, 16);
        id v13 = result;
      }
      while (result);
      if ((v16 & 1) == 0)
      {
        id v28 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        id v29 = objc_alloc(MEMORY[0x1E4F1CA48]);
        uint64_t v33 = objc_msgSend_count(v96, v30, v31, v32);
        long long v36 = objc_msgSend_initWithCapacity_(v29, v34, v33, v35);
        id v37 = objc_alloc(MEMORY[0x1E4F1CA48]);
        uint64_t v41 = objc_msgSend_count(v9, v38, v39, v40);
        uint64_t v44 = objc_msgSend_initWithCapacity_(v37, v42, v41, v43);
        long long v102 = 0u;
        long long v103 = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        uint64_t v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v45, (uint64_t)&v102, (uint64_t)v111, 16);
        if (v46)
        {
          uint64_t v50 = v46;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v94 = *(void *)v103;
          unint64_t v53 = 0x1E4F28000uLL;
          do
          {
            uint64_t v54 = 0;
            uint64_t v91 = v50;
            do
            {
              if (*(void *)v103 != v94) {
                objc_enumerationMutation(obj);
              }
              unint64_t v57 = objc_msgSend_unsignedIntegerValue(*(void **)(*((void *)&v102 + 1) + 8 * v54), v47, v48, v49);
              uint64_t v58 = v52;
              if (v57 >= 2)
              {
                uint64_t v93 = v54;
                objc_msgSend_removeAllObjects(v28, v55, v52, v56);
                uint64_t v61 = 0;
                unint64_t v92 = v57;
                unint64_t v62 = v57 - 1;
                do
                {
                  uint64_t v63 = objc_msgSend_numberWithUnsignedInteger_(*(void **)(v53 + 3792), v59, v61, v60);
                  objc_msgSend_addObject_(v28, v64, v63, v65);
                  ++v61;
                }
                while (v62 != v61);
                v101[0] = MEMORY[0x1E4F143A8];
                v101[1] = 3221225472;
                v101[2] = sub_1B6599B14;
                v101[3] = &unk_1E6144A58;
                v101[4] = v9;
                v101[5] = v51;
                objc_msgSend_sortUsingComparator_(v28, v59, (uint64_t)v101, v60);
                long long v99 = 0u;
                long long v100 = 0u;
                long long v97 = 0u;
                long long v98 = 0u;
                uint64_t v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v66, (uint64_t)&v97, (uint64_t)v110, 16);
                if (v67)
                {
                  uint64_t v69 = v67;
                  uint64_t v70 = *(void *)v98;
                  do
                  {
                    long long v71 = v28;
                    for (uint64_t i = 0; i != v69; ++i)
                    {
                      if (*(void *)v98 != v70) {
                        objc_enumerationMutation(v71);
                      }
                      uint64_t v73 = objc_msgSend_unsignedIntegerValue(*(void **)(*((void *)&v97 + 1) + 8 * i), v55, v68, v56);
                      uint64_t v76 = objc_msgSend_objectAtIndexedSubscript_(v96, v74, v73 + v52, v75);
                      objc_msgSend_addObject_(v36, v77, v76, v78);
                      uint64_t v81 = objc_msgSend_objectAtIndexedSubscript_(v9, v79, v73 + v51, v80);
                      objc_msgSend_addObject_(v44, v82, v81, v83);
                    }
                    id v28 = v71;
                    uint64_t v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v55, (uint64_t)&v97, (uint64_t)v110, 16);
                  }
                  while (v69);
                }
                uint64_t v50 = v91;
                unint64_t v57 = v92;
                uint64_t v58 = v52 + v92 - 1;
                unint64_t v53 = 0x1E4F28000;
                uint64_t v54 = v93;
              }
              uint64_t v84 = objc_msgSend_objectAtIndexedSubscript_(v96, v55, v58, v56);
              objc_msgSend_addObject_(v36, v85, v84, v86);
              v52 += v57;
              uint64_t v51 = v51 + v57 - 1;
              ++v54;
            }
            while (v54 != v50);
            uint64_t v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v47, (uint64_t)&v102, (uint64_t)v111, 16);
          }
          while (v50);
        }

        id v87 = v36;
        uint64_t result = v44;
        *(void *)uint64_t v88 = v87;
        *unsigned __int8 v89 = obj;
        *unsigned __int8 v90 = result;
      }
    }
  }
  return result;
}

void sub_1B65997B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 104))
  {
    unsigned int v5 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4);
    uint64_t v9 = malloc_type_malloc(4 * v5, 0x100004052888210uLL);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; v9[i++] = objc_msgSend_intValue(v11, v12, v13, v14))
        uint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v6, i, v8);
    }
    unsigned int v15 = objc_msgSend_count(*(void **)(a1 + 40), v6, v7, v8);
    unint64_t v19 = malloc_type_malloc(4 * v15, 0x100004052888210uLL);
    if (v15)
    {
      for (uint64_t j = 0; j != v15; v19[j++] = v25)
      {
        uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v16, j, v18);
        objc_msgSend_floatValue(v21, v22, v23, v24);
      }
    }
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v9 = 0;
    unsigned int v15 = 0;
    unsigned int v5 = objc_msgSend_count(*(void **)(a1 + 48), a2, a3, a4);
  }
  unsigned int v80 = v15;
  unsigned int v81 = v5;
  if (*(unsigned char *)(a1 + 105))
  {
    unsigned int v26 = objc_msgSend_count(*(void **)(a1 + 56), v16, v17, v18);
    size_t v27 = 4 * v26;
    uint64_t v31 = malloc_type_malloc(v27, 0x100004052888210uLL);
    if (v26)
    {
      for (uint64_t k = 0; k != v26; v31[k++] = objc_msgSend_intValue(v33, v34, v35, v36))
        uint64_t v33 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 56), v28, k, v30);
    }
    unsigned int v78 = v26;
    unsigned int v37 = objc_msgSend_count(*(void **)(a1 + 64), v28, v29, v30);
    long long v38 = malloc_type_malloc(4 * v37, 0x100004052888210uLL);
    unsigned int v77 = v37;
    if (v37)
    {
      uint64_t v39 = 0;
      do
      {
        uint64_t v40 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 64), v16, v39, v18);
        v38[v39++] = objc_msgSend_intValue(v40, v41, v42, v43);
      }
      while (v77 != v39);
    }
    if (*(unsigned char *)(a1 + 106))
    {
      uint64_t v47 = malloc_type_malloc(v27, 0x100004052888210uLL);
      if (v78)
      {
        for (uint64_t m = 0; m != v78; v47[m++] = objc_msgSend_intValue(v49, v50, v51, v52))
          uint64_t v49 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 72), v44, m, v46);
      }
      unsigned int v53 = objc_msgSend_count(*(void **)(a1 + 80), v44, v45, v46);
      uint64_t v54 = malloc_type_malloc(4 * v53, 0x100004052888210uLL);
      if (v53)
      {
        uint64_t v55 = 0;
        unsigned int v79 = v53;
        do
        {
          uint64_t v56 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 80), v16, v55, v18);
          objc_msgSend_floatValue(v56, v57, v58, v59);
          v54[v55++] = v60;
        }
        while (v53 != v55);
      }
      else
      {
        unsigned int v79 = 0;
      }
    }
    else
    {
      unsigned int v79 = 0;
      uint64_t v47 = 0;
      uint64_t v54 = 0;
    }
    unsigned int v62 = v77;
    unsigned int v61 = v78;
  }
  else
  {
    unsigned int v61 = 0;
    uint64_t v31 = 0;
    unsigned int v62 = 0;
    long long v38 = 0;
    unsigned int v79 = 0;
    uint64_t v47 = 0;
    uint64_t v54 = 0;
  }
  uint64_t v63 = objc_msgSend_morphRef(*(void **)(a1 + 88), v16, v17, v18);
  uint64_t v64 = *(const void **)(a1 + 96);
  uint64_t v65 = *(unsigned __int8 *)(*(void *)(a1 + 88) + 161);
  v82[0] = v81;
  v82[1] = v80;
  uint64_t v83 = v9;
  uint64_t v84 = v19;
  unsigned int v85 = v61;
  int v86 = 0;
  id v87 = v31;
  unsigned int v88 = v62;
  int v89 = 0;
  unsigned __int8 v90 = v38;
  unsigned int v91 = v79;
  int v92 = 0;
  uint64_t v93 = v47;
  uint64_t v94 = v54;
  sub_1B6586C24(v63, v64, v65, (uint64_t)v82, v66, v67, v68, v69);
  free(v9);
  free(v19);
  free(v31);
  free(v38);
  free(v47);
  free(v54);
  if (v81)
  {
    for (uint64_t n = 0; n != v81; sub_1B6587680(v63, n++, v70, v71, v72, v73, v74, v75, 0.0))
      ;
  }
}

uint64_t sub_1B6599B14(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = objc_msgSend_unsignedIntegerValue(a2, (const char *)a2, (uint64_t)a3, a4);
  uint64_t v11 = objc_msgSend_objectAtIndexedSubscript_(v6, v9, v8 + v7, v10);
  objc_msgSend_floatValue(v11, v12, v13, v14);
  float v16 = v15;
  uint64_t v18 = *(void **)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v22 = objc_msgSend_unsignedIntegerValue(a3, v19, v20, v21);
  int v25 = objc_msgSend_objectAtIndexedSubscript_(v18, v23, v22 + v17, v24);
  objc_msgSend_floatValue(v25, v26, v27, v28);
  if (v16 < v29) {
    return -1;
  }
  else {
    return v16 > v29;
  }
}

uint64_t sub_1B6599C3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (result)
  {
    BOOL v6 = *(void *)(a1 + 40) == 1;
    return sub_1B6586BAC(result, v6);
  }
  return result;
}

uint64_t sub_1B6599DC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (result)
  {
    char v6 = *(unsigned char *)(a1 + 40) == 0;
    return sub_1B65879C0(result, v6);
  }
  return result;
}

void sub_1B6599F54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  float v13 = *(float *)(a1 + 40);

  sub_1B6588400(v5, v13, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1B659A02C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = objc_msgSend_meshRef(*(void **)(a1 + 40), v6, v7, v8);
  sub_1B6587E98(v5, v9, 1, (uint64_t)&unk_1F0FB6F48, v10, v11, v12, v13, v19);
  uint64_t v17 = *(void **)(a1 + 32);

  return objc_msgSend__syncObjCModel(v17, v14, v15, v16);
}

id *sub_1B659A08C(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  uint64_t result = sub_1B6583674(a3);
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = objc_msgSend_geometrySourceWithMeshSourceRef_(VFXMeshSource, v6, a4, v7);
    uint64_t v13 = objc_msgSend__encodeDataAsHalf(v8, v10, v11, v12);
    return (id *)MEMORY[0x1F4181798](v9, sel_set_encodeDataAsHalf_, v13, v14);
  }
  return result;
}

uint64_t sub_1B659A1A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v9 = objc_msgSend_meshRef(*(void **)(a1 + 40), v6, v7, v8);
  sub_1B6587ACC(v5, v9, 1, (uint64_t)&unk_1F0FB6F48, v10, v11, v12, v13);
  uint64_t v17 = *(void **)(a1 + 32);

  return objc_msgSend__syncObjCModel(v17, v14, v15, v16);
}

uint64_t sub_1B659AE58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_mesh(a2, (const char *)a2, a3, a4);
}

uint64_t sub_1B659AE60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_mesh(a2, (const char *)a2, a3, a4);
}

unint64_t sub_1B659B6B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 8; ++i)
  {
    uint64_t v7 = objc_msgSend_colorAttachments(a2, (const char *)a2, a3, a4);
    uint64_t v10 = objc_msgSend_objectAtIndexedSubscript_(v7, v8, i, v9);
    uint64_t v14 = objc_msgSend_texture(v10, v11, v12, v13);
    *(void *)(a1 + 8 * i) = objc_msgSend_pixelFormat(v14, v15, v16, v17);
  }
  uint64_t v18 = objc_msgSend_depthAttachment(a2, (const char *)a2, a3, a4);
  uint64_t v22 = objc_msgSend_texture(v18, v19, v20, v21);
  *(void *)(a1 + 64) = objc_msgSend_pixelFormat(v22, v23, v24, v25);
  float v29 = objc_msgSend_stencilAttachment(a2, v26, v27, v28);
  uint64_t v33 = objc_msgSend_texture(v29, v30, v31, v32);
  *(void *)(a1 + 72) = objc_msgSend_pixelFormat(v33, v34, v35, v36);
  *(unsigned char *)(a1 + 80) = 1;
  uint64_t v40 = objc_msgSend_colorAttachments(a2, v37, v38, v39);
  uint64_t v43 = objc_msgSend_objectAtIndexedSubscript_(v40, v41, 0, v42);
  uint64_t v47 = objc_msgSend_texture(v43, v44, v45, v46);
  unint64_t v51 = objc_msgSend_sampleCount(v47, v48, v49, v50);
  if (v51 <= 1) {
    unsigned __int8 v55 = 1;
  }
  else {
    unsigned __int8 v55 = v51;
  }
  *(unsigned char *)(a1 + 80) = v55;
  uint64_t v56 = objc_msgSend_depthAttachment(a2, v52, v53, v54);
  int v60 = objc_msgSend_texture(v56, v57, v58, v59);
  unint64_t v64 = objc_msgSend_sampleCount(v60, v61, v62, v63);
  if (v55 <= v64) {
    unsigned __int8 v55 = v64;
  }
  *(unsigned char *)(a1 + 80) = v55;
  uint64_t v68 = objc_msgSend_stencilAttachment(a2, v65, v66, v67);
  uint64_t v72 = objc_msgSend_texture(v68, v69, v70, v71);
  unint64_t result = objc_msgSend_sampleCount(v72, v73, v74, v75);
  char v77 = v55;
  if (v55 <= result) {
    char v77 = result;
  }
  *(unsigned char *)(a1 + 80) = v77;
  return result;
}

id sub_1B659B79C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
  id v3 = *(id *)a1;
  id v4 = v2;
  id v5 = *(id *)(a1 + 104);
  id v6 = *(id *)(a1 + 288);
  uint64_t v7 = *(const void **)(a1 + 200);
  if (v7) {
    CFRetain(v7);
  }
  id v8 = *(id *)(a1 + 280);
  id v9 = *(id *)(a1 + 296);
  id v10 = *(id *)(a1 + 304);
  uint64_t v11 = *(void **)(a1 + 312);

  return v11;
}

void sub_1B659B810(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);

  id v3 = *(const void **)(a1 + 200);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 200) = 0;
  }

  id v4 = *(void **)(a1 + 312);
}

void sub_1B659C248(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic(a1, newValue, newValue, 8);
  }
}

void sub_1B659C25C(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic(a1, newValue, newValue, 16);
  }
}

uint64_t sub_1B659C270(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = *(void **)(result + 16);
    if (v4 != a2)
    {

      *(void *)(v3 + 16) = objc_msgSend_copy(a2, v5, v6, v7);
      unint64_t result = objc_msgSend_hash(a2, v8, v9, v10);
      *(void *)(v3 + 32) = result;
    }
  }
  return result;
}

uint64_t sub_1B659C2C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v8 = result;
    if (!*(void *)(result + 16)) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"_vertexDescriptor");
    }
    return *(void *)(v8 + 32);
  }
  return result;
}

void *sub_1B659C3B0(void *result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    id v4 = result;
    objc_msgSend_buildTessellationVertexDescriptorIfNeeded(result, a2, a3, a4);
    return (void *)v4[3];
  }
  return result;
}

void *sub_1B659C3E0(void *result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    id v4 = result;
    objc_msgSend_buildTessellationVertexDescriptorIfNeeded(result, a2, a3, a4);
    return (void *)v4[5];
  }
  return result;
}

uint64_t sub_1B659C670(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = objc_msgSend_attributes(*(void **)(a1 + 16), a2, a3, a4);
  uint64_t v9 = objc_msgSend_objectAtIndexedSubscript_(v6, v7, (uint64_t)a2, v8);
  uint64_t v13 = objc_msgSend_bufferIndex(v9, v10, v11, v12);
  uint64_t v16 = v13 - 18;
  if (v13 < 18) {
    return 0;
  }
  uint64_t v17 = *(void **)(a1 + 48);

  return objc_msgSend_objectAtIndexedSubscript_(v17, v14, v16, v15);
}

uint64_t sub_1B659C6D8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

void sub_1B659C6E4(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 48);
  }
}

uint64_t sub_1B659C6F8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

void sub_1B659C704(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 56);
  }
}

uint64_t sub_1B659C718(uint64_t result)
{
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

void sub_1B659C724(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic(a1, newValue, newValue, 72);
  }
}

uint64_t sub_1B659C738(uint64_t result)
{
  if (result) {
    return *(void *)(result + 80);
  }
  return result;
}

uint64_t sub_1B659C744(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 80) = a2;
  }
  return result;
}

uint64_t sub_1B659C750(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

uint64_t sub_1B659C75C(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 88) = a2;
  }
  return result;
}

uint64_t sub_1B659C768(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

uint64_t sub_1B659C774(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 96) = a2;
  }
  return result;
}

uint64_t sub_1B659C780(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 104) = a2;
  }
  return result;
}

uint64_t sub_1B659C78C(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_1B659C870(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_nonatomic(a1, newValue, newValue, 40);
  }
}

uint64_t sub_1B659C8F8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

void *sub_1B659C904(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v9 = result;
    int v10 = sub_1B63D0C08(a2, a2, a3, a4, a5, a6, a7, a8);
    v9[1] = sub_1B64D7C70(v10, v11, v12, v13, v14, v15, v16, v17);
    uint64_t v9[2] = sub_1B63D0CA8(a2, v18, v19, v20, v21, v22, v23, v24);
    unsigned int v41 = 0;
    if ((sub_1B63D0F38(a2, &v41) || sub_1B63D0F30(a2)) && v41 - 1 >= 2)
    {
      if (v41 == 4)
      {
        uint64_t v32 = 1;
LABEL_9:
        v9[7] = v32;
        v9[3] = sub_1B63D1A44(a2, v25, v26, v27, v28, v29, v30, v31);
        uint64_t v39 = sub_1B63D0F4C(a2);
        return sub_1B659C9F8(v9, v39, v40);
      }
      sub_1B63F2F54(16, @"Error: Invalid index size (%d bytes per index)", v26, v27, v28, v29, v30, v31, v41);
      sub_1B63F2F54(16, @"Unreachable code: Invalid index size (%d bytes per index)", v33, v34, v35, v36, v37, v38, v41);
    }
    uint64_t v32 = 0;
    goto LABEL_9;
  }
  return result;
}

void *sub_1B659C9F8(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (a2 == -1)
    {
      result[8] = 0;
      a3 = result[2];
LABEL_10:
      result[9] = a3;
    }
    else
    {
      switch(result[1])
      {
        case 0:
          result[8] = a2;
          goto LABEL_10;
        case 1:
          result[8] = 2 * a2;
          a3 *= 2;
          goto LABEL_10;
        case 2:
          result[8] = a2;
          ++a3;
          goto LABEL_10;
        case 3:
          result[8] = 3 * a2;
          a3 *= 3;
          goto LABEL_10;
        case 4:
          result[8] = a2;
          a3 += 2;
          goto LABEL_10;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t sub_1B659CA94(uint64_t result)
{
  if (result)
  {
    switch(*(void *)(result + 8))
    {
      case 0:
        unint64_t result = *(void *)(result + 16);
        break;
      case 1:
        unint64_t result = *(void *)(result + 16) / 2;
        break;
      case 2:
        unint64_t result = *(void *)(result + 16) - 1;
        break;
      case 3:
        unint64_t result = *(void *)(result + 16) / 3;
        break;
      case 4:
        unint64_t result = *(void *)(result + 16) - 2;
        break;
      default:
        unint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_1B659CB2C(uint64_t result)
{
  if (result)
  {
    switch(*(void *)(result + 8))
    {
      case 0:
        unint64_t result = *(void *)(result + 72);
        break;
      case 1:
        unint64_t result = *(void *)(result + 72) / 2;
        break;
      case 2:
        unint64_t result = *(void *)(result + 72) - 1;
        break;
      case 3:
        unint64_t result = *(void *)(result + 72) / 3;
        break;
      case 4:
        unint64_t result = *(void *)(result + 72) - 2;
        break;
      default:
        unint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_1B659CBC4(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_1B659CBD0(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_1B659CBDC(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_1B659CBE8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t sub_1B659D300(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B659D330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a6;
  int v9 = a5;
  int v10 = a4;
  int v14 = sub_1B6476BF8(a3, a4, a3, a4, a5, a6, a7, a8);
  uint64_t v20 = sub_1B6475290(a3, v10, 0, v15, v16, v17, v18, v19);
  BOOL v27 = 0;
  if (v10 != 3 && v20) {
    BOOL v27 = sub_1B6477268(v20);
  }
  if (!a3 || v10 == 3)
  {
    uint64_t v31 = v9 & 0xFFFFFFFE | v14;
    if (!v14) {
      return v31;
    }
  }
  else
  {
    uint64_t v28 = sub_1B6476488(a3, v10, v21, v22, v23, v24, v25, v26);
    if (v28 == -1) {
      uint64_t v28 = sub_1B6475058(v10);
    }
    if (v28 == -1) {
      int v29 = 0;
    }
    else {
      int v29 = v14;
    }
    if (v29 == 1)
    {
      if (sub_1B64AC5F8(a2, 3, v28, 0, v23, v24, v25, v26))
      {
        int v30 = 1;
        goto LABEL_24;
      }
LABEL_21:
      if (v28 == -1 || (v8 & 1) == 0) {
        return v9 & 0xFFE1FFFE | ((v28 & 0xF) << 17);
      }
      int v30 = 0;
LABEL_24:
      uint64_t v31 = v9 & 0xFFE1FFFE | v30 & 0xFFE1FFFF | ((sub_1B659D528(a1, v28, v27, v10) & 0xF) << 17);
      if ((v30 & 1) == 0) {
        return v31;
      }
      goto LABEL_25;
    }
    if (v28 == -1) {
      int v32 = v14;
    }
    else {
      int v32 = 0;
    }
    if (v32 != 1) {
      goto LABEL_21;
    }
    LODWORD(v31) = v9 | 0x1E0001;
  }
LABEL_25:
  int v45 = 0;
  unsigned __int8 v44 = 1;
  uint64_t v33 = sub_1B6475290(a3, v10, 0, v22, v23, v24, v25, v26);
  if (!v33 || (sub_1B6477744(v33, &v45, (char *)&v44, v35, v36, v37, v38, v39), (int v40 = v45) == 0))
  {
    int v40 = 2;
    int v45 = 2;
  }
  if (v27) {
    int v41 = 2048;
  }
  else {
    int v41 = 0;
  }
  int v42 = v31 & 0xFFFFF41F | (v44 << 9) | v41;
  if (v40 >= 7)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. __UpdateHashCodeWithTextureType:inconsistent textureType", v34, v35, v36, v37, v38, v39, (uint64_t)"textureType < 7");
    int v40 = v45;
  }
  return v42 | (32 * v40);
}

uint64_t sub_1B659D528(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 159);
  if (a3)
  {
LABEL_7:
    LODWORD(v5) = *(unsigned __int8 *)(a1 + 159);
LABEL_8:
    uint64_t v7 = a1 + 2 * v4;
    *(unsigned char *)(v7 + 160) = a2;
    if (!a3) {
      a4 = -1;
    }
    *(unsigned char *)(v7 + 161) = a4;
    *(unsigned char *)(a1 + 159) = v4 + 1;
    return v5;
  }
  if (*(unsigned char *)(a1 + 159))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (unsigned __int8 *)(a1 + 161);
    while (*(v6 - 1) != a2 || *v6 != 255)
    {
      v6 += 2;
      if (v4 == ++v5) {
        goto LABEL_7;
      }
    }
    int v10 = *(unsigned __int8 *)(a1 + 159);
  }
  else
  {
    int v10 = 0;
    LODWORD(v5) = 0;
  }
  if (v5 == v10) {
    goto LABEL_8;
  }
  return v5;
}

uint64_t sub_1B659D5A8(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a3;
  CFDictionaryRef v12 = sub_1B65849C8(a2, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  uint64_t v13 = a1 + 16;
  unint64_t v14 = *(void *)(a1 + 16 + 8 * v9);
  if (!((unint64_t)v12 | v14)) {
    goto LABEL_25;
  }
  CFArrayRef v15 = v12;
  if (v12)
  {
    if (v14 && CFEqual(v12, (CFTypeRef)v14)) {
      goto LABEL_25;
    }
  }
  uint64_t v16 = v9;
  CFIndex Count = CFArrayGetCount(v15);
  if (v15)
  {
    uint64_t v18 = Count;
    if (Count)
    {
      CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v15);
      CFArrayRef v20 = *(CFArrayRef *)(v13 + 8 * v16);
      if (v20 != Copy)
      {
        if (v20)
        {
          CFRelease(v20);
          *(void *)(v13 + 8 * v16) = 0;
        }
        if (Copy) {
          CFTypeRef v21 = CFRetain(Copy);
        }
        else {
          CFTypeRef v21 = 0;
        }
        *(void *)(v13 + 8 * v16) = v21;
      }
      CFRelease(Copy);
      CFDictionaryRef v31 = sub_1B6584B44(a2, v24, v25, v26, v27, v28, v29, v30);
      if (v31)
      {
        unint64_t valuePtr = 0;
        CFNumberGetValue(v31, kCFNumberNSIntegerType, &valuePtr);
        unint64_t v32 = *(unsigned int *)(a1 + 32);
        if (valuePtr > v32) {
          LODWORD(v32) = valuePtr;
        }
        *(_DWORD *)(a1 + 32) = v32;
      }
      if (v18 >= 1)
      {
        CFIndex v33 = 0;
        int v23 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v15, v33);
          v23 |= sub_1B6604094((uint64_t)ValueAtIndex, v35, v36, v37, v38, v39, v40, v41);
          *a4 |= sub_1B66040E0((uint64_t)ValueAtIndex, v42, v43, v44, v45, v46, v47, v48);
          ++v33;
        }
        while (v18 != v33);
        return (__int16)v23;
      }
LABEL_25:
      LOWORD(v23) = 0;
      return (__int16)v23;
    }
  }
  uint64_t v22 = *(const void **)(v13 + 8 * v16);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(v13 + 8 * v16) = 0;
  }
  LOWORD(v23) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return (__int16)v23;
}

void sub_1B659D72C(uint64_t a1, const void *a2, CFTypeRef cf)
{
  uint64_t v3 = (uint64_t)cf;
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == sub_1B6562334())
  {
    if (sub_1B6562600(v3, v7, v8, v9, v10, v11, v12, v13) != 1) {
      return;
    }
    uint64_t v3 = *(void *)sub_1B6562568(v3, v14, v15, v16, v17, v18, v19, v20);
  }
  else if (v6 != sub_1B6477C48())
  {
    return;
  }
  if (v3)
  {
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v28 = *(unsigned __int8 *)(v27 + 158);
    if (v28 == 8)
    {
      sub_1B63F2F54(16, @"Error: Too many uniform custom samplers given (Max is %d)", v21, v22, v23, v24, v25, v26, 8);
    }
    else
    {
      *(void *)(v27 + 8 * v28 + 208) = a2;
      CFRetain(a2);
      uint64_t v36 = sub_1B647650C(v3, v29, v30, v31, v32, v33, v34, v35);
      if (v36 == -1) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      BOOL v38 = sub_1B6477268(v3);
      *(unsigned char *)(*(void *)(a1 + 32) + v28 + 199) = sub_1B659D528(*(void *)(a1 + 32), v37, v38, v28 + 26);
      ++*(unsigned char *)(*(void *)(a1 + 32) + 158);
    }
  }
}

uint64_t sub_1B659D830(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_1B659D838(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 156);
}

uint64_t sub_1B659D840(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 4 * a2 + 124);
}

uint64_t sub_1B659D84C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 116);
}

uint64_t sub_1B659D854(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 4 * a2 + 36);
}

uint64_t sub_1B659D860(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 4 * a2 + 36) & 1;
}

uint64_t sub_1B659D870(uint64_t a1, unsigned int a2)
{
  return (*(_DWORD *)(a1 + 4 * a2 + 36) >> 10) & 1;
}

uint64_t sub_1B659D880(uint64_t a1, unsigned int a2)
{
  return (*(_DWORD *)(a1 + 4 * a2 + 36) >> 5) & 0xF;
}

uint64_t sub_1B659D890(uint64_t a1)
{
  return *(void *)(a1 + 272);
}

uint64_t sub_1B659D898(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 3) & 1;
}

uint64_t sub_1B659D8A4(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 6) & 1;
}

uint64_t sub_1B659D8B0(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 7) & 1;
}

uint64_t sub_1B659D8BC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 198) >> 3) & 1;
}

uint64_t sub_1B659D8C8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 198) >> 4) & 1;
}

uint64_t sub_1B659D8D4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 196) >> 13;
}

uint64_t sub_1B659D8E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 157);
}

uint64_t sub_1B659D8E8(uint64_t a1)
{
  return *(_WORD *)(a1 + 196) & 1;
}

uint64_t sub_1B659D8F4(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 1) & 1;
}

uint64_t sub_1B659D900(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 2) & 1;
}

uint64_t sub_1B659D90C(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 5) & 1;
}

uint64_t sub_1B659D918(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 4) & 1;
}

uint64_t sub_1B659D924(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 196)) & 1;
}

uint64_t sub_1B659D930(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 9) & 1;
}

uint64_t sub_1B659D93C(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 10) & 1;
}

uint64_t sub_1B659D948(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 11) & 1;
}

uint64_t sub_1B659D954(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 192);
}

uint64_t sub_1B659D95C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194);
}

uint64_t sub_1B659D964(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 195) >> 3) & 3;
}

uint64_t sub_1B659D970(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 195) >> 5) & 3;
}

uint64_t sub_1B659D97C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 159);
}

uint64_t sub_1B659D984(uint64_t a1)
{
  return *(unsigned char *)(a1 + 198) & 7;
}

uint64_t sub_1B659D990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >= 16) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"index < CFX_MAX_TEXCOORD");
  }
  return *(unsigned __int16 *)(a1 + 2 * a2 + 160);
}

__CFString *sub_1B659D9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned __int8 *)(a1 + 158) > a2) {
    return *(__CFString **)(a1 + 8 * a2 + 208);
  }
  sub_1B63F2F54(16, @"Error: invalid custom texture materialProperty.", a3, a4, a5, a6, a7, a8, vars0);
  return @"unknown";
}

uint64_t sub_1B659DA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned __int8 *)(a1 + 158) > a2) {
    return *(char *)(a1 + a2 + 199);
  }
  sub_1B63F2F54(16, @"Error: invalid custom texture materialProperty.", a3, a4, a5, a6, a7, a8, vars0);
  return -1;
}

uint64_t sub_1B659DA6C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 158);
}

uint64_t sub_1B659DA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B660412C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result == *(_DWORD *)(a2 + 24) && *(void *)a2)
  {
    uint64_t v11 = *(void *)(a2 + 16);
    if (v11 < *(void *)(a2 + 8))
    {
      *(void *)(*(void *)a2 + 8 * v11) = a1;
      *(void *)(a2 + 16) = v11 + 1;
    }
  }
  return result;
}

uint64_t sub_1B659DAC8(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  int v8 = a3;
  uint64_t v10 = sub_1B64A3808(a2, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v11 = *a1;
  uint64_t v12 = (v11 >> 6);
  if (!(v11 >> 6)) {
    return 0;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = *(void *)&a1[4 * v13 + 20];
    uint64_t v16 = v14 | (1 << v13);
    if ((v15 & v10) == 0) {
      uint64_t v16 = v14;
    }
    if (v8 != 3) {
      v14 |= 1 << v13;
    }
    if (v15 != 0xDEFA017DEFA017) {
      uint64_t v14 = v16;
    }
    ++v13;
  }
  while (v12 != v13);
  return v14;
}

uint64_t sub_1B659DB7C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  v10[0] = a3;
  v10[1] = a4;
  uint64_t v11 = 0;
  uint64_t v5 = a1 + 16;
  char v6 = 1;
  uint64_t v12 = a2;
  do
  {
    char v7 = v6;
    CFArrayRef v8 = *(const __CFArray **)(v5 + 8 * v4);
    if (v8)
    {
      v13.length = CFArrayGetCount(*(CFArrayRef *)(v5 + 8 * v4));
      v13.locatiouint64_t n = 0;
      CFArrayApplyFunction(v8, v13, (CFArrayApplierFunction)sub_1B659DA74, v10);
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  return v11;
}

uint64_t sub_1B659DC08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

BOOL sub_1B659DC10(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 1;
  }
  uint64_t v10 = *(_WORD *)(a2 + 116) & 0xF;
  if (v10 == 3)
  {
    unsigned int v11 = *a3;
    if ((*(_WORD *)(a2 + 196) & 0x1000) != 0)
    {
      int v12 = (v11 >> 3) & 7;
      unsigned int v13 = *(_WORD *)(a2 + 196) >> 13;
LABEL_9:
      if (v13 != v12) {
        return 0;
      }
    }
  }
  else
  {
    if ((*(_WORD *)(a2 + 116) & 0xD) != 0)
    {
      if ((*(_WORD *)(a2 + 196) & 0x40) == 0) {
        return 0;
      }
      unsigned int v11 = *a3;
      int v12 = v11 & 1;
      unsigned int v13 = ((*(unsigned __int16 *)(a2 + 196) | (*(unsigned __int8 *)(a2 + 198) << 16)) >> 7) & 1;
      goto LABEL_9;
    }
    unsigned int v11 = *a3;
  }
  if (*(unsigned __int8 *)(a2 + 156) == (v11 >> 6)
    && ((*(unsigned __int8 *)(a2 + 198) >> 4) & 1) == ((v11 >> 2) & 1))
  {
    uint64_t v15 = (v11 >> 6);
    if (v15)
    {
      uint64_t v16 = (int *)(a2 + 124);
      uint64_t v17 = (int *)(a3 + 2);
      while (1)
      {
        int v19 = *v16++;
        int v18 = v19;
        int v20 = *v17++;
        if (v18 != v20) {
          break;
        }
        if (!--v15) {
          goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      uint64_t v21 = *(unsigned __int8 *)(a2 + 157);
      if (sub_1B659DAC8(a3, a1, v10, a4, a5, a6, a7, a8) == v21) {
        return ((*(unsigned __int8 *)(a2 + 198) >> 3) & 1) == ((*a3 >> 1) & 1);
      }
    }
  }
  return 0;
}

uint64_t sub_1B659DD34(void *a1, __n128 *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 0;
  }
  if (a5)
  {
    unsigned int v9 = *a5;
    int v10 = v9 & 1;
    int v225 = (v9 >> 3) & 7;
  }
  else
  {
    int v10 = 0;
    LOWORD(v225) = 0;
  }
  BOOL v12 = a5 != 0;
  long long v245 = 0u;
  memset(v246, 0, sizeof(v246));
  long long v243 = 0u;
  memset(v244, 0, sizeof(v244));
  long long v242 = 0u;
  long long v240 = 0u;
  memset(v241, 0, sizeof(v241));
  BYTE6(v245) = 0;
  WORD2(v245) = 11;
  LOWORD(v245) = a7;
  BYTE2(v245) = BYTE2(a7);
  BYTE3(v245) = BYTE3(a7) & 0x7F;
  unsigned __int16 v235 = 0;
  int v13 = sub_1B659D5A8((uint64_t)&v240, a6, 0, &v235, (uint64_t)a5, a6, a7, a8);
  int v18 = sub_1B659D5A8((uint64_t)&v240, (uint64_t)a2, 1, &v235, v14, v15, v16, v17);
  sub_1B64A2F68((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25);
  float v27 = v26;
  uint64_t v35 = (float *)sub_1B64AF43C(a6, v28, v29, v30, v31, v32, v33, v34);
  unsigned int v43 = sub_1B64757A4((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42);
  int v51 = v43 != 2 && v12;
  if (v43 == 3) {
    int v51 = 1;
  }
  int v227 = v51;
  unsigned int v229 = v43;
  if ((v43 | 2) == 2) {
    int v52 = 0;
  }
  else {
    int v52 = v10;
  }
  int v223 = v52;
  if (a1) {
    BOOL v53 = sub_1B64A3D8C((uint64_t)a1, v44, v45, v46, v47, v48, v49, v50) != 0;
  }
  else {
    BOOL v53 = 0;
  }
  if (a3)
  {
    BOOL v54 = sub_1B64AD1B0(a3, 2);
    if (!a2) {
      goto LABEL_23;
    }
  }
  else
  {
    BOOL v54 = 0;
    if (!a2) {
      goto LABEL_23;
    }
  }
  if (sub_1B63CF088((uint64_t)a2, v44, v45, v46, v47, v48, v49, v50))
  {
    sub_1B63CF184(a2, v45, v46, v47, v48, v49, v50, &v234);
    int v55 = 4;
    int v56 = v234.n128_u8[12];
    goto LABEL_24;
  }
LABEL_23:
  int v55 = 0;
  int v56 = 0;
LABEL_24:
  if (v54) {
    int v57 = 2;
  }
  else {
    int v57 = 0;
  }
  DWORD2(v244[0]) = v57 | v53 | v55 | (8 * v56);
  WORD2(v244[0]) = sub_1B647677C((uint64_t)v35, v44, v45, v46, v47, v48, v49, v50);
  if (!sub_1B647F740((uint64_t)a2, v58, v59, v60, v61, v62, v63, v64))
  {
    unsigned int v75 = ((WORD2(v245) | (BYTE6(v245) << 16)) & 0xFFF8FFFF) >> 16;
    goto LABEL_37;
  }
  memset(&c, 0, 24);
  sub_1B63CF184(a2, v65, v66, v67, v68, v69, v70, (__n128 *)&c);
  int v71 = BYTE1(c.hash[2]);
  if ((c.hash[2] & 0x100) != 0)
  {
    if (sub_1B659F724((uint64_t)a2))
    {
      BOOL v72 = sub_1B659F744((a7 >> 24) & 7);
      int v71 = BYTE1(c.hash[2]);
      uint64_t v73 = sub_1B65692BC((uint64_t)a2);
      if (v72) {
        int v74 = 96;
      }
      else {
        int v74 = 32;
      }
      goto LABEL_36;
    }
    int v71 = BYTE1(c.hash[2]);
  }
  uint64_t v73 = sub_1B65692BC((uint64_t)a2);
  int v74 = 32;
LABEL_36:
  DWORD2(v244[0]) |= v74 & 0xF80000FF | ((v73 & 0x7FFFF) << 8) | (v71 << 6) & 0x80;
  unsigned int v75 = ((WORD2(v245) | (BYTE6(v245) << 16)) & 0xFFF8FFFF | (a7 >> 8) & 0x70000) >> 16;
LABEL_37:
  BYTE6(v245) = v75;
  if (a5)
  {
    unint64_t v76 = *a5;
    unsigned int v77 = *a5;
    uint64_t v78 = (v76 >> 6);
    if ((v76 >> 6))
    {
      __memcpy_chk();
      bzero((char *)v244 + 4 * v78 + 12, (32 - (4 * v78)) & 0x3FFFFFFFCLL);
    }
    else
    {
      memset((char *)v244 + 12, 0, 32);
    }
    char v79 = v77 >> 6;
  }
  else
  {
    char v79 = 0;
    memset((char *)v244 + 12, 0, 32);
  }
  uint64_t v80 = 0;
  int v226 = v18 | v13;
  BYTE12(v244[2]) = v79;
  unsigned int v81 = v235;
  if (v227) {
    int v82 = v229;
  }
  else {
    int v82 = 2;
  }
  do
  {
    uint64_t v85 = sub_1B647683C(v35, (char)v80, v65, v66, v67, v68, v69, v70);
    if (v85 & 1) != 0 || ((v81 >> v80)) {
      LODWORD(v85) = sub_1B659D330((uint64_t)&v240, a3, (uint64_t)v35, (char)v80, v85, v81 != 0, v83, v84);
    }
    if (sub_1B6475064(v82, (char)v80))
    {
      int v87 = 1;
      switch(v80)
      {
        case 1:
        case 9:
        case 10:
          goto LABEL_51;
        case 4:
          BOOL v90 = (v85 & 8) == 0;
          goto LABEL_76;
        case 5:
          int v87 = (v85 & 4) == 0;
          if (v85) {
            int v87 = 1;
          }
          if ((v85 & 0x1000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_52;
        case 12:
          int v87 = (BYTE1(v242) >> 2) & 1;
          if ((v85 & 3) == 2) {
            int v87 = 0;
          }
          if ((v85 & 0x1000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_52;
        case 13:
          int v87 = v85 & ((BYTE1(v242) & 4) >> 2);
          if ((v85 & 0x1000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_52;
        case 16:
          int v87 = v85 & 1;
          if ((v85 & 0x1000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_52;
        case 17:
          int v87 = (BYTE13(v241[1]) >> 2) & 1;
          if ((v85 & 0x1000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_52;
        case 18:
          BOOL v90 = (v85 & 0x10) == 0;
LABEL_76:
          int v87 = v90;
          if ((v85 & 0x1000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_52;
        case 19:
          if ((v85 & 0x10) == 0) {
            goto LABEL_51;
          }
          HIDWORD(v243) = 0;
          goto LABEL_89;
        default:
          if (v85)
          {
            int v87 = 1;
LABEL_51:
            if ((v85 & 0x1000) == 0) {
              goto LABEL_80;
            }
          }
          else
          {
            if (v80 == 5)
            {
              if ((v85 & 4) != 0) {
                goto LABEL_89;
              }
            }
            else if ((v85 & 2) != 0)
            {
              goto LABEL_89;
            }
            int v87 = !((v229 == 2) & sub_1B6476C30((uint64_t)v35, v86, v65, v66, v67, v68, v69, v70));
            if ((v85 & 0x1000) == 0) {
              goto LABEL_80;
            }
          }
LABEL_52:
          if (v80 != 1 && v87)
          {
            float v88 = sub_1B6476060((uint64_t)v35, (char)v80, v65, v66, v67, v68, v69, v70);
            if (v88 == 0.0) {
              goto LABEL_89;
            }
            unsigned int v89 = v85 & 0xFFFFFBFF | ((v88 != 0.0) << 10);
            goto LABEL_85;
          }
LABEL_80:
          if (v87) {
            int v91 = 1024;
          }
          else {
            int v91 = 0;
          }
          if ((v87 & 1) == 0) {
            goto LABEL_89;
          }
          unsigned int v89 = v91 | v85 & 0xFFFFFBFF;
LABEL_85:
          *((_DWORD *)&v241[1] + v80 + 1) = v89;
          if (v89 >= 0x200000) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. effect materialProperty hash out of bounds", v65, v66, v67, v68, v69, v70, (uint64_t)"programHashCode->_desc.materialPropertysHash[i] <= ((1 << (kCFXMaterialPropertyHashIndexMax + 1)) - 1)");
          }
          break;
      }
    }
    else
    {
LABEL_89:
      *((_DWORD *)&v241[1] + v80 + 1) = 0;
    }
    ++v80;
  }
  while (v80 != 20);
  *(void *)c.count = MEMORY[0x1E4F143A8];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = sub_1B659D72C;
  *(void *)&c.hash[4] = &unk_1E6144AB8;
  *(void *)&c.hash[6] = &v240;
  sub_1B6584EA4(a6, (uint64_t)&c, v65, v66, v67, v68, v69, v70);
  *(void *)c.count = MEMORY[0x1E4F143A8];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = sub_1B659D72C;
  *(void *)&c.hash[4] = &unk_1E6144AB8;
  *(void *)&c.hash[6] = &v240;
  sub_1B6584EA4((uint64_t)a2, (uint64_t)&c, v92, v93, v94, v95, v96, v97);
  uint64_t v103 = sub_1B6475290((uint64_t)v35, 6, 0, v98, v99, v100, v101, v102);
  uint64_t v109 = sub_1B6475290((uint64_t)v35, 13, 0, v104, v105, v106, v107, v108);
  uint64_t v115 = sub_1B6475290((uint64_t)v35, 16, 0, v110, v111, v112, v113, v114);
  uint64_t v123 = v115;
  if (v103)
  {
    if (sub_1B6475F88(v103, v116, v117, v118, v119, v120, v121, v122)) {
      __int16 v124 = 32;
    }
    else {
      __int16 v124 = 0;
    }
    int v125 = WORD2(v245) & 0xFFDF | (BYTE6(v245) << 16);
    WORD2(v245) = WORD2(v245) & 0xFFDF | v124;
    BYTE6(v245) = BYTE2(v125);
  }
  if (v123)
  {
    BOOL v126 = sub_1B6475F88(v123, v116, v117, v118, v119, v120, v121, v122);
    __int16 v127 = BYTE4(v245) & 0x20;
    if (v126) {
      __int16 v127 = 32;
    }
    WORD2(v245) = v127 | WORD2(v245) & 0xFFDF;
  }
  if (v109)
  {
    BOOL v128 = sub_1B6475F88(v109, v116, v117, v118, v119, v120, v121, v122);
    int v129 = BYTE4(v245) & 0x20;
    if (v128) {
      int v129 = 32;
    }
    int v130 = v129 | WORD2(v245) & 0xFFDF | (BYTE6(v245) << 16);
  }
  else
  {
    int v130 = WORD2(v245) | (BYTE6(v245) << 16);
  }
  BYTE6(v245) = BYTE2(v130);
  WORD2(v245) = v130 | (16 * v226) & 0x20;
  if (v130 & 0x20 | (16 * v226) & 0x20)
  {
    __int16 v131 = sub_1B64AD020(a3, 3) > 0;
    int v132 = WORD2(v245) & 0xFFDF | (BYTE6(v245) << 16);
    WORD2(v245) = WORD2(v245) & 0xFFDF | (32 * v131);
    BYTE6(v245) = BYTE2(v132);
  }
  BOOL v133 = sub_1B63CF130((uint64_t)a2, v116, v117, v118, v119, v120, v121, v122);
  __int16 v145 = sub_1B64AC5F8(a3, 1, 0, v133, v134, v135, v136, v137) != 0;
  int v146 = WORD2(v245) & 0xFFEF | (BYTE6(v245) << 16);
  WORD2(v245) = WORD2(v245) & 0xFFEF | (16 * v145);
  BYTE6(v245) = BYTE2(v146);
  if (a1)
  {
    uint64_t v147 = sub_1B63F4F54(a1, v138, v139, v140, v141, v142, v143, v144);
    uint64_t v148 = v147;
    if (v147)
    {
      if (sub_1B64B2AD0(v147, v138, v139, v140, v141, v142, v143, v144) > 0.0 && (a7 & 0x100) == 0) {
        WORD2(v245) |= 0x100u;
      }
      if (sub_1B64B381C(v148, v149, v150, v151, v152, v153, v154, v155)) {
        WORD2(v245) |= 0x200u;
      }
    }
  }
  if (a3) {
    int v156 = sub_1B64AD1A4(a3);
  }
  else {
    int v156 = 0;
  }
  BOOL v157 = v27 >= 1.0;
  if (v229 == 4) {
    int v158 = 1;
  }
  else {
    int v158 = v156;
  }
  int v159 = sub_1B64AF5FC(a6, v138, v139, v140, v141, v142, v143, v144);
  int v167 = v158 ^ 1;
  if (v159) {
    int v167 = 0;
  }
  if ((v157 & v167) != 0) {
    __int16 v168 = 8;
  }
  else {
    __int16 v168 = 0;
  }
  if ((v229 == 3) | v158) {
    __int16 v169 = 0;
  }
  else {
    __int16 v169 = 2;
  }
  WORD2(v245) = WORD2(v245) & 0xFFF4 | v169 | v157 | v168;
  BOOL v175 = sub_1B64AF648(a6, v160, v161, v162, v163, v164, v165, v166) >= 0.0;
  if (v227) {
    int v176 = 64;
  }
  else {
    int v176 = 0;
  }
  if (v223) {
    int v177 = 128;
  }
  else {
    int v177 = 0;
  }
  int v178 = v177 | v176 | (4 * v175) | WORD2(v245) & 0xFF3B | (BYTE6(v245) << 16);
  if (a5)
  {
    uint64_t v179 = a5;
    unsigned int v180 = *(unsigned __int8 *)a5;
    unsigned int v181 = v178 & 0xFFF7FFFF | (((v180 >> 1) & 1) << 19);
    int v182 = (v180 >> 2) & 1;
  }
  else
  {
    int v182 = 0;
    unsigned int v181 = v178 & 0xFFF7FFFF;
    uint64_t v179 = 0;
  }
  WORD2(v245) = v181;
  BYTE6(v245) = (v181 & 0xFFEFFFFF | (v182 << 20)) >> 16;
  BYTE13(v244[2]) = sub_1B659DAC8(v179, (uint64_t)a1, v229, v170, v171, v172, v173, v174);
  int v183 = WORD2(v245) & 0xFFF | (BYTE6(v245) << 16);
  __int16 v184 = ((_WORD)v225 << 13) | 0x1000;
  if (v229 != 3) {
    __int16 v184 = 0;
  }
  WORD2(v245) = v184 | WORD2(v245) & 0xFFF;
  BYTE6(v245) = BYTE2(v183);
  if ((sub_1B63CEFD8((uint64_t)a2) & (v27 >= 1.0)) != 0) {
    __int16 v192 = 1024;
  }
  else {
    __int16 v192 = 0;
  }
  int v193 = WORD2(v245) & 0xF3FF | (BYTE6(v245) << 16);
  WORD2(v245) = WORD2(v245) & 0xF3FF | v192;
  BYTE6(v245) = BYTE2(v193);
  if (a4)
  {
    __int16 v194 = sub_1B63D0C08(a4, v185, v186, v187, v188, v189, v190, v191) == 3;
    int v195 = WORD2(v245) & 0xF7FF | (BYTE6(v245) << 16);
    WORD2(v245) = WORD2(v245) & 0xF7FF | (v194 << 11);
    BYTE6(v245) = BYTE2(v195);
  }
  memset(&c, 0, sizeof(c));
  CC_SHA256_Init(&c);
  uint64_t v196 = 0;
  uint64_t v197 = MEMORY[0x1E4F143A8];
  char v198 = 1;
  do
  {
    int v199 = 0;
    char v200 = v198;
    CFArrayRef v201 = (const __CFArray *)*((void *)v241 + v196);
    do
    {
      v237[0] = v197;
      v237[1] = 3221225472;
      v237[2] = sub_1B659F6C8;
      v237[3] = &unk_1E6144BC8;
      int v238 = v199;
      v237[4] = &c;
      sub_1B63CC9FC(v201, (uint64_t)v237);
      ++v199;
    }
    while (v199 != 4);
    char v198 = 0;
    uint64_t v196 = 1;
  }
  while ((v200 & 1) != 0);
  for (uint64_t i = 208; i != 272; i += 8)
  {
    uint64_t v203 = *(void *)((char *)&v241[-1] + i);
    if (v203) {
      sub_1B6604178(v203, (uint64_t)&c);
    }
  }
  CC_SHA256_Update(&c, (char *)&v241[1] + 4, 0xACu);
  int data = 2;
  CC_SHA256_Update(&c, &data, 4u);
  CC_SHA256_Final(md, &c);
  uint64_t v204 = 0;
  float32x4_t v205 = cStr;
  v206.i64[0] = 0xA0A0A0A0A0A0A0A0;
  v206.i64[1] = 0xA0A0A0A0A0A0A0A0;
  v207.i64[0] = 0x3737373737373737;
  v207.i64[1] = 0x3737373737373737;
  v208.i64[0] = 0x3030303030303030;
  v208.i64[1] = 0x3030303030303030;
  v209.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v209.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v210.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v210.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  do
  {
    int8x16_t v211 = *(int8x16_t *)&md[v204];
    v254.val[0] = (int8x16_t)vsraq_n_u8((uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(v206, (uint8x16_t)v211), v208, v207), (uint8x16_t)v211, 4uLL);
    int8x16_t v212 = vandq_s8(v211, v209);
    v254.val[1] = vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v210, (uint8x16_t)v212), v208, v207), v212);
    vst2q_s8(v205, v254);
    v205 += 32;
    v204 += 16;
  }
  while (v204 != 32);
  char v251 = 0;
  CFStringRef v213 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
  if (qword_1E9DDBA40 != -1) {
    dispatch_once(&qword_1E9DDBA40, &unk_1F0FB6428);
  }
  *(void *)c.count = 0;
  *(void *)c.hash = &c;
  *(void *)&c.hash[2] = 0x2020000000;
  *(void *)&c.hash[4] = 0;
  *(void *)cStr = 0;
  uint64_t v248 = cStr;
  uint64_t v249 = 0x2020000000;
  uint64_t v250 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1B659EA80;
  block[3] = &unk_1E6144AE0;
  block[4] = cStr;
  void block[5] = &c;
  void block[6] = v213;
  block[7] = &v240;
  dispatch_sync((dispatch_queue_t)qword_1E9DDBA50, block);
  CFRelease(v213);
  uint64_t v214 = 0;
  char v215 = 1;
  do
  {
    char v216 = v215;
    uint64_t v217 = (const void *)*((void *)v241 + v214);
    if (v217)
    {
      CFRelease(v217);
      *((void *)v241 + v214) = 0;
    }
    char v215 = 0;
    uint64_t v214 = 1;
  }
  while ((v216 & 1) != 0);
  unsigned int v218 = BYTE14(v244[2]);
  if (BYTE14(v244[2]))
  {
    unint64_t v219 = 0;
    do
    {
      uint64_t v220 = (const void *)*((void *)v246 + v219);
      if (v220)
      {
        CFRelease(v220);
        *((void *)v246 + v219) = 0;
        unsigned int v218 = BYTE14(v244[2]);
      }
      ++v219;
    }
    while (v219 < v218);
  }
  uint64_t v11 = *(void *)(*(void *)c.hash + 24);
  _Block_object_dispose(cStr, 8);
  _Block_object_dispose(&c, 8);
  return v11;
}

void sub_1B659E9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose((const void *)(v39 - 224), 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

dispatch_queue_t sub_1B659EA34()
{
  qword_1E9DDBA48 = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.vfx.programHashCodeQueue", 0);
  qword_1E9DDBA50 = (uint64_t)result;
  return result;
}

void sub_1B659EA80(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue((CFDictionaryRef)qword_1E9DDBA48, *(const void **)(a1 + 48));
  id v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFRetain(v2);
  }
  else
  {
    if (qword_1E9DDBA38 != -1) {
      dispatch_once_f(&qword_1E9DDBA38, &qword_1E9DDBA30, (dispatch_function_t)sub_1B659D300);
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1B63C8D44(qword_1E9DDBA30, 0x110uLL);
    uint64_t v3 = *(_OWORD **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    uint64_t v4 = *(_OWORD **)(a1 + 56);
    long long v5 = v4[4];
    long long v7 = v4[1];
    long long v6 = v4[2];
    v3[3] = v4[3];
    v3[4] = v5;
    v3[1] = v7;
    v3[2] = v6;
    long long v8 = v4[8];
    long long v10 = v4[5];
    long long v9 = v4[6];
    v3[7] = v4[7];
    v3[8] = v8;
    v3[5] = v10;
    v3[6] = v9;
    long long v11 = v4[12];
    long long v13 = v4[9];
    long long v12 = v4[10];
    v3[11] = v4[11];
    v3[12] = v11;
    v3[9] = v13;
    v3[10] = v12;
    long long v14 = v4[13];
    long long v15 = v4[14];
    long long v16 = v4[16];
    v3[15] = v4[15];
    v3[16] = v16;
    v3[13] = v14;
    v3[14] = v15;
    uint64_t v17 = *(_OWORD **)(a1 + 56);
    v17[15] = 0u;
    v17[16] = 0u;
    v17[13] = 0u;
    v17[14] = 0u;
    v17[11] = 0u;
    v17[12] = 0u;
    v17[9] = 0u;
    v17[10] = 0u;
    v17[7] = 0u;
    v17[8] = 0u;
    v17[5] = 0u;
    v17[6] = 0u;
    v17[3] = 0u;
    v17[4] = 0u;
    v17[1] = 0u;
    v17[2] = 0u;
    CFTypeRef v18 = *(CFTypeRef *)(a1 + 48);
    uint64_t v19 = *(CFTypeRef **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    CFTypeRef v20 = v19[34];
    if (v20 != v18)
    {
      if (v20)
      {
        CFRelease(v19[34]);
        *(void *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 272) = 0;
        CFTypeRef v18 = *(CFTypeRef *)(a1 + 48);
      }
      if (v18) {
        CFTypeRef v18 = CFRetain(v18);
      }
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 272) = v18;
      CFTypeRef v20 = *(CFTypeRef *)(a1 + 48);
      uint64_t v19 = *(CFTypeRef **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
    uint64_t v21 = (__CFDictionary *)qword_1E9DDBA48;
    CFDictionarySetValue(v21, v20, v19);
  }
}

void sub_1B659EC24(uint64_t a1)
{
  if (a1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1B659ECA4;
    block[3] = &unk_1E6143EB8;
    block[4] = a1;
    dispatch_sync((dispatch_queue_t)qword_1E9DDBA50, block);
  }
}

void sub_1B659ECA4(uint64_t a1)
{
}

void sub_1B659ECB0(uint64_t a1)
{
  sub_1B6595A0C(@"kCFXNotificationProgramHashCodeWillDie", (const void *)a1, 0, 0);
  if (!CFDictionaryContainsKey((CFDictionaryRef)qword_1E9DDBA48, *(const void **)(a1 + 272))) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. ProgramHashCode should be in the dictionary", v2, v3, v4, v5, v6, v7, (uint64_t)"CFDictionaryContainsKey(s_ProgramHashCodeDictionary, programHashCode->_hashCodeHash)");
  }
  long long v8 = *(const void **)(a1 + 272);
  if (!v8)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v2, v3, v4, v5, v6, v7, (uint64_t)"programHashCode->_hashCodeHash");
    long long v8 = *(const void **)(a1 + 272);
  }
  CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1E9DDBA48, v8);
  long long v9 = *(const void **)(a1 + 272);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = a1 + 16;
  char v12 = 1;
  do
  {
    char v13 = v12;
    long long v14 = *(const void **)(v11 + 8 * v10);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v11 + 8 * v10) = 0;
    }
    char v12 = 0;
    uint64_t v10 = 1;
  }
  while ((v13 & 1) != 0);
  unsigned int v15 = *(unsigned __int8 *)(a1 + 158);
  if (*(unsigned char *)(a1 + 158))
  {
    unint64_t v16 = 0;
    uint64_t v17 = a1 + 208;
    do
    {
      CFTypeRef v18 = *(const void **)(v17 + 8 * v16);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(v17 + 8 * v16) = 0;
        unsigned int v15 = *(unsigned __int8 *)(a1 + 158);
      }
      ++v16;
    }
    while (v16 < v15);
  }
}

__CFString *sub_1B659EDCC(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<CFXProgramHashCode %p : ", a1);
  uint64_t v4 = (void *)(a1 + 16);
  if (*(void *)(a1 + 16)) {
    CFStringAppend(Mutable, @"SM_Mat,");
  }
  if (*(void *)(a1 + 24)) {
    CFStringAppend(Mutable, @"SM_Geo,");
  }
  if (*v4 || *(void *)(a1 + 24))
  {
    alloCC_SHA256_CTX c = v2;
    memset(&c, 0, sizeof(c));
    CC_SHA256_Init(&c);
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x1E4F143A8];
    char v7 = 1;
    do
    {
      int v8 = 0;
      char v9 = v7;
      CFArrayRef v10 = (const __CFArray *)v4[v5];
      do
      {
        v38[0] = v6;
        v38[1] = 3221225472;
        int v38[2] = sub_1B659F66C;
        v38[3] = &unk_1E6144BC8;
        int v39 = v8;
        v38[4] = &c;
        sub_1B63CC9FC(v10, (uint64_t)v38);
        ++v8;
      }
      while (v8 != 4);
      char v7 = 0;
      uint64_t v5 = 1;
    }
    while ((v9 & 1) != 0);
    for (uint64_t i = 0; i != 64; i += 8)
    {
      uint64_t v12 = *(void *)(a1 + 208 + i);
      if (v12) {
        sub_1B6604178(v12, (uint64_t)&c);
      }
    }
    int data = 2;
    CC_SHA256_Update(&c, &data, 4u);
    CC_SHA256_Final(md, &c);
    uint64_t v13 = 0;
    long long v14 = cStr;
    v15.i64[0] = 0xA0A0A0A0A0A0A0A0;
    v15.i64[1] = 0xA0A0A0A0A0A0A0A0;
    v16.i64[0] = 0x3737373737373737;
    v16.i64[1] = 0x3737373737373737;
    v17.i64[0] = 0x3030303030303030;
    v17.i64[1] = 0x3030303030303030;
    v18.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v18.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v19.i64[0] = 0xA0A0A0A0A0A0A0ALL;
    v19.i64[1] = 0xA0A0A0A0A0A0A0ALL;
    do
    {
      int8x16_t v20 = *(int8x16_t *)&md[v13];
      v44.val[0] = (int8x16_t)vsraq_n_u8((uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(v15, (uint8x16_t)v20), v17, v16), (uint8x16_t)v20, 4uLL);
      int8x16_t v21 = vandq_s8(v20, v18);
      v44.val[1] = vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v19, (uint8x16_t)v21), v17, v16), v21);
      vst2q_s8(v14, v44);
      v14 += 32;
      v13 += 16;
    }
    while (v13 != 32);
    cStr[64] = 0;
    CFStringRef v22 = CFStringCreateWithCString(alloc, cStr, 0x600u);
    CFStringAppendFormat(Mutable, 0, @"SM(%@),", v22);
    CFRelease(v22);
  }
  __int16 v23 = *(_WORD *)(a1 + 196);
  if (v23)
  {
    CFStringAppend(Mutable, @"Aone,");
    __int16 v23 = *(_WORD *)(a1 + 196);
    if ((v23 & 2) == 0)
    {
LABEL_20:
      if ((v23 & 8) == 0) {
        goto LABEL_21;
      }
      goto LABEL_46;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_20;
  }
  CFStringAppend(Mutable, @"Acst,");
  __int16 v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 8) == 0)
  {
LABEL_21:
    if ((v23 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  CFStringAppend(Mutable, @"opq,");
  __int16 v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x20) == 0)
  {
LABEL_22:
    if ((v23 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  CFStringAppend(Mutable, @"tgt,");
  __int16 v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x40) == 0)
  {
LABEL_23:
    if ((v23 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  CFStringAppend(Mutable, @"lgh,");
  __int16 v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x80) == 0)
  {
LABEL_24:
    if ((v23 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  CFStringAppend(Mutable, @"amb,");
  __int16 v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x1000) == 0)
  {
LABEL_25:
    if ((v23 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }
LABEL_50:
  CFStringAppend(Mutable, @"prob,");
  __int16 v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x100) == 0)
  {
LABEL_26:
    if ((v23 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }
LABEL_51:
  CFStringAppend(Mutable, @"fog,");
  __int16 v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x400) == 0)
  {
LABEL_27:
    if ((v23 & 0x800) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }
LABEL_52:
  CFStringAppend(Mutable, @"dynB,");
  __int16 v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x800) == 0)
  {
LABEL_28:
    if ((v23 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_53:
  CFStringAppend(Mutable, @"pntR,");
  if ((*(_WORD *)(a1 + 196) & 0x200) != 0) {
LABEL_29:
  }
    CFStringAppend(Mutable, @"iblTr,");
LABEL_30:
  CFStringAppendFormat(Mutable, 0, @"[%@:", off_1E6144B00[*(_WORD *)(a1 + 116) & 0xF]);
  unsigned int v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x10) != 0)
  {
    CFStringAppend(Mutable, @"PerPix|");
    unsigned int v24 = *(unsigned __int16 *)(a1 + 116);
    if ((v24 & 0x20) == 0)
    {
LABEL_32:
      if ((v24 & 0x40) == 0) {
        goto LABEL_33;
      }
      goto LABEL_57;
    }
  }
  else if ((v24 & 0x20) == 0)
  {
    goto LABEL_32;
  }
  CFStringAppend(Mutable, @"Double|");
  unsigned int v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x40) == 0)
  {
LABEL_33:
    if ((v24 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_58;
  }
LABEL_57:
  CFStringAppend(Mutable, @"OverLght|");
  unsigned int v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x80) == 0)
  {
LABEL_34:
    if ((v24 & 0x100) == 0) {
      goto LABEL_35;
    }
    goto LABEL_59;
  }
LABEL_58:
  CFStringAppend(Mutable, @"WrNrm|");
  unsigned int v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x100) == 0)
  {
LABEL_35:
    if ((v24 & 0x200) == 0) {
      goto LABEL_36;
    }
    goto LABEL_60;
  }
LABEL_59:
  CFStringAppend(Mutable, @"Nrmliz|");
  unsigned int v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x200) == 0)
  {
LABEL_36:
    if ((v24 & 0x400) == 0) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_60:
  CFStringAppend(Mutable, @"WriteDepth|");
  unsigned int v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x400) != 0)
  {
LABEL_37:
    CFStringAppend(Mutable, @"LinDepth|");
    unsigned int v24 = *(unsigned __int16 *)(a1 + 116);
  }
LABEL_38:
  unsigned int v25 = (v24 >> 11) & 0xF;
  if (v25 <= 2) {
    CFStringAppend(Mutable, off_1E6144BE8[v25]);
  }
  CFStringAppend(Mutable, @"]");
  CFStringAppend(Mutable, @"[Node:");
  int v26 = *(_DWORD *)(a1 + 120);
  if (v26)
  {
    CFStringAppend(Mutable, @"LightMap|");
    int v26 = *(_DWORD *)(a1 + 120);
    if ((v26 & 2) == 0)
    {
LABEL_42:
      if ((v26 & 4) == 0) {
        goto LABEL_75;
      }
LABEL_64:
      CFStringAppend(Mutable, @"Tess|");
      int v27 = *(_DWORD *)(a1 + 120);
      if ((v27 & 8) != 0)
      {
        CFStringRef v28 = @"PNTriangles|";
      }
      else
      {
        if ((v27 & 0x10) == 0) {
          goto LABEL_69;
        }
        CFStringRef v28 = @"Phong|";
      }
      CFStringAppend(Mutable, v28);
LABEL_69:
      if ((*(unsigned char *)(a1 + 120) & 0x20) != 0)
      {
        CFStringAppend(Mutable, @"OSD|");
        unsigned int v29 = *(_DWORD *)(a1 + 120);
        if ((v29 & 0x40) != 0)
        {
          CFStringAppend(Mutable, @"SingleCrease|");
          unsigned int v29 = *(_DWORD *)(a1 + 120);
        }
        if ((v29 & 0x80) != 0)
        {
          CFStringAppend(Mutable, @"ScreenSpace|");
          unsigned int v29 = *(_DWORD *)(a1 + 120);
        }
        CFStringAppendFormat(Mutable, 0, @"PrimvarData=%d|", (v29 >> 8) & 0x7FFFF);
      }
      goto LABEL_75;
    }
  }
  else if ((v26 & 2) == 0)
  {
    goto LABEL_42;
  }
  CFStringAppend(Mutable, @"VrtCol|");
  if ((*(_DWORD *)(a1 + 120) & 4) != 0) {
    goto LABEL_64;
  }
LABEL_75:
  CFStringAppend(Mutable, @"]");
  for (uint64_t j = 0; j != 20; ++j)
  {
    unint64_t v31 = *(unsigned int *)(a1 + 36 + 4 * j);
    if ((v31 & 0x400) == 0) {
      continue;
    }
    CFStringAppendFormat(Mutable, 0, @"[%@:", off_1E6144B28[j]);
    if (v31)
    {
      CFStringAppend(Mutable, @"Tex|");
      if ((v31 & 2) == 0)
      {
LABEL_79:
        if ((v31 & 4) == 0) {
          goto LABEL_80;
        }
        goto LABEL_95;
      }
    }
    else if ((v31 & 2) == 0)
    {
      goto LABEL_79;
    }
    CFStringAppend(Mutable, @"rgb0|");
    if ((v31 & 4) == 0)
    {
LABEL_80:
      if ((v31 & 8) == 0) {
        goto LABEL_81;
      }
      goto LABEL_96;
    }
LABEL_95:
    CFStringAppend(Mutable, @"rgb1|");
    if ((v31 & 8) == 0)
    {
LABEL_81:
      if ((v31 & 0x10) != 0) {
        goto LABEL_97;
      }
      goto LABEL_82;
    }
LABEL_96:
    CFStringAppend(Mutable, @"a1|");
    if ((v31 & 0x10) != 0)
    {
LABEL_97:
      CFStringAppend(Mutable, @"flt0|");
      if ((v31 & 0x1000) == 0) {
        goto LABEL_84;
      }
LABEL_83:
      CFStringAppend(Mutable, @"int|");
      goto LABEL_84;
    }
LABEL_82:
    if ((v31 & 0x1000) != 0) {
      goto LABEL_83;
    }
LABEL_84:
    if ((v31 & 0xE000) != 0) {
      CFStringAppend(Mutable, @"comp|");
    }
    if ((v31 & 0x800) != 0) {
      CFStringAppend(Mutable, @"mat|");
    }
    uint64_t v32 = ((v31 >> 5) & 0xF) - 1;
    if (v32 <= 3) {
      CFStringAppend(Mutable, off_1E6144C00[v32]);
    }
    CFStringAppend(Mutable, @"]");
  }
  if (*(unsigned char *)(a1 + 156))
  {
    CFStringAppend(Mutable, @"[Lighting:");
    if (*(unsigned char *)(a1 + 156))
    {
      for (unint64_t k = 0; k < *(unsigned __int8 *)(a1 + 156); ++k)
      {
        if (k) {
          CFStringAppend(Mutable, @",");
        }
        unsigned int v34 = *(_DWORD *)(a1 + 124 + 4 * k);
        if ((v34 & 7) == 7)
        {
          if ((v34 & 8) == 0) {
            goto LABEL_106;
          }
        }
        else
        {
          CFStringAppend(Mutable, off_1E6144C20[v34 & 7]);
          if ((v34 & 8) == 0)
          {
LABEL_106:
            if ((v34 & 0x10) == 0) {
              goto LABEL_108;
            }
LABEL_107:
            CFStringAppend(Mutable, @"s");
            goto LABEL_108;
          }
        }
        CFStringAppend(Mutable, @"g");
        if ((v34 & 0x10) != 0) {
          goto LABEL_107;
        }
LABEL_108:
        if (((v34 >> 10) & 0x1F) >= 2)
        {
          CFStringAppendFormat(Mutable, 0, @"Soft(%d)", (v34 >> 10) & 0x1F);
          if ((v34 & 0x20) != 0)
          {
LABEL_118:
            CFStringAppend(Mutable, @"c");
            if ((v34 & 0x40) == 0) {
              continue;
            }
LABEL_111:
            CFStringAppend(Mutable, @"m");
            continue;
          }
        }
        else if ((v34 & 0x20) != 0)
        {
          goto LABEL_118;
        }
        if ((v34 & 0x40) != 0) {
          goto LABEL_111;
        }
      }
    }
    CFStringAppend(Mutable, @"]");
  }
  CFStringAppend(Mutable, @">");
  return Mutable;
}

uint64_t sub_1B659F66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B660412C(a3, a2, a3, a4, a5, a6, a7, a8);
  if (result == *(_DWORD *)(a1 + 40))
  {
    uint64_t v11 = *(CC_SHA256_CTX **)(a1 + 32);
    return sub_1B6604324(a3, v11);
  }
  return result;
}

uint64_t sub_1B659F6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B660412C(a3, a2, a3, a4, a5, a6, a7, a8);
  if (result == *(_DWORD *)(a1 + 40))
  {
    uint64_t v11 = *(CC_SHA256_CTX **)(a1 + 32);
    return sub_1B6604324(a3, v11);
  }
  return result;
}

BOOL sub_1B659F724(uint64_t a1)
{
  return *(void *)(a1 + 136) && *(void *)(a1 + 144) != 0;
}

BOOL sub_1B659F744(int a1)
{
  return (a1 - 1) < 3;
}

uint64_t sub_1B659F754(uint64_t a1)
{
  return 2 * *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_1B659F760(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(*(void *)(a1 + 160) + 24);
  if (result) {
    return sub_1B659F774(result, a2);
  }
  return result;
}

BOOL sub_1B659F774(uint64_t a1, int a2)
{
  if ((a2 - 2) > 4) {
    int v2 = 3;
  }
  else {
    int v2 = dword_1B6E72470[(char)(a2 - 2)];
  }
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (v5 == v4) {
    return 0;
  }
  uint64_t v6 = v5 + 16;
  do
  {
    int v7 = *(_DWORD *)(v6 - 16);
    BOOL result = v7 == v2;
    BOOL v9 = v7 == v2 || v6 == v4;
    v6 += 16;
  }
  while (!v9);
  return result;
}

uint64_t sub_1B659F7D0(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

double sub_1B659F800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a1 + 80);
  if (!v10)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"refiner->computeEvaluator");
    uint64_t v10 = *(void *)(a1 + 80);
  }
  uint64_t v19 = 0;
  int v20 = 0;
  uint64_t v11 = sub_1B653EFB8(v10);
  if (!sub_1B6E1C9E0(v11, *(void **)(a1 + 40), (_DWORD *)(a1 + 56), *(void **)(a1 + 48), (int *)(a1 + 68), 0, (uint64_t)&v19, 0, (uint64_t)&v19, *(void **)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), 0, 0, 0, *(_DWORD *)(a1 + 32), a2))sub_1B63F2F54( {
      17,
  }
      @"Assertion '%s' failed. Internal consistency error.",
      v12,
      v13,
      v14,
      v15,
      v16,
      v17,
      (uint64_t)"evaluatorDidSucceed");
  return nullsub_1(a2);
}

void sub_1B659F8CC(uint64_t a1, uint64_t a2, void *a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1B63CF130(a2, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    *(void *)(a1 + 352) = (id)objc_msgSend_computePipelineStateForKernel_(a3, v12, @"vfx_osd_synchronize_coarse_positions_no_argument_buffer", v13);
    uint64_t v21 = sub_1B63CCE68(a2, v14, v15, v16, v17, v18, v19, v20);
    uint64_t v29 = sub_1B644805C(v21);
    uint64_t v30 = *(void *)(a2 + 168);
    if (!v30) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v23, v24, v25, v26, v27, v28, (uint64_t)"topologyInfo");
    }
    uint64_t v32 = *(void *)(v30 + 32);
    uint64_t v31 = *(void *)(v30 + 40);
    __p = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    unint64_t v33 = (v31 - v32) >> 2;
    if (v31 != v32)
    {
      sub_1B646FFA4(&__p, (v31 - v32) >> 2);
      unsigned int v34 = (char *)v40;
      bzero(v40, v31 - v32);
      uint64_t v40 = &v34[v31 - v32];
    }
    if (v33 != *(_DWORD *)(a1 + 28)) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Internal consistency error.", v23, v24, v25, v26, v27, v28, (uint64_t)"osdRuntimeData->coarseVertexCount == remappingTableSize");
    }
    uint64_t v35 = __p;
    if (v31 != v32)
    {
      uint64_t v36 = 0;
      uint64_t v37 = *(void *)(v30 + 32);
      do
      {
        uint64_t v38 = *(unsigned int *)(v37 + 4 * v36);
        if (v29) {
          LODWORD(v38) = *(_DWORD *)(v29 + 4 * v38);
        }
        v35[v36++] = v38;
      }
      while (v33 > v36);
    }
    *(void *)(a1 + 344) = objc_msgSend_newBufferWithBytes_length_options_(*a4, v22, (uint64_t)v35, (unsigned char *)v40 - (unsigned char *)v35, 0);
    if (__p)
    {
      uint64_t v40 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 352) = (id)objc_msgSend_computePipelineStateForKernel_(a3, v12, @"vfx_osd_synchronize_indexed_coarse_positions_no_argument_buffer", v13);
  }
}

void sub_1B659FA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B659FA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = objc_alloc(MEMORY[0x1E4F28DC0]);
  BOOL v9 = objc_msgSend_initForReadingFromData_error_(v7, v8, a1, 0);
  if (objc_msgSend_decodeInt32ForKey_(v9, v10, @"version", v11) >= 2)
  {
    if (!a5) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v13, v14, v15, v16, v17, v18, (uint64_t)"commandQueue");
    }
    uint64_t v19 = objc_msgSend_commandBuffer(a5, v12, v13, v14);
    uint64_t v23 = objc_msgSend_computeCommandEncoder(v19, v20, v21, v22);
    v32[0] = objc_msgSend_device(a5, v24, v25, v26);
    v32[1] = a5;
    v32[2] = v19;
    v32[3] = v23;
    if (qword_1E9DDBA60 != -1) {
      dispatch_once_f(&qword_1E9DDBA60, &qword_1E9DDBA58, (dispatch_function_t)sub_1B659F7D0);
    }
    uint64_t v27 = sub_1B63C8D44(qword_1E9DDBA58, 0x158uLL);
    *(_DWORD *)(v27 + 28) = objc_msgSend_decodeInt32ForKey_(v9, v28, @"coarseVertexCount", v29);
    sub_1B65A03EC(v9, @"vertexPatchTable", (uint64_t)v32, v30);
  }
  objc_msgSend_finishDecoding(v9, v12, v13, v14);

  return 0;
}

void sub_1B65A03A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
}

void sub_1B65A03EC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  size_t size = 0;
  uint64_t v5 = objc_msgSend_stringByAppendingString_(a2, (const char *)a2, @".patchArrays", a4);
  id v7 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(a1, v6, v5, (uint64_t)&size);
  int v8 = malloc_type_malloc(size, 0x62B7FEE6uLL);
  memcpy(v8, v7, size);
  operator new();
}

id sub_1B65A06C0@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 64) = 0;
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 56) = 0;
  BOOL v9 = (_OWORD *)(a5 + 56);
  uint64_t v10 = objc_msgSend_stringByAppendingString_(a2, (const char *)a2, @".stencilTable", (uint64_t)a4);
  uint64_t v13 = (const char *)objc_msgSend_stringByAppendingString_(v10, v11, @".sizesBuffer", v12);
  uint64_t v14 = sub_1B65A0DA4(a1, v13, a4, 0);
  uint64_t v17 = (const char *)objc_msgSend_stringByAppendingString_(v10, v15, @".offsetsBuffer", v16);
  uint64_t v18 = sub_1B65A0DA4(a1, v17, a4, 0);
  uint64_t v21 = (const char *)objc_msgSend_stringByAppendingString_(v10, v19, @".indicesBuffer", v20);
  uint64_t v22 = sub_1B65A0DA4(a1, v21, a4, 0);
  uint64_t v25 = (const char *)objc_msgSend_stringByAppendingString_(v10, v23, @".weightsBuffer", v24);
  uint64_t v26 = sub_1B65A0DA4(a1, v25, a4, 0);
  uint64_t v29 = objc_msgSend_stringByAppendingString_(v10, v27, @".numStencils", v28);
  int v32 = objc_msgSend_decodeInt32ForKey_(a1, v30, v29, v31);
  *(void *)a5 = v14;
  *(void *)(a5 + 8) = v18;
  *(void *)(a5 + 16) = v22;
  *(void *)(a5 + 24) = v26;
  *(_DWORD *)(a5 + 32) = v32;
  uint64_t v35 = objc_msgSend_stringByAppendingString_(a2, v33, @".evaluatorInput", v34);
  __uint64_t n = 0;
  unint64_t v54 = 0;
  uint64_t v38 = objc_msgSend_stringByAppendingString_(v35, v36, @".srcDesc", v37);
  uint64_t v40 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(a1, v39, v38, (uint64_t)&v54);
  uint64_t v43 = objc_msgSend_stringByAppendingString_(v35, v41, @".dstDesc", v42);
  uint64_t v45 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(a1, v44, v43, (uint64_t)&__n);
  size_t v46 = v54;
  if (v54 <= 0x17) {
    size_t v47 = 24 - v54;
  }
  else {
    size_t v47 = 0;
  }
  bzero((char *)&__dst + v54, v47);
  memcpy(&__dst, v40, v46);
  memcpy((char *)&__dst + 12, v45, __n);
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 48) = 0;
  *BOOL v9 = __dst;
  *(void *)(a5 + 72) = v52;
  *(void *)&long long __dst = 0;
  DWORD2(__dst) = 0;
  id result = (id)objc_msgSend_computeEvaluatorWithContext_srcDesc_dstDesc_duDesc_dvDesc_(a3, v48, (uint64_t)a4, (uint64_t)v9, a5 + 68, &__dst, &__dst);
  *(void *)(a5 + 80) = result;
  return result;
}

void sub_1B65A08D8(uint64_t a1, unsigned char *a2, void *a3, void **a4)
{
  uint64_t v5 = a2;
  int v7 = a2[4];
  BOOL v8 = sub_1B6569F48(*(_DWORD *)(a1 + 24));
  int v9 = sub_1B6569F58(*(_DWORD *)(a1 + 24));
  if (v8) {
    int v17 = 16;
  }
  else {
    int v17 = 0;
  }
  uint64_t v67 = a1;
  uint64_t v18 = *(int ***)(a1 + 32);
  uint64_t v19 = *v18;
  unint64_t v20 = (unint64_t)v18[1];
  if (*v18 == (int *)v20)
  {
    unsigned int v22 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    int v64 = v7;
    uint64_t v21 = v5;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    int v24 = v17 + 8 * v9;
    do
    {
      int v25 = *v19;
      switch(*v19)
      {
        case 4:
          int v26 = v19[1];
          break;
        case 6:
          int v26 = v19[1];
          int v29 = v21[3];
          *(_WORD *)(a1 + 232) = 12 * v22;
          float v30 = 36.0;
          if (!v29) {
            float v30 = 12.0;
          }
          *(_WORD *)(a1 + 248) = v23;
          unsigned int v23 = (float)((float)v23 + (float)((float)(v30 * (float)v26) * 16.0)) + 16 * v26 * v24;
          break;
        case 7:
        case 8:
          int v26 = v19[1];
          __int16 v27 = 4;
          goto LABEL_8;
        case 9:
          int v26 = v19[1];
          int v28 = 20;
          __int16 v27 = 20;
LABEL_17:
          *(_WORD *)(a1 + 238) = 12 * v22;
          *(_WORD *)(a1 + 254) = v23;
          v23 += v26 * v24 * v27 + 12 * v26 * v28;
          break;
        default:
          int v26 = v19[1];
          if ((v25 - 1) >= 2)
          {
            if (v25 != 3)
            {
              __int16 v27 = -1;
LABEL_8:
              int v28 = v27;
              switch(v25)
              {
                case 0:
                case 1:
                case 2:
                case 5:
                  goto LABEL_12;
                case 7:
                  *(_WORD *)(a1 + 234) = 12 * v22;
                  *(_WORD *)(a1 + 250) = v23;
                  goto LABEL_21;
                case 8:
                  *(_WORD *)(a1 + 236) = 12 * v22;
                  *(_WORD *)(a1 + 252) = v23;
LABEL_21:
                  v23 += v26 * v24 * v27 + 60 * v26 * v27;
                  break;
                case 9:
                  goto LABEL_17;
                default:
                  goto LABEL_22;
              }
            }
          }
          else
          {
LABEL_12:
            sub_1B63F2F54(16, @"Unreachable code: Unsupported patch type", v11, v12, v13, v14, v15, v16, v62);
          }
          break;
      }
LABEL_22:
      v22 += v26;
      v19 += 4;
    }
    while (v19 != (int *)v20);
    if (v23) {
      uint64_t v31 = objc_msgSend_newBufferWithLength_options_(*a4, v10, v23, 32);
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v5 = v21;
    int v7 = v64;
  }
  *(void *)(a1 + 240) = v31;
  if (v7) {
    uint64_t v32 = objc_msgSend_newBufferWithLength_options_(*a4, v10, 80 * v22, 32);
  }
  else {
    uint64_t v32 = 0;
  }
  *(void *)(a1 + 256) = v32;
  *(void *)(a1 + 224) = objc_msgSend_newBufferWithLength_options_(*a4, v10, 12 * v22, 32);
  unint64_t v33 = *(unsigned int ***)(a1 + 32);
  uint64_t v34 = *v33;
  uint64_t v35 = v33[1];
  if (*v33 != v35)
  {
    uint64_t v63 = *(unsigned int *)(a1 + 24);
    unint64_t v65 = (unint64_t)v5[4] << 16;
    do
    {
      if (v5[2])
      {
        uint64_t v36 = *v34;
        if ((v36 - 4) > 5) {
          char v37 = 1;
        }
        else {
          char v37 = 0x60504030102uLL >> (8 * (v36 - 4));
        }
        uint64_t v38 = v5;
        BOOL v39 = v5[3] != 0;
        id v40 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        uint64_t v41 = 256;
        if (((((v36 - 4) > 5) | (7u >> (v36 - 4))) & v39) == 0) {
          uint64_t v41 = 0;
        }
        unint64_t v20 = v20 & 0xFFFFFFFF00000000 | v63;
        uint64_t v42 = sub_1B65A1190(v41 | v65 | v37 & 7 | 0x2000000000, (const char *)v20, v40);
        id v43 = objc_alloc_init(MEMORY[0x1E4F351F8]);
        uint64_t v44 = sub_1B64D9870();
        objc_msgSend_setLanguageVersion_(v43, v45, v44, v46);
        objc_msgSend_setFastMathEnabled_(v43, v47, 1, v48);
        objc_msgSend_setPreprocessorMacros_(v43, v49, (uint64_t)v40, v50);
        objc_msgSend_setAdditionalCompilerArguments_(v43, v51, @" -w ", v52);

        id v53 = [NSString alloc];
        uint64_t v56 = sub_1B65A0FF8(v37 & 7);
        if (qword_1E9DDBA80 != -1) {
          dispatch_once(&qword_1E9DDBA80, &unk_1F0FB6D28);
        }
        int v57 = objc_msgSend_initWithFormat_(v53, v54, @"%@%@%@", v55, v42, v56, qword_1E9DDBA78);
        uint64_t v58 = (void *)sub_1B653EFAC((uint64_t)a3);
        uint64_t v60 = objc_msgSend_libraryForSourceCode_options_(v58, v59, (uint64_t)v57, (uint64_t)v43);
        *(void *)(v67 + 8 * v36 + 264) = objc_msgSend_newComputePipelineStateWithFunctionName_library_(a3, v61, @"compute_opensubdiv", v60);

        uint64_t v5 = v38;
      }
      v34 += 4;
    }
    while (v34 != v35);
  }
}

uint64_t sub_1B65A0DA4(void *a1, const char *a2, void **a3, size_t a4)
{
  if (!objc_msgSend_containsValueForKey_(a1, a2, (uint64_t)a2, a4)) {
    return 0;
  }
  __uint64_t n = 0;
  uint64_t v10 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(a1, v8, (uint64_t)a2, (uint64_t)&__n);
  if (__n >= a4) {
    return objc_msgSend_newBufferWithBytes_length_options_(*a3, v9, (uint64_t)v10, __n, 0);
  }
  uint64_t v11 = malloc_type_malloc(a4, 0x21BE106CuLL);
  memcpy(v11, v10, __n);
  uint64_t v13 = objc_msgSend_newBufferWithBytes_length_options_(*a3, v12, (uint64_t)v11, a4, 0);
  free(v11);
  return v13;
}

void sub_1B65A0E84(char ***a1)
{
  id v1 = *a1;
  if (*a1)
  {
    int v2 = *v1;
    uint64_t v3 = v1[1];
    if (*v1 == v3) {
      goto LABEL_6;
    }
    do
    {
      sub_1B65A565C((uint64_t)v2);
      v2 += 88;
    }
    while (v2 != v3);
    id v1 = *a1;
    if (*a1)
    {
      int v2 = *v1;
LABEL_6:
      if (v2)
      {
        v1[1] = v2;
        operator delete(v2);
      }
      JUMPOUT(0x1BA9B6D80);
    }
  }
}

uint64_t sub_1B65A0F24()
{
  if (qword_1E9DDBA70 != -1) {
    dispatch_once(&qword_1E9DDBA70, &unk_1F0FB5EE8);
  }
  return qword_1E9DDBA68;
}

void sub_1B65A0F68()
{
  id v0 = [NSString alloc];
  sub_1B6E267EC();
  if (v4 >= 0) {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  }
  else {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  }
  qword_1E9DDBA68 = v2;
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1B65A0FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B65A0FF8(uint64_t result)
{
  switch((int)result)
  {
    case 1:
      if (qword_1E9DDBA90 != -1) {
        dispatch_once(&qword_1E9DDBA90, &unk_1F0FB6D88);
      }
      id v1 = &qword_1E9DDBA88;
      goto LABEL_20;
    case 2:
      if (qword_1E9DDBAA0 != -1) {
        dispatch_once(&qword_1E9DDBAA0, &unk_1F0FB6DC8);
      }
      id v1 = &qword_1E9DDBA98;
      goto LABEL_20;
    case 3:
      if (qword_1E9DDBAB0 != -1) {
        dispatch_once(&qword_1E9DDBAB0, &unk_1F0FB6DE8);
      }
      id v1 = &qword_1E9DDBAA8;
      goto LABEL_20;
    case 4:
      if (qword_1E9DDBAC0 != -1) {
        dispatch_once(&qword_1E9DDBAC0, &unk_1F0FB6E28);
      }
      id v1 = &qword_1E9DDBAB8;
      goto LABEL_20;
    case 5:
      if (qword_1E9DDBAD0 != -1) {
        dispatch_once(&qword_1E9DDBAD0, &unk_1F0FB6E48);
      }
      id v1 = &qword_1E9DDBAC8;
      goto LABEL_20;
    case 6:
      if (qword_1E9DDBAE0 != -1) {
        dispatch_once(&qword_1E9DDBAE0, &unk_1F0FB6E68);
      }
      id v1 = &qword_1E9DDBAD8;
LABEL_20:
      id result = *v1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B65A1190(unint64_t a1, const char *a2, void *a3)
{
  unsigned int v4 = a2;
  int v6 = 6;
  unint64_t v7 = 16;
  switch((char)a1)
  {
    case 2:
      int v6 = 4;
      unint64_t v7 = 3;
      goto LABEL_8;
    case 3:
      goto LABEL_8;
    case 4:
      int v6 = 7;
      goto LABEL_6;
    case 5:
      int v6 = 8;
      goto LABEL_6;
    case 6:
      int v6 = 9;
      unint64_t v7 = 20;
      goto LABEL_8;
    default:
      int v6 = 3;
LABEL_6:
      unint64_t v7 = 4;
LABEL_8:
      objc_msgSend_setObject_forKeyedSubscript_(a3, a2, MEMORY[0x1E4F1CC38], @"USE_OPENSUBDIV");
      uint64_t v10 = objc_msgSend_numberWithBool_(NSNumber, v8, (v6 - 5) < 5, v9);
      objc_msgSend_setObject_forKeyedSubscript_(a3, v11, v10, @"OSD_IS_ADAPTIVE");
      uint64_t v329 = a3;
      unsigned int v324 = v6 - 5;
      switch(v6)
      {
        case 3:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E4F1CC38], @"OSD_PATCH_QUADS");
          break;
        case 4:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E4F1CC38], @"OSD_PATCH_TRIANGLES");
          break;
        case 5:
          sub_1B63F2F54(16, @"Unreachable code: Unsupported patch type", v13, v14, v15, v16, v17, v18, v323);
          break;
        case 6:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E4F1CC38], @"OSD_PATCH_REGULAR");
          objc_msgSend_setObject_forKeyedSubscript_(a3, v19, (uint64_t)&unk_1F103BB70, @"CONTROL_POINTS_PER_PATCH");
          break;
        case 7:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E4F1CC38], @"OSD_PATCH_GREGORY");
          goto LABEL_17;
        case 8:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E4F1CC38], @"OSD_PATCH_GREGORY_BOUNDARY");
          goto LABEL_17;
        case 9:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E4F1CC38], @"OSD_PATCH_GREGORY_BASIS");
LABEL_17:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v20, (uint64_t)&unk_1F103BB88, @"CONTROL_POINTS_PER_PATCH");
          unint64_t v7 = 4;
          break;
        default:
          break;
      }
      unsigned int v21 = v4;
      BOOL v22 = sub_1B6569F48(v4);
      char v23 = sub_1B6569F58(v21);
      if (v22) {
        char v24 = 4;
      }
      else {
        char v24 = 0;
      }
      BOOL v25 = sub_1B6569FDC(v21);
      char v26 = sub_1B6569FEC(v21);
      if (v25) {
        char v27 = 4;
      }
      else {
        char v27 = 0;
      }
      char v326 = v27;
      char v327 = v26;
      unsigned int v325 = sub_1B656A068(v21);
      sub_1B65A2694((uint64_t)v335);
      sub_1B65A7F00(&v336, (uint64_t)"#define OSD_UV_CORRECTION if (t > 0.5) { ti += 0.01f; } else { ti += 0.01f; }\n",
        78);
      char v328 = v24 + 2 * v23;
      if (v328)
      {
        sub_1B65A7F00(&v336, (uint64_t)"struct OsdInputVertexType { \n", 29);
        sub_1B65A7F00(&v336, (uint64_t)"    metal::packed_float3 position; \n", 36);
        for (int i = 0; i != 8; ++i)
        {
          if (sub_1B6569E84(v21, i, v28, v29, v30, v31, v32, v33) == 2)
          {
            uint64_t v35 = sub_1B65A7F00(&v336, (uint64_t)"    metal::packed_float2 texcoord", 33);
            std::to_string(&v334, i);
            uint64_t v36 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v334
                : (std::string *)v334.__r_.__value_.__r.__words[0];
            uint64_t v37 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v334.__r_.__value_.__r.__words[2])
                : v334.__r_.__value_.__l.__size_;
            uint64_t v38 = sub_1B65A7F00(v35, (uint64_t)v36, v37);
            sub_1B65A7F00(v38, (uint64_t)"; \n", 3);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
          }
        }
        if (sub_1B6569E7C(v21) == 2) {
          sub_1B65A7F00(&v336, (uint64_t)"    metal::packed_float4 color; \n", 33);
        }
        sub_1B65A7F00(&v336, (uint64_t)"}; \n", 4);
        sub_1B65A7F00(&v336, (uint64_t)"#define OSD_USER_VARYING_DECLARE                             ", 61);
        for (int j = 0; j != 8; ++j)
        {
          if (sub_1B6569E84(v21, j, v39, v40, v41, v42, v43, v44) == 2)
          {
            uint64_t v46 = sub_1B65A7F00(&v336, (uint64_t)"float2 texcoord", 15);
            std::to_string(&v334, j);
            size_t v47 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v334
                : (std::string *)v334.__r_.__value_.__r.__words[0];
            uint64_t v48 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v334.__r_.__value_.__r.__words[2])
                : v334.__r_.__value_.__l.__size_;
            uint64_t v49 = sub_1B65A7F00(v46, (uint64_t)v47, v48);
            sub_1B65A7F00(v49, (uint64_t)"; ", 2);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
          }
        }
        if (sub_1B6569E7C(v21) == 2) {
          sub_1B65A7F00(&v336, (uint64_t)"float4 color; ", 14);
        }
        sub_1B65A7F00(&v336, (uint64_t)"\n", 1);
        sub_1B65A7F00(&v336, (uint64_t)"#define OSD_USER_VARYING_DECLARE_PACKED                             ", 68);
        for (int k = 0; k != 8; ++k)
        {
          if (sub_1B6569E84(v21, k, v50, v51, v52, v53, v54, v55) == 2)
          {
            int v57 = sub_1B65A7F00(&v336, (uint64_t)"metal::packed_float2 texcoord", 29);
            std::to_string(&v334, k);
            uint64_t v58 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v334
                : (std::string *)v334.__r_.__value_.__r.__words[0];
            uint64_t v59 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v334.__r_.__value_.__r.__words[2])
                : v334.__r_.__value_.__l.__size_;
            uint64_t v60 = sub_1B65A7F00(v57, (uint64_t)v58, v59);
            sub_1B65A7F00(v60, (uint64_t)"; ", 2);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
          }
        }
        if (sub_1B6569E7C(v21) == 2) {
          sub_1B65A7F00(&v336, (uint64_t)"metal::packed_float4 color; ", 28);
        }
        sub_1B65A7F00(&v336, (uint64_t)"\n", 1);
        sub_1B65A7F00(&v336, (uint64_t)"#define OSD_USER_VARYING_PER_VERTEX(in, out)                 ", 61);
        for (int m = 0; m != 8; ++m)
        {
          if (sub_1B6569E84(v21, m, v61, v62, v63, v64, v65, v66) == 2)
          {
            uint64_t v68 = sub_1B65A7F00(&v336, (uint64_t)"out.texcoord", 12);
            std::to_string(&v334, m);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v69 = &v334;
            }
            else {
              uint64_t v69 = (std::string *)v334.__r_.__value_.__r.__words[0];
            }
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v334.__r_.__value_.__l.__size_;
            }
            int v71 = sub_1B65A7F00(v68, (uint64_t)v69, size);
            BOOL v72 = sub_1B65A7F00(v71, (uint64_t)" = in.texcoord", 14);
            std::to_string(&v333, m);
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v73 = &v333;
            }
            else {
              uint64_t v73 = (std::string *)v333.__r_.__value_.__r.__words[0];
            }
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v74 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v74 = v333.__r_.__value_.__l.__size_;
            }
            unsigned int v75 = sub_1B65A7F00(v72, (uint64_t)v73, v74);
            sub_1B65A7F00(v75, (uint64_t)"; ", 2);
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v333.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
          }
        }
        if (sub_1B6569E7C(v21) == 2) {
          sub_1B65A7F00(&v336, (uint64_t)"out.color = in.color; ", 22);
        }
        sub_1B65A7F00(&v336, (uint64_t)"\n", 1);
        sub_1B65A7F00(&v336, (uint64_t)"#define OSD_USER_VARYING_PER_CONTROL_POINT(in, out)          ", 61);
        for (int n = 0; n != 8; ++n)
        {
          if (sub_1B6569E84(v21, n, v76, v77, v78, v79, v80, v81) == 2)
          {
            uint64_t v83 = sub_1B65A7F00(&v336, (uint64_t)"out.texcoord", 12);
            std::to_string(&v334, n);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v84 = &v334;
            }
            else {
              uint64_t v84 = (std::string *)v334.__r_.__value_.__r.__words[0];
            }
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v85 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v85 = v334.__r_.__value_.__l.__size_;
            }
            uint64_t v86 = sub_1B65A7F00(v83, (uint64_t)v84, v85);
            int v87 = sub_1B65A7F00(v86, (uint64_t)" = in.texcoord", 14);
            std::to_string(&v333, n);
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              float v88 = &v333;
            }
            else {
              float v88 = (std::string *)v333.__r_.__value_.__r.__words[0];
            }
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v89 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v89 = v333.__r_.__value_.__l.__size_;
            }
            BOOL v90 = sub_1B65A7F00(v87, (uint64_t)v88, v89);
            sub_1B65A7F00(v90, (uint64_t)"; ", 2);
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v333.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
          }
        }
        if (sub_1B6569E7C(v21) == 2) {
          sub_1B65A7F00(&v336, (uint64_t)"out.color = in.color; ", 22);
        }
        sub_1B65A7F00(&v336, (uint64_t)"\n", 1);
        sub_1B65A7F00(&v336, (uint64_t)"#define OSD_USER_VARYING_PER_EVAL_POINT(UV, a, b, c, d, out) ", 61);
        for (iint i = 0; ii != 8; ++ii)
        {
          if (sub_1B6569E84(v21, ii, v91, v92, v93, v94, v95, v96) == 2)
          {
            uint64_t v98 = sub_1B65A7F00(&v336, (uint64_t)"out.texcoord", 12);
            std::to_string(&v334, ii);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v99 = &v334;
            }
            else {
              uint64_t v99 = (std::string *)v334.__r_.__value_.__r.__words[0];
            }
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v100 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v100 = v334.__r_.__value_.__l.__size_;
            }
            uint64_t v101 = sub_1B65A7F00(v98, (uint64_t)v99, v100);
            uint64_t v102 = sub_1B65A7F00(v101, (uint64_t)" = mix(mix(a.texcoord", 21);
            std::to_string(&v333, ii);
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v103 = &v333;
            }
            else {
              uint64_t v103 = (std::string *)v333.__r_.__value_.__r.__words[0];
            }
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v104 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v104 = v333.__r_.__value_.__l.__size_;
            }
            uint64_t v105 = sub_1B65A7F00(v102, (uint64_t)v103, v104);
            uint64_t v106 = sub_1B65A7F00(v105, (uint64_t)", b.texcoord", 12);
            std::to_string(&v332, ii);
            if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v107 = &v332;
            }
            else {
              uint64_t v107 = (std::string *)v332.__r_.__value_.__r.__words[0];
            }
            if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v108 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v108 = v332.__r_.__value_.__l.__size_;
            }
            uint64_t v109 = sub_1B65A7F00(v106, (uint64_t)v107, v108);
            uint64_t v110 = sub_1B65A7F00(v109, (uint64_t)", UV.x), mix(c.texcoord", 23);
            std::to_string(&v331, ii);
            if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v111 = &v331;
            }
            else {
              uint64_t v111 = (std::string *)v331.__r_.__value_.__r.__words[0];
            }
            if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v112 = HIBYTE(v331.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v112 = v331.__r_.__value_.__l.__size_;
            }
            uint64_t v113 = sub_1B65A7F00(v110, (uint64_t)v111, v112);
            uint64_t v114 = sub_1B65A7F00(v113, (uint64_t)", d.texcoord", 12);
            std::to_string(&v330, ii);
            if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v115 = &v330;
            }
            else {
              uint64_t v115 = (std::string *)v330.__r_.__value_.__r.__words[0];
            }
            if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v116 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v116 = v330.__r_.__value_.__l.__size_;
            }
            uint64_t v117 = sub_1B65A7F00(v114, (uint64_t)v115, v116);
            sub_1B65A7F00(v117, (uint64_t)", UV.x), UV.y); ", 16);
            if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v330.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v331.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v332.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v333.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
          }
        }
        if (sub_1B6569E7C(v21) == 2) {
          sub_1B65A7F00(&v336, (uint64_t)"out.color = mix(mix(a.color, b.color, UV.x), mix(c.color, d.color, UV.x), UV.y); ",
        }
            81);
        sub_1B65A7F00(&v336, (uint64_t)"\n", 1);
        sub_1B65A7F00(&v336, (uint64_t)"#define OSD_USER_VARYING_DECLARE_ATTRIBUTE                   ", 61);
        int v124 = 0;
        unsigned __int8 v125 = 11;
        do
        {
          if (sub_1B6569E84(v21, v124, v118, v119, v120, v121, v122, v123) == 2)
          {
            BOOL v126 = sub_1B65A7F00(&v336, (uint64_t)"float2 texcoord", 15);
            std::to_string(&v334, v124);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v127 = &v334;
            }
            else {
              __int16 v127 = (std::string *)v334.__r_.__value_.__r.__words[0];
            }
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v128 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v128 = v334.__r_.__value_.__l.__size_;
            }
            int v129 = sub_1B65A7F00(v126, (uint64_t)v127, v128);
            int v130 = sub_1B65A7F00(v129, (uint64_t)" [[attribute(", 13);
            std::to_string(&v333, v125);
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v131 = &v333;
            }
            else {
              __int16 v131 = (std::string *)v333.__r_.__value_.__r.__words[0];
            }
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v132 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v132 = v333.__r_.__value_.__l.__size_;
            }
            BOOL v133 = sub_1B65A7F00(v130, (uint64_t)v131, v132);
            sub_1B65A7F00(v133, (uint64_t)")]]; ", 5);
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v333.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
            ++v125;
          }
          ++v124;
        }
        while (v124 != 8);
        if (sub_1B6569E7C(v21) == 2)
        {
          uint64_t v134 = sub_1B65A7F00(&v336, (uint64_t)"float4 color [[attribute(", 25);
          std::to_string(&v334, v125);
          uint64_t v135 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v334
               : (std::string *)v334.__r_.__value_.__r.__words[0];
          uint64_t v136 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? HIBYTE(v334.__r_.__value_.__r.__words[2])
               : v334.__r_.__value_.__l.__size_;
          uint64_t v137 = sub_1B65A7F00(v134, (uint64_t)v135, v136);
          sub_1B65A7F00(v137, (uint64_t)")]]; ", 5);
          if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v334.__r_.__value_.__l.__data_);
          }
        }
        sub_1B65A7F00(&v336, (uint64_t)"\n", 1);
      }
      else
      {
        sub_1B65A7F00(&v336, (uint64_t)"struct OsdInputVertexType { \n", 29);
        sub_1B65A7F00(&v336, (uint64_t)"    metal::packed_float3 position; \n", 36);
        sub_1B65A7F00(&v336, (uint64_t)"}; \n", 4);
      }
      objc_msgSend_setObject_forKeyedSubscript_(v329, v138, (uint64_t)&unk_1F103BBA0, @"VERTEX_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v139, (uint64_t)&unk_1F103BBB8, @"PATCH_INDICES_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v140, (uint64_t)&unk_1F103BBD0, @"CONTROL_INDICES_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v141, (uint64_t)&unk_1F103BBE8, @"OSD_PATCHPARAM_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v142, (uint64_t)&unk_1F103BC00, @"OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v143, (uint64_t)&unk_1F103BC18, @"OSD_PERPATCHTESSFACTORS_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v144, (uint64_t)&unk_1F103BC30, @"OSD_VALENCE_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v145, (uint64_t)&unk_1F103BC48, @"OSD_QUADOFFSET_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v146, (uint64_t)&unk_1F103BC60, @"TRANSFORMS_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v147, (uint64_t)&unk_1F103BC78, @"TESSELLATION_LEVEL_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v148, (uint64_t)&unk_1F103BBD0, @"INDICES_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v149, (uint64_t)&unk_1F103BC90, @"QUAD_TESSFACTORS_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v150, (uint64_t)&unk_1F103BC00, @"OSD_PERPATCHVERTEXGREGORY_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v151, (uint64_t)&unk_1F103BCA8, @"OSD_PATCH_INDEX_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v152, (uint64_t)&unk_1F103BCC0, @"OSD_DRAWINDIRECT_BUFFER_INDEX");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v153, (uint64_t)&unk_1F103BCD8, @"OSD_KERNELLIMIT_BUFFER_INDEX");
      uint64_t v156 = objc_msgSend_numberWithBool_(NSNumber, v154, (a1 >> 8) & 1, v155);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v157, v156, @"OSD_PATCH_ENABLE_SINGLE_CREASE");
      uint64_t v160 = objc_msgSend_numberWithBool_(NSNumber, v158, 0, v159);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v161, v160, @"OSD_FRACTIONAL_EVEN_SPACING");
      uint64_t v164 = objc_msgSend_numberWithBool_(NSNumber, v162, (a1 >> 16) & 1, v163);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v165, v164, @"OSD_FRACTIONAL_ODD_SPACING");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v166, (uint64_t)&unk_1F103BB70, @"OSD_MAX_TESS_LEVEL");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v167, (uint64_t)&unk_1F103BCF0, @"USE_STAGE_IN");
      uint64_t v170 = objc_msgSend_numberWithBool_(NSNumber, v168, (a1 & 0x10000) == 0, v169);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v171, v170, @"USE_PTVS_FACTORS");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v172, (uint64_t)&unk_1F103BD08, @"USE_PTVS_SHARPNESS");
      uint64_t v175 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v173, WORD2(a1), v174);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v176, v175, @"THREADS_PER_THREADGROUP");
      if (v7 / WORD2(a1) <= 1) {
        uint64_t v179 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v177, 1, v178);
      }
      else {
        uint64_t v179 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v177, v7 / WORD2(a1), v178);
      }
      objc_msgSend_setObject_forKeyedSubscript_(v329, v180, v179, @"CONTROL_POINTS_PER_THREAD");
      uint64_t v183 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v181, v7, v182);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v184, v183, @"VERTEX_CONTROL_POINTS_PER_PATCH");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v185, (uint64_t)&unk_1F103BCD8, @"OSD_MAX_VALENCE");
      uint64_t v188 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v186, (v328 + 3), v187);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v189, v188, @"OSD_NUM_ELEMENTS");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v190, (uint64_t)&unk_1F103BCF0, @"OSD_ENABLE_BACKPATCH_CULL");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v191, (uint64_t)&unk_1F103BCF0, @"OSD_USE_PATCH_INDEX_BUFFER");
      uint64_t v194 = objc_msgSend_numberWithBool_(NSNumber, v192, (a1 >> 16) & 1, v193);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v195, v194, @"OSD_ENABLE_SCREENSPACE_TESSELLATION");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v196, (uint64_t)&unk_1F103BCF0, @"OSD_ENABLE_PATCH_CULL");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v197, (uint64_t)&unk_1F103BD08, @"NEEDS_BARRIER");
      if (v326 + 2 * v327)
      {
        uint64_t v200 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v198, (v326 + 2 * v327), v199);
        objc_msgSend_setObject_forKeyedSubscript_(v329, v201, v200, @"OSD_FVAR_WIDTH");
        uint64_t v204 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v202, v325, v203);
        objc_msgSend_setObject_forKeyedSubscript_(v329, v205, v204, @"OSD_FVAR_USES_MULTIPLE_CHANNELS");
        objc_msgSend_setObject_forKeyedSubscript_(v329, v206, (uint64_t)&unk_1F103BD20, @"OSD_FVAR_DATA_BUFFER_INDEX");
        objc_msgSend_setObject_forKeyedSubscript_(v329, v207, (uint64_t)&unk_1F103BD38, @"OSD_FVAR_INDICES_BUFFER_INDEX");
        if (v324 <= 4)
        {
          objc_msgSend_setObject_forKeyedSubscript_(v329, v208, (uint64_t)&unk_1F103BB70, @"OSD_FVAR_PATCHPARAM_BUFFER_INDEX");
          objc_msgSend_setObject_forKeyedSubscript_(v329, v209, (uint64_t)&unk_1F103BD50, @"OSD_FVAR_PATCH_ARRAY_BUFFER_INDEX");
        }
        objc_msgSend_setObject_forKeyedSubscript_(v329, v208, (uint64_t)&unk_1F103BD20, @"OSD_FVAR_CHANNELS_CHANNEL_COUNT_INDEX");
        objc_msgSend_setObject_forKeyedSubscript_(v329, v210, (uint64_t)&unk_1F103BD38, @"OSD_FVAR_CHANNELS_CHANNEL_DESCRIPTORS_INDEX");
        objc_msgSend_setObject_forKeyedSubscript_(v329, v211, (uint64_t)&unk_1F103BB70, @"OSD_FVAR_CHANNELS_PACKED_DATA_BUFFER_INDEX");
        objc_msgSend_setObject_forKeyedSubscript_(v329, v212, (uint64_t)&unk_1F103BD50, @"OSD_FVAR_CHANNELS_PATCH_ARRAY_INDEX_BUFFER_INDEX");
      }
      objc_msgSend_setObject_forKeyedSubscript_(v329, v198, (uint64_t)&unk_1F103BD68, @"OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v213, (uint64_t)&unk_1F103BD80, @"OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING");
      uint64_t v214 = NSNumber;
      uint64_t v215 = sub_1B6569E7C(v21);
      uint64_t v218 = objc_msgSend_numberWithUnsignedInt_(v214, v216, v215, v217);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v219, v218, @"OSD_COLOR_INTERPOLATION_MODE");
      uint64_t v220 = NSNumber;
      uint64_t v227 = sub_1B6569E84(v21, 0, v221, v222, v223, v224, v225, v226);
      uint64_t v230 = objc_msgSend_numberWithUnsignedInt_(v220, v228, v227, v229);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v231, v230, @"OSD_TEXCOORD0_INTERPOLATION_MODE");
      uint64_t v232 = NSNumber;
      uint64_t v239 = sub_1B6569E84(v21, 1u, v233, v234, v235, v236, v237, v238);
      uint64_t v242 = objc_msgSend_numberWithUnsignedInt_(v232, v240, v239, v241);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v243, v242, @"OSD_TEXCOORD1_INTERPOLATION_MODE");
      uint64_t v244 = NSNumber;
      uint64_t v251 = sub_1B6569E84(v21, 2u, v245, v246, v247, v248, v249, v250);
      uint64_t v254 = objc_msgSend_numberWithUnsignedInt_(v244, v252, v251, v253);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v255, v254, @"OSD_TEXCOORD2_INTERPOLATION_MODE");
      uint64_t v256 = NSNumber;
      uint64_t v263 = sub_1B6569E84(v21, 3u, v257, v258, v259, v260, v261, v262);
      uint64_t v266 = objc_msgSend_numberWithUnsignedInt_(v256, v264, v263, v265);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v267, v266, @"OSD_TEXCOORD3_INTERPOLATION_MODE");
      uint64_t v268 = NSNumber;
      uint64_t v275 = sub_1B6569E84(v21, 4u, v269, v270, v271, v272, v273, v274);
      uint64_t v278 = objc_msgSend_numberWithUnsignedInt_(v268, v276, v275, v277);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v279, v278, @"OSD_TEXCOORD4_INTERPOLATION_MODE");
      uint64_t v280 = NSNumber;
      uint64_t v287 = sub_1B6569E84(v21, 5u, v281, v282, v283, v284, v285, v286);
      uint64_t v290 = objc_msgSend_numberWithUnsignedInt_(v280, v288, v287, v289);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v291, v290, @"OSD_TEXCOORD5_INTERPOLATION_MODE");
      uint64_t v292 = NSNumber;
      uint64_t v299 = sub_1B6569E84(v21, 6u, v293, v294, v295, v296, v297, v298);
      uint64_t v302 = objc_msgSend_numberWithUnsignedInt_(v292, v300, v299, v301);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v303, v302, @"OSD_TEXCOORD6_INTERPOLATION_MODE");
      uint64_t v304 = NSNumber;
      uint64_t v311 = sub_1B6569E84(v21, 7u, v305, v306, v307, v308, v309, v310);
      uint64_t v314 = objc_msgSend_numberWithUnsignedInt_(v304, v312, v311, v313);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v315, v314, @"OSD_TEXCOORD7_INTERPOLATION_MODE");
      objc_msgSend_setObject_forKeyedSubscript_(v329, v316, (uint64_t)&unk_1F103BCF0, @"CFX_OPTIMIZE_OPENSUBDIV_STORAGE");
      uint64_t v317 = NSString;
      sub_1B65A8294((uint64_t)v337, &v334);
      if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v319 = objc_msgSend_stringWithCString_encoding_(v317, v318, (uint64_t)&v334, 4);
      }
      else {
        uint64_t v319 = objc_msgSend_stringWithCString_encoding_(v317, v318, (uint64_t)v334.__r_.__value_.__l.__data_, 4);
      }
      uint64_t v320 = v319;
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v334.__r_.__value_.__l.__data_);
      }
      v335[0] = *MEMORY[0x1E4FBA408];
      uint64_t v321 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)((char *)v335 + *(void *)(v335[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v336 = v321;
      v337[0] = MEMORY[0x1E4FBA470] + 16;
      if (v338 < 0) {
        operator delete((void *)v337[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1BA9B6D30](&v339);
      return v320;
  }
}

void sub_1B65A2548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
}

uint64_t sub_1B65A2694(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  BOOL v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1B65A2944(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9B6D30](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65A296C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BA9B6D30](a1 + 128);
  return a1;
}

uint64_t sub_1B65A2AA4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(a1, a2, @"USE_OPENSUBDIV", a4);
}

uint64_t sub_1B65A2AB0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8 = (unsigned __int8 *)a1[10].n128_u64[0];
  if (!v8) {
    return 0;
  }
  __n128 v12 = 0uLL;
  uint64_t v13 = 0;
  sub_1B63CF184(a1, a3, a4, a5, a6, a7, a8, &v12);
  if ((v13 & 0x100) != 0)
  {
    unint64_t v10 = a1[8].n128_u64[1];
    if (v10) {
      LODWORD(v10) = a1[9].n128_u64[0] != 0;
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (*((void *)v8 + 3)
    && v8[4] == ((BYTE1(v13) >> 1) & 1)
    && v8[2] == a1[8].n128_u8[1]
    && v10 == v8[3]
    && *v8 == a1[8].n128_u8[0]
    && v8[7] == a1[8].n128_u8[3]
    && v8[8] == a1[8].n128_u8[4]
    && *((void *)v8 + 2) == (a1[9].n128_u64[0] ^ a1[8].n128_u64[1]))
  {
    return 0;
  }
  sub_1B65A2BA0((uint64_t)a1);
  return 1;
}

void sub_1B65A2BA0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 160);
  if (v1)
  {
    uint64_t v3 = (const void *)v1[3];
    if (v3) {
      CFRelease(v3);
    }
    free(v1);
    *(void *)(a1 + 160) = 0;
  }
}

char *sub_1B65A2BE0(uint64_t a1, int a2, uint64_t a3)
{
  sub_1B65691B4();
  uint64_t v13 = *(char **)(a1 + 160);
  if (v13) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = a2 == 0;
  }
  if (v14)
  {
    if (!v13) {
      return v13;
    }
    uint64_t v36 = a3;
    BOOL v15 = *((void *)v13 + 3) == 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 128)) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. GPU support for OpenSubdiv must not be enabled when there is a tessellator but the subdivision level is still 0.", v7, v8, v9, v10, v11, v12, (uint64_t)"geometry->_subdivInfo.subdivisionLevel > 0");
    }
    __n128 v38 = 0uLL;
    uint64_t v39 = 0;
    sub_1B63CF184((__n128 *)a1, v7, v8, v9, v10, v11, v12, &v38);
    BOOL v16 = (v39 & 0x100) != 0 && *(void *)(a1 + 136) && *(void *)(a1 + 144) != 0;
    char v17 = *(unsigned char *)(a1 + 128);
    char v18 = *(unsigned char *)(a1 + 129);
    int v19 = (BYTE1(v39) >> 1) & 1;
    uint64_t v36 = a3;
    BOOL v20 = sub_1B6447A04(a3, 64);
    __int16 v21 = *(_WORD *)(a1 + 131);
    uint64_t v22 = *(void *)(a1 + 144) ^ *(void *)(a1 + 136);
    uint64_t v13 = (char *)malloc_type_malloc(0x20uLL, 0x10200404C916D5DuLL);
    *(void *)(a1 + 160) = v13;
    *uint64_t v13 = v17;
    v13[1] = 0;
    v13[2] = v18;
    v13[3] = v16;
    v13[4] = v19;
    v13[5] = v20;
    v13[6] = 0;
    *(_WORD *)(v13 + 7) = v21;
    *((_DWORD *)v13 + 3) = 0;
    *(_DWORD *)(v13 + 9) = 0;
    BOOL v15 = 1;
    *((void *)v13 + 2) = v22;
    *((void *)v13 + 3) = 0;
  }
  if (v15 && a2 != 0)
  {
    if (!v36) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v7, v8, v9, v10, v11, v12, (uint64_t)"engineContext");
    }
    char v24 = (void *)sub_1B6445900(v36, v6, v7, v8, v9, v10, v11, v12);
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = sub_1B65A2DF0;
    v37[3] = &unk_1E6144C60;
    v37[4] = v24;
    v37[5] = a1;
    v37[6] = v13;
    uint64_t v28 = objc_msgSend_resourceManager(v24, v25, v26, v27);
    uint64_t v32 = objc_msgSend_commandQueue(v24, v29, v30, v31);
    *((void *)v13 + 3) = sub_1B65A2E64(a1, v36, (uint64_t)v13, v28, v32, (uint64_t)v37, v33, v34);
  }
  return v13;
}

void sub_1B65A2DF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = objc_msgSend_commandBufferStatusMonitor(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend_renderContext_commandBufferDidCompleteWithError_(v6, v7, *(void *)(a1 + 32), (uint64_t)a2);
  uint64_t v15 = sub_1B6583470(*(void *)(a1 + 40), v8, v9, v10, v11, v12, v13, v14);
  sub_1B63F2F54(16, @"Error: Invalidating OpenSubdiv runtime data of geometry %@", v16, v17, v18, v19, v20, v21, v15);
  uint64_t v22 = *(const void **)(*(void *)(a1 + 48) + 24);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(*(void *)(a1 + 48) + 24) = 0;
  }
}

uint64_t sub_1B65A2E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v79[5] = *MEMORY[0x1E4F143B8];
  sub_1B6583470(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (!a2
    || (uint64_t v19 = sub_1B6446800(a2, v12, v13, v14, v15, v16, v17, v18), !*(void *)(v19 + 16))
    || (uint64_t v20 = v19,
        uint64_t v21 = sub_1B65A60E8(a1),
        (uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(a2, v21)) == 0)
    || (uint64_t v24 = sub_1B659FA74(v22, v23, a3, a4, a5)) == 0)
  {
    if (!a5) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v13, v14, v15, v16, v17, v18, (uint64_t)"commandQueue");
    }
    os_variant_has_internal_diagnostics();
    uint64_t v28 = objc_msgSend_commandBuffer(a5, v25, v26, v27);
    v79[0] = MEMORY[0x1E4F143A8];
    v79[1] = 3221225472;
    v79[2] = sub_1B65A6338;
    v79[3] = &unk_1E6143A58;
    v79[4] = a6;
    objc_msgSend_addCompletedHandler_(v28, v29, (uint64_t)v79, v30);
    uint64_t v34 = objc_msgSend_computeCommandEncoder(v28, v31, v32, v33);
    uint64_t v75 = objc_msgSend_device(a5, v35, v36, v37);
    uint64_t v76 = a5;
    uint64_t v77 = v28;
    uint64_t v78 = v34;
    sub_1B6569528(a1);
    uint64_t v45 = sub_1B63CCE68(a1, v38, v39, v40, v41, v42, v43, v44);
    sub_1B656A374((void *)(a1 + 128), v45, v46, v47, v48, v49, v50, v51);
    long long v69 = 0u;
    long long v68 = 0u;
    *(_OWORD *)&v67[8] = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    uint64_t v74 = 0;
    sub_1B656B5A8((uint64_t)v67, a1 + 128, v45, v52, v53, v54, v55, v56);
    sub_1B656A8AC(a1 + 128, v57, v58, v59, v60, v61, v62, v63);
  }
  return v24;
}

void sub_1B65A404C(_Unwind_Exception *a1)
{
  sub_1B65A7D5C((void *)(v1 + 304));
  sub_1B65A6B64(v1 + 416);
  _Unwind_Resume(a1);
}

double sub_1B65A4170(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8)
  {
    int v9 = *(_DWORD *)(v8 + 16);
    if (!v9 || v9 != a4)
    {
      *(_DWORD *)(v8 + 16) = a4;
      unsigned int v64 = *(_DWORD *)(v8 + 28);
      uint64_t v14 = *(void *)(v8 + 352);
      if (!v14)
      {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"osdRuntimeData->skinMorphContext.synchronizeCoarsePositionsPipeline");
        uint64_t v14 = *(void *)(v8 + 352);
      }
      uint64_t v15 = (void *)sub_1B653EFB8(v14);
      unint64_t v19 = objc_msgSend_threadExecutionWidth(v15, v16, v17, v18);
      uint64_t v23 = objc_msgSend_commandQueue(a3, v20, v21, v22);
      uint64_t v27 = (void **)objc_msgSend_resourceComputeEncoder(a3, v24, v25, v26);
      EncoderAndResetCache = objc_msgSend_getEncoderAndResetCache(*v27, v28, v29, v30);
      uint64_t v32 = sub_1B653EFB8(*(void *)(v8 + 352));
      objc_msgSend_setComputePipelineState_(EncoderAndResetCache, v33, v32, v34);
      BOOL v35 = sub_1B6569F48(*(_DWORD *)(v8 + 24));
      char v36 = sub_1B6569F58(*(_DWORD *)(v8 + 24));
      if (v35) {
        char v38 = 4;
      }
      else {
        char v38 = 0;
      }
      int v63 = ((v38 + 2 * v36) & 0xFE) + 3;
      objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v37, a2, 0, 0);
      objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v39, *(void *)(v8 + 56), 0, 1);
      objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v40, *(void *)(v8 + 344), 0, 2);
      objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v41, (uint64_t)&v63, 4, 3);
      objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v42, (uint64_t)&v64, 4, 4);
      if (*(unsigned char *)(a1 + 5))
      {
        uint64_t v61 = v64;
        int64x2_t v62 = vdupq_n_s64(1uLL);
        unint64_t v59 = v19;
        int64x2_t v60 = v62;
        objc_msgSend_dispatchThreads_threadsPerThreadgroup_(EncoderAndResetCache, v43, (uint64_t)&v61, (uint64_t)&v59);
      }
      else
      {
        unint64_t v57 = (v19 + v64 - 1) / v19;
        int64x2_t v58 = vdupq_n_s64(1uLL);
        unint64_t v55 = v19;
        int64x2_t v56 = v58;
        objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(EncoderAndResetCache, v43, (uint64_t)&v57, (uint64_t)&v55);
      }
      v54[0] = objc_msgSend_device(v23, v44, v45, v46);
      v54[1] = v23;
      _DWORD v54[2] = 0;
      void v54[3] = EncoderAndResetCache;
      return sub_1B659F800(v8 + 136, (uint64_t)v54, v47, v48, v49, v50, v51, v52);
    }
  }
  return result;
}

BOOL sub_1B65A4360(uint64_t a1)
{
  BOOL result = 0;
  if (*(unsigned char *)(a1 + 2))
  {
    uint64_t v1 = *(void *)(a1 + 24);
    if (v1)
    {
      if (!*(_DWORD *)(v1 + 20)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1B65A4388(uint64_t result, void *a2, uint64_t a3, uint64_t a4, float a5)
{
  if (*(unsigned char *)(result + 2))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 24);
    if (v6)
    {
      int v7 = *(_DWORD *)(v6 + 20);
      if (!v7 || v7 != a4)
      {
        *(_DWORD *)(v6 + 20) = a4;
        uint64_t v10 = *(void **)(v6 + 32);
        LOBYTE(a5) = *(unsigned char *)(result + 1);
        v61[0] = (float)LODWORD(a5);
        uint64_t v11 = (void **)objc_msgSend_resourceComputeEncoder(a2, (const char *)a2, a3, a4);
        EncoderAndResetCache = objc_msgSend_getEncoderAndResetCache(*v11, v12, v13, v14);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v16, *(void *)(v6 + 56), *(void *)(v6 + 64), 5);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v17, *(void *)(v6 + 40), 0, 6);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v18, *(void *)(v6 + 48), 0, 8);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v19, *(void *)(v6 + 256), 0, 11);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v20, *(void *)(v6 + 224), 0, 19);
        objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v21, (uint64_t)v61, 4, 13);
        BOOL result = objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v22, a3, 192, 22);
        if (*(unsigned char *)(v5 + 6) == 2)
        {
          objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v23, *(void *)(v6 + 96), 0, 10);
          BOOL result = objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v24, *(void *)(v6 + 88), 0, 9);
        }
        uint64_t v51 = (int *)v10[1];
        if ((int *)*v10 != v51)
        {
          uint64_t v25 = (int *)(*v10 + 4);
          int64x2_t v50 = vdupq_n_s64(1uLL);
          while (1)
          {
            uint64_t v27 = v25 - 1;
            uint64_t v26 = *(v25 - 1);
            if ((v26 - 7) < 2) {
              break;
            }
            if (v26 != 6) {
              goto LABEL_15;
            }
            objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v23, *(void *)(v6 + 240), 0, 7);
            int v28 = *v25;
            int v29 = 16;
LABEL_21:
            if (v26 == 9) {
              unsigned int v30 = 4;
            }
            else {
              unsigned int v30 = v29;
            }
            if (v30 >> 5 <= 1) {
              unsigned int v31 = 1;
            }
            else {
              unsigned int v31 = v30 >> 5;
            }
            objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v23, 12 * v25[2], 8, v50.i64[0]);
            objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v32, 4 * v25[1], 6);
            uint64_t v33 = sub_1B653EFB8(*(void *)(v6 + 8 * v26 + 264));
            objc_msgSend_setComputePipelineState_(EncoderAndResetCache, v34, v33, v35);
            switch((int)v26)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
                sub_1B63F2F54(16, @"Unreachable code: Unsupported patch type", v37, v38, v39, v40, v41, v42, v50.i64[0]);
                goto LABEL_29;
              case 6:
                int v43 = v28 * v29;
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v36, *(unsigned __int16 *)(v6 + 232), 19);
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v44, *(unsigned __int16 *)(v6 + 248), 7);
                break;
              case 7:
                int v43 = 4 * v28;
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v36, *(unsigned __int16 *)(v6 + 234), 19);
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v45, *(unsigned __int16 *)(v6 + 250), 7);
                uint64_t v47 = *(int *)(v6 + 104);
                goto LABEL_33;
              case 8:
                int v43 = 4 * v28;
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v36, *(unsigned __int16 *)(v6 + 236), 19);
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v48, *(unsigned __int16 *)(v6 + 252), 7);
                uint64_t v47 = *(int *)(v6 + 108);
LABEL_33:
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v46, 4 * v47, 10);
                break;
              case 9:
                int v43 = 4 * v28;
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v36, *(unsigned __int16 *)(v6 + 238), 19);
                break;
              default:
LABEL_29:
                int v43 = 0;
                break;
            }
            int v60 = v43;
            objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v36, (uint64_t)&v60, 4, 12);
            if (*(unsigned char *)(v5 + 5))
            {
              uint64_t v58 = v28 * v30;
              int64x2_t v59 = vdupq_n_s64(1uLL);
              long long v56 = xmmword_1B6E72460;
              uint64_t v57 = 1;
              BOOL result = objc_msgSend_dispatchThreads_threadsPerThreadgroup_(EncoderAndResetCache, v49, (uint64_t)&v58, (uint64_t)&v56);
            }
            else
            {
              int64x2_t v55 = v50;
              long long v52 = xmmword_1B6E72460;
              uint64_t v53 = 1;
              unint64_t v54 = ((unint64_t)(v28 * v30 / v31) + 31) >> 5;
              BOOL result = objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(EncoderAndResetCache, v49, (uint64_t)&v54, (uint64_t)&v52);
            }
            v25 += 4;
            if (v27 + 4 == v51) {
              return result;
            }
          }
          objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v23, *(void *)(v6 + 240), 0, 7);
LABEL_15:
          int v28 = *v25;
          int v29 = 4;
          switch((int)v26)
          {
            case 1:
              int v29 = 1;
              break;
            case 2:
              int v29 = 2;
              break;
            case 3:
            case 7:
            case 8:
              goto LABEL_21;
            case 4:
              int v29 = 3;
              break;
            case 9:
              int v29 = 20;
              break;
            default:
              int v29 = 0xFFFF;
              break;
          }
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_1B65A47D0(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = *(void **)(a1 + 24);
  if (!v5) {
    return;
  }
  if (!sub_1B659F774(*(void *)(a1 + 24), a3))
  {
    uint64_t v96 = "CFXSubdivisionOsdGPUDraw";
    sub_1B63F2F54(17, @"Assertion '%s' failed. %s called but there's no patch to draw.", v12, v13, v14, v15, v16, v17, (uint64_t)"__CFXSubdivisionOsdGPUHasPatchOfType(osdRuntimeData, cfxPatchType)");
  }
  if ((a3 - 2) > 4) {
    unsigned int v18 = 3;
  }
  else {
    unsigned int v18 = dword_1B6E72470[(char)(a3 - 2)];
  }
  unint64_t v19 = (void *)v5[10];
  unsigned int v101 = a5;
  if (v19) {
    unsigned int v20 = -1431655765 * ((v19[1] - *v19) >> 4);
  }
  else {
    unsigned int v20 = 0;
  }
  uint64_t v21 = (uint64_t *)v5[4];
  unsigned int v106 = v20;
  uint64_t v22 = (unsigned int *)objc_msgSend_renderEncoder(a2, v11, v12, v13);
  LODWORD(v23) = 1.0;
  objc_msgSend_setTessellationFactorScale_(*((void **)v22 + 2), v24, v25, v26, v23);
  uint64_t v35 = v5[7];
  uint64_t v36 = v5[5];
  if (!v35) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v28, v29, v30, v31, v32, v33, (uint64_t)"vertexDataBuffer");
  }
  unsigned int v98 = v18 - 5;
  LOBYTE(v34) = *(unsigned char *)(a1 + 1);
  float v105 = (float)v34;
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v27, v35, 0, 5);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v37, v36, 0, 6);
  uint64_t v107 = 0;
  std::string::size_type v108 = 0;
  uint64_t v109 = 0;
  sub_1B649F334(*((void *)v22 + 3), &v105, 4uLL, (void **)&v107);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v38, (uint64_t)v108, (uint64_t)v109, 13);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v39, v5[32], 0, 11);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v40, v5[6], 0, 8);
  if (v19)
  {
    if (v20 >= 2)
    {
      uint64_t v107 = 0;
      std::string::size_type v108 = 0;
      uint64_t v109 = 0;
      sub_1B649F334(*((void *)v22 + 3), &v106, 4uLL, (void **)&v107);
      objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v42, (uint64_t)v108, (uint64_t)v109, 14);
      objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v43, v5[15], 0, 15);
      uint64_t v44 = v5 + 16;
LABEL_18:
      objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v41, *v44, 0, 16);
      goto LABEL_19;
    }
    uint64_t v45 = (uint64_t **)v5[10];
    uint64_t v46 = *v45;
    if (v45[1] == *v45) {
LABEL_73:
    }
      abort();
    objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v41, v46[3], v46[4], 14);
    objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v47, v46[1], 0, 15);
    if (v98 <= 4)
    {
      uint64_t v44 = v46 + 2;
      goto LABEL_18;
    }
  }
LABEL_19:
  unsigned int v100 = v20;
  uint64_t v103 = v19;
  if (*(unsigned char *)(a1 + 6) == 2)
  {
    objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v41, v5[12], 0, 10);
    objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v48, v5[11], 0, 9);
  }
  unsigned int v104 = 0;
  uint64_t v50 = *v21;
  uint64_t v49 = v21[1];
  if (v49 != *v21)
  {
    LODWORD(v51) = 0;
    unint64_t v52 = 0;
    unsigned int v53 = v101;
    uint64_t v102 = (int)v18 - 6;
    unint64_t v54 = (char *)v5 + 2 * v102;
    uint64_t v97 = (unsigned __int16 *)(v54 + 248);
    uint64_t v99 = (unsigned __int16 *)(v54 + 232);
    do
    {
      if (*(_DWORD *)(v50 + 16 * v52) != v18) {
        goto LABEL_71;
      }
      if (v102 <= 2) {
        objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v41, v5[30], 0, 7);
      }
      uint64_t v55 = v50 + 16 * v52;
      objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v41, 12 * *(int *)(v55 + 12), 8);
      objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v56, 4 * *(int *)(v55 + 8), 6);
      if (v103)
      {
        if (v100 >= 2)
        {
          uint64_t v107 = 0;
          std::string::size_type v108 = 0;
          uint64_t v109 = 0;
          uint64_t v64 = *((void *)v22 + 3);
          uint64_t v65 = &v104;
          size_t v66 = 4;
LABEL_33:
          sub_1B649F334(v64, v65, v66, (void **)&v107);
          objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v70, (uint64_t)v108, (uint64_t)v109, 17);
          goto LABEL_34;
        }
        uint64_t v67 = *(uint64_t ***)v5[10];
        if (*(uint64_t ***)(v5[10] + 8) == v67) {
          goto LABEL_73;
        }
        uint64_t v68 = **v67;
        if (v104 >= (unint64_t)(((*v67)[1] - v68) >> 4)) {
          goto LABEL_73;
        }
        long long v69 = (unsigned int *)(v68 + 16 * v104);
        objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v57, 4 * (int)v69[2], 15);
        if (v98 <= 4)
        {
          objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v57, 12 * (int)v69[3], 16);
          uint64_t v107 = 0;
          std::string::size_type v108 = 0;
          uint64_t v109 = 0;
          uint64_t v64 = *((void *)v22 + 3);
          uint64_t v65 = v69;
          size_t v66 = 16;
          goto LABEL_33;
        }
      }
LABEL_34:
      if (v18 > 9) {
        goto LABEL_39;
      }
      if (((1 << v18) & 0x27) != 0)
      {
        sub_1B63F2F54(16, @"Unreachable code: Unsupported patch type", v58, v59, v60, v61, v62, v63, v95);
LABEL_39:
        int v72 = *(_DWORD *)(v50 + 16 * v52 + 4);
        uint64_t v73 = 4;
        switch(v18)
        {
          case 3u:
          case 7u:
          case 8u:
            goto LABEL_46;
          case 4u:
            uint64_t v73 = 3;
            break;
          case 6u:
            uint64_t v73 = 16;
            break;
          case 9u:
            goto LABEL_43;
          default:
            uint64_t v73 = -1;
            break;
        }
        goto LABEL_46;
      }
      if (((1 << v18) & 0x1C0) != 0)
      {
        objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v57, *v97, 7);
        objc_msgSend_setTessellationFactorBuffer_offset_instanceStride_(*((void **)v22 + 2), v71, v5[28], *v99, 0);
        goto LABEL_39;
      }
      if (v18 != 9) {
        goto LABEL_39;
      }
      objc_msgSend_setTessellationFactorBuffer_offset_instanceStride_(*((void **)v22 + 2), v57, v5[28], *v99, 0);
      int v72 = *(_DWORD *)(v50 + 16 * v52 + 4);
LABEL_43:
      uint64_t v73 = 20;
LABEL_46:
      uint64_t v74 = (uint64_t *)v5[14];
      if (v74)
      {
        uint64_t v75 = *v74;
        if (0xAAAAAAAAAAAAAAABLL * ((v74[1] - *v74) >> 3) <= a4) {
          goto LABEL_73;
        }
        uint64_t v76 = *(void *)(v75 + 24 * a4);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v75 + 24 * a4 + 8) - v76) >> 3) <= v104) {
          goto LABEL_73;
        }
        sub_1B6581104(&v107, v76 + 24 * v104);
      }
      else
      {
        uint64_t v83 = v72;
        uint64_t v84 = (uint64_t *)operator new(0x10uLL);
        std::string::size_type v108 = v84 + 2;
        uint64_t v109 = v84 + 2;
        *uint64_t v84 = 0;
        v84[1] = v83;
        uint64_t v107 = v84;
      }
      switch(v18)
      {
        case 0u:
        case 1u:
        case 2u:
        case 5u:
          sub_1B63F2F54(16, @"Unreachable code: Unsupported patch type", v77, v78, v79, v80, v81, v82, v95);
          break;
        case 3u:
          std::string::size_type v85 = v107;
          int v87 = v108;
          if (v107 == v108) {
            goto LABEL_68;
          }
          do
          {
            uint64_t v88 = 6 * *v85;
            uint64_t v89 = 6 * v85[1];
            BOOL v90 = (void *)*((void *)v22 + 2);
            if (*v22 * (unint64_t)v53 < 2) {
              objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v90, v41, 3, v88, v89);
            }
            else {
              objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_(v90, v41, 3, v88, v89);
            }
            v85 += 2;
          }
          while (v85 != v87);
          break;
        case 4u:
          std::string::size_type v85 = v107;
          uint64_t v91 = v108;
          if (v107 == v108) {
            goto LABEL_68;
          }
          do
          {
            uint64_t v92 = 3 * *v85;
            uint64_t v93 = 3 * v85[1];
            uint64_t v94 = (void *)*((void *)v22 + 2);
            if (*v22 * (unint64_t)v53 < 2) {
              objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v94, v41, 3, v92, v93);
            }
            else {
              objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_(v94, v41, 3, v92, v93);
            }
            v85 += 2;
          }
          while (v85 != v91);
          break;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
          std::string::size_type v85 = v107;
          uint64_t v86 = v108;
          if (v107 == v108) {
            goto LABEL_68;
          }
          do
          {
            objc_msgSend_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_(*((void **)v22 + 2), v41, v73, *v85, v85[1], 0, 0, *v22 * (unint64_t)v53, 0, v96);
            v85 += 2;
          }
          while (v85 != v86);
          break;
        default:
          break;
      }
      std::string::size_type v85 = v107;
LABEL_68:
      if (v85)
      {
        std::string::size_type v108 = v85;
        operator delete(v85);
      }
      LODWORD(v51) = v104;
      uint64_t v50 = *v21;
      uint64_t v49 = v21[1];
LABEL_71:
      unint64_t v51 = (v51 + 1);
      unsigned int v104 = v51;
      unint64_t v52 = v51;
    }
    while (v51 < (v49 - v50) >> 4);
  }
}

void sub_1B65A4E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B65A4EFC()
{
  return 65537;
}

void *sub_1B65A4F04(void *result)
{
  result[10] = 0;
  result[11] = 0;
  result[12] = 0;
  return result;
}

void sub_1B65A4F10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    int v7 = *(void ***)(a1 + 112);
    sub_1B65A56C0(&v7);
    MEMORY[0x1BA9B6D80](v2, 0x20C40960023A9);
  }
  sub_1B65A55DC((uint64_t *)(a1 + 32));
  uint64_t v3 = *(uint64_t ***)(a1 + 80);
  if (v3)
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        sub_1B65A55DC(v4);
        v4 += 6;
      }
      while (v4 != v5);
      uint64_t v3 = *(uint64_t ***)(a1 + 80);
      if (!v3) {
        goto LABEL_11;
      }
      uint64_t v4 = *v3;
    }
    if (v4)
    {
      v3[1] = v4;
      operator delete(v4);
    }
    MEMORY[0x1BA9B6D80](v3, 0x20C40960023A9);
  }
LABEL_11:

  sub_1B65A565C(a1 + 136);
  for (uint64_t i = 0; i != 80; i += 8)
}

__CFString *sub_1B65A5040(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<CFXSubdivisionOsdGPURuntimeDataRef %p>", a1);
  uint64_t v90 = 0;
  uint64_t v91 = &v90;
  uint64_t v92 = 0x2020000000;
  uint64_t v93 = 0;
  uint64_t v6 = objc_msgSend_length(*(void **)(a1 + 56), v3, v4, v5);
  int v7 = *(uint64_t **)(a1 + 32);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t v13 = objc_msgSend_length(*(void **)(a1 + 40), v10, v11, v12);
  uint64_t v17 = objc_msgSend_length(*(void **)(a1 + 48), v14, v15, v16);
  uint64_t v18 = 8 * (((v8 - v9) >> 3) + ((v8 - v9) >> 4));
  v91[3] += v13 + v6 + v17 + v18;
  CFStringAppend(Mutable, @"\nVertex patch table:");
  uint64_t v19 = sub_1B63CB548(v18);
  CFStringAppendFormat(Mutable, 0, @"\n  - Patch arrays (%@):", v19);
  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v21 = *(_DWORD **)v20;
  uint64_t v22 = *(_DWORD **)(v20 + 8);
  if (*(_DWORD **)v20 != v22)
  {
    do
    {
      unsigned int v23 = *v21 - 4;
      uint64_t v24 = @"QUADS";
      if (v23 <= 5) {
        uint64_t v24 = off_1E6144D40[v23];
      }
      CFStringAppendFormat(Mutable, 0, @"\n    - %d x %@", v21[1], v24);
      v21 += 4;
    }
    while (v21 != v22);
  }
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = sub_1B63CB548(v6);
  CFStringAppendFormat(Mutable, 0, @"\n  - Data buffer: %p (%@)", v25, v26);
  uint64_t v27 = *(void *)(a1 + 40);
  uint64_t v28 = sub_1B63CB548(v13);
  CFStringAppendFormat(Mutable, 0, @"\n  - Patch index buffer: %p (%@)", v27, v28);
  uint64_t v29 = *(void *)(a1 + 48);
  uint64_t v30 = sub_1B63CB548(v17);
  CFStringAppendFormat(Mutable, 0, @"\n  - Patch param buffer: %p (%@)", v29, v30);
  uint64_t v31 = *(void **)(a1 + 80);
  if (v31)
  {
    uint64_t v32 = *(void *)(*(void *)(a1 + 80) + 8) - *v31;
    if (v32)
    {
      unint64_t v33 = 0;
      unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 4);
      uint64_t v84 = a1;
      do
      {
        CFStringAppendFormat(Mutable, 0, @"\nFVar patch table (channel %zu):", v33);
        uint64_t v37 = *(void **)(a1 + 80);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37[1] - *v37) >> 4) <= v33) {
          abort();
        }
        uint64_t v38 = (uint64_t **)(*v37 + 48 * v33);
        uint64_t v39 = (uint64_t *)(v38 + 3);
        uint64_t v88 = objc_msgSend_length(v38[3], v34, v35, v36);
        uint64_t v40 = **v38;
        uint64_t v41 = (*v38)[1];
        uint64_t v42 = (uint64_t *)(v38 + 1);
        uint64_t v87 = objc_msgSend_length(v38[1], v43, v44, v45);
        unint64_t v85 = v33;
        uint64_t v46 = (uint64_t *)(v38 + 2);
        uint64_t v86 = objc_msgSend_length(v38[2], v47, v48, v49);
        uint64_t v50 = 8 * (((v41 - v40) >> 3) + ((v41 - v40) >> 4));
        v91[3] += v87 + v88 + v86 + v50;
        uint64_t v51 = sub_1B63CB548(v50);
        CFStringAppendFormat(Mutable, 0, @"\n  - Patch arrays (%@):", v51);
        unint64_t v52 = *v38;
        unsigned int v53 = (_DWORD *)**v38;
        unint64_t v54 = (_DWORD *)v52[1];
        while (v53 != v54)
        {
          unsigned int v55 = *v53 - 4;
          long long v56 = @"QUADS";
          if (v55 <= 5) {
            long long v56 = off_1E6144D40[v55];
          }
          CFStringAppendFormat(Mutable, 0, @"\n    - %d x %@", v53[1], v56);
          v53 += 4;
        }
        uint64_t v57 = *v39;
        uint64_t v58 = sub_1B63CB548(v88);
        CFStringAppendFormat(Mutable, 0, @"\n  - Data buffer: %p (%@)", v57, v58);
        uint64_t v59 = *v42;
        uint64_t v60 = sub_1B63CB548(v87);
        CFStringAppendFormat(Mutable, 0, @"\n  - Patch index buffer: %p (%@)", v59, v60);
        uint64_t v61 = *v46;
        uint64_t v62 = sub_1B63CB548(v86);
        CFStringAppendFormat(Mutable, 0, @"\n  - Patch param buffer: %p (%@)", v61, v62);
        a1 = v84;
        ++v33;
      }
      while (v85 + 1 != v83);
    }
  }
  if (*(void *)(a1 + 88) && *(void *)(a1 + 96))
  {
    CFStringAppend(Mutable, @"\nLegacy Gregory patch table:");
    uint64_t v66 = objc_msgSend_length(*(void **)(a1 + 88), v63, v64, v65);
    uint64_t v70 = objc_msgSend_length(*(void **)(a1 + 96), v67, v68, v69);
    v91[3] += v70 + v66;
    uint64_t v71 = *(void *)(a1 + 88);
    uint64_t v72 = sub_1B63CB548(v66);
    CFStringAppendFormat(Mutable, 0, @"\n  - Vertex valence buffer: %p (%@)", v71, v72);
    uint64_t v73 = *(void *)(a1 + 96);
    uint64_t v74 = sub_1B63CB548(v70);
    CFStringAppendFormat(Mutable, 0, @"\n  - Quad offsets buffer: %p (%@)", v73, v74);
  }
  v89[0] = MEMORY[0x1E4F143A8];
  v89[1] = 3221225472;
  v89[2] = sub_1B65A5734;
  v89[3] = &unk_1E6144C88;
  v89[4] = &v90;
  v89[5] = Mutable;
  CFStringAppend(Mutable, @"\nVertex Refiner:");
  ((void (*)(void *, uint64_t))sub_1B65A5734)(v89, a1 + 136);
  uint64_t v78 = objc_msgSend_length(*(void **)(a1 + 344), v75, v76, v77);
  v91[3] += v78;
  uint64_t v79 = *(void *)(a1 + 344);
  uint64_t v80 = sub_1B63CB548(v78);
  CFStringAppendFormat(Mutable, 0, @"\n  - Skin/morph indexing table: %p (%@)", v79, v80);
  uint64_t v81 = sub_1B63CB548(v91[3]);
  CFStringAppendFormat(Mutable, 0, @"\nTotal memory usage: %@", v81);
  _Block_object_dispose(&v90, 8);
  return Mutable;
}

void sub_1B65A5588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B65A55DC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1BA9B6D80);
  }
}

void sub_1B65A565C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
}

void sub_1B65A56C0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_1B639030C(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B65A5734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = objc_msgSend_length(*(void **)a2, (const char *)a2, a3, a4);
  uint64_t v10 = objc_msgSend_length(*(void **)(a2 + 8), v7, v8, v9);
  uint64_t v14 = objc_msgSend_length(*(void **)(a2 + 16), v11, v12, v13);
  uint64_t v18 = objc_msgSend_length(*(void **)(a2 + 24), v15, v16, v17);
  uint64_t v19 = *(__CFString **)(a1 + 40);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v10 + v6 + v14 + v18;
  CFStringAppendFormat(v19, 0, @"\n  - Vertex stencil table (%d stencils)", *(unsigned int *)(a2 + 32));
  uint64_t v20 = *(__CFString **)(a1 + 40);
  uint64_t v21 = *(void **)a2;
  uint64_t v22 = sub_1B63CB548(v6);
  CFStringAppendFormat(v20, 0, @"\n    - Sizes buffer: %p (%@)", v21, v22);
  unsigned int v23 = *(__CFString **)(a1 + 40);
  uint64_t v24 = *(void *)(a2 + 8);
  uint64_t v25 = sub_1B63CB548(v10);
  CFStringAppendFormat(v23, 0, @"\n    - Offsets buffer: %p (%@)", v24, v25);
  uint64_t v26 = *(__CFString **)(a1 + 40);
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v28 = sub_1B63CB548(v14);
  CFStringAppendFormat(v26, 0, @"\n    - Indices buffer: %p (%@)", v27, v28);
  uint64_t v29 = *(__CFString **)(a1 + 40);
  uint64_t v30 = *(void *)(a2 + 24);
  uint64_t v31 = sub_1B63CB548(v18);
  CFStringAppendFormat(v29, 0, @"\n    - Weights buffer: %p (%@)", v30, v31);
  uint64_t v35 = objc_msgSend_length(*(void **)(a2 + 40), v32, v33, v34);
  uint64_t v39 = objc_msgSend_length(*(void **)(a2 + 40), v36, v37, v38);
  uint64_t v40 = *(__CFString **)(a1 + 40);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v39 + v35;
  CFStringAppend(v40, @"\n  - Vertex evalutor input");
  uint64_t v41 = *(__CFString **)(a1 + 40);
  uint64_t v42 = *(void *)(a2 + 40);
  uint64_t v43 = *(unsigned int *)(a2 + 56);
  uint64_t v44 = *(unsigned int *)(a2 + 60);
  uint64_t v45 = *(unsigned int *)(a2 + 64);
  uint64_t v46 = sub_1B63CB548(v35);
  CFStringAppendFormat(v41, 0, @"\n    - Src buffer: [offset:%d length:%d stride:%d] %p (%@)", v43, v44, v45, v42, v46);
  uint64_t v47 = *(__CFString **)(a1 + 40);
  uint64_t v48 = *(void *)(a2 + 48);
  uint64_t v49 = *(unsigned int *)(a2 + 68);
  uint64_t v50 = *(unsigned int *)(a2 + 72);
  uint64_t v51 = *(unsigned int *)(a2 + 76);
  uint64_t v52 = sub_1B63CB548(v39);
  CFStringAppendFormat(v47, 0, @"\n    - Dst buffer: [offset:%d length:%d stride:%d] %p (%@)", v49, v50, v51, v48, v52);
}

char *sub_1B65A5934(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = sub_1B657F2A0(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      uint64_t v8 = *(void *)(a2 + 4);
      *(_DWORD *)(v7 + 12) = *(_DWORD *)(a2 + 12);
      *(void *)(v7 + 4) = v8;
      v7 += 16;
      a2 += 16;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void *sub_1B65A59A8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B65A5A28(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

char *sub_1B65A5A28(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    abort();
  }
  BOOL result = (char *)sub_1B6463DE8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void sub_1B65A5A78(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v6 = (char *)sub_1B6427C8C(v3, a2);
    uint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        int v13 = *((_DWORD *)v10 - 4);
        v10 -= 16;
        *((_DWORD *)v12 - 4) = v13;
        v12 -= 16;
        uint64_t v14 = *(void *)(v10 + 4);
        *((_DWORD *)v12 + 3) = *((_DWORD *)v10 + 3);
        *(void *)(v12 + 4) = v14;
      }
      while (v10 != v11);
      uint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1B65A5B28(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1B6427C8C(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_1B65A5BD8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B65A5C60(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

char *sub_1B65A5C60(void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    abort();
  }
  BOOL result = (char *)sub_1B65A5CB4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

void *sub_1B65A5CB4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_1B63C8620();
  }
  return operator new(88 * a2);
}

id sub_1B65A5D00()
{
  id v0 = (void *)sub_1B6602C1C(@"CFX-OpenSubdiv_compute.metal");
  qword_1E9DDBA78 = (uint64_t)v0;
  uint64_t v1 = sub_1B6602C1C(@"vfx_metal");
  uint64_t v3 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v0, v2, @"#import \"vfx_metal\"", (uint64_t)v1);
  qword_1E9DDBA78 = (uint64_t)v3;

  return v3;
}

void sub_1B65A5D70()
{
  id v0 = [NSString alloc];
  sub_1B6E26A08(3);
  if (v4 >= 0) {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  }
  else {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  }
  qword_1E9DDBA88 = v2;
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1B65A5DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B65A5E04()
{
  id v0 = [NSString alloc];
  sub_1B6E26A08(4);
  if (v4 >= 0) {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  }
  else {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  }
  qword_1E9DDBA98 = v2;
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1B65A5E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B65A5E98()
{
  id v0 = [NSString alloc];
  sub_1B6E26A08(6);
  if (v4 >= 0) {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  }
  else {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  }
  qword_1E9DDBAA8 = v2;
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1B65A5F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B65A5F2C()
{
  id v0 = [NSString alloc];
  sub_1B6E26A08(7);
  if (v4 >= 0) {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  }
  else {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  }
  qword_1E9DDBAB8 = v2;
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1B65A5FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B65A5FC0()
{
  id v0 = [NSString alloc];
  sub_1B6E26A08(8);
  if (v4 >= 0) {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  }
  else {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  }
  qword_1E9DDBAC8 = v2;
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1B65A6038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B65A6054()
{
  id v0 = [NSString alloc];
  sub_1B6E26A08(9);
  if (v4 >= 0) {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  }
  else {
    uint64_t v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  }
  qword_1E9DDBAD8 = v2;
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_1B65A60CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B65A60E8(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  CC_SHA256_Init(&c);
  uint64_t v9 = sub_1B63CCE68(a1, v2, v3, v4, v5, v6, v7, v8);
  uint64_t v17 = v9;
  if (v9)
  {
    CFArrayRef v18 = sub_1B64ABD08(v9, v10, v11, v12, v13, v14, v15, v16);
    if ((uint64_t)v18 >= 1)
    {
      CFArrayRef v19 = v18;
      for (CFIndex i = 0; (const __CFArray *)i != v19; ++i)
      {
        uint64_t v21 = sub_1B64ABD78(v17, i, 0, v12, v13, v14, v15, v16);
        char v29 = sub_1B63D0C08((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28);
        if (sub_1B63D0E64(v29))
        {
          v58[0] = 0;
          CFDataRef v30 = (const __CFData *)sub_1B63D0F38((uint64_t)v21, v58);
          if (v30)
          {
            CFDataRef v31 = v30;
            BytePtr = CFDataGetBytePtr(v30);
            CC_LONG Length = CFDataGetLength(v31);
            CC_SHA256_Update(&c, BytePtr, Length);
          }
          v56[0] = MEMORY[0x1E4F143A8];
          v56[1] = 3221225472;
          v56[2] = sub_1B65A6BE0;
          v56[3] = &unk_1E6144CD0;
          v56[4] = &c;
          sub_1B63D1028((uint64_t)v21, (uint64_t)v56);
        }
      }
    }
  }
  v55[0] = MEMORY[0x1E4F143A8];
  v55[1] = 3221225472;
  v55[2] = sub_1B65A6C10;
  uint64_t v55[3] = &unk_1E6141128;
  v55[4] = &c;
  sub_1B64AAFB4(v17, 0, (uint64_t)v55, v12, v13, v14, v15, v16);
  CC_SHA256_Final(md, &c);
  uint64_t v41 = 0;
  uint64_t v42 = (char *)v58;
  v43.i64[0] = 0xA0A0A0A0A0A0A0A0;
  v43.i64[1] = 0xA0A0A0A0A0A0A0A0;
  v44.i64[0] = 0x3737373737373737;
  v44.i64[1] = 0x3737373737373737;
  v45.i64[0] = 0x3030303030303030;
  v45.i64[1] = 0x3030303030303030;
  v46.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v46.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v47.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v47.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  do
  {
    int8x16_t v48 = *(int8x16_t *)&md[v41];
    v62.val[0] = (int8x16_t)vsraq_n_u8((uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(v43, (uint8x16_t)v48), v45, v44), (uint8x16_t)v48, 4uLL);
    int8x16_t v49 = vandq_s8(v48, v46);
    v62.val[1] = vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v47, (uint8x16_t)v49), v45, v44), v49);
    vst2q_s8(v42, v62);
    v42 += 32;
    v41 += 16;
  }
  while (v41 != 32);
  char v59 = 0;
  uint64_t v50 = NSString;
  uint64_t v51 = sub_1B63CCE0C(a1, v34, v35, v36, v37, v38, v39, v40);
  return objc_msgSend_stringWithFormat_(v50, v52, @"%@-%s", v53, v51, v58);
}

uint64_t sub_1B65A6338(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend_status(a2, (const char *)a2, a3, a4);
  if (result != 4)
  {
    uint64_t v10 = objc_msgSend_status(a2, v7, v8, v9);
    objc_msgSend_error(a2, v11, v12, v13);
    objc_msgSend_logs(a2, v14, v15, v16);
    sub_1B63F2F54(16, @"Error: OpenSubdiv command buffer execution failed with status %d, error: %@\n%@", v17, v18, v19, v20, v21, v22, v10);
    uint64_t result = *(void *)(a1 + 32);
    if (result)
    {
      uint64_t v23 = *(uint64_t (**)(void))(result + 16);
      return v23();
    }
  }
  return result;
}

uint64_t sub_1B65A63F0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_1B65A63F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6E2D1A4(*(void *)(a1 + 32), a2, a3, a4);
}

uint64_t sub_1B65A6408(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

id sub_1B65A6410(uint64_t a1)
{
  return sub_1B6E2D210(*(void *)(a1 + 32));
}

uint64_t sub_1B65A6420(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1B65A6428(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t sub_1B65A6430(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

CFTypeRef sub_1B65A6438(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  BOOL v126 = (void *)a1[9];
  id v3 = objc_alloc(MEMORY[0x1E4F28DB0]);
  inited = objc_msgSend_initRequiringSecureCoding_(v3, v4, 0, v5);
  if (!v1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v7, v8, v9, v10, v11, v12, (uint64_t)"commandQueue");
  }
  uint64_t v134 = 0;
  uint64_t v135 = &v134;
  uint64_t v136 = 0x5012000000;
  uint64_t v137 = sub_1B65A782C;
  uint64_t v138 = nullsub_146;
  uint64_t v139 = "c";
  long long v140 = 0u;
  long long v141 = 0u;
  v133[0] = MEMORY[0x1E4F143A8];
  v133[1] = 3221225472;
  v133[2] = sub_1B65A783C;
  v133[3] = &unk_1E6144CF8;
  v133[4] = v1;
  v133[5] = &v134;
  objc_msgSend_encodeInt32_forKey_(inited, v6, 2, @"version");
  objc_msgSend_encodeInt32_forKey_(inited, v14, *(unsigned int *)(v2 + 28), @"coarseVertexCount");
  sub_1B65A78D8((uint64_t)inited, @"vertexPatchTable", v2 + 32, (uint64_t)v133);
  uint64_t v128 = v2;
  uint64_t v17 = *(uint64_t **)(v2 + 80);
  std::string::size_type v132 = inited;
  if (v17)
  {
    uint64_t v18 = (v17[1] - *v17) >> 4;
    uint64_t v19 = 0xAAAAAAAAAAAAAAABLL * v18;
    if (-1431655765 * v18)
    {
      uint64_t v20 = objc_msgSend_stringByAppendingString_(@"fvarPatchTables", v15, @".count", v16);
      objc_msgSend_encodeInt32_forKey_(inited, v21, v19, v20);
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      while (1)
      {
        uint64_t v24 = *v17;
        if (0xAAAAAAAAAAAAAAABLL * ((v17[1] - *v17) >> 4) <= v23) {
          break;
        }
        uint64_t v25 = objc_msgSend_stringByAppendingFormat_(@"fvarPatchTables", v15, @".[%d]", v16, v23);
        sub_1B65A78D8((uint64_t)inited, v25, v24 + v22, (uint64_t)v133);
        ++v23;
        v22 += 48;
        if (v19 == v23) {
          goto LABEL_8;
        }
      }
LABEL_41:
      abort();
    }
  }
LABEL_8:
  if (*(void *)(v128 + 88) && *(void *)(v128 + 96))
  {
    uint64_t v26 = (const char *)objc_msgSend_stringByAppendingString_(@"legacyGregoryPatchTable", v15, @".vertexValenceBuffer", v16);
    sub_1B65A7BC8(inited, v26, *(void **)(v128 + 88), (uint64_t)v133, 0);
    char v29 = (const char *)objc_msgSend_stringByAppendingString_(@"legacyGregoryPatchTable", v27, @".quadOffsetsBuffer", v28);
    sub_1B65A7BC8(inited, v29, *(void **)(v128 + 96), (uint64_t)v133, 0);
    uint64_t v30 = *(unsigned int *)(v128 + 104);
    uint64_t v33 = objc_msgSend_stringByAppendingString_(@"legacyGregoryPatchTable", v31, @".quadOffsetsBaseGregory", v32);
    objc_msgSend_encodeInt32_forKey_(inited, v34, v30, v33);
    uint64_t v35 = *(unsigned int *)(v128 + 108);
    uint64_t v38 = objc_msgSend_stringByAppendingString_(@"legacyGregoryPatchTable", v36, @".quadOffsetsBaseGregoryBoundary", v37);
    objc_msgSend_encodeInt32_forKey_(inited, v39, v35, v38);
  }
  uint64_t v40 = *(uint64_t ***)(v128 + 112);
  if (v40)
  {
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    uint64_t v44 = **v40;
    uint64_t v43 = (*v40)[1];
    uint64_t v45 = objc_msgSend_stringByAppendingString_(@"patchRangesTable", v15, @".elementCount", v16);
    unsigned int v130 = -1431655765 * ((unint64_t)((char *)v41 - (char *)v42) >> 3);
    objc_msgSend_encodeInt32_forKey_(inited, v46, v130, v45);
    uint64_t v49 = objc_msgSend_stringByAppendingString_(@"patchRangesTable", v47, @".patchArrayCount", v48);
    uint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v44) >> 3);
    objc_msgSend_encodeInt32_forKey_(inited, v50, v129, v49);
    if (v130)
    {
      uint64_t v53 = 0;
      unsigned __int8 v131 = 0;
      while (!v129)
      {
LABEL_19:
        uint64_t v53 = ++v131;
        if (v131 >= v130) {
          goto LABEL_20;
        }
      }
      uint64_t v54 = 0;
      unint64_t v55 = 0;
      while (0xAAAAAAAAAAAAAAABLL * (v40[1] - *v40) > v131)
      {
        uint64_t v57 = &(*v40)[3 * v131];
        uint64_t v56 = *v57;
        if (0xAAAAAAAAAAAAAAABLL * ((v57[1] - *v57) >> 3) <= v55) {
          break;
        }
        uint64_t v58 = (uint64_t *)(v56 + v54);
        uint64_t v60 = *v58;
        uint64_t v59 = v58[1];
        uint64_t v61 = objc_msgSend_stringByAppendingFormat_(@"patchRangesTable", v51, @".[%d][%d]", v52, v53, v55);
        objc_msgSend_encodeBytes_length_forKey_(v132, v62, v60, v59 - v60, v61);
        ++v55;
        v54 += 24;
        if (v129 == v55) {
          goto LABEL_19;
        }
      }
      goto LABEL_41;
    }
  }
LABEL_20:
  uint64_t v63 = v132;
  sub_1B65A7A44((uint64_t)v132, @"vertexRefiner", v128 + 136, (uint64_t)v133);
  uint64_t v66 = (uint64_t *)a1[6];
  if (v66)
  {
    uint64_t v67 = (v66[1] - *v66) >> 3;
    uint64_t v68 = 0x2E8BA2E8BA2E8BA3 * v67;
    if (-1171354717 * v67)
    {
      uint64_t v69 = objc_msgSend_stringByAppendingString_(@"fvarRefiners", v64, @".count", v65);
      objc_msgSend_encodeInt32_forKey_(v132, v70, v68, v69);
      uint64_t v73 = 0;
      unint64_t v74 = 0;
      uint64_t v63 = v132;
      do
      {
        uint64_t v75 = *v66;
        if (0x2E8BA2E8BA2E8BA3 * ((v66[1] - *v66) >> 3) <= v74) {
          goto LABEL_41;
        }
        uint64_t v76 = objc_msgSend_stringByAppendingFormat_(@"fvarRefiners", v71, @".[%d]", v72, v74);
        sub_1B65A7A44((uint64_t)v132, v76, v75 + v73, (uint64_t)v133);
        ++v74;
        v73 += 88;
      }
      while (v68 != v74);
    }
  }
  sub_1B65A7BC8(v63, (const char *)@"skinMorphSubdivIndexToMetalIndexBuffer", *(void **)(v128 + 344), (uint64_t)v133, 0);
  uint64_t v77 = *(void *)(v128 + 352);
  if (v77)
  {
    uint64_t v78 = (void *)sub_1B653EFC4(v77);
    uint64_t v82 = objc_msgSend_name(v78, v79, v80, v81);
    objc_msgSend_encodeObject_forKey_(v63, v83, v82, @"synchronizeCoarsePositionsPipeline.functionName");
  }
  sub_1B65A7BC8(v63, (const char *)@"fvarChannelDescriptorsBuffer", *(void **)(v128 + 120), (uint64_t)v133, 0);
  sub_1B65A7BC8(v63, (const char *)@"fvarChannelsPackedDataBuffer", *(void **)(v128 + 128), (uint64_t)v133, 0);
  uint64_t v91 = v135;
  if (!v135[6]) {
    goto LABEL_34;
  }
  if (!v135[9])
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v85, v86, v87, v88, v89, v90, (uint64_t)"mtlBlitContext.computeCommandEncoder");
    uint64_t v91 = v135;
  }
  if (!v91[8])
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v85, v86, v87, v88, v89, v90, (uint64_t)"mtlBlitContext.commandBuffer");
    uint64_t v91 = v135;
  }
  objc_msgSend_endEncoding((void *)v91[9], v84, v85, v86);
  objc_msgSend_commit((void *)v135[8], v92, v93, v94);
  objc_msgSend_waitUntilCompleted((void *)v135[8], v95, v96, v97);
  if (objc_msgSend_status(v126, v98, v99, v100) == 4)
  {
    if (objc_msgSend_status((void *)v135[8], v101, v102, v103) == 4)
    {
LABEL_34:
      id v104 = (id)objc_msgSend_encodedData(v63, v84, v85, v86);
      goto LABEL_38;
    }
    uint64_t v105 = objc_msgSend_status((void *)v135[8], v84, v85, v86);
    objc_msgSend_error((void *)v135[8], v119, v120, v121);
    objc_msgSend_logs((void *)v135[8], v122, v123, v124);
    uint64_t v118 = @"Error: OpenSubdiv archiver command buffer execution failed with status %d, error: %@\n%@";
  }
  else
  {
    uint64_t v105 = objc_msgSend_status(v126, v101, v102, v103);
    objc_msgSend_error(v126, v106, v107, v108);
    objc_msgSend_logs(v126, v109, v110, v111);
    uint64_t v118 = @"Error: OpenSubdiv archiver dependency command buffer execution failed with status %d, error: %@\n%@";
  }
  sub_1B63F2F54(16, (uint64_t)v118, v112, v113, v114, v115, v116, v117, v105);
  id v104 = 0;
LABEL_38:

  _Block_object_dispose(&v134, 8);
  if (v104) {
    return CFAutorelease(v104);
  }
  else {
    return 0;
  }
}

void sub_1B65A6B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t sub_1B65A6B64(uint64_t a1)
{
  uint64_t v7 = (void **)(a1 + 112);
  sub_1B65A7E7C(&v7);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  id v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1B65A6BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return CC_SHA256_Update(*(CC_SHA256_CTX **)(a1 + 32), v4, 0x10u);
}

CFDataRef sub_1B65A6C10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  CFDataRef result = (const __CFData *)sub_1B6569284(a3, a4, 0);
  if (result)
  {
    CFDataRef result = (const __CFData *)sub_1B641D89C(a2);
    if (result)
    {
      CFDataRef v7 = result;
      BytePtr = CFDataGetBytePtr(result);
      CC_LONG Length = CFDataGetLength(v7);
      uint64_t v10 = *(CC_SHA256_CTX **)(a1 + 32);
      return (const __CFData *)CC_SHA256_Update(v10, BytePtr, Length);
    }
  }
  return result;
}

void sub_1B65A6C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = a5;
  int v10 = a4;
  int v11 = a3;
  *(void *)a1 = &unk_1F0FB29F0;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a7;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a8;
  if (a6) {
    sub_1B6E2BB50(a2, (16 * a6) & 0x300 | a5 & 0xF | (((a6 >> 3) & 1) << 10) | 0xF0, a3, a4, a5, a6, a7, a8, v13);
  }
  else {
    sub_1B6E2B8B0(a2, a5 & 0xF | (32* ((int)((*(void *)(**(void **)(a2 + 40) + 464) - *(void *)(**(void **)(a2 + 40) + 456)) >> 3) > 0)), a3, a4, a5, a6, a7, a8, v13);
  }
  sub_1B65A6DB4(a1, v11, v10, v9, a6);
}

void sub_1B65A6DB4(uint64_t a1, int a2, int a3, char a4, unint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = ~(16 * *(unsigned __int8 *)(v6 + 8)) & 0x10;
  if (a2 >= 1) {
    sub_1B6E1CDA0(v6, v7 | 0x2A4);
  }
  if (a3 >= 1) {
    sub_1B6E1CDA0(*(void *)(a1 + 8), v7 | 0x2A5);
  }
  uint64_t v8 = -4294956288;
  uint64_t v9 = -4294956032;
  if ((a5 & 0x100) == 0) {
    uint64_t v9 = -4294956288;
  }
  if ((a5 & 0x80) == 0) {
    uint64_t v8 = v9;
  }
  if ((a5 & 0x40) != 0) {
    uint64_t v8 = -4294956544;
  }
  sub_1B6E1336C(*(void *)(a1 + 8), ((a5 << 10) & 0x3000 | (16 * (a4 & 0xF)) | (a5 >> 2) & 0xC) ^ v8, 0);
}

void sub_1B65A7018(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a3) {
    sub_1B6E2D114();
  }
  if (a4) {
    sub_1B6E2D114();
  }
}

void sub_1B65A707C(void *a1)
{
  sub_1B65A7D5C(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B65A70B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void *sub_1B65A70BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6E2D1A4(*(void *)(a1 + 40), a2, a3, a4);
}

BOOL sub_1B65A70CC(uint64_t a1)
{
  int v2 = *(_DWORD *)(**(void **)(*(void *)(a1 + 8) + 88) + 8);
  uint64_t v13 = *(void *)(a1 + 48);
  int v14 = *(_DWORD *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(_DWORD *)(a1 + 56);
  LODWORD(v11) = v11 + v12 * v2;
  id v3 = sub_1B65A726C(*(uint64_t **)(a1 + 88), (int *)&v13, (int *)&v11);
  BOOL result = sub_1B65A72B4(*(void *)(a1 + 32), &v13, *(void *)(a1 + 32), (int *)&v11, *(void *)(a1 + 72), (uint64_t)v3, *(void *)(a1 + 104));
  if (*(int *)(a1 + 64) >= 1)
  {
    uint64_t v9 = *(void *)(a1 + 60);
    int v10 = *(_DWORD *)(a1 + 68);
    uint64_t v7 = *(void *)(a1 + 60);
    int v8 = *(_DWORD *)(a1 + 68);
    LODWORD(v7) = v7 + v8 * v2;
    uint64_t v5 = sub_1B65A726C(*(uint64_t **)(a1 + 88), (int *)&v9, (int *)&v7);
    uint64_t v6 = *(void *)(a1 + 40);
    if (!v6) {
      uint64_t v6 = *(void *)(a1 + 32);
    }
    return sub_1B65A72B4(v6, &v9, v6, (int *)&v7, *(void *)(a1 + 80), (uint64_t)v5, *(void *)(a1 + 104));
  }
  return result;
}

uint64_t sub_1B65A71D0(uint64_t a1)
{
  return nullsub_1(*(void *)(a1 + 104));
}

id sub_1B65A71D8(uint64_t a1)
{
  return sub_1B6E2D210(*(void *)(a1 + 40));
}

uint64_t sub_1B65A71E8(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void sub_1B65A71F0()
{
}

void sub_1B65A7248(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x1080C40ADB4D971);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B65A726C(uint64_t *result, int *a2, int *a3)
{
  if (result)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    return (uint64_t *)sub_1B65A73D0(result, a2, a3, (int *)&v5, (int *)&v3);
  }
  return result;
}

BOOL sub_1B65A72B4(uint64_t a1, _DWORD *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a6) {
    sub_1B6E1C114();
  }

  return sub_1B65A775C(a6, a1, a2, a3, a4, a5, a7);
}

uint64_t sub_1B65A73D0(uint64_t *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6) {
LABEL_43:
  }
    sub_1B6E1C114();
  int v8 = a2[1];
  int v7 = a2[2];
  int v9 = *a2;
  int v11 = a3[1];
  int v10 = a3[2];
  int v12 = *a3;
  int v13 = a4[1];
  int v14 = a4[2];
  int v15 = *a4;
  int v17 = a5[1];
  int v16 = a5[2];
  int v18 = *a5;
  while (1)
  {
    int v19 = v7 ? v9 % v7 : 0;
    int v20 = *(_DWORD *)(v5 + 8);
    int v21 = v20 ? *(_DWORD *)v5 % v20 : 0;
    if (v19 == v21 && v7 == v20 && v8 == *(_DWORD *)(v5 + 4))
    {
      int v23 = v10 ? v12 % v10 : 0;
      int v24 = *(_DWORD *)(v5 + 20);
      int v25 = v24 ? *(_DWORD *)(v5 + 12) % v24 : 0;
      if (v23 == v25 && v10 == v24 && v11 == *(_DWORD *)(v5 + 16))
      {
        int v26 = v14 ? v15 % v14 : 0;
        int v27 = *(_DWORD *)(v5 + 32);
        int v28 = v27 ? *(_DWORD *)(v5 + 24) % v27 : 0;
        if (v26 == v28 && v14 == v27 && v13 == *(_DWORD *)(v5 + 28))
        {
          int v29 = v16 ? v18 % v16 : 0;
          int v30 = *(_DWORD *)(v5 + 44);
          int v31 = v30 ? *(_DWORD *)(v5 + 36) % v30 : 0;
          if (v29 == v31 && v16 == v30 && v17 == *(_DWORD *)(v5 + 40)) {
            return *(void *)(v5 + 48);
          }
        }
      }
    }
    v5 += 56;
    if (v5 == v6) {
      goto LABEL_43;
    }
  }
}

void *sub_1B65A7710(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_1B63C8620();
  }
  return operator new(56 * a2);
}

BOOL sub_1B65A775C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  id v13 = sub_1B6E2D210(a2);
  id v14 = sub_1B6E2D210(a4);
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  return sub_1B6E1C9E0(a1, v13, a3, v14, a5, 0, (uint64_t)&v18, 0, (uint64_t)&v16, *(void **)a6, *(void **)(a6 + 8), *(void **)(a6 + 16), *(void **)(a6 + 24), 0, 0, 0, *(_DWORD *)(a6 + 48), a7);
}

__n128 sub_1B65A782C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

__n128 sub_1B65A783C@<Q0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!*(void *)(v6 + 48))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) = objc_msgSend_device(*(void **)(a1 + 32), a2, a3, a4);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 56) = *(void *)(a1 + 32);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 64) = objc_msgSend_commandBuffer(*(void **)(*(void *)(*(void *)(a1 + 40) + 8)+ 56), v8, v9, v10);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 72) = objc_msgSend_blitCommandEncoder(*(void **)(*(void *)(*(void *)(a1 + 40) + 8)+ 64), v11, v12, v13);
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  __n128 result = *(__n128 *)(v6 + 48);
  long long v15 = *(_OWORD *)(v6 + 64);
  *(__n128 *)a5 = result;
  *(_OWORD *)(a5 + 16) = v15;
  return result;
}

uint64_t sub_1B65A78D8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    int v7 = (void *)result;
    uint64_t v8 = **(void **)a3;
    uint64_t v9 = *(void *)(*(void *)a3 + 8) - v8;
    uint64_t v10 = objc_msgSend_stringByAppendingString_(a2, (const char *)a2, @".patchArrays", a4);
    objc_msgSend_encodeBytes_length_forKey_(v7, v11, v8, v9, v10);
    id v14 = (const char *)objc_msgSend_stringByAppendingString_(a2, v12, @".patchIndexBuffer", v13);
    sub_1B65A7BC8(v7, v14, *(void **)(a3 + 8), a4, 0);
    int v17 = (const char *)objc_msgSend_stringByAppendingString_(a2, v15, @".patchParamBuffer", v16);
    sub_1B65A7BC8(v7, v17, *(void **)(a3 + 16), a4, 0);
    int v20 = (const char *)objc_msgSend_stringByAppendingString_(a2, v18, @".dataBuffer", v19);
    sub_1B65A7BC8(v7, v20, *(void **)(a3 + 24), a4, *(void *)(a3 + 40));
    uint64_t v21 = *(unsigned int *)(a3 + 32);
    uint64_t v24 = objc_msgSend_stringByAppendingString_(a2, v22, @".dataBufferOffset", v23);
    objc_msgSend_encodeInt32_forKey_(v7, v25, v21, v24);
    uint64_t v26 = *(unsigned int *)(a3 + 40);
    uint64_t v29 = objc_msgSend_stringByAppendingString_(a2, v27, @".dataBufferCoarseDataSize", v28);
    objc_msgSend_encodeInt32_forKey_(v7, v30, v26, v29);
    uint64_t v34 = objc_msgSend_length(*(void **)(a3 + 24), v31, v32, v33);
    uint64_t v38 = objc_msgSend_stringByAppendingString_(a2, v35, @".dataBufferFullDataSize", v36);
    return objc_msgSend_encodeInt32_forKey_(v7, v37, v34, v38);
  }
  return result;
}

uint64_t sub_1B65A7A44(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    int v7 = (void *)result;
    uint64_t v8 = objc_msgSend_stringByAppendingString_(a2, (const char *)a2, @".stencilTable", a4);
    int v11 = (const char *)objc_msgSend_stringByAppendingString_(v8, v9, @".sizesBuffer", v10);
    sub_1B65A7BC8(v7, v11, *(void **)a3, a4, 0);
    id v14 = (const char *)objc_msgSend_stringByAppendingString_(v8, v12, @".offsetsBuffer", v13);
    sub_1B65A7BC8(v7, v14, *(void **)(a3 + 8), a4, 0);
    int v17 = (const char *)objc_msgSend_stringByAppendingString_(v8, v15, @".indicesBuffer", v16);
    sub_1B65A7BC8(v7, v17, *(void **)(a3 + 16), a4, 0);
    int v20 = (const char *)objc_msgSend_stringByAppendingString_(v8, v18, @".weightsBuffer", v19);
    sub_1B65A7BC8(v7, v20, *(void **)(a3 + 24), a4, 0);
    uint64_t v21 = *(unsigned int *)(a3 + 32);
    uint64_t v24 = objc_msgSend_stringByAppendingString_(v8, v22, @".numStencils", v23);
    objc_msgSend_encodeInt32_forKey_(v7, v25, v21, v24);
    uint64_t v28 = objc_msgSend_stringByAppendingString_(a2, v26, @".evaluatorInput", v27);
    uint64_t v31 = objc_msgSend_stringByAppendingString_(v28, v29, @".srcDesc", v30);
    objc_msgSend_encodeBytes_length_forKey_(v7, v32, a3 + 56, 12, v31);
    uint64_t v36 = objc_msgSend_stringByAppendingString_(v28, v33, @".dstDesc", v34);
    return objc_msgSend_encodeBytes_length_forKey_(v7, v35, a3 + 68, 12, v36);
  }
  return result;
}

void sub_1B65A7BC8(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    uint64_t v5 = a5;
    if (!a5) {
      uint64_t v5 = objc_msgSend_length(a3, a2, (uint64_t)a3, a4);
    }
    if (objc_msgSend_storageMode(a3, a2, (uint64_t)a3, a4) == 2)
    {
      uint64_t v13 = objc_msgSend_device(a3, v10, v11, v12);
      long long v15 = objc_msgSend_newBufferWithLength_options_(v13, v14, v5, 0);
      (*(void (**)(void *__return_ptr, uint64_t))(a4 + 16))(v22, a4);
      objc_msgSend_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_((void *)v22[3], v16, (uint64_t)a3, 0, v15, 0, v5);
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = sub_1B65A7D18;
      void v21[3] = &unk_1E6144D20;
      v21[4] = a1;
      v21[5] = v15;
      v21[6] = a2;
      v21[7] = v5;
      objc_msgSend_addCompletedHandler_((void *)v22[2], v17, (uint64_t)v21, v18);
    }
    else
    {
      uint64_t v20 = objc_msgSend_contents(a3, v10, v11, v12);
      objc_msgSend_encodeBytes_length_forKey_(a1, v19, v20, v5, a2);
    }
  }
}

uint64_t sub_1B65A7D18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v7 = objc_msgSend_contents(*(void **)(a1 + 40), a2, a3, a4);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);

  return objc_msgSend_encodeBytes_length_forKey_(v5, v6, v7, v8, v9);
}

void *sub_1B65A7D5C(void *a1)
{
  *a1 = &unk_1F0FB29F0;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = sub_1B6E2B598(v2);
    MEMORY[0x1BA9B6D80](v3, 0x10A0C40D2671FEALL);
  }
  if (a1[2])
  {
    uint64_t v4 = sub_1B6E168E4();
    MEMORY[0x1BA9B6D80](v4, 0x10F0C403D579C5ELL);
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    uint64_t v6 = sub_1B6E2D07C(v5);
    MEMORY[0x1BA9B6D80](v6, 0x1080C40E0210B95);
  }
  uint64_t v7 = a1[5];
  if (v7)
  {
    uint64_t v8 = sub_1B6E2D07C(v7);
    MEMORY[0x1BA9B6D80](v8, 0x1080C40E0210B95);
  }
  if (a1[9])
  {
    uint64_t v9 = sub_1B6E1C110();
    MEMORY[0x1BA9B6D80](v9, 0x1080C40ADB4D971);
  }
  if (a1[10])
  {
    uint64_t v10 = sub_1B6E1C110();
    MEMORY[0x1BA9B6D80](v10, 0x1080C40ADB4D971);
  }
  uint64_t v11 = a1[12];
  if (v11)
  {
    uint64_t v12 = sub_1B6E17FBC(v11);
    MEMORY[0x1BA9B6D80](v12, 0xA0C4074858A82);
  }
  return a1;
}

void sub_1B65A7E7C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        sub_1B657B4F0(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1B65A7F00(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1BA9B6C30](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_1B65A8064(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1BA9B6C40](v13);
  return a1;
}

void sub_1B65A803C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

uint64_t sub_1B65A8064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_1B65A81EC(__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1B65A81D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B65A81EC(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_1B65A8294@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1B65A8330(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t sub_1B65A8330(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

__guard sub_1B65A837C()
{
  id v0 = &qword_1E9DDB000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBAF0, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_1E9DDBAF0);
    id v0 = &qword_1E9DDB000;
    if (v2)
    {
      qword_1E9DDBAE8 = sub_1B65A83E0(0x14u);
      __cxa_guard_release(&qword_1E9DDBAF0);
      id v0 = &qword_1E9DDB000;
    }
  }
  return v0[349];
}

unint64_t sub_1B65A83E0(unsigned int a1)
{
  int v1 = "Main culling context";
  unint64_t v2 = 0xC6A4A7935BD1E995 * a1;
  if (a1 >= 8)
  {
    uint64_t v3 = a1 >> 3;
    int v1 = (unsigned __int8 *)&aMainCullingCon[8 * v3];
    uint64_t v4 = 8 * v3;
    uint64_t v5 = "Main culling context";
    do
    {
      uint64_t v6 = *(void *)v5;
      v5 += 8;
      unint64_t v2 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
      v4 -= 8;
    }
    while (v4);
  }
  switch(a1 & 7)
  {
    case 1u:
      goto LABEL_11;
    case 2u:
      goto LABEL_10;
    case 3u:
      goto LABEL_9;
    case 4u:
      goto LABEL_8;
    case 5u:
      goto LABEL_7;
    case 6u:
      goto LABEL_6;
    case 7u:
      v2 ^= (unint64_t)v1[6] << 48;
LABEL_6:
      v2 ^= (unint64_t)v1[5] << 40;
LABEL_7:
      v2 ^= (unint64_t)v1[4] << 32;
LABEL_8:
      v2 ^= (unint64_t)v1[3] << 24;
LABEL_9:
      v2 ^= (unint64_t)v1[2] << 16;
LABEL_10:
      v2 ^= (unint64_t)v1[1] << 8;
LABEL_11:
      unint64_t v2 = 0xC6A4A7935BD1E995 * (v2 ^ *v1);
      break;
    default:
      return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
  }
  return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
}

uint64_t sub_1B65A84D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  long long v6 = *a5;
  long long v7 = a5[2];
  *(_OWORD *)(a1 + 48) = a5[1];
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  long long v8 = a5[3];
  long long v9 = a5[4];
  long long v10 = a5[6];
  *(_OWORD *)(a1 + 112) = a5[5];
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v11 = (void *)sub_1B63C8330(v13, 0x3320u, 0x10u);
  bzero(v11, 0x3320uLL);
  *(void *)(a1 + 144) = v11;
  return a1;
}

uint64_t sub_1B65A8550(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 144);
  if (v2) {
    sub_1B63C89D4(v2, &v4);
  }
  return a1;
}

void sub_1B65A8594(__n128 *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = sub_1B6447B50(a1[1].n128_i64[0], a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"init", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/Culling.mm", 66, v5 | 0x300000000);
  uint64_t v13 = sub_1B644558C(a1[1].n128_i64[0], v6, v7, v8, v9, v10, v11, v12);
  uint64_t v21 = sub_1B64B2864(v13, v14, v15, v16, v17, v18, v19, v20);
  unint64_t v22 = a1[9].n128_u64[0];
  *(unsigned char *)(v22 + 12612) = 0;
  uint64_t v23 = a1[1].n128_i64[0];
  *(void *)(v22 + 12648) = v23;
  if ((sub_1B6447978(v23) & 1) != 0 || a1[3].n128_u64[0]) {
    LOBYTE(v31) = 1;
  }
  else {
    int v31 = (a1[7].n128_u8[8] >> 3) & 1;
  }
  unint64_t v32 = a1[9].n128_u64[0];
  *(unsigned char *)(v32 + 12610) = v31;
  *(void *)unint64_t v32 = v21;
  *(void *)(v32 + 12640) = v13;
  *(unsigned char *)(v32 + 12563) = a1[7].n128_u8[0];
  unint64_t v33 = a1[7].n128_u64[1];
  *(unsigned char *)(v32 + 12564) = (v33 & 4) != 0;
  if ((v33 & 4) != 0) {
    char v34 = 6;
  }
  else {
    char v34 = a1[8].n128_i8[4];
  }
  *(unsigned char *)(v32 + 12560) = v34;
  *(_OWORD *)(v32 + 12568) = 0u;
  *(void *)(v32 + 13080) = sub_1B65A88C0;
  *(unsigned char *)(v32 + 13072) = 0;
  *(unsigned char *)(v32 + 12562) = a1[8].n128_u32[0];
  *(unsigned char *)(v32 + 12613) = BYTE1(v33) & 1;
  *(unsigned char *)(v32 + 12614) = (v33 & 0x40) != 0;
  *(unsigned char *)(v32 + 12615) = a1[7].n128_u8[1];
  unint64_t v35 = a1[2].n128_u64[1];
  *(void *)(v32 + 12584) = v35;
  if (!v35)
  {
    if (!v13) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v25, v26, v27, v28, v29, v30, (uint64_t)"world");
    }
    uint64_t v36 = sub_1B64B1FBC(v13, v24, v25, v26, v27, v28, v29, v30);
    unint64_t v32 = a1[9].n128_u64[0];
    *(void *)(v32 + 12584) = v36;
    unint64_t v33 = a1[7].n128_u64[1];
  }
  *(void *)(v32 + 12600) = a1[9].n128_u64[1];
  *(unsigned char *)(v32 + 12608) = (v33 & 2) != 0;
  *(unsigned char *)(v32 + 12611) = (v33 & 0x80) != 0;
  if (a1[5].n128_u8[0])
  {
    __n128 v37 = a1[4];
  }
  else
  {
    __n128 v37 = sub_1B64471F4(a1[1].n128_i64[0], 0, v25, v26, v27, v28, v29, v30);
    unint64_t v32 = a1[9].n128_u64[0];
  }
  *(__n128 *)(v32 + 11280) = v37;
  unint64_t v38 = a1[9].n128_u64[0];
  if (*(float *)(v38 + 11292) == 0.0)
  {
    __n128 v39 = sub_1B64471F4(a1[1].n128_i64[0], 0, v25, v26, v27, v28, v29, v30);
    unint64_t v40 = a1[9].n128_u64[0];
    long long v41 = *(_OWORD *)(v40 + 11280);
    HIDWORD(v41) = v39.n128_u32[3];
    *(_OWORD *)(v40 + 11280) = v41;
    unint64_t v38 = a1[9].n128_u64[0];
  }
  if (*(float *)(v38 + 11288) == 0.0)
  {
    __n128 v42 = sub_1B64471F4(a1[1].n128_i64[0], 0, v25, v26, v27, v28, v29, v30);
    unint64_t v43 = a1[9].n128_u64[0];
    long long v44 = *(_OWORD *)(v43 + 11280);
    DWORD2(v44) = v42.n128_u32[2];
    *(_OWORD *)(v43 + 11280) = v44;
  }
  uint64_t v45 = (const void *)a1[2].n128_u64[0];
  if (v45)
  {
    a1[10].n128_u64[0] = (unint64_t)v45;
  }
  else
  {
    uint8x16_t v47 = sub_1B644678C((uint64_t *)a1[1].n128_u64[0], v24, v25, v26, v27, v28, v29, v30);
    uint64_t v45 = (const void *)a1[2].n128_u64[0];
    a1[10].n128_u64[0] = (unint64_t)v47;
    if (!v45) {
      uint64_t v45 = sub_1B6446564((uint64_t *)a1[1].n128_u64[0], v46, v25, v26, v27, v28, v29, v30);
    }
  }
  a1[9].n128_u64[1] = (unint64_t)v45;
  *(unsigned char *)(a1[9].n128_u64[0] + 12609) = a1[7].n128_u8[8] & 1;
  uint64_t v48 = sub_1B6446254(a1[1].n128_i64[0], 0, v25, v26, v27, v28, v29, v30);
  unint64_t v49 = a1[9].n128_u64[0];
  *(void *)(v49 + 12632) = v48;
  *(void *)(v49 + 12616) = a1[6].n128_u64[0];
  uint64_t v64 = sub_1B661ED4C(a1[10].n128_i64[0], v50, v51, v52, v53, v54, v55, v56);
  unint64_t v65 = 0;
  unint64_t v66 = a1[9].n128_u64[0];
  *(void *)(v66 + 12616) &= v64;
  *(void *)(v66 + 12624) = a1[6].n128_u64[1];
  for (uint64_t i = 12824; ; i += 16)
  {
    unsigned int v68 = sub_1B661F650((unsigned char *)v66, v57, v58, v59, v60, v61, v62, v63);
    unint64_t v66 = a1[9].n128_u64[0];
    if (v65 >= v68) {
      break;
    }
    uint64_t v69 = (_DWORD *)(v66 + i);
    *((void *)v69 - 1) = 0;
    *uint64_t v69 = 0;
    ++v65;
  }
  if (*(unsigned char *)(v66 + 12560))
  {
    unint64_t v70 = 0;
    uint64_t v71 = 11536;
    uint64_t v72 = (long long *)MEMORY[0x1E4F149A0];
    do
    {
      uint64_t v73 = (_OWORD *)(v66 + v71);
      long long v74 = *v72;
      long long v75 = v72[1];
      long long v76 = v72[3];
      v73[2] = v72[2];
      v73[3] = v76;
      *uint64_t v73 = v74;
      v73[1] = v75;
      ++v70;
      unint64_t v66 = a1[9].n128_u64[0];
      v71 += 64;
    }
    while (v70 < *(unsigned __int8 *)(v66 + 12560));
  }

  prof_endFlame();
}

void sub_1B65A88A8(_Unwind_Exception *a1)
{
}

BOOL sub_1B65A88C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (!*(unsigned char *)(a1 + 12608) || (*(unsigned char *)(a3 + 221) & 0x10) == 0)
      && (!*(unsigned char *)(a1 + 12611) || (*(unsigned char *)(a3 + 223) & 1) == 0);
}

void sub_1B65A88F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 152);
  if (v9)
  {
    if ((*(unsigned char *)(a1 + 120) & 4) != 0)
    {
      if ((sub_1B63E0460(*(void *)(a1 + 152), (uint64_t)v80, v9, a4, a5, a6, a7, a8) & 1) == 0) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Can't get a valid projection info", v14, v15, v16, v17, v18, v19, (uint64_t)"NULL");
      }
      float v20 = v81;
      float v21 = v82;
      double v22 = v81;
      uint64_t v23 = *(void *)(a1 + 144);
      *(double *)(v23 + 12656) = v81;
      *(double *)(v23 + 12664) = v21;
      double v31 = __tanpi(0.25);
      uint64_t v32 = 0;
      if (v31 == 0.0) {
        double v33 = 1.0;
      }
      else {
        double v33 = 1.0 / v31;
      }
      float v34 = v33;
      double v35 = v22 + 1.0;
      if (v21 > v20) {
        double v35 = v21;
      }
      double v36 = v35 / (v22 - v35);
      *(float *)&unsigned int v37 = v36;
      *(float *)&double v36 = v36 * v22;
      *(void *)&long long v38 = 0;
      float v39 = v34;
      LODWORD(v40) = 0;
      *((float *)&v40 + 1) = v34;
      *(void *)&long long v41 = 0;
      *((void *)&v41 + 1) = __PAIR64__(-1.0, v37);
      *((void *)&v38 + 1) = LODWORD(v36);
      long long v83 = LODWORD(v39);
      long long v84 = v40;
      long long v85 = v41;
      long long v86 = v38;
      do
      {
        *(long long *)((char *)&v87 + v32) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(long long *)((char *)&v83 + v32))), (float32x4_t)xmmword_1B6E4F320, *(float32x2_t *)((char *)&v83 + v32), 1), (float32x4_t)xmmword_1B6E4F340, *(float32x4_t *)((char *)&v83 + v32), 2), (float32x4_t)xmmword_1B6E4F360, *(float32x4_t *)((char *)&v83 + v32), 3);
        v32 += 16;
      }
      while (v32 != 64);
      long long v42 = v88;
      long long v43 = v89;
      long long v44 = v90;
      *(_OWORD *)(v23 + 9232) = v87;
      *(_OWORD *)(v23 + 9248) = v42;
      *(_OWORD *)(v23 + 9264) = v43;
      *(_OWORD *)(v23 + 9280) = v44;
      uint64_t v45 = (float32x4_t *)sub_1B64A01D4(*(void *)(a1 + 152), v24, v25, v26, v27, v28, v29, v30);
      uint64_t v46 = 0;
      float32x4_t v47 = *v45;
      float32x4_t v48 = v45[1];
      float32x4_t v49 = v45[2];
      float32x4_t v50 = v45[3];
      long long v83 = xmmword_1B6E4F2E0;
      long long v84 = xmmword_1B6E4F320;
      long long v85 = xmmword_1B6E72490;
      long long v86 = xmmword_1B6E4F370;
      do
      {
        *(long long *)((char *)&v87 + v46) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(long long *)((char *)&v83 + v46))), v48, *(float32x2_t *)((char *)&v83 + v46), 1), v49, *(float32x4_t *)((char *)&v83 + v46), 2), v50, *(float32x4_t *)((char *)&v83 + v46), 3);
        v46 += 16;
      }
      while (v46 != 64);
      uint64_t v51 = 0;
      long long v52 = v88;
      long long v53 = v89;
      long long v54 = v90;
      uint64_t v55 = *(_OWORD **)(a1 + 144);
      v55[449] = v87;
      v55[450] = v52;
      v55[451] = v53;
      v55[452] = v54;
      long long v83 = xmmword_1B6E724A0;
      long long v84 = xmmword_1B6E4F320;
      long long v85 = xmmword_1B6E4F300;
      long long v86 = xmmword_1B6E4F370;
      do
      {
        *(long long *)((char *)&v87 + v51) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(long long *)((char *)&v83 + v51))), v48, *(float32x2_t *)((char *)&v83 + v51), 1), v49, *(float32x4_t *)((char *)&v83 + v51), 2), v50, *(float32x4_t *)((char *)&v83 + v51), 3);
        v51 += 16;
      }
      while (v51 != 64);
      uint64_t v56 = 0;
      long long v57 = v88;
      long long v58 = v89;
      long long v59 = v90;
      uint64_t v60 = *(_OWORD **)(a1 + 144);
      v60[453] = v87;
      v60[454] = v57;
      v60[455] = v58;
      v60[456] = v59;
      long long v83 = xmmword_1B6E4F300;
      long long v84 = xmmword_1B6E4F2E0;
      long long v85 = xmmword_1B6E724B0;
      long long v86 = xmmword_1B6E4F370;
      do
      {
        *(long long *)((char *)&v87 + v56) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(long long *)((char *)&v83 + v56))), v48, *(float32x2_t *)((char *)&v83 + v56), 1), v49, *(float32x4_t *)((char *)&v83 + v56), 2), v50, *(float32x4_t *)((char *)&v83 + v56), 3);
        v56 += 16;
      }
      while (v56 != 64);
      uint64_t v61 = 0;
      long long v62 = v88;
      long long v63 = v89;
      long long v64 = v90;
      unint64_t v65 = *(_OWORD **)(a1 + 144);
      v65[457] = v87;
      v65[458] = v62;
      v65[459] = v63;
      v65[460] = v64;
      long long v83 = xmmword_1B6E4F300;
      long long v84 = xmmword_1B6E724A0;
      long long v85 = xmmword_1B6E4F320;
      long long v86 = xmmword_1B6E4F370;
      do
      {
        *(long long *)((char *)&v87 + v61) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(long long *)((char *)&v83 + v61))), v48, *(float32x2_t *)((char *)&v83 + v61), 1), v49, *(float32x4_t *)((char *)&v83 + v61), 2), v50, *(float32x4_t *)((char *)&v83 + v61), 3);
        v61 += 16;
      }
      while (v61 != 64);
      uint64_t v66 = 0;
      long long v67 = v88;
      long long v68 = v89;
      long long v69 = v90;
      unint64_t v70 = *(_OWORD **)(a1 + 144);
      v70[461] = v87;
      v70[462] = v67;
      v70[463] = v68;
      v70[464] = v69;
      long long v83 = xmmword_1B6E4F300;
      long long v84 = xmmword_1B6E4F320;
      long long v85 = xmmword_1B6E4F2E0;
      long long v86 = xmmword_1B6E4F370;
      do
      {
        *(long long *)((char *)&v87 + v66) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(long long *)((char *)&v83 + v66))), v48, *(float32x2_t *)((char *)&v83 + v66), 1), v49, *(float32x4_t *)((char *)&v83 + v66), 2), v50, *(float32x4_t *)((char *)&v83 + v66), 3);
        v66 += 16;
      }
      while (v66 != 64);
      uint64_t v71 = 0;
      long long v72 = v88;
      long long v73 = v89;
      long long v74 = v90;
      long long v75 = *(_OWORD **)(a1 + 144);
      v75[465] = v87;
      v75[466] = v72;
      v75[467] = v73;
      v75[468] = v74;
      long long v83 = xmmword_1B6E72490;
      long long v84 = xmmword_1B6E4F320;
      long long v85 = xmmword_1B6E724A0;
      long long v86 = xmmword_1B6E4F370;
      do
      {
        *(long long *)((char *)&v87 + v71) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(long long *)((char *)&v83 + v71))), v48, *(float32x2_t *)((char *)&v83 + v71), 1), v49, *(float32x4_t *)((char *)&v83 + v71), 2), v50, *(float32x4_t *)((char *)&v83 + v71), 3);
        v71 += 16;
      }
      while (v71 != 64);
      long long v76 = v88;
      long long v77 = v89;
      long long v78 = v90;
      uint64_t v79 = *(_OWORD **)(a1 + 144);
      v79[469] = v87;
      v79[470] = v76;
      v79[471] = v77;
      v79[472] = v78;
      sub_1B661EF38(*(void *)(a1 + 144));
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 144);
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 160);
      sub_1B661F0F8(v10, v11, v9, v12, a5, a6, a7, a8);
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 144);
    sub_1B661F040(v13);
  }
}

void sub_1B65A8D10(uint64_t a1)
{
}

void sub_1B65A8D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B65A8D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

double sub_1B65A8D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B661ED84(*(void *)(a1 + 144), *(__n128 **)(a1 + 16), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B65A8D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_1B644558C(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v17 = sub_1B64B28B0(v9, v10, v11, v12, v13, v14, v15, v16);
  uint64_t v18 = *(void *)(a1 + 144);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 12560);
  float v20 = *(double *)(v18 + 12656);
  float v21 = *(double *)(v18 + 12664);

  return sub_1B63C29D4(v17, (_OWORD *)(v18 + 16), v20, v21, v19, (long long *)(v18 + 1552), (long long *)(v18 + 7184));
}

uint64_t sub_1B65A8DB4(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 144);
  unsigned int v4 = *(unsigned __int8 *)(v3 + 12560);
  if (v4 >= a3) {
    unsigned int v4 = a3;
  }
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (long long *)(a2 + (v5 << 6));
      uint64_t v7 = (_OWORD *)(v3 + (v5 << 6));
      long long v8 = *v6;
      long long v9 = v6[1];
      long long v10 = v6[2];
      v7[724] = v6[3];
      v7[723] = v10;
      v7[722] = v9;
      v7[721] = v8;
      ++v5;
      uint64_t v3 = *(void *)(result + 144);
      unsigned int v11 = *(unsigned __int8 *)(v3 + 12560);
      if (v11 >= a3) {
        unsigned int v11 = a3;
      }
    }
    while (v11 > v5);
  }
  return result;
}

uint64_t sub_1B65A8E14(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 144);
  unsigned int v4 = *(unsigned __int8 *)(v3 + 12560);
  if (v4 >= a3) {
    unsigned int v4 = a3;
  }
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (_OWORD *)(v3 + (v5 << 6));
      uint64_t v7 = (_OWORD *)(a2 + (v5 << 6));
      long long v8 = v6[641];
      long long v9 = v6[642];
      long long v10 = v6[644];
      uint64_t v7[2] = v6[643];
      v7[3] = v10;
      *uint64_t v7 = v8;
      v7[1] = v9;
      ++v5;
      uint64_t v3 = *(void *)(result + 144);
      unsigned int v11 = *(unsigned __int8 *)(v3 + 12560);
      if (v11 >= a3) {
        unsigned int v11 = a3;
      }
    }
    while (v11 > v5);
  }
  return result;
}

uint64_t sub_1B65A8E74(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 144);
  unsigned int v4 = *(unsigned __int8 *)(v3 + 12560);
  if (v4 >= a3) {
    unsigned int v4 = a3;
  }
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (_OWORD *)(v3 + (v5 << 6));
      uint64_t v7 = (_OWORD *)(a2 + (v5 << 6));
      long long v8 = v6[513];
      long long v9 = v6[514];
      long long v10 = v6[516];
      uint64_t v7[2] = v6[515];
      v7[3] = v10;
      *uint64_t v7 = v8;
      v7[1] = v9;
      ++v5;
      uint64_t v3 = *(void *)(result + 144);
      unsigned int v11 = *(unsigned __int8 *)(v3 + 12560);
      if (v11 >= a3) {
        unsigned int v11 = a3;
      }
    }
    while (v11 > v5);
  }
  return result;
}

uint64_t sub_1B65A8ED4(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 144);
  unsigned int v4 = *(unsigned __int8 *)(v3 + 12560);
  if (v4 >= a3) {
    unsigned int v4 = a3;
  }
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (_OWORD *)(v3 + (v5 << 6));
      uint64_t v7 = (_OWORD *)(a2 + (v5 << 6));
      long long v8 = v6[577];
      long long v9 = v6[578];
      long long v10 = v6[580];
      uint64_t v7[2] = v6[579];
      v7[3] = v10;
      *uint64_t v7 = v8;
      v7[1] = v9;
      ++v5;
      uint64_t v3 = *(void *)(result + 144);
      unsigned int v11 = *(unsigned __int8 *)(v3 + 12560);
      if (v11 >= a3) {
        unsigned int v11 = a3;
      }
    }
    while (v11 > v5);
  }
  return result;
}

void sub_1B65A8F34(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = sub_1B6447B50(a1[2], a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"cull", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/Culling.mm", 227, v7 | 0x300000000);
  sub_1B65A9050((uint64_t)a1, (uint64_t)a2, a3, v8, v9, v10, v11, v12);
  uint64_t v20 = a1[6];
  if (v20)
  {
    uint64_t v21 = *(unsigned int *)(v20 + 16);
    if (v21)
    {
      double v22 = *(uint64_t **)(v20 + 24);
      uint64_t v23 = &v22[v21];
      do
      {
        unint64_t v24 = 0;
        uint64_t v25 = *v22;
        while (v24 < sub_1B661F650((unsigned char *)a1[18], v13, v14, v15, v16, v17, v18, v19))
        {
          uint64_t v26 = (float32x4_t *)a1[18];
          if ((!v26[788].i8[0] || (*(unsigned char *)(v25 + 221) & 0x10) == 0)
            && (!v26[788].i8[3] || (*(unsigned char *)(v25 + 223) & 1) == 0))
          {
            sub_1B661E560(v26, v24, v25, v15, v16, v17, v18, v19);
          }
          ++v24;
        }
        ++v22;
      }
      while (v22 != v23);
    }
  }
  else
  {
    sub_1B6620768(a1[18]);
  }

  prof_endFlame();
}

void sub_1B65A903C(_Unwind_Exception *a1)
{
}

uint64_t sub_1B65A9050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = sub_1B6453580(**(void **)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
  int v19 = sub_1B661BE84(v11, v12, v13, v14, v15, v16, v17, v18);
  uint64_t result = sub_1B661F650(*(unsigned char **)(a1 + 144), v20, v21, v22, v23, v24, v25, v26);
  if (result)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 12828;
    do
    {
      v40[0] = a2;
      v40[1] = a3;
      uint64_t v30 = sub_1B63C8330(v40, 4 * v19, 2u);
      double v31 = *(unsigned char **)(a1 + 144);
      uint64_t v32 = &v31[v29];
      *(void *)(v32 - 3) = v30;
      *(v32 - 1) = 0;
      *uint64_t v32 = v19;
      ++v28;
      uint64_t result = sub_1B661F650(v31, v33, v34, v35, v36, v37, v38, v39);
      v29 += 16;
    }
    while (v28 < result);
  }
  return result;
}

uint64_t sub_1B65A9104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1B643B460(a1, a2, a3, a4, a5, a6, a7, a8)) {
    return 1;
  }
  uint64_t v17 = sub_1B6439E60(a1, v9, v10, v11, v12, v13, v14, v15);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = v17;
  BOOL v16 = CFEqual(v17, @"ast") || CFEqual(v18, @"astc");
  CFRelease(v18);
  return v16;
}

uint64_t sub_1B65A9188(int a1, int a2, int a3)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 4:
      uint64_t v5 = 204;
      if (a3) {
        uint64_t v5 = 186;
      }
      if (a2 == 4) {
        return v5;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v6 = 205;
      if (a3) {
        uint64_t v6 = 187;
      }
      uint64_t v7 = 206;
      if (a3) {
        uint64_t v7 = 188;
      }
      if (a2 != 5) {
        uint64_t v7 = 0;
      }
      BOOL v8 = a2 == 4;
      goto LABEL_41;
    case 6:
      uint64_t v6 = 207;
      if (a3) {
        uint64_t v6 = 189;
      }
      uint64_t v7 = 208;
      if (a3) {
        uint64_t v7 = 190;
      }
      if (a2 != 6) {
        uint64_t v7 = 0;
      }
      goto LABEL_31;
    case 8:
      uint64_t v6 = 210;
      if (a3) {
        uint64_t v6 = 192;
      }
      uint64_t v7 = 211;
      if (a3) {
        uint64_t v7 = 193;
      }
      uint64_t v9 = 212;
      if (a3) {
        uint64_t v9 = 194;
      }
      if (a2 != 8) {
        uint64_t v9 = 0;
      }
      if (a2 != 6) {
        uint64_t v7 = v9;
      }
LABEL_31:
      BOOL v8 = a2 == 5;
      goto LABEL_41;
    case 10:
      uint64_t result = 0;
      switch(a2)
      {
        case 5:
          BOOL v10 = a3 == 0;
          uint64_t v11 = 213;
          uint64_t v12 = 195;
          goto LABEL_47;
        case 6:
          BOOL v10 = a3 == 0;
          uint64_t v11 = 214;
          uint64_t v12 = 196;
          goto LABEL_47;
        case 8:
          BOOL v10 = a3 == 0;
          uint64_t v11 = 215;
          uint64_t v12 = 197;
          goto LABEL_47;
        case 10:
          BOOL v10 = a3 == 0;
          uint64_t v11 = 216;
          uint64_t v12 = 198;
LABEL_47:
          if (v10) {
            uint64_t result = v11;
          }
          else {
            uint64_t result = v12;
          }
          break;
        default:
          return result;
      }
      return result;
    case 12:
      uint64_t v6 = 217;
      if (a3) {
        uint64_t v6 = 199;
      }
      uint64_t v7 = 218;
      if (a3) {
        uint64_t v7 = 200;
      }
      if (a2 != 12) {
        uint64_t v7 = 0;
      }
      BOOL v8 = a2 == 10;
LABEL_41:
      if (v8) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = v7;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B65A9360(uint64_t a1)
{
  unint64_t v2 = sub_1B63F2EE0();
  os_signpost_id_t v3 = os_signpost_id_generate(v2);
  unsigned int v4 = sub_1B63F2EE0();
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v12 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B6287000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v3, "LoadImage (ASTC)", "", buf, 2u);
    }
  }
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v6, v7, v8, v9, v10, v11, (uint64_t)"image");
  }
  CFDataRef v13 = (const __CFData *)sub_1B643B460(a1, v5, v6, v7, v8, v9, v10, v11);
  if (v13)
  {
    CFDataRef v21 = v13;
    CFRetain(v13);
  }
  else
  {
    uint64_t v33 = sub_1B6439EF8(a1, v14, v15, v16, v17, v18, v19, v20);
    if (!v33 || (CFDataRef v21 = (const __CFData *)sub_1B65F40FC(v33)) == 0)
    {
      uint64_t v32 = 0;
      goto LABEL_16;
    }
  }
  if (CFDataGetLength(v21) >= 16 && (BytePtr = CFDataGetBytePtr(v21), *(_DWORD *)BytePtr == 1554098963))
  {
    uint64_t v23 = BytePtr;
    sub_1B643BD50(a1);
    unsigned int v24 = (v23[9] << 16) | (v23[8] << 8) | v23[7];
    unsigned int v25 = (v23[12] << 16) | (v23[11] << 8) | v23[10];
    int v37 = (v23[15] << 16) | (v23[14] << 8) | v23[13];
    *(float *)&double v26 = (float)v24;
    *((float *)&v26 + 1) = (float)v25;
    sub_1B643A0DC(a1, 2, 0, v26);
    uint64_t v27 = sub_1B643A1CC(a1);
    unsigned int v28 = v23[4];
    *(unsigned char *)(v27 + 7) = v28;
    unsigned int v29 = v23[5];
    *(unsigned char *)(v27 + 8) = v29;
    unsigned int v30 = v23[6];
    *(unsigned char *)(v27 + 9) = v30;
    *(unsigned char *)(v27 + 4) = 0x80;
    *(_DWORD *)(v27 + 24) = sub_1B65A9188(v28, v29, 0);
    CFDataRef v31 = CFDataCreate(0, v23 + 16, 16 * (v24 + v28 - 1) / v28 * ((v25 + v29 - 1) / v29) * ((v37 + v30 - 1) / v30));
    CFArrayAppendValue(*(CFMutableArrayRef *)(v27 + 32), v31);
    CFRelease(v31);
    uint64_t v32 = 1;
  }
  else
  {
    uint64_t v32 = 0;
  }
  CFRelease(v21);
LABEL_16:
  uint64_t v34 = sub_1B63F2EE0();
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v35 = v34;
    if (os_signpost_enabled(v34))
    {
      *(_WORD *)uint64_t v38 = 0;
      _os_signpost_emit_with_name_impl(&dword_1B6287000, v35, OS_SIGNPOST_INTERVAL_END, v3, "LoadImage (ASTC)", "", v38, 2u);
    }
  }
  return v32;
}

void *sub_1B65A95F8()
{
  return &unk_1F108B560;
}

uint64_t sub_1B65A9628(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = (void *)MEMORY[0x1E4F29238];
  uint64_t v6 = objc_msgSend_objectAtIndexedSubscript_(a3, a2, 0, a4);
  objc_msgSend_floatValue(v6, v7, v8, v9);
  unsigned int v29 = v10;
  CFDataRef v13 = objc_msgSend_objectAtIndexedSubscript_(a3, v11, 1, v12);
  objc_msgSend_floatValue(v13, v14, v15, v16);
  unsigned int v28 = v17;
  uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(a3, v18, 2, v19);
  objc_msgSend_floatValue(v20, v21, v22, v23);

  return objc_msgSend_valueWithVFXFloat3_(v5, v24, v25, v26, COERCE_DOUBLE(__PAIR64__(v28, v29)));
}

uint64_t sub_1B65A96B4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = (void *)MEMORY[0x1E4F29238];
  uint64_t v6 = objc_msgSend_objectAtIndexedSubscript_(a3, a2, 0, a4);
  objc_msgSend_floatValue(v6, v7, v8, v9);
  unsigned int v35 = v10;
  CFDataRef v13 = objc_msgSend_objectAtIndexedSubscript_(a3, v11, 1, v12);
  objc_msgSend_floatValue(v13, v14, v15, v16);
  unsigned int v34 = v17;
  uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(a3, v18, 2, v19);
  objc_msgSend_floatValue(v20, v21, v22, v23);
  uint64_t v26 = objc_msgSend_objectAtIndexedSubscript_(a3, v24, 3, v25);
  objc_msgSend_floatValue(v26, v27, v28, v29);

  return objc_msgSend_valueWithVFXFloat4_(v5, v30, v31, v32, COERCE_DOUBLE(__PAIR64__(v34, v35)));
}

uint64_t sub_1B65A975C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = (void *)MEMORY[0x1E4F29238];
  uint64_t v6 = objc_msgSend_objectAtIndexedSubscript_(a3, a2, 0, a4);
  objc_msgSend_floatValue(v6, v7, v8, v9);
  unsigned int v121 = v10;
  CFDataRef v13 = objc_msgSend_objectAtIndexedSubscript_(a3, v11, 1, v12);
  objc_msgSend_floatValue(v13, v14, v15, v16);
  unsigned int v118 = v17;
  uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(a3, v18, 2, v19);
  objc_msgSend_floatValue(v20, v21, v22, v23);
  uint64_t v26 = objc_msgSend_objectAtIndexedSubscript_(a3, v24, 3, v25);
  objc_msgSend_floatValue(v26, v27, v28, v29);
  double v122 = COERCE_DOUBLE(__PAIR64__(v118, v121));
  uint64_t v32 = objc_msgSend_objectAtIndexedSubscript_(a3, v30, 4, v31);
  objc_msgSend_floatValue(v32, v33, v34, v35);
  unsigned int v119 = v36;
  uint64_t v39 = objc_msgSend_objectAtIndexedSubscript_(a3, v37, 5, v38);
  objc_msgSend_floatValue(v39, v40, v41, v42);
  unsigned int v115 = v43;
  uint64_t v46 = objc_msgSend_objectAtIndexedSubscript_(a3, v44, 6, v45);
  objc_msgSend_floatValue(v46, v47, v48, v49);
  long long v52 = objc_msgSend_objectAtIndexedSubscript_(a3, v50, 7, v51);
  objc_msgSend_floatValue(v52, v53, v54, v55);
  double v120 = COERCE_DOUBLE(__PAIR64__(v115, v119));
  long long v58 = objc_msgSend_objectAtIndexedSubscript_(a3, v56, 8, v57);
  objc_msgSend_floatValue(v58, v59, v60, v61);
  unsigned int v116 = v62;
  unint64_t v65 = objc_msgSend_objectAtIndexedSubscript_(a3, v63, 9, v64);
  objc_msgSend_floatValue(v65, v66, v67, v68);
  unsigned int v113 = v69;
  long long v72 = objc_msgSend_objectAtIndexedSubscript_(a3, v70, 10, v71);
  objc_msgSend_floatValue(v72, v73, v74, v75);
  long long v78 = objc_msgSend_objectAtIndexedSubscript_(a3, v76, 11, v77);
  objc_msgSend_floatValue(v78, v79, v80, v81);
  double v117 = COERCE_DOUBLE(__PAIR64__(v113, v116));
  long long v84 = objc_msgSend_objectAtIndexedSubscript_(a3, v82, 12, v83);
  objc_msgSend_floatValue(v84, v85, v86, v87);
  unsigned int v114 = v88;
  uint64_t v91 = objc_msgSend_objectAtIndexedSubscript_(a3, v89, 13, v90);
  objc_msgSend_floatValue(v91, v92, v93, v94);
  unsigned int v112 = v95;
  unsigned int v98 = objc_msgSend_objectAtIndexedSubscript_(a3, v96, 14, v97);
  objc_msgSend_floatValue(v98, v99, v100, v101);
  id v104 = objc_msgSend_objectAtIndexedSubscript_(a3, v102, 15, v103);
  objc_msgSend_floatValue(v104, v105, v106, v107);

  return objc_msgSend_valueWithVFXMatrix4_(v5, v108, v109, v110, v122, v120, v117, COERCE_DOUBLE(__PAIR64__(v112, v114)));
}

uint64_t sub_1B65A9938(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  objc_msgSend_VFXFloat3Value(a1, a2, a3, a4);
  long long v17 = v4;
  v18[0] = objc_msgSend_numberWithFloat_(NSNumber, v5, v6, v7);
  HIDWORD(v8) = DWORD1(v17);
  LODWORD(v8) = DWORD1(v17);
  v18[1] = objc_msgSend_numberWithFloat_(NSNumber, v9, v10, v11, v8);
  v18[2] = objc_msgSend_numberWithFloat_(NSNumber, v12, v13, v14, COERCE_DOUBLE(__PAIR64__(DWORD1(v17), DWORD2(v17))));
  return objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v15, (uint64_t)v18, 3);
}

uint64_t sub_1B65A99DC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  objc_msgSend_VFXFloat4Value(a1, a2, a3, a4);
  long long v20 = v4;
  v21[0] = objc_msgSend_numberWithFloat_(NSNumber, v5, v6, v7);
  HIDWORD(v8) = DWORD1(v20);
  LODWORD(v8) = DWORD1(v20);
  v21[1] = objc_msgSend_numberWithFloat_(NSNumber, v9, v10, v11, v8);
  v21[2] = objc_msgSend_numberWithFloat_(NSNumber, v12, v13, v14, COERCE_DOUBLE(__PAIR64__(DWORD1(v20), DWORD2(v20))));
  void v21[3] = objc_msgSend_numberWithFloat_(NSNumber, v15, v16, v17, COERCE_DOUBLE(__PAIR64__(DWORD1(v20), HIDWORD(v20))));
  return objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v18, (uint64_t)v21, 4);
}

uint64_t sub_1B65A9A94(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v66[16] = *MEMORY[0x1E4F143B8];
  objc_msgSend_VFXMatrix4Value(a1, a2, a3, a4);
  long long v62 = v4;
  long long v63 = v5;
  long long v64 = v6;
  long long v65 = v7;
  v66[0] = objc_msgSend_numberWithFloat_(NSNumber, v8, v9, v10);
  HIDWORD(v11) = DWORD1(v62);
  LODWORD(v11) = DWORD1(v62);
  v66[1] = objc_msgSend_numberWithFloat_(NSNumber, v12, v13, v14, v11);
  v66[2] = objc_msgSend_numberWithFloat_(NSNumber, v15, v16, v17, COERCE_DOUBLE(__PAIR64__(DWORD1(v62), DWORD2(v62))));
  v66[3] = objc_msgSend_numberWithFloat_(NSNumber, v18, v19, v20, COERCE_DOUBLE(__PAIR64__(DWORD1(v62), HIDWORD(v62))));
  v66[4] = objc_msgSend_numberWithFloat_(NSNumber, v21, v22, v23, *(double *)&v63);
  HIDWORD(v24) = DWORD1(v63);
  LODWORD(v24) = DWORD1(v63);
  v66[5] = objc_msgSend_numberWithFloat_(NSNumber, v25, v26, v27, v24);
  v66[6] = objc_msgSend_numberWithFloat_(NSNumber, v28, v29, v30, COERCE_DOUBLE(__PAIR64__(DWORD1(v63), DWORD2(v63))));
  v66[7] = objc_msgSend_numberWithFloat_(NSNumber, v31, v32, v33, COERCE_DOUBLE(__PAIR64__(DWORD1(v63), HIDWORD(v63))));
  v66[8] = objc_msgSend_numberWithFloat_(NSNumber, v34, v35, v36, *(double *)&v64);
  HIDWORD(v37) = DWORD1(v64);
  LODWORD(v37) = DWORD1(v64);
  v66[9] = objc_msgSend_numberWithFloat_(NSNumber, v38, v39, v40, v37);
  v66[10] = objc_msgSend_numberWithFloat_(NSNumber, v41, v42, v43, COERCE_DOUBLE(__PAIR64__(DWORD1(v64), DWORD2(v64))));
  v66[11] = objc_msgSend_numberWithFloat_(NSNumber, v44, v45, v46, COERCE_DOUBLE(__PAIR64__(DWORD1(v64), HIDWORD(v64))));
  v66[12] = objc_msgSend_numberWithFloat_(NSNumber, v47, v48, v49, *(double *)&v65);
  HIDWORD(v50) = DWORD1(v65);
  LODWORD(v50) = DWORD1(v65);
  v66[13] = objc_msgSend_numberWithFloat_(NSNumber, v51, v52, v53, v50);
  v66[14] = objc_msgSend_numberWithFloat_(NSNumber, v54, v55, v56, COERCE_DOUBLE(__PAIR64__(DWORD1(v65), DWORD2(v65))));
  v66[15] = objc_msgSend_numberWithFloat_(NSNumber, v57, v58, v59, COERCE_DOUBLE(__PAIR64__(DWORD1(v65), HIDWORD(v65))));
  return objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v60, (uint64_t)v66, 16);
}

void *sub_1B65A9C34()
{
  return &unk_1F108B620;
}

uint64_t sub_1B65A9C40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_colorWithRed_green_blue_alpha_(MEMORY[0x1E4FB1618], a2, a3, a4);
}

double sub_1B65A9C4C(void *a1, const char *a2)
{
  return COERCE_FLOAT(objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, a2, 0, 0));
}

double sub_1B65A9C74(void *a1, const char *a2)
{
  return COERCE_FLOAT((unint64_t)objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, a2, 0, 0) >> 32);
}

double sub_1B65A9CA0(void *a1, const char *a2)
{
  objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, a2, 0, 0);
  return v2;
}

double sub_1B65A9CC8(void *a1, const char *a2)
{
  objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, a2, 0, 0);
  return v2;
}

uint64_t VFXExportJavaScriptModule(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  long long v5 = objc_msgSend_objectForKeyedSubscript_(a1, a2, @"_VFXIsLoaded", a4);
  if (!v5 || (uint64_t result = objc_msgSend_toBool(v5, v6, v7, v8), (result & 1) == 0))
  {
    uint64_t v10 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXWorld", v10);
    double v11 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXColor", v11);
    uint64_t v12 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"CAMediaTimingFunction", v12);
    uint64_t v13 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"CABasicAnimation", v13);
    uint64_t v14 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"CAAnimationGroup", v14);
    uint64_t v15 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"CAKeyframeAnimation", v15);
    uint64_t v16 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"CALayer", v16);
    uint64_t v17 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"NSValue", v17);
    uint64_t v18 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXImage", v18);
    uint64_t v19 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXView", v19);
    uint64_t v20 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXModel", v20);
    CFDataRef v21 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXMaterialProperty", v21);
    uint64_t v22 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXLight", v22);
    uint64_t v23 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXParametricModel", v23);
    double v24 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXMeshElement", v24);
    uint64_t v25 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXRenderer", v25);
    uint64_t v26 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXMorpher", v26);
    uint64_t v27 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXCamera", v27);
    uint64_t v28 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXLOD", v28);
    uint64_t v29 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXMaterial", v29);
    uint64_t v30 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXProgram", v30);
    uint64_t v31 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXConstraint", v31);
    uint64_t v32 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXPhysicsJoint", v32);
    uint64_t v33 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXMeshSource", v33);
    uint64_t v34 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXFloor", v34);
    uint64_t v35 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXShape", v35);
    uint64_t v36 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXText", v36);
    double v37 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXWorldLoader", v37);
    uint64_t v38 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXAnimationEvent", v38);
    uint64_t v39 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXModelTessellator", v39);
    uint64_t v40 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXForceField", v40);
    uint64_t v41 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXPhysicsBallSocketJoint", v41);
    uint64_t v42 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXPhysicsSliderJoint", v42);
    uint64_t v43 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXPhysicsContact", v43);
    long long v44 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXHitTestResult", v44);
    uint64_t v45 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXPhysicsShape", v45);
    uint64_t v46 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXPhysicsHingeJoint", v46);
    float32x4_t v47 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXIKConstraint", v47);
    uint64_t v48 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXLookAtConstraint", v48);
    uint64_t v49 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXPhysicsBody", v49);
    double v50 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXPhysicsWorld", v50);
    uint64_t v51 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXNode", v51);
    uint64_t v52 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXBoundingBox", v52);
    uint64_t v53 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXBoundingSphere", v53);
    uint64_t v54 = (objc_class *)objc_opt_class();
    sub_1B65AB3D8(a1, @"VFXTransaction", v54);
    uint64_t v58 = objc_msgSend_globalObject(a1, v55, v56, v57);
    uint64_t v61 = objc_msgSend_numberWithInt_(NSNumber, v59, 0, v60);
    objc_msgSend_setValue_forProperty_(v58, v62, v61, @"VFXEditingLocalSpace");
    uint64_t v66 = objc_msgSend_globalObject(a1, v63, v64, v65);
    uint64_t v69 = objc_msgSend_numberWithInt_(NSNumber, v67, 1, v68);
    objc_msgSend_setValue_forProperty_(v66, v70, v69, @"VFXEditingParentSpace");
    uint64_t v74 = objc_msgSend_globalObject(a1, v71, v72, v73);
    uint64_t v77 = objc_msgSend_numberWithInt_(NSNumber, v75, 2, v76);
    objc_msgSend_setValue_forProperty_(v74, v78, v77, @"VFXEditingWorldSpace");
    float v82 = objc_msgSend_globalObject(a1, v79, v80, v81);
    uint64_t v85 = objc_msgSend_numberWithInt_(NSNumber, v83, 3, v84);
    objc_msgSend_setValue_forProperty_(v82, v86, v85, @"VFXEditingScreenSpace");
    uint64_t v90 = objc_msgSend_globalObject(a1, v87, v88, v89);
    uint64_t v93 = objc_msgSend_numberWithInt_(NSNumber, v91, 0, v92);
    objc_msgSend_setValue_forProperty_(v90, v94, v93, @"VFXManipulatorPositionCenter");
    unsigned int v98 = objc_msgSend_globalObject(a1, v95, v96, v97);
    uint64_t v101 = objc_msgSend_numberWithInt_(NSNumber, v99, 1, v100);
    objc_msgSend_setValue_forProperty_(v98, v102, v101, @"VFXManipulatorPositionMin");
    uint64_t v106 = objc_msgSend_globalObject(a1, v103, v104, v105);
    uint64_t v109 = objc_msgSend_numberWithInt_(NSNumber, v107, 2, v108);
    objc_msgSend_setValue_forProperty_(v106, v110, v109, @"VFXManipulatorPositionMax");
    unsigned int v114 = objc_msgSend_globalObject(a1, v111, v112, v113);
    uint64_t v117 = objc_msgSend_numberWithInt_(NSNumber, v115, 0, v116);
    objc_msgSend_setValue_forProperty_(v114, v118, v117, @"VFXCameraProjectionDirectionVertical");
    double v122 = objc_msgSend_globalObject(a1, v119, v120, v121);
    uint64_t v125 = objc_msgSend_numberWithInt_(NSNumber, v123, 1, v124);
    objc_msgSend_setValue_forProperty_(v122, v126, v125, @"VFXCameraProjectionDirectionHorizontal");
    unsigned int v130 = objc_msgSend_globalObject(a1, v127, v128, v129);
    uint64_t v133 = objc_msgSend_numberWithInt_(NSNumber, v131, 0, v132);
    objc_msgSend_setValue_forProperty_(v130, v134, v133, @"VFXInteractionModeFly");
    uint64_t v138 = objc_msgSend_globalObject(a1, v135, v136, v137);
    uint64_t v141 = objc_msgSend_numberWithInt_(NSNumber, v139, 1, v140);
    objc_msgSend_setValue_forProperty_(v138, v142, v141, @"VFXInteractionModeOrbitTurntable");
    int v146 = objc_msgSend_globalObject(a1, v143, v144, v145);
    uint64_t v149 = objc_msgSend_numberWithInt_(NSNumber, v147, 2, v148);
    objc_msgSend_setValue_forProperty_(v146, v150, v149, @"VFXInteractionModeOrbitAngleMapping");
    uint64_t v154 = objc_msgSend_globalObject(a1, v151, v152, v153);
    uint64_t v157 = objc_msgSend_numberWithInt_(NSNumber, v155, 3, v156);
    objc_msgSend_setValue_forProperty_(v154, v158, v157, @"VFXInteractionModeOrbitCenteredArcball");
    uint64_t v162 = objc_msgSend_globalObject(a1, v159, v160, v161);
    uint64_t v165 = objc_msgSend_numberWithInt_(NSNumber, v163, 4, v164);
    objc_msgSend_setValue_forProperty_(v162, v166, v165, @"VFXInteractionModeOrbitArcball");
    uint64_t v170 = objc_msgSend_globalObject(a1, v167, v168, v169);
    uint64_t v173 = objc_msgSend_numberWithInt_(NSNumber, v171, 5, v172);
    objc_msgSend_setValue_forProperty_(v170, v174, v173, @"VFXInteractionModePan");
    uint64_t v178 = objc_msgSend_globalObject(a1, v175, v176, v177);
    uint64_t v181 = objc_msgSend_numberWithInt_(NSNumber, v179, 6, v180);
    objc_msgSend_setValue_forProperty_(v178, v182, v181, @"VFXInteractionModeTruck");
    uint64_t v186 = objc_msgSend_globalObject(a1, v183, v184, v185);
    uint64_t v189 = objc_msgSend_numberWithInt_(NSNumber, v187, 0, v188);
    objc_msgSend_setValue_forProperty_(v186, v190, v189, @"VFXCameraFillModeFit");
    uint64_t v194 = objc_msgSend_globalObject(a1, v191, v192, v193);
    uint64_t v197 = objc_msgSend_numberWithInt_(NSNumber, v195, 1, v196);
    objc_msgSend_setValue_forProperty_(v194, v198, v197, @"VFXCameraFillModeFill");
    uint64_t v202 = objc_msgSend_globalObject(a1, v199, v200, v201);
    uint64_t v205 = objc_msgSend_numberWithInt_(NSNumber, v203, 2, v204);
    objc_msgSend_setValue_forProperty_(v202, v206, v205, @"VFXCameraFillModeFitVertically");
    uint8x16_t v210 = objc_msgSend_globalObject(a1, v207, v208, v209);
    uint64_t v213 = objc_msgSend_numberWithInt_(NSNumber, v211, 3, v212);
    objc_msgSend_setValue_forProperty_(v210, v214, v213, @"VFXCameraFillModeFitHorizontally");
    uint64_t v218 = objc_msgSend_globalObject(a1, v215, v216, v217);
    uint64_t v221 = objc_msgSend_numberWithInt_(NSNumber, v219, 4, v220);
    objc_msgSend_setValue_forProperty_(v218, v222, v221, @"VFXCameraFillModeStretch");
    uint64_t v226 = objc_msgSend_globalObject(a1, v223, v224, v225);
    uint64_t v229 = objc_msgSend_numberWithInt_(NSNumber, v227, 0, v228);
    objc_msgSend_setValue_forProperty_(v226, v230, v229, @"VFXMeshPrimitiveTypeTriangles");
    uint64_t v234 = objc_msgSend_globalObject(a1, v231, v232, v233);
    uint64_t v237 = objc_msgSend_numberWithInt_(NSNumber, v235, 1, v236);
    objc_msgSend_setValue_forProperty_(v234, v238, v237, @"VFXMeshPrimitiveTypeTriangleStrip");
    uint64_t v242 = objc_msgSend_globalObject(a1, v239, v240, v241);
    uint64_t v245 = objc_msgSend_numberWithInt_(NSNumber, v243, 2, v244);
    objc_msgSend_setValue_forProperty_(v242, v246, v245, @"VFXMeshPrimitiveTypeLine");
    uint64_t v250 = objc_msgSend_globalObject(a1, v247, v248, v249);
    uint64_t v253 = objc_msgSend_numberWithInt_(NSNumber, v251, 3, v252);
    objc_msgSend_setValue_forProperty_(v250, v254, v253, @"VFXMeshPrimitiveTypePoint");
    uint64_t v258 = objc_msgSend_globalObject(a1, v255, v256, v257);
    uint64_t v261 = objc_msgSend_numberWithInt_(NSNumber, v259, 4, v260);
    objc_msgSend_setValue_forProperty_(v258, v262, v261, @"VFXMeshPrimitiveTypePolygon");
    uint64_t v266 = objc_msgSend_globalObject(a1, v263, v264, v265);
    uint64_t v269 = objc_msgSend_numberWithInt_(NSNumber, v267, 0, v268);
    objc_msgSend_setValue_forProperty_(v266, v270, v269, @"VFXTessellationSmoothingModeNone");
    uint64_t v274 = objc_msgSend_globalObject(a1, v271, v272, v273);
    uint64_t v277 = objc_msgSend_numberWithInt_(NSNumber, v275, 1, v276);
    objc_msgSend_setValue_forProperty_(v274, v278, v277, @"VFXTessellationSmoothingModePNTriangles");
    uint64_t v282 = objc_msgSend_globalObject(a1, v279, v280, v281);
    uint64_t v285 = objc_msgSend_numberWithInt_(NSNumber, v283, 2, v284);
    objc_msgSend_setValue_forProperty_(v282, v286, v285, @"VFXTessellationSmoothingModePhong");
    uint64_t v290 = objc_msgSend_globalObject(a1, v287, v288, v289);
    uint64_t v293 = objc_msgSend_numberWithInt_(NSNumber, v291, 0, v292);
    objc_msgSend_setValue_forProperty_(v290, v294, v293, @"VFXSubdivisionBoundaryInterpolationRuleNone");
    uint64_t v298 = objc_msgSend_globalObject(a1, v295, v296, v297);
    uint64_t v301 = objc_msgSend_numberWithInt_(NSNumber, v299, 1, v300);
    objc_msgSend_setValue_forProperty_(v298, v302, v301, @"VFXSubdivisionBoundaryInterpolationRuleEdgeOnly");
    uint64_t v306 = objc_msgSend_globalObject(a1, v303, v304, v305);
    uint64_t v309 = objc_msgSend_numberWithInt_(NSNumber, v307, 2, v308);
    objc_msgSend_setValue_forProperty_(v306, v310, v309, @"VFXSubdivisionBoundaryInterpolationRuleEdgeAndCorner");
    uint64_t v314 = objc_msgSend_globalObject(a1, v311, v312, v313);
    uint64_t v317 = objc_msgSend_numberWithInt_(NSNumber, v315, 0, v316);
    objc_msgSend_setValue_forProperty_(v314, v318, v317, @"VFXSubdivisionFaceVaryingInterpolationRuleLinearNone");
    uint64_t v322 = objc_msgSend_globalObject(a1, v319, v320, v321);
    uint64_t v325 = objc_msgSend_numberWithInt_(NSNumber, v323, 1, v324);
    objc_msgSend_setValue_forProperty_(v322, v326, v325, @"VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersOnly");
    std::string v330 = objc_msgSend_globalObject(a1, v327, v328, v329);
    uint64_t v333 = objc_msgSend_numberWithInt_(NSNumber, v331, 2, v332);
    objc_msgSend_setValue_forProperty_(v330, v334, v333, @"VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus1");
    char v338 = objc_msgSend_globalObject(a1, v335, v336, v337);
    uint64_t v341 = objc_msgSend_numberWithInt_(NSNumber, v339, 3, v340);
    objc_msgSend_setValue_forProperty_(v338, v342, v341, @"VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus2");
    uint64_t v346 = objc_msgSend_globalObject(a1, v343, v344, v345);
    uint64_t v349 = objc_msgSend_numberWithInt_(NSNumber, v347, 4, v348);
    objc_msgSend_setValue_forProperty_(v346, v350, v349, @"VFXSubdivisionFaceVaryingInterpolationRuleLinearBoundaries");
    uint64_t v354 = objc_msgSend_globalObject(a1, v351, v352, v353);
    uint64_t v357 = objc_msgSend_numberWithInt_(NSNumber, v355, 5, v356);
    objc_msgSend_setValue_forProperty_(v354, v358, v357, @"VFXSubdivisionFaceVaryingInterpolationRuleLinearAll");
    uint64_t v362 = objc_msgSend_globalObject(a1, v359, v360, v361);
    uint64_t v365 = objc_msgSend_numberWithInt_(NSNumber, v363, 0, v364);
    objc_msgSend_setValue_forProperty_(v362, v366, v365, @"VFXSubdivisionNormalSmoothingModeCrossTriangle");
    uint64_t v370 = objc_msgSend_globalObject(a1, v367, v368, v369);
    uint64_t v373 = objc_msgSend_numberWithInt_(NSNumber, v371, 1, v372);
    objc_msgSend_setValue_forProperty_(v370, v374, v373, @"VFXSubdivisionNormalSmoothingModeCrossQuad");
    uint64_t v378 = objc_msgSend_globalObject(a1, v375, v376, v377);
    uint64_t v381 = objc_msgSend_numberWithInt_(NSNumber, v379, 2, v380);
    objc_msgSend_setValue_forProperty_(v378, v382, v381, @"VFXSubdivisionNormalSmoothingModeLimit");
    uint64_t v386 = objc_msgSend_globalObject(a1, v383, v384, v385);
    uint64_t v389 = objc_msgSend_numberWithInt_(NSNumber, v387, 0, v388);
    objc_msgSend_setValue_forProperty_(v386, v390, v389, @"VFXHitTestSearchModeClosest");
    uint64_t v394 = objc_msgSend_globalObject(a1, v391, v392, v393);
    uint64_t v397 = objc_msgSend_numberWithInt_(NSNumber, v395, 1, v396);
    objc_msgSend_setValue_forProperty_(v394, v398, v397, @"VFXHitTestSearchModeAll");
    uint64_t v402 = objc_msgSend_globalObject(a1, v399, v400, v401);
    uint64_t v405 = objc_msgSend_numberWithInt_(NSNumber, v403, 2, v404);
    objc_msgSend_setValue_forProperty_(v402, v406, v405, @"VFXHitTestSearchModeAny");
    v410 = objc_msgSend_globalObject(a1, v407, v408, v409);
    uint64_t v413 = objc_msgSend_numberWithInt_(NSNumber, v411, 0, v412);
    objc_msgSend_setValue_forProperty_(v410, v414, v413, @"VFXLODThresholdModeWorldSpaceDistance");
    uint64_t v418 = objc_msgSend_globalObject(a1, v415, v416, v417);
    uint64_t v421 = objc_msgSend_numberWithInt_(NSNumber, v419, 1, v420);
    objc_msgSend_setValue_forProperty_(v418, v422, v421, @"VFXLODThresholdModeScreenSpaceRadius");
    uint64_t v426 = objc_msgSend_globalObject(a1, v423, v424, v425);
    uint64_t v429 = objc_msgSend_numberWithInt_(NSNumber, v427, 0, v428);
    objc_msgSend_setValue_forProperty_(v426, v430, v429, @"VFXMorpherCalculationModeNormalized");
    uint64_t v434 = objc_msgSend_globalObject(a1, v431, v432, v433);
    uint64_t v437 = objc_msgSend_numberWithInt_(NSNumber, v435, 1, v436);
    objc_msgSend_setValue_forProperty_(v434, v438, v437, @"VFXMorpherCalculationModeAdditive");
    v442 = objc_msgSend_globalObject(a1, v439, v440, v441);
    uint64_t v445 = objc_msgSend_numberWithInt_(NSNumber, v443, 0, v444);
    objc_msgSend_setValue_forProperty_(v442, v446, v445, @"VFXChamferModeBoth");
    uint64_t v450 = objc_msgSend_globalObject(a1, v447, v448, v449);
    uint64_t v453 = objc_msgSend_numberWithInt_(NSNumber, v451, 1, v452);
    objc_msgSend_setValue_forProperty_(v450, v454, v453, @"VFXChamferModeFront");
    uint64_t v458 = objc_msgSend_globalObject(a1, v455, v456, v457);
    uint64_t v461 = objc_msgSend_numberWithInt_(NSNumber, v459, 2, v460);
    objc_msgSend_setValue_forProperty_(v458, v462, v461, @"VFXChamferModeBack");
    int v466 = objc_msgSend_globalObject(a1, v463, v464, v465);
    uint64_t v469 = objc_msgSend_numberWithInt_(NSNumber, v467, 0, v468);
    objc_msgSend_setValue_forProperty_(v466, v470, v469, @"VFXReferenceLoadingPolicyImmediate");
    uint64_t v474 = objc_msgSend_globalObject(a1, v471, v472, v473);
    uint64_t v477 = objc_msgSend_numberWithInt_(NSNumber, v475, 1, v476);
    objc_msgSend_setValue_forProperty_(v474, v478, v477, @"VFXReferenceLoadingPolicyOnDemand");
    CFIndex v482 = objc_msgSend_globalObject(a1, v479, v480, v481);
    uint64_t v485 = objc_msgSend_numberWithInt_(NSNumber, v483, 0, v484);
    objc_msgSend_setValue_forProperty_(v482, v486, v485, @"VFXAntialiasingModeNone");
    uint64_t v490 = objc_msgSend_globalObject(a1, v487, v488, v489);
    uint64_t v493 = objc_msgSend_numberWithInt_(NSNumber, v491, 1, v492);
    objc_msgSend_setValue_forProperty_(v490, v494, v493, @"VFXAntialiasingModeMultisampling2X");
    uint64_t v498 = objc_msgSend_globalObject(a1, v495, v496, v497);
    uint64_t v501 = objc_msgSend_numberWithInt_(NSNumber, v499, 2, v500);
    objc_msgSend_setValue_forProperty_(v498, v502, v501, @"VFXAntialiasingModeMultisampling4X");
    uint64_t v506 = objc_msgSend_globalObject(a1, v503, v504, v505);
    uint64_t v509 = objc_msgSend_numberWithInt_(NSNumber, v507, 4, v508);
    objc_msgSend_setValue_forProperty_(v506, v510, v509, @"VFXWorldLoaderStatusParsing");
    uint64_t v514 = objc_msgSend_globalObject(a1, v511, v512, v513);
    uint64_t v517 = objc_msgSend_numberWithInt_(NSNumber, v515, 8, v516);
    objc_msgSend_setValue_forProperty_(v514, v518, v517, @"VFXWorldLoaderStatusValidating");
    CFDataRef v522 = objc_msgSend_globalObject(a1, v519, v520, v521);
    uint64_t v525 = objc_msgSend_numberWithInt_(NSNumber, v523, 12, v524);
    objc_msgSend_setValue_forProperty_(v522, v526, v525, @"VFXWorldLoaderStatusProcessing");
    uint64_t v530 = objc_msgSend_globalObject(a1, v527, v528, v529);
    uint64_t v533 = objc_msgSend_numberWithInt_(NSNumber, v531, 16, v532);
    objc_msgSend_setValue_forProperty_(v530, v534, v533, @"VFXWorldLoaderStatusComplete");
    v538 = objc_msgSend_globalObject(a1, v535, v536, v537);
    uint64_t v541 = objc_msgSend_numberWithInt_(NSNumber, v539, 0xFFFFFFFFLL, v540);
    objc_msgSend_setValue_forProperty_(v538, v542, v541, @"VFXWorldLoaderStatusError");
    v546 = objc_msgSend_globalObject(a1, v543, v544, v545);
    uint64_t v549 = objc_msgSend_numberWithInt_(NSNumber, v547, 0, v548);
    objc_msgSend_setValue_forProperty_(v546, v550, v549, @"VFXCullModeBack");
    uint64_t v554 = objc_msgSend_globalObject(a1, v551, v552, v553);
    uint64_t v557 = objc_msgSend_numberWithInt_(NSNumber, v555, 1, v556);
    objc_msgSend_setValue_forProperty_(v554, v558, v557, @"VFXCullModeFront");
    CFArrayRef v562 = objc_msgSend_globalObject(a1, v559, v560, v561);
    uint64_t v565 = objc_msgSend_numberWithInt_(NSNumber, v563, 0, v564);
    objc_msgSend_setValue_forProperty_(v562, v566, v565, @"VFXBufferFrequencyPerFrame");
    CFIndex v570 = objc_msgSend_globalObject(a1, v567, v568, v569);
    uint64_t v573 = objc_msgSend_numberWithInt_(NSNumber, v571, 1, v572);
    objc_msgSend_setValue_forProperty_(v570, v574, v573, @"VFXBufferFrequencyPerNode");
    uint64_t v578 = objc_msgSend_globalObject(a1, v575, v576, v577);
    uint64_t v581 = objc_msgSend_numberWithInt_(NSNumber, v579, 2, v580);
    objc_msgSend_setValue_forProperty_(v578, v582, v581, @"VFXBufferFrequencyPerShadable");
    uint64_t v586 = objc_msgSend_globalObject(a1, v583, v584, v585);
    uint64_t v589 = objc_msgSend_numberWithInt_(NSNumber, v587, 0, v588);
    objc_msgSend_setValue_forProperty_(v586, v590, v589, @"VFXFillModeFill");
    uint64_t v594 = objc_msgSend_globalObject(a1, v591, v592, v593);
    uint64_t v597 = objc_msgSend_numberWithInt_(NSNumber, v595, 1, v596);
    objc_msgSend_setValue_forProperty_(v594, v598, v597, @"VFXFillModeLines");
    CFArrayRef v602 = objc_msgSend_globalObject(a1, v599, v600, v601);
    uint64_t v605 = objc_msgSend_numberWithInt_(NSNumber, v603, 0, v604);
    objc_msgSend_setValue_forProperty_(v602, v606, v605, @"VFXCullModeBack");
    uint64_t v610 = objc_msgSend_globalObject(a1, v607, v608, v609);
    uint64_t v613 = objc_msgSend_numberWithInt_(NSNumber, v611, 1, v612);
    objc_msgSend_setValue_forProperty_(v610, v614, v613, @"VFXCullModeFront");
    uint64_t v618 = objc_msgSend_globalObject(a1, v615, v616, v617);
    uint64_t v621 = objc_msgSend_numberWithInt_(NSNumber, v619, 0, v620);
    objc_msgSend_setValue_forProperty_(v618, v622, v621, @"VFXTransparencyModeDefault");
    uint64_t v626 = objc_msgSend_globalObject(a1, v623, v624, v625);
    uint64_t v629 = objc_msgSend_numberWithInt_(NSNumber, v627, 1, v628);
    objc_msgSend_setValue_forProperty_(v626, v630, v629, @"VFXTransparencyModeSingleLayer");
    uint64_t v634 = objc_msgSend_globalObject(a1, v631, v632, v633);
    uint64_t v637 = objc_msgSend_numberWithInt_(NSNumber, v635, 2, v636);
    objc_msgSend_setValue_forProperty_(v634, v638, v637, @"VFXTransparencyModeDualLayer");
    uint64_t v642 = objc_msgSend_globalObject(a1, v639, v640, v641);
    uint64_t v645 = objc_msgSend_numberWithInt_(NSNumber, v643, 1, v644);
    objc_msgSend_setValue_forProperty_(v642, v646, v645, @"VFXBlendModeAlpha");
    uint64_t v650 = objc_msgSend_globalObject(a1, v647, v648, v649);
    uint64_t v653 = objc_msgSend_numberWithInt_(NSNumber, v651, 2, v652);
    objc_msgSend_setValue_forProperty_(v650, v654, v653, @"VFXBlendModeAdd");
    uint64_t v658 = objc_msgSend_globalObject(a1, v655, v656, v657);
    uint64_t v661 = objc_msgSend_numberWithInt_(NSNumber, v659, 3, v660);
    objc_msgSend_setValue_forProperty_(v658, v662, v661, @"VFXBlendModeSubtract");
    uint64_t v666 = objc_msgSend_globalObject(a1, v663, v664, v665);
    uint64_t v669 = objc_msgSend_numberWithInt_(NSNumber, v667, 4, v668);
    objc_msgSend_setValue_forProperty_(v666, v670, v669, @"VFXBlendModeMultiply");
    CFIndex v674 = objc_msgSend_globalObject(a1, v671, v672, v673);
    uint64_t v677 = objc_msgSend_numberWithInt_(NSNumber, v675, 5, v676);
    objc_msgSend_setValue_forProperty_(v674, v678, v677, @"VFXBlendModeScreen");
    uint64_t v682 = objc_msgSend_globalObject(a1, v679, v680, v681);
    uint64_t v685 = objc_msgSend_numberWithInt_(NSNumber, v683, 0, v684);
    objc_msgSend_setValue_forProperty_(v682, v686, v685, @"VFXBlendModeOpaque");
    uint64_t v690 = objc_msgSend_globalObject(a1, v687, v688, v689);
    uint64_t v693 = objc_msgSend_numberWithInt_(NSNumber, v691, 6, v692);
    objc_msgSend_setValue_forProperty_(v690, v694, v693, @"VFXBlendModeMax");
    uint64_t v698 = objc_msgSend_globalObject(a1, v695, v696, v697);
    uint64_t v701 = objc_msgSend_numberWithInt_(NSNumber, v699, 0, v700);
    objc_msgSend_setValue_forProperty_(v698, v702, v701, @"VFXFilterModeNone");
    uint64_t v706 = objc_msgSend_globalObject(a1, v703, v704, v705);
    uint64_t v709 = objc_msgSend_numberWithInt_(NSNumber, v707, 1, v708);
    objc_msgSend_setValue_forProperty_(v706, v710, v709, @"VFXFilterModeNearest");
    uint64_t v714 = objc_msgSend_globalObject(a1, v711, v712, v713);
    uint64_t v717 = objc_msgSend_numberWithInt_(NSNumber, v715, 2, v716);
    objc_msgSend_setValue_forProperty_(v714, v718, v717, @"VFXFilterModeLinear");
    uint64_t v722 = objc_msgSend_globalObject(a1, v719, v720, v721);
    uint64_t v725 = objc_msgSend_numberWithInt_(NSNumber, v723, 1, v724);
    objc_msgSend_setValue_forProperty_(v722, v726, v725, @"VFXWrapModeClamp");
    uint64_t v730 = objc_msgSend_globalObject(a1, v727, v728, v729);
    uint64_t v733 = objc_msgSend_numberWithInt_(NSNumber, v731, 2, v732);
    objc_msgSend_setValue_forProperty_(v730, v734, v733, @"VFXWrapModeRepeat");
    float v738 = objc_msgSend_globalObject(a1, v735, v736, v737);
    uint64_t v741 = objc_msgSend_numberWithInt_(NSNumber, v739, 3, v740);
    objc_msgSend_setValue_forProperty_(v738, v742, v741, @"VFXWrapModeClampToBorder");
    uint64_t v746 = objc_msgSend_globalObject(a1, v743, v744, v745);
    uint64_t v749 = objc_msgSend_numberWithInt_(NSNumber, v747, 4, v748);
    objc_msgSend_setValue_forProperty_(v746, v750, v749, @"VFXWrapModeMirror");
    uint64_t v754 = objc_msgSend_globalObject(a1, v751, v752, v753);
    uint64_t v757 = objc_msgSend_numberWithInt_(NSNumber, v755, 0, v756);
    objc_msgSend_setValue_forProperty_(v754, v758, v757, @"VFXPhysicsBodyTypeStatic");
    CFArrayRef v762 = objc_msgSend_globalObject(a1, v759, v760, v761);
    uint64_t v765 = objc_msgSend_numberWithInt_(NSNumber, v763, 1, v764);
    objc_msgSend_setValue_forProperty_(v762, v766, v765, @"VFXPhysicsBodyTypeDynamic");
    uint64_t v770 = objc_msgSend_globalObject(a1, v767, v768, v769);
    uint64_t v773 = objc_msgSend_numberWithInt_(NSNumber, v771, 2, v772);
    objc_msgSend_setValue_forProperty_(v770, v774, v773, @"VFXPhysicsBodyTypeKinematic");
    uint64_t v778 = objc_msgSend_globalObject(a1, v775, v776, v777);
    uint64_t v781 = objc_msgSend_numberWithInt_(NSNumber, v779, 0, v780);
    objc_msgSend_setValue_forProperty_(v778, v782, v781, @"VFXForceFieldScopeInsideExtent");
    uint64_t v786 = objc_msgSend_globalObject(a1, v783, v784, v785);
    uint64_t v789 = objc_msgSend_numberWithInt_(NSNumber, v787, 1, v788);
    objc_msgSend_setValue_forProperty_(v786, v790, v789, @"VFXForceFieldScopeOutsideExtent");
    uint64_t v794 = objc_msgSend_globalObject(a1, v791, v792, v793);
    uint64_t v797 = objc_msgSend_numberWithInt_(NSNumber, v795, 0, v796);
    objc_msgSend_setValue_forProperty_(v794, v798, v797, @"VFXForceFieldShapeNone");
    uint64_t v802 = objc_msgSend_globalObject(a1, v799, v800, v801);
    uint64_t v805 = objc_msgSend_numberWithInt_(NSNumber, v803, 1, v804);
    objc_msgSend_setValue_forProperty_(v802, v806, v805, @"VFXForceFieldShapeBox");
    uint64_t v810 = objc_msgSend_globalObject(a1, v807, v808, v809);
    uint64_t v813 = objc_msgSend_numberWithInt_(NSNumber, v811, 2, v812);
    objc_msgSend_setValue_forProperty_(v810, v814, v813, @"VFXForceFieldShapeSphere");
    uint64_t v818 = objc_msgSend_globalObject(a1, v815, v816, v817);
    uint64_t v821 = objc_msgSend_numberWithInt_(NSNumber, v819, 3, v820);
    objc_msgSend_setValue_forProperty_(v818, v822, v821, @"VFXForceFieldShapeCone");
    CFIndex v826 = objc_msgSend_globalObject(a1, v823, v824, v825);
    uint64_t v829 = objc_msgSend_numberWithInt_(NSNumber, v827, 4, v828);
    objc_msgSend_setValue_forProperty_(v826, v830, v829, @"VFXForceFieldShapeTube");
    uint64_t v834 = objc_msgSend_globalObject(a1, v831, v832, v833);
    uint64_t v838 = objc_msgSend_numberWithInt_(NSNumber, v835, 1, v836);
    return objc_msgSend_setValue_forProperty_(v834, v837, v838, @"_VFXIsLoaded");
  }
  return result;
}

uint64_t sub_1B65AB3D8(void *a1, void *a2, objc_class *a3)
{
  uint64_t result = objc_opt_class();
  if ((objc_class *)result != a3)
  {
    Superclass = class_getSuperclass(a3);
    if (Superclass)
    {
      double v11 = Superclass;
      uint64_t v12 = NSStringFromClass(Superclass);
      sub_1B65AB3D8(a1, v12, v11);
    }
    uint64_t v13 = objc_msgSend_globalObject(a1, v8, v9, v10);
    uint64_t v16 = objc_msgSend_valueForProperty_(v13, v14, (uint64_t)a2, v15);
    uint64_t result = objc_msgSend_isUndefined(v16, v17, v18, v19);
    if (result)
    {
      if (objc_msgSend_hasPrefix_(a2, v20, @"CA", v21))
      {
        double v24 = NSString;
        uint64_t v47 = objc_msgSend_substringFromIndex_(a2, v22, 2, v23);
        uint64_t v27 = objc_msgSend_stringWithFormat_(v24, v25, @"VFXJS%@JSExport", v26, v47);
      }
      else
      {
        int hasPrefix = objc_msgSend_hasPrefix_(a2, v22, @"NS", v23);
        uint64_t v34 = NSString;
        if (hasPrefix)
        {
          uint64_t v48 = objc_msgSend_substringFromIndex_(a2, v32, 2, v33);
          uint64_t v27 = objc_msgSend_stringWithFormat_(v34, v35, @"VFX%@JSExport", v36, v48);
        }
        else
        {
          uint64_t v27 = objc_msgSend_stringWithFormat_(NSString, v32, @"%@JSExport", v33, a2);
        }
      }
      double v37 = (const char *)objc_msgSend_UTF8String(v27, v28, v29, v30);
      Protocol = objc_getProtocol(v37);
      if (Protocol
        || (uint64_t result = objc_opt_respondsToSelector(), (result & 1) != 0)
        && (uint64_t result = objc_msgSend_VFXJSExportProtocol(a3, v44, v45, v46), (Protocol = (Protocol *)result) != 0))
      {
        class_addProtocol(a3, Protocol);
        uint64_t v42 = objc_msgSend_globalObject(a1, v39, v40, v41);
        return objc_msgSend_setValue_forProperty_(v42, v43, (uint64_t)a3, (uint64_t)a2);
      }
    }
  }
  return result;
}

void sub_1B65B4264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1B65C21B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65B42A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 56) = objc_msgSend_newSceneWithURL_((void *)qword_1E9DDBB20, a2, (uint64_t)a2, a4);
  uint64_t v7 = objc_msgSend_stringWithFormat_(NSString, v5, @"VFX export preview %.02f", v6, 0x3FE51EB860000000);
  uint64_t v8 = *(void **)(a1 + 56);
  uint64_t v11 = objc_msgSend_dataWithString_(VFXUSKData_helper, v9, v7, v10);
  objc_msgSend_setDictionaryMetadataWithKey_dictionaryKey_value_(v8, v12, @"customLayerData", @"creator", v11);
  uint64_t v15 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v13, *(void *)(a1 + 24), v14);
  uint64_t v17 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v16, *(void *)(a1 + 56), v15, qword_1E9DDBC20);
  uint64_t v20 = objc_msgSend_dataWithString_(VFXUSKData_helper, v18, *(void *)(a1 + 8), v19);
  objc_msgSend_setDictionaryMetadataWithKey_dictionaryKey_value_(v17, v21, @"assetInfo", @"name", v20);
  uint64_t v24 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v22, @"component", v23);
  uint64_t v27 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v25, v24, v26);
  objc_msgSend_setMetadataWithKey_value_(v17, v28, @"kind", v27);
  uint64_t v29 = *(void **)(a1 + 56);
  uint64_t v32 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v30, *(void *)(a1 + 8), v31);
  uint64_t v35 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v33, v32, v34);
  objc_msgSend_setMetadataWithKey_value_(v29, v36, @"defaultPrim", v35);
  double v37 = *(void **)(a1 + 56);
  uint64_t v40 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v38, @"Y", v39);
  uint64_t v43 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v41, v40, v42);
  objc_msgSend_setMetadataWithKey_value_(v37, v44, @"upAxis", v43);
  uint64_t v48 = objc_msgSend_worldRef(*(void **)a1, v45, v46, v47);
  float v56 = sub_1B64B23EC(v48, v49, v50, v51, v52, v53, v54, v55);
  uint64_t v57 = *(void **)(a1 + 56);
  uint64_t v61 = objc_msgSend_dataWithDouble_(VFXUSKData_helper, v58, v59, v60, v56);
  objc_msgSend_setMetadataWithKey_value_(v57, v62, @"metersPerUnit", v61);
  sub_1B65B5554(a1, v63, v64, v65);
  sub_1B65B5810((void **)a1, v66, v67, v68);
  long long v144 = 0u;
  long long v145 = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  uint64_t v72 = objc_msgSend_rootNode(*(void **)a1, v69, v70, v71);
  uint64_t v76 = objc_msgSend_childNodes(v72, v73, v74, v75);
  uint64_t v78 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v77, (uint64_t)&v142, (uint64_t)v147, 16);
  if (v78)
  {
    uint64_t v81 = v78;
    uint64_t v82 = *(void *)v143;
    do
    {
      for (uint64_t i = 0; i != v81; ++i)
      {
        if (*(void *)v143 != v82) {
          objc_enumerationMutation(v76);
        }
        sub_1B65B5904((double *)a1, *(void **)(*((void *)&v142 + 1) + 8 * i), v79, v80);
      }
      uint64_t v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v84, (uint64_t)&v142, (uint64_t)v147, 16);
    }
    while (v81);
  }
  sub_1B65B5A70(a1);
  long long v140 = 0u;
  long long v141 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  uint64_t v88 = objc_msgSend_rootNode(*(void **)a1, v85, v86, v87);
  uint64_t v92 = objc_msgSend_childNodes(v88, v89, v90, v91);
  uint64_t v94 = objc_msgSend_countByEnumeratingWithState_objects_count_(v92, v93, (uint64_t)&v138, (uint64_t)v146, 16);
  if (v94)
  {
    uint64_t v98 = v94;
    uint64_t v99 = *(void *)v139;
    do
    {
      for (uint64_t j = 0; j != v98; ++j)
      {
        if (*(void *)v139 != v99) {
          objc_enumerationMutation(v92);
        }
        uint64_t v101 = *(void **)(*((void *)&v138 + 1) + 8 * j);
        uint64_t v102 = (char *)sub_1B65B6090(a1, v95, v96, v97);
        sub_1B65B5B84(a1, v101, v102, 0, 0);
      }
      uint64_t v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v92, v95, (uint64_t)&v138, (uint64_t)v146, 16);
    }
    while (v98);
  }
  sub_1B65B60FC((void **)a1, v95, v96, v97);
  sub_1B65B61F0((uint64_t **)(a1 + 440), v103);
  sub_1B65B6278(a1, v104, v105, v106);
  if (*(double *)(a1 + 472) > 0.0)
  {
    objc_msgSend_startTime(*(void **)a1, v107, v108, v109);
    double v114 = v113 / *(double *)(a1 + 504) + 0.0;
    double v115 = (double)(int)v114;
    if (vabdd_f64(v114, v115) >= 0.001)
    {
      if (1.0 - (v114 - v115) < 0.001) {
        double v114 = v115 + 1.0;
      }
    }
    else
    {
      double v114 = (double)(int)v114;
    }
    objc_msgSend_endTime(*(void **)a1, v110, v111, v112);
    double v120 = v119 / *(double *)(a1 + 504) + 0.0;
    double v121 = (double)(int)v120;
    if (vabdd_f64(v120, v121) >= 0.001)
    {
      if (1.0 - (v120 - v121) < 0.001) {
        double v120 = v121 + 1.0;
      }
    }
    else
    {
      double v120 = (double)(int)v120;
    }
    double v122 = *(double *)(a1 + 464);
    if (v122 == -1.0 || v122 > v114)
    {
      *(double *)(a1 + 464) = v114;
      double v122 = v114;
    }
    double v123 = *(double *)(a1 + 472);
    if (v123 == -1.0 || v123 < v120) {
      *(double *)(a1 + 472) = v120;
    }
    uint64_t v124 = *(void **)(a1 + 56);
    uint64_t v125 = objc_msgSend_dataWithDouble_(VFXUSKData_helper, v116, v117, v118, v122);
    objc_msgSend_setMetadataWithKey_value_(v124, v126, @"startTimeCode", v125);
    __int16 v127 = *(void **)(a1 + 56);
    uint64_t v131 = objc_msgSend_dataWithDouble_(VFXUSKData_helper, v128, v129, v130, *(double *)(a1 + 472));
    objc_msgSend_setMetadataWithKey_value_(v127, v132, @"endTimeCode", v131);
  }
  uint64_t v133 = *(unsigned int *)(a1 + 480);
  if ((int)v133 >= 1)
  {
    uint64_t v134 = *(void **)(a1 + 56);
    uint64_t v135 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v107, v133, v109);
    objc_msgSend_setMetadataWithKey_value_(v134, v136, @"timeCodesPerSecond", v135);
  }
  return *(void *)(a1 + 56);
}

void sub_1B65B4774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = dlopen("/System/Library/PrivateFrameworks/USDKit.framework/USDKit", 2);
  if (v9 || (uint64_t v9 = dlopen("../SharedFrameworks/USDKit.framework/USDKit", 2)) != 0)
  {
    qword_1E9DDBB00 = (uint64_t)NSClassFromString(&cfstr_Uskobjectpath.isa);
    qword_1E9DDBAF8 = (uint64_t)NSClassFromString(&cfstr_Usktoken.isa);
    qword_1E9DDBB08 = (uint64_t)NSClassFromString(&cfstr_Uskdata.isa);
    qword_1E9DDBB20 = (uint64_t)NSClassFromString(&cfstr_Uskscene.isa);
    uint64_t v16 = (uint64_t *)dlsym(v9, "USKDataTypeResourcePath");
    if (v16) {
      uint64_t v17 = *v16;
    }
    else {
      uint64_t v17 = 0;
    }
    qword_1E9DDBB28 = v17;
    uint64_t v18 = (uint64_t *)dlsym(v9, "USKDataTypeInt");
    if (v18) {
      uint64_t v19 = *v18;
    }
    else {
      uint64_t v19 = 0;
    }
    qword_1E9DDBB30 = v19;
    uint64_t v20 = (uint64_t *)dlsym(v9, "USKDataTypeBool");
    if (v20) {
      uint64_t v21 = *v20;
    }
    else {
      uint64_t v21 = 0;
    }
    qword_1E9DDBB38 = v21;
    uint64_t v22 = (uint64_t *)dlsym(v9, "USKDataTypeDouble3");
    if (v22) {
      uint64_t v23 = *v22;
    }
    else {
      uint64_t v23 = 0;
    }
    qword_1E9DDBB40 = v23;
    uint64_t v24 = (uint64_t *)dlsym(v9, "USKDataTypeDouble4x4");
    if (v24) {
      uint64_t v25 = *v24;
    }
    else {
      uint64_t v25 = 0;
    }
    qword_1E9DDBB48 = v25;
    uint64_t v26 = (uint64_t *)dlsym(v9, "USKDataTypeDouble4x4Array");
    if (v26) {
      uint64_t v27 = *v26;
    }
    else {
      uint64_t v27 = 0;
    }
    qword_1E9DDBB50 = v27;
    uint64_t v28 = (uint64_t *)dlsym(v9, "USKDataTypeFloat");
    if (v28) {
      uint64_t v29 = *v28;
    }
    else {
      uint64_t v29 = 0;
    }
    qword_1E9DDBB58 = v29;
    uint64_t v30 = (uint64_t *)dlsym(v9, "USKDataTypeFloat2");
    if (v30) {
      uint64_t v31 = *v30;
    }
    else {
      uint64_t v31 = 0;
    }
    qword_1E9DDBB60 = v31;
    uint64_t v32 = (uint64_t *)dlsym(v9, "USKDataTypeFloat3");
    if (v32) {
      uint64_t v33 = *v32;
    }
    else {
      uint64_t v33 = 0;
    }
    qword_1E9DDBB68 = v33;
    uint64_t v34 = (uint64_t *)dlsym(v9, "USKDataTypeFloat4");
    if (v34) {
      uint64_t v35 = *v34;
    }
    else {
      uint64_t v35 = 0;
    }
    qword_1E9DDBB70 = v35;
    uint64_t v36 = (uint64_t *)dlsym(v9, "USKDataTypeFloat2Array");
    if (v36) {
      uint64_t v37 = *v36;
    }
    else {
      uint64_t v37 = 0;
    }
    qword_1E9DDBB78 = v37;
    uint64_t v38 = (uint64_t *)dlsym(v9, "USKDataTypeFloat3Array");
    if (v38) {
      uint64_t v39 = *v38;
    }
    else {
      uint64_t v39 = 0;
    }
    qword_1E9DDBB80 = v39;
    uint64_t v40 = (uint64_t *)dlsym(v9, "USKDataTypeFloatArray");
    if (v40) {
      uint64_t v41 = *v40;
    }
    else {
      uint64_t v41 = 0;
    }
    qword_1E9DDBB88 = v41;
    uint64_t v42 = (uint64_t *)dlsym(v9, "USKDataTypeIntArray");
    if (v42) {
      uint64_t v43 = *v42;
    }
    else {
      uint64_t v43 = 0;
    }
    qword_1E9DDBB90 = v43;
    long long v44 = (uint64_t *)dlsym(v9, "USKDataTypeObjectPath");
    if (v44) {
      uint64_t v45 = *v44;
    }
    else {
      uint64_t v45 = 0;
    }
    qword_1E9DDBB98 = v45;
    uint64_t v46 = (uint64_t *)dlsym(v9, "USKDataTypeObjectPathArray");
    if (v46) {
      uint64_t v47 = *v46;
    }
    else {
      uint64_t v47 = 0;
    }
    qword_1E9DDBBA0 = v47;
    uint64_t v48 = (uint64_t *)dlsym(v9, "USKDataTypeQuatf");
    if (v48) {
      uint64_t v49 = *v48;
    }
    else {
      uint64_t v49 = 0;
    }
    qword_1E9DDBBA8 = v49;
    uint64_t v50 = (uint64_t *)dlsym(v9, "USKDataTypeQuatfArray");
    if (v50) {
      uint64_t v51 = *v50;
    }
    else {
      uint64_t v51 = 0;
    }
    qword_1E9DDBBB0 = v51;
    uint64_t v52 = (uint64_t *)dlsym(v9, "USKDataTypeStringArray");
    if (v52) {
      uint64_t v53 = *v52;
    }
    else {
      uint64_t v53 = 0;
    }
    qword_1E9DDBBB8 = v53;
    uint64_t v54 = (uint64_t *)dlsym(v9, "USKDataTypeToken");
    if (v54) {
      uint64_t v55 = *v54;
    }
    else {
      uint64_t v55 = 0;
    }
    qword_1E9DDBBC0 = v55;
    float v56 = (uint64_t *)dlsym(v9, "USKDataTypeTokenArray");
    if (v56) {
      uint64_t v57 = *v56;
    }
    else {
      uint64_t v57 = 0;
    }
    qword_1E9DDBBC8 = v57;
    uint64_t v58 = (uint64_t *)dlsym(v9, "USKNodeTypeCamera");
    if (v58) {
      uint64_t v59 = *v58;
    }
    else {
      uint64_t v59 = 0;
    }
    qword_1E9DDBBD0 = v59;
    uint64_t v60 = (uint64_t *)dlsym(v9, "USKNodeTypeMaterial");
    if (v60) {
      uint64_t v61 = *v60;
    }
    else {
      uint64_t v61 = 0;
    }
    qword_1E9DDBBD8 = v61;
    long long v62 = (uint64_t *)dlsym(v9, "USKNodeTypeMesh");
    if (v62) {
      uint64_t v63 = *v62;
    }
    else {
      uint64_t v63 = 0;
    }
    qword_1E9DDBBE0 = v63;
    uint64_t v64 = (uint64_t *)dlsym(v9, "USKNodeTypeMeshGroup");
    if (v64) {
      uint64_t v65 = *v64;
    }
    else {
      uint64_t v65 = 0;
    }
    qword_1E9DDBBE8 = v65;
    uint64_t v66 = (uint64_t *)dlsym(v9, "USKNodeTypeScope");
    if (v66) {
      uint64_t v67 = *v66;
    }
    else {
      uint64_t v67 = 0;
    }
    qword_1E9DDBBF0 = v67;
    uint64_t v68 = (uint64_t *)dlsym(v9, "USKNodeTypeShader");
    if (v68) {
      uint64_t v69 = *v68;
    }
    else {
      uint64_t v69 = 0;
    }
    qword_1E9DDBBF8 = v69;
    uint64_t v70 = (uint64_t *)dlsym(v9, "USKNodeTypeSkeletalAnimation");
    if (v70) {
      uint64_t v71 = *v70;
    }
    else {
      uint64_t v71 = 0;
    }
    qword_1E9DDBC00 = v71;
    uint64_t v72 = (uint64_t *)dlsym(v9, "USKNodeTypeSkeleton");
    if (v72) {
      uint64_t v73 = *v72;
    }
    else {
      uint64_t v73 = 0;
    }
    qword_1E9DDBC08 = v73;
    uint64_t v74 = (uint64_t *)dlsym(v9, "USKNodeTypeSkeletonRoot");
    if (v74) {
      uint64_t v75 = *v74;
    }
    else {
      uint64_t v75 = 0;
    }
    qword_1E9DDBC10 = v75;
    uint64_t v76 = (uint64_t *)dlsym(v9, "USKNodeTypeBlendShape");
    if (v76) {
      uint64_t v77 = *v76;
    }
    else {
      uint64_t v77 = 0;
    }
    qword_1E9DDBC18 = v77;
    uint64_t v78 = (uint64_t *)dlsym(v9, "USKNodeTypeTransform");
    if (v78) {
      uint64_t v79 = *v78;
    }
    else {
      uint64_t v79 = 0;
    }
    qword_1E9DDBC20 = v79;
    uint64_t v80 = (uint64_t *)dlsym(v9, "USKRoleTypeColor");
    if (v80) {
      uint64_t v81 = *v80;
    }
    else {
      uint64_t v81 = 0;
    }
    qword_1E9DDBC28 = v81;
    uint64_t v82 = (uint64_t *)dlsym(v9, "USKRoleTypeNone");
    if (v82) {
      uint64_t v83 = *v82;
    }
    else {
      uint64_t v83 = 0;
    }
    qword_1E9DDBC30 = v83;
    uint64_t v84 = (uint64_t *)dlsym(v9, "USKRoleTypeNormal");
    if (v84) {
      uint64_t v85 = *v84;
    }
    else {
      uint64_t v85 = 0;
    }
    qword_1E9DDBC38 = v85;
    uint64_t v86 = (uint64_t *)dlsym(v9, "USKRoleTypePoint");
    if (v86) {
      uint64_t v87 = *v86;
    }
    else {
      uint64_t v87 = 0;
    }
    qword_1E9DDBC40 = v87;
    uint64_t v88 = (uint64_t *)dlsym(v9, "USKRoleTypeVector");
    if (v88) {
      uint64_t v89 = *v88;
    }
    else {
      uint64_t v89 = 0;
    }
    qword_1E9DDBC48 = v89;
    uint64_t v90 = (uint64_t *)dlsym(v9, "USKRoleTypeTextureCoordinate");
    if (v90) {
      uint64_t v91 = *v90;
    }
    else {
      uint64_t v91 = 0;
    }
    qword_1E9DDBC50 = v91;
    uint64_t v92 = (uint64_t *)dlsym(v9, "USKSchemaTypeBindingAPI");
    if (v92) {
      uint64_t v93 = *v92;
    }
    else {
      uint64_t v93 = 0;
    }
    qword_1E9DDBC58 = v93;
    byte_1E9DDBB18 = 1;
  }
  else
  {
    sub_1B63F2F54(16, @"Error: Could not load UsdKit", v10, v11, v12, v13, v14, v15, a9);
  }
}

uint64_t sub_1B65B4E5C(uint64_t a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = objc_msgSend_setWithCapacity_(MEMORY[0x1E4F1CA80], a2, 8, a4);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = a1 + 328;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 416) = a1 + 424;
  *(void *)(a1 + 392) = a1 + 400;
  *(void *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(void *)(a1 + 488) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 496) = xmmword_1B6E724C0;
  uint64_t v8 = sub_1B65B50F8(a3, v7);
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 24) = objc_msgSend_stringByAppendingString_(@"/", v9, v8, v10);
  return a1;
}

void sub_1B65B5038(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  sub_1B65B54F0(*(void *)(v1 - 104), **(char ***)(v1 - 96));
  _Unwind_Resume(*(_Unwind_Exception **)(v1 - 88));
}

uint64_t sub_1B65B50F8(void *a1, const char *a2)
{
  uint64_t v22 = 0;
  os_signpost_id_t v3 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E4F28FD8], a2, @"[^A-Za-z0-9]", 1, &v22);
  uint64_t v7 = objc_msgSend_length(a1, v4, v5, v6);
  uint64_t v9 = objc_msgSend_stringByReplacingMatchesInString_options_range_withTemplate_(v3, v8, (uint64_t)a1, 0, 0, v7, @"_");
  uint64_t v13 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E4F28B88], v10, v11, v12);
  uint64_t v16 = objc_msgSend_characterAtIndex_(v9, v14, 0, v15);
  if (objc_msgSend_characterIsMember_(v13, v17, v16, v18)) {
    return objc_msgSend_stringByAppendingString_(@"_", v19, (uint64_t)v9, v20);
  }
  return (uint64_t)v9;
}

uint64_t sub_1B65B51B4(uint64_t a1)
{
  float v2 = *(void **)a1;
  os_signpost_id_t v3 = *(void **)(a1 + 8);
  if (*(void **)a1 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x1BA9B6D80](*v2, 0x1080C406BDE4C18);
      }
      ++v2;
    }
    while (v2 != v3);
    float v2 = *(void **)a1;
  }
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t **sub_1B65B5228(uint64_t **a1)
{
  float v2 = *a1;
  os_signpost_id_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    if (*v2)
    {
      sub_1B643670C(v4 + 64, *(void **)(v4 + 72));
      sub_1B643670C(v4 + 32, *(void **)(v4 + 40));
      uint64_t v5 = *(void **)(v4 + 8);
      if (v5)
      {
        *(void *)(v4 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x1BA9B6D80](v4, 0x10A0C402AA64608);
    }
    ++v2;
  }
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  while (v6 != v7)
  {
    uint64_t v8 = *v6;
    if (*v6)
    {
      sub_1B643670C(v8 + 72, *(void **)(v8 + 80));
      sub_1B643670C(v8 + 48, *(void **)(v8 + 56));
      sub_1B643670C(v8 + 24, *(void **)(v8 + 32));
      uint64_t v9 = *(void **)v8;
      if (*(void *)v8)
      {
        *(void *)(v8 + 8) = v9;
        operator delete(v9);
      }
      MEMORY[0x1BA9B6D80](v8, 0x10A0C400C584343);
    }
    ++v6;
  }
  sub_1B643670C((uint64_t)(a1 + 6), a1[7]);
  uint64_t v10 = a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *a1;
  if (*a1)
  {
    a1[1] = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_1B65B5344(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1B65B5344(a1, *a2);
    sub_1B65B5344(a1, a2[1]);
    sub_1B65B53A0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1B65B53A0(uint64_t a1)
{
  float v2 = (void **)(a1 + 24);
  sub_1B65B53E8(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_1B65B53E8(void ***a1)
{
  float v2 = *a1;
  if (*v2)
  {
    sub_1B65B543C((uint64_t *)v2);
    os_signpost_id_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1B65B543C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_1B65B548C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B65B548C(a1, *(void *)a2);
    sub_1B65B548C(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void sub_1B65B54F0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B65B54F0(a1, *(void *)a2);
    sub_1B65B54F0(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_1B65B5554(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v5 = objc_msgSend_rootNode(*(void **)a1, a2, a3, a4);
  uint64_t v9 = objc_msgSend_childNodes(v5, v6, v7, v8);
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v48, (uint64_t)v52, 16);
  if (v11)
  {
    uint64_t v15 = v11;
    uint64_t v16 = *(void *)v49;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v49 != v16) {
          objc_enumerationMutation(v9);
        }
        sub_1B65B6484(a1, *(void **)(*((void *)&v48 + 1) + 8 * i), v13, v14);
      }
      uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v18, (uint64_t)&v48, (uint64_t)v52, 16);
    }
    while (v15);
  }
  sub_1B65B66DC(a1 + 344, v12, v13, v14);
  uint64_t v22 = *(void *****)(a1 + 368);
  uint64_t v23 = *(void *****)(a1 + 376);
  if (v22 != v23)
  {
    do
    {
      uint64_t v24 = *v22;
      uint64_t v25 = **v22;
      uint64_t v26 = (*v22)[1];
      if (v25 != v26)
      {
        while (sub_1B65B6A20(*v25, v19, v20, v21))
        {
          if (++v25 == v26)
          {
            uint64_t v27 = (uint64_t *)*v24;
            uint64_t v28 = v24[1];
            if (v27 != (uint64_t *)v28)
            {
              uint64_t v29 = *v27;
              do
              {
                uint64_t v47 = 0;
                uint64_t v47 = *v27;
                if (v29 != v47) {
                  sub_1B658F690((uint64_t **)(a1 + 248), (unint64_t *)&v47, &v47);
                }
                ++v27;
              }
              while (v27 != (uint64_t *)v28);
            }
            break;
          }
        }
      }
      ++v22;
    }
    while (v22 != v23);
    uint64_t v30 = *(uint64_t **)(a1 + 368);
    uint64_t v31 = *(uint64_t **)(a1 + 376);
    if (v30 != v31)
    {
      uint64_t v32 = (void *)(a1 + 280);
      do
      {
        uint64_t v33 = *(void **)(a1 + 272);
        if (v33 != v32)
        {
          uint64_t v34 = *v30;
          do
          {
            if (*(void *)(v33[5] + 56) == v34)
            {
              uint64_t v38 = **(void ***)v34;
              if (v38)
              {
                uint64_t v39 = (void *)v33[4];
                uint64_t v40 = objc_msgSend_parentNode(v38, v19, v20, v21);
                if (v40)
                {
                  uint64_t v41 = (void *)v40;
                  do
                  {
                    if (v39)
                    {
                      uint64_t v42 = v39;
                      while (1)
                      {
                        uint64_t v42 = objc_msgSend_parentNode(v42, v19, v20, v21);
                        if (!v42) {
                          break;
                        }
                        if (v41 == v42)
                        {
                          if (objc_msgSend_rootNode(*(void **)a1, v19, v20, v21) != v41
                            && sub_1B65B6A20(v41, v19, v20, v21))
                          {
                            *(void *)(v34 + 96) = v41;
                          }
                          goto LABEL_23;
                        }
                      }
                    }
                    uint64_t v41 = objc_msgSend_parentNode(v41, v19, v20, v21);
                  }
                  while (v41);
                }
              }
            }
LABEL_23:
            uint64_t v35 = (void *)v33[1];
            if (v35)
            {
              do
              {
                uint64_t v36 = v35;
                uint64_t v35 = (void *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                uint64_t v36 = (void *)v33[2];
                BOOL v37 = *v36 == (void)v33;
                uint64_t v33 = v36;
              }
              while (!v37);
            }
            uint64_t v33 = v36;
          }
          while (v36 != v32);
        }
        ++v30;
      }
      while (v30 != v31);
      uint64_t v43 = *(uint64_t ***)(a1 + 368);
      long long v44 = *(uint64_t ***)(a1 + 376);
      if (v43 != v44)
      {
        uint64_t v45 = (uint64_t **)(a1 + 96);
        do
        {
          uint64_t v46 = *v43;
          uint64_t v47 = 0;
          uint64_t v47 = sub_1B65B6A78(v46, v19, v20, v21);
          if (v47) {
            sub_1B658F690(v45, (unint64_t *)&v47, &v47);
          }
          ++v43;
        }
        while (v43 != v44);
      }
    }
  }
}

uint64_t sub_1B65B5810(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v5 = objc_msgSend_rootNode(*a1, a2, a3, a4, 0);
  uint64_t v9 = objc_msgSend_childNodes(v5, v6, v7, v8);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v18, (uint64_t)v22, 16);
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v15 = *(void *)v19;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v19 != v15) {
          objc_enumerationMutation(v9);
        }
        sub_1B65B7474((uint64_t)a1, *(void **)(*((void *)&v18 + 1) + 8 * v16++), v12, v13);
      }
      while (v14 != v16);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v17, (uint64_t)&v18, (uint64_t)v22, 16);
      uint64_t v14 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B65B5904(double *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_animationKeys(a2, (const char *)a2, a3, a4))
  {
    uint64_t v9 = objc_msgSend_animationKeys(a2, v6, v7, v8);
    if (objc_msgSend_count(v9, v10, v11, v12))
    {
      uint64_t v13 = objc_msgSend_animationKeys(a2, v6, v7, v8);
      uint64_t v17 = objc_msgSend_count(v13, v14, v15, v16);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = 0;
        while (1)
        {
          long long v20 = objc_msgSend_animationKeys(a2, v6, v7, v8);
          uint64_t v23 = objc_msgSend_objectAtIndexedSubscript_(v20, v21, v19, v22);
          uint64_t v26 = objc_msgSend_animationPlayerForKey_(a2, v24, v23, v25);
          if (v26) {
            break;
          }
          if (v18 == ++v19) {
            goto LABEL_9;
          }
        }
        uint64_t v27 = objc_msgSend_animation(v26, v6, v7, v8);
        uint64_t v31 = objc_msgSend_caAnimation(v27, v28, v29, v30);
        sub_1B65B76D8(a1, v31);
      }
    }
  }
LABEL_9:
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v32 = objc_msgSend_childNodes(a2, v6, v7, v8, 0);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v39, (uint64_t)v43, 16);
  if (result)
  {
    uint64_t v35 = result;
    uint64_t v36 = *(void *)v40;
    do
    {
      uint64_t v37 = 0;
      do
      {
        if (*(void *)v40 != v36) {
          objc_enumerationMutation(v32);
        }
        sub_1B65B5904(a1, *(void *)(*((void *)&v39 + 1) + 8 * v37++));
      }
      while (v35 != v37);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v38, (uint64_t)&v39, (uint64_t)v43, 16);
      uint64_t v35 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B65B5A70(uint64_t result)
{
  double v1 = *(double *)(result + 504);
  if (v1 == 0.0)
  {
    *(void *)(result + 504) = 0x3FA5555555555555;
    double v1 = 0.0416666667;
  }
  double v2 = *(double *)(result + 496);
  if (v2 >= 0.0)
  {
    double v3 = 1.0 / v1 + 0.0;
    double v4 = (double)(int)v3;
    if (vabdd_f64(v3, v4) >= 0.001)
    {
      if (1.0 - (v3 - v4) < 0.001) {
        double v3 = v4 + 1.0;
      }
    }
    else
    {
      double v3 = (double)(int)v3;
    }
    *(_DWORD *)(result + 480) = (int)(v3 + 0.5);
    double v5 = *(double *)(result + 488) / v1 + 0.0;
    double v6 = (double)(int)v5;
    if (vabdd_f64(v5, v6) >= 0.001)
    {
      if (1.0 - (v5 - v6) < 0.001) {
        double v5 = v6 + 1.0;
      }
    }
    else
    {
      double v5 = (double)(int)v5;
    }
    *(double *)(result + 464) = v5;
    double v7 = v2 / v1 + 0.0;
    double v8 = (double)(int)v7;
    if (vabdd_f64(v7, v8) >= 0.001)
    {
      if (1.0 - (v7 - v8) < 0.001) {
        double v7 = v8 + 1.0;
      }
    }
    else
    {
      double v7 = (double)(int)v7;
    }
    *(double *)(result + 472) = v7;
  }
  return result;
}

uint64_t sub_1B65B5B84(uint64_t result, void *a2, char *a3, void ***a4, uint64_t a5)
{
  double v8 = a2;
  uint64_t v9 = result;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t v96 = a2;
  uint64_t v10 = *(void **)(result + 256);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = result + 256;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= (unint64_t)a2;
    if (v12 >= (unint64_t)a2) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (uint64_t)v10;
    }
    uint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 == result + 256 || *(void *)(v11 + 32) > (unint64_t)a2)
  {
LABEL_12:
    uint64_t v15 = sub_1B65B6E60(result + 344, (uint64_t)a2);
    if (v15 && v15[16]) {
      a3 = (char *)v15[16];
    }
    uint64_t v17 = sub_1B65B795C(v9, a3, v8, v16);
    uint64_t v23 = objc_msgSend_stringByAppendingPathComponent_(a3, v18, (uint64_t)v17, v19);
    for (uint64_t i = *(void *****)(v9 + 368); i != *(void *****)(v9 + 376); ++i)
    {
      uint64_t v25 = *i;
      if (***i == v8) {
        goto LABEL_20;
      }
    }
    uint64_t v25 = 0;
LABEL_20:
    BOOL v29 = ((unint64_t)a4 | objc_msgSend_skinner(v8, v20, v21, v22)) == 0;
    for (uint64_t j = *(void *)(v9 + 368); j != *(void *)(v9 + 376); j += 8)
    {
      if (*(void **)(*(void *)j + 96) == v8)
      {
        uint64_t v36 = qword_1E9DDBC10;
        uint64_t v37 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v26, v23, v28);
        uint64_t v34 = (const char *)objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v38, *(void *)(v9 + 56), v37, v36);
        uint64_t v35 = 0;
        a5 = 1;
        if (!v34) {
          goto LABEL_65;
        }
        goto LABEL_47;
      }
    }
    if (v25)
    {
      uint64_t v34 = (const char *)sub_1B65B7AEC((uint64_t)v25, *(const char **)(v9 + 56), v23, v28);
      uint64_t v35 = 1;
      a4 = v25;
      if (!v34) {
        goto LABEL_65;
      }
      goto LABEL_47;
    }
    if (!objc_msgSend_model(v8, v26, v27, v28))
    {
      if (objc_msgSend_camera(v8, (const char *)v31, v32, v33))
      {
        long long v42 = objc_msgSend_camera(v8, v39, v40, v41);
        uint64_t v43 = sub_1B65B82DC(v9, (const char *)v8, v23, v42);
      }
      else
      {
        uint64_t v52 = qword_1E9DDBC20;
        uint64_t v53 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v39, v23, v41);
        uint64_t v43 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v54, *(void *)(v9 + 56), v53, v52);
      }
      uint64_t v34 = (const char *)v43;
LABEL_46:
      uint64_t v35 = 0;
      if (!v34) {
        goto LABEL_65;
      }
      goto LABEL_47;
    }
    if (v29)
    {
      uint64_t v34 = sub_1B65B8190(v9, v8, v23, (uint64_t)v17);
      a4 = 0;
      goto LABEL_46;
    }
    uint64_t v45 = *(void **)(v9 + 304);
    unint64_t v44 = *(void *)(v9 + 312);
    if ((unint64_t)v45 >= v44)
    {
      uint64_t v47 = *(void *)(v9 + 296);
      uint64_t v48 = ((uint64_t)v45 - v47) >> 4;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 60) {
        abort();
      }
      uint64_t v50 = v44 - v47;
      if (v50 >> 3 > v49) {
        unint64_t v49 = v50 >> 3;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v49;
      }
      if (v31) {
        long long v51 = (char *)sub_1B6427C8C(v9 + 312, v31);
      }
      else {
        long long v51 = 0;
      }
      uint64_t v88 = &v51[16 * v48];
      uint64_t v89 = &v51[16 * v31];
      *(void *)uint64_t v88 = v8;
      *((void *)v88 + 1) = a4;
      uint64_t v46 = v88 + 16;
      uint64_t v91 = *(char **)(v9 + 296);
      uint64_t v90 = *(char **)(v9 + 304);
      if (v90 != v91)
      {
        do
        {
          *((_OWORD *)v88 - 1) = *((_OWORD *)v90 - 1);
          v88 -= 16;
          v90 -= 16;
        }
        while (v90 != v91);
        uint64_t v90 = *(char **)(v9 + 296);
      }
      *(void *)(v9 + 296) = v88;
      *(void *)(v9 + 304) = v46;
      *(void *)(v9 + 312) = v89;
      if (v90) {
        operator delete(v90);
      }
    }
    else
    {
      *uint64_t v45 = v8;
      v45[1] = a4;
      uint64_t v46 = v45 + 2;
    }
    *(void *)(v9 + 304) = v46;
    if (a5)
    {
      uint64_t v34 = sub_1B65B8190(v9, v8, v23, (uint64_t)v17);
      uint64_t v97 = &v96;
      uint64_t v35 = 0;
      sub_1B644FE48((uint64_t **)(v9 + 320), (unint64_t *)&v96, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v97)[5] = (uint64_t)v34;
      a5 = 1;
      double v8 = v96;
      if (v34)
      {
LABEL_47:
        if ((objc_msgSend_isHidden(v8, (const char *)v31, v32, v33) & 1) != 0
          || (objc_msgSend_opacity(v96, v55, v56, v57), v60 == 0.0))
        {
          uint64_t v61 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v55, (uint64_t)v34, @"visibility", qword_1E9DDBBC0, qword_1E9DDBC30);
          uint64_t v64 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v62, @"invisible", v63);
          objc_msgSend_setTokenValue_(v61, v65, v64, v66);
        }
        uint64_t v67 = objc_msgSend_animationKeys(v96, v55, v58, v59);
        uint64_t v70 = v96;
        if (v67)
        {
          uint64_t v71 = objc_msgSend_animationKeys(v96, v68, (uint64_t)v96, v69);
          uint64_t v75 = objc_msgSend_count(v71, v72, v73, v74);
          uint64_t v70 = v96;
          if (v75)
          {
            uint64_t v77 = *(void **)(v9 + 104);
            if (!v77) {
              goto LABEL_63;
            }
            uint64_t v78 = v9 + 104;
            do
            {
              unint64_t v79 = v77[4];
              BOOL v80 = v79 >= (unint64_t)v96;
              if (v79 >= (unint64_t)v96) {
                uint64_t v81 = v77;
              }
              else {
                uint64_t v81 = v77 + 1;
              }
              if (v80) {
                uint64_t v78 = (uint64_t)v77;
              }
              uint64_t v77 = (void *)*v81;
            }
            while (*v81);
            if (v78 == v9 + 104 || (unint64_t)v96 < *(void *)(v78 + 32))
            {
LABEL_63:
              sub_1B65B8548(v9, v34, v96, v76);
              uint64_t v70 = v96;
            }
          }
        }
        sub_1B65B85FC(v9, v34, v70, v35);
        double v8 = v96;
      }
    }
LABEL_65:
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    uint64_t v82 = objc_msgSend_childNodes(v8, (const char *)v31, v32, v33, 0);
    uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v82, v83, (uint64_t)&v92, (uint64_t)v98, 16);
    uint64_t v84 = result;
    if (result)
    {
      uint64_t v85 = *(void *)v93;
      do
      {
        uint64_t v86 = 0;
        do
        {
          if (*(void *)v93 != v85) {
            objc_enumerationMutation(v82);
          }
          sub_1B65B5B84(v9, *(void *)(*((void *)&v92 + 1) + 8 * v86++), v23, a4, a5);
        }
        while (v84 != v86);
        uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v82, v87, (uint64_t)&v92, (uint64_t)v98, 16);
        uint64_t v84 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_1B65B6090(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!result)
  {
    uint64_t v6 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 24), a2, @"Geom", a4);
    *(void *)(a1 + 32) = v6;
    uint64_t v9 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v7, v6, v8);
    objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v10, *(void *)(a1 + 56), v9, qword_1E9DDBBF0);
    return *(void *)(a1 + 32);
  }
  return result;
}

uint64_t sub_1B65B60FC(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  double v5 = objc_msgSend_rootNode(*a1, a2, a3, a4, 0);
  uint64_t v9 = objc_msgSend_childNodes(v5, v6, v7, v8);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v18, (uint64_t)v22, 16);
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v15 = *(void *)v19;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v19 != v15) {
          objc_enumerationMutation(v9);
        }
        sub_1B65BFA5C((uint64_t)a1, *(void **)(*((void *)&v18 + 1) + 8 * v16++), v12, v13);
      }
      while (v14 != v16);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v17, (uint64_t)&v18, (uint64_t)v22, 16);
      uint64_t v14 = result;
    }
    while (result);
  }
  return result;
}

uint64_t **sub_1B65B61F0(uint64_t **result, const char *a2)
{
  double v2 = *result;
  double v3 = result[1];
  if (*result != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      uint64_t v5 = *(void *)(*v2 + 16);
      if (v5)
      {
        uint64_t v6 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, v5, @"blendShapes", qword_1E9DDBBC8, qword_1E9DDBC30);
        uint64_t result = (uint64_t **)objc_msgSend_setTokenArray_(v6, v7, *(void *)(v4 + 24), v8);
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1B65B6278(uint64_t a1, const char *a2, char *a3, uint64_t a4)
{
  uint64_t v5 = *(void ***)(a1 + 296);
  uint64_t v6 = *(void ***)(a1 + 304);
  if (v5 != v6)
  {
    unint64_t v31 = (uint64_t **)(a1 + 272);
    uint64_t v7 = (void *)(a1 + 280);
    uint64_t v8 = a1 + 328;
    do
    {
      uint64_t v9 = *v5;
      uint64_t v10 = (uint64_t)v5[1];
      uint64_t v32 = *v5;
      if (v10)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v22 = (void *)*v7;
        if (!*v7) {
          goto LABEL_35;
        }
        uint64_t v23 = (void *)(a1 + 280);
        do
        {
          unint64_t v24 = v22[4];
          BOOL v25 = v24 >= (unint64_t)v9;
          if (v24 >= (unint64_t)v9) {
            uint64_t v26 = v22;
          }
          else {
            uint64_t v26 = v22 + 1;
          }
          if (v25) {
            uint64_t v23 = v22;
          }
          uint64_t v22 = (void *)*v26;
        }
        while (*v26);
        if (v23 == v7) {
          goto LABEL_35;
        }
        if ((unint64_t)v9 < v23[4]) {
          goto LABEL_35;
        }
        uint64_t v33 = &v32;
        uint64_t v11 = sub_1B644FE48(v31, (unint64_t *)&v32, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v33)[5];
        uint64_t v10 = *(void *)(v11 + 56);
        if (!v10) {
          goto LABEL_35;
        }
      }
      uint64_t v12 = *(char **)(v10 + 128);
      if (!v12) {
        uint64_t v12 = (char *)sub_1B65B6090(a1, a2, (uint64_t)a3, a4);
      }
      uint64_t v13 = sub_1B65B795C(a1, v12, v32, a4);
      uint64_t v16 = objc_msgSend_stringByAppendingPathComponent_(v12, v14, (uint64_t)v13, v15);
      uint64_t v17 = *(void **)(a1 + 328);
      if (!v17) {
        goto LABEL_18;
      }
      uint64_t v18 = a1 + 328;
      do
      {
        unint64_t v19 = v17[4];
        BOOL v20 = v19 >= (unint64_t)v32;
        if (v19 >= (unint64_t)v32) {
          long long v21 = v17;
        }
        else {
          long long v21 = v17 + 1;
        }
        if (v20) {
          uint64_t v18 = (uint64_t)v17;
        }
        uint64_t v17 = (void *)*v21;
      }
      while (*v21);
      if (v18 != v8 && (unint64_t)v32 >= *(void *)(v18 + 32))
      {
        uint64_t v33 = &v32;
        a3 = (char *)sub_1B644FE48((uint64_t **)(a1 + 320), (unint64_t *)&v32, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v33)[5];
        if (a3)
        {
LABEL_19:
          if (*(void *)(v10 + 128)) {
            sub_1B65C056C(a1, v32, a3, v10, v11);
          }
        }
      }
      else
      {
LABEL_18:
        a3 = sub_1B65B8190(a1, v32, v16, (uint64_t)v13);
        if (a3) {
          goto LABEL_19;
        }
      }
LABEL_35:
      v5 += 2;
    }
    while (v5 != v6);
  }
  uint64_t v27 = *(uint64_t ***)(a1 + 368);
  uint64_t v28 = *(uint64_t ***)(a1 + 376);
  while (v27 != v28)
  {
    BOOL v29 = *v27;
    if (sub_1B65B6A78(*v27, a2, (uint64_t)a3, a4))
    {
      uint64_t v30 = sub_1B65C07A4(a1, v29, (uint64_t)a3, a4);
      if (v30) {
        sub_1B65C12C8((uint64_t)v29, v30);
      }
    }
    ++v27;
  }
}

uint64_t sub_1B65B6484(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = a2;
  if (objc_msgSend_skinner(a2, (const char *)a2, a3, a4))
  {
    uint64_t v9 = objc_msgSend_skinner(a2, v6, v7, v8);
    objc_msgSend_skeleton(v9, v10, v11, v12);
    operator new();
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v13 = objc_msgSend_childNodes(a2, v6, v7, v8, 0);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v20, (uint64_t)v25, 16);
  uint64_t v16 = result;
  if (result)
  {
    uint64_t v17 = *(void *)v21;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v21 != v17) {
          objc_enumerationMutation(v13);
        }
        sub_1B65B6484(a1, *(void *)(*((void *)&v20 + 1) + 8 * v18++));
      }
      while (v16 != v18);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v19, (uint64_t)&v20, (uint64_t)v25, 16);
      uint64_t v16 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B65B66DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t ***)a1;
  uint64_t v5 = *(uint64_t ***)(a1 + 8);
  if (*(uint64_t ***)a1 != v5)
  {
    uint64_t v7 = (uint64_t **)(a1 + 48);
    uint64_t v41 = *(uint64_t ***)(a1 + 8);
    do
    {
      uint64_t v8 = (void **)*v4;
      uint64_t v9 = (uint64_t *)(*v4)[1];
      if ((uint64_t *)(*v4)[2] != v9)
      {
        if (!*v8)
        {
          *uint64_t v8 = sub_1B65B6DB8(a1, (const char *)*v4 + 8, a3, a4);
          uint64_t v9 = (uint64_t *)v8[1];
        }
        uint64_t v10 = sub_1B65B6E60(a1, *v9);
        if (!v10) {
          sub_1B65B6EC0();
        }
        uint64_t v11 = (uint64_t *)v8[1];
        uint64_t v12 = (uint64_t *)v8[2];
        while (v11 != v12)
        {
          long long v42 = 0;
          uint64_t v13 = *v11++;
          long long v42 = (char *)v13;
          sub_1B658F690(v7, (unint64_t *)&v42, (uint64_t *)&v42);
        }
        sub_1B65B6FFC(v8, (uint64_t)v10);
        long long v42 = 0;
        uint64_t v43 = 0;
        unint64_t v44 = 0;
        uint64_t v14 = *(uint64_t ***)(a1 + 24);
        uint64_t v15 = *(uint64_t ***)(a1 + 32);
        if (v14 != v15)
        {
          uint64_t v16 = 0;
          do
          {
            uint64_t v17 = *v14;
            if (*v14 != v10)
            {
              uint64_t v18 = v10[1];
              uint64_t v19 = v18 - *v10;
              if (v18 != *v10)
              {
                uint64_t v20 = 0;
                unint64_t v21 = v19 >> 3;
                if (v21 <= 1) {
                  unint64_t v21 = 1;
                }
                while (*(void *)(*v10 + 8 * v20) != *(void *)*v17)
                {
                  if (v21 == ++v20) {
                    goto LABEL_43;
                  }
                }
                if (v20 != -1)
                {
                  long long v22 = *(uint64_t ***)a1;
                  long long v23 = *(uint64_t ***)(a1 + 8);
                  if (*(uint64_t ***)a1 != v23)
                  {
                    do
                    {
                      if ((uint64_t *)(*v22)[7] == v17) {
                        sub_1B65B6FFC(*v22, (uint64_t)v10);
                      }
                      ++v22;
                    }
                    while (v22 != v23);
                    uint64_t v16 = v43;
                  }
                  if (v16 >= v44)
                  {
                    uint64_t v24 = (v16 - v42) >> 3;
                    if ((unint64_t)(v24 + 1) >> 61) {
                      abort();
                    }
                    unint64_t v25 = (v44 - v42) >> 2;
                    if (v25 <= v24 + 1) {
                      unint64_t v25 = v24 + 1;
                    }
                    if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v26 = v25;
                    }
                    if (v26) {
                      uint64_t v27 = (char *)sub_1B64285D4((uint64_t)&v44, v26);
                    }
                    else {
                      uint64_t v27 = 0;
                    }
                    uint64_t v28 = &v27[8 * v24];
                    *(void *)uint64_t v28 = v17;
                    uint64_t v16 = v28 + 8;
                    uint64_t v30 = (uint64_t)v42;
                    BOOL v29 = v43;
                    if (v43 != v42)
                    {
                      do
                      {
                        uint64_t v31 = *((void *)v29 - 1);
                        v29 -= 8;
                        *((void *)v28 - 1) = v31;
                        v28 -= 8;
                      }
                      while (v29 != (char *)v30);
                      BOOL v29 = v42;
                    }
                    long long v42 = v28;
                    uint64_t v43 = v16;
                    unint64_t v44 = &v27[8 * v26];
                    if (v29) {
                      operator delete(v29);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v16 = v17;
                    v16 += 8;
                  }
                  uint64_t v43 = v16;
                }
              }
            }
LABEL_43:
            ++v14;
          }
          while (v14 != v15);
          uint64_t v32 = v42;
          if (v42 != v16)
          {
            do
            {
              uint64_t v33 = *(void *)v32;
              uint64_t v35 = *(void *)(a1 + 24);
              uint64_t v34 = *(void *)(a1 + 32);
              if (v35 != v34)
              {
                uint64_t v36 = v34 - (v35 + 8);
                if (v34 != v35 + 8) {
                  memmove(*(void **)(a1 + 24), (const void *)(v35 + 8), v34 - (v35 + 8));
                }
                *(void *)(a1 + 32) = v35 + v36;
              }
              if (v33)
              {
                sub_1B643670C(v33 + 72, *(void **)(v33 + 80));
                sub_1B643670C(v33 + 48, *(void **)(v33 + 56));
                sub_1B643670C(v33 + 24, *(void **)(v33 + 32));
                uint64_t v37 = *(void **)v33;
                if (*(void *)v33)
                {
                  *(void *)(v33 + 8) = v37;
                  operator delete(v37);
                }
                MEMORY[0x1BA9B6D80](v33, 0x10A0C400C584343);
              }
              v32 += 8;
            }
            while (v32 != v16);
            uint64_t v16 = v42;
          }
          uint64_t v5 = v41;
          if (v16)
          {
            uint64_t v43 = v16;
            operator delete(v16);
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
    long long v39 = *(uint64_t ***)a1;
    uint64_t v38 = *(uint64_t ***)(a1 + 8);
    while (v39 != v38)
    {
      uint64_t v40 = *v39++;
      sub_1B65B70CC(v40);
    }
  }
}

void sub_1B65B69FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1B65B6A20(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return !objc_msgSend_model(a1, a2, a3, a4)
      && !objc_msgSend_skinner(a1, v5, v6, v7)
      && !objc_msgSend_camera(a1, v8, v9, v10)
      && objc_msgSend_light(a1, v11, v12, v13) == 0;
}

uint64_t sub_1B65B6A78(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)*a1;
  if (v4)
  {
    while (1)
    {
      uint64_t v6 = objc_msgSend_animationKeys(v4, a2, a3, a4);
      if (objc_msgSend_count(v6, v7, v8, v9)) {
        break;
      }
      uint64_t v4 = objc_msgSend_parentNode(v4, v10, v11, v12);
      if (!v4)
      {
        return sub_1B65B7410(a1, a2, a3, a4);
      }
    }
  }
  return (uint64_t)v4;
}

__n128 sub_1B65B6AE8(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v29 = a2;
  unint64_t v8 = *(void *)(a1 + 24);
  uint64_t v6 = a1 + 24;
  unint64_t v7 = v8;
  uint64_t v9 = *(unint64_t **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v7 - v11;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      uint64_t v16 = (char *)sub_1B64285D4(v6, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (unint64_t *)&v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    *uint64_t v17 = a2;
    uint64_t v10 = v17 + 1;
    uint64_t v20 = *(char **)(a1 + 8);
    uint64_t v19 = *(char **)(a1 + 16);
    if (v19 != v20)
    {
      do
      {
        unint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *--uint64_t v17 = v21;
      }
      while (v19 != v20);
      uint64_t v19 = *(char **)(a1 + 8);
    }
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v9 = a2;
    uint64_t v10 = v9 + 1;
  }
  *(void *)(a1 + 16) = v10;
  uint64_t v30 = &v29;
  long long v22 = sub_1B65B6CE4((uint64_t **)(a1 + 32), &v29, (uint64_t)&unk_1B6E4FDF8, &v30);
  long long v23 = *a3;
  long long v24 = a3[1];
  long long v25 = a3[3];
  *((_OWORD *)v22 + 5) = a3[2];
  *((_OWORD *)v22 + 6) = v25;
  *((_OWORD *)v22 + 3) = v23;
  *((_OWORD *)v22 + 4) = v24;
  __n128 result = (__n128)a3[4];
  long long v27 = a3[5];
  long long v28 = a3[7];
  *((_OWORD *)v22 + 9) = a3[6];
  *((_OWORD *)v22 + 10) = v28;
  *((__n128 *)v22 + 7) = result;
  *((_OWORD *)v22 + 8) = v27;
  return result;
}

void sub_1B65B6C10(void **a1, uint64_t a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1B64285D4(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    unint64_t v8 = v14 + 8;
    uint64_t v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v7 = a2;
    unint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t **sub_1B65B6CE4(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0xB0uLL);
    v11[4] = **a4;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    sub_1B644FF08(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_1B65B6DB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *((void *)a2 + 1) - *(void *)a2;
  if (!(v5 >> 3)) {
    return 0;
  }
  if (v5 >> 3 == 1) {
    return *(void **)v4;
  }
  unint64_t v6 = *(void **)v4;
  if ((unint64_t)v5 >= 9)
  {
    unint64_t v8 = 1;
    do
    {
      if (v6)
      {
        uint64_t v9 = *(void **)(v4 + 8 * v8);
        while (!v9)
        {
LABEL_13:
          unint64_t v6 = objc_msgSend_parentNode(v6, a2, a3, a4);
          if (!v6) {
            goto LABEL_14;
          }
        }
        unint64_t v10 = v9;
        while (v6 != v10)
        {
          unint64_t v10 = objc_msgSend_parentNode(v10, a2, a3, a4);
          if (!v10) {
            goto LABEL_13;
          }
        }
      }
LABEL_14:
      ++v8;
      uint64_t v4 = *(void *)a2;
    }
    while (v8 < (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
  }
  return v6;
}

uint64_t *sub_1B65B6E60(uint64_t a1, uint64_t a2)
{
  double v2 = *(uint64_t ***)(a1 + 24);
  double v3 = *(uint64_t ***)(a1 + 32);
  while (v2 != v3)
  {
    __n128 result = *v2;
    uint64_t v5 = **v2;
    uint64_t v6 = (*v2)[1];
    uint64_t v7 = v6 - v5;
    if (v6 != v5)
    {
      uint64_t v8 = 0;
      unint64_t v9 = v7 >> 3;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      while (*(void *)(v5 + 8 * v8) != a2)
      {
        if (v9 == ++v8) {
          goto LABEL_10;
        }
      }
      if (v8 != -1) {
        return result;
      }
    }
LABEL_10:
    ++v2;
  }
  return 0;
}

void sub_1B65B6EC0()
{
}

__n128 sub_1B65B6FFC(void *a1, uint64_t a2)
{
  a1[7] = a2;
  double v2 = (unint64_t *)a1[1];
  double v3 = (unint64_t *)a1[2];
  if (v2 != v3)
  {
    uint64_t v5 = (uint64_t **)(a1 + 4);
    do
    {
      unint64_t v6 = *v2++;
      unint64_t v16 = v6;
      uint64_t v17 = &v16;
      uint64_t v7 = sub_1B65B6CE4(v5, &v16, (uint64_t)&unk_1B6E4FDF8, &v17);
      uint64_t v8 = (uint64_t **)(a1[7] + 72);
      uint64_t v17 = &v16;
      unint64_t v9 = sub_1B65B6CE4(v8, &v16, (uint64_t)&unk_1B6E4FDF8, &v17);
      long long v10 = *((_OWORD *)v7 + 3);
      long long v11 = *((_OWORD *)v7 + 4);
      long long v12 = *((_OWORD *)v7 + 6);
      *((_OWORD *)v9 + 5) = *((_OWORD *)v7 + 5);
      *((_OWORD *)v9 + 6) = v12;
      *((_OWORD *)v9 + 3) = v10;
      *((_OWORD *)v9 + 4) = v11;
      __n128 result = *((__n128 *)v7 + 7);
      long long v14 = *((_OWORD *)v7 + 8);
      long long v15 = *((_OWORD *)v7 + 10);
      *((_OWORD *)v9 + 9) = *((_OWORD *)v7 + 9);
      *((_OWORD *)v9 + 10) = v15;
      *((__n128 *)v9 + 7) = result;
      *((_OWORD *)v9 + 8) = v14;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t *sub_1B65B70CC(uint64_t *result)
{
  unint64_t v10 = 0;
  uint64_t v1 = result[1];
  if (result[2] != v1)
  {
    double v2 = result;
    unint64_t v3 = 0;
    uint64_t v4 = (uint64_t **)(result + 8);
    do
    {
      uint64_t v5 = *(void *)v2[7];
      uint64_t v6 = *(void *)(v2[7] + 8) - v5;
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 8 * v3);
        uint64_t v9 = v6 >> 3;
        if ((unint64_t)(v6 >> 3) <= 1) {
          uint64_t v9 = 1;
        }
        while (*(void *)(v5 + 8 * v7) != v8)
        {
          if (v9 == ++v7) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        uint64_t v7 = -1;
      }
      long long v11 = &v10;
      __n128 result = sub_1B644FE48(v4, &v10, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v11);
      result[5] = v7;
      unint64_t v3 = v10 + 1;
      unint64_t v10 = v3;
      uint64_t v1 = v2[1];
    }
    while (v3 < (v2[2] - v1) >> 3);
  }
  return result;
}

uint64_t sub_1B65B71A4(unint64_t **a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v53 = (void *)a2;
  unint64_t v9 = (unint64_t)a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  unint64_t v10 = *(unint64_t **)(v7 - 8);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = v10 - *a1;
    if ((unint64_t)(v12 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v8 - (void)*a1;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      a2 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      a2 = v14;
    }
    if (a2) {
      long long v15 = (char *)sub_1B64285D4(v7, a2);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v16 = (unint64_t *)&v15[8 * v12];
    uint64_t v17 = &v15[8 * a2];
    *unint64_t v16 = v5;
    long long v11 = (char *)(v16 + 1);
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != (char *)*a1)
    {
      do
      {
        unint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *--unint64_t v16 = v20;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = (unint64_t *)v11;
    a1[2] = (unint64_t *)v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *unint64_t v10 = a2;
    long long v11 = (char *)(v10 + 1);
  }
  a1[1] = (unint64_t *)v11;
  unint64_t v21 = objc_msgSend_name(v53, (const char *)a2, (uint64_t)a3, a4);
  uint64_t v23 = sub_1B65B50F8(v21, v22);
  uint64_t v26 = objc_msgSend_stringByAppendingPathComponent_(a3, v24, v23, v25);
  uint64_t v54 = &v53;
  sub_1B644FE48((uint64_t **)a1 + 3, (unint64_t *)&v53, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v54)[5] = v26;
  objc_msgSend_transform(v53, v27, v28, v29);
  float32x4_t v45 = v30;
  float32x4_t v46 = v31;
  float32x4_t v47 = v32;
  float32x4_t v48 = v33;
  uint64_t v54 = &v53;
  uint64_t v34 = (float64x2_t *)sub_1B65B6CE4((uint64_t **)a1 + 6, (unint64_t *)&v53, (uint64_t)&unk_1B6E4FDF8, &v54);
  v34[3] = vcvtq_f64_f32(*(float32x2_t *)v45.f32);
  v34[4] = vcvt_hight_f64_f32(v45);
  void v34[5] = vcvtq_f64_f32(*(float32x2_t *)v47.f32);
  v34[6] = vcvt_hight_f64_f32(v47);
  v34[7] = vcvtq_f64_f32(*(float32x2_t *)v46.f32);
  v34[8] = vcvt_hight_f64_f32(v46);
  v34[9] = vcvtq_f64_f32(*(float32x2_t *)v48.f32);
  v34[10] = vcvt_hight_f64_f32(v48);
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v38 = objc_msgSend_childNodes(v53, v35, v36, v37);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v49, (uint64_t)v55, 16);
  uint64_t v41 = result;
  if (result)
  {
    uint64_t v42 = *(void *)v50;
    do
    {
      uint64_t v43 = 0;
      do
      {
        if (*(void *)v50 != v42) {
          objc_enumerationMutation(v38);
        }
        sub_1B65B71A4(a1, *(void *)(*((void *)&v49 + 1) + 8 * v43++), v26);
      }
      while (v41 != v43);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v44, (uint64_t)&v49, (uint64_t)v55, 16);
      uint64_t v41 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B65B7410(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  if (a1[1] == *a1) {
    return 0;
  }
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = objc_msgSend_animationKeys(*(void **)(v4 + 8 * v6), a2, a3, a4);
    if (objc_msgSend_count(v7, v8, v9, v10)) {
      break;
    }
    ++v6;
    uint64_t v4 = *a1;
    if (v6 >= (a1[1] - *a1) >> 3) {
      return 0;
    }
  }
  return *(void *)(*a1 + 8 * v6);
}

uint64_t sub_1B65B7474(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a2;
  if (objc_msgSend_model(a2, (const char *)a2, a3, a4) && objc_msgSend_morpher(a2, v6, v7, v8))
  {
    uint64_t v9 = objc_msgSend_morpher(a2, v6, v7, v8);
    uint64_t v13 = objc_msgSend_weights(v9, v10, v11, v12);
    objc_msgSend_count(v13, v14, v15, v16);
    sub_1B65B75D4();
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = objc_msgSend_childNodes(a2, v6, v7, v8, 0);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v24, (uint64_t)v29, 16);
  if (result)
  {
    uint64_t v20 = result;
    uint64_t v21 = *(void *)v25;
    do
    {
      uint64_t v22 = 0;
      do
      {
        if (*(void *)v25 != v21) {
          objc_enumerationMutation(v17);
        }
        sub_1B65B7474(a1, *(void *)(*((void *)&v24 + 1) + 8 * v22++));
      }
      while (v20 != v22);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v23, (uint64_t)&v24, (uint64_t)v29, 16);
      uint64_t v20 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B65B75D4()
{
}

unint64_t sub_1B65B76D8(double *a1, void *a2)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1B65B78E8((uint64_t)a1, a2, v4, v5);
  }
  else
  {
    objc_opt_class();
    unint64_t result = objc_opt_isKindOfClass();
    if (result)
    {
      uint64_t v10 = objc_msgSend_keyTimes(a2, v7, v8, v9);
      unint64_t result = objc_msgSend_count(v10, v11, v12, v13);
      if (result >= 2)
      {
        uint64_t v17 = objc_msgSend_count(v10, v14, v15, v16);
        uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(v10, v18, v17 - 1, v19);
        objc_msgSend_doubleValue(v20, v21, v22, v23);
        double v25 = v24;
        uint64_t v28 = objc_msgSend_objectAtIndexedSubscript_(v10, v26, 0, v27);
        unint64_t result = objc_msgSend_doubleValue(v28, v29, v30, v31);
        double v36 = v25 - v35;
        if (v36 >= 0.0001)
        {
          objc_msgSend_duration(a2, v32, v33, v34);
          double v38 = v37 / v36;
          uint64_t v41 = objc_msgSend_objectAtIndexedSubscript_(v10, v39, 0, v40);
          objc_msgSend_doubleValue(v41, v42, v43, v44);
          double v46 = v45;
          objc_msgSend_beginTime(a2, v47, v48, v49);
          double v54 = v53 + v46 * v38;
          double v55 = a1[62];
          if (v55 >= 0.0)
          {
            double v56 = a1[61];
            if (v56 > v54) {
              double v56 = v54;
            }
            a1[61] = v56;
            if (v55 >= v54) {
              double v54 = v55;
            }
          }
          else
          {
            a1[61] = v54;
          }
          a1[62] = v54;
          uint64_t v57 = objc_msgSend_count(v10, v50, v51, v52);
          float v60 = objc_msgSend_objectAtIndexedSubscript_(v10, v58, v57 - 1, v59);
          objc_msgSend_doubleValue(v60, v61, v62, v63);
          double v65 = v64;
          objc_msgSend_beginTime(a2, v66, v67, v68);
          double v73 = v72 + v65 * v38;
          double v74 = a1[62];
          if (v74 >= 0.0)
          {
            double v75 = a1[61];
            if (v75 > v73) {
              double v75 = v73;
            }
            a1[61] = v75;
            if (v74 >= v73) {
              double v73 = v74;
            }
          }
          else
          {
            a1[61] = v73;
          }
          a1[62] = v73;
          unint64_t result = objc_msgSend_count(v10, v69, v70, v71);
          if (result >= 2)
          {
            uint64_t v78 = objc_msgSend_objectAtIndexedSubscript_(v10, v76, 1, v77);
            objc_msgSend_doubleValue(v78, v79, v80, v81);
            double v83 = v82;
            uint64_t v86 = objc_msgSend_objectAtIndexedSubscript_(v10, v84, 0, v85);
            unint64_t result = objc_msgSend_doubleValue(v86, v87, v88, v89);
            double v91 = v38 * (v83 - v90);
            if (v91 > 0.001)
            {
              double v92 = a1[63];
              if (v92 == 0.0 || v92 > v91) {
                a1[63] = v91;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1B65B78E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = objc_msgSend_animations(a2, (const char *)a2, a3, a4);
  unint64_t result = objc_msgSend_count(v6, v7, v8, v9);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v15 = objc_msgSend_animations(a2, v11, v12, v13);
      uint64_t v18 = objc_msgSend_objectAtIndex_(v15, v16, i, v17);
      sub_1B65B76D8(a1, v18);
      uint64_t v22 = objc_msgSend_animations(a2, v19, v20, v21);
      unint64_t result = objc_msgSend_count(v22, v23, v24, v25);
    }
  }
  return result;
}

void *sub_1B65B795C(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v10 = objc_msgSend_name(a3, a2, (uint64_t)a3, a4);
  if (!v10
    && (!objc_msgSend_model(a3, v7, v8, v9)
     || (v12 = objc_msgSend_model(a3, v7, v11, v9), (uint64_t v10 = objc_msgSend_name(v12, v13, v14, v15)) == 0))
    || !objc_msgSend_length(v10, v7, v8, v9))
  {
    uint64_t v16 = NSNumber;
    uint64_t v17 = *(void *)(a1 + 240);
    *(void *)(a1 + 240) = v17 + 1;
    uint64_t v18 = objc_msgSend_numberWithUnsignedLong_(v16, v7, v17, v9);
    uint64_t v22 = objc_msgSend_stringValue(v18, v19, v20, v21);
    uint64_t v10 = objc_msgSend_stringByAppendingString_(@"Node_", v23, v22, v24);
  }
  uint64_t v25 = (void *)sub_1B65B50F8(v10, v7);
  uint64_t v28 = objc_msgSend_stringByAppendingPathComponent_(a2, v26, (uint64_t)v25, v27);
  float32x4_t v32 = (char *)objc_msgSend_UTF8String(v28, v29, v30, v31);
  sub_1B65B8BB0(&__p, v32);
  if ((void **)(a1 + 72) != sub_1B65B8C60(a1 + 64, (void **)&__p.__r_.__value_.__l.__data_))
  {
    double v35 = objc_msgSend_stringByAppendingString_(v25, v33, @"_", v34);
    double v36 = NSNumber;
    uint64_t v37 = *(void *)(a1 + 240);
    *(void *)(a1 + 240) = v37 + 1;
    uint64_t v40 = objc_msgSend_numberWithUnsignedLong_(v36, v38, v37, v39);
    uint64_t v44 = objc_msgSend_stringValue(v40, v41, v42, v43);
    uint64_t v25 = objc_msgSend_stringByAppendingString_(v35, v45, v44, v46);
    uint64_t v49 = objc_msgSend_stringByAppendingPathComponent_(a2, v47, (uint64_t)v25, v48);
    double v53 = (char *)objc_msgSend_UTF8String(v49, v50, v51, v52);
    sub_1B65B8E38(&__p, v53);
  }
  sub_1B65B8E80((uint64_t **)(a1 + 64), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v25;
}

void sub_1B65B7ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B65B7AEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 104);
  if (!v4)
  {
    *(void *)(a1 + 128) = a3;
    long long v138 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], a2, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3, a4);
    long long v143 = 0;
    long long v144 = 0;
    long long v145 = 0;
    sub_1B65B9130((void **)&v143, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    uint64_t v129 = (uint64_t)a2;
    long long v140 = 0;
    long long v141 = 0;
    long long v142 = 0;
    sub_1B65B9130((void **)&v140, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
    uint64_t v10 = *(void ***)a1;
    uint64_t v9 = *(void ***)(a1 + 8);
    if (*(void ***)a1 != v9)
    {
      uint64_t v11 = (void *)(a1 + 80);
      while (1)
      {
        long long v139 = 0;
        long long v139 = *v10;
        if (v139) {
          break;
        }
LABEL_68:
        if (++v10 == v9) {
          goto LABEL_69;
        }
      }
      v146[0] = (uint64_t *)&v139;
      uint64_t v12 = sub_1B644FE48((uint64_t **)(a1 + 24), (unint64_t *)&v139, (uint64_t)&unk_1B6E4FDF8, v146);
      objc_msgSend_addObject_(v138, v13, v12[5], v14);
      v146[0] = (uint64_t *)&v139;
      uint64_t v15 = sub_1B65B6CE4((uint64_t **)(a1 + 48), (unint64_t *)&v139, (uint64_t)&unk_1B6E4FDF8, v146);
      uint64_t v19 = (long long *)(v15 + 6);
      uint64_t v20 = v144;
      if (v144 >= v145)
      {
        uint64_t v28 = v143;
        uint64_t v29 = (v144 - v143) >> 7;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 57) {
          goto LABEL_79;
        }
        uint64_t v31 = v145 - v143;
        if ((v145 - v143) >> 6 > v30) {
          unint64_t v30 = v31 >> 6;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v30;
        }
        if (v16)
        {
          float32x4_t v32 = (char *)sub_1B65B91F8((uint64_t)&v145, v16);
          uint64_t v28 = v143;
          uint64_t v20 = v144;
        }
        else
        {
          float32x4_t v32 = 0;
        }
        uint64_t v33 = &v32[128 * v29];
        long long v34 = *v19;
        long long v35 = v19[1];
        long long v36 = v19[3];
        *((_OWORD *)v33 + 2) = v19[2];
        *((_OWORD *)v33 + 3) = v36;
        *(_OWORD *)uint64_t v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        long long v37 = v19[4];
        long long v38 = v19[5];
        long long v39 = v19[7];
        *((_OWORD *)v33 + 6) = v19[6];
        *((_OWORD *)v33 + 7) = v39;
        *((_OWORD *)v33 + 4) = v37;
        *((_OWORD *)v33 + 5) = v38;
        if (v20 == v28)
        {
          float32x4_t v47 = &v32[128 * v29];
        }
        else
        {
          uint64_t v40 = &v32[128 * v29];
          do
          {
            long long v41 = *((_OWORD *)v20 - 8);
            long long v42 = *((_OWORD *)v20 - 7);
            long long v43 = *((_OWORD *)v20 - 5);
            *((_OWORD *)v40 - 6) = *((_OWORD *)v20 - 6);
            *((_OWORD *)v40 - 5) = v43;
            *((_OWORD *)v40 - 8) = v41;
            *((_OWORD *)v40 - 7) = v42;
            long long v44 = *((_OWORD *)v20 - 4);
            long long v45 = *((_OWORD *)v20 - 3);
            long long v46 = *((_OWORD *)v20 - 1);
            float32x4_t v47 = v40 - 128;
            *((_OWORD *)v40 - 2) = *((_OWORD *)v20 - 2);
            *((_OWORD *)v40 - 1) = v46;
            *((_OWORD *)v40 - 4) = v44;
            *((_OWORD *)v40 - 3) = v45;
            v20 -= 128;
            v40 -= 128;
          }
          while (v20 != v28);
        }
        uint64_t v27 = v33 + 128;
        long long v143 = v47;
        long long v144 = v33 + 128;
        long long v145 = &v32[128 * v16];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        long long v21 = *v19;
        long long v22 = *((_OWORD *)v15 + 4);
        long long v23 = *((_OWORD *)v15 + 6);
        *((_OWORD *)v144 + 2) = *((_OWORD *)v15 + 5);
        *((_OWORD *)v20 + 3) = v23;
        *(_OWORD *)uint64_t v20 = v21;
        *((_OWORD *)v20 + 1) = v22;
        long long v24 = *((_OWORD *)v15 + 7);
        long long v25 = *((_OWORD *)v15 + 8);
        long long v26 = *((_OWORD *)v15 + 10);
        *((_OWORD *)v20 + 6) = *((_OWORD *)v15 + 9);
        *((_OWORD *)v20 + 7) = v26;
        *((_OWORD *)v20 + 4) = v24;
        *((_OWORD *)v20 + 5) = v25;
        uint64_t v27 = v20 + 128;
      }
      long long v144 = v27;
      uint64_t v48 = (void *)*v11;
      if (!*v11) {
        goto LABEL_34;
      }
      uint64_t v49 = (void *)(a1 + 80);
      do
      {
        unint64_t v50 = v48[4];
        BOOL v51 = v50 >= (unint64_t)v139;
        if (v50 >= (unint64_t)v139) {
          uint64_t v52 = v48;
        }
        else {
          uint64_t v52 = v48 + 1;
        }
        if (v51) {
          uint64_t v49 = v48;
        }
        uint64_t v48 = (void *)*v52;
      }
      while (*v52);
      if (v49 != v11 && (unint64_t)v139 >= v49[4])
      {
        v146[0] = (uint64_t *)&v139;
        double v72 = sub_1B65B6CE4((uint64_t **)(a1 + 72), (unint64_t *)&v139, (uint64_t)&unk_1B6E4FDF8, v146);
        double v73 = (float64x2_t *)(v72 + 6);
        double v74 = v141;
        if (v141 < v142)
        {
          float64x2_t v75 = *v73;
          float64x2_t v76 = *((float64x2_t *)v72 + 4);
          float64x2_t v77 = *((float64x2_t *)v72 + 6);
          v141[2] = *((float64x2_t *)v72 + 5);
          v74[3] = v77;
          *double v74 = v75;
          v74[1] = v76;
          float64x2_t v78 = *((float64x2_t *)v72 + 7);
          float64x2_t v79 = *((float64x2_t *)v72 + 8);
          float64x2_t v80 = *((float64x2_t *)v72 + 10);
          v74[6] = *((float64x2_t *)v72 + 9);
          v74[7] = v80;
          v74[4] = v78;
          v74[5] = v79;
          uint64_t v66 = v74 + 8;
          goto LABEL_67;
        }
        uint64_t v67 = (float64x2_t *)v140;
        uint64_t v90 = ((char *)v141 - v140) >> 7;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 57) {
LABEL_79:
        }
          abort();
        uint64_t v92 = (char *)v142 - v140;
        if (((char *)v142 - v140) >> 6 > v91) {
          unint64_t v91 = v92 >> 6;
        }
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v7 = v91;
        }
        if (v7)
        {
          uint64_t v71 = (char *)sub_1B65B91F8((uint64_t)&v142, v7);
          uint64_t v67 = (float64x2_t *)v140;
          double v74 = v141;
        }
        else
        {
          uint64_t v71 = 0;
        }
        uint64_t v81 = &v71[128 * v90];
        float64x2_t v93 = *v73;
        float64x2_t v94 = v73[1];
        float64x2_t v95 = v73[3];
        *((float64x2_t *)v81 + 2) = v73[2];
        *((float64x2_t *)v81 + 3) = v95;
        *(float64x2_t *)uint64_t v81 = v93;
        *((float64x2_t *)v81 + 1) = v94;
        float64x2_t v96 = v73[4];
        float64x2_t v97 = v73[5];
        float64x2_t v98 = v73[7];
        *((float64x2_t *)v81 + 6) = v73[6];
        *((float64x2_t *)v81 + 7) = v98;
        *((float64x2_t *)v81 + 4) = v96;
        *((float64x2_t *)v81 + 5) = v97;
        if (v74 != v67)
        {
          uint64_t v99 = &v71[128 * v90];
          do
          {
            float64x2_t v100 = v74[-8];
            float64x2_t v101 = v74[-7];
            float64x2_t v102 = v74[-5];
            *((float64x2_t *)v99 - 6) = v74[-6];
            *((float64x2_t *)v99 - 5) = v102;
            *((float64x2_t *)v99 - 8) = v100;
            *((float64x2_t *)v99 - 7) = v101;
            float64x2_t v103 = v74[-4];
            float64x2_t v104 = v74[-3];
            float64x2_t v105 = v74[-1];
            uint64_t v89 = v99 - 128;
            *((float64x2_t *)v99 - 2) = v74[-2];
            *((float64x2_t *)v99 - 1) = v105;
            *((float64x2_t *)v99 - 4) = v103;
            *((float64x2_t *)v99 - 3) = v104;
            v74 -= 8;
            v99 -= 128;
          }
          while (v74 != v67);
LABEL_65:
          uint64_t v66 = (float64x2_t *)(v81 + 128);
          long long v140 = v89;
          long long v141 = (float64x2_t *)(v81 + 128);
          long long v142 = (float64x2_t *)&v71[128 * v7];
          if (v67) {
            operator delete(v67);
          }
          goto LABEL_67;
        }
      }
      else
      {
LABEL_34:
        objc_msgSend_worldTransform(v139, (const char *)v16, v17, v18, v129);
        float64x2_t v54 = vcvt_hight_f64_f32(v53);
        float64x2_t v55 = vcvtq_f64_f32(*(float32x2_t *)v53.f32);
        float64x2_t v57 = vcvt_hight_f64_f32(v56);
        float64x2_t v58 = vcvtq_f64_f32(*(float32x2_t *)v56.f32);
        float64x2_t v60 = vcvt_hight_f64_f32(v59);
        float64x2_t v61 = vcvtq_f64_f32(*(float32x2_t *)v59.f32);
        float64x2_t v63 = vcvt_hight_f64_f32(v62);
        float64x2_t v64 = vcvtq_f64_f32(*(float32x2_t *)v62.f32);
        double v65 = v141;
        if (v141 < v142)
        {
          float64x2_t *v141 = v55;
          v65[1] = v54;
          void v65[2] = v58;
          v65[3] = v57;
          v65[4] = v61;
          v65[5] = v60;
          uint64_t v66 = v65 + 8;
          v65[6] = v64;
          v65[7] = v63;
LABEL_67:
          long long v141 = v66;
          goto LABEL_68;
        }
        float64x2_t v130 = v55;
        float64x2_t v131 = v58;
        float64x2_t v132 = v61;
        float64x2_t v133 = v54;
        float64x2_t v134 = v57;
        float64x2_t v135 = v60;
        float64x2_t v136 = v64;
        float64x2_t v137 = v63;
        uint64_t v67 = (float64x2_t *)v140;
        uint64_t v68 = ((char *)v141 - v140) >> 7;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 57) {
          abort();
        }
        uint64_t v70 = (char *)v142 - v140;
        if (((char *)v142 - v140) >> 6 > v69) {
          unint64_t v69 = v70 >> 6;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v7 = v69;
        }
        if (v7)
        {
          uint64_t v71 = (char *)sub_1B65B91F8((uint64_t)&v142, v7);
          uint64_t v67 = (float64x2_t *)v140;
          double v65 = v141;
        }
        else
        {
          uint64_t v71 = 0;
        }
        uint64_t v81 = &v71[128 * v68];
        *(float64x2_t *)uint64_t v81 = v130;
        *((float64x2_t *)v81 + 1) = v133;
        *((float64x2_t *)v81 + 2) = v131;
        *((float64x2_t *)v81 + 3) = v134;
        *((float64x2_t *)v81 + 4) = v132;
        *((float64x2_t *)v81 + 5) = v135;
        *((float64x2_t *)v81 + 6) = v136;
        *((float64x2_t *)v81 + 7) = v137;
        if (v65 != v67)
        {
          double v82 = &v71[128 * v68];
          do
          {
            float64x2_t v83 = v65[-8];
            float64x2_t v84 = v65[-7];
            float64x2_t v85 = v65[-5];
            *((float64x2_t *)v82 - 6) = v65[-6];
            *((float64x2_t *)v82 - 5) = v85;
            *((float64x2_t *)v82 - 8) = v83;
            *((float64x2_t *)v82 - 7) = v84;
            float64x2_t v86 = v65[-4];
            float64x2_t v87 = v65[-3];
            float64x2_t v88 = v65[-1];
            uint64_t v89 = v82 - 128;
            *((float64x2_t *)v82 - 2) = v65[-2];
            *((float64x2_t *)v82 - 1) = v88;
            *((float64x2_t *)v82 - 4) = v86;
            *((float64x2_t *)v82 - 3) = v87;
            v65 -= 8;
            v82 -= 128;
          }
          while (v65 != v67);
          goto LABEL_65;
        }
      }
      uint64_t v89 = v81;
      goto LABEL_65;
    }
LABEL_69:
    uint64_t v106 = *(void *)(a1 + 128);
    if (*(void *)(a1 + 96))
    {
      uint64_t v107 = v129;
      uint64_t v109 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, (const char *)v7, v106, v8);
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v110 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, (const char *)v7, v106, v8);
      uint64_t v107 = v129;
      uint64_t v4 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v111, v129, v110, qword_1E9DDBC10);
      uint64_t v114 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 128), v112, @"Skeleton", v113);
      uint64_t v109 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v115, v114, v116);
    }
    *(void *)(a1 + 112) = v109;
    uint64_t v117 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v108, v107, v109, qword_1E9DDBC08, v129);
    *(void *)(a1 + 104) = v117;
    double v119 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v118, v117, @"joints", qword_1E9DDBBB8, qword_1E9DDBC30);
    objc_msgSend_setStringArray_(v119, v120, (uint64_t)v138, v121);
    double v123 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v122, *(void *)(a1 + 104), @"restTransforms", qword_1E9DDBB50, qword_1E9DDBC30);
    objc_msgSend_setDouble4x4Array_count_(v123, v124, (uint64_t)v143, (v144 - v143) >> 7);
    BOOL v126 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v125, *(void *)(a1 + 104), @"bindTransforms", qword_1E9DDBB50, qword_1E9DDBC30);
    objc_msgSend_setDouble4x4Array_count_(v126, v127, (uint64_t)v140, ((char *)v141 - v140) >> 7);
    if (!v4) {
      uint64_t v4 = *(void *)(a1 + 104);
    }
    if (v140)
    {
      long long v141 = (float64x2_t *)v140;
      operator delete(v140);
    }
    if (v143)
    {
      long long v144 = v143;
      operator delete(v143);
    }
  }
  return v4;
}

void sub_1B65B8144(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(void *)(v1 - 144) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(void *)(v1 - 120) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B65B8190(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (void *)a3;
  uint64_t v31 = a2;
  unint64_t v6 = *(void **)(a1 + 424);
  if (v6)
  {
    uint64_t v8 = (uint64_t **)(a1 + 416);
    uint64_t v9 = a1 + 424;
    do
    {
      unint64_t v10 = v6[4];
      BOOL v11 = v10 >= (unint64_t)a2;
      if (v10 >= (unint64_t)a2) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = v6 + 1;
      }
      if (v11) {
        uint64_t v9 = (uint64_t)v6;
      }
      unint64_t v6 = (void *)*v12;
    }
    while (*v12);
    if (v9 != a1 + 424 && *(void *)(v9 + 32) <= (unint64_t)a2)
    {
      float32x4_t v32 = &v31;
      uint64_t v13 = sub_1B644FE48(v8, (unint64_t *)&v31, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v32);
      sub_1B65B9230(v13[5], *(const char **)(a1 + 56), v4, v14);
      uint64_t v4 = objc_msgSend_stringByAppendingPathComponent_(v4, v15, a4, v16);
      a2 = v31;
    }
  }
  if (!sub_1B65B9300(a1, a2, a3, a4)) {
    return 0;
  }
  uint64_t v19 = qword_1E9DDBBE0;
  uint64_t v20 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v17, (uint64_t)v4, v18);
  long long v22 = (char *)objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v21, *(void *)(a1 + 56), v20, v19);
  long long v26 = objc_msgSend_model(v31, v23, v24, v25);
  sub_1B65B939C(a1, v22, v4, v26);
  if (objc_msgSend_morpher(v31, v27, v28, v29)) {
    sub_1B65BAAA0(a1, v22, v4, v31);
  }
  return v22;
}

uint64_t sub_1B65B82DC(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = qword_1E9DDBBD0;
  uint64_t v7 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, a2, a3, (uint64_t)a4);
  uint64_t v9 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v8, *(void *)(a1 + 56), v7, v6);
  if (objc_msgSend_usesOrthographicProjection(a4, v10, v11, v12)) {
    uint64_t v14 = @"orthographic";
  }
  else {
    uint64_t v14 = @"perspective";
  }
  uint64_t v15 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v13, v9, @"projection", qword_1E9DDBBC0, qword_1E9DDBC30);
  uint64_t v18 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v16, (uint64_t)v14, v17);
  objc_msgSend_setTokenValue_(v15, v19, v18, v20);
  if ((objc_msgSend_usesOrthographicProjection(a4, v21, v22, v23) & 1) == 0)
  {
    objc_msgSend_fieldOfView(a4, v24, v25, v26);
    long double v28 = tan(v27 / 180.0 * 3.14159265 * 0.5);
    objc_msgSend_focalLength(a4, v29, v30, v31);
    *(float *)&long double v28 = v28 * v32 + v28 * v32;
    long long v34 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v33, v9, @"horizontalAperture", qword_1E9DDBB58, qword_1E9DDBC30);
    LODWORD(v35) = LODWORD(v28);
    objc_msgSend_setFloatValue_(v34, v36, v37, v38, v35);
    uint64_t v40 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v39, v9, @"verticalAperture", qword_1E9DDBB58, qword_1E9DDBC30);
    LODWORD(v41) = LODWORD(v28);
    objc_msgSend_setFloatValue_(v40, v42, v43, v44, v41);
  }
  long long v45 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v24, v9, @"focalLength", qword_1E9DDBB58, qword_1E9DDBC30);
  objc_msgSend_focalLength(a4, v46, v47, v48);
  objc_msgSend_setFloatValue_(v45, v49, v50, v51);
  float32x4_t v53 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v52, v9, @"clippingRange", qword_1E9DDBB60, qword_1E9DDBC30);
  objc_msgSend_zNear(a4, v54, v55, v56);
  unsigned int v89 = v57;
  objc_msgSend_zFar(a4, v58, v59, v60);
  objc_msgSend_setFloat2Value_(v53, v61, v62, v63, COERCE_DOUBLE(__PAIR64__(v64, v89)));
  if (objc_msgSend_depthOfField(a4, v65, v66, v67))
  {
    unint64_t v69 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v68, v9, @"fStop", qword_1E9DDBB58, qword_1E9DDBC30);
    double v73 = objc_msgSend_depthOfField(a4, v70, v71, v72);
    objc_msgSend_fStop(v73, v74, v75, v76);
    objc_msgSend_setFloatValue_(v69, v77, v78, v79);
    uint64_t v81 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v80, v9, @"focusDistance", qword_1E9DDBB58, qword_1E9DDBC30);
    objc_msgSend_focusDistance(a4, v82, v83, v84);
    objc_msgSend_setFloatValue_(v81, v85, v86, v87);
  }
  return v9;
}

void *sub_1B65B8548(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = objc_msgSend_animationKeys(a3, a2, (uint64_t)a3, a4);
  unint64_t result = objc_msgSend_count(v7, v8, v9, v10);
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = objc_msgSend_animationKeys(a3, v12, v13, v14);
      uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(v17, v18, v16, v19);
      unint64_t result = objc_msgSend_animationPlayerForKey_(a3, v21, v20, v22);
      if (result) {
        break;
      }
      if (v15 == (void *)++v16) {
        return result;
      }
    }
    uint64_t v23 = objc_msgSend_animation(result, v12, v13, v14);
    float v27 = objc_msgSend_caAnimation(v23, v24, v25, v26);
    return (void *)sub_1B65BEE4C(a1, a2, v27);
  }
  return result;
}

uint64_t sub_1B65B85FC(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  char v4 = a4;
  objc_msgSend_transform(a3, a2, (uint64_t)a3, a4);
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v11, *MEMORY[0x1E4F149A0]), (int8x16_t)vceqq_f32(v12, *(float32x4_t *)(MEMORY[0x1E4F149A0] + 16))), vandq_s8((int8x16_t)vceqq_f32(v13, *(float32x4_t *)(MEMORY[0x1E4F149A0] + 32)), (int8x16_t)vceqq_f32(v14, *(float32x4_t *)(MEMORY[0x1E4F149A0] + 48))))) & 0x80000000) == 0)
  {
    if (objc_msgSend_count(*(void **)(a1 + 88), v8, v9, v10))
    {
      if ((objc_msgSend_containsObject_(*(void **)(a1 + 88), v8, @"xformOp:transform", v10) & 1) == 0)
      {
        objc_msgSend_position(a3, v8, v15, v10);
        if ((VFXVector3EqualToVector3(v16, (float32x4_t)0) & 1) == 0
          && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v17, @"xformOp:translate", v19) & 1) == 0)
        {
          uint64_t v20 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v17, (uint64_t)a2, @"xformOp:translate", qword_1E9DDBB40, qword_1E9DDBC30);
          objc_msgSend_position(a3, v21, v22, v23);
          unsigned int v146 = v24;
          objc_msgSend_position(a3, v25, v26, v27);
          float64x2_t v147 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v28, v146));
          objc_msgSend_position(a3, v29, v30, v31);
          *(double *)&long long v32 = *((float *)&v32 + 2);
          v152[0] = v147;
          v152[1] = v32;
          objc_msgSend_setDouble3Value_(v20, v33, (uint64_t)v152, v34);
          objc_msgSend_addObject_(*(void **)(a1 + 88), v35, @"xformOp:translate", v36);
        }
        objc_msgSend_orientation(a3, v17, v18, v19);
        uint32x4_t v41 = (uint32x4_t)vceqq_f32(v40, (float32x4_t)xmmword_1B6E4F370);
        v41.i32[0] = vminvq_u32(v41);
        if ((v41.i32[0] & 0x80000000) == 0
          && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v37, @"xformOp:orient", v39) & 1) == 0
          && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v37, @"xformOp:rotateXYZ", v39) & 1) == 0)
        {
          if ((objc_msgSend_containsObject_(*(void **)(a1 + 88), v37, @"xformOp:rotateX", v39) & 1) != 0
            || (objc_msgSend_containsObject_(*(void **)(a1 + 88), v42, @"xformOp:rotateY", v44) & 1) != 0
            || (objc_msgSend_containsObject_(*(void **)(a1 + 88), v42, @"xformOp:rotateZ", v44) & 1) != 0)
          {
            objc_msgSend_eulerAngles(a3, v42, v43, v44);
            if (v48 != 0.0
              && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v45, @"xformOp:rotateX", v47) & 1) == 0)
            {
              uint64_t v49 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v45, (uint64_t)a2, @"xformOp:rotateX", qword_1E9DDBB58, qword_1E9DDBC30);
              objc_msgSend_eulerAngles(a3, v50, v51, v52);
              double v54 = v53 / 3.14159265 * 180.0;
              *(float *)&double v54 = v54;
              objc_msgSend_setFloatValue_(v49, v55, v56, v57, v54);
              objc_msgSend_addObject_(*(void **)(a1 + 88), v58, @"xformOp:rotateX", v59);
            }
            objc_msgSend_eulerAngles(a3, v45, v46, v47);
            LODWORD(v63) = HIDWORD(v63);
            if (*((float *)&v63 + 1) != 0.0
              && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v60, @"xformOp:rotateY", v62, v63) & 1) == 0)
            {
              unsigned int v64 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v60, (uint64_t)a2, @"xformOp:rotateY", qword_1E9DDBB58, qword_1E9DDBC30);
              objc_msgSend_eulerAngles(a3, v65, v66, v67);
              double v69 = v68 / 3.14159265 * 180.0;
              *(float *)&double v69 = v69;
              objc_msgSend_setFloatValue_(v64, v70, v71, v72, v69);
              objc_msgSend_addObject_(*(void **)(a1 + 88), v73, @"xformOp:rotateY", v74);
            }
            objc_msgSend_eulerAngles(a3, v60, v61, v62, v63);
            v41.i32[0] = v41.i32[2];
            if (*(float *)&v41.i32[2] != 0.0
              && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v37, @"xformOp:rotateZ", v39, *(double *)v41.i64) & 1) == 0)
            {
              uint64_t v75 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v37, (uint64_t)a2, @"xformOp:rotateZ", qword_1E9DDBB58, qword_1E9DDBC30);
              objc_msgSend_eulerAngles(a3, v76, v77, v78);
              double v80 = v79 / 3.14159265 * 180.0;
              *(float *)&double v80 = v80;
              objc_msgSend_setFloatValue_(v75, v81, v82, v83, v80);
              objc_msgSend_addObject_(*(void **)(a1 + 88), v84, @"xformOp:rotateZ", v85);
            }
          }
          else
          {
            objc_msgSend_orientation(a3, v42, v43, v44);
            double v148 = v98;
            float64x2_t v100 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v99, (uint64_t)a2, @"xformOp:orient", qword_1E9DDBBA8, qword_1E9DDBC30);
            objc_msgSend_setQuatfValue_(v100, v101, v102, v103, v148);
            objc_msgSend_addObject_(*(void **)(a1 + 88), v104, @"xformOp:orient", v105);
          }
        }
        objc_msgSend_scale(a3, v37, v38, v39, *(double *)v41.i64);
        __asm { FMOV            V1.4S, #1.0 }
        uint32x4_t v112 = (uint32x4_t)vceqq_f32(v111, _Q1);
        v112.i32[3] = v112.i32[2];
        if ((vminvq_u32(v112) & 0x80000000) == 0
          && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v8, @"xformOp:scale", v10) & 1) == 0)
        {
          uint64_t v113 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v8, (uint64_t)a2, @"xformOp:scale", qword_1E9DDBB40, qword_1E9DDBC30);
          objc_msgSend_scale(a3, v114, v115, v116);
          unsigned int v149 = v117;
          objc_msgSend_scale(a3, v118, v119, v120);
          float64x2_t v150 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v121, v149));
          objc_msgSend_scale(a3, v122, v123, v124);
          *(double *)&long long v125 = *((float *)&v125 + 2);
          v151[0] = v150;
          v151[1] = v125;
          objc_msgSend_setDouble3Value_(v113, v126, (uint64_t)v151, v127);
          objc_msgSend_addObject_(*(void **)(a1 + 88), v128, @"xformOp:scale", v129);
        }
      }
    }
    else if ((v4 & 1) == 0)
    {
      uint64_t v86 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v8, (uint64_t)a2, @"xformOp:transform", qword_1E9DDBB48, qword_1E9DDBC30);
      objc_msgSend_transform(a3, v87, v88, v89);
      v153[0] = vcvtq_f64_f32(*(float32x2_t *)v90.f32);
      v153[1] = vcvt_hight_f64_f32(v90);
      v153[2] = vcvtq_f64_f32(*(float32x2_t *)v91.f32);
      v153[3] = vcvt_hight_f64_f32(v91);
      v153[4] = vcvtq_f64_f32(*(float32x2_t *)v92.f32);
      v153[5] = vcvt_hight_f64_f32(v92);
      v153[6] = vcvtq_f64_f32(*(float32x2_t *)v93.f32);
      v153[7] = vcvt_hight_f64_f32(v93);
      objc_msgSend_setDouble4x4Value_(v86, v94, (uint64_t)v153, v95);
      objc_msgSend_addObject_(*(void **)(a1 + 88), v96, @"xformOp:transform", v97);
    }
  }
  float64x2_t v132 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v8, 8, v10);
  for (uint64_t i = 0; i != 8; ++i)
  {
    float64x2_t v134 = off_1E6144DB8[i];
    if (objc_msgSend_containsObject_(*(void **)(a1 + 88), v130, (uint64_t)v134, v131))
    {
      uint64_t v136 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v130, (uint64_t)v134, v131);
      objc_msgSend_addObject_(v132, v137, v136, v138);
    }
  }
  if (objc_msgSend_count(v132, v130, v135, v131))
  {
    long long v142 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v139, (uint64_t)a2, @"xformOpOrder", qword_1E9DDBBC8, qword_1E9DDBC30);
    objc_msgSend_setTokenArray_(v142, v143, (uint64_t)v132, v144);
  }
  return objc_msgSend_removeAllObjects(*(void **)(a1 + 88), v139, v140, v141);
}

void *sub_1B65B8BB0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void **sub_1B65B8C60(uint64_t a1, void **a2)
{
  double v2 = (void **)(a1 + 8);
  unint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  size_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = sub_1B65B8CE0(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      size_t v5 = (void **)v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_1B65B8CE0(a2, v5 + 4) & 0x80) != 0) {
    return v2;
  }
  return v5;
}

uint64_t sub_1B65B8CE0(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return sub_1B65B8D18(a1, v2, v5, v6);
}

uint64_t sub_1B65B8D18(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

std::string *sub_1B65B8D78(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = __dst->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      std::string::size_type size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    size_t v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    size_t v7 = __dst;
    if (__len > 0x16)
    {
      std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    __dst->__r_.__value_.__l.__size_ = __len;
  }
  else {
    *((unsigned char *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_1B65B8E38(std::string *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return sub_1B65B8D78(a1, __s, v4);
}

uint64_t *sub_1B65B8E80(uint64_t **a1, void **a2, uint64_t a3)
{
  size_t v5 = (uint64_t **)sub_1B65B8F00((uint64_t)a1, &v8, a2);
  unint64_t result = *v5;
  if (!*v5)
  {
    sub_1B65B8F94((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1B644FF08(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *sub_1B65B8F00(uint64_t a1, void *a2, void **a3)
{
  size_t v5 = (void *)(a1 + 8);
  size_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        size_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if ((sub_1B65B8CE0(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        size_t v4 = (void *)*v7;
        size_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((sub_1B65B8CE0(v8, a3) & 0x80) == 0) {
        break;
      }
      size_t v5 = v7 + 1;
      size_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    size_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *sub_1B65B8F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t result = sub_1B65B9034(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B65B9018(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1B65B90D0(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1B65B9034(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_1B65B90D0(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1B65B9130(void **a1, unint64_t a2)
{
  size_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 7)
  {
    if (a2 >> 57) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1B65B91F8(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFF80];
    std::string::size_type v9 = &v6[128 * v8];
    float32x4_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    float32x4_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 8);
        long long v14 = *((_OWORD *)v10 - 7);
        long long v15 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v15;
        *((_OWORD *)v12 - 8) = v13;
        *((_OWORD *)v12 - 7) = v14;
        long long v16 = *((_OWORD *)v10 - 4);
        long long v17 = *((_OWORD *)v10 - 3);
        long long v18 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v18;
        *((_OWORD *)v12 - 4) = v16;
        *((_OWORD *)v12 - 3) = v17;
        v12 -= 128;
        v10 -= 128;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_1B65B91F8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    sub_1B63C8620();
  }
  return operator new(a2 << 7);
}

uint64_t sub_1B65B9230(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, a2, (uint64_t)a3, a4);
  uint64_t v9 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v8, (uint64_t)a2, v7, qword_1E9DDBC10);
  uint64_t v12 = objc_msgSend_stringByAppendingPathComponent_(a3, v10, @"Skeleton", v11);
  uint64_t v15 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v13, v12, v14);
  *(void *)(a1 + 8) = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v16, (uint64_t)a2, v15, qword_1E9DDBC08);
  long long v18 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v17, v9, @"skel:skeleton", qword_1E9DDBB98, qword_1E9DDBC30);
  objc_msgSend_setObjectPath_(v18, v19, v15, v20);
  return v9;
}

uint64_t sub_1B65B9300(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  size_t v4 = objc_msgSend_model(a2, (const char *)a2, a3, a4);
  uint64_t v8 = objc_msgSend_mesh(v4, v5, v6, v7);
  if (objc_msgSend_meshElementCount(v8, v9, v10, v11) < 1) {
    return 0;
  }
  uint64_t v14 = 0;
  while (1)
  {
    uint64_t v15 = objc_msgSend_meshElementAtIndex_(v8, v12, v14, v13);
    if (!objc_msgSend_primitiveType(v15, v16, v17, v18) || objc_msgSend_primitiveType(v15, v19, v20, v21) == 4) {
      break;
    }
    uint64_t result = objc_msgSend_primitiveType(v15, v22, v23, v24);
    if (result == 1) {
      return result;
    }
    if (++v14 >= objc_msgSend_meshElementCount(v8, v26, v27, v28)) {
      return 0;
    }
  }
  return 1;
}

void sub_1B65B939C(uint64_t a1, const char *a2, void *a3, void *a4)
{
  uint64_t v502 = a3;
  uint64_t v505 = a1;
  uint64_t v533 = *MEMORY[0x1E4F143B8];
  uint64_t v508 = a2;
  int64_t v5 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, (uint64_t)a2, @"subdivisionScheme", qword_1E9DDBBC0, qword_1E9DDBC30);
  uint64_t v8 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v6, @"none", v7);
  objc_msgSend_setTokenValue_(v5, v9, v8, v10);
  uint64_t v507 = a4;
  if (objc_msgSend_modelSourceChannels(a4, v11, v12, v13)
    && (uint64_t v17 = objc_msgSend_modelSourceChannels(a4, v14, v15, v16),
        (unint64_t)objc_msgSend_count(v17, v18, v19, v20) >= 2))
  {
    uint64_t v21 = objc_msgSend_modelSourceChannels(a4, v14, v15, v16);
    unint64_t v506 = objc_msgSend_count(v21, v22, v23, v24);
    int v504 = 1;
  }
  else
  {
    int v504 = 0;
    unint64_t v506 = 1;
  }
  uint64_t v509 = objc_msgSend_mesh(v507, v14, v15, v16);
  uint64_t v28 = objc_msgSend_meshElementCount(v509, v25, v26, v27);
  if (v28 < 1)
  {
    int v32 = 0;
    uint64_t v527 = 0;
    uint64_t v528 = 0;
    uint64_t v529 = 0;
  }
  else
  {
    unint64_t v31 = 0;
    int v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = v509;
    do
    {
      double v35 = objc_msgSend_meshElementAtIndex_(v34, v29, v33, v30);
      uint64_t v39 = objc_msgSend_primitiveCount(v35, v36, v37, v38);
      if (objc_msgSend_primitiveType(v35, v40, v41, v42) == 1
        && (unint64_t)objc_msgSend_indexCount(v35, v43, v44, v45) >= 3)
      {
        int v32 = v32 + 3 * objc_msgSend_indexCount(v35, v43, v44, v45) - 6;
      }
      else
      {
        v32 += objc_msgSend_indexCount(v35, v43, v44, v45);
      }
      v31 += v39;
      ++v33;
      uint64_t v34 = v509;
      uint64_t v28 = objc_msgSend_meshElementCount(v509, v46, v47, v48);
    }
    while (v33 < v28);
    uint64_t v527 = 0;
    uint64_t v528 = 0;
    uint64_t v529 = 0;
    if (v31)
    {
      sub_1B646FFA4(&v527, v31);
      uint64_t v49 = v528;
      memset_pattern16(v528, &unk_1B6E724E0, 4 * v31);
      uint64_t v528 = &v49[4 * v31];
    }
  }
  v501[1] = v501;
  MEMORY[0x1F4188790](v28, v29);
  uint64_t v521 = (void **)((char *)v501 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v54)
  {
    unint64_t v55 = v506;
    uint64_t v56 = v521;
    bzero(v521, 24 * ((24 * v506 - 24) / 0x18) + 24);
    do
    {
      sub_1B6427A50(v56, v32);
      v56 += 3;
      --v55;
    }
    while (v55);
  }
  long long v525 = 0u;
  long long v526 = 0u;
  long long v523 = 0u;
  long long v524 = 0u;
  uint64_t v510 = (__CFString *)objc_msgSend_meshElements(v509, v50, v51, v52);
  uint64_t k = objc_msgSend_countByEnumeratingWithState_objects_count_(v510, v57, (uint64_t)&v523, (uint64_t)v532, 16);
  if (k)
  {
    uint64_t v511 = *(__CFString **)v524;
    uint64_t v512 = 0;
    do
    {
      uint64_t v513 = 0;
      unint64_t v516 = k;
      do
      {
        if (*(__CFString **)v524 != v511) {
          objc_enumerationMutation(v510);
        }
        uint64_t v62 = *(void **)(*((void *)&v523 + 1) + 8 * v513);
        if (objc_msgSend_data(v62, v58, v59, v60))
        {
          double v63 = objc_msgSend_data(v62, v58, v59, v60);
          v520.i64[0] = objc_msgSend_bytes(v63, v64, v65, v66);
          if (objc_msgSend_primitiveType(v62, v67, v68, v69) == 4)
          {
            uint64_t v73 = 0;
            uint64_t v74 = 4 * v512;
            while (objc_msgSend_primitiveCount(v62, v70, v71, v72) > v73)
            {
              int v75 = objc_msgSend_bytesPerIndex(v62, v70, v71, v72);
              switch(v75)
              {
                case 1:
                  int v79 = *(unsigned __int8 *)v520.i64[0];
                  break;
                case 4:
                  int v79 = *(_DWORD *)v520.i64[0];
                  break;
                case 2:
                  int v79 = *(unsigned __int16 *)v520.i64[0];
                  break;
                default:
                  int v79 = *(char *)v520.i64[0];
                  break;
              }
              *(_DWORD *)&v527[4 * v73 + v74] = v79;
              uint64_t v80 = objc_msgSend_bytesPerIndex(v62, v76, v77, v78);
              ++v73;
              v520.i64[0] += v80;
            }
          }
          uint64_t v514 = objc_msgSend_indicesChannelCount(v62, v70, v71, v72);
          if (objc_msgSend_hasInterleavedIndicesChannels(v62, v81, v82, v83)) {
            uint64_t v87 = v514;
          }
          else {
            uint64_t v87 = 1;
          }
          v518.i64[0] = v87;
          if (v514)
          {
            for (uint64_t i = 0; i != v514; ++i)
            {
              char hasInterleavedIndicesChannels = objc_msgSend_hasInterleavedIndicesChannels(v62, v84, v85, v86);
              v519.i64[0] = i;
              if ((hasInterleavedIndicesChannels & 1) == 0)
              {
                uint64_t v92 = objc_msgSend_indexCount(v62, v89, v90, v91);
                v519.i64[0] = v92 * i;
              }
              uint64_t v93 = objc_msgSend_primitiveType(v62, v89, v90, v91);
              uint64_t v97 = &v521[3 * i];
              double v98 = (char **)(v97 + 1);
              uint64_t v99 = (char **)(v97 + 2);
              if (v93 == 1)
              {
                for (unint64_t j = 2; j < objc_msgSend_indexCount(v62, (const char *)v94, v95, v96); ++j)
                {
                  uint64_t v101 = objc_msgSend_bytesPerIndex(v62, v84, v85, v86);
                  int v105 = objc_msgSend_bytesPerIndex(v62, v102, v103, v104);
                  unint64_t v109 = v101 * (v519.i64[0] + j * v518.i64[0]);
                  switch(v105)
                  {
                    case 1:
                      int v110 = *(unsigned __int8 *)(v520.i64[0] + v109);
                      break;
                    case 4:
                      int v110 = *(_DWORD *)(v520.i64[0] + v109);
                      break;
                    case 2:
                      int v110 = *(unsigned __int16 *)(v520.i64[0] + v109);
                      break;
                    default:
                      int v110 = *(char *)(v520.i64[0] + v109);
                      break;
                  }
                  LODWORD(v517) = v110;
                  uint64_t v111 = objc_msgSend_bytesPerIndex(v62, v106, v107, v108);
                  int v115 = objc_msgSend_bytesPerIndex(v62, v112, v113, v114);
                  uint64_t v119 = v111 * (v519.i64[0] + (j - 1) * v518.i64[0]);
                  switch(v115)
                  {
                    case 1:
                      int v120 = *(unsigned __int8 *)(v520.i64[0] + v119);
                      break;
                    case 4:
                      int v120 = *(_DWORD *)(v520.i64[0] + v119);
                      break;
                    case 2:
                      int v120 = *(unsigned __int16 *)(v520.i64[0] + v119);
                      break;
                    default:
                      int v120 = *(char *)(v520.i64[0] + v119);
                      break;
                  }
                  uint64_t v121 = objc_msgSend_bytesPerIndex(v62, v116, v117, v118);
                  int v125 = objc_msgSend_bytesPerIndex(v62, v122, v123, v124);
                  uint64_t v126 = v121 * (v519.i64[0] + (j - 2) * v518.i64[0]);
                  switch(v125)
                  {
                    case 1:
                      int v127 = *(unsigned __int8 *)(v520.i64[0] + v126);
                      break;
                    case 4:
                      int v127 = *(_DWORD *)(v520.i64[0] + v126);
                      break;
                    case 2:
                      int v127 = *(unsigned __int16 *)(v520.i64[0] + v126);
                      break;
                    default:
                      int v127 = *(char *)(v520.i64[0] + v126);
                      break;
                  }
                  uint64_t v128 = *v98;
                  uint64_t v129 = *v99;
                  if (*v98 >= *v99)
                  {
                    float64x2_t v132 = (char *)*v97;
                    uint64_t v133 = (v128 - (unsigned char *)*v97) >> 2;
                    unint64_t v134 = v133 + 1;
                    if ((unint64_t)(v133 + 1) >> 62) {
                      goto LABEL_288;
                    }
                    uint64_t v135 = v129 - v132;
                    if (v135 >> 1 > v134) {
                      unint64_t v134 = v135 >> 1;
                    }
                    if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v94 = v134;
                    }
                    if (v94)
                    {
                      uint64_t v136 = (char *)sub_1B64282E0((uint64_t)(v97 + 2), v94);
                      uint64_t v128 = *v98;
                      float64x2_t v132 = (char *)*v97;
                    }
                    else
                    {
                      uint64_t v136 = 0;
                    }
                    float64x2_t v137 = &v136[4 * v133];
                    if (j) {
                      int v138 = v120;
                    }
                    else {
                      int v138 = v127;
                    }
                    *(_DWORD *)float64x2_t v137 = v138;
                    uint64_t v131 = v137 + 4;
                    while (v128 != v132)
                    {
                      int v139 = *((_DWORD *)v128 - 1);
                      v128 -= 4;
                      *((_DWORD *)v137 - 1) = v139;
                      v137 -= 4;
                    }
                    *uint64_t v97 = v137;
                    uint64_t v129 = &v136[4 * v94];
                    *double v98 = v131;
                    *uint64_t v99 = v129;
                    if (v132)
                    {
                      operator delete(v132);
                      uint64_t v129 = *v99;
                    }
                  }
                  else
                  {
                    if (j) {
                      int v130 = v120;
                    }
                    else {
                      int v130 = v127;
                    }
                    *(_DWORD *)uint64_t v128 = v130;
                    uint64_t v131 = v128 + 4;
                  }
                  *double v98 = v131;
                  if (v131 >= v129)
                  {
                    long long v142 = (char *)*v97;
                    uint64_t v143 = (v131 - (unsigned char *)*v97) >> 2;
                    unint64_t v144 = v143 + 1;
                    if ((unint64_t)(v143 + 1) >> 62) {
                      goto LABEL_288;
                    }
                    uint64_t v145 = v129 - v142;
                    if (v145 >> 1 > v144) {
                      unint64_t v144 = v145 >> 1;
                    }
                    if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v94 = v144;
                    }
                    if (v94)
                    {
                      unsigned int v146 = (char *)sub_1B64282E0((uint64_t)(v97 + 2), v94);
                      uint64_t v131 = *v98;
                      long long v142 = (char *)*v97;
                    }
                    else
                    {
                      unsigned int v146 = 0;
                    }
                    float64x2_t v147 = &v146[4 * v143];
                    if (j) {
                      int v148 = v127;
                    }
                    else {
                      int v148 = v120;
                    }
                    *(_DWORD *)float64x2_t v147 = v148;
                    uint64_t v141 = v147 + 4;
                    if (v131 == v142)
                    {
                      uint64_t k = v516;
                    }
                    else
                    {
                      uint64_t k = v516;
                      do
                      {
                        int v149 = *((_DWORD *)v131 - 1);
                        v131 -= 4;
                        *((_DWORD *)v147 - 1) = v149;
                        v147 -= 4;
                      }
                      while (v131 != v142);
                    }
                    *uint64_t v97 = v147;
                    uint64_t v129 = &v146[4 * v94];
                    *double v98 = v141;
                    *uint64_t v99 = v129;
                    if (v142)
                    {
                      operator delete(v142);
                      uint64_t v129 = *v99;
                    }
                  }
                  else
                  {
                    if (j) {
                      int v140 = v127;
                    }
                    else {
                      int v140 = v120;
                    }
                    *(_DWORD *)uint64_t v131 = v140;
                    uint64_t v141 = v131 + 4;
                    uint64_t k = v516;
                  }
                  *double v98 = v141;
                  if (v141 >= v129)
                  {
                    uint64_t v151 = (char *)*v97;
                    uint64_t v152 = (v141 - (unsigned char *)*v97) >> 2;
                    unint64_t v153 = v152 + 1;
                    if ((unint64_t)(v152 + 1) >> 62) {
LABEL_288:
                    }
                      abort();
                    uint64_t v154 = v129 - v151;
                    if (v154 >> 1 > v153) {
                      unint64_t v153 = v154 >> 1;
                    }
                    if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v94 = v153;
                    }
                    if (v94)
                    {
                      uint64_t v155 = (char *)sub_1B64282E0((uint64_t)(v97 + 2), v94);
                      uint64_t v141 = *v98;
                      uint64_t v151 = (char *)*v97;
                    }
                    else
                    {
                      uint64_t v155 = 0;
                    }
                    uint64_t v156 = &v155[4 * v152];
                    *(_DWORD *)uint64_t v156 = v517;
                    float64x2_t v150 = v156 + 4;
                    for (uint64_t k = v516; v141 != v151; v156 -= 4)
                    {
                      int v157 = *((_DWORD *)v141 - 1);
                      v141 -= 4;
                      *((_DWORD *)v156 - 1) = v157;
                    }
                    *uint64_t v97 = v156;
                    *double v98 = v150;
                    *uint64_t v99 = &v155[4 * v94];
                    if (v151) {
                      operator delete(v151);
                    }
                  }
                  else
                  {
                    *(_DWORD *)uint64_t v141 = v517;
                    float64x2_t v150 = v141 + 4;
                  }
                  *double v98 = v150;
                }
              }
              else
              {
                for (unint64_t m = 0; m < objc_msgSend_indexCount(v62, (const char *)v94, v95, v96); ++m)
                {
                  uint64_t v159 = objc_msgSend_bytesPerIndex(v62, v84, v85, v86);
                  int v163 = objc_msgSend_bytesPerIndex(v62, v160, v161, v162);
                  unint64_t v164 = v159 * (v519.i64[0] + m * v518.i64[0]);
                  switch(v163)
                  {
                    case 1:
                      int v165 = *(unsigned __int8 *)(v520.i64[0] + v164);
                      break;
                    case 4:
                      int v165 = *(_DWORD *)(v520.i64[0] + v164);
                      break;
                    case 2:
                      int v165 = *(unsigned __int16 *)(v520.i64[0] + v164);
                      break;
                    default:
                      int v165 = *(char *)(v520.i64[0] + v164);
                      break;
                  }
                  uint64_t v166 = *v98;
                  if (*v98 >= *v99)
                  {
                    uint64_t v168 = (char *)*v97;
                    uint64_t v169 = (v166 - (unsigned char *)*v97) >> 2;
                    unint64_t v170 = v169 + 1;
                    if ((unint64_t)(v169 + 1) >> 62) {
                      abort();
                    }
                    uint64_t v171 = *v99 - v168;
                    if (v171 >> 1 > v170) {
                      unint64_t v170 = v171 >> 1;
                    }
                    if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v94 = v170;
                    }
                    if (v94)
                    {
                      uint64_t v172 = (char *)sub_1B64282E0((uint64_t)(v97 + 2), v94);
                      uint64_t v166 = *v98;
                      uint64_t v168 = (char *)*v97;
                    }
                    else
                    {
                      uint64_t v172 = 0;
                    }
                    uint64_t v173 = &v172[4 * v169];
                    *(_DWORD *)uint64_t v173 = v165;
                    int v167 = v173 + 4;
                    while (v166 != v168)
                    {
                      int v174 = *((_DWORD *)v166 - 1);
                      v166 -= 4;
                      *((_DWORD *)v173 - 1) = v174;
                      v173 -= 4;
                    }
                    *uint64_t v97 = v173;
                    *double v98 = v167;
                    *uint64_t v99 = &v172[4 * v94];
                    if (v168) {
                      operator delete(v168);
                    }
                  }
                  else
                  {
                    *(_DWORD *)uint64_t v166 = v165;
                    int v167 = v166 + 4;
                  }
                  *double v98 = v167;
                }
              }
            }
          }
          uint64_t v175 = objc_msgSend_primitiveCount(v62, v84, v85, v86);
          v512 += v175;
        }
        ++v513;
      }
      while (v513 != k);
      uint64_t k = objc_msgSend_countByEnumeratingWithState_objects_count_(v510, v58, (uint64_t)&v523, (uint64_t)v532, 16);
    }
    while (k);
  }
  else
  {
    uint64_t v512 = 0;
  }
  uint64_t v176 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v58, (uint64_t)v508, @"faceVertexCounts", qword_1E9DDBB90, qword_1E9DDBC30);
  objc_msgSend_setIntArray_count_(v176, v177, (uint64_t)v527, v512);
  int v181 = 0;
  int v182 = 0;
  unint64_t v516 = 0;
  LODWORD(v512) = v504 ^ 1;
  uint64_t v517 = &v531;
  uint64_t v513 = @"kGeometrySourceSemanticPosition";
  uint64_t v511 = @"kGeometrySourceSemanticNormal";
  uint64_t v510 = @"kGeometrySourceSemanticColor";
  uint64_t v503 = @"kGeometrySourceSemanticTexcoord";
  while (1)
  {
    uint64_t v183 = objc_msgSend_meshSources(v509, v178, v179, v180);
    unint64_t v187 = objc_msgSend_count(v183, v184, v185, v186);
    if (v516 >= v187) {
      break;
    }
    uint64_t v191 = objc_msgSend_meshSources(v509, v188, v189, v190);
    uint64_t v194 = objc_msgSend_objectAtIndexedSubscript_(v191, v192, v516, v193);
    uint64_t v198 = objc_msgSend_vectorCount(v194, v195, v196, v197);
    uint64_t v202 = objc_msgSend_data(v194, v199, v200, v201);
    uint64_t v206 = objc_msgSend_bytes(v202, v203, v204, v205);
    uint64_t v210 = objc_msgSend_dataOffset(v194, v207, v208, v209);
    uint64_t v214 = objc_msgSend_semantic(v194, v211, v212, v213);
    int isEqualToString = objc_msgSend_isEqualToString_(v214, v215, v513, v216);
    LODWORD(i) = isEqualToString;
    if (((isEqualToString | v512) & 1) == 0)
    {
      if (v516 >= v506)
      {
        LODWORD(i) = 0;
      }
      else
      {
        uint64_t v221 = objc_msgSend_meshSourceChannels(v509, v217, v218, v219);
        uint64_t v224 = objc_msgSend_objectAtIndexedSubscript_(v221, v222, v516, v223);
        LODWORD(i) = objc_msgSend_intValue(v224, v225, v226, v227) != 0;
      }
    }
    LODWORD(v514) = v182;
    uint64_t v228 = v206 + v210;
    if ((isEqualToString & 1) != 0
      || (uint64_t v229 = objc_msgSend_semantic(v194, v217, v218, v219),
          (objc_msgSend_isEqualToString_(v229, v230, (uint64_t)v511, v231) & 1) != 0)
      || (uint64_t v235 = objc_msgSend_semantic(v194, v232, v233, v234),
          objc_msgSend_isEqualToString_(v235, v236, (uint64_t)v510, v237)))
    {
      float32x4_t v530 = 0uLL;
      v531.i64[0] = 0;
      sub_1B65BB4FC((void **)&v530, v198);
      if (v198 >= 1)
      {
        for (uint64_t n = 0; n != v198; ++n)
        {
          v244.i64[0] = *(void *)v228;
          v244.i32[2] = *(_DWORD *)(v228 + 8);
          uint64_t v246 = v530.i64[1];
          if (v530.i64[1] >= (unint64_t)v531.i64[0])
          {
            float32x4_t v520 = v244;
            uint64_t v248 = (v530.i64[1] - v530.i64[0]) >> 4;
            if ((unint64_t)(v248 + 1) >> 60) {
              abort();
            }
            unint64_t v249 = (v531.i64[0] - v530.i64[0]) >> 3;
            if (v249 <= v248 + 1) {
              unint64_t v249 = v248 + 1;
            }
            if (v531.i64[0] - v530.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
              unint64_t v241 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v241 = v249;
            }
            if (v241) {
              uint64_t v250 = (char *)sub_1B6427C8C((uint64_t)v517, v241);
            }
            else {
              uint64_t v250 = 0;
            }
            uint64_t v251 = (float32x4_t *)&v250[16 * v248];
            v244.i32[3] = v520.i32[3];
            *uint64_t v251 = v520;
            f32 = (_OWORD *)v251[1].f32;
            uint64_t v252 = (float32x4_t *)v530.i64[1];
            uint64_t v253 = (char *)v530.i64[0];
            if (v530.i64[1] != v530.i64[0])
            {
              do
              {
                float32x4_t v254 = v252[-1];
                --v252;
                v244.i32[3] = v254.i32[3];
                v251[-1] = v254;
                --v251;
              }
              while (v252 != (float32x4_t *)v253);
              uint64_t v252 = (float32x4_t *)v530.i64[0];
            }
            v530.i64[0] = (uint64_t)v251;
            v530.i64[1] = (uint64_t)f32;
            v531.i64[0] = (uint64_t)&v250[16 * v241];
            if (v252) {
              operator delete(v252);
            }
          }
          else
          {
            *(float32x4_t *)v530.i64[1] = v244;
            f32 = (_OWORD *)(v246 + 16);
          }
          v530.i64[1] = (uint64_t)f32;
          if (isEqualToString)
          {
            v244.i64[0] = *(void *)v228;
            v244.i32[2] = *(_DWORD *)(v228 + 8);
            if (v181)
            {
              float32x4_t v255 = v518;
              v255.i32[3] = 0;
              v244.i32[3] = 0;
              float32x4_t v256 = vminnmq_f32(v255, v244);
              float32x4_t v257 = v519;
              v257.i32[3] = 0;
              float32x4_t v518 = v256;
              float32x4_t v519 = vmaxnmq_f32(v257, v244);
            }
            else
            {
              int v181 = 1;
              float32x4_t v518 = v244;
              float32x4_t v519 = v244;
            }
          }
          v228 += objc_msgSend_dataStride(v194, (const char *)v241, v242, v243);
        }
      }
      uint64_t v522 = objc_msgSend_semantic(v194, (const char *)v241, v242, v243);
      uint64_t v260 = sub_1B65BB59C((void **)&v522, (const char *)i, v258, v259);
      uint64_t v261 = qword_1E9DDBB80;
      uint64_t v265 = objc_msgSend_semantic(v194, v262, v263, v264);
      int v182 = v514;
      uint64_t v266 = v265;
      char v269 = objc_msgSend_isEqualToString_(v265, v267, v513, v268);
      uint64_t v272 = &qword_1E9DDBC40;
      if ((v269 & 1) == 0)
      {
        char v273 = objc_msgSend_isEqualToString_(v266, v270, (uint64_t)v511, v271);
        uint64_t v272 = &qword_1E9DDBC38;
        if ((v273 & 1) == 0)
        {
          char v275 = objc_msgSend_isEqualToString_(v266, v270, (uint64_t)v503, v274);
          uint64_t v272 = &qword_1E9DDBC50;
          if ((v275 & 1) == 0)
          {
            int v277 = objc_msgSend_isEqualToString_(v266, v270, (uint64_t)v510, v276);
            uint64_t v272 = &qword_1E9DDBC30;
            if (v277) {
              uint64_t v272 = &qword_1E9DDBC28;
            }
          }
        }
      }
      uint64_t v278 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v270, (uint64_t)v508, (uint64_t)v260, v261, *v272);
      objc_msgSend_setFloat3Array_count_(v278, v279, v530.i64[0], v198);
      if (i)
      {
        if ((isEqualToString & 1) == 0)
        {
          uint64_t v283 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v280, @"faceVarying", v282);
          uint64_t v286 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v284, v283, v285);
          objc_msgSend_setMetadataWithKey_value_(v278, v287, @"interpolation", v286);
        }
        uint64_t v522 = objc_msgSend_semantic(v194, v280, v281, v282);
        uint64_t v291 = sub_1B65BB664((void **)&v522, v288, v289, v290);
        uint64_t v296 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v292, (uint64_t)v508, (uint64_t)v291, qword_1E9DDBB90, qword_1E9DDBC30);
        if (v504)
        {
          uint64_t v297 = objc_msgSend_meshSourceChannels(v509, v293, v294, v295);
          uint64_t v300 = objc_msgSend_objectAtIndexedSubscript_(v297, v298, v516, v299);
          int v304 = objc_msgSend_intValue(v300, v301, v302, v303);
        }
        else
        {
          int v304 = 0;
        }
        objc_msgSend_setIntArray_count_(v296, v293, (uint64_t)v521[3 * v304], ((unsigned char *)v521[3 * v304 + 1] - (unsigned char *)v521[3 * v304]) >> 2);
      }
      else
      {
        uint64_t v305 = objc_msgSend_semantic(v194, v280, v281, v282);
        if (objc_msgSend_isEqualToString_(v305, v306, (uint64_t)v510, v307))
        {
          uint64_t v308 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v178, @"vertex", v180);
          uint64_t v311 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v309, v308, v310);
          objc_msgSend_setMetadataWithKey_value_(v278, v312, @"interpolation", v311);
        }
      }
      if (v530.i64[0])
      {
        v530.i64[1] = v530.i64[0];
        operator delete((void *)v530.i64[0]);
      }
    }
    else
    {
      uint64_t v313 = objc_msgSend_semantic(v194, v238, v239, v240);
      if (objc_msgSend_isEqualToString_(v313, v314, (uint64_t)v503, v315))
      {
        float32x4_t v530 = 0uLL;
        v531.i64[0] = 0;
        sub_1B65BB71C((void **)&v530, v198);
        if (v198 >= 1)
        {
          for (iuint64_t i = 0; ii != v198; ++ii)
          {
            v319.i32[0] = *(_DWORD *)v228;
            v319.f32[1] = 1.0 - *(float *)(v228 + 4);
            uint64_t v321 = v530.i64[1];
            if (v530.i64[1] >= (unint64_t)v531.i64[0])
            {
              float32x4_t v520 = v319;
              uint64_t v323 = (v530.i64[1] - v530.i64[0]) >> 3;
              if ((unint64_t)(v323 + 1) >> 61) {
                abort();
              }
              unint64_t v324 = (v531.i64[0] - v530.i64[0]) >> 2;
              if (v324 <= v323 + 1) {
                unint64_t v324 = v323 + 1;
              }
              if (v531.i64[0] - v530.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v316 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v316 = v324;
              }
              if (v316) {
                uint64_t v325 = (char *)sub_1B64285D4((uint64_t)v517, v316);
              }
              else {
                uint64_t v325 = 0;
              }
              char v326 = &v325[8 * v323];
              *(void *)char v326 = v520.i64[0];
              uint64_t v322 = v326 + 8;
              char v327 = (char *)v530.i64[1];
              uint64_t v328 = (char *)v530.i64[0];
              if (v530.i64[1] != v530.i64[0])
              {
                do
                {
                  uint64_t v329 = *((void *)v327 - 1);
                  v327 -= 8;
                  *((void *)v326 - 1) = v329;
                  v326 -= 8;
                }
                while (v327 != v328);
                char v327 = (char *)v530.i64[0];
              }
              v530.i64[0] = (uint64_t)v326;
              v530.i64[1] = (uint64_t)v322;
              v531.i64[0] = (uint64_t)&v325[8 * v316];
              if (v327) {
                operator delete(v327);
              }
            }
            else
            {
              *(void *)v530.i64[1] = v319.i64[0];
              uint64_t v322 = (void *)(v321 + 8);
            }
            v530.i64[1] = (uint64_t)v322;
            v228 += objc_msgSend_dataStride(v194, (const char *)v316, v317, v318);
          }
        }
        uint64_t v522 = objc_msgSend_semantic(v194, (const char *)v316, v317, v318);
        std::string v334 = sub_1B65BB59C((void **)&v522, 0, v330, v331);
        int v335 = v514;
        if ((int)v514 >= 1)
        {
          uint64_t v336 = objc_msgSend_numberWithInt_(NSNumber, v332, v514, v333);
          uint64_t v340 = objc_msgSend_stringValue(v336, v337, v338, v339);
          std::string v334 = objc_msgSend_stringByAppendingString_(v334, v341, v340, v342);
        }
        uint64_t v343 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v332, (uint64_t)v508, (uint64_t)v334, qword_1E9DDBB78, qword_1E9DDBC50);
        objc_msgSend_setFloat2Array_count_(v343, v344, v530.i64[0], v198);
        if (i)
        {
          uint64_t v347 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v345, @"faceVarying", v346);
          uint64_t v350 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v348, v347, v349);
          objc_msgSend_setMetadataWithKey_value_(v343, v351, @"interpolation", v350);
          uint64_t v522 = objc_msgSend_semantic(v194, v352, v353, v354);
          uint64_t v358 = sub_1B65BB664((void **)&v522, v355, v356, v357);
          uint64_t v363 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v359, (uint64_t)v508, (uint64_t)v358, qword_1E9DDBB90, qword_1E9DDBC30);
          if (v504)
          {
            uint64_t v364 = objc_msgSend_meshSourceChannels(v509, v360, v361, v362);
            v367 = objc_msgSend_objectAtIndexedSubscript_(v364, v365, v516, v366);
            int v371 = objc_msgSend_intValue(v367, v368, v369, v370);
          }
          else
          {
            int v371 = 0;
          }
          objc_msgSend_setIntArray_count_(v363, v360, (uint64_t)v521[3 * v371], ((unsigned char *)v521[3 * v371 + 1] - (unsigned char *)v521[3 * v371]) >> 2);
        }
        else
        {
          uint64_t v372 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v345, @"vertex", v346);
          uint64_t v375 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v373, v372, v374);
          objc_msgSend_setMetadataWithKey_value_(v343, v376, @"interpolation", v375);
        }
        if (v530.i64[0])
        {
          v530.i64[1] = v530.i64[0];
          operator delete((void *)v530.i64[0]);
        }
        int v182 = v335 + 1;
      }
      else
      {
        int v182 = v514;
      }
    }
    ++v516;
  }
  if (v181)
  {
    uint64_t v377 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v188, (uint64_t)v508, @"extent", qword_1E9DDBB80, qword_1E9DDBC30);
    float32x4_t v530 = v518;
    float32x4_t v531 = v519;
    objc_msgSend_setFloat3Array_count_(v377, v378, (uint64_t)&v530, 2);
  }
  if (objc_msgSend_meshElementCount(v509, v188, v189, v190) > 1)
  {
    float32x4_t v530 = 0uLL;
    v531.i64[0] = 0;
    uint64_t v397 = (void *)MEMORY[0x1E4F1CA80];
    uint64_t v398 = objc_msgSend_meshElementCount(v509, v379, v380, v381);
    v520.i64[0] = objc_msgSend_setWithCapacity_(v397, v399, v398, v400);
    int v404 = 0;
    for (junint64_t j = 0; (uint64_t)jj < objc_msgSend_meshElementCount(v509, v401, v402, v403); ++jj)
    {
      uint64_t v408 = objc_msgSend_meshElementAtIndex_(v509, v406, jj, v407);
      uint64_t v412 = objc_msgSend_materials(v507, v409, v410, v411);
      if (jj >= objc_msgSend_count(v412, v413, v414, v415))
      {
        Material = objc_msgSend_firstMaterial(v507, v416, v417, v418);
      }
      else
      {
        v419 = objc_msgSend_materials(v507, v416, v417, v418);
        Material = objc_msgSend_objectAtIndex_(v419, v420, jj, v421);
      }
      uint64_t v426 = Material;
      if (Material)
      {
        v519.i64[0] = sub_1B65BB7C0(v505, Material, v424, v425);
        uint64_t v430 = objc_msgSend_stringValue((void *)v519.i64[0], v427, v428, v429);
        uint64_t PathComponent = objc_msgSend_lastPathComponent(v430, v431, v432, v433);
        uint64_t v437 = objc_msgSend_stringByAppendingPathComponent_(v502, v435, PathComponent, v436);
        uint64_t v440 = objc_msgSend_stringByAppendingString_(v437, v438, @"_meshGroup", v439);
        if (objc_msgSend_containsObject_((void *)v520.i64[0], v441, (uint64_t)v440, v442))
        {
          uint64_t v445 = objc_msgSend_numberWithInteger_(NSNumber, v443, jj, v444);
          uint64_t v449 = objc_msgSend_stringValue(v445, v446, v447, v448);
          uint64_t v440 = objc_msgSend_stringByAppendingString_(v440, v450, v449, v451);
        }
        objc_msgSend_addObject_((void *)v520.i64[0], v443, (uint64_t)v440, v444);
        uint64_t v454 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v452, (uint64_t)v440, v453);
        uint64_t v456 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v455, *(void *)(v505 + 56), v454, qword_1E9DDBBE8);
        uint64_t v458 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v457, v456, @"elementType", qword_1E9DDBBC0, qword_1E9DDBC30);
        uint64_t v461 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v459, @"face", v460);
        objc_msgSend_setTokenValue_(v458, v462, v461, v463);
        uint64_t v465 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v464, v456, @"familyName", qword_1E9DDBBC0, qword_1E9DDBC30);
        uint64_t v468 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v466, @"materialBind", v467);
        objc_msgSend_setTokenValue_(v465, v469, v468, v470);
        sub_1B642863C((uint64_t)&v530, 0);
        for (kuint64_t k = 0; objc_msgSend_primitiveCount(v408, (const char *)v471, v472, v473) > kk; ++kk)
        {
          int v475 = v404 + kk;
          uint64_t v476 = (char *)v530.i64[1];
          if (v530.i64[1] >= (unint64_t)v531.i64[0])
          {
            uint64_t v478 = (char *)v530.i64[0];
            uint64_t v479 = (v530.i64[1] - v530.i64[0]) >> 2;
            unint64_t v480 = v479 + 1;
            if ((unint64_t)(v479 + 1) >> 62) {
              abort();
            }
            uint64_t v481 = v531.i64[0] - v530.i64[0];
            if ((v531.i64[0] - v530.i64[0]) >> 1 > v480) {
              unint64_t v480 = v481 >> 1;
            }
            if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v471 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v471 = v480;
            }
            if (v471)
            {
              CFIndex v482 = (char *)sub_1B64282E0((uint64_t)&v531, v471);
              uint64_t v476 = (char *)v530.i64[1];
              uint64_t v478 = (char *)v530.i64[0];
            }
            else
            {
              CFIndex v482 = 0;
            }
            v483 = &v482[4 * v479];
            *(_DWORD *)v483 = v475;
            uint64_t v477 = v483 + 4;
            while (v476 != v478)
            {
              int v484 = *((_DWORD *)v476 - 1);
              v476 -= 4;
              *((_DWORD *)v483 - 1) = v484;
              v483 -= 4;
            }
            v530.i64[0] = (uint64_t)v483;
            v530.i64[1] = (uint64_t)v477;
            v531.i64[0] = (uint64_t)&v482[4 * v471];
            if (v478) {
              operator delete(v478);
            }
          }
          else
          {
            *(_DWORD *)v530.i64[1] = v475;
            uint64_t v477 = v476 + 4;
          }
          v530.i64[1] = (uint64_t)v477;
        }
        uint64_t v485 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v471, v456, @"indices", qword_1E9DDBB90, qword_1E9DDBC30);
        uint64_t v486 = v530.i64[0];
        uint64_t v490 = objc_msgSend_primitiveCount(v408, v487, v488, v489);
        objc_msgSend_setIntArray_count_(v485, v491, v486, v490);
        uint64_t v493 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v492, v456, @"material:binding", qword_1E9DDBB98, qword_1E9DDBC30);
        objc_msgSend_setObjectPath_(v493, v494, v519.i64[0], v495);
        if (!jj && objc_msgSend_isDoubleSided(v426, v423, v424, v425))
        {
          uint64_t v496 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v423, (uint64_t)v508, @"doubleSided", qword_1E9DDBB38, qword_1E9DDBC30);
          objc_msgSend_setBoolValue_(v496, v497, 1, v498);
        }
      }
      v404 += objc_msgSend_primitiveCount(v408, v423, v424, v425);
    }
    if (v530.i64[0])
    {
      v530.i64[1] = v530.i64[0];
      operator delete((void *)v530.i64[0]);
    }
  }
  else
  {
    uint64_t v384 = objc_msgSend_firstMaterial(v507, v379, v380, v381);
    if (v384)
    {
      uint64_t v385 = sub_1B65BB7C0(v505, v384, v382, v383);
      uint64_t v387 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v386, (uint64_t)v508, @"material:binding", qword_1E9DDBB98, qword_1E9DDBC30);
      objc_msgSend_setObjectPath_(v387, v388, v385, v389);
      if (objc_msgSend_isDoubleSided(v384, v390, v391, v392))
      {
        uint64_t v394 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v393, (uint64_t)v508, @"doubleSided", qword_1E9DDBB38, qword_1E9DDBC30);
        objc_msgSend_setBoolValue_(v394, v395, 1, v396);
      }
    }
  }
  if (v506)
  {
    uint64_t v499 = 3 * v506;
    do
    {
      uint64_t v500 = v521[v499 - 3];
      if (v500)
      {
        v521[v499 - 2] = v500;
        operator delete(v500);
      }
      v499 -= 3;
    }
    while (v499 * 8);
  }
  if (v527)
  {
    uint64_t v528 = v527;
    operator delete(v527);
  }
}

void sub_1B65BA950(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[6];
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    do
    {
      uint64_t v5 = v1[24] + v4;
      uint64_t v6 = *(void **)(v5 - 24);
      if (v6)
      {
        *(void *)(v5 - 16) = v6;
        operator delete(v6);
      }
      v4 -= 24;
    }
    while (v4);
  }
  uint64_t v7 = (void *)v1[35];
  if (v7)
  {
    v1[36] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B65BAAA0(uint64_t a1, char *a2, void *a3, void *a4)
{
  uint64_t v5 = objc_msgSend_model(a4, a2, (uint64_t)a3, (uint64_t)a4);
  uint64_t v9 = objc_msgSend_mesh(v5, v6, v7, v8);
  unint64_t v278 = (unint64_t)a4;
  uint64_t v13 = objc_msgSend_morpher(a4, v10, v11, v12);
  if (objc_msgSend_calculationMode(v13, v14, v15, v16))
  {
    long long v285 = 0uLL;
  }
  else
  {
    uint64_t v20 = objc_msgSend_meshSources(v9, v17, v18, v19);
    unint64_t result = objc_msgSend_count(v20, v21, v22, v23);
    if (result)
    {
      long long v285 = 0uLL;
      for (unint64_t i = 0; i < result; ++i)
      {
        uint64_t v26 = objc_msgSend_meshSources(v9, v17, v18, v19);
        uint64_t v29 = objc_msgSend_objectAtIndexedSubscript_(v26, v27, i, v28);
        uint64_t v33 = objc_msgSend_semantic(v29, v30, v31, v32);
        if (objc_msgSend_isEqualToString_(v33, v34, @"kGeometrySourceSemanticPosition", v35))
        {
          *(void *)&long long v285 = v29;
        }
        else
        {
          uint64_t v39 = objc_msgSend_semantic(v29, v36, v37, v38);
          int isEqualToString = objc_msgSend_isEqualToString_(v39, v40, @"kGeometrySourceSemanticNormal", v41);
          uint64_t v43 = (void *)*((void *)&v285 + 1);
          if (isEqualToString) {
            uint64_t v43 = v29;
          }
          *((void *)&v285 + 1) = v43;
        }
        uint64_t v44 = objc_msgSend_meshSources(v9, v36, v37, v38);
        unint64_t result = objc_msgSend_count(v44, v45, v46, v47);
      }
    }
    else
    {
      long long v285 = 0uLL;
    }
    if (v285 == 0) {
      return result;
    }
  }
  uint64_t v48 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v49 = objc_msgSend_targets(v13, v17, v18, v19);
  uint64_t v53 = objc_msgSend_count(v49, v50, v51, v52);
  uint64_t v281 = objc_msgSend_arrayWithCapacity_(v48, v54, v53, v55);
  uint64_t v56 = (void *)MEMORY[0x1E4F1CA48];
  uint64_t v60 = objc_msgSend_targets(v13, v57, v58, v59);
  uint64_t v64 = objc_msgSend_count(v60, v61, v62, v63);
  uint64_t v280 = objc_msgSend_arrayWithCapacity_(v56, v65, v64, v66);
  uint64_t v70 = objc_msgSend_targets(v13, v67, v68, v69);
  if (objc_msgSend_count(v70, v71, v72, v73))
  {
    uint64_t v77 = 0;
    while (1)
    {
      uint64_t v78 = objc_msgSend_targets(v13, v74, v75, v76);
      uint64_t v81 = objc_msgSend_objectAtIndexedSubscript_(v78, v79, v77, v80);
      uint64_t v84 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v82, v77, v83);
      uint64_t v88 = objc_msgSend_stringValue(v84, v85, v86, v87);
      uint64_t v91 = (const char *)objc_msgSend_stringByAppendingString_(@"blendShape", v89, v88, v90);
      uint64_t v94 = objc_msgSend_stringByAppendingPathComponent_(a3, v92, (uint64_t)v91, v93);
      uint64_t v97 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v95, v94, v96);
      uint64_t v99 = sub_1B65BED4C(a1, v91, a3, v98);
      uint64_t v102 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v100, v99, v101);
      objc_msgSend_addObject_(v281, v103, v102, v104);
      objc_msgSend_addObject_(v280, v105, v97, v106);
      uint64_t v284 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v107, *(void *)(a1 + 56), v97, qword_1E9DDBC18);
      int64_t v111 = 0;
      int64_t v112 = 0;
      uint64_t v113 = 0;
      uint64_t v114 = 0;
      unint64_t v115 = 0;
      uint64_t v298 = 0;
      uint64_t v299 = 0;
      uint64_t v300 = 0;
      uint64_t v295 = 0;
      uint64_t v296 = 0;
      uint64_t v297 = 0;
      while (1)
      {
        uint64_t v116 = objc_msgSend_meshSources(v81, v108, v109, v110);
        if (v115 >= objc_msgSend_count(v116, v117, v118, v119)) {
          break;
        }
        uint64_t v123 = objc_msgSend_meshSources(v81, v120, v121, v122);
        uint64_t v126 = objc_msgSend_objectAtIndexedSubscript_(v123, v124, v115, v125);
        int v130 = objc_msgSend_semantic(v126, v127, v128, v129);
        if (objc_msgSend_isEqualToString_(v130, v131, @"kGeometrySourceSemanticPosition", v132))
        {
          int64_t v112 = objc_msgSend_vectorCount(v126, v133, v134, v135);
          sub_1B65BB4FC((void **)&v298, v112);
          uint64_t v113 = v126;
        }
        else
        {
          uint64_t v136 = objc_msgSend_semantic(v126, v133, v134, v135);
          if (objc_msgSend_isEqualToString_(v136, v137, @"kGeometrySourceSemanticNormal", v138))
          {
            int64_t v111 = objc_msgSend_vectorCount(v126, v108, v109, v110);
            sub_1B65BB4FC((void **)&v295, v111);
            uint64_t v114 = v126;
          }
        }
        ++v115;
      }
      if (v112 <= v111) {
        int64_t v139 = v111;
      }
      else {
        int64_t v139 = v112;
      }
      uint64_t v292 = 0;
      uint64_t v293 = 0;
      uint64_t v294 = 0;
      sub_1B6427A50((void **)&v292, v139);
      if (v113) {
        BOOL v144 = (objc_msgSend_calculationMode(v13, (const char *)v140, v141, v142) | (unint64_t)v285) != 0;
      }
      else {
        BOOL v144 = 0;
      }
      uint64_t v283 = v77;
      if (v114) {
        BOOL v145 = (objc_msgSend_calculationMode(v13, (const char *)v140, v141, v142) | *((void *)&v285 + 1)) != 0;
      }
      else {
        BOOL v145 = 0;
      }
      if (v139 >= 1)
      {
        for (uint64_t j = 0; j != v139; ++j)
        {
          v143.i64[0] = 0;
          int32x4_t v290 = v143;
          v143.i64[0] = 0;
          int32x4_t v286 = v143;
          float v287 = 0.0;
          v143.i64[0] = 0;
          int32x4_t v288 = v143;
          if (v144
            && (float64x2_t v147 = objc_msgSend_data(v113, (const char *)v140, v141, v142),
                uint64_t v151 = objc_msgSend_bytes(v147, v148, v149, v150),
                uint64_t v155 = objc_msgSend_dataOffset(v113, v152, v153, v154),
                uint64_t v159 = v151 + v155 + objc_msgSend_dataStride(v113, v156, v157, v158) * j,
                v160.i64[0] = *(void *)v159,
                int32x4_t v288 = v160,
                float v287 = *(float *)(v159 + 8),
                !objc_msgSend_calculationMode(v13, v161, v162, v163)))
          {
            uint64_t v196 = objc_msgSend_data((void *)v285, (const char *)v140, v141, v142);
            uint64_t v200 = objc_msgSend_bytes(v196, v197, v198, v199);
            uint64_t v204 = objc_msgSend_dataOffset((void *)v285, v201, v202, v203);
            uint64_t v208 = (float32x2_t *)(v200 + v204 + objc_msgSend_dataStride((void *)v285, v205, v206, v207) * j);
            v209.i64[1] = v288.i64[1];
            *(float32x2_t *)v209.i8 = vsub_f32(*(float32x2_t *)v288.i8, *v208);
            int32x4_t v288 = v209;
            float v287 = v287 - v208[1].f32[0];
            if (v145)
            {
LABEL_37:
              unint64_t v164 = objc_msgSend_data(v114, (const char *)v140, v141, v142);
              uint64_t v168 = objc_msgSend_bytes(v164, v165, v166, v167);
              uint64_t v172 = objc_msgSend_dataOffset(v114, v169, v170, v171);
              uint64_t v176 = v168 + v172 + objc_msgSend_dataStride(v114, v173, v174, v175) * j;
              v177.i64[0] = *(void *)v176;
              int32x4_t v290 = v177;
              v177.i32[0] = *(_DWORD *)(v176 + 8);
              int32x4_t v286 = v177;
              if (!objc_msgSend_calculationMode(v13, v178, v179, v180))
              {
                int v181 = objc_msgSend_data(*((void **)&v285 + 1), (const char *)v140, v141, v142);
                uint64_t v185 = objc_msgSend_bytes(v181, v182, v183, v184);
                uint64_t v189 = objc_msgSend_dataOffset(*((void **)&v285 + 1), v186, v187, v188);
                uint64_t v193 = (float32x2_t *)(v185 + v189 + objc_msgSend_dataStride(*((void **)&v285 + 1), v190, v191, v192)
                                                   * j);
                v194.i64[1] = v290.i64[1];
                *(float32x2_t *)v194.i8 = vsub_f32(*(float32x2_t *)v290.i8, *v193);
                int32x4_t v290 = v194;
                int32x4_t v195 = v286;
                *(float *)v195.i32 = *(float *)v286.i32 - v193[1].f32[0];
                int32x4_t v286 = v195;
              }
            }
          }
          else if (v145)
          {
            goto LABEL_37;
          }
          *(int32x2_t *)v210.f32 = vrev64_s32(*(int32x2_t *)v288.i8);
          v210.i32[3] = vdup_lane_s32(*(int32x2_t *)&v290, 0).i32[1];
          v210.f32[2] = v287;
          int32x4_t v143 = (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v210));
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(v143)) & 1) == 0)
          {
            v143.i64[1] = v290.i64[1];
            if (*(float *)&v290.i32[1] == 0.0)
            {
              v143.i64[1] = v286.i64[1];
              if (*(float *)v286.i32 == 0.0) {
                continue;
              }
            }
          }
          if (v144)
          {
            int32x4_t v143 = v288;
            *(float *)&v143.i32[2] = v287;
            int8x16_t v211 = v299;
            if (v299 >= v300)
            {
              int32x4_t v289 = v143;
              uint64_t v213 = v299 - v298;
              if ((unint64_t)(v213 + 1) >> 60) {
                abort();
              }
              unint64_t v214 = ((char *)v300 - (char *)v298) >> 3;
              if (v214 <= v213 + 1) {
                unint64_t v214 = v213 + 1;
              }
              if ((unint64_t)((char *)v300 - (char *)v298) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v140 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v214;
              }
              if (v140) {
                uint64_t v215 = (char *)sub_1B6427C8C((uint64_t)&v300, v140);
              }
              else {
                uint64_t v215 = 0;
              }
              uint64_t v216 = (int32x4_t *)&v215[16 * v213];
              v143.i64[1] = v289.i64[1];
              *uint64_t v216 = v289;
              uint64_t v212 = v216 + 1;
              uint64_t v218 = v298;
              uint64_t v217 = v299;
              if (v299 != v298)
              {
                do
                {
                  int32x4_t v219 = v217[-1];
                  --v217;
                  v143.i64[1] = v219.i64[1];
                  v216[-1] = v219;
                  --v216;
                }
                while (v217 != v218);
                uint64_t v217 = v298;
              }
              uint64_t v298 = v216;
              uint64_t v299 = v212;
              uint64_t v300 = (int32x4_t *)&v215[16 * v140];
              if (v217) {
                operator delete(v217);
              }
            }
            else
            {
              *uint64_t v299 = v143;
              uint64_t v212 = v211 + 1;
            }
            uint64_t v299 = v212;
          }
          if (v145)
          {
            int32x4_t v143 = v290;
            v143.i32[2] = v286.i32[0];
            uint64_t v220 = v296;
            if (v296 >= v297)
            {
              int32x4_t v291 = v143;
              uint64_t v222 = v296 - v295;
              if ((unint64_t)(v222 + 1) >> 60) {
                abort();
              }
              unint64_t v223 = ((char *)v297 - (char *)v295) >> 3;
              if (v223 <= v222 + 1) {
                unint64_t v223 = v222 + 1;
              }
              if ((unint64_t)((char *)v297 - (char *)v295) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v140 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v223;
              }
              if (v140) {
                uint64_t v224 = (char *)sub_1B6427C8C((uint64_t)&v297, v140);
              }
              else {
                uint64_t v224 = 0;
              }
              uint64_t v225 = (int32x4_t *)&v224[16 * v222];
              v143.i64[1] = v291.i64[1];
              *uint64_t v225 = v291;
              uint64_t v221 = v225 + 1;
              uint64_t v227 = v295;
              uint64_t v226 = v296;
              if (v296 != v295)
              {
                do
                {
                  int32x4_t v228 = v226[-1];
                  --v226;
                  v143.i64[1] = v228.i64[1];
                  v225[-1] = v228;
                  --v225;
                }
                while (v226 != v227);
                uint64_t v226 = v295;
              }
              uint64_t v295 = v225;
              uint64_t v296 = v221;
              uint64_t v297 = (int32x4_t *)&v224[16 * v140];
              if (v226) {
                operator delete(v226);
              }
            }
            else
            {
              *uint64_t v296 = v143;
              uint64_t v221 = v220 + 1;
            }
            uint64_t v296 = v221;
          }
          uint64_t v229 = v293;
          if (v293 >= v294)
          {
            uint64_t v231 = v292;
            uint64_t v232 = (v293 - v292) >> 2;
            unint64_t v233 = v232 + 1;
            if ((unint64_t)(v232 + 1) >> 62) {
              abort();
            }
            uint64_t v234 = v294 - v292;
            if ((v294 - v292) >> 1 > v233) {
              unint64_t v233 = v234 >> 1;
            }
            if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v140 = v233;
            }
            if (v140)
            {
              uint64_t v235 = (char *)sub_1B64282E0((uint64_t)&v294, v140);
              uint64_t v231 = v292;
              uint64_t v229 = v293;
            }
            else
            {
              uint64_t v235 = 0;
            }
            uint64_t v236 = &v235[4 * v232];
            *(_DWORD *)uint64_t v236 = j;
            uint64_t v230 = v236 + 4;
            while (v229 != v231)
            {
              int v237 = *((_DWORD *)v229 - 1);
              v229 -= 4;
              *((_DWORD *)v236 - 1) = v237;
              v236 -= 4;
            }
            uint64_t v292 = v236;
            uint64_t v293 = v230;
            uint64_t v294 = &v235[4 * v140];
            if (v231) {
              operator delete(v231);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v293 = j;
            uint64_t v230 = v229 + 4;
          }
          uint64_t v293 = v230;
        }
      }
      if (v299 != v298) {
        break;
      }
LABEL_104:
      if (v296 != v295)
      {
        uint64_t v246 = objc_msgSend_semantic(v114, (const char *)v140, v141, v142);
        char v249 = objc_msgSend_isEqualToString_(v246, v247, @"kGeometrySourceSemanticPosition", v248);
        uint64_t v251 = @"offsets";
        if ((v249 & 1) == 0)
        {
          if (objc_msgSend_isEqualToString_(v246, v250, @"kGeometrySourceSemanticNormal", @"offsets"))
          {
            uint64_t v252 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v250, v284, @"normalOffsets", qword_1E9DDBB80, qword_1E9DDBC48);
LABEL_110:
            objc_msgSend_setFloat3Array_count_(v252, v253, (uint64_t)v295, v296 - v295);
            goto LABEL_111;
          }
          uint64_t v251 = &stru_1F0FCDBB0;
        }
        uint64_t v252 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v250, v284, (uint64_t)v251, qword_1E9DDBB80, qword_1E9DDBC48);
        goto LABEL_110;
      }
LABEL_111:
      float32x4_t v254 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v140, v284, @"pointIndices", qword_1E9DDBB90, qword_1E9DDBC30);
      objc_msgSend_setIntArray_count_(v254, v255, (uint64_t)v292, (v293 - v292) >> 2);
      if (v292)
      {
        uint64_t v293 = v292;
        operator delete(v292);
      }
      if (v295)
      {
        uint64_t v296 = v295;
        operator delete(v295);
      }
      if (v298)
      {
        uint64_t v299 = v298;
        operator delete(v298);
      }
      uint64_t v77 = v283 + 1;
      uint64_t v259 = objc_msgSend_targets(v13, v256, v257, v258);
      if (v283 + 1 >= (unint64_t)objc_msgSend_count(v259, v260, v261, v262)) {
        goto LABEL_118;
      }
    }
    uint64_t v238 = objc_msgSend_semantic(v113, (const char *)v140, v141, v142);
    char v241 = objc_msgSend_isEqualToString_(v238, v239, @"kGeometrySourceSemanticPosition", v240);
    uint64_t v243 = @"offsets";
    if ((v241 & 1) == 0)
    {
      if (objc_msgSend_isEqualToString_(v238, v242, @"kGeometrySourceSemanticNormal", @"offsets"))
      {
        float32x4_t v244 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v242, v284, @"normalOffsets", qword_1E9DDBB80, qword_1E9DDBC48);
LABEL_103:
        objc_msgSend_setFloat3Array_count_(v244, v245, (uint64_t)v298, v299 - v298);
        goto LABEL_104;
      }
      uint64_t v243 = &stru_1F0FCDBB0;
    }
    float32x4_t v244 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v242, v284, (uint64_t)v243, qword_1E9DDBB80, qword_1E9DDBC48);
    goto LABEL_103;
  }
LABEL_118:
  uint64_t v263 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v74, (uint64_t)a2, @"skel:blendShapes", qword_1E9DDBBC8, qword_1E9DDBC30);
  objc_msgSend_setTokenArray_(v263, v264, (uint64_t)v281, v265);
  uint64_t v267 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v266, (uint64_t)a2, @"skel:blendShapeTargets", qword_1E9DDBBA0, qword_1E9DDBC30);
  objc_msgSend_setObjectPathArray_(v267, v268, (uint64_t)v280, v269);
  unint64_t result = objc_msgSend_applyType_(a2, v270, qword_1E9DDBC58, v271);
  uint64_t v272 = *(void **)(a1 + 424);
  if (v272)
  {
    uint64_t v273 = a1 + 424;
    do
    {
      unint64_t v274 = v272[4];
      BOOL v275 = v274 >= v278;
      if (v274 >= v278) {
        uint64_t v276 = v272;
      }
      else {
        uint64_t v276 = v272 + 1;
      }
      if (v275) {
        uint64_t v273 = (uint64_t)v272;
      }
      uint64_t v272 = (void *)*v276;
    }
    while (*v276);
    if (v273 != a1 + 424 && *(void *)(v273 + 32) <= v278) {
      *(void *)(*(void *)(v273 + 40) + 24) = v281;
    }
  }
  return result;
}

void sub_1B65BB474(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(void *)(v1 - 152) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(v1 - 136);
  if (v4)
  {
    *(void *)(v1 - 128) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 - 112);
  if (v5)
  {
    *(void *)(v1 - 104) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B65BB4FC(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1B6427C8C(v3, a2);
    uint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

__CFString *sub_1B65BB59C(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4 = (int)a2;
  if (objc_msgSend_isEqualToString_(*a1, a2, @"kGeometrySourceSemanticPosition", a4)) {
    return @"points";
  }
  if (objc_msgSend_isEqualToString_(*a1, v6, @"kGeometrySourceSemanticNormal", v7))
  {
    uint64_t v11 = @"normals";
    uint64_t v12 = @"primvars:normals";
    BOOL v13 = v4 == 0;
  }
  else
  {
    if (objc_msgSend_isEqualToString_(*a1, v9, @"kGeometrySourceSemanticTexcoord", v10)) {
      return @"primvars:st";
    }
    int isEqualToString = objc_msgSend_isEqualToString_(*a1, v14, @"kGeometrySourceSemanticColor", v15);
    uint64_t v11 = &stru_1F0FCDBB0;
    uint64_t v12 = @"primvars:displayColor";
    BOOL v13 = isEqualToString == 0;
  }
  if (v13) {
    return v11;
  }
  else {
    return v12;
  }
}

__CFString *sub_1B65BB664(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isEqualToString_(*a1, a2, @"kGeometrySourceSemanticPosition", a4)) {
    return @"faceVertexIndices";
  }
  if (objc_msgSend_isEqualToString_(*a1, v5, @"kGeometrySourceSemanticNormal", v6)) {
    return @"primvars:normals:indices";
  }
  if (objc_msgSend_isEqualToString_(*a1, v8, @"kGeometrySourceSemanticTexcoord", v9)) {
    return @"primvars:st:indices";
  }
  if (objc_msgSend_isEqualToString_(*a1, v10, @"kGeometrySourceSemanticColor", v11)) {
    return @"primvars:displayColor:indices";
  }
  return &stru_1F0FCDBB0;
}

void sub_1B65BB71C(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1B64285D4(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1B65BB7C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v200[2] = *MEMORY[0x1E4F143B8];
  int32x4_t v195 = a2;
  int64_t v5 = *(void **)(a1 + 128);
  uint64_t v6 = (uint64_t **)(a1 + 120);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 128;
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v5;
    }
    int64_t v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 != a1 + 128 && *(void *)(v7 + 32) <= (unint64_t)a2)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    return sub_1B644FE48((uint64_t **)(a1 + 120), (unint64_t *)&v195, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&__p)[5];
  }
  else
  {
LABEL_12:
    uint64_t v11 = objc_msgSend_name(a2, (const char *)a2, a3, a4);
    if (!v11 || (uint64_t v15 = v11, !objc_msgSend_length(v11, v12, v13, v14)))
    {
      uint64_t v16 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, *(void *)(a1 + 136), v14);
      uint64_t v20 = objc_msgSend_stringValue(v16, v17, v18, v19);
      uint64_t v15 = objc_msgSend_stringByAppendingString_(@"Material_", v21, v20, v22);
    }
    uint64_t v23 = (void *)sub_1B65B50F8(v15, v12);
    uint64_t v27 = (char *)objc_msgSend_UTF8String(v23, v24, v25, v26);
    sub_1B65B8BB0(&__p, v27);
    uint64_t v28 = (uint64_t **)(a1 + 144);
    uint64_t v32 = (void **)(a1 + 152);
    uint64_t v188 = v6;
    if ((void **)(a1 + 152) != sub_1B65B8C60(a1 + 144, (void **)&__p.__r_.__value_.__l.__data_))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      p_str = &__str;
      sub_1B65BDD00((uint64_t)&__str, size + 1);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(p_str, p_p, size);
      }
      *(_WORD *)((char *)&p_str->__r_.__value_.__l.__data_ + size) = 95;
      std::to_string(&v196, *(void *)(a1 + 160));
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v196;
      }
      else {
        uint64_t v36 = (std::string *)v196.__r_.__value_.__r.__words[0];
      }
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v196.__r_.__value_.__l.__size_;
      }
      uint64_t v38 = std::string::append(&__str, (const std::string::value_type *)v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      *(void *)&v198[1] = *((void *)&v38->__r_.__value_.__l + 2);
      v198[0] = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v196.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v32 != sub_1B65B8C60(a1 + 144, (void **)v198))
      {
        int v42 = 1;
        do
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v43 = __p.__r_.__value_.__l.__size_;
          }
          sub_1B65BDD00((uint64_t)&__str, v43 + 4);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v44 = &__str;
          }
          else {
            uint64_t v44 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v43)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v45 = &__p;
            }
            else {
              uint64_t v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            memmove(v44, v45, v43);
          }
          strcpy((char *)v44 + v43, "_un_");
          std::to_string(&v196, v42);
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v46 = &v196;
          }
          else {
            uint64_t v46 = (std::string *)v196.__r_.__value_.__r.__words[0];
          }
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v47 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v47 = v196.__r_.__value_.__l.__size_;
          }
          uint64_t v48 = std::string::append(&__str, (const std::string::value_type *)v46, v47);
          std::string::size_type v49 = v48->__r_.__value_.__r.__words[0];
          v200[0] = v48->__r_.__value_.__l.__size_;
          *(void *)((char *)v200 + 7) = *(std::string::size_type *)((char *)&v48->__r_.__value_.__r.__words[1] + 7);
          char v50 = HIBYTE(v48->__r_.__value_.__r.__words[2]);
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          if (SBYTE7(v198[1]) < 0) {
            operator delete(*(void **)&v198[0]);
          }
          *(void *)&v198[0] = v49;
          *((void *)&v198[0] + 1) = v200[0];
          *(void *)((char *)v198 + 15) = *(void *)((char *)v200 + 7);
          BYTE7(v198[1]) = v50;
          if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v196.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          ++v42;
        }
        while (v32 != sub_1B65B8C60((uint64_t)v28, (void **)v198));
      }
      if ((SBYTE7(v198[1]) & 0x80u) == 0) {
        uint64_t v51 = objc_msgSend_stringWithUTF8String_(NSString, v40, (uint64_t)v198, v41);
      }
      else {
        uint64_t v51 = objc_msgSend_stringWithUTF8String_(NSString, v40, *(uint64_t *)&v198[0], v41);
      }
      uint64_t v23 = (void *)v51;
      uint64_t v6 = v188;
      if (SBYTE7(v198[1]) < 0) {
        operator delete(*(void **)&v198[0]);
      }
    }
    uint64_t v52 = (char *)objc_msgSend_UTF8String(v23, v29, v30, v31);
    sub_1B65B8BB0(v198, v52);
    sub_1B65BDD84(v28, (void **)v198, (uint64_t)v198);
    if (SBYTE7(v198[1]) < 0) {
      operator delete(*(void **)&v198[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v56 = (void *)sub_1B65BC524(a1, v53, v54, v55);
    uint64_t v59 = objc_msgSend_stringByAppendingPathComponent_(v56, v57, (uint64_t)v23, v58);
    uint64_t i = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v60, (uint64_t)v59, v61);
    uint64_t v190 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v63, *(void *)(a1 + 56), i, qword_1E9DDBBD8);
    uint64_t v66 = objc_msgSend_stringByAppendingPathComponent_(v59, v64, @"surfaceShader", v65);
    uint64_t v69 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v67, v66, v68);
    uint64_t v191 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v70, *(void *)(a1 + 56), v69, qword_1E9DDBBF8);
    uint64_t v72 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v71, v191, @"info:id", qword_1E9DDBBC0, qword_1E9DDBC30);
    uint64_t v75 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v73, @"UsdPreviewSurface", v74);
    objc_msgSend_setTokenValue_(v72, v76, v75, v77);
    objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v78, v191, @"outputs:surface", qword_1E9DDBBC0, qword_1E9DDBC30);
    uint64_t v82 = objc_msgSend_emission(v195, v79, v80, v81);
    if (objc_msgSend_selfIllumination(v195, v83, v84, v85))
    {
      uint64_t v89 = objc_msgSend_selfIllumination(v195, v86, v87, v88);
      objc_msgSend_contents(v89, v90, v91, v92);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if (!objc_msgSend_emission(v195, v93, v94, v95)
          || (uint64_t v99 = objc_msgSend_emission(v195, v96, v97, v98),
              objc_msgSend_contents(v99, v100, v101, v102),
              objc_opt_class(),
              (objc_opt_isKindOfClass() & 1) == 0)
          && (uint64_t v106 = objc_msgSend_emission(v195, v103, v104, v105),
              objc_msgSend_contents(v106, v107, v108, v109),
              objc_opt_class(),
              (objc_opt_isKindOfClass() & 1) == 0))
        {
          uint64_t v82 = objc_msgSend_selfIllumination(v195, v96, v97, v98);
        }
      }
    }
    memset(v198, 0, 24);
    sub_1B65BC590((char **)v198, 8uLL);
    uint64_t v113 = objc_msgSend_normal(v195, v110, v111, v112);
    sub_1B65B8BB0(&__str, "rgb");
    sub_1B65BDEF0(&__p, (std::string::size_type)@"normal", v113, (std::string::size_type *)&qword_1E9DDBC38, &__str, 0);
    sub_1B65BC694((char **)v198, (long long *)&__p);
    if (v194 < 0) {
      operator delete(v193);
    }
    uint64_t v187 = (void *)v69;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v117 = *((void *)&v198[0] + 1);
    if (!objc_msgSend_shadingModel(v195, v114, v115, v116))
    {
      uint64_t v121 = objc_msgSend_metalness(v195, v118, v119, v120);
      sub_1B65B8BB0(&__str, "r");
      sub_1B65BDEF0(&__p, (std::string::size_type)@"metallic", v121, (std::string::size_type *)&qword_1E9DDBC30, &__str, 0);
      sub_1B65BC694((char **)v198, (long long *)&__p);
      if (v194 < 0) {
        operator delete(v193);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v125 = objc_msgSend_roughness(v195, v122, v123, v124);
      sub_1B65B8BB0(&__str, "r");
      sub_1B65BDEF0(&__p, (std::string::size_type)@"roughness", v125, (std::string::size_type *)&qword_1E9DDBC30, &__str, 0);
      sub_1B65BC694((char **)v198, (long long *)&__p);
      if (v194 < 0) {
        operator delete(v193);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v126 = objc_msgSend_diffuse(v195, v118, v119, v120);
    sub_1B65B8BB0(&__str, "rgb");
    sub_1B65BDEF0(&__p, (std::string::size_type)@"diffuseColor", v126, (std::string::size_type *)&qword_1E9DDBC28, &__str, 0);
    sub_1B65BC694((char **)v198, (long long *)&__p);
    if (v194 < 0) {
      operator delete(v193);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_1B65B8BB0(&__str, "rgb");
    sub_1B65BDEF0(&__p, (std::string::size_type)@"emissiveColor", v82, (std::string::size_type *)&qword_1E9DDBC28, &__str, 0);
    sub_1B65BC694((char **)v198, (long long *)&__p);
    if (v194 < 0) {
      operator delete(v193);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v130 = objc_msgSend_transparent(v195, v127, v128, v129);
    sub_1B65B8BB0(&__str, "a");
    LODWORD(v131) = 1.0;
    std::string::size_type v135 = objc_msgSend_numberWithFloat_(NSNumber, v132, v133, v134, v131);
    sub_1B65BDEF0(&__p, (std::string::size_type)@"opacity", v130, (std::string::size_type *)&qword_1E9DDBC30, &__str, v135);
    sub_1B65BC694((char **)v198, (long long *)&__p);
    if (v194 < 0) {
      operator delete(v193);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int64_t v139 = objc_msgSend_ambientOcclusion(v195, v136, v137, v138);
    sub_1B65B8BB0(&__str, "r");
    sub_1B65BDEF0(&__p, (std::string::size_type)@"occlusion", v139, (std::string::size_type *)&qword_1E9DDBC30, &__str, 0);
    sub_1B65BC694((char **)v198, (long long *)&__p);
    if (v194 < 0) {
      operator delete(v193);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v144 = *((void *)&v198[0] + 1);
    uint64_t v143 = *(void *)&v198[0];
    if (*(void *)&v198[0] != *((void *)&v198[0] + 1))
    {
      uint64_t v189 = v117 - 80;
      do
      {
        BOOL v145 = *(void **)(v143 + 8);
        if (v145 && objc_msgSend_contents(v145, (const char *)v140, v141, v142)) {
          *(void *)(v143 + 56) = sub_1B65BC848(a1, *(void **)(v143 + 8), v141, v142);
        }
        v143 += 80;
      }
      while (v143 != v144);
      uint64_t v146 = *((void *)&v198[0] + 1);
      uint64_t v147 = *(void *)&v198[0];
      if (*((void *)&v198[0] + 1) != *(void *)&v198[0])
      {
        uint64_t v185 = v59;
        uint64_t v186 = (void *)i;
        unint64_t v148 = 0;
        do
        {
          unint64_t v149 = v147 + 80 * v148;
          uint64_t v150 = (void **)(v149 + 56);
          if (*(void *)(v149 + 56)) {
            BOOL v151 = *(void *)(v149 + 64) == 0;
          }
          else {
            BOOL v151 = 0;
          }
          if (v151)
          {
            uint64_t v152 = *(void **)v149;
            memset(&__p, 0, sizeof(__p));
            uint64_t v153 = sub_1B64285D4((uint64_t)&__p.__r_.__value_.__r.__words[2], 1uLL);
            void *v153 = v149;
            std::string::size_type v155 = (std::string::size_type)(v153 + 1);
            uint64_t v156 = (char *)__p.__r_.__value_.__l.__size_;
            std::string::size_type v157 = __p.__r_.__value_.__r.__words[0];
            std::string::size_type v158 = (std::string::size_type)v153;
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              do
              {
                uint64_t v159 = *((void *)v156 - 1);
                v156 -= 8;
                *(void *)(v158 - 8) = v159;
                v158 -= 8;
              }
              while (v156 != (char *)v157);
              uint64_t v156 = (char *)__p.__r_.__value_.__r.__words[0];
            }
            __p.__r_.__value_.__r.__words[0] = v158;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v153 + 1);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v153[v140];
            if (v156) {
              operator delete(v156);
            }
            __p.__r_.__value_.__l.__size_ = v155;
            ++v148;
            uint64_t v146 = *((void *)&v198[0] + 1);
            uint64_t v147 = *(void *)&v198[0];
            unint64_t v160 = v148;
            if (v148 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v198[0] + 1) - *(void *)&v198[0]) >> 4))
            {
              do
              {
                uint64_t v161 = (uint64_t *)(v147 + 80 * v160);
                if (objc_msgSend_isEqualToString_(*v150, (const char *)v140, v161[7], v154, v185, v186))
                {
                  uint64_t v162 = objc_msgSend_stringByAppendingString_(v152, (const char *)v140, @"_", v154);
                  uint64_t v152 = objc_msgSend_stringByAppendingString_(v162, v163, *v161, v164);
                  std::string::size_type v165 = __p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                  {
                    uint64_t v167 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                    if ((unint64_t)(v167 + 1) >> 61) {
                      abort();
                    }
                    unint64_t v168 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
                    if (v168 <= v167 + 1) {
                      unint64_t v168 = v167 + 1;
                    }
                    if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v140 = v168;
                    }
                    if (v140) {
                      uint64_t v169 = (char *)sub_1B64285D4((uint64_t)&__p.__r_.__value_.__r.__words[2], v140);
                    }
                    else {
                      uint64_t v169 = 0;
                    }
                    uint64_t v170 = (uint64_t **)&v169[8 * v167];
                    *uint64_t v170 = v161;
                    std::string::size_type v166 = (std::string::size_type)(v170 + 1);
                    uint64_t v171 = (char *)__p.__r_.__value_.__l.__size_;
                    std::string::size_type v172 = __p.__r_.__value_.__r.__words[0];
                    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
                    {
                      do
                      {
                        uint64_t v173 = (uint64_t *)*((void *)v171 - 1);
                        v171 -= 8;
                        *--uint64_t v170 = v173;
                      }
                      while (v171 != (char *)v172);
                      uint64_t v171 = (char *)__p.__r_.__value_.__r.__words[0];
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
                    __p.__r_.__value_.__l.__size_ = v166;
                    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v169[8 * v140];
                    if (v171) {
                      operator delete(v171);
                    }
                  }
                  else
                  {
                    *(void *)__p.__r_.__value_.__l.__size_ = v161;
                    std::string::size_type v166 = v165 + 8;
                  }
                  __p.__r_.__value_.__l.__size_ = v166;
                }
                ++v160;
                uint64_t v146 = *((void *)&v198[0] + 1);
                uint64_t v147 = *(void *)&v198[0];
              }
              while (v160 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v198[0] + 1) - *(void *)&v198[0]) >> 4));
              std::string::size_type v155 = __p.__r_.__value_.__l.__size_;
            }
            uint64_t v174 = (void *)__p.__r_.__value_.__r.__words[0];
            uint64_t v175 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0] != v155)
            {
              do
              {
                uint64_t v176 = *v175++;
                *(void *)(v176 + 64) = v152;
              }
              while (v175 != (uint64_t *)v155);
            }
            if (v174)
            {
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v174;
              operator delete(v174);
              uint64_t v146 = *((void *)&v198[0] + 1);
              uint64_t v147 = *(void *)&v198[0];
            }
          }
          else
          {
            ++v148;
          }
        }
        while (v148 < 0xCCCCCCCCCCCCCCCDLL * ((v146 - v147) >> 4));
        uint64_t v6 = v188;
        for (uint64_t i = (uint64_t)v186; v147 != v146; v147 += 80)
          sub_1B65BCDA0(a1, v147, v189, v185, v191, v190, v186);
      }
    }
    int32x4_t v177 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v140, v190, @"outputs:surface", qword_1E9DDBBC0, qword_1E9DDBC30, v185, v186);
    uint64_t v199 = objc_msgSend_pathByAppendingPropertyComponent_(v187, v178, @"outputs:surface", v179);
    uint64_t v181 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v180, (uint64_t)&v199, 1);
    objc_msgSend_setConnectionWithTargetPaths_(v177, v182, v181, v183);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    sub_1B644FE48(v6, (unint64_t *)&v195, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&__str)[5] = i;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
    sub_1B65BECA8((void ***)&__p);
  }
  return i;
}

void sub_1B65BC398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  a18 = (void *)(v46 - 160);
  sub_1B65BECA8((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65BC524(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 40);
  if (!result)
  {
    uint64_t v6 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 24), a2, @"Materials", a4);
    *(void *)(a1 + 40) = v6;
    uint64_t v9 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v7, v6, v8);
    objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v10, *(void *)(a1 + 56), v9, qword_1E9DDBBF0);
    return *(void *)(a1 + 40);
  }
  return result;
}

uint64_t sub_1B65BC590(char **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v19 = result;
    uint64_t v6 = (char *)sub_1B65BDE18(result, a2);
    uint64_t v9 = *a1;
    unint64_t v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      int64x2_t v14 = vdupq_n_s64(v8);
      uint64_t v10 = &v6[v5];
    }
    else
    {
      uint64_t v10 = &v6[v5];
      do
      {
        long long v11 = *(_OWORD *)(v8 - 80);
        *((void *)v10 - 8) = *(void *)(v8 - 64);
        *((_OWORD *)v10 - 5) = v11;
        long long v12 = *(_OWORD *)(v8 - 56);
        *((void *)v10 - 5) = *(void *)(v8 - 40);
        *(_OWORD *)(v10 - 56) = v12;
        *(void *)(v8 - 48) = 0;
        *(void *)(v8 - 40) = 0;
        *(void *)(v8 - 56) = 0;
        long long v13 = *(_OWORD *)(v8 - 16);
        *((_OWORD *)v10 - 2) = *(_OWORD *)(v8 - 32);
        *((_OWORD *)v10 - 1) = v13;
        v10 -= 80;
        v8 -= 80;
      }
      while ((char *)v8 != v9);
      int64x2_t v14 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v17 = v14;
    uint64_t v15 = a1[2];
    a1[2] = &v6[80 * v7];
    uint64_t v18 = v15;
    uint64_t v16 = v14.i64[0];
    return sub_1B65BDE60((uint64_t)&v16);
  }
  return result;
}

uint64_t sub_1B65BC694(char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333) {
      abort();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x199999999999999) {
      unint64_t v15 = 0x333333333333333;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v32 = result;
    if (v15) {
      uint64_t v16 = (char *)sub_1B65BDE18(result, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    int64x2_t v17 = &v16[80 * v12];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int64x2_t v17 = v18;
    long long v19 = *(long long *)((char *)a2 + 24);
    *((void *)v17 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v20 = a2[4];
    *((_OWORD *)v17 + 3) = a2[3];
    *((_OWORD *)v17 + 4) = v20;
    uint64_t v22 = *a1;
    unint64_t v21 = (unint64_t)a1[1];
    if ((char *)v21 == *a1)
    {
      int64x2_t v27 = vdupq_n_s64(v21);
      uint64_t v23 = &v16[80 * v12];
    }
    else
    {
      uint64_t v23 = &v16[80 * v12];
      do
      {
        long long v24 = *(_OWORD *)(v21 - 80);
        *((void *)v23 - 8) = *(void *)(v21 - 64);
        *((_OWORD *)v23 - 5) = v24;
        long long v25 = *(_OWORD *)(v21 - 56);
        *((void *)v23 - 5) = *(void *)(v21 - 40);
        *(_OWORD *)(v23 - 56) = v25;
        *(void *)(v21 - 48) = 0;
        *(void *)(v21 - 40) = 0;
        *(void *)(v21 - 56) = 0;
        long long v26 = *(_OWORD *)(v21 - 16);
        *((_OWORD *)v23 - 2) = *(_OWORD *)(v21 - 32);
        *((_OWORD *)v23 - 1) = v26;
        v23 -= 80;
        v21 -= 80;
      }
      while ((char *)v21 != v22);
      int64x2_t v27 = *(int64x2_t *)a1;
    }
    long long v11 = v17 + 80;
    *a1 = v23;
    a1[1] = v17 + 80;
    int64x2_t v30 = v27;
    uint64_t v28 = a1[2];
    a1[2] = &v16[80 * v15];
    uint64_t v31 = v28;
    uint64_t v29 = v27.i64[0];
    uint64_t result = sub_1B65BDE60((uint64_t)&v29);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v10 = a2[4];
    *(_OWORD *)(v7 + 48) = a2[3];
    *(_OWORD *)(v7 + 64) = v10;
    long long v11 = (char *)(v7 + 80);
  }
  a1[1] = v11;
  return result;
}

uint64_t sub_1B65BC848(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = objc_msgSend_contents(a2, (const char *)a2, a3, a4);
  long long v10 = *(void **)(a1 + 176);
  if (v10)
  {
    uint64_t v11 = a1 + 176;
    do
    {
      unint64_t v12 = v10[4];
      BOOL v13 = v12 >= v6;
      if (v12 >= v6) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = v10 + 1;
      }
      if (v13) {
        uint64_t v11 = (uint64_t)v10;
      }
      long long v10 = (void *)*v14;
    }
    while (*v14);
    if (v11 != a1 + 176 && v6 >= *(void *)(v11 + 32))
    {
      unint64_t v151 = objc_msgSend_contents(a2, v7, v8, v9);
      uint64_t v152 = (uint64_t *)&v151;
      return sub_1B644FE48((uint64_t **)(a1 + 168), &v151, (uint64_t)&unk_1B6E4FDF8, &v152)[5];
    }
  }
  unint64_t v151 = 0;
  objc_msgSend_contents(a2, v7, v8, v9);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_msgSend_contents(a2, v15, v16, v17), objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    || objc_msgSend_contentsAbsoluteURL(a2, v15, v16, v17))
  {
    long long v18 = objc_msgSend_contentsAbsoluteURL(a2, v15, v16, v17);
    uint64_t v22 = sub_1B65BE4A4(v18);
    if (v22 || (v23 = objc_msgSend_contents(a2, v19, v20, v21), (uint64_t v22 = sub_1B65BE4A4(v23)) != 0))
    {
      long long v24 = objc_msgSend_pathExtension(v22, v19, v20, v21);
      uint64_t v28 = objc_msgSend_lowercaseString(v24, v25, v26, v27);
      uint64_t PathComponent = objc_msgSend_lastPathComponent(v22, v29, v30, v31);
      uint64_t v36 = objc_msgSend_stringByDeletingPathExtension(PathComponent, v33, v34, v35);
      uint64_t v38 = (void *)sub_1B65B50F8(v36, v37);
      uint64_t v41 = objc_msgSend_stringByAppendingPathExtension_(v38, v39, v28, v40);
      LOBYTE(v152) = 0;
      uint64_t v42 = sub_1B65BDFC4(a1, v41, v22, &v152);
      if ((int)v42 < 1)
      {
        uint64_t v52 = @"textures";
        uint64_t v55 = objc_msgSend_stringByAppendingPathComponent_(@"textures", v43, (uint64_t)v41, v44);
      }
      else
      {
        uint64_t v45 = objc_msgSend_numberWithInt_(NSNumber, v43, v42, v44);
        uint64_t v49 = objc_msgSend_stringValue(v45, v46, v47, v48);
        uint64_t v52 = (__CFString *)objc_msgSend_stringByAppendingPathComponent_(@"textures", v50, v49, v51);
        uint64_t v55 = objc_msgSend_stringByAppendingPathComponent_(v52, v53, (uint64_t)v41, v54);
      }
      uint64_t v58 = v55;
      if ((_BYTE)v152)
      {
        uint64_t v59 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 16), v56, v55, v57);
        uint64_t v63 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v60, v61, v62);
        uint64_t v66 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 16), v64, (uint64_t)v52, v65);
        objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v63, v67, v66, 1, 0, &v151);
        objc_msgSend_copyItemAtPath_toPath_error_(v63, v68, (uint64_t)v22, v59, &v151);
      }
      return v58;
    }
  }
  else
  {
    objc_msgSend_contents(a2, v15, v16, v17);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v69 = objc_msgSend_stringWithFormat_(NSString, v19, @"texgen_%lu.png", v21, *(void *)(a1 + 184));
      uint64_t v58 = objc_msgSend_stringByAppendingPathComponent_(@"textures", v70, v69, v71);
      uint64_t v74 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 16), v72, v58, v73);
      uint64_t v150 = objc_msgSend_contents(a2, v75, v76, v77);
      uint64_t v152 = &v150;
      sub_1B644FE48((uint64_t **)(a1 + 168), (unint64_t *)&v150, (uint64_t)&unk_1B6E4FDF8, &v152)[5] = v58;
      uint64_t v81 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v78, v79, v80);
      uint64_t v84 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 16), v82, @"textures", v83);
      objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v81, v85, v84, 1, 0, &v151);
      uint64_t v89 = objc_msgSend_contents(a2, v86, v87, v88);
      uint64_t v92 = objc_msgSend_fileURLWithPath_(MEMORY[0x1E4F1CB10], v90, v74, v91);
      objc_msgSend_writeToURL_(v89, v93, v92, v94);
      return v58;
    }
  }
  uint64_t CFXImageRef = objc_msgSend_getCFXImageRef(a2, v19, v20, v21);
  uint64_t v150 = CFXImageRef;
  if (!CFXImageRef) {
    return 0;
  }
  unint64_t v102 = CFXImageRef;
  uint64_t v103 = *(void **)(a1 + 200);
  if (v103)
  {
    uint64_t v104 = (uint64_t **)(a1 + 192);
    uint64_t v105 = a1 + 200;
    do
    {
      unint64_t v106 = v103[4];
      BOOL v107 = v106 >= v102;
      if (v106 >= v102) {
        uint64_t v108 = v103;
      }
      else {
        uint64_t v108 = v103 + 1;
      }
      if (v107) {
        uint64_t v105 = (uint64_t)v103;
      }
      uint64_t v103 = (void *)*v108;
    }
    while (*v108);
    if (v105 != a1 + 200 && v102 >= *(void *)(v105 + 32))
    {
      uint64_t v136 = NSString;
      uint64_t v152 = &v150;
      uint64_t v137 = sub_1B65BEB7C(v104, (unint64_t *)&v150, (uint64_t)&unk_1B6E4FDF8, &v152);
      unint64_t v140 = v137 + 5;
      if (*((char *)v137 + 63) < 0) {
        unint64_t v140 = (void *)*v140;
      }
      return objc_msgSend_stringWithUTF8String_(v136, v138, (uint64_t)v140, v139);
    }
  }
  v144[0] = MEMORY[0x1E4F143A8];
  v144[1] = 3221225472;
  BOOL v145 = sub_1B65BE294;
  uint64_t v146 = &unk_1E6144D78;
  uint64_t v147 = a2;
  uint64_t v148 = a1;
  unint64_t v149 = v102;
  CFDataRef v116 = (const __CFData *)sub_1B643B200(v102, 0, v96, v97, v98, v99, v100, v101);
  if (!v116)
  {
    uint64_t v133 = (const void *)sub_1B643B460(v102, v109, v110, v111, v112, v113, v114, v115);
    if (!v133) {
      goto LABEL_42;
    }
    CFDataRef v116 = (const __CFData *)CFRetain(v133);
    if (!v116) {
      goto LABEL_42;
    }
  }
  uint64_t v117 = CGImageSourceCreateWithData(v116, 0);
  CFStringRef Type = CGImageSourceGetType(v117);
  uint64_t v121 = objc_msgSend_typeWithIdentifier_(MEMORY[0x1E4F442D8], v119, (uint64_t)Type, v120);
  uint64_t v125 = objc_msgSend_preferredFilenameExtension(v121, v122, v123, v124);
  v143[0] = MEMORY[0x1E4F143A8];
  v143[1] = 3221225472;
  v143[2] = sub_1B65BE3EC;
  v143[3] = &unk_1E6144D98;
  v143[4] = v116;
  uint64_t v58 = ((uint64_t (*)(void *, uint64_t, void *))v145)(v144, v125, v143);
  CFRelease(v116);
  CFRelease(v117);
  if (!v58)
  {
LABEL_42:
    CGImageRef v134 = sub_1B643AA68(v102, v126, v127, v128, v129, v130, v131, v132);
    if (v134)
    {
      v142[0] = MEMORY[0x1E4F143A8];
      v142[1] = 3221225472;
      v142[2] = sub_1B65BE3FC;
      v142[3] = &unk_1E6144D98;
      v142[4] = v134;
      return ((uint64_t (*)(void *, __CFString *, void *))v145)(v144, @"png", v142);
    }
    return 0;
  }
  return v58;
}

void *sub_1B65BCDA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  v378[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(a2 + 8);
  if (!v8 || !objc_msgSend_contents(v8, (const char *)a2, a3, (uint64_t)a4)) {
    return 0;
  }
  if (!*(void *)(a2 + 56))
  {
    uint64_t v52 = objc_msgSend_stringByAppendingString_(@"inputs:", v15, *(void *)a2, v16);
    objc_msgSend_contents(*(void **)(a2 + 8), v53, v54, v55);
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v60 = objc_msgSend_contents(*(void **)(a2 + 8), v57, v58, v59);
    if ((isKindOfClass & 1) == 0)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v169 = objc_msgSend_contents(*(void **)(a2 + 8), v166, v167, v168);
        objc_msgSend_floatValue(v169, v170, v171, v172);
        int32x2_t v363 = v174;
        uint64_t v175 = *(unsigned __int8 *)(a2 + 47);
        int v176 = (char)v175;
        if ((v175 & 0x80u) != 0) {
          uint64_t v175 = *(void *)(a2 + 32);
        }
        if (v175 == 3
          && (v176 >= 0 ? (int32x4_t v177 = (unsigned __int16 *)(a2 + 24)) : (int32x4_t v177 = *(unsigned __int16 **)(a2 + 24)),
              (int v178 = *v177, v179 = *((unsigned __int8 *)v177 + 2), v178 == 26482) ? (_ZF = v179 == 98) : (_ZF = 0),
              _ZF))
        {
          uint64_t v338 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v173, a5, v52, qword_1E9DDBB68, *(void *)(a2 + 16));
          objc_msgSend_setFloat3Value_(v338, v339, v340, v341, *(double *)vdupq_lane_s32(v363, 0).i64);
        }
        else
        {
          uint64_t v181 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v173, a5, v52, qword_1E9DDBB58, *(void *)(a2 + 16));
          *(float *)&double v182 = *(float *)v363.i32 * sub_1B65BEC40(a2);
          objc_msgSend_setFloatValue_(v181, v183, v184, v185, v182);
        }
      }
      return 0;
    }
    v371.n128_u64[0] = 0;
    double v366 = 0.0;
    v367.n128_u64[0] = 0;
    v365.i64[0] = 0;
    objc_msgSend_getRed_green_blue_alpha_(v60, v61, (uint64_t)&v371, (uint64_t)&v367, &v365, &v366);
    HIDWORD(v64) = v365.i32[1];
    *(float *)&double v64 = *(double *)v365.i64;
    uint64_t v65 = *(unsigned __int8 *)(a2 + 47);
    int v66 = (char)v65;
    if ((v65 & 0x80u) != 0) {
      uint64_t v65 = *(void *)(a2 + 32);
    }
    if (v65 == 1)
    {
      if (v66 >= 0) {
        uint64_t v67 = (unsigned __int8 *)(a2 + 24);
      }
      else {
        uint64_t v67 = *(unsigned __int8 **)(a2 + 24);
      }
      int v68 = *v67;
      if (v68 == 103)
      {
        float v360 = v367.n128_f64[0];
        *(float *)&double v63 = v371.n128_f64[0];
        uint64_t v69 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1E9DDBB58, *(void *)(a2 + 16), v64, v63);
        *(float *)&double v73 = sub_1B65BEC40(a2);
        float v74 = v360;
        goto LABEL_52;
      }
      if (v68 == 114)
      {
        float v362 = v371.n128_f64[0];
        uint64_t v69 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1E9DDBB58, *(void *)(a2 + 16), v64);
        *(float *)&double v73 = sub_1B65BEC40(a2);
        float v74 = v362;
LABEL_52:
        *(float *)&double v73 = *(float *)&v73 * v74;
        objc_msgSend_setFloatValue_(v69, v70, v71, v72, v73);
        return 0;
      }
      uint64_t v186 = *(void *)(a2 + 16);
      if (v68 == 98)
      {
        float v358 = *(double *)v365.i64;
        uint64_t v69 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1E9DDBB58, v186);
        *(float *)&double v73 = sub_1B65BEC40(a2);
        float v74 = v358;
        goto LABEL_52;
      }
      if (v68 == 97)
      {
        float v342 = v366;
        uint64_t v343 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1E9DDBB58, v186);
        *(float *)&double v344 = sub_1B65BEC40(a2) * v342;
        objc_msgSend_setFloatValue_(v343, v345, v346, v347, v344);
        return 0;
      }
      float v359 = v367.n128_f64[0];
      float v364 = v371.n128_f64[0];
    }
    else
    {
      float v359 = v367.n128_f64[0];
      float v364 = v371.n128_f64[0];
      uint64_t v186 = *(void *)(a2 + 16);
    }
    uint64_t v187 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1E9DDBB68, v186);
    objc_msgSend_setFloat3Value_(v187, v188, v189, v190, COERCE_DOUBLE(__PAIR64__(LODWORD(v359), LODWORD(v364))));
    return 0;
  }
  uint64_t v357 = a5;
  uint64_t v17 = objc_msgSend_stringByAppendingString_(*(void **)(a2 + 48), v15, @"_texCoordReader", v16);
  uint64_t v20 = objc_msgSend_stringByAppendingPathComponent_(a4, v18, v17, v19);
  uint64_t v361 = a1;
  uint64_t v355 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v21, v20, v22);
  uint64_t v24 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v23, *(void *)(a1 + 56), (uint64_t)v355, qword_1E9DDBBF8);
  uint64_t v26 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v25, v24, @"info:id", qword_1E9DDBBC0, qword_1E9DDBC30);
  uint64_t v29 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v27, @"UsdPrimvarReader_float2", v28);
  objc_msgSend_setTokenValue_(v26, v30, v29, v31);
  objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v32, v24, @"outputs:result", qword_1E9DDBB60, qword_1E9DDBC30);
  uint64_t v34 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v33, v24, @"inputs:varname", qword_1E9DDBBC0, qword_1E9DDBC30);
  if (objc_msgSend_isEqualToString_(*(void **)a2, v35, *(void *)a3, v36))
  {
    long long v39 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v37, a6, @"inputs:frame:stPrimvarName", qword_1E9DDBBC0, qword_1E9DDBC30);
    uint64_t v42 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v40, *(void *)(a2 + 48), v41);
    objc_msgSend_setTokenValue_(v39, v43, v42, v44);
    v378[0] = objc_msgSend_pathByAppendingPropertyComponent_(a7, v45, @"inputs:frame:stPrimvarName", v46);
    uint64_t v48 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v47, (uint64_t)v378, 1);
    objc_msgSend_setConnectionWithTargetPaths_(v34, v49, v48, v50);
  }
  else if (!*(void *)(a3 + 56) {
         || (objc_msgSend_isEqualToString_(*(void **)(a3 + 48), v37, *(void *)(a2 + 48), v38) & 1) == 0)
  }
  {
    uint64_t v75 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v37, *(void *)(a2 + 48), v38);
    objc_msgSend_setTokenValue_(v34, v76, v75, v77);
  }
  objc_msgSend_contentsTransform(*(void **)(a2 + 8), v37, v51, v38);
  float32x4_t v351 = (float32x4_t)v79;
  float32x4_t v353 = (float32x4_t)v78;
  __n128 v348 = v81;
  float32x4_t v349 = (float32x4_t)v80;
  if (!VFXMatrix4IsIdentity(v78, v79, v80, v81))
  {
    uint64_t v88 = objc_msgSend_stringByAppendingString_(*(void **)(a2 + 64), v82, @"_transform2D", v83);
    uint64_t v91 = objc_msgSend_stringByAppendingPathComponent_(a4, v89, v88, v90);
    uint64_t v84 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v92, v91, v93);
    p_superclass = VFXState.superclass;
    uint64_t v95 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v94, *(void *)(a1 + 56), (uint64_t)v84, qword_1E9DDBBF8);
    uint64_t v98 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v96, @"math", v97);
    uint64_t v101 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v99, v98, v100);
    objc_msgSend_setDictionaryMetadataWithKey_dictionaryKey_value_(v95, v102, @"sdrMetadata", @"role", v101);
    uint64_t v104 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v103, (uint64_t)v95, @"info:id", qword_1E9DDBBC0, qword_1E9DDBC30);
    uint64_t v107 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v105, @"UsdTransform2d", v106);
    objc_msgSend_setTokenValue_(v104, v108, v107, v109);
    uint64_t v111 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v110, (uint64_t)v95, @"inputs:in", qword_1E9DDBB60, qword_1E9DDBC30);
    uint64_t v377 = objc_msgSend_pathByAppendingPropertyComponent_(v355, v112, @"outputs:result", v113);
    unint64_t v86 = 0x1E4F1C000uLL;
    uint64_t v115 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v114, (uint64_t)&v377, 1);
    objc_msgSend_setConnectionWithTargetPaths_(v111, v116, v115, v117);
    unint64_t v118 = 0;
    float32x4_t v119 = *(float32x4_t *)MEMORY[0x1E4F149A0];
    float32x4_t v120 = *(float32x4_t *)(MEMORY[0x1E4F149A0] + 16);
    int8x16_t v121 = (int8x16_t)vmulq_f32(v353, v353);
    *(float32x2_t *)v121.i8 = vadd_f32(*(float32x2_t *)v121.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL));
    float32x4_t v122 = vmulq_f32(v351, v351);
    *(float32x2_t *)v122.f32 = vadd_f32(*(float32x2_t *)v122.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL));
    int32x2_t v123 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v121.i8, *(int32x2_t *)v122.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v121.i8, *(int32x2_t *)v122.f32)));
    int8x16_t v124 = (int8x16_t)vmulq_f32(v349, v349);
    int32x2_t v125 = (int32x2_t)vadd_f32(*(float32x2_t *)v124.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL));
    *(float *)v125.i32 = sqrtf(vaddv_f32((float32x2_t)v125));
    *(int32x2_t *)v122.f32 = v123;
    v122.i64[1] = __PAIR64__(1.0, v125.u32[0]);
    __asm { FMOV            V5.4S, #1.0 }
    float32x4_t v130 = vdivq_f32(_Q5, v122);
    float32x4_t v131 = *(float32x4_t *)(MEMORY[0x1E4F149A0] + 32);
    int32x4_t v132 = *(int32x4_t *)(MEMORY[0x1E4F149A0] + 48);
    float32x4_t v133 = (float32x4_t)vdupq_lane_s32(v123, 0);
    float32x4_t v134 = vdivq_f32(v351, (float32x4_t)vdupq_lane_s32(v123, 1));
    float32x4_t v135 = vdivq_f32(v349, (float32x4_t)vdupq_lane_s32(v125, 0));
    int32x4_t v136 = vzip1q_s32((int32x4_t)v134, v132);
    __n128 v367 = (__n128)v353;
    float32x4_t v368 = v351;
    float32x4_t v369 = v349;
    float32x4_t v370 = (float32x4_t)v348;
    do
    {
      *(float32x4_t *)((char *)&v371 + v118) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v119, COERCE_FLOAT(*(_OWORD *)((char *)&v367 + v118))), v120, (float32x2_t)v367.n128_u64[v118 / 8], 1), v131, *(float32x4_t *)((char *)&v367 + v118), 2), (float32x4_t)xmmword_1B6E50D70, *(float32x4_t *)((char *)&v367 + v118), 3);
      v118 += 16;
    }
    while (v118 != 64);
    unint64_t v137 = 0;
    v142.i64[0] = 0;
    v142.i32[2] = 0;
    float32x4_t v138 = vdivq_f32(v353, v133);
    int32x4_t v139 = vzip1q_s32((int32x4_t)v138, (int32x4_t)v135);
    v140.i64[0] = 0;
    v140.i64[1] = v130.u32[2];
    v141.i32[0] = 0;
    v141.i64[1] = 0;
    v141.i32[1] = v130.i32[1];
    v142.i32[3] = v130.i32[3];
    __n128 v367 = v371;
    float32x4_t v368 = v372;
    float32x4_t v369 = v373;
    float32x4_t v370 = v374;
    do
    {
      *(float32x4_t *)((char *)&v371 + v137) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v130.u32[0], COERCE_FLOAT(*(_OWORD *)((char *)&v367 + v137))), v141, (float32x2_t)v367.n128_u64[v137 / 8], 1), v140, *(float32x4_t *)((char *)&v367 + v137), 2), v142, *(float32x4_t *)((char *)&v367 + v137), 3);
      v137 += 16;
    }
    while (v137 != 64);
    unint64_t v143 = 0;
    float32x4_t v144 = (float32x4_t)vzip1q_s32(v139, v136);
    int32x4_t v145 = vzip2q_s32((int32x4_t)v134, v132);
    int32x4_t v146 = vzip2q_s32((int32x4_t)v138, (int32x4_t)v135);
    float32x4_t v147 = (float32x4_t)vzip1q_s32(v146, v145);
    float32x4_t v148 = (float32x4_t)vzip2q_s32(v139, v136);
    float32x4_t v149 = (float32x4_t)vzip2q_s32(v146, v145);
    __n128 v367 = v371;
    float32x4_t v368 = v372;
    float32x4_t v369 = v373;
    float32x4_t v370 = v374;
    uint64_t v87 = &qword_1E9DDB000;
    do
    {
      *(float32x4_t *)((char *)&v371 + v143) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v144, COERCE_FLOAT(*(_OWORD *)((char *)&v367 + v143))), v148, (float32x2_t)v367.n128_u64[v143 / 8], 1), v147, *(float32x4_t *)((char *)&v367 + v143), 2), v149, *(float32x4_t *)((char *)&v367 + v143), 3);
      v143 += 16;
    }
    while (v143 != 64);
    unint64_t v150 = 0;
    __n128 v367 = v371;
    float32x4_t v368 = v372;
    float32x4_t v369 = v373;
    float32x4_t v370 = v374;
    do
    {
      *(float32x4_t *)((char *)&v371 + v150) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v119, COERCE_FLOAT(*(_OWORD *)((char *)&v367 + v150))), v120, (float32x2_t)v367.n128_u64[v150 / 8], 1), v131, *(float32x4_t *)((char *)&v367 + v150), 2), (float32x4_t)xmmword_1B6E4F3A0, *(float32x4_t *)((char *)&v367 + v150), 3);
      v150 += 16;
    }
    while (v150 != 64);
    __n128 v151 = (__n128)v374;
    float32x4_t v152 = vmulq_n_f32(v138, *(float *)v123.i32);
    float32x4_t v153 = vmulq_lane_f32(v134, (float32x2_t)v123, 1);
    v152.i32[1] = vnegq_f32(v152).i32[1];
    v153.f32[0] = -v153.f32[0];
    v151.n128_u32[1] = vnegq_f32(v374).u32[1];
    v367.n128_u32[2] = 0;
    v367.n128_u64[0] = 0;
    v365.i32[2] = 0;
    v365.i64[0] = 0;
    sub_1B64CC360((float32x4_t *)&v371, &v367, &v365, v152, v153, vmulq_n_f32(v135, *(float *)v125.i32), v151);
    double v155 = 0.0;
    float v156 = 0.0;
    _Q2 = (float32x4_t)v371;
    int8x16_t v158 = (int8x16_t)vmulq_f32(_Q2, _Q2);
    float32x2_t v159 = vadd_f32(*(float32x2_t *)v158.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL));
    v159.f32[0] = vaddv_f32(v159);
    if (v159.f32[0] == 0.0) {
      goto LABEL_55;
    }
    float v160 = v371.n128_f32[3];
    _KR00_8 = *(uint64_t *)((char *)v371.n128_i64 + 4);
    __asm { FMLA            S1, S9, V2.S[3] }
    float v163 = _S1 / v159.f32[0];
    double v164 = (float)(_S1 / v159.f32[0]);
    if (v164 <= 0.4999)
    {
      if (v164 >= -0.4999)
      {
        float v192 = *(float *)&v158.i32[1];
        uint64_t v193 = v158.i64[1];
        float v350 = v371.n128_f32[0];
        float v352 = *(float *)v158.i32;
        float v356 = atan2f((float)((float)(v371.n128_f32[0] * v371.n128_f32[3]) + (float)(v371.n128_f32[1] * v371.n128_f32[2]))+ (float)((float)(v371.n128_f32[0] * v371.n128_f32[3]) + (float)(v371.n128_f32[1] * v371.n128_f32[2])), *(float *)&v158.i32[3]+ (float)(*(float *)&v158.i32[2] + (float)((float)-*(float *)v158.i32 - *(float *)&v158.i32[1])));
        float v354 = asinf(v163 + v163);
        v159.f32[0] = atan2f((float)((float)(*((float *)&_KR00_8 + 1) * v160) + (float)(v350 * *(float *)&_KR00_8))+ (float)((float)(*((float *)&_KR00_8 + 1) * v160) + (float)(v350 * *(float *)&_KR00_8)), *((float *)&v193 + 1) + (float)((float)(v352 - v192) - *(float *)&v193));
        double v155 = COERCE_DOUBLE(__PAIR64__(LODWORD(v354), LODWORD(v356)));
        float v156 = v159.f32[0];
        goto LABEL_55;
      }
      v159.f32[0] = atan2f(v371.n128_f32[0], v371.n128_f32[3]);
      *(float *)&double v155 = v159.f32[0] + v159.f32[0];
      std::string::size_type v165 = &dword_1B6E500B0;
    }
    else
    {
      v159.f32[0] = atan2f(v371.n128_f32[0], v371.n128_f32[3]);
      *(float *)&double v155 = v159.f32[0] + v159.f32[0];
      std::string::size_type v165 = &dword_1B6E500B4;
    }
    HIDWORD(v155) = *v165;
    float v156 = 0.0;
LABEL_55:
    float v194 = v156;
    if (v156 != 0.0)
    {
      int32x4_t v195 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v154, (uint64_t)v95, @"inputs:rotation", qword_1E9DDBB58, qword_1E9DDBC30, *(double *)&v159, v155);
      double v196 = v194 / 3.14159265 * 180.0;
      *(float *)&double v196 = v196;
      objc_msgSend_setFloatValue_(v195, v197, v198, v199, v196);
    }
    double v200 = *(double *)v365.i64;
    if (v365.f32[0] != 0.0 || (LODWORD(v200) = v365.i32[1], v365.f32[1] != 0.0))
    {
      uint64_t v201 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v154, (uint64_t)v95, @"inputs:scale", qword_1E9DDBB60, qword_1E9DDBC30, v200, *(_OWORD *)&v348);
      objc_msgSend_setFloat2Value_(v201, v202, v203, v204, *(double *)v365.i64);
    }
    double v205 = v367.n128_f64[0];
    if (v367.n128_f32[0] != 0.0 || (LODWORD(v205) = v367.n128_u32[1], v367.n128_f32[1] != 0.0))
    {
      uint64_t v206 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v154, (uint64_t)v95, @"inputs:translation", qword_1E9DDBB60, qword_1E9DDBC30, v205, *(_OWORD *)&v348);
      objc_msgSend_setFloat2Value_(v206, v207, v208, v209, v367.n128_f64[0]);
    }
    objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v154, (uint64_t)v95, @"outputs:result", qword_1E9DDBB60, qword_1E9DDBC30, v205, *(_OWORD *)&v348);
    goto LABEL_64;
  }
  uint64_t v84 = v355;
  p_superclass = (__objc2_class **)(VFXState + 8);
  unint64_t v86 = 0x1E4F1C000;
  uint64_t v87 = &qword_1E9DDB000;
LABEL_64:
  uint64_t v210 = objc_msgSend_stringByAppendingString_(*(void **)(a2 + 64), v82, @"_texture", v83, *(_OWORD *)&v348);
  uint64_t v213 = objc_msgSend_stringByAppendingPathComponent_(a4, v211, v210, v212);
  uint64_t v191 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v214, v213, v215);
  uint64_t v217 = objc_msgSend_world_nodeAtPath_type_(p_superclass + 84, v216, *(void *)(v361 + 56), (uint64_t)v191, qword_1E9DDBBF8);
  int32x4_t v219 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v218, v217, @"info:id", v87[376], qword_1E9DDBC30);
  uint64_t v222 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v220, @"UsdUVTexture", v221);
  objc_msgSend_setTokenValue_(v219, v223, v222, v224);
  if (objc_msgSend_isEqualToString_(*(void **)a2, v225, *(void *)a3, v226))
  {
    int32x4_t v228 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v227, v217, @"inputs:scale", qword_1E9DDBB70, qword_1E9DDBC30);
    objc_msgSend_setFloat4Value_(v228, v229, v230, v231, 2.00000048);
    unint64_t v233 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v232, v217, @"inputs:bias", qword_1E9DDBB70, qword_1E9DDBC30);
    __asm { FMOV            V0.4S, #-1.0 }
    objc_msgSend_setFloat4Value_(v233, v235, v236, v237, *(double *)&_Q0);
  }
  uint64_t v238 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v227, v217, @"inputs:file", qword_1E9DDBB28, qword_1E9DDBC30);
  objc_msgSend_setResourcePath_(v238, v239, *(void *)(a2 + 56), v240);
  if (v84)
  {
    uint64_t v242 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v241, v217, @"inputs:st", qword_1E9DDBB60, qword_1E9DDBC30);
    uint64_t v376 = objc_msgSend_pathByAppendingPropertyComponent_(v84, v243, @"outputs:result", v244);
    uint64_t v246 = objc_msgSend_arrayWithObjects_count_(*(void **)(v86 + 2424), v245, (uint64_t)&v376, 1);
    objc_msgSend_setConnectionWithTargetPaths_(v242, v247, v246, v248);
  }
  char v249 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v241, v217, @"inputs:wrapS", v87[376], qword_1E9DDBC30);
  unint64_t v255 = objc_msgSend_wrapS(*(void **)(a2 + 8), v250, v251, v252) - 1;
  if (v255 > 3) {
    uint64_t v256 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v253, @"repeat", v254);
  }
  else {
    uint64_t v256 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v253, (uint64_t)off_1E6144DF8[v255], v254);
  }
  objc_msgSend_setTokenValue_(v249, v257, v256, v258);
  uint64_t v260 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v259, v217, @"inputs:wrapT", v87[376], qword_1E9DDBC30);
  unint64_t v266 = objc_msgSend_wrapT(*(void **)(a2 + 8), v261, v262, v263) - 1;
  if (v266 > 3) {
    uint64_t v267 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v264, @"repeat", v265);
  }
  else {
    uint64_t v267 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v264, (uint64_t)off_1E6144DF8[v266], v265);
  }
  objc_msgSend_setTokenValue_(v260, v268, v267, v269);
  if (objc_msgSend_minificationFilter(*(void **)(a2 + 8), v270, v271, v272))
  {
    uint64_t v276 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v273, v217, @"inputs:minFilter", qword_1E9DDBBC0, qword_1E9DDBC30);
    uint64_t v280 = objc_msgSend_minificationFilter(*(void **)(a2 + 8), v277, v278, v279);
    if (v280 == 1) {
      uint64_t v283 = @"nearest";
    }
    else {
      uint64_t v283 = &stru_1F0FCDBB0;
    }
    if (v280 == 2) {
      uint64_t v284 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v281, @"linear", v282);
    }
    else {
      uint64_t v284 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v281, (uint64_t)v283, v282);
    }
    objc_msgSend_setTokenValue_(v276, v285, v284, v286);
  }
  if (objc_msgSend_magnificationFilter(*(void **)(a2 + 8), v273, v274, v275))
  {
    int32x4_t v289 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v287, v217, @"inputs:magFilter", qword_1E9DDBBC0, qword_1E9DDBC30);
    uint64_t v293 = objc_msgSend_magnificationFilter(*(void **)(a2 + 8), v290, v291, v292);
    if (v293 == 1) {
      uint64_t v296 = @"nearest";
    }
    else {
      uint64_t v296 = &stru_1F0FCDBB0;
    }
    if (v293 == 2) {
      uint64_t v297 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v294, @"linear", v295);
    }
    else {
      uint64_t v297 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v294, (uint64_t)v296, v295);
    }
    objc_msgSend_setTokenValue_(v289, v298, v297, v299);
  }
  if (*(char *)(a2 + 47) >= 0) {
    uint64_t v300 = objc_msgSend_stringWithUTF8String_(NSString, v287, a2 + 24, v288);
  }
  else {
    uint64_t v300 = objc_msgSend_stringWithUTF8String_(NSString, v287, *(void *)(a2 + 24), v288);
  }
  int v304 = (__CFString *)v300;
  uint64_t v305 = *(unsigned __int8 *)(a2 + 47);
  if ((v305 & 0x80u) != 0) {
    uint64_t v305 = *(void *)(a2 + 32);
  }
  if (v305 == 1) {
    uint64_t v306 = &qword_1E9DDBB58;
  }
  else {
    uint64_t v306 = &qword_1E9DDBB68;
  }
  uint64_t v307 = *v306;
  if (objc_msgSend_textureComponents(*(void **)(a2 + 8), v301, v302, v303) == 8)
  {
    uint64_t v311 = qword_1E9DDBB58;
    unint64_t v312 = 0x1E4F1C000;
    uint64_t v313 = objc_msgSend_stringByAppendingString_(@"outputs:", v308, @"r", v310);
  }
  else
  {
    unint64_t v312 = 0x1E4F1C000uLL;
    if (objc_msgSend_textureComponents(*(void **)(a2 + 8), v308, v309, v310) == 4)
    {
      uint64_t v311 = qword_1E9DDBB58;
      uint64_t v313 = objc_msgSend_stringByAppendingString_(@"outputs:", v315, @"g", v317);
    }
    else if (objc_msgSend_textureComponents(*(void **)(a2 + 8), v315, v316, v317) == 2)
    {
      uint64_t v311 = qword_1E9DDBB58;
      uint64_t v313 = objc_msgSend_stringByAppendingString_(@"outputs:", v318, @"b", v320);
    }
    else
    {
      uint64_t v321 = objc_msgSend_textureComponents(*(void **)(a2 + 8), v318, v319, v320);
      if (v321 == 1) {
        unint64_t v324 = @"a";
      }
      else {
        unint64_t v324 = v304;
      }
      if (v321 == 1) {
        uint64_t v311 = qword_1E9DDBB58;
      }
      else {
        uint64_t v311 = v307;
      }
      uint64_t v313 = objc_msgSend_stringByAppendingString_(@"outputs:", v322, (uint64_t)v324, v323);
    }
  }
  uint64_t v325 = v313;
  objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v314, v217, v313, v311, qword_1E9DDBC30);
  uint64_t v328 = objc_msgSend_stringByAppendingString_(@"inputs:", v326, *(void *)a2, v327);
  uint64_t v330 = objc_msgSend_node_propertyWithName_type_role_(p_superclass + 84, v329, v357, v328, v311, *(void *)(a2 + 16));
  uint64_t v375 = objc_msgSend_pathByAppendingPropertyComponent_(v191, v331, v325, v332);
  uint64_t v334 = objc_msgSend_arrayWithObjects_count_(*(void **)(v312 + 2424), v333, (uint64_t)&v375, 1);
  objc_msgSend_setConnectionWithTargetPaths_(v330, v335, v334, v336);
  return v191;
}

uint64_t sub_1B65BDD00(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    unint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

_OWORD *sub_1B65BDD84(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_1B65B8F00((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_1B644FF08(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_1B65BDE18(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_1B63C8620();
  }
  return operator new(80 * a2);
}

uint64_t sub_1B65BDE60(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B65BDE98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 80;
      *(void *)(a1 + 16) = v2 - 80;
      if (*(char *)(v2 - 33) < 0)
      {
        operator delete(*(void **)(v2 - 56));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *sub_1B65BDEF0(std::string *a1, std::string::size_type a2, void *a3, std::string::size_type *a4, std::string *__str, std::string::size_type a6)
{
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__r.__words[0] = (std::string::size_type)@"st";
  a1->__r_.__value_.__r.__words[0] = a2;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)a3;
  a1->__r_.__value_.__r.__words[2] = *a4;
  std::string::operator=(a1 + 1, __str);
  if (objc_msgSend_mappingChannel(a3, v9, v10, v11) >= 1)
  {
    unint64_t v15 = NSNumber;
    uint64_t v16 = objc_msgSend_mappingChannel(a3, v12, v13, v14);
    uint64_t v19 = objc_msgSend_numberWithInteger_(v15, v17, v16, v18);
    uint64_t v23 = objc_msgSend_stringValue(v19, v20, v21, v22);
    a1[2].__r_.__value_.__r.__words[0] = objc_msgSend_stringByAppendingString_(@"st", v24, v23, v25);
  }
  a1[3].__r_.__value_.__r.__words[0] = a6;
  return a1;
}

void sub_1B65BDFA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B65BDFC4(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  *a4 = 1;
  unint64_t v7 = (char *)objc_msgSend_UTF8String(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4);
  sub_1B65B8BB0(v33, v7);
  uint64_t v11 = (char *)objc_msgSend_UTF8String(a3, v8, v9, v10);
  sub_1B65B8BB0(__p, v11);
  unint64_t v12 = sub_1B65B8C60(a1 + 216, v33);
  uint64_t v13 = v12;
  if ((void **)(a1 + 224) == v12)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v29 = (long long *)sub_1B65BE560((char **)&v28, (long long *)__p);
    uint64_t v35 = v33;
    uint64_t v25 = (char **)(sub_1B65BE75C((uint64_t **)(a1 + 216), v33, (uint64_t)&unk_1B6E4FDF8, (long long **)&v35) + 7);
    if (v25 != (char **)&v28) {
      sub_1B65BE8F8((uint64_t)v25, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
    }
    uint64_t v36 = &v28;
    sub_1B65B53E8((void ***)&v36);
    uint64_t v16 = 0;
  }
  else
  {
    unint64_t v15 = v12[7];
    uint64_t v14 = (char *)v12[8];
    if (v14 != v15)
    {
      uint64_t v16 = 0;
      if (v32 >= 0) {
        uint64_t v17 = (void *)HIBYTE(v32);
      }
      else {
        uint64_t v17 = __p[1];
      }
      if (v32 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      if ((unint64_t)((v14 - v15) / 24) <= 1) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = (v14 - v15) / 24;
      }
      do
      {
        uint64_t v20 = &v15[24 * v16];
        uint64_t v21 = v20[23];
        if ((v21 & 0x80u) == 0) {
          uint64_t v22 = (void *)v20[23];
        }
        else {
          uint64_t v22 = (void *)*((void *)v20 + 1);
        }
        if (v22 == v17)
        {
          if ((v21 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v20, v18, *((void *)v20 + 1)))
            {
LABEL_29:
              *a4 = 0;
              goto LABEL_34;
            }
          }
          else
          {
            uint64_t v23 = v18;
            if (!v20[23]) {
              goto LABEL_29;
            }
            while (*v20 == *(unsigned __int8 *)v23)
            {
              ++v20;
              uint64_t v23 = (void **)((char *)v23 + 1);
              if (!--v21) {
                goto LABEL_29;
              }
            }
          }
        }
        ++v16;
      }
      while (v16 != v19);
    }
    if (v14 >= v13[9])
    {
      uint64_t v26 = sub_1B65BE560((char **)v13 + 7, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v32) < 0)
      {
        sub_1B65B9034(v14, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v24 = *(_OWORD *)__p;
        *((void *)v14 + 2) = v32;
        *(_OWORD *)uint64_t v14 = v24;
      }
      uint64_t v26 = v14 + 24;
      v13[8] = v14 + 24;
    }
    v13[8] = v26;
    uint64_t v16 = -1431655765 * ((unint64_t)(v26 - (unsigned char *)v13[7]) >> 3) - 1;
  }
LABEL_34:
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  return v16;
}

void sub_1B65BE23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  *(void *)(v26 + 64) = v27;
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B65BE294(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], a2, a3, a4);
  uint64_t v11 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(v7 + 16), v9, @"textures", v10);
  objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v8, v12, v11, 1, 0, 0);
  unint64_t v15 = objc_msgSend_stringWithFormat_(NSString, v13, @"texgen_%lu", v14, *(void *)(v7 + 184));
  uint64_t v18 = objc_msgSend_stringByAppendingPathExtension_(v15, v16, (uint64_t)a2, v17);
  uint64_t v21 = objc_msgSend_stringByAppendingPathComponent_(@"textures", v19, v18, v20);
  uint64_t v24 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(v7 + 16), v22, (uint64_t)v21, v23);
  unint64_t v34 = objc_msgSend_contents(*(void **)(a1 + 32), v25, v26, v27);
  uint64_t v35 = &v34;
  sub_1B644FE48((uint64_t **)(v7 + 168), &v34, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v35)[5] = (uint64_t)v21;
  uint64_t v31 = (char *)objc_msgSend_UTF8String(v21, v28, v29, v30);
  uint64_t v35 = (unint64_t *)(a1 + 48);
  uint64_t v32 = sub_1B65BEB7C((uint64_t **)(v7 + 192), (unint64_t *)(a1 + 48), (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v35);
  sub_1B65B8E38((std::string *)(v32 + 5), v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(a3 + 16))(a3, v24)) {
    return v21;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B65BE3EC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_writeToFile_atomically_, a2, 1);
}

BOOL sub_1B65BE3FC(uint64_t a1, const __CFString *a2)
{
  CFURLRef v3 = CFURLCreateWithFileSystemPath(0, a2, kCFURLPOSIXPathStyle, 0);
  CFStringRef v7 = (const __CFString *)objc_msgSend_identifier((void *)*MEMORY[0x1E4F44460], v4, v5, v6);
  uint64_t v8 = CGImageDestinationCreateWithURL(v3, v7, 1uLL, 0);
  CFRelease(v3);
  if (v8)
  {
    CGImageDestinationAddImage(v8, *(CGImageRef *)(a1 + 32), 0);
    CGImageDestinationFinalize(v8);
    CFRelease(*(CFTypeRef *)(a1 + 32));
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = *(CGImageDestination **)(a1 + 32);
  }
  CFRelease(v9);
  return v8 != 0;
}

void *sub_1B65BE4A4(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v5 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v2, v3, v4);
      goto LABEL_4;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v11 = objc_msgSend_query(v1, v8, v9, v10);
      if (!objc_msgSend_length(v11, v12, v13, v14))
      {
        uint64_t v1 = objc_msgSend_path(v1, v15, v16, v17);
        uint64_t v5 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v18, v19, v20);
        if (v1)
        {
LABEL_4:
          if (objc_msgSend_fileExistsAtPath_(v5, v6, (uint64_t)v1, v7)) {
            return v1;
          }
        }
      }
    }
    else
    {
      objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], v8, v9, v10);
    }
    return 0;
  }
  return v1;
}

char *sub_1B65BE560(char **a1, long long *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v25 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_1B6428204(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  unint64_t v12 = &v11[24 * v3];
  uint64_t v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  uint64_t v24 = &v11[24 * v10];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B65B9034(v12, *(void **)a2, *((void *)a2 + 1));
    uint64_t v14 = (char *)v23.i64[1];
    unint64_t v12 = (char *)v23.i64[0];
  }
  else
  {
    long long v13 = *a2;
    *((void *)v12 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v12 = v13;
    uint64_t v14 = &v11[24 * v3];
  }
  uint64_t v16 = *a1;
  unint64_t v15 = (unint64_t)a1[1];
  if ((char *)v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      long long v17 = *(_OWORD *)(v15 - 24);
      *((void *)v12 - 1) = *(void *)(v15 - 8);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 24;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 8) = 0;
      *(void *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((char *)v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
  }
  uint64_t v19 = v14 + 24;
  *a1 = v12;
  a1[1] = v14 + 24;
  int64x2_t v23 = v18;
  uint64_t v20 = a1[2];
  a1[2] = v24;
  uint64_t v24 = v20;
  uint64_t v22 = (char *)v18.i64[0];
  sub_1B65BE6CC((uint64_t)&v22);
  return v19;
}

void sub_1B65BE6B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B65BE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65BE6CC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1B65BE704(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *sub_1B65BE75C(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1B65B8F00((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1B65BE808((uint64_t)a1, a4, (uint64_t)v10);
    sub_1B644FF08(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1B65BE8A0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1B65BE808@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_1B65B9034(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B65BE888(_Unwind_Exception *a1)
{
  sub_1B65BE8A0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1B65BE8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1B65B53A0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1B65BE8F8(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  int v8 = a1 + 16;
  long long v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1B65BEA6C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1B657B5C8((void *)a1, v11);
    unint64_t v12 = sub_1B65BEAA8(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_1B65BEB1C(__str, v13, v9);
    unint64_t v12 = sub_1B65BEAA8(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1B65BEB1C(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B65BEA5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B65BEA64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B65BEA6C(uint64_t *a1)
{
  if (*a1)
  {
    sub_1B65B543C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1B65BEAA8(int a1, long long *a2, long long *a3, char *__dst)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1B65B9034(__dst, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *((void *)__dst + 2) = *((void *)v6 + 2);
        *(_OWORD *)long long __dst = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      __dst += 24;
    }
    while (v6 != a3);
  }
  return __dst;
}

std::string *sub_1B65BEB1C(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t *sub_1B65BEB7C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  long long v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    void v11[5] = 0;
    sub_1B644FF08(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

float sub_1B65BEC40(uint64_t a1)
{
  if (!*(void *)(a1 + 72)) {
    return 1.0;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 1.0;
  }
  uint64_t v5 = *(void **)(a1 + 72);

  objc_msgSend_floatValue(v5, v2, v3, v4);
  return result;
}

void sub_1B65BECA8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1B65BECFC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1B65BECFC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 80)
  {
    if (*(char *)(i - 33) < 0) {
      operator delete(*(void **)(i - 56));
    }
  }
  a1[1] = v2;
}

uint64_t sub_1B65BED4C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a3;
  unint64_t v7 = objc_msgSend_length(a3, a2, (uint64_t)a3, a4);
  unint64_t v11 = (void *)sub_1B65B6090(a1, v8, v9, v10);
  if (v7 > objc_msgSend_length(v11, v12, v13, v14))
  {
    int64x2_t v18 = (void *)sub_1B65B6090(a1, v15, v16, v17);
    uint64_t v22 = (void *)sub_1B65B6090(a1, v19, v20, v21);
    uint64_t v26 = objc_msgSend_length(v22, v23, v24, v25);
    uint64_t v29 = objc_msgSend_substringToIndex_(v4, v27, v26, v28);
    if (objc_msgSend_isEqualToString_(v18, v30, v29, v31))
    {
      uint64_t v33 = (void *)sub_1B65B6090(a1, v15, v32, v17);
      uint64_t v37 = objc_msgSend_length(v33, v34, v35, v36);
      uint64_t v4 = objc_msgSend_substringFromIndex_(v4, v38, v37, v39);
    }
  }
  uint64_t v40 = objc_msgSend_stringByAppendingString_(v4, v15, @":", v17);
  size_t v43 = objc_msgSend_stringByAppendingString_(v40, v41, (uint64_t)a2, v42);
  if (objc_msgSend_characterAtIndex_(v43, v44, 0, v45) == 47) {
    size_t v43 = objc_msgSend_substringFromIndex_(v43, v46, 1, v47);
  }

  return objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v43, v46, @"/", @":");
}

unint64_t sub_1B65BEE4C(uint64_t a1, const char *a2, void *a3)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1B65BF9E0(a1, a2, a3, v6);
  }
  objc_opt_class();
  unint64_t result = objc_opt_isKindOfClass();
  if ((result & 1) == 0) {
    return result;
  }
  unint64_t v11 = objc_msgSend_keyTimes(a3, v8, v9, v10);
  unint64_t result = objc_msgSend_count(v11, v12, v13, v14);
  if (!result) {
    return result;
  }
  uint64_t v18 = objc_msgSend_count(v11, v15, v16, v17);
  uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(v11, v19, v18 - 1, v20);
  objc_msgSend_doubleValue(v21, v22, v23, v24);
  double v26 = v25;
  uint64_t v29 = objc_msgSend_objectAtIndexedSubscript_(v11, v27, 0, v28);
  unint64_t result = objc_msgSend_doubleValue(v29, v30, v31, v32);
  double v37 = v26 - v36;
  if (v26 - v36 < 0.0001) {
    return result;
  }
  objc_msgSend_duration(a3, v33, v34, v35);
  double v39 = v38;
  size_t v43 = objc_msgSend_keyPath(a3, v40, v41, v42);
  uint64_t v46 = objc_msgSend_componentsSeparatedByString_(v43, v44, @".", v45);
  uint64_t v50 = objc_msgSend_count(v46, v47, v48, v49) - 1;
  uint64_t v53 = objc_msgSend_objectAtIndex_(v46, v51, v50, v52);
  if ((unint64_t)objc_msgSend_count(v46, v54, v55, v56) < 2)
  {
    uint64_t v60 = 0;
    goto LABEL_21;
  }
  if (objc_msgSend_isEqualToString_(v53, v57, @"x", v58))
  {
    uint64_t v60 = @"X";
  }
  else if (objc_msgSend_isEqualToString_(v53, v57, @"y", v58))
  {
    uint64_t v60 = @"Y";
  }
  else if (objc_msgSend_isEqualToString_(v53, v57, @"z", v58))
  {
    uint64_t v60 = @"Z";
  }
  else
  {
    if (!objc_msgSend_isEqualToString_(v53, v57, @"w", v58))
    {
      uint64_t v60 = 0;
      if (!v50) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
    uint64_t v60 = @"W";
  }
  uint64_t v50 = objc_msgSend_count(v46, v57, v59, v58) - 2;
  uint64_t v53 = objc_msgSend_objectAtIndex_(v46, v61, v50, v62);
  if (!v50) {
    goto LABEL_21;
  }
LABEL_19:
  if (objc_msgSend_isEqualToString_(v53, v57, @"euler", v58))
  {
    double v63 = objc_msgSend_objectAtIndex_(v46, v57, v50 - 1, v58);
    int v66 = objc_msgSend_stringByAppendingString_(v63, v64, @".", v65);
    uint64_t v53 = objc_msgSend_stringByAppendingString_(v66, v67, (uint64_t)v53, v68);
  }
LABEL_21:
  double v69 = v39 / v37;
  if (objc_msgSend_isEqualToString_(v53, v57, @"transform", v58))
  {
    if (objc_msgSend_count(v11, v70, v71, v72))
    {
      unint64_t v75 = 0;
      do
      {
        uint64_t v76 = objc_msgSend_objectAtIndexedSubscript_(v11, v73, v75, v74);
        objc_msgSend_doubleValue(v76, v77, v78, v79);
        double v81 = v80;
        objc_msgSend_beginTime(a3, v82, v83, v84);
        double v86 = v85 + v81 * v69;
        uint64_t v90 = objc_msgSend_values(a3, v87, v88, v89);
        uint64_t v93 = objc_msgSend_objectAtIndexedSubscript_(v90, v91, v75, v92);
        objc_msgSend_VFXMatrix4Value(v93, v94, v95, v96);
        float64x2_t v378 = vcvtq_f64_f32(*(float32x2_t *)v98.f32);
        float64x2_t v380 = vcvtq_f64_f32(*(float32x2_t *)v97.f32);
        float64x2_t v375 = vcvtq_f64_f32(*(float32x2_t *)v99.f32);
        float64x2_t v376 = vcvt_hight_f64_f32(v97);
        float64x2_t v373 = vcvt_hight_f64_f32(v99);
        float64x2_t v374 = vcvt_hight_f64_f32(v98);
        float64x2_t v371 = vcvt_hight_f64_f32(v100);
        float64x2_t v372 = vcvtq_f64_f32(*(float32x2_t *)v100.f32);
        unint64_t v102 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v101, (uint64_t)a2, @"xformOp:transform", qword_1E9DDBB48, qword_1E9DDBC30);
        v385[0] = v380;
        v385[1] = v376;
        v385[2] = v378;
        v385[3] = v374;
        v385[4] = v375;
        v385[5] = v373;
        v385[6] = v372;
        v385[7] = v371;
        double v105 = v86 / *(double *)(a1 + 504) + 0.0;
        double v106 = (double)(int)v105;
        if (vabdd_f64(v105, v106) >= 0.001)
        {
          if (1.0 - (v105 - v106) < 0.001) {
            double v105 = v106 + 1.0;
          }
          objc_msgSend_setDouble4x4Value_atTime_(v102, v103, (uint64_t)v385, v104, v105);
        }
        else
        {
          objc_msgSend_setDouble4x4Value_atTime_(v102, v103, (uint64_t)v385, v104, (double)(int)v105);
        }
        ++v75;
      }
      while (v75 < objc_msgSend_count(v11, v107, v108, v109));
    }
    return objc_msgSend_addObject_(*(void **)(a1 + 88), v73, @"xformOp:transform", v74);
  }
  if (objc_msgSend_isEqualToString_(v53, v70, @"position", v72))
  {
    if (!v60)
    {
      if (objc_msgSend_count(v11, v110, v111, v112))
      {
        unint64_t v191 = 0;
        do
        {
          float v192 = objc_msgSend_objectAtIndexedSubscript_(v11, v117, v191, v118);
          objc_msgSend_doubleValue(v192, v193, v194, v195);
          double v197 = v196;
          objc_msgSend_beginTime(a3, v198, v199, v200);
          double v202 = v201 + v197 * v69;
          uint64_t v206 = objc_msgSend_values(a3, v203, v204, v205);
          uint64_t v209 = objc_msgSend_objectAtIndexedSubscript_(v206, v207, v191, v208);
          objc_msgSend_VFXFloat3Value(v209, v210, v211, v212);
          double v382 = v213;
          uint64_t v215 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v214, (uint64_t)a2, @"xformOp:translate", qword_1E9DDBB68, qword_1E9DDBC30);
          double v219 = v202 / *(double *)(a1 + 504) + 0.0;
          double v220 = (double)(int)v219;
          if (vabdd_f64(v219, v220) >= 0.001)
          {
            if (1.0 - (v219 - v220) < 0.001) {
              double v219 = v220 + 1.0;
            }
            objc_msgSend_setFloat3Value_atTime_(v215, v216, v217, v218, v382, v219);
          }
          else
          {
            objc_msgSend_setFloat3Value_atTime_(v215, v216, v217, v218, v382, (double)(int)v219);
          }
          ++v191;
        }
        while (v191 < objc_msgSend_count(v11, v221, v222, v223));
      }
      float32x4_t v153 = *(void **)(a1 + 88);
      uint64_t v154 = @"xformOp:translate";
      goto LABEL_62;
    }
    uint64_t v113 = objc_msgSend_stringByAppendingString_(@"xformOp:translate", v110, (uint64_t)v60, v112);
    if (objc_msgSend_count(v11, v114, v115, v116))
    {
      unint64_t v119 = 0;
      do
      {
        float32x4_t v120 = objc_msgSend_objectAtIndexedSubscript_(v11, v117, v119, v118);
        objc_msgSend_doubleValue(v120, v121, v122, v123);
        double v125 = v124;
        objc_msgSend_beginTime(a3, v126, v127, v128);
        double v130 = v129 + v125 * v69;
        float32x4_t v134 = objc_msgSend_values(a3, v131, v132, v133);
        unint64_t v137 = objc_msgSend_objectAtIndexedSubscript_(v134, v135, v119, v136);
        objc_msgSend_floatValue(v137, v138, v139, v140);
        int v142 = v141;
        float32x4_t v144 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v143, (uint64_t)a2, v113, qword_1E9DDBB58, qword_1E9DDBC30);
        double v148 = v130 / *(double *)(a1 + 504) + 0.0;
        double v149 = (double)(int)v148;
        if (vabdd_f64(v148, v149) >= 0.001)
        {
          if (1.0 - (v148 - v149) < 0.001) {
            double v148 = v149 + 1.0;
          }
        }
        else
        {
          double v148 = (double)(int)v148;
        }
        LODWORD(v149) = v142;
        objc_msgSend_setFloatValue_atTime_(v144, v145, v146, v147, v149, v148);
        ++v119;
      }
      while (v119 < objc_msgSend_count(v11, v150, v151, v152));
    }
  }
  else
  {
    if ((objc_msgSend_isEqualToString_(v53, v110, @"orientation", v112) & 1) != 0
      || objc_msgSend_isEqualToString_(v53, v155, @"quaternion", v157))
    {
      if (objc_msgSend_count(v11, v155, v156, v157))
      {
        unint64_t v158 = 0;
        do
        {
          float32x2_t v159 = objc_msgSend_objectAtIndexedSubscript_(v11, v117, v158, v118);
          objc_msgSend_doubleValue(v159, v160, v161, v162);
          double v164 = v163;
          objc_msgSend_beginTime(a3, v165, v166, v167);
          double v169 = v168 + v164 * v69;
          uint64_t v173 = objc_msgSend_values(a3, v170, v171, v172);
          int v176 = objc_msgSend_objectAtIndexedSubscript_(v173, v174, v158, v175);
          objc_msgSend_VFXFloat4Value(v176, v177, v178, v179);
          double v381 = v180;
          double v182 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v181, (uint64_t)a2, @"xformOp:orient", qword_1E9DDBBA8, qword_1E9DDBC30);
          double v186 = v169 / *(double *)(a1 + 504) + 0.0;
          double v187 = (double)(int)v186;
          if (vabdd_f64(v186, v187) >= 0.001)
          {
            if (1.0 - (v186 - v187) < 0.001) {
              double v186 = v187 + 1.0;
            }
            objc_msgSend_setQuatfValue_atTime_(v182, v183, v184, v185, v381, v186);
          }
          else
          {
            objc_msgSend_setQuatfValue_atTime_(v182, v183, v184, v185, v381, (double)(int)v186);
          }
          ++v158;
        }
        while (v158 < objc_msgSend_count(v11, v188, v189, v190));
      }
      float32x4_t v153 = *(void **)(a1 + 88);
      uint64_t v154 = @"xformOp:orient";
      goto LABEL_62;
    }
    if ((objc_msgSend_isEqualToString_(v53, v155, @"eulerAngles", v157) & 1) != 0
      || objc_msgSend_isEqualToString_(v53, v224, @"rotation.euler", v226))
    {
      if (!v60)
      {
        if (objc_msgSend_count(v11, v224, v225, v226))
        {
          unint64_t v265 = 0;
          float64x2_t v377 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
          float64x2_t v379 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
          do
          {
            unint64_t v266 = objc_msgSend_objectAtIndexedSubscript_(v11, v117, v265, v118);
            objc_msgSend_doubleValue(v266, v267, v268, v269);
            double v271 = v270;
            objc_msgSend_beginTime(a3, v272, v273, v274);
            double v276 = v275 + v271 * v69;
            uint64_t v280 = objc_msgSend_values(a3, v277, v278, v279);
            uint64_t v283 = objc_msgSend_objectAtIndexedSubscript_(v280, v281, v265, v282);
            objc_msgSend_VFXFloat3Value(v283, v284, v285, v286);
            float32x2_t v383 = v287;
            int32x4_t v289 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v288, (uint64_t)a2, @"xformOp:rotateXYZ", qword_1E9DDBB68, qword_1E9DDBC30);
            double v293 = v276 / *(double *)(a1 + 504) + 0.0;
            double v294 = (double)(int)v293;
            if (vabdd_f64(v293, v294) >= 0.001)
            {
              if (1.0 - (v293 - v294) < 0.001) {
                double v293 = v294 + 1.0;
              }
            }
            else
            {
              double v293 = (double)(int)v293;
            }
            objc_msgSend_setFloat3Value_atTime_(v289, v290, v291, v292, COERCE_DOUBLE(vcvt_f32_f64(vmulq_f64(vdivq_f64(vcvtq_f64_f32(v383), v379), v377))), v293);
            ++v265;
          }
          while (v265 < objc_msgSend_count(v11, v295, v296, v297));
        }
        float32x4_t v153 = *(void **)(a1 + 88);
        uint64_t v154 = @"xformOp:rotateXYZ";
        goto LABEL_62;
      }
      uint64_t v113 = objc_msgSend_stringByAppendingString_(@"xformOp:rotate", v224, (uint64_t)v60, v226);
      if (objc_msgSend_count(v11, v227, v228, v229))
      {
        unint64_t v230 = 0;
        do
        {
          uint64_t v231 = objc_msgSend_objectAtIndexedSubscript_(v11, v117, v230, v118);
          objc_msgSend_doubleValue(v231, v232, v233, v234);
          double v236 = v235;
          objc_msgSend_beginTime(a3, v237, v238, v239);
          double v241 = v240 + v236 * v69;
          uint64_t v245 = objc_msgSend_values(a3, v242, v243, v244);
          uint64_t v248 = objc_msgSend_objectAtIndexedSubscript_(v245, v246, v230, v247);
          objc_msgSend_floatValue(v248, v249, v250, v251);
          float v253 = v252;
          unint64_t v255 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v254, (uint64_t)a2, v113, qword_1E9DDBB58, qword_1E9DDBC30);
          double v259 = v241 / *(double *)(a1 + 504) + 0.0;
          double v260 = (double)(int)v259;
          if (vabdd_f64(v259, v260) >= 0.001)
          {
            if (1.0 - (v259 - v260) < 0.001) {
              double v259 = v260 + 1.0;
            }
          }
          else
          {
            double v259 = (double)(int)v259;
          }
          double v261 = v253 / 3.14159265 * 180.0;
          *(float *)&double v261 = v261;
          objc_msgSend_setFloatValue_atTime_(v255, v256, v257, v258, v261, v259);
          ++v230;
        }
        while (v230 < objc_msgSend_count(v11, v262, v263, v264));
      }
    }
    else
    {
      unint64_t result = objc_msgSend_isEqualToString_(v53, v224, @"scale", v226);
      if (!result) {
        return result;
      }
      if (!v60)
      {
        if (objc_msgSend_count(v11, v298, v299, v300))
        {
          unint64_t v338 = 0;
          do
          {
            uint64_t v339 = objc_msgSend_objectAtIndexedSubscript_(v11, v117, v338, v118);
            objc_msgSend_doubleValue(v339, v340, v341, v342);
            double v344 = v343;
            objc_msgSend_beginTime(a3, v345, v346, v347);
            double v349 = v348 + v344 * v69;
            float32x4_t v353 = objc_msgSend_values(a3, v350, v351, v352);
            float v356 = objc_msgSend_objectAtIndexedSubscript_(v353, v354, v338, v355);
            objc_msgSend_VFXFloat3Value(v356, v357, v358, v359);
            double v384 = v360;
            float v362 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v361, (uint64_t)a2, @"xformOp:scale", qword_1E9DDBB68, qword_1E9DDBC30);
            double v366 = v349 / *(double *)(a1 + 504) + 0.0;
            double v367 = (double)(int)v366;
            if (vabdd_f64(v366, v367) >= 0.001)
            {
              if (1.0 - (v366 - v367) < 0.001) {
                double v366 = v367 + 1.0;
              }
              objc_msgSend_setFloat3Value_atTime_(v362, v363, v364, v365, v384, v366);
            }
            else
            {
              objc_msgSend_setFloat3Value_atTime_(v362, v363, v364, v365, v384, (double)(int)v366);
            }
            ++v338;
          }
          while (v338 < objc_msgSend_count(v11, v368, v369, v370));
        }
        float32x4_t v153 = *(void **)(a1 + 88);
        uint64_t v154 = @"xformOp:scale";
        goto LABEL_62;
      }
      uint64_t v113 = objc_msgSend_stringByAppendingString_(@"xformOp:scale", v298, (uint64_t)v60, v300);
      if (objc_msgSend_count(v11, v301, v302, v303))
      {
        unint64_t v304 = 0;
        do
        {
          uint64_t v305 = objc_msgSend_objectAtIndexedSubscript_(v11, v117, v304, v118);
          objc_msgSend_doubleValue(v305, v306, v307, v308);
          double v310 = v309;
          objc_msgSend_beginTime(a3, v311, v312, v313);
          double v315 = v314 + v310 * v69;
          uint64_t v319 = objc_msgSend_values(a3, v316, v317, v318);
          uint64_t v322 = objc_msgSend_objectAtIndexedSubscript_(v319, v320, v304, v321);
          objc_msgSend_floatValue(v322, v323, v324, v325);
          int v327 = v326;
          uint64_t v329 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v328, (uint64_t)a2, v113, qword_1E9DDBB58, qword_1E9DDBC30);
          double v333 = v315 / *(double *)(a1 + 504) + 0.0;
          double v334 = (double)(int)v333;
          if (vabdd_f64(v333, v334) >= 0.001)
          {
            if (1.0 - (v333 - v334) < 0.001) {
              double v333 = v334 + 1.0;
            }
          }
          else
          {
            double v333 = (double)(int)v333;
          }
          LODWORD(v334) = v327;
          objc_msgSend_setFloatValue_atTime_(v329, v330, v331, v332, v334, v333);
          ++v304;
        }
        while (v304 < objc_msgSend_count(v11, v335, v336, v337));
      }
    }
  }
  float32x4_t v153 = *(void **)(a1 + 88);
  uint64_t v154 = (__CFString *)v113;
LABEL_62:

  return objc_msgSend_addObject_(v153, v117, (uint64_t)v154, v118);
}

unint64_t sub_1B65BF9E0(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  unint64_t v7 = objc_msgSend_animations(a3, a2, (uint64_t)a3, a4);
  unint64_t result = objc_msgSend_count(v7, v8, v9, v10);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v16 = objc_msgSend_animations(a3, v12, v13, v14);
      uint64_t v19 = objc_msgSend_objectAtIndex_(v16, v17, i, v18);
      sub_1B65BEE4C(a1, a2, v19);
      uint64_t v23 = objc_msgSend_animations(a3, v20, v21, v22);
      unint64_t result = objc_msgSend_count(v23, v24, v25, v26);
    }
  }
  return result;
}

uint64_t sub_1B65BFA5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v88 = a2;
  uint64_t v6 = *(void **)(a1 + 424);
  if (v6)
  {
    uint64_t v7 = a1 + 424;
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= (unint64_t)a2;
      if (v8 >= (unint64_t)a2) {
        uint64_t v10 = v6;
      }
      else {
        uint64_t v10 = v6 + 1;
      }
      if (v9) {
        uint64_t v7 = (uint64_t)v6;
      }
      uint64_t v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 != a1 + 424 && *(void *)(v7 + 32) <= (unint64_t)a2)
    {
      if (objc_msgSend_animationKeys(a2, (const char *)a2, a3, a4))
      {
        unint64_t v11 = objc_msgSend_animationKeys(v4, (const char *)a2, a3, a4);
        if (objc_msgSend_count(v11, v12, v13, v14))
        {
          uint64_t v15 = objc_msgSend_animationKeys(v4, (const char *)a2, a3, a4);
          uint64_t v18 = objc_msgSend_objectAtIndexedSubscript_(v15, v16, 0, v17);
          uint64_t v22 = (void *)sub_1B65BFE60(a1, v19, v20, v21);
          uint64_t v24 = sub_1B65B50F8(v18, v23);
          uint64_t v27 = objc_msgSend_stringByAppendingPathComponent_(v22, v25, v24, v26);
          uint64_t v30 = (const char *)objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v28, v27, v29);
          uint64_t v32 = (const char *)objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v31, *(void *)(a1 + 56), (uint64_t)v30, qword_1E9DDBC00);
          double v85 = &v88;
          uint64_t v33 = sub_1B644FE48((uint64_t **)(a1 + 416), (unint64_t *)&v88, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v85);
          sub_1B65BFECC(v33[5], v30, (uint64_t)v32);
          double v37 = objc_msgSend_animationKeys(v88, v34, v35, v36);
          unint64_t v41 = objc_msgSend_count(v37, v38, v39, v40);
          double v85 = 0;
          double v86 = 0;
          uint64_t v87 = 0;
          memset(v84, 0, sizeof(v84));
          sub_1B65BFF3C(v84, v41);
          if (v41)
          {
            for (uint64_t i = 0; i != v41; ++i)
            {
              uint64_t v46 = objc_msgSend_animationKeys(v88, v42, v43, v44);
              uint64_t v49 = objc_msgSend_objectAtIndexedSubscript_(v46, v47, i, v48);
              uint64_t v52 = objc_msgSend_animationPlayerForKey_(v88, v50, v49, v51);
              if (v52)
              {
                uint64_t v53 = objc_msgSend_animation(v52, v42, v43, v44);
                uint64_t v57 = objc_msgSend_caAnimation(v53, v54, v55, v56);
                sub_1B65BFFE4(a1, v32, v57, &v85, v84);
              }
            }
          }
          uint64_t v58 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v42, (uint64_t)v32, @"blendShapeWeights", qword_1E9DDBB88, qword_1E9DDBC30);
          std::string __p = 0;
          uint64_t v82 = 0;
          uint64_t v83 = 0;
          sub_1B642860C((uint64_t)&__p, v41);
          uint64_t v60 = (double *)v85;
          if (v86 != v85)
          {
            unint64_t v61 = 0;
            do
            {
              double v62 = v60[v61];
              double v63 = __p;
              if (v41)
              {
                double v64 = (uint64_t *)v84[0];
                uint64_t v65 = __p;
                unint64_t v66 = v41;
                do
                {
                  uint64_t v67 = *v64;
                  v64 += 3;
                  *v65++ = *(_DWORD *)(v67 + 4 * v61);
                  --v66;
                }
                while (v66);
              }
              double v68 = v62 / *(double *)(a1 + 504) + 0.0;
              double v69 = (double)(int)v68;
              if (vabdd_f64(v68, v69) >= 0.001)
              {
                if (1.0 - (v68 - v69) < 0.001) {
                  double v68 = v69 + 1.0;
                }
                objc_msgSend_setFloatArray_count_atTime_(v58, v59, (uint64_t)v63, (v82 - v63) >> 2, v68);
              }
              else
              {
                objc_msgSend_setFloatArray_count_atTime_(v58, v59, (uint64_t)v63, (v82 - v63) >> 2, (double)(int)v68);
              }
              ++v61;
              uint64_t v60 = (double *)v85;
            }
            while (v61 < (v86 - (unsigned char *)v85) >> 3);
          }
          if (__p)
          {
            uint64_t v82 = __p;
            operator delete(__p);
          }
          std::string __p = v84;
          sub_1B639030C((void ***)&__p);
          if (v85)
          {
            double v86 = v85;
            operator delete(v85);
          }
          uint64_t v4 = v88;
        }
      }
    }
  }
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  uint64_t v70 = objc_msgSend_childNodes(v4, (const char *)a2, a3, a4, 0);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v70, v71, (uint64_t)&v77, (uint64_t)v89, 16);
  uint64_t v73 = result;
  if (result)
  {
    uint64_t v74 = *(void *)v78;
    do
    {
      uint64_t v75 = 0;
      do
      {
        if (*(void *)v78 != v74) {
          objc_enumerationMutation(v70);
        }
        sub_1B65BFA5C(a1, *(void *)(*((void *)&v77 + 1) + 8 * v75++));
      }
      while (v73 != v75);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v70, v76, (uint64_t)&v77, (uint64_t)v89, 16);
      uint64_t v73 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B65BFE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  std::string __p = &a21;
  sub_1B639030C((void ***)&__p);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B65BFE60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    uint64_t v6 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 24), a2, @"Animations", a4);
    *(void *)(a1 + 48) = v6;
    uint64_t v9 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v7, v6, v8);
    objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v10, *(void *)(a1 + 56), v9, qword_1E9DDBBF0);
    return *(void *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1B65BFECC(uint64_t result, const char *a2, uint64_t a3)
{
  if (!*(void *)(result + 16))
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 8);
    if (v5)
    {
      uint64_t v7 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, v5, @"skel:animationSource", qword_1E9DDBB98, qword_1E9DDBC30);
      uint64_t result = objc_msgSend_setObjectPath_(v7, v8, (uint64_t)a2, v9);
      *(void *)(v4 + 16) = a3;
    }
  }
  return result;
}

void sub_1B65BFF3C(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1B65C022C(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

unint64_t sub_1B65BFFE4(uint64_t a1, const char *a2, void *a3, void *a4, void *a5)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1B65C0390(a1, a2, a3, (uint64_t)a4, (uint64_t)a5);
  }
  else
  {
    objc_opt_class();
    unint64_t result = objc_opt_isKindOfClass();
    if (result)
    {
      uint64_t v14 = objc_msgSend_keyTimes(a3, v11, v12, v13);
      unint64_t result = objc_msgSend_count(v14, v15, v16, v17);
      if (result)
      {
        uint64_t v21 = objc_msgSend_count(v14, v18, v19, v20);
        uint64_t v24 = objc_msgSend_objectAtIndexedSubscript_(v14, v22, v21 - 1, v23);
        objc_msgSend_doubleValue(v24, v25, v26, v27);
        double v29 = v28;
        uint64_t v32 = objc_msgSend_objectAtIndexedSubscript_(v14, v30, 0, v31);
        unint64_t result = objc_msgSend_doubleValue(v32, v33, v34, v35);
        double v40 = v29 - v39;
        if (v29 - v39 >= 0.0001)
        {
          objc_msgSend_duration(a3, v36, v37, v38);
          double v42 = v41;
          uint64_t v46 = objc_msgSend_keyPath(a3, v43, v44, v45);
          uint64_t v49 = objc_msgSend_componentsSeparatedByString_(v46, v47, @".", v48);
          uint64_t v53 = objc_msgSend_count(v49, v50, v51, v52);
          uint64_t v56 = objc_msgSend_objectAtIndex_(v49, v54, v53 - 1, v55);
          unint64_t result = objc_msgSend_length(v56, v57, v58, v59);
          if (result >= 9)
          {
            double v62 = objc_msgSend_substringToIndex_(v56, v60, 7, v61);
            unint64_t result = objc_msgSend_isEqualToString_(v62, v63, @"weights", v64);
            if (result)
            {
              uint64_t v67 = objc_msgSend_substringFromIndex_(v56, v65, 8, v66);
              int v71 = objc_msgSend_intValue(v67, v68, v69, v70);
              unint64_t v75 = objc_msgSend_count(v14, v72, v73, v74);
              sub_1B65C0424((uint64_t)a4, v75);
              uint64_t v76 = *a5 + 24 * v71;
              unint64_t v80 = objc_msgSend_count(v14, v77, v78, v79);
              sub_1B642860C(v76, v80);
              uint64_t v84 = objc_msgSend_values(a3, v81, v82, v83);
              unint64_t result = objc_msgSend_count(v14, v85, v86, v87);
              if (result)
              {
                unint64_t v90 = 0;
                uint64_t v91 = 24 * v71;
                double v92 = v42 / v40;
                do
                {
                  uint64_t v93 = objc_msgSend_objectAtIndexedSubscript_(v14, v88, v90, v89);
                  objc_msgSend_doubleValue(v93, v94, v95, v96);
                  double v98 = v97;
                  objc_msgSend_beginTime(a3, v99, v100, v101);
                  *(double *)(*a4 + 8 * v90) = v102 + v98 * v92;
                  double v105 = objc_msgSend_objectAtIndexedSubscript_(v84, v103, v90, v104);
                  objc_msgSend_floatValue(v105, v106, v107, v108);
                  *(_DWORD *)(*(void *)(*a5 + v91) + 4 * v90++) = v109;
                  unint64_t result = objc_msgSend_count(v14, v110, v111, v112);
                }
                while (v90 < result);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B65C022C(void *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_1B6428204(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_1B6428194(a1, &v15);
    sub_1B642824C((uint64_t)&v15);
  }
}

void sub_1B65C037C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B642824C((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B65C0390(uint64_t a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = objc_msgSend_animations(a3, a2, (uint64_t)a3, a4);
  unint64_t result = objc_msgSend_count(v10, v11, v12, v13);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v19 = objc_msgSend_animations(a3, v15, v16, v17);
      uint64_t v22 = objc_msgSend_objectAtIndex_(v19, v20, i, v21);
      sub_1B65BFFE4(a1, a2, v22, a4, a5);
      uint64_t v26 = objc_msgSend_animations(a3, v23, v24, v25);
      unint64_t result = objc_msgSend_count(v26, v27, v28, v29);
    }
  }
  return result;
}

void sub_1B65C0424(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1B65C0454((char **)a1, a2 - v2);
  }
}

void sub_1B65C0454(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)sub_1B64285D4(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_1B65C056C(uint64_t a1, void *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = objc_msgSend_skinner(a2, (const char *)a2, (uint64_t)a3, a4);
    unint64_t v13 = objc_msgSend_boneWeights(v9, v10, v11, v12);
    uint64_t v17 = objc_msgSend_data(v13, v14, v15, v16);
    uint64_t v21 = objc_msgSend_bytes(v17, v18, v19, v20);
    uint64_t v25 = objc_msgSend_boneWeights(v9, v22, v23, v24);
    uint64_t v29 = objc_msgSend_dataOffset(v25, v26, v27, v28);
    uint64_t v33 = objc_msgSend_boneIndices(v9, v30, v31, v32);
    uint64_t v37 = objc_msgSend_data(v33, v34, v35, v36);
    uint64_t v41 = objc_msgSend_bytes(v37, v38, v39, v40);
    uint64_t v45 = objc_msgSend_boneIndices(v9, v42, v43, v44);
    uint64_t v49 = objc_msgSend_dataOffset(v45, v46, v47, v48);
    if (v21 && v41)
    {
      uint64_t v53 = v41 + v49;
      uint64_t v54 = v21 + v29;
      uint64_t v55 = objc_msgSend_boneWeights(v9, v50, v51, v52);
      uint64_t v59 = objc_msgSend_vectorCount(v55, v56, v57, v58);
      double v63 = objc_msgSend_boneWeights(v9, v60, v61, v62);
      uint64_t v67 = objc_msgSend_componentsPerVector(v63, v64, v65, v66) * v59;
      int v71 = objc_msgSend_boneWeights(v9, v68, v69, v70);
      uint64_t v75 = objc_msgSend_componentsPerVector(v71, v72, v73, v74);
      uint64_t v79 = objc_msgSend_boneIndices(v9, v76, v77, v78);
      uint64_t v83 = objc_msgSend_vectorCount(v79, v80, v81, v82);
      uint64_t v87 = objc_msgSend_boneIndices(v9, v84, v85, v86);
      unint64_t v91 = objc_msgSend_componentsPerVector(v87, v88, v89, v90) * v83;
      uint64_t v95 = objc_msgSend_boneIndices(v9, v92, v93, v94);
      unsigned int v99 = objc_msgSend_componentsPerVector(v95, v96, v97, v98);
      uint64_t v103 = objc_msgSend_boneIndices(v9, v100, v101, v102);
      int v107 = objc_msgSend_bytesPerComponent(v103, v104, v105, v106);
      objc_msgSend_baseMeshBindTransform(v9, v108, v109, v110);
      float64x2_t v130 = vcvtq_f64_f32(*(float32x2_t *)v111.f32);
      float64x2_t v131 = vcvt_hight_f64_f32(v111);
      float64x2_t v132 = vcvtq_f64_f32(*(float32x2_t *)v112.f32);
      float64x2_t v133 = vcvt_hight_f64_f32(v112);
      float64x2_t v134 = vcvtq_f64_f32(*(float32x2_t *)v113.f32);
      float64x2_t v135 = vcvt_hight_f64_f32(v113);
      float64x2_t v136 = vcvtq_f64_f32(*(float32x2_t *)v114.f32);
      float64x2_t v137 = vcvt_hight_f64_f32(v114);
      sub_1B65C14F8(a5, a3, v54, v67, v75, v53, v91, v99, v107, &v130);
      return;
    }
    uint64_t v121 = objc_msgSend_skeleton(v9, v50, v51, v52);
    if (v121) {
      double v125 = (const char *)v121;
    }
    else {
      double v125 = (const char *)a2;
    }
    objc_msgSend_baseMeshBindTransform(v9, v122, v123, v124);
    float64x2_t v130 = vcvtq_f64_f32(*(float32x2_t *)v126.f32);
    float64x2_t v131 = vcvt_hight_f64_f32(v126);
    float64x2_t v132 = vcvtq_f64_f32(*(float32x2_t *)v127.f32);
    float64x2_t v133 = vcvt_hight_f64_f32(v127);
    float64x2_t v134 = vcvtq_f64_f32(*(float32x2_t *)v128.f32);
    float64x2_t v135 = vcvt_hight_f64_f32(v128);
    float64x2_t v136 = vcvtq_f64_f32(*(float32x2_t *)v129.f32);
    float64x2_t v137 = vcvt_hight_f64_f32(v129);
    unint64_t v119 = (void *)a4;
    float32x4_t v120 = v125;
  }
  else
  {
    if (!a4) {
      return;
    }
    objc_msgSend_worldTransform(a2, (const char *)a2, (uint64_t)a3, a4);
    float64x2_t v130 = vcvtq_f64_f32(*(float32x2_t *)v115.f32);
    float64x2_t v131 = vcvt_hight_f64_f32(v115);
    float64x2_t v132 = vcvtq_f64_f32(*(float32x2_t *)v116.f32);
    float64x2_t v133 = vcvt_hight_f64_f32(v116);
    float64x2_t v134 = vcvtq_f64_f32(*(float32x2_t *)v117.f32);
    float64x2_t v135 = vcvt_hight_f64_f32(v117);
    float64x2_t v136 = vcvtq_f64_f32(*(float32x2_t *)v118.f32);
    float64x2_t v137 = vcvt_hight_f64_f32(v118);
    unint64_t v119 = (void *)a4;
    float32x4_t v120 = (const char *)a2;
  }
  sub_1B65C132C(v119, v120, a3, &v130);
}

char *sub_1B65C07A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  unint64_t result = (char *)sub_1B65B6A78(a2, (const char *)a2, a3, a4);
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  unint64_t v10 = objc_msgSend_animationKeys(result, v6, v7, v8);
  unint64_t result = (char *)objc_msgSend_count(v10, v11, v12, v13);
  if (!result) {
    return result;
  }
  uint64_t v254 = v9;
  uint64_t v16 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v253 = _Q0;
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v261 = _Q0;
  uint64_t v251 = v4;
  float v252 = v10;
  while (2)
  {
    uint64_t v255 = v16;
    uint64_t v23 = objc_msgSend_objectAtIndex_(v10, v14, v16, v15);
    uint64_t v26 = objc_msgSend_animationPlayerForKey_(v254, v24, (uint64_t)v23, v25);
    uint64_t v30 = objc_msgSend_animation(v26, v27, v28, v29);
    long long v275 = xmmword_1B6E724D0;
    long long v276 = v253;
    v278[0] = 0;
    v278[1] = 0;
    int v277 = (uint64_t *)v278;
    uint64_t v34 = objc_msgSend_caAnimation(v30, v31, v32, v33);
    sub_1B65C19C0((uint64_t)&v275, v34);
    uint64_t v38 = objc_opt_new();
    uint64_t v272 = 0;
    uint64_t v273 = 0;
    unint64_t v274 = 0;
    uint64_t v39 = (void **)*v4;
    uint64_t v40 = (void **)v4[1];
    while (v39 != v40)
    {
      uint64_t v41 = *v39;
      double v42 = objc_msgSend_name(*v39, v35, v36, v37);
      uint64_t v46 = (char *)objc_msgSend_UTF8String(v42, v43, v44, v45);
      sub_1B65B8BB0(&__p, v46);
      uint64_t v47 = sub_1B65B8C60((uint64_t)&v277, (void **)&__p.__r_.__value_.__l.__data_);
      if (v278 == (void **)v47)
      {
        if (!objc_msgSend_identifier(v41, v35, v36, v37)) {
          goto LABEL_20;
        }
        uint64_t v48 = objc_msgSend_identifier(v41, v35, v36, v37);
        uint64_t v52 = (char *)objc_msgSend_UTF8String(v48, v49, v50, v51);
        sub_1B65B8E38(&__p, v52);
        uint64_t v47 = sub_1B65B8C60((uint64_t)&v277, (void **)&__p.__r_.__value_.__l.__data_);
      }
      if (v47 != (void **)v278)
      {
        uint64_t v53 = *(void **)*v4;
        uint64_t v54 = &stru_1F0FCDBB0;
        do
        {
          uint64_t v55 = objc_msgSend_name(v41, v35, v36, v37);
          uint64_t v57 = (void *)sub_1B65B50F8(v55, v56);
          uint64_t v54 = (__CFString *)objc_msgSend_stringByAppendingPathComponent_(v57, v58, (uint64_t)v54, v59);
          if (v41 == v53) {
            break;
          }
          uint64_t v41 = objc_msgSend_parentNode(v41, v35, v60, v37);
        }
        while (v41);
        objc_msgSend_addObject_(v38, v35, (uint64_t)v54, v37);
        uint64_t v61 = v273;
        if ((unint64_t)v273 >= v274)
        {
          double v63 = sub_1B65BE560(&v272, (long long *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1B65B9034(v273, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v62 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((void *)v273 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
            *uint64_t v61 = v62;
          }
          double v63 = (char *)v61 + 24;
        }
        uint64_t v273 = v63;
      }
LABEL_20:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v39;
    }
    uint64_t v67 = objc_msgSend_count(v38, v35, v36, v37);
    if (v67)
    {
      double v68 = (void *)sub_1B65BFE60(a1, v64, v65, v66);
      uint64_t v70 = sub_1B65B50F8(v23, v69);
      uint64_t v73 = objc_msgSend_stringByAppendingPathComponent_(v68, v71, v70, v72);
      uint64_t v250 = (const char *)objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v74, v73, v75);
      uint64_t v76 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v250, *(void *)(a1 + 56), (uint64_t)v250, qword_1E9DDBC00);
      uint64_t v78 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v77, v76, @"joints", qword_1E9DDBBB8, qword_1E9DDBC30);
      objc_msgSend_setStringArray_(v78, v79, (uint64_t)v38, v80);

      memset(&__p, 0, sizeof(__p));
      sub_1B65BB4FC((void **)&__p.__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((v273 - v272) >> 3));
      uint64_t v268 = 0;
      uint64_t v269 = 0;
      double v270 = 0;
      sub_1B65A5B28(&v268, 0xAAAAAAAAAAAAAAABLL * ((v273 - v272) >> 3));
      unint64_t v265 = 0;
      unint64_t v266 = 0;
      uint64_t v267 = 0;
      sub_1B65BB4FC(&v265, 0xAAAAAAAAAAAAAAABLL * ((v273 - v272) >> 3));
      double v81 = *((double *)&v275 + 1) - *(double *)&v275;
      int v82 = (int)((*((double *)&v275 + 1) - *(double *)&v275) / *(double *)&v276 + 0.5);
      if ((v82 & 0x80000000) == 0)
      {
        unint64_t v83 = 0;
        double v84 = (double)v82;
        uint64_t v256 = (v82 + 1);
        uint64_t v257 = v76;
        uint64_t v258 = v67;
        do
        {
          double v85 = *(double *)&v275;
          sub_1B6427B4C((uint64_t)&__p, 0);
          sub_1B64590F0((uint64_t)&v268, 0);
          sub_1B6427B4C((uint64_t)&v265, 0);
          uint64_t v88 = (long long *)v272;
          uint64_t v87 = (long long *)v273;
          double v260 = (long long *)v273;
          while (v88 != v87)
          {
            v264.n128_u32[2] = 0;
            v264.n128_u64[0] = 0;
            float32x4_t v262 = v261;
            uint64_t v279 = v88;
            uint64_t v89 = sub_1B65C1F60(&v277, (void **)v88, (uint64_t)&unk_1B6E4FDF8, &v279);
            long long v263 = xmmword_1B6E4F370;
            __n128 v264 = 0u;
            float32x4_t v262 = v261;
            double v92 = (void **)v89[7];
            uint64_t v93 = (void **)v89[8];
            while (v92 != v93)
            {
              uint64_t v94 = *v92;
              uint64_t v95 = objc_msgSend_keyTimes(*v92, (const char *)v86, v90, v91);
              if (objc_msgSend_count(v95, v96, v97, v98))
              {
                unsigned int v99 = objc_msgSend_keyPath(v94, (const char *)v86, v90, v91);
                uint64_t v102 = objc_msgSend_componentsSeparatedByString_(v99, v100, @".", v101);
                objc_msgSend_duration(v94, v103, v104, v105);
                double v107 = v106;
                uint64_t v111 = objc_msgSend_count(v95, v108, v109, v110);
                float32x4_t v114 = objc_msgSend_objectAtIndexedSubscript_(v95, v112, v111 - 1, v113);
                objc_msgSend_doubleValue(v114, v115, v116, v117);
                double v119 = v118;
                uint64_t v122 = objc_msgSend_objectAtIndexedSubscript_(v95, v120, 0, v121);
                objc_msgSend_doubleValue(v122, v123, v124, v125);
                unint64_t v129 = 0;
                if (v119 - v130 >= 0.0001 && v107 >= 0.0001)
                {
                  objc_msgSend_beginTime(v94, v126, v127, v128);
                  if (objc_msgSend_count(v95, v131, v132, v133) <= v83)
                  {
                    unint64_t v129 = objc_msgSend_count(v95, v134, v135, v136) - 1;
                  }
                  else
                  {
                    float64x2_t v137 = objc_msgSend_objectAtIndexedSubscript_(v95, v134, v83, v136);
                    objc_msgSend_doubleValue(v137, v138, v139, v140);
                    unint64_t v129 = v83;
                  }
                }
                int v141 = objc_msgSend_objectAtIndex_(v102, v126, 1, v128);
                if (objc_msgSend_isEqualToString_(v141, v142, @"transform", v143))
                {
                  uint64_t v147 = objc_msgSend_keyTimes(v94, v144, v145, v146);
                  if (objc_msgSend_count(v147, v148, v149, v150))
                  {
                    uint64_t v151 = objc_msgSend_values(v94, (const char *)v86, v90, v91);
                    uint64_t v154 = objc_msgSend_objectAtIndexedSubscript_(v151, v152, v129, v153);
                    objc_msgSend_VFXMatrix4Value(v154, v155, v156, v157);
                    sub_1B64CC360((float32x4_t *)&v263, &v264, &v262, v158, v159, v160, v161);
                  }
                }
                else if ((objc_msgSend_isEqualToString_(v141, v144, @"position", v146) & 1) != 0 {
                       || objc_msgSend_isEqualToString_(v141, v162, @"translation", v164))
                }
                {
                  std::string::size_type v165 = objc_msgSend_keyTimes(v94, v162, v163, v164);
                  if (objc_msgSend_count(v165, v166, v167, v168))
                  {
                    double v169 = objc_msgSend_values(v94, (const char *)v86, v90, v91);
                    uint64_t v172 = objc_msgSend_objectAtIndexedSubscript_(v169, v170, v129, v171);
                    objc_msgSend_VFXFloat3Value(v172, v173, v174, v175);
                    __n128 v264 = v176;
                  }
                }
                else if ((objc_msgSend_isEqualToString_(v141, v162, @"orientation", v164) & 1) != 0 {
                       || objc_msgSend_isEqualToString_(v141, v177, @"quaternion", v179))
                }
                {
                  double v180 = objc_msgSend_keyTimes(v94, v177, v178, v179);
                  if (objc_msgSend_count(v180, v181, v182, v183))
                  {
                    uint64_t v184 = objc_msgSend_values(v94, (const char *)v86, v90, v91);
                    double v187 = objc_msgSend_objectAtIndexedSubscript_(v184, v185, v129, v186);
                    objc_msgSend_VFXFloat4Value(v187, v188, v189, v190);
                    long long v263 = (__int128)v191;
                  }
                }
                else if (objc_msgSend_isEqualToString_(v141, v177, @"scale", v179))
                {
                  float v192 = objc_msgSend_keyTimes(v94, (const char *)v86, v90, v91);
                  if (objc_msgSend_count(v192, v193, v194, v195))
                  {
                    double v196 = objc_msgSend_values(v94, (const char *)v86, v90, v91);
                    if (v129 >= objc_msgSend_count(v196, v197, v198, v199)) {
                      double v202 = objc_msgSend_objectAtIndexedSubscript_(v196, v200, 0, v201);
                    }
                    else {
                      double v202 = objc_msgSend_objectAtIndexedSubscript_(v196, v200, v129, v201);
                    }
                    objc_msgSend_VFXFloat3Value(v202, v203, v204, v205);
                    float32x4_t v262 = v206;
                  }
                }
              }
              ++v92;
            }
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              uint64_t v209 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
              if ((unint64_t)(v209 + 1) >> 60) {
                goto LABEL_121;
              }
              unint64_t v210 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3;
              if (v210 <= v209 + 1) {
                unint64_t v210 = v209 + 1;
              }
              if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v210;
              }
              if (v86) {
                uint64_t v211 = (char *)sub_1B6427C8C((uint64_t)&__p.__r_.__value_.__r.__words[2], v86);
              }
              else {
                uint64_t v211 = 0;
              }
              uint64_t v212 = (__n128 *)&v211[16 * v209];
              *uint64_t v212 = v264;
              std::string::size_type n128_u64 = (std::string::size_type)v212[1].n128_u64;
              double v213 = (__n128 *)__p.__r_.__value_.__l.__size_;
              std::string::size_type v214 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
              {
                do
                {
                  __n128 v215 = v213[-1];
                  --v213;
                  v212[-1] = v215;
                  --v212;
                }
                while (v213 != (__n128 *)v214);
                double v213 = (__n128 *)__p.__r_.__value_.__r.__words[0];
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v212;
              __p.__r_.__value_.__l.__size_ = n128_u64;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v211[16 * v86];
              if (v213) {
                operator delete(v213);
              }
            }
            else
            {
              *(__n128 *)__p.__r_.__value_.__l.__size_ = v264;
              std::string::size_type n128_u64 = size + 16;
            }
            __p.__r_.__value_.__l.__size_ = n128_u64;
            uint64_t v216 = v269;
            if (v269 >= v270)
            {
              uint64_t v218 = ((char *)v269 - (unsigned char *)v268) >> 4;
              unint64_t v219 = v218 + 1;
              if ((unint64_t)(v218 + 1) >> 60) {
                goto LABEL_121;
              }
              uint64_t v220 = (char *)v270 - (unsigned char *)v268;
              if (((char *)v270 - (unsigned char *)v268) >> 3 > v219) {
                unint64_t v219 = v220 >> 3;
              }
              if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v219;
              }
              if (v86) {
                uint64_t v221 = (char *)sub_1B6427C8C((uint64_t)&v270, v86);
              }
              else {
                uint64_t v221 = 0;
              }
              uint64_t v222 = (float32x4_t *)&v221[16 * v218];
              float32x4_t *v222 = (float32x4_t)v263;
              uint64_t v224 = (float32x4_t *)v268;
              uint64_t v223 = v269;
              uint64_t v225 = v222;
              if (v269 != v268)
              {
                do
                {
                  v225[-1] = v223[-1];
                  --v225;
                  --v223;
                }
                while (v223 != v224);
                uint64_t v223 = (float32x4_t *)v268;
              }
              uint64_t v217 = v222 + 1;
              uint64_t v268 = v225;
              uint64_t v269 = v222 + 1;
              double v270 = (float32x4_t *)&v221[16 * v86];
              if (v223) {
                operator delete(v223);
              }
            }
            else
            {
              *uint64_t v269 = (float32x4_t)v263;
              uint64_t v217 = v216 + 1;
            }
            uint64_t v269 = v217;
            uint64_t v226 = v266;
            if (v266 >= v267)
            {
              uint64_t v228 = ((char *)v266 - (unsigned char *)v265) >> 4;
              if ((unint64_t)(v228 + 1) >> 60) {
LABEL_121:
              }
                abort();
              unint64_t v229 = ((char *)v267 - (unsigned char *)v265) >> 3;
              if (v229 <= v228 + 1) {
                unint64_t v229 = v228 + 1;
              }
              if ((unint64_t)((char *)v267 - (unsigned char *)v265) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v229;
              }
              if (v86) {
                unint64_t v230 = (char *)sub_1B6427C8C((uint64_t)&v267, v86);
              }
              else {
                unint64_t v230 = 0;
              }
              uint64_t v231 = (float32x4_t *)&v230[16 * v228];
              *uint64_t v231 = v262;
              uint64_t v227 = v231 + 1;
              uint64_t v233 = (float32x4_t *)v265;
              uint64_t v232 = v266;
              if (v266 != v265)
              {
                do
                {
                  float32x4_t v234 = v232[-1];
                  --v232;
                  v231[-1] = v234;
                  --v231;
                }
                while (v232 != v233);
                uint64_t v232 = (float32x4_t *)v265;
              }
              unint64_t v265 = v231;
              unint64_t v266 = v227;
              uint64_t v267 = (float32x4_t *)&v230[16 * v86];
              if (v232) {
                operator delete(v232);
              }
            }
            else
            {
              *unint64_t v266 = v262;
              uint64_t v227 = v226 + 1;
            }
            unint64_t v266 = v227;
            uint64_t v88 = (long long *)((char *)v88 + 24);
            uint64_t v87 = v260;
          }
          double v235 = (v81 * (double)(int)v83 / v84 + v85) / *(double *)(a1 + 504) + 0.0;
          double v236 = (double)(int)v235;
          if (vabdd_f64(v235, v236) >= 0.001)
          {
            uint64_t v237 = v257;
            uint64_t v67 = v258;
            if (1.0 - (v235 - v236) < 0.001) {
              double v235 = v236 + 1.0;
            }
            uint64_t v238 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v86, v257, @"translations", qword_1E9DDBB80, qword_1E9DDBC30);
          }
          else
          {
            double v235 = (double)(int)v235;
            uint64_t v237 = v257;
            uint64_t v67 = v258;
            uint64_t v238 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v86, v257, @"translations", qword_1E9DDBB80, qword_1E9DDBC30);
          }
          objc_msgSend_setFloat3Array_count_atTime_(v238, v239, (uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4, v235);
          double v241 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v240, v237, @"rotations", qword_1E9DDBBB0, qword_1E9DDBC30);
          objc_msgSend_setQuatfArray_count_atTime_(v241, v242, (uint64_t)v268, ((char *)v269 - (unsigned char *)v268) >> 4, v235);
          uint64_t v244 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v243, v237, @"scales", qword_1E9DDBB80, qword_1E9DDBC30);
          objc_msgSend_setFloat3Array_count_atTime_(v244, v245, (uint64_t)v265, ((char *)v266 - (unsigned char *)v265) >> 4, v235);
          ++v83;
        }
        while (v83 != v256);
      }
      if (v265)
      {
        unint64_t v266 = (float32x4_t *)v265;
        operator delete(v265);
      }
      uint64_t v4 = v251;
      if (v268)
      {
        uint64_t v269 = (float32x4_t *)v268;
        operator delete(v268);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v272;
    sub_1B65B53E8((void ***)&__p);
    sub_1B65C2154((uint64_t)&v277, v278[0]);
    if (!v67)
    {
      unint64_t v10 = v252;
      unint64_t v249 = objc_msgSend_count(v252, v246, v247, v248);
      uint64_t v16 = v255 + 1;
      if (v255 + 1 >= v249) {
        return 0;
      }
      continue;
    }
    return (char *)v250;
  }
}

void sub_1B65C11F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  a45 = (void *)(v50 - 248);
  sub_1B65B53E8((void ***)&a45);
  sub_1B65C2154(a30, *(void **)(v50 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_1B65C12C8(uint64_t result, const char *a2)
{
  if (!*(void *)(result + 120))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 104);
    if (v3)
    {
      uint64_t v5 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, v3, @"skel:animationSource", qword_1E9DDBB98, qword_1E9DDBC30);
      unint64_t result = objc_msgSend_setObjectPath_(v5, v6, (uint64_t)a2, v7);
      *(void *)(v2 + 120) = a2;
    }
  }
  return result;
}

void *sub_1B65C132C(void *result, const char *a2, const char *a3, _OWORD *a4)
{
  uint64_t v4 = result[1] - *result;
  if (v4)
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t v8 = 0;
    unint64_t v9 = v4 >> 3;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    while (*(const char **)(*result + 8 * v8) != a2)
    {
      if (v9 == ++v8) {
        return result;
      }
    }
    if (v8 != -1)
    {
      int v38 = 1065353216;
      unint64_t v10 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, (uint64_t)a3, @"primvars:skel:jointWeights", qword_1E9DDBB88, qword_1E9DDBC30);
      objc_msgSend_setFloatArray_count_(v10, v11, (uint64_t)&v38, 1);
      uint64_t v14 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v12, 1, v13);
      objc_msgSend_setMetadataWithKey_value_(v10, v15, @"elementSize", v14);
      uint64_t v18 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v16, @"constant", v17);
      uint64_t v21 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v19, v18, v20);
      objc_msgSend_setMetadataWithKey_value_(v10, v22, @"interpolation", v21);
      int v37 = v8;
      uint64_t v24 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v23, (uint64_t)a3, @"primvars:skel:jointIndices", qword_1E9DDBB90, qword_1E9DDBC30);
      objc_msgSend_setIntArray_count_(v24, v25, (uint64_t)&v37, 1);
      uint64_t v28 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v26, 1, v27);
      objc_msgSend_setMetadataWithKey_value_(v24, v29, @"elementSize", v28);
      uint64_t v32 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v30, @"constant", v31);
      uint64_t v35 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v33, v32, v34);
      objc_msgSend_setMetadataWithKey_value_(v24, v36, @"interpolation", v35);
      return (void *)sub_1B65C1908(v7, a3, a4);
    }
  }
  return result;
}

void sub_1B65C14F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unsigned int a8, int a9, _OWORD *a10)
{
  uint64_t v16 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, (uint64_t)a2, @"primvars:skel:jointWeights", qword_1E9DDBB88, qword_1E9DDBC30);
  objc_msgSend_setFloatArray_count_(v16, v17, a3, a4);
  uint64_t v20 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v18, a5, v19);
  objc_msgSend_setMetadataWithKey_value_(v16, v21, @"elementSize", v20);
  uint64_t v24 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v22, @"vertex", v23);
  uint64_t v27 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v25, v24, v26);
  objc_msgSend_setMetadataWithKey_value_(v16, v28, @"interpolation", v27);
  std::string __p = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  sub_1B6427A50(&__p, a7);
  uint64_t v66 = a2;
  if (a9 == 2)
  {
    if (a7)
    {
      uint64_t v30 = 0;
      do
      {
        unint64_t v71 = *(unsigned __int16 *)(a6 + 2 * v30);
        uint64_t v72 = &v71;
        int v31 = *((_DWORD *)sub_1B644FE48((uint64_t **)(a1 + 64), &v71, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v72) + 10);
        uint64_t v32 = v69;
        if (v69 >= v70)
        {
          uint64_t v34 = (char *)__p;
          uint64_t v35 = (v69 - (unsigned char *)__p) >> 2;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            abort();
          }
          uint64_t v37 = v70 - (unsigned char *)__p;
          if ((v70 - (unsigned char *)__p) >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v36;
          }
          if (v29)
          {
            int v38 = (char *)sub_1B64282E0((uint64_t)&v70, v29);
            uint64_t v34 = (char *)__p;
            uint64_t v32 = v69;
          }
          else
          {
            int v38 = 0;
          }
          uint64_t v39 = &v38[4 * v35];
          *(_DWORD *)uint64_t v39 = v31;
          uint64_t v33 = v39 + 4;
          while (v32 != v34)
          {
            int v40 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          std::string __p = v39;
          uint64_t v69 = v33;
          uint64_t v70 = &v38[4 * v29];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v69 = v31;
          uint64_t v33 = v32 + 4;
        }
        uint64_t v69 = v33;
        ++v30;
      }
      while (v30 != a7);
    }
  }
  else if (a7)
  {
    uint64_t v41 = 0;
    do
    {
      unint64_t v71 = *(int *)(a6 + 4 * v41);
      uint64_t v72 = &v71;
      int v42 = *((_DWORD *)sub_1B644FE48((uint64_t **)(a1 + 64), &v71, (uint64_t)&unk_1B6E4FDF8, (uint64_t **)&v72) + 10);
      uint64_t v43 = v69;
      if (v69 >= v70)
      {
        uint64_t v45 = (char *)__p;
        uint64_t v46 = (v69 - (unsigned char *)__p) >> 2;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62) {
          abort();
        }
        uint64_t v48 = v70 - (unsigned char *)__p;
        if ((v70 - (unsigned char *)__p) >> 1 > v47) {
          unint64_t v47 = v48 >> 1;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v47;
        }
        if (v29)
        {
          uint64_t v49 = (char *)sub_1B64282E0((uint64_t)&v70, v29);
          uint64_t v45 = (char *)__p;
          uint64_t v43 = v69;
        }
        else
        {
          uint64_t v49 = 0;
        }
        uint64_t v50 = &v49[4 * v46];
        *(_DWORD *)uint64_t v50 = v42;
        uint64_t v44 = v50 + 4;
        while (v43 != v45)
        {
          int v51 = *((_DWORD *)v43 - 1);
          v43 -= 4;
          *((_DWORD *)v50 - 1) = v51;
          v50 -= 4;
        }
        std::string __p = v50;
        uint64_t v69 = v44;
        uint64_t v70 = &v49[4 * v29];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v69 = v42;
        uint64_t v44 = v43 + 4;
      }
      uint64_t v69 = v44;
      ++v41;
    }
    while (v41 != a7);
  }
  uint64_t v52 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v29, (uint64_t)v66, @"primvars:skel:jointIndices", qword_1E9DDBB90, qword_1E9DDBC30);
  objc_msgSend_setIntArray_count_(v52, v53, (uint64_t)__p, a7);
  uint64_t v56 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v54, a8, v55);
  objc_msgSend_setMetadataWithKey_value_(v52, v57, @"elementSize", v56);
  uint64_t v60 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v58, @"vertex", v59);
  uint64_t v63 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v61, v60, v62);
  objc_msgSend_setMetadataWithKey_value_(v52, v64, @"interpolation", v63);
  sub_1B65C1908(*(void *)(a1 + 56), v66, a10);
  if (__p)
  {
    uint64_t v69 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B65C18DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B65C1908(uint64_t a1, const char *a2, _OWORD *a3)
{
  uint64_t v6 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, (uint64_t)a2, @"primvars:skel:geomBindTransform", qword_1E9DDBB48, qword_1E9DDBC30);
  long long v7 = a3[5];
  void v18[4] = a3[4];
  v18[5] = v7;
  long long v8 = a3[7];
  v18[6] = a3[6];
  v18[7] = v8;
  long long v9 = a3[1];
  v18[0] = *a3;
  v18[1] = v9;
  long long v10 = a3[3];
  v18[2] = a3[2];
  v18[3] = v10;
  objc_msgSend_setDouble4x4Value_(v6, v11, (uint64_t)v18, v12);
  uint64_t v14 = objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v13, (uint64_t)a2, @"skel:skeleton", qword_1E9DDBB98, qword_1E9DDBC30);
  return objc_msgSend_setObjectPath_(v14, v15, *(void *)(a1 + 112), v16);
}

void sub_1B65C19C0(uint64_t a1, void *a2)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    sub_1B65C1D08(a1, a2, v4, v5);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v121 = a2;
      long long v9 = objc_msgSend_keyTimes(a2, v6, v7, v8);
      if (objc_msgSend_count(v9, v10, v11, v12))
      {
        uint64_t v16 = objc_msgSend_keyPath(a2, v13, v14, v15);
        if (objc_msgSend_length(v16, v17, v18, v19))
        {
          uint64_t v22 = objc_msgSend_componentsSeparatedByString_(v16, v20, @".", v21);
          if (objc_msgSend_count(v22, v23, v24, v25) == 2)
          {
            uint64_t v28 = objc_msgSend_objectAtIndex_(v22, v26, 0, v27);
            if (objc_msgSend_characterAtIndex_(v28, v29, 0, v30) == 47)
            {
              uint64_t v33 = objc_msgSend_substringFromIndex_(v28, v31, 1, v32);
              uint64_t v37 = (char *)objc_msgSend_UTF8String(v33, v34, v35, v36);
              sub_1B65B8BB0(v119, v37);
              int v38 = sub_1B65B8C60(a1 + 32, v119);
              if ((void **)(a1 + 40) == v38)
              {
                std::string __p = 0;
                uint64_t v117 = 0;
                uint64_t v118 = 0;
                sub_1B65C1D7C(&__p, &v121);
                uint64_t v122 = v119;
                int v42 = (char *)(sub_1B65C1F60((uint64_t **)(a1 + 32), v119, (uint64_t)&unk_1B6E4FDF8, (long long **)&v122)
                             + 7);
                if (v42 != (char *)&__p) {
                  sub_1B65C1E58(v42, (char *)__p, (uint64_t)v117, (v117 - (unsigned char *)__p) >> 3);
                }
                if (__p)
                {
                  uint64_t v117 = __p;
                  operator delete(__p);
                }
              }
              else
              {
                sub_1B65C1D7C(v38 + 7, &v121);
              }
              if ((unint64_t)objc_msgSend_count(v9, v39, v40, v41) >= 2)
              {
                uint64_t v46 = objc_msgSend_count(v9, v43, v44, v45);
                uint64_t v49 = objc_msgSend_objectAtIndexedSubscript_(v9, v47, v46 - 1, v48);
                objc_msgSend_doubleValue(v49, v50, v51, v52);
                double v54 = v53;
                uint64_t v57 = objc_msgSend_objectAtIndexedSubscript_(v9, v55, 0, v56);
                objc_msgSend_doubleValue(v57, v58, v59, v60);
                double v65 = v54 - v64;
                if (v65 >= 0.0001)
                {
                  objc_msgSend_duration(v121, v61, v62, v63);
                  *(double *)(a1 + 24) = v66 / v65;
                  uint64_t v69 = objc_msgSend_objectAtIndexedSubscript_(v9, v67, 0, v68);
                  objc_msgSend_doubleValue(v69, v70, v71, v72);
                  double v74 = v73;
                  double v75 = *(double *)(a1 + 24);
                  objc_msgSend_beginTime(v121, v76, v77, v78);
                  double v80 = v79;
                  uint64_t v84 = objc_msgSend_count(v9, v81, v82, v83);
                  uint64_t v87 = objc_msgSend_objectAtIndexedSubscript_(v9, v85, v84 - 1, v86);
                  objc_msgSend_doubleValue(v87, v88, v89, v90);
                  double v92 = v91;
                  double v93 = *(double *)(a1 + 24);
                  objc_msgSend_beginTime(v121, v94, v95, v96);
                  double v99 = v80 + v74 * v75;
                  double v101 = v100 + v92 * v93;
                  if (*(double *)a1 > v99) {
                    *(double *)a1 = v99;
                  }
                  if (*(double *)(a1 + 8) < v101) {
                    *(double *)(a1 + 8) = v101;
                  }
                  uint64_t v102 = objc_msgSend_objectAtIndexedSubscript_(v9, v97, 1, v98);
                  objc_msgSend_doubleValue(v102, v103, v104, v105);
                  double v107 = v106;
                  uint64_t v110 = objc_msgSend_objectAtIndexedSubscript_(v9, v108, 0, v109);
                  objc_msgSend_doubleValue(v110, v111, v112, v113);
                  double v115 = (v107 - v114) * *(double *)(a1 + 24);
                  if (v115 > 0.0001 && *(double *)(a1 + 16) > 0.0001) {
                    *(double *)(a1 + 16) = v115;
                  }
                }
              }
              if (v120 < 0) {
                operator delete(v119[0]);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1B65C1CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B65C1D08(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = objc_msgSend_animations(a2, (const char *)a2, a3, a4);
  unint64_t result = objc_msgSend_count(v6, v7, v8, v9);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      uint64_t v15 = objc_msgSend_animations(a2, v11, v12, v13);
      uint64_t v18 = objc_msgSend_objectAtIndex_(v15, v16, i, v17);
      sub_1B65C19C0(a1, v18);
      uint64_t v22 = objc_msgSend_animations(a2, v19, v20, v21);
      unint64_t result = objc_msgSend_count(v22, v23, v24, v25);
    }
  }
  return result;
}

void sub_1B65C1D7C(void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1B64285D4(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    uint64_t v8 = v14 + 8;
    uint64_t v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

char *sub_1B65C1E58(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t result = sub_1B646FFE4(v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    unint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    unint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  const char *v12 = &v9[v17];
  return result;
}

uint64_t *sub_1B65C1F60(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_1B65B8F00((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1B65C200C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1B644FF08(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1B65C20A4((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1B65C200C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    unint64_t result = sub_1B65B9034(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)unint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B65C208C(_Unwind_Exception *a1)
{
  sub_1B65C20A4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1B65C20A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1B65C20FC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1B65C20FC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_1B65C2154(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1B65C2154(a1, *a2);
    sub_1B65C2154(a1, a2[1]);
    sub_1B65C20FC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1B65C21B0(uint64_t a1)
{
  sub_1B65B51B4(a1 + 440);
  sub_1B643670C(a1 + 416, *(void **)(a1 + 424));
  sub_1B65B5228((uint64_t **)(a1 + 344));
  sub_1B643670C(a1 + 320, *(void **)(a1 + 328));
  uint64_t v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
  sub_1B643670C(a1 + 272, *(void **)(a1 + 280));
  sub_1B643670C(a1 + 248, *(void **)(a1 + 256));
  sub_1B65B5344(a1 + 216, *(void **)(a1 + 224));
  sub_1B65B548C(a1 + 192, *(char **)(a1 + 200));
  sub_1B643670C(a1 + 168, *(void **)(a1 + 176));
  sub_1B65B54F0(a1 + 144, *(char **)(a1 + 152));
  sub_1B643670C(a1 + 120, *(void **)(a1 + 128));
  sub_1B643670C(a1 + 96, *(void **)(a1 + 104));
  sub_1B65B54F0(a1 + 64, *(char **)(a1 + 72));
  return a1;
}

uint64_t VFXBoundingBoxIsNull(float32x4_t a1, float32x4_t a2)
{
  uint32x4_t v2 = (uint32x4_t)vceqzq_f32(a1);
  v2.i32[3] = v2.i32[2];
  uint32x4_t v3 = (uint32x4_t)vceqzq_f32(a2);
  v3.i32[3] = v3.i32[2];
  return (vminvq_u32(v2) & vminvq_u32(v3)) >> 31;
}

char *sub_1B65C23C4(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"queue");
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB986160);
  uint64_t v16 = sub_1B661DEF0(qword_1EB995F78, v9, v10, v11, v12, v13, v14, v15);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB986160);
  *((void *)v16 + 6) = 0;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  size_t v17 = (char **)a1[1];
  if (!v17) {
    size_t v17 = a1;
  }
  *size_t v17 = v16;
  a1[1] = v16;
  return v16;
}

uint64_t sub_1B65C2464(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

const void *sub_1B65C2494()
{
  CFArrayRef v0 = (const __CFArray *)*((void *)sub_1B638F554() + 2);
  CFIndex v1 = CFArrayGetCount(v0) - 1;

  return CFArrayGetValueAtIndex(v0, v1);
}

void sub_1B65C2580(int a1)
{
  uint64_t v2 = sub_1B638F554();
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB9965C8);
  if (CFArrayGetCount(*(CFArrayRef *)(v2 + 16)) < 1)
  {
    ValueAtIndex = 0;
  }
  else
  {
    CFArrayRef v3 = *(const __CFArray **)(v2 + 16);
    CFIndex Count = CFArrayGetCount(v3);
    ValueAtIndex = (atomic_uint *)CFArrayGetValueAtIndex(v3, Count - 1);
  }
  if (qword_1EB996E88 != -1) {
    dispatch_once_f(&qword_1EB996E88, &qword_1EB9956C0, (dispatch_function_t)sub_1B65C2464);
  }
  uint64_t v6 = sub_1B63C8D44(qword_1EB9956C0, 0x48uLL);
  uint64_t v7 = v6;
  *(void *)(v6 + 32) = 0;
  if (a1) {
    char v8 = 2;
  }
  else {
    char v8 = 0;
  }
  *(unsigned char *)(v6 + 60) = *(unsigned char *)(v6 + 60) & 0xFD | v8;
  if (ValueAtIndex)
  {
    *(void *)(v6 + 72) = CFRetain(ValueAtIndex);
    atomic_fetch_add(ValueAtIndex + 16, 1u);
    if ((ValueAtIndex[15] & 2) == 0)
    {
      *(void *)(v7 + 32) = *((void *)ValueAtIndex + 4);
      CFTypeRef v9 = *(CFTypeRef *)(v7 + 24);
      CFTypeRef v10 = (CFTypeRef)*((void *)ValueAtIndex + 3);
      if (v9 != v10)
      {
        if (v9)
        {
          CFRelease(*(CFTypeRef *)(v7 + 24));
          *(void *)(v7 + 24) = 0;
          CFTypeRef v10 = (CFTypeRef)*((void *)ValueAtIndex + 3);
        }
        if (v10) {
          CFTypeRef v10 = CFRetain(v10);
        }
        *(void *)(v7 + 24) = v10;
      }
    }
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 16), (const void *)v7);
  CFRelease((CFTypeRef)v7);

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
}

void sub_1B65C26E4()
{
  if (*(double *)&qword_1EB995F70 == 0.0) {
    qword_1EB995F70 = CACurrentMediaTime();
  }
}

uint64_t sub_1B65C2724(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  uint64_t result = sub_1B64B2008(a3, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!result) {
    return result;
  }
  uint64_t v22 = result;
  int v23 = sub_1B660FA40(a1, v15, v16, v17, v18, v19, v20, v21);
  char v24 = *(unsigned char *)(a1 + 34);
  char v25 = *(unsigned char *)(a1 + 35);
  qmemcpy(bytes, "transition-0x", sizeof(bytes));
  uint64x2_t v26 = (uint64x2_t)vdupq_n_s64((unint64_t)a2);
  v27.i64[0] = 0xF0000000FLL;
  v27.i64[1] = 0xF0000000FLL;
  int32x4_t v28 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B6E72520), (int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B6E72510)), v27);
  int32x4_t v29 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B6E72540), (int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B6E72530)), v27);
  int32x4_t v30 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B6E72560), (int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B6E72550)), v27);
  int32x4_t v31 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B6E72580), (int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B6E72570)), v27);
  v27.i64[0] = 0xA0000000ALL;
  v27.i64[1] = 0xA0000000ALL;
  v32.i64[0] = 0x5700000057;
  v32.i64[1] = 0x5700000057;
  int8x16_t v228 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v27, (uint32x4_t)v29), (int8x16_t)(*(_OWORD *)&v29 | __PAIR128__(0x3000000030, 0x3000000030)), (int8x16_t)vaddq_s32(v29, v32)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v27, (uint32x4_t)v28), (int8x16_t)(*(_OWORD *)&v28 | __PAIR128__(0x3000000030, 0x3000000030)), (int8x16_t)vaddq_s32(v28, v32))), (int8x16_t)vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v27, (uint32x4_t)v31), (int8x16_t)(*(_OWORD *)&v31 | __PAIR128__(0x3000000030, 0x3000000030)), (int8x16_t)vaddq_s32(v31, v32)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v27, (uint32x4_t)v30), (int8x16_t)(*(_OWORD *)&v30 | __PAIR128__(0x3000000030, 0x3000000030)), (int8x16_t)vaddq_s32(v30, v32))));
  char v229 = v24 + 97;
  char v230 = v25 + 97;
  char v231 = 0;
  uint64_t v33 = (__CFString *)CFStringCreateWithBytes(0, bytes, 31, 0x8000100u, 0);
  uint64_t v40 = v33;
  double v41 = *(double *)(a5 + 32);
  if (v41 <= 0.0)
  {
    sub_1B6423FE4(v22, a4, v33, v35, v36, v37, v38, v39);
    uint64_t v175 = v40;
  }
  else
  {
    uint64_t v223 = v33;
    uint64_t v224 = a5;
    key = a4;
    int v42 = (const void *)sub_1B65623D0(v23, 1, v34, v35, v36, v37, v38, v39);
    uint64_t v43 = *(const void **)(a1 + 16);
    uint64_t v51 = (void *)sub_1B6562568((uint64_t)v42, v44, v45, v46, v47, v48, v49, v50);
    size_t v59 = sub_1B6562484((uint64_t)v42, v52, v53, v54, v55, v56, v57, v58);
    sub_1B63F4434(v43, a2, v51, v59, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v60, v61);
    (*(void (**)(uint64_t, double))(a6 + 16))(a6, v41);
    int v226 = v23;
    uint64_t v68 = (const void *)sub_1B65623D0(v23, 1, v62, v63, v64, v65, v66, v67);
    uint64_t v69 = *(const void **)(a1 + 16);
    uint64_t v77 = (void *)sub_1B6562568((uint64_t)v68, v70, v71, v72, v73, v74, v75, v76);
    size_t v85 = sub_1B6562484((uint64_t)v68, v78, v79, v80, v81, v82, v83, v84);
    sub_1B63F4434(v69, a2, v77, v85, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v86, v87);
    uint64_t v88 = *(const void **)(a1 + 16);
    uint64_t v96 = (const void *)sub_1B6562568((uint64_t)v42, v89, v90, v91, v92, v93, v94, v95);
    size_t v104 = sub_1B6562484((uint64_t)v42, v97, v98, v99, v100, v101, v102, v103);
    sub_1B63F4524(v88, a2, v96, v104, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v105, v106);
    double v107 = (const void *)sub_1B6494178();
    sub_1B6494324((uint64_t)v107, (uint64_t)v68, v108, v109, v110, v111, v112, v113);
    double v121 = *(double *)&qword_1EB995F70;
    if (*(double *)&qword_1EB995F70 == 0.0)
    {
      double v121 = CACurrentMediaTime();
      qword_1EB995F70 = *(void *)&v121;
    }
    sub_1B64226C0(v22, v121, v114, v115, v116, v117, v118, v119, v120);
    sub_1B6423070(v22, a1, v122, v123, v124, v125, v126, v127);
    uint64_t v128 = *(const void **)(a1 + 16);
    uint64_t v136 = (void *)sub_1B6562568((uint64_t)v42, v129, v130, v131, v132, v133, v134, v135);
    size_t v144 = sub_1B6562484((uint64_t)v42, v137, v138, v139, v140, v141, v142, v143);
    sub_1B63F4434(v128, a2, v136, v144, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v145, v146);
    sub_1B6494414((uint64_t)v107, (uint64_t)v42, v147, v148, v149, v150, v151, v152);
    sub_1B64938E4((uint64_t)v107, 1, v153, v154, v155, v156, v157, v158);
    float v159 = v41;
    sub_1B6492D2C((uint64_t)v107, v159, v160, v161, v162, v163, v164, v165, v166);
    uint64_t v173 = *(const void **)(v224 + 24);
    if (!v173)
    {
      sub_1B6433144();
      uint64_t v173 = v174;
    }
    sub_1B6492FB8((uint64_t)v107, v173, v167, v168, v169, v170, v171, v172);
    uint64_t v175 = v223;
    sub_1B6423FE4(v22, key, v223, v176, v177, v178, v179, v180);
    sub_1B6423958(v22, v107, (const void *)a1, key, v223, v181, v182, v183);
    CFRelease(v107);
    CFRelease(v42);
    int v23 = v226;
    if (v68) {
      goto LABEL_13;
    }
  }
  (*(void (**)(uint64_t, double))(a6 + 16))(a6, v41);
  uint64_t v68 = (const void *)sub_1B65623D0(v23, 1, v191, v192, v193, v194, v195, v196);
  double v197 = *(const void **)(a1 + 16);
  uint64_t v205 = (void *)sub_1B6562568((uint64_t)v68, v198, v199, v200, v201, v202, v203, v204);
  size_t v213 = sub_1B6562484((uint64_t)v68, v206, v207, v208, v209, v210, v211, v212);
  sub_1B63F4434(v197, a2, v205, v213, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v214, v215);
LABEL_13:
  uint64_t v216 = sub_1B64B2770(a3, v184, v185, v186, v187, v188, v189, v190);
  sub_1B6610358(v216, a1, (uint64_t)v68, v217, v218, v219, v220, v221, v222);
  CFRelease(v175);
  CFRelease((CFTypeRef)a1);
  CFRelease(v68);
  return 1;
}

uint64_t sub_1B65C2B8C(uint64_t a1, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  if (a1 && a2 && a3)
  {
    CFStringRef v11 = sub_1B660CA68(a2, a3, 0);
    uint64_t v19 = (void *)sub_1B660F8C4((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
    if (v11 && v19)
    {
      uint64_t result = sub_1B65C2724((uint64_t)v11, v19, a1, a2, a4, a5, v24, v25);
      if (result) {
        return result;
      }
    }
    else
    {
      if (v11) {
        CFRelease(v11);
      }
      sub_1B63F2F54(0, @"Warning: invalid keypath: %@ sent to object %@", v20, v21, v22, v23, v24, v25, (uint64_t)a3);
    }
  }
  a6.n128_u64[0] = *(void *)(a4 + 32);
  int8x16_t v27 = *(uint64_t (**)(uint64_t, __n128))(a5 + 16);

  return v27(a5, a6);
}

uint64_t sub_1B65C2C78(uint64_t a1, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  if (a1 && a2 && a3)
  {
    uint64_t v12 = (const void *)sub_1B660CAC4(a2, a3, a4, 0);
    uint64_t v20 = (void *)sub_1B660F8C4((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
    if (v12 && v20)
    {
      uint64_t result = sub_1B65C2724((uint64_t)v12, v20, a1, a2, a5, a6, v25, v26);
      if (result) {
        return result;
      }
    }
    else
    {
      if (v12) {
        CFRelease(v12);
      }
      sub_1B63F2F54(0, @"Warning: invalid key+index: %@ %d sent to object %@", v21, v22, v23, v24, v25, v26, (uint64_t)a3);
    }
  }
  a7.n128_u64[0] = *(void *)(a5 + 32);
  int32x4_t v28 = *(uint64_t (**)(uint64_t, __n128))(a6 + 16);

  return v28(a6, a7);
}

uint64_t sub_1B65C2D7C(uint64_t a1, void *a2, const __CFString *a3, void *a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v12 = (const void *)sub_1B660CB60(a2, a3, a4, 0);
    uint64_t v20 = (void *)sub_1B660F8C4((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
    if (v12 && v20)
    {
      uint64_t result = sub_1B65C2724((uint64_t)v12, v20, a1, a2, a5, a6, v25, v26);
      if (result) {
        return result;
      }
    }
    else
    {
      if (v12) {
        CFRelease(v12);
      }
      sub_1B63F2F54(0, @"Warning: invalid key+subscript: %@ %@ sent to object %@", v21, v22, v23, v24, v25, v26, (uint64_t)a3);
    }
  }
  a7.n128_u64[0] = *(void *)(a5 + 32);
  int32x4_t v28 = *(uint64_t (**)(uint64_t, __n128))(a6 + 16);

  return v28(a6, a7);
}

void sub_1B65C2E84(char a1)
{
  uint64_t v2 = sub_1B638F554();
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB9965C8);
  CFArrayRef v3 = (const __CFArray *)*((void *)v2 + 2);
  CFIndex Count = CFArrayGetCount(v3);
  ValueAtIndex = (double *)CFArrayGetValueAtIndex(v3, Count - 1);
  if (ValueAtIndex[5] == 0.0)
  {
    uint64_t v12 = (uint64_t)ValueAtIndex;
    prof_beginFlame((uint64_t)"CFXTransactionCommit", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Transactions/CFXTransaction.c", 1352);
    double v20 = CACurrentMediaTime();
    *(double *)(v12 + 40) = v20;
    if (a1)
    {
      *(unsigned char *)(v12 + 60) |= 1u;
      sub_1B65C3024(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      double v21 = v20;
      uint64_t v22 = sub_1B65C23C4((char **)v2 + 5, v13, v14, v15, v16, v17, v18, v19);
      *((void *)v22 + 5) = 0;
      *((double *)v22 + 6) = v21;
      *((void *)v22 + 4) = CFRetain((CFTypeRef)v12);
    }
    uint64_t v23 = (CFArrayRef *)sub_1B638F554();
    CFIndex v24 = CFArrayGetCount(v23[2]);
    if (v24 <= 1)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Error in CFXTransactionPop -> stack empty", v25, v26, v27, v28, v29, v30, (uint64_t)"(count >= 2)");
      sub_1B63F2F54(16, @"Error: unexpected transaction commit (missing begin?)", v31, v32, v33, v34, v35, v36, v38);
    }
    else
    {
      CFArrayRemoveValueAtIndex(v23[2], v24 - 1);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
    if (CFArrayGetCount(*((CFArrayRef *)v2 + 2)) <= 1 && (a1 & 1) == 0) {
      sub_1B638F728(1, 0);
    }
    prof_endFlame();
  }
  else
  {
    sub_1B63F2F54(16, @"Error: CFXTransactionCommit - transaction already committed", v6, v7, v8, v9, v10, v11, v37);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
  }
}

void sub_1B65C3024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"t");
  }
  if ((*(unsigned char *)(a1 + 60) & 1) != 0 && !*(_DWORD *)(a1 + 56) && !atomic_load((unsigned int *)(a1 + 64)))
  {
    CFRetain((CFTypeRef)a1);
    uint64_t v17 = *(unsigned int **)(a1 + 72);
    if (v17)
    {
      CFRetain(*(CFTypeRef *)(a1 + 72));
      int v24 = atomic_load(v17 + 16);
      if (v24 <= 0) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. CFXTransactionRemoveChild - no child", v18, v19, v20, v21, v22, v23, (uint64_t)"t->childCount > 0");
      }
      uint64_t v25 = v17;
      if (*(unsigned int **)(a1 + 72) == v17
        || (sub_1B63F2F54(17, @"Assertion '%s' failed. CFXTransactionRemoveChild inconsistency", v18, v19, v20, v21, v22, v23, (uint64_t)"child->parentTransaction == t"), (uint64_t v25 = *(unsigned int **)(a1 + 72)) != 0))
      {
        CFRelease(v25);
      }
      *(void *)(a1 + 72) = 0;
      atomic_fetch_add((atomic_uint *volatile)v17 + 16, 0xFFFFFFFF);
      sub_1B65C41C4(a1, v26, v27, v28, v29, v30, v31, v32);
      if (!atomic_load(v17 + 16)) {
        sub_1B65C3024(v17);
      }
      CFRelease(v17);
    }
    else
    {
      sub_1B65C41C4(a1, v10, v11, v12, v13, v14, v15, v16);
    }
    CFRelease((CFTypeRef)a1);
  }
}

void sub_1B65C3170(const void *a1, const void *a2)
{
  uint64_t v4 = sub_1B65C2494();
  CFMutableArrayRef Mutable = (__CFDictionary *)*((void *)v4 + 2);
  if (!Mutable)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *((void *)v4 + 2) = Mutable;
  }
  if (a2)
  {
    CFDictionarySetValue(Mutable, a1, a2);
  }
  else
  {
    CFDictionaryRemoveValue(Mutable, a1);
  }
}

CFDictionaryRef sub_1B65C3204(const void *a1)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)sub_1B65C2494() + 2);
  if (result)
  {
    return (const __CFDictionary *)CFDictionaryGetValue(result, a1);
  }
  return result;
}

void *sub_1B65C3250(const void *a1)
{
  uint64_t v2 = sub_1B65C2494();
  CFArrayRef v3 = (const void *)v2[10];
  if (v3) {
    _Block_release(v3);
  }
  CFDictionaryRef result = _Block_copy(a1);
  v2[10] = result;
  return result;
}

void sub_1B65C32AC()
{
}

CFTypeRef sub_1B65C3340(CFTypeRef a1)
{
  uint64_t v8 = sub_1B65C2494();
  if ((v8[60] & 2) != 0) {
    sub_1B63F2F54(16, @"Error: modifying the timing function of an implicit transaction. Missing transaction begin?", v2, v3, v4, v5, v6, v7, v10);
  }
  CFTypeRef result = (CFTypeRef)*((void *)v8 + 3);
  if (result != a1)
  {
    if (result)
    {
      CFRelease(result);
      *((void *)v8 + 3) = 0;
    }
    if (a1) {
      CFTypeRef result = CFRetain(a1);
    }
    else {
      CFTypeRef result = 0;
    }
    *((void *)v8 + 3) = result;
  }
  return result;
}

uint64_t sub_1B65C33B0()
{
  return *((void *)sub_1B65C2494() + 3);
}

unsigned char *sub_1B65C33CC(char a1)
{
  CFTypeRef result = sub_1B638F554();
  result[32] = a1;
  return result;
}

uint64_t sub_1B65C33F4()
{
  return *((unsigned __int8 *)sub_1B638F554() + 32);
}

void sub_1B65C3410(int a1)
{
  uint64_t v2 = sub_1B65C2494();
  if (a1) {
    char v3 = 4;
  }
  else {
    char v3 = 0;
  }
  v2[60] = v2[60] & 0xFB | v3;
  if (a1) {
    qword_1EB995F70 = CACurrentMediaTime();
  }
}

void *sub_1B65C3460(uint64_t a1)
{
  CFTypeRef result = sub_1B65C2494();
  result[6] = a1;
  return result;
}

uint64_t sub_1B65C3488(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 60) >> 2) & 1;
}

uint64_t sub_1B65C3494(uint64_t a1, id *a2)
{
  if (!*((unsigned char *)sub_1B638F554() + 32) && (*(unsigned char *)(a1 + 60) & 4) == 0) {
    return 0;
  }
  uint64_t v5 = *(id **)(a1 + 48);
  if (v5 == a2 || a2 == 0 || v5 == 0) {
    return 1;
  }
  uint64_t v4 = 1;
  if ((byte_1E9DDBC60 & 1) == 0)
  {
    byte_1E9DDBC60 = 1;
    uint64_t v8 = sub_1B6583674(a2);
    sub_1B6583674(*(id **)(a1 + 48));
    sub_1B63F2F54(16, @"Error: World %@ is modified within a rendering callback of another world (%@). This is not allowed and may lead to crash", v9, v10, v11, v12, v13, v14, (uint64_t)v8);
  }
  return v4;
}

CFIndex sub_1B65C3540()
{
  CFArrayRef v0 = (CFArrayRef *)sub_1B638F554();
  return CFArrayGetCount(v0[2]) - 1;
}

void *sub_1B65C3564(uint64_t a1)
{
  CFTypeRef result = pthread_getspecific(qword_1EB995F80);
  if (result)
  {
    uint64_t v9 = result;
    sub_1B6438A08(a1, result, v3, v4, v5, v6, v7, v8);
    CFTypeRef result = (void *)sub_1B64389BC(a1, v10, v11, v12, v13, v14, v15, v16);
    *CFTypeRef result = sub_1B65C35D8;
    result[1] = sub_1B65C367C;
    ++*((_DWORD *)v9 + 14);
  }
  return result;
}

void *sub_1B65C35D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = sub_1B6438A84(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v16) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v10, v11, v12, v13, v14, v15, (uint64_t)"t");
  }
  int v17 = *(_DWORD *)(v16 + 56);
  if (!v17)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. CFXTransactionAnimationDidComplete inconsistent animation count", v10, v11, v12, v13, v14, v15, (uint64_t)"t->pendingAnimationCount>0");
    int v17 = *(_DWORD *)(v16 + 56);
  }
  int v18 = v17 - 1;
  *(_DWORD *)(v16 + 56) = v18;
  if (!v18) {
    sub_1B65C3024(v16, v9, v10, v11, v12, v13, v14, v15);
  }
  sub_1B6438A08(a1, 0, v10, v11, v12, v13, v14, v15);
  CFTypeRef result = (void *)sub_1B64389BC(a1, v19, v20, v21, v22, v23, v24, v25);
  *CFTypeRef result = 0;
  result[1] = 0;
  return result;
}

void *sub_1B65C367C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = sub_1B6438A84(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v16) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v10, v11, v12, v13, v14, v15, (uint64_t)"t");
  }
  int v17 = *(_DWORD *)(v16 + 56);
  if (!v17)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. CFXTransactionAnimationDidInterrupt inconsistent animation count", v10, v11, v12, v13, v14, v15, (uint64_t)"t->pendingAnimationCount>0");
    int v17 = *(_DWORD *)(v16 + 56);
  }
  int v18 = v17 - 1;
  *(_DWORD *)(v16 + 56) = v18;
  if (!v18) {
    sub_1B65C3024(v16, v9, v10, v11, v12, v13, v14, v15);
  }
  sub_1B6438A08(a1, 0, v10, v11, v12, v13, v14, v15);
  CFTypeRef result = (void *)sub_1B64389BC(a1, v19, v20, v21, v22, v23, v24, v25);
  *CFTypeRef result = 0;
  result[1] = 0;
  return result;
}

void sub_1B65C3720()
{
  CFArrayRef v0 = pthread_getspecific(qword_1EB995F80);
  if (v0 && !v0[3])
  {
    sub_1B6433144();
  }
}

double sub_1B65C3764()
{
  CFArrayRef v0 = (double *)pthread_getspecific(qword_1EB995F80);
  if (v0) {
    return v0[4];
  }
  else {
    return 0.0;
  }
}

void sub_1B65C3794(const void *a1, const void *a2, const void *a3, uint64_t a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (const void *)a4;
  if (!a6)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, (uint64_t)a5, 0, a7, a8, (uint64_t)"applyBlock");
    if (a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!a1) {
LABEL_3:
  }
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (uint64_t)"transaction");
LABEL_4:
  uint64_t v14 = (char **)sub_1B638F554();
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB9965C8);
  uint64_t v22 = sub_1B65C23C4(v14 + 5, v15, v16, v17, v18, v19, v20, v21);
  if (v10 || (uint64_t v10 = a2) != 0) {
    CFTypeRef v23 = CFRetain(v10);
  }
  else {
    CFTypeRef v23 = 0;
  }
  *((void *)v22 + 2) = v23;
  if (a5) {
    CFTypeRef v24 = CFRetain(a5);
  }
  else {
    CFTypeRef v24 = 0;
  }
  *((void *)v22 + 3) = v24;
  if (a3) {
    CFTypeRef v25 = CFRetain(a3);
  }
  else {
    CFTypeRef v25 = 0;
  }
  *((void *)v22 + 1) = v25;
  *((void *)v22 + 5) = _Block_copy(a6);
  if (a1) {
    CFTypeRef v26 = CFRetain(a1);
  }
  else {
    CFTypeRef v26 = 0;
  }
  *((void *)v22 + 4) = v26;
  *((CFTimeInterval *)v22 + 6) = CACurrentMediaTime();

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
}

void sub_1B65C38E8(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[9];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[10];
  if (v5)
  {
    _Block_release(v5);
  }
}

CFStringRef sub_1B65C3950(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXTransaction>");
}

CFStringRef sub_1B65C3984(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXTransaction>");
}

void *sub_1B65C39B8()
{
  pthread_key_create((pthread_key_t *)&qword_1EB995F88, (void (__cdecl *)(void *))sub_1B65C3A18);
  pthread_key_create((pthread_key_t *)&qword_1EB995F80, (void (__cdecl *)(void *))nullsub_148);
  CFTypeRef result = sub_1B661DE68(56, 2048);
  qword_1EB995F78 = (uint64_t)result;
  return result;
}

void sub_1B65C3A18(void *a1)
{
  if (!a1) {
    goto LABEL_10;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB9965C8);
  uint64_t v2 = *((void *)a1 + 5);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
  if (v2) {
    sub_1B638F728(0, 0);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB9965C8);
  uint64_t v3 = (void *)*((void *)a1 + 1);
  if (!*(void *)a1)
  {
    qword_1EB995F90 = *((void *)a1 + 1);
    if (!v3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  *(void *)(*(void *)a1 + 8) = v3;
  uint64_t v3 = (void *)*((void *)a1 + 1);
  if (v3) {
LABEL_6:
  }
    *uint64_t v3 = *(void *)a1;
LABEL_7:
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
  uint64_t v4 = (__CFRunLoopObserver *)*((void *)a1 + 3);
  if (v4)
  {
    CFRunLoopObserverInvalidate(v4);
    CFRelease(*((CFTypeRef *)a1 + 3));
  }
  CFRelease(*((CFTypeRef *)a1 + 2));
LABEL_10:

  free(a1);
}

void sub_1B65C3AE8()
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB9965C8);
  CFArrayRef v0 = (void *)qword_1EB995F90;
  if (qword_1EB995F90)
  {
    int v1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    do
    {
      uint64_t v5 = v0 + 5;
      uint64_t v4 = (void *)v0[5];
      if (v4 && (uint64_t v6 = v4[4]) != 0 && ((*(unsigned char *)(v6 + 60) & 2) != 0 || *(double *)(v6 + 40) != 0.0))
      {
        uint64_t v7 = (void *)v0[5];
        if (v3)
        {
          if (v2) {
            *uint64_t v2 = v4;
          }
          uint64_t v7 = v3;
        }
        uint64_t v8 = (void *)*v4;
        ++v1;
        if (*v4)
        {
          while (1)
          {
            uint64_t v9 = v8;
            uint64_t v10 = v8[4];
            if (!v10 || (*(unsigned char *)(v10 + 60) & 2) == 0 && *(double *)(v10 + 40) == 0.0) {
              break;
            }
            uint64_t v8 = (void *)*v9;
            ++v1;
            uint64_t v4 = v9;
            if (!*v9) {
              goto LABEL_20;
            }
          }
          *uint64_t v4 = 0;
          *uint64_t v5 = v9;
          uint64_t v3 = v7;
        }
        else
        {
          uint64_t v9 = v4;
LABEL_20:
          *uint64_t v9 = 0;
          uint64_t v3 = v7;
          uint64_t v4 = v9;
          *uint64_t v5 = 0;
          v0[6] = 0;
        }
      }
      else
      {
        uint64_t v4 = v2;
      }
      CFArrayRef v0 = (void *)v0[1];
      uint64_t v2 = v4;
    }
    while (v0);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
    if (v1)
    {
      uint64_t v11 = (char *)malloc_type_malloc(8 * v1, 0x2004093837F09uLL);
      uint64_t v12 = (void **)v11;
      if (v1 <= 0)
      {
        qsort(v11, v1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1B65C40EC);
        int v14 = v1 - 1;
      }
      else
      {
        uint64_t v13 = 0;
        do
        {
          *(void *)&v11[v13] = v3;
          uint64_t v3 = (void *)*v3;
          v13 += 8;
        }
        while (8 * v1 != v13);
        qsort(v11, v1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1B65C40EC);
        int v14 = v1 - 1;
        if (v1 >= 2)
        {
          uint64_t v15 = v12 + 1;
          uint64_t v16 = (v1 - 1);
          do
          {
            *(void *)*(v15 - 1) = *v15;
            ++v15;
            --v16;
          }
          while (v16);
        }
      }
      *v12[v14] = 0;
      uint64_t v17 = *v12;
      free(v12);
      if (v17)
      {
        int v81 = 0;
        while (1)
        {
          pthread_mutex_lock(&stru_1EB97D908);
          prof_beginFlame((uint64_t)"CFXTransactionExecuteFlush", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Transactions/CFXTransaction.c", 1245);
          uint64_t v18 = sub_1B63F2EE0();
          os_signpost_id_t v19 = os_signpost_id_generate(v18);
          uint64_t v20 = sub_1B63F2EE0();
          unint64_t v21 = v19 - 1;
          if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v22 = v20;
            if (os_signpost_enabled(v20))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1B6287000, v22, OS_SIGNPOST_INTERVAL_BEGIN, v19, "TransactionFlush", "", buf, 2u);
            }
          }
          os_signpost_id_t spid = v19;
          CFMutableArrayRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
          v24.n128_f64[0] = CACurrentMediaTime();
          CFTypeRef v25 = 0;
          qword_1EB995F70 = v24.n128_u64[0];
          CFTypeRef v26 = v17;
          do
          {
            uint64_t v27 = (unsigned char *)v26[4];
            if (v26[5])
            {
              if ((v27[60] & 2) == 0) {
                pthread_setspecific(qword_1EB995F80, (const void *)v26[4]);
              }
              uint64_t v28 = (const void *)v26[2];
              if (v28 && sub_1B6583B18(v28))
              {
                uint64_t v36 = (const void *)sub_1B63F4F54((void *)v26[2], v29, v30, v31, v32, v33, v34, v35);
                if (v36 && !CFSetContainsValue(Mutable, v36))
                {
                  CFSetAddValue(Mutable, v36);
                  sub_1B64B0C28((uint64_t)v36, v37, v38, v39, v40, v41, v42, v43);
                }
              }
              else
              {
                uint64_t v36 = 0;
              }
              sub_1B65C2B8C((uint64_t)v36, (void *)v26[2], (const __CFString *)v26[3], (uint64_t)v27, v26[5], v24);
              pthread_setspecific(qword_1EB995F80, 0);
            }
            else
            {
              if (!v25) {
                CFTypeRef v25 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
              }
              CFArrayAppendValue(v25, v27);
            }
            CFTypeRef v26 = (void *)*v26;
          }
          while (v26);
          if (v25)
          {
            v85.length = CFArrayGetCount(v25);
            v85.locatiouint64_t n = 0;
            CFArrayApplyFunction(v25, v85, (CFArrayApplierFunction)sub_1B65C410C, 0);
            CFRelease(v25);
          }
          uint64_t v44 = v17;
          do
          {
            uint64_t v46 = (void *)*v44;
            uint64_t v45 = (const void *)v44[1];
            if (v45)
            {
              CFRelease(v45);
              v44[1] = 0;
            }
            uint64_t v47 = (const void *)v44[2];
            if (v47)
            {
              CFRelease(v47);
              v44[2] = 0;
            }
            uint64_t v48 = (const void *)v44[3];
            if (v48)
            {
              CFRelease(v48);
              void v44[3] = 0;
            }
            uint64_t v49 = (const void *)v44[4];
            if (v49)
            {
              CFRelease(v49);
              v44[4] = 0;
            }
            uint64_t v50 = (const void *)v44[5];
            if (v50) {
              _Block_release(v50);
            }
            uint64_t v44 = v46;
          }
          while (v46);
          os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB986160);
          do
          {
            uint64_t v57 = (void *)*v17;
            sub_1B661E084(qword_1EB995F78, (unint64_t)v17, v51, v52, v53, v54, v55, v56, v79);
            uint64_t v17 = v57;
          }
          while (v57);
          os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB986160);
          CFSetApplyFunction(Mutable, (CFSetApplierFunction)sub_1B65C411C, 0);
          CFNotificationCenterRef LocalCenter = CFNotificationCenterGetLocalCenter();
          if (!LocalCenter) {
            sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v58, v59, v60, v61, v62, v63, (uint64_t)"nc");
          }
          CFSetApplyFunction(Mutable, (CFSetApplierFunction)sub_1B65C4154, LocalCenter);
          if (Mutable) {
            CFRelease(Mutable);
          }
          uint64_t v65 = sub_1B63F2EE0();
          if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v66 = v65;
            if (os_signpost_enabled(v65))
            {
              *(_WORD *)uint64_t v82 = 0;
              _os_signpost_emit_with_name_impl(&dword_1B6287000, v66, OS_SIGNPOST_INTERVAL_END, spid, "TransactionFlush", "", v82, 2u);
            }
          }
          prof_endFlame();
          pthread_mutex_unlock(&stru_1EB97D908);
          if (v81 == 6) {
            break;
          }
          uint64_t v73 = sub_1B638F554();
          os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB9965C8);
          uint64_t v17 = (void *)v73[5];
          if (!v17
            || (uint64_t v74 = v17[4]) == 0
            || (uint64_t v75 = (void *)v73[5], ++v81, (*(unsigned char *)(v74 + 60) & 2) == 0)
            && (uint64_t v75 = (void *)v73[5], *(double *)(v74 + 40) == 0.0))
          {
            os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
            return;
          }
          while (1)
          {
            uint64_t v76 = v75;
            uint64_t v77 = v75[4];
            if (!v77 || (*(unsigned char *)(v77 + 60) & 2) == 0 && *(double *)(v77 + 40) == 0.0) {
              break;
            }
            uint64_t v75 = (void *)*v76;
            if (!*v76)
            {
              void v73[5] = 0;
              goto LABEL_88;
            }
          }
          uint64_t v78 = (void *)*v76;
          void v73[5] = *v76;
          if (v78) {
            goto LABEL_89;
          }
LABEL_88:
          v73[6] = 0;
LABEL_89:
          *uint64_t v76 = 0;
          os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
        }
        sub_1B63F2F54(0, @"Warning: max successive flush reached", v67, v68, v69, v70, v71, v72, v79);
      }
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB9965C8);
  }
}

uint64_t sub_1B65C40EC(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)a1 + 48) >= *(double *)(*(void *)a2 + 48)) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void sub_1B65C410C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(a1 + 60) |= 1u;
  sub_1B65C3024(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B65C411C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B64B2678(a1, a2, a3, a4, a5, a6, a7, a8);

  return sub_1B64B0CB4(a1, v9, v10, v11, v12, v13, v14, v15);
}

void sub_1B65C4154(void *object, CFNotificationCenterRef center)
{
  if (center) {
    CFNotificationCenterPostNotificationWithOptions(center, @"kCFXWorldDidUpdateNotification", object, 0, 4uLL);
  }
}

dispatch_queue_t sub_1B65C4180()
{
  CFArrayRef v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v1 = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.vfx.transaction-queue", v1);
  qword_1EB9954D8 = (uint64_t)result;
  return result;
}

void sub_1B65C41C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"t");
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9)
  {
    uint64_t v10 = MEMORY[0x1E4F14428];
    dispatch_async(v10, v9);
  }
}

uint64_t sub_1B65C4950(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_immediateMode(VFXTransaction, a2, a3, a4))
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v5();
  }
  else
  {
    uint64_t v7 = NSStringFromSelector(*(SEL *)(a1 + 40));
    sub_1B63F2F54(16, @"Unreachable code: Command enqueued by %@ was expected to be run in immediate mode", v8, v9, v10, v11, v12, v13, (uint64_t)v7);
    objc_msgSend_setImmediateMode_(VFXTransaction, v14, 1, v15);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    return objc_msgSend_setImmediateMode_(VFXTransaction, v16, 0, v17);
  }
}

void *sub_1B65C4B94(void *a1, size_t a2, size_t size, unint64_t a4)
{
  if (a4 == 1)
  {
    uint64_t v6 = malloc_type_malloc(size, 0x295520E9uLL);
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if ((a4 & (a4 - 1)) != 0 || a4 >= 8) {
    size_t v8 = a4;
  }
  else {
    size_t v8 = 8;
  }
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, v8, size, 0xBA8A1232uLL)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = memptr;
  }
  if (a2) {
LABEL_14:
  }
    memcpy(v6, a1, a2);
LABEL_15:
  free(a1);
  return v6;
}

double sub_1B65C4C3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = a1;
  *(_OWORD *)a2 = xmmword_1B6E72590;
  *(void *)&double result = 255;
  *(void *)(a2 + 16) = 255;
  *(_DWORD *)(a2 + 24) = 255;
  *(unsigned char *)(a2 + 28) = 0;
  return result;
}

uint64_t sub_1B65C4C64(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B65C4C94(const void *a1)
{
  if (qword_1E9DDBC78 != -1) {
    dispatch_once_f(&qword_1E9DDBC78, &qword_1E9DDBC70, (dispatch_function_t)sub_1B65C4C64);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1E9DDBC70, 0xB8uLL);

  return sub_1B65C7CD8(v2, a1);
}

uint64_t sub_1B65C4D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
  }

  return sub_1B65C4D74(a1, a2);
}

uint64_t sub_1B65C4D74(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (v5 >= v4)
  {
    sub_1B65C7EDC(a1, 2 * v4);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
  }
  *(_DWORD *)(a1 + 16) = v5 + 1;
  uint64_t v6 = sub_1B65C8278(a1, v5);
  sub_1B649F7D4(a2, v22);
  long long v7 = v22[1];
  size_t v8 = (_OWORD *)(*(void *)(a1 + 64) + 32 * v5);
  *size_t v8 = v22[0];
  v8[1] = v7;
  *(void *)(*(void *)(a1 + 104) + 8 * v5) = a2;
  sub_1B65C52D4(a1, v5, v9, v10, v11, v12, v13, v14);
  sub_1B65C8388((void *)a1, v5, v15, v16, v17, v18, v19, v20);
  return v6;
}

void sub_1B65C4E20(void *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
    if ((a2 & 0x80000000) != 0)
    {
LABEL_8:
      sub_1B63F2F54(16, @"Unreachable code: invalid spatial handle (%d) given", (uint64_t)a3, a4, a5, a6, a7, a8, a2);
      return;
    }
  }
  uint64_t v11 = a1[4];
  if (a2 >= (unint64_t)((a1[5] - v11) >> 2)) {
    goto LABEL_8;
  }
  uint64_t v12 = *(unsigned int *)(v11 + 4 * a2);
  float32x4_t v13 = a3[1];
  uint64_t v14 = (float32x4_t *)(a1[8] + 32 * v12);
  *uint64_t v14 = *a3;
  v14[1] = v13;
  if ((*(_WORD *)(a1[11] + 2 * v12) & 8) != 0)
  {
    __n128 v20 = (__n128)xmmword_1B6E725A0;
    __n128 v18 = (__n128)xmmword_1B6E4F370;
  }
  else
  {
    uint64_t v15 = sub_1B64A01D4(*(void *)(a1[13] + 8 * v12), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    float32x4_t v16 = *(float32x4_t *)(v15 + 16);
    float32x4_t v17 = *(float32x4_t *)(v15 + 32);
    __n128 v18 = (__n128)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v15 + 48), v17, *a3, 2), v16, *(float32x2_t *)a3->f32, 1), *(float32x4_t *)v15, COERCE_FLOAT(*a3));
    v18.n128_u32[3] = HIDWORD(*(unsigned long long *)a3);
    float32x4_t v19 = a3[1];
    v19.i32[1] = v19.i32[0];
    v19.i32[2] = (__int32)a3[1];
    __n128 v20 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)a3[1].f32, 1), (int32x4_t)a3[1]), vabsq_f32(v16)), vabsq_f32(*(float32x4_t *)v15), v19), vabsq_f32(v17), (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a3[1], (int32x4_t)a3[1]), (int32x4_t)a3[1]));
  }

  sub_1B65C4F68((uint64_t)a1, v12, v18, v20);
}

uint64_t sub_1B65C4F68(uint64_t result, unsigned int a2, __n128 a3, __n128 a4)
{
  int v4 = *(_DWORD *)(result + 24);
  if (v4 == 4)
  {
    uint64_t v5 = *(void *)(result + 96) + 96 * (a2 >> 2);
    *(_DWORD *)(v5 + 4 * (a2 & 3)) = a3.n128_u32[0];
    *(_DWORD *)(v5 + 4 * (a2 & 3 | 4)) = a3.n128_u32[1];
    *(_DWORD *)(v5 + 4 * (a2 & 3 | 8)) = a3.n128_u32[2];
    *(_DWORD *)(v5 + 4 * (a2 & 3 | 0xC)) = a4.n128_u32[0];
    *(_DWORD *)(v5 + 4 * (a2 & 3 | 0x10)) = a4.n128_u32[1];
    unsigned int v6 = a2 & 3 | 0x14;
    goto LABEL_5;
  }
  if (v4 == 8)
  {
    uint64_t v5 = *(void *)(result + 96) + 192 * (a2 >> 3);
    *(_DWORD *)(v5 + 4 * (a2 & 7)) = a3.n128_u32[0];
    *(_DWORD *)(v5 + 4 * (a2 & 7 | 8)) = a3.n128_u32[1];
    *(_DWORD *)(v5 + 4 * (a2 & 7 | 0x10)) = a3.n128_u32[2];
    *(_DWORD *)(v5 + 4 * (a2 & 7 | 0x18)) = a4.n128_u32[0];
    *(_DWORD *)(v5 + 4 * (a2 & 7 | 0x20)) = a4.n128_u32[1];
    unsigned int v6 = a2 & 7 | 0x28;
LABEL_5:
    *(_DWORD *)(v5 + 4 * v6) = a4.n128_u32[2];
    return result;
  }
  long long v7 = (__n128 *)(*(void *)(result + 96) + 32 * a2);
  *long long v7 = a3;
  v7[1] = a4;
  return result;
}

uint64_t sub_1B65C5058(uint64_t a1, unsigned int a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v11 = *(void *)(a1 + 32);
    if (a2 < (unint64_t)((*(void *)(a1 + 40) - v11) >> 2)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_6:
  sub_1B63F2F54(17, @"Assertion '%s' failed. invalid spatial handle (%d) given", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"handle >= 0 && ((uint32_t)handle < cullingSystem->_handles.size())");
  uint64_t v11 = *(void *)(a1 + 32);
LABEL_7:
  unsigned int v12 = *(_DWORD *)(v11 + 4 * (int)a2);
  __n128 v13 = *a3;
  __n128 v14 = a3[1];

  return sub_1B65C4F68(a1, v12, v13, v14);
}

void sub_1B65C510C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v8) = a4;
  if (a1)
  {
    if (!a4) {
      return;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
    if (!v8) {
      return;
    }
  }
  uint64_t v8 = v8;
  unsigned int v12 = (float32x4_t *)(a3 + 32);
  do
  {
    uint64_t v14 = *a2++;
    uint64_t v13 = v14;
    if (v14 != -1)
    {
      uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 32) + 4 * v13);
      if (v15 < *(_DWORD *)(a1 + 16))
      {
        __n128 v16 = (__n128)xmmword_1B6E4F370;
        __n128 v17 = (__n128)xmmword_1B6E725A0;
        if ((*(_WORD *)(*(void *)(a1 + 88) + 2 * v15) & 8) == 0)
        {
          float32x4_t v18 = v12[-2];
          float32x4_t v19 = v12[-1];
          __n128 v20 = (float32x4_t *)(*(void *)(a1 + 64) + 32 * v15);
          __n128 v16 = (__n128)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v12[1], *v12, *v20, 2), v19, *(float32x2_t *)v20->f32, 1), v18, COERCE_FLOAT(*v20));
          v16.n128_u32[3] = HIDWORD(*(unsigned long long *)v20);
          float32x4_t v21 = v20[1];
          v21.i32[1] = v21.i32[0];
          v21.i32[2] = (__int32)v20[1];
          __n128 v17 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v20[1].f32, 1), (int32x4_t)v20[1]), vabsq_f32(v19)), vabsq_f32(v18), v21), vabsq_f32(*v12), (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v20[1], (int32x4_t)v20[1]), (int32x4_t)v20[1]));
        }
        sub_1B65C4F68(a1, v15, v16, v17);
      }
    }
    v12 += 4;
    --v8;
  }
  while (v8);
}

uint64_t sub_1B65C5230(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v10 = *(void *)(a1 + 32);
    if (a2 < (unint64_t)((*(void *)(a1 + 40) - v10) >> 2)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_6:
  sub_1B63F2F54(17, @"Assertion '%s' failed. invalid spatial handle (%d) given", a3, a4, a5, a6, a7, a8, (uint64_t)"handle >= 0 && ((uint32_t)handle < cullingSystem->_handles.size())");
  uint64_t v10 = *(void *)(a1 + 32);
LABEL_7:
  uint64_t v11 = *(unsigned int *)(v10 + 4 * (int)a2);

  return sub_1B65C52D4(a1, v11, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B65C52D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(result + 16) > a2)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = *(void *)(result + 104);
    uint64_t v10 = *(void *)(v9 + 8 * a2);
    if (v10)
    {
      uint64_t v11 = a2;
      uint64_t v12 = sub_1B64A3808(*(void *)(v9 + 8 * a2), a2, a3, a4, a5, a6, a7, a8);
      uint64_t v13 = v8[10];
      *(_DWORD *)(v8[9] + 4 * v11) = v12;
      *(_DWORD *)(v13 + 4 * v11) = HIDWORD(v12);
      if (sub_1B64A31E8(v10, v14, v15, v16, v17, v18, v19, v20)) {
        unsigned __int8 v28 = 3;
      }
      else {
        unsigned __int8 v28 = 1;
      }
      if (sub_1B64A3638(v10, v21, v22, v23, v24, v25, v26, v27)) {
        v28 |= 4u;
      }
      if (sub_1B649F9E0(v10, v29, v30, v31, v32, v33, v34, v35)) {
        v28 |= 0x10u;
      }
      if (sub_1B649FA1C(v10, v36, v37, v38, v39, v40, v41, v42)) {
        v28 |= 8u;
      }
      if (sub_1B64A04D4(v10, v43, v44, v45, v46, v47, v48, v49)) {
        v28 |= 0x20u;
      }
      uint64_t result = sub_1B64A4DAC(v10);
      *(_WORD *)(v8[11] + 2 * v11) = (256 << result) & 0xFF00 | v28;
    }
  }
  return result;
}

double sub_1B65C53B0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
  }

  return sub_1B65C5414(a1, a2, a3, a4, a5, a6, a7, a8);
}

double sub_1B65C5414(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 0x80000000) != 0
    || (uint64_t v10 = *(void *)(a1 + 32), a2 >= (unint64_t)((*(void *)(a1 + 40) - v10) >> 2)))
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. invalid spatial handle (%d) given", a3, a4, a5, a6, a7, a8, (uint64_t)"handle >= 0 && ((uint32_t)handle < _handles.size())");
    uint64_t v10 = *(void *)(a1 + 32);
  }
  unint64_t v11 = *(unsigned int *)(v10 + 4 * (int)a2);
  unsigned int v12 = *(_DWORD *)(a1 + 16);
  if (v11 >= v12)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. handle should not point to non existing index", a3, a4, a5, a6, a7, a8, (uint64_t)"indexToRemove < _count");
    unsigned int v12 = *(_DWORD *)(a1 + 16);
  }
  unint64_t v13 = v12 - 1;
  *(_DWORD *)(a1 + 16) = v13;
  if (v11 == v13)
  {
    int v14 = 1 << ((v12 - 1) & 7);
    unint64_t v15 = v13 >> 3;
  }
  else
  {
    __n128 v16 = sub_1B65C5F68(a1, v12 - 1);
    sub_1B65C4F68(a1, v11, v16, v17);
    uint64_t v18 = *(void *)(a1 + 64);
    uint64_t v19 = (_OWORD *)(v18 + 32 * v13);
    long long v20 = v19[1];
    uint64_t v21 = (_OWORD *)(v18 + 32 * v11);
    *uint64_t v21 = *v19;
    v21[1] = v20;
    *(void *)(*(void *)(a1 + 104) + 8 * v11) = *(void *)(*(void *)(a1 + 104) + 8 * v13);
    uint64_t v22 = *(void *)(a1 + 80);
    *(_DWORD *)(*(void *)(a1 + 72) + 4 * v11) = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v13);
    *(_DWORD *)(v22 + 4 * v11) = *(_DWORD *)(v22 + 4 * v13);
    *(_WORD *)(*(void *)(a1 + 88) + 2 * v11) = *(_WORD *)(*(void *)(a1 + 88) + 2 * v13);
    int v14 = 1 << (v13 & 7);
    uint64_t v23 = *(void *)(a1 + 112);
    unint64_t v15 = v13 >> 3;
    LODWORD(v22) = 1 << (v11 & 7);
    char v24 = *(unsigned char *)(v23 + (v11 >> 3));
    char v25 = v24 & ~(_BYTE)v22;
    char v26 = v24 | v22;
    if ((v14 & *(unsigned char *)(v23 + (v13 >> 3))) == 0) {
      char v26 = v25;
    }
    *(unsigned char *)(v23 + (v11 >> 3)) = v26;
    *(_DWORD *)(*(void *)(a1 + 32)
              + 4 * *(int *)(*(void *)(*(void *)(a1 + 104) + 8 * v13) + 216)) = v11;
  }
  sub_1B65C4F68(a1, v13, (__n128)xmmword_1B6E72900, (__n128)xmmword_1B6E72910);
  uint64_t v27 = (_OWORD *)(*(void *)(a1 + 64) + 32 * v13);
  double result = 0.0;
  *uint64_t v27 = xmmword_1B6E4F370;
  v27[1] = xmmword_1B6E51230;
  *(void *)(*(void *)(a1 + 104) + 8 * v13) = 0;
  uint64_t v29 = *(void *)(a1 + 80);
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v13) = 0;
  *(_DWORD *)(v29 + 4 * v13) = 0;
  *(_WORD *)(*(void *)(a1 + 88) + 2 * v13) = 0;
  *(unsigned char *)(*(void *)(a1 + 112) + v15) &= ~(_BYTE)v14;
  *(_DWORD *)(*(void *)(a1 + 32) + 4 * (int)a2) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = a2;
  return result;
}

void sub_1B65C5604(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = v2;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!v11) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v2, v3, v4, v5, v6, v7, (uint64_t)"cullingSystem");
  }
  uint64_t v13 = *(void *)(v12 + 88);
  uint64_t v28 = *(void *)(v12 + 96);
  uint64_t v29 = v13;
  long long v30 = *(_OWORD *)(v12 + 72);
  uint64_t v31 = *(void *)(v12 + 64);
  uint64_t v32 = *(void *)(v12 + 104);
  if (v8)
  {
    long long v14 = *(_OWORD *)v8;
    uint64_t v15 = *(void *)(v8 + 16);
    int v16 = *(_DWORD *)(v8 + 24);
    char v17 = *(unsigned char *)(v8 + 28);
    LOWORD(v26[0]) = *(_WORD *)(v8 + 29);
    BYTE2(v26[0]) = *(unsigned char *)(v8 + 31);
    uint64_t v18 = *(void *)(v8 + 32);
  }
  else
  {
    uint64_t v18 = 0;
    char v17 = 0;
    long long v14 = xmmword_1B6E72590;
    uint64_t v15 = 255;
    int v16 = 255;
  }
  uint64_t v19 = 0;
  long long v33 = v14;
  uint64_t v34 = v15;
  int v35 = v16;
  char v36 = v17;
  __int16 v37 = v26[0];
  char v38 = BYTE2(v26[0]);
  uint64_t v39 = v18;
  int v41 = 1;
  do
  {
    *(float32x4_t *)&v27[v19] = vnegq_f32(*(float32x4_t *)(v10 + v19));
    v19 += 16;
  }
  while (v19 != 96);
  unsigned int v20 = *(_DWORD *)(v12 + 16) + 2047;
  memset(v26, 0, 512);
  uint64_t v40 = v26;
  if (v20 >= 0x800)
  {
    unsigned int v21 = v20 >> 11;
    unsigned int v22 = 2048;
    do
    {
      unsigned int v23 = *(_DWORD *)(v12 + 16);
      if (v22 >= v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = v22;
      }
      unsigned int v25 = (*(uint64_t (**)(unsigned char *, void, uint64_t))(v12 + 176))(v27, v22 - 2048, v24);
      if (v25) {
        (*(void (**)(uint64_t, _OWORD *, void))(v39 + 16))(v39, v40, v25);
      }
      v22 += 2048;
      --v21;
    }
    while (v21);
  }
}

void sub_1B65C5818(uint64_t a1, uint64_t a2)
{
  *(double *)&long long v8 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!v13)
  {
    long long v28 = v9;
    long long v29 = v10;
    long long v27 = v8;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v2, v3, v4, v5, v6, v7, (uint64_t)"cullingSystem");
    long long v8 = v27;
    long long v9 = v28;
    long long v10 = v29;
  }
  uint64_t v15 = *(void *)(v14 + 88);
  uint64_t v31 = *(void *)(v14 + 96);
  unsigned int v16 = *(_DWORD *)(v14 + 16) + 2047;
  memset(v48, 0, 512);
  uint64_t v32 = v15;
  long long v33 = *(_OWORD *)(v14 + 72);
  uint64_t v34 = *(void *)(v14 + 64);
  uint64_t v35 = *(void *)(v14 + 104);
  if (v12)
  {
    long long v17 = *(_OWORD *)v12;
    uint64_t v18 = *(void *)(v12 + 16);
    int v19 = *(_DWORD *)(v12 + 24);
    char v20 = *(unsigned char *)(v12 + 28);
    __int16 v46 = *(_WORD *)(v12 + 29);
    char v47 = *(unsigned char *)(v12 + 31);
    uint64_t v21 = *(void *)(v12 + 32);
  }
  else
  {
    uint64_t v21 = 0;
    char v20 = 0;
    long long v17 = xmmword_1B6E72590;
    uint64_t v18 = 255;
    int v19 = 255;
  }
  uint64_t v37 = v18;
  int v38 = v19;
  char v39 = v20;
  __int16 v40 = v46;
  char v41 = v47;
  uint64_t v42 = v21;
  int v45 = 1;
  uint64_t v43 = v48;
  uint64_t v44 = &v46;
  v30[0] = v8;
  v30[1] = v9;
  long long v36 = v17;
  void v30[2] = v10;
  if (v16 >= 0x800)
  {
    unsigned int v22 = v16 >> 11;
    if (v22 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v22;
    }
    unsigned int v24 = 2048;
    do
    {
      unsigned int v25 = *(_DWORD *)(v14 + 16);
      if (v24 >= v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = v24;
      }
      sub_1B65C5A48(v14, (uint64_t)v30, v24 - 2048, v26);
      v24 += 2048;
      --v23;
    }
    while (v23);
  }
}

uint64_t sub_1B65C5A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v60[1] = *(uint64_t (**)(long long *, long long *))MEMORY[0x1E4F143B8];
  uint64_t v6 = 168;
  if (!*(unsigned char *)(a2 + 844)) {
    uint64_t v6 = 160;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + v6))(a2, a3, a4);
  if (result)
  {
    unint64_t v9 = result;
    if (*(unsigned char *)(a2 + 844))
    {
      MEMORY[0x1F4188790](result, v8);
      long long v17 = &v57 - v9;
      uint64_t v18 = 0;
      int v19 = &v17->i32[2];
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v57 = _Q0;
      do
      {
        uint64_t v24 = *(unsigned int *)(*(void *)(a2 + 864) + v18);
        uint64_t v25 = *(void *)(*(void *)(a1 + 104) + 8 * v24);
        uint64_t v26 = *(void *)(a1 + 64) + 32 * v24;
        float32x4_t v27 = *(float32x4_t *)(v26 + 16);
        float32x4_t v58 = *(float32x4_t *)v26;
        float32x4_t v59 = v27;
        uint64_t v28 = sub_1B64A01D4(v25, v10, v11, v12, v13, v14, v15, v16);
        float32x4_t v29 = *(float32x4_t *)(v28 + 16);
        float32x4_t v30 = *(float32x4_t *)(v28 + 32);
        float32x4_t v31 = vmulq_f32(*(float32x4_t *)v28, *(float32x4_t *)v28);
        float32x4_t v32 = vmlaq_laneq_f32(vmlaq_lane_f32(vmlaq_n_f32(*(float32x4_t *)(v28 + 48), *(float32x4_t *)v28, v58.f32[0]), v29, *(float32x2_t *)v58.f32, 1), v30, v58, 2);
        float32x4_t v33 = vaddq_f32(vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2));
        v33.f32[0] = sqrtf(v33.f32[0]);
        float32x4_t v34 = vmulq_f32(v29, v29);
        v34.i64[0] = vaddq_f32(vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2)).u64[0];
        v34.f32[0] = sqrtf(v34.f32[0]);
        float32x4_t v35 = vmulq_f32(v30, v30);
        v35.i64[0] = vaddq_f32(vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2)).u64[0];
        v35.f32[0] = sqrtf(v35.f32[0]);
        float32x4_t v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0);
        v33.i32[1] = v34.i32[0];
        v33.i32[2] = v35.i32[0];
        int32x4_t v37 = (int32x4_t)vmulq_f32(*(float32x4_t *)v28, vdivq_f32(v57, v36));
        int32x4_t v38 = (int32x4_t)vmulq_f32(v29, vdivq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0)));
        int32x4_t v39 = (int32x4_t)vmulq_f32(v30, vdivq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0)));
        float32x4_t v40 = vmulq_f32(v33, v59);
        float32x4_t v41 = vsubq_f32(v32, *(float32x4_t *)a2);
        int32x4_t v42 = vzip2q_s32(v37, v39);
        float32x4_t v43 = (float32x4_t)vzip1q_s32(vzip1q_s32(v37, v39), v38);
        float32x4_t v44 = (float32x4_t)vtrn2q_s32(v37, v38);
        v44.i32[2] = v39.i32[1];
        float32x4_t v45 = (float32x4_t)vzip1q_s32(v42, vdupq_laneq_s32(v38, 2));
        float32x4_t v46 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v44, *(float32x2_t *)v41.f32, 1), v43, v41.f32[0]), v45, v41, 2);
        float32x4_t v47 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v44, *(float32x2_t *)(a2 + 16), 1), v43, COERCE_FLOAT(*(_OWORD *)(a2 + 16))), v45, *(float32x4_t *)(a2 + 16), 2);
        float32x4_t v48 = vdivq_f32(vaddq_f32(v46, v40), v47);
        float32x4_t v49 = vdivq_f32(vsubq_f32(v46, v40), v47);
        v48.i32[3] = 0;
        v49.i32[3] = 0;
        float32x4_t v50 = vminnmq_f32(v48, v49);
        __n128 v53 = (__n128)vmaxnmq_f32(v48, v49);
        float v51 = fmaxf(fmaxf(v50.f32[0], v50.f32[2]), v50.f32[1]);
        float v52 = fminf(fminf(v53.n128_f32[0], v53.n128_f32[2]), v53.n128_f32[1]);
        v53.n128_u64[0] = 0;
        if (v52 >= v51 && v52 >= 0.0 && v51 < *(float *)(a2 + 44))
        {
          if (v51 >= 0.0) {
            v53.n128_f32[0] = v51;
          }
          else {
            v53.n128_f32[0] = v52;
          }
        }
        v18 += 4;
        *((void *)v19 - 1) = v25;
        *int v19 = v53.n128_u32[0];
        v19 += 4;
      }
      while (4 * v9 != v18);
      v60[0] = (uint64_t (*)(long long *, long long *))sub_1B65C8454;
      sub_1B65C8468((long long *)&v57 - v9, (long long *)&v57, v60, 126 - 2 * __clz(v9), 1, v53);
      uint64_t v55 = 0;
      do
      {
        uint64_t v56 = v17->i64[0];
        ++v17;
        *(void *)(*(void *)(a2 + 856) + v55) = v56;
        v55 += 8;
      }
      while (8 * v9 != v55);
    }
    return (*(uint64_t (**)(void))(*(void *)(a2 + 848) + 16))();
  }
  return result;
}

void sub_1B65C5D14(uint64_t a1, uint64_t a2)
{
  *(double *)&long long v8 = MEMORY[0x1F4188790](a1, a2);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!v12)
  {
    long long v26 = v8;
    long long v27 = v9;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v2, v3, v4, v5, v6, v7, (uint64_t)"cullingSystem");
    long long v8 = v26;
    long long v9 = v27;
  }
  uint64_t v14 = *(void *)(v13 + 88);
  uint64_t v31 = *(void *)(v13 + 96);
  unsigned int v15 = *(_DWORD *)(v13 + 16) + 2047;
  memset(v45, 0, 512);
  uint64_t v32 = v14;
  long long v33 = *(_OWORD *)(v13 + 72);
  uint64_t v34 = *(void *)(v13 + 64);
  uint64_t v35 = *(void *)(v13 + 104);
  if (v11)
  {
    long long v16 = *(_OWORD *)v11;
    uint64_t v17 = *(void *)(v11 + 16);
    int v18 = *(_DWORD *)(v11 + 24);
    char v19 = *(unsigned char *)(v11 + 28);
    __int16 v28 = *(_WORD *)(v11 + 29);
    char v29 = *(unsigned char *)(v11 + 31);
    uint64_t v20 = *(void *)(v11 + 32);
  }
  else
  {
    uint64_t v20 = 0;
    char v19 = 0;
    long long v16 = xmmword_1B6E72590;
    uint64_t v17 = 255;
    int v18 = 255;
  }
  long long v36 = v16;
  uint64_t v37 = v17;
  int v38 = v18;
  char v39 = v19;
  __int16 v40 = v28;
  char v41 = v29;
  uint64_t v42 = v20;
  int v44 = 1;
  v30[0] = v8;
  v30[1] = v9;
  float32x4_t v43 = v45;
  if (v15 >= 0x800)
  {
    int v21 = 0;
    unsigned int v22 = v15 >> 11;
    if (v22 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v22;
    }
    do
    {
      int v24 = v21 + 2048;
      unsigned int v25 = (*(uint64_t (**)(_OWORD *))(v13 + 152))(v30);
      if (v25) {
        (*(void (**)(uint64_t, unsigned char *, void))(v42 + 16))(v42, v43, v25);
      }
      int v21 = v24;
      --v23;
    }
    while (v23);
  }
}

double sub_1B65C5F48(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 32) + 4 * a2);
  if (a3) {
    long long v4 = *(_OWORD *)(*(void *)(a1 + 64) + 32 * v3);
  }
  else {
    *(void *)&long long v4 = sub_1B65C5F68(a1, v3).n128_u64[0];
  }
  return *(double *)&v4;
}

__n128 sub_1B65C5F68(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 == 4)
  {
    long long v9 = (unsigned __int32 *)(*(void *)(a1 + 96) + 96 * (a2 >> 2) + 4 * (a2 & 3));
    __asm { FMOV            V0.4S, #1.0 }
    result.n128_u32[0] = *v9;
    result.n128_u32[1] = v9[4];
  }
  else if (v2 == 8)
  {
    uint64_t v3 = (unsigned __int32 *)(*(void *)(a1 + 96) + 192 * (a2 >> 3) + 4 * (a2 & 7));
    __asm { FMOV            V0.4S, #1.0 }
    result.n128_u32[0] = *v3;
    result.n128_u32[1] = v3[8];
  }
  else
  {
    return *(__n128 *)(*(void *)(a1 + 96) + 32 * a2);
  }
  return result;
}

__n128 sub_1B65C6018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  unsigned int v25 = &v24;
  uint64_t v26 = 0x5002000000;
  long long v27 = sub_1B65C61DC;
  __int16 v28 = nullsub_149;
  long long v29 = xmmword_1B6E4F370;
  long long v30 = xmmword_1B6E51230;
  if (a3)
  {
    simd_float4x4 v32 = *(simd_float4x4 *)sub_1B64A01D4(a2, a2, a3, a4, a5, a6, a7, a8);
    simd_float4x4 v33 = __invert_f4(v32);
    uint64_t v10 = *(int *)(a2 + 216);
    if (v10 != -1)
    {
      uint64_t v11 = (long long *)(*(void *)(a1 + 64) + 32 * *(unsigned int *)(*(void *)(a1 + 32) + 4 * v10));
      long long v12 = *v11;
      long long v13 = v11[1];
      uint64_t v14 = v25;
      *((_OWORD *)v25 + 3) = v12;
      *((_OWORD *)v14 + 4) = v13;
    }
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 0x40000000;
    v19[2] = sub_1B65C61EC;
    v19[3] = &unk_1E6144EB0;
    uint64_t v22 = a2;
    uint64_t v23 = a1;
    simd_float4x4 v20 = v33;
    int v21 = &v24;
    unsigned int v15 = v19;
  }
  else
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = sub_1B65C62C0;
    v18[3] = &unk_1E6144ED8;
    void v18[4] = &v24;
    v18[5] = a1;
    unsigned int v15 = v18;
  }
  sub_1B64A18A4(a2, (uint64_t)v15);
  long long v17 = *((_OWORD *)v25 + 3);
  _Block_object_dispose(&v24, 8);
  return (__n128)v17;
}

__n128 sub_1B65C61DC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t sub_1B65C61EC(float32x4_t *a1, uint64_t a2)
{
  if (a1[6].i64[1] != a2)
  {
    uint64_t v2 = *(int *)(a2 + 216);
    if (v2 != -1)
    {
      __n128 v4 = sub_1B65C5F68(a1[7].i64[0], *(_DWORD *)(*(void *)(a1[7].i64[0] + 32) + 4 * v2));
      float32x4_t v5 = a1[2];
      float32x4_t v6 = a1[3];
      float32x4_t v7 = a1[4];
      float32x4_t v8 = vmlaq_laneq_f32(vmlaq_lane_f32(vmlaq_n_f32(a1[5], v5, v4.n128_f32[0]), v6, (float32x2_t)v4.n128_u64[0], 1), v7, (float32x4_t)v4, 2);
      v8.i32[3] = v4.n128_i32[3];
      float32x4_t v10 = (float32x4_t)v9;
      v10.i32[1] = v9.i32[0];
      v10.i32[2] = v9.i32[0];
      float32x4_t v11 = vmlaq_f32(vmlaq_f32(vmulq_f32(v10, vabsq_f32(v5)), vabsq_f32(v6), (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v9.i8, 1), v9)), vabsq_f32(v7), (float32x4_t)vzip2q_s32(vtrn1q_s32(v9, v9), v9));
      long long v12 = *(float32x4_t **)(a1[6].i64[0] + 8);
      float32x4_t v13 = v12[3];
      float32x4_t v14 = v12[4];
      float32x4_t v15 = vminnmq_f32(vsubq_f32(v8, v11), vsubq_f32(v13, v14));
      float32x4_t v16 = vmaxnmq_f32(vaddq_f32(v8, v11), vaddq_f32(v14, v13));
      v14.i64[0] = 0x3F0000003F000000;
      v14.i64[1] = 0x3F0000003F000000;
      v12[3] = vmulq_f32(vaddq_f32(v16, v15), v14);
      v12[4] = vmulq_f32(vsubq_f32(v16, v15), v14);
    }
  }
  return 0;
}

uint64_t sub_1B65C62C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 216);
  if (v2 != -1)
  {
    __n128 v4 = sub_1B65C5F68(*(void *)(a1 + 40), *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 32) + 4 * v2));
    float32x4_t v5 = *(float32x4_t **)(*(void *)(a1 + 32) + 8);
    float32x4_t v6 = v5[3];
    float32x4_t v7 = v5[4];
    float32x4_t v9 = vminnmq_f32(vsubq_f32((float32x4_t)v4, v8), vsubq_f32(v6, v7));
    float32x4_t v10 = vmaxnmq_f32(vaddq_f32((float32x4_t)v4, v8), vaddq_f32(v7, v6));
    v6.i64[0] = 0x3F0000003F000000;
    v6.i64[1] = 0x3F0000003F000000;
    v5[3] = vmulq_f32(vaddq_f32(v10, v9), v6);
    v5[4] = vmulq_f32(vsubq_f32(v10, v9), v6);
  }
  return 0;
}

uint64_t sub_1B65C633C(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t v13 = v2;
  long long v14 = *(_OWORD *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 104);
  if (a2)
  {
    long long v3 = *(_OWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 16);
    int v5 = *(_DWORD *)(a2 + 24);
    char v6 = *(unsigned char *)(a2 + 28);
    __int16 v9 = *(_WORD *)(a2 + 29);
    char v10 = *(unsigned char *)(a2 + 31);
    uint64_t v7 = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v7 = 0;
    char v6 = 0;
    long long v3 = xmmword_1B6E72590;
    uint64_t v4 = 255;
    int v5 = 255;
  }
  long long v17 = v3;
  uint64_t v18 = v4;
  int v19 = v5;
  char v20 = v6;
  __int16 v21 = v9;
  char v22 = v10;
  uint64_t v23 = v7;
  int v24 = 1;
  return (*(uint64_t (**)(unsigned char *, void, void))(a1 + 144))(v11, 0, *(unsigned int *)(a1 + 16));
}

uint64_t sub_1B65C643C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if ((a2 & 7) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 3;
  if (v11 >= (v8 + 7) >> 3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v13 = *(void *)(a1 + 776);
  int8x16_t v14 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  uint64_t v15 = (const float *)(a1 + 816);
  uint64_t v16 = *(void *)(a1 + 784);
  long long v17 = (const float *)(a1 + 820);
  int8x16_t v18 = (int8x16_t)vld1q_dup_f32(v15);
  uint64_t v19 = *(void *)(a1 + 792);
  int8x16_t v20 = (int8x16_t)vld1q_dup_f32(v17);
  int32x4_t v21 = *(int32x4_t *)(a1 + 16);
  float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  float32x4_t v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  float32x4_t v24 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 0);
  float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1);
  float32x4_t v27 = (float32x4_t)vdupq_laneq_s32(v21, 2);
  unsigned int v28 = a2 & 0xFFFFFFF8;
  uint64_t v29 = *(void *)(a1 + 768);
  do
  {
    long long v30 = (float32x4_t *)(v29 + 192 * v11);
    int8x8_t v31 = vmovn_s16((int16x8_t)vandq_s8(vandq_s8(vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 16 * v11)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v13 + 16 * v11))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v19 + 32 * v11), v20), vandq_s8(*(int8x16_t *)(v16 + 32 * v11), v18))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(
                                                                                       *(int8x16_t *)(v19 + 32 * v11 + 16),
                                                                                       v20),
                                                                                     vandq_s8(*(int8x16_t *)(v16 + 32 * v11 + 16), v18))))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v30[6], v25), vabdq_f32(v22, *v30)), (int16x8_t)vcgeq_f32(vaddq_f32(v30[7], v25), vabdq_f32(v22, v30[1])))), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v30[8], v26), vabdq_f32(v23, v30[2])), (int16x8_t)vcgeq_f32(vaddq_f32(v30[9], v26), vabdq_f32(v23, v30[3]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v30[10], v27), vabdq_f32(v24, v30[4])), (int16x8_t)vcgeq_f32(vaddq_f32(v30[11], v27), vabdq_f32(v24, v30[5]))))));
    int8x16_t v32 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v31, *(int8x8_t *)v14.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B6E50330), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v31, *(int8x8_t *)v14.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B6E725B0));
    *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    unsigned __int32 v33 = vadd_s32(*(int32x2_t *)v32.i8, vdup_lane_s32(*(int32x2_t *)v32.i8, 1)).u32[0];
    if (v33) {
      BOOL v34 = 8 * (int)v11 >= v8;
    }
    else {
      BOOL v34 = 1;
    }
    if (!v34)
    {
      unint64_t v35 = v28;
      do
      {
        if (v33)
        {
          *(void *)(*(void *)(a1 + 856) + 8 * result) = *(void *)(*(void *)(a1 + 808) + 8 * v35);
          uint64_t result = (result + 1);
        }
        if (v33 < 2) {
          break;
        }
        ++v35;
        v33 >>= 1;
      }
      while (v35 < v8);
    }
    ++v11;
    v28 += 8;
  }
  while (v11 != (v8 + 7) >> 3);
  return result;
}

uint64_t sub_1B65C6690(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if ((a2 & 3) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 2;
  if (v11 >= (v8 + 3) >> 2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v13 = *(void *)(a1 + 776);
  int8x16_t v14 = (const float *)(a1 + 816);
  int8x16_t v15 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  uint64_t v16 = *(void *)(a1 + 784);
  int8x16_t v17 = (int8x16_t)vld1q_dup_f32(v14);
  int8x16_t v18 = (const float *)(a1 + 820);
  uint64_t v19 = *(void *)(a1 + 792);
  int8x16_t v20 = (int8x16_t)vld1q_dup_f32(v18);
  int32x4_t v21 = *(int32x4_t *)(a1 + 16);
  float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  float32x4_t v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  float32x4_t v24 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 0);
  float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1);
  float32x4_t v27 = (float32x4_t)vdupq_laneq_s32(v21, 2);
  unsigned int v28 = a2 & 0xFFFFFFFC;
  uint64_t v29 = *(void *)(a1 + 768);
  do
  {
    long long v30 = (float32x4_t *)(v29 + 96 * v11);
    int8x16_t v31 = vandq_s8(vandq_s8(vandq_s8(vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 8 * v11)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v19 + 16 * v11), v20), vandq_s8(*(int8x16_t *)(v16 + 16 * v11), v17)))), (int8x16_t)vcgeq_f32(vaddq_f32(v30[3], v25), vabdq_f32(v22, *v30))), vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v30[4], v26), vabdq_f32(v23, v30[1])), (int8x16_t)vcgeq_f32(vaddq_f32(v30[5], v27), vabdq_f32(v24, v30[2])))), (int8x16_t)xmmword_1B6E50330);
    *(int8x8_t *)v31.i8 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
    unsigned __int32 v32 = vadd_s32(*(int32x2_t *)v31.i8, vdup_lane_s32(*(int32x2_t *)v31.i8, 1)).u32[0];
    if (v32) {
      BOOL v33 = 4 * (int)v11 >= v8;
    }
    else {
      BOOL v33 = 1;
    }
    if (!v33)
    {
      unint64_t v34 = v28;
      do
      {
        if (v32)
        {
          *(void *)(*(void *)(a1 + 856) + 8 * result) = *(void *)(*(void *)(a1 + 808) + 8 * v34);
          uint64_t result = (result + 1);
        }
        if (v32 < 2) {
          break;
        }
        ++v34;
        v32 >>= 1;
      }
      while (v34 < v8);
    }
    ++v11;
    v28 += 4;
  }
  while (v11 != (v8 + 3) >> 2);
  return result;
}

uint64_t sub_1B65C6848(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = a1[48].i64[1];
  int v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  uint64_t v7 = a1[49].i64[0];
  __int32 v8 = a1[51].i32[0];
  __int32 v9 = a1[51].i32[1];
  uint64_t v10 = a1[49].i64[1];
  uint64_t v11 = a2;
  uint64_t v12 = (32 * a2) | 0x10;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v11) & v9 | *(_DWORD *)(v7 + 4 * v11) & v8) {
      BOOL v13 = (unsigned __int16)(v6 & *(_WORD *)(v5 + 2 * v11)) == 0;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13)
    {
      uint32x4_t v14 = (uint32x4_t)vcgeq_f32(vaddq_f32(*(float32x4_t *)(a1[48].i64[0] + v12), a1[1]), vabdq_f32(*a1, *(float32x4_t *)(a1[48].i64[0] + v12 - 16)));
      v14.i32[3] = v14.i32[2];
      if ((vminvq_u32(v14) & 0x80000000) != 0)
      {
        *(void *)(a1[53].i64[1] + 8 * result) = *(void *)(a1[50].i64[1] + 8 * v11);
        uint64_t result = (result + 1);
      }
    }
    ++v11;
    v12 += 32;
  }
  while (a3 != v11);
  return result;
}

double sub_1B65C6910(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if ((a2 & 7) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = *(void *)(a1 + 776);
  uint64_t v12 = a2 >> 3;
  BOOL v13 = (const float *)(a1 + 816);
  int v14 = *(_DWORD *)(a1 + 836);
  int v15 = *(_DWORD *)(a1 + 840);
  int32x2_t v16 = *(int32x2_t *)(a1 + 832);
  uint64_t v17 = *(void *)(a1 + 784);
  int8x16_t v18 = (const float *)(a1 + 820);
  int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v13);
  int8x16_t v20 = (int8x16_t)vld1q_dup_f32(v18);
  uint64_t v21 = *(void *)(a1 + 792);
  long long v72 = xmmword_1B6E72800;
  float32x4_t v73 = (float32x4_t)unk_1B6E72810;
  long long v74 = xmmword_1B6E72820;
  float32x4_t v75 = (float32x4_t)unk_1B6E72830;
  long long v70 = xmmword_1B6E727E0;
  float32x4_t v71 = (float32x4_t)unk_1B6E727F0;
  long long v66 = xmmword_1B6E72860;
  float32x4_t v67 = (float32x4_t)unk_1B6E72870;
  long long v68 = xmmword_1B6E72880;
  float32x4_t v69 = (float32x4_t)unk_1B6E72890;
  long long v64 = xmmword_1B6E72840;
  float32x4_t v65 = (float32x4_t)unk_1B6E72850;
  if (v12 >= (v8 + 7) >> 3)
  {
    float32x4_t v47 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v53.i64[0] = 0x80000000800000;
    v53.i64[1] = 0x80000000800000;
    v54.i64[0] = 0x80000000800000;
    v54.i64[1] = 0x80000000800000;
    v51.i64[0] = 0x80000000800000;
    v51.i64[1] = 0x80000000800000;
    v52.i64[0] = 0x80000000800000;
    v52.i64[1] = 0x80000000800000;
    v49.i64[0] = 0x80000000800000;
    v49.i64[1] = 0x80000000800000;
    float32x4_t v48 = v47;
    v50.i64[0] = 0x80000000800000;
    v50.i64[1] = 0x80000000800000;
    float32x4_t v45 = v47;
    float32x4_t v46 = v47;
    float32x4_t v43 = v47;
    float32x4_t v44 = v47;
  }
  else
  {
    int8x16_t v22 = (int8x16_t)vdupq_n_s32(v14 | (~v15 << 8));
    int8x16_t v23 = (int8x16_t)vdupq_lane_s32(v16, 0);
    uint64_t v24 = *(void *)(a1 + 768) + 192 * v12 + 96;
    do
    {
      uint64_t v25 = 0;
      uint16x8_t v26 = *(uint16x8_t *)(v11 + 16 * v12);
      int8x16_t v27 = (int8x16_t)vmovl_high_u16(v26);
      int8x16_t v28 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v26.i8);
      int8x8_t v29 = vmovn_s16((int16x8_t)vbicq_s8(vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v22, v28)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v22, v27))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v21 + 32 * v12), v20), vandq_s8(*(int8x16_t *)(v17 + 32 * v12), v19))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v21 + 32 * v12 + 16), v20), vandq_s8(*(int8x16_t *)(v17 + 32 * v12 + 16), v19))))),
                                   (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v23, v28)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v23, v27)))));
      int8x16_t v30 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v29, *(int8x8_t *)v19.i8)), 0x1FuLL));
      int8x16_t v31 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v29, *(int8x8_t *)v19.i8)), 0x1FuLL));
      do
      {
        unsigned __int32 v32 = (float32x4_t *)((char *)&v70 + v25);
        float32x4_t v33 = *(float32x4_t *)((char *)&v70 + v25 + 16);
        float32x4_t v34 = *(float32x4_t *)(v24 + v25 - 96);
        float32x4_t v35 = *(float32x4_t *)(v24 + v25 - 80);
        float32x4_t v36 = *(float32x4_t *)(v24 + v25);
        float32x4_t v37 = *(float32x4_t *)(v24 + v25 + 16);
        int8x16_t v38 = (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v29, *(int8x8_t *)v19.i8)), 0x1FuLL));
        int8x16_t v39 = (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v29, *(int8x8_t *)v19.i8)), 0x1FuLL));
        __int16 v40 = (float32x4_t *)((char *)&v64 + v25);
        float32x4_t v42 = *(float32x4_t *)((char *)&v64 + v25);
        float32x4_t v41 = *(float32x4_t *)((char *)&v64 + v25 + 16);
        *unsigned __int32 v32 = vminnmq_f32(*(float32x4_t *)((char *)&v70 + v25), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v34, v36), v31), vandq_s8(*(int8x16_t *)((char *)&v70 + v25), v38)));
        v32[1] = vminnmq_f32(v33, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v35, v37), v30), vandq_s8((int8x16_t)v33, v39)));
        *__int16 v40 = vmaxnmq_f32(v42, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v42, v38), vandq_s8((int8x16_t)vaddq_f32(v36, v34), v31)));
        v40[1] = vmaxnmq_f32(v41, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v41, v39), vandq_s8((int8x16_t)vaddq_f32(v37, v35), v30)));
        v25 += 32;
      }
      while (v25 != 96);
      ++v12;
      v24 += 192;
    }
    while (v12 != (v8 + 7) >> 3);
    float32x4_t v43 = (float32x4_t)v70;
    float32x4_t v44 = v71;
    float32x4_t v45 = (float32x4_t)v72;
    float32x4_t v46 = v73;
    float32x4_t v47 = (float32x4_t)v74;
    float32x4_t v48 = v75;
    float32x4_t v49 = (float32x4_t)v64;
    float32x4_t v50 = v65;
    float32x4_t v51 = (float32x4_t)v66;
    float32x4_t v52 = v67;
    float32x4_t v53 = (float32x4_t)v68;
    float32x4_t v54 = v69;
  }
  *(float *)&unsigned int v55 = vmaxvq_f32(vmaxnmq_f32(v51, v52));
  float32x4_t v56 = vmaxnmq_f32(v53, v54);
  __asm { FMOV            V2.4S, #1.0 }
  v62.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vminvq_f32(vminnmq_f32(v45, v46))), COERCE_UNSIGNED_INT(vminvq_f32(vminnmq_f32(v43, v44))));
  v62.i64[1] = __PAIR64__(_Q2.u32[3], COERCE_UNSIGNED_INT(vminvq_f32(vminnmq_f32(v47, v48))));
  _Q2.i64[0] = __PAIR64__(v55, COERCE_UNSIGNED_INT(vmaxvq_f32(vmaxnmq_f32(v49, v50))));
  _Q2.i32[2] = vmaxvq_f32(v56);
  v56.i64[0] = 0x3F0000003F000000;
  v56.i64[1] = 0x3F0000003F000000;
  *(void *)&double result = vmulq_f32(vaddq_f32(_Q2, v62), v56).u64[0];
  return result;
}

double sub_1B65C6C38(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if ((a2 & 3) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = *(void *)(a1 + 776);
  uint64_t v12 = a2 >> 2;
  BOOL v13 = (const float *)(a1 + 816);
  int v14 = *(_DWORD *)(a1 + 836);
  int v15 = *(_DWORD *)(a1 + 840);
  int32x2_t v16 = (const float *)(a1 + 832);
  int32x4_t v17 = (int32x4_t)vld1q_dup_f32(v16);
  uint64_t v18 = *(void *)(a1 + 784);
  int8x16_t v19 = (const float *)(a1 + 820);
  int8x16_t v20 = (int8x16_t)vld1q_dup_f32(v13);
  int8x16_t v21 = (int8x16_t)vld1q_dup_f32(v19);
  uint64_t v22 = *(void *)(a1 + 792);
  long long v50 = xmmword_1B6E728A0;
  float32x4_t v51 = (float32x4_t)unk_1B6E728B0;
  long long v52 = xmmword_1B6E728C0;
  long long v47 = xmmword_1B6E728D0;
  float32x4_t v48 = (float32x4_t)unk_1B6E728E0;
  long long v49 = xmmword_1B6E728F0;
  if (v12 >= (v8 + 3) >> 2)
  {
    float32x4_t v35 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v38.i64[0] = 0x80000000800000;
    v38.i64[1] = 0x80000000800000;
    v36.i64[0] = 0x80000000800000;
    v36.i64[1] = 0x80000000800000;
    v37.i64[0] = 0x80000000800000;
    v37.i64[1] = 0x80000000800000;
    float32x4_t v33 = v35;
    float32x4_t v34 = v35;
  }
  else
  {
    int8x16_t v23 = (int8x16_t)vdupq_n_s32(v14 | (~v15 << 8));
    uint64_t v24 = *(void *)(a1 + 768) + 96 * v12 + 48;
    do
    {
      uint64_t v25 = 0;
      int8x16_t v26 = (int8x16_t)vmovl_u16(*(uint16x4_t *)(v11 + 8 * v12));
      int8x16_t v27 = vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v17, (int32x4_t)v26), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 16 * v12), v21), vandq_s8(*(int8x16_t *)(v18 + 16 * v12), v20)))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v23, v26)));
      int16x4_t v28 = vmovn_s32((int32x4_t)v27);
      do
      {
        float32x4_t v29 = *(float32x4_t *)(v24 + v25 - 48);
        float32x4_t v30 = *(float32x4_t *)(v24 + v25);
        int8x16_t v31 = (int8x16_t)vmovl_s16(v28);
        float32x4_t v32 = *(float32x4_t *)((char *)&v47 + v25);
        *(long long *)((char *)&v50 + v25) = (__int128)vminnmq_f32(*(float32x4_t *)((char *)&v50 + v25), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v29, v30), v27), vbicq_s8(*(int8x16_t *)((char *)&v50 + v25), v31)));
        *(long long *)((char *)&v47 + v25) = (__int128)vmaxnmq_f32(v32, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v32, v31), vandq_s8((int8x16_t)vaddq_f32(v30, v29), v27)));
        v25 += 16;
      }
      while (v25 != 48);
      ++v12;
      v24 += 96;
    }
    while (v12 != (v8 + 3) >> 2);
    float32x4_t v34 = (float32x4_t)v50;
    float32x4_t v33 = v51;
    float32x4_t v35 = (float32x4_t)v52;
    float32x4_t v37 = (float32x4_t)v47;
    float32x4_t v36 = v48;
    float32x4_t v38 = (float32x4_t)v49;
  }
  __asm { FMOV            V6.4S, #1.0 }
  v44.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vminvq_f32(v33)), COERCE_UNSIGNED_INT(vminvq_f32(v34)));
  v44.i64[1] = __PAIR64__(_Q6.u32[3], COERCE_UNSIGNED_INT(vminvq_f32(v35)));
  _Q6.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vmaxvq_f32(v36)), COERCE_UNSIGNED_INT(vmaxvq_f32(v37)));
  _Q6.i32[2] = vmaxvq_f32(v38);
  v45.i64[0] = 0x3F0000003F000000;
  v45.i64[1] = 0x3F0000003F000000;
  *(void *)&double result = vmulq_f32(vaddq_f32(_Q6, v44), v45).u64[0];
  return result;
}

double sub_1B65C6E70(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3)
  {
    v11.i64[0] = 0;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
    int v4 = *(_DWORD *)(a1 + 832);
    int v5 = *(_DWORD *)(a1 + 816);
    int v6 = *(_DWORD *)(a1 + 820);
    uint64_t v7 = (int *)(*(void *)(a1 + 784) + 4 * a2);
    int v8 = (int *)(*(void *)(a1 + 792) + 4 * a2);
    __int32 v9 = (unsigned __int16 *)(*(void *)(a1 + 776) + 2 * a2);
    uint64_t v10 = (float32x4_t *)(*(void *)(a1 + 768) + 32 * a2 + 16);
    float32x4_t v11 = (float32x4_t)xmmword_1B6E4F370;
    float32x4_t v12 = (float32x4_t)xmmword_1B6E51230;
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    unint64_t v14 = a3 - (unint64_t)a2;
    do
    {
      int v15 = *v7++;
      int v16 = v15 & v5;
      int v17 = *v8++;
      int v18 = v17 & v6;
      int v19 = *v9++;
      int v20 = v18 | v16;
      int v21 = v4 & v19;
      if ((v3 & v19) == 0 && v20 != 0 && v21 != 0)
      {
        float32x4_t v24 = v10[-1];
        float32x4_t v25 = vminnmq_f32(vsubq_f32(v11, v12), vsubq_f32(v24, *v10));
        float32x4_t v26 = vmaxnmq_f32(vaddq_f32(v12, v11), vaddq_f32(*v10, v24));
        float32x4_t v11 = vmulq_f32(vaddq_f32(v26, v25), v13);
        float32x4_t v12 = vmulq_f32(vsubq_f32(v26, v25), v13);
      }
      v10 += 2;
      --v14;
    }
    while (v14);
  }
  return *(double *)v11.i64;
}

uint64_t sub_1B65C6F50(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if ((a2 & 7) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 3;
  if (v11 >= (v8 + 7) >> 3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v13 = *(void *)(a1 + 776);
  int8x16_t v14 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  int v15 = (const float *)(a1 + 816);
  int v16 = (const float *)(a1 + 820);
  int8x16_t v17 = (int8x16_t)vld1q_dup_f32(v15);
  int8x16_t v18 = (int8x16_t)vld1q_dup_f32(v16);
  uint64_t v19 = *(void *)(a1 + 784);
  float32x4_t v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  uint64_t v22 = *(void *)(a1 + 792);
  float32x4_t v23 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  float32x4_t v24 = *(float32x4_t *)(a1 + 32);
  float32x4_t v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
  uint64_t v26 = *(void *)(a1 + 768);
  do
  {
    int8x8_t v27 = vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 16 * v11)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v13 + 16 * v11))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 32 * v11), v18), vandq_s8(*(int8x16_t *)(v19 + 32 * v11), v17))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 32 * v11 + 16), v18),
                                                                                 vandq_s8(*(int8x16_t *)(v19 + 32 * v11 + 16), v17))))));
    if ((vmaxvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(v27, *(int8x8_t *)v14.i8), vzip2_s8(v27, *(int8x8_t *)v14.i8))), 0x1FuLL))) & 0x80000000) != 0)
    {
      int16x4_t v28 = (float32x4_t *)(v26 + 192 * v11);
      float32x4_t v29 = v28[1];
      float32x4_t v30 = v28[6];
      float32x4_t v31 = v28[7];
      float32x4_t v32 = vmulq_n_f32(vsubq_f32(v29, vaddq_f32(v20, v31)), v24.f32[0]);
      float32x4_t v33 = vmulq_n_f32(vsubq_f32(*v28, vaddq_f32(v20, v30)), v24.f32[0]);
      float32x4_t v35 = v28[2];
      float32x4_t v34 = v28[3];
      float32x4_t v36 = v28[8];
      float32x4_t v37 = v28[9];
      float32x4_t v38 = vmulq_lane_f32(vsubq_f32(v34, vaddq_f32(v21, v37)), *(float32x2_t *)v24.f32, 1);
      float32x4_t v39 = vmulq_lane_f32(vsubq_f32(v35, vaddq_f32(v21, v36)), *(float32x2_t *)v24.f32, 1);
      float32x4_t v40 = v28[4];
      float32x4_t v41 = v28[5];
      float32x4_t v42 = v28[10];
      float32x4_t v43 = v28[11];
      float32x4_t v44 = vmulq_laneq_f32(vsubq_f32(v41, vaddq_f32(v23, v43)), v24, 2);
      float32x4_t v45 = vmulq_laneq_f32(vsubq_f32(v40, vaddq_f32(v23, v42)), v24, 2);
      float32x4_t v46 = vmulq_n_f32(vaddq_f32(vsubq_f32(v29, v20), v31), v24.f32[0]);
      float32x4_t v47 = vmulq_n_f32(vaddq_f32(vsubq_f32(*v28, v20), v30), v24.f32[0]);
      float32x4_t v48 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v34, v21), v37), *(float32x2_t *)v24.f32, 1);
      float32x4_t v49 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v35, v21), v36), *(float32x2_t *)v24.f32, 1);
      float32x4_t v50 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v41, v23), v43), v24, 2);
      float32x4_t v51 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v40, v23), v42), v24, 2);
      float32x4_t v52 = vminnmq_f32(v33, v47);
      float32x4_t v53 = vminnmq_f32(v32, v46);
      float32x4_t v54 = vminnmq_f32(v44, v50);
      float32x4_t v55 = vmaxnmq_f32(v33, v47);
      float32x4_t v56 = vmaxnmq_f32(v32, v46);
      float32x4_t v57 = vmaxnmq_f32(v45, v51);
      float32x4_t v58 = vmaxnmq_f32(v44, v50);
      float32x4_t v59 = vmaxnmq_f32(v52, vmaxnmq_f32(vminnmq_f32(v39, v49), vminnmq_f32(v45, v51)));
      float32x4_t v60 = vmaxnmq_f32(v53, vmaxnmq_f32(vminnmq_f32(v38, v48), v54));
      int8x8_t v61 = vand_s8(vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v25, v59), (int16x8_t)vcgtq_f32(v25, v60)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vminnmq_f32(v55, vminnmq_f32(vmaxnmq_f32(v39, v49), v57)), v59), (int16x8_t)vcgeq_f32(vminnmq_f32(v56, vminnmq_f32(vmaxnmq_f32(v38, v48), v58)), v60)))), v27);
      int8x16_t v62 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v61, *(int8x8_t *)v14.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B6E50330), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v61, *(int8x8_t *)v14.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B6E725B0));
      *(int8x8_t *)v62.i8 = vorr_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
      unsigned __int32 v63 = vadd_s32(*(int32x2_t *)v62.i8, vdup_lane_s32(*(int32x2_t *)v62.i8, 1)).u32[0];
      unsigned int v64 = 8 * v11;
      if (v63 && v64 < v8)
      {
        uint64_t v66 = *(void *)(a1 + 864);
        do
        {
          if (v63)
          {
            *(_DWORD *)(v66 + 4 * result) = v64;
            uint64_t result = (result + 1);
          }
          if (v63 < 2) {
            break;
          }
          ++v64;
          v63 >>= 1;
        }
        while (v64 < v8);
      }
    }
    ++v11;
  }
  while (v11 != (v8 + 7) >> 3);
  return result;
}

uint64_t sub_1B65C7268(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if ((a2 & 7) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 3;
  if (v11 >= (v8 + 7) >> 3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v13 = *(void *)(a1 + 776);
  int8x16_t v14 = (const float *)(a1 + 816);
  int8x16_t v15 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  uint64_t v16 = *(void *)(a1 + 784);
  int8x16_t v17 = (const float *)(a1 + 820);
  int8x16_t v18 = (int8x16_t)vld1q_dup_f32(v14);
  int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v17);
  float32x4_t v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  float32x4_t v22 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  uint64_t v23 = *(void *)(a1 + 792);
  float32x4_t v24 = *(float32x4_t *)(a1 + 32);
  float32x4_t v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
  unsigned int v26 = a2 & 0xFFFFFFF8;
  uint64_t v27 = *(void *)(a1 + 768);
  do
  {
    int8x8_t v28 = vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 16 * v11)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v15, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v13 + 16 * v11))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v23 + 32 * v11), v19), vandq_s8(*(int8x16_t *)(v16 + 32 * v11), v18))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v23 + 32 * v11 + 16), v19),
                                                                                 vandq_s8(*(int8x16_t *)(v16 + 32 * v11 + 16), v18))))));
    if ((vmaxvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(v28, *(int8x8_t *)v15.i8), vzip2_s8(v28, *(int8x8_t *)v15.i8))), 0x1FuLL))) & 0x80000000) != 0)
    {
      float32x4_t v29 = (float32x4_t *)(v27 + 192 * v11);
      float32x4_t v30 = v29[1];
      float32x4_t v31 = v29[6];
      float32x4_t v32 = v29[7];
      float32x4_t v33 = vmulq_n_f32(vsubq_f32(v30, vaddq_f32(v20, v32)), v24.f32[0]);
      float32x4_t v34 = vmulq_n_f32(vsubq_f32(*v29, vaddq_f32(v20, v31)), v24.f32[0]);
      float32x4_t v36 = v29[2];
      float32x4_t v35 = v29[3];
      float32x4_t v37 = v29[8];
      float32x4_t v38 = v29[9];
      float32x4_t v39 = vmulq_lane_f32(vsubq_f32(v35, vaddq_f32(v21, v38)), *(float32x2_t *)v24.f32, 1);
      float32x4_t v40 = vmulq_lane_f32(vsubq_f32(v36, vaddq_f32(v21, v37)), *(float32x2_t *)v24.f32, 1);
      float32x4_t v41 = v29[4];
      float32x4_t v42 = v29[5];
      float32x4_t v43 = v29[10];
      float32x4_t v44 = v29[11];
      float32x4_t v45 = vmulq_laneq_f32(vsubq_f32(v42, vaddq_f32(v22, v44)), v24, 2);
      float32x4_t v46 = vmulq_laneq_f32(vsubq_f32(v41, vaddq_f32(v22, v43)), v24, 2);
      float32x4_t v47 = vmulq_n_f32(vaddq_f32(vsubq_f32(v30, v20), v32), v24.f32[0]);
      float32x4_t v48 = vmulq_n_f32(vaddq_f32(vsubq_f32(*v29, v20), v31), v24.f32[0]);
      float32x4_t v49 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v35, v21), v38), *(float32x2_t *)v24.f32, 1);
      float32x4_t v50 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v36, v21), v37), *(float32x2_t *)v24.f32, 1);
      float32x4_t v51 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v42, v22), v44), v24, 2);
      float32x4_t v52 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v41, v22), v43), v24, 2);
      float32x4_t v53 = vminnmq_f32(v34, v48);
      float32x4_t v54 = vminnmq_f32(v33, v47);
      float32x4_t v55 = vminnmq_f32(v45, v51);
      float32x4_t v56 = vmaxnmq_f32(v34, v48);
      float32x4_t v57 = vmaxnmq_f32(v33, v47);
      float32x4_t v58 = vmaxnmq_f32(v46, v52);
      float32x4_t v59 = vmaxnmq_f32(v45, v51);
      float32x4_t v60 = vmaxnmq_f32(v53, vmaxnmq_f32(vminnmq_f32(v40, v50), vminnmq_f32(v46, v52)));
      float32x4_t v61 = vmaxnmq_f32(v54, vmaxnmq_f32(vminnmq_f32(v39, v49), v55));
      int8x8_t v62 = vand_s8(vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v25, v60), (int16x8_t)vcgtq_f32(v25, v61)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vminnmq_f32(v56, vminnmq_f32(vmaxnmq_f32(v40, v50), v58)), v60), (int16x8_t)vcgeq_f32(vminnmq_f32(v57, vminnmq_f32(vmaxnmq_f32(v39, v49), v59)), v61)))), v28);
      int8x16_t v63 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v62, *(int8x8_t *)v15.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B6E50330), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v62, *(int8x8_t *)v15.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B6E725B0));
      *(int8x8_t *)v63.i8 = vorr_s8(*(int8x8_t *)v63.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
      unsigned __int32 v64 = vadd_s32(*(int32x2_t *)v63.i8, vdup_lane_s32(*(int32x2_t *)v63.i8, 1)).u32[0];
      if (v64 && 8 * (int)v11 < v8)
      {
        unint64_t v66 = v26;
        do
        {
          if (v64)
          {
            *(void *)(*(void *)(a1 + 856) + 8 * result) = *(void *)(*(void *)(a1 + 808) + 8 * v66);
            uint64_t result = (result + 1);
          }
          if (v64 < 2) {
            break;
          }
          ++v66;
          v64 >>= 1;
        }
        while (v66 < v8);
      }
    }
    ++v11;
    v26 += 8;
  }
  while (v11 != (v8 + 7) >> 3);
  return result;
}

uint64_t sub_1B65C7598(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if ((a2 & 3) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 2;
  if (v11 >= (v8 + 3) >> 2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v13 = *(void *)(a1 + 776);
  int8x16_t v14 = (const float *)(a1 + 816);
  int8x16_t v15 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  uint64_t v16 = *(void *)(a1 + 784);
  int8x16_t v17 = (int8x16_t)vld1q_dup_f32(v14);
  int8x16_t v18 = (const float *)(a1 + 820);
  int8x16_t v19 = (int8x16_t)vld1q_dup_f32(v18);
  float32x4_t v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  uint64_t v21 = *(void *)(a1 + 792);
  float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  float32x4_t v23 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  float32x4_t v24 = *(float32x4_t *)(a1 + 32);
  float32x4_t v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
  uint64_t v26 = *(void *)(a1 + 768);
  do
  {
    int32x4_t v27 = (int32x4_t)vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 8 * v11)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v21 + 16 * v11), v19), vandq_s8(*(int8x16_t *)(v16 + 16 * v11), v17))));
    if ((vmaxvq_u32((uint32x4_t)v27) & 0x80000000) != 0)
    {
      int8x8_t v28 = (float32x4_t *)(v26 + 96 * v11);
      float32x4_t v30 = v28[2];
      float32x4_t v29 = v28[3];
      float32x4_t v31 = v28[1];
      float32x4_t v32 = vmulq_n_f32(vsubq_f32(*v28, vaddq_f32(v20, v29)), v24.f32[0]);
      float32x4_t v33 = v28[4];
      float32x4_t v34 = v28[5];
      float32x4_t v35 = vmulq_lane_f32(vsubq_f32(v31, vaddq_f32(v22, v33)), *(float32x2_t *)v24.f32, 1);
      float32x4_t v36 = vmulq_laneq_f32(vsubq_f32(v30, vaddq_f32(v23, v34)), v24, 2);
      float32x4_t v37 = vmulq_n_f32(vaddq_f32(vsubq_f32(*v28, v20), v29), v24.f32[0]);
      float32x4_t v38 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v31, v22), v33), *(float32x2_t *)v24.f32, 1);
      float32x4_t v39 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v30, v23), v34), v24, 2);
      float32x4_t v40 = vminnmq_f32(v32, v37);
      float32x4_t v41 = vmaxnmq_f32(v32, v37);
      float32x4_t v42 = vmaxnmq_f32(v35, v38);
      float32x4_t v43 = vmaxnmq_f32(v40, vmaxnmq_f32(vminnmq_f32(v35, v38), vminnmq_f32(v36, v39)));
      int8x16_t v44 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v25, v43), (int8x16_t)vcgeq_f32(vminnmq_f32(v41, vminnmq_f32(v42, vmaxnmq_f32(v36, v39))), v43))), (int8x8_t)vmovn_s32(v27))), (int8x16_t)xmmword_1B6E50330);
      *(int8x8_t *)v44.i8 = vorr_s8(*(int8x8_t *)v44.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
      unsigned __int32 v45 = vadd_s32(*(int32x2_t *)v44.i8, vdup_lane_s32(*(int32x2_t *)v44.i8, 1)).u32[0];
      unsigned int v46 = 4 * v11;
      if (v45 && v46 < v8)
      {
        uint64_t v48 = *(void *)(a1 + 864);
        do
        {
          if (v45)
          {
            *(_DWORD *)(v48 + 4 * result) = v46;
            uint64_t result = (result + 1);
          }
          if (v45 < 2) {
            break;
          }
          ++v46;
          v45 >>= 1;
        }
        while (v46 < v8);
      }
    }
    ++v11;
  }
  while (v11 != (v8 + 3) >> 2);
  return result;
}

uint64_t sub_1B65C779C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if ((a2 & 3) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 2;
  if (v11 >= (v8 + 3) >> 2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v13 = *(void *)(a1 + 776);
  int8x16_t v14 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  int8x16_t v15 = (const float *)(a1 + 816);
  uint64_t v16 = (const float *)(a1 + 820);
  int8x16_t v17 = (int8x16_t)vld1q_dup_f32(v15);
  int8x16_t v18 = (int8x16_t)vld1q_dup_f32(v16);
  uint64_t v19 = *(void *)(a1 + 784);
  float32x4_t v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  uint64_t v22 = *(void *)(a1 + 792);
  float32x4_t v23 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  float32x4_t v24 = *(float32x4_t *)(a1 + 32);
  float32x4_t v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
  uint64_t v26 = *(void *)(a1 + 768);
  unsigned int v27 = a2 & 0xFFFFFFFC;
  do
  {
    int32x4_t v28 = (int32x4_t)vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 8 * v11)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 16 * v11), v18), vandq_s8(*(int8x16_t *)(v19 + 16 * v11), v17))));
    if ((vmaxvq_u32((uint32x4_t)v28) & 0x80000000) != 0)
    {
      float32x4_t v29 = (float32x4_t *)(v26 + 96 * v11);
      float32x4_t v31 = v29[2];
      float32x4_t v30 = v29[3];
      float32x4_t v32 = v29[1];
      float32x4_t v33 = vmulq_n_f32(vsubq_f32(*v29, vaddq_f32(v20, v30)), v24.f32[0]);
      float32x4_t v34 = v29[4];
      float32x4_t v35 = v29[5];
      float32x4_t v36 = vmulq_lane_f32(vsubq_f32(v32, vaddq_f32(v21, v34)), *(float32x2_t *)v24.f32, 1);
      float32x4_t v37 = vmulq_laneq_f32(vsubq_f32(v31, vaddq_f32(v23, v35)), v24, 2);
      float32x4_t v38 = vmulq_n_f32(vaddq_f32(vsubq_f32(*v29, v20), v30), v24.f32[0]);
      float32x4_t v39 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v32, v21), v34), *(float32x2_t *)v24.f32, 1);
      float32x4_t v40 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v31, v23), v35), v24, 2);
      float32x4_t v41 = vminnmq_f32(v33, v38);
      float32x4_t v42 = vmaxnmq_f32(v33, v38);
      float32x4_t v43 = vmaxnmq_f32(v36, v39);
      float32x4_t v44 = vmaxnmq_f32(v41, vmaxnmq_f32(vminnmq_f32(v36, v39), vminnmq_f32(v37, v40)));
      int8x16_t v45 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v25, v44), (int8x16_t)vcgeq_f32(vminnmq_f32(v42, vminnmq_f32(v43, vmaxnmq_f32(v37, v40))), v44))), (int8x8_t)vmovn_s32(v28))), (int8x16_t)xmmword_1B6E50330);
      *(int8x8_t *)v45.i8 = vorr_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
      unsigned __int32 v46 = vadd_s32(*(int32x2_t *)v45.i8, vdup_lane_s32(*(int32x2_t *)v45.i8, 1)).u32[0];
      if (v46 && 4 * (int)v11 < v8)
      {
        unint64_t v48 = v27;
        do
        {
          if (v46)
          {
            *(void *)(*(void *)(a1 + 856) + 8 * result) = *(void *)(*(void *)(a1 + 808) + 8 * v48);
            uint64_t result = (result + 1);
          }
          if (v46 < 2) {
            break;
          }
          ++v48;
          v46 >>= 1;
        }
        while (v48 < v8);
      }
    }
    ++v11;
    v27 += 4;
  }
  while (v11 != (v8 + 3) >> 2);
  return result;
}

uint64_t sub_1B65C79B8(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = a1[48].i64[1];
  int v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  uint64_t v7 = a1[49].i64[0];
  __int32 v8 = a1[51].i32[0];
  __int32 v9 = a1[51].i32[1];
  uint64_t v10 = a1[49].i64[1];
  uint64_t v11 = a1[54].i64[0];
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = (32 * a2) | 0x10;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v12) & v9 | *(_DWORD *)(v7 + 4 * v12) & v8) {
      BOOL v15 = (unsigned __int16)(v6 & *(_WORD *)(v5 + 2 * v12)) == 0;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15)
    {
      uint64_t v16 = (float32x4_t *)(a1[48].i64[0] + v14);
      float32x4_t v17 = v16[-1];
      float32x4_t v18 = a1[2];
      float32x4_t v19 = vaddq_f32(*v16, v17);
      float32x4_t v20 = vmulq_f32(vsubq_f32(v17, vaddq_f32(*v16, *a1)), v18);
      float32x4_t v21 = vmulq_f32(vsubq_f32(v19, *a1), v18);
      v20.i32[3] = 0;
      v21.i32[3] = 0;
      float32x4_t v22 = vminnmq_f32(v20, v21);
      float32x4_t v23 = vmaxnmq_f32(v20, v21);
      float v24 = fmaxf(fmaxf(v22.f32[0], v22.f32[2]), v22.f32[1]);
      if (fminf(fminf(v23.f32[0], v23.f32[2]), v23.f32[1]) >= v24 && v24 < COERCE_FLOAT(HIDWORD(*(_OWORD *)&a1[2])))
      {
        *(_DWORD *)(v11 + 4 * result) = v12;
        uint64_t result = (result + 1);
      }
    }
    ++v12;
    v14 += 32;
  }
  while (v13 != v12);
  return result;
}

uint64_t sub_1B65C7AB8(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = a1[48].i64[1];
  int v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  uint64_t v7 = a1[49].i64[0];
  __int32 v8 = a1[51].i32[0];
  __int32 v9 = a1[51].i32[1];
  uint64_t v10 = a1[49].i64[1];
  uint64_t v11 = a2;
  uint64_t v12 = (32 * a2) | 0x10;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v11) & v9 | *(_DWORD *)(v7 + 4 * v11) & v8) {
      BOOL v13 = (unsigned __int16)(v6 & *(_WORD *)(v5 + 2 * v11)) == 0;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13)
    {
      uint64_t v14 = (float32x4_t *)(a1[48].i64[0] + v12);
      float32x4_t v15 = v14[-1];
      float32x4_t v16 = a1[2];
      float32x4_t v17 = vaddq_f32(*v14, v15);
      float32x4_t v18 = vmulq_f32(vsubq_f32(v15, vaddq_f32(*v14, *a1)), v16);
      float32x4_t v19 = vmulq_f32(vsubq_f32(v17, *a1), v16);
      v18.i32[3] = 0;
      v19.i32[3] = 0;
      float32x4_t v20 = vminnmq_f32(v18, v19);
      float32x4_t v21 = vmaxnmq_f32(v18, v19);
      float v22 = fmaxf(fmaxf(v20.f32[0], v20.f32[2]), v20.f32[1]);
      if (fminf(fminf(v21.f32[0], v21.f32[2]), v21.f32[1]) >= v22 && v22 < COERCE_FLOAT(HIDWORD(*(_OWORD *)&a1[2])))
      {
        *(void *)(a1[53].i64[1] + 8 * result) = *(void *)(a1[50].i64[1] + 8 * v11);
        uint64_t result = (result + 1);
      }
    }
    ++v11;
    v12 += 32;
  }
  while (a3 != v11);
  return result;
}

CFStringRef sub_1B65C7BC8(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXCullingSystem %p>", a1);
}

CFStringRef sub_1B65C7C08(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXCullingSystem %p>", a1);
}

uint64_t sub_1B65C7C48(uint64_t a1)
{
  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 64));
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 88));
  CFAllocatorRef v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 136) = 0;
  }
  int v3 = *(NSObject **)(a1 + 120);
  if (v3)
  {
    dispatch_release(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 128));
  }
  int v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(void *)(a1 + 40) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B65C7CD8(uint64_t a1, const void *a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  int v4 = sub_1B63CBAB4();
  *(_DWORD *)(a1 + 24) = 4;
  *(_DWORD *)(a1 + 28) = v4;
  sub_1B65C7EDC(a1, 0x80u);
  uint64_t v5 = *(const void **)(a1 + 136);
  if (v5 != a2)
  {
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 136) = 0;
    }
    if (a2) {
      CFTypeRef v6 = CFRetain(a2);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(a1 + 136) = v6;
  }
  int v7 = *(_DWORD *)(a1 + 24);
  if (v7 == 4) {
    __int32 v8 = sub_1B65C6690;
  }
  else {
    __int32 v8 = (uint64_t (*)(uint64_t, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B65C6848;
  }
  __int32 v9 = sub_1B65C643C;
  if (v7 == 4) {
    uint64_t v10 = sub_1B65C6C38;
  }
  else {
    uint64_t v10 = (double (*)(uint64_t, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B65C6E70;
  }
  if (v7 == 4) {
    uint64_t v11 = (uint64_t (*)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B65CA930;
  }
  else {
    uint64_t v11 = (uint64_t (*)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B65CAC24;
  }
  if (v7 == 4) {
    uint64_t v12 = sub_1B65C98E0;
  }
  else {
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))sub_1B65C9C30;
  }
  BOOL v13 = (uint64_t (*)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B65CA428;
  if (v7 == 4) {
    BOOL v13 = (uint64_t (*)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B65CA158;
  }
  if (v7 != 8) {
    __int32 v9 = v8;
  }
  *(void *)(a1 + 152) = v9;
  if (v7 == 8) {
    uint64_t v14 = sub_1B65C6910;
  }
  else {
    uint64_t v14 = v10;
  }
  *(void *)(a1 + 144) = v14;
  if (v7 == 8) {
    float32x4_t v15 = sub_1B65CA538;
  }
  else {
    float32x4_t v15 = v11;
  }
  if (v7 == 8) {
    float32x4_t v16 = sub_1B65C9464;
  }
  else {
    float32x4_t v16 = v12;
  }
  *(void *)(a1 + 176) = v15;
  *(void *)(a1 + 184) = v16;
  if (v7 == 8) {
    float32x4_t v17 = sub_1B65C9D84;
  }
  else {
    float32x4_t v17 = v13;
  }
  *(void *)(a1 + 192) = v17;
  float32x4_t v18 = sub_1B65C6F50;
  float32x4_t v19 = sub_1B65C7268;
  if (v7 != 8)
  {
    if (v7 == 4)
    {
      float32x4_t v18 = sub_1B65C7598;
      float32x4_t v19 = sub_1B65C779C;
    }
    else
    {
      float32x4_t v18 = sub_1B65C79B8;
      float32x4_t v19 = sub_1B65C7AB8;
    }
  }
  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 168) = v18;
  return a1;
}

void sub_1B65C7EDC(uint64_t a1, unsigned int a2)
{
  int v4 = *(_DWORD *)(a1 + 20);
  int v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 8) {
    unint64_t v6 = 32;
  }
  else {
    unint64_t v6 = 16;
  }
  if (v5 == 8) {
    int v7 = 192;
  }
  else {
    int v7 = 0;
  }
  if (v5 == 4) {
    int v7 = 96;
  }
  int v8 = v5 - 1;
  if (v5 == 1) {
    int v9 = 32;
  }
  else {
    int v9 = v7;
  }
  int v10 = dword_1B6E725E0[(125613361 * v5) >> 27];
  size_t v11 = (v9 * (v8 + a2)) >> v10;
  uint64_t v12 = (v4 + 7) >> 3;
  unsigned int v13 = (a2 + 7) >> 3;
  if (*(void *)(a1 + 64))
  {
    size_t v14 = ((v4 + v8) * v9) >> v10;
    *(void *)(a1 + 112) = malloc_type_realloc(*(void **)(a1 + 112), (a2 + 7) >> 3, 0x63F4B450uLL);
    *(void *)(a1 + 96) = sub_1B65C4B94(*(void **)(a1 + 96), v14, v11, v6);
    *(void *)(a1 + 64) = sub_1B65C4B94(*(void **)(a1 + 64), 32 * *(unsigned int *)(a1 + 20), 32 * a2, v6);
    *(void *)(a1 + 104) = sub_1B65C4B94(*(void **)(a1 + 104), 8 * *(unsigned int *)(a1 + 20), 8 * a2, v6);
    *(void *)(a1 + 72) = sub_1B65C4B94(*(void **)(a1 + 72), 4 * *(unsigned int *)(a1 + 20), 4 * a2, v6);
    *(void *)(a1 + 80) = sub_1B65C4B94(*(void **)(a1 + 80), 4 * *(unsigned int *)(a1 + 20), 4 * a2, v6);
    *(void *)(a1 + 88) = sub_1B65C4B94(*(void **)(a1 + 88), 2 * *(unsigned int *)(a1 + 20), 2 * a2, v6);
  }
  else
  {
    *(void *)(a1 + 112) = malloc_type_malloc((a2 + 7) >> 3, 0xB351725EuLL);
    memptr = 0;
    int v15 = malloc_type_posix_memalign(&memptr, v6, v11, 0xBA8A1232uLL);
    float32x4_t v16 = memptr;
    if (v15) {
      float32x4_t v16 = 0;
    }
    *(void *)(a1 + 96) = v16;
    memptr = 0;
    int v17 = malloc_type_posix_memalign(&memptr, v6, 32 * a2, 0xBA8A1232uLL);
    float32x4_t v18 = memptr;
    if (v17) {
      float32x4_t v18 = 0;
    }
    *(void *)(a1 + 64) = v18;
    memptr = 0;
    int v19 = malloc_type_posix_memalign(&memptr, v6, 8 * a2, 0xBA8A1232uLL);
    float32x4_t v20 = memptr;
    if (v19) {
      float32x4_t v20 = 0;
    }
    *(void *)(a1 + 104) = v20;
    memptr = 0;
    int v21 = malloc_type_posix_memalign(&memptr, v6, 4 * a2, 0xBA8A1232uLL);
    float v22 = memptr;
    if (v21) {
      float v22 = 0;
    }
    *(void *)(a1 + 72) = v22;
    memptr = 0;
    int v23 = malloc_type_posix_memalign(&memptr, v6, 4 * a2, 0xBA8A1232uLL);
    float v24 = memptr;
    if (v23) {
      float v24 = 0;
    }
    *(void *)(a1 + 80) = v24;
    memptr = 0;
    int v25 = malloc_type_posix_memalign(&memptr, v6, 2 * a2, 0xBA8A1232uLL);
    uint64_t v26 = memptr;
    if (v25) {
      uint64_t v26 = 0;
    }
    *(void *)(a1 + 88) = v26;
  }
  size_t v27 = v13 - v12;
  if ((int)v27 >= 1) {
    bzero((void *)(*(void *)(a1 + 112) + v12), v27);
  }
  uint64_t v28 = *(unsigned int *)(a1 + 20);
  unsigned int v29 = a2 - v28;
  if ((int)(a2 - v28) >= 1)
  {
    bzero((void *)(*(void *)(a1 + 104) + 8 * v28), 8 * (a2 - v28));
    bzero((void *)(*(void *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 20)), 4 * v29);
    bzero((void *)(*(void *)(a1 + 80) + 4 * *(unsigned int *)(a1 + 20)), 4 * v29);
    bzero((void *)(*(void *)(a1 + 88) + 2 * *(unsigned int *)(a1 + 20)), 2 * v29);
    uint64_t v30 = *(unsigned int *)(a1 + 20);
    if (v30 < a2)
    {
      uint64_t v31 = 32 * v30;
      do
      {
        float32x4_t v32 = (_OWORD *)(*(void *)(a1 + 64) + v31);
        *float32x4_t v32 = xmmword_1B6E4F370;
        v32[1] = xmmword_1B6E51230;
        sub_1B65C4F68(a1, v30, (__n128)xmmword_1B6E72900, (__n128)xmmword_1B6E72910);
        LODWORD(v30) = v30 + 1;
        v31 += 32;
      }
      while (a2 != v30);
    }
  }
  *(_DWORD *)(a1 + 20) = a2;
}

uint64_t sub_1B65C8278(uint64_t a1, int a2)
{
  uint64_t result = *(unsigned int *)(a1 + 56);
  if (result == -1)
  {
    unint64_t v6 = *(void *)(a1 + 48);
    int v7 = *(char **)(a1 + 40);
    if ((unint64_t)v7 >= v6)
    {
      int v9 = *(char **)(a1 + 32);
      uint64_t v10 = (v7 - v9) >> 2;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        abort();
      }
      uint64_t v12 = v6 - (void)v9;
      if (v12 >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        size_t v14 = (char *)sub_1B64282E0(a1 + 48, v13);
        int v9 = *(char **)(a1 + 32);
        int v7 = *(char **)(a1 + 40);
      }
      else
      {
        size_t v14 = 0;
      }
      int v15 = &v14[4 * v10];
      float32x4_t v16 = &v14[4 * v13];
      *(_DWORD *)int v15 = a2;
      int v8 = v15 + 4;
      while (v7 != v9)
      {
        int v17 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v17;
        v15 -= 4;
      }
      *(void *)(a1 + 32) = v15;
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v16;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(_DWORD *)int v7 = a2;
      int v8 = v7 + 4;
    }
    *(void *)(a1 + 40) = v8;
    return (((unint64_t)v8 - *(void *)(a1 + 32)) >> 2) - 1;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v5 + 4 * (int)result);
    *(_DWORD *)(v5 + 4 * (int)result) = a2;
  }
  return result;
}

uint64_t sub_1B65C8388(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  if ((*(_WORD *)(a1[11] + 2 * a2) & 8) != 0)
  {
    __n128 v16 = (__n128)xmmword_1B6E725A0;
    __n128 v14 = (__n128)xmmword_1B6E4F370;
  }
  else
  {
    uint64_t v10 = sub_1B64A01D4(*(void *)(a1[13] + 8 * a2), a2, a3, a4, a5, a6, a7, a8);
    float32x4_t v11 = *(float32x4_t *)(v10 + 16);
    float32x4_t v12 = *(float32x4_t *)(v10 + 32);
    unint64_t v13 = (float32x4_t *)(a1[8] + 32 * v8);
    __n128 v14 = (__n128)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v10 + 48), v12, *v13, 2), v11, *(float32x2_t *)v13->f32, 1), *(float32x4_t *)v10, COERCE_FLOAT(*v13));
    v14.n128_u32[3] = HIDWORD(*(unsigned long long *)v13);
    float32x4_t v15 = v13[1];
    v15.i32[1] = v15.i32[0];
    v15.i32[2] = (__int32)v13[1];
    __n128 v16 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v13[1].f32, 1), (int32x4_t)v13[1]), vabsq_f32(v11)), vabsq_f32(*(float32x4_t *)v10), v15), vabsq_f32(v12), (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v13[1], (int32x4_t)v13[1]), (int32x4_t)v13[1]));
  }

  return sub_1B65C4F68((uint64_t)a1, v8, v14, v16);
}

BOOL sub_1B65C8454(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 8) < *(float *)(a2 + 8);
}

void sub_1B65C8468(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  float32x4_t v12 = a2 - 1;
  unint64_t v13 = a1;
LABEL_2:
  uint64_t v14 = 1 - a4;
  while (1)
  {
    a1 = v13;
    uint64_t v15 = v14;
    uint64_t v16 = (char *)a2 - (char *)v13;
    unint64_t v17 = a2 - v13;
    if (!(!v7 & v6))
    {
      switch(v17)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(a2 - 1, v13))
          {
            long long v24 = *v13;
            *unint64_t v13 = *v12;
            long long *v12 = v24;
          }
          break;
        case 3uLL:
          sub_1B65C89CC(v13, v13 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          sub_1B65C8F0C(v13, v13 + 1, v13 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          sub_1B65C8FC8(v13, v13 + 1, v13 + 2, v13 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v16 <= 383) {
      break;
    }
    if (v15 == 1)
    {
      if (v13 != a2)
      {
        sub_1B65C90AC(v13, a2, a2, (unsigned int (**)(long long *, long long *))a3, a6);
      }
      return;
    }
    unint64_t v18 = v17 >> 1;
    int v19 = &v13[v17 >> 1];
    if ((unint64_t)v16 >= 0x801)
    {
      sub_1B65C89CC(v13, &v13[v17 >> 1], a2 - 1, a3);
      sub_1B65C89CC(v13 + 1, v19 - 1, a2 - 2, a3);
      sub_1B65C89CC(v13 + 2, &v13[v18 + 1], a2 - 3, a3);
      sub_1B65C89CC(v19 - 1, v19, &v13[v18 + 1], a3);
      long long v23 = *v13;
      *unint64_t v13 = *v19;
      *int v19 = v23;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1B65C89CC(&v13[v17 >> 1], v13, a2 - 1, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v13 - 1, v13) & 1) == 0)
    {
      unint64_t v13 = sub_1B65C8ACC(v13, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    float32x4_t v20 = sub_1B65C8BFC(v13, a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v22 = sub_1B65C8D30(v13, v20, a3);
    unint64_t v13 = v20 + 1;
    if (sub_1B65C8D30(v20 + 1, a2, a3))
    {
      a4 = -v15;
      a2 = v20;
      if (v22) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v14 = v15 + 1;
    if (!v22)
    {
LABEL_16:
      sub_1B65C8468(a1, v20, a3, -v15, a5 & 1);
      unint64_t v13 = v20 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1B65C8840((uint64_t)v13, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    sub_1B65C8914((uint64_t)v13, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
}

uint64_t sub_1B65C8840(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    char v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (_OWORD *)result;
      do
      {
        float32x4_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v14 = *v10;
          uint64_t v12 = v9;
          while (1)
          {
            *(_OWORD *)((char *)v6 + v12 + 16) = *(_OWORD *)((char *)v6 + v12);
            if (!v12) {
              break;
            }
            v12 -= 16;
            uint64_t result = (*a3)(&v14, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              unint64_t v13 = (_OWORD *)((char *)v6 + v12 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v13 = v6;
LABEL_10:
          *unint64_t v13 = v14;
        }
        char v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1B65C8914(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    char v6 = (_OWORD *)result;
    char v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = result - 16;
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *v6;
          uint64_t v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 16);
            uint64_t result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 32) = v12;
        }
        char v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1B65C89CC(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    long long v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  if (!result)
  {
    long long v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    long long v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    return 2;
  }
  long long v10 = *a1;
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

long long *sub_1B65C8ACC(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v11 = *a1;
  if ((*a3)(&v11, a2 - 1))
  {
    char v6 = a1;
    do
      ++v6;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    char v7 = a1 + 1;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v11, v7);
      char v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    long long v12 = *v6;
    *char v6 = *v4;
    *uint64_t v4 = v12;
    do
      ++v6;
    while (!(*a3)(&v11, v6));
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  uint64_t v9 = v6 - 1;
  if (v6 - 1 != a1) {
    *a1 = *v9;
  }
  *uint64_t v9 = v11;
  return v6;
}

long long *sub_1B65C8BFC(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = 0;
  long long v13 = *a1;
  do
    ++v6;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  char v7 = &a1[v6];
  int v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      --a2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v13));
  }
  if (v7 < a2)
  {
    uint64_t v9 = &a1[v6];
    long long v10 = a2;
    do
    {
      long long v14 = *v9;
      long long v11 = v14;
      *uint64_t v9 = *v10;
      *long long v10 = v11;
      do
        ++v9;
      while (((*a3)(v9, &v13) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v13));
    }
    while (v9 < v10);
    int v8 = v9 - 1;
  }
  if (v8 != a1) {
    *a1 = *v8;
  }
  *int v8 = v13;
  return v8;
}

BOOL sub_1B65C8D30(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        long long v9 = *a1;
        *a1 = *v8;
        *int v8 = v9;
      }
      return 1;
    case 3:
      sub_1B65C89CC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1B65C8F0C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1B65C8FC8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      long long v10 = a1 + 2;
      sub_1B65C89CC(a1, a1 + 1, a1 + 2, a3);
      long long v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (long long *)((char *)a1 + v14);
        *(long long *)((char *)a1 + v14 + 48) = *(long long *)((char *)a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          uint64_t v16 = (long long *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    long long v10 = v11;
    v12 += 16;
    if (++v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1B65C8F0C(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  sub_1B65C89CC(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    long long v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if ((*a5)(a3, a2))
    {
      long long v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if ((*a5)(a2, a1))
      {
        __n128 result = (__n128)*a1;
        *a1 = *a2;
        *a2 = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_1B65C8FC8(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = sub_1B65C8F0C(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(long long *, long long *, __n128))*a6)(a5, a4, v12))
  {
    long long v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    if ((*a6)(a4, a3))
    {
      long long v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      if ((*a6)(a3, a2))
      {
        long long v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        if ((*a6)(a2, a1))
        {
          __n128 result = (__n128)*a1;
          *a1 = *a2;
          *a2 = (__int128)result;
        }
      }
    }
  }
  return result;
}

long long *sub_1B65C90AC(long long *a1, long long *a2, long long *a3, unsigned int (**a4)(long long *, long long *), __n128 a5)
{
  if (a1 != a2)
  {
    char v7 = a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      int v13 = &a1[v11];
      do
      {
        a5.n128_f64[0] = sub_1B65C9280((uint64_t)a1, a4, v10, v13--);
        --v12;
      }
      while (v12);
    }
    long long v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(long long *, long long *, __n128))*a4)(v15, a1, a5))
        {
          long long v16 = *v15;
          *long long v15 = *a1;
          *a1 = v16;
          a5.n128_f64[0] = sub_1B65C9280((uint64_t)a1, a4, v10, a1);
        }
        ++v15;
      }
      while (v15 != a3);
      long long v14 = a3;
    }
    if (v9 < 17)
    {
      return v14;
    }
    else
    {
      int v25 = v14;
      uint64_t v17 = (unint64_t)v9 >> 4;
      do
      {
        uint64_t v18 = 0;
        long long v26 = *a1;
        int v19 = a1;
        do
        {
          float32x4_t v20 = &v19[v18 + 1];
          uint64_t v21 = (2 * v18) | 1;
          uint64_t v22 = 2 * v18 + 2;
          if (v22 < v17 && (*a4)(&v19[v18 + 1], &v19[v18 + 2]))
          {
            ++v20;
            uint64_t v21 = v22;
          }
          *int v19 = *v20;
          int v19 = v20;
          uint64_t v18 = v21;
        }
        while (v21 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        if (v20 == --v7)
        {
          *float32x4_t v20 = v26;
        }
        else
        {
          *float32x4_t v20 = *v7;
          *char v7 = v26;
          sub_1B65C93B8((uint64_t)a1, (uint64_t)(v20 + 1), (uint64_t (**)(long long *, long long *))a4, v20 + 1 - a1);
        }
      }
      while (v17-- > 2);
      return v25;
    }
  }
  return a3;
}

double sub_1B65C9280(uint64_t a1, unsigned int (**a2)(long long *, long long *), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    char v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v12 = ((uint64_t)a4 - a1) >> 3;
      uint64_t v13 = v12 + 1;
      long long v14 = (long long *)(a1 + 16 * (v12 + 1));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        uint64_t v13 = v15;
      }
      if ((((uint64_t (*)(long long *, long long *))*a2)(v14, v7) & 1) == 0)
      {
        long long v20 = *v7;
        do
        {
          uint64_t v17 = v14;
          *char v7 = *v14;
          if (v9 < v13) {
            break;
          }
          uint64_t v18 = (2 * v13) | 1;
          long long v14 = (long long *)(a1 + 16 * v18);
          uint64_t v19 = 2 * v13 + 2;
          if (v19 < a3)
          {
            if ((*a2)((long long *)(a1 + 16 * v18), v14 + 1))
            {
              ++v14;
              uint64_t v18 = v19;
            }
          }
          char v7 = v17;
          uint64_t v13 = v18;
        }
        while (!(*a2)(v14, &v20));
        double result = *(double *)&v20;
        *uint64_t v17 = v20;
      }
    }
  }
  return result;
}

double sub_1B65C93B8(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 16 * (v6 >> 1));
    unint64_t v11 = (long long *)(a2 - 16);
    if ((*a3)(v10, (long long *)(a2 - 16)))
    {
      long long v14 = *v11;
      do
      {
        uint64_t v13 = v10;
        *unint64_t v11 = *v10;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 16 * v9);
        unint64_t v11 = v13;
      }
      while (((*a3)(v10, &v14) & 1) != 0);
      double result = *(double *)&v14;
      *uint64_t v13 = v14;
    }
  }
  return result;
}

uint64_t sub_1B65C9464(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  unsigned int v8 = v2;
  unsigned int v10 = v9;
  uint64_t v12 = v11;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if ((v9 & 7) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v2, v3, v4, v5, v6, v7, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v13 = v10 >> 3;
  uint64_t v14 = (v8 + 7) >> 3;
  uint64_t v15 = v12[110].u32[0];
  if (v15)
  {
    uint64_t v16 = 0;
    unsigned int v17 = 0;
    unsigned int v18 = 0;
    v19.i64[0] = 0x8000000080000000;
    v19.i64[1] = 0x8000000080000000;
    long long v20 = v12;
    do
    {
      for (uint64_t i = 0; i != 12; i += 2)
      {
        int32x4_t v22 = *(int32x4_t *)v20[i].i8;
        int8x16_t v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
        long long v24 = (int8x16_t *)&v91[2 * v17 + 290];
        *long long v24 = v23;
        v24[1] = v23;
        int8x16_t v25 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
        v24[2] = v25;
        v24[3] = v25;
        int8x16_t v26 = (int8x16_t)vdupq_laneq_s32(v22, 2);
        int32x4_t v27 = vdupq_laneq_s32(v22, 3);
        v24[4] = v26;
        v24[5] = v26;
        v24[6] = (int8x16_t)v27;
        v24[7] = (int8x16_t)v27;
        uint64_t v28 = (int8x16_t *)&v91[2 * v18 + 2];
        int8x16_t v29 = vandq_s8(v23, v19);
        *uint64_t v28 = v29;
        v28[1] = v29;
        int8x16_t v30 = vandq_s8(v25, v19);
        void v28[2] = v30;
        v28[3] = v30;
        int8x16_t v31 = vandq_s8(v26, v19);
        v28[4] = v31;
        v28[5] = v31;
        v17 += 4;
        v18 += 3;
      }
      ++v16;
      v20 += 12;
    }
    while (v16 != v15);
  }
  if (v13 >= v14) {
    return 0;
  }
  uint64_t result = 0;
  int32x2_t v33 = v12[97];
  float32x4_t v34 = (const float *)&v12[102];
  int8x16_t v35 = (int8x16_t)vdupq_n_s32(v12[104].i32[1] | (~v12[105].i32[0] << 8));
  int8x16_t v36 = (int8x16_t)vdupq_lane_s32(v12[104], 0);
  int32x2_t v37 = v12[98];
  float32x4_t v38 = (const float *)&v12[102] + 1;
  int8x16_t v39 = (int8x16_t)vld1q_dup_f32(v34);
  float32x4_t v40 = (const float *)&v12[103];
  float32x4_t v41 = (const float *)&v12[103] + 1;
  int8x16_t v42 = (int8x16_t)vld1q_dup_f32(v40);
  int8x16_t v43 = (int8x16_t)vld1q_dup_f32(v38);
  int32x2_t v44 = v12[99];
  int8x16_t v45 = (int8x16_t)vld1q_dup_f32(v41);
  unsigned int v46 = v10 & 0xFFFFFFF8;
  int32x2_t v47 = v12[96];
  int8x16_t v89 = v36;
  int8x16_t v90 = v35;
  do
  {
    unint64_t v48 = (int8x16_t *)(*(void *)&v37 + 32 * v13);
    int8x16_t v49 = *v48;
    int8x16_t v50 = v48[1];
    int8x16_t v51 = vandq_s8(*v48, v39);
    float32x4_t v52 = (int8x16_t *)(*(void *)&v44 + 32 * v13);
    int8x16_t v53 = v52[1];
    int8x16_t v54 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v52, v43), v51)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v53, v43), vandq_s8(v50, v39))));
    uint16x8_t v55 = *(uint16x8_t *)(*(void *)&v33 + 16 * v13);
    int8x16_t v56 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8);
    int8x16_t v57 = (int8x16_t)vmovl_high_u16(v55);
    *(int8x8_t *)v49.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v36, v56)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v36, v57)))), v54), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v52, v45), vandq_s8(v49, v42)), vandq_s8(v35, v56))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v53, v45), vandq_s8(v50, v42)), vandq_s8(v35, v57))))));
    int8x16_t v58 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)v35.i8)), 0x1FuLL));
    int8x16_t v59 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)v35.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v59, v58)) & 0x80000000) != 0)
    {
      if (v15)
      {
        uint64_t v60 = 0;
        unsigned int v61 = 0;
        int v62 = 0;
        int8x16_t v63 = (_OWORD *)(*(void *)&v47 + 192 * v13);
        int8x16_t v65 = *((int8x16_t *)v63 + 6);
        int8x16_t v64 = *((int8x16_t *)v63 + 7);
        int8x16_t v67 = *((int8x16_t *)v63 + 8);
        int8x16_t v66 = *((int8x16_t *)v63 + 9);
        int8x16_t v69 = *((int8x16_t *)v63 + 10);
        int8x16_t v68 = *((int8x16_t *)v63 + 11);
        float32x4_t v71 = *(float32x4_t *)v63;
        float32x4_t v70 = *((float32x4_t *)v63 + 1);
        float32x4_t v73 = *((float32x4_t *)v63 + 2);
        float32x4_t v72 = *((float32x4_t *)v63 + 3);
        float32x4_t v75 = *((float32x4_t *)v63 + 4);
        float32x4_t v74 = *((float32x4_t *)v63 + 5);
        int8x16_t v76 = 0uLL;
        int8x16_t v77 = 0uLL;
        do
        {
          int v78 = 0;
          int v79 = v62 + 24;
          v80.i64[0] = -1;
          v80.i64[1] = -1;
          v81.i64[0] = -1;
          v81.i64[1] = -1;
          unsigned int v82 = v61;
          do
          {
            uint64_t v83 = (int8x16_t *)&v91[2 * v82 + 2];
            uint64_t v84 = (float32x4_t *)&v91[2 * (v62 + v78) + 290];
            int8x16_t v81 = vandq_s8(v81, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v84[7], vsubq_f32(v70, (float32x4_t)veorq_s8(v83[1], v64)), v84[1]), vsubq_f32(v72, (float32x4_t)veorq_s8(v83[3], v66)), v84[3]), vsubq_f32(v74, (float32x4_t)veorq_s8(v83[5], v68)), v84[5]));
            int8x16_t v80 = vandq_s8(v80, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v84[6], vsubq_f32(v71, (float32x4_t)veorq_s8(*v83, v65)), *v84), vsubq_f32(v73, (float32x4_t)veorq_s8(v83[2], v67)), v84[2]), vsubq_f32(v75, (float32x4_t)veorq_s8(v83[4], v69)), v84[4]));
            v82 += 3;
            v78 += 4;
          }
          while (v78 != 24);
          v61 += 18;
          CFRange v85 = (int8x16_t *)((char *)&unk_1B6E72660 + 32 * v60);
          int8x16_t v76 = vorrq_s8(vandq_s8(vandq_s8(*v85, v59), (int8x16_t)vcltzq_s32((int32x4_t)v80)), v76);
          int8x16_t v77 = vorrq_s8(vandq_s8(vandq_s8(v85[1], v58), (int8x16_t)vcltzq_s32((int32x4_t)v81)), v77);
          ++v60;
          int v62 = v79;
        }
        while (v60 != v15);
      }
      else
      {
        int8x16_t v76 = 0uLL;
        int8x16_t v77 = 0uLL;
      }
      if ((vminvq_u32((uint32x4_t)vceqzq_s32((int32x4_t)vorrq_s8(v76, v77))) & 0x80000000) != 0)
      {
        int8x16_t v36 = v89;
        int8x16_t v35 = v90;
      }
      else
      {
        int8x16_t v36 = v89;
        int8x16_t v35 = v90;
        if (8 * (int)v13 < v8)
        {
          unsigned int v86 = 0;
          unint64_t v87 = v46;
          do
          {
            v91[0] = v76;
            v91[1] = v77;
            int v88 = *((_DWORD *)v91 + (v86 & 7));
            if ((_BYTE)v88)
            {
              *(unsigned char *)(*(void *)&v12[109] + result) = v88;
              *(void *)(*(void *)&v12[107] + 8 * result) = *(void *)(*(void *)&v12[101] + 8 * v87);
              uint64_t result = (result + 1);
            }
            if (v86 > 6) {
              break;
            }
            ++v86;
            ++v87;
          }
          while (v87 < v8);
        }
      }
    }
    ++v13;
    v46 += 8;
  }
  while (v13 != v14);
  return result;
}

uint64_t sub_1B65C98E0(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  unsigned int v8 = v2;
  unsigned int v10 = v9;
  uint64_t v12 = v11;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if ((v9 & 3) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v2, v3, v4, v5, v6, v7, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v13 = v10 >> 2;
  uint64_t v14 = (v8 + 3) >> 2;
  uint64_t v15 = *(unsigned int *)(v12 + 880);
  if (v15)
  {
    uint64_t v16 = 0;
    unsigned int v17 = 0;
    unsigned int v18 = 0;
    v19.i64[0] = 0x8000000080000000;
    v19.i64[1] = 0x8000000080000000;
    uint64_t v20 = v12;
    do
    {
      for (uint64_t i = 0; i != 96; i += 16)
      {
        int32x4_t v22 = *(int32x4_t *)(v20 + i);
        int8x16_t v23 = (int8x16_t *)&v63[v17 + 145];
        int8x16_t v24 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
        int8x16_t v25 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
        *int8x16_t v23 = v24;
        v23[1] = v25;
        int8x16_t v26 = (int8x16_t)vdupq_laneq_s32(v22, 2);
        v23[2] = v26;
        v23[3] = (int8x16_t)vdupq_laneq_s32(v22, 3);
        int32x4_t v27 = (int8x16_t *)&v63[v18 + 1];
        *int32x4_t v27 = vandq_s8(v24, v19);
        v27[1] = vandq_s8(v25, v19);
        v27[2] = vandq_s8(v26, v19);
        v17 += 4;
        v18 += 3;
      }
      ++v16;
      v20 += 96;
    }
    while (v16 != v15);
  }
  if (v13 >= v14) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v29 = *(void *)(v12 + 768);
  uint64_t v30 = *(void *)(v12 + 776);
  int8x16_t v31 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(v12 + 836) | (~*(_DWORD *)(v12 + 840) << 8));
  float32x4_t v32 = (const float *)(v12 + 816);
  int32x2_t v33 = (const float *)(v12 + 832);
  int32x4_t v34 = (int32x4_t)vld1q_dup_f32(v33);
  uint64_t v35 = *(void *)(v12 + 784);
  int8x16_t v36 = (const float *)(v12 + 820);
  int8x16_t v37 = (int8x16_t)vld1q_dup_f32(v32);
  float32x4_t v38 = (const float *)(v12 + 824);
  int8x16_t v39 = (const float *)(v12 + 828);
  int8x16_t v40 = (int8x16_t)vld1q_dup_f32(v38);
  uint64_t v41 = *(void *)(v12 + 792);
  int8x16_t v42 = (int8x16_t)vld1q_dup_f32(v36);
  int8x16_t v43 = (int8x16_t)vld1q_dup_f32(v39);
  unsigned int v44 = v10 & 0xFFFFFFFC;
  do
  {
    int8x16_t v45 = *(int8x16_t *)(v35 + 16 * v13);
    int8x16_t v46 = *(int8x16_t *)(v41 + 16 * v13);
    int8x16_t v47 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v46, v42), vandq_s8(v45, v37)));
    int8x16_t v48 = vorrq_s8(vandq_s8(v46, v43), vandq_s8(v45, v40));
    int8x16_t v49 = (int8x16_t)vmovl_u16(*(uint16x4_t *)(v30 + 8 * v13));
    int8x16_t v50 = vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v34, (int32x4_t)v49), v47), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v48, vandq_s8(v31, v49))));
    if ((vmaxvq_u32((uint32x4_t)v50) & 0x80000000) != 0)
    {
      if (v15)
      {
        uint64_t v51 = 0;
        unsigned int v52 = 0;
        int v53 = 0;
        int8x16_t v55 = 0uLL;
        do
        {
          int v56 = 0;
          v57.i64[0] = -1;
          v57.i64[1] = -1;
          unsigned int v58 = v52;
          do
          {
            int8x16_t v59 = (float32x4_t *)&v63[(v53 + v56) + 145];
            uint64_t v54 = v29 + 96 * v13;
            int8x16_t v57 = vandq_s8(v57, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v59[3], vsubq_f32(*(float32x4_t *)v54, (float32x4_t)veorq_s8((int8x16_t)v63[v58 + 1], *(int8x16_t *)(v54 + 48))), *v59), vsubq_f32(*(float32x4_t *)(v54 + 16), (float32x4_t)veorq_s8((int8x16_t)v63[v58 + 2], *(int8x16_t *)(v54 + 64))), v59[1]), vsubq_f32(*(float32x4_t *)(v54 + 32), (float32x4_t)veorq_s8((int8x16_t)v63[v58 + 3], *(int8x16_t *)(v54 + 80))), v59[2]));
            v58 += 3;
            v56 += 4;
          }
          while (v56 != 24);
          v52 += 18;
          int8x16_t v55 = vorrq_s8(vandq_s8(vandq_s8(xmmword_1B6E72760[v51++], v50), (int8x16_t)vcltzq_s32((int32x4_t)v57)), v55);
          v53 += 24;
        }
        while (v51 != v15);
      }
      else
      {
        int8x16_t v55 = 0uLL;
      }
      if ((vminvq_u32((uint32x4_t)vceqzq_s32((int32x4_t)v55)) & 0x80000000) == 0 && 4 * (int)v13 < v8)
      {
        unsigned int v60 = 0;
        unint64_t v61 = v44;
        do
        {
          v63[0] = v55;
          int v62 = *(_DWORD *)((unint64_t)v63 & 0xFFFFFFFFFFFFFFF3 | (4 * (v60 & 3)));
          if ((_BYTE)v62)
          {
            *(unsigned char *)(*(void *)(v12 + 872) + result) = v62;
            *(void *)(*(void *)(v12 + 856) + 8 * result) = *(void *)(*(void *)(v12 + 808)
                                                                                         + 8 * v61);
            uint64_t result = (result + 1);
          }
          if (v60 > 2) {
            break;
          }
          ++v60;
          ++v61;
        }
        while (v61 < v8);
      }
    }
    ++v13;
    v44 += 4;
  }
  while (v13 != v14);
  return result;
}

uint64_t sub_1B65C9C30(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t result = 0;
  int v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  int v6 = *(_DWORD *)(a1 + 832);
  uint64_t v7 = a2;
  do
  {
    int v8 = *(unsigned __int16 *)(*(void *)(a1 + 776) + 2 * v7);
    int v9 = v6 & v8;
    int v10 = v5 & v8;
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11)
    {
      unint64_t v12 = *(unsigned int *)(*(void *)(a1 + 784) + 4 * v7) | ((unint64_t)*(unsigned int *)(*(void *)(a1 + 792) + 4 * v7) << 32);
      if ((v12 & *(void *)(a1 + 816)) != 0 && (*(void *)(a1 + 824) & v12) == 0)
      {
        int v13 = 0;
        int v14 = 0;
        uint64_t v15 = (float32x4_t *)(*(void *)(a1 + 768) + 32 * v7);
        float32x4_t v16 = *v15;
        float32x4_t v17 = v15[1];
        do
        {
          unint64_t v18 = 0;
          BOOL v19 = 0;
          long long v20 = *(_OWORD *)(a1 + 48);
          v26[2] = *(_OWORD *)(a1 + 32);
          v26[3] = v20;
          long long v21 = *(_OWORD *)(a1 + 80);
          v26[4] = *(_OWORD *)(a1 + 64);
          v26[5] = v21;
          long long v22 = *(_OWORD *)(a1 + 16);
          v26[0] = *(_OWORD *)a1;
          v26[1] = v22;
          do
          {
            float32x4_t v23 = (float32x4_t)v26[v18];
            int8x16_t v24 = (int8x16_t)vmulq_f32(v23, v16);
            float32x4_t v25 = vmulq_f32(vabsq_f32(v23), v17);
            if (vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))) > vaddq_f32(vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2)).f32[0]) {
              break;
            }
            BOOL v19 = v18++ > 4;
          }
          while (v18 != 6);
          v14 |= (v19 << v13++);
        }
        while (v13 != 6);
        if (v14)
        {
          *(unsigned char *)(*(void *)(a1 + 872) + result) = v14;
          *(void *)(*(void *)(a1 + 856) + 8 * result) = *(void *)(*(void *)(a1 + 808) + 8 * v7);
          uint64_t result = (result + 1);
        }
      }
    }
    ++v7;
  }
  while (v7 != a3);
  return result;
}

uint64_t sub_1B65C9D84(int32x2_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if ((a2 & 7) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 3;
  uint64_t v12 = (v8 + 7) >> 3;
  uint64_t v13 = a1[110].u32[0];
  if (v13)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    unint64_t v18 = a1;
    do
    {
      for (uint64_t i = 0; i != 12; i += 2)
      {
        int32x4_t v20 = *(int32x4_t *)v18[i].i8;
        int8x16_t v21 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        long long v22 = (int8x16_t *)&v70[2 * v15 + 36];
        int8x16_t *v22 = v21;
        v22[1] = v21;
        int8x16_t v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
        _OWORD v22[2] = v23;
        v22[3] = v23;
        int8x16_t v24 = (int8x16_t)vdupq_laneq_s32(v20, 2);
        int32x4_t v25 = vdupq_laneq_s32(v20, 3);
        void v22[4] = v24;
        v22[5] = v24;
        v22[6] = (int8x16_t)v25;
        v22[7] = (int8x16_t)v25;
        int8x16_t v26 = (int8x16_t *)&v70[2 * v16];
        int8x16_t v27 = vandq_s8(v21, v17);
        *int8x16_t v26 = v27;
        v26[1] = v27;
        int8x16_t v28 = vandq_s8(v23, v17);
        v26[2] = v28;
        v26[3] = v28;
        int8x16_t v29 = vandq_s8(v24, v17);
        v26[4] = v29;
        v26[5] = v29;
        v15 += 4;
        v16 += 3;
      }
      ++v14;
      v18 += 12;
    }
    while (v14 != v13);
  }
  if (v11 >= v12) {
    return 0;
  }
  uint64_t result = 0;
  int32x2_t v31 = a1[97];
  float32x4_t v32 = (const float *)&a1[102];
  int8x16_t v33 = (int8x16_t)vdupq_n_s32(a1[104].i32[1] | (~a1[105].i32[0] << 8));
  int8x16_t v34 = (int8x16_t)vdupq_lane_s32(a1[104], 0);
  int32x2_t v35 = a1[98];
  int8x16_t v36 = (int8x16_t)vld1q_dup_f32(v32);
  int8x16_t v37 = (const float *)&a1[102] + 1;
  float32x4_t v38 = (const float *)&a1[103];
  int8x16_t v39 = (const float *)&a1[103] + 1;
  int8x16_t v40 = (int8x16_t)vld1q_dup_f32(v38);
  int32x2_t v41 = a1[99];
  int8x16_t v42 = (int8x16_t)vld1q_dup_f32(v37);
  int8x16_t v43 = (int8x16_t)vld1q_dup_f32(v39);
  int32x2_t v44 = a1[96];
  do
  {
    int8x16_t v45 = (int8x16_t *)(*(void *)&v35 + 32 * v11);
    int8x16_t v46 = *v45;
    int8x16_t v47 = v45[1];
    int8x16_t v48 = vandq_s8(*v45, v36);
    int8x16_t v49 = (int8x16_t *)(*(void *)&v41 + 32 * v11);
    int8x16_t v50 = v49[1];
    int8x16_t v51 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v49, v42), v48)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v50, v42), vandq_s8(v47, v36))));
    uint16x8_t v52 = *(uint16x8_t *)(*(void *)&v31 + 16 * v11);
    int8x16_t v53 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v52.i8);
    int8x16_t v54 = (int8x16_t)vmovl_high_u16(v52);
    *(int8x8_t *)v47.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v34, v53)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v34, v54)))), v51), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v49, v43), vandq_s8(v46, v40)), vandq_s8(v33, v53))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v50, v43), vandq_s8(v47, v40)), vandq_s8(v33, v54))))));
    int8x16_t v55 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v33.i8)), 0x1FuLL));
    int8x16_t v56 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v33.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v56, v55)) & 0x80000000) != 0)
    {
      if (v13)
      {
        unsigned int v57 = 0;
        int v58 = 0;
        int v59 = 0;
        uint64_t v60 = *(void *)&v44 + 192 * v11;
        do
        {
          int v61 = 0;
          unsigned int v62 = v57;
          do
          {
            int8x16_t v63 = (int8x16_t *)&v70[2 * v62];
            uint64_t v64 = (float32x4_t *)&v70[2 * (v58 + v61) + 36];
            int8x16_t v55 = vandq_s8(v55, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v64[7], vsubq_f32(*(float32x4_t *)(v60 + 16), (float32x4_t)veorq_s8(v63[1], *(int8x16_t *)(v60 + 112))), v64[1]), vsubq_f32(*(float32x4_t *)(v60 + 48), (float32x4_t)veorq_s8(v63[3], *(int8x16_t *)(v60 + 144))), v64[3]), vsubq_f32(*(float32x4_t *)(v60 + 80), (float32x4_t)veorq_s8(v63[5], *(int8x16_t *)(v60 + 176))), v64[5]));
            int8x16_t v56 = vandq_s8(v56, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v64[6], vsubq_f32(*(float32x4_t *)v60, (float32x4_t)veorq_s8(*v63, *(int8x16_t *)(v60 + 96))), *v64), vsubq_f32(*(float32x4_t *)(v60 + 32), (float32x4_t)veorq_s8(v63[2], *(int8x16_t *)(v60 + 128))), v64[2]), vsubq_f32(*(float32x4_t *)(v60 + 64), (float32x4_t)veorq_s8(v63[4], *(int8x16_t *)(v60 + 160))), v64[4]));
            v62 += 3;
            v61 += 4;
          }
          while (v61 != 24);
          v57 += 18;
          ++v59;
          v58 += 24;
        }
        while (v59 != v13);
      }
      int8x16_t v65 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v56), (int8x16_t)xmmword_1B6E50330), vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v55), (int8x16_t)xmmword_1B6E725B0));
      *(int8x8_t *)v65.i8 = vorr_s8(*(int8x8_t *)v65.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
      unsigned __int32 v66 = vadd_s32(*(int32x2_t *)v65.i8, vdup_lane_s32(*(int32x2_t *)v65.i8, 1)).u32[0];
      unsigned int v67 = 8 * v11;
      if (v66) {
        BOOL v68 = v67 >= v8;
      }
      else {
        BOOL v68 = 1;
      }
      if (!v68)
      {
        int32x2_t v69 = a1[108];
        do
        {
          if (v66)
          {
            *(_DWORD *)(*(void *)&v69 + 4 * result) = v67;
            uint64_t result = (result + 1);
          }
          if (v66 < 2) {
            break;
          }
          ++v67;
          v66 >>= 1;
        }
        while (v67 < v8);
      }
    }
    ++v11;
  }
  while (v11 != v12);
  return result;
}

uint64_t sub_1B65CA158(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if ((a2 & 3) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 2;
  uint64_t v12 = (v8 + 3) >> 2;
  uint64_t v13 = *(unsigned int *)(a1 + 880);
  if (v13)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    uint64_t v18 = a1;
    do
    {
      for (uint64_t i = 0; i != 96; i += 16)
      {
        int32x4_t v20 = *(int32x4_t *)(v18 + i);
        int8x16_t v21 = (int8x16_t *)&v60[v15 + 18];
        int8x16_t v22 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        int8x16_t v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
        *int8x16_t v21 = v22;
        v21[1] = v23;
        int8x16_t v24 = (int8x16_t)vdupq_laneq_s32(v20, 2);
        v21[2] = v24;
        void v21[3] = (int8x16_t)vdupq_laneq_s32(v20, 3);
        int32x4_t v25 = (int8x16_t *)&v60[v16];
        *int32x4_t v25 = vandq_s8(v22, v17);
        v25[1] = vandq_s8(v23, v17);
        v25[2] = vandq_s8(v24, v17);
        v15 += 4;
        v16 += 3;
      }
      ++v14;
      v18 += 96;
    }
    while (v14 != v13);
  }
  if (v11 >= v12) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v27 = *(void *)(a1 + 768);
  uint64_t v28 = *(void *)(a1 + 776);
  int8x16_t v29 = (const float *)(a1 + 816);
  int8x16_t v30 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  int32x2_t v31 = (const float *)(a1 + 832);
  int32x4_t v32 = (int32x4_t)vld1q_dup_f32(v31);
  uint64_t v33 = *(void *)(a1 + 784);
  int8x16_t v34 = (const float *)(a1 + 820);
  int8x16_t v35 = (int8x16_t)vld1q_dup_f32(v29);
  int8x16_t v36 = (const float *)(a1 + 824);
  int8x16_t v37 = (const float *)(a1 + 828);
  int8x16_t v38 = (int8x16_t)vld1q_dup_f32(v36);
  int8x16_t v39 = (int8x16_t)vld1q_dup_f32(v34);
  int8x16_t v40 = (int8x16_t)vld1q_dup_f32(v37);
  uint64_t v41 = *(void *)(a1 + 792);
  do
  {
    int8x16_t v42 = *(int8x16_t *)(v33 + 16 * v11);
    int8x16_t v43 = *(int8x16_t *)(v41 + 16 * v11);
    int8x16_t v44 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v43, v39), vandq_s8(v42, v35)));
    int8x16_t v45 = vorrq_s8(vandq_s8(v43, v40), vandq_s8(v42, v38));
    int8x16_t v46 = (int8x16_t)vmovl_u16(*(uint16x4_t *)(v28 + 8 * v11));
    int8x16_t v47 = vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v32, (int32x4_t)v46), v44), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v45, vandq_s8(v30, v46))));
    if ((vmaxvq_u32((uint32x4_t)v47) & 0x80000000) != 0)
    {
      if (v13)
      {
        unsigned int v48 = 0;
        int v49 = 0;
        int v50 = 0;
        do
        {
          int v52 = 0;
          unsigned int v53 = v48;
          do
          {
            int8x16_t v54 = (float32x4_t *)&v60[(v49 + v52) + 18];
            uint64_t v51 = v27 + 96 * v11;
            int8x16_t v47 = vandq_s8(v47, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v54[3], vsubq_f32(*(float32x4_t *)v51, (float32x4_t)veorq_s8((int8x16_t)v60[v53], *(int8x16_t *)(v51 + 48))), *v54), vsubq_f32(*(float32x4_t *)(v51 + 16), (float32x4_t)veorq_s8((int8x16_t)v60[v53 + 1], *(int8x16_t *)(v51 + 64))), v54[1]), vsubq_f32(*(float32x4_t *)(v51 + 32), (float32x4_t)veorq_s8((int8x16_t)v60[v53 + 2], *(int8x16_t *)(v51 + 80))), v54[2]));
            v53 += 3;
            v52 += 4;
          }
          while (v52 != 24);
          v48 += 18;
          ++v50;
          v49 += 24;
        }
        while (v50 != v13);
      }
      int8x16_t v55 = vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v47), (int8x16_t)xmmword_1B6E50330);
      *(int8x8_t *)v55.i8 = vorr_s8(*(int8x8_t *)v55.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL));
      unsigned __int32 v56 = vadd_s32(*(int32x2_t *)v55.i8, vdup_lane_s32(*(int32x2_t *)v55.i8, 1)).u32[0];
      unsigned int v57 = 4 * v11;
      if (v56) {
        BOOL v58 = v57 >= v8;
      }
      else {
        BOOL v58 = 1;
      }
      if (!v58)
      {
        uint64_t v59 = *(void *)(a1 + 864);
        do
        {
          if (v56)
          {
            *(_DWORD *)(v59 + 4 * result) = v57;
            uint64_t result = (result + 1);
          }
          if (v56 < 2) {
            break;
          }
          ++v57;
          v56 >>= 1;
        }
        while (v57 < v8);
      }
    }
    ++v11;
  }
  while (v11 != v12);
  return result;
}

uint64_t sub_1B65CA428(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t result = 0;
  int v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  int v6 = *(_DWORD *)(a1 + 832);
  uint64_t v7 = *(void *)(a1 + 816);
  uint64_t v8 = *(void *)(a1 + 824);
  uint64_t v9 = *(void *)(a1 + 864);
  uint64_t v10 = a2;
  do
  {
    int v11 = *(unsigned __int16 *)(*(void *)(a1 + 776) + 2 * v10);
    int v12 = v6 & v11;
    int v13 = v5 & v11;
    if (v12) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      unint64_t v15 = *(unsigned int *)(*(void *)(a1 + 784) + 4 * v10) | ((unint64_t)*(unsigned int *)(*(void *)(a1 + 792) + 4 * v10) << 32);
      unint64_t v16 = v15 & v7;
      unint64_t v17 = v8 & v15;
      if (v16 && v17 == 0)
      {
        uint64_t v19 = 0;
        long long v20 = *(_OWORD *)(a1 + 48);
        v27[2] = *(_OWORD *)(a1 + 32);
        v27[3] = v20;
        long long v21 = *(_OWORD *)(a1 + 80);
        v27[4] = *(_OWORD *)(a1 + 64);
        v27[5] = v21;
        long long v22 = *(_OWORD *)(a1 + 16);
        v27[0] = *(_OWORD *)a1;
        v27[1] = v22;
        int8x16_t v23 = (float32x4_t *)(*(void *)(a1 + 768) + 32 * v10);
        while (1)
        {
          float32x4_t v24 = (float32x4_t)v27[v19];
          int8x16_t v25 = (int8x16_t)vmulq_f32(v24, *v23);
          float32x4_t v26 = vmulq_f32(vabsq_f32(v24), v23[1]);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL))) > vaddq_f32(vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2)).f32[0]) {
            break;
          }
          if (++v19 == 6)
          {
            *(_DWORD *)(v9 + 4 * result) = v10;
            uint64_t result = (result + 1);
            break;
          }
        }
      }
    }
    ++v10;
  }
  while (v10 != a3);
  return result;
}

uint64_t sub_1B65CA538(int32x2_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if ((a2 & 7) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 3;
  uint64_t v12 = (v8 + 7) >> 3;
  uint64_t v13 = a1[110].u32[0];
  if (v13)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    uint64_t v18 = a1;
    do
    {
      for (uint64_t i = 0; i != 12; i += 2)
      {
        int32x4_t v20 = *(int32x4_t *)v18[i].i8;
        int8x16_t v21 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        long long v22 = (int8x16_t *)&v70[2 * v15 + 36];
        int8x16_t *v22 = v21;
        v22[1] = v21;
        int8x16_t v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
        _OWORD v22[2] = v23;
        v22[3] = v23;
        int8x16_t v24 = (int8x16_t)vdupq_laneq_s32(v20, 2);
        int32x4_t v25 = vdupq_laneq_s32(v20, 3);
        void v22[4] = v24;
        v22[5] = v24;
        v22[6] = (int8x16_t)v25;
        v22[7] = (int8x16_t)v25;
        float32x4_t v26 = (int8x16_t *)&v70[2 * v16];
        int8x16_t v27 = vandq_s8(v21, v17);
        *float32x4_t v26 = v27;
        v26[1] = v27;
        int8x16_t v28 = vandq_s8(v23, v17);
        v26[2] = v28;
        v26[3] = v28;
        int8x16_t v29 = vandq_s8(v24, v17);
        v26[4] = v29;
        v26[5] = v29;
        v15 += 4;
        v16 += 3;
      }
      ++v14;
      v18 += 12;
    }
    while (v14 != v13);
  }
  if (v11 >= v12) {
    return 0;
  }
  uint64_t result = 0;
  int32x2_t v31 = a1[97];
  int8x16_t v32 = (int8x16_t)vdupq_n_s32(a1[104].i32[1] | (~a1[105].i32[0] << 8));
  int8x16_t v33 = (int8x16_t)vdupq_lane_s32(a1[104], 0);
  int8x16_t v34 = (const float *)&a1[102];
  int32x2_t v35 = a1[98];
  int8x16_t v36 = (const float *)&a1[102] + 1;
  int8x16_t v37 = (int8x16_t)vld1q_dup_f32(v34);
  int8x16_t v38 = (const float *)&a1[103];
  int8x16_t v39 = (const float *)&a1[103] + 1;
  int8x16_t v40 = (int8x16_t)vld1q_dup_f32(v38);
  int32x2_t v41 = a1[99];
  int8x16_t v42 = (int8x16_t)vld1q_dup_f32(v36);
  int8x16_t v43 = (int8x16_t)vld1q_dup_f32(v39);
  int32x2_t v44 = a1[96];
  unsigned int v45 = a2 & 0xFFFFFFF8;
  do
  {
    int8x16_t v46 = (int8x16_t *)(*(void *)&v35 + 32 * v11);
    int8x16_t v47 = *v46;
    int8x16_t v48 = v46[1];
    int8x16_t v49 = vandq_s8(*v46, v37);
    int v50 = (int8x16_t *)(*(void *)&v41 + 32 * v11);
    int8x16_t v51 = v50[1];
    int8x16_t v52 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v50, v42), v49)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v51, v42), vandq_s8(v48, v37))));
    uint16x8_t v53 = *(uint16x8_t *)(*(void *)&v31 + 16 * v11);
    int8x16_t v54 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v53.i8);
    int8x16_t v55 = (int8x16_t)vmovl_high_u16(v53);
    *(int8x8_t *)v48.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v33, v54)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v33, v55)))), v52), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v50, v43), vandq_s8(v47, v40)), vandq_s8(v32, v54))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v51, v43), vandq_s8(v48, v40)), vandq_s8(v32, v55))))));
    int8x16_t v56 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)v32.i8)), 0x1FuLL));
    int8x16_t v57 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)v32.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v57, v56)) & 0x80000000) != 0)
    {
      if (v13)
      {
        unsigned int v58 = 0;
        int v59 = 0;
        int v60 = 0;
        uint64_t v61 = *(void *)&v44 + 192 * v11;
        do
        {
          int v62 = 0;
          unsigned int v63 = v58;
          do
          {
            uint64_t v64 = (int8x16_t *)&v70[2 * v63];
            int8x16_t v65 = (float32x4_t *)&v70[2 * (v59 + v62) + 36];
            int8x16_t v56 = vandq_s8(v56, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v65[7], vsubq_f32(*(float32x4_t *)(v61 + 16), (float32x4_t)veorq_s8(v64[1], *(int8x16_t *)(v61 + 112))), v65[1]), vsubq_f32(*(float32x4_t *)(v61 + 48), (float32x4_t)veorq_s8(v64[3], *(int8x16_t *)(v61 + 144))), v65[3]), vsubq_f32(*(float32x4_t *)(v61 + 80), (float32x4_t)veorq_s8(v64[5], *(int8x16_t *)(v61 + 176))), v65[5]));
            int8x16_t v57 = vandq_s8(v57, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v65[6], vsubq_f32(*(float32x4_t *)v61, (float32x4_t)veorq_s8(*v64, *(int8x16_t *)(v61 + 96))), *v65), vsubq_f32(*(float32x4_t *)(v61 + 32), (float32x4_t)veorq_s8(v64[2], *(int8x16_t *)(v61 + 128))), v65[2]), vsubq_f32(*(float32x4_t *)(v61 + 64), (float32x4_t)veorq_s8(v64[4], *(int8x16_t *)(v61 + 160))), v65[4]));
            v63 += 3;
            v62 += 4;
          }
          while (v62 != 24);
          v58 += 18;
          ++v60;
          v59 += 24;
        }
        while (v60 != v13);
      }
      int8x16_t v66 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v57), (int8x16_t)xmmword_1B6E50330), vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v56), (int8x16_t)xmmword_1B6E725B0));
      *(int8x8_t *)v66.i8 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
      unsigned __int32 v67 = vadd_s32(*(int32x2_t *)v66.i8, vdup_lane_s32(*(int32x2_t *)v66.i8, 1)).u32[0];
      if (v67) {
        BOOL v68 = 8 * (int)v11 >= v8;
      }
      else {
        BOOL v68 = 1;
      }
      unint64_t v69 = v45;
      if (!v68)
      {
        do
        {
          if (v67)
          {
            *(void *)(*(void *)&a1[107] + 8 * result) = *(void *)(*(void *)&a1[101] + 8 * v69);
            uint64_t result = (result + 1);
          }
          if (v67 < 2) {
            break;
          }
          ++v69;
          v67 >>= 1;
        }
        while (v69 < v8);
      }
    }
    ++v11;
    v45 += 8;
  }
  while (v11 != v12);
  return result;
}

uint64_t sub_1B65CA930(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if ((a2 & 3) != 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  }
  uint64_t v11 = a2 >> 2;
  uint64_t v12 = (v8 + 3) >> 2;
  uint64_t v13 = *(unsigned int *)(a1 + 880);
  if (v13)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    int v16 = 0;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    uint64_t v18 = a1;
    do
    {
      for (uint64_t i = 0; i != 96; i += 16)
      {
        int32x4_t v20 = *(int32x4_t *)(v18 + i);
        int8x16_t v21 = (int8x16_t *)&v60[v15 + 18];
        int8x16_t v22 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        int8x16_t v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
        *int8x16_t v21 = v22;
        v21[1] = v23;
        int8x16_t v24 = (int8x16_t)vdupq_laneq_s32(v20, 2);
        v21[2] = v24;
        void v21[3] = (int8x16_t)vdupq_laneq_s32(v20, 3);
        int32x4_t v25 = (int8x16_t *)&v60[v16];
        *int32x4_t v25 = vandq_s8(v22, v17);
        v25[1] = vandq_s8(v23, v17);
        v25[2] = vandq_s8(v24, v17);
        v15 += 4;
        v16 += 3;
      }
      ++v14;
      v18 += 96;
    }
    while (v14 != v13);
  }
  if (v11 >= v12) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v27 = *(void *)(a1 + 768);
  uint64_t v28 = *(void *)(a1 + 776);
  int8x16_t v29 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  int8x16_t v30 = (const float *)(a1 + 816);
  int32x2_t v31 = (const float *)(a1 + 832);
  int32x4_t v32 = (int32x4_t)vld1q_dup_f32(v31);
  uint64_t v33 = *(void *)(a1 + 784);
  int8x16_t v34 = (const float *)(a1 + 820);
  int8x16_t v35 = (int8x16_t)vld1q_dup_f32(v30);
  int8x16_t v36 = (const float *)(a1 + 824);
  int8x16_t v37 = (const float *)(a1 + 828);
  int8x16_t v38 = (int8x16_t)vld1q_dup_f32(v36);
  uint64_t v39 = *(void *)(a1 + 792);
  int8x16_t v40 = (int8x16_t)vld1q_dup_f32(v34);
  int8x16_t v41 = (int8x16_t)vld1q_dup_f32(v37);
  unsigned int v42 = a2 & 0xFFFFFFFC;
  do
  {
    int8x16_t v43 = *(int8x16_t *)(v33 + 16 * v11);
    int8x16_t v44 = *(int8x16_t *)(v39 + 16 * v11);
    int8x16_t v45 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v44, v40), vandq_s8(v43, v35)));
    int8x16_t v46 = vorrq_s8(vandq_s8(v44, v41), vandq_s8(v43, v38));
    int8x16_t v47 = (int8x16_t)vmovl_u16(*(uint16x4_t *)(v28 + 8 * v11));
    int8x16_t v48 = vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v32, (int32x4_t)v47), v45), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v46, vandq_s8(v29, v47))));
    if ((vmaxvq_u32((uint32x4_t)v48) & 0x80000000) != 0)
    {
      if (v13)
      {
        unsigned int v49 = 0;
        int v50 = 0;
        int v51 = 0;
        do
        {
          int v53 = 0;
          unsigned int v54 = v49;
          do
          {
            int8x16_t v55 = (float32x4_t *)&v60[(v50 + v53) + 18];
            uint64_t v52 = v27 + 96 * v11;
            int8x16_t v48 = vandq_s8(v48, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v55[3], vsubq_f32(*(float32x4_t *)v52, (float32x4_t)veorq_s8((int8x16_t)v60[v54], *(int8x16_t *)(v52 + 48))), *v55), vsubq_f32(*(float32x4_t *)(v52 + 16), (float32x4_t)veorq_s8((int8x16_t)v60[v54 + 1], *(int8x16_t *)(v52 + 64))), v55[1]), vsubq_f32(*(float32x4_t *)(v52 + 32), (float32x4_t)veorq_s8((int8x16_t)v60[v54 + 2], *(int8x16_t *)(v52 + 80))), v55[2]));
            v54 += 3;
            v53 += 4;
          }
          while (v53 != 24);
          v49 += 18;
          ++v51;
          v50 += 24;
        }
        while (v51 != v13);
      }
      int8x16_t v56 = vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v48), (int8x16_t)xmmword_1B6E50330);
      *(int8x8_t *)v56.i8 = vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL));
      unsigned __int32 v57 = vadd_s32(*(int32x2_t *)v56.i8, vdup_lane_s32(*(int32x2_t *)v56.i8, 1)).u32[0];
      if (v57) {
        BOOL v58 = 4 * (int)v11 >= v8;
      }
      else {
        BOOL v58 = 1;
      }
      unint64_t v59 = v42;
      if (!v58)
      {
        do
        {
          if (v57)
          {
            *(void *)(*(void *)(a1 + 856) + 8 * result) = *(void *)(*(void *)(a1 + 808) + 8 * v59);
            uint64_t result = (result + 1);
          }
          if (v57 < 2) {
            break;
          }
          ++v59;
          v57 >>= 1;
        }
        while (v59 < v8);
      }
    }
    ++v11;
    v42 += 4;
  }
  while (v11 != v12);
  return result;
}

uint64_t sub_1B65CAC24(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t result = 0;
  int v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  int v6 = *(_DWORD *)(a1 + 832);
  uint64_t v7 = *(void *)(a1 + 816);
  uint64_t v8 = *(void *)(a1 + 824);
  uint64_t v9 = a2;
  do
  {
    int v10 = *(unsigned __int16 *)(*(void *)(a1 + 776) + 2 * v9);
    int v11 = v6 & v10;
    int v12 = v5 & v10;
    if (v11) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 0;
    }
    if (v13)
    {
      unint64_t v14 = *(unsigned int *)(*(void *)(a1 + 784) + 4 * v9) | ((unint64_t)*(unsigned int *)(*(void *)(a1 + 792) + 4 * v9) << 32);
      unint64_t v15 = v14 & v7;
      unint64_t v16 = v8 & v14;
      if (v15 && v16 == 0)
      {
        uint64_t v18 = 0;
        long long v19 = *(_OWORD *)(a1 + 48);
        v26[2] = *(_OWORD *)(a1 + 32);
        v26[3] = v19;
        long long v20 = *(_OWORD *)(a1 + 80);
        v26[4] = *(_OWORD *)(a1 + 64);
        v26[5] = v20;
        long long v21 = *(_OWORD *)(a1 + 16);
        v26[0] = *(_OWORD *)a1;
        v26[1] = v21;
        int8x16_t v22 = (float32x4_t *)(*(void *)(a1 + 768) + 32 * v9);
        while (1)
        {
          float32x4_t v23 = (float32x4_t)v26[v18];
          int8x16_t v24 = (int8x16_t)vmulq_f32(v23, *v22);
          float32x4_t v25 = vmulq_f32(vabsq_f32(v23), v22[1]);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))) > vaddq_f32(vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2)).f32[0]) {
            break;
          }
          if (++v18 == 6)
          {
            *(void *)(*(void *)(a1 + 856) + 8 * result) = *(void *)(*(void *)(a1 + 808) + 8 * v9);
            uint64_t result = (result + 1);
            break;
          }
        }
      }
    }
    ++v9;
  }
  while (v9 != a3);
  return result;
}

uint64_t sub_1B65CAD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v18 = a2;
  *((void *)&v18 + 1) = a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBC88, memory_order_acquire) & 1) == 0)
  {
    uint64_t v16 = a3;
    uint64_t v13 = a2;
    int v14 = __cxa_guard_acquire(&qword_1E9DDBC88);
    a2 = v13;
    a3 = v16;
    if (v14)
    {
      byte_1E9DDBC80 = 1;
      __cxa_guard_release(&qword_1E9DDBC88);
      a2 = v13;
      a3 = v16;
    }
  }
  if (byte_1E9DDBC80) {
    uint64_t v6 = 0x82816288C4F8725ALL;
  }
  else {
    uint64_t v6 = 0;
  }
  sub_1B645DCC0(a1, a2, a3, a4, v6, 0);
  *(void *)a1 = &unk_1F0FB3888;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)&long long v19 = *(void *)(a1 + 368);
  LOBYTE(v23) = 0;
  char v24 = 0;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  long long v25 = xmmword_1B6E4FC80;
  char v26 = *(unsigned char *)(a1 + 376);
  char v27 = 2;
  uint64_t v28 = 8;
  int v29 = 4;
  __int16 v30 = 1;
  *(void *)(a1 + 384) = sub_1B63F9384(v18, *((uint64_t *)&v18 + 1), (uint64_t *)&v18, (uint64_t *)&v19, &v20);
  long long v7 = v18;
  uint64_t v8 = *(void *)(a1 + 368);
  *(void *)&long long v20 = 0;
  WORD4(v20) = 256;
  BYTE10(v20) = *(unsigned char *)(a1 + 377);
  uint64_t v21 = 0;
  __int16 v22 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBC88, memory_order_acquire) & 1) == 0)
  {
    long long v17 = v7;
    int v15 = __cxa_guard_acquire(&qword_1E9DDBC88);
    long long v7 = v17;
    if (v15)
    {
      byte_1E9DDBC80 = 1;
      __cxa_guard_release(&qword_1E9DDBC88);
      long long v7 = v17;
    }
  }
  if (byte_1E9DDBC80) {
    unint64_t v9 = 0x82816288C4F8725ALL;
  }
  else {
    unint64_t v9 = 0;
  }
  unint64_t v23 = v9;
  long long v19 = v7;
  uint64_t v10 = sub_1B63C8330(&v19, 0x40u, 8u);
  sub_1B6460520(v10, v8, (uint64_t)&v20, *(void *)(a1 + 384));
  *(void *)(a1 + 392) = v11;
  return a1;
}

void sub_1B65CAF4C(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B65CAF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_1B6447B50(*(void *)(a1 + 368), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Manipulator", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ManipulatorPass.mm", 45, v6 | 0x300000000);
  sub_1B65A8594(*(__n128 **)(a1 + 384), v7, v8, v9);
  sub_1B65A88F8(*(void *)(a1 + 384), v10, v11, v12, v13, v14, v15, v16);
  sub_1B65A8D10(*(void *)(a1 + 384));
  sub_1B65A8F34(*(uint64_t **)(a1 + 384), *(const char **)a2, *(void *)(a2 + 8), v17);

  prof_endFlame();
}

void sub_1B65CAFE4(_Unwind_Exception *a1)
{
}

void sub_1B65CAFF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_1B6447B50(*(void *)(a1 + 368), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Manipulator", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ManipulatorPass.mm", 55, v6 | 0x300000000);
  sub_1B6460548(*(void *)(a1 + 392), a2, v7, v8);

  prof_endFlame();
}

void sub_1B65CB05C(_Unwind_Exception *a1)
{
}

void sub_1B65CB06C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = sub_1B6447B50(*(void *)(a1 + 368), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Manipulator", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ManipulatorPass.mm", 60, v7 | 0x300000000);
  sub_1B6460C38(*(void *)(a1 + 392), a2, a3, 0);

  prof_endFlame();
}

void sub_1B65CB0E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1B65CB0F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1B65CB1B8(a1, (uint64_t *)a2);
  CFX::RG::Pass::renderTo(v6, a3, 0x100000001, 0);
  long long v7 = *(_OWORD *)(a2 + 136);
  v14[6] = *(_OWORD *)(a2 + 120);
  v14[7] = v7;
  long long v8 = *(_OWORD *)(a2 + 168);
  v14[8] = *(_OWORD *)(a2 + 152);
  v14[9] = v8;
  long long v9 = *(_OWORD *)(a2 + 72);
  v14[2] = *(_OWORD *)(a2 + 56);
  v14[3] = v9;
  long long v10 = *(_OWORD *)(a2 + 104);
  v14[4] = *(_OWORD *)(a2 + 88);
  v14[5] = v10;
  long long v11 = *(_OWORD *)(a2 + 40);
  v14[0] = *(_OWORD *)(a2 + 24);
  v14[1] = v11;
  uint64_t v12 = sub_1B63CFDE4(a1, (uint64_t)"MANIPULATOR_DEPTH", v14);
  CFX::RG::Pass::renderTo(v6, (uint64_t)v12, 0x200000002, -1);
  *(void *)(v6 + 400) = v12;
  return v6;
}

uint64_t sub_1B65CB1B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[0] = sub_1B65CB248(v6[0], v4, v6, a2);
  sub_1B63C88CC(a1 + 18, v6);
  return v6[0];
}

void sub_1B65CB210(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B65CB248(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = sub_1B63C8330(v8, 0x198u, 8u);
  return sub_1B65CAD3C(v6, *a3, a3[1], a4);
}

void *sub_1B65CB5B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend___CFObject(*(void **)(*(void *)(a1 + 32) + 8), a2, a3, a4);
  if (result)
  {
    uint64_t v11 = sub_1B6535608(result, 0, v5, v6, v7, v8, v9, v10);
    return (void *)MEMORY[0x1F4181798](v11, sel_killParticles, v12, v13);
  }
  return result;
}

void *sub_1B65CB68C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend___CFObject(*(void **)(*(void *)(a1 + 32) + 8), a2, a3, a4);
  if (result)
  {
    uint64_t v11 = (void *)sub_1B6535608(result, 0, v5, v6, v7, v8, v9, v10);
    return objc_msgSend_restart(v11, v12, v13, v14);
  }
  return result;
}

uint64_t sub_1B65CDA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1B649F390(a2, a2, a3, a4, a5, a6, a7, a8)) {
    return 1;
  }
  if (!sub_1B649FCB4(a2, v10, v11, v12, v13, v14, v15, v16))
  {
    float32x4_t v39 = 0uLL;
    long long v25 = (const void *)sub_1B649F5F4(a2, v18, v19, v20, v21, v22, v23, v24);
    if (v25)
    {
      if (sub_1B63F49F8(v25, 0, (uint64_t)&v39, v26, v27, v28, v29, v30))
      {
        int8x16_t v38 = (float32x4_t *)sub_1B64A01D4(a2, v31, v32, v33, v34, v35, v36, v37);
        sub_1B6403C2C(&v39, v38, &v39);
        sub_1B6403B98(*(float32x4_t **)(a1 + 32), *(float32x4_t **)(a1 + 32), &v39);
      }
    }
  }
  return 0;
}

uint64_t sub_1B65CF8A8(void *a1, void *a2, __CFDictionary *a3, uint64_t a4)
{
  unsigned __int8 v4 = a4;
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (const void *)objc_msgSend_rootNode(a2, (const char *)a2, (uint64_t)a3, a4);
  uint64_t v12 = (const void *)objc_msgSend_rootNode(a1, v9, v10, v11);
  CFDictionarySetValue(a3, v8, v12);
  uint64_t v16 = objc_msgSend_background(a1, v13, v14, v15);
  uint64_t v20 = objc_msgSend_background(a2, v17, v18, v19);
  sub_1B65D0F04(v16, v20, v21, v22);
  uint64_t v26 = objc_msgSend_lightingEnvironment(a1, v23, v24, v25);
  uint64_t v30 = objc_msgSend_lightingEnvironment(a2, v27, v28, v29);
  sub_1B65D0F04(v26, v30, v31, v32);
  long long v138 = 0u;
  long long v139 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  uint64_t v36 = objc_msgSend_rootNode(a2, v33, v34, v35, 0);
  int8x16_t v40 = objc_msgSend_childNodes(v36, v37, v38, v39);
  uint64_t v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v40, v41, (uint64_t)&v136, (uint64_t)v140, 16);
  if (v42)
  {
    uint64_t v46 = v42;
    uint64_t v47 = *(void *)v137;
    do
    {
      uint64_t v48 = 0;
      do
      {
        if (*(void *)v137 != v47) {
          objc_enumerationMutation(v40);
        }
        unsigned int v49 = sub_1B65CFD34(*(void **)(*((void *)&v136 + 1) + 8 * v48), a3, v4);
        int v53 = objc_msgSend_rootNode(a1, v50, v51, v52);
        objc_msgSend_addChildNode_(v53, v54, (uint64_t)v49, v55);
        ++v48;
      }
      while (v46 != v48);
      uint64_t v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v40, v56, (uint64_t)&v136, (uint64_t)v140, 16);
    }
    while (v46);
  }
  unsigned __int32 v57 = objc_msgSend_rootNode(a2, v43, v44, v45);
  sub_1B65D10DC(v57, a3);
  objc_msgSend_startTime(a2, v58, v59, v60);
  objc_msgSend_setStartTime_(a1, v61, v62, v63);
  objc_msgSend_endTime(a2, v64, v65, v66);
  objc_msgSend_setEndTime_(a1, v67, v68, v69);
  uint64_t v73 = objc_msgSend_fogColor(a2, v70, v71, v72);
  objc_msgSend_setFogColor_(a1, v74, v73, v75);
  objc_msgSend_fogStartDistance(a2, v76, v77, v78);
  *(float *)&double v79 = v79;
  objc_msgSend_setFogStartDistance_(a1, v80, v81, v82, v79);
  objc_msgSend_fogEndDistance(a2, v83, v84, v85);
  *(float *)&double v86 = v86;
  objc_msgSend_setFogEndDistance_(a1, v87, v88, v89, v86);
  objc_msgSend_fogDensityExponent(a2, v90, v91, v92);
  *(float *)&double v93 = v93;
  objc_msgSend_setFogDensityExponent_(a1, v94, v95, v96, v93);
  uint64_t v100 = objc_msgSend_fogColor(a2, v97, v98, v99);
  objc_msgSend_setFogColor_(a1, v101, v100, v102);
  uint64_t v106 = objc_msgSend_wantsScreenSpaceReflection(a2, v103, v104, v105);
  objc_msgSend_setWantsScreenSpaceReflection_(a1, v107, v106, v108);
  uint64_t v112 = objc_msgSend_screenSpaceReflectionSampleCount(a2, v109, v110, v111);
  objc_msgSend_setScreenSpaceReflectionSampleCount_(a1, v113, v112, v114);
  objc_msgSend_screenSpaceReflectionMaximumDistance(a2, v115, v116, v117);
  *(float *)&double v118 = v118;
  objc_msgSend_setScreenSpaceReflectionMaximumDistance_(a1, v119, v120, v121, v118);
  objc_msgSend_screenSpaceReflectionStride(a2, v122, v123, v124);
  *(float *)&double v125 = v125;
  objc_msgSend_setScreenSpaceReflectionStride_(a1, v126, v127, v128, v125);
  uint64_t v132 = objc_msgSend_screenSpaceReflectionSampleCount(a2, v129, v130, v131);
  return objc_msgSend_setScreenSpaceReflectionSampleCount_(a1, v133, v132, v134);
}

void *sub_1B65CFD34(void *a1, const __CFDictionary *a2, unsigned __int8 a3)
{
  uint64_t v1076 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v5 = a1;
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(a2, a1);
  if (!Value)
  {
    CFDictionaryRef Value = objc_msgSend_node(VFXNode, v6, v7, v8);
    CFDictionarySetValue(a2, v5, Value);
    long long v1060 = 0u;
    long long v1061 = 0u;
    long long v1058 = 0u;
    long long v1059 = 0u;
    uint64_t v13 = objc_msgSend_childNodes(v5, v10, v11, v12);
    uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v1058, (uint64_t)v1070, 16);
    if (v15)
    {
      uint64_t v19 = v15;
      uint64_t v20 = *(void *)v1059;
      uint64_t v21 = a3;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v1059 != v20) {
            objc_enumerationMutation(v13);
          }
          uint64_t v23 = sub_1B65CFD34(*(void *)(*((void *)&v1058 + 1) + 8 * i), a2, a3);
          objc_msgSend_addChildNode_(Value, v24, v23, v25);
        }
        uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v26, (uint64_t)&v1058, (uint64_t)v1070, 16);
      }
      while (v19);
    }
    else
    {
      uint64_t v21 = a3;
    }
    objc_msgSend_transform(v5, v16, v17, v18);
    objc_msgSend_setTransform_(Value, v27, v28, v29);
    objc_msgSend_pivot(v5, v30, v31, v32);
    objc_msgSend_setPivot_(Value, v33, v34, v35);
    uint64_t v39 = objc_msgSend_castsShadow(v5, v36, v37, v38);
    objc_msgSend_setCastsShadow_(Value, v40, v39, v41);
    uint64_t v45 = objc_msgSend_name(v5, v42, v43, v44);
    objc_msgSend_setName_(Value, v46, v45, v47);
    uint64_t v51 = objc_msgSend_identifier(v5, v48, v49, v50);
    objc_msgSend_setIdentifier_(Value, v52, v51, v53);
    unsigned __int32 v57 = objc_msgSend_geometry(v5, v54, v55, v56);
    BOOL v58 = sub_1B65D1358(v57, a2);
    objc_msgSend_setModel_(Value, v59, (uint64_t)v58, v60);
    uint64_t v64 = objc_msgSend_light(v5, v61, v62, v63);
    if (v64)
    {
      unsigned __int32 v67 = v64;
      uint64_t v71 = (void *)CFDictionaryGetValue(a2, v64);
      if (!v71)
      {
        uint64_t v71 = objc_msgSend_light(VFXLight, v68, v69, v70);
        CFDictionarySetValue(a2, v67, v71);
        uint64_t v75 = objc_msgSend_type(v67, v72, v73, v74);
        uint64_t v79 = sub_1B64FA090(v75, v76, v77, v78);
        objc_msgSend_setType_(v71, v80, v79, v81);
        uint64_t v85 = objc_msgSend_color(v67, v82, v83, v84);
        objc_msgSend_setColor_(v71, v86, v85, v87);
        objc_msgSend_temperature(v67, v88, v89, v90);
        *(float *)&double v91 = v91;
        objc_msgSend_setTemperature_(v71, v92, v93, v94, v91);
        if (a3)
        {
          objc_msgSend_intensity(v67, v95, v96, v97);
          *(float *)&double v106 = v106;
        }
        else
        {
          unsigned int v98 = objc_msgSend_type(v71, v95, v96, v97);
          objc_msgSend_intensity(v67, v99, v100, v101);
          *(float *)&double v102 = v102;
          *(float *)&double v106 = sub_1B6497CF8(v98, *(float *)&v102);
        }
        objc_msgSend_setIntensity_(v71, v103, v104, v105, v106);
        uint64_t v113 = objc_msgSend_name(v67, v110, v111, v112);
        objc_msgSend_setName_(v71, v114, v113, v115);
        uint64_t v119 = objc_msgSend_castsShadow(v67, v116, v117, v118);
        objc_msgSend_setCastsShadow_(v71, v120, v119, v121);
        if (objc_msgSend_shadowColor(v67, v122, v123, v124))
        {
          uint64_t v128 = (const void *)objc_msgSend_shadowColor(v67, v125, v126, v127);
          sub_1B64FA004(v128, 0);
          LODWORD(v130) = HIDWORD(v129);
          objc_msgSend_setShadowIntensity_(v71, v129, v131, v132, v130);
        }
        objc_msgSend_shadowRadius(v67, v125, v126, v127);
        *(float *)&double v133 = v133;
        objc_msgSend_setShadowRadius_(v71, v134, v135, v136, v133);
        objc_msgSend_shadowMapSize(v67, v137, v138, v139);
        objc_msgSend_setShadowMapSize_(v71, v140, v141, v142);
        uint64_t v146 = objc_msgSend_shadowSampleCount(v67, v143, v144, v145);
        objc_msgSend_setShadowSampleCount_(v71, v147, v146, v148);
        objc_msgSend_shadowBias(v67, v149, v150, v151);
        *(float *)&double v152 = v152;
        objc_msgSend_setShadowBias_(v71, v153, v154, v155, v152);
        uint64_t v159 = objc_msgSend_automaticallyAdjustsShadowProjection(v67, v156, v157, v158);
        objc_msgSend_setAutomaticallyAdjustsShadowProjection_(v71, v160, v159, v161);
        objc_msgSend_maximumShadowDistance(v67, v162, v163, v164);
        *(float *)&double v165 = v165;
        objc_msgSend_setMaximumShadowDistance_(v71, v166, v167, v168, v165);
        uint64_t v172 = objc_msgSend_forcesBackFaceCasters(v67, v169, v170, v171);
        objc_msgSend_setForcesBackFaceCasters_(v71, v173, v172, v174);
        uint64_t v178 = objc_msgSend_sampleDistributedShadowMaps(v67, v175, v176, v177);
        objc_msgSend_setSampleDistributedShadowMaps_(v71, v179, v178, v180);
        uint64_t v184 = objc_msgSend_shadowCascadeCount(v67, v181, v182, v183);
        objc_msgSend_setShadowCascadeCount_(v71, v185, v184, v186);
        objc_msgSend_shadowCascadeSplittingFactor(v67, v187, v188, v189);
        *(float *)&double v190 = v190;
        objc_msgSend_setShadowCascadeSplittingFactor_(v71, v191, v192, v193, v190);
        objc_msgSend_orthographicScale(v67, v194, v195, v196);
        *(float *)&double v197 = v197;
        objc_msgSend_setOrthographicScale_(v71, v198, v199, v200, v197);
        objc_msgSend_zNear(v67, v201, v202, v203);
        *(float *)&double v204 = v204;
        objc_msgSend_setZNear_(v71, v205, v206, v207, v204);
        objc_msgSend_zFar(v67, v208, v209, v210);
        *(float *)&double v211 = v211;
        objc_msgSend_setZFar_(v71, v212, v213, v214, v211);
        objc_msgSend_attenuationEndDistance(v67, v215, v216, v217);
        *(float *)&double v218 = v218;
        objc_msgSend_setAttenuationDistance_(v71, v219, v220, v221, v218);
        objc_msgSend_spotInnerAngle(v67, v222, v223, v224);
        *(float *)&double v225 = v225;
        objc_msgSend_setSpotInnerAngle_(v71, v226, v227, v228, v225);
        objc_msgSend_spotOuterAngle(v67, v229, v230, v231);
        *(float *)&double v232 = v232;
        objc_msgSend_setSpotOuterAngle_(v71, v233, v234, v235, v232);
        uint64_t v239 = objc_msgSend_probeType(v67, v236, v237, v238);
        objc_msgSend_setProbeType_(v71, v240, v239, v241);
        uint64_t updated = objc_msgSend_probeUpdateType(v67, v242, v243, v244);
        objc_msgSend_setProbeUpdateType_(v71, v246, updated, v247);
        objc_msgSend_probeExtents(v67, v248, v249, v250);
        objc_msgSend_setProbeExtents_(v71, v251, v252, v253);
        objc_msgSend_probeOffset(v67, v254, v255, v256);
        objc_msgSend_setProbeOffset_(v71, v257, v258, v259);
        uint64_t v263 = objc_msgSend__sphericalHarmonics(v67, v260, v261, v262);
        objc_msgSend_set_sphericalHarmonics_(v71, v264, v263, v265);
        uint64_t v269 = objc_msgSend_parallaxCorrectionEnabled(v67, v266, v267, v268);
        objc_msgSend_setParallaxCorrectionEnabled_(v71, v270, v269, v271);
        objc_msgSend_parallaxExtentsFactor(v67, v272, v273, v274);
        objc_msgSend_setParallaxExtentsFactor_(v71, v275, v276, v277);
        objc_msgSend_parallaxCenterOffset(v67, v278, v279, v280);
        objc_msgSend_setParallaxCenterOffset_(v71, v281, v282, v283);
        if (objc_msgSend_type(v71, v284, v285, v286) == 5)
        {
          uint64_t v290 = objc_msgSend_areaType(v67, v287, v288, v289);
          objc_msgSend_setAreaType_(v71, v291, v290, v292);
          objc_msgSend_areaExtents(v67, v293, v294, v295);
          objc_msgSend_setAreaExtents_(v71, v296, v297, v298);
          uint64_t v302 = objc_msgSend_areaPolygonVertices(v67, v299, v300, v301);
          objc_msgSend_setAreaPolygonVertices_(v71, v303, v302, v304);
          uint64_t v308 = objc_msgSend_drawsArea(v67, v305, v306, v307);
          objc_msgSend_setDrawsArea_(v71, v309, v308, v310);
        }
        uint64_t v311 = objc_msgSend_doubleSided(v67, v287, v288, v289);
        objc_msgSend_setDoubleSided_(v71, v312, v311, v313);
        uint64_t v317 = objc_msgSend_categoryBitMask(v67, v314, v315, v316);
        objc_msgSend_setCategoryBitMask_(v71, v318, v317, v319);
        sub_1B65D120C(v71, v67, v320, v321);
      }
      objc_msgSend_setLight_(Value, v68, (uint64_t)v71, v70);
    }
    else
    {
      objc_msgSend_setLight_(Value, v65, 0, v66);
    }
    uint64_t v322 = objc_msgSend_camera(v5, v107, v108, v109);
    if (v322)
    {
      uint64_t v325 = v322;
      int v327 = (void *)CFDictionaryGetValue(a2, v322);
      if (!v327)
      {
        int v327 = objc_msgSend_camera(VFXCamera, v323, v326, v324);
        CFDictionarySetValue(a2, v325, v327);
        uint64_t v331 = objc_msgSend_name(v325, v328, v329, v330);
        objc_msgSend_setName_(v327, v332, v331, v333);
        if (objc_msgSend_wantsDepthOfField(v325, v334, v335, v336))
        {
          uint64_t v340 = objc_msgSend_depthOfField(VFXCameraEffectDepthOfField, v337, v338, v339);
          objc_msgSend_setDepthOfField_(v327, v341, v340, v342);
          uint64_t v346 = objc_msgSend_apertureBladeCount(v325, v343, v344, v345);
          float v350 = objc_msgSend_depthOfField(v327, v347, v348, v349);
          objc_msgSend_setApertureBladeCount_(v350, v351, v346, v352);
          uint64_t v356 = objc_msgSend_focalBlurSampleCount(v325, v353, v354, v355);
          double v360 = objc_msgSend_depthOfField(v327, v357, v358, v359);
          objc_msgSend_setFocalBlurSampleCount_(v360, v361, v356, v362);
          objc_msgSend_fStop(v325, v363, v364, v365);
          float v367 = v366;
          float64x2_t v371 = objc_msgSend_depthOfField(v327, v368, v369, v370);
          *(float *)&double v372 = v367;
          objc_msgSend_setFStop_(v371, v373, v374, v375, v372);
        }
        uint64_t v376 = objc_msgSend_name(v325, v337, v338, v339);
        objc_msgSend_setName_(v327, v377, v376, v378);
        objc_msgSend_focusDistance(v325, v379, v380, v381);
        *(float *)&double v382 = v382;
        objc_msgSend_setFocusDistance_(v327, v383, v384, v385, v382);
        objc_msgSend_sensorHeight(v325, v386, v387, v388);
        *(float *)&double v389 = v389;
        objc_msgSend_setSensorHeight_(v327, v390, v391, v392, v389);
        objc_msgSend_fieldOfView(v325, v393, v394, v395);
        *(float *)&double v396 = v396;
        objc_msgSend_setFieldOfView_(v327, v397, v398, v399, v396);
        objc_msgSend_postProjectionTransform(v325, v400, v401, v402);
        long long v1071 = v1075[0];
        long long v1072 = v1075[1];
        long long v1073 = v1075[2];
        objc_msgSend_setPostProjectionTransform_(v327, v403, (uint64_t)&v1071, v404);
        uint64_t v408 = objc_msgSend_fillMode(v325, v405, v406, v407);
        objc_msgSend_setFillMode_(v327, v409, v408, v410);
        if (objc_msgSend_projectionDirection(v325, v411, v412, v413)) {
          objc_msgSend_setProjectionDirection_(v327, v414, 3, v415);
        }
        else {
          objc_msgSend_setProjectionDirection_(v327, v414, 2, v415);
        }
        objc_msgSend_zNear(v325, v416, v417, v418);
        *(float *)&double v419 = v419;
        objc_msgSend_setZNear_(v327, v420, v421, v422, v419);
        objc_msgSend_zFar(v325, v423, v424, v425);
        *(float *)&double v426 = v426;
        objc_msgSend_setZFar_(v327, v427, v428, v429, v426);
        objc_msgSend_orthographicScale(v325, v430, v431, v432);
        *(float *)&double v433 = v433;
        objc_msgSend_setOrthographicScale_(v327, v434, v435, v436, v433);
        uint64_t v440 = objc_msgSend_automaticallyAdjustsZRange(v325, v437, v438, v439);
        objc_msgSend_setAutomaticallyAdjustsZRange_(v327, v441, v440, v442);
        uint64_t v446 = objc_msgSend_usesOrthographicProjection(v325, v443, v444, v445);
        objc_msgSend_setUsesOrthographicProjection_(v327, v447, v446, v448);
        uint64_t v452 = objc_msgSend_wantsHDR(v325, v449, v450, v451);
        objc_msgSend_setWantsHDR_(v327, v453, v452, v454);
        objc_msgSend_lensShift(v325, v455, v456, v457);
        objc_msgSend_setFilmOffset_(v327, v458, v459, v460);
        objc_msgSend_motionBlurIntensity(v325, v461, v462, v463);
        if (v467 != 0.0)
        {
          uint64_t v468 = objc_msgSend_motionBlur(VFXCameraEffectMotionBlur, v464, v465, v466);
          objc_msgSend_setMotionBlur_(v327, v469, v468, v470);
          objc_msgSend_motionBlurIntensity(v325, v471, v472, v473);
          float v475 = v474;
          uint64_t v479 = objc_msgSend_motionBlur(v327, v476, v477, v478);
          *(float *)&double v480 = v475;
          objc_msgSend_setIntensity_(v479, v481, v482, v483, v480);
        }
        objc_msgSend_bloomIntensity(v325, v464, v465, v466);
        if (v487 != 0.0)
        {
          uint64_t v488 = objc_msgSend_bloom(VFXCameraEffectBloom, v484, v485, v486);
          objc_msgSend_setBloom_(v327, v489, v488, v490);
          objc_msgSend_bloomIntensity(v325, v491, v492, v493);
          float v495 = v494;
          uint64_t v499 = objc_msgSend_bloom(v327, v496, v497, v498);
          *(float *)&double v500 = v495;
          objc_msgSend_setIntensity_(v499, v501, v502, v503, v500);
          objc_msgSend_bloomThreshold(v325, v504, v505, v506);
          float v508 = v507;
          uint64_t v512 = objc_msgSend_bloom(v327, v509, v510, v511);
          *(float *)&double v513 = v508;
          objc_msgSend_setThreshold_(v512, v514, v515, v516, v513);
          uint64_t v520 = objc_msgSend_bloomIterationCount(v325, v517, v518, v519);
          long long v524 = objc_msgSend_bloom(v327, v521, v522, v523);
          objc_msgSend_setIterationCount_(v524, v525, v520, v526);
        }
        objc_msgSend_vignettingIntensity(v325, v484, v485, v486);
        if (v530 != 0.0)
        {
          objc_msgSend_vignettingPower(v325, v527, v528, v529);
          if (v531 > 0.0)
          {
            uint64_t v532 = objc_msgSend_vignetting(VFXCameraEffectVignetting, v527, v528, v529);
            objc_msgSend_setVignetting_(v327, v533, v532, v534);
            objc_msgSend_vignettingIntensity(v325, v535, v536, v537);
            float v539 = v538;
            uint64_t v543 = objc_msgSend_vignetting(v327, v540, v541, v542);
            *(float *)&double v544 = v539;
            objc_msgSend_setIntensity_(v543, v545, v546, v547, v544);
          }
        }
        objc_msgSend_colorFringeStrength(v325, v527, v528, v529);
        if (v551 != 0.0)
        {
          objc_msgSend_colorFringeIntensity(v325, v548, v549, v550);
          if (v552 != 0.0)
          {
            uint64_t v553 = objc_msgSend_colorFringe(VFXCameraEffectColorFringe, v548, v549, v550);
            objc_msgSend_setColorFringe_(v327, v554, v553, v555);
            objc_msgSend_colorFringeStrength(v325, v556, v557, v558);
            float v560 = v559;
            uint64_t v564 = objc_msgSend_colorFringe(v327, v561, v562, v563);
            *(float *)&double v565 = v560;
            objc_msgSend_setStrength_(v564, v566, v567, v568, v565);
            objc_msgSend_colorFringeIntensity(v325, v569, v570, v571);
            float v573 = v572;
            uint64_t v577 = objc_msgSend_colorFringe(v327, v574, v575, v576);
            *(float *)&double v578 = v573;
            objc_msgSend_setIntensity_(v577, v579, v580, v581, v578);
          }
        }
        objc_msgSend_saturation(v325, v548, v549, v550);
        if (v585 != 1.0)
        {
          objc_msgSend_contrast(v325, v582, v583, v584);
          if (v586 != 1.0)
          {
            if (objc_msgSend_wantsHDR(v325, v582, v583, v584))
            {
              uint64_t v587 = objc_msgSend_colorGrading(VFXCameraEffectColorGrading, v582, v583, v584);
              objc_msgSend_setColorGrading_(v327, v588, v587, v589);
              objc_msgSend_saturation(v325, v590, v591, v592);
              float v594 = v593;
              uint64_t v598 = objc_msgSend_colorGrading(v327, v595, v596, v597);
              *(float *)&double v599 = v594;
              objc_msgSend_setSaturation_(v598, v600, v601, v602, v599);
              objc_msgSend_contrast(v325, v603, v604, v605);
              float v607 = v606 + 1.0;
              uint64_t v611 = objc_msgSend_colorGrading(v327, v608, v609, v610);
              *(float *)&double v612 = v607;
              objc_msgSend_setContrast_(v611, v613, v614, v615, v612);
              objc_msgSend_whiteBalanceTemperature(v325, v616, v617, v618);
              float v620 = v619 * 0.5;
              uint64_t v624 = objc_msgSend_colorGrading(v327, v621, v622, v623);
              *(float *)&double v625 = v620;
              objc_msgSend_setWhiteBalanceTemperature_(v624, v626, v627, v628, v625);
              objc_msgSend_whiteBalanceTint(v325, v629, v630, v631);
              float v633 = v632 * 0.5;
              uint64_t v637 = objc_msgSend_colorGrading(v327, v634, v635, v636);
              *(float *)&double v638 = v633;
              objc_msgSend_setWhiteBalanceTint_(v637, v639, v640, v641, v638);
            }
          }
        }
        objc_msgSend_grainIntensity(v325, v582, v583, v584);
        if (v645 != 0.0)
        {
          uint64_t v646 = objc_msgSend_grain(VFXCameraEffectGrain, v642, v643, v644);
          objc_msgSend_setGrain_(v327, v647, v646, v648);
          objc_msgSend_grainScale(v325, v649, v650, v651);
          float v653 = v652;
          uint64_t v657 = objc_msgSend_grain(v327, v654, v655, v656);
          *(float *)&double v658 = v653;
          objc_msgSend_setScale_(v657, v659, v660, v661, v658);
          uint64_t IsColored = objc_msgSend_grainIsColored(v325, v662, v663, v664);
          uint64_t v669 = objc_msgSend_grain(v327, v666, v667, v668);
          objc_msgSend_setColored_(v669, v670, IsColored, v671);
          objc_msgSend_grainIntensity(v325, v672, v673, v674);
          float v676 = v675;
          uint64_t v680 = objc_msgSend_grain(v327, v677, v678, v679);
          *(float *)&double v681 = v676;
          objc_msgSend_setIntensity_(v680, v682, v683, v684, v681);
        }
        uint64_t v685 = objc_msgSend_categoryBitMask(v325, v642, v643, v644);
        objc_msgSend_setCategoryBitMask_(v327, v686, v685, v687);
        sub_1B65D120C(v327, v325, v688, v689);
      }
    }
    else
    {
      int v327 = 0;
    }
    objc_msgSend_setCamera_(Value, v323, (uint64_t)v327, v324);
    uint64_t v693 = objc_msgSend_skinner(v5, v690, v691, v692);
    if (v693)
    {
      uint64_t v696 = v693;
      uint64_t v700 = (void *)CFDictionaryGetValue(a2, v693);
      if (!v700)
      {
        uint64_t v701 = objc_msgSend_baseGeometry(v696, v697, v698, v699);
        v1054 = (void *)sub_1B65D1358(v701, a2);
        if (objc_msgSend_boneWeights(v696, v702, v703, v704))
        {
          uint64_t v708 = objc_msgSend_boneWeights(v696, v705, v706, v707);
          uint64_t v1052 = sub_1B65D1DDC(v708, v709, v710, v711);
        }
        else
        {
          uint64_t v1052 = 0;
        }
        v1056 = v5;
        if (objc_msgSend_boneIndices(v696, v705, v706, v707))
        {
          uint64_t v718 = objc_msgSend_boneIndices(v696, v715, v716, v717);
          uint64_t v722 = sub_1B65D1DDC(v718, v719, v720, v721);
        }
        else
        {
          uint64_t v722 = 0;
        }
        uint64_t v723 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v715, v716, v717);
        long long v1071 = 0u;
        long long v1072 = 0u;
        long long v1073 = 0u;
        long long v1074 = 0u;
        uint64_t v727 = objc_msgSend_bones(v696, v724, v725, v726);
        uint64_t v729 = objc_msgSend_countByEnumeratingWithState_objects_count_(v727, v728, (uint64_t)&v1071, (uint64_t)v1075, 16);
        if (v729)
        {
          uint64_t v733 = v729;
          uint64_t v734 = *(void *)v1072;
          do
          {
            for (uint64_t j = 0; j != v733; ++j)
            {
              if (*(void *)v1072 != v734) {
                objc_enumerationMutation(v727);
              }
              uint64_t v736 = sub_1B65CFD34(*(void *)(*((void *)&v1071 + 1) + 8 * j), a2, v21);
              objc_msgSend_addObject_(v723, v737, v736, v738);
            }
            uint64_t v733 = objc_msgSend_countByEnumeratingWithState_objects_count_(v727, v739, (uint64_t)&v1071, (uint64_t)v1075, 16);
          }
          while (v733);
        }
        uint64_t v740 = objc_msgSend_mesh(v1054, v730, v731, v732);
        uint64_t v744 = objc_msgSend_boneInverseBindTransforms(v696, v741, v742, v743);
        uint64_t v700 = objc_msgSend_skinnerWithBaseMesh_bones_boneInverseBindTransforms_boneWeights_boneIndices_(VFXSkinner, v745, v740, (uint64_t)v723, v744, v1052, v722);
        uint64_t v749 = objc_msgSend_skeleton(v696, v746, v747, v748);
        uint64_t v750 = sub_1B65CFD34(v749, a2, v21);
        objc_msgSend_setSkeleton_(v700, v751, v750, v752);
        objc_msgSend_baseGeometryBindTransform(v696, v753, v754, v755);
        objc_msgSend_setBaseMeshBindTransform_(v700, v756, v757, v758, *(double *)&v1066, *(double *)&v1067, *(double *)&v1068, *(double *)&v1069);
        CFDictionarySetValue(a2, v696, v700);
        uint64_t v5 = v1056;
      }
      objc_msgSend_setSkinner_(Value, v697, (uint64_t)v700, v699);
    }
    else
    {
      objc_msgSend_setSkinner_(Value, v694, 0, v695);
    }
    uint64_t v759 = objc_msgSend_morpher(v5, v712, v713, v714);
    if (v759)
    {
      CFArrayRef v762 = v759;
      uint64_t v765 = (void *)CFDictionaryGetValue(a2, v759);
      if (!v765)
      {
        v766 = objc_alloc_init(VFXMorpher);
        CFDictionarySetValue(a2, v762, v766);
        uint64_t v770 = objc_msgSend_inBetweenCounts(v762, v767, v768, v769);
        uint64_t v777 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v771, v772, v773);
        v1055 = v766;
        if (v770)
        {
          v1057 = v5;
          long long v1068 = 0u;
          long long v1069 = 0u;
          long long v1066 = 0u;
          long long v1067 = 0u;
          uint64_t v778 = objc_msgSend_targetsAndInBetween(v762, v774, v775, v776);
          uint64_t v780 = objc_msgSend_countByEnumeratingWithState_objects_count_(v778, v779, (uint64_t)&v1066, (uint64_t)v1075, 16);
          if (v780)
          {
            uint64_t v784 = v780;
            uint64_t v785 = *(void *)v1067;
            do
            {
              for (uint64_t k = 0; k != v784; ++k)
              {
                if (*(void *)v1067 != v785) {
                  objc_enumerationMutation(v778);
                }
                uint64_t v787 = (void *)sub_1B65D1358(*(void **)(*((void *)&v1066 + 1) + 8 * k), a2);
                uint64_t v791 = objc_msgSend_mesh(v787, v788, v789, v790);
                objc_msgSend_addObject_(v777, v792, v791, v793);
              }
              uint64_t v784 = objc_msgSend_countByEnumeratingWithState_objects_count_(v778, v794, (uint64_t)&v1066, (uint64_t)v1075, 16);
            }
            while (v784);
          }
          uint64_t v795 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v781, v782, v783);
          long long v1062 = 0u;
          long long v1063 = 0u;
          long long v1064 = 0u;
          long long v1065 = 0u;
          uint64_t v799 = objc_msgSend_correctivesAndInBetween(v762, v796, v797, v798);
          uint64_t v801 = objc_msgSend_countByEnumeratingWithState_objects_count_(v799, v800, (uint64_t)&v1062, (uint64_t)&v1071, 16);
          if (v801)
          {
            uint64_t v805 = v801;
            uint64_t v806 = *(void *)v1063;
            do
            {
              for (uint64_t m = 0; m != v805; ++m)
              {
                if (*(void *)v1063 != v806) {
                  objc_enumerationMutation(v799);
                }
                uint64_t v808 = (void *)sub_1B65D1358(*(void **)(*((void *)&v1062 + 1) + 8 * m), a2);
                uint64_t v812 = objc_msgSend_mesh(v808, v809, v810, v811);
                objc_msgSend_addObject_(v795, v813, v812, v814);
              }
              uint64_t v805 = objc_msgSend_countByEnumeratingWithState_objects_count_(v799, v815, (uint64_t)&v1062, (uint64_t)&v1071, 16);
            }
            while (v805);
          }
          uint64_t v816 = objc_msgSend_inBetweenCounts(v762, v802, v803, v804);
          uint64_t v1053 = objc_msgSend_inBetweenWeights(v762, v817, v818, v819);
          uint64_t v1051 = objc_msgSend_correctiveDriverCounts(v762, v820, v821, v822);
          uint64_t v826 = objc_msgSend_correctiveDriverIndices(v762, v823, v824, v825);
          uint64_t v830 = objc_msgSend_correctiveInBetweenCounts(v762, v827, v828, v829);
          uint64_t v834 = objc_msgSend_correctiveInBetweenWeights(v762, v831, v832, v833);
          uint64_t v765 = v1055;
          objc_msgSend_setTargetsAndInBetweens_inBetweenCounts_inBetweenWeights_correctives_driverCounts_driverIndices_inBetweenCounts_inBetweenWeights_(v1055, v835, (uint64_t)v777, v816, v1053, v795, v1051, v826, v830, v834);
          uint64_t v5 = v1057;
        }
        else
        {
          long long v1073 = 0u;
          long long v1074 = 0u;
          long long v1071 = 0u;
          long long v1072 = 0u;
          uint64_t v842 = objc_msgSend_targets(v762, v774, v775, v776);
          uint64_t v844 = objc_msgSend_countByEnumeratingWithState_objects_count_(v842, v843, (uint64_t)&v1071, (uint64_t)v1075, 16);
          if (v844)
          {
            uint64_t v847 = v844;
            uint64_t v848 = *(void *)v1072;
            do
            {
              for (uint64_t n = 0; n != v847; ++n)
              {
                if (*(void *)v1072 != v848) {
                  objc_enumerationMutation(v842);
                }
                uint64_t v850 = (void *)sub_1B65D1358(*(void **)(*((void *)&v1071 + 1) + 8 * n), a2);
                uint64_t v854 = objc_msgSend_mesh(v850, v851, v852, v853);
                objc_msgSend_addObject_(v777, v855, v854, v856);
              }
              uint64_t v847 = objc_msgSend_countByEnumeratingWithState_objects_count_(v842, v857, (uint64_t)&v1071, (uint64_t)v1075, 16);
            }
            while (v847);
          }
          uint64_t v765 = v1055;
          objc_msgSend_setTargets_(v1055, v845, (uint64_t)v777, v846);
          uint64_t v861 = objc_msgSend_weights(v762, v858, v859, v860);
          objc_msgSend_setWeights_(v1055, v862, v861, v863);
        }
        uint64_t v864 = objc_msgSend_calculationMode(v762, v836, v837, v838);
        objc_msgSend_setCalculationMode_(v765, v865, v864, v866);
        uint64_t v870 = objc_msgSend_unifiesNormals(v762, v867, v868, v869);
        objc_msgSend_setUnifiesNormals_(v765, v871, v870, v872);
        uint64_t shouldMorphNormals = objc_msgSend_shouldMorphNormals(v762, v873, v874, v875);
        objc_msgSend_setShouldMorphNormals_(v765, v877, shouldMorphNormals, v878);
        objc_msgSend_weightIncrementalThreshold(v762, v879, v880, v881);
        objc_msgSend_setWeightIncrementalThreshold_(v765, v882, v883, v884);
      }
      objc_msgSend_setMorpher_(Value, v763, (uint64_t)v765, v764);
    }
    else
    {
      objc_msgSend_setMorpher_(Value, v760, 0, v761);
    }
    uint64_t v885 = objc_msgSend_physicsBody(v5, v839, v840, v841);
    if (v885)
    {
      uint64_t v889 = v885;
      unint64_t v890 = objc_msgSend_type(v885, v886, v887, v888);
      if (v890 >= 3) {
        uint64_t v894 = 1;
      }
      else {
        uint64_t v894 = v890;
      }
      v895 = objc_msgSend_physicsShape(v889, v891, v892, v893);
      uint64_t v897 = sub_1B65D25A4(v895, (const char *)a2, v21, v896);
      uint64_t v899 = objc_msgSend_bodyWithType_shape_(VFXPhysicsBody, v898, v894, (uint64_t)v897);
      objc_msgSend_mass(v889, v900, v901, v902);
      *(float *)&double v903 = v903;
      objc_msgSend_setMass_(v899, v904, v905, v906, v903);
      objc_msgSend_momentOfInertia(v889, v907, v908, v909);
      HIDWORD(v911) = v910;
      objc_msgSend_setMomentOfInertia_(v899, v912, v913, v914, v911);
      uint64_t v918 = objc_msgSend_usesDefaultMomentOfInertia(v889, v915, v916, v917);
      objc_msgSend_setUsesDefaultMomentOfInertia_(v899, v919, v918, v920);
      objc_msgSend_charge(v889, v921, v922, v923);
      *(float *)&double v924 = v924;
      objc_msgSend_setCharge_(v899, v925, v926, v927, v924);
      objc_msgSend_friction(v889, v928, v929, v930);
      *(float *)&double v931 = v931;
      objc_msgSend_setFriction_(v899, v932, v933, v934, v931);
      objc_msgSend_restitution(v889, v935, v936, v937);
      *(float *)&double v938 = v938;
      objc_msgSend_setRestitution_(v899, v939, v940, v941, v938);
      objc_msgSend_rollingFriction(v889, v942, v943, v944);
      *(float *)&double v945 = v945;
      objc_msgSend_setRollingFriction_(v899, v946, v947, v948, v945);
      uint64_t v952 = objc_msgSend_allowsResting(v889, v949, v950, v951);
      objc_msgSend_setAllowsResting_(v899, v953, v952, v954);
      objc_msgSend_velocity(v889, v955, v956, v957);
      HIDWORD(v959) = v958;
      objc_msgSend_setVelocity_(v899, v960, v961, v962, v959);
      objc_msgSend_angularVelocity(v889, v963, v964, v965);
      HIDWORD(v967) = v966;
      objc_msgSend_setAngularVelocity_(v899, v968, v969, v970, v967);
      objc_msgSend_damping(v889, v971, v972, v973);
      *(float *)&double v974 = v974;
      objc_msgSend_setDamping_(v899, v975, v976, v977, v974);
      objc_msgSend_angularDamping(v889, v978, v979, v980);
      *(float *)&double v981 = v981;
      objc_msgSend_setAngularDamping_(v899, v982, v983, v984, v981);
      objc_msgSend_velocityFactor(v889, v985, v986, v987);
      HIDWORD(v989) = v988;
      objc_msgSend_setVelocityFactor_(v899, v990, v991, v992, v989);
      objc_msgSend_angularVelocityFactor(v889, v993, v994, v995);
      HIDWORD(v997) = v996;
      objc_msgSend_setAngularVelocityFactor_(v899, v998, v999, v1000, v997);
      uint64_t v1004 = objc_msgSend_categoryBitMask(v889, v1001, v1002, v1003);
      objc_msgSend_setCategoryBitMask_(v899, v1005, v1004, v1006);
      uint64_t v1010 = objc_msgSend_collisionBitMask(v889, v1007, v1008, v1009);
      objc_msgSend_setCollisionBitMask_(v899, v1011, v1010, v1012);
      uint64_t v1016 = objc_msgSend_contactTestBitMask(v889, v1013, v1014, v1015);
      objc_msgSend_setContactTestBitMask_(v899, v1017, v1016, v1018);
      uint64_t isAffectedByGravity = objc_msgSend_isAffectedByGravity(v889, v1019, v1020, v1021);
      objc_msgSend_setAffectedByGravity_(v899, v1023, isAffectedByGravity, v1024);
    }
    else
    {
      uint64_t v899 = 0;
    }
    objc_msgSend_setPhysicsBody_(Value, v886, (uint64_t)v899, v888);
    isHiddeuint64_t n = objc_msgSend_isHidden(v5, v1025, v1026, v1027);
    objc_msgSend_setHidden_(Value, v1029, isHidden, v1030);
    objc_msgSend_opacity(v5, v1031, v1032, v1033);
    *(float *)&double v1034 = v1034;
    objc_msgSend_setOpacity_(Value, v1035, v1036, v1037, v1034);
    uint64_t v1041 = objc_msgSend_renderingOrder(v5, v1038, v1039, v1040);
    objc_msgSend_setRenderingOrder_(Value, v1042, v1041, v1043);
    uint64_t v1047 = objc_msgSend_categoryBitMask(v5, v1044, v1045, v1046);
    objc_msgSend_setCategoryBitMask_(Value, v1048, v1047, v1049);
  }
  return Value;
}

uint64_t sub_1B65D0F04(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = objc_msgSend_propertyName(a2, (const char *)a2, a3, a4);
  if (!objc_msgSend_isEqualToString_(v6, v7, @"transparent", v8)
    || (objc_msgSend_contents(a2, v9, v10, v11), objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v12 = objc_msgSend_contents(a2, v9, v10, v11);
    objc_msgSend_setContents_(a1, v13, v12, v14);
  }
  uint64_t v15 = objc_msgSend_minificationFilter(a2, v9, v10, v11);
  objc_msgSend_setMinificationFilter_(a1, v16, v15, v17);
  uint64_t v21 = objc_msgSend_magnificationFilter(a2, v18, v19, v20);
  objc_msgSend_setMagnificationFilter_(a1, v22, v21, v23);
  uint64_t v27 = objc_msgSend_mipFilter(a2, v24, v25, v26);
  objc_msgSend_setMipFilter_(a1, v28, v27, v29);
  if (a2)
  {
    objc_msgSend_contentsTransform(a2, v30, v31, v32);
    int8x16_t v34 = v82;
    __int32 v36 = v83.i32[1];
    LODWORD(v35) = v83.i32[0];
    __int32 v38 = v84.i32[0];
    int8x16_t v37 = v85;
    int8x16_t v39 = vextq_s8(v85, (int8x16_t)vtrn2q_s32((int32x4_t)v84, (int32x4_t)v85), 4uLL);
    int8x16_t v40 = (int8x16_t)vzip2q_s64(v84, v83);
    int8x16_t v33 = vextq_s8(v34, v34, 8uLL);
    *(int8x8_t *)v33.i8 = vext_s8(*(int8x8_t *)v82.i8, *(int8x8_t *)v33.i8, 4uLL);
  }
  else
  {
    int8x16_t v37 = 0uLL;
    v33.i64[0] = 0;
    __int32 v36 = 0;
    int64x2_t v84 = 0u;
    int8x16_t v85 = 0u;
    int8x16_t v82 = 0u;
    int64x2_t v83 = 0u;
    __int32 v38 = 0;
    LODWORD(v35) = 0;
    int8x16_t v34 = 0uLL;
    int8x16_t v39 = 0uLL;
    int8x16_t v40 = 0uLL;
  }
  HIDWORD(v35) = v36;
  int8x16_t v41 = vextq_s8(v39, v40, 8uLL);
  v41.i32[0] = v38;
  objc_msgSend_setContentsTransform_(a1, v30, v31, v32, *(double *)vextq_s8(vextq_s8(v34, v34, 4uLL), v33, 0xCuLL).i64, v35, *(double *)v41.i64, *(double *)vextq_s8(vextq_s8(v37, v37, 4uLL), v39, 0xCuLL).i64, *(_OWORD *)&v82, *(_OWORD *)&v83, *(_OWORD *)&v84, *(_OWORD *)&v85);
  uint64_t v45 = objc_msgSend_wrapS(a2, v42, v43, v44);
  objc_msgSend_setWrapS_(a1, v46, v45, v47);
  uint64_t v51 = objc_msgSend_wrapT(a2, v48, v49, v50);
  objc_msgSend_setWrapT_(a1, v52, v51, v53);
  objc_msgSend_intensity(a2, v54, v55, v56);
  *(float *)&double v57 = v57;
  objc_msgSend_setIntensity_(a1, v58, v59, v60, v57);
  uint64_t v64 = objc_msgSend_sRGBTexture(a2, v61, v62, v63);
  objc_msgSend_setColorManaged_(a1, v65, v64, v66);
  uint64_t v70 = objc_msgSend_mappingChannel(a2, v67, v68, v69);
  objc_msgSend_setMappingChannel_(a1, v71, v70, v72);
  uint64_t v76 = objc_msgSend_textureComponents(a2, v73, v74, v75);
  objc_msgSend_setTextureComponents_(a1, v77, v76, v78);
  return sub_1B65D120C(a1, a2, v79, v80);
}

uint64_t sub_1B65D10DC(void *a1, const __CFDictionary *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(a2, a1);
  if (!Value) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. unable to find node in remap table", v4, v5, v6, v7, v8, v9, (uint64_t)"vfxNode!=nil");
  }
  sub_1B65D120C(Value, a1, v4, v5);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v14 = objc_msgSend_childNodes(a1, v11, v12, v13);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v21, (uint64_t)v25, 16);
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v18 = *(void *)v22;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v22 != v18) {
          objc_enumerationMutation(v14);
        }
        sub_1B65D10DC(*(void *)(*((void *)&v21 + 1) + 8 * v19++), a2);
      }
      while (v17 != v19);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v20, (uint64_t)&v21, (uint64_t)v25, 16);
      uint64_t v17 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B65D120C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v6 = objc_msgSend_animationKeys(a2, (const char *)a2, a3, a4, 0);
  uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v34, (uint64_t)v38, 16);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = *(void *)v35;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(v6);
        }
        uint64_t v14 = *(void *)(*((void *)&v34 + 1) + 8 * v13);
        uint64_t v15 = objc_msgSend_animationPlayerForKey_(a2, v9, v14, v10);
        uint64_t v19 = objc_msgSend_animation(v15, v16, v17, v18);
        uint64_t v23 = objc_msgSend_caAnimation(v19, v20, v21, v22);
        uint64_t v26 = objc_msgSend_animationWithCAAnimation_(VFXAnimation, v24, v23, v25);
        uint64_t v30 = objc_msgSend_keyPath(v19, v27, v28, v29);
        objc_msgSend_setKeyPath_(v26, v31, v30, v32);
        objc_msgSend_addAnimation_forKey_(a1, v33, (uint64_t)v26, v14);
        ++v13;
      }
      while (v11 != v13);
      uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v34, (uint64_t)v38, 16);
      uint64_t v11 = result;
    }
    while (result);
  }
  return result;
}

const void *sub_1B65D1358(void *key, CFDictionaryRef theDict)
{
  uint64_t v439 = *MEMORY[0x1E4F143B8];
  if (!key) {
    return 0;
  }
  uint64_t v2 = theDict;
  uint64_t v3 = key;
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, key);
  if (!Value)
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v405 = v3;
    if (v5 == objc_opt_class()) {
      goto LABEL_6;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_6;
    }
    objc_msgSend_width(v3, v6, v7, v8);
    float v10 = v9;
    objc_msgSend_height(v3, v11, v12, v13);
    float v15 = v14;
    objc_msgSend_length(v3, v16, v17, v18);
    float v20 = v19;
    objc_msgSend_chamferRadius(v3, v21, v22, v23);
    *(float *)&double v25 = v24;
    *(float *)&double v24 = v10;
    *(float *)&double v26 = v15;
    *(float *)&double v27 = v20;
    uint64_t v31 = objc_msgSend_cubeWithWidth_height_length_chamferRadius_(VFXParametricModel, v28, v29, v30, v24, v26, v27, v25);
    objc_msgSend_chamferRadius(v3, v32, v33, v34);
    *(float *)&double v35 = v35;
    objc_msgSend_setChamferRadius_(v31, v36, v37, v38, v35);
    uint64_t v42 = objc_msgSend_chamferSegmentCount(v3, v39, v40, v41);
    objc_msgSend_setChamferSegmentCount_(v31, v43, v42, v44);
    uint64_t v48 = objc_msgSend_widthSegmentCount(v3, v45, v46, v47);
    objc_msgSend_setWidthSegmentCount_(v31, v49, v48, v50);
    uint64_t v54 = objc_msgSend_heightSegmentCount(v3, v51, v52, v53);
    objc_msgSend_setHeightSegmentCount_(v31, v55, v54, v56);
    uint64_t v60 = objc_msgSend_lengthSegmentCount(v3, v57, v58, v59);
    objc_msgSend_setLengthSegmentCount_(v31, v61, v60, v62);
    if (!v31)
    {
LABEL_6:
      uint64_t v63 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v6, v7, v8);
      unsigned __int32 v67 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v64, v65, v66);
      long long v426 = 0u;
      long long v427 = 0u;
      long long v428 = 0u;
      long long v429 = 0u;
      uint64_t v71 = objc_msgSend_geometrySources(v3, v68, v69, v70);
      uint64_t v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v72, (uint64_t)&v426, (uint64_t)v437, 16);
      if (v73)
      {
        uint64_t v77 = v73;
        uint64_t v78 = *(void *)v427;
        do
        {
          for (uint64_t i = 0; i != v77; ++i)
          {
            if (*(void *)v427 != v78) {
              objc_enumerationMutation(v71);
            }
            uint64_t v80 = sub_1B65D1DDC(*(void **)(*((void *)&v426 + 1) + 8 * i), v74, v75, v76);
            objc_msgSend_addObject_(v63, v81, v80, v82);
          }
          uint64_t v77 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v74, (uint64_t)&v426, (uint64_t)v437, 16);
        }
        while (v77);
      }
      long long v424 = 0u;
      long long v425 = 0u;
      long long v422 = 0u;
      long long v423 = 0u;
      int64x2_t v83 = objc_msgSend_geometryElements(v405, v74, v75, v76);
      uint64_t v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v84, (uint64_t)&v422, (uint64_t)v436, 16);
      if (v85)
      {
        uint64_t v89 = v85;
        uint64_t v90 = *(void *)v423;
        do
        {
          for (uint64_t j = 0; j != v89; ++j)
          {
            if (*(void *)v423 != v90) {
              objc_enumerationMutation(v83);
            }
            uint64_t v92 = *(void **)(*((void *)&v422 + 1) + 8 * j);
            uint64_t v93 = (void *)sub_1B65D1FFC(v92, v86, v87, v88);
            objc_msgSend_pointSize(v92, v94, v95, v96);
            *(float *)&double v97 = v97;
            objc_msgSend_setPointSize_(v93, v98, v99, v100, v97);
            objc_msgSend_primitiveRange(v92, v101, v102, v103);
            if (v104)
            {
              uint64_t v107 = objc_msgSend_primitiveRange(v92, v104, v105, v106);
              objc_msgSend_setPrimitiveRange_(v93, v108, v107, (uint64_t)v108);
            }
            objc_msgSend_minimumPointScreenSpaceRadius(v92, v104, v105, v106);
            *(float *)&double v109 = v109;
            objc_msgSend_setMinimumPointScreenSpaceRadius_(v93, v110, v111, v112, v109);
            objc_msgSend_maximumPointScreenSpaceRadius(v92, v113, v114, v115);
            *(float *)&double v116 = v116;
            objc_msgSend_setMaximumPointScreenSpaceRadius_(v93, v117, v118, v119, v116);
            objc_msgSend_addObject_(v67, v120, (uint64_t)v93, v121);
          }
          uint64_t v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v86, (uint64_t)&v422, (uint64_t)v436, 16);
        }
        while (v89);
      }
      uint64_t v122 = objc_msgSend_geometrySourceChannels(v405, v86, v87, v88);
      uint64_t v3 = v405;
      uint64_t v124 = objc_msgSend_meshWithSources_elements_sourceChannels_(VFXMesh, v123, (uint64_t)v63, (uint64_t)v67, v122);
      uint64_t v31 = objc_msgSend_modelWithMesh_(VFXModel, v125, v124, v126);
      double v130 = objc_msgSend_edgeCreasesSource(v405, v127, v128, v129);
      uint64_t v134 = objc_msgSend_edgeCreasesElement(v405, v131, v132, v133);
      if (v130)
      {
        uint64_t v138 = (void *)v134;
        if (v134)
        {
          uint64_t v139 = sub_1B65D1DDC(v130, v135, v136, v137);
          objc_msgSend_setEdgeCreasesSource_(v31, v140, v139, v141);
          uint64_t v145 = sub_1B65D1FFC(v138, v142, v143, v144);
          objc_msgSend_setEdgeCreasesElement_(v31, v146, v145, v147);
        }
      }
    }
    uint64_t v404 = v31;
    CFDictionarySetValue(v2, v3, v31);
    uint64_t v151 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v148, v149, v150);
    long long v418 = 0u;
    long long v419 = 0u;
    long long v420 = 0u;
    long long v421 = 0u;
    obuint64_t j = (id)objc_msgSend_materials(v3, v152, v153, v154);
    uint64_t v156 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v155, (uint64_t)&v418, (uint64_t)v435, 16);
    if (v156)
    {
      uint64_t v159 = v156;
      uint64_t v160 = *(void *)v419;
      uint64_t v412 = *MEMORY[0x1E4F3B320];
      uint64_t v411 = *MEMORY[0x1E4F3B340];
      uint64_t v410 = *MEMORY[0x1E4F3B330];
      uint64_t v409 = *MEMORY[0x1E4F3B348];
      uint64_t v408 = *MEMORY[0x1E4F3B328];
      uint64_t v407 = *MEMORY[0x1E4F3B338];
      uint64_t v406 = *MEMORY[0x1E4F3B350];
      uint64_t v414 = v151;
      uint64_t v415 = v2;
      uint64_t v413 = *(void *)v419;
      do
      {
        uint64_t v161 = 0;
        uint64_t v416 = v159;
        do
        {
          if (*(void *)v419 != v160) {
            objc_enumerationMutation(obj);
          }
          uint64_t v162 = *(void **)(*((void *)&v418 + 1) + 8 * v161);
          uint64_t v166 = (void *)CFDictionaryGetValue(v2, v162);
          if (!v166)
          {
            uint64_t v166 = objc_msgSend_material(VFXMaterial, v163, v164, v165);
            CFDictionarySetValue(v2, v162, v166);
            uint64_t v170 = objc_msgSend_name(v162, v167, v168, v169);
            objc_msgSend_setName_(v166, v171, v170, v172);
            uint64_t v176 = objc_msgSend_lightingModelName(v162, v173, v174, v175);
            if ((objc_msgSend_isEqualToString_(v176, v177, v412, v178) & 1) != 0
              || (objc_msgSend_isEqualToString_(v176, v179, v411, v180) & 1) != 0
              || (objc_msgSend_isEqualToString_(v176, v179, v410, v180) & 1) != 0)
            {
              objc_msgSend_setShadingModel_(v166, v179, 1, v180);
            }
            else
            {
              if ((objc_msgSend_isEqualToString_(v176, v179, v409, v180) & 1) == 0)
              {
                if ((objc_msgSend_isEqualToString_(v176, v268, v408, v269) & 1) != 0
                  || (objc_msgSend_isEqualToString_(v176, v300, v407, v301) & 1) != 0)
                {
                  objc_msgSend_setShadingModel_(v166, v300, 2, v301);
                  goto LABEL_35;
                }
                if (objc_msgSend_isEqualToString_(v176, v300, v406, v301))
                {
                  objc_msgSend_setShadingModel_(v166, v268, 3, v269);
                  goto LABEL_35;
                }
              }
              objc_msgSend_setShadingModel_(v166, v268, 0, v269);
            }
LABEL_35:
            objc_msgSend_shininess(v162, v181, v182, v183);
            *(float *)&double v184 = v184;
            objc_msgSend_setShininess_(v166, v185, v186, v187, v184);
            uint64_t v191 = objc_msgSend_transparencyMode(v162, v188, v189, v190);
            if (v191 == 3) {
              objc_msgSend_setTransparencyMode_(v166, v192, 2, v193);
            }
            else {
              objc_msgSend_setTransparencyMode_(v166, v192, v191 == 2, v193);
            }
            uint64_t isLitPerPixel = objc_msgSend_isLitPerPixel(v162, v194, v195, v196);
            objc_msgSend_setLitPerPixel_(v166, v198, isLitPerPixel, v199);
            uint64_t isDoubleSided = objc_msgSend_isDoubleSided(v162, v200, v201, v202);
            objc_msgSend_setDoubleSided_(v166, v204, isDoubleSided, v205);
            uint64_t v209 = objc_msgSend_cullMode(v162, v206, v207, v208);
            objc_msgSend_setCullMode_(v166, v210, v209, v211);
            uint64_t v215 = objc_msgSend_avoidsOverLighting(v162, v212, v213, v214);
            objc_msgSend_setAvoidsOverLighting_(v166, v216, v215, v217);
            uint64_t v221 = objc_msgSend_fillMode(v162, v218, v219, v220);
            objc_msgSend_setFillMode_(v166, v222, v221, v223);
            objc_msgSend_fresnelExponent(v162, v224, v225, v226);
            *(float *)&double v227 = v227;
            objc_msgSend_setFresnelExponent_(v166, v228, v229, v230, v227);
            uint64_t v234 = objc_msgSend_writesToDepthBuffer(v162, v231, v232, v233);
            objc_msgSend_setWritesToDepthBuffer_(v166, v235, v234, v236);
            uint64_t v240 = objc_msgSend_readsFromDepthBuffer(v162, v237, v238, v239);
            objc_msgSend_setReadsFromDepthBuffer_(v166, v241, v240, v242);
            uint64_t v246 = objc_msgSend_colorBufferWriteMask(v162, v243, v244, v245);
            objc_msgSend_setColorBufferWriteMask_(v166, v247, v246, v248);
            uint64_t v252 = objc_msgSend_blendMode(v162, v249, v250, v251);
            uint64_t v255 = 2;
            switch(v252)
            {
              case 0:
                uint64_t v256 = objc_msgSend_transparent(v162, v253, 2, v254);
                objc_msgSend_contents(v256, v257, v258, v259);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v261 = objc_msgSend_diffuse(v162, v253, v260, v254);
                  objc_msgSend_contents(v261, v262, v263, v264);
                  objc_opt_class();
                  objc_opt_isKindOfClass();
                  goto LABEL_41;
                }
                uint64_t v255 = 1;
                goto LABEL_49;
              case 1:
LABEL_49:
                objc_msgSend_setBlendMode_(v166, v253, v255, v254);
                break;
              case 2:
                objc_msgSend_setBlendMode_(v166, v253, 3, v254);
                break;
              case 3:
                objc_msgSend_setBlendMode_(v166, v253, 4, v254);
                break;
              case 4:
                objc_msgSend_setBlendMode_(v166, v253, 5, v254);
                break;
              case 6:
                objc_msgSend_setBlendMode_(v166, v253, 6, v254);
                break;
              default:
LABEL_41:
                objc_msgSend_setBlendMode_(v166, v253, 0, v254);
                break;
            }
            objc_msgSend_setAlphaCutoff_(v166, v265, v266, v267, 0.0);
            uint64_t v273 = objc_msgSend_properties(v162, v270, v271, v272);
            v434[0] = MEMORY[0x1E4F143A8];
            v434[1] = 3221225472;
            v434[2] = sub_1B65D2354;
            v434[3] = &unk_1E6144F10;
            v434[4] = v166;
            objc_msgSend_enumerateObjectsUsingBlock_(v273, v274, (uint64_t)v434, v275);
            long long v432 = 0u;
            long long v433 = 0u;
            long long v430 = 0u;
            long long v431 = 0u;
            uint64_t v279 = objc_msgSend_customMaterialProperties(v162, v276, v277, v278);
            uint64_t v281 = objc_msgSend_countByEnumeratingWithState_objects_count_(v279, v280, (uint64_t)&v430, (uint64_t)v438, 16);
            if (v281)
            {
              uint64_t v284 = v281;
              uint64_t v285 = *(void *)v431;
              do
              {
                for (uint64_t k = 0; k != v284; ++k)
                {
                  if (*(void *)v431 != v285) {
                    objc_enumerationMutation(v279);
                  }
                  float32x2_t v287 = *(void **)(*((void *)&v430 + 1) + 8 * k);
                  uint64_t v288 = objc_alloc_init(VFXMaterialProperty);
                  sub_1B65D0F04(v288, v287, v289, v290);
                  uint64_t v294 = objc_msgSend_propertyName(v287, v291, v292, v293);
                  objc_msgSend_setValue_forKey_(v166, v295, (uint64_t)v288, v294);
                }
                uint64_t v284 = objc_msgSend_countByEnumeratingWithState_objects_count_(v279, v296, (uint64_t)&v430, (uint64_t)v438, 16);
              }
              while (v284);
            }
            sub_1B65D20C0(v166, v162, v282, v283);
            sub_1B65D120C(v166, v162, v297, v298);
            uint64_t v151 = v414;
            uint64_t v2 = v415;
            uint64_t v160 = v413;
            uint64_t v159 = v416;
          }
          objc_msgSend_addObject_(v151, v163, (uint64_t)v166, v165);
          ++v161;
        }
        while (v161 != v159);
        uint64_t v302 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v299, (uint64_t)&v418, (uint64_t)v435, 16);
        uint64_t v159 = v302;
      }
      while (v302);
    }
    objc_msgSend_setMaterials_(v404, v157, (uint64_t)v151, v158);
    uint64_t v306 = objc_msgSend_name(v405, v303, v304, v305);
    objc_msgSend_setName_(v404, v307, v306, v308);
    uint64_t v312 = objc_msgSend_name(v404, v309, v310, v311);
    uint64_t v316 = objc_msgSend_mesh(v404, v313, v314, v315);
    objc_msgSend_setName_(v316, v317, v312, v318);
    uint64_t v322 = objc_msgSend_subdivisionLevel(v405, v319, v320, v321);
    objc_msgSend_setSubdivisionLevel_(v404, v323, v322, v324);
    uint64_t v328 = objc_msgSend_wantsAdaptiveSubdivision(v405, v325, v326, v327);
    objc_msgSend_setWantsAdaptiveSubdivision_(v404, v329, v328, v330);
    uint64_t v334 = objc_msgSend_tessellator(v405, v331, v332, v333);
    if (v334)
    {
      uint64_t v337 = (void *)v334;
      uint64_t v338 = objc_alloc_init(VFXModelTessellator);
      objc_msgSend_tessellationFactorScale(v337, v339, v340, v341);
      *(float *)&double v342 = v342;
      objc_msgSend_setTessellationFactorScale_(v338, v343, v344, v345, v342);
      uint64_t v349 = objc_msgSend_tessellationPartitionMode(v337, v346, v347, v348);
      objc_msgSend_setTessellationPartitionMode_(v338, v350, v349, v351);
      uint64_t isAdaptive = objc_msgSend_isAdaptive(v337, v352, v353, v354);
      objc_msgSend_setAdaptive_(v338, v356, isAdaptive, v357);
      uint64_t isScreenSpace = objc_msgSend_isScreenSpace(v337, v358, v359, v360);
      objc_msgSend_setScreenSpace_(v338, v362, isScreenSpace, v363);
      objc_msgSend_edgeTessellationFactor(v337, v364, v365, v366);
      *(float *)&double v367 = v367;
      objc_msgSend_setEdgeTessellationFactor_(v338, v368, v369, v370, v367);
      objc_msgSend_insideTessellationFactor(v337, v371, v372, v373);
      *(float *)&double v374 = v374;
      objc_msgSend_setInsideTessellationFactor_(v338, v375, v376, v377, v374);
      objc_msgSend_maximumEdgeLength(v337, v378, v379, v380);
      *(float *)&double v381 = v381;
      objc_msgSend_setMaximumEdgeLength_(v338, v382, v383, v384, v381);
      int v388 = objc_msgSend_smoothingMode(v337, v385, v386, v387);
      objc_msgSend_setSmoothingMode_(v338, v389, v388, v390);
      uint64_t v391 = v338;
    }
    else
    {
      uint64_t v391 = 0;
    }
    CFDictionaryRef Value = v404;
    objc_msgSend_setTessellator_(v404, v335, (uint64_t)v391, v336);
    if (objc_msgSend_subdivisionLevel(v404, v392, v393, v394))
    {
      unsigned int v398 = objc_msgSend__subdivisionSettings(v405, v395, v396, v397);
      objc_msgSend_set_subdivisionSettings_(v404, v399, v398, v400);
    }
    sub_1B65D20C0(v404, v405, v396, v397);
    sub_1B65D120C(v404, v405, v401, v402);
  }
  return Value;
}

uint64_t sub_1B65D1DDC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_data(a1, a2, a3, a4);
  double v9 = objc_msgSend_semantic(a1, v6, v7, v8);
  if (objc_msgSend_isEqualToString_(v9, v10, *MEMORY[0x1E4F3B2C0], v11))
  {
    float v15 = VFXMeshSourceSemanticPosition;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E4F3B2A8], v14))
  {
    float v15 = VFXMeshSourceSemanticNormal;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E4F3B298], v14))
  {
    float v15 = VFXMeshSourceSemanticColor;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E4F3B2B8], v14))
  {
    float v15 = VFXMeshSourceSemanticTexcoord;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E4F3B2B0], v14))
  {
    float v15 = VFXMeshSourceSemanticTangent;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E4F3B2C8], v14))
  {
    float v15 = VFXMeshSourceSemanticVertexCrease;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E4F3B2A0], v14))
  {
    float v15 = VFXMeshSourceSemanticEdgeCrease;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E4F3B290], v14))
  {
    float v15 = VFXMeshSourceSemanticBoneWeights;
  }
  else
  {
    if (!objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E4F3B288], v14))
    {
      sub_1B63F2F54(16, @"Error: VFXMeshSourceSemanticFromSCNSemantic - unknown semantic", v13, v14, v16, v17, v18, v19, v43);
      goto LABEL_20;
    }
    float v15 = VFXMeshSourceSemanticBoneIndices;
  }
  double v9 = *v15;
LABEL_20:
  uint64_t v20 = objc_msgSend_vectorCount(a1, v12, v13, v14);
  uint64_t v24 = objc_msgSend_floatComponents(a1, v21, v22, v23);
  uint64_t v28 = objc_msgSend_componentsPerVector(a1, v25, v26, v27);
  uint64_t v32 = objc_msgSend_bytesPerComponent(a1, v29, v30, v31);
  uint64_t v36 = objc_msgSend_dataOffset(a1, v33, v34, v35);
  uint64_t v40 = objc_msgSend_dataStride(a1, v37, v38, v39);
  return objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v41, v5, (uint64_t)v9, v20, v24, v28, v32, v36, v40);
}

uint64_t sub_1B65D1FFC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_data(a1, a2, a3, a4);
  unint64_t v16 = objc_msgSend_primitiveType(a1, v6, v7, v8);
  if (v16 >= 5) {
    sub_1B63F2F54(16, @"Error: VFXMeshPrimitiveTypeFromSCNPrimitiveType - unknown type", v10, v11, v12, v13, v14, v15, v32);
  }
  uint64_t v17 = objc_msgSend_primitiveCount(a1, v9, v10, v11);
  uint64_t v21 = objc_msgSend_indicesChannelCount(a1, v18, v19, v20);
  uint64_t hasInterleavedIndicesChannels = objc_msgSend_hasInterleavedIndicesChannels(a1, v22, v23, v24);
  uint64_t v30 = objc_msgSend_bytesPerIndex(a1, v26, v27, v28);

  return objc_msgSend_meshElementWithData_primitiveType_primitiveCount_indicesChannelCount_interleavedIndicesChannels_bytesPerIndex_(VFXMeshElement, v29, v5, v16, v17, v21, hasInterleavedIndicesChannels, v30);
}

void sub_1B65D20C0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_shaderModifiers(a2, (const char *)a2, a3, a4);
  if (objc_msgSend_count(v6, v7, v8, v9))
  {
    uint64_t v50 = 0;
    uint64_t v51 = &v50;
    uint64_t v52 = 0x2020000000;
    char v53 = 0;
    id v10 = objc_alloc(MEMORY[0x1E4F1CA60]);
    uint64_t v14 = objc_msgSend_count(v6, v11, v12, v13);
    uint64_t v17 = objc_msgSend_initWithCapacity_(v10, v15, v14, v16);
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = sub_1B65D246C;
    v49[3] = &unk_1E6144F38;
    v49[4] = v17;
    void v49[5] = &v50;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v6, v18, (uint64_t)v49, v19);
    if (*((unsigned char *)v51 + 24))
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if (objc_msgSend_blendMode(a1, v22, v23, v24) != 1) {
          objc_msgSend_setBlendMode_(a1, v20, 1, v21);
        }
      }
      else
      {
        double v25 = (objc_class *)objc_opt_class();
        uint64_t v26 = NSStringFromClass(v25);
      }
    }
    objc_msgSend_setShaderModifiers_(a1, v20, (uint64_t)v17, v21);
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v36 = objc_msgSend_customMaterialAttributeNames(a2, v33, v34, v35);
    uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v37, (uint64_t)&v45, (uint64_t)v54, 16);
    if (v40)
    {
      uint64_t v41 = *(void *)v46;
      do
      {
        for (uint64_t i = 0; i != v40; ++i)
        {
          if (*(void *)v46 != v41) {
            objc_enumerationMutation(v36);
          }
          uint64_t v43 = *(void *)(*((void *)&v45 + 1) + 8 * i);
          uint64_t v44 = objc_msgSend_valueForKey_(a2, v38, v43, v39);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            objc_msgSend_setValue_forKey_(a1, v38, v44, v43);
          }
        }
        uint64_t v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v38, (uint64_t)&v45, (uint64_t)v54, 16);
      }
      while (v40);
    }

    _Block_object_dispose(&v50, 8);
  }
}

void sub_1B65D2328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B65D2354(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = objc_msgSend_propertyName(a2, (const char *)a2, a3, a4);
  if (v11)
  {
    uint64_t v19 = (uint64_t)v11;
    if ((objc_msgSend_isEqualToString_(v11, v12, @"ambient", v14) & 1) == 0)
    {
      uint64_t v22 = objc_msgSend_propertyWithName_(*(void **)(a1 + 32), v20, v19, v21);
      if (v22)
      {
        sub_1B65D0F04(v22, a2, v23, v24);
      }
      else
      {
        uint64_t v33 = objc_alloc_init(VFXMaterialProperty);
        sub_1B65D0F04(v33, a2, v25, v26);
        uint64_t v27 = *(void **)(a1 + 32);
        uint64_t v31 = objc_msgSend_propertyName(a2, v28, v29, v30);
        objc_msgSend_setValue_forKey_(v27, v32, (uint64_t)v33, v31);
      }
    }
  }
  else
  {
    sub_1B63F2F54(16, @"Error: unnamed source material property", v13, v14, v15, v16, v17, v18, a9);
  }
}

uint64_t sub_1B65D246C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)_SCNShadableConvertShaderToMetalIfNeeded();
  uint64_t v6 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v4, v5, @"scn_frame", @"vfx_frame");
  uint64_t v8 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v6, v7, @"scn_node", @"vfx_node");
  if (objc_msgSend_containsString_(v8, v9, @"#pragma transparent", v10)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  if (objc_msgSend_isEqualToString_(a2, v11, *MEMORY[0x1E4F3B3E0], v12))
  {
    uint64_t v15 = VFXShaderModifierEntryPointSurface;
  }
  else if (objc_msgSend_isEqualToString_(a2, v13, *MEMORY[0x1E4F3B3C8], v14))
  {
    uint64_t v15 = VFXShaderModifierEntryPointFragment;
  }
  else if (objc_msgSend_isEqualToString_(a2, v13, *MEMORY[0x1E4F3B3D0], v16))
  {
    uint64_t v15 = VFXShaderModifierEntryPointVertex;
  }
  else
  {
    uint64_t result = objc_msgSend_isEqualToString_(a2, v13, *MEMORY[0x1E4F3B3D8], v17);
    if (!result) {
      return result;
    }
    uint64_t v15 = &VFXShaderModifierEntryPointLighting;
  }
  uint64_t v19 = *(void **)(a1 + 32);
  uint64_t v20 = (uint64_t)*v15;

  return objc_msgSend_setValue_forKey_(v19, v13, (uint64_t)v8, v20);
}

void *sub_1B65D25A4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  unsigned __int8 v4 = a3;
  uint64_t v7 = objc_msgSend_sourceObject(a1, a2, a3, a4);
  uint64_t v11 = objc_msgSend_options(a1, v8, v9, v10);
  uint64_t v14 = objc_msgSend_objectForKeyedSubscript_(v11, v12, *MEMORY[0x1E4F3B390], v13);
  if (objc_msgSend_isEqualToString_(v14, v15, *MEMORY[0x1E4F3B388], v16))
  {
    uint64_t v19 = 0;
  }
  else if (objc_msgSend_isEqualToString_(v14, v17, *MEMORY[0x1E4F3B380], v18))
  {
    uint64_t v19 = 2;
  }
  else
  {
    uint64_t v19 = 1;
  }
  uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v11, v17, *MEMORY[0x1E4F3B360], v18);
  if (v21) {
    uint64_t v25 = objc_msgSend_BOOLValue(v21, v22, v23, v24) ^ 1;
  }
  else {
    uint64_t v25 = 0;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v26 = sub_1B65CFD34(v7, a2, v4);
    uint64_t v28 = objc_msgSend_shapeWithNode_flattened_(VFXPhysicsShape, v27, v26, v25);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v31 = sub_1B65D1358(v7, (CFDictionaryRef)a2);
      uint64_t v28 = objc_msgSend_shapeWithModel_(VFXPhysicsShape, v32, (uint64_t)v31, v33);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v37 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v34, v35, v36);
        long long v76 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v38, (uint64_t)&v76, (uint64_t)v80, 16);
        if (v39)
        {
          uint64_t v43 = v39;
          uint64_t v44 = *(void *)v77;
          do
          {
            for (uint64_t i = 0; i != v43; ++i)
            {
              if (*(void *)v77 != v44) {
                objc_enumerationMutation(v7);
              }
              uint64_t v46 = sub_1B65D25A4(*(void *)(*((void *)&v76 + 1) + 8 * i), a2, v4);
              if (v46) {
                objc_msgSend_addObject_(v37, v47, v46, v48);
              }
            }
            uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v47, (uint64_t)&v76, (uint64_t)v80, 16);
          }
          while (v43);
        }
        uint64_t v49 = objc_msgSend_transforms(a1, v40, v41, v42);
        uint64_t v28 = objc_msgSend_shapeWithShapes_transforms_(VFXPhysicsShape, v50, (uint64_t)v37, v49);
      }
      else
      {
        if (v7)
        {
          uint64_t v20 = 0;
          objc_msgSend_setType_(0, v34, v19, v36);
          goto LABEL_28;
        }
        uint64_t v28 = objc_msgSend_shapeWithModel_(VFXPhysicsShape, v34, 0, v36);
      }
    }
  }
  uint64_t v20 = v28;
  objc_msgSend_setType_(v28, v29, v19, v30);
LABEL_28:
  uint64_t v53 = objc_msgSend_objectForKeyedSubscript_(v11, v51, *MEMORY[0x1E4F3B370], v52);
  if (v53)
  {
    uint64_t v56 = (void *)v53;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      objc_msgSend_floatValue(v56, v57, v58, v59);
      objc_msgSend_setScale_(v20, v61, v62, v63, *(double *)vdupq_lane_s32(v60, 0).i64);
    }
    else
    {
      objc_msgSend_float3Value(v56, v57, v58, v59);
      objc_msgSend_setScale_(v20, v64, v65, v66, v67);
    }
  }
  uint64_t v68 = objc_msgSend_objectForKeyedSubscript_(v11, v54, *MEMORY[0x1E4F3B368], v55);
  if (v68)
  {
    objc_msgSend_floatValue(v68, v69, v70, v71);
    objc_msgSend_setMargin_(v20, v72, v73, v74);
  }
  return v20;
}

uint64_t sub_1B65D28D4()
{
  if (qword_1EB995498 != -1) {
    dispatch_once(&qword_1EB995498, &unk_1F0FB5F48);
  }
  return qword_1EB9954A0;
}

double sub_1B65D2918()
{
  if (!qword_1EB9954A0)
  {
    CFArrayRef v0 = (void *)sub_1B63C8D10(&qword_1EB9954A0);
    qword_1EB9954A0 = (uint64_t)v0;
    int v1 = (const void *)sub_1B65833C8();
    sub_1B660E380(v0, v1);
    sub_1B660E400(@"fieldType", 0x40u, 2, 0, 0, 0, v2, v3);
    sub_1B660E400(@"strength", 0x4Cu, 1, 0, 0, 0, v4, v5);
    sub_1B660E400(@"dampening", 0x50u, 1, 0, 0, 0, v6, v7);
    sub_1B660E400(@"noiseAmount", 0x54u, 1, 0, 0, 0, v8, v9);
    sub_1B660E400(@"noiseSeed", 0x58u, 2, 0, 0, 0, v10, v11);
    sub_1B660E400(@"falloffExponent", 0x80u, 1, 0, 0, 0, v12, v13);
    sub_1B660E400(@"halfExtent", 0x90u, 8, 0, 0, 0, v14, v15);
    sub_1B660E400(@"offset", 0xA0u, 8, 0, 0, 0, v16, v17);
    sub_1B660E400(@"smoothness", 0xB0u, 1, 0, 0, 0, v18, v19);
    sub_1B660E400(@"speed", 0xB4u, 1, 0, 0, 0, v20, v21);
    sub_1B660E3EC();
    qword_1EB983E18 = (uint64_t)sub_1B65D37A0;
    double result = *(double *)&xmmword_1F0FB8868;
    xmmword_1EB983E08 = xmmword_1F0FB8868;
    qword_1EB983E58 = (uint64_t)sub_1B65D45AC;
  }
  return result;
}

void sub_1B65D2B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(void *)(a1 + 64) != v8)
  {
    *(void *)(a1 + 64) = v8;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B65D2C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  uint64_t v9 = *(void **)(a1 + 192);
  if (v9)
  {
    uint64_t v10 = sub_1B63F4F54(v9, a2, a3, a4, a5, a6, a7, a8);
    if (v10)
    {
      uint64_t v17 = *(void **)(a1 + 192);
      sub_1B64B1FB4(v10, v17, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t sub_1B65D2C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(unsigned int *)(a1 + 64);
}

void sub_1B65D2CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(float *)(a1 + 76) != a9)
  {
    *(float *)(a1 + 76) = a9;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B65D2D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(float *)(a1 + 76);
}

void sub_1B65D2DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(float *)(a1 + 128) != a9)
  {
    *(float *)(a1 + 128) = a9;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B65D2E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(float *)(a1 + 128);
}

void sub_1B65D2E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(unsigned __int8 *)(a1 + 72) != v8)
  {
    *(unsigned char *)(a1 + 72) = v8;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B65D2F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(unsigned __int8 *)(a1 + 72);
}

void sub_1B65D2F4C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  if (!a1)
  {
    float32x4_t v11 = a9;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
    a9 = v11;
  }
  uint32x4_t v10 = (uint32x4_t)vceqq_f32(a1[9], a9);
  v10.i32[3] = v10.i32[2];
  if ((vminvq_u32(v10) & 0x80000000) == 0)
  {
    a1[9] = a9;
    sub_1B65D2C08((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

__n128 sub_1B65D2FDC(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return a1[9];
}

void sub_1B65D3028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(void *)(a1 + 112) != v8)
  {
    *(void *)(a1 + 112) = v8;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B65D30AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(unsigned int *)(a1 + 112);
}

void sub_1B65D30F8(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  if (!a1)
  {
    float32x4_t v11 = a9;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
    a9 = v11;
  }
  uint32x4_t v10 = (uint32x4_t)vceqq_f32(a1[10], a9);
  v10.i32[3] = v10.i32[2];
  if ((vminvq_u32(v10) & 0x80000000) == 0)
  {
    a1[10] = a9;
    sub_1B65D2C08((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

__n128 sub_1B65D3188(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return a1[10];
}

void sub_1B65D31D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(void *)(a1 + 96) != a2)
  {
    *(void *)(a1 + 96) = a2;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B65D3254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(void *)(a1 + 96);
}

void sub_1B65D32A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(void *)(a1 + 120) != v8)
  {
    *(void *)(a1 + 120) = v8;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B65D3324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(unsigned int *)(a1 + 120);
}

void sub_1B65D3370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(float *)(a1 + 176) != a9)
  {
    *(float *)(a1 + 176) = a9;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B65D33FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(float *)(a1 + 176);
}

void sub_1B65D3448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(float *)(a1 + 180) != a9)
  {
    *(float *)(a1 + 180) = a9;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B65D34D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(float *)(a1 + 180);
}

void sub_1B65D3520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (*(void *)(a1 + 104) != v8)
  {
    *(void *)(a1 + 104) = v8;
    sub_1B65D2C08(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B65D35A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1B65D35F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  return a1 + 64;
}

void sub_1B65D363C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  if (a2 && *(void *)(a1 + 192)) {
    sub_1B63F2F54(16, @"Error: CFXForceFieldSetOwner - multiple owners", a3, a4, a5, a6, a7, a8, v10);
  }
  *(void *)(a1 + 192) = a2;
}

void sub_1B65D36A8(_OWORD *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  }
  long long v10 = *a2;
  long long v11 = a2[1];
  long long v12 = a2[3];
  a1[6] = a2[2];
  a1[7] = v12;
  a1[4] = v10;
  a1[5] = v11;
  long long v13 = a2[4];
  long long v14 = a2[5];
  long long v15 = a2[7];
  a1[10] = a2[6];
  a1[11] = v15;
  a1[8] = v13;
  a1[9] = v14;

  sub_1B65D2C08((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
}

CFStringRef sub_1B65D3734(void *a1)
{
  CFAllocatorRef v8 = CFGetAllocator(a1);
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v2, v3, v4, v5, v6, v7, (uint64_t)"field");
  }
  return CFStringCreateWithFormat(v8, 0, @"<CFXForceField %p> Type:%d", a1, a1[8]);
}

__CFArray *sub_1B65D37A0(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 2;
  uint64_t v67 = a1 + 64;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v4, @"name", @"fieldType");
  CFDictionarySetValue(v4, @"type", v5);
  CFDictionarySetValue(v4, @"address", v7);
  CFDictionarySetValue(v4, @"semantic", v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  CFAllocatorRef v8 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 3;
  uint64_t v67 = a1 + 72;
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v11 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v8, @"name", @"active");
  CFDictionarySetValue(v8, @"type", v9);
  CFDictionarySetValue(v8, @"address", v11);
  CFDictionarySetValue(v8, @"semantic", v10);
  CFArrayAppendValue(Mutable, v8);
  CFRelease(v10);
  CFRelease(v8);
  CFRelease(v11);
  CFRelease(v9);
  long long v12 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 1;
  uint64_t v67 = a1 + 76;
  CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v15 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v12, @"name", @"strength");
  CFDictionarySetValue(v12, @"type", v13);
  CFDictionarySetValue(v12, @"address", v15);
  CFDictionarySetValue(v12, @"semantic", v14);
  CFArrayAppendValue(Mutable, v12);
  CFRelease(v14);
  CFRelease(v12);
  CFRelease(v15);
  CFRelease(v13);
  uint64_t v16 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 1;
  uint64_t v67 = a1 + 80;
  CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v19 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v16, @"name", @"dampening");
  CFDictionarySetValue(v16, @"type", v17);
  CFDictionarySetValue(v16, @"address", v19);
  CFDictionarySetValue(v16, @"semantic", v18);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v18);
  CFRelease(v16);
  CFRelease(v19);
  CFRelease(v17);
  uint64_t v20 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 1;
  uint64_t v67 = a1 + 84;
  CFNumberRef v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v23 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v20, @"name", @"noiseAmount");
  CFDictionarySetValue(v20, @"type", v21);
  CFDictionarySetValue(v20, @"address", v23);
  CFDictionarySetValue(v20, @"semantic", v22);
  CFArrayAppendValue(Mutable, v20);
  CFRelease(v22);
  CFRelease(v20);
  CFRelease(v23);
  CFRelease(v21);
  uint64_t v24 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 2;
  uint64_t v67 = a1 + 88;
  CFNumberRef v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v27 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v24, @"name", @"noiseSeed");
  CFDictionarySetValue(v24, @"type", v25);
  CFDictionarySetValue(v24, @"address", v27);
  CFDictionarySetValue(v24, @"semantic", v26);
  CFArrayAppendValue(Mutable, v24);
  CFRelease(v26);
  CFRelease(v24);
  CFRelease(v27);
  CFRelease(v25);
  uint64_t v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  uint64_t v29 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 2;
  uint64_t v67 = a1 + 96;
  CFNumberRef v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v32 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v29, @"name", @"categoryBitMask");
  CFDictionarySetValue(v29, @"type", v30);
  CFDictionarySetValue(v29, @"address", v32);
  CFDictionarySetValue(v29, @"semantic", v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  uint64_t v33 = CFDictionaryCreateMutable(0, 4, v3, v28);
  int v68 = 0;
  int valuePtr = 2;
  uint64_t v67 = a1 + 104;
  CFNumberRef v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v35 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v36 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v33, @"name", @"shape");
  CFDictionarySetValue(v33, @"type", v34);
  CFDictionarySetValue(v33, @"address", v36);
  CFDictionarySetValue(v33, @"semantic", v35);
  CFArrayAppendValue(Mutable, v33);
  CFRelease(v35);
  CFRelease(v33);
  CFRelease(v36);
  CFRelease(v34);
  uint64_t v37 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], v28);
  int v68 = 0;
  int valuePtr = 2;
  uint64_t v67 = a1 + 112;
  CFNumberRef v38 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v39 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v40 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v37, @"name", @"scope");
  CFDictionarySetValue(v37, @"type", v38);
  CFDictionarySetValue(v37, @"address", v40);
  CFDictionarySetValue(v37, @"semantic", v39);
  CFArrayAppendValue(Mutable, v37);
  CFRelease(v39);
  CFRelease(v37);
  CFRelease(v40);
  CFRelease(v38);
  uint64_t v41 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], v28);
  int v68 = 0;
  int valuePtr = 2;
  uint64_t v67 = a1 + 120;
  CFNumberRef v42 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v43 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v44 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v41, @"name", @"cullMode");
  CFDictionarySetValue(v41, @"type", v42);
  CFDictionarySetValue(v41, @"address", v44);
  CFDictionarySetValue(v41, @"semantic", v43);
  CFArrayAppendValue(Mutable, v41);
  CFRelease(v43);
  CFRelease(v41);
  CFRelease(v44);
  CFRelease(v42);
  long long v45 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v46 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], v28);
  int v68 = 0;
  int valuePtr = 1;
  uint64_t v67 = a1 + 128;
  CFNumberRef v47 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v48 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v49 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v46, @"name", @"falloffExponent");
  CFDictionarySetValue(v46, @"type", v47);
  CFDictionarySetValue(v46, @"address", v49);
  CFDictionarySetValue(v46, @"semantic", v48);
  CFArrayAppendValue(Mutable, v46);
  CFRelease(v48);
  CFRelease(v46);
  CFRelease(v49);
  CFRelease(v47);
  uint64_t v50 = CFDictionaryCreateMutable(0, 4, v45, v28);
  int v68 = 0;
  int valuePtr = 8;
  uint64_t v67 = a1 + 144;
  CFNumberRef v51 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v52 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v53 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v50, @"name", @"halfExtent");
  CFDictionarySetValue(v50, @"type", v51);
  CFDictionarySetValue(v50, @"address", v53);
  CFDictionarySetValue(v50, @"semantic", v52);
  CFArrayAppendValue(Mutable, v50);
  CFRelease(v52);
  CFRelease(v50);
  CFRelease(v53);
  CFRelease(v51);
  uint64_t v54 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 8;
  uint64_t v67 = a1 + 160;
  CFNumberRef v55 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v56 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v57 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v54, @"name", @"offset");
  CFDictionarySetValue(v54, @"type", v55);
  CFDictionarySetValue(v54, @"address", v57);
  CFDictionarySetValue(v54, @"semantic", v56);
  CFArrayAppendValue(Mutable, v54);
  CFRelease(v56);
  CFRelease(v54);
  CFRelease(v57);
  CFRelease(v55);
  uint64_t v58 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 1;
  uint64_t v67 = a1 + 176;
  CFNumberRef v59 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v60 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v61 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v58, @"name", @"smoothness");
  CFDictionarySetValue(v58, @"type", v59);
  CFDictionarySetValue(v58, @"address", v61);
  CFDictionarySetValue(v58, @"semantic", v60);
  CFArrayAppendValue(Mutable, v58);
  CFRelease(v60);
  CFRelease(v58);
  CFRelease(v61);
  CFRelease(v59);
  uint64_t v62 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v68 = 0;
  int valuePtr = 1;
  uint64_t v67 = a1 + 180;
  CFNumberRef v63 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v64 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  CFNumberRef v65 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v62, @"name", @"speed");
  CFDictionarySetValue(v62, @"type", v63);
  CFDictionarySetValue(v62, @"address", v65);
  CFDictionarySetValue(v62, @"semantic", v64);
  CFArrayAppendValue(Mutable, v62);
  CFRelease(v64);
  CFRelease(v62);
  CFRelease(v65);
  CFRelease(v63);
  return Mutable;
}

void sub_1B65D4568(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  memcpy(__dst, __src, __n);

  sub_1B65D2C08(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B65D45AC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (const void *)sub_1B6583544(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B63C47F8(v10, a2)) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B65D50EC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend__srcAssociatedNode_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
  if (!result)
  {
    uint64_t v10 = objc_msgSend_parentNode(a2, v7, v8, v9);
    uint64_t result = objc_msgSend__srcAssociatedNode_(*(void **)(a1 + 32), v11, v10, v12);
    if (result)
    {
      uint64_t v14 = result;
      CFNumberRef v15 = *(void **)(a1 + 32);
      return objc_msgSend_addOperation_src_dst_(v15, v13, 0, (uint64_t)a2, v14);
    }
  }
  return result;
}

uint64_t sub_1B65D5164(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = objc_msgSend__dstHasAssociatedNode_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
  if ((result & 1) == 0)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    return objc_msgSend_addOperation_src_dst_(v8, v7, 1, (uint64_t)a2, a2);
  }
  return result;
}

uint64_t sub_1B65D52C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4181798](a3, sel__syncNode_with_, a2, a1);
}

void sub_1B65D5614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = &qword_1E9DDB000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBC98, memory_order_acquire) & 1) == 0)
  {
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    int v8 = __cxa_guard_acquire(&qword_1E9DDBC98);
    uint64_t v6 = &qword_1E9DDB000;
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      byte_1E9DDBC90 = 1;
      __cxa_guard_release(&qword_1E9DDBC98);
      uint64_t v6 = &qword_1E9DDB000;
      a2 = v9;
      a3 = v10;
    }
  }
  if (*((unsigned char *)v6 + 3216)) {
    uint64_t v7 = 0x7E14DD3412D33777;
  }
  else {
    uint64_t v7 = 0;
  }
  sub_1B645DCC0(a1, a2, a3, (uint64_t *)a4, v7, 0);
  *(void *)a1 = &unk_1F0FB3210;
  *(_WORD *)(a1 + 384) = *(_WORD *)(a4 + 24);
}

void sub_1B65D56E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = sub_1B6447B50(*(void *)(a1 + 368), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Overlay", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/OverlayPass.mm", 19, v5 | 0x300000000);
  if (*(unsigned char *)(a1 + 384))
  {
    uint64_t v13 = sub_1B6446254(*(void *)(a1 + 368), 0, v7, v8, v9, v10, v11, v12);
    uint64_t v14 = (void *)v13;
    if (v13)
    {
      sub_1B642DC64(v13);
      sub_1B6429A2C(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    if (*(unsigned char *)(a1 + 384)) {
      goto LABEL_6;
    }
  }
  if (*(unsigned char *)(a1 + 385))
  {
LABEL_6:
    CFNumberRef v22 = (void *)sub_1B644689C(*(void *)(a1 + 368), v6, v7, v8, v9, v10, v11, v12);
    objc_msgSend__endImGuiFrameAndRender(v22, v23, v24, v25);
  }

  prof_endFlame();
}

void sub_1B65D5780(_Unwind_Exception *a1)
{
}

uint64_t sub_1B65D5794(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(*(unsigned __int8 *)(a2 + 24) | *(unsigned __int8 *)(a2 + 25))) {
    return 0;
  }
  uint64_t v6 = sub_1B65D5810(a1, a2);
  CFX::RG::Pass::renderTo(v6, a3, 0x100000001, 0);
  if (a4) {
    CFX::RG::Pass::renderTo(v6, a4, 0x200000001, -1);
  }
  return v6;
}

uint64_t sub_1B65D5810(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  sub_1B65D58A0(v7[0], v4, v7, a2);
  v7[0] = v5;
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

void sub_1B65D5868(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B65D58A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v7[0] = a1;
  v7[1] = a2;
  uint64_t v6 = sub_1B63C8330(v7, 0x188u, 8u);
  sub_1B65D5614(v6, *a3, a3[1], a4);
}

uint64_t (*sub_1B65D58F0(int a1, int a2))(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a1 <= 21)
  {
    switch(a1)
    {
      case 7:
        if (a2 == 39) {
          uint64_t v3 = sub_1B65D5EB4;
        }
        else {
          uint64_t v3 = 0;
        }
        BOOL v4 = a2 == 35;
        uint64_t v5 = sub_1B65D5E50;
        break;
      case 8:
        if (a2 == 23) {
          uint64_t v3 = sub_1B65D5F7C;
        }
        else {
          uint64_t v3 = 0;
        }
        BOOL v4 = a2 == 22;
        uint64_t v5 = sub_1B65D5F18;
        break;
      case 9:
        if (a2 == 27) {
          uint64_t v3 = sub_1B65D5FF0;
        }
        else {
          uint64_t v3 = 0;
        }
        BOOL v4 = a2 == 26;
        uint64_t v5 = sub_1B65D5FE0;
        break;
      default:
        return 0;
    }
LABEL_33:
    if (v4) {
      return (uint64_t (*)(uint64_t, int, uint64_t, int, unsigned int))v5;
    }
    else {
      return (uint64_t (*)(uint64_t, int, uint64_t, int, unsigned int))v3;
    }
  }
  else
  {
    switch(a1)
    {
      case 22:
        uint64_t v2 = sub_1B65D5A88;
        goto LABEL_15;
      case 23:
        uint64_t v2 = sub_1B65D5D18;
LABEL_15:
        if (a2 == 8) {
          goto LABEL_16;
        }
        return 0;
      case 24:
      case 25:
        return 0;
      case 26:
        if (a2 == 9) {
          uint64_t v3 = sub_1B65D5BA0;
        }
        else {
          uint64_t v3 = 0;
        }
        BOOL v4 = a2 == 8;
        uint64_t v5 = sub_1B65D5B1C;
        goto LABEL_33;
      case 27:
        if (a2 == 9) {
          uint64_t v3 = sub_1B65D5C9C;
        }
        else {
          uint64_t v3 = 0;
        }
        BOOL v4 = a2 == 8;
        uint64_t v5 = sub_1B65D5C14;
        goto LABEL_33;
      default:
        if (a1 == 35)
        {
          uint64_t v2 = sub_1B65D5DB0;
        }
        else
        {
          if (a1 != 39) {
            return 0;
          }
          uint64_t v2 = sub_1B65D5E00;
        }
        if (a2 != 7) {
          return 0;
        }
LABEL_16:
        uint64_t result = v2;
        break;
    }
  }
  return result;
}

uint64_t sub_1B65D5A88(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    __asm
    {
      FMOV            V1.4S, #-1.0
      FMOV            V2.4S, #1.0
    }
    do
    {
      uint64_t v14 = a3 + v5;
      v15.i64[0] = *(void *)v14;
      v15.i32[2] = *(_DWORD *)(v14 + 8);
      v15.i32[3] = 1.0;
      int8x16_t v16 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v15, _Q1), _Q2), (float32x4_t)xmmword_1B6E729B0)), (int8x16_t)xmmword_1B6E729C0);
      LODWORD(v14) = v16.i32[0] | (v16.i32[1] << 10);
      *(uint32x2_t *)v16.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), (uint32x2_t)0x1E00000014);
      *(_DWORD *)(result + v6) = v14 | v16.i32[0] | v16.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5B1C(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v9.i64[0] = 0xFF000000FFLL;
    v9.i64[1] = 0xFF000000FFLL;
    do
    {
      uint64_t v10 = a3 + v5;
      v11.i64[0] = *(void *)v10;
      v11.i64[1] = *(unsigned int *)(v10 + 8);
      v12.i64[0] = 0x3F0000003F000000;
      v12.i64[1] = 0x3F0000003F000000;
      int8x16_t v13 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32(v12, v8, v11)), v9);
      LODWORD(v10) = v13.i32[0] | (v13.i32[1] << 8);
      *(uint32x2_t *)v13.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v10 | v13.i32[0] | v13.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5BA0(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v9.i64[0] = 0xFF000000FFLL;
    v9.i64[1] = 0xFF000000FFLL;
    do
    {
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      int8x16_t v11 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32(v10, v8, *(float32x4_t *)(a3 + v5))), v9);
      __int32 v12 = v11.i32[0] | (v11.i32[1] << 8);
      *(uint32x2_t *)v11.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v12 | v11.i32[0] | v11.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5C14(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    __asm { FMOV            V0.4S, #-1.0 }
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    do
    {
      uint64_t v15 = a3 + v5;
      v16.i64[0] = *(void *)v15;
      v16.i64[1] = *(unsigned int *)(v15 + 8);
      int8x16_t v17 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q0, (int8x16_t)vcgezq_f32(v16)), v13, v16)), v14);
      LODWORD(v15) = v17.i32[0] | (v17.i32[1] << 8);
      *(uint32x2_t *)v17.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v15 | v17.i32[0] | v17.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5C9C(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    __asm { FMOV            V0.4S, #-1.0 }
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    do
    {
      int8x16_t v15 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q0, (int8x16_t)vcgezq_f32(*(float32x4_t *)(a3 + v5))), v13, *(float32x4_t *)(a3 + v5))), v14);
      __int32 v16 = v15.i32[0] | (v15.i32[1] << 8);
      *(uint32x2_t *)v15.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v16 | v15.i32[0] | v15.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5D18(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    __asm { FMOV            V2.4S, #1.0 }
    do
    {
      uint64_t v13 = a3 + v5;
      v14.i64[0] = *(void *)v13;
      v14.i32[2] = *(_DWORD *)(v13 + 8);
      v14.i32[3] = 1.0;
      v15.i64[0] = 0x3F0000003F000000;
      v15.i64[1] = 0x3F0000003F000000;
      int32x4_t v16 = vcvtq_s32_f32(vmlaq_f32(v15, (float32x4_t)xmmword_1B6E729D0, vminnmq_f32(vmaxnmq_f32(v14, (float32x4_t)0), _Q2)));
      v15.i32[0] = vmovn_s32(v16).u32[0];
      *(uint32x2_t *)v16.i8 = vshl_u32((uint32x2_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0x1E00000014);
      *(_DWORD *)(result + v6) = v15.u16[0] | (v15.u16[1] << 10) | v16.i32[0] | v16.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5DB0(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    float32x2_t v8 = (float32x2_t)vdup_n_s32(0x46FFFE00u);
    do
    {
      int8x16_t v9 = (_WORD *)(result + v6);
      int32x2_t v10 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)(a3 + v5), v8));
      *int8x16_t v9 = v10.i16[0];
      v9[1] = v10.i16[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5E00(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    float32x2_t v8 = (float32x2_t)vdup_n_s32(0x46FFFE00u);
    do
    {
      int8x16_t v9 = (_WORD *)(result + v6);
      int32x2_t v10 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)(a3 + v5), v8));
      *int8x16_t v9 = v10.i16[0];
      v9[1] = v10.i16[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5E50(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    int32x2_t v8 = vdup_n_s32(0x4B400000u);
    float32x2_t v9 = (float32x2_t)vdup_n_s32(0xCB400000);
    float32x2_t v10 = (float32x2_t)vdup_n_s32(0x38000100u);
    do
    {
      int8x16_t v11 = (__int16 *)(a3 + v5);
      v12.i32[0] = *v11;
      v12.i32[1] = v11[1];
      *(float32x2_t *)(result + v6) = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v12, v8), v9), v10);
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5EB4(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    int32x2_t v8 = vdup_n_s32(0x4B400000u);
    float32x2_t v9 = (float32x2_t)vdup_n_s32(0xCB400000);
    float32x2_t v10 = (float32x2_t)vdup_n_s32(0x38000100u);
    do
    {
      int8x16_t v11 = (__int16 *)(a3 + v5);
      v12.i32[0] = *v11;
      v12.i32[1] = v11[1];
      *(float32x2_t *)(result + v6) = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v12, v8), v9), v10);
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5F18(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3B004020u);
    do
    {
      float32x2_t v9 = (const float *)(a3 + v5);
      uint32x4_t v10 = (uint32x4_t)vld1q_dup_f32(v9);
      float32x4_t v11 = vmulq_f32(vcvtq_f32_s32(vshlq_s32((int32x4_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B6E729E0), (int32x4_t)xmmword_1B6E729F0)), v8);
      uint64_t v12 = result + v6;
      *(void *)uint64_t v12 = v11.i64[0];
      *(_DWORD *)(v12 + 8) = v11.i32[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B65D5F7C(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = a5;
    float32x4_t v8 = (float32x4_t)vdupq_n_s32(0x3A802008u);
    do
    {
      float32x2_t v9 = (const float *)(a3 + v5);
      uint32x4_t v10 = (uint32x4_t)vld1q_dup_f32(v9);
      float32x4_t v11 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B6E72A00), (int8x16_t)xmmword_1B6E729C0)), v8);
      uint64_t v12 = result + v6;
      *(void *)uint64_t v12 = v11.i64[0];
      *(_DWORD *)(v12 + 8) = v11.i32[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_1B65D5FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B65D5FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B65D6000(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2;
  if (sub_1B63CA9F0(a1, a2, a3, a4, a5, a6, a7, a8)) {
    unsigned int v17 = sub_1B63CA9F0(v8, v10, v11, v12, v13, v14, v15, v16);
  }
  else {
    unsigned int v17 = 0;
  }
  if (sub_1B65D58F0(a1, v8)) {
    return 1;
  }
  else {
    return v17;
  }
}

void sub_1B65D605C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8 = a4;
  unsigned __int16 v10 = a2;
  unint64_t v12 = a2 >> 16;
  unint64_t v13 = HIDWORD(a2);
  unint64_t v14 = a4 >> 16;
  if (HIDWORD(a2) != HIDWORD(a4)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. src and dst count must be equal", a3, a4, a5, a6, a7, a8, (uint64_t)"dst.count == src.count");
  }
  uint64_t v15 = sub_1B65D58F0((__int16)v12, (__int16)v14);
  if (v15)
  {
    v15(a1, v10, a3, v8, v13);
  }
  else if (sub_1B63CA9F0((__int16)v12, v16, v17, v18, v19, v20, v21, v22) {
         && sub_1B63CA9F0((__int16)v14, v23, v24, v25, v26, v27, v28, v29)
  }
         && v13)
  {
    unsigned int v39 = 0;
    unsigned int v40 = 0;
    do
    {
      *(double *)v41.i64 = sub_1B65D6198((__int16)v14, (const float *)(a3 + v39), v30, v31, v32, v33, v34, v35, v36, v37, v38);
      sub_1B65D6678((__int16)v12, a1 + v40, v42, v43, v44, v45, v46, v47, v41);
      v40 += v10;
      v39 += v8;
      --v13;
    }
    while (v13);
  }
}

double sub_1B65D6198(int a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float a10, float a11)
{
  switch(a1)
  {
    case 1:
      a9.f32[0] = *a2;
      return *(double *)a9.i64;
    case 7:
      a9.i64[0] = *(void *)a2;
      return *(double *)a9.i64;
    case 8:
      a9.i64[0] = *(void *)a2;
      return *(double *)a9.i64;
    case 9:
      a9 = *(float32x4_t *)a2;
      return *(double *)a9.i64;
    case 14:
      unsigned int v18 = *(unsigned __int16 *)a2;
      int v19 = (v18 >> 10) & 0x1F;
      if (v19 == 31) {
        int v20 = 2139095040;
      }
      else {
        int v20 = (v18 >> 10) & 0x1F;
      }
      if (v19) {
        _ZF = v19 == 31;
      }
      else {
        _ZF = 1;
      }
      if (_ZF) {
        int v22 = v20;
      }
      else {
        int v22 = (v19 << 23) + 939524096;
      }
      LODWORD(v23) = v22 | (v18 << 16) & 0x80000000 | (v18 >> 7) & 7 | (8 * (v18 & 0x3FF)) & 0x1FFF | ((v18 & 0x3FF) << 13);
      goto LABEL_27;
    case 22:
      uint32x4_t v24 = (uint32x4_t)vld1q_dup_f32(a2);
      a9 = vcvtq_f32_s32(vshlq_s32((int32x4_t)vshlq_u32(v24, (uint32x4_t)xmmword_1B6E729E0), (int32x4_t)xmmword_1B6E729F0));
      float32x4_t v25 = (float32x4_t)xmmword_1B6E72A20;
      goto LABEL_33;
    case 23:
      uint32x4_t v26 = (uint32x4_t)vld1q_dup_f32(a2);
      a9 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B6E72A00), (int8x16_t)xmmword_1B6E729C0));
      float32x4_t v25 = (float32x4_t)xmmword_1B6E72A10;
      goto LABEL_33;
    case 26:
      uint32x4_t v27 = (uint32x4_t)vld1q_dup_f32(a2);
      v28.i64[0] = 0xFF000000FFLL;
      v28.i64[1] = 0xFF000000FFLL;
      a9 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B6E50360), v28));
      unsigned int v29 = 998277249;
      goto LABEL_32;
    case 27:
      *(uint32x2_t *)v30.i8 = vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)a2), (uint32x2_t)0x1000000018);
      v30.i32[2] = *(_DWORD *)a2 << 8;
      *(float *)&v30.i32[3] = *a2;
      __asm { FMOV            V1.4S, #-1.0 }
      a9 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vshrq_n_s32(v30, 0x18uLL)), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
      __asm { FMOV            V1.4S, #1.0 }
      a9.i64[0] = vminnmq_f32(a9, _Q1).u64[0];
      return *(double *)a9.i64;
    case 34:
      a9.i16[0] = *(_WORD *)a2;
      a9.f32[0] = (float)a9.u32[0];
      float v36 = 0.000015259;
      goto LABEL_26;
    case 35:
      a9.i16[0] = *(_WORD *)a2;
      v37.f32[0] = (float)a9.u32[0];
      LOWORD(a10) = *((_WORD *)a2 + 1);
      v37.f32[1] = (float)LODWORD(a10);
      *(float32x2_t *)a9.f32 = vmul_f32(v37, (float32x2_t)vdup_n_s32(0x37800080u));
      return *(double *)a9.i64;
    case 36:
      a9.i16[0] = *(_WORD *)a2;
      LOWORD(a10) = *((_WORD *)a2 + 1);
      LOWORD(a11) = *((_WORD *)a2 + 2);
      v38.f32[0] = (float)a9.u32[0];
      v38.f32[1] = (float)LODWORD(a10);
      v38.i64[1] = COERCE_UNSIGNED_INT((float)LODWORD(a11));
      a9.i64[0] = vmulq_f32(v38, (float32x4_t)vdupq_n_s32(0x37800080u)).u64[0];
      return *(double *)a9.i64;
    case 37:
      a9 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a2));
      unsigned int v29 = 931135616;
      goto LABEL_32;
    case 38:
      a9.f32[0] = (float)*(__int16 *)a2;
      float v36 = 0.000030519;
LABEL_26:
      float v23 = a9.f32[0] * v36;
LABEL_27:
      a9.i64[0] = LODWORD(v23);
      return *(double *)a9.i64;
    case 39:
      v39.i32[0] = *(__int16 *)a2;
      v39.i32[1] = *((__int16 *)a2 + 1);
      *(float32x2_t *)a9.f32 = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v39, vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000)), (float32x2_t)vdup_n_s32(0x38000100u));
      return *(double *)a9.i64;
    case 40:
      *(float *)v40.i32 = *a2;
      v40.i32[1] = *((unsigned __int16 *)a2 + 2);
      float32x4_t v41 = (float32x4_t)vdupq_n_s32(0xCB400000);
      float32x4_t v42 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), v40);
      goto LABEL_31;
    case 41:
      float32x4_t v41 = (float32x4_t)vdupq_n_s32(0xCB400000);
      float32x4_t v42 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), *(int16x4_t *)a2);
LABEL_31:
      a9 = vaddq_f32(v42, v41);
      unsigned int v29 = 939524352;
LABEL_32:
      float32x4_t v25 = (float32x4_t)vdupq_n_s32(v29);
LABEL_33:
      a9.i64[0] = vmulq_f32(a9, v25).u64[0];
      break;
    case 42:
      unsigned int v43 = *(unsigned __int16 *)a2;
      int v44 = (v43 >> 10) & 0x1F;
      if (v44 == 31) {
        int v45 = 2139095040;
      }
      else {
        int v45 = (v43 >> 10) & 0x1F;
      }
      if (v44) {
        BOOL v46 = v44 == 31;
      }
      else {
        BOOL v46 = 1;
      }
      if (v46) {
        int v47 = v45;
      }
      else {
        int v47 = (v44 << 23) + 939524096;
      }
      unsigned int v48 = v47 | (v43 << 16) & 0x80000000 | (v43 >> 7) & 7 | (8 * (v43 & 0x3FF)) & 0x1FFF | ((v43 & 0x3FF) << 13);
      unsigned int v49 = *((unsigned __int16 *)a2 + 1);
      int v50 = (v49 >> 10) & 0x1F;
      if (v50 && v50 != 31)
      {
        int v51 = (v50 << 23) + 939524096;
      }
      else if (v50 == 31)
      {
        int v51 = 2139095040;
      }
      else
      {
        int v51 = (v49 >> 10) & 0x1F;
      }
      a9.i32[0] = v48;
      a9.i32[1] = v51 | (v49 << 16) & 0x80000000 | (v49 >> 7) & 7 | (8 * (v49 & 0x3FF)) & 0x1FFF | ((v49 & 0x3FF) << 13);
      break;
    case 43:
      v52.i32[0] = *(unsigned __int16 *)a2;
      v52.i32[1] = *((unsigned __int16 *)a2 + 1);
      v52.i64[1] = *((unsigned __int16 *)a2 + 2);
      v53.i64[0] = 0x8000000080000000;
      v53.i64[1] = 0x8000000080000000;
      int8x16_t v54 = vandq_s8((int8x16_t)vshlq_n_s32(v52, 0x10uLL), v53);
      a9 = (float32x4_t)vshlq_n_s32(v52, 0xDuLL);
      v53.i64[0] = 0x3800000038000000;
      v53.i64[1] = 0x3800000038000000;
      a9.i64[0] = vorrq_s8(vorrq_s8(v54, vandq_s8((int8x16_t)a9, (int8x16_t)vdupq_n_s32(0x7FE000u))), (int8x16_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)a9, (int8x16_t)vdupq_n_s32(0xF800000u)), (int32x4_t)v53)).u64[0];
      break;
    case 44:
      v55.i64[0] = 0x8000000080000000;
      v55.i64[1] = 0x8000000080000000;
      a9 = (float32x4_t)vshll_n_u16(*(uint16x4_t *)a2, 0xDuLL);
      v56.i64[0] = 0x3800000038000000;
      v56.i64[1] = 0x3800000038000000;
      a9.i64[0] = vaddq_s32((int32x4_t)vorrq_s8(vandq_s8((int8x16_t)a9, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)a2), v55), vandq_s8((int8x16_t)a9, (int8x16_t)vdupq_n_s32(0x7FE000u)))), v56).u64[0];
      break;
    default:
      uint64_t v11 = sub_1B63CA8A4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      sub_1B63F2F54(16, @"Error: unsupported conversion %@ -> float4", v12, v13, v14, v15, v16, v17, (uint64_t)v11);
      a9.i64[0] = 0;
      break;
  }
  return *(double *)a9.i64;
}

void sub_1B65D6678(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  switch(a1)
  {
    case 1:
      *(_DWORD *)a2 = a9.i32[0];
      return;
    case 7:
      *(void *)a2 = a9.i64[0];
      return;
    case 8:
      *(void *)a2 = a9.i64[0];
      *(_DWORD *)(a2 + 8) = a9.i32[2];
      return;
    case 9:
      *(float32x4_t *)a2 = a9;
      return;
    case 14:
      unsigned __int32 v16 = HIWORD(a9.i32[0]) & 0x8000;
      unsigned int v17 = ((unsigned __int32)a9.i32[0] >> 23);
      unsigned int v18 = v17 - 112;
      unsigned int v19 = v17 - 113;
      __int16 v20 = v16 | 0x7BFF;
      if (v17 == 255) {
        __int16 v20 = v16 | ((a9.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
      }
      if (v17 >= 0x71) {
        __int16 v21 = v20;
      }
      else {
        __int16 v21 = a9.i16[1] & 0x8000;
      }
      unsigned __int32 v22 = HIWORD(a9.i32[0]) & 0x8000 | ((unsigned __int32)a9.i32[0] >> 13) & 0x3FF | (v18 << 10);
      if (v19 > 0x1D) {
        LOWORD(v22) = v21;
      }
      goto LABEL_27;
    case 22:
      __asm { FMOV            V1.4S, #-1.0; jumptable 00000001B65D66B0 case 22 }
      float32x4_t v28 = vmaxnmq_f32(a9, _Q1);
      __asm { FMOV            V1.4S, #1.0 }
      int8x16_t v30 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmulq_f32(vminnmq_f32(v28, _Q1), (float32x4_t)xmmword_1B6E729B0)), (int8x16_t)xmmword_1B6E729C0);
      uint32x2_t v31 = (uint32x2_t)vextq_s8(v30, v30, 8uLL).u64[0];
      int v32 = v30.i32[0] | (v30.i32[1] << 10);
      uint32x2_t v33 = (uint32x2_t)0x1E00000014;
      goto LABEL_20;
    case 23:
      __asm { FMOV            V1.4S, #1.0 }
      v35.i64[0] = 0x3F0000003F000000;
      v35.i64[1] = 0x3F0000003F000000;
      int8x16_t v36 = (int8x16_t)vcvtq_s32_f32(vmlaq_f32(v35, (float32x4_t)xmmword_1B6E729D0, vminnmq_f32(vmaxnmq_f32(a9, (float32x4_t)0), _Q1)));
      _Q1.i32[0] = vmovn_s32((int32x4_t)v36).u32[0];
      int v32 = _Q1.u16[0] | (_Q1.u16[1] << 10);
      uint32x2_t v37 = vshl_u32((uint32x2_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0x1E00000014);
      goto LABEL_21;
    case 26:
      v38.i64[0] = 0x3F0000003F000000;
      v38.i64[1] = 0x3F0000003F000000;
      int8x16_t v39 = (int8x16_t)vcvtq_s32_f32(vmlaq_f32(v38, (float32x4_t)vdupq_n_s32(0x437F0000u), a9));
      goto LABEL_19;
    case 27:
      __asm { FMOV            V2.4S, #-1.0 }
      int8x16_t v39 = (int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q2, (int8x16_t)vcgezq_f32(a9)), (float32x4_t)vdupq_n_s32(0x42FF0000u), a9));
LABEL_19:
      v41.i64[0] = 0xFF000000FFLL;
      v41.i64[1] = 0xFF000000FFLL;
      int8x16_t v42 = vandq_s8(v39, v41);
      uint32x2_t v31 = (uint32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
      int v32 = v42.i32[0] | (v42.i32[1] << 8);
      uint32x2_t v33 = (uint32x2_t)0x1800000010;
LABEL_20:
      uint32x2_t v37 = vshl_u32(v31, v33);
LABEL_21:
      *(_DWORD *)a2 = v32 | v37.i32[0] | v37.i32[1];
      return;
    case 34:
      unsigned __int32 v22 = (int)vmla_n_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)vdup_n_s32(0x477FFF00u), a9.f32[0]).f32[0];
      goto LABEL_27;
    case 35:
      int32x2_t v43 = vcvt_s32_f32(vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)vdup_n_s32(0x477FFF00u), *(float32x2_t *)a9.f32));
      LOWORD(v44) = v43.i16[2];
      *(_WORD *)a2 = v43.i16[0];
      goto LABEL_78;
    case 36:
      v45.i64[0] = 0x3F0000003F000000;
      v45.i64[1] = 0x3F0000003F000000;
      int32x4_t v46 = vcvtq_s32_f32(vmlaq_f32(v45, (float32x4_t)vdupq_n_s32(0x477FFF00u), a9));
      goto LABEL_30;
    case 37:
      v47.i64[0] = 0x3F0000003F000000;
      v47.i64[1] = 0x3F0000003F000000;
      int32x4_t v48 = vcvtq_s32_f32(vmlaq_f32(v47, (float32x4_t)vdupq_n_s32(0x477FFF00u), a9));
      goto LABEL_36;
    case 38:
      unsigned __int32 v22 = (int)(float)(32767.0 * a9.f32[0]);
LABEL_27:
      *(_WORD *)a2 = v22;
      break;
    case 39:
      int32x2_t v49 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)a9.f32, (float32x2_t)vdup_n_s32(0x46FFFE00u)));
      *(_WORD *)a2 = v49.i16[0];
      *(_WORD *)(a2 + 2) = v49.i16[2];
      break;
    case 40:
      int32x4_t v46 = vcvtq_s32_f32(vmulq_f32(a9, (float32x4_t)vdupq_n_s32(0x46FFFE00u)));
LABEL_30:
      int16x4_t v50 = vmovn_s32(v46);
      *(_DWORD *)a2 = v50.i32[0];
      *(_WORD *)(a2 + 4) = v50.i16[2];
      break;
    case 41:
      int32x4_t v48 = vcvtq_s32_f32(vmulq_f32(a9, (float32x4_t)vdupq_n_s32(0x46FFFE00u)));
LABEL_36:
      *(int16x4_t *)a2 = vmovn_s32(v48);
      break;
    case 42:
      unsigned __int32 v55 = HIWORD(a9.i32[0]) & 0x8000;
      unsigned int v56 = ((unsigned __int32)a9.i32[0] >> 23);
      if (v56 - 113 > 0x1D)
      {
        if (v56 >= 0x71)
        {
          if (v56 == 255) {
            LOWORD(v55) = a9.i16[1] & 0x8000 | ((a9.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          }
          else {
            LOWORD(v55) = v55 | 0x7BFF;
          }
        }
      }
      else
      {
        unsigned __int32 v55 = HIWORD(a9.i32[0]) & 0x8000 | ((unsigned __int32)a9.i32[0] >> 13) & 0x3FF | ((v56 - 112) << 10);
      }
      *(_WORD *)a2 = v55;
      unsigned __int32 v73 = HIWORD(a9.i32[1]) & 0x8000;
      unsigned int v74 = ((unsigned __int32)a9.i32[1] >> 23);
      unsigned int v75 = v74 - 112;
      unsigned int v76 = v74 - 113;
      __int16 v77 = v73 | 0x7BFF;
      if (v74 == 255) {
        __int16 v77 = v73 | ((a9.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
      }
      if (v74 >= 0x71) {
        __int16 v78 = v77;
      }
      else {
        __int16 v78 = a9.i16[3] & 0x8000;
      }
      unsigned __int32 v44 = HIWORD(a9.i32[1]) & 0x8000 | ((unsigned __int32)a9.i32[1] >> 13) & 0x3FF | (v75 << 10);
      if (v76 > 0x1D) {
        LOWORD(v44) = v78;
      }
LABEL_78:
      *(_WORD *)(a2 + 2) = v44;
      break;
    case 43:
      unsigned __int32 v51 = HIWORD(a9.i32[0]) & 0x8000;
      unsigned int v52 = ((unsigned __int32)a9.i32[0] >> 23);
      if (v52 - 113 > 0x1D)
      {
        if (v52 >= 0x71)
        {
          if (v52 == 255) {
            LOWORD(v51) = a9.i16[1] & 0x8000 | ((a9.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          }
          else {
            LOWORD(v51) = v51 | 0x7BFF;
          }
        }
      }
      else
      {
        unsigned __int32 v51 = HIWORD(a9.i32[0]) & 0x8000 | ((unsigned __int32)a9.i32[0] >> 13) & 0x3FF | ((v52 - 112) << 10);
      }
      *(_WORD *)a2 = v51;
      unsigned __int32 v57 = HIWORD(a9.i32[1]) & 0x8000;
      unsigned int v58 = ((unsigned __int32)a9.i32[1] >> 23);
      unsigned int v59 = v58 - 112;
      unsigned int v60 = v58 - 113;
      __int16 v61 = v57 | 0x7BFF;
      if (v58 == 255) {
        __int16 v61 = v57 | ((a9.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
      }
      if (v58 >= 0x71) {
        __int16 v62 = v61;
      }
      else {
        __int16 v62 = a9.i16[3] & 0x8000;
      }
      unsigned __int32 v63 = HIWORD(a9.i32[1]) & 0x8000 | ((unsigned __int32)a9.i32[1] >> 13) & 0x3FF | (v59 << 10);
      if (v60 > 0x1D) {
        LOWORD(v63) = v62;
      }
      *(_WORD *)(a2 + 2) = v63;
      unsigned __int32 v64 = HIWORD(a9.i32[2]) & 0x8000;
      unsigned int v65 = ((unsigned __int32)a9.i32[2] >> 23);
      unsigned int v66 = v65 - 112;
      unsigned int v67 = v65 - 113;
      __int16 v68 = v64 | 0x7BFF;
      if (v65 == 255) {
        __int16 v68 = v64 | ((a9.i32[2] & 0x7FFFFF) != 0) | 0x7C00;
      }
      if (v65 >= 0x71) {
        __int16 v69 = v68;
      }
      else {
        __int16 v69 = a9.i16[5] & 0x8000;
      }
      unsigned __int32 v70 = HIWORD(a9.i32[2]) & 0x8000 | ((unsigned __int32)a9.i32[2] >> 13) & 0x3FF | (v66 << 10);
      if (v67 > 0x1D) {
        LOWORD(v70) = v69;
      }
      *(_WORD *)(a2 + 4) = v70;
      break;
    case 44:
      unsigned __int32 v53 = HIWORD(a9.i32[0]) & 0x8000;
      unsigned int v54 = ((unsigned __int32)a9.i32[0] >> 23);
      if (v54 - 113 > 0x1D)
      {
        if (v54 >= 0x71)
        {
          if (v54 == 255) {
            LOWORD(v53) = a9.i16[1] & 0x8000 | ((a9.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          }
          else {
            LOWORD(v53) = v53 | 0x7BFF;
          }
        }
      }
      else
      {
        unsigned __int32 v53 = HIWORD(a9.i32[0]) & 0x8000 | ((unsigned __int32)a9.i32[0] >> 13) & 0x3FF | ((v54 - 112) << 10);
      }
      *(_WORD *)a2 = v53;
      unsigned __int32 v71 = HIWORD(a9.i32[1]) & 0x8000;
      unsigned int v72 = ((unsigned __int32)a9.i32[1] >> 23);
      if (v72 - 113 > 0x1D)
      {
        if (v72 >= 0x71)
        {
          if (v72 == 255) {
            LOWORD(v71) = a9.i16[3] & 0x8000 | ((a9.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
          }
          else {
            LOWORD(v71) = v71 | 0x7BFF;
          }
        }
      }
      else
      {
        unsigned __int32 v71 = HIWORD(a9.i32[1]) & 0x8000 | ((unsigned __int32)a9.i32[1] >> 13) & 0x3FF | ((v72 - 112) << 10);
      }
      *(_WORD *)(a2 + 2) = v71;
      unsigned __int32 v79 = HIWORD(a9.i32[2]) & 0x8000;
      unsigned int v80 = ((unsigned __int32)a9.i32[2] >> 23);
      if (v80 - 113 > 0x1D)
      {
        if (v80 >= 0x71)
        {
          if (v80 == 255) {
            LOWORD(v79) = a9.i16[5] & 0x8000 | ((a9.i32[2] & 0x7FFFFF) != 0) | 0x7C00;
          }
          else {
            LOWORD(v79) = v79 | 0x7BFF;
          }
        }
      }
      else
      {
        unsigned __int32 v79 = HIWORD(a9.i32[2]) & 0x8000 | ((unsigned __int32)a9.i32[2] >> 13) & 0x3FF | ((v80 - 112) << 10);
      }
      *(_WORD *)(a2 + 4) = v79;
      unsigned __int32 v81 = HIWORD(a9.i32[3]) & 0x8000;
      unsigned int v82 = ((unsigned __int32)a9.i32[3] >> 23);
      if (v82 - 113 > 0x1D)
      {
        if (v82 >= 0x71)
        {
          if (v82 == 255) {
            LOWORD(v81) = a9.i16[7] & 0x8000 | ((a9.i32[3] & 0x7FFFFF) != 0) | 0x7C00;
          }
          else {
            LOWORD(v81) = v81 | 0x7BFF;
          }
        }
      }
      else
      {
        unsigned __int32 v81 = HIWORD(a9.i32[3]) & 0x8000 | ((unsigned __int32)a9.i32[3] >> 13) & 0x3FF | ((v82 - 112) << 10);
      }
      *(_WORD *)(a2 + 6) = v81;
      break;
    default:
      float32x2_t v9 = sub_1B63CA8A4(a1, a2, a3, a4, a5, a6, a7, a8);
      sub_1B63F2F54(16, @"Error: unsupported conversion %@ -> float4", v10, v11, v12, v13, v14, v15, (uint64_t)v9);
      break;
  }
}

void *sub_1B65D6DD0(void *a1, const void *a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  if (!a1) {
    return 0;
  }
  v18.receiver = a1;
  v18.super_class = (Class)VFXMTLSkinDeformer;
  uint64_t v15 = objc_msgSendSuper2(&v18, sel_init);
  if (v15)
  {
    if (a2) {
      CFTypeRef v16 = CFRetain(a2);
    }
    else {
      CFTypeRef v16 = 0;
    }
    v15[1] = v16;
    v15[2] = a3;
    *((unsigned char *)v15 + 40) = (a4 & 2) != 0;
    *((unsigned char *)v15 + 41) = (a4 & 4) != 0;
    *((unsigned char *)v15 + 24) = a5;
    v15[4] = a6;
    objc_msgSend_setupWithComputeContext_(v15, v13, a7, v14);
  }
  return v15;
}

uint64_t sub_1B65D71E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_currentBlitEncoder(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v5 + 16);

  return MEMORY[0x1F4181798](v5, sel_makeReadOnlyBuffersWithBaseGeometry_baseMesh_blitEncoder_, v7, v6);
}

BOOL sub_1B65D7D20(uint64_t a1, void *a2, void *a3)
{
  self;
  int v5 = sub_1B6531674((uint64_t)a3);
  if (v5 != sub_1B6531674((uint64_t)a2)) {
    return 0;
  }
  uint64_t v6 = sub_1B641E308((uint64_t)a3);
  if (v6 != sub_1B641E308((uint64_t)a2)) {
    return 0;
  }
  uint64_t v14 = sub_1B6531614((uint64_t)a3, v7, v8, v9, v10, v11, v12, v13);
  if (v14 != sub_1B6531614((uint64_t)a2, v15, v16, v17, v18, v19, v20, v21)) {
    return 0;
  }
  uint64_t v29 = sub_1B6531614((uint64_t)a3, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = sub_1B641E308((uint64_t)a3);
  int8x16_t v36 = 0;
  uint32x2_t v37 = 0;
  uint64_t v34 = 0;
  float32x4_t v35 = 0;
  int v32 = 0;
  uint32x2_t v33 = 0;
  sub_1B65315EC(a3, &v37, &v35, &v33);
  sub_1B65315EC(a2, &v36, &v34, &v32);
  if (v37 && v36)
  {
    if (memcmp(v37, v36, 8 * v30 + 8)) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (!v37 || !v36) {
      return result;
    }
  }
  if (!v35 || !v34)
  {
    BOOL result = 0;
    if (!v35 || !v34) {
      return result;
    }
    goto LABEL_16;
  }
  if (memcmp(v35, v34, 2 * v29)) {
    return 0;
  }
LABEL_16:
  if (v33 && v32) {
    return !memcmp(v33, v32, 4 * v29);
  }
  BOOL result = 0;
  if (v33 && v32) {
    return 1;
  }
  return result;
}

BOOL sub_1B65D7E88(const __CFURL *a1)
{
  return sub_1B65D7E90(a1, 1);
}

BOOL sub_1B65D7E90(const __CFURL *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = CFURLCopyScheme(a1);
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  if (CFEqual(v4, @"file"))
  {
    CFRelease(v5);
    if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    {
      memset(&v7, 0, sizeof(v7));
      if (!stat((const char *)buffer, &v7) && (v7.st_mode & 0xF000) == 0x8000) {
        return access((const char *)buffer, 4) == 0;
      }
    }
    return 0;
  }
  CFStringCompare(v5, @"http", 0);
  CFRelease(v5);
  return a2;
}

uint64_t sub_1B65D85FC(void *Object, const char *a2, uint64_t a3, uint64_t a4)
{
  for (int i = 0; ; i += objc_msgSend_offset(Object, v18, v19, v20))
  {
    uint64_t v6 = objc_msgSend_dataType(Object, a2, a3, a4);
    if (v6 != 1) {
      break;
    }
    uint64_t v10 = objc_msgSend_structType(Object, v7, v8, v9);
    uint64_t v14 = objc_msgSend_members(v10, v11, v12, v13);
    Object = objc_msgSend_lastObject(v14, v15, v16, v17);
  }
  if (v6 == 2)
  {
    uint64_t v21 = objc_msgSend_arrayType(Object, v7, v8, v9);
    int v25 = objc_msgSend_arrayLength(v21, v22, v23, v24);
    uint64_t v29 = objc_msgSend_elementType(v21, v26, v27, v28);
    int v30 = sub_1B64D80F0(v29) * v25;
  }
  else
  {
    int v30 = sub_1B64D80F0(v6);
  }
  return (v30 + i);
}

void sub_1B65D8DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B65D8E28(void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  stat v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      abort();
    }
    uint64_t v11 = v5 - (void)*a1;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1B6427C8C(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v9];
    uint64_t v15 = &v13[16 * v12];
    *(_OWORD *)uint64_t v14 = *a2;
    uint64_t v8 = v14 + 16;
    uint64_t v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *stat v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1B65D99C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1B65DABA8(uint64_t a1)
{
  int v1 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1B65DAC40;
  block[3] = &unk_1E6144FA0;
  long long v2 = *(_OWORD *)(a1 + 40);
  long long v3 = *(_OWORD *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 104);
  long long v4 = *(_OWORD *)(a1 + 72);
  long long v11 = v3;
  long long v10 = v4;
  long long v5 = *(_OWORD *)(a1 + 56);
  long long v8 = v2;
  long long v9 = v5;
  dispatch_async(v1, block);
  return result;
}

uint64_t sub_1B65DAC40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if ((objc_msgSend_isReadyForMoreMediaData(*(void **)(*(void *)(a1 + 32) + 376), a2, a3, a4) & 1) == 0)
  {
    do
      usleep(0x3E8u);
    while (!objc_msgSend_isReadyForMoreMediaData(*(void **)(*(void *)(a1 + 32) + 376), v6, v7, v8));
  }
  long long v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 80);
  uint64_t v19 = *(void *)(a1 + 96);
  if ((objc_msgSend_appendPixelBuffer_withPresentationTime_(v9, v5, v10, (uint64_t)&v18) & 1) == 0) {
    sub_1B63F2F54(16, @"Error: append pixel buffer failed", v11, v12, v13, v14, v15, v16, v18);
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  CFRelease(*(CFTypeRef *)(a1 + 64));
  CVMetalTextureCacheFlush(*(CVMetalTextureCacheRef *)(a1 + 72), 0);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1B65DB024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B65DB060(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3, a4)) {
    objc_msgSend_setCanceled_(*(void **)(a1 + 40), v5, 1, v7);
  }
  if ((objc_msgSend_canceled(*(void **)(a1 + 40), v5, v6, v7) & 1) != 0
    || (float)(*(float *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + (float)(*(float *)(a1 + 96) * -0.5)) > *(float *)(a1 + 100))
  {
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
    {
      v44[0] = MEMORY[0x1E4F143A8];
      v44[1] = 3221225472;
      v44[2] = sub_1B65DB348;
      void v44[3] = &unk_1E6143238;
      uint64_t v8 = *(NSObject **)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      v44[4] = *(void *)(a1 + 40);
      v44[5] = v9;
      dispatch_async(v8, v44);
    }
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1BA9B76E0]();
    if (*(unsigned char *)(a1 + 108))
    {
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      uint64_t v14 = *(void *)(a1 + 88);
      uint64_t v15 = 1000 * *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(void *)(a1 + 48);
      int v18 = (int)(float)(1000.0 / *(float *)(v16 + 400));
      uint64_t v19 = *(void *)(v16 + 384);
      uint64_t v48 = 0;
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 3221225472;
      v49[2] = sub_1B65DB330;
      v49[3] = &unk_1E6142310;
      v49[4] = *(void *)(a1 + 72);
      uint64_t v45 = v15;
      int v46 = v18;
      int v47 = 1;
      objc_msgSend_renderAndAppendWithPresentationTime_usingAdaptor_metalTextureCache_cvQueue_completionBlock_((void *)v16, v10, (uint64_t)&v45, v19, v14, v17, v49);
    }
    else
    {
      uint64_t v24 = *(void **)(a1 + 40);
      objc_msgSend_size(v24, v10, v11, v12);
      uint64_t v28 = objc_msgSend__copySnapshot_(v24, v25, v26, v27);
      if (v28)
      {
        uint64_t v29 = (CGImage *)v28;
        if ((objc_msgSend_isReadyForMoreMediaData(*(void **)(*(void *)(a1 + 40) + 376), v20, v21, v22) & 1) == 0)
        {
          do
            usleep(0x3E8u);
          while (!objc_msgSend_isReadyForMoreMediaData(*(void **)(*(void *)(a1 + 40) + 376), v31, v32, v33));
        }
        uint64_t v34 = *(void *)(a1 + 40);
        float v35 = 1000.0 / *(float *)(v34 + 400);
        uint64_t v36 = *(void *)(v34 + 384);
        uint64_t v45 = 1000 * *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
        int v46 = (int)v35;
        int v47 = 1;
        uint64_t v48 = 0;
        objc_msgSend_appendImage_withPresentationTime_usingAdaptor_((void *)v34, v30, (uint64_t)v29, (uint64_t)&v45, v36);
        CGImageRelease(v29);
      }
    }
    *(float *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = *(float *)(a1 + 96)
                                                               + *(float *)(*(void *)(*(void *)(a1 + 64) + 8)
                                                                          + 24);
    ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
    *(float *)&double v23 = (float)(*(float *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) - *(float *)(a1 + 104))
                   / (float)(*(float *)(a1 + 100) - *(float *)(a1 + 104));
    objc_msgSend_setProgress_(*(void **)(a1 + 40), v20, v21, v22, v23);
    uint32x2_t v37 = *(void **)(a1 + 32);
    uint64_t v41 = objc_msgSend_completedUnitCount(v37, v38, v39, v40);
    objc_msgSend_setCompletedUnitCount_(v37, v42, v41 + 1, v43);
  }
}

uint64_t sub_1B65DB330(uint64_t result)
{
  return result;
}

intptr_t sub_1B65DB348(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_markAsFinished(*(void **)(*(void *)(a1 + 32) + 376), a2, a3, a4);
  long long v5 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v5);
}

intptr_t sub_1B65DB390(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1B65DB398(uint64_t result, unsigned int a2)
{
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  uint64_t v15 = sub_1B65DB520;
  uint64_t v16 = &unk_1E6145058;
  uint64_t v17 = &unk_1F0FB5F68;
  int v18 = &unk_1F0FB6AE8;
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2 - 1;
    unsigned int v5 = (a2 >> 1) + 1;
    do
    {
      __n128 result = v15((uint64_t)v14, v3, v5 - 2, v4);
      --v5;
    }
    while (v5 > 1);
    if ((int)v4 >= 1)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = v3 + v6;
        long long v8 = *(_OWORD *)v3;
        long long v9 = *(_OWORD *)(v3 + 16);
        uint64_t v10 = *(void *)(v3 + 32);
        uint64_t v11 = *(void *)(v3 + v6 + 32);
        long long v12 = *(_OWORD *)(v3 + v6 + 16);
        *(_OWORD *)uint64_t v3 = *(_OWORD *)(v3 + v6);
        *(_OWORD *)(v3 + 16) = v12;
        *(void *)(v3 + 32) = v11;
        *(void *)(v7 + 32) = v10;
        *(_OWORD *)uint64_t v7 = v8;
        *(_OWORD *)(v7 + 16) = v9;
        __n128 result = v15((uint64_t)v14, v3, 0, v2);
        v6 -= 40;
        BOOL v13 = (int)v2 <= 0;
        uint64_t v2 = (v2 - 1);
      }
      while (!v13);
    }
  }
  return result;
}

BOOL sub_1B65DB4C0(uint64_t a1, float *a2, float *a3)
{
  return (float)((float)(a2[5] - a2[4]) * (float)(a2[7] - a2[6])) > (float)((float)(a3[5] - a3[4])
                                                                          * (float)(a3[7] - a3[6]));
}

__n128 sub_1B65DB4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v7;
  *(void *)(a3 + 32) = v6;
  *(void *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_1B65DB520(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4 = (2 * a3) | 1;
  if (v4 <= a4)
  {
    int v6 = a3;
    uint64_t v7 = result;
    int v8 = 2 * a3;
    do
    {
      __n128 result = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16))();
      if (result) {
        int v9 = v4;
      }
      else {
        int v9 = v6;
      }
      if (v4 < a4)
      {
        int v10 = v8 + 2;
        __n128 result = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 16))();
        if (result) {
          int v9 = v10;
        }
      }
      if (v9 == v6) {
        break;
      }
      __n128 result = (*(uint64_t (**)(void))(*(void *)(v7 + 40) + 16))();
      int v8 = 2 * v9;
      int v4 = (2 * v9) | 1;
      int v6 = v9;
    }
    while (v4 <= a4);
  }
  return result;
}

uint64_t sub_1B65DB60C(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 2);
  if (v1 < 2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *a1 + 8;
  unsigned int v6 = 2;
  while (2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v3;
    uint64_t v9 = v6;
    int v10 = (double *)(v5 + 80 * v6);
    uint64_t v11 = (double *)(v4 + 80 * v3);
    double v12 = *v11;
    double v13 = v11[1];
    unsigned int v14 = ++v3;
    if (v3 == v1) {
      unsigned int v14 = 0;
    }
    uint64_t v15 = (double *)(v4 + 80 * v14);
    double v16 = *v15;
    double v17 = v15[1];
    if (v8) {
      int v18 = -1;
    }
    else {
      int v18 = -2;
    }
    unint64_t v19 = (v18 + v1);
    while (v9 + v7 <= v19)
    {
      double v20 = *(v10 - 1);
      double v21 = *v10;
      if (v16 != v20 || v17 != v21)
      {
        double v23 = (double *)(v4 + 80 * (((int)v8 + (int)v7 + 3) % v1));
        double v24 = v23[1];
        if (*v23 != v12 || v24 != v13)
        {
          v10 += 10;
          ++v7;
          if (!sub_1B65DB740(v12, v13, v16, v17, v20, v21, *v23, v24)) {
            continue;
          }
        }
      }
      return 1;
    }
    uint64_t result = 0;
    unsigned int v6 = v9 + 1;
    if (v3 != v1) {
      continue;
    }
    break;
  }
  return result;
}

uint64_t sub_1B65DB740(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if ((a3 - a1) * (a6 - a2) - (a4 - a2) * (a5 - a1) <= 0.0 != (a3 - a1) * (a8 - a2) - (a4 - a2) * (a7 - a1) > 0.0) {
    return 0;
  }
  else {
    return ((a7 - a5) * (a2 - a6) - (a8 - a6) * (a1 - a5) > 0.0) ^ ((a7 - a5) * (a4 - a6)
  }
                                                                                - (a8 - a6) * (a3 - a5) > 0.0);
}

uint64_t sub_1B65DB7C8(unsigned int *a1)
{
  uint64_t v1 = a1[8];
  if (!v1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (double *)(*(void *)a1 + 8);
      double v5 = 0.0;
      do
      {
        if (v2 - 1 == v3) {
          uint64_t v6 = 0;
        }
        else {
          uint64_t v6 = v3 + 1;
        }
        double v5 = v5 + *(v4 - 1) * *(double *)(*(void *)a1 + 80 * v6 + 8) - *(double *)(*(void *)a1 + 80 * v6) * *v4;
        v4 += 10;
        ++v3;
      }
      while (v2 != v3);
      if (v5 < 0.0) {
        uint64_t v1 = 1;
      }
      else {
        uint64_t v1 = 2;
      }
    }
    else
    {
      uint64_t v1 = 2;
    }
    a1[8] = v1;
  }
  return v1;
}

_DWORD *sub_1B65DB844(_DWORD *result)
{
  LODWORD(v1) = result[2];
  if (v1)
  {
    uint64_t v2 = (unsigned char *)(*(void *)result + 68);
    uint64_t v3 = result[2];
    do
    {
      float64x2_t v4 = *(float64x2_t *)(v2 - 52);
      float64x2_t v5 = v4;
      if (*v2) {
        float64x2_t v5 = *(float64x2_t *)(v2 - 36);
      }
      *(float64x2_t *)(v2 - 52) = vnegq_f64(v5);
      *(float64x2_t *)(v2 - 36) = vnegq_f64(v4);
      v2 += 80;
      --v3;
    }
    while (v3);
    if (v1 >= 2)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      int v8 = -1;
      do
      {
        uint64_t v9 = (long long *)(*(void *)result + v6);
        long long v19 = v9[2];
        long long v20 = v9[3];
        long long v21 = v9[4];
        long long v17 = *v9;
        long long v18 = v9[1];
        int v10 = (long long *)(*(void *)result + 80 * (v1 + v8));
        *uint64_t v9 = *v10;
        long long v11 = v10[4];
        long long v13 = v10[1];
        long long v12 = v10[2];
        v9[3] = v10[3];
        v9[4] = v11;
        v9[1] = v13;
        uint64_t v9[2] = v12;
        unsigned int v14 = (_OWORD *)(*(void *)result + 80 * (v8 + result[2]));
        void v14[2] = v19;
        v14[3] = v20;
        v14[4] = v21;
        *unsigned int v14 = v17;
        v14[1] = v18;
        ++v7;
        unint64_t v1 = result[2];
        --v8;
        v6 += 80;
      }
      while (v7 < v1 >> 1);
    }
  }
  int v15 = result[8];
  if (v15 == 1)
  {
    int v16 = 2;
  }
  else
  {
    if (v15 != 2) {
      return result;
    }
    int v16 = 1;
  }
  result[8] = v16;
  return result;
}

BOOL sub_1B65DB950(float *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 2);
    if (v3)
    {
      BOOL v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = *(double **)a2;
      double v7 = (float)(a1[4] + -100.0);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)a1 + 8;
      for (int i = *(double **)a2; ; int i = &v6[10 * v5])
      {
        uint64_t v11 = 0;
        char v12 = 0;
        double v13 = *i;
        double v14 = i[1];
        double v15 = v7 - *i;
        int v16 = (double *)v9;
        do
        {
          double v17 = *(v16 - 1);
          double v18 = *v16;
          if (v3 - 1 == v11) {
            uint64_t v19 = 0;
          }
          else {
            uint64_t v19 = v11 + 1;
          }
          long long v20 = (double *)(v8 + 80 * v19);
          double v21 = v20[1];
          if ((*v20 - v17) * (v14 - v18) - (v21 - v18) * (v13 - v17) < 0.0 == (*v20 - v17) * (v14 - v18)
                                                                             - (v21 - v18) * (v7 - v17) >= 0.0)
            v12 += ((v17 - v13) * -(v14 - v14) + v15 * (v18 - v14) >= 0.0) ^ ((*v20 - v13) * -(v14 - v14)
                                                                            + v15 * (v21 - v14) >= 0.0);
          ++v11;
          v16 += 10;
        }
        while (v3 != v11);
        if ((v12 & 1) == 0) {
          break;
        }
        BOOL v4 = ++v5 >= v2;
        if (v5 == v2) {
          break;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t sub_1B65DBA7C(uint64_t result, _DWORD *a2)
{
  LODWORD(v2) = *a2;
  if (*a2)
  {
    uint64_t v4 = result;
    unsigned int v5 = 0;
    do
    {
      uint64_t result = sub_1B65DB60C((uint64_t *)(v4 + 40 * v5));
      if (result)
      {
        LODWORD(v2) = v2 - 1;
        if (v5 < v2)
        {
          unint64_t v6 = v5;
          uint64_t v7 = v4 + 40 * v5;
          do
          {
            ++v6;
            long long v8 = *(_OWORD *)(v7 + 56);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)(v7 + 40);
            *(_OWORD *)(v7 + 16) = v8;
            *(void *)(v7 + 32) = *(void *)(v7 + 72);
            v7 += 40;
            unint64_t v2 = (*a2 - 1);
          }
          while (v6 < v2);
        }
        *a2 = v2;
      }
      else
      {
        ++v5;
      }
    }
    while (v5 < v2);
  }
  return result;
}

void sub_1B65DBB20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v101[0] = 0;
  uint64_t v4 = (void **)sub_1B65DC180(*(const CGPath **)(a2 + 24), v101, *(float *)(a2 + 4), *(float *)(a2 + 20));
  sub_1B65DBA7C((uint64_t)v4, v101);
  unsigned int v5 = v101[0];
  if (v101[0])
  {
    unsigned int v6 = 0;
    do
    {
      if (LODWORD(v4[5 * v6 + 1]) > 1)
      {
        ++v6;
      }
      else
      {
        free(v4[5 * v6]);
        unsigned int v13 = v101[0];
        uint64_t v14 = (v101[0] - 1);
        if (v6 < v14)
        {
          double v15 = &v4[5 * v6];
          uint64_t v16 = v14 - v6;
          do
          {
            long long v17 = *(_OWORD *)(v15 + 7);
            *(_OWORD *)double v15 = *(_OWORD *)(v15 + 5);
            *((_OWORD *)v15 + 1) = v17;
            v15[4] = v15[9];
            v15 += 5;
            --v16;
          }
          while (v16);
        }
        if (v13 <= 1)
        {
          sub_1B63F2F54(17, @"Assertion '%s' failed. realloc has an allocation size of 0 bytes", v7, v8, v9, v10, v11, v12, (uint64_t)"boundaryCount > 1");
          LODWORD(v14) = v101[0] - 1;
        }
        v101[0] = v14;
        uint64_t v4 = (void **)malloc_type_realloc(v4, 40 * v14, 0x10200406E8F4065uLL);
        unsigned int v5 = v101[0];
      }
    }
    while (v6 < v5);
  }
  sub_1B65DB398((uint64_t)v4, v5);
  if (!v101[0])
  {
    double v18 = 0;
LABEL_35:
    *(_DWORD *)(a1 + 48) = 0;
    double v91 = (_DWORD *)(a1 + 48);
LABEL_36:
    *(void *)(a1 + 40) = 0;
    uint64_t v40 = (uint64_t *)(a1 + 40);
    goto LABEL_37;
  }
  double v18 = malloc_type_calloc(v101[0], 0x10uLL, 0x1020040D5A9D86FuLL);
  unsigned int v19 = v101[0];
  if (!v101[0]) {
    goto LABEL_35;
  }
  unint64_t v20 = 0;
  uint64_t v21 = 1;
  do
  {
    v18[v21] = malloc_type_calloc(v19, 0x30uLL, 0x1020040586F8431uLL);
    ++v20;
    unsigned int v19 = v101[0];
    v21 += 2;
  }
  while (v20 < v101[0]);
  if (!v101[0]) {
    goto LABEL_35;
  }
  uint64_t v90 = v2;
  unint64_t v22 = 0;
  uint64_t v93 = v4;
  uint64_t v94 = v18;
  do
  {
    uint64_t v100 = 0;
    long long v98 = 0u;
    long long v99 = 0u;
    double v23 = &v4[5 * v22];
    long long v24 = *(_OWORD *)v23;
    long long v25 = *((_OWORD *)v23 + 1);
    uint64_t v100 = v23[4];
    long long v98 = v24;
    long long v99 = v25;
    uint64_t v26 = v19 - 2;
    if ((int)(v19 - 2) < 0)
    {
LABEL_25:
      uint64_t v32 = v18[1];
      unsigned int v33 = (*(_DWORD *)v18)++;
      uint64_t v34 = v32 + 48 * v33;
      *(_OWORD *)(v34 + 8) = v98;
      *(_OWORD *)(v34 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v99;
      *(void *)(v34 + 40) = v100;
    }
    else
    {
      while (1)
      {
        unint64_t v27 = LODWORD(v18[2 * v26]);
        if (v27) {
          break;
        }
LABEL_23:
        BOOL v31 = v26-- <= 0;
        double v18 = v94;
        if (v31) {
          goto LABEL_25;
        }
      }
      unint64_t v28 = 0;
      uint64_t v29 = v94[2 * v26 + 1];
      while (1)
      {
        long long v30 = *(_OWORD *)(v29 + 24);
        v96[0] = *(_OWORD *)(v29 + 8);
        v96[1] = v30;
        uint64_t v97 = *(void *)(v29 + 40);
        if (sub_1B65DB950((float *)v96, (uint64_t)&v98)) {
          break;
        }
        ++v28;
        v29 += 48;
        if (v28 >= v27) {
          goto LABEL_23;
        }
      }
      double v18 = v94;
      float v35 = (unsigned int *)((char *)v94 + (((v26 << 32) + 0x100000000) >> 28));
      uint64_t v36 = *((void *)v35 + 1) + 48 * *v35;
      *(void *)uint64_t v36 = v29;
      *(_OWORD *)(v36 + 8) = v98;
      *(_OWORD *)(v36 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v99;
      *(void *)(v36 + 40) = v100;
      ++*v35;
    }
    ++v22;
    unsigned int v19 = v101[0];
    uint64_t v4 = v93;
  }
  while (v22 < v101[0]);
  *(_DWORD *)(a1 + 48) = 0;
  double v91 = (_DWORD *)(a1 + 48);
  if (!v19)
  {
    uint64_t v2 = v90;
    goto LABEL_36;
  }
  LODWORD(v37) = 0;
  unsigned int v38 = 0;
  uint64_t v2 = v90;
  do
  {
    size_t v37 = (v37 + LODWORD(v18[2 * v38]));
    v38 += 2;
  }
  while (v38 < v19);
  *double v91 = v37;
  if (v37)
  {
    uint64_t v39 = malloc_type_calloc(v37, 0x20uLL, 0x10300409C64945DuLL);
    unsigned int v19 = v101[0];
    *(void *)(a1 + 40) = v39;
    uint64_t v40 = (uint64_t *)(a1 + 40);
    if (!v19) {
      goto LABEL_37;
    }
    uint64_t v41 = v39;
  }
  else
  {
    uint64_t v41 = 0;
    *(void *)(a1 + 40) = 0;
    uint64_t v40 = (uint64_t *)(a1 + 40);
  }
  unsigned int v65 = 0;
  do
  {
    uint64_t v66 = v65;
    uint64_t v95 = &v18[2 * v65];
    unsigned int v92 = v65;
    if (*v95)
    {
      unint64_t v67 = 0;
      unsigned int v68 = v65 | 1;
      __int16 v69 = v18;
      unsigned __int32 v70 = &v18[2 * (v66 | 1)];
      unsigned __int32 v71 = (uint64_t **)(v70 + 2);
      unsigned int v72 = &v69[2 * v66 + 1];
      do
      {
        if (v68 < v19 && (uint64_t v73 = *v70, v73))
        {
          unsigned int v74 = 0;
          unsigned int v75 = *v71;
          do
          {
            uint64_t v76 = *v75;
            v75 += 6;
            if (v76 == *v72 + 48 * v67) {
              ++v74;
            }
            --v73;
          }
          while (v73);
        }
        else
        {
          unsigned int v74 = 0;
        }
        size_t v77 = v74 + 1;
        void v41[2] = v77;
        __int16 v78 = malloc_type_calloc(v77, 0x28uLL, 0x10200406E8F4065uLL);
        *(void *)uint64_t v41 = v78;
        uint64_t v79 = *v72 + 48 * v67;
        long long v80 = *(_OWORD *)(v79 + 24);
        long long v81 = *(_OWORD *)(v79 + 8);
        v78[4] = *(void *)(v79 + 40);
        *(_OWORD *)__int16 v78 = v81;
        *((_OWORD *)v78 + 1) = v80;
        unsigned int v19 = v101[0];
        if (v68 < v101[0] && *v70)
        {
          uint64_t v82 = 0;
          unint64_t v83 = 0;
          do
          {
            if ((*v71)[v82] == *v72 + 48 * v67)
            {
              uint64_t v84 = *(void *)v41 + 40 * v74--;
              uint64_t v85 = &(*v71)[v82];
              long long v86 = *(_OWORD *)(v85 + 1);
              long long v87 = *(_OWORD *)(v85 + 3);
              *(void *)(v84 + 32) = v85[5];
              *(_OWORD *)uint64_t v84 = v86;
              *(_OWORD *)(v84 + 16) = v87;
            }
            ++v83;
            v82 += 6;
          }
          while (v83 < *v70);
        }
        v41 += 8;
        ++v67;
      }
      while (v67 < *v95);
    }
    unsigned int v65 = v92 + 2;
    double v18 = v94;
  }
  while (v92 + 2 < v19);
  if (v19)
  {
    unint64_t v88 = 0;
    uint64_t v89 = 1;
    do
    {
      free((void *)v94[v89]);
      ++v88;
      v89 += 2;
    }
    while (v88 < v101[0]);
  }
  uint64_t v2 = v90;
  uint64_t v4 = v93;
LABEL_37:
  free(v18);
  free(v4);
  unint64_t v42 = *v91;
  if (v42)
  {
    unint64_t v43 = 0;
    uint64_t v44 = *v40;
    do
    {
      if (*(_DWORD *)(v44 + 32 * v43 + 8))
      {
        uint64_t v45 = 0;
        unint64_t v46 = 0;
        do
        {
          int v47 = sub_1B65DB7C8((unsigned int *)(*(void *)(v44 + 32 * v43) + v45));
          if (v46) {
            int v48 = 2;
          }
          else {
            int v48 = 1;
          }
          if (v47 != v48) {
            sub_1B65DB844((_DWORD *)(*(void *)(*v40 + 32 * v43) + v45));
          }
          ++v46;
          uint64_t v44 = *v40;
          v45 += 40;
        }
        while (v46 < *(unsigned int *)(*v40 + 32 * v43 + 8));
        unint64_t v42 = *v91;
      }
      ++v43;
    }
    while (v43 < v42);
    if (v42)
    {
      uint64_t v49 = 0;
      uint64_t v50 = *v40;
      do
      {
        uint64_t v51 = *(unsigned int *)(v50 + 32 * v49 + 8);
        if (v51)
        {
          uint64_t v52 = 0;
          uint64_t v53 = *(void *)(v50 + 32 * v49);
          do
          {
            uint64_t v54 = *(unsigned int *)(v53 + 40 * v52 + 8);
            if (v54)
            {
              unsigned __int32 v55 = (void *)(v53 + 40 * v52);
              uint64_t v57 = *v55;
              unsigned int v56 = (_DWORD *)v55 + 3;
              unsigned int v58 = (unsigned char *)(v57 + 68);
              do
              {
                if (*v58)
                {
                  if (*(double *)(v58 - 52) == *(double *)(v58 - 36) && *(double *)(v58 - 44) == *(double *)(v58 - 28))
                  {
                    *unsigned int v58 = 0;
                    --*v56;
                  }
                }
                v58 += 80;
                --v54;
              }
              while (v54);
            }
            ++v52;
          }
          while (v52 != v51);
        }
        ++v49;
      }
      while (v49 != v42);
      uint64_t v60 = 0;
      unint64_t v61 = 0;
      do
      {
        __int16 v62 = (long long *)(*v40 + v60);
        double v63 = *(float *)(v2 + 12);
        long long v64 = v62[1];
        long long v98 = *v62;
        long long v99 = v64;
        sub_1B65F13BC(&v98, v63);
        ++v61;
        v60 += 32;
      }
      while (v61 < *v91);
    }
  }
}

void *sub_1B65DC180(const CGPath *a1, _DWORD *a2, float a3, float a4)
{
  *a2 = 0;
  CGPathApply(a1, a2, (CGPathApplierFunction)sub_1B65DCC10);
  uint64_t v8 = malloc_type_calloc(*a2, 0x28uLL, 0x10200406E8F4065uLL);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  *(float *)uint64_t v10 = a3;
  *(float *)&v10[1] = a4;
  uint64_t v11 = v8;
  CGPathApply(a1, v10, (CGPathApplierFunction)sub_1B65DCC2C);
  return v8;
}

void sub_1B65DC220(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v2 = 0;
    while (1)
    {
      unsigned int v18 = 0;
      uint64_t v3 = (_OWORD *)(*(void *)(a1 + 40) + 32 * v2);
      long long v4 = v3[1];
      v17[0] = *v3;
      v17[1] = v4;
      unsigned int v5 = (uint64_t *)sub_1B65DECE8((uint64_t)v17, &v18);
      unsigned int v6 = v5;
      if (v18) {
        break;
      }
      if (v5) {
        goto LABEL_8;
      }
LABEL_9:
      if (++v2 >= (unint64_t)*(unsigned int *)(a1 + 48)) {
        return;
      }
    }
    unint64_t v7 = 0;
    uint64_t v8 = (unsigned int *)v3 + 6;
    uint64_t v9 = (void **)(v3 + 1);
    uint64_t v10 = v5 + 2;
    do
    {
      unsigned int v11 = *v8 + 1;
      *uint64_t v8 = v11;
      uint64_t v12 = malloc_type_realloc(*v9, 4 * v11, 0x100004052888210uLL);
      *uint64_t v9 = v12;
      *((_DWORD *)v12 + *v8 - 1) = *(_DWORD *)(a1 + 24);
      unsigned int v13 = *(_DWORD *)(a1 + 24) + 3;
      *(_DWORD *)(a1 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
      uint64_t v14 = malloc_type_realloc(*(void **)(a1 + 32), 8 * v13, 0x2004093837F09uLL);
      *(void *)(a1 + 32) = v14;
      int v15 = *(_DWORD *)(a1 + 24);
      v14[v15 - 3] = *(v10 - 2);
      *(void *)(*(void *)(a1 + 32) + 8 * (v15 - 2)) = *(v10 - 1);
      uint64_t v16 = *v10;
      v10 += 7;
      *(void *)(*(void *)(a1 + 32) + 8 * (v15 - 1)) = v16;
      ++v7;
    }
    while (v7 < v18);
LABEL_8:
    free(v6);
    goto LABEL_9;
  }
}

void sub_1B65DC370(uint64_t a1, int a2, double a3, double a4, long double a5, long double a6)
{
  int v10 = *(_DWORD *)(a1 + 8);
  unsigned int v11 = *(double **)a1;
  if (!v10
    || (unsigned int v12 = v10 - 1,
        double v13 = hypot(v11[10 * v12] - a3, v11[10 * v12 + 1] - a4),
        double v14 = hypot(*v11 - a3, v11[1] - a4),
        v13 >= 0.01)
    && v14 >= 0.01)
  {
    int v15 = (char *)malloc_type_realloc(v11, 80 * (v10 + 1), 0x1000040B1CE3FD8uLL);
    *(void *)a1 = v15;
    int v16 = *(_DWORD *)(a1 + 8);
    long long v17 = (double *)&v15[80 * v16];
    v17[6] = a3;
    v17[7] = a4;
    *(_OWORD *)long long v17 = *((_OWORD *)v17 + 3);
    *((_DWORD *)v17 + 18) = a2;
    *((unsigned char *)v17 + 68) = a2 != 3;
    *((_DWORD *)v17 + 16) = 0;
    int v18 = *(_DWORD *)(a1 + 8);
    if (v18)
    {
      unsigned int v19 = v15;
      v20.f64[0] = a3;
      v20.f64[1] = a4;
      *(float32x2_t *)&v20.f64[0] = vcvt_f32_f64(v20);
      float32x4_t v21 = *(float32x4_t *)(a1 + 16);
      float64x2_t v22 = vcvtq_f64_f32(*(float32x2_t *)v21.f32);
      float64x2_t v23 = vcvt_hight_f64_f32(v21);
      float64x2_t v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
      float64x2_t v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
      *(int8x16_t *)(a1 + 16) = vbslq_s8((int8x16_t)vmovl_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v22, v24), (int32x4_t)vcgtq_f64(v23, v25)))), vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v24, v22), (int32x4_t)vcgtq_f64(v25, v23))))), (int8x16_t)vzip1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v21);
      uint64_t v26 = *(double **)a1;
      if (a2)
      {
        unint64_t v27 = (long double *)&v15[80 * v16];
        long double v28 = hypot(a5, a6);
        v27[2] = a5 / v28;
        v27[3] = a6 / v28;
        if (a2 == 3) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v32 = &v26[10 * (v18 - 1)];
        long double v33 = v32[1] - a4;
        long double v34 = a3 - *v32;
        long double v35 = hypot(v33, v34);
        long double v36 = v33 / v35;
        long double v37 = v34 / v35;
        void v32[4] = v36;
        v32[5] = v37;
        unsigned int v38 = &v19[80 * v16];
        *((long double *)v38 + 2) = v36;
        *((long double *)v38 + 3) = v37;
      }
      long double v39 = a4 - v26[1];
      long double v40 = *v26 - a3;
      long double v41 = hypot(v39, v40);
      v26[2] = v39 / v41;
      v26[3] = v40 / v41;
      *(_OWORD *)&v19[80 * v16 + 32] = *((_OWORD *)v26 + 1);
      int v18 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      float v30 = a3;
      *(float *)(a1 + 16) = v30;
      *(float *)(a1 + 20) = v30;
      float v31 = a4;
      *(float *)(a1 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v31;
      *(float *)(a1 + 28) = v31;
    }
LABEL_14:
    if (a2 == 3) {
      int v42 = 1;
    }
    else {
      int v42 = 2;
    }
    int v43 = v42 + *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v18 + 1;
    *(_DWORD *)(a1 + 12) = v43;
    return;
  }
  if (a2 == 1)
  {
    uint64_t v44 = &v11[10 * v12];
    long double v45 = hypot(a5, a6);
    v44[4] = a5 / v45;
    v44[5] = a6 / v45;
  }
  else if (a2 == 2)
  {
    long double v29 = hypot(a5, a6);
    v11[2] = a5 / v29;
    v11[3] = a6 / v29;
  }
}

void sub_1B65DC610(uint64_t a1, int a2, double a3, double a4, double a5)
{
  unint64_t v7 = *(double **)a1;
  uint64_t v8 = (double *)(*(void *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  double v9 = *v8;
  double v10 = v8[1];
  if (a2)
  {
    double v12 = *v7;
    double v11 = v7[1];
    int v13 = 1;
  }
  else
  {
    double v11 = a4;
    double v12 = a3;
    double v14 = v7[1];
    BOOL v15 = a3 == *v7;
    int v13 = v11 == v14 && v15;
  }
  double v16 = v11 - v10;
  double v17 = hypot(v12 - v9, v11 - v10);
  if (v17 <= a5)
  {
    if ((v13 & 1) == 0)
    {
      long double v25 = *MEMORY[0x1E4F1DAD8];
      long double v26 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
      sub_1B65DC370(a1, 0, v12, v11, v25, v26);
    }
  }
  else
  {
    unsigned int v18 = vcvtpd_u64_f64(v17 / a5);
    unsigned int v19 = v18 - v13;
    if (v19)
    {
      double v20 = (v12 - v9) / (double)v18;
      long double v21 = *MEMORY[0x1E4F1DAD8];
      long double v22 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
      unsigned int v23 = 1;
      double v24 = v16 / (double)v18;
      do
      {
        sub_1B65DC370(a1, 0, v9 + (double)v23 * v20, v10 + (double)v23 * v24, v21, v22);
        ++v23;
      }
      while (v23 <= v19);
    }
  }
}

void sub_1B65DC768(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, float a8)
{
  double v9 = (double *)(*(void *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  double v10 = *v9;
  double v11 = v9[1];
  double v12 = a2 - *v9;
  double v13 = a4 - a2 - v12;
  double v44 = a6 - a4;
  double v14 = a6 - a4 - (a4 - a2);
  double v15 = v14 - v13;
  double v16 = a5 - a3 - (a3 - v11);
  double v17 = a7 - a5 - (a5 - a3);
  double v18 = v17 - v16;
  double v19 = v17 * v17 + v14 * v14;
  if (v16 * v16 + v13 * v13 > v19) {
    double v19 = v16 * v16 + v13 * v13;
  }
  double v20 = v19 * 9.0;
  double v21 = (float)(a8 * a8);
  double v22 = v15 * 6.0;
  double v23 = (v13 + v15) * 6.0;
  double v24 = v15 + (v12 + v13) * 3.0;
  double v25 = v18 * 6.0;
  double v26 = (v16 + v18) * 6.0;
  double v27 = v18 + (a3 - v11 + v16) * 3.0;
  double v28 = (a6 + v10 - a2 - a4) * 3.0;
  double v29 = v11 - a3;
  double v30 = (a7 + v11 - a3 - a5) * 3.0;
  double v31 = v20 * 0.0625;
  if (v20 * 0.0625 <= v21)
  {
    int v37 = 0;
    double v50 = v18 * 6.0;
    double v51 = v15 * 6.0;
    double v48 = v18 * 6.0;
    double v49 = v15 * 6.0;
  }
  else
  {
    unsigned int v32 = 1;
    double v33 = v18 * 6.0;
    double v34 = v15 * 6.0;
    do
    {
      double v22 = v22 * 0.125;
      double v23 = v23 * 0.25 - v22;
      double v24 = v24 * 0.5 - v23 * 0.5;
      double v25 = v25 * 0.125;
      double v26 = v26 * 0.25 - v25;
      double v27 = v27 * 0.5 - v26 * 0.5;
      double v34 = v34 * 0.25;
      double v28 = v28 * 0.5 - v34 * 0.5;
      double v33 = v33 * 0.25;
      double v30 = v30 * 0.5 - v33 * 0.5;
      int v35 = 2 * v32;
      double v31 = v31 * 0.0625;
      if (v31 <= v21) {
        break;
      }
      BOOL v36 = v32 > 0x8000;
      v32 *= 2;
    }
    while (!v36);
    double v48 = v33;
    double v49 = v34;
    double v50 = v25;
    double v51 = v22;
    int v37 = v35 - 1;
  }
  double v52 = v12 * 3.0;
  double v53 = v29 * 3.0;
  sub_1B65DC370(a1, 1, v10, v11, v29 * 3.0, v12 * 3.0);
  double v39 = v50;
  double v38 = v51;
  double v40 = v48;
  for (double i = v49; v37; --v37)
  {
    double v10 = v24 + v10;
    long double v42 = v53 - v30;
    double v30 = v40 + v30;
    double v24 = v23 + v24;
    double v23 = v38 + v23;
    double v11 = v27 + v11;
    long double v43 = v28 + v52;
    double v28 = i + v28;
    double v27 = v27 + v26;
    double v26 = v39 + v26;
    double v52 = v43;
    double v53 = v42;
    sub_1B65DC370(a1, 3, v10, v11, v42, v43);
    double v40 = v48;
    double i = v49;
    double v39 = v50;
    double v38 = v51;
  }

  sub_1B65DC370(a1, 2, a6, a7, (a5 - a7) * 3.0, v44 * 3.0);
}

void sub_1B65DC9FC(uint64_t a1, double a2, double a3, double a4, double a5, float a6)
{
  unint64_t v7 = (double *)(*(void *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  double v9 = *v7;
  double v8 = v7[1];
  double v10 = v8 - a3;
  double v11 = ((a5 + v8 - a3 - a3) * (a5 + v8 - a3 - a3) + (a4 + *v7 - a2 - a2) * (a4 + *v7 - a2 - a2)) * 27.0 * 0.015625;
  double v12 = (float)(a6 * a6);
  double v13 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
  double v14 = a4 - *v7;
  double v15 = a5 + v8 + a3 * -2.0;
  double v16 = v15 + v15;
  double v17 = a5 - v8;
  if (v11 <= v12)
  {
    int v23 = 0;
    double v32 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
    double v33 = v32;
    double v19 = v15 + v15;
  }
  else
  {
    unsigned int v18 = 1;
    double v19 = v15 + v15;
    double v20 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
    do
    {
      double v13 = v13 * 0.25;
      double v14 = v14 * 0.5 - v13 * 0.5;
      double v16 = v16 * 0.25;
      double v17 = v17 * 0.5 - v16 * 0.5;
      double v20 = v20 * 0.5;
      double v19 = v19 * 0.5;
      double v11 = v11 * 0.03125;
      int v21 = 2 * v18;
      if (v11 <= v12) {
        break;
      }
      BOOL v22 = v18 > 0x8000;
      v18 *= 2;
    }
    while (!v22);
    double v32 = v20;
    double v33 = v13;
    int v23 = v21 - 1;
  }
  double v24 = v10 + v10;
  double v25 = a2 - v9 + a2 - v9;
  sub_1B65DC370(a1, 1, v9, v8, v10 + v10, v25);
  double v27 = v32;
  for (double i = v33; v23; --v23)
  {
    double v9 = v14 + v9;
    double v24 = v24 - v19;
    double v8 = v17 + v8;
    double v25 = v27 + v25;
    double v38 = i + v14;
    double v39 = v16 + v17;
    double v28 = v16;
    double v29 = v19;
    double v30 = i;
    double v31 = v27;
    sub_1B65DC370(a1, 3, v9, v8, v24, v25);
    double v27 = v31;
    double i = v30;
    double v19 = v29;
    double v16 = v28;
    double v14 = v38;
    double v17 = v39;
  }

  sub_1B65DC370(a1, 2, a4, a5, a3 - a5 + a3 - a5, a4 - a2 + a4 - a2);
}

_DWORD *sub_1B65DCC10(_DWORD *result, _DWORD *a2)
{
  if (!*a2) {
    ++*result;
  }
  return result;
}

void sub_1B65DCC2C(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      uint64_t v2 = *(void *)(a1 + 8);
      unsigned int v3 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3 + 1;
      uint64_t v4 = v2 + 40 * v3;
      *(void *)(a1 + 16) = v4;
      sub_1B65DC370(v4, 0, **(double **)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 8), *MEMORY[0x1E4F1DAD8], *(long double *)(MEMORY[0x1E4F1DAD8] + 8));
      break;
    case 1:
      sub_1B65DC610(*(void *)(a1 + 16), 0, **(double **)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 8), *(float *)(a1 + 4));
      break;
    case 2:
      sub_1B65DC9FC(*(void *)(a1 + 16), **(double **)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 8), *(double *)(*(void *)(a2 + 8) + 16), *(double *)(*(void *)(a2 + 8) + 24), *(float *)a1);
      break;
    case 3:
      unsigned int v5 = *(double **)(a2 + 8);
      sub_1B65DC768(*(void *)(a1 + 16), *v5, v5[1], v5[2], v5[3], v5[4], v5[5], *(float *)a1);
      break;
    case 4:
      sub_1B65DC610(*(void *)(a1 + 16), 1, *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8), *(float *)(a1 + 4));
      break;
    default:
      return;
  }
}

void sub_1B65DCD2C(void **a1)
{
  unint64_t v1 = *a1;
  if (v1) {
    free(v1);
  }
}

void **sub_1B65DCD3C(void **result, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = result;
  unsigned int v6 = *(_DWORD *)result;
  if (*(_DWORD *)result == *((_DWORD *)result + 1))
  {
    unsigned int v7 = 2 * v6;
    *((_DWORD *)result + 1) = v7;
    result[1] = malloc_type_realloc(result[1], 8 * v7, 0x2004093837F09uLL);
    uint64_t result = (void **)malloc_type_realloc(v5[2], 8 * *((unsigned int *)v5 + 1), 0x2004093837F09uLL);
    v5[2] = result;
    unsigned int v6 = *(_DWORD *)v5;
  }
  *((void *)v5[1] + v6) = a2;
  *((void *)v5[2] + v6) = a3;
  *(_DWORD *)unsigned int v5 = v6 + 1;
  return result;
}

void *sub_1B65DCDE0(int *a1, uint64_t a2)
{
  int v4 = *a1;
  int v5 = a1[1];
  if (v5 == *a1)
  {
    a1[1] = 2 * v5;
    uint64_t result = malloc_type_realloc(*((void **)a1 + 1), 8 * (2 * v5), 0x2004093837F09uLL);
    *((void *)a1 + 1) = result;
    int v4 = *a1;
  }
  else
  {
    uint64_t result = (void *)*((void *)a1 + 1);
  }
  *a1 = v4 + 1;
  result[v4] = a2;
  return result;
}

uint64_t sub_1B65DCE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 32);
  if (v9 >= *(_DWORD *)(a1 + 36))
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Cannot produce any additional triangle.", a3, a4, a5, a6, a7, a8, (uint64_t)"triangulation->triangleCount < triangulation->maxTriangleCount");
    unsigned int v9 = *(_DWORD *)(a1 + 32);
  }
  uint64_t v10 = *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 32) = v9 + 1;
  uint64_t result = v10 + 56 * v9;
  *(unsigned char *)(result + 51) = 0;
  return result;
}

uint64_t sub_1B65DCEBC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 32);
  unsigned int v3 = v2 - 1;
  if (v2 - 1 < 0) {
    return 2;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  for (double i = (void *)(v4 + 56 * v3); ; i -= 7)
  {
    if (v4)
    {
      uint64_t v6 = v4 + 56 * v3;
      if (*i == a1 || i[1] == a1) {
        return v6;
      }
      if (i[2] == a1) {
        break;
      }
    }
    --v3;
    if (--v2 <= 0) {
      return 2;
    }
  }
  return (uint64_t)i;
}

uint64_t sub_1B65DCF28(float64x2_t *a1, double **a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 32);
  int v4 = *(_DWORD *)(a3 + 32);
  while (v4)
  {
    uint64_t v5 = 0;
    char v6 = 0;
    --v4;
    float64x2_t v7 = *a1;
    do
    {
      if (v5 == 2) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = v5 + 1;
      }
      int8x16_t v9 = (int8x16_t)vsubq_f64(*(float64x2_t *)a2[v5], v7);
      float64x2_t v10 = vmulq_f64(vsubq_f64(*(float64x2_t *)a2[v8], v7), (float64x2_t)vextq_s8(v9, v9, 8uLL));
      if (vmovn_s64(vcgtq_f64(v10, (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1))).u8[0])
      {
        a2 = (double **)a2[v5 + 3];
        char v6 = 1;
      }
      ++v5;
    }
    while (v5 != 3);
    if ((v6 & 1) == 0) {
      return (uint64_t)a2;
    }
  }
  if (!v3) {
    return 2;
  }
  a2 = *(double ***)(a3 + 16);
  double v11 = a1->f64[0];
  double v12 = a1->f64[1];
  double v13 = -a1->f64[0];
  while (1)
  {
    double v14 = a2[1];
    double v15 = a2[2];
    double v16 = **a2;
    double v17 = (*a2)[1];
    double v18 = v14[1];
    float v19 = fabs(v16 * v18 + v11 * v17 + *v14 * v12 + v13 * v18 - *v14 * v17 - v16 * v12) * 0.5;
    double v20 = v15[1];
    double v21 = *v14 * v20;
    float v22 = fabs(v21 + v11 * v18 + *v15 * v12 + v13 * v20 - *v15 * v18 - *v14 * v12) * 0.5;
    float v23 = fabs(v17 * *v15 + v11 * v20 + v16 * v12 + v13 * v17 - v16 * v20 - *v15 * v12) * 0.5;
    *(float *)&double v16 = fabs(v21 + v16 * v18 + *v15 * v17 - v16 * v20 - *v15 * v18 - *v14 * v17) * 0.5;
    if (vabds_f32((float)(*(float *)&v16 - v23) - v22, v19) < 0.001) {
      break;
    }
    a2 += 7;
    if (!--v3) {
      return 2;
    }
  }
  return (uint64_t)a2;
}

uint64_t sub_1B65DD08C(uint64_t a1, double *a2, double *a3, double ***a4)
{
  uint64_t v8 = *(double **)a1;
  if (*(double **)a1 == a3 || (int8x16_t v9 = *(double **)(a1 + 8), v9 == a3) || *(double **)(a1 + 16) == a3)
  {
    double v12 = *(double ***)(a1 + 24);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3)) {
      goto LABEL_41;
    }
    double v12 = *(double ***)(a1 + 32);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3)) {
      goto LABEL_41;
    }
    double v12 = *(double ***)(a1 + 40);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3)) {
      goto LABEL_41;
    }
  }
  else
  {
    BOOL v10 = v8 == a2 || v9 == a2;
    if (!v10 && sub_1B65DB740(*a2, a2[1], *a3, a3[1], *v8, v8[1], *v9, v9[1]))
    {
      double v11 = (double ***)(a1 + 24);
LABEL_40:
      double v12 = *v11;
LABEL_41:
      *a4 = v12;
      return 1;
    }
    double v13 = *(double **)(a1 + 8);
    if (v13 != a2)
    {
      double v14 = *(double **)(a1 + 16);
      if (v14 != a2)
      {
        if (sub_1B65DB740(*a2, a2[1], *a3, a3[1], *v13, v13[1], *v14, v14[1]))
        {
          double v11 = (double ***)(a1 + 32);
          goto LABEL_40;
        }
      }
    }
    double v15 = *(double **)(a1 + 16);
    if (v15 != a2 && *(double **)a1 != a2)
    {
      uint64_t result = sub_1B65DB740(*a2, a2[1], *a3, a3[1], *v15, v15[1], **(double **)a1, *(double *)(*(void *)a1 + 8));
      if (!result) {
        return result;
      }
      double v11 = (double ***)(a1 + 40);
      goto LABEL_40;
    }
  }
  return 0;
}

BOOL sub_1B65DD278(double *a1, double *a2, double *a3, double *a4)
{
  double v4 = a1[1];
  double v5 = a2[1];
  double v6 = a3[1];
  double v7 = v4 * v4 + *a1 * *a1;
  double v8 = v5 * v5 + *a2 * *a2;
  double v9 = v6 * v6 + *a3 * *a3;
  double v10 = v5 - v6;
  double v11 = *a2 * (v6 - v4) + *a1 * (v5 - v6);
  double v12 = v4 - v5;
  double v13 = v11 + *a3 * v12 + v11 + *a3 * v12;
  double v14 = (v8 * (v6 - v4) + v7 * v10 + v9 * v12) / v13;
  double v15 = *a2 - *a3;
  double v16 = *a1 - *a2;
  double v17 = -(v8 * (*a3 - *a1) + v7 * v15 + v9 * v16) / v13;
  double v18 = sqrt(((v4 - v6) * (v4 - v6) + (*a1 - *a3) * (*a1 - *a3)) * ((v12 * v12 + v16 * v16) * (v10 * v10 + v15 * v15)));
  double v19 = fabs(v13);
  return (v17 - a4[1]) * (v17 - a4[1]) + (v14 - *a4) * (v14 - *a4) < v18 / v19 * (v18 / v19);
}

uint64_t sub_1B65DD33C(uint64_t a1, double *a2, _DWORD *a3, _DWORD *a4)
{
  double v4 = *(double **)(a1 + 8);
  double v5 = **(double **)a1;
  double v6 = *(double *)(*(void *)a1 + 8);
  double v7 = v4[1];
  double v8 = *a2;
  double v9 = a2[1];
  if ((*v4 - v5) * (v9 - v6) - (v7 - v6) * (*a2 - v5) == 0.0)
  {
    uint64_t v10 = 0;
    *a3 = 0;
    do
    {
      if (*(void *)(*(void *)(a1 + 24) + 24 + 8 * v10) == a1) {
        break;
      }
      ++v10;
    }
    while (v10 != 3);
LABEL_15:
    *a4 = v10;
    return 1;
  }
  double v11 = *(double **)(a1 + 16);
  double v12 = v11[1];
  if ((*v11 - *v4) * (v9 - v7) - (v12 - v7) * (v8 - *v4) == 0.0)
  {
    uint64_t v10 = 0;
    *a3 = 1;
    do
    {
      if (*(void *)(*(void *)(a1 + 32) + 24 + 8 * v10) == a1) {
        break;
      }
      ++v10;
    }
    while (v10 != 3);
    goto LABEL_15;
  }
  if ((v5 - *v11) * (v9 - v12) - (v6 - v12) * (v8 - *v11) == 0.0)
  {
    uint64_t v10 = 0;
    *a3 = 2;
    do
    {
      if (*(void *)(*(void *)(a1 + 40) + 24 + 8 * v10) == a1) {
        break;
      }
      ++v10;
    }
    while (v10 != 3);
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_1B65DD454(int *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8 = (double *)a3;
  double v11 = (double **)*((void *)a1 + 1);
  double v12 = *v11;
  int v13 = *a1;
  uint64_t v14 = (*a1 - 1);
  if (v14 <= 1)
  {
    int v15 = 0;
    double v19 = (uint64_t **)(a1 + 4);
    double v20 = (uint64_t *)*((void *)a1 + 2);
    uint64_t v21 = *v20;
    int v22 = *(_DWORD *)a4;
    goto LABEL_86;
  }
  LODWORD(v111) = *a1;
  HIDWORD(v111) = a5;
  uint64_t v112 = a4;
  int v15 = 0;
  uint64_t v16 = 1;
  double v17 = *v11;
  do
  {
    double v18 = v11[v16];
    if (sub_1B65DD278(a2, v8, v17, v18))
    {
      int v15 = v16;
      double v17 = v18;
    }
    ++v16;
  }
  while (v14 != v16);
  double v19 = (uint64_t **)(a1 + 4);
  double v20 = (uint64_t *)*((void *)a1 + 2);
  uint64_t v21 = *v20;
  a4 = v112;
  int v22 = *(_DWORD *)v112;
  if (v15 < 1)
  {
    double v12 = v17;
    a5 = HIDWORD(v111);
LABEL_85:
    int v13 = v111;
LABEL_86:
    uint64_t v50 = v20[v14];
    if (v13 - 3 >= v15)
    {
      double v52 = &v11[v13 - 2];
      uint64_t v53 = v13 - 3;
      while (1)
      {
        uint64_t v54 = *v52;
        uint64_t v51 = *(void *)(*(void *)(a4 + 8) + 8 * --v22);
        *(void *)uint64_t v51 = v8;
        if (a5)
        {
          *(void *)(v51 + 8) = v54;
          unsigned __int32 v55 = v54;
          uint64_t v54 = *(double **)(*((void *)a1 + 1) + 8 * v53);
          uint64_t v56 = 1;
        }
        else
        {
          unsigned __int32 v55 = *(double **)(*((void *)a1 + 1) + 8 * v53);
          *(void *)(v51 + 8) = v55;
          uint64_t v56 = v50;
          uint64_t v50 = 1;
        }
        *(void *)(v51 + 16) = v54;
        *(void *)(v51 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v50;
        uint64_t v57 = (uint64_t *)(*v19)[v53 + 1];
        *(void *)(v51 + 32) = v57;
        *(void *)(v51 + 40) = v56;
        if (a5)
        {
          if (v50)
          {
            a6 = *(void *)v50;
            unsigned int v58 = *(double **)(v50 + 8);
            if (*(double **)v50 == v55 && v58 == v8)
            {
              unsigned int v63 = 0;
              if (!v57) {
                goto LABEL_194;
              }
            }
            else
            {
              uint64_t v60 = *(double **)(v50 + 16);
              if (v60 == v55 && a6 == (void)v8) {
                a6 = 2;
              }
              else {
                a6 = 0xFFFFFFFFLL;
              }
              if (v58 == v55 && v60 == v8) {
                unsigned int v63 = 1;
              }
              else {
                unsigned int v63 = a6;
              }
              if (!v57) {
                goto LABEL_194;
              }
            }
          }
          else
          {
            unsigned int v63 = -1;
            if (!v57) {
              goto LABEL_194;
            }
          }
          a7 = *v57;
          a3 = v57[1];
          if ((double *)*v57 == v54 && a3 == (void)v55)
          {
            unsigned int v69 = 0;
          }
          else
          {
            a6 = v57[2];
            if ((double *)a6 == v54 && a7 == (void)v55) {
              a7 = 2;
            }
            else {
              a7 = 0xFFFFFFFFLL;
            }
            if ((double *)a3 == v54 && a6 == (void)v55) {
              unsigned int v69 = 1;
            }
            else {
              unsigned int v69 = a7;
            }
          }
          if (v63 == -1 || v69 == -1) {
            goto LABEL_194;
          }
          v57[v69 + 3] = v51;
          *(void *)(*(void *)(v51 + 24) + 8 * v63 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v51;
          uint64_t v70 = *(void *)(v51 + 32);
          *(unsigned char *)(v51 + 48) = *(unsigned char *)(*(void *)(v51 + 24) + v63 + 48);
          *(_WORD *)(v51 + 49) = *(unsigned __int8 *)(v70 + v69 + 48);
        }
        else
        {
          if (v56)
          {
            long long v64 = *(double **)v56;
            a6 = *(void *)(v56 + 8);
            if (*(double **)v56 == v8 && (double *)a6 == v54)
            {
              unsigned int v65 = 0;
              if (!v57) {
                goto LABEL_194;
              }
            }
            else
            {
              unsigned __int32 v71 = *(double **)(v56 + 16);
              if ((double *)a6 == v8 && v71 == v54)
              {
                unsigned int v65 = 1;
                if (!v57) {
                  goto LABEL_194;
                }
              }
              else
              {
                if (v71 == v8 && v64 == v54) {
                  unsigned int v65 = 2;
                }
                else {
                  unsigned int v65 = -1;
                }
                if (!v57) {
                  goto LABEL_194;
                }
              }
            }
          }
          else
          {
            unsigned int v65 = -1;
            if (!v57) {
              goto LABEL_194;
            }
          }
          a3 = *v57;
          a7 = v57[1];
          if ((double *)*v57 == v54 && a7 == (void)v55)
          {
            unsigned int v76 = 0;
          }
          else
          {
            a6 = v57[2];
            if ((double *)a7 == v54 && a6 == (void)v55)
            {
              unsigned int v76 = 1;
            }
            else if ((double *)a6 == v54 && a3 == (void)v55)
            {
              unsigned int v76 = 2;
            }
            else
            {
              unsigned int v76 = -1;
            }
          }
          if (v65 == -1 || v76 == -1) {
            goto LABEL_194;
          }
          v57[v76 + 3] = v51;
          *(void *)(*(void *)(v51 + 40) + 8 * v65 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v51;
          uint64_t v77 = *(void *)(v51 + 32);
          *(unsigned char *)(v51 + 50) = *(unsigned char *)(*(void *)(v51 + 40) + v65 + 48);
          *(unsigned char *)(v51 + 49) = *(unsigned char *)(v77 + v76 + 48);
          *(unsigned char *)(v51 + 48) = 0;
        }
        double v52 = (double **)(*((void *)a1 + 1) + 8 * v53);
        uint64_t v50 = v51;
        if (v53-- <= v15) {
          goto LABEL_174;
        }
      }
    }
    uint64_t v51 = v20[v14];
LABEL_174:
    uint64_t v79 = *(void *)(a4 + 8);
    unsigned int v80 = v22 - 1;
    *(_DWORD *)a4 = v80;
    uint64_t v81 = *(void *)(v79 + 8 * v80);
    *(void *)uint64_t v81 = a2;
    if (a5)
    {
      *(void *)(v81 + 8) = v8;
      *(void *)(v81 + 16) = v12;
      if (v21)
      {
        uint64_t v82 = *(double **)(v21 + 8);
        if (*(double **)v21 == a2 && v82 == v12)
        {
          unsigned int v88 = 0;
          if (!v51) {
            goto LABEL_256;
          }
        }
        else
        {
          uint64_t v84 = *(double **)(v21 + 16);
          if (v84 == a2 && *(void *)v21 == (void)v12) {
            int v86 = 2;
          }
          else {
            int v86 = -1;
          }
          if (v82 == a2 && v84 == v12) {
            unsigned int v88 = 1;
          }
          else {
            unsigned int v88 = v86;
          }
          if (!v51) {
            goto LABEL_256;
          }
        }
      }
      else
      {
        unsigned int v88 = -1;
        if (!v51) {
          goto LABEL_256;
        }
      }
      uint64_t v96 = *(double **)(v51 + 8);
      if (*(double **)v51 == v12 && v96 == v8)
      {
        unsigned int v102 = 0;
      }
      else
      {
        long long v98 = *(double **)(v51 + 16);
        if (v98 == v12 && *(void *)v51 == (void)v8) {
          int v100 = 2;
        }
        else {
          int v100 = -1;
        }
        if (v96 == v12 && v98 == v8) {
          unsigned int v102 = 1;
        }
        else {
          unsigned int v102 = v100;
        }
      }
      if (v88 != -1 && v102 != -1)
      {
        *(void *)(v21 + 8 * v88 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v81;
        *(void *)(v51 + 8 * v102 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v81;
        *(void *)(v81 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
        *(void *)(v81 + 32) = v51;
        *(void *)(v81 + 40) = v21;
        *(unsigned char *)(v81 + 48) = 1;
        *(unsigned char *)(v81 + 49) = *(unsigned char *)(v51 + v102 + 48);
        *(unsigned char *)(v81 + 50) = *(unsigned char *)(v21 + v88 + 48);
        return v81;
      }
LABEL_256:
      *(void *)(v81 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      *(void *)(v81 + 32) = 1;
      *(void *)(v81 + 40) = 1;
      return v81;
    }
    *(void *)(v81 + 8) = v12;
    *(void *)(v81 + 16) = v8;
    if (v21)
    {
      uint64_t v89 = *(double **)(v21 + 8);
      if (*(double **)v21 == v12 && v89 == a2)
      {
        unsigned int v95 = 0;
        if (!v51) {
          goto LABEL_261;
        }
      }
      else
      {
        double v91 = *(double **)(v21 + 16);
        if (v91 == v12 && *(void *)v21 == (void)a2) {
          int v93 = 2;
        }
        else {
          int v93 = -1;
        }
        if (v89 == v12 && v91 == a2) {
          unsigned int v95 = 1;
        }
        else {
          unsigned int v95 = v93;
        }
        if (!v51) {
          goto LABEL_261;
        }
      }
    }
    else
    {
      unsigned int v95 = -1;
      if (!v51) {
        goto LABEL_261;
      }
    }
    uint64_t v103 = *(double **)(v51 + 8);
    if (*(double **)v51 == v8 && v103 == v12)
    {
      unsigned int v109 = 0;
    }
    else
    {
      uint64_t v105 = *(double **)(v51 + 16);
      if (v105 == v8 && *(void *)v51 == (void)v12) {
        int v107 = 2;
      }
      else {
        int v107 = -1;
      }
      if (v103 == v8 && v105 == v12) {
        unsigned int v109 = 1;
      }
      else {
        unsigned int v109 = v107;
      }
    }
    if (v95 <= 2 && v109 < 3)
    {
      *(void *)(v21 + 8 * v95 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v81;
      *(void *)(v51 + 8 * v109 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v81;
      *(void *)(v81 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v21;
      *(void *)(v81 + 32) = v51;
      *(void *)(v81 + 40) = 1;
      *(unsigned char *)(v81 + 48) = *(unsigned char *)(v21 + v95 + 48);
      *(unsigned char *)(v81 + 49) = *(unsigned char *)(v51 + v109 + 48);
      *(unsigned char *)(v81 + 50) = 1;
      return v81;
    }
LABEL_261:
    sub_1B63F2F54(16, @"Error: CFXShapeConnectedComponentTriangulatePseudopolygon - neighbor index out of bounds", a3, a4, a5, a6, a7, a8, v111);
    return v81;
  }
  uint64_t v23 = 1;
  a5 = HIDWORD(v111);
  while (1)
  {
    uint64_t v24 = *(void *)(*(void *)(v112 + 8) + 8 * --v22);
    if (HIDWORD(v111))
    {
      double v25 = v11[v23];
      *(void *)uint64_t v24 = v25;
      uint64_t v26 = 1;
    }
    else
    {
      *(void *)uint64_t v24 = v12;
      double v25 = v12;
      double v12 = *(double **)(*((void *)a1 + 1) + v23 * 8);
      uint64_t v26 = v21;
      uint64_t v21 = 1;
    }
    *(void *)(v24 + 8) = v12;
    *(void *)(v24 + 16) = a2;
    double v27 = (double **)(*v19)[v23];
    *(void *)(v24 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v27;
    *(void *)(v24 + 32) = v21;
    *(void *)(v24 + 40) = v26;
    if (!HIDWORD(v111)) {
      break;
    }
    if (v21)
    {
      double v28 = *(double **)v21;
      double v29 = *(double **)(v21 + 8);
      if (*(double **)v21 == a2 && v29 == v12)
      {
        unsigned int v30 = 0;
      }
      else
      {
        double v34 = *(double **)(v21 + 16);
        if (v29 == a2 && v34 == v12)
        {
          unsigned int v30 = 1;
        }
        else if (v34 == a2 && v28 == v12)
        {
          unsigned int v30 = 2;
        }
        else
        {
          unsigned int v30 = -1;
        }
      }
    }
    else
    {
      unsigned int v30 = -1;
    }
    if (!v27) {
      goto LABEL_194;
    }
    int v37 = v27[1];
    if (*v27 == v12 && v37 == v25)
    {
      unsigned int v42 = 0;
    }
    else
    {
      a3 = (uint64_t)v27[2];
      BOOL v39 = (double *)a3 == v12 && *v27 == v25;
      int v40 = v39 ? 2 : -1;
      BOOL v41 = v37 == v12 && a3 == (void)v25;
      unsigned int v42 = v41 ? 1 : v40;
    }
    if (v30 == -1 || v42 == -1) {
      goto LABEL_194;
    }
    v27[v42 + 3] = (double *)v24;
    *(void *)(*(void *)(v24 + 32) + 8 * v30 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v24;
    uint64_t v43 = *(void *)(v24 + 24);
    *(unsigned char *)(v24 + 49) = *(unsigned char *)(*(void *)(v24 + 32) + v30 + 48);
    *(unsigned char *)(v24 + 48) = *(unsigned char *)(v43 + v42 + 48);
    *(unsigned char *)(v24 + 50) = 0;
LABEL_81:
    double v11 = (double **)*((void *)a1 + 1);
    double v12 = v11[v23++];
    uint64_t v21 = v24;
    if (v15 + 1 == v23)
    {
      *(_DWORD *)uint64_t v112 = v22;
      double v20 = *v19;
      double v12 = v17;
      uint64_t v21 = v24;
      goto LABEL_85;
    }
  }
  if (v26)
  {
    double v32 = *(double **)v26;
    double v31 = *(double **)(v26 + 8);
    if (*(double **)v26 == v25 && v31 == a2)
    {
      unsigned int v33 = 0;
    }
    else
    {
      int v35 = *(double **)(v26 + 16);
      if (v31 == v25 && v35 == a2)
      {
        unsigned int v33 = 1;
      }
      else if (v35 == v25 && v32 == a2)
      {
        unsigned int v33 = 2;
      }
      else
      {
        unsigned int v33 = -1;
      }
    }
  }
  else
  {
    unsigned int v33 = -1;
  }
  if (v27)
  {
    long double v45 = v27[1];
    if (*v27 == v12 && v45 == v25)
    {
      unsigned int v49 = 0;
    }
    else
    {
      a3 = (uint64_t)v27[2];
      if (v45 == v12 && a3 == (void)v25)
      {
        unsigned int v49 = 1;
      }
      else
      {
        BOOL v48 = (double *)a3 == v12 && *v27 == v25;
        unsigned int v49 = v48 ? 2 : -1;
      }
    }
    if (v33 != -1 && v49 != -1)
    {
      v27[v49 + 3] = (double *)v24;
      *(void *)(*(void *)(v24 + 40) + 8 * v33 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v24;
      *(unsigned char *)(v24 + 50) = *(unsigned char *)(*(void *)(v24 + 40) + v33 + 48);
      *(_WORD *)(v24 + 48) = *(unsigned __int8 *)(*(void *)(v24 + 24) + v49 + 48);
      goto LABEL_81;
    }
  }
LABEL_194:
  *(_DWORD *)a4 = v22;
  return 2;
}

void sub_1B65DDBD4(uint64_t a1, double *a2, double *a3)
{
  double v4 = a3;
  if (*a2 > *a3 || *a2 == *a3 && a2[1] < a3[1])
  {
    double v6 = a2;
  }
  else
  {
    double v6 = a3;
    double v4 = a2;
  }
  uint64_t v7 = sub_1B65DCEBC((uint64_t)v4, a1);
  if (v7 == 2)
  {
    int v17 = 6;
    goto LABEL_42;
  }
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(a1 + 32);
  unint64_t v83 = 0;
  if (sub_1B65DD08C(v7, v4, v6, &v83))
  {
LABEL_17:
    if (v8 && (*(double **)v8 == v6 || *(double **)(v8 + 8) == v6 || *(double **)(v8 + 16) == v6))
    {
      uint64_t v18 = 0;
      while (*(double ***)(v8 + 8 * v18 + 24) != v83)
      {
        if (++v18 == 3)
        {
          LODWORD(v18) = -1;
          break;
        }
      }
      uint64_t v19 = 0;
      while (v83[v19 + 3] != (double *)v8)
      {
        if (++v19 == 3)
        {
          LODWORD(v19) = -1;
          break;
        }
      }
      *((unsigned char *)v83 + v19 + 48) = 1;
      *(unsigned char *)(v8 + v18 + 48) = 1;
      return;
    }
    uint64_t v81 = 0x1000000000;
    uint64_t v82 = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
    uint64_t v78 = 0x400000000;
    uint64_t v79 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    unsigned int v80 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    uint64_t v75 = 0x400000000;
    unsigned int v76 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    double v11 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v77 = v11;
    do
    {
      int v15 = *(double **)(v8 + v12);
      if (v15 != v4)
      {
        if ((*v6 - *v4) * (v15[1] - v4[1]) - (v6[1] - v4[1]) * (*v15 - *v4) <= 0.0) {
          uint64_t v13 = *(void *)(v8 + v12);
        }
        else {
          uint64_t v14 = *(void *)(v8 + v12);
        }
      }
      v12 += 8;
    }
    while (v12 != 24);
    if (*(void *)v8 == v13)
    {
      double v20 = (uint64_t *)(v8 + 32);
    }
    else if (*(void *)(v8 + 8) == v13)
    {
      double v20 = (uint64_t *)(v8 + 40);
    }
    else
    {
      if (*(void *)(v8 + 16) != v13)
      {
        uint64_t v16 = 0;
        goto LABEL_47;
      }
      double v20 = (uint64_t *)(v8 + 24);
    }
    uint64_t v16 = *v20;
LABEL_47:
    sub_1B65DCD3C((void **)&v78, v14, v16);
    if (*(void *)v8 == v14)
    {
      int v22 = (uint64_t *)(v8 + 32);
    }
    else if (*(void *)(v8 + 8) == v14)
    {
      int v22 = (uint64_t *)(v8 + 40);
    }
    else
    {
      if (*(void *)(v8 + 16) != v14)
      {
        uint64_t v21 = 0;
LABEL_55:
        sub_1B65DCD3C((void **)&v75, v13, v21);
        uint64_t v23 = 0;
        unsigned int v24 = v81;
        uint64_t v68 = a1;
        if ((double *)v14 != v6 && (double *)v13 != v6)
        {
          uint64_t v25 = v13;
          uint64_t v69 = 0;
          uint64_t v70 = 0;
          int v26 = *(_DWORD *)(a1 + 32);
          unsigned int v71 = HIDWORD(v81);
          double v27 = v4;
          double v28 = v82;
          while (1)
          {
            int v29 = v26 - 1;
            if (!v29)
            {
              int v51 = 3;
LABEL_112:
              uint64_t v52 = v68;
LABEL_131:
              *(_DWORD *)(v52 + 40) = v51;
              goto LABEL_132;
            }
            unsigned int v30 = *(double **)(v8 + 8);
            if (*(double **)v8 == v27)
            {
              double v32 = *(double *)(v8 + 16);
              double v31 = (uint64_t **)(v8 + 32);
            }
            else if (v30 == v27)
            {
              double v31 = (uint64_t **)(v8 + 40);
              double v32 = *(double *)v8;
              unsigned int v30 = *(double **)(v8 + 16);
            }
            else
            {
              if (*(double **)(v8 + 16) != v27) {
                goto LABEL_110;
              }
              double v31 = (uint64_t **)(v8 + 24);
              double v32 = *(double *)(v8 + 8);
              unsigned int v30 = *(double **)v8;
            }
            unsigned int v33 = *v31;
            if (!*v31)
            {
LABEL_110:
              int v51 = 4;
              goto LABEL_112;
            }
            uint64_t v34 = 0;
            while (v33[v34 + 3] != v8)
            {
              if (++v34 == 3) {
                goto LABEL_73;
              }
            }
            uint64_t v35 = (v34 - 1);
            BOOL v36 = v34 == 0;
            uint64_t v37 = 2;
            if (!v36) {
              uint64_t v37 = v35;
            }
            uint64_t v3 = (double *)v33[v37];
LABEL_73:
            double v38 = (*v6 - *v4) * (v3[1] - v4[1]) - (v6[1] - v4[1]) * (*v3 - *v4);
            uint64_t v39 = *v33;
            double v73 = v32;
            ptr = v28;
            int v72 = v29;
            if (v38 <= 0.0)
            {
              if (v39 == v14)
              {
                uint64_t v42 = v25;
                long double v45 = v33 + 4;
              }
              else if (v33[1] == v14)
              {
                uint64_t v42 = v25;
                long double v45 = v33 + 5;
              }
              else
              {
                uint64_t v42 = v25;
                if (v33[2] != v14)
                {
                  uint64_t v43 = 0;
LABEL_91:
                  sub_1B65DCD3C((void **)&v75, (uint64_t)v3, v43);
                  unint64_t v46 = (double *)v14;
                  uint64_t v69 = v42;
                  goto LABEL_92;
                }
                long double v45 = v33 + 3;
              }
              uint64_t v43 = *v45;
              goto LABEL_91;
            }
            if (v39 == v25) {
              break;
            }
            if (v33[1] == v25)
            {
              int v40 = (double *)v25;
              double v44 = v33 + 5;
              goto LABEL_87;
            }
            int v40 = (double *)v25;
            if (v33[2] == v25)
            {
              double v44 = v33 + 3;
              goto LABEL_87;
            }
            uint64_t v41 = 0;
LABEL_88:
            sub_1B65DCD3C((void **)&v78, (uint64_t)v3, v41);
            unint64_t v46 = v3;
            uint64_t v70 = v14;
            uint64_t v3 = v40;
LABEL_92:
            double v28 = ptr;
            if (v71 == v24)
            {
              v71 *= 2;
              double v28 = malloc_type_realloc(ptr, 8 * v71, 0x2004093837F09uLL);
              uint64_t v82 = v28;
            }
            int v26 = v72;
            unsigned int v47 = v24 + 1;
            *((void *)v28 + v--*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
            if (v38 > 0.0 != (*v6 - *v4) * (v30[1] - v4[1]) - (v6[1] - v4[1]) * (*v30 - *v4) > 0.0) {
              double v27 = *(double **)&v73;
            }
            else {
              double v27 = v30;
            }
            if (v46 != v6)
            {
              uint64_t v25 = (uint64_t)v3;
              uint64_t v14 = (uint64_t)v46;
              uint64_t v8 = (uint64_t)v33;
              ++v24;
              if (v3 != v6) {
                continue;
              }
            }
            uint64_t v23 = v70;
            HIDWORD(v81) = v71;
            uint64_t v48 = v69;
            goto LABEL_101;
          }
          int v40 = (double *)v25;
          double v44 = v33 + 4;
LABEL_87:
          uint64_t v41 = *v44;
          goto LABEL_88;
        }
        unsigned int v47 = v81;
        unsigned int v33 = (uint64_t *)v8;
        unint64_t v46 = (double *)v14;
        uint64_t v48 = 0;
LABEL_101:
        uint64_t v49 = *v33;
        if (v46 != v6)
        {
          if (v49 == v48)
          {
            uint64_t v53 = v33 + 4;
          }
          else if (v33[1] == v48)
          {
            uint64_t v53 = v33 + 5;
          }
          else
          {
            if (v33[2] != v48)
            {
              uint64_t v50 = 0;
LABEL_118:
              unsigned __int32 v55 = &v78;
LABEL_123:
              sub_1B65DCD3C((void **)v55, (uint64_t)v6, v50);
              if (HIDWORD(v81) == v47)
              {
                HIDWORD(v81) = 2 * v47;
                unsigned int v59 = malloc_type_realloc(v82, 16 * v47, 0x2004093837F09uLL);
                uint64_t v82 = v59;
              }
              else
              {
                unsigned int v59 = v82;
              }
              LODWORD(v81) = v47 + 1;
              *((void *)v59 + v47) = v33;
              uint64_t v60 = sub_1B65DD454((int *)&v78, v4, (uint64_t)v6, (uint64_t)&v81, 1, v56, v57, v58);
              if (v60 == 2)
              {
                *(_DWORD *)(v68 + 40) = 1;
              }
              else
              {
                uint64_t v64 = v60;
                uint64_t v65 = sub_1B65DD454((int *)&v75, v4, (uint64_t)v6, (uint64_t)&v81, 0, v61, v62, v63);
                uint64_t v52 = v68;
                if (v65 == 2)
                {
                  int v51 = 1;
                  goto LABEL_131;
                }
                *(void *)(v64 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v65;
                *(void *)(v65 + 40) = v64;
              }
LABEL_132:
              free(v82);
              uint64_t v66 = v80;
              free(v79);
              free(v66);
              unint64_t v67 = v77;
              free(v76);
              free(v67);
              return;
            }
            uint64_t v53 = v33 + 3;
          }
          uint64_t v50 = *v53;
          goto LABEL_118;
        }
        if (v49 == v23)
        {
          uint64_t v54 = v33 + 4;
        }
        else if (v33[1] == v23)
        {
          uint64_t v54 = v33 + 5;
        }
        else
        {
          if (v33[2] != v23)
          {
            uint64_t v50 = 0;
LABEL_122:
            unsigned __int32 v55 = &v75;
            goto LABEL_123;
          }
          uint64_t v54 = v33 + 3;
        }
        uint64_t v50 = *v54;
        goto LABEL_122;
      }
      int v22 = (uint64_t *)(v8 + 24);
    }
    uint64_t v21 = *v22;
    goto LABEL_55;
  }
  while (--v9)
  {
    if (*(double **)v8 == v4)
    {
      uint64_t v10 = (uint64_t *)(v8 + 24);
      goto LABEL_15;
    }
    if (*(double **)(v8 + 8) == v4)
    {
      uint64_t v10 = (uint64_t *)(v8 + 32);
      goto LABEL_15;
    }
    if (*(double **)(v8 + 16) == v4)
    {
      uint64_t v10 = (uint64_t *)(v8 + 40);
LABEL_15:
      uint64_t v8 = *v10;
    }
    if (sub_1B65DD08C(v8, v4, v6, &v83)) {
      goto LABEL_17;
    }
  }
  int v17 = 2;
LABEL_42:
  *(_DWORD *)(a1 + 40) = v17;
}

void *sub_1B65DE344(void *result, double *a2)
{
  unsigned int v2 = *(_DWORD *)result;
  if (!*(_DWORD *)result) {
    return result;
  }
  double v4 = result;
  while (2)
  {
    if (v2 > *((_DWORD *)v4 + 8))
    {
      int v13 = 9;
LABEL_38:
      *((_DWORD *)v4 + 10) = v13;
      return result;
    }
    uint64_t v5 = v4[1];
    unsigned int v6 = v2 - 1;
    *(_DWORD *)double v4 = v6;
    uint64_t v7 = *(void *)(v5 + 8 * v6);
    uint64_t v8 = *(void *)(v7 + 32);
    if (!v8)
    {
      int v13 = 10;
      goto LABEL_38;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 24;
    while (*(void *)(v8 + v10) != v7)
    {
      ++v9;
      v10 += 8;
      if (v9 == 3) {
        goto LABEL_37;
      }
    }
    if (v9 > 1) {
      int v11 = -2;
    }
    else {
      int v11 = 1;
    }
    if (v9) {
      uint64_t v12 = (v9 - 1);
    }
    else {
      uint64_t v12 = 2;
    }
    int v13 = 5;
    if (~v11 == v9 || v12 == -1) {
      goto LABEL_38;
    }
    if (!*(unsigned char *)(v7 + 49))
    {
      unsigned int v14 = v11 + v9;
      int v15 = *(double **)(v8 + v10 - 24);
      uint64_t v16 = *(double **)(v8 + 8 * v12);
      uint64_t result = (void *)sub_1B65DD278(v15, *(double **)(v8 + 8 * (v11 + v9)), v16, a2);
      if (result)
      {
        uint64_t v17 = *(void *)(v8 + 24 + 8 * v14);
        uint64_t v18 = *(void *)(v8 + 24 + 8 * v12);
        unsigned __int8 v19 = *(unsigned char *)(v8 + 48 + v14);
        uint64_t v20 = *(void *)(v7 + 40);
        char v21 = *(unsigned char *)(v8 + 48 + v12);
        char v22 = *(unsigned char *)(v7 + 50);
        *(_WORD *)(v7 + 49) = v19;
        *(unsigned char *)(v8 + 48) = 0;
        *(unsigned char *)(v8 + 49) = v21;
        *(unsigned char *)(v8 + 50) = v22;
        *(void *)(v7 + 16) = v16;
        *(void *)(v7 + 32) = v17;
        *(void *)(v7 + 40) = v8;
        *(void *)uint64_t v8 = a2;
        *(void *)(v8 + 8) = v16;
        *(void *)(v8 + 16) = v15;
        *(void *)(v8 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v7;
        *(void *)(v8 + 32) = v18;
        *(void *)(v8 + 40) = v20;
        if (v17)
        {
          uint64_t v23 = 0;
          while (*(void *)(v17 + 24 + v23) != v8)
          {
            v23 += 8;
            if (v23 == 24) {
              goto LABEL_37;
            }
          }
          unsigned int v24 = (uint64_t *)(v17 + v23 + 24);
          if (v24 == (uint64_t *)3) {
            goto LABEL_37;
          }
          *unsigned int v24 = v7;
          uint64_t result = sub_1B65DCDE0((int *)v4, v7);
        }
        if (v18) {
          uint64_t result = sub_1B65DCDE0((int *)v4, v8);
        }
        if (v20)
        {
          uint64_t v25 = 0;
          while (*(void *)(v20 + 24 + v25) != v7)
          {
            v25 += 8;
            if (v25 == 24) {
              goto LABEL_37;
            }
          }
          int v26 = (uint64_t *)(v20 + v25 + 24);
          if (v26 != (uint64_t *)3)
          {
            *int v26 = v8;
            goto LABEL_35;
          }
LABEL_37:
          int v13 = 5;
          goto LABEL_38;
        }
      }
    }
LABEL_35:
    unsigned int v2 = *(_DWORD *)v4;
    if (*(_DWORD *)v4) {
      continue;
    }
    return result;
  }
}

void *sub_1B65DE544(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v30 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 24);
  *(void *)a2 = a3;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v13;
  uint64_t v16 = sub_1B65DCE50((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t result = (void *)sub_1B65DCE50((uint64_t)a1, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = (uint64_t)result;
  *(void *)(a2 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v16;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = result;
  *(void *)uint64_t v16 = a3;
  *(void *)(v16 + 8) = v14;
  *(void *)(v16 + 16) = v12;
  *(void *)(v16 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  *(void *)(v16 + 32) = v11;
  *(void *)(v16 + 40) = a2;
  *uint64_t result = a3;
  result[1] = v13;
  result[2] = v14;
  result[3] = a2;
  result[4] = v30;
  result[5] = v16;
  *(unsigned char *)(v16 + 48) = 0;
  *(unsigned char *)(v16 + 49) = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(v16 + 50) = 0;
  *((unsigned char *)result + 48) = 0;
  *((unsigned char *)result + 49) = *(unsigned char *)(a2 + 49);
  *((unsigned char *)result + 50) = 0;
  *(unsigned char *)(a2 + 49) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 50) = 0;
  if (v15) {
    uint64_t result = sub_1B65DCDE0(a1, a2);
  }
  if (v30)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 3;
    while (*(void *)(v30 + 24 + v26) != a2)
    {
      v26 += 8;
      if (v26 == 24) {
        goto LABEL_9;
      }
    }
    uint64_t v27 = v30 + v26 + 24;
LABEL_9:
    *(void *)uint64_t v27 = v25;
    uint64_t result = sub_1B65DCDE0(a1, v25);
  }
  if (v11)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 3;
    while (*(void *)(v11 + 24 + v28) != a2)
    {
      v28 += 8;
      if (v28 == 24) {
        goto LABEL_17;
      }
    }
    uint64_t v29 = v11 + v28 + 24;
LABEL_17:
    *(void *)uint64_t v29 = v16;
    return sub_1B65DCDE0(a1, v16);
  }
  return result;
}

void *sub_1B65DE6D8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a2 + 24 + 8 * a4);
  unsigned int v12 = ((int)a5 + 1) % 3u;
  uint64_t v43 = *(void *)(v11 + 24 + 8 * v12);
  unsigned int v13 = ((int)a5 + 2) % 3u;
  uint64_t v41 = *(void *)(v11 + 24 + 8 * v13);
  unsigned int v14 = ((int)a4 + 1) % 3u;
  uint64_t v15 = *(void *)(a2 + 24 + 8 * v14);
  unsigned int v16 = ((int)a4 + 2) % 3u;
  uint64_t v40 = *(void *)(a2 + 24 + 8 * v16);
  char v42 = *(unsigned char *)(v11 + 48 + v12);
  char v38 = *(unsigned char *)(v11 + 48 + v13);
  char v35 = *(unsigned char *)(a2 + 48 + v14);
  char v39 = *(unsigned char *)(a2 + 48 + v16);
  char v17 = *(unsigned char *)(v11 + 48 + a5);
  uint64_t v37 = *(void *)(a2 + 8 * a4);
  uint64_t v18 = *(void *)(v11 + 8 * a5);
  uint64_t v19 = *(void *)(a2 + 8 * v16);
  uint64_t v20 = *(void *)(v11 + 8 * v13);
  uint64_t v21 = sub_1B65DCE50((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t result = (void *)sub_1B65DCE50((uint64_t)a1, v22, v23, v24, v25, v26, v27, v28);
  uint64_t v30 = (uint64_t)result;
  *(void *)a2 = a3;
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v19;
  *(void *)(a2 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v21;
  *(unsigned char *)(a2 + 48) = v17;
  *(unsigned char *)(a2 + 49) = v35;
  *(unsigned char *)(a2 + 50) = 0;
  *(void *)uint64_t v11 = a3;
  *(void *)(v11 + 8) = v20;
  *(void *)(v11 + 16) = v18;
  *(void *)(v11 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  *(void *)(v11 + 32) = v41;
  *(void *)(v11 + 40) = a2;
  *(unsigned char *)(v11 + 48) = 0;
  *(unsigned char *)(v11 + 49) = v38;
  *(unsigned char *)(v11 + 50) = v17;
  *(void *)uint64_t v21 = a3;
  *(void *)(v21 + 8) = v19;
  *(void *)(v21 + 16) = v37;
  *(void *)(v21 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(v21 + 32) = v40;
  *(void *)(v21 + 40) = result;
  *(unsigned char *)(v21 + 48) = 0;
  *(unsigned char *)(v21 + 49) = v39;
  *(unsigned char *)(v21 + 50) = v17;
  *uint64_t result = a3;
  result[1] = v37;
  result[2] = v20;
  result[3] = v21;
  result[4] = v43;
  result[5] = v11;
  *((unsigned char *)result + 48) = v17;
  *((unsigned char *)result + 49) = v42;
  *((unsigned char *)result + 50) = 0;
  if (v41) {
    uint64_t result = sub_1B65DCDE0(a1, v11);
  }
  if (v15) {
    uint64_t result = sub_1B65DCDE0(a1, a2);
  }
  if (v40)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 3;
    while (*(void *)(v40 + 24 + v31) != a2)
    {
      v31 += 8;
      if (v31 == 24) {
        goto LABEL_11;
      }
    }
    uint64_t v32 = v40 + v31 + 24;
LABEL_11:
    *(void *)uint64_t v32 = v21;
    uint64_t result = sub_1B65DCDE0(a1, v21);
  }
  if (v43)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 3;
    while (*(void *)(v43 + 24 + v33) != v11)
    {
      v33 += 8;
      if (v33 == 24) {
        goto LABEL_19;
      }
    }
    uint64_t v34 = v43 + v33 + 24;
LABEL_19:
    *(void *)uint64_t v34 = v30;
    return sub_1B65DCDE0(a1, v30);
  }
  return result;
}

void *sub_1B65DE958(uint64_t a1, float64x2_t *a2)
{
  uint64_t result = (void *)sub_1B65DCF28(a2, (double **)(*(void *)(a1 + 16) + 56 * (*(_DWORD *)(a1 + 32) - 1)), a1);
  if (result == (void *)2)
  {
    *(_DWORD *)(a1 + 40) = 8;
  }
  else
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v11 = 0;
    if (sub_1B65DD33C((uint64_t)result, a2->f64, (_DWORD *)&v11 + 1, &v11)) {
      sub_1B65DE6D8((int *)a1, v5, (uint64_t)a2, HIDWORD(v11), v11, v8, v9, v10);
    }
    else {
      sub_1B65DE544((int *)a1, v5, (uint64_t)a2, v6, v7, v8, v9, v10);
    }
    return sub_1B65DE344((void *)a1, a2->f64);
  }
  return result;
}

__n128 sub_1B65DEA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = sub_1B65DCE50(a1, a2, a3, a4, a5, a6, a7, a8);
  *(void *)(a1 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v13;
  double v14 = *(float *)(*(void *)a2 + 16);
  double v15 = *(float *)(*(void *)a2 + 20);
  double v16 = *(float *)(*(void *)a2 + 24);
  double v17 = *(float *)(*(void *)a2 + 28);
  double v18 = v15 - v14;
  double v19 = v17 - v16;
  if (vabdd_f64(v15, v14) < 0.00001 || vabdd_f64(v17, v16) < 0.00001) {
    *(_DWORD *)(a1 + 40) = 7;
  }
  double v20 = v16 + v19 * -100.0;
  *(void *)(v13 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(_DWORD *)(v13 + 47) = 0;
  *(void *)(v13 + 40) = 0;
  *(double *)a3 = v14 + v18 * -100.0;
  *(double *)(a3 + 8) = v20;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)a3;
  *(double *)a4 = v14 + v18 * 100.0;
  *(double *)(a4 + 8) = v20;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)a4;
  *(double *)a5 = v14 + v18 * 0.0;
  *(double *)(a5 + 8) = v16 + v19 * 100.0;
  __n128 result = *(__n128 *)a5;
  *(_OWORD *)(a5 + 48) = *(_OWORD *)a5;
  *(void *)uint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  *(void *)(v13 + 16) = a5;
  return result;
}

uint64_t sub_1B65DEB04(uint64_t a1, int a2, BOOL *a3)
{
  *(unsigned char *)(a1 + 51) = 1;
  *(unsigned char *)(a1 + 52) = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6 && !*(unsigned char *)(v6 + 51)) {
    sub_1B65DEB04();
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7 && !*(unsigned char *)(v7 + 51)) {
    sub_1B65DEB04();
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    if (!*(unsigned char *)(result + 51)) {
      uint64_t result = sub_1B65DEB04();
    }
  }
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a1 + 32))
    {
      if (*(void *)(a1 + 40)) {
        return result;
      }
      uint64_t v9 = (unsigned __int8 *)(a1 + 50);
    }
    else
    {
      uint64_t v9 = (unsigned __int8 *)(a1 + 49);
    }
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)(a1 + 48);
  }
  *a3 = *v9 != a2;
  return result;
}

void *sub_1B65DEBE8(uint64_t a1)
{
  BOOL v10 = 0;
  sub_1B65DEB04(*(void *)(a1 + 16), 1, &v10);
  LODWORD(v2) = *(_DWORD *)(a1 + 32);
  if (!v2) {
    goto LABEL_12;
  }
  unsigned int v3 = 0;
  int v4 = v10;
  do
  {
    if (*(unsigned __int8 *)(*(void *)(a1 + 16) + 56 * v3 + 52) == v4)
    {
      LODWORD(v2) = v2 - 1;
      *(_DWORD *)(a1 + 32) = v2;
      if (v3 < v2)
      {
        unint64_t v5 = v3;
        uint64_t v6 = 56 * v3;
        do
        {
          uint64_t v7 = *(void *)(a1 + 16) + v6;
          ++v5;
          long long v8 = *(_OWORD *)(v7 + 72);
          *(_OWORD *)uint64_t v7 = *(_OWORD *)(v7 + 56);
          *(_OWORD *)(v7 + 16) = v8;
          *(_OWORD *)(v7 + 32) = *(_OWORD *)(v7 + 88);
          *(void *)(v7 + 48) = *(void *)(v7 + 104);
          unint64_t v2 = *(unsigned int *)(a1 + 32);
          v6 += 56;
        }
        while (v5 < v2);
      }
    }
    else
    {
      ++v3;
    }
  }
  while (v3 < v2);
  if (v2)
  {
    uint64_t result = malloc_type_realloc(*(void **)(a1 + 16), 56 * v2, 0x1020040F7381AC9uLL);
  }
  else
  {
LABEL_12:
    free(*(void **)(a1 + 16));
    uint64_t result = 0;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

void *sub_1B65DECE8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = (int *)(*(void *)a1 + 8);
    do
    {
      int v7 = *v6;
      v6 += 10;
      v5 += v7;
      --v4;
    }
    while (v4);
    unsigned int v8 = 2 * v5 + 2;
  }
  else
  {
    unsigned int v8 = 2;
  }
  uint64_t v36 = 0;
  uint64_t v33 = 0x1000000000;
  uint64_t v34 = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
  char v35 = malloc_type_malloc(56 * v8, 0x1020040F7381AC9uLL);
  int v37 = 0;
  unsigned int v38 = v8;
  uint64_t v39 = 0;
  memset(v32, 0, sizeof(v32));
  memset(v31, 0, sizeof(v31));
  long long v9 = *(_OWORD *)(a1 + 16);
  v29[0] = *(_OWORD *)a1;
  v29[1] = v9;
  memset(v30, 0, sizeof(v30));
  sub_1B65DEA10((uint64_t)&v33, (uint64_t)v29, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, v10, v11, v12);
  if (!v39)
  {
    int v14 = *(_DWORD *)(a1 + 8) - 1;
    if (v14 < 0)
    {
LABEL_23:
      sub_1B65DEBE8((uint64_t)&v33);
      free(v34);
      *a2 = v37;
      return v35;
    }
    int64x2_t v28 = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
    while (1)
    {
      uint64_t v15 = *(void *)a1 + 40 * v14;
      uint64_t v16 = *(unsigned int *)(v15 + 8);
      if (v16 >= 3) {
        break;
      }
LABEL_21:
      if (v14-- <= 0) {
        goto LABEL_23;
      }
    }
    double v17 = *(float64x2_t **)v15;
    sub_1B65DE958((uint64_t)&v33, *(float64x2_t **)v15);
    float64x2_t v18 = (float64x2_t)v28;
    if (!v39)
    {
      uint64_t v19 = 80;
      uint64_t v20 = 1;
      while (1)
      {
        unint64_t v21 = 0;
        uint64_t v22 = &v17[5 * v20];
        float64x2_t v24 = *v22;
        f64 = v22[-5].f64;
        float64x2_t v25 = v24;
        while (1)
        {
          int32x2_t v26 = vmovn_s64(vcgeq_f64(v18, vabdq_f64(v25, v17[v21 / 0x10])));
          if (v26.i32[0] & v26.i32[1]) {
            break;
          }
          v21 += 80;
          if (v19 == v21)
          {
            sub_1B65DE958((uint64_t)&v33, &v17[5 * v20]);
            if (v39) {
              goto LABEL_7;
            }
            break;
          }
        }
        sub_1B65DDBD4((uint64_t)&v33, f64, v17[5 * v20].f64);
        float64x2_t v18 = (float64x2_t)v28;
        if (v39) {
          break;
        }
        ++v20;
        v19 += 80;
        if (v20 == v16)
        {
          sub_1B65DDBD4((uint64_t)&v33, v17[5 * (v16 - 1)].f64, v17->f64);
          if (v39) {
            break;
          }
          goto LABEL_21;
        }
      }
    }
  }
LABEL_7:
  free(v34);
  *a2 = 0;
  free(v35);
  return 0;
}

uint64_t sub_1B65DEF48(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B65DEF78(const __CTFont *a1, CGGlyph a2, uint64_t a3)
{
  if (qword_1E9DDBCA8 != -1) {
    dispatch_once_f(&qword_1E9DDBCA8, &qword_1E9DDBCA0, (dispatch_function_t)sub_1B65DEF48);
  }
  uint64_t v6 = sub_1B63C8D44(qword_1E9DDBCA0, 0x38uLL);
  PathForGlyph = CTFontCreatePathForGlyph(a1, a2, 0);
  *(void *)(a3 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = PathForGlyph;
  long long v8 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v8;
  _DWORD v10[2] = *(_OWORD *)(a3 + 32);
  uint64_t v11 = *(void *)(a3 + 48);
  sub_1B6629610(v6, (uint64_t)v10);
  CGPathRelease(PathForGlyph);
  *(void *)(v6 + 56) = CFRetain(a1);
  *(_WORD *)(v6 + 64) = a2;
  return v6;
}

void sub_1B65DF060(uint64_t a1)
{
  if (a1)
  {
    unint64_t v2 = *(const void **)(a1 + 56);
    if (v2) {
      CFRelease(v2);
    }
    sub_1B662967C(a1);
  }
}

CFStringRef sub_1B65DF0AC(uint64_t a1)
{
  unint64_t v2 = CTFontCopyGraphicsFont(*(CTFontRef *)(a1 + 56), 0);
  CFStringRef v3 = CGFontCopyFullName(v2);
  CFStringRef v4 = CGFontCopyGlyphNameForGlyph(v2, *(_WORD *)(a1 + 64));
  CFAllocatorRef v5 = CFGetAllocator((CFTypeRef)a1);
  CFStringRef v6 = CFStringCreateWithFormat(v5, 0, @"<CFXGlyph '%@' in '%@'>", v4, v3);
  CFRelease(v4);
  CFRelease(v3);
  CGFontRelease(v2);
  return v6;
}

CFMutableDictionaryRef sub_1B65DF140(CFMutableDictionaryRef result)
{
  if (!*((void *)result + 2))
  {
    CFMutableDictionaryRef v1 = result;
    unint64_t v2 = (const void *)*((void *)result + 4);
    if (v2) {
      CFRelease(v2);
    }
    uint64_t result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *((void *)v1 + 4) = result;
  }
  return result;
}

const void *sub_1B65DF19C(uint64_t a1, unsigned int a2, void *key, long long *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    long long v9 = a4[1];
    long long v14 = *a4;
    long long v15 = v9;
    long long v16 = a4[2];
    uint64_t v17 = *((void *)a4 + 6);
    return sub_1B65DF738(v8, a2, key, (uint64_t)&v14);
  }
  else
  {
    CFDictionaryRef Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
    if (!Value)
    {
      CFDictionaryRef Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), key, Value);
      CFRelease(Value);
    }
    uint64_t v10 = CFDictionaryGetValue((CFDictionaryRef)Value, (const void *)a2);
    if (!v10)
    {
      long long v12 = a4[1];
      long long v14 = *a4;
      long long v15 = v12;
      long long v16 = a4[2];
      uint64_t v17 = *((void *)a4 + 6);
      uint64_t v10 = (const void *)sub_1B65DEF78((const __CTFont *)key, a2, (uint64_t)&v14);
      CFDictionaryAddValue((CFMutableDictionaryRef)Value, (const void *)a2, v10);
      CFRelease(v10);
    }
  }
  return v10;
}

CFIndex sub_1B65DF2C8(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 40) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex result = *(void *)(a1 + 24);
  if (result)
  {
    CFArrayRef GlyphRuns = CTLineGetGlyphRuns((CTLineRef)result);
    CFIndex result = CFArrayGetCount(GlyphRuns);
    if (result >= 1)
    {
      CFIndex v7 = 0;
      uint64_t v8 = (const void *)*MEMORY[0x1E4F243F0];
      do
      {
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v7);
        GlyphCFIndex Count = CTRunGetGlyphCount(ValueAtIndex);
        CFDictionaryRef Attributes = CTRunGetAttributes(ValueAtIndex);
        CFDictionaryRef Value = (void *)CFDictionaryGetValue(Attributes, v8);
        if (GlyphCount >= 1)
        {
          uint64_t v13 = Value;
          for (CFIndex i = 0; i != GlyphCount; ++i)
          {
            CGGlyph buffer = 0;
            v20.locatiouint64_t n = i;
            v20.length = 1;
            CTRunGetGlyphs(ValueAtIndex, v20, &buffer);
            long long v15 = *(_OWORD *)(a2 + 16);
            v17[0] = *(_OWORD *)a2;
            v17[1] = v15;
            _OWORD v17[2] = *(_OWORD *)(a2 + 32);
            uint64_t v18 = *(void *)(a2 + 48);
            long long v16 = sub_1B65DF19C(a1, buffer, v13, v17);
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v16);
          }
        }
        ++v7;
        CFIndex result = CFArrayGetCount(GlyphRuns);
      }
      while (v7 < result);
    }
  }
  return result;
}

double sub_1B65DF414(uint64_t a1, uint64_t a2, unsigned int a3, double result)
{
  if (a1)
  {
    CFArrayRef GlyphRuns = CTLineGetGlyphRuns(*(CTLineRef *)(a1 + 24));
    CFIndex Count = CFArrayGetCount(GlyphRuns);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      unsigned int v9 = 0;
      for (CFIndex i = 0; i != v8; ++i)
      {
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, i);
        GlyphCFIndex Count = CTRunGetGlyphCount(ValueAtIndex);
        unsigned int v13 = GlyphCount;
        unsigned int v14 = a3 - v9;
        if (a3 > v9)
        {
          if (v14 >= GlyphCount) {
            v15.length = GlyphCount;
          }
          else {
            v15.length = v14;
          }
          v15.locatiouint64_t n = 0;
          CTRunGetAdvances(ValueAtIndex, v15, (CGSize *)(a2 + 16 * v9));
        }
        v9 += v13;
      }
    }
    if (a3)
    {
      uint64_t v16 = a3;
      uint64_t v17 = (double *)(a2 + 8);
      CFIndex result = 0.0;
      do
      {
        double v18 = *(v17 - 1);
        double v19 = -*v17;
        *(v17 - 1) = result;
        *uint64_t v17 = v19;
        CFIndex result = result + v18;
        v17 += 2;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

CFIndex sub_1B65DF4F0(CFIndex result)
{
  if (result) {
    return CFArrayGetCount(*(CFArrayRef *)(result + 40));
  }
  return result;
}

CFArrayRef *sub_1B65DF514(CFArrayRef *result, CFIndex idx)
{
  if (result) {
    return (CFArrayRef *)CFArrayGetValueAtIndex(result[5], idx);
  }
  return result;
}

uint64_t sub_1B65DF528(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

__CFDictionary *sub_1B65DF558(const void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_1E9DDBCB8 != -1) {
    dispatch_once_f(&qword_1E9DDBCB8, &qword_1E9DDBCB0, (dispatch_function_t)sub_1B65DF528);
  }
  CFStringRef v6 = (__CFDictionary *)sub_1B63C8D44(qword_1E9DDBCB0, 0x20uLL);
  if (a1) {
    CFTypeRef v7 = CFRetain(a1);
  }
  else {
    CFTypeRef v7 = 0;
  }
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 2) = a3;
  *((void *)v6 + 3) = v7;
  sub_1B65DF140(v6);
  long long v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  _DWORD v10[2] = *(_OWORD *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 48);
  sub_1B65DF2C8((uint64_t)v6, (uint64_t)v10);
  return v6;
}

void sub_1B65DF62C(void *a1)
{
  if (a1)
  {
    unint64_t v2 = (const void *)a1[3];
    if (v2) {
      CFRelease(v2);
    }
    CFStringRef v3 = (const void *)a1[4];
    if (v3) {
      CFRelease(v3);
    }
    CFStringRef v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

CFStringRef sub_1B65DF684(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXTextLine>");
}

CFStringRef sub_1B65DF6B8(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXTextLine>");
}

CFMutableDictionaryRef sub_1B65DF6EC(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(a1 + 32) = result;
  return result;
}

const void *sub_1B65DF738(uint64_t a1, unsigned int a2, void *key, uint64_t a4)
{
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
  if (!Value)
  {
    CFDictionaryRef Value = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), key, Value);
    CFRelease(Value);
  }
  unsigned int v9 = CFDictionaryGetValue((CFDictionaryRef)Value, (const void *)a2);
  if (!v9)
  {
    long long v10 = *(_OWORD *)(a4 + 16);
    v12[0] = *(_OWORD *)a4;
    v12[1] = v10;
    void v12[2] = *(_OWORD *)(a4 + 32);
    uint64_t v13 = *(void *)(a4 + 48);
    unsigned int v9 = (const void *)sub_1B65DEF78((const __CTFont *)key, a2, (uint64_t)v12);
    CFDictionaryAddValue((CFMutableDictionaryRef)Value, (const void *)a2, v9);
    CFRelease(v9);
  }
  return v9;
}

uint64_t sub_1B65DF820(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B65DF850(const void *a1, uint64_t a2)
{
  if (qword_1E9DDBCC8 != -1) {
    dispatch_once_f(&qword_1E9DDBCC8, &qword_1E9DDBCC0, (dispatch_function_t)sub_1B65DF820);
  }
  uint64_t v4 = sub_1B63C8D44(qword_1E9DDBCC0, 0x18uLL);
  *(void *)(v4 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (a1)
  {
    CFTypeRef v5 = CFRetain(a1);
    *(void *)(v4 + 16) = v5;
    if (v5)
    {
      sub_1B65DF6EC(v4);
      CFArrayRef Lines = CTFrameGetLines((CTFrameRef)a1);
      if (CFArrayGetCount(Lines) >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(Lines, v7);
          long long v9 = *(_OWORD *)(a2 + 16);
          v12[0] = *(_OWORD *)a2;
          v12[1] = v9;
          void v12[2] = *(_OWORD *)(a2 + 32);
          uint64_t v13 = *(void *)(a2 + 48);
          long long v10 = sub_1B65DF558(ValueAtIndex, (uint64_t)v12, v4);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v4 + 24), v10);
          CFRelease(v10);
          ++v7;
        }
        while (v7 < CFArrayGetCount(Lines));
      }
    }
  }
  else
  {
    *(void *)(v4 + 16) = 0;
  }
  return v4;
}

void sub_1B65DF994(void *a1)
{
  if (a1)
  {
    unint64_t v2 = (const void *)a1[2];
    if (v2) {
      CFRelease(v2);
    }
    CFStringRef v3 = (const void *)a1[4];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)a1[3];
    CFRelease(v4);
  }
}

CFStringRef sub_1B65DF9E8(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXTextFrame>");
}

CFStringRef sub_1B65DFA1C(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXTextFrame>");
}

double sub_1B65DFA54(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(CGPath **)(a1 + 40);
  CFMutableArrayRef Mutable = v4;
  if (!v4)
  {
    CFMutableArrayRef Mutable = CGPathCreateMutable();
    CGPathMoveToPoint(Mutable, 0, 0.0, 1.0);
    CGPathAddArcToPoint(Mutable, 0, 1.0, 1.0, 1.0, 0.0, 1.0);
  }
  int v22 = 0;
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  float v6 = *(float *)(a1 + 4) * 0.1;
  CFIndex v7 = sub_1B65DC180(Mutable, &v22, v6, INFINITY);
  unsigned int v14 = v7;
  if (v7 && (unsigned int v15 = v7[2], v15 >= 2))
  {
    uint64_t v16 = *(void *)v7;
    int v17 = v7[3];
    long long v23 = *((_OWORD *)v7 + 1);
    uint64_t v24 = *((void *)v7 + 4);
    if (v16) {
      goto LABEL_9;
    }
  }
  else
  {
    int v17 = 0;
    unsigned int v15 = 0;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v8, v9, v10, v11, v12, v13, (uint64_t)"profilePath.points");
  uint64_t v16 = 0;
LABEL_9:
  if (*(unsigned char *)(v16 + 68))
  {
    *(unsigned char *)(v16 + 68) = 0;
    *(_OWORD *)(v16 + 16) = *(_OWORD *)(v16 + 32);
    --v17;
  }
  uint64_t v18 = v16 + 80 * (v15 - 1);
  int v20 = *(unsigned __int8 *)(v18 + 68);
  double v19 = (unsigned char *)(v18 + 68);
  if (v20)
  {
    *double v19 = 0;
    --v17;
  }
  if (!v4) {
    CGPathRelease(Mutable);
  }
  *(void *)(a2 + 32) = v16;
  *(_DWORD *)(a2 + 40) = v15;
  *(_DWORD *)(a2 + 44) = v17;
  double result = *(double *)&v23;
  *(_OWORD *)(a2 + 48) = v23;
  *(void *)(a2 + 64) = v24;
  *(void *)(a2 + 72) = v14;
  *(_DWORD *)(a2 + 28) = v22;
  return result;
}

int32x2_t sub_1B65DFBFC(unsigned int a1, unsigned int a2, uint64_t a3, char a4)
{
  if (a1)
  {
    size_t v8 = 12 * a1;
    *(void *)(a3 + 96) = malloc_type_malloc(v8, 0x10000403E1C8BA9uLL);
    *(void *)(a3 + 104) = malloc_type_malloc(v8, 0x10000403E1C8BA9uLL);
    uint64_t v9 = malloc_type_malloc(8 * a1, 0x100004000313F17uLL);
  }
  else
  {
    uint64_t v9 = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
  }
  *(void *)(a3 + 88) = v9;
  *(_WORD *)(a3 + 80) = 0;
  if (a2) {
    uint64_t v10 = malloc_type_malloc(8 * a2, 0x2004093837F09uLL);
  }
  else {
    uint64_t v10 = 0;
  }
  *(void *)(a3 + 112) = v10;
  *(_WORD *)(a3 + 82) = 0;
  *(_DWORD *)(a3 + 120) = 0;
  *(void *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(_DWORD *)(a3 + 144) = 0;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(unsigned char *)(a3 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a4;
  *(_OWORD *)a3 = xmmword_1B6E72A80;
  int32x2_t result = vdup_n_s32(0xC9742400);
  *(int32x2_t *)(a3 + 16) = result;
  return result;
}

void sub_1B65DFD10(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v231 = *MEMORY[0x1E4F143B8];
  int v9 = *(_DWORD *)(a1 + 24);
  v223[0] = MEMORY[0x1E4F143A8];
  v223[1] = 0x40000000;
  uint64_t v224 = sub_1B65E0F50;
  uint64_t v225 = &unk_1E6145078;
  uint64_t v226 = a3;
  char v227 = a4;
  float v10 = *(float *)(a2 + 8);
  if (*(unsigned char *)(a3 + 24) == 1)
  {
    unsigned int v11 = (unsigned __int16)v9;
    *(_DWORD *)(a3 + 120) = (unsigned __int16)v9;
    size_t v12 = 2 * (unsigned __int16)v9;
    *(void *)(a3 + 128) = malloc_type_malloc(v12, 0x1000040BDFB0063uLL);
    v13.n128_u32[0] = *(_DWORD *)(v7 + 8);
    if (v13.n128_f32[0] == 0.0) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = malloc_type_malloc(v12, 0x1000040BDFB0063uLL);
    }
    unsigned int v15 = 0;
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(a3 + 120);
    unsigned int v11 = (unsigned __int16)v9;
    unsigned int v16 = v15 + (unsigned __int16)v9;
    *(_DWORD *)(a3 + 120) = v16;
    *(void *)(a3 + 128) = malloc_type_realloc(*(void **)(a3 + 128), 2 * v16, 0x1000040BDFB0063uLL);
    v13.n128_u32[0] = *(_DWORD *)(v7 + 8);
    if (v13.n128_f32[0] == 0.0) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = malloc_type_realloc(*(void **)(a3 + 136), 2 * *(unsigned int *)(a3 + 120), 0x1000040BDFB0063uLL);
    }
  }
  float v17 = v10 * 0.5;
  *(void *)(a3 + 136) = v14;
  float v203 = v10 * 0.5;
  if (v11)
  {
    int v18 = *(_DWORD *)(v7 + 16);
    uint64_t v20 = *(void *)(a3 + 96);
    uint64_t v19 = *(void *)(a3 + 104);
    uint64_t v21 = *(void *)(a3 + 128);
    uint64_t v22 = v11;
    unsigned __int16 v23 = *(_WORD *)(a3 + 80);
    v13.n128_f64[0] = a5;
    v13.n128_f64[1] = a6;
    unsigned int v24 = v15;
    uint64_t v25 = *(float64x2_t ***)(v8 + 32);
    do
    {
      uint64_t v26 = v19 + 12 * v23;
      *(void *)uint64_t v26 = 0;
      *(_DWORD *)(v26 + 8) = 1065353216;
      uint64_t v27 = (float32x2_t *)(v20 + 12 * v23);
      int64x2_t v28 = *v25;
      if (v18 == 2)
      {
        v29.f32[0] = a5 + v28->f64[0];
        v30.f32[0] = a6 + v28->f64[1];
        v27->i32[0] = v29.i32[0];
        v27->i32[1] = v30.i32[0];
        v27[1].f32[0] = v17;
        v30.f32[1] = v10 * 0.5;
      }
      else
      {
        float32x2_t v29 = vcvt_f32_f64(vaddq_f64((float64x2_t)v13, v28[3]));
        *uint64_t v27 = v29;
        v27[1].f32[0] = v17;
        float32x2_t v30 = *(float32x2_t *)((char *)v27 + 4);
      }
      if (v29.f32[0] >= *(float *)a3) {
        v29.i32[0] = *(_DWORD *)a3;
      }
      *(_DWORD *)a3 = v29.i32[0];
      *(int8x8_t *)(a3 + 4) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a3 + 4), v30), (int8x8_t)v30, *(int8x8_t *)(a3 + 4));
      float v31 = v27[1].f32[0];
      if (v31 <= *(float *)(a3 + 20)) {
        float v31 = *(float *)(a3 + 20);
      }
      *(int8x8_t *)(a3 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*v27, *(float32x2_t *)(a3 + 12)), (int8x8_t)*v27, *(int8x8_t *)(a3 + 12));
      *(float *)(a3 + 20) = v31;
      *(_WORD *)(v21 + 2 * v--*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v23;
      unsigned __int16 v23 = *(_WORD *)(a3 + 80) + 1;
      *(_WORD *)(a3 + 80) = v23;
      ++v25;
      ++v24;
      --v22;
    }
    while (v22);
  }
  else
  {
    uint64_t v21 = *(void *)(a3 + 128);
  }
  ((void (*)(void *, void, unint64_t, uint64_t, void, __n128))v224)(v223, 0, *(unsigned int *)(a3 + 120) / 3uLL, v21, *(unsigned int *)(a3 + 120), v13);
  if (*(float *)(v7 + 8) > 0.0)
  {
    if (v11)
    {
      int v32 = *(_DWORD *)(v7 + 16);
      float v33 = -v203;
      uint64_t v35 = *(void *)(a3 + 96);
      uint64_t v34 = *(void *)(a3 + 104);
      uint64_t v36 = *(UInt8 **)(a3 + 136);
      uint64_t v37 = v11;
      unsigned __int16 v38 = *(_WORD *)(a3 + 80);
      v39.f64[0] = a5;
      v39.f64[1] = a6;
      uint64_t v40 = *(float64x2_t ***)(v8 + 32);
      do
      {
        uint64_t v41 = v34 + 12 * v38;
        *(void *)uint64_t v41 = 0;
        *(_DWORD *)(v41 + 8) = -1082130432;
        char v42 = (float32x2_t *)(v35 + 12 * v38);
        uint64_t v43 = *v40;
        if (v32 == 1)
        {
          v44.f32[0] = a5 + v43->f64[0];
          v45.f32[0] = a6 + v43->f64[1];
          v42->i32[0] = v44.i32[0];
          v42->i32[1] = v45.i32[0];
          v42[1].f32[0] = v33;
          v45.f32[1] = -v203;
        }
        else
        {
          float32x2_t v44 = vcvt_f32_f64(vaddq_f64(v39, v43[3]));
          *char v42 = v44;
          v42[1].f32[0] = v33;
          float32x2_t v45 = *(float32x2_t *)((char *)v42 + 4);
        }
        if (v44.f32[0] >= *(float *)a3) {
          v44.i32[0] = *(_DWORD *)a3;
        }
        *(_DWORD *)a3 = v44.i32[0];
        *(int8x8_t *)(a3 + 4) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a3 + 4), v45), (int8x8_t)v45, *(int8x8_t *)(a3 + 4));
        float v46 = v42[1].f32[0];
        if (v46 <= *(float *)(a3 + 20)) {
          float v46 = *(float *)(a3 + 20);
        }
        *(int8x8_t *)(a3 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*v42, *(float32x2_t *)(a3 + 12)), (int8x8_t)*v42, *(int8x8_t *)(a3 + 12));
        *(float *)(a3 + 20) = v46;
        *(_WORD *)&v36[2 * v15 - 2 + 2 * v37] = v38;
        unsigned __int16 v38 = *(_WORD *)(a3 + 80) + 1;
        *(_WORD *)(a3 + 80) = v38;
        ++v40;
        --v37;
      }
      while (v37);
    }
    else
    {
      uint64_t v36 = *(UInt8 **)(a3 + 136);
    }
    v224((uint64_t)v223, 0, *(unsigned int *)(a3 + 120) / 3uLL, v36, *(_DWORD *)(a3 + 120));
  }
  if (v203 > 0.0)
  {
    uint64_t v47 = *(unsigned int *)(v8 + 48);
    if (v47)
    {
      uint64_t v48 = 0;
      int v49 = 0;
      uint64_t v50 = *(void *)(v8 + 40);
      do
      {
        uint64_t v51 = *(unsigned int *)(v50 + 32 * v48 + 8);
        if (v51)
        {
          uint64_t v52 = (int *)(*(void *)(v50 + 32 * v48) + 8);
          do
          {
            int v53 = *v52;
            v52 += 10;
            v49 += v53;
            --v51;
          }
          while (v51);
        }
        ++v48;
      }
      while (v48 != v47);
    }
    else
    {
      int v49 = 0;
    }
    if (*(unsigned char *)(a3 + 24) == 1)
    {
      *(_DWORD *)(a3 + 144) = 0;
      uint64_t v54 = (UInt8 *)malloc_type_malloc(2 * (6 * v49), 0x1000040BDFB0063uLL);
    }
    else
    {
      uint64_t v54 = (UInt8 *)malloc_type_realloc(*(void **)(a3 + 152), 2 * (*(_DWORD *)(a3 + 144) + 6 * v49), 0x1000040BDFB0063uLL);
    }
    unsigned __int32 v55 = v54;
    *(void *)(a3 + 152) = v54;
    unint64_t v56 = *(unsigned int *)(v8 + 48);
    if (v56)
    {
      for (unint64_t i = 0; i < v56; ++i)
      {
        uint64_t v58 = *(void *)(v8 + 40) + 32 * i;
        uint64_t v59 = *(unsigned int *)(v58 + 8);
        if (v59)
        {
          uint64_t v60 = 0;
          uint64_t v61 = *(void *)v58;
          do
          {
            uint64_t v62 = (uint64_t *)(v61 + 40 * v60);
            uint64_t v63 = *((unsigned int *)v62 + 2);
            __int16 v64 = *(_WORD *)(a3 + 80);
            if (v63)
            {
              uint64_t v65 = *v62;
              uint64_t v66 = *(void *)(a3 + 96);
              unsigned __int16 v67 = *(_WORD *)(a3 + 80);
              do
              {
                uint64_t v68 = v65 + 80 * (v63 - 1);
                float64x2_t v69 = *(float64x2_t *)(v68 + 16);
                float v70 = a5 + *(double *)v68;
                float v71 = a6 + *(double *)(v68 + 8);
                int v72 = *(_DWORD *)(v7 + 16);
                if (v72 == 2) {
                  float v73 = 0.0;
                }
                else {
                  float v73 = *(float *)(v68 + 64);
                }
                float v74 = v203 - v73;
                float v75 = *(float *)(v68 + 64) - v203;
                if (v72 == 1) {
                  float v75 = -v203;
                }
                if (*(unsigned char *)(v68 + 68))
                {
                  unsigned __int16 v76 = v67 + 1;
                  unsigned __int16 v77 = v67 + 2;
                  uint64_t v78 = (float *)(v66 + 12 * v67);
                  *uint64_t v78 = v70;
                  v78[1] = v71;
                  v78[2] = v74;
                  *(_WORD *)(a3 + 80) = v77;
                  uint64_t v79 = (float *)(v66 + 12 * v76);
                  *uint64_t v79 = v70;
                  v79[1] = v71;
                  v79[2] = v75;
                  uint64_t v80 = *(void *)(a3 + 104) + 12 * v77;
                  *(float32x2_t *)(v80 - 12) = vcvt_f32_f64(*(float64x2_t *)(v68 + 32));
                  *(_DWORD *)(v80 - 4) = 0;
                  *(_DWORD *)(v80 - 16) = 0;
                  *(void *)(v80 - --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v80 - 12);
                  unsigned __int16 v67 = *(_WORD *)(a3 + 80);
                  uint64_t v66 = *(void *)(a3 + 96);
                }
                uint64_t v81 = *(void *)(a3 + 152);
                uint64_t v82 = *(unsigned int *)(a3 + 144);
                *(_WORD *)(v81 + 2 * v82) = v67;
                *(_WORD *)(v81 + 2 * (v82 + 1)) = *(_WORD *)(a3 + 80) + 1;
                *(_WORD *)(v81 + 2 * (v82 + 2)) = *(_WORD *)(a3 + 80) + 3;
                *(_WORD *)(v81 + 2 * (v82 + 3)) = *(_WORD *)(a3 + 80);
                *(_WORD *)(v81 + 2 * (v82 + 4)) = *(_WORD *)(a3 + 80) + 3;
                __int16 v83 = *(_WORD *)(a3 + 80) + 2;
                *(_DWORD *)(a3 + 144) = v82 + 6;
                *(_WORD *)(v81 + 2 * (v82 + 5)) = v83;
                unsigned __int16 v84 = *(_WORD *)(a3 + 80);
                LOWORD(v81) = v84 + 1;
                uint64_t v85 = (float *)(v66 + 12 * v84);
                *uint64_t v85 = v70;
                v85[1] = v71;
                v85[2] = v74;
                v84 += 2;
                *(_WORD *)(a3 + 80) = v84;
                int v86 = (float *)(v66 + 12 * (unsigned __int16)v81);
                *int v86 = v70;
                v86[1] = v71;
                v86[2] = v75;
                uint64_t v87 = *(void *)(a3 + 104) + 12 * v84;
                *(float32x2_t *)(v87 - 12) = vcvt_f32_f64(v69);
                *(_DWORD *)(v87 - 4) = 0;
                *(_DWORD *)(v87 - 16) = 0;
                *(void *)(v87 - --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v87 - 12);
                uint64_t v66 = *(void *)(a3 + 96);
                unsigned __int16 v67 = *(_WORD *)(a3 + 80);
                uint64_t v88 = v66 + 12 * v67;
                float v89 = *(float *)(v88 - 16);
                if (v89 >= *(float *)(a3 + 8)) {
                  float v89 = *(float *)(a3 + 8);
                }
                float v90 = *(float *)(a3 + 20);
                float32x2_t v91 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3, *(float32x2_t *)(v88 - 24)), *(int8x8_t *)(v88 - 24), *(int8x8_t *)a3);
                *(float32x2_t *)a3 = v91;
                *(float *)(a3 + 8) = v89;
                if (*(float *)(v88 - 16) > v90) {
                  float v90 = *(float *)(v88 - 16);
                }
                float32x2_t v92 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v88 - 24), *(float32x2_t *)(a3 + 12)), *(int8x8_t *)(v88 - 24), *(int8x8_t *)(a3 + 12));
                *(float32x2_t *)(a3 + 12) = v92;
                *(float *)(a3 + 20) = v90;
                int8x8_t v93 = vbsl_s8((int8x8_t)vcgt_f32(v91, *(float32x2_t *)(v88 - 12)), *(int8x8_t *)(v88 - 12), (int8x8_t)v91);
                if (*(float *)(v88 - 4) < v89) {
                  float v89 = *(float *)(v88 - 4);
                }
                *(int8x8_t *)a3 = v93;
                *(float *)(a3 + 8) = v89;
                int8x8_t v94 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v88 - 12), v92), *(int8x8_t *)(v88 - 12), (int8x8_t)v92);
                if (*(float *)(v88 - 4) > v90) {
                  float v90 = *(float *)(v88 - 4);
                }
                *(int8x8_t *)(a3 + 12) = v94;
                *(float *)(a3 + 20) = v90;
                --v63;
              }
              while (v63);
              unsigned __int32 v55 = *(UInt8 **)(a3 + 152);
            }
            int v95 = *(_DWORD *)(a3 + 144);
            *(_WORD *)&v55[2 * (v95 - 1)] = v64;
            __int16 v96 = v64 + 1;
            *(_WORD *)&v55[2 * (v95 - 4)] = v96;
            *(_WORD *)&v55[2 * (v95 - 2)] = v96;
            ++v60;
          }
          while (v60 != v59);
          unint64_t v56 = *(unsigned int *)(v8 + 48);
        }
      }
    }
    v224((uint64_t)v223, 0, *(unsigned int *)(a3 + 144) / 3uLL, v55, *(_DWORD *)(a3 + 144));
  }
  if (*(float *)(v7 + 12) > 0.0)
  {
    uint64_t v97 = *(unsigned int *)(v8 + 48);
    if (v97)
    {
      uint64_t v98 = 0;
      int v99 = 0;
      uint64_t v100 = *(void *)(v8 + 40);
      do
      {
        uint64_t v101 = *(unsigned int *)(v100 + 32 * v98 + 8);
        if (v101)
        {
          unsigned int v102 = (int *)(*(void *)(v100 + 32 * v98) + 8);
          do
          {
            int v103 = *v102;
            v102 += 10;
            v99 += v103;
            --v101;
          }
          while (v101);
        }
        ++v98;
      }
      while (v98 != v97);
    }
    else
    {
      int v99 = 0;
    }
    if (*(unsigned char *)(a3 + 24) == 1)
    {
      unsigned int v104 = (6 * *(_DWORD *)(a3 + 40) - 6) * v99;
      *(_DWORD *)(a3 + 160) = v104;
      *(void *)(a3 + 168) = malloc_type_malloc(2 * v104, 0x1000040BDFB0063uLL);
      uint64_t v105 = malloc_type_malloc(2 * *(unsigned int *)(a3 + 160), 0x1000040BDFB0063uLL);
      int v106 = 0;
    }
    else
    {
      int v106 = *(_DWORD *)(a3 + 160);
      unsigned int v107 = v106 + (6 * *(_DWORD *)(a3 + 40) - 6) * v99;
      *(_DWORD *)(a3 + 160) = v107;
      *(void *)(a3 + 168) = malloc_type_realloc(*(void **)(a3 + 168), 2 * v107, 0x1000040BDFB0063uLL);
      uint64_t v105 = malloc_type_realloc(*(void **)(a3 + 176), 2 * *(unsigned int *)(a3 + 160), 0x1000040BDFB0063uLL);
    }
    *(void *)(a3 + 176) = v105;
    v216[0] = MEMORY[0x1E4F143A8];
    v216[1] = 0x40000000;
    uint64_t v217 = sub_1B65E1004;
    double v218 = &unk_1E6145098;
    uint64_t v219 = a3;
    double v220 = a5;
    double v221 = a6;
    float v222 = v10 * 0.5;
    uint64_t v180 = v8;
    if (*(_DWORD *)(v7 + 16) == 2)
    {
      free(*(void **)(a3 + 168));
    }
    else
    {
      uint64_t v181 = v7;
      unint64_t v108 = *(unsigned int *)(v8 + 48);
      if (v108)
      {
        unint64_t v109 = 0;
        unsigned __int16 v110 = 0;
        do
        {
          uint64_t v111 = *(void *)(v180 + 40) + 32 * v109;
          uint64_t v187 = *(unsigned int *)(v111 + 8);
          if (v187)
          {
            uint64_t v112 = 0;
            uint64_t v183 = *(void *)v111;
            unint64_t v185 = v109;
            LODWORD(v113) = *(_DWORD *)(a3 + 40);
            do
            {
              if (v113)
              {
                uint64_t v114 = 0;
                uint64_t v189 = v112;
                uint64_t v115 = (uint64_t *)(v183 + 40 * v112);
                uint64_t v116 = *v115;
                uint64_t v118 = *((unsigned int *)v115 + 2);
                int v117 = *((_DWORD *)v115 + 3);
                uint64_t v201 = v118;
                do
                {
                  uint64_t v204 = v114;
                  uint64_t v119 = *(void *)(a3 + 32) + 80 * v114;
                  double v120 = *(double *)v119;
                  double v121 = *(double *)(v119 + 8);
                  double v195 = *(double *)(v119 + 40);
                  double v198 = *(double *)(v119 + 32);
                  __int16 v191 = *(_WORD *)(a3 + 80);
                  char v193 = *(unsigned char *)(v119 + 68);
                  if (v118)
                  {
                    double v123 = *(double *)(v119 + 16);
                    double v122 = *(double *)(v119 + 24);
                    do
                    {
                      uint64_t v124 = (long long *)(v116 + 80 * (v118 - 1));
                      long long v215 = *v124;
                      double v125 = *((double *)v124 + 2);
                      double v126 = *((double *)v124 + 3);
                      double v127 = *((double *)v124 + 4);
                      double v128 = *((double *)v124 + 5);
                      long long v229 = v124[3];
                      int v230 = *((_DWORD *)v124 + 16);
                      char v129 = *((unsigned char *)v124 + 68);
                      v228[0] = *(void *)((char *)v124 + 69);
                      *(_DWORD *)((char *)v228 + 7) = *((_DWORD *)v124 + 19);
                      if (v129)
                      {
                        long long v206 = v215;
                        double v207 = v125;
                        double v208 = v126;
                        double v209 = v127;
                        double v210 = v128;
                        long long v211 = v229;
                        int v212 = v230;
                        char v213 = v129;
                        *(void *)uint64_t v214 = v228[0];
                        *(_DWORD *)&v214[7] = *(_DWORD *)((char *)v228 + 7);
                        v217((uint64_t)v216, (uint64_t)&v206, v127, v128, 1.0, v120, v121, v123, v122);
                      }
                      if (v204)
                      {
                        uint64_t v130 = *(void *)(a3 + 168);
                        *(_WORD *)(v130 + 2 * (v106 + v110)) = *(_WORD *)(a3 + 80);
                        *(_WORD *)(v130 + 2 * (v106 + (unsigned __int16)(v110 + 1))) = *(_WORD *)(a3 + 80) - v117;
                        *(_WORD *)(v130 + 2 * (v106 + (unsigned __int16)(v110 + 2))) = *(_WORD *)(a3 + 80) - v117 + 1;
                        *(_WORD *)(v130 + 2 * (v106 + (unsigned __int16)(v110 + 3))) = *(_WORD *)(a3 + 80);
                        unsigned __int16 v131 = v110 + 5;
                        *(_WORD *)(v130 + 2 * (v106 + (unsigned __int16)(v110 + 4))) = *(_WORD *)(a3 + 80) - v117 + 1;
                        v110 += 6;
                        *(_WORD *)(v130 + 2 * (v106 + v131)) = *(_WORD *)(a3 + 80) + 1;
                      }
                      long long v206 = v215;
                      double v207 = v125;
                      double v208 = v126;
                      double v209 = v127;
                      double v210 = v128;
                      long long v211 = v229;
                      int v212 = v230;
                      char v213 = v129;
                      *(void *)uint64_t v214 = v228[0];
                      *(_DWORD *)&v214[7] = *(_DWORD *)((char *)v228 + 7);
                      v217((uint64_t)v216, (uint64_t)&v206, v125, v126, 1.0, v120, v121, v123, v122);
                      uint64_t v132 = *(void *)(a3 + 96) + 12 * *(unsigned __int16 *)(a3 + 80);
                      float v133 = *(float *)(v132 - 4);
                      if (v133 >= *(float *)(a3 + 8)) {
                        float v133 = *(float *)(a3 + 8);
                      }
                      *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3, *(float32x2_t *)(v132 - 12)), *(int8x8_t *)(v132 - 12), *(int8x8_t *)a3);
                      *(float *)(a3 + 8) = v133;
                      float v134 = *(float *)(v132 - 4);
                      if (v134 <= *(float *)(a3 + 20)) {
                        float v134 = *(float *)(a3 + 20);
                      }
                      *(int8x8_t *)(a3 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v132 - 12), *(float32x2_t *)(a3 + 12)), *(int8x8_t *)(v132 - 12), *(int8x8_t *)(a3 + 12));
                      *(float *)(a3 + 20) = v134;
                      --v118;
                    }
                    while (v118);
                  }
                  if (v204)
                  {
                    uint64_t v135 = *(void *)(a3 + 168);
                    int v136 = v106 + v110;
                    *(_WORD *)(v135 + 2 * (v136 - 1)) = v191;
                    *(_WORD *)(v135 + 2 * (v136 - 4)) = v191 - v117;
                    *(_WORD *)(v135 + 2 * (v136 - 2)) = v191 - v117;
                  }
                  if ((v193 & 1) != 0 && v201)
                  {
                    uint64_t v137 = v201;
                    do
                    {
                      uint64_t v138 = (long long *)(v116 + 80 * (v137 - 1));
                      long long v215 = *v138;
                      double v139 = *((double *)v138 + 2);
                      double v140 = *((double *)v138 + 3);
                      double v141 = *((double *)v138 + 4);
                      double v142 = *((double *)v138 + 5);
                      long long v229 = v138[3];
                      int v230 = *((_DWORD *)v138 + 16);
                      char v143 = *((unsigned char *)v138 + 68);
                      v228[0] = *(void *)((char *)v138 + 69);
                      *(_DWORD *)((char *)v228 + 7) = *((_DWORD *)v138 + 19);
                      uint64_t v144 = v217;
                      if (v143)
                      {
                        long long v206 = v215;
                        double v207 = v139;
                        double v208 = v140;
                        double v209 = v141;
                        double v210 = v142;
                        long long v211 = v229;
                        int v212 = v230;
                        char v213 = v143;
                        *(void *)uint64_t v214 = v228[0];
                        *(_DWORD *)&v214[7] = *(_DWORD *)((char *)v228 + 7);
                        v217((uint64_t)v216, (uint64_t)&v206, v141, v142, 1.0, v120, v121, v198, v195);
                        uint64_t v144 = v217;
                      }
                      long long v206 = v215;
                      double v207 = v139;
                      double v208 = v140;
                      double v209 = v141;
                      double v210 = v142;
                      long long v211 = v229;
                      int v212 = v230;
                      char v213 = v143;
                      *(void *)uint64_t v214 = v228[0];
                      *(_DWORD *)&v214[7] = *(_DWORD *)((char *)v228 + 7);
                      v144((uint64_t)v216, (uint64_t)&v206, v139, v140, 1.0, v120, v121, v198, v195);
                      --v137;
                    }
                    while (v137);
                  }
                  uint64_t v114 = v204 + 1;
                  unint64_t v113 = *(unsigned int *)(a3 + 40);
                  uint64_t v118 = v201;
                }
                while (v204 + 1 < v113);
                unint64_t v109 = v185;
                uint64_t v112 = v189;
              }
              ++v112;
            }
            while (v112 != v187);
            unint64_t v108 = *(unsigned int *)(v180 + 48);
          }
          ++v109;
        }
        while (v109 < v108);
      }
      v224((uint64_t)v223, 0, *(unsigned int *)(a3 + 160) / 3uLL, *(UInt8 **)(a3 + 168), *(_DWORD *)(a3 + 160));
      uint64_t v8 = v180;
      uint64_t v7 = v181;
    }
    if (*(_DWORD *)(v7 + 16) == 1)
    {
      free(*(void **)(a3 + 176));
    }
    else
    {
      unint64_t v145 = *(unsigned int *)(v8 + 48);
      if (v145)
      {
        unint64_t v146 = 0;
        unsigned __int16 v147 = 0;
        do
        {
          uint64_t v148 = *(void *)(v180 + 40) + 32 * v146;
          uint64_t v186 = *(unsigned int *)(v148 + 8);
          if (v186)
          {
            uint64_t v149 = 0;
            uint64_t v182 = *(void *)v148;
            unint64_t v184 = v146;
            LODWORD(v150) = *(_DWORD *)(a3 + 40);
            do
            {
              if (v150)
              {
                uint64_t v151 = 0;
                uint64_t v188 = v149;
                double v152 = (uint64_t *)(v182 + 40 * v149);
                uint64_t v205 = *v152;
                uint64_t v153 = *((unsigned int *)v152 + 2);
                int v154 = *((_DWORD *)v152 + 3);
                uint64_t v199 = v153;
                do
                {
                  uint64_t v202 = v151;
                  uint64_t v155 = *(void *)(a3 + 32) + 80 * v151;
                  double v156 = *(double *)v155;
                  double v157 = *(double *)(v155 + 8);
                  double v194 = *(double *)(v155 + 40);
                  double v196 = *(double *)(v155 + 32);
                  char v192 = *(unsigned char *)(v155 + 68);
                  __int16 v190 = *(_WORD *)(a3 + 80);
                  if (v153)
                  {
                    double v159 = *(double *)(v155 + 16);
                    double v158 = *(double *)(v155 + 24);
                    do
                    {
                      uint64_t v160 = (long long *)(v205 + 80 * (v153 - 1));
                      long long v215 = *v160;
                      double v161 = *((double *)v160 + 2);
                      double v162 = *((double *)v160 + 3);
                      double v163 = *((double *)v160 + 4);
                      double v164 = *((double *)v160 + 5);
                      long long v229 = v160[3];
                      int v230 = *((_DWORD *)v160 + 16);
                      char v165 = *((unsigned char *)v160 + 68);
                      v228[0] = *(void *)((char *)v160 + 69);
                      *(_DWORD *)((char *)v228 + 7) = *((_DWORD *)v160 + 19);
                      if (v165)
                      {
                        long long v206 = v215;
                        double v207 = v161;
                        double v208 = v162;
                        double v209 = v163;
                        double v210 = v164;
                        long long v211 = v229;
                        int v212 = v230;
                        char v213 = v165;
                        *(void *)uint64_t v214 = v228[0];
                        *(_DWORD *)&v214[7] = *(_DWORD *)((char *)v228 + 7);
                        v217((uint64_t)v216, (uint64_t)&v206, v163, v164, -1.0, v156, v157, v159, v158);
                      }
                      if (v202)
                      {
                        uint64_t v166 = *(void *)(a3 + 176);
                        *(_WORD *)(v166 + 2 * (v106 + v147)) = *(_WORD *)(a3 + 80);
                        *(_WORD *)(v166 + 2 * (v106 + (unsigned __int16)(v147 + 1))) = *(_WORD *)(a3 + 80) - v154 + 1;
                        *(_WORD *)(v166 + 2 * (v106 + (unsigned __int16)(v147 + 2))) = *(_WORD *)(a3 + 80) - v154;
                        *(_WORD *)(v166 + 2 * (v106 + (unsigned __int16)(v147 + 3))) = *(_WORD *)(a3 + 80);
                        unsigned __int16 v167 = v147 + 5;
                        *(_WORD *)(v166 + 2 * (v106 + (unsigned __int16)(v147 + 4))) = *(_WORD *)(a3 + 80) + 1;
                        v147 += 6;
                        *(_WORD *)(v166 + 2 * (v106 + v167)) = *(_WORD *)(a3 + 80) - v154 + 1;
                      }
                      long long v206 = v215;
                      double v207 = v161;
                      double v208 = v162;
                      double v209 = v163;
                      double v210 = v164;
                      long long v211 = v229;
                      int v212 = v230;
                      char v213 = v165;
                      *(void *)uint64_t v214 = v228[0];
                      *(_DWORD *)&v214[7] = *(_DWORD *)((char *)v228 + 7);
                      v217((uint64_t)v216, (uint64_t)&v206, v161, v162, -1.0, v156, v157, v159, v158);
                      uint64_t v168 = *(void *)(a3 + 96) + 12 * *(unsigned __int16 *)(a3 + 80);
                      float v169 = *(float *)(v168 - 4);
                      if (v169 >= *(float *)(a3 + 8)) {
                        float v169 = *(float *)(a3 + 8);
                      }
                      *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3, *(float32x2_t *)(v168 - 12)), *(int8x8_t *)(v168 - 12), *(int8x8_t *)a3);
                      *(float *)(a3 + 8) = v169;
                      float v170 = *(float *)(v168 - 4);
                      if (v170 <= *(float *)(a3 + 20)) {
                        float v170 = *(float *)(a3 + 20);
                      }
                      *(int8x8_t *)(a3 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v168 - 12), *(float32x2_t *)(a3 + 12)), *(int8x8_t *)(v168 - 12), *(int8x8_t *)(a3 + 12));
                      *(float *)(a3 + 20) = v170;
                      --v153;
                    }
                    while (v153);
                  }
                  if (v202)
                  {
                    uint64_t v171 = *(void *)(a3 + 176);
                    int v172 = v106 + v147;
                    *(_WORD *)(v171 + 2 * (v172 - 2)) = v190;
                    *(_WORD *)(v171 + 2 * (v172 - 1)) = v190 - v154;
                    *(_WORD *)(v171 + 2 * (v172 - 5)) = v190 - v154;
                  }
                  if ((v192 & 1) != 0 && v199)
                  {
                    uint64_t v173 = v199;
                    do
                    {
                      uint64_t v174 = (long long *)(v205 + 80 * (v173 - 1));
                      long long v215 = *v174;
                      double v175 = *((double *)v174 + 2);
                      double v176 = *((double *)v174 + 3);
                      double v177 = *((double *)v174 + 4);
                      double v178 = *((double *)v174 + 5);
                      long long v229 = v174[3];
                      int v230 = *((_DWORD *)v174 + 16);
                      char v179 = *((unsigned char *)v174 + 68);
                      v228[0] = *(void *)((char *)v174 + 69);
                      *(_DWORD *)((char *)v228 + 7) = *((_DWORD *)v174 + 19);
                      if (v179)
                      {
                        long long v206 = v215;
                        double v207 = v175;
                        double v208 = v176;
                        double v209 = v177;
                        double v210 = v178;
                        long long v211 = v229;
                        int v212 = v230;
                        char v213 = v179;
                        *(void *)uint64_t v214 = v228[0];
                        *(_DWORD *)&v214[7] = *(_DWORD *)((char *)v228 + 7);
                        v217((uint64_t)v216, (uint64_t)&v206, v177, v178, -1.0, v156, v157, v196, v194);
                      }
                      long long v206 = v215;
                      double v207 = v175;
                      double v208 = v176;
                      double v209 = v177;
                      double v210 = v178;
                      long long v211 = v229;
                      int v212 = v230;
                      char v213 = v179;
                      *(void *)uint64_t v214 = v228[0];
                      *(_DWORD *)&v214[7] = *(_DWORD *)((char *)v228 + 7);
                      v217((uint64_t)v216, (uint64_t)&v206, v175, v176, -1.0, v156, v157, v196, v194);
                      --v173;
                    }
                    while (v173);
                  }
                  uint64_t v151 = v202 + 1;
                  unint64_t v150 = *(unsigned int *)(a3 + 40);
                  uint64_t v153 = v199;
                }
                while (v202 + 1 < v150);
                unint64_t v146 = v184;
                uint64_t v149 = v188;
              }
              ++v149;
            }
            while (v149 != v186);
            unint64_t v145 = *(unsigned int *)(v180 + 48);
          }
          ++v146;
        }
        while (v146 < v145);
      }
      v224((uint64_t)v223, 0, *(unsigned int *)(a3 + 160) / 3uLL, *(UInt8 **)(a3 + 176), *(_DWORD *)(a3 + 160));
    }
  }
}

void sub_1B65E0F50(uint64_t a1, char a2, unsigned int a3, UInt8 *bytes, unsigned int a5)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 24) || *(unsigned char *)(a1 + 40))
  {
    CFDataRef v9 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 2 * a5);
    uint64_t v10 = sub_1B63D0314();
    sub_1B63D05D4(v10, a2, a3, v9, 2, v11, v12, v13);
    if (v9) {
      CFRelease(v9);
    }
    free(bytes);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(v14 + 112);
    uint64_t v16 = *(unsigned __int16 *)(v14 + 82);
    *(_WORD *)(v14 + 82) = v16 + 1;
    *(void *)(v15 + 8 * v16) = v10;
  }
}

float sub_1B65E1004(uint64_t a1, uint64_t a2, double a3, double a4, float a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(unsigned __int16 *)(v9 + 80);
  uint64_t v11 = (float32x2_t *)(*(void *)(v9 + 96) + 12 * v10);
  uint64_t v12 = (float *)(*(void *)(v9 + 104) + 12 * v10);
  float v13 = (float)(*(float *)(a1 + 56) - *(float *)(a2 + 64)) + a6 * *(float *)(a2 + 64);
  *uint64_t v11 = vcvt_f32_f64(vmlaq_n_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)a2), a7), vaddq_f64(*(float64x2_t *)(a2 + 48), *(float64x2_t *)(a1 + 40)), 1.0 - a7));
  v11[1].f32[0] = v13 * a5;
  float result = a3 * a9;
  float v15 = a4 * a9;
  float v16 = a8 * a5;
  float *v12 = result;
  v12[1] = v15;
  void v12[2] = v16;
  *(_WORD *)(v9 + 80) = v10 + 1;
  return result;
}

uint64_t sub_1B65E109C(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = (long long *)(*(void *)(a1 + 72) + v2);
      long long v5 = *v4;
      long long v6 = v4[1];
      uint64_t v65 = *((void *)v4 + 4);
      *(_OWORD *)values = v5;
      *(_OWORD *)CFTypeRef cf = v6;
      sub_1B65DCD2C(values);
      ++v3;
      v2 += 40;
    }
    while (v3 < *(unsigned int *)(a1 + 28));
  }
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7) {
    free(v7);
  }
  uint64_t v8 = *(unsigned __int16 *)(a1 + 80);
  if (*(_WORD *)(a1 + 80))
  {
    float v9 = *(float *)a1;
    float v10 = *(float *)(a1 + 4);
    float v11 = *(float *)(a1 + 8);
    float v12 = *(float *)(a1 + 12) - *(float *)a1;
    float v13 = *(float *)(a1 + 16) - v10;
    float v14 = *(float *)(a1 + 20) - v11;
    float v15 = (float *)(*(void *)(a1 + 96) + 8);
    float v16 = (float *)(*(void *)(a1 + 88) + 4);
    float v17 = (float *)(*(void *)(a1 + 104) + 4);
    uint64_t v18 = *(unsigned __int16 *)(a1 + 80);
    do
    {
      float v20 = *(v15 - 2);
      float v19 = *(v15 - 1);
      float v21 = *v15;
      float v22 = *(v17 - 1);
      float v23 = v17[1];
      float v24 = fabsf(v22);
      float v25 = fabsf(*v17);
      float v26 = fabsf(v23);
      if (v24 <= v25)
      {
        float v29 = (float)(v20 - v9) / v12;
        if (v25 <= v26)
        {
          BOOL v28 = v23 <= 0.0;
          float v33 = 1.0 - (float)((float)(v19 - v10) / v13);
          if (v28) {
            float v30 = 1.0 - v29;
          }
          else {
            float v30 = v29;
          }
          float v31 = v33;
        }
        else
        {
          float v30 = 1.0 - v29;
          float v31 = (float)(v21 - v11) / v14;
          if (*v17 > 0.0) {
            float v30 = v29;
          }
        }
      }
      else
      {
        if (v24 <= v26)
        {
          float v27 = (float)(v20 - v9) / v12;
          BOOL v28 = v23 <= 0.0;
        }
        else
        {
          float v27 = (float)(v21 - v11) / v14;
          BOOL v28 = v22 <= 0.0;
        }
        float v32 = 1.0 - (float)((float)(v19 - v10) / v13);
        if (v28) {
          float v30 = 1.0 - v27;
        }
        else {
          float v30 = v27;
        }
        float v31 = v32;
      }
      *(v16 - 1) = v30;
      *float v16 = v31;
      v15 += 3;
      v16 += 2;
      v17 += 3;
      --v18;
    }
    while (v18);
    CFIndex v34 = 12 * v8;
  }
  else
  {
    CFIndex v34 = 0;
  }
  CFAllocatorRef v35 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v34);
  CFDataAppendBytes(Mutable, *(const UInt8 **)(a1 + 96), 12 * *(unsigned __int16 *)(a1 + 80));
  values[0] = (void *)sub_1B641CF98(Mutable, 0, *(unsigned __int16 *)(a1 + 80), 3, 1, v37, v38, v39);
  if (Mutable) {
    CFRelease(Mutable);
  }
  uint64_t v40 = CFDataCreateMutable(v35, 12 * *(unsigned __int16 *)(a1 + 80));
  CFDataAppendBytes(v40, *(const UInt8 **)(a1 + 104), 12 * *(unsigned __int16 *)(a1 + 80));
  values[1] = (void *)sub_1B641CF98(v40, 1, *(unsigned __int16 *)(a1 + 80), 3, 1, v41, v42, v43);
  if (v40) {
    CFRelease(v40);
  }
  float32x2_t v44 = CFDataCreateMutable(v35, 8 * *(unsigned __int16 *)(a1 + 80));
  CFDataAppendBytes(v44, *(const UInt8 **)(a1 + 88), 8 * *(unsigned __int16 *)(a1 + 80));
  cf[0] = (CFTypeRef)sub_1B641CF98(v44, 3, *(unsigned __int16 *)(a1 + 80), 2, 1, v45, v46, v47);
  if (v44) {
    CFRelease(v44);
  }
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 88));
  char v62 = 0;
  __int16 v61 = 0;
  uint64_t v48 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFArrayRef v49 = CFArrayCreate(v35, (const void **)values, 3, MEMORY[0x1E4F1D510]);
  CFArrayRef v50 = CFArrayCreate(v35, *(const void ***)(a1 + 112), *(unsigned __int16 *)(a1 + 82), v48);
  unsigned int v51 = *(unsigned __int16 *)(a1 + 82);
  if (*(_WORD *)(a1 + 82))
  {
    unint64_t v52 = 0;
    do
    {
      int v53 = *(const void **)(*(void *)(a1 + 112) + 8 * v52);
      if (v53)
      {
        CFRelease(v53);
        *(void *)(*(void *)(a1 + 112) + 8 * v52) = 0;
        unsigned int v51 = *(unsigned __int16 *)(a1 + 82);
      }
      ++v52;
    }
    while (v52 < v51);
  }
  free(*(void **)(a1 + 112));
  uint64_t v59 = sub_1B63DC55C(v49, v50, (uint64_t)&v61, v54, v55, v56, v57, v58);
  if (v50) {
    CFRelease(v50);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (values[0])
  {
    CFRelease(values[0]);
    values[0] = 0;
  }
  if (values[1])
  {
    CFRelease(values[1]);
    values[1] = 0;
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v59;
}

uint64_t sub_1B65E143C(uint64_t a1, long long *a2)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v4 = a2[1];
  long long v19 = *a2;
  long long v20 = v4;
  long long v21 = a2[2];
  uint64_t v22 = *((void *)a2 + 6);
  sub_1B65DFA54((uint64_t)&v19, (uint64_t)v23);
  if (*((float *)a2 + 3) <= 0.0)
  {
    int v6 = 0;
  }
  else
  {
    int v5 = *((_DWORD *)a2 + 4);
    if (v5 == 2) {
      int v6 = 1;
    }
    else {
      int v6 = (v5 != 1) + 1;
    }
  }
  float v7 = *((float *)a2 + 2);
  unsigned int v8 = *(_DWORD *)(a1 + 24) << (v7 > 0.0);
  if (v7 <= 0.0) {
    unsigned int v9 = v6 + 1;
  }
  else {
    unsigned int v9 = v6 + 3;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 48);
  if (v10)
  {
    uint64_t v11 = 0;
    int v12 = HIDWORD(v24) * v6 + 2 * (v7 > 0.0);
    do
    {
      uint64_t v13 = *(void *)(a1 + 40) + 32 * v11;
      uint64_t v14 = *(unsigned int *)(v13 + 8);
      if (v14)
      {
        float v15 = (int *)(*(void *)v13 + 12);
        do
        {
          int v16 = *v15;
          v15 += 10;
          v8 += v12 * v16;
          --v14;
        }
        while (v14);
      }
      ++v11;
    }
    while (v11 != v10);
  }
  sub_1B65DFBFC(v8, v9, (uint64_t)v23, 0);
  long long v17 = a2[1];
  long long v19 = *a2;
  long long v20 = v17;
  long long v21 = a2[2];
  uint64_t v22 = *((void *)a2 + 6);
  sub_1B65DFD10(a1, (uint64_t)&v19, (uint64_t)v23, 1, *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));
  uint64_t result = sub_1B65E109C((uint64_t)v23);
  if (!result) {
    return -[VFXMesh __createCFObject]_0();
  }
  return result;
}

uint64_t sub_1B65E15A0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float64_t a9, float64_t a10)
{
  if (a1)
  {
    uint64_t v66 = 0;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    memset(v56, 0, sizeof(v56));
    long long v12 = a2[1];
    long long v52 = *a2;
    long long v53 = v12;
    long long v54 = a2[2];
    uint64_t v55 = *((void *)a2 + 6);
    sub_1B65DFA54((uint64_t)&v52, (uint64_t)v56);
    float v13 = *((float *)a2 + 2);
    float v14 = *((float *)a2 + 3);
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) < 1)
    {
      unsigned int v16 = 0;
      unsigned int v15 = 0;
    }
    else
    {
      unsigned int v15 = 0;
      unsigned int v16 = 0;
      CFIndex v17 = 0;
      int v18 = v13 > 0.0;
      int v19 = 2 * (v14 > 0.0);
      if (v13 > 0.0) {
        int v20 = v19 + 3;
      }
      else {
        int v20 = v19 + 1;
      }
      int v21 = HIDWORD(v57) * v19 + 2 * v18;
      do
      {
        ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v17);
        if (sub_1B65DF4F0((CFIndex)ValueAtIndex))
        {
          CFIndex v23 = 0;
          do
          {
            long long v24 = sub_1B65DF514(ValueAtIndex, v23);
            v15 += *((_DWORD *)v24 + 6) << v18;
            uint64_t v25 = *((unsigned int *)v24 + 12);
            if (v25)
            {
              for (uint64_t i = 0; i != v25; ++i)
              {
                uint64_t v27 = (uint64_t)v24[5] + 32 * i;
                uint64_t v28 = *(unsigned int *)(v27 + 8);
                if (v28)
                {
                  long long v29 = (int *)(*(void *)v27 + 12);
                  do
                  {
                    int v30 = *v29;
                    v29 += 10;
                    v15 += v21 * v30;
                    --v28;
                  }
                  while (v28);
                }
              }
            }
            v16 += v20;
            CFIndex v23 = (v23 + 1);
          }
          while (v23 < sub_1B65DF4F0((CFIndex)ValueAtIndex));
        }
        ++v17;
      }
      while (v17 < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)));
    }
    sub_1B65DFBFC(v15, v16, (uint64_t)v56, *(unsigned char *)(a3 + 34));
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    uint64_t v33 = (CGPoint *)malloc_type_malloc(16 * Count, 0x1000040451B5BE8uLL);
    v67.locatiouint64_t n = 0;
    v67.length = 0;
    CTFrameGetLineOrigins(*(CTFrameRef *)(a1 + 16), v67, v33);
    CFIndex v49 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    if (v49 >= 1)
    {
      CFIndex v34 = 0;
      v35.f64[0] = a9;
      v35.f64[1] = a10;
      float64x2_t v51 = v35;
      do
      {
        uint64_t v36 = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v34);
        unsigned int v37 = sub_1B65DF4F0((CFIndex)v36);
        uint64_t v38 = (float64x2_t *)malloc_type_malloc(16 * v37, 0x1000040451B5BE8uLL);
        sub_1B65DF414((uint64_t)v36, (uint64_t)v38, v37, v39);
        if (v37)
        {
          for (CFIndex j = 0; j != v37; ++j)
          {
            uint64_t v41 = sub_1B65DF514(v36, j);
            char v43 = v34 == v49 - 1 && v37 - 1 == j;
            float64x2_t v44 = vaddq_f64(vaddq_f64(v51, (float64x2_t)v33[v34]), v38[j]);
            long long v45 = a2[1];
            long long v52 = *a2;
            long long v53 = v45;
            long long v54 = a2[2];
            uint64_t v55 = *((void *)a2 + 6);
            sub_1B65DFD10((uint64_t)v41, (uint64_t)&v52, (uint64_t)v56, v43, v44.f64[0], v44.f64[1]);
          }
        }
        free(v38);
        ++v34;
      }
      while (v34 != v49);
    }
    free(v33);
    uint64_t result = sub_1B65E109C((uint64_t)v56);
    if (!result) {
      return -[VFXMesh __createCFObject]_0();
    }
  }
  else
  {
    sub_1B63F2F54(16, @"Error: CFXMeshCreateTextFrame: CFXTextFrameRef object is NULL, will create NULL mesh\n", a3, a4, a5, a6, a7, a8, v46);
    return 0;
  }
  return result;
}

void sub_1B65E18B4()
{
  if (!qword_1E9DDBCD0) {
    qword_1E9DDBCD0 = sub_1B63C8D10(&qword_1E9DDBCD0);
  }
}

uint64_t sub_1B65E18F8(uint64_t a1)
{
  if (qword_1E9DDBCD8 != -1) {
    dispatch_once(&qword_1E9DDBCD8, &unk_1F0FB5F88);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1E9DDBCD0, 0x28uLL);
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 != sub_1B649F5F4(a1, v4, v5, v6, v7, v8, v9, v10))
  {
    int v18 = *(const void **)(v2 + 24);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(v2 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    int v19 = (const void *)sub_1B649F5F4(a1, v11, v12, v13, v14, v15, v16, v17);
    if (v19) {
      int v19 = CFRetain(v19);
    }
    *(void *)(v2 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
  }
  return v2;
}

uint64_t sub_1B65E199C(void *a1, uint64_t a2)
{
  if (qword_1E9DDBCD8 != -1) {
    dispatch_once(&qword_1E9DDBCD8, &unk_1F0FB5F88);
  }
  uint64_t v4 = sub_1B63C8D44(qword_1E9DDBCD0, 0x28uLL);
  *(void *)(v4 + 16) = a2;
  CFTypeRef v5 = *(CFTypeRef *)(v4 + 24);
  CFTypeRef v6 = (CFTypeRef)a1[3];
  if (v5 != v6)
  {
    if (v5)
    {
      CFRelease(v5);
      *(void *)(v4 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
      CFTypeRef v6 = (CFTypeRef)a1[3];
    }
    if (v6) {
      CFTypeRef v6 = CFRetain(v6);
    }
    *(void *)(v4 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  }
  CFTypeRef v7 = *(CFTypeRef *)(v4 + 32);
  CFTypeRef v8 = (CFTypeRef)a1[4];
  if (v7 != v8)
  {
    if (v7)
    {
      CFRelease(*(CFTypeRef *)(v4 + 32));
      *(void *)(v4 + 32) = 0;
      CFTypeRef v8 = (CFTypeRef)a1[4];
    }
    if (v8) {
      CFTypeRef v8 = CFRetain(v8);
    }
    *(void *)(v4 + 32) = v8;
  }
  CFTypeRef v9 = *(CFTypeRef *)(v4 + 40);
  CFTypeRef v10 = (CFTypeRef)a1[5];
  if (v9 != v10)
  {
    if (v9)
    {
      CFRelease(*(CFTypeRef *)(v4 + 40));
      *(void *)(v4 + 40) = 0;
      CFTypeRef v10 = (CFTypeRef)a1[5];
    }
    if (v10) {
      CFTypeRef v10 = CFRetain(v10);
    }
    *(void *)(v4 + 40) = v10;
  }
  CFTypeRef v11 = *(CFTypeRef *)(v4 + 48);
  CFTypeRef v12 = (CFTypeRef)a1[6];
  if (v11 != v12)
  {
    if (v11)
    {
      CFRelease(*(CFTypeRef *)(v4 + 48));
      *(void *)(v4 + 48) = 0;
      CFTypeRef v12 = (CFTypeRef)a1[6];
    }
    if (v12) {
      CFTypeRef v12 = CFRetain(v12);
    }
    *(void *)(v4 + 48) = v12;
  }
  return v4;
}

BOOL sub_1B65E1ACC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  return !a1[4] && !a1[5] && a1[6] == 0;
}

BOOL sub_1B65E1B38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  if (sub_1B65E1ACC(a1, a2, a3, a4, a5, a6, a7, a8)) {
    return 0;
  }
  if (a1[4]) {
    return 1;
  }
  uint64_t v10 = a1[5];
  if (!v10) {
    return 1;
  }
  return !sub_1B6524E80(v10);
}

uint64_t sub_1B65E1BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  return *(void *)(a1 + 24);
}

void sub_1B65E1C08(void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  CFTypeRef v10 = (CFTypeRef)a1[3];
  if (v10 != cf)
  {
    if (v10)
    {
      CFRelease(v10);
      a1[3] = 0;
    }
    if (cf) {
      CFTypeRef v11 = CFRetain(cf);
    }
    else {
      CFTypeRef v11 = 0;
    }
    a1[3] = v11;
    uint64_t v12 = a1[4];
    if (v12) {
      sub_1B6588E6C(v12, cf, a3, a4, a5, a6, a7, a8);
    }
    uint64_t v13 = a1[5];
    if (v13) {
      sub_1B6525DD8(v13);
    }
    sub_1B6595A0C(@"kCFXNotificationDeformerStackDidChange", a1, 0, 1u);
  }
}

uint64_t sub_1B65E1CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  return *(void *)(a1 + 32);
}

void sub_1B65E1D24(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  CFTypeRef v10 = *(CFTypeRef *)(a1 + 32);
  if (v10 != cf)
  {
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 32) = 0;
    }
    if (cf)
    {
      *(void *)(a1 + 32) = CFRetain(cf);
      sub_1B6588E6C((uint64_t)cf, *(const void **)(a1 + 24), v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(void *)(a1 + 32) = 0;
    }
    uint64_t v17 = *(void *)(a1 + 40);
    if (v17)
    {
      sub_1B6525DD8(*(void *)(a1 + 40));
      uint64_t v18 = sub_1B63CD09C(v17);
      if (v18) {
        sub_1B6531BD4(v18, cf, v19, v20, v21, v22, v23, v24);
      }
    }
    sub_1B6595A0C(@"kCFXNotificationDeformerStackDidChange", (const void *)a1, 0, 1u);
  }
}

uint64_t sub_1B65E1E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  return *(void *)(a1 + 40);
}

void sub_1B65E1E60(void *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  CFTypeRef v10 = (CFTypeRef)a1[5];
  if (v10 != cf)
  {
    if (v10)
    {
      CFRelease(v10);
      a1[5] = 0;
    }
    if (cf)
    {
      a1[5] = CFRetain(cf);
      sub_1B6525DD8((uint64_t)cf);
      uint64_t v11 = (const void *)a1[4];
      if (v11)
      {
        uint64_t v12 = sub_1B63CD09C((uint64_t)cf);
        if (v12) {
          sub_1B6531BD4(v12, v11, v13, v14, v15, v16, v17, v18);
        }
      }
    }
    else
    {
      a1[5] = 0;
    }
    sub_1B6595A0C(@"kCFXNotificationDeformerStackDidChange", a1, 0, 1u);
  }
}

uint64_t sub_1B65E1F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  }
  return *(void *)(a1 + 48);
}

void sub_1B65E1F90(void *a1, const __CFArray *cf)
{
  CFArrayRef v2 = cf;
  if (cf && !CFArrayGetCount(cf)) {
    CFArrayRef v2 = 0;
  }
  CFArrayRef v4 = (const __CFArray *)a1[6];
  if (v4 != v2)
  {
    if (v4)
    {
      CFRelease(v4);
      a1[6] = 0;
    }
    if (v2) {
      CFTypeRef v5 = CFRetain(v2);
    }
    else {
      CFTypeRef v5 = 0;
    }
    a1[6] = v5;
    sub_1B6595A0C(@"kCFXNotificationDeformerStackDidChange", a1, 0, 1u);
    uint64_t v13 = (float32x4_t *)a1[2];
    sub_1B649F73C(v13, v6, v7, v8, v9, v10, v11, v12);
  }
}

void sub_1B65E2034(uint64_t a1, uint64_t a2)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 48);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1B65E20A4;
  v3[3] = &unk_1E61450C0;
  v3[4] = a2;
  sub_1B63CC9FC(v2, (uint64_t)v3);
}

uint64_t sub_1B65E20A4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_1B65E2454;
  v6[3] = &unk_1E6145110;
  v6[4] = v4;
  char v7 = 0;
  return objc_msgSend__enumerateDependencyNodesUsingBlock_(a3, a2, (uint64_t)v6, a4);
}

uint64_t sub_1B65E2120(uint64_t *a1, uint64_t a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  CFArrayRef v4 = (const __CFArray *)a1[6];
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = sub_1B65E220C;
  v13[3] = &unk_1E61450E8;
  v13[4] = &v14;
  v13[5] = a2;
  sub_1B63CC9FC(v4, (uint64_t)v13);
  if (!*((unsigned char *)v15 + 24))
  {
    uint64_t v10 = a1[5];
    if (!v10)
    {
      uint64_t v11 = 0;
      goto LABEL_5;
    }
    sub_1B6525818(v10, a1[2], a2, v5, v6, v7, v8, v9);
  }
  uint64_t v11 = 1;
LABEL_5:
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_1B65E21F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65E220C(uint64_t result, const char *a2, void *a3, uint64_t a4)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v4 = result;
    uint64_t result = objc_msgSend__getDeformedMeshBoundingBox_(a3, a2, *(void *)(result + 40), a4);
    *(unsigned char *)(*(void *)(*(void *)(v4 + 32) + 8) + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  }
  return result;
}

void sub_1B65E225C(void *a1)
{
  sub_1B6595A0C(@"kCFXNotificationDeformerStackWillDie", a1, 0, 1u);
  CFArrayRef v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
}

CFStringRef sub_1B65E22DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = sub_1B65E1ACC(a1, a2, a3, a4, a5, a6, a7, a8);
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v9) {
    return CFStringCreateWithFormat(v10, 0, @"<CFXDeformerStack %p>", a1);
  }
  CFMutableArrayRef Mutable = CFStringCreateMutable(v10, 0);
  CFStringAppendFormat(Mutable, 0, @"<CFXDeformerStack %p (geometry: %p)\n", a1, a1[3]);
  if (a1[4]) {
    CFStringAppendFormat(Mutable, 0, @"  morpher: %p\n", a1[4]);
  }
  if (a1[5]) {
    CFStringAppendFormat(Mutable, 0, @"  skinner: %p\n", a1[5]);
  }
  CFArrayRef v13 = (const __CFArray *)a1[6];
  if (v13)
  {
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    void v14[2] = sub_1B65E2404;
    v14[3] = &unk_1E6141CF8;
    v14[4] = Mutable;
    sub_1B63CC9FC(v13, (uint64_t)v14);
  }
  CFStringAppend(Mutable, @">");
  return Mutable;
}

void sub_1B65E2404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(__CFString **)(a1 + 32);
  uint64_t v5 = (objc_class *)objc_opt_class();
  uint64_t v6 = NSStringFromClass(v5);
  CFStringAppendFormat(v4, 0, @"  %@: %p\n", v6, a3);
}

uint64_t sub_1B65E2454(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_nodeRef(a3, a2, (uint64_t)a3, a4);
  uint64_t result = sub_1B649F5A8(v5, v6, v7, v8, v9, v10, v11, v12);
  if (result)
  {
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v14();
  }
  return result;
}

float sub_1B65E2620(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  sub_1B63D11F0(a1, 0, a3, a4, a5, a6, a7, a8, (uint64_t)v19);
  float v15 = 0.0;
  if (*(void *)v19 && BYTE10(v20) != 4)
  {
    unsigned int v16 = sub_1B63D1414(SBYTE10(v20), v19[2], v9, v10, v11, v12, v13, v14);
    switch(BYTE11(v20))
    {
      case 4u:
        double v17 = sub_1B65E2914(*(uint64_t *)v19, v16, a2);
        return *(float *)&v17;
      case 2u:
        double v17 = sub_1B65E2810(*(uint64_t *)v19, v16, a2);
        return *(float *)&v17;
      case 1u:
        double v17 = sub_1B65E26E4(*(uint64_t *)v19, v16, a2);
        return *(float *)&v17;
    }
  }
  return v15;
}

double sub_1B65E26E4(uint64_t a1, unsigned int a2, size_t __len)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = __len;
  if (__len) {
    memset(&__b, 255, __len);
  }
  if (!a2) {
    return 0.0;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  int v8 = __b;
  do
  {
    int v9 = *(unsigned __int8 *)(a1 + v6);
    if (!v15) {
      goto LABEL_11;
    }
    if (v8 != v9)
    {
      uint64_t v10 = 1;
      do
      {
        unint64_t v11 = v10;
        if (v15 == v10) {
          break;
        }
        int v12 = v14[v10++ - 1];
      }
      while (v12 != v9);
      if (v11 >= v15)
      {
LABEL_11:
        memmove(v14, &__b, v15 - 1);
        unsigned __int8 __b = v9;
        ++v7;
        int v8 = v9;
      }
    }
    ++v6;
  }
  while (v6 != a2);
  *(float *)&double result = (float)v7 / (float)(a2 / 3);
  return result;
}

double sub_1B65E2810(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v15 = a3;
  if (a3) {
    memset(__b, 255, 2 * a3);
  }
  if (!a2) {
    return 0.0;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  int v8 = __b[0];
  do
  {
    int v9 = *(unsigned __int16 *)(a1 + 2 * v6);
    if (!v15) {
      goto LABEL_11;
    }
    if (v8 != v9)
    {
      uint64_t v10 = 1;
      do
      {
        unint64_t v11 = v10;
        if (v15 == v10) {
          break;
        }
        int v12 = (unsigned __int16)__b[v10++];
      }
      while (v12 != v9);
      if (v11 >= v15)
      {
LABEL_11:
        memmove(&v14, __b, 2 * (v15 - 1));
        __b[0] = v9;
        ++v7;
        int v8 = v9;
      }
    }
    ++v6;
  }
  while (v6 != a2);
  *(float *)&double result = (float)v7 / (float)(a2 / 3);
  return result;
}

double sub_1B65E2914(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v15 = a3;
  if (a3) {
    memset(__b, 255, 4 * a3);
  }
  if (!a2) {
    return 0.0;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  int v8 = __b[0];
  do
  {
    int v9 = *(_DWORD *)(a1 + 4 * v6);
    if (!v15) {
      goto LABEL_11;
    }
    if (v8 != v9)
    {
      uint64_t v10 = 1;
      do
      {
        unint64_t v11 = v10;
        if (v15 == v10) {
          break;
        }
        int v12 = __b[v10++];
      }
      while (v12 != v9);
      if (v11 >= v15)
      {
LABEL_11:
        memmove(&v14, __b, 4 * (v15 - 1));
        __b[0] = v9;
        ++v7;
        int v8 = v9;
      }
    }
    ++v6;
  }
  while (v6 != a2);
  *(float *)&double result = (float)v7 / (float)(a2 / 3);
  return result;
}

CFDataRef sub_1B65E2A20(const __CFData *a1, int a2, int a3)
{
  BytePtr = (unsigned int *)CFDataGetBytePtr(a1);
  switch(a3)
  {
    case 4:
      if (a2)
      {
        unsigned int v12 = 0;
        uint64_t v13 = (3 * a2);
        uint64_t v14 = BytePtr;
        do
        {
          unsigned int v16 = *v14++;
          unsigned int v15 = v16;
          if (v12 <= v16) {
            unsigned int v12 = v15;
          }
          --v13;
        }
        while (v13);
        int v17 = v12 + 1;
      }
      else
      {
        int v17 = 1;
      }
      return sub_1B65E2CBC(BytePtr, a2, v17);
    case 2:
      if (a2)
      {
        LOWORD(v18) = 0;
        uint64_t v19 = (3 * a2);
        long long v20 = BytePtr;
        do
        {
          unsigned int v22 = *(unsigned __int16 *)v20;
          long long v20 = (unsigned int *)((char *)v20 + 2);
          unsigned int v21 = v22;
          unsigned int v18 = (unsigned __int16)v18;
          if ((unsigned __int16)v18 <= v22) {
            unsigned int v18 = v21;
          }
          --v19;
        }
        while (v19);
        int v23 = v18 + 1;
      }
      else
      {
        int v23 = 1;
      }
      return sub_1B65E2C0C((unsigned __int16 *)BytePtr, a2, v23);
    case 1:
      if (a2)
      {
        LOBYTE(v6) = 0;
        uint64_t v7 = (3 * a2);
        int v8 = BytePtr;
        do
        {
          unsigned int v10 = *(unsigned __int8 *)v8;
          int v8 = (unsigned int *)((char *)v8 + 1);
          unsigned int v9 = v10;
          unsigned int v6 = v6;
          if (v6 <= v10) {
            unsigned int v6 = v9;
          }
          --v7;
        }
        while (v7);
        int v11 = v6 + 1;
      }
      else
      {
        int v11 = 1;
      }
      return sub_1B65E2B5C((unsigned __int8 *)BytePtr, a2, v11);
    default:
      return 0;
  }
}

CFDataRef sub_1B65E2B5C(unsigned __int8 *a1, int a2, int a3)
{
  size_t v6 = 3 * a2;
  uint64_t v7 = (UInt8 *)malloc_type_calloc(1uLL, v6, 0x3DFFCD08uLL);
  sub_1B65E3554((uint64_t)v9);
  if (sub_1B65E2F18((uint64_t)v9, (uint64_t)v7, a1, a2, a3)) {
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, v6, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  }
  free(v7);
  return 0;
}

CFDataRef sub_1B65E2C0C(unsigned __int16 *a1, int a2, int a3)
{
  size_t v6 = 3 * a2;
  uint64_t v7 = (UInt8 *)malloc_type_calloc(2uLL, v6, 0x3DFFCD08uLL);
  sub_1B65E3554((uint64_t)v9);
  if (sub_1B65E36BC((uint64_t)v9, (uint64_t)v7, a1, a2, a3)) {
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, 2 * v6, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  }
  free(v7);
  return 0;
}

CFDataRef sub_1B65E2CBC(unsigned int *a1, int a2, int a3)
{
  size_t v6 = 3 * a2;
  uint64_t v7 = (UInt8 *)malloc_type_calloc(4uLL, v6, 0x3DFFCD08uLL);
  sub_1B65E3554((uint64_t)v9);
  if (sub_1B65E3CF8((uint64_t)v9, (uint64_t)v7, a1, a2, a3)) {
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, 4 * v6, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  }
  free(v7);
  return 0;
}

void sub_1B65E2D6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88))
  {
    CFDataRef v2 = sub_1B65E2A20(*(const __CFData **)(a1 + 96), *(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 80));
    if (v2)
    {
      CFDataRef v3 = v2;
      sub_1B63D0E24(a1, *(_DWORD *)(a1 + 104), v2, *(unsigned char *)(a1 + 80));
      CFRelease(v3);
    }
  }
}

_DWORD *sub_1B65E2DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1B641D478(a1, a2, a3, a4, a5, a6, a7, a8);
  __int16 v10 = v9;
  uint64_t v12 = v11;
  uint64_t v19 = malloc_type_calloc(v11, 4uLL, 0x100004052888210uLL);
  float32x4_t v22 = 0uLL;
  long long v32 = 0u;
  long long v33 = 0u;
  int v34 = 1065353216;
  if (v12)
  {
    unsigned int v23 = 0;
    for (uint64_t i = 0; i != v12; ++i)
    {
      *(double *)v25.i64 = sub_1B65D6198(v10, (const float *)(v8 + v23), v13, v14, v15, v16, v17, v18, v22, v20, v21);
      float32x4_t v30 = v25;
      float32x4_t v31 = v25;
      long long v26 = sub_1B65E4338(&v32, &v31);
      if (v26)
      {
        __int32 v27 = v26[2].i32[0];
      }
      else
      {
        float32x4_t v31 = v30;
        float64x2_t v35 = &v31;
        sub_1B65E4408((uint64_t)&v32, &v31, (uint64_t)&unk_1B6E4FDF8, &v35)[2].i32[0] = i;
        __int32 v27 = i;
      }
      v19[i] = v27;
      v23 += HIBYTE(v10);
    }
    uint64_t v28 = *((void *)&v33 + 1);
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (v28 == v12)
  {
    free(v19);
    uint64_t v19 = 0;
  }
  sub_1B6491404((uint64_t)&v32);
  return v19;
}

uint64_t sub_1B65E2F18(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v91 = a1;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  size_t v8 = a5;
  __int16 v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    unsigned int v11 = a3;
    do
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      int v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  uint64_t v88 = a2;
  uint64_t v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  uint64_t v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  uint64_t v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  int v18 = a4 + 7;
  if (a4 < -7) {
    int v18 = a4 + 14;
  }
  uint64_t v87 = (uint64_t)v18 >> 3;
  uint64_t v19 = (unsigned __int8 *)malloc_type_malloc(v87, 0x6AD5D4E6uLL);
  float v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  uint64_t v86 = 12 * a4;
  float v21 = (char *)malloc_type_malloc(v86, 0x3B81A4AuLL);
  bzero(v19, v87);
  bzero(v20, 2 * a4);
  bzero(v21, v86);
  if (a5 >= 1)
  {
    int v22 = 0;
    uint64_t v23 = a5;
    uint64_t v24 = v15;
    float32x4_t v25 = v9;
    long long v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  uint64_t v27 = v91;
  if (a4 >= 1)
  {
    uint64_t v28 = 0;
    long long v29 = a3;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v31 = v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    uint64_t v32 = 0;
    do
    {
      uint64_t v33 = v9[v32];
      if (v9[v32])
      {
        unsigned int v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0) {
          int v35 = 0;
        }
        else {
          int v35 = *(_DWORD *)(v27 + 4 * v34);
        }
        if (v33 <= 0x1F) {
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
        }
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        unint64_t v36 = 0;
        unsigned int v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    unsigned int v40 = -1;
  }
  else
  {
    uint64_t v38 = 0;
    int v39 = -1;
    unsigned int v40 = -1;
    do
    {
      int v41 = v20[v38];
      if (v39 < v41) {
        unsigned int v40 = v38;
      }
      if (v39 <= v41) {
        int v39 = v20[v38];
      }
      ++v38;
    }
    while (a4 != v38);
  }
  uint64_t v90 = a4;
  char v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(void *)&long long v44 = -1;
  *((void *)&v44 + 1) = -1;
  *(_OWORD *)&v93[12] = v44;
  v92[4] = v44;
  *(_OWORD *)int8x8_t v93 = v44;
  v92[2] = v44;
  v92[3] = v44;
  v92[0] = v44;
  v92[1] = v44;
  uint64_t v45 = v91;
  if ((v40 & 0x80000000) != 0) {
    goto LABEL_92;
  }
  uint64_t v46 = 0;
  int v47 = 0;
  do
  {
    uint64_t v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      uint64_t v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0) {
        LODWORD(j) = v48 + 24;
      }
      for (uint64_t j = (int)j; j > v48; --j)
      {
        float64x2_t v51 = (_DWORD *)v92 + j;
        uint64_t v52 = *(v51 - 1);
        *float64x2_t v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          int v53 = (char)v17[v52];
          if (v53 <= 25) {
            v17[v52] = v53 + 1;
          }
        }
      }
      *((_DWORD *)v92 + v48) = v49;
      v17[v49] = v48;
      int v54 = v9[v49];
      if (v9[v49])
      {
        uint64_t v55 = v15[v49];
        uint64_t v56 = &v21[4 * v55];
        uint64_t v57 = v9[v49];
        while (*(_DWORD *)v56 != v40)
        {
          v56 += 4;
          if (!--v57) {
            goto LABEL_58;
          }
        }
        *(_DWORD *)uint64_t v56 = *(_DWORD *)&v21[4 * v54 - 4 + 4 * (int)v55];
        LOBYTE(v54) = v9[v49];
      }
LABEL_58:
      v9[v49] = v54 - 1;
      ++v48;
    }
    while (v48 != 3);
    unint64_t v58 = 0;
    ++v46;
    do
    {
      uint64_t v59 = *((unsigned int *)v92 + v58);
      if ((v59 & 0x80000000) != 0) {
        break;
      }
      if (v58 <= 0x17)
      {
        long long v60 = &v9[v59];
        unsigned int v61 = v9[v59];
        if (v9[v59])
        {
          unsigned int v62 = (char)v17[v59];
          if ((v62 & 0x80000000) != 0) {
LABEL_67:
          }
            int v63 = 0;
          else {
            int v63 = *(_DWORD *)(v45 + 4 * v62);
          }
          if (v61 <= 0x1F) {
            v63 += *(_DWORD *)(v45 + 4 * v61 + 128);
          }
          unint64_t v64 = 0;
          long long v65 = &v16[v59];
          __int16 v66 = v63 - *v65;
          CFRange v67 = &v21[4 * v15[v59]];
          do
            v20[*(int *)&v67[4 * v64++]] += v66;
          while (v64 < *v60);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v59] = -1;
        *((_DWORD *)v92 + v58) = -1;
        long long v60 = &v9[v59];
        unsigned int v61 = v9[v59];
        if (v9[v59]) {
          goto LABEL_67;
        }
      }
      LOWORD(v63) = 0;
      long long v65 = &v16[v59];
LABEL_74:
      *long long v65 = v63;
      ++v58;
    }
    while (v58 != 27);
    uint64_t v68 = 0;
    int v69 = -1;
    unsigned int v40 = -1;
    do
    {
      uint64_t v70 = *((unsigned int *)v92 + v68);
      if ((v70 & 0x80000000) != 0) {
        break;
      }
      uint64_t v71 = v9[v70];
      if (v9[v70])
      {
        int v72 = &v21[4 * v15[v70]];
        do
        {
          uint64_t v74 = *(int *)v72;
          v72 += 4;
          unsigned int v73 = v74;
          int v75 = v20[v74];
          if (v69 < v75) {
            unsigned int v40 = v73;
          }
          if (v69 <= v75) {
            int v69 = v75;
          }
          --v71;
        }
        while (v71);
      }
      ++v68;
    }
    while (v68 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          int v47 = a4;
          goto LABEL_91;
        }
      }
      unsigned int v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  BOOL v76 = a4 < 1;
  uint64_t v42 = v88;
  if (!v76)
  {
    uint64_t v77 = 0;
    int v78 = 0;
    do
    {
      uint64_t v79 = 0;
      int v80 = v78;
      uint64_t v81 = v88 + v78;
      uint64_t v82 = &a3[3 * v43[v77]];
      do
      {
        *(unsigned char *)(v81 + v79) = v82[v79];
        ++v79;
      }
      while (v79 != 3);
      ++v77;
      int v78 = v80 + 3;
    }
    while (v77 != v90);
  }
  __int16 v83 = v21;
  unsigned __int16 v84 = v43;
  free(v83);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v84);
  return v42;
}

uint64_t sub_1B65E3554(uint64_t a1)
{
  for (unint64_t i = 0; i != 32; ++i)
  {
    float v3 = 0.75;
    if (i >= 3) {
      float v3 = powf((float)((float)((int)i - 3) * -0.034483) + 1.0, 1.5);
    }
    *(_DWORD *)(a1 + 4 * i) = (float)(v3 * 7281.0);
  }
  unint64_t v4 = 0;
  uint64x2_t v10 = (uint64x2_t)vdupq_n_s64(0x1FuLL);
  do
  {
    uint64x2_t v5 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v4), (int8x16_t)xmmword_1B6E4F270);
    unsigned __int8 v13 = vmovn_s64((int64x2_t)vcgtq_u64(v10, v5)).u8[0];
    uint64x2_t v14 = v5;
    v6.i32[0] = v4 | 1;
    v6.i32[1] = vadd_s32(vdup_lane_s32((int32x2_t)v4, 0), (int32x2_t)0x200000002).i32[1];
    float32x2_t v7 = vcvt_f32_s32(v6);
    float v11 = v7.f32[0];
    float v12 = powf(v7.f32[1], -0.5);
    float v8 = powf(v11, -0.5);
    if (v13) {
      *(_DWORD *)(a1 + 4 * v4 + 132) = (float)((float)(v8 + v8) * 7281.0);
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1FuLL), v14)).i32[1]) {
      *(_DWORD *)(a1 + 4 * v4 + 136) = (float)((float)(v12 + v12) * 7281.0);
    }
    v4 += 2;
  }
  while (v4 != 32);
  return a1;
}

uint64_t sub_1B65E36BC(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4, int a5)
{
  uint64_t v91 = a1;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  size_t v8 = a5;
  __int16 v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    float v11 = a3;
    do
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      int v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  uint64_t v88 = a2;
  uint64_t v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  uint64_t v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  uint64_t v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  int v18 = a4 + 7;
  if (a4 < -7) {
    int v18 = a4 + 14;
  }
  uint64_t v87 = (uint64_t)v18 >> 3;
  uint64_t v19 = (unsigned __int8 *)malloc_type_malloc(v87, 0x6AD5D4E6uLL);
  float v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  uint64_t v86 = 12 * a4;
  float v21 = (char *)malloc_type_malloc(v86, 0x3B81A4AuLL);
  bzero(v19, v87);
  bzero(v20, 2 * a4);
  bzero(v21, v86);
  if (a5 >= 1)
  {
    int v22 = 0;
    uint64_t v23 = a5;
    uint64_t v24 = v15;
    float32x4_t v25 = v9;
    long long v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  uint64_t v27 = v91;
  if (a4 >= 1)
  {
    uint64_t v28 = 0;
    long long v29 = a3;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v31 = v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    uint64_t v32 = 0;
    do
    {
      uint64_t v33 = v9[v32];
      if (v9[v32])
      {
        unsigned int v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0) {
          int v35 = 0;
        }
        else {
          int v35 = *(_DWORD *)(v27 + 4 * v34);
        }
        if (v33 <= 0x1F) {
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
        }
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        unint64_t v36 = 0;
        unsigned int v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    unsigned int v40 = -1;
  }
  else
  {
    uint64_t v38 = 0;
    int v39 = -1;
    unsigned int v40 = -1;
    do
    {
      int v41 = v20[v38];
      if (v39 < v41) {
        unsigned int v40 = v38;
      }
      if (v39 <= v41) {
        int v39 = v20[v38];
      }
      ++v38;
    }
    while (a4 != v38);
  }
  uint64_t v90 = a4;
  char v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(void *)&long long v44 = -1;
  *((void *)&v44 + 1) = -1;
  *(_OWORD *)&v93[12] = v44;
  v92[4] = v44;
  *(_OWORD *)int8x8_t v93 = v44;
  v92[2] = v44;
  v92[3] = v44;
  v92[0] = v44;
  v92[1] = v44;
  uint64_t v45 = v91;
  if ((v40 & 0x80000000) != 0) {
    goto LABEL_92;
  }
  uint64_t v46 = 0;
  int v47 = 0;
  do
  {
    uint64_t v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      uint64_t v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0) {
        LODWORD(j) = v48 + 24;
      }
      for (uint64_t j = (int)j; j > v48; --j)
      {
        float64x2_t v51 = (_DWORD *)v92 + j;
        uint64_t v52 = *(v51 - 1);
        *float64x2_t v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          int v53 = (char)v17[v52];
          if (v53 <= 25) {
            v17[v52] = v53 + 1;
          }
        }
      }
      *((_DWORD *)v92 + v48) = v49;
      v17[v49] = v48;
      int v54 = v9[v49];
      if (v9[v49])
      {
        uint64_t v55 = v15[v49];
        uint64_t v56 = &v21[4 * v55];
        uint64_t v57 = v9[v49];
        while (*(_DWORD *)v56 != v40)
        {
          v56 += 4;
          if (!--v57) {
            goto LABEL_58;
          }
        }
        *(_DWORD *)uint64_t v56 = *(_DWORD *)&v21[4 * v54 - 4 + 4 * (int)v55];
        LOBYTE(v54) = v9[v49];
      }
LABEL_58:
      v9[v49] = v54 - 1;
      ++v48;
    }
    while (v48 != 3);
    unint64_t v58 = 0;
    ++v46;
    do
    {
      uint64_t v59 = *((unsigned int *)v92 + v58);
      if ((v59 & 0x80000000) != 0) {
        break;
      }
      if (v58 <= 0x17)
      {
        long long v60 = &v9[v59];
        unsigned int v61 = v9[v59];
        if (v9[v59])
        {
          unsigned int v62 = (char)v17[v59];
          if ((v62 & 0x80000000) != 0) {
LABEL_67:
          }
            int v63 = 0;
          else {
            int v63 = *(_DWORD *)(v45 + 4 * v62);
          }
          if (v61 <= 0x1F) {
            v63 += *(_DWORD *)(v45 + 4 * v61 + 128);
          }
          unint64_t v64 = 0;
          long long v65 = &v16[v59];
          __int16 v66 = v63 - *v65;
          CFRange v67 = &v21[4 * v15[v59]];
          do
            v20[*(int *)&v67[4 * v64++]] += v66;
          while (v64 < *v60);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v59] = -1;
        *((_DWORD *)v92 + v58) = -1;
        long long v60 = &v9[v59];
        unsigned int v61 = v9[v59];
        if (v9[v59]) {
          goto LABEL_67;
        }
      }
      LOWORD(v63) = 0;
      long long v65 = &v16[v59];
LABEL_74:
      *long long v65 = v63;
      ++v58;
    }
    while (v58 != 27);
    uint64_t v68 = 0;
    int v69 = -1;
    unsigned int v40 = -1;
    do
    {
      uint64_t v70 = *((unsigned int *)v92 + v68);
      if ((v70 & 0x80000000) != 0) {
        break;
      }
      uint64_t v71 = v9[v70];
      if (v9[v70])
      {
        int v72 = &v21[4 * v15[v70]];
        do
        {
          uint64_t v74 = *(int *)v72;
          v72 += 4;
          unsigned int v73 = v74;
          int v75 = v20[v74];
          if (v69 < v75) {
            unsigned int v40 = v73;
          }
          if (v69 <= v75) {
            int v69 = v75;
          }
          --v71;
        }
        while (v71);
      }
      ++v68;
    }
    while (v68 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          int v47 = a4;
          goto LABEL_91;
        }
      }
      unsigned int v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  BOOL v76 = a4 < 1;
  uint64_t v42 = v88;
  if (!v76)
  {
    uint64_t v77 = 0;
    int v78 = 0;
    do
    {
      uint64_t v79 = 0;
      int v80 = v78;
      uint64_t v81 = v88 + 2 * v78;
      uint64_t v82 = &a3[3 * v43[v77]];
      do
      {
        *(_WORD *)(v81 + 2 * v79) = v82[v79];
        ++v79;
      }
      while (v79 != 3);
      ++v77;
      int v78 = v80 + 3;
    }
    while (v77 != v90);
  }
  __int16 v83 = v21;
  unsigned __int16 v84 = v43;
  free(v83);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v84);
  return v42;
}

uint64_t sub_1B65E3CF8(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  uint64_t v92 = a1;
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  size_t v8 = a5;
  __int16 v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    float v11 = a3;
    do
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      int v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  uint64_t v89 = a2;
  uint64_t v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  uint64_t v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  uint64_t v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  int v18 = a4 + 7;
  if (a4 < -7) {
    int v18 = a4 + 14;
  }
  uint64_t v88 = (uint64_t)v18 >> 3;
  uint64_t v19 = (unsigned __int8 *)malloc_type_malloc(v88, 0x6AD5D4E6uLL);
  float v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  uint64_t v87 = 12 * a4;
  float v21 = (char *)malloc_type_malloc(v87, 0x3B81A4AuLL);
  bzero(v19, v88);
  bzero(v20, 2 * a4);
  bzero(v21, v87);
  if (a5 >= 1)
  {
    int v22 = 0;
    uint64_t v23 = a5;
    uint64_t v24 = v15;
    float32x4_t v25 = v9;
    long long v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  uint64_t v27 = v92;
  if (a4 >= 1)
  {
    uint64_t v28 = 0;
    long long v29 = a3;
    do
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v31 = (int)v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    uint64_t v32 = 0;
    do
    {
      uint64_t v33 = v9[v32];
      if (v9[v32])
      {
        unsigned int v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0) {
          int v35 = 0;
        }
        else {
          int v35 = *(_DWORD *)(v27 + 4 * v34);
        }
        if (v33 <= 0x1F) {
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
        }
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        unint64_t v36 = 0;
        unsigned int v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    unsigned int v40 = -1;
  }
  else
  {
    uint64_t v38 = 0;
    int v39 = -1;
    unsigned int v40 = -1;
    do
    {
      int v41 = v20[v38];
      if (v39 < v41) {
        unsigned int v40 = v38;
      }
      if (v39 <= v41) {
        int v39 = v20[v38];
      }
      ++v38;
    }
    while (a4 != v38);
  }
  uint64_t v91 = a4;
  char v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(void *)&long long v44 = -1;
  *((void *)&v44 + 1) = -1;
  *(_OWORD *)&v94[12] = v44;
  v93[4] = v44;
  *(_OWORD *)uint64_t v94 = v44;
  v93[2] = v44;
  v93[3] = v44;
  v93[0] = v44;
  v93[1] = v44;
  uint64_t v45 = v92;
  if ((v40 & 0x80000000) != 0) {
    goto LABEL_92;
  }
  uint64_t v46 = 0;
  int v47 = 0;
  do
  {
    uint64_t v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      unsigned int v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0) {
        LODWORD(j) = v48 + 24;
      }
      for (uint64_t j = (int)j; j > v48; --j)
      {
        float64x2_t v51 = (_DWORD *)v93 + j;
        uint64_t v52 = *(v51 - 1);
        *float64x2_t v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          int v53 = (char)v17[v52];
          if (v53 <= 25) {
            v17[v52] = v53 + 1;
          }
        }
      }
      uint64_t v54 = (int)v49;
      *((_DWORD *)v93 + v48) = v49;
      v17[v49] = v48;
      uint64_t v55 = v9[v49];
      if (v55)
      {
        uint64_t v56 = v15[v54];
        uint64_t v57 = &v21[4 * v56];
        uint64_t v58 = v55;
        while (*(_DWORD *)v57 != v40)
        {
          v57 += 4;
          if (!--v58) {
            goto LABEL_58;
          }
        }
        *(_DWORD *)uint64_t v57 = *(_DWORD *)&v21[4 * (int)v55 - 4 + 4 * (int)v56];
        LOBYTE(v55) = v9[v54];
      }
LABEL_58:
      v9[v54] = v55 - 1;
      ++v48;
    }
    while (v48 != 3);
    unint64_t v59 = 0;
    ++v46;
    do
    {
      uint64_t v60 = *((unsigned int *)v93 + v59);
      if ((v60 & 0x80000000) != 0) {
        break;
      }
      if (v59 <= 0x17)
      {
        unsigned int v61 = &v9[v60];
        unsigned int v62 = v9[v60];
        if (v9[v60])
        {
          unsigned int v63 = (char)v17[v60];
          if ((v63 & 0x80000000) != 0) {
LABEL_67:
          }
            int v64 = 0;
          else {
            int v64 = *(_DWORD *)(v45 + 4 * v63);
          }
          if (v62 <= 0x1F) {
            v64 += *(_DWORD *)(v45 + 4 * v62 + 128);
          }
          unint64_t v65 = 0;
          __int16 v66 = &v16[v60];
          __int16 v67 = v64 - *v66;
          uint64_t v68 = &v21[4 * v15[v60]];
          do
            v20[*(int *)&v68[4 * v65++]] += v67;
          while (v65 < *v61);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v60] = -1;
        *((_DWORD *)v93 + v59) = -1;
        unsigned int v61 = &v9[v60];
        unsigned int v62 = v9[v60];
        if (v9[v60]) {
          goto LABEL_67;
        }
      }
      LOWORD(v64) = 0;
      __int16 v66 = &v16[v60];
LABEL_74:
      *__int16 v66 = v64;
      ++v59;
    }
    while (v59 != 27);
    uint64_t v69 = 0;
    int v70 = -1;
    unsigned int v40 = -1;
    do
    {
      uint64_t v71 = *((unsigned int *)v93 + v69);
      if ((v71 & 0x80000000) != 0) {
        break;
      }
      uint64_t v72 = v9[v71];
      if (v9[v71])
      {
        unsigned int v73 = &v21[4 * v15[v71]];
        do
        {
          uint64_t v75 = *(int *)v73;
          v73 += 4;
          unsigned int v74 = v75;
          int v76 = v20[v75];
          if (v70 < v76) {
            unsigned int v40 = v74;
          }
          if (v70 <= v76) {
            int v70 = v76;
          }
          --v72;
        }
        while (v72);
      }
      ++v69;
    }
    while (v69 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          int v47 = a4;
          goto LABEL_91;
        }
      }
      unsigned int v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  BOOL v77 = a4 < 1;
  uint64_t v42 = v89;
  if (!v77)
  {
    uint64_t v78 = 0;
    int v79 = 0;
    do
    {
      uint64_t v80 = 0;
      int v81 = v79;
      uint64_t v82 = v89 + 4 * v79;
      __int16 v83 = &a3[3 * v43[v78]];
      do
      {
        *(_DWORD *)(v82 + 4 * v80) = v83[v80];
        ++v80;
      }
      while (v80 != 3);
      ++v78;
      int v79 = v81 + 3;
    }
    while (v78 != v91);
  }
  unsigned __int16 v84 = v21;
  uint64_t v85 = v43;
  free(v84);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v85);
  return v42;
}

float32x4_t *sub_1B65E4338(void *a1, float32x4_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  int32x2_t v6 = *(float32x4_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (double result = *v6; result; double result = (float32x4_t *)result->i64[0])
  {
    unint64_t v8 = result->u64[1];
    if (v8 == v3)
    {
      uint32x4_t v9 = (uint32x4_t)vceqq_f32(result[1], *a2);
      v9.i32[3] = v9.i32[2];
      if ((vminvq_u32(v9) & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

float32x4_t *sub_1B65E4408(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  unint64_t v7 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(float32x4_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (float32x4_t *)i->i64[0])
      {
        unint64_t v12 = i->u64[1];
        if (v12 == v7)
        {
          uint32x4_t v13 = (uint32x4_t)vceqq_f32(i[1], *a2);
          v13.i32[3] = v13.i32[2];
          if ((vminvq_u32(v13) & 0x80000000) != 0) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v7;
  i[1] = **a4;
  i[2].i32[0] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_1B63C8630(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  float v21 = *(float32x4_t ***)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    i->i64[0] = (uint64_t)*v21;
LABEL_38:
    *float v21 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (i->i64[0])
  {
    unint64_t v22 = *(void *)(i->i64[0] + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    float v21 = (float32x4_t **)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B65E4638()
{
  if (!qword_1E9DDBCE0)
  {
    CFArrayRef v0 = (void *)sub_1B63C8D10(&qword_1E9DDBCE0);
    qword_1E9DDBCE0 = (uint64_t)v0;
    CFAllocatorRef v1 = (const void *)sub_1B65833C8();
    sub_1B660E380(v0, v1);
    sub_1B660E3EC();
  }
}

void sub_1B65E46AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  }
  CFDictionaryRef v11 = sub_1B649F640(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    unint64_t v18 = (float32x4_t *)v11;
    uint64_t v19 = *((int *)v11 + 20);
    if (v19 > 3)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v20 = qword_1B6E72AA0[v19];
      uint64_t v21 = sub_1B65E525C();
      unint64_t v22 = *(float32x4_t **)(v21 + 16);
      if (v22 != v18)
      {
        if (v22)
        {
          CFRelease(v22);
          *(void *)(v21 + 16) = 0;
        }
        *(void *)(v21 + 16) = CFRetain(v18);
      }
      *(_DWORD *)(v21 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      *(void *)(v21 + 32) = v20;
    }
    sub_1B64B1248(a1, (void *)v21);
    float32x4_t v25 = (void *)sub_1B65E47F4(v18, v23, v24);
    sub_1B65E4880(a2, v25, v26, v27, v28, v29, v30, v31);
    sub_1B65E4B1C((uint64_t)v18, v25, v32, v33, v34, v35, v36, v37);
    uint64_t v38 = (void *)sub_1B65E4D00((int *)v18, v25);
    sub_1B64B1248(a1, v38);
  }
  else
  {
    sub_1B63F2F54(0, @"Warning: Should not update VFXLight without CFXLight", v12, v13, v14, v15, v16, v17, a9);
  }
}

uint64_t sub_1B65E47F4(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v3 = a1[5].i32[0];
  if (v3 > 3) {
    return 0;
  }
  uint64_t v4 = qword_1B6E72AA0[v3];
  sub_1B6497218(a1, a2, a3);
  unint64_t v5 = [_TtC3VFX23VFXSceneLightParameters alloc];

  return MEMORY[0x1F4181798](v5, sel_initWithType_intensity_color_, v4, v6);
}

uint64_t sub_1B65E4880(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_1B64A01D4(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  objc_msgSend_setPosition_(a2, v10, v11, v12, *(double *)(v9 + 48));
  float32x4_t v16 = *(float32x4_t *)(v9 + 16);
  float32x4_t v17 = *(float32x4_t *)(v9 + 32);
  int32x4_t v18 = (int32x4_t)vmulq_f32(*(float32x4_t *)v9, *(float32x4_t *)v9);
  int32x4_t v19 = (int32x4_t)vmulq_f32(v16, v16);
  int32x4_t v20 = (int32x4_t)vmulq_f32(v17, v17);
  int32x4_t v21 = vzip2q_s32(v18, v20);
  float32x4_t v22 = (float32x4_t)vzip1q_s32(vzip1q_s32(v18, v20), v19);
  float32x4_t v23 = (float32x4_t)vtrn2q_s32(v18, v19);
  v23.i32[2] = v20.i32[1];
  float32x4_t v24 = vaddq_f32((float32x4_t)vzip1q_s32(v21, vdupq_laneq_s32(v19, 2)), vaddq_f32(v22, v23));
  v23.i64[0] = 0x80000000800000;
  v23.i64[1] = 0x80000000800000;
  int8x16_t v25 = (int8x16_t)vcgeq_f32(v23, v24);
  v24.i32[3] = 0;
  float32x4_t v26 = vrsqrteq_f32(v24);
  float32x4_t v27 = vmulq_f32(v26, vrsqrtsq_f32(v24, vmulq_f32(v26, v26)));
  int32x4_t v28 = (int32x4_t)v25;
  v28.i32[3] = 0;
  float32x4_t v29 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v28), (int8x16_t)v24, (int8x16_t)vmulq_f32(v27, vrsqrtsq_f32(v24, vmulq_f32(v27, v27))));
  float32x4_t v30 = vmulq_n_f32(*(float32x4_t *)v9, v29.f32[0]);
  float32x4_t v31 = vmulq_lane_f32(v16, *(float32x2_t *)v29.f32, 1);
  float32x4_t v32 = vmulq_laneq_f32(v17, v29, 2);
  int8x16_t v33 = (int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32);
  int8x16_t v34 = (int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31);
  int32x4_t v35 = (int32x4_t)v30;
  if (v25.i32[0])
  {
    int8x16_t v36 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v33, (int8x16_t)v32, 0xCuLL), vnegq_f32(v31)), v32, (float32x4_t)vextq_s8(v34, (int8x16_t)v31, 0xCuLL));
    int32x4_t v35 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), v36, 0xCuLL);
  }
  int8x16_t v37 = (int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30);
  float32x4_t v38 = v31;
  if (v25.i32[1])
  {
    int8x16_t v39 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v37, (int8x16_t)v30, 0xCuLL), vnegq_f32(v32)), v30, (float32x4_t)vextq_s8(v33, (int8x16_t)v32, 0xCuLL));
    float32x4_t v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), v39, 0xCuLL);
  }
  if (v25.i32[2])
  {
    int8x16_t v25 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v34, (int8x16_t)v31, 0xCuLL), vnegq_f32(v30)), v31, (float32x4_t)vextq_s8(v37, (int8x16_t)v30, 0xCuLL));
    float32x4_t v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL);
  }
  float v40 = (float)(*(float *)v35.i32 + v38.f32[1]) + v32.f32[2];
  if (v40 <= 0.0)
  {
    if (*(float *)v35.i32 < v38.f32[1] || *(float *)v35.i32 < v32.f32[2])
    {
      if (v38.f32[1] <= v32.f32[2])
      {
        float v42 = sqrtf((float)((float)(v32.f32[2] + 1.0) - *(float *)v35.i32) - v38.f32[1]);
        *(float32x2_t *)v45.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v35, (int32x4_t)v38), *(float32x2_t *)v32.f32);
        float32x2_t v56 = (float32x2_t)__PAIR64__(v35.u32[1], LODWORD(v42));
        float32x2_t v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
        *(float32x2_t *)v44.f32 = vsub_f32(*(float32x2_t *)v35.i8, v57);
        v57.f32[0] = v42;
        v57.i32[0] = vmul_f32(v56, v57).u32[0];
        v57.i32[1] = v44.i32[1];
        *(float32x2_t *)&v45.u32[2] = v57;
        goto LABEL_18;
      }
      float v49 = sqrtf((float)((float)(v38.f32[1] + 1.0) - *(float *)v35.i32) - v32.f32[2]);
      *(int32x2_t *)v25.i8 = vdup_laneq_s32((int32x4_t)v38, 2);
      int8x16_t v47 = v25;
      *(float *)v47.i32 = v49;
      v47.i32[0] = vmul_f32(*(float32x2_t *)v47.i8, (float32x2_t)__PAIR64__(v32.u32[1], LODWORD(v49))).u32[0];
      v47.i32[1] = vadd_f32(*(float32x2_t *)&v25, *(float32x2_t *)&v32).i32[1];
      int8x16_t v48 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1), v38);
      int32x2_t v54 = (int32x2_t)vsubq_f32(v32, (float32x4_t)vdupq_laneq_s32(v35, 2)).u64[0];
      float32x4_t v55 = (float32x4_t)vextq_s8(vextq_s8(v48, v48, 4uLL), v47, 0xCuLL);
      v55.i32[3] = v54.i32[0];
    }
    else
    {
      float v49 = sqrtf((float)((float)(*(float *)v35.i32 + 1.0) - v38.f32[1]) - v32.f32[2]);
      float32x2_t v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
      float32x2_t v51 = vadd_f32(*(float32x2_t *)v35.i8, v50);
      v50.f32[0] = v49;
      v55.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v35.u32[1], LODWORD(v49)), v50).u32[0];
      v55.i32[1] = v51.i32[1];
      float32x2_t v52 = (float32x2_t)vzip2q_s32(v35, (int32x4_t)v38).u64[0];
      LODWORD(v53) = vadd_f32(v52, *(float32x2_t *)v32.f32).u32[0];
      int32x2_t v54 = (int32x2_t)vsub_f32(v52, *(float32x2_t *)v32.f32);
      HIDWORD(v53) = v54.i32[1];
      v55.i64[1] = v53;
    }
    *(float *)v54.i32 = 0.5 / v49;
    float32x4_t v45 = (float32x4_t)vdupq_lane_s32(v54, 0);
    goto LABEL_19;
  }
  float32x4_t v41 = (float32x4_t)vzip2q_s32((int32x4_t)v38, vuzp1q_s32((int32x4_t)v38, (int32x4_t)v32));
  v41.i32[2] = v35.i32[1];
  float v42 = sqrtf(v40 + 1.0);
  float32x4_t v43 = (float32x4_t)vtrn2q_s32((int32x4_t)v32, vzip2q_s32((int32x4_t)v32, v35));
  v43.i32[2] = v38.i32[0];
  float32x4_t v45 = vsubq_f32(v41, v43);
  v41.f32[3] = v42;
  v43.f32[3] = v42;
  float32x4_t v44 = vmulq_f32(v41, v43);
  v45.i32[3] = v44.i32[3];
LABEL_18:
  v44.f32[0] = 0.5 / v42;
  float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0);
LABEL_19:
  *(void *)&double v58 = vmulq_f32(v45, v55).u64[0];

  return objc_msgSend_setOrientation_(a2, v13, v14, v15, v58);
}

uint64_t sub_1B65E4B1C(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v9 = result;
    int v10 = *(_DWORD *)(result + 80);
    if ((v10 & 0xFFFFFFFD) == 1)
    {
      *(float *)&double v11 = sub_1B6495B40(result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      double result = objc_msgSend_setAttenuationRadius_(a2, v12, v13, v14, v11);
      int v10 = *(_DWORD *)(v9 + 80);
    }
    switch(v10)
    {
      case 1:
        sub_1B6496784(v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        sub_1B64966CC(v9, v15, v16, v17, v18, v19, v20, v21);
        double result = MEMORY[0x1F4181798](a2, sel_setPointLightParametersWithZNear_zFar_, v22, v23);
        break;
      case 2:
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v62 = 0u;
        sub_1B64957BC(v9, (uint64_t)&v62, a3, a4, a5, a6, a7, a8);
        LODWORD(v--*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = DWORD2(v64);
        LODWORD(v26) = DWORD2(v62);
        LODWORD(v25) = DWORD1(v62);
        double result = objc_msgSend_setDirectionalParametersWithScale_zNear_zFar_(a2, v27, v28, v29, v24, v25, v26);
        break;
      case 3:
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v62 = 0u;
        sub_1B64957BC(v9, (uint64_t)&v62, a3, a4, a5, a6, a7, a8);
        float v37 = fminf(sub_1B6495918(v9, v30, v31, v32, v33, v34, v35, v36), 180.0) / 180.0 * 3.14159265;
        double v45 = fminf(sub_1B649644C(v9, v38, v39, v40, v41, v42, v43, v44), 180.0) / 180.0 * 3.14159265;
        *(float *)&double v46 = v45;
        LODWORD(v48) = DWORD2(v62);
        LODWORD(v47) = DWORD1(v62);
        *(float *)&double v45 = v37;
        double result = objc_msgSend_setSpotLightParametersWithOuterAngle_innerAngle_zNear_zFar_(a2, v49, v50, v51, v45, v46, v47, v48);
        break;
      case 5:
        long long v63 = 0u;
        long long v64 = 0u;
        long long v62 = 0u;
        sub_1B6497104(v9, a3, a4, a5, a6, a7, a8, (uint64_t)&v62);
        uint64_t v59 = sub_1B64970A0(v9, v52, v53, v54, v55, v56, v57, v58);
        double result = objc_msgSend_setAreaLightParametersWithExtents_doubleSided_(a2, v60, v59, v61, *(double *)&v63);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1B65E4D00(int *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = a1[20];
  if (v3 > 3) {
    return 0;
  }
  uint64_t v5 = qword_1B6E72AA0[v3];
  uint64_t v6 = sub_1B65E525C();
  unint64_t v7 = *(int **)(v6 + 16);
  if (v7 != a1)
  {
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v6 + 16) = 0;
    }
    *(void *)(v6 + 16) = CFRetain(a1);
  }
  *(_DWORD *)(v6 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 3;
  *(void *)(v6 + 32) = v5;
  *(void *)(v6 + 40) = a2;
  int v15 = sub_1B649535C((uint64_t)a1, v8, v9, v10, v11, v12, v13, v14);
  *(unsigned char *)(v6 + 48) = v15;
  if (v15)
  {
    uint64_t v23 = (const void *)sub_1B6498928((uint64_t)a1, v16, v17, v18, v19, v20, v21, v22);
    unsigned int v31 = sub_1B6498974((uint64_t)a1, v24, v25, v26, v27, v28, v29, v30);
    *(_DWORD *)(v6 + 160) = v31;
    memcpy((void *)(v6 + 64), v23, 16 * v31);
    float v39 = sub_1B6495FE4((uint64_t)a1, v32, v33, v34, v35, v36, v37, v38) * 0.001;
    *(float *)(v6 + 164) = v39;
  }
  return v6;
}

void sub_1B65E4DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  }
  CFDictionaryRef v11 = sub_1B649F640(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    uint64_t v18 = (int *)v11;
    uint64_t v19 = sub_1B65E525C();
    uint64_t v20 = *(int **)(v19 + 16);
    if (v20 != v18)
    {
      if (v20)
      {
        CFRelease(v20);
        *(void *)(v19 + 16) = 0;
      }
      *(void *)(v19 + 16) = CFRetain(v18);
    }
    *(_DWORD *)(v19 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2;
    uint64_t v21 = v18[20];
    if (v21 > 3) {
      uint64_t v22 = -1;
    }
    else {
      uint64_t v22 = qword_1B6E72AA0[v21];
    }
    *(void *)(v19 + 32) = v22;
    sub_1B64B1248(a1, (void *)v19);
  }
  else
  {
    sub_1B63F2F54(0, @"Warning: Should not update VFXLight without CFXLight", v12, v13, v14, v15, v16, v17, a9);
  }
}

void sub_1B65E4EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  }
  CFDictionaryRef v11 = (float32x4_t *)sub_1B649F640(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    uint64_t v20 = (int *)v11;
    uint64_t v21 = (void *)sub_1B65E47F4(v11, v18, v19);
    sub_1B65E4880(a2, v21, v22, v23, v24, v25, v26, v27);
    uint64_t v28 = (void *)sub_1B65E4D00(v20, v21);
    sub_1B64B1248(a1, v28);
  }
  else
  {
    sub_1B63F2F54(0, @"Warning: Should not update VFXLight without CFXLight", v12, v13, v14, v15, v16, v17, a9);
  }
}

void sub_1B65E4FB4(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = sub_1B63F4F54(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    if (a1)
    {
      uint64_t v19 = v10;
      uint64_t v20 = (void *)sub_1B65E47F4(a1, v17, v18);
      sub_1B65E4B1C((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
      uint64_t v27 = (void *)sub_1B65E4D00((int *)a1, v20);
      sub_1B64B1248(v19, v27);
    }
    else
    {
      sub_1B63F2F54(0, @"Warning: Should not update VFXLight without CFXLight", v11, v12, v13, v14, v15, v16, a9);
    }
  }
}

void sub_1B65E5064(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (sub_1B6475F88((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    uint64_t v18 = sub_1B64761F0((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17);
    uint64_t v26 = (void *)sub_1B647702C((uint64_t)a2, v19, v20, v21, v22, v23, v24, v25);
    uint64_t v34 = sub_1B65E525C();
    *(_DWORD *)(v34 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *(void *)(v34 + 32) = 5;
    if (a2) {
      CFTypeRef v35 = CFRetain(a2);
    }
    else {
      CFTypeRef v35 = 0;
    }
    *(void *)(v34 + 16) = v35;
    if (v18)
    {
      if (sub_1B643C62C(v18, v27, v28, v29, v30, v31, v32, v33))
      {
        uint64_t v45 = sub_1B6439EF8(v18, v38, v39, v40, v41, v42, v43, v44);
        if (v45)
        {
          uint64_t v46 = v45;
          double v47 = [_TtC3VFX23VFXSceneLightParameters alloc];
          uint64_t v50 = objc_msgSend_initWithType_(v47, v48, 5, v49);
          objc_msgSend_setIBLParametersWithUrl_texture_(v50, v51, v46, 0);
          id v52 = v50;
LABEL_18:
          *(void *)(v34 + 40) = v52;
          goto LABEL_19;
        }
        CFRelease((CFTypeRef)v34);
        long long v68 = @"Warning: VFXCore IBL Sync from image only supports URL";
      }
      else
      {
        CFRelease((CFTypeRef)v34);
        long long v68 = @"Warning: Invalid image";
      }
    }
    else
    {
      if (!v26)
      {
LABEL_19:
        sub_1B64B1248(a1, (void *)v34);
        sub_1B65E52B4(a1, a2);
        return;
      }
      if (sub_1B64B2054(a1, v27, v28, v29, v30, v31, v32, v33))
      {
        uint64_t v53 = [_TtC3VFX23VFXSceneLightParameters alloc];
        id v52 = (id)objc_msgSend_initWithType_(v53, v54, 5, v55);
        uint64_t v59 = objc_msgSend_entityTag(v26, v56, v57, v58);
        objc_msgSend_setIBLParametersWithTag_(v52, v60, v59, v61);
        goto LABEL_18;
      }
      CFRelease((CFTypeRef)v34);
      long long v68 = @"Warning: Invalid VFXScene";
    }
    sub_1B63F2F54(0, (uint64_t)v68, v62, v63, v64, v65, v66, v67, a9);
  }
  else
  {
    uint64_t v36 = sub_1B65E525C();
    *(_DWORD *)(v36 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2;
    *(void *)(v36 + 32) = 5;
    if (a2) {
      CFTypeRef v37 = CFRetain(a2);
    }
    else {
      CFTypeRef v37 = 0;
    }
    *(void *)(v36 + 16) = v37;
    sub_1B64B1248(a1, (void *)v36);
  }
}

uint64_t sub_1B65E525C()
{
  if (qword_1E9DDBCE8 != -1) {
    dispatch_once(&qword_1E9DDBCE8, &unk_1F0FB5FA8);
  }
  uint64_t result = sub_1B63C8D44(qword_1E9DDBCE0, 0xA0uLL);
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

void sub_1B65E52B4(uint64_t a1, const void *a2)
{
  uint64_t v4 = sub_1B65E525C();
  *(_DWORD *)(v4 + --*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 3;
  *(void *)(v4 + 32) = 5;
  if (a2) {
    CFTypeRef v5 = CFRetain(a2);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = [_TtC3VFX23VFXSceneLightParameters alloc];
  uint64_t v9 = objc_msgSend_initWithType_(v6, v7, 5, v8);
  *(float *)&double v17 = sub_1B64763AC((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
  objc_msgSend_setIntensity_(v9, v18, v19, v20, v17);
  uint64_t v28 = sub_1B647721C((uint64_t)a2, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v33 = (_OWORD *)MEMORY[0x1E4F149A0];
  if (v28) {
    uint64_t v33 = (_OWORD *)v28;
  }
  int8x16_t v34 = *(int8x16_t *)v33;
  float32x4_t v35 = *((float32x4_t *)v33 + 1);
  float32x4_t v36 = *((float32x4_t *)v33 + 2);
  v32.i32[0] = HIDWORD(*((void *)v33 + 2));
  float v37 = COERCE_FLOAT(*((void *)v33 + 5));
  float v38 = (float)(COERCE_FLOAT(*v33) + *(float *)v32.i32) + v37;
  if (v38 <= 0.0)
  {
    if (*(float *)v34.i32 < *(float *)v32.i32 || *(float *)v34.i32 < v37)
    {
      if (*(float *)v32.i32 <= v37)
      {
        float v40 = sqrtf((float)((float)(v37 + 1.0) - *(float *)v34.i32) - *(float *)v32.i32);
        *(float32x2_t *)v43.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL)), *(float32x2_t *)v36.f32);
        int8x16_t v51 = *(int8x16_t *)v33;
        *(float *)v51.i32 = v40;
        float32x2_t v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 0);
        *(float32x2_t *)v42.f32 = vsub_f32(*(float32x2_t *)v34.i8, v52);
        v52.f32[0] = v40;
        v52.i32[0] = vmul_f32(*(float32x2_t *)v51.i8, v52).u32[0];
        v52.i32[1] = v42.i32[1];
        *(float32x2_t *)&v43.u32[2] = v52;
        goto LABEL_17;
      }
      float v47 = sqrtf((float)((float)(*(float *)v32.i32 + 1.0) - *(float *)v34.i32) - v37);
      *(int32x2_t *)v32.i8 = vdup_laneq_s32((int32x4_t)v35, 2);
      int8x16_t v45 = v32;
      *(float *)v45.i32 = v47;
      v45.i32[0] = vmul_f32(*(float32x2_t *)v45.i8, (float32x2_t)__PAIR64__(v36.u32[1], LODWORD(v47))).u32[0];
      v45.i32[1] = vadd_f32(*(float32x2_t *)&v32, *(float32x2_t *)&v36).i32[1];
      int8x16_t v46 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1), v35);
      int32x2_t v49 = (int32x2_t)vsubq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2)).u64[0];
      float32x4_t v50 = (float32x4_t)vextq_s8(vextq_s8(v46, v46, 4uLL), v45, 0xCuLL);
      v50.i32[3] = v49.i32[0];
    }
    else
    {
      float v47 = sqrtf((float)((float)(*(float *)v34.i32 + 1.0) - *(float *)v32.i32) - v37);
      float32x2_t v48 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 0);
      v50.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v34.u32[1], LODWORD(v47)), (float32x2_t)__PAIR64__(v48.u32[1], LODWORD(v47))).u32[0];
      v50.i32[1] = vadd_f32(*(float32x2_t *)&v34, v48).i32[1];
      v49.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v36.f32).u32[0];
      v49.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v35, 2), *(float32x2_t *)&v36).i32[1];
      *(int32x2_t *)&v50.u32[2] = v49;
    }
    *(float *)v49.i32 = 0.5 / v47;
    float32x4_t v43 = (float32x4_t)vdupq_lane_s32(v49, 0);
    goto LABEL_18;
  }
  float32x4_t v39 = (float32x4_t)vzip2q_s32((int32x4_t)v35, vuzp1q_s32((int32x4_t)v35, (int32x4_t)v36));
  v39.i32[2] = HIDWORD(*(void *)v33);
  float v40 = sqrtf(v38 + 1.0);
  float32x4_t v41 = (float32x4_t)vtrn2q_s32((int32x4_t)v36, vzip2q_s32((int32x4_t)v36, (int32x4_t)v34));
  v41.i32[2] = v33[1];
  float32x4_t v43 = vsubq_f32(v39, v41);
  v39.f32[3] = v40;
  v41.f32[3] = v40;
  float32x4_t v42 = vmulq_f32(v39, v41);
  v43.i32[3] = v42.i32[3];
LABEL_17:
  v42.f32[0] = 0.5 / v40;
  float32x4_t v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 0);
LABEL_18:
  objc_msgSend_setOrientation_(v9, v29, v30, v31, *(double *)vmulq_f32(v43, v50).i64);
  *(void *)(v4 + 40) = v9;
  sub_1B64B1248(a1, (void *)v4);

  CFRelease((CFTypeRef)v4);
}

void sub_1B65E54F0(uint64_t a1)
{
  int8x8_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 40);
}

CFStringRef sub_1B65E5534(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXVFXLightUpdateCommand>");
}

CFStringRef sub_1B65E5568(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXVFXLightUpdateCommand>");
}

void radix_sort_float_destructive(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v3 = v2;
  unsigned int v5 = v4;
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v4;
  bzero(v37, 0x6000uLL);
  if (v5)
  {
    uint64_t v11 = v10;
    uint64_t v12 = v9;
    do
    {
      int v13 = *v12++;
      unsigned int v14 = ((v13 >> 31) | 0x80000000) ^ v13;
      ++v37[v14 & 0x7FF];
      ++v37[((v14 >> 11) & 0x7FF) + 2048];
      ++v37[(v14 >> 22) + 4096];
      --v11;
    }
    while (v11);
  }
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = (unsigned int *)&v3[v5];
  do
  {
    uint64_t v20 = &v37[v15];
    unsigned int v21 = v37[v15];
    *uint64_t v20 = v16;
    v16 += v21;
    unsigned int v22 = v37[v15 + 2048];
    v20[2048] = v18;
    v18 += v22;
    unsigned int v23 = v37[v15 + 4096];
    v20[4096] = v17;
    v17 += v23;
    ++v15;
  }
  while (v15 != 2048);
  *unint64_t v7 = 666;
  if (v5)
  {
    uint64_t v24 = 0;
    do
    {
      unsigned int v25 = ((v9[v24] >> 31) | 0x80000000) ^ v9[v24];
      uint64_t v26 = v37[v25 & 0x7FF];
      v37[v25 & 0x7FF] = v26 + 1;
      v7[v26] = v24;
      v19[v26] = v25;
      ++v24;
    }
    while (v10 != v24);
    uint64_t v27 = v10;
    uint64_t v28 = v7;
    do
    {
      unint64_t v29 = ((unint64_t)*v19 >> 11) & 0x7FF;
      uint64_t v30 = v37[v29 + 2048];
      v37[v29 + 2048] = v30 + 1;
      int v31 = *v28++;
      v3[v30] = v31;
      int v32 = *v19++;
      v9[v30] = v32;
      --v27;
    }
    while (v27);
    do
    {
      unsigned int v33 = *v9++;
      unint64_t v34 = ((unint64_t)v33 >> 20) & 0xFFC;
      uint64_t v35 = *(unsigned int *)((char *)&v37[4096] + v34);
      *(unsigned int *)((char *)&v37[4096] + v34) = v35 + 1;
      int v36 = *v3++;
      v7[v35] = v36;
      --v10;
    }
    while (v10);
  }
}

uint64_t reverse_order(uint64_t result, uint64_t a2, int a3)
{
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
      *(_DWORD *)(result + 4 * *(unsigned int *)(a2 + 4 * i)) = i;
  }
  return result;
}

char *ordered_memcpy(char *result, uint64_t a2, uint64_t a3, size_t __n, unint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = result;
    unint64_t v10 = 0;
    unsigned int v11 = 1;
    do
    {
      uint64_t result = (char *)memcpy(&v9[v10 * __n], (const void *)(a2 + *(unsigned int *)(a3 + 4 * v10) * __n), __n);
      unint64_t v10 = v11++;
    }
    while (v10 < a5);
  }
  return result;
}

void CGBitmapContext_fixIncorrectPremultiply(CGContext *a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  unsigned int Width = CGBitmapContextGetWidth(a1);
  int Height = CGBitmapContextGetHeight(a1);
  Data = (unsigned int *)CGBitmapContextGetData(a1);
  if (Data)
  {
    unsigned int v5 = Data;
    size_t BitsPerComponent = CGBitmapContextGetBitsPerComponent(a1);
    size_t v7 = CGBitmapContextGetBitsPerPixel(a1) / BitsPerComponent * BitsPerComponent;
    size_t BytesPerRow = CGBitmapContextGetBytesPerRow(a1);
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0x20)
    {
      size_t v9 = BytesPerRow;
      uint64_t v10 = 0;
      uint32x4_t v11 = (uint32x4_t)xmmword_1B6E4B1B0;
      uint32x4_t v12 = (uint32x4_t)xmmword_1B6E4B1C0;
      uint32x4_t v13 = (uint32x4_t)xmmword_1B6E4B190;
      uint32x4_t v14 = (uint32x4_t)xmmword_1B6E4B1A0;
      float32x4_t v46 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        int32x4_t v47 = (int32x4_t)v14;
        int32x4_t v48 = (int32x4_t)v12;
        int32x4_t v45 = (int32x4_t)v13;
        int32x4_t v49 = (int32x4_t)v11;
        float32x4_t v50 = vdivq_f32(vcvtq_f32_u32(v12), v46);
        float32x4_t v53 = vdivq_f32(vcvtq_f32_u32(v11), v46);
        float32x4_t v54 = vdivq_f32(vcvtq_f32_u32(v13), v46);
        float32x4_t v58 = vdivq_f32(vcvtq_f32_u32(v14), v46);
        float v62 = powf(v58.f32[1], 0.45455);
        v15.f32[0] = powf(v58.f32[0], 0.45455);
        v15.f32[1] = v62;
        float32x4_t v63 = v15;
        float v16 = powf(v58.f32[2], 0.45455);
        float32x4_t v17 = v63;
        v17.f32[2] = v16;
        float32x4_t v64 = v17;
        float v18 = powf(v58.f32[3], 0.45455);
        float32x4_t v19 = v64;
        v19.f32[3] = v18;
        float32x4_t v65 = v19;
        v58.i32[0] = powf(v54.f32[1], 0.45455);
        v20.f32[0] = powf(v54.f32[0], 0.45455);
        v20.i32[1] = v58.i32[0];
        float32x4_t v59 = v20;
        float v21 = powf(v54.f32[2], 0.45455);
        float32x4_t v22 = v59;
        v22.f32[2] = v21;
        float32x4_t v60 = v22;
        float v23 = powf(v54.f32[3], 0.45455);
        float32x4_t v24 = v60;
        v24.f32[3] = v23;
        float32x4_t v61 = v24;
        v54.i32[0] = powf(v50.f32[1], 0.45455);
        v25.f32[0] = powf(v50.f32[0], 0.45455);
        v25.i32[1] = v54.i32[0];
        float32x4_t v55 = v25;
        float v26 = powf(v50.f32[2], 0.45455);
        float32x4_t v27 = v55;
        v27.f32[2] = v26;
        float32x4_t v56 = v27;
        float v28 = powf(v50.f32[3], 0.45455);
        float32x4_t v29 = v56;
        v29.f32[3] = v28;
        float32x4_t v57 = v29;
        v50.i32[0] = powf(v53.f32[1], 0.45455);
        v30.f32[0] = powf(v53.f32[0], 0.45455);
        v30.i32[1] = v50.i32[0];
        float32x4_t v51 = v30;
        float v31 = powf(v53.f32[2], 0.45455);
        float32x4_t v32 = v51;
        v32.f32[2] = v31;
        float32x4_t v52 = v32;
        float v33 = powf(v53.f32[3], 0.45455);
        float32x4_t v34 = v52;
        v34.f32[3] = v33;
        v35.i64[0] = 0x3F0000003F000000;
        v35.i64[1] = 0x3F0000003F000000;
        float32x4_t v36 = vmlaq_f32(v35, v46, v34);
        v34.i64[0] = 0x3F0000003F000000;
        v34.i64[1] = 0x3F0000003F000000;
        v37.i64[0] = 0x3F0000003F000000;
        v37.i64[1] = 0x3F0000003F000000;
        v38.i64[0] = 0x3F0000003F000000;
        v38.i64[1] = 0x3F0000003F000000;
        *(int16x4_t *)v38.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v38, v46, v65)));
        *(int16x4_t *)&v38.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v37, v46, v61)));
        *(int16x4_t *)v34.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v34, v46, v57)));
        *(int16x4_t *)&v34.u32[2] = vmovn_s32(vcvtq_s32_f32(v36));
        *(int8x16_t *)&v66[v10] = vuzp1q_s8((int8x16_t)v38, (int8x16_t)v34);
        v10 += 16;
        v39.i64[0] = 0x1000000010;
        v39.i64[1] = 0x1000000010;
        uint32x4_t v14 = (uint32x4_t)vaddq_s32(v47, v39);
        uint32x4_t v13 = (uint32x4_t)vaddq_s32(v45, v39);
        uint32x4_t v12 = (uint32x4_t)vaddq_s32(v48, v39);
        uint32x4_t v11 = (uint32x4_t)vaddq_s32(v49, v39);
      }
      while (v10 != 256);
      if (Height)
      {
        uint64_t v40 = 0;
        do
        {
          uint64_t v41 = Width;
          float32x4_t v42 = v5;
          if (Width)
          {
            do
            {
              unint64_t v43 = *v42;
              if (HIBYTE(*v42))
              {
                if (HIBYTE(*v42) != 255)
                {
                  int v44 = v66[v43 >> 24];
                  *float32x4_t v42 = *v42 & 0xFF000000 | (*v42 * v44 / BYTE3(v43)) | (unsigned __int16)((BYTE1(*v42) * v44 / BYTE3(v43)) << 8) | ((BYTE2(*v42) * v44 / BYTE3(v43)) << 16);
                }
              }
              ++v42;
              --v41;
            }
            while (v41);
          }
          ++v40;
          unsigned int v5 = (unsigned int *)((char *)v5 + v9);
        }
        while (v40 != Height);
      }
    }
  }
}

void CGBitmapContext_gammaizeAlpha(CGContext *a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  unsigned int Width = CGBitmapContextGetWidth(a1);
  int Height = CGBitmapContextGetHeight(a1);
  Data = (char *)CGBitmapContextGetData(a1);
  if (Data)
  {
    unsigned int v5 = Data;
    size_t BitsPerComponent = CGBitmapContextGetBitsPerComponent(a1);
    size_t v7 = CGBitmapContextGetBitsPerPixel(a1) / BitsPerComponent * BitsPerComponent;
    size_t BytesPerRow = CGBitmapContextGetBytesPerRow(a1);
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0x20)
    {
      size_t v9 = BytesPerRow;
      uint64_t v10 = 0;
      uint32x4_t v11 = (uint32x4_t)xmmword_1B6E4B1B0;
      uint32x4_t v12 = (uint32x4_t)xmmword_1B6E4B1C0;
      uint32x4_t v13 = (uint32x4_t)xmmword_1B6E4B190;
      uint32x4_t v14 = (uint32x4_t)xmmword_1B6E4B1A0;
      float32x4_t v44 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        int32x4_t v45 = (int32x4_t)v14;
        int32x4_t v46 = (int32x4_t)v12;
        int32x4_t v43 = (int32x4_t)v13;
        int32x4_t v47 = (int32x4_t)v11;
        float32x4_t v48 = vdivq_f32(vcvtq_f32_u32(v12), v44);
        float32x4_t v51 = vdivq_f32(vcvtq_f32_u32(v11), v44);
        float32x4_t v52 = vdivq_f32(vcvtq_f32_u32(v13), v44);
        float32x4_t v56 = vdivq_f32(vcvtq_f32_u32(v14), v44);
        float v60 = powf(v56.f32[1], 2.2);
        v15.f32[0] = powf(v56.f32[0], 2.2);
        v15.f32[1] = v60;
        float32x4_t v61 = v15;
        float v16 = powf(v56.f32[2], 2.2);
        float32x4_t v17 = v61;
        v17.f32[2] = v16;
        float32x4_t v62 = v17;
        float v18 = powf(v56.f32[3], 2.2);
        float32x4_t v19 = v62;
        v19.f32[3] = v18;
        float32x4_t v63 = v19;
        v56.i32[0] = powf(v52.f32[1], 2.2);
        v20.f32[0] = powf(v52.f32[0], 2.2);
        v20.i32[1] = v56.i32[0];
        float32x4_t v57 = v20;
        float v21 = powf(v52.f32[2], 2.2);
        float32x4_t v22 = v57;
        v22.f32[2] = v21;
        float32x4_t v58 = v22;
        float v23 = powf(v52.f32[3], 2.2);
        float32x4_t v24 = v58;
        v24.f32[3] = v23;
        float32x4_t v59 = v24;
        v52.i32[0] = powf(v48.f32[1], 2.2);
        v25.f32[0] = powf(v48.f32[0], 2.2);
        v25.i32[1] = v52.i32[0];
        float32x4_t v53 = v25;
        float v26 = powf(v48.f32[2], 2.2);
        float32x4_t v27 = v53;
        v27.f32[2] = v26;
        float32x4_t v54 = v27;
        float v28 = powf(v48.f32[3], 2.2);
        float32x4_t v29 = v54;
        v29.f32[3] = v28;
        float32x4_t v55 = v29;
        v48.i32[0] = powf(v51.f32[1], 2.2);
        v30.f32[0] = powf(v51.f32[0], 2.2);
        v30.i32[1] = v48.i32[0];
        float32x4_t v49 = v30;
        float v31 = powf(v51.f32[2], 2.2);
        float32x4_t v32 = v49;
        v32.f32[2] = v31;
        float32x4_t v50 = v32;
        float v33 = powf(v51.f32[3], 2.2);
        float32x4_t v34 = v50;
        v34.f32[3] = v33;
        v35.i64[0] = 0x3F0000003F000000;
        v35.i64[1] = 0x3F0000003F000000;
        float32x4_t v36 = vmlaq_f32(v35, v44, v34);
        v34.i64[0] = 0x3F0000003F000000;
        v34.i64[1] = 0x3F0000003F000000;
        v37.i64[0] = 0x3F0000003F000000;
        v37.i64[1] = 0x3F0000003F000000;
        v38.i64[0] = 0x3F0000003F000000;
        v38.i64[1] = 0x3F0000003F000000;
        *(int16x4_t *)v38.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v38, v44, v63)));
        *(int16x4_t *)&v38.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v37, v44, v59)));
        *(int16x4_t *)v34.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v34, v44, v55)));
        *(int16x4_t *)&v34.u32[2] = vmovn_s32(vcvtq_s32_f32(v36));
        *(int8x16_t *)&v64[v10] = vuzp1q_s8((int8x16_t)v38, (int8x16_t)v34);
        v10 += 16;
        v39.i64[0] = 0x1000000010;
        v39.i64[1] = 0x1000000010;
        uint32x4_t v14 = (uint32x4_t)vaddq_s32(v45, v39);
        uint32x4_t v13 = (uint32x4_t)vaddq_s32(v43, v39);
        uint32x4_t v12 = (uint32x4_t)vaddq_s32(v46, v39);
        uint32x4_t v11 = (uint32x4_t)vaddq_s32(v47, v39);
      }
      while (v10 != 256);
      if (Height)
      {
        uint64_t v40 = 0;
        do
        {
          uint64_t v41 = Width;
          float32x4_t v42 = v5;
          if (Width)
          {
            do
            {
              v42[3] = v64[v42[3]];
              v42 += 4;
              --v41;
            }
            while (v41);
          }
          ++v40;
          v5 += v9;
        }
        while (v40 != Height);
      }
    }
  }
}